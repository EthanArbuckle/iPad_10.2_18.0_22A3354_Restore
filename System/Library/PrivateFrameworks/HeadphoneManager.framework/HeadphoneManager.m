Swift::UInt8 *HPS_CBDevice_Addition_Key.unsafeMutableAddressor()
{
  return &HPS_CBDevice_Addition_Key;
}

uint64_t CBDevice.replayDevice.getter()
{
  void *v0;
  id v1;
  uint64_t v4;
  uint64_t v5;
  Swift::UInt8 *key;
  id v7;
  _BYTE v8[32];
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *v16;

  v10 = 0;
  v16 = v0;
  v1 = v0;
  key = HPS_CBDevice_Addition_Key.unsafeMutableAddressor();
  swift_beginAccess();
  v7 = objc_getAssociatedObject(v0, key);
  swift_endAccess();
  swift_unknownObjectRelease();
  if (v7)
  {
    _bridgeAnyObjectToAny(_:)();
    outlined init with take of Any((uint64_t)v8, (uint64_t)&v11);
    swift_unknownObjectRelease();
  }
  else
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
  }
  outlined init with take of Any?(&v11, &v14);
  if (v15)
  {
    type metadata accessor for ReplayData();
    if ((swift_dynamicCast() & 1) != 0)
      v5 = v9;
    else
      v5 = 0;
    v4 = v5;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v14);
    v4 = 0;
  }
  if (v4)
  {
    v10 = v4;
    return v4;
  }
  else
  {
    type metadata accessor for ReplayData();
    return ReplayData.__allocating_init()();
  }
}

_OWORD *outlined init with take of Any?(_OWORD *a1, _OWORD *a2)
{
  *a2 = *a1;
  a2[1] = a1[1];
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    __swift_destroy_boxed_opaque_existential_0(a1);
  return a1;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

__n128 outlined init with take of Any(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t CBDevice.replayDevice.setter(void *a1)
{
  void *v1;
  id v2;
  Swift::UInt8 *key;

  v2 = v1;
  key = HPS_CBDevice_Addition_Key.unsafeMutableAddressor();
  swift_retain();
  swift_beginAccess();
  objc_setAssociatedObject(v1, key, a1, (void *)1);
  swift_endAccess();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t (*CBDevice.replayDevice.modify(uint64_t *a1))(void **a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = CBDevice.replayDevice.getter();
  return CBDevice.replayDevice.modify;
}

uint64_t CBDevice.replayDevice.modify(void **a1, char a2)
{
  void *v3;

  if ((a2 & 1) == 0)
    return CBDevice.replayDevice.setter(*a1);
  v3 = *a1;
  swift_retain();
  CBDevice.replayDevice.setter(v3);
  return swift_release();
}

uint64_t Data.init(hexString:)()
{
  Swift::String v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = 0;
  v5 = 0;
  swift_bridgeObjectRetain();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("0x", 2uLL, 1);
  String.hasPrefix(_:)(v0);
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type String and conformance String();
  Collection.dropFirst(_:)();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  Sequence.compactMap<A>(_:)();
  outlined destroy of Substring();
  String.count.getter();
  Data.init(capacity:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (data: Data, byte: UInt8?));
  lazy protocol witness table accessor for type [UInt8] and conformance [A]();
  Sequence.reduce<A>(into:_:)();
  outlined destroy of [UInt8]();
  outlined copy of Data._Representation(v2, v3);
  v4 = v2;
  v5 = v3;
  swift_bridgeObjectRelease();
  outlined destroy of Data((uint64_t)&v4);
  return v2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE0D40], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BDCFB40], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
    return v0;
  }
  return v2;
}

uint64_t closure #1 in Data.init(hexString:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  Character.hexDigitValue.getter();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  result = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #1 in closure #1 in Data.init(hexString:), 0, v1, MEMORY[0x24BEE4078], MEMORY[0x24BEE4260], v5, a1);
  if (v4)
    __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE1E20], MEMORY[0x24BEE1E08]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
    return v0;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Substring()
{
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in closure #1 in Data.init(hexString:)()
{
  lazy protocol witness table accessor for type UInt8 and conformance UInt8();
  lazy protocol witness table accessor for type UInt8 and conformance UInt8();
  lazy protocol witness table accessor for type Int and conformance Int();
  return UnsignedInteger<>.init<A>(_:)();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  void (*v19)(char *, char *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v18 = a7;
  v19 = a1;
  v20 = a2;
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v25 = a6;
  v37 = a4;
  v36 = a5;
  v26 = *(_QWORD *)(a4 - 8);
  v27 = (*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v7, a2);
  v28 = (char *)v17 - v27;
  v33 = *(_QWORD *)(v9 + 16);
  v35 = v33;
  v32 = *(_QWORD *)(v33 - 8);
  v29 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v8, (char *)v17 - v27);
  v30 = (char *)v17 - v29;
  v31 = (*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = (const void *)MEMORY[0x24BDAC7A8](v10, (char *)v17 - v29);
  v34 = (char *)v17 - v31;
  _sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(v12, (char *)v17 - v31, v13, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 1);
    v17[1] = v24;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v30, v34, v33);
    v16 = v24;
    v19(v30, v28);
    v17[0] = v16;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v30, v33);
    if (v16)
    {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v26 + 32))(v25, v28, v22);
    }
    else
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v18, 0, 1);
      return v17[0];
    }
  }
  return result;
}

uint64_t closure #2 in Data.init(hexString:)(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  v3 = *a2;
  if ((*(_BYTE *)(result + 17) & 1) != 0)
  {
    *(_BYTE *)(result + 16) = 16 * v3;
    *(_BYTE *)(result + 17) = 0;
  }
  else if (v3 + *(unsigned __int8 *)(result + 16) == (v3 + *(_BYTE *)(result + 16)))
  {
    lazy protocol witness table accessor for type Data and conformance Data();
    result = RangeReplaceableCollection.append(_:)();
    *(_BYTE *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 17) = 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x24263B680]((char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type [UInt8] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [UInt8] and conformance [A];
  if (!lazy protocol witness table cache variable for type [UInt8] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [UInt8]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [UInt8] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  if (*a1 < 0)
  {
    v2 = MEMORY[0x24263B68C](255, (char *)a1 + (int)*a1, -(*a1 >> 32), 0);
    *a1 = v2;
    return v2;
  }
  return v4;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [UInt8]()
{
  swift_bridgeObjectRelease();
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_retain();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Data(uint64_t a1)
{
  outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (((a2 >> 62) & 3) == 1)
    return swift_release();
  if (((a2 >> 62) & 3) == 2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t variable initialization expression of CodableIgnored.wrappedValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1);
}

void *CodableIgnored.wrappedValue.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  const void *v6;

  v4 = *(_QWORD *)(a1 + 16);
  v2 = type metadata accessor for Optional();
  return outlined init with copy of A?(v6, a2, v4, v2);
}

void *outlined init with copy of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t CodableIgnored.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;

  v13 = a1;
  v15 = 0;
  v14 = 0;
  v11 = *(_QWORD *)(a2 + 16);
  v16 = v11;
  v12 = type metadata accessor for Optional();
  v8 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v7 - v8;
  v15 = (const void *)MEMORY[0x24BDAC7A8](v13, v3);
  v14 = v2;
  outlined init with copy of A?(v15, (char *)&v7 - v8, v4, v5);
  outlined assign with take of A?(v10, v9, v11, v12);
  return outlined destroy of A?(v13, v11);
}

void *outlined assign with take of A?(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  unsigned int (*v10)(void);

  v9 = *(_QWORD *)(a3 - 8);
  v10 = *(unsigned int (**)(void))(v9 + 48);
  if (v10())
  {
    if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
    {
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a2, a1, a3);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
    }
  }
  else if (((unsigned int (*)(const void *, uint64_t, uint64_t))v10)(a1, 1, a3))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a2, a3);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a2, a1, a3);
  }
  return a2;
}

uint64_t outlined destroy of A?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

void (*CodableIgnored.wrappedValue.modify())()
{
  return CodableIgnored.wrappedValue.modify;
}

uint64_t CodableIgnored.init(wrappedValue:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  unint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v14 = a3;
  v15 = a1;
  v16 = a2;
  v21 = 0;
  v20 = 0;
  v22 = a2;
  v10[1] = 0;
  v17 = type metadata accessor for Optional();
  v11 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](0, v16);
  v13 = (char *)v10 - v11;
  v18 = type metadata accessor for CodableIgnored(v3, v4, (uint64_t)v10 - v11, v5);
  v12 = (*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18, v6);
  v19 = (char *)v10 - v12;
  v21 = (char *)v10 - v12;
  v20 = v7;
  (*(void (**)(void))(*(_QWORD *)(v8 - 8) + 56))();
  outlined init with copy of A?(v15, v13, v16, v17);
  outlined assign with take of A?(v13, v19, v16, v17);
  outlined init with copy of CodableIgnored<A>(v19, v14, v16, v17);
  outlined destroy of A?((uint64_t)v15, v16);
  return outlined destroy of CodableIgnored<A>((uint64_t)v19, v16);
}

uint64_t type metadata accessor for CodableIgnored(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for CodableIgnored);
}

void *outlined init with copy of CodableIgnored<A>(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

uint64_t outlined destroy of CodableIgnored<A>(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

uint64_t CodableIgnored.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  void (*v14)(void);
  char *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;

  v16 = a3;
  v17 = a1;
  v19 = a2;
  v23 = 0;
  v22 = 0;
  v24 = a2;
  v10 = 0;
  v20 = type metadata accessor for Optional();
  v11 = (*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](0, v19);
  v15 = (char *)&v10 - v11;
  v21 = type metadata accessor for CodableIgnored(v3, v4, (uint64_t)&v10 - v11, v5);
  v12 = (*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21, v6);
  v18 = (char *)&v10 - v12;
  v23 = (char *)&v10 - v12;
  v22 = v7;
  v14 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 56);
  v13 = 1;
  v14();
  ((void (*)(char *, _QWORD, _QWORD, uint64_t))v14)(v15, v13, v13, v19);
  outlined assign with take of A?(v15, v18, v19, v20);
  outlined init with copy of CodableIgnored<A>(v18, v16, v19, v20);
  __swift_destroy_boxed_opaque_existential_1(v17);
  return outlined destroy of CodableIgnored<A>((uint64_t)v18, v19);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if ((*(_DWORD *)(*(_QWORD *)(v2 - 8) + 80) & 0x20000) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1);
}

uint64_t protocol witness for Decodable.init(from:) in conformance CodableIgnored<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return CodableIgnored.init(from:)(a1, *(_QWORD *)(a2 + 16), a3);
}

void protocol witness for Encodable.encode(to:) in conformance CodableIgnored<A>()
{
  CodableIgnored.encode(to:)();
}

uint64_t DefaultsObserver.publisher.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v6 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher);
  swift_beginAccess();
  v7 = *v6;
  swift_retain();
  swift_endAccess();
  if (v7)
    return v7;
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<NSUserDefaults, Never>);
  lazy protocol witness table accessor for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>();
  v3 = Publisher.eraseToAnyPublisher()();
  swift_release();
  swift_retain();
  v2 = (uint64_t *)(v5 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher);
  swift_beginAccess();
  *v2 = v3;
  swift_release();
  swift_endAccess();
  return v3;
}

unint64_t lazy protocol witness table accessor for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>;
  if (!lazy protocol witness table cache variable for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<NSUserDefaults, Never>);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDB9D10], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CurrentValueSubject<NSUserDefaults, Never> and conformance CurrentValueSubject<A, B>);
    return v1;
  }
  return v3;
}

uint64_t DefaultsObserver.publisher.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_retain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher);
  swift_beginAccess();
  *v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*DefaultsObserver.publisher.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = DefaultsObserver.publisher.getter();
  return DefaultsObserver.publisher.modify;
}

uint64_t DefaultsObserver.publisher.modify(uint64_t *a1, char a2)
{
  uint64_t result;
  uint64_t v3;

  if ((a2 & 1) == 0)
    return DefaultsObserver.publisher.setter(*a1);
  v3 = *a1;
  swift_retain();
  DefaultsObserver.publisher.setter(v3);
  result = (uint64_t)a1;
  outlined destroy of AnyPublisher<NSUserDefaults, Never>();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AnyPublisher<NSUserDefaults, Never>()
{
  swift_release();
}

uint64_t variable initialization expression of DefaultsObserver.$__lazy_storage_$_publisher()
{
  return 0;
}

char *DefaultsObserver.__allocating_init(withDefault:)(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return DefaultsObserver.init(withDefault:)(a1);
}

char *DefaultsObserver.init(withDefault:)(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  char *v10;
  char *v11;
  char *v12;
  id v13;
  uint64_t countAndFlagsBits;
  void *v16;
  uint64_t v17;
  id v18;
  id v19;
  char *v20;
  uint64_t v23;
  objc_super v24;
  void *v25;
  void *v26;
  void *v27;
  char *v28;

  v26 = 0;
  v27 = a1;
  v2 = v1;
  v3 = v1;
  v4 = v1;
  v5 = v1;
  v6 = v1;
  v28 = v1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver____lazy_storage___publisher] = 0;

  v7 = a1;
  if (a1)
  {
    v26 = a1;
    v8 = a1;
    *(_QWORD *)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults] = a1;

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CurrentValueSubject<NSUserDefaults, Never>);
    v16 = *(void **)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults];
    v9 = v16;
    v25 = v16;
    v17 = CurrentValueSubject.__allocating_init(_:)();

    *(_QWORD *)&v1[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_updatesSubject] = v17;
    v24.receiver = v28;
    v24.super_class = (Class)type metadata accessor for DefaultsObserver();
    v20 = (char *)objc_msgSendSuper2(&v24, sel_init);
    v10 = v20;
    v11 = v20;
    v12 = v20;
    v28 = v20;
    v19 = *(id *)&v20[OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults];
    v13 = v19;
    countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("root", 4uLL, 1)._countAndFlagsBits;
    v18 = (id)MEMORY[0x24263ADA4](countAndFlagsBits);
    swift_bridgeObjectRelease();
    type metadata accessor for NSKeyValueObservingOptions();
    _allocateUninitializedArray<A>(_:)();
    lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
    SetAlgebra<>.init(arrayLiteral:)();
    objc_msgSend(v19, sel_addObserver_forKeyPath_options_context_, v20, v18, v23, 0);

    return v20;
  }
  else
  {

    outlined destroy of AnyPublisher<NSUserDefaults, Never>?();
    type metadata accessor for DefaultsObserver();
    swift_deallocPartialClassInstance();
    return 0;
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AnyPublisher<NSUserDefaults, Never>?()
{
  swift_release();
}

uint64_t type metadata accessor for DefaultsObserver()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for NSKeyValueObservingOptions()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSKeyValueObservingOptions;
  if (!lazy cache variable for type metadata for NSKeyValueObservingOptions)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSKeyValueObservingOptions);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    v0 = type metadata accessor for NSKeyValueObservingOptions();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueObservingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    v0 = type metadata accessor for NSKeyValueObservingOptions();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueObservingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    v0 = type metadata accessor for NSKeyValueObservingOptions();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueObservingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    v0 = type metadata accessor for NSKeyValueObservingOptions();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueObservingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions;
  if (!lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions)
  {
    v0 = type metadata accessor for NSKeyValueObservingOptions();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueObservingOptions, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions);
    return v1;
  }
  return v3;
}

uint64_t DefaultsObserver.observeValue(forKeyPath:of:change:context:)()
{
  id v0;
  uint64_t v2;
  void *v3;

  swift_retain();
  v3 = *(void **)(v2 + OBJC_IVAR____TtC16HeadphoneManager16DefaultsObserver_defaults);
  v0 = v3;
  CurrentValueSubject.send(_:)();

  return swift_release();
}

uint64_t type metadata accessor for NSKeyValueChangeKey()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for NSKeyValueChangeKey;
  if (!lazy cache variable for type metadata for NSKeyValueChangeKey)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for NSKeyValueChangeKey);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    v0 = type metadata accessor for NSKeyValueChangeKey();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueChangeKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    v0 = type metadata accessor for NSKeyValueChangeKey();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueChangeKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    v0 = type metadata accessor for NSKeyValueChangeKey();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueChangeKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    v0 = type metadata accessor for NSKeyValueChangeKey();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueChangeKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey;
  if (!lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey)
  {
    v0 = type metadata accessor for NSKeyValueChangeKey();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for NSKeyValueChangeKey, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey);
    return v1;
  }
  return v3;
}

id DefaultsObserver.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t DefaultsObserver.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"HeadphoneManager.DefaultsObserver")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"HeadphoneManager.DefaultsObserver", 33, (unint64_t)"init()", 6, 2, (unint64_t)"HeadphoneManager/ReplayExtensionsAndHelpers.swift", 49, 2, v1, 0x44uLL, 7uLL);
  __break(1u);
  return result;
}

id DefaultsObserver.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultsObserver();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void *AudioAccessoryContainerDevice._cbDevice.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice);
  v1 = v3;
  return v3;
}

id AudioAccessoryContainerDevice.__allocating_init(withCBDevice:)(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return AudioAccessoryContainerDevice.init(withCBDevice:)(a1);
}

id AudioAccessoryContainerDevice.init(withCBDevice:)(void *a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;
  char *v6;
  id v8;
  objc_super v9;
  void *v10;
  id v11;

  v10 = a1;
  v2 = v1;
  v11 = v1;
  v3 = a1;
  *(_QWORD *)&v6[OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice] = a1;

  v9.receiver = v11;
  v9.super_class = (Class)type metadata accessor for AudioAccessoryContainerDevice();
  v8 = objc_msgSendSuper2(&v9, sel_init);
  v4 = v8;
  v11 = v8;

  return v8;
}

id AudioAccessoryContainerDevice.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id AudioAccessoryContainerDevice.init(coder:)(void *a1)
{
  char *v1;
  char *v2;
  id v3;
  id v7;
  objc_super v8;
  void *v9;
  id v10;

  v9 = a1;
  v2 = v1;
  v10 = v1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice] = 0;

  v8.receiver = v10;
  v8.super_class = (Class)type metadata accessor for AudioAccessoryContainerDevice();
  v7 = objc_msgSendSuper2(&v8, sel_initWithCoder_, a1);
  if (v7)
  {
    v3 = v7;
    v10 = v7;

    return v7;
  }
  else
  {

    return 0;
  }
}

void *AudioAccessoryContainerDevice.coreBluetoothDevice.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice);
  v1 = v3;
  return v3;
}

id AudioAccessoryContainerDevice.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t AudioAccessoryContainerDevice.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"HeadphoneManager.AudioAccessoryContainerDevice")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"HeadphoneManager.AudioAccessoryContainerDevice", 46, (unint64_t)"init()", 6, 2, (unint64_t)"HeadphoneManager/ReplayExtensionsAndHelpers.swift", 49, 2, v1, 0x58uLL, 7uLL);
  __break(1u);
  return result;
}

id AudioAccessoryContainerDevice.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AudioAccessoryContainerDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id ReplayAudioAccessoryDevice.__allocating_init(withCBDevice:)(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return ReplayAudioAccessoryDevice.init(withCBDevice:)(a1);
}

id ReplayAudioAccessoryDevice.init(withCBDevice:)(void *a1)
{
  id v1;
  id v2;
  id v5;

  v1 = a1;
  v5 = AudioAccessoryContainerDevice.init(withCBDevice:)(a1);
  v2 = v5;

  return v5;
}

id ReplayAudioAccessoryDevice.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v4;

  v4 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v4;
}

id ReplayAudioAccessoryDevice.init(coder:)(void *a1)
{
  id v1;
  id v5;
  objc_super v6;
  void *v7;
  id v8;

  v8 = 0;
  v7 = a1;
  v6.receiver = 0;
  v6.super_class = (Class)type metadata accessor for ReplayAudioAccessoryDevice();
  v5 = objc_msgSendSuper2(&v6, sel_initWithCoder_, a1);
  if (v5)
  {
    v1 = v5;
    v8 = v5;

    return v5;
  }
  else
  {

    return 0;
  }
}

id ReplayAudioAccessoryDevice.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ReplayAudioAccessoryDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

char *AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(void *a1, uint64_t a2)
{
  id v2;
  id v3;
  id v5;

  type metadata accessor for HeadphoneDevice();
  v2 = v5;
  v3 = a1;
  swift_unknownObjectRetain();
  return HeadphoneDevice.__allocating_init(_aaDevice:cbDevice:delegate:)(v5, a1, a2);
}

char *@objc AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v5;
  id v6;
  char *v11;

  swift_getObjectType();
  v5 = a3;
  swift_unknownObjectRetain();
  v6 = a1;
  v11 = AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(a3, a4);

  swift_unknownObjectRelease();
  return v11;
}

id protocol witness for HeadphoneDeviceConstructable.headphoneDevice(cbDevice:withDelegate:) in conformance AudioAccessoryDevice(void *a1, uint64_t a2)
{
  return dynamic AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(a1, a2);
}

id dynamic AudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)(void *a1, uint64_t a2)
{
  id v2;
  id v3;
  id v5;
  id v8;

  v2 = a1;
  swift_unknownObjectRetain();
  v3 = v5;
  v8 = objc_msgSend(v5, sel_headphoneDeviceWithCbDevice_withDelegate_, a1, a2);

  swift_unknownObjectRelease();
  return v8;
}

id ReplayAudioAccessoryDevice.headphoneDevice(cbDevice:withDelegate:)()
{
  char *v0;
  char *v1;
  id v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  id v8;
  unint64_t v10;
  uint64_t v11;
  id *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  type metadata accessor for HeadphoneReplayDevice();
  v1 = v0;
  v19 = *(void **)&v0[OBJC_IVAR____TtC16HeadphoneManager29AudioAccessoryContainerDevice__cbDevice];
  v2 = v19;

  if (v19)
  {
    v17 = v19;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  swift_unknownObjectRetain();
  v20 = HeadphoneDevice.__allocating_init(cbDevice:delegate:)(v17);
  v3 = v20;
  swift_bridgeObjectRetain();

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", 1uLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v10 = lazy protocol witness table accessor for type String and conformance String();
  v11 = MEMORY[0x24BEE0D00];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v14 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v16 = v4;
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();
  v12 = (id *)HeadphoneDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  v5 = *v12;
  v13 = *v12;
  v6 = *v12;
  v7 = swift_endAccess();
  v15 = (id)(*(uint64_t (**)(uint64_t))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x140))(v7);

  v8 = v20;
  swift_bridgeObjectRetain();
  MEMORY[0x24263ADA4](v14, v16);
  objc_msgSend(v15, sel_setObject_forKey_, v20, v11, v10, v10, v10);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v20;
}

uint64_t default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return 0;
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  lazy protocol witness table accessor for type UInt and conformance UInt();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance NSKeyValueObservingOptions()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  return _SwiftNewtypeWrapper<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  return _SwiftNewtypeWrapper<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  return _SwiftNewtypeWrapper<>._rawHashValue(seed:)();
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  lazy protocol witness table accessor for type String and conformance String();
  return _SwiftNewtypeWrapper<>._bridgeToObjectiveC()();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  lazy protocol witness table accessor for type String and conformance String();
  return static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  lazy protocol witness table accessor for type String and conformance String();
  return static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)() & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  lazy protocol witness table accessor for type String and conformance String();
  return static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance NSKeyValueObservingOptions()
{
  lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
  return SetAlgebra<>.init(arrayLiteral:)();
}

__C::NSKeyValueObservingOptions protocol witness for OptionSet.init(rawValue:) in conformance NSKeyValueObservingOptions@<X0>(Swift::UInt *a1@<X0>, __C::NSKeyValueObservingOptions *a2@<X8>)
{
  __C::NSKeyValueObservingOptions result;

  result.rawValue = NSKeyValueObservingOptions.init(rawValue:)(*a1).rawValue;
  a2->rawValue = result.rawValue;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  return == infix<A>(_:_:)() & 1;
}

__C::NSKeyValueObservingOptions protocol witness for RawRepresentable.init(rawValue:) in conformance NSKeyValueObservingOptions@<X0>(Swift::UInt *a1@<X0>, uint64_t a2@<X8>)
{
  __C::NSKeyValueObservingOptions result;

  result.rawValue = NSKeyValueObservingOptions.init(rawValue:)(*a1).rawValue;
  *(__C::NSKeyValueObservingOptions *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSKeyValueObservingOptions@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = NSKeyValueObservingOptions.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

__C::NSKeyValueChangeKey protocol witness for RawRepresentable.init(rawValue:) in conformance NSKeyValueChangeKey@<X0>(Swift::String *a1@<X0>, __C::NSKeyValueChangeKey *a2@<X8>)
{
  __C::NSKeyValueChangeKey result;

  result._rawValue = NSKeyValueChangeKey.init(rawValue:)(*a1)._rawValue;
  a2->_rawValue = result._rawValue;
  return result;
}

__C::NSKeyValueChangeKey __swiftcall NSKeyValueChangeKey.init(rawValue:)(Swift::String rawValue)
{
  id v1;
  void *v4;

  swift_bridgeObjectRetain();
  v4 = (void *)MEMORY[0x24263ADA4](rawValue._countAndFlagsBits, rawValue._object);
  v1 = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return (__C::NSKeyValueChangeKey)v4;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance NSKeyValueChangeKey@<X0>(uint64_t *a1@<X8>)
{
  void **v1;
  uint64_t result;
  uint64_t v3;

  result = NSKeyValueChangeKey.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t NSKeyValueChangeKey.rawValue.getter(void *a1)
{
  id v1;
  uint64_t v4;

  v1 = a1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance NSKeyValueChangeKey()
{
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)(uint64_t (*a1)(uint64_t *, uint64_t), uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;

  if (a3 < 0x80uLL)
  {
    if (a3 > 0xFF)
      goto LABEL_12;
    v5 = (a3 + 1);
  }
  else
  {
    v7 = (a3 & 0x3F) << 8;
    if (a3 >> 6 < 0x20uLL)
    {
      v5 = (v7 | (a3 >> 6)) + 33217;
    }
    else
    {
      v6 = (v7 | (a3 >> 6) & 0x3F) << 8;
      if (a3 >> 12 < 0x10uLL)
        v5 = (v6 | (a3 >> 12)) + 8487393;
      else
        v5 = ((a3 >> 18) | ((v6 | (a3 >> 12) & 0x3F) << 8)) - 2122219023;
    }
  }
  v4 = 4 - ((uint64_t)__clz(v5) >> 3);
  v8 = (v5 - 0x101010101010101) & ((1 << ((8 * v4) & 0x3F)) - 1);
  if (v4 >= 0)
    return a1(&v8, v4);
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_12:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unint64_t a10, unint64_t a11)
{
  unsigned int v11;
  uint64_t result;
  char v13[8];
  uint64_t v14;
  uint64_t (*v15)@<X0>(uint64_t@<X0>, uint64_t@<X1>, uint64_t@<X8>);
  char *v16;
  uint64_t v17[2];
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = a11;
  v30 = "Fatal error";
  v31 = "Unexpectedly found nil while unwrapping an Optional value";
  v32 = "Swift/StaticString.swift";
  v33 = "Not enough bits to represent the passed value";
  v34 = "Swift/Integers.swift";
  v35 = "UnsafeBufferPointer with negative count";
  v36 = "Swift/UnsafeBufferPointer.swift";
  v37 = 0;
  v39 = a6;
  v40 = a7;
  v41 = a8;
  v42 = a1;
  v43 = a2;
  v44 = a10;
  v45 = a11;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = v17;
        MEMORY[0x24BDAC7A8](v17, a2);
        v15 = partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v16 = &v38;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:), (uint64_t)v13, v11);
        return (uint64_t)v18;
      }
      v13[0] = 2;
      v14 = 148;
      LODWORD(v15) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v13[0] = 2;
    v14 = 3455;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v46 = v23;
  else
    v46 = 0;
  v17[0] = v46;
  if (!v46)
  {
    v13[0] = 2;
    v14 = 136;
    LODWORD(v15) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17[0], v24, v25, v26, v27, v21, v22, v28, v20, v29);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AudioAccessoryContainerDevice()
{
  return objc_opt_self();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CBDevice?(id *a1)
{

}

uint64_t type metadata accessor for ReplayAudioAccessoryDevice()
{
  return objc_opt_self();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String()
{
  swift_bridgeObjectRelease();
}

uint64_t type metadata instantiation function for CodableIgnored()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for CodableIgnored()
{
  unint64_t v0;
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for CodableIgnored(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(type metadata accessor for Optional() - 8);
  v11 = *(_DWORD *)(v10 + 80);
  if ((v11 & 0x20000) != 0)
  {
    v5 = *a2;
    swift_retain();
    *a1 = v5;
    return *a1 + ((v11 + 16) & ~(unint64_t)v11);
  }
  else
  {
    v4 = *(_QWORD *)(v9 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t))(v4 + 48))(a2, 1))
    {
      memcpy(a1, a2, *(_QWORD *)(v10 + 64));
    }
    else
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v9);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v9);
    }
    return (unint64_t)a1;
  }
}

uint64_t destroy for CodableIgnored(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return result;
}

void *initializeWithCopy for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void))(v8 + 48))())
  {
    v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithCopy for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (((unsigned int (*)(void *, uint64_t))v10)(a1, 1))
  {
    if (v10(a2, 1, v8))
    {
      v4 = type metadata accessor for Optional();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  else if (v10(a2, 1, v8))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 24))(a1, a2, v8);
  }
  return a1;
}

void *initializeWithTake for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void))(v8 + 48))())
  {
    v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
  }
  return a1;
}

void *assignWithTake for CodableIgnored(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);

  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48);
  if (((unsigned int (*)(void *, uint64_t))v10)(a1, 1))
  {
    if (v10(a2, 1, v8))
    {
      v4 = type metadata accessor for Optional();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
    }
  }
  else if (v10(a2, 1, v8))
  {
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    v3 = type metadata accessor for Optional();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 40))(a1, a2, v8);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for CodableIgnored()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DABB7A0(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 48))(a1, a2);
}

uint64_t storeEnumTagSinglePayload for CodableIgnored()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DABB804(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v2 - 8) + 56))(a1, a2);
}

unint64_t base witness table accessor for RawRepresentable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

unint64_t base witness table accessor for SetAlgebra in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

unint64_t base witness table accessor for RawRepresentable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
}

unint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
}

unint64_t base witness table accessor for Equatable in NSKeyValueChangeKey()
{
  return lazy protocol witness table accessor for type NSKeyValueChangeKey and conformance NSKeyValueChangeKey();
}

unint64_t base witness table accessor for Equatable in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in NSKeyValueObservingOptions()
{
  return lazy protocol witness table accessor for type NSKeyValueObservingOptions and conformance NSKeyValueObservingOptions();
}

unint64_t lazy protocol witness table accessor for type UInt and conformance UInt()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt and conformance UInt;
  if (!lazy protocol witness table cache variable for type UInt and conformance UInt)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE1EC8], MEMORY[0x24BEE1E88]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt and conformance UInt);
    return v0;
  }
  return v2;
}

uint64_t closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, unint64_t a10)
{
  unsigned int v10;
  uint64_t result;
  char v12[8];
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;

  v20 = a9;
  v21 = a1;
  v22 = a2;
  v23 = a3;
  v24 = a4;
  v25 = a6;
  v26 = a7;
  v27 = a8;
  v28 = a10;
  v29 = "Fatal error";
  v30 = "Unexpectedly found nil while unwrapping an Optional value";
  v31 = "Swift/StaticString.swift";
  v32 = "Not enough bits to represent the passed value";
  v33 = "Swift/Integers.swift";
  v34 = "UnsafeBufferPointer with negative count";
  v35 = "Swift/UnsafeBufferPointer.swift";
  v36 = 0;
  v38 = a6;
  v39 = a7;
  v40 = a1;
  v41 = a2;
  v42 = a8;
  v43 = a10;
  if ((a5 & 1) != 0)
  {
    if (v23 <= 0xFFFFFFFF)
    {
      v19 = v23;
      if ((v23 < 0xD800 || v19 > 0xDFFF) && v19 <= 0x10FFFF)
      {
        v18 = &v16;
        MEMORY[0x24BDAC7A8](&v16, a2);
        v14 = partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:);
        v15 = &v37;
        specialized Unicode.Scalar.withUTF8CodeUnits<A>(_:)((uint64_t (*)(uint64_t *, uint64_t))closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply, (uint64_t)v12, v10);
        return (uint64_t)v18;
      }
      v12[0] = 2;
      v13 = 148;
      LODWORD(v14) = 0;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    v12[0] = 2;
    v13 = 3455;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v23)
    v44 = v23;
  else
    v44 = 0;
  v17 = v44;
  if (!v44)
  {
    v12[0] = 2;
    v13 = 136;
    LODWORD(v14) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (v24 >= 0)
    return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(v17, v24, v25, v26, v21, v22, v27, v28);
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t partial apply for specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unint64_t a8)
{
  uint64_t result;

  if (!a3)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  if (a4 >= (uint64_t)0xFFFFFFFF80000000)
  {
    if (a4 <= 0x7FFFFFFF)
    {
      if (!a5)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      if (a6 >= (uint64_t)0xFFFFFFFF80000000)
      {
        if (a6 <= 0x7FFFFFFF)
        {
          if (!a1)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          if (a2 >= (uint64_t)0xFFFFFFFF80000000)
          {
            if (a2 <= 0x7FFFFFFF)
            {
              if (a7 <= 0xFFFFFFFF)
              {
                if (a8 <= 0xFFFFFFFF)
                  return _swift_stdlib_reportUnimplementedInitializerInFile();
                _assertionFailure(_:_:file:line:flags:)();
                __break(1u);
              }
              _assertionFailure(_:_:file:line:flags:)();
              __break(1u);
            }
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
          }
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t closure #1 in StaticString.withUTF8Buffer<A>(_:)specialized partial apply(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BDCDE50], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BDCDE60], MEMORY[0x24BDCDDE8]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
    return v0;
  }
  return v2;
}

void *_sxSgs5ErrorRd__Ri_d_0_r_0_lWOc(const void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v9 + 48))(a1, 1))
  {
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a2, a1, a3);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a2, 0, 1, a3);
  }
  return a2;
}

unint64_t lazy protocol witness table accessor for type UInt8 and conformance UInt8()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE42A0], MEMORY[0x24BEE4260]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt8 and conformance UInt8;
  if (!lazy protocol witness table cache variable for type UInt8 and conformance UInt8)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE4288], MEMORY[0x24BEE4260]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt8 and conformance UInt8);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE17B0], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE17C8], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
    return v0;
  }
  return v2;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24263B62C](a1, v6, a5);
}

uint64_t variable initialization expression of AADeviceModel.acceptReplyPlayPauseConfig()
{
  return 0;
}

uint64_t AADeviceModel.acceptReplyPlayPauseConfig.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AADeviceModel.acceptReplyPlayPauseConfig.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

void (*AADeviceModel.acceptReplyPlayPauseConfig.modify())()
{
  return AADeviceModel.acceptReplyPlayPauseConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.autoANCCapability()
{
  return 0;
}

uint64_t AADeviceModel.autoANCCapability.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t AADeviceModel.autoANCCapability.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  return result;
}

void (*AADeviceModel.autoANCCapability.modify())()
{
  return AADeviceModel.autoANCCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.autoANCStrength()
{
  return 0;
}

uint64_t AADeviceModel.autoANCStrength.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8);
}

uint64_t AADeviceModel.autoANCStrength.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  return result;
}

void (*AADeviceModel.autoANCStrength.modify())()
{
  return AADeviceModel.autoANCStrength.modify;
}

uint64_t variable initialization expression of AADeviceModel.bluetoothAddressData()
{
  return 0;
}

uint64_t AADeviceModel.bluetoothAddressData.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  outlined copy of Data?(v2, *(_QWORD *)(v0 + 24));
  return v2;
}

uint64_t outlined copy of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined copy of Data._Representation(result, a2);
  return result;
}

uint64_t AADeviceModel.bluetoothAddressData.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data?(a1, a2);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  outlined consume of Data?(v3, v4);
  return outlined consume of Data?(a1, a2);
}

uint64_t outlined consume of Data?(uint64_t result, unint64_t a2)
{
  if ((a2 & 0xF000000000000000) != 0xF000000000000000)
    return outlined consume of Data._Representation(result, a2);
  return result;
}

void (*AADeviceModel.bluetoothAddressData.modify())()
{
  return AADeviceModel.bluetoothAddressData.modify;
}

uint64_t variable initialization expression of AADeviceModel.bobbleCapability()
{
  return 0;
}

uint64_t AADeviceModel.bobbleCapability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t AADeviceModel.bobbleCapability.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = result;
  return result;
}

void (*AADeviceModel.bobbleCapability.modify())()
{
  return AADeviceModel.bobbleCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.bobbleConfig()
{
  return 0;
}

uint64_t AADeviceModel.bobbleConfig.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t AADeviceModel.bobbleConfig.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 33) = result;
  return result;
}

void (*AADeviceModel.bobbleConfig.modify())()
{
  return AADeviceModel.bobbleConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.caseSoundCapability()
{
  return 0;
}

uint64_t AADeviceModel.caseSoundCapability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t AADeviceModel.caseSoundCapability.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 34) = result;
  return result;
}

void (*AADeviceModel.caseSoundCapability.modify())()
{
  return AADeviceModel.caseSoundCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.declineDismissSkipConfig()
{
  return 0;
}

uint64_t AADeviceModel.declineDismissSkipConfig.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t AADeviceModel.declineDismissSkipConfig.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 35) = result;
  return result;
}

void (*AADeviceModel.declineDismissSkipConfig.modify())()
{
  return AADeviceModel.declineDismissSkipConfig.modify;
}

uint64_t variable initialization expression of AADeviceModel.earTipFitTestCapability()
{
  return 0;
}

uint64_t AADeviceModel.earTipFitTestCapability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t AADeviceModel.earTipFitTestCapability.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 36) = result;
  return result;
}

void (*AADeviceModel.earTipFitTestCapability.modify())()
{
  return AADeviceModel.earTipFitTestCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.frequencyBand()
{
  return 0;
}

uint64_t AADeviceModel.frequencyBand.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t AADeviceModel.frequencyBand.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 37) = result;
  return result;
}

void (*AADeviceModel.frequencyBand.modify())()
{
  return AADeviceModel.frequencyBand.modify;
}

uint64_t variable initialization expression of AADeviceModel.headGestureToggle()
{
  return 0;
}

uint64_t AADeviceModel.headGestureToggle.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 38);
}

uint64_t AADeviceModel.headGestureToggle.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 38) = result;
  return result;
}

void (*AADeviceModel.headGestureToggle.modify())()
{
  return AADeviceModel.headGestureToggle.modify;
}

uint64_t variable initialization expression of AADeviceModel.headGestureProxCardShown()
{
  return 0;
}

uint64_t AADeviceModel.headGestureProxCardShown.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 39);
}

uint64_t AADeviceModel.headGestureProxCardShown.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 39) = result;
  return result;
}

void (*AADeviceModel.headGestureProxCardShown.modify())()
{
  return AADeviceModel.headGestureProxCardShown.modify;
}

uint64_t variable initialization expression of AADeviceModel.heartRateMonitorEnabled()
{
  return 0;
}

uint64_t AADeviceModel.heartRateMonitorEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t AADeviceModel.heartRateMonitorEnabled.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

void (*AADeviceModel.heartRateMonitorEnabled.modify())()
{
  return AADeviceModel.heartRateMonitorEnabled.modify;
}

uint64_t variable initialization expression of AADeviceModel.hideEarDetectionCapability()
{
  return 0;
}

uint64_t AADeviceModel.hideEarDetectionCapability.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t AADeviceModel.hideEarDetectionCapability.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 41) = result;
  return result;
}

void (*AADeviceModel.hideEarDetectionCapability.modify())()
{
  return AADeviceModel.hideEarDetectionCapability.modify;
}

uint64_t variable initialization expression of AADeviceModel.identifier()
{
  return 0;
}

uint64_t AADeviceModel.identifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t AADeviceModel.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*AADeviceModel.identifier.modify())()
{
  return AADeviceModel.identifier.modify;
}

uint64_t variable initialization expression of AADeviceModel.streamStateAoS()
{
  return 0;
}

uint64_t AADeviceModel.streamStateAoS.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 64);
}

uint64_t AADeviceModel.streamStateAoS.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 64) = result;
  return result;
}

void (*AADeviceModel.streamStateAoS.modify())()
{
  return AADeviceModel.streamStateAoS.modify;
}

uint64_t variable initialization expression of AADeviceModel.smartRoutingMode()
{
  return 0;
}

uint64_t AADeviceModel.smartRoutingMode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 65);
}

uint64_t AADeviceModel.smartRoutingMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 65) = result;
  return result;
}

void (*AADeviceModel.smartRoutingMode.modify())()
{
  return AADeviceModel.smartRoutingMode.modify;
}

id static AADeviceModel.deviceConfigFor<A>(keyPath:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  char *v67;
  unint64_t v68;
  char *v69;
  id v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  unsigned __int8 v76;
  char v77;
  unsigned __int8 v78;
  unsigned __int8 v79;
  unsigned int v80;
  char v81;
  unsigned int v82;
  unsigned int v83;
  unsigned __int8 v84;
  char v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  char v89;
  unsigned __int8 v90;
  unsigned __int8 v91;
  signed __int8 v92;
  char v93;
  unsigned __int8 v94;
  signed __int8 v95;
  signed __int8 v96;
  char v97;
  unsigned __int8 v98;
  signed __int8 v99;
  signed __int8 v100;
  char v101;
  unsigned __int8 v102;
  signed __int8 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

  v71 = a1;
  v53 = a2;
  v54 = a3;
  v120 = 0;
  v119 = 0;
  v118 = 0;
  v121 = a3;
  v55 = *(_QWORD *)(a3 - 8);
  v56 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](a1, a2);
  v57 = (char *)&v32 - v56;
  v58 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v3, v5);
  v59 = (char *)&v32 - v58;
  v60 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v6, v8);
  v61 = (char *)&v32 - v60;
  v62 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v9, v11);
  v63 = (char *)&v32 - v62;
  v64 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = MEMORY[0x24BDAC7A8](v12, v14);
  v65 = (char *)&v32 - v64;
  v66 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v15, v17);
  v67 = (char *)&v32 - v66;
  v68 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = MEMORY[0x24BDAC7A8](v18, v20);
  v69 = (char *)&v32 - v68;
  v120 = v21;
  v119 = v22;
  type metadata accessor for AADeviceConfig();
  v70 = AADeviceConfig.__allocating_init()();
  v118 = v70;
  swift_retain();
  KeyPath = swift_getKeyPath();
  v73 = &v117;
  v117 = KeyPath;
  v72 = &v116;
  v116 = v71;
  v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<AADeviceModel>);
  v75 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if ((v75 & 1) != 0)
  {
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v69, v53, v54);
    type metadata accessor for AAHeadGestureConfig();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v51 = v78;
      v52 = 0;
    }
    else
    {
      v51 = 0;
      v52 = 1;
    }
    v76 = v51;
    v77 = v52 & 1;
    v24 = v70;
    if ((v77 & 1) != 0)
      v79 = objc_msgSend(v70, sel_acceptReplyPlayPauseConfig);
    else
      v79 = v76;

    objc_msgSend(v70, sel_setAcceptReplyPlayPauseConfig_, v79);
  }
  else
  {
    swift_release();
    swift_retain();
    v115 = swift_getKeyPath();
    v114 = v71;
    v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if ((v50 & 1) != 0)
    {
      swift_release();
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v67, v53, v54);
      type metadata accessor for AAAutoANCStrength();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v48 = v82;
        v49 = 0;
      }
      else
      {
        v48 = 0;
        v49 = 1;
      }
      v80 = v48;
      v81 = v49 & 1;
      v25 = v70;
      if ((v81 & 1) != 0)
        v83 = objc_msgSend(v70, sel_autoANCStrength);
      else
        v83 = v80;

      objc_msgSend(v70, sel_setAutoANCStrength_, v83);
    }
    else
    {
      swift_release();
      swift_retain();
      v113 = swift_getKeyPath();
      v112 = v71;
      v47 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if ((v47 & 1) != 0)
      {
        swift_release();
        (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v65, v53, v54);
        type metadata accessor for AABobbleConfiguration();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v45 = v86;
          v46 = 0;
        }
        else
        {
          v45 = 0;
          v46 = 1;
        }
        v84 = v45;
        v85 = v46 & 1;
        v26 = v70;
        if ((v85 & 1) != 0)
          v87 = objc_msgSend(v70, sel_bobbleConfig);
        else
          v87 = v84;

        objc_msgSend(v70, sel_setBobbleConfig_, v87);
      }
      else
      {
        swift_release();
        swift_retain();
        v111 = swift_getKeyPath();
        v110 = v71;
        v44 = dispatch thunk of static Equatable.== infix(_:_:)();
        swift_release();
        if ((v44 & 1) != 0)
        {
          swift_release();
          (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v63, v53, v54);
          type metadata accessor for AAHeadGestureConfig();
          if ((swift_dynamicCast() & 1) != 0)
          {
            v42 = v90;
            v43 = 0;
          }
          else
          {
            v42 = 0;
            v43 = 1;
          }
          v88 = v42;
          v89 = v43 & 1;
          v27 = v70;
          if ((v89 & 1) != 0)
            v91 = objc_msgSend(v70, sel_declineDismissSkipConfig);
          else
            v91 = v88;

          objc_msgSend(v70, sel_setDeclineDismissSkipConfig_, v91);
        }
        else
        {
          swift_release();
          swift_retain();
          v109 = swift_getKeyPath();
          v108 = v71;
          v41 = dispatch thunk of static Equatable.== infix(_:_:)();
          swift_release();
          if ((v41 & 1) != 0)
          {
            swift_release();
            (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v61, v53, v54);
            type metadata accessor for AAMultiState();
            if ((swift_dynamicCast() & 1) != 0)
            {
              v39 = v94;
              v40 = 0;
            }
            else
            {
              v39 = 0;
              v40 = 1;
            }
            v92 = v39;
            v93 = v40 & 1;
            v28 = v70;
            if ((v93 & 1) != 0)
              v95 = objc_msgSend(v70, sel_headGestureToggle);
            else
              v95 = v92;

            objc_msgSend(v70, sel_setHeadGestureToggle_, v95);
          }
          else
          {
            swift_release();
            swift_retain();
            v107 = swift_getKeyPath();
            v106 = v71;
            v38 = dispatch thunk of static Equatable.== infix(_:_:)();
            swift_release();
            if ((v38 & 1) != 0)
            {
              swift_release();
              (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v59, v53, v54);
              type metadata accessor for AAMultiState();
              if ((swift_dynamicCast() & 1) != 0)
              {
                v36 = v98;
                v37 = 0;
              }
              else
              {
                v36 = 0;
                v37 = 1;
              }
              v96 = v36;
              v97 = v37 & 1;
              v29 = v70;
              if ((v97 & 1) != 0)
                v99 = objc_msgSend(v70, sel_headGestureProxCardShown);
              else
                v99 = v96;

              objc_msgSend(v70, sel_setHeadGestureProxCardShown_, v99);
            }
            else
            {
              swift_release();
              swift_retain();
              v105 = swift_getKeyPath();
              v104 = v71;
              v35 = dispatch thunk of static Equatable.== infix(_:_:)();
              swift_release();
              if ((v35 & 1) != 0)
              {
                swift_release();
                (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v57, v53, v54);
                type metadata accessor for AAMultiState();
                if ((swift_dynamicCast() & 1) != 0)
                {
                  v33 = v102;
                  v34 = 0;
                }
                else
                {
                  v33 = 0;
                  v34 = 1;
                }
                v100 = v33;
                v101 = v34 & 1;
                v30 = v70;
                if ((v101 & 1) != 0)
                  v103 = objc_msgSend(v70, sel_enableHeartRateMonitor);
                else
                  v103 = v100;

                objc_msgSend(v70, sel_setEnableHeartRateMonitor_, v103);
              }
              else
              {
                swift_release();
              }
            }
          }
        }
      }
    }
  }
  return v70;
}

unint64_t type metadata accessor for AADeviceConfig()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for AADeviceConfig;
  if (!lazy cache variable for type metadata for AADeviceConfig)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for AADeviceConfig);
    return ObjCClassMetadata;
  }
  return v2;
}

id AADeviceConfig.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc AADeviceConfig.init()();
}

uint64_t type metadata accessor for AAMultiState()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAMultiState;
  if (!lazy cache variable for type metadata for AAMultiState)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAMultiState);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAHeadGestureConfig()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAHeadGestureConfig;
  if (!lazy cache variable for type metadata for AAHeadGestureConfig)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAHeadGestureConfig);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AABobbleConfiguration()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AABobbleConfiguration;
  if (!lazy cache variable for type metadata for AABobbleConfiguration)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AABobbleConfiguration);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAAutoANCStrength()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAAutoANCStrength;
  if (!lazy cache variable for type metadata for AAAutoANCStrength)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAAutoANCStrength);
      return v1;
    }
  }
  return v4;
}

uint64_t AADeviceModel.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD __b[9];

  memset(__b, 0, 0x42uLL);
  result = 0;
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xF000000000000000;
  *(_BYTE *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 33) = 0;
  *(_BYTE *)(a1 + 34) = 0;
  *(_BYTE *)(a1 + 35) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 37) = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_BYTE *)(a1 + 39) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 41) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 65) = 0;
  return result;
}

uint64_t default argument 0 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 1 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 2 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 4 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 5 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 6 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 7 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 8 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 9 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 10 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 11 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 12 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 13 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 15 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t default argument 16 of AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)()
{
  return 0;
}

uint64_t AADeviceModel.init(acceptReplyPlayPauseConfig:autoANCCapability:autoANCStrength:bluetoothAddressData:bobbleCapability:bobbleConfig:caseSoundCapability:declineDismissSkipConfig:earTipFitTestCapability:frequencyBand:headGestureToggle:headGestureProxCardShown:heartRateMonitorEnabled:hideEarDetectionCapability:identifier:streamStateAoS:smartRoutingMode:)@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, unsigned __int8 a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, char a20)
{
  uint64_t result;

  result = a11;
  *(_BYTE *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_QWORD *)(a9 + 16) = a4;
  *(_QWORD *)(a9 + 24) = a5;
  *(_BYTE *)(a9 + 32) = a6;
  *(_BYTE *)(a9 + 33) = a7;
  *(_BYTE *)(a9 + 34) = a8;
  *(_BYTE *)(a9 + 35) = a10;
  *(_BYTE *)(a9 + 36) = a11;
  *(_BYTE *)(a9 + 37) = a12;
  *(_BYTE *)(a9 + 38) = a13;
  *(_BYTE *)(a9 + 39) = a14;
  *(_BYTE *)(a9 + 40) = a15;
  *(_BYTE *)(a9 + 41) = a16;
  *(_QWORD *)(a9 + 48) = a17;
  *(_QWORD *)(a9 + 56) = a18;
  *(_BYTE *)(a9 + 64) = a19;
  *(_BYTE *)(a9 + 65) = a20;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AADeviceModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for AADeviceModel(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AADeviceModel(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v4, v5);
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v5;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  result = a1;
  *(_QWORD *)(a1 + 56) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return result;
}

uint64_t assignWithCopy for AADeviceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    }
    else
    {
      v6 = *(_QWORD *)(a2 + 16);
      v7 = *(_QWORD *)(a2 + 24);
      outlined copy of Data._Representation(v6, v7);
      *(_QWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 24) = v7;
    }
  }
  else if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 16);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    outlined copy of Data._Representation(v8, v9);
    v2 = *(_QWORD *)(a1 + 16);
    v3 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v9;
    outlined consume of Data._Representation(v2, v3);
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v5 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  *(_QWORD *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy66_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x42uLL);
}

uint64_t assignWithTake for AADeviceModel(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if ((*(_QWORD *)(a1 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else if ((*(_QWORD *)(a2 + 24) & 0xF000000000000000) == 0xF000000000000000)
  {
    outlined destroy of Data(a1 + 16);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  }
  else
  {
    v2 = *(_QWORD *)(a2 + 24);
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v2;
    outlined consume of Data._Representation(v3, v4);
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_BYTE *)(a1 + 39) = *(_BYTE *)(a2 + 39);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  result = a1;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return result;
}

uint64_t getEnumTagSinglePayload for AADeviceModel(uint64_t a1, unsigned int a2)
{
  int v2;
  int v4;
  int v5;

  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 66))
    {
      v5 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      v4 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 56)))
        v4 = *(_QWORD *)(a1 + 56);
      v2 = v4 - 1;
      if (v4 - 1 < 0)
        v2 = -1;
      v5 = v2;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AADeviceModel(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BYTE *v3;

  v3 = (_BYTE *)(result + 66);
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_WORD *)(result + 64) = 0;
    if (a3 >= 0x7FFFFFFF)
      *v3 = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *v3 = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AADeviceModel()
{
  return &type metadata for AADeviceModel;
}

uint64_t type metadata accessor for AASmartRoutingMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AASmartRoutingMode;
  if (!lazy cache variable for type metadata for AASmartRoutingMode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AASmartRoutingMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAStreamStateAoS()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAStreamStateAoS;
  if (!lazy cache variable for type metadata for AAStreamStateAoS)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAStreamStateAoS);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAFrequencyBand()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAFrequencyBand;
  if (!lazy cache variable for type metadata for AAFrequencyBand)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAFrequencyBand);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAFeatureCapability()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAFeatureCapability;
  if (!lazy cache variable for type metadata for AAFeatureCapability)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAFeatureCapability);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for AAAutoANCCapability()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for AAAutoANCCapability;
  if (!lazy cache variable for type metadata for AAAutoANCCapability)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for AAAutoANCCapability);
      return v1;
    }
  }
  return v4;
}

id @nonobjc AADeviceConfig.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

uint64_t RawRepresentable<>.description.getter()
{
  dispatch thunk of RawRepresentable.rawValue.getter();
  return String.init<A>(_:)();
}

{
  uint64_t v1;

  dispatch thunk of RawRepresentable.rawValue.getter();
  return v1;
}

BOOL static AADevicePropertyRemoteSendState.== infix(_:_:)(_BYTE *a1, _BYTE *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*a1)
  {
    if (*a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (*a2)
  {
    if (*a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t AADevicePropertyRemoteSendState.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t AADevicePropertyRemoteSendState.hashValue.getter()
{
  lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for AADevicePropertyRemoteSendState, &type metadata for AADevicePropertyRemoteSendState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for AADevicePropertyRemoteSendState, &type metadata for AADevicePropertyRemoteSendState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AADevicePropertyRemoteSendState(_BYTE *a1, _BYTE *a2)
{
  return static AADevicePropertyRemoteSendState.== infix(_:_:)(a1, a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance AADevicePropertyRemoteSendState()
{
  return AADevicePropertyRemoteSendState.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AADevicePropertyRemoteSendState()
{
  return AADevicePropertyRemoteSendState.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AADevicePropertyRemoteSendState(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t AudioAccessoryDevice.btAddress.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  void *v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[7];
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint32_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  NSObject *v76;
  int v77;
  Builtin::Word v78;
  unint64_t v79;
  int v80;
  uint64_t v81;
  Swift::String *v82;
  Swift::String *v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  Class v97;
  id v98;
  unint64_t v99;
  uint64_t v100;
  Class isa;
  Class v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  id v112;
  uint64_t v113;
  id v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  id v119;
  Swift::String v120;
  Swift::String v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _BYTE *v130;
  uint64_t v131;
  uint32_t v132;
  id v133;

  v133 = 0;
  v113 = 0;
  v124 = 0;
  v125 = 0;
  v115 = type metadata accessor for Logger();
  v116 = *(_QWORD *)(v115 - 8);
  v117 = (*(_QWORD *)(v116 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v118 = (char *)v41 - v117;
  v133 = (id)MEMORY[0x24BDAC7A8](v114, v0);
  v119 = objc_msgSend(v133, sel_bluetoothAddressData);
  if (v119)
  {
    v112 = v119;
    v107 = v119;
    v108 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v109 = v1;

    v110 = v108;
    v111 = v109;
  }
  else
  {
    v110 = 0;
    v111 = 0xF000000000000000;
  }
  v105 = v111;
  v106 = v110;
  if ((v111 & 0xF000000000000000) == 0xF000000000000000)
  {
    v102 = 0;
  }
  else
  {
    v103 = v106;
    v104 = v105;
    v99 = v105;
    v100 = v106;
    isa = Data._bridgeToObjectiveC()().super.isa;
    outlined consume of Data._Representation(v100, v99);
    v102 = isa;
  }
  v97 = v102;
  v98 = (id)CUPrintNSDataAddress();

  if (v98)
  {
    v96 = v98;
    v91 = v98;
    v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v93 = v2;

    v94 = v92;
    v95 = v93;
  }
  else
  {
    v94 = 0;
    v95 = 0;
  }
  v89 = v95;
  v90 = v94;
  if (v95)
  {
    v87 = v90;
    v88 = v89;
    v84 = v89;
    v124 = v90;
    v125 = v89;
    v122 = v90;
    v123 = v89;
    v78 = 1;
    v80 = 1;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(":", 1uLL, 1);
    v83 = &v121;
    v121 = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", v78, v80 & 1);
    v82 = &v120;
    v120 = v4;
    v79 = lazy protocol witness table accessor for type String and conformance String();
    v81 = MEMORY[0x24BEE0D00];
    default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v85._countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v85._object = v5;
    outlined destroy of String();
    outlined destroy of String();
    swift_bridgeObjectRelease();
    v86 = v85;
  }
  else
  {
    v6 = v118;
    v7 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v116 + 16))(v6, v7, v115);
    v8 = v114;
    v61 = 7;
    v62 = swift_allocObject();
    *(_QWORD *)(v62 + 16) = v114;
    v76 = Logger.logObject.getter();
    v77 = static os_log_type_t.error.getter();
    v53 = &v131;
    v60 = 32;
    v131 = 32;
    v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v52 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v54 = v132;
    v58 = 17;
    v64 = swift_allocObject();
    v57 = 32;
    *(_BYTE *)(v64 + 16) = 32;
    v65 = swift_allocObject();
    v59 = 8;
    *(_BYTE *)(v65 + 16) = 8;
    v9 = swift_allocObject();
    v55 = v9;
    *(_QWORD *)(v9 + 16) = implicit closure #1 in AudioAccessoryDevice.btAddress.getter;
    *(_QWORD *)(v9 + 24) = 0;
    v10 = swift_allocObject();
    v11 = v55;
    v66 = v10;
    *(_QWORD *)(v10 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:);
    *(_QWORD *)(v10 + 24) = v11;
    v67 = swift_allocObject();
    *(_BYTE *)(v67 + 16) = 0;
    v68 = swift_allocObject();
    *(_BYTE *)(v68 + 16) = v59;
    v12 = swift_allocObject();
    v56 = v12;
    *(_QWORD *)(v12 + 16) = implicit closure #2 in AudioAccessoryDevice.btAddress.getter;
    *(_QWORD *)(v12 + 24) = 0;
    v13 = swift_allocObject();
    v14 = v56;
    v69 = v13;
    *(_QWORD *)(v13 + 16) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int);
    *(_QWORD *)(v13 + 24) = v14;
    v70 = swift_allocObject();
    *(_BYTE *)(v70 + 16) = v57;
    v71 = swift_allocObject();
    *(_BYTE *)(v71 + 16) = v59;
    v15 = swift_allocObject();
    v16 = v62;
    v63 = v15;
    *(_QWORD *)(v15 + 16) = partial apply for implicit closure #3 in AudioAccessoryDevice.btAddress.getter;
    *(_QWORD *)(v15 + 24) = v16;
    v17 = swift_allocObject();
    v18 = v63;
    v73 = v17;
    *(_QWORD *)(v17 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v17 + 24) = v18;
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v72 = _allocateUninitializedArray<A>(_:)();
    v74 = v19;
    swift_retain();
    v20 = v64;
    v21 = v74;
    *v74 = partial apply for closure #1 in OSLogArguments.append(_:);
    v21[1] = v20;
    swift_retain();
    v22 = v65;
    v23 = v74;
    v74[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v23[3] = v22;
    swift_retain();
    v24 = v66;
    v25 = v74;
    v74[4] = partial apply for closure #1 in OSLogArguments.append(_:);
    v25[5] = v24;
    swift_retain();
    v26 = v67;
    v27 = v74;
    v74[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v27[7] = v26;
    swift_retain();
    v28 = v68;
    v29 = v74;
    v74[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v29[9] = v28;
    swift_retain();
    v30 = v69;
    v31 = v74;
    v74[10] = partial apply for closure #1 in OSLogArguments.append<A>(_:);
    v31[11] = v30;
    swift_retain();
    v32 = v70;
    v33 = v74;
    v74[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[13] = v32;
    swift_retain();
    v34 = v71;
    v35 = v74;
    v74[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[15] = v34;
    swift_retain();
    v36 = v73;
    v37 = v74;
    v74[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[17] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v76, (os_log_type_t)v77))
    {
      v38 = v113;
      v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v45 = createStorage<A>(capacity:type:)(0);
      v46 = createStorage<A>(capacity:type:)(2);
      v47 = &v130;
      v130 = v44;
      v48 = &v129;
      v129 = v45;
      v49 = &v128;
      v128 = v46;
      serialize(_:at:)(2, &v130);
      serialize(_:at:)(3, v47);
      v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
      v127 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)v47, (uint64_t)v48, (uint64_t)v49);
      v50 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v127 = v65;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v42 = 0;
        v39 = v42;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
        v127 = v66;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v41[6] = v39;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v127 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v41[5] = 0;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v127 = v68;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v41[4] = 0;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append<A>(_:);
        v127 = v69;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v41[3] = 0;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v127 = v70;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v41[2] = 0;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v127 = v71;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        v41[1] = 0;
        v126 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v127 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v126, (uint64_t)&v130, (uint64_t)&v129, (uint64_t)&v128);
        _os_log_impl(&dword_23DAB4000, v76, (os_log_type_t)v77, "HeadphoneManager: %s: %ld::HeadphoneManager: Invalid BT Address address: %s", v44, v54);
        destroyStorage<A>(_:count:)(v45, 0, v43);
        destroyStorage<A>(_:count:)(v46, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v44, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v116 + 8))(v118, v115);
    v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNKNOWN", 7uLL, 1);
  }
  return v86._countAndFlagsBits;
}

uint64_t implicit closure #1 in AudioAccessoryDevice.btAddress.getter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("btAddress", 9uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in AudioAccessoryDevice.btAddress.getter()
{
  return 40;
}

uint64_t implicit closure #3 in AudioAccessoryDevice.btAddress.getter(void *a1)
{
  unint64_t v1;
  NSDataBase64EncodingOptions v2;
  Swift::String v3;
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t countAndFlagsBits;

  v10 = objc_msgSend(a1, sel_bluetoothAddressData);
  if (v10)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v1;

    v8 = v6;
    v9 = v7;
  }
  else
  {
    v8 = 0;
    v9 = 0xF000000000000000;
  }
  if ((v9 & 0xF000000000000000) == 0xF000000000000000)
  {
    v5._countAndFlagsBits = 0;
    v5._object = 0;
  }
  else
  {
    v2 = default argument 0 of Data.base64EncodedString(options:)();
    v3 = Data.base64EncodedString(options:)(v2);
    outlined consume of Data._Representation(v8, v9);
    v5 = v3;
  }
  if (v5._object)
    return v5._countAndFlagsBits;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("nil data", 8uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

uint64_t sub_23DAC0494()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in AudioAccessoryDevice.btAddress.getter()
{
  uint64_t v0;

  return implicit closure #3 in AudioAccessoryDevice.btAddress.getter(*(void **)(v0 + 16));
}

uint64_t default argument 0 of Data.base64EncodedString(options:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE4540], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE4518], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE4538], MEMORY[0x24BEE44F0]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
    return v0;
  }
  return v2;
}

uint64_t createStorage<A>(capacity:type:)(uint64_t a1)
{
  if (a1)
    return static UnsafeMutablePointer.allocate(capacity:)();
  else
    return 0;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t destroyStorage<A>(_:count:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = result;
  if (result)
  {
    UnsafeMutablePointer.deinitialize(count:)();
    return MEMORY[0x24263B020](v3, a3);
  }
  return result;
}

Swift::Void __swiftcall Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

_QWORD *closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;

  v4 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v5, a3);
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  result = a1;
  *a1 = v8 + 8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[4];
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;

  v14 = specialized _StringGuts._deconstructUTF8<A>(scratch:)((uint64_t)&v17, 0, 0, 1, a1, a2);
  v15 = v3;
  v16 = v4;
  v11 = v17;
  if (v14)
  {
    v12[3] = swift_getObjectType();
    v12[0] = v14;
    v6 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, v6);
      *a3 = v6 + 32;
    }
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  }
  else
  {
    v13[3] = MEMORY[0x24BEE2520];
    v13[0] = a1;
    v13[1] = a2;
    v7 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v13, v7);
      *a3 = v7 + 32;
    }
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_0((uint64_t)v13);
  }
  return v11;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t result, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  _QWORD *v17;
  _QWORD v21[4];
  char v22;
  char v23;
  uint64_t v24;

  v17 = (_QWORD *)result;
  v24 = a6;
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (a2)
      {
        if (!a3)
          __break(1u);
        v16 = a3 - (_QWORD)a2;
      }
      else
      {
        v16 = 0;
      }
      v15 = (a6 & 0xF00000000000000uLL) >> 56;
      if (v15 < v16)
      {
        if (a2)
        {
          v21[0] = a5;
          v21[1] = a6 & (-(uint64_t)bswap64(0xFFuLL) - 1);
          specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(v21, v15, a2);
          UnsafeMutableRawBufferPointer.subscript.setter();
          *v17 = a2;
          v11 = 0;
          v12 = v15;
          v13 = 1;
          v14 = 0;
LABEL_26:
          v21[2] = v11;
          v21[3] = v12;
          v22 = v13 & 1;
          v23 = v14 & 1;
          return (uint64_t)v11;
        }
        goto LABEL_28;
      }
    }
LABEL_13:
    v6 = _StringGuts._allocateForDeconstruct()(a5, a6);
    *v17 = v7;
    v11 = v6;
    v12 = v8;
    v13 = 0;
    v14 = 1;
    goto LABEL_26;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0xFFFFFFFFFFFFFFE0)
    {
      v10 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
      goto LABEL_21;
    }
    __break(1u);
  }
  result = _StringObject.sharedUTF8.getter();
  if (!result)
    goto LABEL_29;
  v10 = result;
LABEL_21:
  *v17 = v10;
  if (a6 < 0)
  {
    v9 = 0;
LABEL_25:
    v11 = (_QWORD *)v9;
    v12 = a5 & 0xFFFFFFFFFFFFLL;
    v13 = 0;
    v14 = 0;
    goto LABEL_26;
  }
  if ((a6 & 0xFFFFFFFFFFFFFFFLL) != 0)
  {
    swift_unknownObjectRetain();
    v9 = a6 & 0xFFFFFFFFFFFFFFFLL;
    goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(const void *a1, size_t a2, void *__dst)
{
  memcpy(__dst, a1, a2);
  return __dst;
}

_QWORD *_StringGuts._allocateForDeconstruct()(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v6 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v4 = v6[2];
  specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v4);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, 0);
  specialized Array._endMutation()();
  swift_retain();
  v5 = specialized Array.count.getter((uint64_t)v6);
  swift_bridgeObjectRelease();
  result = (_QWORD *)v5;
  if (!__OFSUB__(v5, 1))
    return v6;
  __break(1u);
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  char v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];

  v8[2] = a2;
  if ((a2 & 0x1000000000000000) != 0)
  {
    v7 = String.UTF8View._foreignCount()();
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    v7 = (a2 & 0xF00000000000000uLL) >> 56;
  }
  else
  {
    v7 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v7)
    return (_QWORD *)specialized ContiguousArray.init()();
  v5 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v7, 0);
  swift_retain();
  swift_release();
  result = (_QWORD *)_StringGuts.copyUTF8(into:)();
  v6 = result;
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    result = v8;
    v8[0] = 0;
    v8[1] = 0xE000000000000000;
    outlined destroy of String.UTF8View();
    if (v6 == (_QWORD *)v7)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t *v0;
  uint64_t result;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v4 = *v0;
  result = swift_isUniquelyReferenced_nonNull_native();
  *v0 = v4;
  if ((result & 1) == 0)
  {
    v2 = specialized Array.count.getter(*v3);
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 + 1, 1, *v3);
    *v3 = result;
  }
  return result;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;

  if (*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 < result + 1)
  {
    result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(*(_QWORD *)(*(_QWORD *)v1 + 24) >> 1 != 0, result + 1, 1, *v2);
    *v2 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + 1;
  v4 = *v2;
  swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 16) = v5;
  swift_release();
  v6 = *v2;
  swift_retain();
  *(_BYTE *)(v6 + 32 + a1) = a2;
  return swift_release();
}

void specialized Array._endMutation()()
{
  _QWORD *v0;

  *v0 = *v0;
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return specialized Array._getCount()(a1);
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  size_t v4;
  _QWORD *v6;
  uint64_t v7;

  if (a2 < a1)
    v7 = a1;
  else
    v7 = a2;
  if (v7)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v6 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v4 = (size_t)v6 + _swift_stdlib_malloc_size(v6);
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * (v4 - (_QWORD)(v6 + 4));
    }
    else
    {
      swift_retain();
      v6[2] = a1;
      v6[3] = 2 * v7;
    }
    swift_release();
    return v6;
  }
  else
  {
    v3 = MEMORY[0x24BEE4AF8];
    swift_retain();
    return (_QWORD *)v3;
  }
}

uint64_t specialized ContiguousArray.init()()
{
  uint64_t v1;

  v1 = MEMORY[0x24BEE4AF8];
  swift_retain();
  return v1;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t result;
  char *v5;
  size_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v16;

  swift_retain();
  result = swift_retain();
  v16 = *(_QWORD *)(a4 + 24) >> 1;
  if ((a3 & 1) != 0)
  {
    if (v16 < a2)
    {
      if ((unsigned __int128)(v16 * (__int128)2) >> 64 != (2 * v16) >> 63)
      {
        __break(1u);
        return result;
      }
      if (2 * v16 < a2)
        v11 = a2;
      else
        v11 = 2 * v16;
    }
    else
    {
      v11 = *(_QWORD *)(a4 + 24) >> 1;
    }
  }
  else
  {
    v11 = a2;
  }
  v10 = *(_QWORD *)(a4 + 16);
  if (v11 < v10)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v11;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v8 = (_QWORD *)swift_allocObject();
    if ((_swift_stdlib_has_malloc_size() & 1) != 0)
    {
      v6 = (size_t)v8 + _swift_stdlib_malloc_size(v8);
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * (v6 - (_QWORD)(v8 + 4));
    }
    else
    {
      swift_retain();
      v8[2] = v10;
      v8[3] = 2 * v9;
    }
    swift_release();
    v7 = (char *)v8;
  }
  else
  {
    v5 = (char *)MEMORY[0x24BEE4AF8];
    swift_retain();
    v7 = v5;
  }
  if ((a1 & 1) != 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v10, v7 + 32);
    *(_QWORD *)(a4 + 16) = 0;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    swift_release();
    specialized UnsafeMutablePointer.initialize(from:count:)((const void *)(a4 + 32), v10, v7 + 32);
    swift_unknownObjectRelease();
  }
  return (uint64_t)v7;
}

uint64_t specialized Array._getCount()(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(const void *a1, size_t a2, void *__dst)
{
  return memcpy(__dst, a1, a2);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, size_t a2, char *a3)
{
  if (a3 < result || a3 >= &result[a2] || a3 != result)
    return (char *)memmove(a3, result, a2);
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_23DAC15CC()
{
  return swift_deallocObject();
}

_BYTE **partial apply for closure #1 in OSLogArguments.append(_:)(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DAC15FC()
{
  return swift_deallocObject();
}

_BYTE **closure #1 in OSLogArguments.append(_:)partial apply(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DAC162C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DAC1674()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in OSLogArguments.append(_:)(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DAC16BC()
{
  return swift_deallocObject();
}

uint64_t sub_23DAC16EC()
{
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v15 = a1;
  v18 = a6;
  v13[1] = a7;
  v22 = a6;
  v16 = *(_QWORD *)(a6 - 8);
  v13[0] = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](a1, a2);
  v17 = (uint64_t)v13 - v13[0];
  v8(v7);
  v14 = dispatch thunk of static FixedWidthInteger.bitWidth.getter() >> 3;
  v20 = *v15;
  v21 = v20 + v14;
  _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v17, partial apply for closure #1 in serialize<A>(_:at:), (uint64_t)v19, v18, MEMORY[0x24BEE4078], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE40A8], v13[2]);
  v9 = v16;
  v10 = v17;
  v11 = v18;
  *v15 += v14;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t _ss27_withUnprotectedUnsafeBytes2of_q0_x_q0_SWq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t (*v17)(void);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v17 = a2;
  v13 = a5;
  v14 = a8;
  v23 = a4;
  v22 = a5;
  v21 = a6;
  v15 = *(_QWORD *)(a5 - 8);
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v12 - v16;
  v20 = v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64);
  result = v17();
  v19 = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v18, v13);
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_23DAC1974()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23DAC19BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_23DAC1AC0()
{
  return swift_deallocObject();
}

uint64_t sub_23DAC1AF0()
{
  return swift_deallocObject();
}

uint64_t sub_23DAC1B20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DAC1B68()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *closure #1 in OSLogArguments.append(_:)partial apply(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> _finalizeUninitializedArray<A>(_:)()
{
  type metadata accessor for Array();
  Array._endMutation()();
}

unint64_t base witness table accessor for Equatable in AADevicePropertyRemoteSendState()
{
  return lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState();
}

uint64_t dispatch thunk of AADeviceConfigurable.underlyingDevice.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AADeviceConfigurable.btAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of AADeviceConfigurable.deviceRemoteSendState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AADevicePropertyRemoteSendState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for AADevicePropertyRemoteSendState(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for AADevicePropertyRemoteSendState(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for AADevicePropertyRemoteSendState(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AADevicePropertyRemoteSendState()
{
  return &type metadata for AADevicePropertyRemoteSendState;
}

uint64_t partial apply for closure #1 in serialize<A>(_:at:)()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v2;
  (**(void (***)(uint64_t))(v2 - 8))(a2);
  return a2;
}

uint64_t _swift_stdlib_has_malloc_size()
{
  return 1;
}

size_t _swift_stdlib_malloc_size(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String.UTF8View()
{
  swift_bridgeObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of String?()
{
  swift_bridgeObjectRelease();
}

id AudioAccessoryDevice.cbDeviceValidator(aaDevice:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  _BYTE **v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint32_t v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  id v34;
  id v36;
  id v37;
  void *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint32_t v54;
  id v55;
  uint64_t v56;
  id v57;

  v45 = a1;
  v57 = 0;
  v56 = 0;
  v55 = 0;
  v40 = 0;
  v47 = 0;
  v46 = 0;
  v41 = type metadata accessor for Logger();
  v42 = *(_QWORD *)(v41 - 8);
  v43 = (*(_QWORD *)(v42 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v44 = (char *)&v13 - v43;
  v57 = (id)MEMORY[0x24BDAC7A8](v45, v2);
  v56 = v1;
  v3 = v57;
  v55 = v45;
  if ((objc_msgSend(v45, sel_respondsToSelector_, sel_coreBluetoothDevice) & 1) != 0)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    if ((objc_msgSend(v45, sel_respondsToSelector_, sel_coreBluetoothDevice) & 1) != 0)
    {
      swift_unknownObjectRetain();
      v48 = (uint64_t)objc_msgSend(v45, sel_coreBluetoothDevice);
      swift_unknownObjectRelease();
    }
    else
    {
      v48 = 1;
    }
    v39 = (void *)v48;
    if (v48 == 1)
    {
      swift_unknownObjectRelease();
    }
    else
    {
      v38 = v39;
      v37 = v39;
      v47 = v39;
      swift_unknownObjectRelease();
      v4 = v37;
      if (v37)
      {
        v36 = v37;
        v34 = v37;
        v46 = v37;

        swift_unknownObjectRelease();
        return v34;
      }

    }
  }
  v5 = v44;
  v6 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v5, v6, v41);
  v32 = Logger.logObject.getter();
  v31 = static os_log_type_t.error.getter();
  v29 = &v53;
  v53 = 2;
  v27 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v28 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v30 = v54;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v33 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v32, (os_log_type_t)v31))
  {
    v7 = v40;
    v17 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v16 = 0;
    v18 = createStorage<A>(capacity:type:)(0);
    v19 = createStorage<A>(capacity:type:)(v16);
    v23 = &v52;
    v52 = v17;
    v24 = &v51;
    v51 = v18;
    v21 = &v50;
    v50 = v19;
    v20 = 0;
    serialize(_:at:)(0, &v52);
    serialize(_:at:)(v20, v23);
    v49 = v33;
    v22 = &v13;
    MEMORY[0x24BDAC7A8](&v13, v8);
    v9 = v24;
    v10 = &v13 - 6;
    v25 = &v13 - 6;
    v10[2] = (uint64_t)v23;
    v10[3] = (uint64_t)v9;
    v10[4] = v11;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v7)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_23DAB4000, v32, (os_log_type_t)v31, "HeadphoneManager: AudioAccessoryDevice does not have CBDevice yet.", v17, v30);
      v14 = 0;
      destroyStorage<A>(_:count:)(v18, 0, v15);
      destroyStorage<A>(_:count:)(v19, v14, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v17, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v13 = 0;

  (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v41);
  swift_unknownObjectRelease();
  return (id)v13;
}

uint64_t SerialNumberType.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SerialNumberType()
{
  lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance SerialNumberType()
{
  lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SerialNumberType()
{
  lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance SerialNumberType()
{
  lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance SerialNumberType@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = SerialNumberType.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SerialNumberType(_QWORD *a1@<X8>)
{
  uint64_t v1;

  SerialNumberType.rawValue.getter();
  *a1 = v1;
}

uint64_t HeadphoneDevice.HeadphoneFeatures.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 7:
      return 7;
    case 8:
      return 8;
    case 9:
      return 9;
    case 10:
      return 10;
    case 11:
      return 11;
    case 12:
      return 12;
    case 13:
      return 13;
    case 14:
      return 14;
    case 15:
      return 15;
    case 16:
      return 16;
    case 17:
      return 17;
    case 18:
      return 18;
    case 19:
      return 19;
    case 20:
      return 20;
    case 21:
      return 21;
    case 22:
      return 22;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HeadphoneDevice.HeadphoneFeatures()
{
  lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HeadphoneDevice.HeadphoneFeatures()
{
  lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HeadphoneDevice.HeadphoneFeatures()
{
  lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HeadphoneDevice.HeadphoneFeatures()
{
  lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HeadphoneDevice.HeadphoneFeatures@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = HeadphoneDevice.HeadphoneFeatures.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HeadphoneDevice.HeadphoneFeatures(_QWORD *a1@<X8>)
{
  uint64_t v1;

  HeadphoneDevice.HeadphoneFeatures.rawValue.getter();
  *a1 = v1;
}

uint64_t HeadphoneDevice.ListeningModeConfigs.init(rawValue:)(uint64_t a1)
{
  switch(a1)
  {
    case 0:
      return 0;
    case 1:
      return 1;
    case 2:
      return 2;
    case 3:
      return 3;
    case 4:
      return 4;
    case 5:
      return 5;
    case 6:
      return 6;
    case 7:
      return 7;
    case 8:
      return 8;
    case 9:
      return 9;
    case 10:
      return 10;
    case 11:
      return 11;
  }
  return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HeadphoneDevice.ListeningModeConfigs()
{
  lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HeadphoneDevice.ListeningModeConfigs()
{
  lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs();
  return RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HeadphoneDevice.ListeningModeConfigs()
{
  lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs();
  return RawRepresentable<>.hash(into:)();
}

uint64_t protocol witness for Hashable._rawHashValue(seed:) in conformance HeadphoneDevice.ListeningModeConfigs()
{
  lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs();
  return RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HeadphoneDevice.ListeningModeConfigs@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v3;

  result = HeadphoneDevice.ListeningModeConfigs.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance HeadphoneDevice.ListeningModeConfigs(_QWORD *a1@<X8>)
{
  uint64_t v1;

  HeadphoneDevice.ListeningModeConfigs.rawValue.getter();
  *a1 = v1;
}

id HeadphoneDevice.cbDevice.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_cbDevice);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.cbDevice.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_cbDevice);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.cbDevice : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x210))(v2);

}

void key path setter for HeadphoneDevice.cbDevice : HeadphoneDevice(id *a1, id *a2)
{
  id v2;
  id v3;
  id v4;
  _QWORD *v6;

  v4 = *a1;
  v2 = *a1;
  v6 = *a2;
  v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x24BEE4EA0]) + 0x218))(v4);

}

uint64_t (*HeadphoneDevice.cbDevice.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.cbDevice.modify;
}

uint64_t HeadphoneDevice.cbDevice.modify()
{
  return swift_endAccess();
}

id HeadphoneDevice.productInfo.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_productInfo);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.productInfo.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_productInfo);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.productInfo : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x228))(v2);

}

void key path setter for HeadphoneDevice.productInfo : HeadphoneDevice(id *a1, id *a2)
{
  id v2;
  id v3;
  id v4;
  _QWORD *v6;

  v4 = *a1;
  v2 = *a1;
  v6 = *a2;
  v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x24BEE4EA0]) + 0x230))(v4);

}

uint64_t (*HeadphoneDevice.productInfo.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.productInfo.modify;
}

uint64_t HeadphoneDevice.productInfo.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDevice.aaDevice()
{
  return 0;
}

id HeadphoneDevice.aaDevice.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_aaDevice);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.aaDevice.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_aaDevice);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.aaDevice : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x240))(v2);

}

void key path setter for HeadphoneDevice.aaDevice : HeadphoneDevice(id *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of AudioAccessoryDevice?(a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x248))(v5);

}

uint64_t (*HeadphoneDevice.aaDevice.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.aaDevice.modify;
}

uint64_t HeadphoneDevice.aaDevice.modify()
{
  return swift_endAccess();
}

void *HeadphoneDevice.icon.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR___HPMHeadphoneDevice_icon);
  v1 = v3;
  return v3;
}

uint64_t HeadphoneDevice.btAddress.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_btAddress);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HeadphoneDevice.isUpdatingDeviceConfig.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isUpdatingDeviceConfig);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isUpdatingDeviceConfig.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isUpdatingDeviceConfig);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isUpdatingDeviceConfig : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x258))(v2) & 1;

}

void key path setter for HeadphoneDevice.isUpdatingDeviceConfig : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x260))(v4 & 1);

}

uint64_t (*HeadphoneDevice.isUpdatingDeviceConfig.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.isUpdatingDeviceConfig.modify;
}

uint64_t HeadphoneDevice.isUpdatingDeviceConfig.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.isAirpods.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isAirpods);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isAirpods.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isAirpods);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isAirpods : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x270))(v2) & 1;

}

void key path setter for HeadphoneDevice.isAirpods : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x278))(v4 & 1);

}

uint64_t (*HeadphoneDevice.isAirpods.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.isAirpods.modify;
}

uint64_t HeadphoneDevice.isAirpods.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.findMyNetworkSupport.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSupport);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.findMyNetworkSupport.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSupport);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.findMyNetworkSupport : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x288))(v2) & 1;

}

void key path setter for HeadphoneDevice.findMyNetworkSupport : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x290))(v4 & 1);

}

uint64_t (*HeadphoneDevice.findMyNetworkSupport.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.findMyNetworkSupport.modify;
}

uint64_t HeadphoneDevice.findMyNetworkSupport.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.isResettingFindMyNetworkOnError.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isResettingFindMyNetworkOnError);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isResettingFindMyNetworkOnError.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isResettingFindMyNetworkOnError);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isResettingFindMyNetworkOnError : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x2A0))(v2) & 1;

}

void key path setter for HeadphoneDevice.isResettingFindMyNetworkOnError : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x2A8))(v4 & 1);

}

uint64_t (*HeadphoneDevice.isResettingFindMyNetworkOnError.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.isResettingFindMyNetworkOnError.modify;
}

uint64_t HeadphoneDevice.isResettingFindMyNetworkOnError.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.findMyNetworkEnable@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t Published.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = a3;
  v10 = a1;
  v11 = a2;
  v12 = a2;
  v9 = *(_QWORD *)(a2 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1, a1);
  v8 = (char *)&v5 - v6;
  (*(void (**)(void))(v3 + 16))();
  Published.init(initialValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

uint64_t HeadphoneDevice.findMyNetworkEnable.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.findMyNetworkEnable.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.findMyNetworkEnable : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x2B8))(v2) & 1;

}

void key path setter for HeadphoneDevice.findMyNetworkEnable : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x2C0))(v4 & 1);

}

void (*HeadphoneDevice.findMyNetworkEnable.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.findMyNetworkEnable.modify;
}

void HeadphoneDevice.findMyNetworkEnable.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$findMyNetworkEnable : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x2D0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$findMyNetworkEnable : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x2D8))(v10);

}

uint64_t HeadphoneDevice.$findMyNetworkEnable.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$findMyNetworkEnable.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$findMyNetworkEnable.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$findMyNetworkEnable.getter();
  return HeadphoneDevice.$findMyNetworkEnable.modify;
}

void HeadphoneDevice.$findMyNetworkEnable.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$findMyNetworkEnable.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$findMyNetworkEnable.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t HeadphoneDevice.findMyNetworkSession.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSession);
  swift_beginAccess();
  v3 = *v2;
  swift_unknownObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.findMyNetworkSession.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_unknownObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSession);
  swift_beginAccess();
  *v3 = a1;
  swift_unknownObjectRelease();
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void key path getter for HeadphoneDevice.findMyNetworkSession : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x2E8))(v2);

}

void key path setter for HeadphoneDevice.findMyNetworkSession : HeadphoneDevice(uint64_t *a1, id *a2)
{
  id v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *a1;
  swift_unknownObjectRetain();
  v5 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x2F0))(v3);

}

uint64_t (*HeadphoneDevice.findMyNetworkSession.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.findMyNetworkSession.modify;
}

uint64_t HeadphoneDevice.findMyNetworkSession.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.findMyNetworkValueUpdated.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkValueUpdated);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.findMyNetworkValueUpdated.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkValueUpdated);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.findMyNetworkValueUpdated : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x300))(v2) & 1;

}

void key path setter for HeadphoneDevice.findMyNetworkValueUpdated : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x308))(v4 & 1);

}

uint64_t (*HeadphoneDevice.findMyNetworkValueUpdated.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.findMyNetworkValueUpdated.modify;
}

uint64_t HeadphoneDevice.findMyNetworkValueUpdated.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.isSettingFindMyNetworkValue@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.isSettingFindMyNetworkValue.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.isSettingFindMyNetworkValue.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.isSettingFindMyNetworkValue : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x318))(v2) & 1;

}

void key path setter for HeadphoneDevice.isSettingFindMyNetworkValue : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x320))(v4 & 1);

}

void (*HeadphoneDevice.isSettingFindMyNetworkValue.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.isSettingFindMyNetworkValue.modify;
}

void HeadphoneDevice.isSettingFindMyNetworkValue.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$isSettingFindMyNetworkValue : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x330))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$isSettingFindMyNetworkValue : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x338))(v10);

}

uint64_t HeadphoneDevice.$isSettingFindMyNetworkValue.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$isSettingFindMyNetworkValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$isSettingFindMyNetworkValue.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$isSettingFindMyNetworkValue.getter();
  return HeadphoneDevice.$isSettingFindMyNetworkValue.modify;
}

void HeadphoneDevice.$isSettingFindMyNetworkValue.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$isSettingFindMyNetworkValue.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$isSettingFindMyNetworkValue.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.name@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v7[4];

  v7[2] = a1;
  v7[3] = a2;
  swift_bridgeObjectRetain();
  v7[0] = a1;
  v7[1] = a2;
  Published.init(wrappedValue:)((uint64_t)v7, MEMORY[0x24BEE0D00], a3);
  return swift_bridgeObjectRelease();
}

uint64_t HeadphoneDevice.name.getter()
{
  void *v0;
  id v1;
  uint64_t v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.name.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void key path getter for HeadphoneDevice.name : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x348))(v2);
  a2[1] = v3;

}

void key path setter for HeadphoneDevice.name : HeadphoneDevice(_QWORD *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String(a1, v7);
  v6 = v7[0];
  v5 = v7[1];
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t, uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x350))(v6, v5);

}

void (*HeadphoneDevice.name.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.name.modify;
}

void HeadphoneDevice.name.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$name : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x360))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$name : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x368))(v10);

}

uint64_t HeadphoneDevice.$name.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$name.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$name.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$name.getter();
  return HeadphoneDevice.$name.modify;
}

void HeadphoneDevice.$name.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$name.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$name.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.listeningMode@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _DWORD v5[3];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBListeningMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.listeningMode.getter()
{
  void *v0;
  id v1;
  unsigned int v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.listeningMode.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.listeningMode : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x378))(v2);

}

void key path setter for HeadphoneDevice.listeningMode : HeadphoneDevice(unsigned int *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x380))(v4);

}

void (*HeadphoneDevice.listeningMode.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.listeningMode.modify;
}

void HeadphoneDevice.listeningMode.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$listeningMode : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x390))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$listeningMode : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x398))(v10);

}

uint64_t HeadphoneDevice.$listeningMode.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$listeningMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$listeningMode.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBListeningMode>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$listeningMode.getter();
  return HeadphoneDevice.$listeningMode.modify;
}

void HeadphoneDevice.$listeningMode.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$listeningMode.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$listeningMode.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.clickHoldModeLeft@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBPeerUIGestureMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.clickHoldModeLeft.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.clickHoldModeLeft.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.clickHoldModeLeft : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x3A8))(v2);

}

void key path setter for HeadphoneDevice.clickHoldModeLeft : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x3B0))(v4);

}

void (*HeadphoneDevice.clickHoldModeLeft.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.clickHoldModeLeft.modify;
}

void HeadphoneDevice.clickHoldModeLeft.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$clickHoldModeLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x3C0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$clickHoldModeLeft : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x3C8))(v10);

}

uint64_t HeadphoneDevice.$clickHoldModeLeft.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$clickHoldModeLeft.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$clickHoldModeLeft.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$clickHoldModeLeft.getter();
  return HeadphoneDevice.$clickHoldModeLeft.modify;
}

void HeadphoneDevice.$clickHoldModeLeft.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$clickHoldModeLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$clickHoldModeLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.clickHoldModeRight@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBPeerUIGestureMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.clickHoldModeRight.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.clickHoldModeRight.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.clickHoldModeRight : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x3D8))(v2);

}

void key path setter for HeadphoneDevice.clickHoldModeRight : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x3E0))(v4);

}

void (*HeadphoneDevice.clickHoldModeRight.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.clickHoldModeRight.modify;
}

void HeadphoneDevice.clickHoldModeRight.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$clickHoldModeRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x3F0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$clickHoldModeRight : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x3F8))(v10);

}

uint64_t HeadphoneDevice.$clickHoldModeRight.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$clickHoldModeRight.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$clickHoldModeRight.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerUIGestureMode>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$clickHoldModeRight.getter();
  return HeadphoneDevice.$clickHoldModeRight.modify;
}

void HeadphoneDevice.$clickHoldModeRight.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$clickHoldModeRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$clickHoldModeRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t HeadphoneDevice.listeningModeConfigs.getter()
{
  uint64_t v0;
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_listeningModeConfigs);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.listeningModeConfigs.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;

  v3 = (_DWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_listeningModeConfigs);
  swift_beginAccess();
  *v3 = a1;
  swift_endAccess();
  return HeadphoneDevice.listeningModeConfigs.didset();
}

void key path getter for HeadphoneDevice.listeningModeConfigs : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x408))(v2);

}

void key path setter for HeadphoneDevice.listeningModeConfigs : HeadphoneDevice(unsigned int *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x410))(v4);

}

uint64_t HeadphoneDevice.listeningModeConfigs.didset()
{
  BOOL v1;
  BOOL v2;
  BOOL v3;
  BOOL v4;
  _QWORD *v5;

  swift_beginAccess();
  swift_endAccess();
  type metadata accessor for CBListeningModeConfigs();
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  v4 = (OptionSet<>.contains(_:)() & 1) != 0;
  (*(void (**)(BOOL))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x428))(v4);
  swift_beginAccess();
  swift_endAccess();
  v3 = (OptionSet<>.contains(_:)() & 1) != 0;
  (*(void (**)(BOOL))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x488))(v3);
  swift_beginAccess();
  swift_endAccess();
  v2 = (OptionSet<>.contains(_:)() & 1) != 0;
  (*(void (**)(BOOL))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x4B8))(v2);
  swift_beginAccess();
  swift_endAccess();
  v1 = (OptionSet<>.contains(_:)() & 1) != 0;
  return (*(uint64_t (**)(BOOL))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x458))(v1);
}

uint64_t (*HeadphoneDevice.listeningModeConfigs.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return HeadphoneDevice.listeningModeConfigs.modify;
}

uint64_t HeadphoneDevice.listeningModeConfigs.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
    return swift_endAccess();
  swift_endAccess();
  return HeadphoneDevice.listeningModeConfigs.didset();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldAuto@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.pressHoldAuto.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldAuto.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldAuto : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x420))(v2) & 1;

}

void key path setter for HeadphoneDevice.pressHoldAuto : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x428))(v4 & 1);

}

void (*HeadphoneDevice.pressHoldAuto.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldAuto.modify;
}

void HeadphoneDevice.pressHoldAuto.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldAuto : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x438))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$pressHoldAuto : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x440))(v10);

}

uint64_t HeadphoneDevice.$pressHoldAuto.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldAuto.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$pressHoldAuto.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$pressHoldAuto.getter();
  return HeadphoneDevice.$pressHoldAuto.modify;
}

void HeadphoneDevice.$pressHoldAuto.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldAuto.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldAuto.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldTransparency@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.pressHoldTransparency.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldTransparency.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldTransparency : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x450))(v2) & 1;

}

void key path setter for HeadphoneDevice.pressHoldTransparency : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x458))(v4 & 1);

}

void (*HeadphoneDevice.pressHoldTransparency.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldTransparency.modify;
}

void HeadphoneDevice.pressHoldTransparency.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldTransparency : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x468))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$pressHoldTransparency : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x470))(v10);

}

uint64_t HeadphoneDevice.$pressHoldTransparency.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldTransparency.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$pressHoldTransparency.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$pressHoldTransparency.getter();
  return HeadphoneDevice.$pressHoldTransparency.modify;
}

void HeadphoneDevice.$pressHoldTransparency.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldTransparency.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldTransparency.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldOff@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.pressHoldOff.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldOff.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldOff : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x480))(v2) & 1;

}

void key path setter for HeadphoneDevice.pressHoldOff : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x488))(v4 & 1);

}

void (*HeadphoneDevice.pressHoldOff.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldOff.modify;
}

void HeadphoneDevice.pressHoldOff.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldOff : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x498))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$pressHoldOff : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x4A0))(v10);

}

uint64_t HeadphoneDevice.$pressHoldOff.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldOff.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$pressHoldOff.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$pressHoldOff.getter();
  return HeadphoneDevice.$pressHoldOff.modify;
}

void HeadphoneDevice.$pressHoldOff.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldOff.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldOff.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.pressHoldNoiseCancel@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.pressHoldNoiseCancel.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.pressHoldNoiseCancel.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.pressHoldNoiseCancel : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x4B0))(v2) & 1;

}

void key path setter for HeadphoneDevice.pressHoldNoiseCancel : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x4B8))(v4 & 1);

}

void (*HeadphoneDevice.pressHoldNoiseCancel.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.pressHoldNoiseCancel.modify;
}

void HeadphoneDevice.pressHoldNoiseCancel.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$pressHoldNoiseCancel : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x4C8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$pressHoldNoiseCancel : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x4D0))(v10);

}

uint64_t HeadphoneDevice.$pressHoldNoiseCancel.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$pressHoldNoiseCancel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$pressHoldNoiseCancel.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$pressHoldNoiseCancel.getter();
  return HeadphoneDevice.$pressHoldNoiseCancel.modify;
}

void HeadphoneDevice.$pressHoldNoiseCancel.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$pressHoldNoiseCancel.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$pressHoldNoiseCancel.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.doubleTapActionLeft@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBDoubleTapAction();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.doubleTapActionLeft.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.doubleTapActionLeft.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.doubleTapActionLeft : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x4E0))(v2);

}

void key path setter for HeadphoneDevice.doubleTapActionLeft : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x4E8))(v4);

}

void (*HeadphoneDevice.doubleTapActionLeft.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.doubleTapActionLeft.modify;
}

void HeadphoneDevice.doubleTapActionLeft.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$doubleTapActionLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x4F8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$doubleTapActionLeft : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x500))(v10);

}

uint64_t HeadphoneDevice.$doubleTapActionLeft.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$doubleTapActionLeft.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$doubleTapActionLeft.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$doubleTapActionLeft.getter();
  return HeadphoneDevice.$doubleTapActionLeft.modify;
}

void HeadphoneDevice.$doubleTapActionLeft.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$doubleTapActionLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$doubleTapActionLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.doubleTapActionRight@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBDoubleTapAction();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.doubleTapActionRight.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.doubleTapActionRight.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.doubleTapActionRight : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x510))(v2);

}

void key path setter for HeadphoneDevice.doubleTapActionRight : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x518))(v4);

}

void (*HeadphoneDevice.doubleTapActionRight.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.doubleTapActionRight.modify;
}

void HeadphoneDevice.doubleTapActionRight.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$doubleTapActionRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x528))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$doubleTapActionRight : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x530))(v10);

}

uint64_t HeadphoneDevice.$doubleTapActionRight.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$doubleTapActionRight.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$doubleTapActionRight.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBDoubleTapAction>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$doubleTapActionRight.getter();
  return HeadphoneDevice.$doubleTapActionRight.modify;
}

void HeadphoneDevice.$doubleTapActionRight.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$doubleTapActionRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$doubleTapActionRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.crownRotationDirection@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBPeerCrownRotationDirection();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.crownRotationDirection.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.crownRotationDirection.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.crownRotationDirection : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x540))(v2);

}

void key path setter for HeadphoneDevice.crownRotationDirection : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x548))(v4);

}

void (*HeadphoneDevice.crownRotationDirection.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.crownRotationDirection.modify;
}

void HeadphoneDevice.crownRotationDirection.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$crownRotationDirection : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x558))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$crownRotationDirection : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x560))(v10);

}

uint64_t HeadphoneDevice.$crownRotationDirection.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$crownRotationDirection.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$crownRotationDirection.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCrownRotationDirection>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$crownRotationDirection.getter();
  return HeadphoneDevice.$crownRotationDirection.modify;
}

void HeadphoneDevice.$crownRotationDirection.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$crownRotationDirection.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$crownRotationDirection.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.inEarDetection@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.inEarDetection.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.inEarDetection.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.inEarDetection : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x570))(v2) & 1;

}

void key path setter for HeadphoneDevice.inEarDetection : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x578))(v4 & 1);

}

void (*HeadphoneDevice.inEarDetection.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.inEarDetection.modify;
}

void HeadphoneDevice.inEarDetection.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$inEarDetection : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x588))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$inEarDetection : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x590))(v10);

}

uint64_t HeadphoneDevice.$inEarDetection.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$inEarDetection.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$inEarDetection.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$inEarDetection.getter();
  return HeadphoneDevice.$inEarDetection.modify;
}

void HeadphoneDevice.$inEarDetection.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$inEarDetection.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$inEarDetection.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryCharging@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.batteryCharging.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.batteryCharging.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryCharging : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x5A0))(v2) & 1;

}

void key path setter for HeadphoneDevice.batteryCharging : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x5A8))(v4 & 1);

}

void (*HeadphoneDevice.batteryCharging.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryCharging.modify;
}

void HeadphoneDevice.batteryCharging.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryCharging : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x5B8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryCharging : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x5C0))(v10);

}

uint64_t HeadphoneDevice.$batteryCharging.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryCharging.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryCharging.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryCharging.getter();
  return HeadphoneDevice.$batteryCharging.modify;
}

void HeadphoneDevice.$batteryCharging.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryCharging.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryCharging.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.smartRoutingMode@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBSmartRoutingMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.smartRoutingMode.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.smartRoutingMode.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.smartRoutingMode : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x5D0))(v2);

}

void key path setter for HeadphoneDevice.smartRoutingMode : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x5D8))(v4);

}

void (*HeadphoneDevice.smartRoutingMode.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.smartRoutingMode.modify;
}

void HeadphoneDevice.smartRoutingMode.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$smartRoutingMode : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x5E8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$smartRoutingMode : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x5F0))(v10);

}

uint64_t HeadphoneDevice.$smartRoutingMode.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$smartRoutingMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$smartRoutingMode.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBSmartRoutingMode>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$smartRoutingMode.getter();
  return HeadphoneDevice.$smartRoutingMode.modify;
}

void HeadphoneDevice.$smartRoutingMode.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$smartRoutingMode.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$smartRoutingMode.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.microphoneMode@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBMicrophoneMode();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.microphoneMode.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.microphoneMode.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.microphoneMode : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x600))(v2);

}

void key path setter for HeadphoneDevice.microphoneMode : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x608))(v4);

}

void (*HeadphoneDevice.microphoneMode.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.microphoneMode.modify;
}

void HeadphoneDevice.microphoneMode.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$microphoneMode : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x618))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$microphoneMode : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x620))(v10);

}

uint64_t HeadphoneDevice.$microphoneMode.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$microphoneMode.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$microphoneMode.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBMicrophoneMode>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$microphoneMode.getter();
  return HeadphoneDevice.$microphoneMode.modify;
}

void HeadphoneDevice.$microphoneMode.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$microphoneMode.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$microphoneMode.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.volumeControlToggle@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.volumeControlToggle.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.volumeControlToggle.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.volumeControlToggle : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x630))(v2) & 1;

}

void key path setter for HeadphoneDevice.volumeControlToggle : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x638))(v4 & 1);

}

void (*HeadphoneDevice.volumeControlToggle.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.volumeControlToggle.modify;
}

void HeadphoneDevice.volumeControlToggle.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$volumeControlToggle : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x648))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$volumeControlToggle : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x650))(v10);

}

uint64_t HeadphoneDevice.$volumeControlToggle.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$volumeControlToggle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$volumeControlToggle.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$volumeControlToggle.getter();
  return HeadphoneDevice.$volumeControlToggle.modify;
}

void HeadphoneDevice.$volumeControlToggle.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$volumeControlToggle.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$volumeControlToggle.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t HeadphoneDevice.volumeControlView.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_volumeControlView);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.volumeControlView.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_volumeControlView);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.volumeControlView : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x660))(v2) & 1;

}

void key path setter for HeadphoneDevice.volumeControlView : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x668))(v4 & 1);

}

uint64_t (*HeadphoneDevice.volumeControlView.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.volumeControlView.modify;
}

uint64_t HeadphoneDevice.volumeControlView.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.spatialProfileExists@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.spatialProfileExists.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.spatialProfileExists.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.spatialProfileExists : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x678))(v2) & 1;

}

void key path setter for HeadphoneDevice.spatialProfileExists : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x680))(v4 & 1);

}

void (*HeadphoneDevice.spatialProfileExists.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.spatialProfileExists.modify;
}

void HeadphoneDevice.spatialProfileExists.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$spatialProfileExists : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x690))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$spatialProfileExists : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x698))(v10);

}

uint64_t HeadphoneDevice.$spatialProfileExists.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$spatialProfileExists.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$spatialProfileExists.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$spatialProfileExists.getter();
  return HeadphoneDevice.$spatialProfileExists.modify;
}

void HeadphoneDevice.$spatialProfileExists.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$spatialProfileExists.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$spatialProfileExists.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.isCaseSoundSupported@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.isCaseSoundSupported.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.isCaseSoundSupported.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.isCaseSoundSupported : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x6A8))(v2) & 1;

}

void key path setter for HeadphoneDevice.isCaseSoundSupported : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x6B0))(v4 & 1);

}

void (*HeadphoneDevice.isCaseSoundSupported.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.isCaseSoundSupported.modify;
}

void HeadphoneDevice.isCaseSoundSupported.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$isCaseSoundSupported : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x6C0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$isCaseSoundSupported : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x6C8))(v10);

}

uint64_t HeadphoneDevice.$isCaseSoundSupported.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$isCaseSoundSupported.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$isCaseSoundSupported.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$isCaseSoundSupported.getter();
  return HeadphoneDevice.$isCaseSoundSupported.modify;
}

void HeadphoneDevice.$isCaseSoundSupported.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$isCaseSoundSupported.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$isCaseSoundSupported.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.caseSound@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.caseSound.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.caseSound.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.caseSound : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x6D8))(v2) & 1;

}

void key path setter for HeadphoneDevice.caseSound : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x6E0))(v4 & 1);

}

void (*HeadphoneDevice.caseSound.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.caseSound.modify;
}

void HeadphoneDevice.caseSound.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$caseSound : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x6F0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$caseSound : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x6F8))(v10);

}

uint64_t HeadphoneDevice.$caseSound.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$caseSound.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$caseSound.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$caseSound.getter();
  return HeadphoneDevice.$caseSound.modify;
}

void HeadphoneDevice.$caseSound.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$caseSound.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$caseSound.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HeadphoneDevice.airPodsServiceClient()
{
  return 0;
}

id HeadphoneDevice.airPodsServiceClient.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDevice.airPodsServiceClient.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

void key path getter for HeadphoneDevice.airPodsServiceClient : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x708))(v2);

}

void key path setter for HeadphoneDevice.airPodsServiceClient : HeadphoneDevice(id *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of BTAirPodsControlServiceClient?(a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x710))(v5);

}

uint64_t (*HeadphoneDevice.airPodsServiceClient.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.airPodsServiceClient.modify;
}

uint64_t HeadphoneDevice.airPodsServiceClient.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.isResettingCaseSoundOnError.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_isResettingCaseSoundOnError);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDevice.isResettingCaseSoundOnError.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_isResettingCaseSoundOnError);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.isResettingCaseSoundOnError : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x720))(v2) & 1;

}

void key path setter for HeadphoneDevice.isResettingCaseSoundOnError : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x728))(v4 & 1);

}

uint64_t (*HeadphoneDevice.isResettingCaseSoundOnError.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.isResettingCaseSoundOnError.modify;
}

uint64_t HeadphoneDevice.isResettingCaseSoundOnError.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.isSettingCaseSoundValue@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.isSettingCaseSoundValue.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.isSettingCaseSoundValue.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.isSettingCaseSoundValue : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x738))(v2) & 1;

}

void key path setter for HeadphoneDevice.isSettingCaseSoundValue : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x740))(v4 & 1);

}

void (*HeadphoneDevice.isSettingCaseSoundValue.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.isSettingCaseSoundValue.modify;
}

void HeadphoneDevice.isSettingCaseSoundValue.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$isSettingCaseSoundValue : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x750))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$isSettingCaseSoundValue : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x758))(v10);

}

uint64_t HeadphoneDevice.$isSettingCaseSoundValue.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$isSettingCaseSoundValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$isSettingCaseSoundValue.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$isSettingCaseSoundValue.getter();
  return HeadphoneDevice.$isSettingCaseSoundValue.modify;
}

void HeadphoneDevice.$isSettingCaseSoundValue.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$isSettingCaseSoundValue.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$isSettingCaseSoundValue.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.endCallGesture@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBPeerCallConfig();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.endCallGesture.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.endCallGesture.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.endCallGesture : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x768))(v2);

}

void key path setter for HeadphoneDevice.endCallGesture : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x770))(v4);

}

void (*HeadphoneDevice.endCallGesture.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.endCallGesture.modify;
}

void HeadphoneDevice.endCallGesture.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$endCallGesture : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x780))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$endCallGesture : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x788))(v10);

}

uint64_t HeadphoneDevice.$endCallGesture.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$endCallGesture.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$endCallGesture.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$endCallGesture.getter();
  return HeadphoneDevice.$endCallGesture.modify;
}

void HeadphoneDevice.$endCallGesture.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$endCallGesture.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$endCallGesture.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.muteControlGesture@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBPeerCallConfig();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.muteControlGesture.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.muteControlGesture.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.muteControlGesture : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x798))(v2);

}

void key path setter for HeadphoneDevice.muteControlGesture : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x7A0))(v4);

}

void (*HeadphoneDevice.muteControlGesture.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.muteControlGesture.modify;
}

void HeadphoneDevice.muteControlGesture.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$muteControlGesture : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x7B0))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$muteControlGesture : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x7B8))(v10);

}

uint64_t HeadphoneDevice.$muteControlGesture.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$muteControlGesture.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$muteControlGesture.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBPeerCallConfig>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$muteControlGesture.getter();
  return HeadphoneDevice.$muteControlGesture.modify;
}

void HeadphoneDevice.$muteControlGesture.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$muteControlGesture.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$muteControlGesture.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HeadphoneDevice.serialNumbers()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
  _allocateUninitializedArray<A>(_:)();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t HeadphoneDevice.serialNumbers.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_serialNumbers);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.serialNumbers.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_serialNumbers);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for HeadphoneDevice.serialNumbers : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x7C8))(v2);

}

void key path setter for HeadphoneDevice.serialNumbers : HeadphoneDevice(uint64_t *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [Int : String](a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x7D0))(v5);

}

uint64_t (*HeadphoneDevice.serialNumbers.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.serialNumbers.modify;
}

uint64_t HeadphoneDevice.serialNumbers.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HeadphoneDevice.selectiveSpeechListening@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.selectiveSpeechListening.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.selectiveSpeechListening.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.selectiveSpeechListening : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x7E0))(v2) & 1;

}

void key path setter for HeadphoneDevice.selectiveSpeechListening : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x7E8))(v4 & 1);

}

void (*HeadphoneDevice.selectiveSpeechListening.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.selectiveSpeechListening.modify;
}

void HeadphoneDevice.selectiveSpeechListening.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$selectiveSpeechListening : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x7F8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$selectiveSpeechListening : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x800))(v10);

}

uint64_t HeadphoneDevice.$selectiveSpeechListening.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$selectiveSpeechListening.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$selectiveSpeechListening.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$selectiveSpeechListening.getter();
  return HeadphoneDevice.$selectiveSpeechListening.modify;
}

void HeadphoneDevice.$selectiveSpeechListening.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$selectiveSpeechListening.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$selectiveSpeechListening.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.conversationDetect@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.conversationDetect.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.conversationDetect.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.conversationDetect : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x810))(v2) & 1;

}

void key path setter for HeadphoneDevice.conversationDetect : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x818))(v4 & 1);

}

void (*HeadphoneDevice.conversationDetect.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.conversationDetect.modify;
}

void HeadphoneDevice.conversationDetect.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$conversationDetect : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x828))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$conversationDetect : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x830))(v10);

}

uint64_t HeadphoneDevice.$conversationDetect.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$conversationDetect.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$conversationDetect.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$conversationDetect.getter();
  return HeadphoneDevice.$conversationDetect.modify;
}

void HeadphoneDevice.$conversationDetect.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$conversationDetect.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$conversationDetect.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.adaptiveVolume@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  _BYTE v3[9];

  v3[1] = a1 & 1;
  v3[0] = a1 & 1;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE1328], a2);
}

uint64_t HeadphoneDevice.adaptiveVolume.getter()
{
  void *v0;
  id v1;
  char v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3 & 1;
}

uint64_t HeadphoneDevice.adaptiveVolume.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.adaptiveVolume : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x840))(v2) & 1;

}

void key path setter for HeadphoneDevice.adaptiveVolume : HeadphoneDevice(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x848))(v4 & 1);

}

void (*HeadphoneDevice.adaptiveVolume.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.adaptiveVolume.modify;
}

void HeadphoneDevice.adaptiveVolume.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$adaptiveVolume : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x858))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$adaptiveVolume : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x860))(v10);

}

uint64_t HeadphoneDevice.$adaptiveVolume.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$adaptiveVolume.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$adaptiveVolume.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$adaptiveVolume.getter();
  return HeadphoneDevice.$adaptiveVolume.modify;
}

void HeadphoneDevice.$adaptiveVolume.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$adaptiveVolume.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$adaptiveVolume.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelMain@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  _DWORD v3[3];

  *(float *)&v3[1] = a2;
  *(float *)v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE14E8], a1);
}

float HeadphoneDevice.batteryLevelMain.getter()
{
  void *v0;
  id v1;
  float v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelMain.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelMain : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x870))(v2);

}

void key path setter for HeadphoneDevice.batteryLevelMain : HeadphoneDevice(float *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  float v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x878))(v2, v4);

}

void (*HeadphoneDevice.batteryLevelMain.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelMain.modify;
}

void HeadphoneDevice.batteryLevelMain.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelMain : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x888))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryLevelMain : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x890))(v10);

}

uint64_t HeadphoneDevice.$batteryLevelMain.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelMain.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryLevelMain.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelMain.getter();
  return HeadphoneDevice.$batteryLevelMain.modify;
}

void HeadphoneDevice.$batteryLevelMain.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelMain.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelMain.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateMain@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateMain.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateMain.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateMain : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x8A0))(v2);

}

void key path setter for HeadphoneDevice.batteryStateMain : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x8A8))(v4);

}

void (*HeadphoneDevice.batteryStateMain.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateMain.modify;
}

void HeadphoneDevice.batteryStateMain.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateMain : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x8B8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryStateMain : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x8C0))(v10);

}

uint64_t HeadphoneDevice.$batteryStateMain.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateMain.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryStateMain.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryStateMain.getter();
  return HeadphoneDevice.$batteryStateMain.modify;
}

void HeadphoneDevice.$batteryStateMain.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateMain.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateMain.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelLeft@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  _DWORD v3[3];

  *(float *)&v3[1] = a2;
  *(float *)v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE14E8], a1);
}

float HeadphoneDevice.batteryLevelLeft.getter()
{
  void *v0;
  id v1;
  float v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelLeft.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelLeft : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x8D0))(v2);

}

void key path setter for HeadphoneDevice.batteryLevelLeft : HeadphoneDevice(float *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  float v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x8D8))(v2, v4);

}

void (*HeadphoneDevice.batteryLevelLeft.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelLeft.modify;
}

void HeadphoneDevice.batteryLevelLeft.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x8E8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryLevelLeft : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x8F0))(v10);

}

uint64_t HeadphoneDevice.$batteryLevelLeft.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelLeft.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryLevelLeft.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelLeft.getter();
  return HeadphoneDevice.$batteryLevelLeft.modify;
}

void HeadphoneDevice.$batteryLevelLeft.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateLeft@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateLeft.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateLeft.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateLeft : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x900))(v2);

}

void key path setter for HeadphoneDevice.batteryStateLeft : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x908))(v4);

}

void (*HeadphoneDevice.batteryStateLeft.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateLeft.modify;
}

void HeadphoneDevice.batteryStateLeft.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateLeft : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x918))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryStateLeft : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x920))(v10);

}

uint64_t HeadphoneDevice.$batteryStateLeft.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateLeft.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryStateLeft.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryStateLeft.getter();
  return HeadphoneDevice.$batteryStateLeft.modify;
}

void HeadphoneDevice.$batteryStateLeft.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateLeft.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateLeft.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelRight@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  _DWORD v3[3];

  *(float *)&v3[1] = a2;
  *(float *)v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE14E8], a1);
}

float HeadphoneDevice.batteryLevelRight.getter()
{
  void *v0;
  id v1;
  float v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelRight.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelRight : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x930))(v2);

}

void key path setter for HeadphoneDevice.batteryLevelRight : HeadphoneDevice(float *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  float v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x938))(v2, v4);

}

void (*HeadphoneDevice.batteryLevelRight.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelRight.modify;
}

void HeadphoneDevice.batteryLevelRight.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x948))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryLevelRight : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x950))(v10);

}

uint64_t HeadphoneDevice.$batteryLevelRight.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelRight.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryLevelRight.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelRight.getter();
  return HeadphoneDevice.$batteryLevelRight.modify;
}

void HeadphoneDevice.$batteryLevelRight.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateRight@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateRight.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateRight.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateRight : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x960))(v2);

}

void key path setter for HeadphoneDevice.batteryStateRight : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x968))(v4);

}

void (*HeadphoneDevice.batteryStateRight.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateRight.modify;
}

void HeadphoneDevice.batteryStateRight.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateRight : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x978))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryStateRight : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x980))(v10);

}

uint64_t HeadphoneDevice.$batteryStateRight.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateRight.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryStateRight.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryStateRight.getter();
  return HeadphoneDevice.$batteryStateRight.modify;
}

void HeadphoneDevice.$batteryStateRight.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateRight.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateRight.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryLevelCase@<X0>(uint64_t a1@<X8>, float a2@<S0>)
{
  _DWORD v3[3];

  *(float *)&v3[1] = a2;
  *(float *)v3 = a2;
  return Published.init(wrappedValue:)((uint64_t)v3, MEMORY[0x24BEE14E8], a1);
}

float HeadphoneDevice.batteryLevelCase.getter()
{
  void *v0;
  id v1;
  float v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryLevelCase.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryLevelCase : HeadphoneDevice(id *a1@<X0>, float *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(float (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x990))(v2);

}

void key path setter for HeadphoneDevice.batteryLevelCase : HeadphoneDevice(float *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  float v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(id, float))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x998))(v2, v4);

}

void (*HeadphoneDevice.batteryLevelCase.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryLevelCase.modify;
}

void HeadphoneDevice.batteryLevelCase.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryLevelCase : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x9A8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryLevelCase : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x9B0))(v10);

}

uint64_t HeadphoneDevice.$batteryLevelCase.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryLevelCase.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryLevelCase.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryLevelCase.getter();
  return HeadphoneDevice.$batteryLevelCase.modify;
}

void HeadphoneDevice.$batteryLevelCase.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryLevelCase.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryLevelCase.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.batteryStateCase@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _BYTE v5[9];

  v5[1] = a1;
  v5[0] = a1;
  v2 = type metadata accessor for CBBatteryState();
  return Published.init(wrappedValue:)((uint64_t)v5, v2, a2);
}

uint64_t HeadphoneDevice.batteryStateCase.getter()
{
  void *v0;
  id v1;
  unsigned __int8 v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.batteryStateCase.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  return static Published.subscript.setter();
}

void key path getter for HeadphoneDevice.batteryStateCase : HeadphoneDevice(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x9C0))(v2);

}

void key path setter for HeadphoneDevice.batteryStateCase : HeadphoneDevice(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x9C8))(v4);

}

void (*HeadphoneDevice.batteryStateCase.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.batteryStateCase.modify;
}

void HeadphoneDevice.batteryStateCase.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

void key path getter for HeadphoneDevice.$batteryStateCase : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x9D8))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$batteryStateCase : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0x9E0))(v10);

}

uint64_t HeadphoneDevice.$batteryStateCase.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$batteryStateCase.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$batteryStateCase.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CBBatteryState>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$batteryStateCase.getter();
  return HeadphoneDevice.$batteryStateCase.modify;
}

void HeadphoneDevice.$batteryStateCase.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$batteryStateCase.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$batteryStateCase.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

void property wrapper backing initializer of HeadphoneDevice.hearingRecord(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v2;
  uint64_t v3;
  _QWORD v6[2];

  v6[1] = a1;
  v2 = a1;
  v6[0] = a1;
  v3 = type metadata accessor for HearingRecord();
  Published.init(wrappedValue:)((uint64_t)v6, v3, a2);

}

void key path getter for HeadphoneDevice.hearingRecord : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x9F0))(v2);

}

void key path setter for HeadphoneDevice.hearingRecord : HeadphoneDevice(id *a1, id *a2)
{
  id v2;
  id v3;
  id v4;
  _QWORD *v6;

  v4 = *a1;
  v2 = *a1;
  v6 = *a2;
  v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x24BEE4EA0]) + 0x9F8))(v4);

}

uint64_t HeadphoneDevice.hearingRecord.getter()
{
  void *v0;
  id v1;
  uint64_t v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

void HeadphoneDevice.hearingRecord.setter(void *a1)
{
  void *v1;
  id v2;
  id v3;

  v2 = v1;
  swift_getKeyPath();
  swift_getKeyPath();
  v3 = a1;
  static Published.subscript.setter();

}

void (*HeadphoneDevice.hearingRecord.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.hearingRecord.modify;
}

void HeadphoneDevice.hearingRecord.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

id variable initialization expression of HeadphoneDevice._hearingRecord()
{
  type metadata accessor for HearingRecord();
  return HearingRecord.__allocating_init()();
}

void key path getter for HeadphoneDevice.$hearingRecord : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0xA08))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$hearingRecord : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0xA10))(v10);

}

uint64_t HeadphoneDevice.$hearingRecord.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$hearingRecord.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$hearingRecord.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$hearingRecord.getter();
  return HeadphoneDevice.$hearingRecord.modify;
}

void HeadphoneDevice.$hearingRecord.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$hearingRecord.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$hearingRecord.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HeadphoneDevice.audioAccessoryDevice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD v6[2];

  v6[1] = a1;
  swift_retain();
  v6[0] = a1;
  v2 = type metadata accessor for AADevice();
  Published.init(wrappedValue:)((uint64_t)v6, v2, a2);
  return swift_release();
}

void key path getter for HeadphoneDevice.audioAccessoryDevice : HeadphoneDevice(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xA20))(v2);

}

void key path setter for HeadphoneDevice.audioAccessoryDevice : HeadphoneDevice(uint64_t *a1, id *a2)
{
  id v2;
  uint64_t v3;
  _QWORD *v5;

  v3 = *a1;
  swift_retain();
  v5 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v5 & *MEMORY[0x24BEE4EA0]) + 0xA28))(v3);

}

uint64_t HeadphoneDevice.audioAccessoryDevice.getter()
{
  void *v0;
  id v1;
  uint64_t v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HeadphoneDevice.audioAccessoryDevice.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  return swift_release();
}

void (*HeadphoneDevice.audioAccessoryDevice.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HeadphoneDevice.audioAccessoryDevice.modify;
}

void HeadphoneDevice.audioAccessoryDevice.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

Swift::String *variable initialization expression of HeadphoneDevice._audioAccessoryDevice()
{
  type metadata accessor for AADevice();
  return AADevice.__allocating_init()();
}

void key path getter for HeadphoneDevice.$audioAccessoryDevice : HeadphoneDevice(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0xA38))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HeadphoneDevice.$audioAccessoryDevice : HeadphoneDevice(uint64_t a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  char *v10;
  id v11;
  _QWORD *v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (char *)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  (*(void (**)(char *))((*v9 & *MEMORY[0x24BEE4EA0]) + 0xA40))(v10);

}

uint64_t HeadphoneDevice.$audioAccessoryDevice.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HeadphoneDevice.$audioAccessoryDevice.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HeadphoneDevice.$audioAccessoryDevice.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HeadphoneDevice.$audioAccessoryDevice.getter();
  return HeadphoneDevice.$audioAccessoryDevice.modify;
}

void HeadphoneDevice.$audioAccessoryDevice.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HeadphoneDevice.$audioAccessoryDevice.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HeadphoneDevice.$audioAccessoryDevice.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HeadphoneDevice.deviceDelegate()
{
  return 0;
}

uint64_t HeadphoneDevice.deviceDelegate.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = v0 + OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate;
  swift_beginAccess();
  v3 = MEMORY[0x24263B794](v2);
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.deviceDelegate.setter()
{
  swift_unknownObjectRetain();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void (*HeadphoneDevice.deviceDelegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = v1;
  v2 = OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate;
  v6[5] = OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate;
  v5 = v1 + v2;
  swift_beginAccess();
  v6[3] = MEMORY[0x24263B794](v5);
  return HeadphoneDevice.deviceDelegate.modify;
}

void HeadphoneDevice.deviceDelegate.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of HeadphoneDeviceDelegate?();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v2);
}

_QWORD *HeadphoneDevice.__allocating_init(cbDevice:)(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return HeadphoneDevice.init(cbDevice:)(a1);
}

_QWORD *HeadphoneDevice.init(cbDevice:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  id v64;
  id v65;
  uint64_t v66;
  id v67;
  id v68;
  char *v69;
  Swift::String *v70;
  char *v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  void *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  Class isa;
  id v83;
  unint64_t v84;
  Swift::String v85;
  id v86;
  _QWORD *v87;
  char v88;
  _QWORD *v89;
  char v90;
  uint64_t v91;
  _QWORD *v92;
  char v93;
  uint64_t v94;
  _QWORD *v95;
  char v96;
  uint64_t v97;
  _QWORD *v98;
  char v99;
  uint64_t v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t *v108;
  id v109;
  unsigned int v110;
  id v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  unsigned __int8 v114;
  char v115;
  id v116;
  id v117;
  id v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  id v123;
  id v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127;
  float v128;
  float v129;
  float v130;
  float v131;
  objc_class *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  char v149;
  _QWORD *v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  Swift::String v154;
  _QWORD *v155;
  uint64_t v156;
  Swift::String v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  Swift::String v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  _QWORD *v167;
  uint64_t v168;
  Swift::String v169;
  uint64_t v170;
  _QWORD v172[2];
  _QWORD *v173;
  int v174;
  void *v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  char *v188;
  uint64_t v189;
  char *v190;
  unint64_t v191;
  int v192;
  void *v193;
  int v194;
  void *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  int v201;
  int v202;
  int v203;
  char *v204;
  uint64_t v205;
  _BYTE *v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  uint64_t v211;
  _DWORD *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  uint64_t v216;
  id v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  unint64_t v221;
  id v222;
  char *v223;
  int v224;
  _BYTE *v225;
  char *v226;
  uint64_t v227;
  unsigned __int8 *v228;
  char *v229;
  int v230;
  uint64_t *v231;
  char *v232;
  uint64_t v233;
  unsigned __int8 *v234;
  char *v235;
  int v236;
  uint64_t *v237;
  int v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  unsigned __int8 *v242;
  char *v243;
  int v244;
  uint64_t *v245;
  char *v246;
  float v247;
  uint64_t *v248;
  char *v249;
  float v250;
  uint64_t *v251;
  char *v252;
  float v253;
  uint64_t *v254;
  char *v255;
  float v256;
  uint64_t *v257;
  char *v258;
  unsigned int v259;
  uint64_t *v260;
  char *v261;
  unsigned int v262;
  uint64_t *v263;
  char *v264;
  unsigned int v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  unsigned int v270;
  uint64_t *v271;
  uint64_t v272;
  id v273;
  _QWORD *v274;
  id v275;
  int v276;
  int v277;
  int v278;
  void **v279;
  id v280;
  uint64_t *v281;
  char *v282;
  uint64_t *v283;
  char *v284;
  uint64_t *v285;
  char *v286;
  uint64_t *v287;
  id v288;
  id v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  int v293;
  uint64_t *v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  char *v298;
  unint64_t v299;
  char *v300;
  unsigned int v301;
  uint64_t *v302;
  char *v303;
  unsigned int v304;
  uint64_t *v305;
  char *v306;
  uint64_t *v307;
  uint64_t v308;
  char *v309;
  int v310;
  uint64_t *v311;
  uint64_t v312;
  id *v313;
  uint64_t *v314;
  id v315;
  unsigned int v316;
  char *v317;
  unsigned int v318;
  uint64_t *v319;
  char *v320;
  uint64_t v321;
  unsigned __int8 *v322;
  char *v323;
  int v324;
  uint64_t *v325;
  char *v326;
  int v327;
  uint64_t *v328;
  char *v329;
  unsigned int v330;
  uint64_t *v331;
  uint64_t v332;
  uint64_t v333;
  char *v334;
  unsigned int v335;
  uint64_t *v336;
  uint64_t v337;
  char *v338;
  uint64_t v339;
  uint64_t v340;
  unsigned __int8 *v341;
  unsigned int v342;
  char *v343;
  _BOOL4 v344;
  _DWORD *v345;
  char *v346;
  unsigned int v347;
  uint64_t *v348;
  uint64_t v349;
  uint64_t v350;
  char *v351;
  unsigned int v352;
  uint64_t *v353;
  char *v354;
  uint64_t v355;
  unsigned __int8 *v356;
  _BOOL4 v357;
  char *v358;
  _BOOL4 v359;
  _DWORD *v360;
  _BOOL4 v361;
  char *v362;
  _BOOL4 v363;
  _DWORD *v364;
  _BOOL4 v365;
  char *v366;
  _BOOL4 v367;
  uint64_t *v368;
  _BOOL4 v369;
  char *v370;
  int v371;
  char *v372;
  unsigned int v373;
  unint64_t v374;
  unsigned int v375;
  char *v376;
  unsigned int v377;
  char *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  unsigned int v383;
  char *v384;
  unint64_t v385;
  uint64_t v386;
  _DWORD *v387;
  unint64_t v388;
  uint64_t v389;
  uint64_t v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  Swift::String v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  unint64_t v398;
  void *object;
  uint64_t v400;
  int v401;
  uint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  id v406;
  uint64_t v407;
  unint64_t v408;
  uint64_t v409;
  unint64_t v410;
  id v411;
  id v412;
  CGImageRef v413;
  uint64_t v414;
  id v415;
  unint64_t v416;
  CGImage *v417;
  id v418;
  Swift::String v419;
  Swift::String v420;
  id v421;
  char *v422;
  Swift::String v423;
  char *v424;
  id v425;
  id v426;
  Swift::String v427;
  Swift::String v428;
  id v429;
  const char *v430;
  const char *v431;
  const char *v432;
  const char *v433;
  const char *v434;
  unint64_t v435;
  unint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  int v446;
  uint64_t v447;
  id v448;
  char *v449;
  id v450;
  id v451;
  uint64_t v452;
  unint64_t v453;
  char v454;
  uint64_t v455;
  uint64_t v456;
  char v457;
  char v458;
  char v459;
  _BYTE v460[3];
  uint64_t v461;
  uint64_t v462;
  char v463;
  char v464;
  char v465;
  char v466;
  char v467;
  char v468;
  char v469;
  char v470;
  _DWORD v471[2];
  uint64_t v472;
  unint64_t v473;
  objc_super v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  char v484;
  unsigned __int8 v485;
  uint64_t v486;
  char v487;
  unsigned __int8 v488;
  uint64_t v489;
  char v490;
  unsigned __int8 v491;
  _BYTE v492[30];
  char v493;
  char v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  id v500;
  uint64_t v501;
  id v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char v507;
  unsigned __int8 v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  char v513;
  unsigned __int8 v514;
  uint64_t v515;
  char v516;
  unsigned __int8 v517;
  uint64_t v518;
  uint64_t v519;
  _DWORD v520[8];
  _DWORD v521[8];
  _DWORD v522[8];
  uint64_t v523;
  _DWORD v524[2];
  char v525;
  char v526;
  char v527;
  char v528;
  char v529;
  id v530;
  Swift::String v531;
  Swift::String v532;
  Swift::String v533;
  char v534;
  Swift::String v535;
  Swift::String v536;
  id v537;
  uint64_t v538;
  id v539;

  v450 = a1;
  v430 = "init(cbDevice:)";
  v431 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v432 = "Fatal error";
  v433 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v434 = "HeadphoneManager/HeadphoneDevice.swift";
  v539 = 0;
  v538 = 0;
  v537 = 0;
  v530 = 0;
  v528 = 0;
  v527 = 0;
  v472 = 0;
  v473 = 0;
  v452 = 0;
  v453 = 0;
  v445 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<AADevice>);
  v442 = *(_QWORD *)(v445 - 8);
  v435 = (*(_QWORD *)(v442 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v445, v1);
  v444 = (uint64_t)v172 - v435;
  v441 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<HearingRecord>);
  v438 = *(_QWORD *)(v441 - 8);
  v436 = (*(_QWORD *)(v438 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (void *)MEMORY[0x24BDAC7A8](v449, v2);
  v440 = (uint64_t)v172 - v436;
  v538 = v4;
  v5 = v3;
  v6 = v449;
  v7 = v449;
  v8 = v449;
  v9 = v449;
  v10 = v449;
  v11 = v449;
  v12 = v449;
  v13 = v449;
  v14 = v449;
  v15 = v449;
  v16 = v449;
  v17 = v449;
  v18 = v449;
  v19 = v449;
  v20 = v449;
  v21 = v449;
  v22 = v449;
  v23 = v449;
  v24 = v449;
  v25 = v449;
  v26 = v449;
  v27 = v449;
  v28 = v449;
  v29 = v449;
  v30 = v449;
  v31 = v449;
  v32 = v449;
  v33 = v449;
  v34 = v449;
  v35 = v449;
  v36 = v449;
  v37 = v449;
  v38 = v449;
  v39 = v449;
  v40 = v449;
  v41 = v449;
  v42 = v449;
  v43 = v449;
  v44 = v449;
  v45 = v449;
  v46 = v449;
  v47 = v449;
  v48 = v449;
  v49 = v449;
  v50 = v449;
  v51 = v449;
  v52 = v449;
  v53 = v449;
  v54 = v449;
  v55 = v449;
  v56 = v449;
  v57 = v449;
  v58 = v449;
  v59 = v449;
  v60 = v449;
  v61 = v449;
  v62 = v449;
  v63 = v449;
  v64 = v449;
  v539 = v449;
  v447 = 0;
  *(_QWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_aaDevice] = 0;

  v65 = v449;
  *(_QWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient] = v447;

  v437 = OBJC_IVAR___HPMHeadphoneDevice_serialNumbers;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, String));
  _allocateUninitializedArray<A>(_:)();
  v66 = Dictionary.init(dictionaryLiteral:)();
  v67 = v449;
  *(_QWORD *)&v449[v437] = v66;

  v439 = OBJC_IVAR___HPMHeadphoneDevice__hearingRecord;
  type metadata accessor for HearingRecord();
  v68 = HearingRecord.__allocating_init()();
  v69 = v449;
  property wrapper backing initializer of HeadphoneDevice.hearingRecord(v68, v440);
  (*(void (**)(char *, uint64_t, uint64_t))(v438 + 32))(&v69[v439], v440, v441);

  v443 = OBJC_IVAR___HPMHeadphoneDevice__audioAccessoryDevice;
  type metadata accessor for AADevice();
  v70 = AADevice.__allocating_init()();
  v71 = v449;
  property wrapper backing initializer of HeadphoneDevice.audioAccessoryDevice((uint64_t)v70, v444);
  (*(void (**)(char *, uint64_t, uint64_t))(v442 + 32))(&v71[v443], v444, v445);

  swift_unknownObjectWeakInit();
  v72 = v449;
  v446 = 0;
  *(_DWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_accessorySettingFeatureBitMask] = 0;

  v73 = v449;
  *(_DWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_deviceColor] = v446;

  v74 = v450;
  v75 = v449;
  *(_QWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_cbDevice] = v450;

  type metadata accessor for CBProductInfo();
  v448 = @nonobjc CBProductInfo.__allocating_init(productID:)(objc_msgSend(v450, sel_productID));
  v537 = v448;
  v76 = v448;
  v77 = v449;
  *(_QWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_productInfo] = v448;

  v451 = objc_msgSend(v450, sel_name);
  if (v451)
  {
    v429 = v451;
    v426 = v451;
    v427._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v427._object = v78;

    v428 = v427;
  }
  else
  {
    v428._countAndFlagsBits = 0;
    v428._object = 0;
  }
  v535 = v428;
  if (v428._object)
  {
    v536 = v535;
  }
  else
  {
    v536 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, 1);
    outlined destroy of String?();
  }
  v423 = v536;
  v422 = &v449[OBJC_IVAR___HPMHeadphoneDevice__name];
  v424 = &v534;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.name(v423._countAndFlagsBits, (uint64_t)v423._object, (uint64_t)v422);
  swift_endAccess();

  v425 = objc_msgSend(v448, sel_sfSymbolNameMain);
  if (v425)
  {
    v421 = v425;
    v418 = v425;
    v419._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v419._object = v79;

    v420 = v419;
  }
  else
  {
    v420._countAndFlagsBits = 0;
    v420._object = 0;
  }
  v532 = v420;
  if (v420._object)
  {
    v533 = v532;
  }
  else
  {
    v533 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("headphones", 0xAuLL, 1);
    outlined destroy of String?();
  }
  v531 = v533;
  v80 = String.init<A>(_:)();
  v414 = v81;
  v415 = getDeviceIcon(symbolName:)(v80, v81);
  swift_bridgeObjectRelease();
  v530 = v415;
  v416 = type metadata accessor for UIImage();
  v417 = (CGImage *)objc_msgSend(v415, sel_CGImage);
  if (v417)
  {
    v413 = v417;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  isa = UIImage.__allocating_init(cgImage:)(v413).super.isa;
  v83 = v449;
  *(_QWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_icon] = isa;

  v412 = objc_msgSend(v450, sel_btAddressData);
  if (v412)
  {
    v411 = v412;
    v406 = v412;
    v407 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v408 = v84;

    v409 = v407;
    v410 = v408;
  }
  else
  {
    v409 = 0;
    v410 = 0xF000000000000000;
  }
  v404 = v410;
  v405 = v409;
  if ((v410 & 0xF000000000000000) == 0xF000000000000000)
  {

    type metadata accessor for Log();
    v400 = static Log.shared.getter();
    v401 = 1;
    object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BT Address", 0x24uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, v401 & 1);
    v86 = v449;
    *(Swift::String *)&v449[OBJC_IVAR___HPMHeadphoneDevice_btAddress] = v85;

  }
  else
  {
    v402 = v405;
    v403 = v404;
    v398 = v404;
    v397 = v405;

    v452 = v397;
    v453 = v398;
    v394 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X-%02X-%02X-%02X-%02X-%02X", 0x1DuLL, 1);
    v392 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    v393 = _allocateUninitializedArray<A>(_:)();
    v391 = v87;
    v88 = Data.subscript.getter();
    v89 = v391;
    v389 = MEMORY[0x24BEE4260];
    v391[3] = MEMORY[0x24BEE4260];
    v390 = MEMORY[0x24BEE42B0];
    v89[4] = MEMORY[0x24BEE42B0];
    *(_BYTE *)v89 = v88;
    v90 = Data.subscript.getter();
    v91 = v390;
    v92 = v391;
    v391[8] = v389;
    v92[9] = v91;
    *((_BYTE *)v92 + 40) = v90;
    v93 = Data.subscript.getter();
    v94 = v390;
    v95 = v391;
    v391[13] = v389;
    v95[14] = v94;
    *((_BYTE *)v95 + 80) = v93;
    v96 = Data.subscript.getter();
    v97 = v390;
    v98 = v391;
    v391[18] = v389;
    v98[19] = v97;
    *((_BYTE *)v98 + 120) = v96;
    v99 = Data.subscript.getter();
    v100 = v390;
    v101 = v391;
    v391[23] = v389;
    v101[24] = v100;
    *((_BYTE *)v101 + 160) = v99;
    v102 = Data.subscript.getter();
    v103 = v390;
    v104 = v391;
    v391[28] = v389;
    v104[29] = v103;
    *((_BYTE *)v104 + 200) = v102;
    _finalizeUninitializedArray<A>(_:)();
    v395 = String.init(format:_:)();
    v396 = v105;
    swift_bridgeObjectRelease();
    v106 = v396;
    v107 = v449;
    v108 = (uint64_t *)&v449[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
    *v108 = v395;
    v108[1] = v106;

    outlined consume of Data._Representation(v397, v398);
  }
  v371 = objc_msgSend(v450, sel_listeningMode);
  v370 = &v449[OBJC_IVAR___HPMHeadphoneDevice__listeningMode];
  v372 = &v529;
  v380 = 33;
  v381 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.listeningMode(v371, (uint64_t)v370);
  swift_endAccess();

  v109 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_isUpdatingDeviceConfig] = 0;

  v374 = 0x1F324A000uLL;
  v373 = objc_msgSend(v450, (SEL)0x1F324A5C8);
  v528 = v373;
  v379 = 0x1F2E1A000uLL;
  v375 = objc_msgSend(v450, (SEL)0x1F2E1ABCFLL);
  v527 = v375;
  v377 = objc_msgSend(v450, (SEL)(v374 + 1480));
  v376 = &v449[OBJC_IVAR___HPMHeadphoneDevice__clickHoldModeLeft];
  v378 = &v526;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.clickHoldModeLeft(v377, (uint64_t)v376);
  swift_endAccess();

  v383 = objc_msgSend(v450, (SEL)(v379 + 3023));
  v382 = &v449[OBJC_IVAR___HPMHeadphoneDevice__clickHoldModeRight];
  v384 = &v525;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.clickHoldModeRight(v383, (uint64_t)v382);
  swift_endAccess();

  v385 = 0x1F2C2B000uLL;
  v110 = objc_msgSend(v450, (SEL)0x1F2C2BE48);
  v111 = v449;
  *(_DWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_listeningModeConfigs] = v110;

  v524[1] = objc_msgSend(v450, (SEL)(v385 + 3656));
  v387 = v524;
  v524[0] = 1;
  v386 = type metadata accessor for CBListeningModeConfigs();
  v388 = lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  v369 = (OptionSet<>.contains(_:)() & 1) != 0;
  v367 = v369;
  v366 = &v449[OBJC_IVAR___HPMHeadphoneDevice__pressHoldOff];
  v368 = &v523;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldOff(v367, (uint64_t)v366);
  swift_endAccess();

  v522[7] = objc_msgSend(v450, sel_listeningModeConfigs);
  v522[6] = 4;
  v365 = (OptionSet<>.contains(_:)() & 1) != 0;
  v363 = v365;
  v362 = &v449[OBJC_IVAR___HPMHeadphoneDevice__pressHoldTransparency];
  v364 = v522;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldTransparency(v363, (uint64_t)v362);
  swift_endAccess();

  v521[7] = objc_msgSend(v450, sel_listeningModeConfigs);
  v521[6] = 8;
  v361 = (OptionSet<>.contains(_:)() & 1) != 0;
  v359 = v361;
  v358 = &v449[OBJC_IVAR___HPMHeadphoneDevice__pressHoldAuto];
  v360 = v521;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldAuto(v359, (uint64_t)v358);
  swift_endAccess();

  v520[7] = objc_msgSend(v450, sel_listeningModeConfigs);
  v520[6] = 2;
  v357 = (OptionSet<>.contains(_:)() & 1) != 0;
  v344 = v357;
  v343 = &v449[OBJC_IVAR___HPMHeadphoneDevice__pressHoldNoiseCancel];
  v345 = v520;
  v349 = 33;
  v350 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.pressHoldNoiseCancel(v344, (uint64_t)v343);
  swift_endAccess();

  v347 = objc_msgSend(v450, sel_doubleTapActionLeft);
  v346 = &v449[OBJC_IVAR___HPMHeadphoneDevice__doubleTapActionLeft];
  v348 = &v519;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.doubleTapActionLeft(v347, (uint64_t)v346);
  swift_endAccess();

  v352 = objc_msgSend(v450, sel_doubleTapActionRight);
  v351 = &v449[OBJC_IVAR___HPMHeadphoneDevice__doubleTapActionRight];
  v353 = &v518;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.doubleTapActionRight(v352, (uint64_t)v351);
  swift_endAccess();

  v112 = objc_msgSend(v450, sel_crownRotationDirection);
  v356 = &v517;
  v517 = v112;
  v354 = &v516;
  v516 = 0;
  v355 = type metadata accessor for CBPeerCrownRotationDirection();
  lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection();
  if ((== infix<A>(_:_:)() & 1) != 0)
    v342 = 1;
  else
    v342 = objc_msgSend(v450, sel_crownRotationDirection);
  v318 = v342;
  v317 = &v449[OBJC_IVAR___HPMHeadphoneDevice__crownRotationDirection];
  v319 = &v515;
  v332 = 33;
  v333 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.crownRotationDirection(v318, (uint64_t)v317);
  swift_endAccess();

  v113 = objc_msgSend(v450, sel_placementMode);
  v322 = &v514;
  v514 = v113;
  v320 = &v513;
  v513 = 1;
  v337 = 0;
  v321 = type metadata accessor for CBDevicePlacementMode();
  lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
  v340 = MEMORY[0x24BEE3E68];
  v324 = == infix<A>(_:_:)();
  v323 = &v449[OBJC_IVAR___HPMHeadphoneDevice__inEarDetection];
  v325 = &v512;
  swift_beginAccess();
  v327 = 1;
  property wrapper backing initializer of HeadphoneDevice.inEarDetection(v324 & 1, (uint64_t)v323);
  swift_endAccess();

  v326 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryCharging];
  v328 = &v511;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryCharging(v327 & 1, (uint64_t)v326);
  swift_endAccess();

  v330 = objc_msgSend(v450, sel_endCallConfig);
  v329 = &v449[OBJC_IVAR___HPMHeadphoneDevice__endCallGesture];
  v331 = &v510;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.endCallGesture(v330, (uint64_t)v329);
  swift_endAccess();

  v335 = objc_msgSend(v450, sel_muteControlConfig);
  v334 = &v449[OBJC_IVAR___HPMHeadphoneDevice__muteControlGesture];
  v336 = &v509;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.muteControlGesture(v335, (uint64_t)v334);
  swift_endAccess();

  v114 = objc_msgSend(v450, sel_smartRoutingMode);
  v341 = &v508;
  v508 = v114;
  v338 = &v507;
  v507 = 0;
  v339 = type metadata accessor for CBSmartRoutingMode();
  lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
  if ((== infix<A>(_:_:)() & 1) != 0)
    v316 = 2;
  else
    v316 = objc_msgSend(v450, sel_smartRoutingMode);
  v301 = v316;
  v300 = &v449[OBJC_IVAR___HPMHeadphoneDevice__smartRoutingMode];
  v302 = &v506;
  v308 = 33;
  v312 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.smartRoutingMode(v301, (uint64_t)v300);
  swift_endAccess();

  v304 = objc_msgSend(v450, sel_microphoneMode);
  v303 = &v449[OBJC_IVAR___HPMHeadphoneDevice__microphoneMode];
  v305 = &v505;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.microphoneMode(v304, (uint64_t)v303);
  swift_endAccess();

  v115 = CBProductIDIsAirPods((int)objc_msgSend(v450, sel_productID));
  v116 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_isAirpods] = v115 & 1;

  v117 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_isResettingCaseSoundOnError] = 0;

  v306 = &v449[OBJC_IVAR___HPMHeadphoneDevice__isSettingCaseSoundValue];
  v307 = &v504;
  swift_beginAccess();
  v310 = 0;
  property wrapper backing initializer of HeadphoneDevice.isSettingCaseSoundValue(0, (uint64_t)v306);
  swift_endAccess();

  v309 = &v449[OBJC_IVAR___HPMHeadphoneDevice__isCaseSoundSupported];
  v311 = &v503;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.isCaseSoundSupported(v310 & 1, (uint64_t)v309);
  swift_endAccess();

  v313 = (id *)&v449[OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient];
  v314 = &v501;
  swift_beginAccess();
  v315 = *v313;
  v118 = v315;
  swift_endAccess();
  v500 = v315;
  if (v315)
  {
    v502 = v500;
  }
  else
  {
    v502 = 0;
    outlined destroy of BTAirPodsControlServiceClient?(&v500);
  }

  v280 = v502;
  v279 = (void **)&v449[OBJC_IVAR___HPMHeadphoneDevice_airPodsServiceClient];
  v281 = &v499;
  v290 = 33;
  v291 = 0;
  swift_beginAccess();
  v119 = *v279;
  *v279 = v280;

  swift_endAccess();
  v282 = &v449[OBJC_IVAR___HPMHeadphoneDevice__caseSound];
  v283 = &v498;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.caseSound(1, (uint64_t)v282);
  swift_endAccess();

  v120 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSupport] = 0;

  v284 = &v449[OBJC_IVAR___HPMHeadphoneDevice__findMyNetworkEnable];
  v285 = &v497;
  swift_beginAccess();
  v293 = 0;
  property wrapper backing initializer of HeadphoneDevice.findMyNetworkEnable(0, (uint64_t)v284);
  swift_endAccess();

  v286 = &v449[OBJC_IVAR___HPMHeadphoneDevice__isSettingFindMyNetworkValue];
  v287 = &v496;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.isSettingFindMyNetworkValue(v293 & 1, (uint64_t)v286);
  swift_endAccess();

  v121 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_isResettingFindMyNetworkOnError] = 0;

  v122 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkValueUpdated] = 0;

  v295 = 0;
  type metadata accessor for SPOwnerInterface();
  v288 = SPOwnerInterface.__allocating_init()();
  v289 = objc_msgSend(v288, sel_ownerSession);

  v123 = v449;
  *(_QWORD *)&v449[OBJC_IVAR___HPMHeadphoneDevice_findMyNetworkSession] = v289;

  v292 = &v449[OBJC_IVAR___HPMHeadphoneDevice__spatialProfileExists];
  v294 = &v495;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.spatialProfileExists(v293 & 1, (uint64_t)v292);
  swift_endAccess();

  v298 = &v494;
  v494 = v373;
  v296 = &v493;
  v493 = 6;
  v297 = type metadata accessor for CBPeerUIGestureMode();
  v299 = lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
  if ((== infix<A>(_:_:)() & 1) != 0)
  {
    v278 = 1;
  }
  else
  {
    v492[29] = v373;
    v492[28] = 7;
    v278 = == infix<A>(_:_:)();
  }
  if ((v278 & 1) != 0)
  {
    v277 = 1;
  }
  else
  {
    v492[27] = v375;
    v492[26] = 6;
    v277 = == infix<A>(_:_:)();
  }
  if ((v277 & 1) != 0)
  {
    v276 = 1;
  }
  else
  {
    v492[25] = v375;
    v492[24] = 7;
    v276 = == infix<A>(_:_:)();
  }
  v224 = v276;
  v223 = &v449[OBJC_IVAR___HPMHeadphoneDevice__volumeControlToggle];
  v225 = v492;
  v267 = 33;
  v268 = 0;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.volumeControlToggle(v224 & 1, (uint64_t)v223);
  swift_endAccess();

  v124 = v449;
  v449[OBJC_IVAR___HPMHeadphoneDevice_volumeControlView] = 0;

  v125 = objc_msgSend(v450, sel_selectiveSpeechListeningConfig);
  v228 = &v491;
  v491 = v125;
  v226 = &v490;
  v238 = 1;
  v490 = 1;
  v272 = 0;
  v227 = type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
  lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
  v241 = MEMORY[0x24BEE4280];
  v230 = == infix<A>(_:_:)();
  v229 = &v449[OBJC_IVAR___HPMHeadphoneDevice__selectiveSpeechListening];
  v231 = &v489;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.selectiveSpeechListening(v230 & 1, (uint64_t)v229);
  swift_endAccess();

  v126 = objc_msgSend(v450, sel_conversationDetectConfig);
  v234 = &v488;
  v488 = v126;
  v232 = &v487;
  v487 = v238;
  v233 = type metadata accessor for CBPeerConversationDetectConfig();
  lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
  v236 = == infix<A>(_:_:)();
  v235 = &v449[OBJC_IVAR___HPMHeadphoneDevice__conversationDetect];
  v237 = &v486;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.conversationDetect(v236 & 1, (uint64_t)v235);
  swift_endAccess();

  v127 = objc_msgSend(v450, sel_adaptiveVolumeConfig);
  v242 = &v485;
  v485 = v127;
  v239 = &v484;
  v484 = v238;
  v240 = type metadata accessor for CBPeerAdaptiveVolumeConfig();
  lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
  v244 = == infix<A>(_:_:)();
  v243 = &v449[OBJC_IVAR___HPMHeadphoneDevice__adaptiveVolume];
  v245 = &v483;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.adaptiveVolume(v244 & 1, (uint64_t)v243);
  swift_endAccess();

  objc_msgSend(v450, sel_batteryLevelLeft);
  v247 = v128;
  v246 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelLeft];
  v248 = &v482;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelLeft((uint64_t)v246, v247);
  swift_endAccess();

  objc_msgSend(v450, sel_batteryLevelRight);
  v250 = v129;
  v249 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelRight];
  v251 = &v481;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelRight((uint64_t)v249, v250);
  swift_endAccess();

  objc_msgSend(v450, sel_batteryLevelCase);
  v253 = v130;
  v252 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelCase];
  v254 = &v480;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelCase((uint64_t)v252, v253);
  swift_endAccess();

  objc_msgSend(v450, sel_batteryLevelMain);
  v256 = v131;
  v255 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryLevelMain];
  v257 = &v479;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryLevelMain((uint64_t)v255, v256);
  swift_endAccess();

  v259 = objc_msgSend(v450, sel_batteryStateLeft);
  v258 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryStateLeft];
  v260 = &v478;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateLeft(v259, (uint64_t)v258);
  swift_endAccess();

  v262 = objc_msgSend(v450, sel_batteryStateRight);
  v261 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryStateRight];
  v263 = &v477;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateRight(v262, (uint64_t)v261);
  swift_endAccess();

  v265 = objc_msgSend(v450, sel_batteryStateCase);
  v264 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryStateCase];
  v266 = &v476;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateCase(v265, (uint64_t)v264);
  swift_endAccess();

  v270 = objc_msgSend(v450, sel_batteryStateMain);
  v269 = &v449[OBJC_IVAR___HPMHeadphoneDevice__batteryStateMain];
  v271 = &v475;
  swift_beginAccess();
  property wrapper backing initializer of HeadphoneDevice.batteryStateMain(v270, (uint64_t)v269);
  swift_endAccess();

  v273 = v539;
  v132 = (objc_class *)type metadata accessor for HeadphoneDevice();
  v474.receiver = v273;
  v474.super_class = v132;
  v274 = objc_msgSendSuper2(&v474, sel_init);
  v133 = v274;
  v134 = v274;
  v135 = v274;
  v136 = v274;
  v137 = v274;
  v138 = v274;
  v139 = v274;
  v140 = v274;
  v141 = v274;
  v142 = v274;
  v143 = v274;
  v144 = v274;
  v145 = v274;
  v146 = v274;
  v147 = v274;
  v539 = v274;
  v275 = objc_msgSend(v450, sel_btAddressData);
  if (v275)
  {
    v222 = v275;
    v217 = v275;
    v218 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v219 = v148;

    v220 = v218;
    v221 = v219;
  }
  else
  {
    v220 = 0;
    v221 = 0xF000000000000000;
  }
  v215 = v221;
  v216 = v220;
  if ((v221 & 0xF000000000000000) != 0xF000000000000000)
  {
    v213 = v216;
    v214 = v215;
    v209 = v215;
    v210 = v216;
    v472 = v216;
    v473 = v215;
    v471[1] = objc_msgSend(v448, sel_flags);
    v212 = v471;
    v471[0] = 0x40000;
    v211 = type metadata accessor for CBProductFlags();
    lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
    v149 = OptionSet<>.contains(_:)();
    if ((v149 & 1) != 0)
      (*(void (**)(uint64_t, unint64_t))((*v274 & *MEMORY[0x24BEE4EA0]) + 0xAB0))(v210, v209);

    (*(void (**)(void))((*v274 & *MEMORY[0x24BEE4EA0]) + 0xAE8))();
    if (CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v450, sel_endCallCapability)))
    {
      v150 = v274;

      v151 = (*(uint64_t (**)(void))((*v150 & *MEMORY[0x24BEE4EA0]) + 0x768))();
      v206 = v460;
      v460[0] = v151;
      v204 = &v459;
      v459 = 0;
      v205 = type metadata accessor for CBPeerCallConfig();
      v207 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      v208 = == infix<A>(_:_:)();

      if ((v208 & 1) != 0)
      {
        v203 = 1;
      }
      else
      {
        v458 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x24BEE4EA0]) + 0x768))();
        v457 = 1;
        v203 = == infix<A>(_:_:)();
      }
      v202 = v203;

      if ((v202 & 1) != 0)
      {
        type metadata accessor for Log();
        v200 = static Log.shared.getter();
        v152 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v196 = &v455;
        v455 = v152;
        v456 = v153;
        v194 = 1;
        v154 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: read endCallConfig as ", 0x28uLL, 1);
        v193 = v154._object;
        DefaultStringInterpolation.appendLiteral(_:)(v154);
        v155 = v274;
        v156 = swift_bridgeObjectRelease();
        v454 = (*(uint64_t (**)(uint64_t))((*v155 & *MEMORY[0x24BEE4EA0]) + 0x768))(v156);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();

        v157 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", defaulting to singleTap ", 0x1AuLL, v194 & 1);
        v195 = v157._object;
        DefaultStringInterpolation.appendLiteral(_:)(v157);
        swift_bridgeObjectRelease();
        v198 = v455;
        v197 = v456;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        v199 = v158;
        v201 = 2;
        dispatch thunk of Log.error(_:function:file:line:)();
        swift_bridgeObjectRelease();
        swift_release();
        HeadphoneDevice.endCallGesture.setter();
      }
      else
      {

      }
    }
    else
    {

      if (!CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v450, sel_muteControlCapability)))
      {

        goto LABEL_70;
      }
      v159 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x24BEE4EA0]) + 0x768))();
      v190 = &v470;
      v470 = v159;
      v188 = &v469;
      v469 = 0;
      v189 = type metadata accessor for CBPeerCallConfig();
      v191 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      v192 = == infix<A>(_:_:)();

      if ((v192 & 1) != 0)
      {
        v187 = 1;
      }
      else
      {
        v468 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x24BEE4EA0]) + 0x768))();
        v467 = 1;
        v187 = == infix<A>(_:_:)();
      }
      v186 = v187;

      if ((v186 & 1) != 0)
      {
        v185 = 1;
      }
      else
      {
        v466 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x24BEE4EA0]) + 0x798))();
        v465 = 0;
        v185 = == infix<A>(_:_:)();
      }
      v184 = v185;

      if ((v184 & 1) != 0)
      {
        v183 = 1;
      }
      else
      {
        v464 = (*(uint64_t (**)(void))((*v274 & *MEMORY[0x24BEE4EA0]) + 0x798))();
        v463 = 1;
        v183 = == infix<A>(_:_:)();
      }
      v182 = v183;

      if ((v182 & 1) != 0)
      {
        type metadata accessor for Log();
        v180 = static Log.shared.getter();
        v160 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v176 = &v461;
        v461 = v160;
        v462 = v161;
        v174 = 1;
        v162 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: read endCallConfig as ", 0x28uLL, 1);
        v172[0] = v162._object;
        DefaultStringInterpolation.appendLiteral(_:)(v162);
        v163 = v274;
        v164 = swift_bridgeObjectRelease();
        v165 = *v163;
        v173 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v460[2] = (*(uint64_t (**)(uint64_t))((v165 & *MEMORY[0x24BEE4EA0]) + 0x768))(v164);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();

        v166 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", defaulting to doubleTap. Read muteControlConfig as ", 0x35uLL, v174 & 1);
        v172[1] = v166._object;
        DefaultStringInterpolation.appendLiteral(_:)(v166);
        v167 = v274;
        v168 = swift_bridgeObjectRelease();
        v460[1] = (*(uint64_t (**)(uint64_t))((*v167 & *v173) + 0x798))(v168);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();

        v169 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", defaulting to singleTap ", 0x1AuLL, v174 & 1);
        v175 = v169._object;
        DefaultStringInterpolation.appendLiteral(_:)(v169);
        swift_bridgeObjectRelease();
        v178 = v461;
        v177 = v462;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        v179 = v170;
        v181 = 2;
        dispatch thunk of Log.error(_:function:file:line:)();
        swift_bridgeObjectRelease();
        swift_release();
        HeadphoneDevice.muteControlGesture.setter();

        HeadphoneDevice.endCallGesture.setter();
      }
      else
      {

      }
    }

LABEL_70:
    outlined consume of Data._Representation(v210, v209);

    goto LABEL_71;
  }

LABEL_71:
  return v274;
}

uint64_t variable initialization expression of HeadphoneDevice.accessorySettingFeatureBitMask()
{
  return 0;
}

uint64_t variable initialization expression of HeadphoneDevice.deviceColor()
{
  return 0;
}

id @nonobjc CBProductInfo.__allocating_init(productID:)(unsigned int a1)
{
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_productInfoWithProductID_, a1);
}

UIImage __swiftcall UIImage.__allocating_init(cgImage:)(CGImageRef cgImage)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (UIImage)@nonobjc UIImage.init(cgImage:)(cgImage);
}

id SPOwnerInterface.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc SPOwnerInterface.init()();
}

uint64_t CBPeerCallManagementCapability.rawValue.getter(uint64_t result)
{
  return result;
}

id HeadphoneDevice.__allocating_init(cbDevice:delegate:)(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return HeadphoneDevice.init(cbDevice:delegate:)(a1);
}

id HeadphoneDevice.init(cbDevice:delegate:)(void *a1)
{
  void *v1;
  id v2;
  uint64_t ObjectType;
  id v4;
  id v5;
  id v6;
  id v9;
  void *v10;

  v2 = v1;
  v10 = v1;
  ObjectType = swift_getObjectType();

  v4 = a1;
  v9 = (id)(*(uint64_t (**)(void *))(ObjectType + 2664))(a1);
  v5 = v9;
  v6 = v9;
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  swift_unknownObjectRetain();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();

  swift_unknownObjectRelease();
  return v9;
}

char *HeadphoneDevice.__allocating_init(_aaDevice:cbDevice:delegate:)(void *a1, void *a2, uint64_t a3)
{
  objc_class *v3;
  id v4;

  v4 = objc_allocWithZone(v3);
  return HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(a1, a2, a3);
}

char *HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(void *a1, void *a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  Swift::String v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  uint64_t v36;
  Swift::String v37;
  _QWORD *v38;
  uint64_t v39;
  Swift::String v40;
  _QWORD *v41;
  id v42;
  unint64_t v43;
  _QWORD *v44;
  id v45;
  uint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  id v59;
  uint64_t (*v60)(void);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  uint64_t *v112;
  uint64_t *v113;
  _BYTE **v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t *v125;
  uint64_t *v126;
  _BYTE **v127;
  uint64_t *v128;
  uint64_t *v129;
  uint64_t v130;
  _QWORD *v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint8_t *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  _BYTE **v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  id *v151;
  uint64_t *v152;
  void (*v153)(uint64_t *, _QWORD);
  _QWORD *v154;
  id v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  uint32_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  NSObject *v177;
  int v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t *v181;
  uint32_t v182;
  int v183;
  NSObject *v184;
  uint64_t v185;
  id v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  id v190;
  id v191;
  id v192;
  unint64_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint32_t v196;
  int v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  void **v227;
  char *v228;
  id v229;
  uint64_t v230;
  void *object;
  char **v232;
  void *v233;
  uint64_t ObjectType;
  _QWORD *v235;
  uint64_t v236;
  Swift::String v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  void *v241;
  _QWORD *v242;
  char *v243;
  uint64_t v244;
  void *v245;
  char *v246;
  Builtin::Word v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  Swift::String v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  Builtin::Word v258;
  char *v259;
  void *v260;
  unint64_t v261;
  id *v262;
  Builtin::Word v263;
  int v264;
  void *v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  const char *v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  id v274;
  id v275;
  uint64_t (*v276)(uint64_t, uint64_t, uint64_t);
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  _BYTE *v280;
  uint64_t v281;
  uint32_t v282;
  uint64_t v283;
  _QWORD v284[2];
  id v285;
  id v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _BYTE *v290;
  uint64_t v291;
  uint32_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE *v298;
  uint64_t v299;
  uint32_t v300;
  id v301;
  _QWORD v302[3];
  _QWORD v303[2];
  char *v304;
  uint64_t v305;
  uint64_t v306;
  char v307;
  char v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;

  v229 = a1;
  v274 = a2;
  v223 = a3;
  v220 = v3;
  v269 = "init(_aaDevice:cbDevice:delegate:)";
  v271 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  ObjectType = swift_getObjectType();
  v311 = 0;
  v310 = 0;
  v309 = 0;
  v226 = 0;
  v210 = 0;
  v293 = 0;
  v294 = 0;
  v286 = 0;
  v263 = 0;
  v211 = type metadata accessor for Logger();
  v212 = *(_QWORD *)(v211 - 8);
  v216 = *(_QWORD *)(v212 + 64);
  v213 = (v216 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v3, v274);
  v214 = (char *)&v105 - v213;
  v215 = v213;
  v6 = MEMORY[0x24BDAC7A8](v4, v5);
  v217 = (char *)&v105 - v215;
  v218 = (v216 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = (void *)MEMORY[0x24BDAC7A8](v6, v7);
  v219 = (char *)&v105 - v218;
  v311 = v9;
  v310 = v10;
  v309 = v11;
  v12 = v8;
  v312 = v220;
  v13 = swift_getObjectType();

  v14 = v274;
  v15 = (char *)(*(uint64_t (**)(id))(v13 + 2664))(v274);
  v243 = v15;
  v221 = v312;
  v16 = v15;
  v17 = v15;
  v18 = v15;
  v19 = v15;
  v20 = v15;
  v21 = v15;
  v22 = v15;
  v23 = v15;
  v24 = v15;
  v312 = v15;
  swift_getObjectType();
  v242 = (_QWORD *)MEMORY[0x24BEE4EA0];
  swift_deallocPartialClassInstance();
  swift_unknownObjectRetain();
  v222 = &v15[OBJC_IVAR___HPMHeadphoneDevice_deviceDelegate];
  v224 = &v308;
  v225 = 33;
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();

  v25 = v229;
  v227 = (void **)&v15[OBJC_IVAR___HPMHeadphoneDevice_aaDevice];
  v228 = &v307;
  swift_beginAccess();
  v26 = *v227;
  *v227 = v229;

  swift_endAccess();
  v27 = (*(uint64_t (**)(void))((*(_QWORD *)v15 & *v242) + 0xA20))();
  v230 = v27;

  (*(void (**)(id))(*(_QWORD *)v27 + 776))(v229);
  swift_release();
  type metadata accessor for Log();
  v273 = static Log.shared.getter();
  v28 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v266 = &v305;
  v305 = v28;
  v306 = v29;
  v270 = 34;
  v264 = 1;
  v30 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager initWithCBDevice:", 0x22uLL, 1);
  object = v30._object;
  DefaultStringInterpolation.appendLiteral(_:)(v30);
  swift_bridgeObjectRelease();
  v232 = &v304;
  v304 = v243;
  lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();

  v259 = " ";
  v258 = 1;
  v31 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, v264 & 1);
  v233 = v31._object;
  DefaultStringInterpolation.appendLiteral(_:)(v31);
  swift_bridgeObjectRelease();
  v246 = "%p";
  v247 = 2;
  v237 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%p", 2uLL, v264 & 1);
  v249 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  v236 = _allocateUninitializedArray<A>(_:)();
  v235 = v32;
  v32[3] = ObjectType;
  v33 = lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
  v34 = v235;
  v35 = v243;
  v235[4] = v33;
  *v34 = v35;
  _finalizeUninitializedArray<A>(_:)();
  v238 = String.init(format:_:)();
  v239 = v36;
  swift_bridgeObjectRelease();
  v240 = v303;
  v303[0] = v238;
  v303[1] = v239;
  v254 = MEMORY[0x24BEE0D00];
  v255 = MEMORY[0x24BEE0D70];
  v256 = MEMORY[0x24BEE0D68];
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" aaDevice:", 0xAuLL, v264 & 1);
  v241 = v37._object;
  DefaultStringInterpolation.appendLiteral(_:)(v37);
  v38 = v243;
  v39 = swift_bridgeObjectRelease();
  v244 = (*(uint64_t (**)(uint64_t))((*v38 & *v242) + 0xA20))(v39);

  swift_release();
  v302[2] = v244;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v40 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" cb:", 4uLL, v264 & 1);
  v245 = v40._object;
  DefaultStringInterpolation.appendLiteral(_:)(v40);
  swift_bridgeObjectRelease();
  v251 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v246, v247, v264 & 1);
  v250 = _allocateUninitializedArray<A>(_:)();
  v248 = v41;
  v42 = v274;
  v261 = type metadata accessor for CBDevice();
  v248[3] = v261;
  v43 = lazy protocol witness table accessor for type CBDevice and conformance NSObject();
  v44 = v248;
  v45 = v274;
  v248[4] = v43;
  *v44 = v45;
  _finalizeUninitializedArray<A>(_:)();
  v252 = String.init(format:_:)();
  v253 = v46;
  swift_bridgeObjectRelease();
  v257 = v302;
  v302[0] = v252;
  v302[1] = v253;
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v47 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v259, v258, v264 & 1);
  v260 = v47._object;
  DefaultStringInterpolation.appendLiteral(_:)(v47);
  swift_bridgeObjectRelease();
  v262 = &v301;
  v301 = v274;
  lazy protocol witness table accessor for type CBDevice and conformance NSObject();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v48 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v263, v264 & 1);
  v265 = v48._object;
  DefaultStringInterpolation.appendLiteral(_:)(v48);
  swift_bridgeObjectRelease();
  v268 = v305;
  v267 = v306;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  v272 = v49;
  v104 = 335;
  dispatch thunk of Log.notice(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  v275 = objc_msgSend(v274, sel_identifier);
  if (v275)
  {
    v209 = v275;
    v204 = v275;
    v205 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v206 = v50;

    v207 = v205;
    v208 = v206;
  }
  else
  {
    v207 = 0;
    v208 = 0;
  }
  v202 = v208;
  v203 = v207;
  if (v208)
  {
    v200 = v203;
    v201 = v202;
    v189 = v202;
    v188 = v203;
    v293 = v203;
    v294 = v202;
    v187 = (_QWORD *)*Headphone_Manager.shared.unsafeMutableAddressor();
    v53 = v187;
    v54 = v187;
    v191 = (id)(*(uint64_t (**)(_QWORD *))((*v53 & *MEMORY[0x24BEE4EA0]) + 0x138))(v54);

    swift_bridgeObjectRetain();
    v190 = (id)MEMORY[0x24263ADA4](v188, v189);
    swift_bridgeObjectRelease();
    v192 = objc_msgSend(v191, sel_fetchHearingModeDeviceRecordForIdentifier_, v190);

    if (v192)
    {
      v186 = v192;
      v155 = v192;
      v286 = v192;
      v154 = (_QWORD *)*Headphone_Manager.shared.unsafeMutableAddressor();
      v57 = v154;
      v58 = v154;
      v148 = *(_QWORD *)&v243[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
      v149 = *(_QWORD *)&v243[OBJC_IVAR___HPMHeadphoneDevice_btAddress + 8];
      swift_bridgeObjectRetain();

      v59 = v155;
      v151 = &v285;
      v285 = v155;
      v150 = v284;
      v284[0] = v148;
      v284[1] = v149;
      v60 = *(uint64_t (**)(void))((*v57 & *MEMORY[0x24BEE4EA0]) + 0x160);
      v152 = &v283;
      v153 = (void (*)(uint64_t *, _QWORD))v60();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HMDeviceRecord]);
      Dictionary.subscript.setter();
      v61 = v214;
      v153(v152, 0);

      v62 = Logger.shared.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v212 + 16))(v61, v62, v211);
      v164 = 32;
      v165 = 7;
      v63 = swift_allocObject();
      v64 = v155;
      v160 = v63;
      *(_QWORD *)(v63 + 16) = implicit closure #1 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:);
      *(_QWORD *)(v63 + 24) = 0;
      v65 = v64;
      v166 = swift_allocObject();
      *(_QWORD *)(v166 + 16) = v155;
      v177 = Logger.logObject.getter();
      v178 = static os_log_type_t.default.getter();
      v158 = &v281;
      v281 = 22;
      v156 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v157 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v159 = v282;
      v162 = 17;
      v168 = swift_allocObject();
      *(_BYTE *)(v168 + 16) = 32;
      v169 = swift_allocObject();
      v163 = 8;
      *(_BYTE *)(v169 + 16) = 8;
      v66 = swift_allocObject();
      v67 = v160;
      v161 = v66;
      *(_QWORD *)(v66 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:);
      *(_QWORD *)(v66 + 24) = v67;
      v68 = swift_allocObject();
      v69 = v161;
      v170 = v68;
      *(_QWORD *)(v68 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0;
      *(_QWORD *)(v68 + 24) = v69;
      v171 = swift_allocObject();
      *(_BYTE *)(v171 + 16) = 64;
      v172 = swift_allocObject();
      *(_BYTE *)(v172 + 16) = v163;
      v70 = swift_allocObject();
      v71 = v166;
      v167 = v70;
      *(_QWORD *)(v70 + 16) = partial apply for implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:);
      *(_QWORD *)(v70 + 24) = v71;
      v72 = swift_allocObject();
      v73 = v167;
      v174 = v72;
      *(_QWORD *)(v72 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:);
      *(_QWORD *)(v72 + 24) = v73;
      v176 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v173 = _allocateUninitializedArray<A>(_:)();
      v175 = v74;
      swift_retain();
      v75 = v168;
      v76 = v175;
      *v175 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v76[1] = v75;
      swift_retain();
      v77 = v169;
      v78 = v175;
      v175[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v78[3] = v77;
      swift_retain();
      v79 = v170;
      v80 = v175;
      v175[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
      v80[5] = v79;
      swift_retain();
      v81 = v171;
      v82 = v175;
      v175[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[7] = v81;
      swift_retain();
      v83 = v172;
      v84 = v175;
      v175[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v84[9] = v83;
      swift_retain();
      v85 = v174;
      v86 = v175;
      v175[10] = partial apply for closure #1 in OSLogArguments.append(_:);
      v86[11] = v85;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v177, (os_log_type_t)v178))
      {
        v87 = v210;
        v140 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v138 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v139 = 1;
        v141 = createStorage<A>(capacity:type:)(1);
        v142 = createStorage<A>(capacity:type:)(v139);
        v144 = &v280;
        v280 = v140;
        v145 = &v279;
        v279 = v141;
        v146 = &v278;
        v278 = v142;
        v143 = 2;
        serialize(_:at:)(2, &v280);
        serialize(_:at:)(v143, v144);
        v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v277 = v168;
        closure #1 in osLogInternal(_:log:type:)(&v276, (uint64_t)v144, (uint64_t)v145, (uint64_t)v146);
        v147 = v87;
        if (v87)
        {
          __break(1u);
        }
        else
        {
          v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v277 = v169;
          closure #1 in osLogInternal(_:log:type:)(&v276, (uint64_t)&v280, (uint64_t)&v279, (uint64_t)&v278);
          v137 = 0;
          v88 = v137;
          v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
          v277 = v170;
          closure #1 in osLogInternal(_:log:type:)(&v276, (uint64_t)&v280, (uint64_t)&v279, (uint64_t)&v278);
          v136 = v88;
          v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v277 = v171;
          closure #1 in osLogInternal(_:log:type:)(&v276, (uint64_t)&v280, (uint64_t)&v279, (uint64_t)&v278);
          v135 = 0;
          v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v277 = v172;
          closure #1 in osLogInternal(_:log:type:)(&v276, (uint64_t)&v280, (uint64_t)&v279, (uint64_t)&v278);
          v134 = 0;
          v276 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))partial apply for closure #1 in OSLogArguments.append(_:);
          v277 = v174;
          closure #1 in osLogInternal(_:log:type:)(&v276, (uint64_t)&v280, (uint64_t)&v279, (uint64_t)&v278);
          _os_log_impl(&dword_23DAB4000, v177, (os_log_type_t)v178, "HeadphoneManager: HeadphoneDevice.init syncFetch Record %s %@", v140, v159);
          v133 = 1;
          destroyStorage<A>(_:count:)(v141, 1, v138);
          destroyStorage<A>(_:count:)(v142, v133, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24263B020](v140, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
      v89 = (uint64_t *)v243;

      v90 = (*(uint64_t (**)(char *, uint64_t))(v212 + 8))(v214, v211);
      v91 = *v89;
      v131 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v92 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v91 & *MEMORY[0x24BEE4EA0]) + 0x9F0))(v90);
      v132 = v92;

      (*(void (**)(id))((*v92 & *v131) + 0x160))(v155);
      swift_bridgeObjectRelease();
    }
    else
    {
      v55 = v217;

      v56 = Logger.shared.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v212 + 16))(v55, v56, v211);
      v184 = Logger.logObject.getter();
      v183 = static os_log_type_t.error.getter();
      v181 = &v291;
      v291 = 2;
      v179 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v180 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v182 = v292;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v185 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v184, (os_log_type_t)v183))
      {
        v93 = v210;
        v121 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v120 = 0;
        v122 = createStorage<A>(capacity:type:)(0);
        v123 = createStorage<A>(capacity:type:)(v120);
        v127 = &v290;
        v290 = v121;
        v128 = &v289;
        v289 = v122;
        v125 = &v288;
        v288 = v123;
        v124 = 0;
        serialize(_:at:)(0, &v290);
        serialize(_:at:)(v124, v127);
        v287 = v185;
        v126 = &v105;
        MEMORY[0x24BDAC7A8](&v105, v94);
        v95 = v128;
        v96 = &v105 - 6;
        v129 = &v105 - 6;
        v96[2] = (uint64_t)v127;
        v96[3] = (uint64_t)v95;
        v96[4] = v97;
        v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v93)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_23DAB4000, v184, (os_log_type_t)v183, "HeadphoneManager: HeadphoneDevice.init: sync fetch returned nil", v121, v182);
          v118 = 0;
          destroyStorage<A>(_:count:)(v122, 0, v119);
          destroyStorage<A>(_:count:)(v123, v118, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24263B020](v121, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      (*(void (**)(char *, uint64_t))(v212 + 8))(v217, v211);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v51 = v219;

    v52 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v212 + 16))(v51, v52, v211);
    v198 = Logger.logObject.getter();
    v197 = static os_log_type_t.error.getter();
    v195 = &v299;
    v299 = 2;
    v193 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v194 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v196 = v300;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v199 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v198, (os_log_type_t)v197))
    {
      v98 = v210;
      v108 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v107 = 0;
      v109 = createStorage<A>(capacity:type:)(0);
      v110 = createStorage<A>(capacity:type:)(v107);
      v114 = &v298;
      v298 = v108;
      v115 = &v297;
      v297 = v109;
      v112 = &v296;
      v296 = v110;
      v111 = 0;
      serialize(_:at:)(0, &v298);
      serialize(_:at:)(v111, v114);
      v295 = v199;
      v113 = &v105;
      MEMORY[0x24BDAC7A8](&v105, v99);
      v100 = v115;
      v101 = &v105 - 6;
      v116 = &v105 - 6;
      v101[2] = (uint64_t)v114;
      v101[3] = (uint64_t)v100;
      v101[4] = v102;
      v117 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v98)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_23DAB4000, v198, (os_log_type_t)v197, "HeadphoneManager: HeadphoneDevice.init: uuidString lookup for HR Fetch failed!", v108, v196);
        v105 = 0;
        destroyStorage<A>(_:count:)(v109, 0, v106);
        destroyStorage<A>(_:count:)(v110, v105, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v108, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v212 + 8))(v219, v211);
  }
  swift_unknownObjectRelease();

  return v243;
}

void implicit closure #1 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;

  v3 = (_QWORD *)*Headphone_Manager.shared.unsafeMutableAddressor();
  v1 = v3;
  *a1 = (*(uint64_t (**)(_QWORD *))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x150))(v1);

}

void *implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

void HeadphoneDevice.supportsFeature(feature:)(unint64_t a1)
{
  if (a1 <= 0x16)
    __asm { BR              X8 }
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  JUMPOUT(0x23DADFCD8);
}

uint64_t CBPeerSelectiveSpeechListeningCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t CBPeerConversationDetectCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t CBPeerAdaptiveVolumeCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t AAAutoANCCapability.rawValue.getter(uint64_t result)
{
  return result;
}

void HeadphoneDevice.updateFeatureValues(feature:)(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  Swift::String v3;
  unint64_t v4;

  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  type metadata accessor for Log();
  static Log.shared.getter();
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: updateFeatureValues mode: ", 0x2CuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  dispatch thunk of Log.notice(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for CBDeviceSettings();
  CBDeviceSettings.__allocating_init()();
  type metadata accessor for AADeviceConfig();
  AADeviceConfig.__allocating_init()();
  if (v4 <= 0x16)
    __asm { BR              X8 }
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  JUMPOUT(0x23DAE2D48);
}

id CBDeviceSettings.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBDeviceSettings.init()();
}

uint64_t HeadphoneDevice.getFindMyUrl(hpDevice:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  _QWORD *v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  _QWORD v48[5];
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  void *object;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  Swift::String v75;
  Builtin::Word v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  Swift::String v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  id v106;
  uint64_t v107;
  _QWORD *v108;
  const char *v109;
  const char *v110;
  const char *v111;
  const char *v112;
  const char *v113;
  uint64_t v114;
  unint64_t v115;
  char *v116;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  id v126;
  id v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD v133[2];
  uint64_t v134;
  unint64_t v135;
  _QWORD v136[2];
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  char *v145;

  v107 = a2;
  v108 = a1;
  v3 = v2;
  v4 = v108;
  v121 = v3;
  v109 = "getFindMyUrl(hpDevice:)";
  v110 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v111 = "Fatal error";
  v112 = "Unexpectedly found nil while unwrapping an Optional value";
  v113 = "HeadphoneManager/HeadphoneDevice.swift";
  v145 = 0;
  v144 = 0;
  v143 = 0;
  v141 = 0;
  v142 = 0;
  v139 = 0;
  v140 = 0;
  v137 = 0;
  v138 = 0;
  v134 = 0;
  v135 = 0;
  v114 = 0;
  v130 = 0;
  v131 = 0;
  v128 = 0;
  v129 = 0;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v115 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v5, v6);
  v116 = (char *)v48 - v115;
  v117 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v48 - v115, v8);
  v118 = (char *)v48 - v117;
  v119 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v48 - v117, v10);
  v120 = (char *)v48 - v119;
  v122 = type metadata accessor for SHA256Digest();
  v123 = *(_QWORD *)(v122 - 8);
  v124 = (*(_QWORD *)(v123 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v122, v11);
  v125 = (char *)v48 - v124;
  v145 = (char *)v48 - v124;
  v144 = v4;
  v143 = v12;
  v126 = (id)(*(uint64_t (**)(void))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x210))();
  v127 = objc_msgSend(v126, sel_btAddressData);
  if (v127)
  {
    v106 = v127;
    v101 = v127;
    v102 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v103 = v13;

    v104 = v102;
    v105 = v103;
  }
  else
  {
    v104 = 0;
    v105 = 0xF000000000000000;
  }
  v99 = v105;
  v100 = v104;
  if ((v105 & 0xF000000000000000) == 0xF000000000000000)
  {

    v48[4] = 0;
    type metadata accessor for Log();
    v48[2] = static Log.shared.getter();
    v49 = 1;
    v48[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BT Address", 0x24uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    v48[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("findmy://devices", 0x10uLL, v49 & 1)._object;
    URL.init(string:)();
    swift_bridgeObjectRelease();
    v50 = type metadata accessor for URL();
    v51 = *(_QWORD *)(v50 - 8);
    if ((*(unsigned int (**)(char *, _QWORD))(v51 + 48))(v116, v49) == 1)
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 32))(v107, v116, v50);
  }
  else
  {
    v97 = v100;
    v98 = v99;
    v96 = v99;
    v95 = v100;
    v141 = v100;
    v142 = v99;

    if (Data.count.getter() == 6)
    {
      v14 = v114;
      v77 = 1;
      v75 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X:%02X:%02X:%02X:%02X:%02X", 0x1DuLL, 1);
      v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
      v74 = _allocateUninitializedArray<A>(_:)();
      v73 = v15;
      v88 = 0;
      v16 = Data.subscript.getter();
      v17 = v73;
      v71 = MEMORY[0x24BEE4260];
      v73[3] = MEMORY[0x24BEE4260];
      v72 = MEMORY[0x24BEE42B0];
      v17[4] = MEMORY[0x24BEE42B0];
      *(_BYTE *)v17 = v16;
      v78 = 1;
      v18 = Data.subscript.getter();
      v19 = v72;
      v20 = v73;
      v73[8] = v71;
      v20[9] = v19;
      *((_BYTE *)v20 + 40) = v18;
      v21 = Data.subscript.getter();
      v22 = v72;
      v23 = v73;
      v73[13] = v71;
      v23[14] = v22;
      *((_BYTE *)v23 + 80) = v21;
      v24 = Data.subscript.getter();
      v25 = v72;
      v26 = v73;
      v73[18] = v71;
      v26[19] = v25;
      *((_BYTE *)v26 + 120) = v24;
      v27 = Data.subscript.getter();
      v28 = v72;
      v29 = v73;
      v73[23] = v71;
      v29[24] = v28;
      *((_BYTE *)v29 + 160) = v27;
      v76 = 5;
      v30 = Data.subscript.getter();
      v31 = v72;
      v32 = v73;
      v73[28] = v71;
      v32[29] = v31;
      *((_BYTE *)v32 + 200) = v30;
      _finalizeUninitializedArray<A>(_:)();
      v79 = String.init(format:_:)();
      v80 = v33;
      swift_bridgeObjectRelease();
      v139 = v79;
      v140 = v80;
      v84 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("BT_%@", v76, v77 & 1);
      v83 = _allocateUninitializedArray<A>(_:)();
      v81 = v34;
      swift_bridgeObjectRetain();
      v93 = MEMORY[0x24BEE0D00];
      v81[3] = MEMORY[0x24BEE0D00];
      v35 = lazy protocol witness table accessor for type String and conformance String();
      v36 = v79;
      v37 = v80;
      v38 = v81;
      v81[4] = v35;
      *v38 = v36;
      v38[1] = v37;
      _finalizeUninitializedArray<A>(_:)();
      v85 = String.init(format:_:)();
      v86 = v39;
      swift_bridgeObjectRelease();
      v137 = v85;
      v138 = v86;
      v40 = MEMORY[0x24263AE34]();
      v87 = v136;
      v136[0] = v40;
      v136[1] = v41;
      lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View();
      v90 = Data.init<A>(_:)();
      v89 = v42;
      v134 = v90;
      v135 = v42;
      type metadata accessor for SHA256();
      v92 = v133;
      v133[0] = v90;
      v133[1] = v89;
      v91 = lazy protocol witness table accessor for type SHA256 and conformance SHA256();
      lazy protocol witness table accessor for type Data and conformance Data();
      static HashFunction.hash<A>(data:)();
      lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest();
      result = Sequence.compactMap<A>(_:)();
      v94 = result;
      if (v14)
      {
        __break(1u);
      }
      else
      {
        v62 = &v132;
        v132 = v94;
        v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        v60 = lazy protocol witness table accessor for type [String] and conformance [A]();
        default argument 0 of BidirectionalCollection<>.joined(separator:)();
        v61 = v44;
        v63 = BidirectionalCollection<>.joined(separator:)();
        v64 = v45;
        swift_bridgeObjectRelease();
        outlined destroy of [String]();
        v130 = v63;
        v131 = v64;
        v68 = 1;
        v46 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("findmy://device/bridgemissingdevice?id=", 0x27uLL, 1);
        object = v46._object;
        v66 = MEMORY[0x24263AE04](v46._countAndFlagsBits);
        v67 = v47;
        swift_bridgeObjectRelease();
        v128 = v66;
        v129 = v67;
        URL.init(string:)();
        v69 = type metadata accessor for URL();
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(char *, _QWORD))(v70 + 48))(v120, v68) == 1)
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v107, v120, v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v123 + 8))(v125, v122);
        outlined consume of Data._Representation(v90, v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined consume of Data._Representation(v95, v96);
      }
    }
    else
    {
      v55 = 0;
      type metadata accessor for Log();
      v53 = static Log.shared.getter();
      v56 = 1;
      v52 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Invalid BT Address", 0x24uLL, 1)._object;
      dispatch thunk of Log.error(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("findmy://devices", 0x10uLL, v56 & 1)._object;
      URL.init(string:)();
      swift_bridgeObjectRelease();
      v57 = type metadata accessor for URL();
      v58 = *(_QWORD *)(v57 - 8);
      if ((*(unsigned int (**)(char *, _QWORD))(v58 + 48))(v118, v56) == 1)
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v107, v118, v57);
      return outlined consume of Data._Representation(v95, v96);
    }
  }
  return result;
}

uint64_t closure #1 in HeadphoneDevice.getFindMyUrl(hpDevice:)@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v8;

  v5 = *a1;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02x", 4uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  *(_QWORD *)(v2 + 24) = MEMORY[0x24BEE4260];
  *(_QWORD *)(v2 + 32) = MEMORY[0x24BEE42B0];
  *(_BYTE *)v2 = v5;
  _finalizeUninitializedArray<A>(_:)();
  v6 = String.init(format:_:)();
  v8 = v3;
  swift_bridgeObjectRelease();
  result = v6;
  *a2 = v6;
  a2[1] = v8;
  return result;
}

uint64_t default argument 0 of BidirectionalCollection<>.joined(separator:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HeadphoneDevice.featureUpdateListener(_aaDevice:cbDevice:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v14;

  if (((*(uint64_t (**)(void))((*v2 & *MEMORY[0x24BEE4EA0]) + 0x258))() & 1) != 0)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Ignore the updated aaDevice", 0x2DuLL, 1);
    dispatch thunk of Log.debug(_:function:file:line:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v3 = a1;
    v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v4 = (*(uint64_t (**)(void *))((*v14 & *MEMORY[0x24BEE4EA0]) + 0x248))(a1);
    v10 = (*(uint64_t (**)(uint64_t))((*v14 & *v9) + 0xA20))(v4);
    v11 = (*(uint64_t (**)(void))((*v14 & *v9) + 0x240))();
    if (v11)
    {
      v8 = (void *)v11;
    }
    else
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    (*(void (**)(void *, uint64_t, uint64_t))(*(_QWORD *)v10 + 776))(v8, v5, v6);

    swift_release();
    return (*(uint64_t (**)(uint64_t))((*v14 & *MEMORY[0x24BEE4EA0]) + 0xA90))(a2);
  }
}

uint64_t HeadphoneDevice.featureUpdateListener(cbDevice:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  id v5;
  uint64_t v6;
  uint64_t *v7;
  id v8;
  uint64_t *v9;
  id v10;
  uint64_t *v11;
  id v12;
  uint64_t *v13;
  id v14;
  uint64_t *v15;
  id v16;
  uint64_t *v17;
  id v18;
  uint64_t *v19;
  id v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t *v26;
  id v27;
  float v28;
  float v29;
  uint64_t *v30;
  id v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  uint64_t **v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t *v45;
  uint64_t v46;
  Swift::String v47;
  _QWORD *v48;
  id v49;
  unint64_t v50;
  _QWORD *v51;
  id v52;
  uint64_t v53;
  Swift::String v54;
  Swift::String v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  id v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  Swift::String v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t *v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  Swift::String v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t *v100;
  id v101;
  unsigned __int8 v102;
  uint64_t *v103;
  char v104;
  unsigned __int8 v105;
  uint64_t v106;
  uint64_t v107;
  Swift::String v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  Swift::String v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t *v115;
  id v116;
  char v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  Swift::String v122;
  uint64_t *v123;
  uint64_t v124;
  uint64_t v125;
  Swift::String v126;
  Swift::String v127;
  uint64_t v128;
  uint64_t *v129;
  id v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  Swift::String v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  Swift::String v139;
  Swift::String v140;
  uint64_t v141;
  uint64_t *v142;
  id v143;
  char v144;
  uint64_t *v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  void (*v150)(_QWORD);
  uint64_t v151;
  uint64_t v152;
  Swift::String v153;
  uint64_t *v154;
  uint64_t v155;
  char v156;
  Swift::String v157;
  uint64_t v158;
  uint64_t *v159;
  id v160;
  int v161;
  unsigned int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  Swift::String v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  Swift::String v171;
  Swift::String v172;
  uint64_t v173;
  uint64_t *v174;
  id v175;
  char v176;
  unsigned __int8 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  Swift::String v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  Swift::String v185;
  Swift::String v186;
  uint64_t v187;
  uint64_t *v188;
  id v189;
  char v190;
  uint64_t v191;
  uint64_t v192;
  Swift::String v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  Swift::String v198;
  uint64_t v199;
  uint64_t *v200;
  id v201;
  unsigned __int8 v202;
  uint64_t *v203;
  id v204;
  char v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  Swift::String v209;
  uint64_t *v210;
  uint64_t v211;
  uint64_t v212;
  Swift::String v213;
  Swift::String v214;
  uint64_t v215;
  uint64_t *v216;
  id v217;
  unsigned __int8 v218;
  id v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  Swift::String v223;
  Swift::String v224;
  Swift::String v225;
  uint64_t v226;
  uint64_t *v227;
  unsigned __int8 v228;
  char v229;
  char v230;
  unsigned __int8 v231;
  uint64_t v232;
  uint64_t v233;
  Swift::String v234;
  uint64_t *v235;
  uint64_t v236;
  uint64_t v237;
  Swift::String v238;
  Swift::String v239;
  uint64_t v240;
  uint64_t *v241;
  id v242;
  char v243;
  uint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  Swift::String v247;
  uint64_t *v248;
  uint64_t v249;
  uint64_t v250;
  Swift::String v251;
  Swift::String v252;
  uint64_t *v253;
  uint64_t v254;
  Swift::String v255;
  Swift::String v256;
  uint64_t v257;
  uint64_t *v258;
  char v259;
  uint64_t v260;
  uint64_t v261;
  Swift::String v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  Swift::String v266;
  Swift::String v267;
  uint64_t v268;
  uint64_t *v269;
  unsigned __int8 v270;
  id v271;
  id v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  Swift::String v276;
  Swift::String v277;
  Swift::String v278;
  uint64_t v279;
  uint64_t *v280;
  unsigned __int8 v281;
  char v282;
  unsigned __int8 v283;
  id v284;
  id v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  Swift::String v289;
  Swift::String v290;
  Swift::String v291;
  uint64_t v292;
  uint64_t *v293;
  unsigned __int8 v294;
  char v295;
  unsigned __int8 v296;
  id v297;
  id v298;
  uint64_t v299;
  uint64_t v300;
  Swift::String v301;
  Swift::String v302;
  Swift::String v303;
  uint64_t v304;
  uint64_t *v305;
  unsigned __int8 v306;
  char v307;
  _QWORD v309[5];
  Builtin::Word v310;
  int v311;
  void *v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char *v319;
  _BYTE *v320;
  int v321;
  char *v322;
  int v323;
  int v324;
  int v325;
  int v326;
  char *v327;
  uint64_t v328;
  unsigned __int8 *v329;
  unint64_t v330;
  int v331;
  int v332;
  void *v333;
  void *v334;
  Builtin::Word v335;
  int v336;
  void *v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  char *v344;
  _BYTE *v345;
  int v346;
  char *v347;
  int v348;
  int v349;
  int v350;
  int v351;
  char *v352;
  uint64_t v353;
  unsigned __int8 *v354;
  unint64_t v355;
  int v356;
  int v357;
  void *v358;
  void *v359;
  Builtin::Word v360;
  int v361;
  void *v362;
  uint64_t *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  unint64_t v368;
  char *v369;
  _BYTE *v370;
  int v371;
  char *v372;
  int v373;
  int v374;
  int v375;
  int v376;
  char *v377;
  uint64_t v378;
  unsigned __int8 *v379;
  unint64_t v380;
  int v381;
  int v382;
  void *v383;
  void *v384;
  Builtin::Word v385;
  int v386;
  void *v387;
  uint64_t *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  unsigned __int8 *v394;
  _BYTE *v395;
  int v396;
  char *v397;
  uint64_t v398;
  _BYTE *v399;
  unint64_t v400;
  void *v401;
  void *v402;
  void *v403;
  char *v404;
  Builtin::Word v405;
  void *v406;
  Builtin::Word v407;
  int v408;
  void *v409;
  uint64_t *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  int v416;
  int v417;
  unsigned __int8 *v418;
  _BYTE *v419;
  unint64_t v420;
  int v421;
  int v422;
  int v423;
  int v424;
  char *v425;
  uint64_t v426;
  _BYTE *v427;
  unint64_t v428;
  unsigned int v429;
  unsigned int v430;
  void *v431;
  void *v432;
  Builtin::Word v433;
  int v434;
  void *v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t v441;
  _QWORD *v442;
  unsigned __int8 *v443;
  uint64_t v444;
  char *v445;
  void *v446;
  void *v447;
  Builtin::Word v448;
  int v449;
  void *v450;
  uint64_t *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  unint64_t v456;
  char *v457;
  _BYTE *v458;
  int v459;
  char *v460;
  int v461;
  int v462;
  char *v463;
  uint64_t v464;
  unsigned __int8 *v465;
  unint64_t v466;
  int v467;
  int v468;
  void *v469;
  void *v470;
  Builtin::Word v471;
  int v472;
  void *v473;
  uint64_t *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  unint64_t v479;
  _QWORD *v480;
  int v481;
  _BYTE *v482;
  int v483;
  char *v484;
  uint64_t v485;
  _BYTE *v486;
  unint64_t v487;
  int v488;
  void *v489;
  void *v490;
  Builtin::Word v491;
  int v492;
  void *v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unint64_t v499;
  _QWORD *v500;
  char *v501;
  void *v502;
  void *v503;
  Builtin::Word v504;
  int v505;
  void *v506;
  uint64_t *v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unint64_t v512;
  _QWORD *v513;
  unsigned __int8 *v514;
  uint64_t v515;
  _BYTE *v516;
  unint64_t v517;
  void *v518;
  int *v519;
  void *v520;
  uint64_t v521;
  Builtin::Word v522;
  int v523;
  void *v524;
  uint64_t *v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  _QWORD *v531;
  int v532;
  unsigned int *v533;
  uint64_t v534;
  _DWORD *v535;
  int v536;
  int v537;
  int v538;
  Builtin::Word v539;
  void *v540;
  _QWORD *v541;
  Builtin::Word v542;
  int v543;
  void *v544;
  uint64_t *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  int v550;
  int v551;
  int v552;
  int v553;
  int v554;
  char *v555;
  char *v556;
  unint64_t v557;
  int v558;
  void *v559;
  void *v560;
  Builtin::Word v561;
  int v562;
  void *v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t v569;
  _QWORD *v570;
  char *v571;
  void *v572;
  void *v573;
  Builtin::Word v574;
  int v575;
  void *v576;
  uint64_t *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  unint64_t v582;
  _QWORD *v583;
  unsigned __int8 *v584;
  uint64_t v585;
  char *v586;
  unint64_t v587;
  void *v588;
  void *v589;
  Builtin::Word v590;
  int v591;
  void *v592;
  uint64_t *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  unint64_t v598;
  _QWORD *v599;
  unsigned __int8 *v600;
  char *v601;
  void *v602;
  uint64_t v603;
  unsigned int v604;
  char *v605;
  uint64_t v606;
  unsigned __int8 *v607;
  unint64_t v608;
  void *v609;
  void *v610;
  Builtin::Word v611;
  int v612;
  void *v613;
  uint64_t *v614;
  uint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  unint64_t v619;
  _QWORD *v620;
  unsigned int *v621;
  uint64_t v622;
  int *v623;
  id v624;
  void *v625;
  void *v626;
  _QWORD *v627;
  void *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  Builtin::Word v632;
  int v633;
  void *v634;
  uint64_t *v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  _QWORD *v640;
  uint64_t v641;
  uint64_t v642;
  _BYTE *v643;
  _BYTE *v644;
  uint64_t v645;
  int v646;
  _BYTE *v647;
  _BYTE *v648;
  _BYTE *v649;
  _BYTE *v650;
  id v651;
  uint64_t v652;
  _BYTE *v653;
  uint64_t v654;
  _BYTE *v655;
  id v656;
  id v657;
  id v658;
  void *v659;
  void *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint8_t *v665;
  uint64_t v666;
  uint64_t v667;
  _BYTE **v668;
  uint64_t *v669;
  uint64_t *v670;
  uint64_t v671;
  void *object;
  uint64_t **v673;
  void *v674;
  uint64_t v675;
  uint64_t **v676;
  uint64_t v677;
  Swift::String v678;
  uint64_t v679;
  uint64_t v680;
  _QWORD *v681;
  void *v682;
  uint64_t v683;
  void *v684;
  char *v685;
  Builtin::Word v686;
  uint64_t v687;
  _QWORD *v688;
  uint64_t v689;
  uint64_t v690;
  Swift::String v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  _QWORD *v697;
  char *v698;
  void *v699;
  unint64_t v700;
  id *v701;
  Builtin::Word v702;
  int v703;
  void *v704;
  uint64_t *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  unint64_t v710;
  unint64_t v711;
  uint64_t *v712;
  uint32_t v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  _QWORD *v723;
  uint64_t v724;
  NSObject *v725;
  int v726;
  _BOOL4 v727;
  id v728;
  unint64_t v729;
  float v730;
  _BOOL4 v731;
  _BOOL4 v732;
  id v733;
  unint64_t v734;
  float v735;
  _BOOL4 v736;
  id v737;
  unint64_t v738;
  float v739;
  _BOOL4 v740;
  id v741;
  unint64_t v742;
  float v743;
  _QWORD *v744;
  id v745;
  unsigned int v746;
  uint64_t v747;
  _DWORD *v748;
  uint64_t *v749;
  const char *v750;
  const char *v751;
  const char *v752;
  const char *v753;
  const char *v754;
  uint64_t v755;
  id v756;
  uint64_t v757;
  uint64_t v758;
  unint64_t v759;
  char *v760;
  uint64_t (*v761)(uint64_t, uint64_t, uint64_t);
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  _BYTE *v765[3];
  _QWORD v766[2];
  uint64_t v767;
  uint64_t v768;
  _BYTE *v769;
  _BYTE *v770;
  _BYTE *v771;
  _BYTE *v772;
  unsigned int v773;
  int v774;
  uint64_t v775;
  uint64_t v776;
  char v777;
  char v778;
  unsigned __int8 v779;
  char v780;
  uint64_t v781;
  uint64_t v782;
  unsigned __int8 v783;
  char v784;
  uint64_t v785;
  uint64_t v786;
  unsigned __int8 v787;
  char v788;
  uint64_t v789;
  uint64_t v790;
  char v791;
  uint64_t v792;
  uint64_t v793;
  char v794;
  char v795;
  char v796;
  char v797;
  char v798;
  char v799;
  char v800;
  char v801;
  unsigned int v802;
  _DWORD v803[2];
  int v804;
  uint64_t v805;
  uint64_t v806;
  unsigned __int8 v807;
  char v808;
  uint64_t v809;
  uint64_t v810;
  unsigned __int8 v811;
  char v812;
  uint64_t v813;
  uint64_t v814;
  unsigned __int8 v815;
  _BYTE v816[3];
  uint64_t v817;
  uint64_t v818;
  unsigned __int8 v819;
  char v820;
  char v821;
  _BYTE v822[3];
  uint64_t v823;
  uint64_t v824;
  unsigned __int8 v825;
  char v826;
  uint64_t v827;
  uint64_t v828;
  unsigned __int8 v829;
  char v830;
  unsigned __int8 v831;
  char v832;
  uint64_t v833;
  uint64_t v834;
  unsigned __int8 v835;
  char v836;
  unsigned __int8 v837;
  _BYTE v838[7];
  char v839;
  _BYTE v840[3];
  uint64_t v841;
  uint64_t v842;
  unsigned __int8 v843;
  _BYTE v844[3];
  char v845;
  _BYTE v846[4];
  char v847;
  char v848;
  _BYTE v849[3];
  uint64_t v850;
  uint64_t v851;
  char v852;
  unsigned __int8 v853;
  unsigned __int8 v854;
  char v855;
  char v856;
  _BYTE v857[3];
  uint64_t v858;
  uint64_t v859;
  char v860;
  unsigned __int8 v861;
  unsigned __int8 v862;
  char v863;
  char v864;
  _BYTE v865[3];
  uint64_t v866;
  uint64_t v867;
  char v868;
  unsigned __int8 v869;
  char v870;
  char v871;
  unsigned __int8 v872;
  char v873;
  char v874;
  unsigned __int8 v875;
  char v876;
  unsigned __int8 v877;
  unsigned __int8 v878;
  unsigned __int8 v879;
  char v880;
  char v881;
  unsigned __int8 v882;
  char v883;
  char v884;
  _BYTE v885[2];
  char v886;
  unsigned __int8 v887;
  _BYTE v888[2];
  char v889;
  unsigned __int8 v890;
  char v891;
  char v892;
  unsigned __int8 v893;
  char v894;
  char v895;
  unsigned __int8 v896;
  unsigned int v897;
  int v898;
  uint64_t v899;
  uint32_t v900;
  uint64_t v901;
  uint64_t v902;
  id v903;
  _QWORD v904[3];
  _QWORD v905[2];
  uint64_t *v906;
  uint64_t v907;
  uint64_t v908;
  _DWORD v909[2];
  char v910;
  uint64_t *v911;
  uint64_t v912;

  v756 = (id)MEMORY[0x24BDAC7A8](a1, a2);
  v749 = v2;
  v750 = "featureUpdateListener(cbDevice:)";
  v751 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v752 = "Fatal error";
  v753 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v754 = "HeadphoneManager/HeadphoneDevice.swift";
  v912 = 0;
  v911 = 0;
  v910 = 0;
  v901 = 0;
  v902 = 0;
  v892 = 0;
  v883 = 0;
  v876 = 0;
  v873 = 0;
  v870 = 0;
  v771 = 0;
  v772 = 0;
  v755 = 0;
  v757 = type metadata accessor for Logger();
  v758 = *(_QWORD *)(v757 - 8);
  v759 = (*(_QWORD *)(v758 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v760 = (char *)v309 - v759;
  v912 = MEMORY[0x24BDAC7A8](v756, v3);
  v911 = v2;
  if (((*(uint64_t (**)(void))((*v2 & *MEMORY[0x24BEE4EA0]) + 0x258))() & 1) != 0)
  {
    type metadata accessor for Log();
    v309[2] = static Log.shared.getter();
    v309[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Ignore the updated cbDevice", 0x2DuLL, 1)._object;
    dispatch thunk of Log.debug(_:function:file:line:)();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    v4 = v749;
    v5 = objc_msgSend(v756, sel_batteryLevelLeft);
    v6 = *v4;
    v744 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(id))((v6 & *MEMORY[0x24BEE4EA0]) + 0x8D8))(v5);
    v7 = v749;
    v8 = objc_msgSend(v756, sel_batteryLevelRight);
    (*(void (**)(id))((*v7 & *v744) + 0x938))(v8);
    v9 = v749;
    v10 = objc_msgSend(v756, sel_batteryLevelCase);
    (*(void (**)(id))((*v9 & *v744) + 0x998))(v10);
    v11 = v749;
    v12 = objc_msgSend(v756, sel_batteryLevelMain);
    (*(void (**)(id))((*v11 & *v744) + 0x878))(v12);
    v13 = v749;
    v14 = objc_msgSend(v756, sel_batteryStateLeft);
    (*(void (**)(id))((*v13 & *v744) + 0x908))(v14);
    v15 = v749;
    v16 = objc_msgSend(v756, sel_batteryStateRight);
    (*(void (**)(id))((*v15 & *v744) + 0x968))(v16);
    v17 = v749;
    v18 = objc_msgSend(v756, sel_batteryStateCase);
    (*(void (**)(id))((*v17 & *v744) + 0x9C8))(v18);
    v19 = v749;
    v20 = objc_msgSend(v756, sel_batteryStateMain);
    v21 = (*(uint64_t (**)(id))((*v19 & *v744) + 0x8A8))(v20);
    v910 = 0;
    v745 = (id)(*(uint64_t (**)(uint64_t))((*v749 & *v744) + 0x228))(v21);
    v746 = objc_msgSend(v745, sel_flags);

    v909[1] = v746;
    v748 = v909;
    v909[0] = 8;
    v747 = type metadata accessor for CBProductFlags();
    lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
    if ((OptionSet<>.contains(_:)() & 1) != 0)
    {
      v741 = (id)(*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x210))();
      v742 = 0x1F4611000uLL;
      objc_msgSend(v741, (SEL)0x1F461155CLL);
      v743 = v22;

      objc_msgSend(v756, (SEL)(v742 + 1372));
      if (v743 != v23)
        v910 = 1;
    }
    else
    {
      v737 = (id)(*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x210))();
      v738 = 0x1F4611000uLL;
      objc_msgSend(v737, (SEL)0x1F461154BLL);
      v739 = v24;

      objc_msgSend(v756, (SEL)(v738 + 1355));
      v740 = v739 == v25;
      v26 = v749;
      v27 = v756;
      if (v740)
      {
        v733 = (id)(*(uint64_t (**)(id))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x210))(v27);
        v734 = 0x1F4611000uLL;
        objc_msgSend(v733, (SEL)0x1F461156DLL);
        v735 = v28;

        objc_msgSend(v756, (SEL)(v734 + 1389));
        v736 = v735 != v29;
      }
      else
      {
        v736 = 1;
      }
      v732 = v736;

      v30 = v749;
      v31 = v756;
      if (v732)
      {
        v731 = 1;
      }
      else
      {
        v728 = (id)(*(uint64_t (**)(id))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x210))(v31);
        v729 = 0x1F4611000uLL;
        objc_msgSend(v728, (SEL)0x1F461153ALL);
        v730 = v32;

        objc_msgSend(v756, (SEL)(v729 + 1338));
        v731 = v730 != v33;
      }
      v727 = v731;

      if (v727)
        v910 = 1;
    }
    v34 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v705 = &v907;
    v907 = v34;
    v908 = v35;
    v703 = 1;
    v36 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager featureUpdate:", 0x1FuLL, 1);
    object = v36._object;
    DefaultStringInterpolation.appendLiteral(_:)(v36);
    swift_bridgeObjectRelease();
    v673 = &v906;
    v906 = v749;
    v687 = 0;
    v675 = type metadata accessor for HeadphoneDevice();
    lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v698 = " ";
    v702 = 1;
    v37 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, v703 & 1);
    v674 = v37._object;
    DefaultStringInterpolation.appendLiteral(_:)(v37);
    swift_bridgeObjectRelease();
    v685 = "%p";
    v686 = 2;
    v678 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%p", 2uLL, v703 & 1);
    v689 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
    v677 = _allocateUninitializedArray<A>(_:)();
    v676 = (uint64_t **)v38;
    v39 = v749;
    v676[3] = (uint64_t *)v675;
    v40 = lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
    v41 = v676;
    v42 = v749;
    v676[4] = (uint64_t *)v40;
    *v41 = v42;
    _finalizeUninitializedArray<A>(_:)();
    v679 = String.init(format:_:)();
    v680 = v43;
    swift_bridgeObjectRelease();
    v681 = v905;
    v905[0] = v679;
    v905[1] = v680;
    v694 = MEMORY[0x24BEE0D00];
    v695 = MEMORY[0x24BEE0D70];
    v696 = MEMORY[0x24BEE0D68];
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v44 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" aaDevice:", 0xAuLL, v703 & 1);
    v682 = v44._object;
    DefaultStringInterpolation.appendLiteral(_:)(v44);
    v45 = v749;
    v46 = swift_bridgeObjectRelease();
    v683 = (*(uint64_t (**)(uint64_t))((*v45 & *MEMORY[0x24BEE4EA0]) + 0xA20))(v46);
    swift_release();
    v904[2] = v683;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v47 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" cb:", 4uLL, v703 & 1);
    v684 = v47._object;
    DefaultStringInterpolation.appendLiteral(_:)(v47);
    swift_bridgeObjectRelease();
    v691 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v685, v686, v703 & 1);
    v690 = _allocateUninitializedArray<A>(_:)();
    v688 = v48;
    v49 = v756;
    v700 = type metadata accessor for CBDevice();
    v688[3] = v700;
    v50 = lazy protocol witness table accessor for type CBDevice and conformance NSObject();
    v51 = v688;
    v52 = v756;
    v688[4] = v50;
    *v51 = v52;
    _finalizeUninitializedArray<A>(_:)();
    v692 = String.init(format:_:)();
    v693 = v53;
    swift_bridgeObjectRelease();
    v697 = v904;
    v904[0] = v692;
    v904[1] = v693;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v54 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v698, v702, v703 & 1);
    v699 = v54._object;
    DefaultStringInterpolation.appendLiteral(_:)(v54);
    swift_bridgeObjectRelease();
    v701 = &v903;
    v903 = v756;
    lazy protocol witness table accessor for type CBDevice and conformance NSObject();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v55 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(",", v702, v703 & 1);
    v704 = v55._object;
    DefaultStringInterpolation.appendLiteral(_:)(v55);
    v56 = v760;
    swift_bridgeObjectRelease();
    v707 = v907;
    v706 = v908;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    v708 = String.init(stringInterpolation:)();
    v709 = v57;
    v901 = v708;
    v902 = v57;
    v58 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v758 + 16))(v56, v58, v757);
    swift_bridgeObjectRetain();
    v715 = 32;
    v716 = 7;
    v59 = swift_allocObject();
    v60 = v709;
    v717 = v59;
    *(_QWORD *)(v59 + 16) = v708;
    *(_QWORD *)(v59 + 24) = v60;
    v725 = Logger.logObject.getter();
    v726 = static os_log_type_t.default.getter();
    v712 = &v899;
    v899 = 12;
    v710 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v711 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v713 = v900;
    v714 = 17;
    v719 = swift_allocObject();
    *(_BYTE *)(v719 + 16) = 32;
    v720 = swift_allocObject();
    *(_BYTE *)(v720 + 16) = 8;
    v61 = swift_allocObject();
    v62 = v717;
    v718 = v61;
    *(_QWORD *)(v61 + 16) = partial apply for implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:);
    *(_QWORD *)(v61 + 24) = v62;
    v63 = swift_allocObject();
    v64 = v718;
    v722 = v63;
    *(_QWORD *)(v63 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v63 + 24) = v64;
    v724 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v721 = _allocateUninitializedArray<A>(_:)();
    v723 = v65;
    swift_retain();
    v66 = v719;
    v67 = v723;
    *v723 = closure #1 in OSLogArguments.append(_:)partial apply;
    v67[1] = v66;
    swift_retain();
    v68 = v720;
    v69 = v723;
    v723[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v69[3] = v68;
    swift_retain();
    v70 = v722;
    v71 = v723;
    v723[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v71[5] = v70;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v725, (os_log_type_t)v726))
    {
      v72 = v755;
      v665 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v664 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v666 = createStorage<A>(capacity:type:)(0);
      v667 = createStorage<A>(capacity:type:)(1);
      v668 = v765;
      v765[0] = v665;
      v669 = &v764;
      v764 = v666;
      v670 = &v763;
      v763 = v667;
      serialize(_:at:)(2, v765);
      serialize(_:at:)(1, v668);
      v761 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v762 = v719;
      closure #1 in osLogInternal(_:log:type:)(&v761, (uint64_t)v668, (uint64_t)v669, (uint64_t)v670);
      v671 = v72;
      if (v72)
      {
        __break(1u);
      }
      else
      {
        v761 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v762 = v720;
        closure #1 in osLogInternal(_:log:type:)(&v761, (uint64_t)v765, (uint64_t)&v764, (uint64_t)&v763);
        v663 = 0;
        v761 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v762 = v722;
        closure #1 in osLogInternal(_:log:type:)(&v761, (uint64_t)v765, (uint64_t)&v764, (uint64_t)&v763);
        _os_log_impl(&dword_23DAB4000, v725, (os_log_type_t)v726, "%s", v665, v713);
        destroyStorage<A>(_:count:)(v666, 0, v664);
        destroyStorage<A>(_:count:)(v667, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v665, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v73 = v749;

    (*(void (**)(char *, uint64_t))(v758 + 8))(v760, v757);
    v74 = v756;
    (*(void (**)(id))((*v73 & *MEMORY[0x24BEE4EA0]) + 0x218))(v756);
    if ((v910 & 1) != 0)
    {
      type metadata accessor for Log();
      v661 = static Log.shared.getter();
      v660 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: update battery levels", 0x27uLL, 1)._object;
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      v662 = HeadphoneDevice.deviceDelegate.getter();
      if (v662)
      {
        v659 = (void *)v662;
      }
      else
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      v658 = v659;
      swift_getObjectType();
      objc_msgSend(v658, sel_updateTitleBar);
      swift_unknownObjectRelease();
    }
    v657 = objc_msgSend(v756, sel_name);
    if (v657)
    {
      v656 = v657;
      v651 = v657;
      v652 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v653 = v75;

      v654 = v652;
      v655 = v653;
    }
    else
    {
      v654 = 0;
      v655 = 0;
    }
    v649 = v655;
    v650 = (_BYTE *)v654;
    if (v655)
    {
      v647 = v650;
      v648 = v649;
      v644 = v649;
      v643 = v650;
      v771 = v650;
      v772 = v649;
      v642 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x348))();
      v645 = v76;
      swift_bridgeObjectRetain();
      v769 = v643;
      v770 = v644;
      v646 = static String.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v646 & 1) == 0)
      {
        v632 = 0;
        type metadata accessor for Log();
        v639 = static Log.shared.getter();
        v77 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v635 = &v767;
        v767 = v77;
        v768 = v78;
        v633 = 1;
        v79 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: name mismatch - change from ", 0x2EuLL, 1);
        v626 = v79._object;
        DefaultStringInterpolation.appendLiteral(_:)(v79);
        v80 = v749;
        v81 = swift_bridgeObjectRelease();
        v82 = *v80;
        v640 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v83 = (*(uint64_t (**)(uint64_t))((v82 & *MEMORY[0x24BEE4EA0]) + 0x348))(v81);
        v627 = v766;
        v766[0] = v83;
        v766[1] = v84;
        v629 = MEMORY[0x24BEE0D00];
        v630 = MEMORY[0x24BEE0D70];
        v631 = MEMORY[0x24BEE0D68];
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        outlined destroy of String();
        v85 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v633 & 1);
        v628 = v85._object;
        DefaultStringInterpolation.appendLiteral(_:)(v85);
        swift_bridgeObjectRelease();
        v765[1] = v643;
        v765[2] = v644;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v86 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v632, v633 & 1);
        v634 = v86._object;
        DefaultStringInterpolation.appendLiteral(_:)(v86);
        swift_bridgeObjectRelease();
        v637 = v767;
        v636 = v768;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        v638 = v87;
        dispatch thunk of Log.notice(_:function:file:line:)();
        v88 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRetain();
        (*(void (**)(_BYTE *, _BYTE *))((*v88 & *v640) + 0x350))(v643, v644);
        v641 = HeadphoneDevice.deviceDelegate.getter();
        if (v641)
        {
          v625 = (void *)v641;
        }
        else
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        v624 = v625;
        swift_getObjectType();
        objc_msgSend(v624, sel_updateTopLevelEntryWithHpDevice_, v749);
        swift_unknownObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    v89 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x378))();
    v623 = &v898;
    v898 = v89;
    v90 = objc_msgSend(v756, sel_listeningMode);
    v621 = &v897;
    v897 = v90;
    v622 = type metadata accessor for CBListeningMode();
    lazy protocol witness table accessor for type CBListeningMode and conformance CBListeningMode();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v611 = 0;
      type metadata accessor for Log();
      v618 = static Log.shared.getter();
      v91 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v614 = &v775;
      v775 = v91;
      v776 = v92;
      v612 = 1;
      v93 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: listeningMode mismatch - change from ", 0x37uLL, 1);
      v609 = v93._object;
      DefaultStringInterpolation.appendLiteral(_:)(v93);
      v94 = v749;
      v95 = swift_bridgeObjectRelease();
      v96 = *v94;
      v620 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v774 = (*(uint64_t (**)(uint64_t))((v96 & *MEMORY[0x24BEE4EA0]) + 0x378))(v95);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v97 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v612 & 1);
      v610 = v97._object;
      DefaultStringInterpolation.appendLiteral(_:)(v97);
      swift_bridgeObjectRelease();
      v619 = 0x1F340C000uLL;
      v773 = objc_msgSend(v756, (SEL)0x1F340C42ALL);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v98 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v611, v612 & 1);
      v613 = v98._object;
      DefaultStringInterpolation.appendLiteral(_:)(v98);
      swift_bridgeObjectRelease();
      v616 = v775;
      v615 = v776;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v617 = v99;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v100 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v101 = objc_msgSend(v756, (SEL)(v619 + 1066));
      (*(void (**)(id))((*v100 & *v620) + 0x380))(v101);
    }
    v102 = objc_msgSend(v756, sel_smartRoutingMode);
    v607 = &v896;
    v896 = v102;
    v605 = &v895;
    v895 = 0;
    v606 = type metadata accessor for CBSmartRoutingMode();
    v608 = lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
    if ((== infix<A>(_:_:)() & 1) != 0)
    {
      v778 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x5D0))();
      v777 = 1;
      if ((== infix<A>(_:_:)() & 1) != 0)
      {
        type metadata accessor for Log();
        v603 = static Log.shared.getter();
        v602 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: smartRoutingMode mismatch - invalid value received, disable SR", 0x50uLL, 1)._object;
        v604 = 2;
        dispatch thunk of Log.notice(_:function:file:line:)();
        v103 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(_QWORD))((*v103 & *MEMORY[0x24BEE4EA0]) + 0x5D8))(v604);
      }
    }
    else
    {
      v104 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x5D0))();
      v601 = &v894;
      v894 = v104;
      v105 = objc_msgSend(v756, sel_smartRoutingMode);
      v600 = &v893;
      v893 = v105;
      lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        v590 = 0;
        type metadata accessor for Log();
        v597 = static Log.shared.getter();
        v106 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v593 = &v781;
        v781 = v106;
        v782 = v107;
        v591 = 1;
        v108 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: smartRoutingMode mismatch - change from ", 0x3AuLL, 1);
        v588 = v108._object;
        DefaultStringInterpolation.appendLiteral(_:)(v108);
        v109 = v749;
        v110 = swift_bridgeObjectRelease();
        v111 = *v109;
        v599 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v780 = (*(uint64_t (**)(uint64_t))((v111 & *MEMORY[0x24BEE4EA0]) + 0x5D0))(v110);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v112 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v591 & 1);
        v589 = v112._object;
        DefaultStringInterpolation.appendLiteral(_:)(v112);
        swift_bridgeObjectRelease();
        v598 = 0x1F4614000uLL;
        v779 = objc_msgSend(v756, (SEL)0x1F4614A38);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v113 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v590, v591 & 1);
        v592 = v113._object;
        DefaultStringInterpolation.appendLiteral(_:)(v113);
        swift_bridgeObjectRelease();
        v595 = v781;
        v594 = v782;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        v596 = v114;
        dispatch thunk of Log.notice(_:function:file:line:)();
        v115 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        v116 = objc_msgSend(v756, (SEL)(v598 + 2616));
        (*(void (**)(id))((*v115 & *v599) + 0x5D8))(v116);
      }
    }
    v892 = 0;
    v117 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
    v586 = &v891;
    v891 = v117;
    v118 = objc_msgSend(v756, sel_clickHoldModeLeft);
    v584 = &v890;
    v890 = v118;
    v585 = type metadata accessor for CBPeerUIGestureMode();
    v587 = lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
    v119 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v119 & 1) == 0)
    {
      v574 = 0;
      type metadata accessor for Log();
      v581 = static Log.shared.getter();
      v120 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v577 = &v785;
      v785 = v120;
      v786 = v121;
      v575 = 1;
      v122 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: clickHoldModeLeft mismatch - change from ", 0x3BuLL, 1);
      v572 = v122._object;
      DefaultStringInterpolation.appendLiteral(_:)(v122);
      v123 = v749;
      v124 = swift_bridgeObjectRelease();
      v125 = *v123;
      v583 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v784 = (*(uint64_t (**)(uint64_t))((v125 & *MEMORY[0x24BEE4EA0]) + 0x3A8))(v124);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v126 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v575 & 1);
      v573 = v126._object;
      DefaultStringInterpolation.appendLiteral(_:)(v126);
      swift_bridgeObjectRelease();
      v582 = 0x1F324A000uLL;
      v783 = objc_msgSend(v756, (SEL)0x1F324A5C8);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v127 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v574, v575 & 1);
      v576 = v127._object;
      DefaultStringInterpolation.appendLiteral(_:)(v127);
      swift_bridgeObjectRelease();
      v579 = v785;
      v578 = v786;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v580 = v128;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v129 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v130 = objc_msgSend(v756, (SEL)(v582 + 1480));
      v119 = (*(uint64_t (**)(id))((*v129 & *v583) + 0x3B0))(v130);
      v892 = 1;
    }
    v131 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x3D8))(v119);
    v571 = &v889;
    v889 = v131;
    v888[1] = objc_msgSend(v756, sel_clickHoldModeRight);
    v132 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v132 & 1) == 0)
    {
      v561 = 0;
      type metadata accessor for Log();
      v568 = static Log.shared.getter();
      v133 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v564 = &v789;
      v789 = v133;
      v790 = v134;
      v562 = 1;
      v135 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: clickHoldModeRight mismatch - change from ", 0x3CuLL, 1);
      v559 = v135._object;
      DefaultStringInterpolation.appendLiteral(_:)(v135);
      v136 = v749;
      v137 = swift_bridgeObjectRelease();
      v138 = *v136;
      v570 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v788 = (*(uint64_t (**)(uint64_t))((v138 & *MEMORY[0x24BEE4EA0]) + 0x3D8))(v137);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v139 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v562 & 1);
      v560 = v139._object;
      DefaultStringInterpolation.appendLiteral(_:)(v139);
      swift_bridgeObjectRelease();
      v569 = 0x1F2E1A000uLL;
      v787 = objc_msgSend(v756, (SEL)0x1F2E1ABCFLL);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v140 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v561, v562 & 1);
      v563 = v140._object;
      DefaultStringInterpolation.appendLiteral(_:)(v140);
      swift_bridgeObjectRelease();
      v566 = v789;
      v565 = v790;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v567 = v141;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v142 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v143 = objc_msgSend(v756, (SEL)(v569 + 3023));
      v132 = (*(uint64_t (**)(id))((*v142 & *v570) + 0x3E0))(v143);
      v892 = 1;
    }
    if ((v892 & 1) != 0)
    {
      v144 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x3A8))(v132);
      v556 = &v801;
      v801 = v144;
      v555 = &v800;
      v800 = 6;
      v557 = lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
      v558 = == infix<A>(_:_:)();
      v145 = v749;
      if ((v558 & 1) != 0)
      {
        v554 = 1;
      }
      else
      {
        v799 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
        v798 = 7;
        v554 = == infix<A>(_:_:)();
      }
      v553 = v554;

      v146 = v749;
      if ((v553 & 1) != 0)
      {
        v552 = 1;
      }
      else
      {
        v797 = (*(uint64_t (**)(uint64_t *))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x3D8))(v146);
        v796 = 6;
        v552 = == infix<A>(_:_:)();
      }
      v551 = v552;

      v147 = v749;
      if ((v551 & 1) != 0)
      {
        v550 = 1;
      }
      else
      {
        v795 = (*(uint64_t (**)(uint64_t *))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x3D8))(v147);
        v794 = 7;
        v550 = == infix<A>(_:_:)();
      }
      v148 = v749;
      v538 = v550;

      v149 = *v148;
      v541 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v150 = *(void (**)(_QWORD))((v149 & *MEMORY[0x24BEE4EA0]) + 0x638);
      v543 = 1;
      v150(v538 & 1);
      v542 = 0;
      type metadata accessor for Log();
      v549 = static Log.shared.getter();
      v539 = 50;
      v151 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v545 = &v792;
      v792 = v151;
      v793 = v152;
      v153 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: New volumeControlToggle is now: ", v539, v543 & 1);
      v540 = v153._object;
      DefaultStringInterpolation.appendLiteral(_:)(v153);
      v154 = v749;
      v155 = swift_bridgeObjectRelease();
      v156 = (*(uint64_t (**)(uint64_t))((*v154 & *v541) + 0x630))(v155);
      v791 = v156 & v543;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v157 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v542, v543 & 1);
      v544 = v157._object;
      DefaultStringInterpolation.appendLiteral(_:)(v157);
      swift_bridgeObjectRelease();
      v547 = v792;
      v546 = v793;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v548 = v158;
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      v132 = swift_release();
    }
    v537 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x630))(v132);
    v159 = v749;
    v160 = v756;
    if ((v537 & 1) != 0)
    {
      v536 = 0;
    }
    else
    {
      v161 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x408))();
      v535 = v803;
      v803[0] = v161;
      v162 = objc_msgSend(v756, sel_listeningModeConfigs);
      v533 = &v802;
      v802 = v162;
      v534 = type metadata accessor for CBListeningModeConfigs();
      lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
      v536 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    v532 = v536;

    if ((v532 & 1) != 0)
    {
      v522 = 0;
      type metadata accessor for Log();
      v529 = static Log.shared.getter();
      v164 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v525 = &v805;
      v805 = v164;
      v806 = v165;
      v523 = 1;
      v166 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: listeningModeConfigs mismatch - change from ", 0x3EuLL, 1);
      v518 = v166._object;
      DefaultStringInterpolation.appendLiteral(_:)(v166);
      v167 = v749;
      v168 = swift_bridgeObjectRelease();
      v169 = *v167;
      v531 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v170 = (*(uint64_t (**)(uint64_t))((v169 & *MEMORY[0x24BEE4EA0]) + 0x408))(v168);
      v519 = &v804;
      v804 = v170;
      v521 = type metadata accessor for CBListeningModeConfigs();
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v171 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v523 & 1);
      v520 = v171._object;
      DefaultStringInterpolation.appendLiteral(_:)(v171);
      swift_bridgeObjectRelease();
      v530 = 0x1F2C2B000uLL;
      v803[1] = objc_msgSend(v756, (SEL)0x1F2C2BE48);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v172 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v522, v523 & 1);
      v524 = v172._object;
      DefaultStringInterpolation.appendLiteral(_:)(v172);
      swift_bridgeObjectRelease();
      v527 = v805;
      v526 = v806;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v528 = v173;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v174 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v175 = objc_msgSend(v756, (SEL)(v530 + 3656));
      v163 = (*(uint64_t (**)(id))((*v174 & *v531) + 0x410))(v175);
    }
    v176 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x4E0))(v163);
    v516 = v888;
    v888[0] = v176;
    v177 = objc_msgSend(v756, sel_doubleTapActionLeft);
    v514 = &v887;
    v887 = v177;
    v515 = type metadata accessor for CBDoubleTapAction();
    v517 = lazy protocol witness table accessor for type CBDoubleTapAction and conformance CBDoubleTapAction();
    v178 = dispatch thunk of static Equatable.== infix(_:_:)();
    if ((v178 & 1) == 0)
    {
      v504 = 0;
      type metadata accessor for Log();
      v511 = static Log.shared.getter();
      v179 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v507 = &v809;
      v809 = v179;
      v810 = v180;
      v505 = 1;
      v181 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: doubleTapActionLeft mismatch - change from ", 0x3DuLL, 1);
      v502 = v181._object;
      DefaultStringInterpolation.appendLiteral(_:)(v181);
      v182 = v749;
      v183 = swift_bridgeObjectRelease();
      v184 = *v182;
      v513 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v808 = (*(uint64_t (**)(uint64_t))((v184 & *MEMORY[0x24BEE4EA0]) + 0x4E0))(v183);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v185 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v505 & 1);
      v503 = v185._object;
      DefaultStringInterpolation.appendLiteral(_:)(v185);
      swift_bridgeObjectRelease();
      v512 = 0x1F265A000uLL;
      v807 = objc_msgSend(v756, (SEL)0x1F265ACEDLL);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v186 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v504, v505 & 1);
      v506 = v186._object;
      DefaultStringInterpolation.appendLiteral(_:)(v186);
      swift_bridgeObjectRelease();
      v509 = v809;
      v508 = v810;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v510 = v187;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v188 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v189 = objc_msgSend(v756, (SEL)(v512 + 3309));
      v178 = (*(uint64_t (**)(id))((*v188 & *v513) + 0x4E8))(v189);
    }
    v190 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x510))(v178);
    v501 = &v886;
    v886 = v190;
    v885[1] = objc_msgSend(v756, sel_doubleTapActionRight);
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v491 = 0;
      type metadata accessor for Log();
      v498 = static Log.shared.getter();
      v191 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v494 = &v813;
      v813 = v191;
      v814 = v192;
      v492 = 1;
      v193 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: doubleTapActionRight mismatch - change from ", 0x3EuLL, 1);
      v489 = v193._object;
      DefaultStringInterpolation.appendLiteral(_:)(v193);
      v194 = v749;
      v195 = swift_bridgeObjectRelease();
      v196 = *v194;
      v500 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v812 = (*(uint64_t (**)(uint64_t))((v196 & *MEMORY[0x24BEE4EA0]) + 0x510))(v195);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v197 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v492 & 1);
      v490 = v197._object;
      DefaultStringInterpolation.appendLiteral(_:)(v197);
      swift_bridgeObjectRelease();
      v499 = 0x1F2FAB000uLL;
      v811 = objc_msgSend(v756, (SEL)0x1F2FAB4C8);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v198 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v491, v492 & 1);
      v493 = v198._object;
      DefaultStringInterpolation.appendLiteral(_:)(v198);
      swift_bridgeObjectRelease();
      v496 = v813;
      v495 = v814;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v497 = v199;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v200 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v201 = objc_msgSend(v756, (SEL)(v499 + 1224));
      (*(void (**)(id))((*v200 & *v500) + 0x518))(v201);
    }
    v202 = objc_msgSend(v756, sel_crownRotationDirection);
    v486 = v885;
    v885[0] = v202;
    v484 = &v884;
    v884 = 0;
    v485 = type metadata accessor for CBPeerCrownRotationDirection();
    v487 = lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection();
    v488 = dispatch thunk of static Equatable.== infix(_:_:)();
    v203 = v749;
    v204 = v756;
    if ((v488 & 1) != 0)
    {
      v483 = 0;
    }
    else
    {
      v205 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x540))();
      v482 = v816;
      v816[0] = v205;
      v815 = objc_msgSend(v756, sel_crownRotationDirection);
      v483 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    v481 = v483;

    if ((v481 & 1) != 0)
    {
      v471 = 0;
      type metadata accessor for Log();
      v478 = static Log.shared.getter();
      v207 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v474 = &v817;
      v817 = v207;
      v818 = v208;
      v472 = 1;
      v209 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: crownRotationDirection mismatch - change from ", 0x40uLL, 1);
      v469 = v209._object;
      DefaultStringInterpolation.appendLiteral(_:)(v209);
      v210 = v749;
      v211 = swift_bridgeObjectRelease();
      v212 = *v210;
      v480 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v816[2] = (*(uint64_t (**)(uint64_t))((v212 & *MEMORY[0x24BEE4EA0]) + 0x540))(v211);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v213 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v472 & 1);
      v470 = v213._object;
      DefaultStringInterpolation.appendLiteral(_:)(v213);
      swift_bridgeObjectRelease();
      v479 = 0x1F2D7C000uLL;
      v816[1] = objc_msgSend(v756, (SEL)0x1F2D7C4C8);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v214 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v471, v472 & 1);
      v473 = v214._object;
      DefaultStringInterpolation.appendLiteral(_:)(v214);
      swift_bridgeObjectRelease();
      v476 = v817;
      v475 = v818;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v477 = v215;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v216 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v217 = objc_msgSend(v756, (SEL)(v479 + 1224));
      v206 = (*(uint64_t (**)(id))((*v216 & *v480) + 0x548))(v217);
    }
    if (((*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x570))(v206) & 1) == 1)
      v468 = 1;
    else
      v468 = 2;
    v462 = v468;
    v883 = v468;
    v218 = objc_msgSend(v756, sel_placementMode);
    v465 = &v882;
    v882 = v218;
    v463 = &v881;
    v881 = 0;
    v464 = type metadata accessor for CBDevicePlacementMode();
    v466 = lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
    v467 = dispatch thunk of static Equatable.== infix(_:_:)();
    v219 = v756;
    if ((v467 & 1) != 0)
    {
      v461 = 0;
    }
    else
    {
      v460 = &v820;
      v820 = v462;
      v819 = objc_msgSend(v756, sel_placementMode);
      v461 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    v459 = v461;

    if ((v459 & 1) != 0)
    {
      v448 = 0;
      type metadata accessor for Log();
      v455 = static Log.shared.getter();
      v221 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v451 = &v823;
      v823 = v221;
      v824 = v222;
      v449 = 1;
      v223 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: inEarDetection mismatch - change from ", 0x38uLL, 1);
      v446 = v223._object;
      DefaultStringInterpolation.appendLiteral(_:)(v223);
      swift_bridgeObjectRelease();
      v822[2] = v462;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v224 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v449 & 1);
      v447 = v224._object;
      DefaultStringInterpolation.appendLiteral(_:)(v224);
      swift_bridgeObjectRelease();
      v456 = 0x1F4612000uLL;
      v822[1] = objc_msgSend(v756, (SEL)0x1F4612DF0);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v225 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v448, v449 & 1);
      v450 = v225._object;
      DefaultStringInterpolation.appendLiteral(_:)(v225);
      swift_bridgeObjectRelease();
      v453 = v823;
      v452 = v824;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v454 = v226;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v227 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v228 = objc_msgSend(v756, (SEL)(v456 + 3568));
      v458 = v822;
      v822[0] = v228;
      v457 = &v821;
      v821 = 1;
      lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
      v229 = == infix<A>(_:_:)();
      v220 = (*(uint64_t (**)(_QWORD))((*v227 & *MEMORY[0x24BEE4EA0]) + 0x578))(v229 & 1);
    }
    v230 = (*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x600))(v220);
    v445 = &v880;
    v880 = v230;
    v231 = objc_msgSend(v756, sel_microphoneMode);
    v443 = &v879;
    v879 = v231;
    v444 = type metadata accessor for CBMicrophoneMode();
    lazy protocol witness table accessor for type CBMicrophoneMode and conformance CBMicrophoneMode();
    if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v433 = 0;
      type metadata accessor for Log();
      v440 = static Log.shared.getter();
      v232 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v436 = &v827;
      v827 = v232;
      v828 = v233;
      v434 = 1;
      v234 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: microphoneMode mismatch - change from ", 0x38uLL, 1);
      v431 = v234._object;
      DefaultStringInterpolation.appendLiteral(_:)(v234);
      v235 = v749;
      v236 = swift_bridgeObjectRelease();
      v237 = *v235;
      v442 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v826 = (*(uint64_t (**)(uint64_t))((v237 & *MEMORY[0x24BEE4EA0]) + 0x600))(v236);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v238 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v434 & 1);
      v432 = v238._object;
      DefaultStringInterpolation.appendLiteral(_:)(v238);
      swift_bridgeObjectRelease();
      v441 = 0x1F2A53000uLL;
      v825 = objc_msgSend(v756, (SEL)0x1F2A53C64);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v239 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v433, v434 & 1);
      v435 = v239._object;
      DefaultStringInterpolation.appendLiteral(_:)(v239);
      swift_bridgeObjectRelease();
      v438 = v827;
      v437 = v828;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v439 = v240;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v241 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v242 = objc_msgSend(v756, (SEL)(v441 + 3172));
      (*(void (**)(id))((*v241 & *v442) + 0x608))(v242);
    }
    v429 = objc_msgSend(v756, sel_endCallConfig);
    v878 = v429;
    v430 = objc_msgSend(v756, sel_muteControlConfig);
    v877 = v430;
    if (CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v756, sel_muteControlCapability)))
    {
      v427 = v840;
      v840[0] = v429;
      v425 = &v839;
      v839 = 0;
      v426 = type metadata accessor for CBPeerCallConfig();
      v428 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if ((== infix<A>(_:_:)() & 1) != 0)
      {
        v424 = 1;
      }
      else
      {
        v838[6] = v429;
        v838[5] = 1;
        v424 = == infix<A>(_:_:)();
      }
      if ((v424 & 1) != 0)
      {
        v423 = 1;
      }
      else
      {
        v838[4] = v430;
        v838[3] = 0;
        v423 = == infix<A>(_:_:)();
      }
      if ((v423 & 1) != 0)
      {
        v422 = 1;
      }
      else
      {
        v838[2] = v430;
        v838[1] = 1;
        v422 = == infix<A>(_:_:)();
      }
      if ((v422 & 1) != 0)
      {
        v878 = 3;
        v877 = 2;
      }
      v243 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x798))();
      v419 = v838;
      v838[0] = v243;
      v418 = &v837;
      v837 = v877;
      v420 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      v421 = dispatch thunk of static Equatable.== infix(_:_:)();
      v244 = v749;
      if ((v421 & 1) != 0)
      {
        v836 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x768))();
        v835 = v878;
        v417 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
      }
      else
      {
        v417 = 1;
      }
      v416 = v417;

      if ((v416 & 1) != 0)
      {
        v407 = 0;
        type metadata accessor for Log();
        v414 = static Log.shared.getter();
        v405 = 4;
        v245 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v410 = &v833;
        v833 = v245;
        v834 = v246;
        v408 = 1;
        v247 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: muteControlGesture mismatch - change from ", 0x3CuLL, 1);
        v401 = v247._object;
        DefaultStringInterpolation.appendLiteral(_:)(v247);
        v248 = v749;
        v249 = swift_bridgeObjectRelease();
        v250 = *v248;
        v415 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v832 = (*(uint64_t (**)(uint64_t))((v250 & *MEMORY[0x24BEE4EA0]) + 0x798))(v249);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v404 = " to ";
        v251 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", v405, v408 & 1);
        v402 = v251._object;
        DefaultStringInterpolation.appendLiteral(_:)(v251);
        swift_bridgeObjectRelease();
        v831 = v877;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v252 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" and endCallGesture mismatch - change from ", 0x2BuLL, v408 & 1);
        v403 = v252._object;
        DefaultStringInterpolation.appendLiteral(_:)(v252);
        v253 = v749;
        v254 = swift_bridgeObjectRelease();
        v830 = (*(uint64_t (**)(uint64_t))((*v253 & *v415) + 0x768))(v254);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v255 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v404, v405, v408 & 1);
        v406 = v255._object;
        DefaultStringInterpolation.appendLiteral(_:)(v255);
        swift_bridgeObjectRelease();
        v829 = v878;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v256 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v407, v408 & 1);
        v409 = v256._object;
        DefaultStringInterpolation.appendLiteral(_:)(v256);
        swift_bridgeObjectRelease();
        v412 = v833;
        v411 = v834;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        v413 = v257;
        dispatch thunk of Log.notice(_:function:file:line:)();
        v258 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(_QWORD))((*v258 & *v415) + 0x770))(v878);
        (*(void (**)(_QWORD))((*v749 & *v415) + 0x7A0))(v877);
      }
    }
    else if (CBPeerCallManagementCapability.rawValue.getter((uint64_t)objc_msgSend(v756, sel_endCallCapability)))
    {
      v399 = v846;
      v846[0] = v429;
      v397 = &v845;
      v845 = 0;
      v398 = type metadata accessor for CBPeerCallConfig();
      v400 = lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if ((== infix<A>(_:_:)() & 1) != 0)
      {
        v396 = 1;
      }
      else
      {
        v844[2] = v429;
        v844[1] = 1;
        v396 = == infix<A>(_:_:)();
      }
      if ((v396 & 1) != 0)
        v878 = 2;
      v259 = (*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x768))();
      v395 = v844;
      v844[0] = v259;
      v394 = &v843;
      v843 = v878;
      lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        v385 = 0;
        type metadata accessor for Log();
        v392 = static Log.shared.getter();
        v260 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
        v388 = &v841;
        v841 = v260;
        v842 = v261;
        v386 = 1;
        v262 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: endCallGesture mismatch - change from ", 0x38uLL, 1);
        v383 = v262._object;
        DefaultStringInterpolation.appendLiteral(_:)(v262);
        v263 = v749;
        v264 = swift_bridgeObjectRelease();
        v265 = *v263;
        v393 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v840[2] = (*(uint64_t (**)(uint64_t))((v265 & *MEMORY[0x24BEE4EA0]) + 0x768))(v264);
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v266 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v386 & 1);
        v384 = v266._object;
        DefaultStringInterpolation.appendLiteral(_:)(v266);
        swift_bridgeObjectRelease();
        v840[1] = v878;
        DefaultStringInterpolation.appendInterpolation<A>(_:)();
        v267 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v385, v386 & 1);
        v387 = v267._object;
        DefaultStringInterpolation.appendLiteral(_:)(v267);
        swift_bridgeObjectRelease();
        v390 = v841;
        v389 = v842;
        swift_bridgeObjectRetain();
        outlined destroy of DefaultStringInterpolation();
        String.init(stringInterpolation:)();
        v391 = v268;
        dispatch thunk of Log.notice(_:function:file:line:)();
        v269 = v749;
        swift_bridgeObjectRelease();
        swift_release();
        (*(void (**)(_QWORD))((*v269 & *v393) + 0x770))(v878);
      }
    }
    if (((*(uint64_t (**)(void))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x7E0))() & 1) == 1)
      v382 = 1;
    else
      v382 = 2;
    v376 = v382;
    v876 = v382;
    v270 = objc_msgSend(v756, sel_selectiveSpeechListeningConfig);
    v379 = &v875;
    v875 = v270;
    v377 = &v874;
    v874 = 0;
    v378 = type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
    v380 = lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
    v381 = dispatch thunk of static Equatable.== infix(_:_:)();
    v271 = v756;
    if ((v381 & 1) != 0)
    {
      v375 = 0;
    }
    else
    {
      v846[2] = objc_msgSend(v756, sel_selectiveSpeechListeningConfig);
      v846[1] = 3;
      v375 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    v374 = v375;

    v272 = v756;
    if ((v374 & 1) != 0)
    {
      v372 = &v847;
      v847 = v376;
      v846[3] = objc_msgSend(v756, sel_selectiveSpeechListeningConfig);
      v373 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      v373 = 0;
    }
    v371 = v373;

    if ((v371 & 1) != 0)
    {
      v360 = 0;
      type metadata accessor for Log();
      v367 = static Log.shared.getter();
      v274 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v363 = &v850;
      v850 = v274;
      v851 = v275;
      v361 = 1;
      v276 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: SelectiveSpeechListening mismatch - change from ", 0x42uLL, 1);
      v358 = v276._object;
      DefaultStringInterpolation.appendLiteral(_:)(v276);
      swift_bridgeObjectRelease();
      v849[2] = v376;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v277 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v361 & 1);
      v359 = v277._object;
      DefaultStringInterpolation.appendLiteral(_:)(v277);
      swift_bridgeObjectRelease();
      v368 = 0x1F4613000uLL;
      v849[1] = objc_msgSend(v756, (SEL)0x1F46132B4);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v278 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v360, v361 & 1);
      v362 = v278._object;
      DefaultStringInterpolation.appendLiteral(_:)(v278);
      swift_bridgeObjectRelease();
      v365 = v850;
      v364 = v851;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v366 = v279;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v280 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v281 = objc_msgSend(v756, (SEL)(v368 + 692));
      v370 = v849;
      v849[0] = v281;
      v369 = &v848;
      v848 = 1;
      lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
      v282 = == infix<A>(_:_:)();
      v273 = (*(uint64_t (**)(_QWORD))((*v280 & *MEMORY[0x24BEE4EA0]) + 0x7E8))(v282 & 1);
    }
    if (((*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x810))(v273) & 1) == 1)
      v357 = 1;
    else
      v357 = 2;
    v351 = v357;
    v873 = v357;
    v283 = objc_msgSend(v756, sel_conversationDetectConfig);
    v354 = &v872;
    v872 = v283;
    v352 = &v871;
    v871 = 0;
    v353 = type metadata accessor for CBPeerConversationDetectConfig();
    v355 = lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
    v356 = dispatch thunk of static Equatable.== infix(_:_:)();
    v284 = v756;
    if ((v356 & 1) != 0)
    {
      v350 = 0;
    }
    else
    {
      v853 = objc_msgSend(v756, sel_conversationDetectConfig);
      v852 = 3;
      v350 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    v349 = v350;

    v285 = v756;
    if ((v349 & 1) != 0)
    {
      v347 = &v855;
      v855 = v351;
      v854 = objc_msgSend(v756, sel_conversationDetectConfig);
      v348 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      v348 = 0;
    }
    v346 = v348;

    if ((v346 & 1) != 0)
    {
      v335 = 0;
      type metadata accessor for Log();
      v342 = static Log.shared.getter();
      v287 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v338 = &v858;
      v858 = v287;
      v859 = v288;
      v336 = 1;
      v289 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: ConversationDetect mismatch - change from ", 0x3CuLL, 1);
      v333 = v289._object;
      DefaultStringInterpolation.appendLiteral(_:)(v289);
      swift_bridgeObjectRelease();
      v857[2] = v351;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v290 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v336 & 1);
      v334 = v290._object;
      DefaultStringInterpolation.appendLiteral(_:)(v290);
      swift_bridgeObjectRelease();
      v343 = 0x1F4611000uLL;
      v857[1] = objc_msgSend(v756, (SEL)0x1F46118ADLL);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v291 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v335, v336 & 1);
      v337 = v291._object;
      DefaultStringInterpolation.appendLiteral(_:)(v291);
      swift_bridgeObjectRelease();
      v340 = v858;
      v339 = v859;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v341 = v292;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v293 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v294 = objc_msgSend(v756, (SEL)(v343 + 2221));
      v345 = v857;
      v857[0] = v294;
      v344 = &v856;
      v856 = 1;
      lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
      v295 = == infix<A>(_:_:)();
      v286 = (*(uint64_t (**)(_QWORD))((*v293 & *MEMORY[0x24BEE4EA0]) + 0x818))(v295 & 1);
    }
    if (((*(uint64_t (**)(uint64_t))((*v749 & *MEMORY[0x24BEE4EA0]) + 0x840))(v286) & 1) == 1)
      v332 = 1;
    else
      v332 = 2;
    v326 = v332;
    v870 = v332;
    v296 = objc_msgSend(v756, sel_adaptiveVolumeConfig);
    v329 = &v869;
    v869 = v296;
    v327 = &v868;
    v868 = 0;
    v328 = type metadata accessor for CBPeerAdaptiveVolumeConfig();
    v330 = lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
    v331 = dispatch thunk of static Equatable.== infix(_:_:)();
    v297 = v756;
    if ((v331 & 1) != 0)
    {
      v325 = 0;
    }
    else
    {
      v861 = objc_msgSend(v756, sel_adaptiveVolumeConfig);
      v860 = 3;
      v325 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    v324 = v325;

    v298 = v756;
    if ((v324 & 1) != 0)
    {
      v322 = &v863;
      v863 = v326;
      v862 = objc_msgSend(v756, sel_adaptiveVolumeConfig);
      v323 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      v323 = 0;
    }
    v321 = v323;

    if ((v321 & 1) != 0)
    {
      v310 = 0;
      type metadata accessor for Log();
      v317 = static Log.shared.getter();
      v299 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
      v313 = &v866;
      v866 = v299;
      v867 = v300;
      v311 = 1;
      v301 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: AdaptiveVolume mismatch - change from ", 0x38uLL, 1);
      v309[3] = v301._object;
      DefaultStringInterpolation.appendLiteral(_:)(v301);
      swift_bridgeObjectRelease();
      v865[2] = v326;
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v302 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" to ", 4uLL, v311 & 1);
      v309[4] = v302._object;
      DefaultStringInterpolation.appendLiteral(_:)(v302);
      swift_bridgeObjectRelease();
      v318 = 0x1F4611000uLL;
      v865[1] = objc_msgSend(v756, (SEL)0x1F4611293);
      DefaultStringInterpolation.appendInterpolation<A>(_:)();
      v303 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v310, v311 & 1);
      v312 = v303._object;
      DefaultStringInterpolation.appendLiteral(_:)(v303);
      swift_bridgeObjectRelease();
      v315 = v866;
      v314 = v867;
      swift_bridgeObjectRetain();
      outlined destroy of DefaultStringInterpolation();
      String.init(stringInterpolation:)();
      v316 = v304;
      dispatch thunk of Log.notice(_:function:file:line:)();
      v305 = v749;
      swift_bridgeObjectRelease();
      swift_release();
      v306 = objc_msgSend(v756, (SEL)(v318 + 659));
      v320 = v865;
      v865[0] = v306;
      v319 = &v864;
      v864 = 1;
      lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
      v307 = == infix<A>(_:_:)();
      (*(void (**)(_QWORD))((*v305 & *MEMORY[0x24BEE4EA0]) + 0x848))(v307 & 1);
    }
    return swift_bridgeObjectRelease();
  }
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:)()
{
  swift_bridgeObjectRetain();
}

Swift::String __swiftcall HeadphoneDevice.getModelName()()
{
  uint64_t ObjectType;
  void *v1;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String result;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  id v9;
  id v10;
  id v11;
  unsigned __int8 v12;
  void *v13;
  uint64_t v14;
  BOOL v15;
  _QWORD *v16;
  Swift::String v17;

  v15 = HeadphoneDevice.deviceDelegate.getter() == 0;
  outlined destroy of HeadphoneDeviceDelegate?();
  if (v15)
    assertionFailure(_:file:line:)();
  type metadata accessor for Log();
  static Log.shared.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deviceDelegate will call isAppleHeadphone", 0x3BuLL, 1);
  v5 = 823;
  dispatch thunk of Log.notice(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  v14 = HeadphoneDevice.deviceDelegate.getter();
  if (v14)
  {
    v13 = (void *)v14;
  }
  else
  {
    LOBYTE(v5) = 2;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  ObjectType = swift_getObjectType();
  v11 = (id)(*(uint64_t (**)(uint64_t))((*v16 & *MEMORY[0x24BEE4EA0]) + 0x210))(ObjectType);
  v12 = objc_msgSend(v13, sel_isAppleHeadphoneWithCbDevice_, v5);

  swift_unknownObjectRelease();
  if ((v12 & 1) != 0)
  {
    v9 = (id)(*(uint64_t (**)(void))((*v16 & *MEMORY[0x24BEE4EA0]) + 0x210))();
    v10 = objc_msgSend(v9, sel_productName);
    if (v10)
    {
      v7._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v7._object = v1;

      v8 = v7;
    }
    else
    {
      v8 = (Swift::String)0;
    }

    if (v8._object)
    {
      v17 = v8;
    }
    else
    {
      v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AirPods", 7uLL, 1);
      outlined destroy of String?();
    }
    v6 = v17;
  }
  else
  {
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Not Available", 0xDuLL, 1);
  }
  object = v6._object;
  countAndFlagsBits = v6._countAndFlagsBits;
  result._object = object;
  result._countAndFlagsBits = countAndFlagsBits;
  return result;
}

uint64_t implicit closure #1 in HeadphoneDevice.getModelName()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deviceDelegate should not be nil here", 0x37uLL, 1)._countAndFlagsBits;
}

Swift::Void __swiftcall HeadphoneDevice.setFindMyStatus()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  NSObject *v14;
  uint64_t v15;
  dispatch_group_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD v22[2];
  _QWORD *v23;
  int v24;
  void *v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  void *v31;
  id v32;
  dispatch_group_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  id v59;
  id v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t (*v64)(uint64_t);
  void *v65;
  uint64_t (*v66)();
  uint64_t v67;
  uint64_t aBlock;
  int v69;
  int v70;
  uint64_t (*v71)(uint64_t, void *);
  void *v72;
  void (*v73)(void *);
  uint64_t v74;
  dispatch_group_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;

  v46 = "setFindMyStatus()";
  v47 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v78 = 0;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v48 = 0;
  v49 = type metadata accessor for DispatchWorkItemFlags();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(_QWORD *)(v50 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v1);
  v52 = (char *)v22 - v51;
  v53 = type metadata accessor for DispatchQoS();
  v54 = *(_QWORD *)(v53 - 8);
  v55 = (*(_QWORD *)(v54 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v53, v2);
  v56 = (char *)v22 - v55;
  v78 = v0;
  v3 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
  v58 = v3;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 152))(9);
  v4 = v57;
  v5 = swift_release();
  v59 = (id)(*(uint64_t (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x210))(v5);
  v60 = objc_msgSend(v59, sel_btAddressData);
  if (v60)
  {
    v45 = v60;
    v40 = v60;
    v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v42 = v6;

    v43 = v41;
    v44 = v42;
  }
  else
  {
    v43 = 0;
    v44 = 0xF000000000000000;
  }
  v38 = v44;
  v39 = v43;
  if ((v44 & 0xF000000000000000) == 0xF000000000000000)
  {

    type metadata accessor for Log();
    v22[1] = static Log.shared.getter();
    v22[0] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Unable to set FindMyNetwork Status, Invalid BT Address", 0x48uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v36 = v39;
    v37 = v38;
    v7 = v57;
    v35 = v38;
    v34 = v39;
    v76 = v39;
    v77 = v38;

    v33 = dispatch_group_create();
    v75 = v33;
    dispatch_group_enter(v33);
    v8 = *v7;
    v23 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v9 = (void *)(*(uint64_t (**)(void))((v8 & *MEMORY[0x24BEE4EA0]) + 0x2E8))();
    v10 = v57;
    v27 = v9;
    swift_getObjectType();
    outlined copy of Data._Representation(v34, v35);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v11 = outlined consume of Data._Representation(v34, v35);
    v24 = (*(uint64_t (**)(uint64_t))((*v10 & *v23) + 0x2B8))(v11);
    v12 = v57;
    v13 = v57;
    v14 = v33;
    v28 = 7;
    v15 = swift_allocObject();
    v16 = v33;
    *(_QWORD *)(v15 + 16) = v57;
    *(_QWORD *)(v15 + 24) = v16;
    v73 = partial apply for closure #1 in HeadphoneDevice.setFindMyStatus();
    v74 = v15;
    v29 = MEMORY[0x24BDAC760];
    aBlock = MEMORY[0x24BDAC760];
    v30 = 1107296256;
    v69 = 1107296256;
    v70 = 0;
    v71 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    v72 = &block_descriptor;
    v25 = _Block_copy(&aBlock);
    swift_release();

    objc_msgSend(v27, sel_setFindMyNetworkStatusForMACAddress_status_completion_, isa, v24 & 1, v25);
    _Block_release(v25);

    swift_unknownObjectRelease();
    type metadata accessor for OS_dispatch_queue();
    v32 = (id)static OS_dispatch_queue.main.getter();
    v17 = v57;
    v18 = v57;
    v19 = swift_allocObject();
    v20 = v29;
    v21 = v30;
    *(_QWORD *)(v19 + 16) = v57;
    v66 = partial apply for closure #2 in HeadphoneDevice.setFindMyStatus();
    v67 = v19;
    v61 = v20;
    v62 = v21;
    v63 = 0;
    v64 = thunk for @escaping @callee_guaranteed () -> ();
    v65 = &block_descriptor_206;
    v31 = _Block_copy(&v61);
    default argument 0 of OS_dispatch_group.notify(qos:flags:queue:execute:)();
    default argument 1 of OS_dispatch_group.notify(qos:flags:queue:execute:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v52, v49);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v53);
    _Block_release(v31);
    swift_release();

    outlined consume of Data._Representation(v34, v35);
  }
}

void closure #1 in HeadphoneDevice.setFindMyStatus()(void *a1, _QWORD *a2, NSObject *a3)
{
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  Swift::String v17;
  void (*v18)(_BYTE *, _QWORD);
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE v27[40];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSObject *v36;
  _QWORD *v37;
  void *v38;

  v38 = a1;
  v37 = a2;
  v36 = a3;
  v35 = a1;
  if (a1)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    v33 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v34 = v13;
    v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Unable to set FindMyNetwork Status. Error code: ", 0x42uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = a1;
    v32 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    v30 = String.init<A>(describing:)();
    v31 = v16;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v17 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    v28 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v29 = v3;
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: FindMyNetwork set to ", 0x27uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    v5 = swift_bridgeObjectRelease();
    v23 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v27[39] = (*(uint64_t (**)(uint64_t))((*a2 & *MEMORY[0x24BEE4EA0]) + 0x2B8))(v5) & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.notice(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    (*(void (**)(uint64_t))((*a2 & *v23) + 0x308))(1);
    v22 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    v7 = swift_retain();
    if (((*(uint64_t (**)(uint64_t))((*a2 & *v23) + 0x2B8))(v7) & 1) != 0)
    {
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
      object = v10._object;
      countAndFlagsBits = v10._countAndFlagsBits;
    }
    else
    {
      v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
      object = v11._object;
      countAndFlagsBits = v11._countAndFlagsBits;
    }
    v20 = countAndFlagsBits;
    v21 = object;
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v22 + 112))(v27);
    *(_QWORD *)(v12 + 224) = v20;
    *(_QWORD *)(v12 + 232) = v21;
    swift_bridgeObjectRelease();
    v18(v27, 0);
    swift_release();
    v19 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    swift_retain();
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 152))(9);
    swift_release();
  }
  dispatch_group_leave(a3);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ()(uint64_t a1, void *a2)
{
  id v2;
  void *v4;
  void (*v5)(void);

  v5 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v2 = a2;
  if (a2)
    v4 = a2;
  else
    v4 = 0;
  v5();

  return swift_release();
}

uint64_t closure #2 in HeadphoneDevice.setFindMyStatus()(_QWORD *a1)
{
  _QWORD *v2;

  if (((*(uint64_t (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x300))() & 1) == 0)
    (*(void (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0xAA8))();
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(_QWORD))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x320))(0);
  return (*(uint64_t (**)(_QWORD))((*a1 & *v2) + 0x308))(0);
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t default argument 0 of OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 1 of OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Void __swiftcall HeadphoneDevice.resetToggle()()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  _QWORD *v3;

  type metadata accessor for Log();
  static Log.shared.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Reset FindMyNetwork toggle", 0x2CuLL, 1);
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v0 = (*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x24BEE4EA0]) + 0x2A8))(1);
  v1 = (*(uint64_t (**)(uint64_t))((*v2 & *v3) + 0x2B8))(v0);
  (*(void (**)(_QWORD))((*v2 & *v3) + 0x2C0))((v1 ^ 1) & 1);
}

void HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  dispatch_group_t v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  _QWORD v13[4];
  unint64_t v14;
  unint64_t v15;
  dispatch_group_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  Class isa;
  id v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  char *v27;
  int v28;
  char v29;
  uint64_t aBlock;
  int v31;
  int v32;
  uint64_t (*v33)(uint64_t, char, void *);
  void *v34;
  void (*v35)(char, void *);
  uint64_t v36;
  dispatch_group_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v18 = a1;
  v17 = a2;
  v13[2] = "fetchFindMyNetworkStatus(btAddr:)";
  v13[3] = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v39 = 0;
  v40 = 0;
  v38 = 0;
  v37 = 0;
  v29 = 0;
  v25 = type metadata accessor for DispatchTime();
  v23 = *(_QWORD *)(v25 - 8);
  v14 = (*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v18, v17);
  v24 = (char *)v13 - v14;
  v15 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](v3, v5);
  v27 = (char *)v13 - v15;
  v39 = v6;
  v40 = v7;
  v38 = v2;
  v16 = dispatch_group_create();
  v37 = v16;
  dispatch_group_enter(v16);
  v8 = (void *)(*(uint64_t (**)(void))((*v2 & *MEMORY[0x24BEE4EA0]) + 0x2E8))();
  v9 = v16;
  v22 = v8;
  swift_getObjectType();
  outlined copy of Data._Representation(v18, v17);
  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v18, v17);
  v10 = v19;
  v11 = v9;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v19;
  *(_QWORD *)(v12 + 24) = v9;
  v35 = partial apply for closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:);
  v36 = v12;
  aBlock = MEMORY[0x24BDAC760];
  v31 = 1107296256;
  v32 = 0;
  v33 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v34 = &block_descriptor_212;
  v20 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v22, sel_fetchFindMyNetworkStatusForMACAddress_completion_, isa, v20);
  _Block_release(v20);

  swift_unknownObjectRelease();
  static DispatchTime.now()();
  MEMORY[0x24263AC78](v24, 0.02);
  v26 = *(void (**)(char *, uint64_t))(v23 + 8);
  v26(v24, v25);
  v28 = MEMORY[0x24263AFB4](v27);
  v26(v27, v25);
  v29 = v28 & 1;
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    type metadata accessor for Log();
    v13[1] = static Log.shared.getter();
    v13[0] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: fetchFindMyNetworkStatus timedout", 0x33uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }

}

void closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(char a1, void *a2, _QWORD *a3, NSObject *a4)
{
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  _QWORD *v10;

  if (a2)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: FindMy Status: Fetch Completed: Error code:", 0x3DuLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v7);
    swift_bridgeObjectRelease();
    v8 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(uint64_t))((*a3 & *MEMORY[0x24BEE4EA0]) + 0x290))(1);
    (*(void (**)(_QWORD))((*a3 & *v10) + 0x2C0))(a1 & 1);
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: FindMy Status enabled: ", 0x29uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    v5 = swift_bridgeObjectRelease();
    (*(uint64_t (**)(uint64_t))((*a3 & *v10) + 0x2B8))(v5);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.notice(_:function:file:line:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  dispatch_group_leave(a4);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ()(uint64_t a1, char a2, void *a3)
{
  id v3;
  void *v5;
  void (*v7)(_QWORD);

  v7 = *(void (**)(_QWORD))(a1 + 32);
  swift_retain();
  v3 = a3;
  if (a3)
    v5 = a3;
  else
    v5 = 0;
  v7(a2 & 1);

  return swift_release();
}

Swift::Void __swiftcall HeadphoneDevice.setCaseSilentMode()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  void *v28;
  uint64_t aBlock;
  int v30;
  int v31;
  uint64_t (*v32)(uint64_t);
  void *v33;
  void (*v34)();
  uint64_t v35;
  char v36;
  _QWORD *v37;

  v13 = "Fatal error";
  v14 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v15 = "HeadphoneManager/HeadphoneDevice.swift";
  v37 = 0;
  v36 = 0;
  v16 = 0;
  v17 = type metadata accessor for DispatchWorkItemFlags();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v1);
  v20 = (char *)&v9 - v19;
  v21 = type metadata accessor for DispatchQoS();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v21, v2);
  v24 = (char *)&v9 - v23;
  v37 = v0;
  v3 = *v0;
  v26 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v4 = (*(uint64_t (**)(void))((v3 & *MEMORY[0x24BEE4EA0]) + 0x6D8))();
  v27 = v4 ^ 1;
  v36 = (v4 ^ 1) & 1;
  v28 = (void *)(*(uint64_t (**)(void))((*v25 & *v26) + 0x708))();
  if (v28)
  {
    v12 = v28;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v11 = objc_msgSend(v12, sel_dispatchQueue, v12);

  v5 = v25;
  v6 = v25;
  v7 = swift_allocObject();
  v8 = v27;
  *(_QWORD *)(v7 + 16) = v25;
  *(_BYTE *)(v7 + 24) = v8 & 1;
  v34 = partial apply for closure #1 in HeadphoneDevice.setCaseSilentMode();
  v35 = v7;
  aBlock = MEMORY[0x24BDAC760];
  v30 = 1107296256;
  v31 = 0;
  v32 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v33 = &block_descriptor_218;
  v10 = _Block_copy(&aBlock);
  default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  MEMORY[0x24263AFF0](0, v24, v20, v10);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  _Block_release(v10);
  swift_release();

}

void closure #1 in HeadphoneDevice.setCaseSilentMode()(_QWORD *a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  void *v6;
  uint64_t v9;
  uint64_t aBlock;
  int v11;
  int v12;
  uint64_t (*v13)(uint64_t, void *);
  void *v14;
  uint64_t (*v15)(void *);
  uint64_t v16;
  char v17;
  _QWORD *v18;

  v18 = a1;
  v17 = a2 & 1;
  v9 = (*(uint64_t (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x708))();
  if (v9)
  {
    v6 = (void *)v9;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v2 = a1;
  v3 = a1;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  v15 = partial apply for closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode();
  v16 = v4;
  aBlock = MEMORY[0x24BDAC760];
  v11 = 1107296256;
  v12 = 0;
  v13 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v14 = &block_descriptor_249;
  v5 = _Block_copy(&aBlock);
  swift_release();

  objc_msgSend(v6, sel_setSilentMode_completionHandler_, a2 & 1, v5);
  _Block_release(v5);

}

uint64_t closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode()(void *a1, _QWORD *a2)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  id v14;
  uint64_t v15;
  Swift::String v16;
  uint64_t v17;
  int v18;
  _QWORD *v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  _BYTE v29[40];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;
  void *v39;

  v39 = a1;
  v38 = a2;
  v37 = a1;
  if (a1)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    v35 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v36 = v12;
    v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Unable to set CaseSound. Error code: ", 0x37uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v13);
    swift_bridgeObjectRelease();
    v14 = a1;
    v34 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    v32 = String.init<A>(describing:)();
    v33 = v15;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    v20 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(uint64_t))((*a2 & *MEMORY[0x24BEE4EA0]) + 0x728))(1);
    static Log.shared.getter();
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Reset case sound toggle.", 0x2AuLL, 1);
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    v17 = swift_release();
    v18 = (*(uint64_t (**)(uint64_t))((*a2 & *v20) + 0x6D8))(v17);
    (*(void (**)(_QWORD))((*a2 & *v20) + 0x6E0))((v18 ^ 1) & 1);
  }
  else
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    v30 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v31 = v2;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: CaseSound set to ", 0x23uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    v4 = swift_bridgeObjectRelease();
    v26 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v29[39] = (*(uint64_t (**)(uint64_t))((*a2 & *MEMORY[0x24BEE4EA0]) + 0x6D8))(v4) & 1;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.notice(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    v25 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    v6 = swift_retain();
    if (((*(uint64_t (**)(uint64_t))((*a2 & *v26) + 0x6D8))(v6) & 1) != 0)
    {
      v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("On", 2uLL, 1);
      object = v9._object;
      countAndFlagsBits = v9._countAndFlagsBits;
    }
    else
    {
      v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Off", 3uLL, 1);
      object = v10._object;
      countAndFlagsBits = v10._countAndFlagsBits;
    }
    v23 = countAndFlagsBits;
    v24 = object;
    v21 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v25 + 112))(v29);
    *(_QWORD *)(v11 + 8) = v23;
    *(_QWORD *)(v11 + 16) = v24;
    swift_bridgeObjectRelease();
    v21(v29, 0);
    swift_release();
    v22 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
    swift_retain();
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 152))(16);
    swift_release();
  }
  return (*(uint64_t (**)(_QWORD))((*a2 & *MEMORY[0x24BEE4EA0]) + 0x740))(0);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1;
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  v1 = swift_retain();
  v3(v1);
  return swift_release();
}

uint64_t default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for DispatchWorkItemFlags();
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

Swift::Bool __swiftcall HeadphoneDevice.isiCloudSignedIn()()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;
  id v6;
  id v7;
  id v8[2];

  v8[1] = 0;
  v7 = objc_msgSend((id)objc_opt_self(), sel_defaultStore);
  if (v7)
  {
    v6 = v7;
  }
  else
  {
    LOBYTE(v1) = 2;
    v2 = 908;
    LODWORD(v3) = 0;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v5 = objc_msgSend(v6, sel_aa_primaryAppleAccount, v1, v2, v3);

  v8[0] = v5;
  outlined destroy of ACAccount?(v8);
  if (v5)
    return 1;
  type metadata accessor for Log();
  static Log.shared.getter();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: iCloud Account is not signed in", 0x31uLL, 1);
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  return 0;
}

Swift::Void __swiftcall HeadphoneDevice.setPressHoldDefaults()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  char v6;
  _QWORD *v7;
  char v8;
  char v9;
  _QWORD *v10;

  if (((*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x630))() & 1) != 0)
  {
    (*(void (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
    type metadata accessor for CBPeerUIGestureMode();
    lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
    v9 = == infix<A>(_:_:)();
    v1 = v10;
    if ((v9 & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      (*(void (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
      v8 = == infix<A>(_:_:)();
    }

    if ((v8 & 1) != 0)
    {
      v7 = (_QWORD *)MEMORY[0x24BEE4EA0];
      (*(void (**)(uint64_t))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3B0))(7);
      (*(void (**)(uint64_t))((*v10 & *v7) + 0x3E0))(6);
    }
  }
  else
  {
    (*(void (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
    type metadata accessor for CBPeerUIGestureMode();
    lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
    v6 = == infix<A>(_:_:)();
    v2 = v10;
    if ((v6 & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      (*(void (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
      v5 = == infix<A>(_:_:)();
    }

    if ((v5 & 1) != 0)
    {
      if (((*(uint64_t (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0xB48))() & 1) != 0)
      {
        v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
        (*(void (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3B0))();
        (*(void (**)(uint64_t))((*v10 & *v4) + 0x3E0))(1);
      }
      else
      {
        v3 = (_QWORD *)MEMORY[0x24BEE4EA0];
        (*(void (**)(void))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x3B0))();
        (*(void (**)(uint64_t))((*v10 & *v3) + 0x3E0))(5);
      }
    }
  }
}

Swift::Void __swiftcall HeadphoneDevice.isSpatialProfileRecordPresent()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  dispatch_group_t v4;
  id v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD v9[6];
  unint64_t v10;
  unint64_t v11;
  dispatch_group_t v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  int v21;
  char v22;
  uint64_t aBlock;
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, void *, void *);
  void *v27;
  void (*v28)(uint64_t, void *);
  uint64_t v29;
  dispatch_group_t v30;
  id v31;
  uint64_t v32;

  v9[3] = "isSpatialProfileRecordPresent()";
  v9[4] = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v22 = 0;
  v9[5] = 0;
  v18 = type metadata accessor for DispatchTime();
  v16 = *(_QWORD *)(v18 - 8);
  v10 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](0, v1);
  v17 = (char *)v9 - v10;
  v11 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, (char *)v9 - v10);
  v20 = (char *)v9 - v11;
  v32 = v0;
  type metadata accessor for BTCloudServicesClient();
  v14 = BTCloudServicesClient.__allocating_init()();
  v31 = v14;
  v4 = dispatch_group_create();
  v12 = v4;
  v30 = v4;
  dispatch_group_enter(v4);
  v5 = v13;
  v6 = v13;
  v7 = v4;
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v13;
  *(_QWORD *)(v8 + 24) = v4;
  v28 = partial apply for closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent();
  v29 = v8;
  aBlock = MEMORY[0x24BDAC760];
  v24 = 1107296256;
  v25 = 0;
  v26 = thunk for @escaping @callee_guaranteed (@guaranteed BTCloudSoundProfileRecord?, @guaranteed Error?) -> ();
  v27 = &block_descriptor_224;
  v15 = _Block_copy(&aBlock);
  swift_release();

  objc_msgSend(v14, sel_fetchSoundProfileRecordWithCompletion_, v15);
  _Block_release(v15);
  static DispatchTime.now()();
  MEMORY[0x24263AC78](v17, 1.0);
  v19 = *(void (**)(char *, uint64_t))(v16 + 8);
  v19(v17, v18);
  v21 = MEMORY[0x24263AFB4](v20);
  v19(v20, v18);
  v22 = v21 & 1;
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    type metadata accessor for Log();
    v9[2] = static Log.shared.getter();
    v9[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: fetchSoundProfileRecord timedout", 0x32uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }

}

id BTCloudServicesClient.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc BTCloudServicesClient.init()();
}

void closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent()(uint64_t a1, void *a2, _QWORD *a3, NSObject *a4)
{
  Swift::String v4;
  id v5;
  Swift::String v6;
  BOOL v7;

  if (a2)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: fetchSoundProfileRecord failed with Error code:", 0x41uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    v5 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    v7 = a1 == 0;
    type metadata accessor for Log();
    static Log.shared.getter();
    if (v7)
    {
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: soundProfileRecord does not exist", 0x33uLL, 1);
      dispatch thunk of Log.error(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: soundProfileRecord does exist", 0x2FuLL, 1);
      dispatch thunk of Log.notice(_:function:file:line:)();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(uint64_t))((*a3 & *MEMORY[0x24BEE4EA0]) + 0x680))(1);
    }
  }
  dispatch_group_leave(a4);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed BTCloudSoundProfileRecord?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  id v3;
  id v4;
  void *v6;
  void (*v7)(void *);

  v7 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v3 = a2;
  v4 = a3;
  if (a3)
    v6 = a3;
  else
    v6 = 0;
  v7(a2);

  return swift_release();
}

Swift::Void __swiftcall HeadphoneDevice.removeSpatialProfileRecord()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD);
  dispatch_group_t v5;
  NSObject *v6;
  uint64_t v7;
  _QWORD v8[4];
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  dispatch_group_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  char *v19;
  int v20;
  int v21;
  char v22;
  uint64_t aBlock;
  int v24;
  int v25;
  uint64_t (*v26)(uint64_t, void *);
  void *v27;
  void (*v28)(void *);
  uint64_t v29;
  dispatch_group_t v30;
  id v31;
  _QWORD *v32;

  v8[2] = "removeSpatialProfileRecord()";
  v8[3] = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v22 = 0;
  v11 = 0;
  v17 = type metadata accessor for DispatchTime();
  v15 = *(_QWORD *)(v17 - 8);
  v9 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v17, v1);
  v16 = (char *)v8 - v9;
  v10 = (v2 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v8 - v9, v3);
  v19 = (char *)v8 - v10;
  v32 = v0;
  v4 = *(void (**)(_QWORD))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x680);
  v21 = 1;
  v4(0);
  type metadata accessor for BTCloudServicesClient();
  v13 = BTCloudServicesClient.__allocating_init()();
  v31 = v13;
  v5 = dispatch_group_create();
  v12 = v5;
  v30 = v5;
  dispatch_group_enter(v5);
  v6 = v5;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v5;
  v28 = partial apply for closure #1 in HeadphoneDevice.removeSpatialProfileRecord();
  v29 = v7;
  aBlock = MEMORY[0x24BDAC760];
  v24 = 1107296256;
  v25 = 0;
  v26 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v27 = &block_descriptor_230;
  v14 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v13, sel_deleteSoundProfileRecordWithCompletion_, v14);
  _Block_release(v14);
  static DispatchTime.now()();
  MEMORY[0x24263AC78](v16, 1.0);
  v18 = *(void (**)(char *, uint64_t))(v15 + 8);
  v18(v16, v17);
  v20 = MEMORY[0x24263AFB4](v19);
  v18(v19, v17);
  v22 = v20 & 1;
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    type metadata accessor for Log();
    v8[1] = static Log.shared.getter();
    v8[0] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deleteSoundProfileRecord timedout", 0x33uLL, 1)._object;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
  }

}

void closure #1 in HeadphoneDevice.removeSpatialProfileRecord()(void *a1, NSObject *a2)
{
  Swift::String v2;
  id v3;
  Swift::String v4;
  BOOL v5;

  v5 = a1 != 0;
  type metadata accessor for Log();
  static Log.shared.getter();
  if (v5)
  {
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: deleteSoundProfileRecord failed with Error code:", 0x42uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v2);
    swift_bridgeObjectRelease();
    v3 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    dispatch thunk of Log.error(_:function:file:line:)();
  }
  else
  {
    String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: Sound Profile Reset Completed", 0x2FuLL, 1);
    dispatch thunk of Log.notice(_:function:file:line:)();
  }
  swift_bridgeObjectRelease();
  swift_release();
  dispatch_group_leave(a2);
}

Swift::Void __swiftcall HeadphoneDevice.getCaseSilentMode()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  Builtin::Word v25;
  void *object;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  Builtin::Word v30;
  int v31;
  void *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  id v68;
  id v69;
  uint64_t aBlock;
  int v71;
  int v72;
  uint64_t (*v73)(uint64_t);
  void *v74;
  void (*v75)();
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD v79[2];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v52 = "Fatal error";
  v53 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v54 = "HeadphoneManager/HeadphoneDevice.swift";
  v55 = "getCaseSilentMode()";
  v56 = "/Library/Caches/com.apple.xbs/Sources/ConnectedAudio/HeadphoneSettings/HeadphoneManager/HeadphoneDevice.swift";
  v82 = 0;
  v77 = 0;
  v78 = 0;
  v61 = 0;
  v57 = type metadata accessor for DispatchWorkItemFlags();
  v58 = *(_QWORD *)(v57 - 8);
  v59 = (*(_QWORD *)(v58 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v1);
  v60 = (char *)&v17 - v59;
  v62 = type metadata accessor for DispatchQoS();
  v63 = *(_QWORD *)(v62 - 8);
  v64 = (*(_QWORD *)(v63 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v61, v2);
  v65 = (char *)&v17 - v64;
  v82 = v0;
  type metadata accessor for BTAirPodsControlServiceClient();
  v3 = BTAirPodsControlServiceClient.__allocating_init()();
  v4 = *(_QWORD *)v66;
  v67 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (*(uint64_t (**)(id))((v4 & *MEMORY[0x24BEE4EA0]) + 0x710))(v3);
  v68 = (id)(*(uint64_t (**)(uint64_t))((*(_QWORD *)v66 & *v67) + 0x210))(v5);
  v69 = objc_msgSend(v68, sel_serialNumber);
  if (v69)
  {
    v51 = v69;
    v46 = v69;
    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v48 = v6;

    v49 = v47;
    v50 = v48;
  }
  else
  {
    v49 = 0;
    v50 = 0;
  }
  v44 = v50;
  v45 = v49;
  if (!v50)
    goto LABEL_8;
  v42 = v45;
  v43 = v44;
  v7 = v66;
  v39 = v44;
  v40 = v45;
  v77 = v45;
  v78 = v44;

  v41 = (void *)(*(uint64_t (**)(void))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x708))();
  if (!v41)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_8:

    v30 = 0;
    type metadata accessor for Log();
    v37 = static Log.shared.getter();
    v25 = 52;
    v8 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v33 = &v80;
    v80 = v8;
    v81 = v9;
    v31 = 1;
    v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneSettings: Invalid serial number for device ", v25, 1);
    object = v10._object;
    DefaultStringInterpolation.appendLiteral(_:)(v10);
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)&v66[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
    v28 = *(_QWORD *)&v66[OBJC_IVAR___HPMHeadphoneDevice_btAddress + 8];
    swift_bridgeObjectRetain();
    v29 = v79;
    v79[0] = v27;
    v79[1] = v28;
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v30, v31 & 1);
    v32 = v11._object;
    DefaultStringInterpolation.appendLiteral(_:)(v11);
    swift_bridgeObjectRelease();
    v35 = v80;
    v34 = v81;
    swift_bridgeObjectRetain();
    outlined destroy of DefaultStringInterpolation();
    String.init(stringInterpolation:)();
    v36 = v12;
    dispatch thunk of Log.error(_:function:file:line:)();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  v38 = v41;
  v13 = v66;
  v23 = v41;
  swift_bridgeObjectRetain();
  v22 = (id)MEMORY[0x24263ADA4](v40, v39);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setDeviceSN_, v22);

  v14 = swift_bridgeObjectRelease();
  v24 = (void *)(*(uint64_t (**)(uint64_t))((*v13 & *MEMORY[0x24BEE4EA0]) + 0x708))(v14);
  if (v24)
  {
    v21 = v24;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v18 = v21;
  v20 = objc_msgSend(v21, sel_dispatchQueue);

  v15 = v66;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v66;
  v75 = partial apply for closure #1 in HeadphoneDevice.getCaseSilentMode();
  v76 = v16;
  aBlock = MEMORY[0x24BDAC760];
  v71 = 1107296256;
  v72 = 0;
  v73 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  v74 = &block_descriptor_236;
  v19 = _Block_copy(&aBlock);
  default argument 1 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  default argument 2 of OS_dispatch_queue.async(group:qos:flags:execute:)();
  MEMORY[0x24263AFF0](0, v65, v60, v19);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v60, v57);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v62);
  _Block_release(v19);
  swift_release();

}

id BTAirPodsControlServiceClient.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc BTAirPodsControlServiceClient.init()();
}

void closure #1 in HeadphoneDevice.getCaseSilentMode()(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  uint64_t v6;
  uint64_t aBlock;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t, char, void *);
  void *v11;
  uint64_t (*v12)(char, void *);
  uint64_t v13;
  _QWORD *v14;

  v14 = a1;
  v6 = (*(uint64_t (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x708))();
  if (v6)
  {
    v4 = (void *)v6;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v1 = a1;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  v12 = partial apply for closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode();
  v13 = v2;
  aBlock = MEMORY[0x24BDAC760];
  v8 = 1107296256;
  v9 = 0;
  v10 = thunk for @escaping @callee_guaranteed (@unowned Bool, @guaranteed Error?) -> ();
  v11 = &block_descriptor_243;
  v3 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v4, sel_getSilentModeWithCompletionHandler_, v3);
  _Block_release(v3);

}

uint64_t closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode()(int a1, void *a2, _QWORD *a3)
{
  Swift::String v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v7;
  Swift::String v9;
  id v10;
  Swift::String v11;
  _QWORD *v12;

  if (a2)
  {
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: CaseSound Status: Fetch Completed: Error code:", 0x40uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v9);
    swift_bridgeObjectRelease();
    v10 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error?);
    String.init<A>(describing:)();
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    outlined destroy of String();
    v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
    object = v11._object;
    countAndFlagsBits = v11._countAndFlagsBits;
  }
  else
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4EA0];
    (*(void (**)(uint64_t))((*a3 & *MEMORY[0x24BEE4EA0]) + 0x6B0))(1);
    (*(void (**)(_QWORD))((*a3 & *v12) + 0x6E0))((a1 ^ 1) & 1);
    type metadata accessor for Log();
    static Log.shared.getter();
    DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneManager: CaseSound enabled: ", 0x25uLL, 1);
    DefaultStringInterpolation.appendLiteral(_:)(v3);
    v4 = swift_bridgeObjectRelease();
    (*(uint64_t (**)(uint64_t))((*a3 & *v12) + 0x6D8))(v4);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
    object = v7._object;
    countAndFlagsBits = v7._countAndFlagsBits;
  }
  DefaultStringInterpolation.appendLiteral(_:)(*(Swift::String *)&countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Void __swiftcall HeadphoneDevice.populateSerialNumbers()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *, _QWORD);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  void (*v16)(char *, _QWORD);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  id v31;
  char v32[32];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[32];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[32];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v48 = 0;
  v49 = 0;
  v42 = 0;
  v43 = 0;
  v36 = 0;
  v37 = 0;
  v50 = v0;
  v30 = (void *)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x210))();
  v31 = objc_msgSend(v30, sel_serialNumber);
  if (v31)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v26 = v1;

    v27 = v25;
    v28 = v26;
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  if (v28)
  {
    v36 = v27;
    v37 = v28;

    SerialNumberType.rawValue.getter();
    v23 = v2;
    swift_bridgeObjectRetain();
    v34 = v27;
    v35 = v28;
    v33 = v23;
    v24 = (void (*)(char *, _QWORD))(*(uint64_t (**)(void))((*v29 & *MEMORY[0x24BEE4EA0]) + 0x7D8))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : String]);
    Dictionary.subscript.setter();
    v24(v32, 0);
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v21 = (id)(*(uint64_t (**)(void))((*v29 & *MEMORY[0x24BEE4EA0]) + 0x210))();
  v22 = objc_msgSend(v21, sel_serialNumberLeft);
  if (v22)
  {
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v3;

    v19 = v17;
    v20 = v18;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  if (v20)
  {
    v42 = v19;
    v43 = v20;

    SerialNumberType.rawValue.getter();
    v15 = v4;
    swift_bridgeObjectRetain();
    v40 = v19;
    v41 = v20;
    v39 = v15;
    v16 = (void (*)(char *, _QWORD))(*(uint64_t (**)(void))((*v29 & *MEMORY[0x24BEE4EA0]) + 0x7D8))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : String]);
    Dictionary.subscript.setter();
    v16(v38, 0);
    swift_bridgeObjectRelease();
  }
  else
  {

  }
  v13 = (id)(*(uint64_t (**)(void))((*v29 & *MEMORY[0x24BEE4EA0]) + 0x210))();
  v14 = objc_msgSend(v13, sel_serialNumberRight);
  if (v14)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v5;

    v11 = v9;
    v12 = v10;
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  if (v12)
  {
    v48 = v11;
    v49 = v12;

    SerialNumberType.rawValue.getter();
    v7 = v6;
    swift_bridgeObjectRetain();
    v46 = v11;
    v47 = v12;
    v45 = v7;
    v8 = (void (*)(char *, _QWORD))(*(uint64_t (**)(void))((*v29 & *MEMORY[0x24BEE4EA0]) + 0x7D8))();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int : String]);
    Dictionary.subscript.setter();
    v8(v44, 0);
    swift_bridgeObjectRelease();
  }
  else
  {

  }
}

Swift::Bool __swiftcall HeadphoneDevice.validatePressHoldCombination()()
{
  _QWORD *v0;
  Swift::Bool result;
  _BOOL8 v5;
  _BOOL8 v6;
  _BOOL8 v7;
  _BOOL8 v8;
  _BOOL8 v9;
  _BOOL8 v10;
  _QWORD *v11;

  v10 = ((*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x480))() & 1) != 0;
  result = (*(uint64_t (**)(void))((*v11 & *MEMORY[0x24BEE4EA0]) + 0x420))();
  v9 = result;
  v8 = v10 + v9;
  if (__OFADD__(v10, v9))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  result = (*(uint64_t (**)(void))((*v11 & *MEMORY[0x24BEE4EA0]) + 0x450))();
  v7 = result;
  v6 = v8 + v7;
  if (__OFADD__(v8, v7))
    goto LABEL_15;
  result = (*(uint64_t (**)(void))((*v11 & *MEMORY[0x24BEE4EA0]) + 0x4B0))();
  v5 = result;
  if (!__OFADD__(v6, v5))
    return v6 + v5 >= 2;
LABEL_16:
  __break(1u);
  return result;
}

Swift::Bool __swiftcall HeadphoneDevice.shouldShowFindMyNetworkAlert()()
{
  _QWORD *v0;
  _QWORD *v1;
  id v3;
  char v4;
  char v5;
  _QWORD *v6;
  BOOL v7;

  v7 = ((*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x288))() & 1) != 0;
  v1 = v6;
  if (v7)
  {
    v5 = 0;
  }
  else
  {
    v3 = (id)(*(uint64_t (**)(_QWORD *))((*v6 & *MEMORY[0x24BEE4EA0]) + 0x210))(v1);
    v4 = checkIsFindMyNetworkSupported(cbDevice:)(v3);

    v5 = v4;
  }

  return (v5 & 1) != 0;
}

uint64_t HeadphoneDevice.accessorySettingFeatureBitMask.getter()
{
  uint64_t v0;
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_accessorySettingFeatureBitMask);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.accessorySettingFeatureBitMask.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;

  v3 = (_DWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_accessorySettingFeatureBitMask);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.accessorySettingFeatureBitMask : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xB00))(v2);

}

void key path setter for HeadphoneDevice.accessorySettingFeatureBitMask : HeadphoneDevice(unsigned int *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xB08))(v4);

}

uint64_t (*HeadphoneDevice.accessorySettingFeatureBitMask.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.accessorySettingFeatureBitMask.modify;
}

uint64_t HeadphoneDevice.accessorySettingFeatureBitMask.modify()
{
  return swift_endAccess();
}

uint64_t HeadphoneDevice.deviceColor.getter()
{
  uint64_t v0;
  unsigned int *v2;
  unsigned int v3;

  v2 = (unsigned int *)(v0 + OBJC_IVAR___HPMHeadphoneDevice_deviceColor);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDevice.deviceColor.setter(int a1)
{
  uint64_t v1;
  _DWORD *v3;

  v3 = (_DWORD *)(v1 + OBJC_IVAR___HPMHeadphoneDevice_deviceColor);
  swift_beginAccess();
  *v3 = a1;
  return swift_endAccess();
}

void key path getter for HeadphoneDevice.deviceColor : HeadphoneDevice(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xB18))(v2);

}

void key path setter for HeadphoneDevice.deviceColor : HeadphoneDevice(unsigned int *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xB20))(v4);

}

uint64_t (*HeadphoneDevice.deviceColor.modify())()
{
  swift_beginAccess();
  return HeadphoneDevice.deviceColor.modify;
}

uint64_t HeadphoneDevice.deviceColor.modify()
{
  return swift_endAccess();
}

Swift::Bool __swiftcall HeadphoneDevice.isServiceSupported(_:)(Swift::UInt32 a1)
{
  return 0;
}

BOOL HeadphoneDevice.forceShowBobble.getter()
{
  uint64_t countAndFlagsBits;
  uint64_t v1;
  uint64_t v2;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  Boolean AppBooleanValue;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  v4 = (__CFString *)MEMORY[0x24263ADA4](countAndFlagsBits);
  CFPreferencesAppSynchronize(v4);

  swift_bridgeObjectRelease();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("forceShowBobble", 0xFuLL, 1)._countAndFlagsBits;
  v6 = (__CFString *)MEMORY[0x24263ADA4](v1);
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  v5 = (__CFString *)MEMORY[0x24263ADA4](v2);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v6, v5, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AppBooleanValue != 0;
}

BOOL HeadphoneDevice.forceShowAdaptiveAudio.getter()
{
  uint64_t countAndFlagsBits;
  uint64_t v1;
  uint64_t v2;
  __CFString *v4;
  __CFString *v5;
  __CFString *v6;
  Boolean AppBooleanValue;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  v4 = (__CFString *)MEMORY[0x24263ADA4](countAndFlagsBits);
  CFPreferencesAppSynchronize(v4);

  swift_bridgeObjectRelease();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("forceShowAdaptiveAudio", 0x16uLL, 1)._countAndFlagsBits;
  v6 = (__CFString *)MEMORY[0x24263ADA4](v1);
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.ConnectedAudio", 0x18uLL, 1)._countAndFlagsBits;
  v5 = (__CFString *)MEMORY[0x24263ADA4](v2);
  AppBooleanValue = CFPreferencesGetAppBooleanValue(v6, v5, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return AppBooleanValue != 0;
}

Swift::Bool __swiftcall HeadphoneDevice.pressHoldSupportsSiriOnly()()
{
  _QWORD *v0;
  _QWORD *v1;
  int v3;
  _QWORD *v4;
  char v5;

  v5 = (*(uint64_t (**)(uint64_t))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA70))(2);
  v1 = v4;
  if ((v5 & 1) != 0)
    v3 = (*(uint64_t (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0xA70))(1) ^ 1;
  else
    LOBYTE(v3) = 0;

  return v3 & 1;
}

id HeadphoneDevice.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t HeadphoneDevice.init()()
{
  uint64_t result;
  uint64_t v1;

  if (!"HeadphoneManager.HeadphoneDevice")
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  result = closure #1 in _unimplementedInitializer(className:initName:file:line:column:)((uint64_t)"HeadphoneManager.HeadphoneDevice", 32, (unint64_t)"init()", 6, 2, (unint64_t)"HeadphoneManager/HeadphoneDevice.swift", 38, 2, v1, 0x3BuLL, 0xEuLL);
  __break(1u);
  return result;
}

id HeadphoneDevice.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HeadphoneDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance HeadphoneDevice@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for HeadphoneDevice();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

id @nonobjc UIImage.init(cgImage:)(void *a1)
{
  void *v1;
  id v4;

  v4 = objc_msgSend(v1, sel_initWithCGImage_);

  return v4;
}

id @nonobjc SPOwnerInterface.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc CBDeviceSettings.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc BTCloudServicesClient.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc BTAirPodsControlServiceClient.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance CBListeningModeConfigs@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = CBListeningModeConfigs.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerUIGestureMode@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerUIGestureMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerUIGestureMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerUIGestureMode@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerUIGestureMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerUIGestureMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerCallConfig@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerCallConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerCallConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerCallConfig@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerCallConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerCallConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerCrownRotationDirection@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerCrownRotationDirection.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerCrownRotationDirection.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerCrownRotationDirection@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerCrownRotationDirection.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerCrownRotationDirection.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBDevicePlacementMode@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBDevicePlacementMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBDevicePlacementMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBDevicePlacementMode@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBDevicePlacementMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBDevicePlacementMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBSmartRoutingMode@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBSmartRoutingMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBSmartRoutingMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBSmartRoutingMode@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBSmartRoutingMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBSmartRoutingMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerSelectiveSpeechListeningConfig@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerSelectiveSpeechListeningConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerSelectiveSpeechListeningConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerSelectiveSpeechListeningConfig@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerSelectiveSpeechListeningConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerSelectiveSpeechListeningConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerConversationDetectConfig@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerConversationDetectConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerConversationDetectConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerConversationDetectConfig@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerConversationDetectConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerConversationDetectConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerAdaptiveVolumeConfig@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerAdaptiveVolumeConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerAdaptiveVolumeConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerAdaptiveVolumeConfig@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerAdaptiveVolumeConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerAdaptiveVolumeConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance CBProductFlags@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = CBProductFlags.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance CBDeviceFlags@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = CBDeviceFlags.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAFeatureCapability@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AAFeatureCapability.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAFeatureCapability.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAFeatureCapability@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AAFeatureCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAFeatureCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerUIGestureMode()
{
  lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance CBListeningModeConfigs()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance CBListeningModeConfigs()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBDoubleTapAction()
{
  lazy protocol witness table accessor for type CBDoubleTapAction and conformance CBDoubleTapAction();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBPeerAutoAncCapability@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBPeerAutoAncCapability.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBPeerAutoAncCapability.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBPeerAutoAncCapability@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBPeerAutoAncCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBPeerAutoAncCapability.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerCrownRotationDirection()
{
  lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBDevicePlacementMode()
{
  lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerCallConfig()
{
  lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerSelectiveSpeechListeningConfig()
{
  lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerConversationDetectConfig()
{
  lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBPeerAdaptiveVolumeConfig()
{
  lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBListeningMode()
{
  lazy protocol witness table accessor for type CBListeningMode and conformance CBListeningMode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBSmartRoutingMode()
{
  lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBMicrophoneMode()
{
  lazy protocol witness table accessor for type CBMicrophoneMode and conformance CBMicrophoneMode();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBListeningModeConfigs@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CBListeningModeConfigs.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBListeningModeConfigs@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = CBListeningModeConfigs.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBProductFlags@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CBProductFlags.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBProductFlags@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = CBProductFlags.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CBProductFlags()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CBProductFlags()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CBProductFlags()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance CBProductFlags()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance CBProductFlags()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CBProductFlags()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance CBProductFlags()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBDeviceFlags@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CBDeviceFlags.init(rawValue:)(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBDeviceFlags@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = CBDeviceFlags.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  lazy protocol witness table accessor for type UInt64 and conformance UInt64();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance CBDeviceFlags()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance CBDeviceFlags()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance CBDeviceFlags()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance CBDeviceFlags()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance CBDeviceFlags()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance CBDeviceFlags()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance CBDeviceFlags()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CBListeningModeConfigs()
{
  lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBDoubleTapAction@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBDoubleTapAction.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBDoubleTapAction.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBDoubleTapAction@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBDoubleTapAction.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBDoubleTapAction.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBListeningMode@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CBListeningMode.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t CBListeningMode.init(rawValue:)(int a1)
{
  uint64_t v2;

  LODWORD(v2) = a1;
  BYTE4(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBListeningMode@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = CBListeningMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBListeningMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBMicrophoneMode@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = CBMicrophoneMode.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t CBMicrophoneMode.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBMicrophoneMode@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = CBMicrophoneMode.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBMicrophoneMode.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CBProductFlags()
{
  lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance CBDeviceFlags()
{
  lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t partial apply for closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A];
  if (!lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [(_:_:_:)]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [(_:_:_:)] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBListeningMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBListeningMode;
  if (!lazy cache variable for type metadata for CBListeningMode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBListeningMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBPeerUIGestureMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerUIGestureMode;
  if (!lazy cache variable for type metadata for CBPeerUIGestureMode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerUIGestureMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBListeningModeConfigs()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBListeningModeConfigs;
  if (!lazy cache variable for type metadata for CBListeningModeConfigs)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBListeningModeConfigs);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    v0 = type metadata accessor for CBListeningModeConfigs();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningModeConfigs, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    v0 = type metadata accessor for CBListeningModeConfigs();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningModeConfigs, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    v0 = type metadata accessor for CBListeningModeConfigs();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningModeConfigs, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    v0 = type metadata accessor for CBListeningModeConfigs();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningModeConfigs, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs)
  {
    v0 = type metadata accessor for CBListeningModeConfigs();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningModeConfigs, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningModeConfigs and conformance CBListeningModeConfigs);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBDoubleTapAction()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBDoubleTapAction;
  if (!lazy cache variable for type metadata for CBDoubleTapAction)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDoubleTapAction);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBPeerCrownRotationDirection()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerCrownRotationDirection;
  if (!lazy cache variable for type metadata for CBPeerCrownRotationDirection)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerCrownRotationDirection);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBSmartRoutingMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBSmartRoutingMode;
  if (!lazy cache variable for type metadata for CBSmartRoutingMode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBSmartRoutingMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBMicrophoneMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBMicrophoneMode;
  if (!lazy cache variable for type metadata for CBMicrophoneMode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBMicrophoneMode);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBPeerCallConfig()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerCallConfig;
  if (!lazy cache variable for type metadata for CBPeerCallConfig)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerCallConfig);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for CBBatteryState()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBBatteryState;
  if (!lazy cache variable for type metadata for CBBatteryState)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBBatteryState);
      return v1;
    }
  }
  return v4;
}

unint64_t type metadata accessor for CBProductInfo()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CBProductInfo;
  if (!lazy cache variable for type metadata for CBProductInfo)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBProductInfo);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for UIImage()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for UIImage;
  if (!lazy cache variable for type metadata for UIImage)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for UIImage);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection;
  if (!lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection)
  {
    v0 = type metadata accessor for CBPeerCrownRotationDirection();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerCrownRotationDirection, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection;
  if (!lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection)
  {
    v0 = type metadata accessor for CBPeerCrownRotationDirection();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerCrownRotationDirection, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCrownRotationDirection and conformance CBPeerCrownRotationDirection);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBDevicePlacementMode()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBDevicePlacementMode;
  if (!lazy cache variable for type metadata for CBDevicePlacementMode)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDevicePlacementMode);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBDevicePlacementMode and conformance CBDevicePlacementMode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode;
  if (!lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode)
  {
    v0 = type metadata accessor for CBDevicePlacementMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDevicePlacementMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode;
  if (!lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode)
  {
    v0 = type metadata accessor for CBDevicePlacementMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDevicePlacementMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDevicePlacementMode and conformance CBDevicePlacementMode);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CBSmartRoutingMode and conformance CBSmartRoutingMode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode;
  if (!lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode)
  {
    v0 = type metadata accessor for CBSmartRoutingMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBSmartRoutingMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode;
  if (!lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode)
  {
    v0 = type metadata accessor for CBSmartRoutingMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBSmartRoutingMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBSmartRoutingMode and conformance CBSmartRoutingMode);
    return v1;
  }
  return v3;
}

uint64_t CBProductIDIsAirPods(int a1)
{
  unint64_t v2;

  v2 = (a1 - 8194);
  if (v2 <= 0x22)
    __asm { BR              X8 }
  return 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of BTAirPodsControlServiceClient?(id *a1)
{

}

unint64_t type metadata accessor for SPOwnerInterface()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for SPOwnerInterface;
  if (!lazy cache variable for type metadata for SPOwnerInterface)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for SPOwnerInterface);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode;
  if (!lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode)
  {
    v0 = type metadata accessor for CBPeerUIGestureMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerUIGestureMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode;
  if (!lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode)
  {
    v0 = type metadata accessor for CBPeerUIGestureMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerUIGestureMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerUIGestureMode and conformance CBPeerUIGestureMode);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBPeerSelectiveSpeechListeningConfig()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerSelectiveSpeechListeningConfig;
  if (!lazy cache variable for type metadata for CBPeerSelectiveSpeechListeningConfig)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerSelectiveSpeechListeningConfig);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig;
  if (!lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig)
  {
    v0 = type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerSelectiveSpeechListeningConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig;
  if (!lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig)
  {
    v0 = type metadata accessor for CBPeerSelectiveSpeechListeningConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerSelectiveSpeechListeningConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerSelectiveSpeechListeningConfig and conformance CBPeerSelectiveSpeechListeningConfig);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBPeerConversationDetectConfig()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerConversationDetectConfig;
  if (!lazy cache variable for type metadata for CBPeerConversationDetectConfig)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerConversationDetectConfig);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig;
  if (!lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig)
  {
    v0 = type metadata accessor for CBPeerConversationDetectConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerConversationDetectConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig;
  if (!lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig)
  {
    v0 = type metadata accessor for CBPeerConversationDetectConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerConversationDetectConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerConversationDetectConfig and conformance CBPeerConversationDetectConfig);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBPeerAdaptiveVolumeConfig()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerAdaptiveVolumeConfig;
  if (!lazy cache variable for type metadata for CBPeerAdaptiveVolumeConfig)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerAdaptiveVolumeConfig);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig;
  if (!lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig)
  {
    v0 = type metadata accessor for CBPeerAdaptiveVolumeConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerAdaptiveVolumeConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig;
  if (!lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig)
  {
    v0 = type metadata accessor for CBPeerAdaptiveVolumeConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerAdaptiveVolumeConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerAdaptiveVolumeConfig and conformance CBPeerAdaptiveVolumeConfig);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for HeadphoneDevice()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for HeadphoneDevice;
  if (!type metadata singleton initialization cache for HeadphoneDevice)
    return swift_getSingletonMetadata();
  return v1;
}

uint64_t type metadata accessor for CBProductFlags()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBProductFlags;
  if (!lazy cache variable for type metadata for CBProductFlags)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBProductFlags);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    v0 = type metadata accessor for CBProductFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBProductFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    v0 = type metadata accessor for CBProductFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBProductFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    v0 = type metadata accessor for CBProductFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBProductFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    v0 = type metadata accessor for CBProductFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBProductFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags;
  if (!lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags)
  {
    v0 = type metadata accessor for CBProductFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBProductFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBProductFlags and conformance CBProductFlags);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CBPeerCallConfig and conformance CBPeerCallConfig()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig;
  if (!lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig)
  {
    v0 = type metadata accessor for CBPeerCallConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerCallConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig;
  if (!lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig)
  {
    v0 = type metadata accessor for CBPeerCallConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerCallConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerCallConfig and conformance CBPeerCallConfig);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultStringInterpolation()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject)
  {
    v0 = type metadata accessor for HeadphoneDevice();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject)
  {
    v0 = type metadata accessor for HeadphoneDevice();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE5BE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for CBDevice()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CBDevice;
  if (!lazy cache variable for type metadata for CBDevice)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDevice);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type CBDevice and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CBDevice and conformance NSObject)
  {
    v0 = type metadata accessor for CBDevice();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE5BE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDevice and conformance NSObject);
    return v1;
  }
  return v3;
}

{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDevice and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CBDevice and conformance NSObject)
  {
    v0 = type metadata accessor for CBDevice();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDD0240], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDevice and conformance NSObject);
    return v1;
  }
  return v3;
}

uint64_t closure #1 in osLogInternal(_:log:type:)partial apply(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v4)(void);
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = a3;
  v9 = a4;
  v10 = *(_QWORD *)(a3 - 8);
  v8 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = (void (*)(void))MEMORY[0x24BDAC7A8](a1, a2);
  v11 = (char *)&v7 - v8;
  v4();
  v13 = dispatch thunk of CustomStringConvertible.description.getter();
  v14 = v5;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, v12);
  return v13;
}

uint64_t sub_23DAF1D68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HMDeviceRecord]);
  v1 = lazy protocol witness table accessor for type [String : HMDeviceRecord] and conformance [A : B]();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v5, v3, v4, v1);
}

uint64_t sub_23DAF1E60()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)()
{
  uint64_t v0;

  return implicit closure #2 in HeadphoneDevice.init(_aaDevice:cbDevice:delegate:)(*(void **)(v0 + 16));
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for DispatchWorkItemFlags();
      v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      swift_retain();
      v3 = v2;
    }
    type metadata accessor for DispatchWorkItemFlags();
    return v3;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = result;
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    if (result > 0)
    {
      type metadata accessor for OS_dispatch_queue.Attributes();
      v1 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)(v1 + 16) = v4;
      v3 = v1;
    }
    else
    {
      v2 = MEMORY[0x24BEE4AF8];
      swift_retain();
      v3 = v2;
    }
    type metadata accessor for OS_dispatch_queue.Attributes();
    return v3;
  }
  return result;
}

uint64_t sub_23DAF1F5C()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DAF1F8C()
{
  return swift_deallocObject();
}

uint64_t sub_23DAF1FBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_0()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DAF2004()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DAF204C()
{
  return swift_deallocObject();
}

uint64_t sub_23DAF207C()
{
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23DAF20CC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  _QWORD *v4;
  id v7;
  uint64_t v8;

  v7 = (id)a4();
  v8 = *a1;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v8 + 8;
  v4 = *a2;
  if (*a2)
  {
    *v4 = v7;
    *a2 = v4 + 1;
  }
  else
  {

  }
}

uint64_t sub_23DAF2250()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability;
  if (!lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability)
  {
    v0 = type metadata accessor for AAFeatureCapability();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAFeatureCapability, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability;
  if (!lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability)
  {
    v0 = type metadata accessor for AAFeatureCapability();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAFeatureCapability, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAFeatureCapability and conformance AAFeatureCapability);
    return v1;
  }
  return v3;
}

uint64_t type metadata accessor for CBDeviceFlags()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBDeviceFlags;
  if (!lazy cache variable for type metadata for CBDeviceFlags)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDeviceFlags);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    v0 = type metadata accessor for CBDeviceFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDeviceFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    v0 = type metadata accessor for CBDeviceFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDeviceFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    v0 = type metadata accessor for CBDeviceFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDeviceFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    v0 = type metadata accessor for CBDeviceFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDeviceFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags;
  if (!lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags)
  {
    v0 = type metadata accessor for CBDeviceFlags();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDeviceFlags, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDeviceFlags and conformance CBDeviceFlags);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for CBDeviceSettings()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CBDeviceSettings;
  if (!lazy cache variable for type metadata for CBDeviceSettings)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDeviceSettings);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneDevice.HeadphoneFeatures, &type metadata for HeadphoneDevice.HeadphoneFeatures);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneDevice.HeadphoneFeatures, &type metadata for HeadphoneDevice.HeadphoneFeatures);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures);
    return v0;
  }
  return v2;
}

uint64_t type metadata accessor for CBPeerAutoAncCapability()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBPeerAutoAncCapability;
  if (!lazy cache variable for type metadata for CBPeerAutoAncCapability)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBPeerAutoAncCapability);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability;
  if (!lazy protocol witness table cache variable for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability)
  {
    v0 = type metadata accessor for CBPeerAutoAncCapability();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBPeerAutoAncCapability, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBPeerAutoAncCapability and conformance CBPeerAutoAncCapability);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CBDoubleTapAction and conformance CBDoubleTapAction()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction;
  if (!lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction)
  {
    v0 = type metadata accessor for CBDoubleTapAction();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDoubleTapAction, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction;
  if (!lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction)
  {
    v0 = type metadata accessor for CBDoubleTapAction();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBDoubleTapAction, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBDoubleTapAction and conformance CBDoubleTapAction);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type String.UTF8View and conformance String.UTF8View()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View;
  if (!lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE0C58], MEMORY[0x24BEE0C50]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type String.UTF8View and conformance String.UTF8View);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type SHA256 and conformance SHA256()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SHA256 and conformance SHA256;
  if (!lazy protocol witness table cache variable for type SHA256 and conformance SHA256)
  {
    v0 = type metadata accessor for SHA256();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDC6AE8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SHA256 and conformance SHA256);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type SHA256Digest and conformance SHA256Digest()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest;
  if (!lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest)
  {
    v0 = type metadata accessor for SHA256Digest();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDC6300], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type SHA256Digest and conformance SHA256Digest);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12B0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [String]()
{
  swift_bridgeObjectRelease();
}

uint64_t sub_23DAF2B38()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #3 in HeadphoneDevice.featureUpdateListener(cbDevice:)();
  return result;
}

uint64_t sub_23DAF2B80()
{
  return swift_deallocObject();
}

uint64_t sub_23DAF2BB0()
{
  return swift_deallocObject();
}

uint64_t sub_23DAF2BE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DAF2C28()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type CBListeningMode and conformance CBListeningMode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode;
  if (!lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode)
  {
    v0 = type metadata accessor for CBListeningMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode;
  if (!lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode)
  {
    v0 = type metadata accessor for CBListeningMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBListeningMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBListeningMode and conformance CBListeningMode);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type CBMicrophoneMode and conformance CBMicrophoneMode()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode;
  if (!lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode)
  {
    v0 = type metadata accessor for CBMicrophoneMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBMicrophoneMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode;
  if (!lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode)
  {
    v0 = type metadata accessor for CBMicrophoneMode();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBMicrophoneMode, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBMicrophoneMode and conformance CBMicrophoneMode);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphoneDeviceDelegate?()
{
  swift_unknownObjectRelease();
}

uint64_t sub_23DAF3088()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.setFindMyStatus()(void *a1)
{
  uint64_t v1;

  closure #1 in HeadphoneDevice.setFindMyStatus()(a1, *(_QWORD **)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_23DAF3198()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in HeadphoneDevice.setFindMyStatus()()
{
  uint64_t v0;

  return closure #2 in HeadphoneDevice.setFindMyStatus()(*(_QWORD **)(v0 + 16));
}

uint64_t block_copy_helper_204(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_205()
{
  return swift_release();
}

uint64_t sub_23DAF3238()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(char a1, void *a2)
{
  uint64_t v2;

  closure #1 in HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)(a1 & 1, a2, *(_QWORD **)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t block_copy_helper_210(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_211()
{
  return swift_release();
}

uint64_t sub_23DAF32E8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.setCaseSilentMode()()
{
  uint64_t v0;

  closure #1 in HeadphoneDevice.setCaseSilentMode()(*(_QWORD **)(v0 + 16), *(_BYTE *)(v0 + 24) & 1);
}

uint64_t block_copy_helper_216(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_217()
{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ACAccount?(id *a1)
{

}

unint64_t type metadata accessor for BTCloudServicesClient()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for BTCloudServicesClient;
  if (!lazy cache variable for type metadata for BTCloudServicesClient)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for BTCloudServicesClient);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_23DAF341C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent()(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in HeadphoneDevice.isSpatialProfileRecordPresent()(a1, a2, *(_QWORD **)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t block_copy_helper_222(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_223()
{
  return swift_release();
}

uint64_t sub_23DAF34C8()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.removeSpatialProfileRecord()(void *a1)
{
  uint64_t v1;

  closure #1 in HeadphoneDevice.removeSpatialProfileRecord()(a1, *(NSObject **)(v1 + 16));
}

uint64_t block_copy_helper_228(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_229()
{
  return swift_release();
}

unint64_t type metadata accessor for BTAirPodsControlServiceClient()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for BTAirPodsControlServiceClient;
  if (!lazy cache variable for type metadata for BTAirPodsControlServiceClient)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for BTAirPodsControlServiceClient);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t sub_23DAF35CC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in HeadphoneDevice.getCaseSilentMode()()
{
  uint64_t v0;

  closure #1 in HeadphoneDevice.getCaseSilentMode()(*(_QWORD **)(v0 + 16));
}

uint64_t block_copy_helper_234(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_235()
{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AudioAccessoryDevice?(id *a1)
{

}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of UIImage?(id *a1)
{

}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak HeadphoneDeviceDelegate?()
{
  swift_unknownObjectWeakDestroy();
}

unint64_t base witness table accessor for Equatable in SerialNumberType()
{
  return lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType();
}

unint64_t lazy protocol witness table accessor for type SerialNumberType and conformance SerialNumberType()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType;
  if (!lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for SerialNumberType, &type metadata for SerialNumberType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType;
  if (!lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for SerialNumberType, &type metadata for SerialNumberType);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type SerialNumberType and conformance SerialNumberType);
    return v0;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in HeadphoneDevice.HeadphoneFeatures()
{
  return lazy protocol witness table accessor for type HeadphoneDevice.HeadphoneFeatures and conformance HeadphoneDevice.HeadphoneFeatures();
}

unint64_t base witness table accessor for Equatable in HeadphoneDevice.ListeningModeConfigs()
{
  return lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs();
}

unint64_t lazy protocol witness table accessor for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneDevice.ListeningModeConfigs, &type metadata for HeadphoneDevice.ListeningModeConfigs);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs;
  if (!lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneDevice.ListeningModeConfigs, &type metadata for HeadphoneDevice.ListeningModeConfigs);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneDevice.ListeningModeConfigs and conformance HeadphoneDevice.ListeningModeConfigs);
    return v0;
  }
  return v2;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in HeadphoneDevice()
{
  return MEMORY[0x24BDB9D70];
}

uint64_t dispatch thunk of HeadphoneDeviceConstructable.headphoneDevice(cbDevice:withDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for SerialNumberType()
{
  return &type metadata for SerialNumberType;
}

uint64_t ObjC metadata update function for HeadphoneDevice()
{
  return type metadata accessor for HeadphoneDevice();
}

uint64_t type metadata completion function for HeadphoneDevice()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t updated;

  updated = type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F)
  {
    updated = type metadata accessor for Published<String>();
    if (v1 <= 0x3F)
    {
      updated = type metadata accessor for Published<CBListeningMode>();
      if (v2 <= 0x3F)
      {
        updated = type metadata accessor for Published<CBPeerUIGestureMode>();
        if (v3 <= 0x3F)
        {
          updated = type metadata accessor for Published<CBDoubleTapAction>();
          if (v4 <= 0x3F)
          {
            updated = type metadata accessor for Published<CBPeerCrownRotationDirection>();
            if (v5 <= 0x3F)
            {
              updated = type metadata accessor for Published<CBSmartRoutingMode>();
              if (v6 <= 0x3F)
              {
                updated = type metadata accessor for Published<CBMicrophoneMode>();
                if (v7 <= 0x3F)
                {
                  updated = type metadata accessor for Published<CBPeerCallConfig>();
                  if (v8 <= 0x3F)
                  {
                    updated = type metadata accessor for Published<Float>();
                    if (v9 <= 0x3F)
                    {
                      updated = type metadata accessor for Published<CBBatteryState>();
                      if (v10 <= 0x3F)
                      {
                        updated = type metadata accessor for Published<HearingRecord>();
                        if (v11 <= 0x3F)
                        {
                          updated = type metadata accessor for Published<AADevice>();
                          if (v12 <= 0x3F)
                          {
                            updated = swift_updateClassMetadata2();
                            if (!updated)
                              return 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return updated;
}

uint64_t method lookup function for HeadphoneDevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HeadphoneDevice.cbDevice.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x210))();
}

uint64_t dispatch thunk of HeadphoneDevice.cbDevice.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x218))();
}

uint64_t dispatch thunk of HeadphoneDevice.cbDevice.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x220))();
}

uint64_t dispatch thunk of HeadphoneDevice.productInfo.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x228))();
}

uint64_t dispatch thunk of HeadphoneDevice.productInfo.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x230))();
}

uint64_t dispatch thunk of HeadphoneDevice.productInfo.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x238))();
}

uint64_t dispatch thunk of HeadphoneDevice.aaDevice.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x240))();
}

uint64_t dispatch thunk of HeadphoneDevice.aaDevice.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x248))();
}

uint64_t dispatch thunk of HeadphoneDevice.aaDevice.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x250))();
}

uint64_t dispatch thunk of HeadphoneDevice.isUpdatingDeviceConfig.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x258))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isUpdatingDeviceConfig.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x260))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isUpdatingDeviceConfig.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x268))();
}

uint64_t dispatch thunk of HeadphoneDevice.isAirpods.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x270))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isAirpods.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x278))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isAirpods.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x280))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSupport.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x288))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSupport.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x290))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSupport.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x298))();
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingFindMyNetworkOnError.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2A0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingFindMyNetworkOnError.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x2A8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingFindMyNetworkOnError.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkEnable.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2B8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkEnable.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x2C0))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkEnable.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$findMyNetworkEnable.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$findMyNetworkEnable.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$findMyNetworkEnable.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSession.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSession.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkSession.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x2F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkValueUpdated.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x300))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkValueUpdated.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x308))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.findMyNetworkValueUpdated.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x310))();
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingFindMyNetworkValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x318))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingFindMyNetworkValue.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x320))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingFindMyNetworkValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x328))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingFindMyNetworkValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x330))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingFindMyNetworkValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x338))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingFindMyNetworkValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x340))();
}

uint64_t dispatch thunk of HeadphoneDevice.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x348))();
}

uint64_t dispatch thunk of HeadphoneDevice.name.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x350))();
}

uint64_t dispatch thunk of HeadphoneDevice.name.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x358))();
}

uint64_t dispatch thunk of HeadphoneDevice.$name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x360))();
}

uint64_t dispatch thunk of HeadphoneDevice.$name.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x368))();
}

uint64_t dispatch thunk of HeadphoneDevice.$name.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x370))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x378))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x380))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x388))();
}

uint64_t dispatch thunk of HeadphoneDevice.$listeningMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x390))();
}

uint64_t dispatch thunk of HeadphoneDevice.$listeningMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x398))();
}

uint64_t dispatch thunk of HeadphoneDevice.$listeningMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.clickHoldModeRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x3F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$clickHoldModeRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x400))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningModeConfigs.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x408))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningModeConfigs.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x410))();
}

uint64_t dispatch thunk of HeadphoneDevice.listeningModeConfigs.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x418))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldAuto.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x420))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldAuto.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x428))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldAuto.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x430))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldAuto.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x438))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldAuto.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x440))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldAuto.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x448))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldTransparency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x450))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldTransparency.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x458))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldTransparency.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x460))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldTransparency.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x468))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldTransparency.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x470))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldTransparency.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x478))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldOff.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x480))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldOff.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x488))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldOff.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x490))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldOff.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x498))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldOff.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldOff.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldNoiseCancel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4B0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldNoiseCancel.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x4B8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldNoiseCancel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldNoiseCancel.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldNoiseCancel.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$pressHoldNoiseCancel.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x4F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x500))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x508))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x510))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x518))();
}

uint64_t dispatch thunk of HeadphoneDevice.doubleTapActionRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x520))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x528))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x530))();
}

uint64_t dispatch thunk of HeadphoneDevice.$doubleTapActionRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x538))();
}

uint64_t dispatch thunk of HeadphoneDevice.crownRotationDirection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x540))();
}

uint64_t dispatch thunk of HeadphoneDevice.crownRotationDirection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x548))();
}

uint64_t dispatch thunk of HeadphoneDevice.crownRotationDirection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x550))();
}

uint64_t dispatch thunk of HeadphoneDevice.$crownRotationDirection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x558))();
}

uint64_t dispatch thunk of HeadphoneDevice.$crownRotationDirection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x560))();
}

uint64_t dispatch thunk of HeadphoneDevice.$crownRotationDirection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x568))();
}

uint64_t dispatch thunk of HeadphoneDevice.inEarDetection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x570))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.inEarDetection.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x578))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.inEarDetection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x580))();
}

uint64_t dispatch thunk of HeadphoneDevice.$inEarDetection.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x588))();
}

uint64_t dispatch thunk of HeadphoneDevice.$inEarDetection.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x590))();
}

uint64_t dispatch thunk of HeadphoneDevice.$inEarDetection.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x598))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryCharging.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5A0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.batteryCharging.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x5A8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.batteryCharging.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryCharging.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryCharging.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryCharging.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.smartRoutingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.smartRoutingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.smartRoutingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$smartRoutingMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$smartRoutingMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$smartRoutingMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x5F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.microphoneMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x600))();
}

uint64_t dispatch thunk of HeadphoneDevice.microphoneMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x608))();
}

uint64_t dispatch thunk of HeadphoneDevice.microphoneMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x610))();
}

uint64_t dispatch thunk of HeadphoneDevice.$microphoneMode.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x618))();
}

uint64_t dispatch thunk of HeadphoneDevice.$microphoneMode.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x620))();
}

uint64_t dispatch thunk of HeadphoneDevice.$microphoneMode.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x628))();
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlToggle.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x630))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlToggle.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x638))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlToggle.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x640))();
}

uint64_t dispatch thunk of HeadphoneDevice.$volumeControlToggle.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x648))();
}

uint64_t dispatch thunk of HeadphoneDevice.$volumeControlToggle.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x650))();
}

uint64_t dispatch thunk of HeadphoneDevice.$volumeControlToggle.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x658))();
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlView.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x660))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlView.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x668))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.volumeControlView.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x670))();
}

uint64_t dispatch thunk of HeadphoneDevice.spatialProfileExists.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x678))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.spatialProfileExists.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x680))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.spatialProfileExists.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x688))();
}

uint64_t dispatch thunk of HeadphoneDevice.$spatialProfileExists.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x690))();
}

uint64_t dispatch thunk of HeadphoneDevice.$spatialProfileExists.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x698))();
}

uint64_t dispatch thunk of HeadphoneDevice.$spatialProfileExists.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.isCaseSoundSupported.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6A8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isCaseSoundSupported.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x6B0))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isCaseSoundSupported.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isCaseSoundSupported.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isCaseSoundSupported.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isCaseSoundSupported.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.caseSound.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6D8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.caseSound.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x6E0))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.caseSound.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$caseSound.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$caseSound.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x6F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$caseSound.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x700))();
}

uint64_t dispatch thunk of HeadphoneDevice.airPodsServiceClient.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x708))();
}

uint64_t dispatch thunk of HeadphoneDevice.airPodsServiceClient.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x710))();
}

uint64_t dispatch thunk of HeadphoneDevice.airPodsServiceClient.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x718))();
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingCaseSoundOnError.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x720))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingCaseSoundOnError.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x728))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isResettingCaseSoundOnError.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x730))();
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingCaseSoundValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x738))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingCaseSoundValue.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x740))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.isSettingCaseSoundValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x748))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingCaseSoundValue.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x750))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingCaseSoundValue.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x758))();
}

uint64_t dispatch thunk of HeadphoneDevice.$isSettingCaseSoundValue.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x760))();
}

uint64_t dispatch thunk of HeadphoneDevice.endCallGesture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x768))();
}

uint64_t dispatch thunk of HeadphoneDevice.endCallGesture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x770))();
}

uint64_t dispatch thunk of HeadphoneDevice.endCallGesture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x778))();
}

uint64_t dispatch thunk of HeadphoneDevice.$endCallGesture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x780))();
}

uint64_t dispatch thunk of HeadphoneDevice.$endCallGesture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x788))();
}

uint64_t dispatch thunk of HeadphoneDevice.$endCallGesture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x790))();
}

uint64_t dispatch thunk of HeadphoneDevice.muteControlGesture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x798))();
}

uint64_t dispatch thunk of HeadphoneDevice.muteControlGesture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.muteControlGesture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$muteControlGesture.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$muteControlGesture.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$muteControlGesture.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.serialNumbers.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.serialNumbers.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.serialNumbers.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.selectiveSpeechListening.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7E0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.selectiveSpeechListening.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x7E8))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.selectiveSpeechListening.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$selectiveSpeechListening.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x7F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$selectiveSpeechListening.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x800))();
}

uint64_t dispatch thunk of HeadphoneDevice.$selectiveSpeechListening.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x808))();
}

uint64_t dispatch thunk of HeadphoneDevice.conversationDetect.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x810))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.conversationDetect.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x818))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.conversationDetect.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x820))();
}

uint64_t dispatch thunk of HeadphoneDevice.$conversationDetect.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x828))();
}

uint64_t dispatch thunk of HeadphoneDevice.$conversationDetect.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x830))();
}

uint64_t dispatch thunk of HeadphoneDevice.$conversationDetect.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x838))();
}

uint64_t dispatch thunk of HeadphoneDevice.adaptiveVolume.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x840))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.adaptiveVolume.setter(char a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(_QWORD))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x848))(a1 & 1);
}

uint64_t dispatch thunk of HeadphoneDevice.adaptiveVolume.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x850))();
}

uint64_t dispatch thunk of HeadphoneDevice.$adaptiveVolume.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x858))();
}

uint64_t dispatch thunk of HeadphoneDevice.$adaptiveVolume.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x860))();
}

uint64_t dispatch thunk of HeadphoneDevice.$adaptiveVolume.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x868))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelMain.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x870))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelMain.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x878))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelMain.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x880))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelMain.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x888))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelMain.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x890))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelMain.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x898))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateMain.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateMain.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateMain.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateMain.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateMain.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateMain.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x8F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x900))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x908))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x910))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateLeft.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x918))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateLeft.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x920))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateLeft.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x928))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x930))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x938))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x940))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x948))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x950))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x958))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x960))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x968))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x970))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateRight.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x978))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateRight.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x980))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateRight.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x988))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelCase.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x990))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelCase.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x998))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryLevelCase.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9A0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelCase.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9A8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelCase.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9B0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryLevelCase.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9B8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateCase.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9C0))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateCase.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9C8))();
}

uint64_t dispatch thunk of HeadphoneDevice.batteryStateCase.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9D0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateCase.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9D8))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateCase.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9E0))();
}

uint64_t dispatch thunk of HeadphoneDevice.$batteryStateCase.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9E8))();
}

uint64_t dispatch thunk of HeadphoneDevice.hearingRecord.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9F0))();
}

uint64_t dispatch thunk of HeadphoneDevice.hearingRecord.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x9F8))();
}

uint64_t dispatch thunk of HeadphoneDevice.hearingRecord.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA00))();
}

uint64_t dispatch thunk of HeadphoneDevice.$hearingRecord.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA08))();
}

uint64_t dispatch thunk of HeadphoneDevice.$hearingRecord.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA10))();
}

uint64_t dispatch thunk of HeadphoneDevice.$hearingRecord.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA18))();
}

uint64_t dispatch thunk of HeadphoneDevice.audioAccessoryDevice.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA20))();
}

uint64_t dispatch thunk of HeadphoneDevice.audioAccessoryDevice.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA28))();
}

uint64_t dispatch thunk of HeadphoneDevice.audioAccessoryDevice.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA30))();
}

uint64_t dispatch thunk of HeadphoneDevice.$audioAccessoryDevice.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA38))();
}

uint64_t dispatch thunk of HeadphoneDevice.$audioAccessoryDevice.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA40))();
}

uint64_t dispatch thunk of HeadphoneDevice.$audioAccessoryDevice.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA48))();
}

uint64_t dispatch thunk of HeadphoneDevice.supportsFeature(feature:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA70))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.updateFeatureValues(feature:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA78))();
}

uint64_t dispatch thunk of HeadphoneDevice.getFindMyUrl(hpDevice:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA80))();
}

uint64_t dispatch thunk of HeadphoneDevice.featureUpdateListener(_aaDevice:cbDevice:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA88))();
}

uint64_t dispatch thunk of HeadphoneDevice.featureUpdateListener(cbDevice:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA90))();
}

uint64_t dispatch thunk of HeadphoneDevice.getModelName()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA98))();
}

uint64_t dispatch thunk of HeadphoneDevice.setFindMyStatus()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAA0))();
}

uint64_t dispatch thunk of HeadphoneDevice.resetToggle()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAA8))();
}

uint64_t dispatch thunk of HeadphoneDevice.fetchFindMyNetworkStatus(btAddr:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAB0))();
}

uint64_t dispatch thunk of HeadphoneDevice.setCaseSilentMode()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAB8))();
}

uint64_t dispatch thunk of HeadphoneDevice.isiCloudSignedIn()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAC0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.setPressHoldDefaults()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAC8))();
}

uint64_t dispatch thunk of HeadphoneDevice.isSpatialProfileRecordPresent()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAD0))();
}

uint64_t dispatch thunk of HeadphoneDevice.removeSpatialProfileRecord()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAD8))();
}

uint64_t dispatch thunk of HeadphoneDevice.getCaseSilentMode()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAE0))();
}

uint64_t dispatch thunk of HeadphoneDevice.populateSerialNumbers()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAE8))();
}

uint64_t dispatch thunk of HeadphoneDevice.validatePressHoldCombination()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAF0))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.shouldShowFindMyNetworkAlert()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xAF8))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.accessorySettingFeatureBitMask.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB00))();
}

uint64_t dispatch thunk of HeadphoneDevice.accessorySettingFeatureBitMask.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB08))();
}

uint64_t dispatch thunk of HeadphoneDevice.accessorySettingFeatureBitMask.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB10))();
}

uint64_t dispatch thunk of HeadphoneDevice.deviceColor.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB18))();
}

uint64_t dispatch thunk of HeadphoneDevice.deviceColor.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB20))();
}

uint64_t dispatch thunk of HeadphoneDevice.deviceColor.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB28))();
}

uint64_t dispatch thunk of HeadphoneDevice.isServiceSupported(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB30))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.forceShowBobble.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB38))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.forceShowAdaptiveAudio.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB40))() & 1;
}

uint64_t dispatch thunk of HeadphoneDevice.pressHoldSupportsSiriOnly()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB48))() & 1;
}

uint64_t type metadata accessor for Published<Bool>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<Bool>;
  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<String>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<String>;
  if (!lazy cache variable for type metadata for Published<String>)
  {
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<String>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBListeningMode>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBListeningMode>;
  if (!lazy cache variable for type metadata for Published<CBListeningMode>)
  {
    type metadata accessor for CBListeningMode();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBListeningMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBPeerUIGestureMode>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBPeerUIGestureMode>;
  if (!lazy cache variable for type metadata for Published<CBPeerUIGestureMode>)
  {
    type metadata accessor for CBPeerUIGestureMode();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBPeerUIGestureMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBDoubleTapAction>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBDoubleTapAction>;
  if (!lazy cache variable for type metadata for Published<CBDoubleTapAction>)
  {
    type metadata accessor for CBDoubleTapAction();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBDoubleTapAction>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBPeerCrownRotationDirection>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBPeerCrownRotationDirection>;
  if (!lazy cache variable for type metadata for Published<CBPeerCrownRotationDirection>)
  {
    type metadata accessor for CBPeerCrownRotationDirection();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBPeerCrownRotationDirection>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBSmartRoutingMode>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBSmartRoutingMode>;
  if (!lazy cache variable for type metadata for Published<CBSmartRoutingMode>)
  {
    type metadata accessor for CBSmartRoutingMode();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBSmartRoutingMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBMicrophoneMode>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBMicrophoneMode>;
  if (!lazy cache variable for type metadata for Published<CBMicrophoneMode>)
  {
    type metadata accessor for CBMicrophoneMode();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBMicrophoneMode>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBPeerCallConfig>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBPeerCallConfig>;
  if (!lazy cache variable for type metadata for Published<CBPeerCallConfig>)
  {
    type metadata accessor for CBPeerCallConfig();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBPeerCallConfig>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<Float>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<Float>;
  if (!lazy cache variable for type metadata for Published<Float>)
  {
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<Float>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<CBBatteryState>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<CBBatteryState>;
  if (!lazy cache variable for type metadata for Published<CBBatteryState>)
  {
    type metadata accessor for CBBatteryState();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<CBBatteryState>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<HearingRecord>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<HearingRecord>;
  if (!lazy cache variable for type metadata for Published<HearingRecord>)
  {
    type metadata accessor for HearingRecord();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<HearingRecord>);
      return v1;
    }
  }
  return v4;
}

uint64_t type metadata accessor for Published<AADevice>()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for Published<AADevice>;
  if (!lazy cache variable for type metadata for Published<AADevice>)
  {
    type metadata accessor for AADevice();
    v3 = type metadata accessor for Published();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for Published<AADevice>);
      return v1;
    }
  }
  return v4;
}

ValueMetadata *type metadata accessor for HeadphoneDevice.HeadphoneFeatures()
{
  return &type metadata for HeadphoneDevice.HeadphoneFeatures;
}

ValueMetadata *type metadata accessor for HeadphoneDevice.ListeningModeConfigs()
{
  return &type metadata for HeadphoneDevice.ListeningModeConfigs;
}

unint64_t base witness table accessor for Equatable in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for Equatable in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for Equatable in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t base witness table accessor for RawRepresentable in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for SetAlgebra in CBDeviceFlags()
{
  return lazy protocol witness table accessor for type CBDeviceFlags and conformance CBDeviceFlags();
}

unint64_t base witness table accessor for RawRepresentable in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for SetAlgebra in CBProductFlags()
{
  return lazy protocol witness table accessor for type CBProductFlags and conformance CBProductFlags();
}

unint64_t base witness table accessor for RawRepresentable in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t base witness table accessor for SetAlgebra in CBListeningModeConfigs()
{
  return lazy protocol witness table accessor for type CBListeningModeConfigs and conformance CBListeningModeConfigs();
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE45A8], MEMORY[0x24BEE4568]);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
    return v0;
  }
  return v2;
}

_QWORD *outlined init with copy of BTAirPodsControlServiceClient?(id *a1, _QWORD *a2)
{
  id v2;
  _QWORD *result;
  id v4;

  v4 = *a1;
  v2 = *a1;
  result = a2;
  *a2 = v4;
  return result;
}

_QWORD *outlined init with copy of AudioAccessoryDevice?(id *a1, _QWORD *a2)
{
  id v2;
  _QWORD *result;
  id v4;

  v4 = *a1;
  v2 = *a1;
  result = a2;
  *a2 = v4;
  return result;
}

uint64_t _ss25_unimplementedInitializer9className04initD04file4line6columns5NeverOs12StaticStringV_A2JS2utFySRys5UInt8VGXEfU_yAMXEfU_TA_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_BYTE *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56), a3, *(_QWORD *)(v3 + 64));
}

uint64_t _ss12StaticStringV14withUTF8BufferyxxSRys5UInt8VGXElFxAFXEfU_yt_Tgq5TA_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return specialized closure #1 in StaticString.withUTF8Buffer<A>(_:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t _ss25_unimplementedInitializer9className04initD04file4line6columns5NeverOs12StaticStringV_A2JS2utFySRys5UInt8VGXEfU_yAMXEfU_yAMXEfU_TA_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in closure #1 in _unimplementedInitializer(className:initName:file:line:column:)(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_23DAF8320()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode()(char a1, void *a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in HeadphoneDevice.getCaseSilentMode()(a1 & 1, a2, *(_QWORD **)(v2 + 16));
}

uint64_t block_copy_helper_241(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_242()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v0 = type metadata accessor for DispatchWorkItemFlags();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE5468], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t sub_23DAF84A4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode()(void *a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in HeadphoneDevice.setCaseSilentMode()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t block_copy_helper_247(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_248()
{
  return swift_release();
}

uint64_t _swift_stdlib_has_malloc_size_0()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_0(const void *a1)
{
  return malloc_size(a1);
}

_QWORD *outlined init with copy of String(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

void variable initialization expression of AADevice._deviceRemoteSendState(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AADevice._deviceRemoteSendState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char v4;

  swift_beginAccess();
  v4 = *(_BYTE *)(v1 + 16);
  result = swift_endAccess();
  *a1 = v4;
  return result;
}

uint64_t AADevice._deviceRemoteSendState.setter(char *a1)
{
  uint64_t v1;
  char v3;

  v3 = *a1;
  swift_beginAccess();
  *(_BYTE *)(v1 + 16) = v3;
  return swift_endAccess();
}

uint64_t (*AADevice._deviceRemoteSendState.modify())()
{
  swift_beginAccess();
  return AADevice._deviceRemoteSendState.modify;
}

uint64_t AADevice._deviceRemoteSendState.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for AADevice.acceptReplyPlayPauseConfig : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 256))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.acceptReplyPlayPauseConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 264))(v3);
  return swift_release();
}

uint64_t AADevice.acceptReplyPlayPauseConfig.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.acceptReplyPlayPauseConfig.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.acceptReplyPlayPauseConfig.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.acceptReplyPlayPauseConfig.modify;
}

uint64_t AADevice.acceptReplyPlayPauseConfig.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._acceptReplyPlayPauseConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AAHeadGestureConfig();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t type metadata accessor for AADevice()
{
  return objc_opt_self();
}

unint64_t lazy protocol witness table accessor for type AADevice and conformance AADevice()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AADevice and conformance AADevice;
  if (!lazy protocol witness table cache variable for type AADevice and conformance AADevice)
  {
    v0 = type metadata accessor for AADevice();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AADevice, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AADevice and conformance AADevice);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AADevice and conformance AADevice;
  if (!lazy protocol witness table cache variable for type AADevice and conformance AADevice)
  {
    v0 = type metadata accessor for AADevice();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AADevice, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AADevice and conformance AADevice);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig;
  if (!lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig)
  {
    v0 = type metadata accessor for AAHeadGestureConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAHeadGestureConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig;
  if (!lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig)
  {
    v0 = type metadata accessor for AAHeadGestureConfig();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAHeadGestureConfig, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAHeadGestureConfig and conformance AAHeadGestureConfig);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$acceptReplyPlayPauseConfig.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHeadGestureConfig>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.autoANCStrength : AADevice@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 288))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.autoANCStrength : AADevice(unsigned int *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 296))(v3);
  return swift_release();
}

uint64_t AADevice.autoANCStrength.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.autoANCStrength.setter(int a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  int v6;
  uint64_t v7;
  int v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

void (*AADevice.autoANCStrength.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *KeyPath;
  uint64_t v6;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  *v4 = v3;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v4[1] = KeyPath;
  v6 = swift_getKeyPath();
  v4[2] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v3, KeyPath, v6, (uint64_t)(v4 + 3));
  return AADevice.autoANCStrength.modify;
}

void AADevice.autoANCStrength.modify(void **a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;

  v8 = (uint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v2 = (_QWORD *)v8[2];
    v3 = (_QWORD *)v8[1];
    v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
  }
  else
  {
    v5 = (_QWORD *)v8[2];
    v6 = (_QWORD *)v8[1];
    v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
  }
  swift_release();
  swift_release();
  swift_release();
  free(v8);
}

uint64_t variable initialization expression of AADevice._autoANCStrength@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  int v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AAAutoANCStrength();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength;
  if (!lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength)
  {
    v0 = type metadata accessor for AAAutoANCStrength();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAAutoANCStrength, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength;
  if (!lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength)
  {
    v0 = type metadata accessor for AAAutoANCStrength();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAAutoANCStrength, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCStrength and conformance AAAutoANCStrength);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$autoANCStrength.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAAutoANCStrength>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.bobbleConfig : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 320))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.bobbleConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 328))(v3);
  return swift_release();
}

uint64_t AADevice.bobbleConfig.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.bobbleConfig.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.bobbleConfig.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.bobbleConfig.modify;
}

uint64_t AADevice.bobbleConfig.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._bobbleConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AABobbleConfiguration();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration;
  if (!lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration)
  {
    v0 = type metadata accessor for AABobbleConfiguration();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AABobbleConfiguration, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration;
  if (!lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration)
  {
    v0 = type metadata accessor for AABobbleConfiguration();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AABobbleConfiguration, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AABobbleConfiguration and conformance AABobbleConfiguration);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$bobbleConfig.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AABobbleConfiguration>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.declineDismissSkipConfig : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.declineDismissSkipConfig : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 360))(v3);
  return swift_release();
}

uint64_t AADevice.declineDismissSkipConfig.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.declineDismissSkipConfig.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.declineDismissSkipConfig.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.declineDismissSkipConfig.modify;
}

uint64_t AADevice.declineDismissSkipConfig.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._declineDismissSkipConfig@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AAHeadGestureConfig();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$declineDismissSkipConfig.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAHeadGestureConfig>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.headGestureToggle : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 384))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.headGestureToggle : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 392))(v3);
  return swift_release();
}

uint64_t AADevice.headGestureToggle.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.headGestureToggle.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.headGestureToggle.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.headGestureToggle.modify;
}

uint64_t AADevice.headGestureToggle.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._headGestureToggle@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

unint64_t lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState;
  if (!lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState)
  {
    v0 = type metadata accessor for AAMultiState();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAMultiState, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState;
  if (!lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState)
  {
    v0 = type metadata accessor for AAMultiState();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAMultiState, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAMultiState and conformance AAMultiState);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$headGestureToggle.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.headGestureProxCardShown : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 416))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.headGestureProxCardShown : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 424))(v3);
  return swift_release();
}

uint64_t AADevice.headGestureProxCardShown.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.headGestureProxCardShown.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.headGestureProxCardShown.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.headGestureProxCardShown.modify;
}

uint64_t AADevice.headGestureProxCardShown.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._headGestureProxCardShown@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$headGestureProxCardShown.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t variable initialization expression of AADevice.bluetoothAddressData()
{
  return 0;
}

uint64_t key path getter for AADevice.bluetoothAddressData : AADevice@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 448))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for AADevice.bluetoothAddressData : AADevice(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  outlined init with copy of Data?(a1, (uint64_t)v4);
  v2 = v4[0];
  v3 = v4[1];
  swift_retain();
  AADevice.bluetoothAddressData.setter(v2, v3);
  return swift_release();
}

uint64_t AADevice.bluetoothAddressData.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 264);
  outlined copy of Data?(v2, *(_QWORD *)(v0 + 272));
  swift_endAccess();
  return v2;
}

uint64_t AADevice.bluetoothAddressData.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  outlined copy of Data?(a1, a2);
  swift_beginAccess();
  v3 = *(_QWORD *)(v2 + 264);
  v4 = *(_QWORD *)(v2 + 272);
  *(_QWORD *)(v2 + 264) = a1;
  *(_QWORD *)(v2 + 272) = a2;
  outlined consume of Data?(v3, v4);
  swift_endAccess();
  return outlined consume of Data?(a1, a2);
}

uint64_t (*AADevice.bluetoothAddressData.modify())()
{
  swift_beginAccess();
  return AADevice.bluetoothAddressData.modify;
}

uint64_t AADevice.bluetoothAddressData.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for AADevice.autoANCCapability : AADevice@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 472))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.autoANCCapability : AADevice(unsigned int *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 480))(v3);
  return swift_release();
}

uint64_t AADevice.autoANCCapability.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.autoANCCapability.setter(int a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  int v6;
  uint64_t v7;
  int v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

void (*AADevice.autoANCCapability.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *KeyPath;
  uint64_t v6;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  *v4 = v3;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v4[1] = KeyPath;
  v6 = swift_getKeyPath();
  v4[2] = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v3, KeyPath, v6, (uint64_t)(v4 + 3));
  return AADevice.autoANCCapability.modify;
}

void AADevice.autoANCCapability.modify(void **a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;

  v8 = (uint64_t *)*a1;
  if ((a2 & 1) != 0)
  {
    v2 = (_QWORD *)v8[2];
    v3 = (_QWORD *)v8[1];
    v4 = *v8;
    *((_DWORD *)v8 + 7) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)v8 + 28, v4, v3, v2);
  }
  else
  {
    v5 = (_QWORD *)v8[2];
    v6 = (_QWORD *)v8[1];
    v7 = *v8;
    *((_DWORD *)v8 + 8) = *((_DWORD *)v8 + 6);
    static AADeviceProperty.subscript.setter((uint64_t)(v8 + 4), v7, v6, v5);
  }
  swift_release();
  swift_release();
  swift_release();
  free(v8);
}

uint64_t variable initialization expression of AADevice._autoANCCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  int v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAAutoANCCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability;
  if (!lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability)
  {
    v0 = type metadata accessor for AAAutoANCCapability();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAAutoANCCapability, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability;
  if (!lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability)
  {
    v0 = type metadata accessor for AAAutoANCCapability();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAAutoANCCapability, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAAutoANCCapability and conformance AAAutoANCCapability);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$autoANCCapability.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAAutoANCCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.bobbleCapability : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 504))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.bobbleCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 512))(v3);
  return swift_release();
}

uint64_t AADevice.bobbleCapability.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.bobbleCapability.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.bobbleCapability.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.bobbleCapability.modify;
}

uint64_t AADevice.bobbleCapability.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._bobbleCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$bobbleCapability.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.caseSoundCapability : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 536))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.caseSoundCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 544))(v3);
  return swift_release();
}

uint64_t AADevice.caseSoundCapability.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.caseSoundCapability.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.caseSoundCapability.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.caseSoundCapability.modify;
}

uint64_t AADevice.caseSoundCapability.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._caseSoundCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$caseSoundCapability.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.earTipFitTestCapability : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 568))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.earTipFitTestCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 576))(v3);
  return swift_release();
}

uint64_t AADevice.earTipFitTestCapability.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.earTipFitTestCapability.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.earTipFitTestCapability.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.earTipFitTestCapability.modify;
}

uint64_t AADevice.earTipFitTestCapability.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._earTipFitTestCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$earTipFitTestCapability.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.frequencyBand : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 600))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.frequencyBand : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 608))(v3);
  return swift_release();
}

uint64_t AADevice.frequencyBand.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.frequencyBand.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.frequencyBand.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.frequencyBand.modify;
}

uint64_t AADevice.frequencyBand.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._frequencyBand@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAFrequencyBand();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand;
  if (!lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand)
  {
    v0 = type metadata accessor for AAFrequencyBand();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAFrequencyBand, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand;
  if (!lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand)
  {
    v0 = type metadata accessor for AAFrequencyBand();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAFrequencyBand, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAFrequencyBand and conformance AAFrequencyBand);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$frequencyBand.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFrequencyBand>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.heartRateMonitorEnabled : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 632))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.heartRateMonitorEnabled : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 640))(v3);
  return swift_release();
}

uint64_t AADevice.heartRateMonitorEnabled.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.heartRateMonitorEnabled.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.heartRateMonitorEnabled.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.heartRateMonitorEnabled.modify;
}

uint64_t AADevice.heartRateMonitorEnabled.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._heartRateMonitorEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for AADevice();
  v5 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v7);
  v6 = v7;
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v8, v4, (uint64_t)&v6, v4, v5, a1);
}

uint64_t AADevice.$heartRateMonitorEnabled.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAMultiState>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t key path getter for AADevice.hideEarDetectionCapability : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 664))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.hideEarDetectionCapability : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 672))(v3);
  return swift_release();
}

uint64_t AADevice.hideEarDetectionCapability.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.hideEarDetectionCapability.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.hideEarDetectionCapability.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.hideEarDetectionCapability.modify;
}

uint64_t AADevice.hideEarDetectionCapability.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._hideEarDetectionCapability@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

uint64_t AADevice.$hideEarDetectionCapability.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAFeatureCapability>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t variable initialization expression of AADevice.identifier()
{
  return 0;
}

uint64_t key path getter for AADevice.identifier : AADevice@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 696))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for AADevice.identifier : AADevice(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 704))(v4, v6);
  return swift_release();
}

uint64_t AADevice.identifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 560);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t AADevice.identifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 560) = a1;
  *(_QWORD *)(v2 + 568) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*AADevice.identifier.modify())()
{
  swift_beginAccess();
  return AADevice.identifier.modify;
}

uint64_t AADevice.identifier.modify()
{
  return swift_endAccess();
}

uint64_t key path getter for AADevice.streamStateAoS : AADevice@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 720))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.streamStateAoS : AADevice(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 728))(v3);
  return swift_release();
}

uint64_t AADevice.streamStateAoS.getter()
{
  uint64_t v0;
  uint64_t v2;
  _QWORD *KeyPath;
  unsigned int v4;
  unsigned __int8 v5;
  uint64_t v6;

  v6 = v0;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = swift_getKeyPath();
  static AADeviceProperty.subscript.getter(v0, KeyPath, v2, (uint64_t)&v5);
  v4 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v4;
}

uint64_t AADevice.streamStateAoS.setter(char a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *KeyPath;
  char v6;
  uint64_t v7;
  char v8;

  v8 = a1;
  v7 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  v2 = (_QWORD *)swift_getKeyPath();
  v6 = a1;
  return static AADeviceProperty.subscript.setter((uint64_t)&v6, v1, KeyPath, v2);
}

uint64_t (*AADevice.streamStateAoS.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *KeyPath;
  uint64_t v5;

  *a1 = v1;
  swift_retain();
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = (uint64_t)KeyPath;
  v5 = swift_getKeyPath();
  a1[2] = v5;
  swift_retain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(v1, KeyPath, v5, (uint64_t)(a1 + 3));
  return AADevice.streamStateAoS.modify;
}

uint64_t AADevice.streamStateAoS.modify(uint64_t a1, char a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((a2 & 1) != 0)
  {
    v3 = *(_QWORD **)(a1 + 16);
    v4 = *(_QWORD **)(a1 + 8);
    v5 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 25, v5, v4, v3);
  }
  else
  {
    v6 = *(_QWORD **)(a1 + 16);
    v7 = *(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static AADeviceProperty.subscript.setter(a1 + 26, v8, v7, v6);
  }
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t variable initialization expression of AADevice._streamStateAoS@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  char v6;
  char v7;

  KeyPath = swift_getKeyPath();
  v7 = 0;
  v3 = type metadata accessor for AADevice();
  v6 = 1;
  v4 = type metadata accessor for AAStreamStateAoS();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS();
  return AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v7, v3, (uint64_t)&v6, v3, v4, a1);
}

unint64_t lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS;
  if (!lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS)
  {
    v0 = type metadata accessor for AAStreamStateAoS();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAStreamStateAoS, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS;
  if (!lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS)
  {
    v0 = type metadata accessor for AAStreamStateAoS();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for AAStreamStateAoS, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AAStreamStateAoS and conformance AAStreamStateAoS);
    return v1;
  }
  return v3;
}

uint64_t AADevice.$streamStateAoS.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AADeviceProperty<AADevice, AAStreamStateAoS>);
  AADeviceProperty.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t variable initialization expression of AADevice.underlyingDevice()
{
  return 0;
}

uint64_t key path getter for AADevice.underlyingDevice : AADevice@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 752))(v2);
  return swift_release();
}

uint64_t key path setter for AADevice.underlyingDevice : AADevice(id *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of AudioAccessoryDevice?(a1, &v6);
  v4 = v6;
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 760))(v4);
  return swift_release();
}

void *AADevice.underlyingDevice.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v0 + 616);
  v1 = v3;
  swift_endAccess();
  return v3;
}

void AADevice.underlyingDevice.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;

  v2 = a1;
  swift_beginAccess();
  v3 = *(void **)(v1 + 616);
  *(_QWORD *)(v1 + 616) = a1;

  swift_endAccess();
}

uint64_t (*AADevice.underlyingDevice.modify())()
{
  swift_beginAccess();
  return AADevice.underlyingDevice.modify;
}

uint64_t AADevice.underlyingDevice.modify()
{
  return swift_endAccess();
}

Swift::Void __swiftcall AADevice.updateWithDevice(_:)(AudioAccessoryDevice *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  AudioAccessoryDevice *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  AudioAccessoryDevice *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  AudioAccessoryDevice *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  AudioAccessoryDevice *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  AudioAccessoryDevice *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE **v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  uint32_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  NSObject *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint8_t *v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE **v148;
  uint64_t *v149;
  uint64_t *v150;
  uint64_t v151;
  id v152;
  void (*v153)(char *, uint64_t, uint64_t);
  unint64_t v154;
  unint64_t v155;
  uint64_t *v156;
  unint64_t v157;
  uint32_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  NSObject *v180;
  int v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  AudioAccessoryDevice *v188;
  uint64_t v189;
  _QWORD *v190;
  unint64_t v191;
  char *v192;
  unint64_t v193;
  char *v194;
  void *v195;
  uint64_t (*v196)(uint64_t, uint64_t, uint64_t);
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t (*v201)(uint64_t, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205[2];
  uint32_t v206;
  uint64_t v207;
  uint32_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;

  v188 = a1;
  v184 = MEMORY[0x24BEE6930];
  v211 = 0;
  v210 = 0;
  v209 = 0;
  v185 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v186 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v3);
  v187 = (char *)&v92 - v186;
  v189 = type metadata accessor for Logger();
  v190 = *(_QWORD **)(v189 - 8);
  v191 = (v190[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v188, v4);
  v192 = (char *)&v92 - v191;
  v193 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5, (char *)&v92 - v191);
  v194 = (char *)&v92 - v193;
  v211 = v7;
  v210 = v1;
  v195 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 752))();
  if (v195)
  {
    v182 = v195;
    v8 = v194;
    v152 = v195;
    v209 = v195;
    v9 = Logger.shared.unsafeMutableAddressor();
    v153 = (void (*)(char *, uint64_t, uint64_t))v190[2];
    v153(v8, v9, v189);
    v10 = v188;
    v165 = 7;
    v166 = swift_allocObject();
    *(_QWORD *)(v166 + 16) = v188;
    v180 = Logger.logObject.getter();
    v181 = static os_log_type_t.default.getter();
    v156 = &v207;
    v164 = 32;
    v207 = 32;
    v154 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v155 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v157 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v158 = v208;
    v162 = 17;
    v168 = swift_allocObject();
    v161 = 32;
    *(_BYTE *)(v168 + 16) = 32;
    v169 = swift_allocObject();
    v163 = 8;
    *(_BYTE *)(v169 + 16) = 8;
    v11 = swift_allocObject();
    v159 = v11;
    *(_QWORD *)(v11 + 16) = implicit closure #1 in AADevice.updateWithDevice(_:);
    *(_QWORD *)(v11 + 24) = 0;
    v12 = swift_allocObject();
    v13 = v159;
    v170 = v12;
    *(_QWORD *)(v12 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_1;
    *(_QWORD *)(v12 + 24) = v13;
    v171 = swift_allocObject();
    *(_BYTE *)(v171 + 16) = 0;
    v172 = swift_allocObject();
    *(_BYTE *)(v172 + 16) = v163;
    v14 = swift_allocObject();
    v160 = v14;
    *(_QWORD *)(v14 + 16) = implicit closure #2 in AADevice.updateWithDevice(_:);
    *(_QWORD *)(v14 + 24) = 0;
    v15 = swift_allocObject();
    v16 = v160;
    v173 = v15;
    *(_QWORD *)(v15 + 16) = _sSiIegd_SiIegr_TRTA_0;
    *(_QWORD *)(v15 + 24) = v16;
    v174 = swift_allocObject();
    *(_BYTE *)(v174 + 16) = v161;
    v175 = swift_allocObject();
    *(_BYTE *)(v175 + 16) = v163;
    v17 = swift_allocObject();
    v18 = v166;
    v167 = v17;
    *(_QWORD *)(v17 + 16) = partial apply for implicit closure #3 in AADevice.updateWithDevice(_:);
    *(_QWORD *)(v17 + 24) = v18;
    v19 = swift_allocObject();
    v20 = v167;
    v177 = v19;
    *(_QWORD *)(v19 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v19 + 24) = v20;
    v179 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v176 = _allocateUninitializedArray<A>(_:)();
    v178 = v21;
    swift_retain();
    v22 = v168;
    v23 = v178;
    *v178 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
    v23[1] = v22;
    swift_retain();
    v24 = v169;
    v25 = v178;
    v178[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v25[3] = v24;
    swift_retain();
    v26 = v170;
    v27 = v178;
    v178[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
    v27[5] = v26;
    swift_retain();
    v28 = v171;
    v29 = v178;
    v178[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v29[7] = v28;
    swift_retain();
    v30 = v172;
    v31 = v178;
    v178[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v31[9] = v30;
    swift_retain();
    v32 = v173;
    v33 = v178;
    v178[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
    v33[11] = v32;
    swift_retain();
    v34 = v174;
    v35 = v178;
    v178[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[13] = v34;
    swift_retain();
    v36 = v175;
    v37 = v178;
    v178[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[15] = v36;
    swift_retain();
    v38 = v177;
    v39 = v178;
    v178[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[17] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v180, (os_log_type_t)v181))
    {
      v40 = v185;
      v145 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v146 = createStorage<A>(capacity:type:)(0);
      v147 = createStorage<A>(capacity:type:)(2);
      v148 = &v200;
      v200 = v145;
      v149 = &v199;
      v199 = v146;
      v150 = &v198;
      v198 = v147;
      serialize(_:at:)(2, &v200);
      serialize(_:at:)(3, v148);
      v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
      v197 = v168;
      closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)v148, (uint64_t)v149, (uint64_t)v150);
      v151 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v197 = v169;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v142 = 0;
        v42 = v142;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
        v197 = v170;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v141 = v42;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v197 = v171;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v140 = 0;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v197 = v172;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v139 = 0;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0;
        v197 = v173;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v138 = 0;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v197 = v174;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v137 = 0;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v197 = v175;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v136 = 0;
        v196 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v197 = v177;
        closure #1 in osLogInternal(_:log:type:)(&v196, (uint64_t)&v200, (uint64_t)&v199, (uint64_t)&v198);
        v135 = 0;
        _os_log_impl(&dword_23DAB4000, v180, (os_log_type_t)v181, "HeadphoneManager: %s: %ld::: value changed updateDevice: %s", v145, v158);
        destroyStorage<A>(_:count:)(v146, 0, v144);
        destroyStorage<A>(_:count:)(v147, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v145, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v143 = v135;
      }
    }
    else
    {
      v41 = v185;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v143 = v41;
    }
    v43 = v192;
    v111 = v143;

    v112 = (void (*)(char *, uint64_t))v190[1];
    v112(v194, v189);
    v44 = Logger.shared.unsafeMutableAddressor();
    v153(v43, v44, v189);
    swift_retain();
    v133 = Logger.logObject.getter();
    v134 = static os_log_type_t.default.getter();
    v119 = 32;
    v205[1] = (_BYTE *)32;
    UnsignedInteger<>.init<A>(_:)();
    v113 = v206;
    v117 = 17;
    v120 = 7;
    v122 = swift_allocObject();
    v116 = 32;
    *(_BYTE *)(v122 + 16) = 32;
    v123 = swift_allocObject();
    v118 = 8;
    *(_BYTE *)(v123 + 16) = 8;
    v45 = swift_allocObject();
    v114 = v45;
    *(_QWORD *)(v45 + 16) = implicit closure #4 in AADevice.updateWithDevice(_:);
    *(_QWORD *)(v45 + 24) = 0;
    v46 = swift_allocObject();
    v47 = v114;
    v124 = v46;
    *(_QWORD *)(v46 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v46 + 24) = v47;
    v125 = swift_allocObject();
    *(_BYTE *)(v125 + 16) = 0;
    v126 = swift_allocObject();
    *(_BYTE *)(v126 + 16) = v118;
    v48 = swift_allocObject();
    v115 = v48;
    *(_QWORD *)(v48 + 16) = implicit closure #5 in AADevice.updateWithDevice(_:);
    *(_QWORD *)(v48 + 24) = 0;
    v49 = swift_allocObject();
    v50 = v115;
    v127 = v49;
    *(_QWORD *)(v49 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v49 + 24) = v50;
    v128 = swift_allocObject();
    *(_BYTE *)(v128 + 16) = v116;
    v129 = swift_allocObject();
    *(_BYTE *)(v129 + 16) = v118;
    v51 = swift_allocObject();
    v52 = v183;
    v121 = v51;
    *(_QWORD *)(v51 + 16) = partial apply for implicit closure #6 in AADevice.updateWithDevice(_:);
    *(_QWORD *)(v51 + 24) = v52;
    v53 = swift_allocObject();
    v54 = v121;
    v131 = v53;
    *(_QWORD *)(v53 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v53 + 24) = v54;
    v130 = _allocateUninitializedArray<A>(_:)();
    v132 = v55;
    swift_retain();
    v56 = v122;
    v57 = v132;
    *v132 = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[1] = v56;
    swift_retain();
    v58 = v123;
    v59 = v132;
    v132[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v59[3] = v58;
    swift_retain();
    v60 = v124;
    v61 = v132;
    v132[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v61[5] = v60;
    swift_retain();
    v62 = v125;
    v63 = v132;
    v132[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v63[7] = v62;
    swift_retain();
    v64 = v126;
    v65 = v132;
    v132[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v65[9] = v64;
    swift_retain();
    v66 = v127;
    v67 = v132;
    v132[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v67[11] = v66;
    swift_retain();
    v68 = v128;
    v69 = v132;
    v132[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v69[13] = v68;
    swift_retain();
    v70 = v129;
    v71 = v132;
    v132[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v71[15] = v70;
    swift_retain();
    v72 = v131;
    v73 = v132;
    v132[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v73[17] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v133, (os_log_type_t)v134))
    {
      v74 = v111;
      v104 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v105 = createStorage<A>(capacity:type:)(0);
      v106 = createStorage<A>(capacity:type:)(2);
      v107 = v205;
      v205[0] = v104;
      v108 = &v204;
      v204 = v105;
      v109 = &v203;
      v203 = v106;
      serialize(_:at:)(2, v205);
      serialize(_:at:)(3, v107);
      v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v202 = v122;
      closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v107, (uint64_t)v108, (uint64_t)v109);
      v110 = v74;
      if (v74)
      {
        __break(1u);
      }
      else
      {
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v123;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v102 = 0;
        v75 = v102;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v124;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v101 = v75;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v125;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v100 = 0;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v126;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v99 = 0;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v202 = v127;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v98 = 0;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v128;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v97 = 0;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v129;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        v96 = 0;
        v201 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v202 = v131;
        closure #1 in osLogInternal(_:log:type:)(&v201, (uint64_t)v205, (uint64_t)&v204, (uint64_t)&v203);
        _os_log_impl(&dword_23DAB4000, v133, (os_log_type_t)v134, "HeadphoneManager: %s: %ld::: value changed underlying: %s", v104, v113);
        destroyStorage<A>(_:count:)(v105, 0, v103);
        destroyStorage<A>(_:count:)(v106, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v104, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    v112(v192, v189);
    v94 = 0;
    v76 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v187, 1);
    swift_retain();
    v77 = v188;
    type metadata accessor for MainActor();
    v95 = static MainActor.shared.getter();
    v78 = swift_allocObject();
    v79 = v184;
    v80 = v183;
    v81 = v188;
    v82 = (_QWORD *)v78;
    v83 = (uint64_t)v187;
    v82[2] = v95;
    v82[3] = v79;
    v82[4] = v80;
    v82[5] = v81;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v83, (uint64_t)&async function pointer to partial apply for closure #2 in AADevice.updateWithDevice(_:), (uint64_t)v82, MEMORY[0x24BEE4AE0] + 8);
    swift_release();

  }
  else
  {
    v92 = 0;
    v84 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v84 - 8) + 56))(v187, 1);
    swift_retain();
    v85 = v188;
    type metadata accessor for MainActor();
    v93 = static MainActor.shared.getter();
    v86 = swift_allocObject();
    v87 = v184;
    v88 = v183;
    v89 = v188;
    v90 = (_QWORD *)v86;
    v91 = (uint64_t)v187;
    v90[2] = v93;
    v90[3] = v87;
    v90[4] = v88;
    v90[5] = v89;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v91, (uint64_t)&async function pointer to partial apply for closure #1 in AADevice.updateWithDevice(_:), (uint64_t)v90, MEMORY[0x24BEE4AE0] + 8);
    swift_release();
  }
}

uint64_t closure #1 in AADevice.updateWithDevice(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a5;
  v5[5] = a4;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in AADevice.updateWithDevice(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v4;

  v4 = (void *)v0[6];
  v1 = v0[5];
  v0[2] = v0;
  v2 = v4;
  (*(void (**)(void *))(*(_QWORD *)v1 + 760))(v4);
  AADevice.updatePropertiesFor(updatedDevice:)(v4);
  swift_release();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t sub_23DAFE9D0()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AADevice.updateWithDevice(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in AADevice.updateWithDevice(_:);
  return closure #1 in AADevice.updateWithDevice(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in AADevice.updateWithDevice(_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;

  v11 = type metadata accessor for TaskPriority();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of TaskPriority?(a1);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
  }
  v6 = *(_QWORD *)(a3 + 16);
  swift_unknownObjectRetain();
  if (v6)
  {
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = a4;
  v5[3] = a2;
  v5[4] = a3;
  return swift_task_create();
}

uint64_t implicit closure #1 in AADevice.updateWithDevice(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithDevice(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in AADevice.updateWithDevice(_:)()
{
  return 93;
}

uint64_t implicit closure #3 in AADevice.updateWithDevice(_:)(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_23DAFEDE4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in AADevice.updateWithDevice(_:)()
{
  uint64_t v0;

  return implicit closure #3 in AADevice.updateWithDevice(_:)(*(void **)(v0 + 16));
}

uint64_t implicit closure #4 in AADevice.updateWithDevice(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithDevice(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #5 in AADevice.updateWithDevice(_:)()
{
  return 94;
}

uint64_t implicit closure #6 in AADevice.updateWithDevice(_:)(uint64_t a1)
{
  id v1;
  id v3;
  uint64_t v4;
  id v5;

  v3 = (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 752))(a1);
  v1 = v3;
  v5 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioAccessoryDevice?);
  v4 = Optional.debugDescription.getter();
  outlined destroy of AudioAccessoryDevice?(&v5);

  return v4;
}

uint64_t closure #2 in AADevice.updateWithDevice(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a5;
  v5[5] = a4;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #2 in AADevice.updateWithDevice(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  void *v4;

  v4 = (void *)v0[6];
  v1 = v0[5];
  v0[2] = v0;
  v2 = v4;
  (*(void (**)(void *))(*(_QWORD *)v1 + 760))(v4);
  AADevice.updatePropertiesFor(updatedDevice:)(v4);
  swift_release();
  return (*(uint64_t (**)(void))(v0[2] + 8))();
}

uint64_t AADevice.updatePropertiesFor(updatedDevice:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;

  v10 = a1;
  v9 = v1;
  v8 = 2;
  AADevice._deviceRemoteSendState.setter(&v8);
  (*(void (**)(id))(*(_QWORD *)v7 + 264))(objc_msgSend(a1, sel_acceptReplyPlayPauseConfig));
  (*(void (**)(id))(*(_QWORD *)v7 + 480))(objc_msgSend(a1, sel_autoANCCapability));
  (*(void (**)(id))(*(_QWORD *)v7 + 296))(objc_msgSend(a1, sel_autoANCStrength));
  (*(void (**)(id))(*(_QWORD *)v7 + 328))(objc_msgSend(a1, sel_bobbleConfig));
  (*(void (**)(id))(*(_QWORD *)v7 + 360))(objc_msgSend(a1, sel_declineDismissSkipConfig));
  (*(void (**)(id))(*(_QWORD *)v7 + 392))(objc_msgSend(a1, sel_headGestureToggle));
  (*(void (**)(id))(*(_QWORD *)v7 + 424))(objc_msgSend(a1, sel_headGestureProxCardShown));
  (*(void (**)(id))(*(_QWORD *)v7 + 512))(objc_msgSend(a1, sel_bobbleCapability));
  (*(void (**)(id))(*(_QWORD *)v7 + 544))(objc_msgSend(a1, sel_caseSoundCapability));
  (*(void (**)(id))(*(_QWORD *)v7 + 576))(objc_msgSend(a1, sel_earTipFitTestCapability));
  (*(void (**)(id))(*(_QWORD *)v7 + 608))(objc_msgSend(a1, sel_frequencyBand));
  (*(void (**)(id))(*(_QWORD *)v7 + 640))(objc_msgSend(a1, sel_heartRateMonitorEnabled));
  (*(void (**)(id))(*(_QWORD *)v7 + 672))(objc_msgSend(a1, sel_hideEarDetectionCapability));
  v5 = objc_msgSend(a1, sel_identifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 704))(v2);

  (*(void (**)(id))(*(_QWORD *)v7 + 728))(objc_msgSend(a1, sel_streamStateAoS));
  v3 = AudioAccessoryDevice.btAddress.getter();
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 800))(v3);
  return $defer #1 () in AADevice.updatePropertiesFor(updatedDevice:)(v7);
}

uint64_t $defer #1 () in AADevice.updatePropertiesFor(updatedDevice:)(uint64_t a1)
{
  char v2;
  uint64_t v3;

  v3 = a1;
  v2 = 0;
  return AADevice._deviceRemoteSendState.setter(&v2);
}

uint64_t variable initialization expression of AADevice.btAddress()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t key path getter for AADevice.btAddress : AADevice@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 792))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for AADevice.btAddress : AADevice(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 800))(v4, v6);
  return swift_release();
}

uint64_t AADevice.btAddress.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 624);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t AADevice.btAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 624) = a1;
  *(_QWORD *)(v2 + 632) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*AADevice.btAddress.modify())()
{
  swift_beginAccess();
  return AADevice.btAddress.modify;
}

uint64_t AADevice.btAddress.modify()
{
  return swift_endAccess();
}

uint64_t AADevice.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of AADeviceProperty<AADevice, AAHeadGestureConfig>();
  outlined destroy of AADeviceProperty<AADevice, AAAutoANCStrength>();
  outlined destroy of AADeviceProperty<AADevice, AABobbleConfiguration>();
  outlined destroy of AADeviceProperty<AADevice, AAHeadGestureConfig>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of Data?(v0 + 264);
  outlined destroy of AADeviceProperty<AADevice, AAAutoANCCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of AADeviceProperty<AADevice, AAFrequencyBand>();
  outlined destroy of AADeviceProperty<AADevice, AAMultiState>();
  outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>();
  outlined destroy of String?();
  outlined destroy of AADeviceProperty<AADevice, AAStreamStateAoS>();
  outlined destroy of AudioAccessoryDevice?((id *)(v0 + 616));
  outlined destroy of String();
  return v2;
}

uint64_t AADevice.__deallocating_deinit()
{
  AADevice.deinit();
  return swift_deallocClassInstance();
}

Swift::String *AADevice.__allocating_init()()
{
  swift_allocObject();
  return AADevice.init()();
}

Swift::String *AADevice.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String *result;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String *v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  int v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  char v55;
  char v56;
  char v57;
  int v58;
  char v59;
  char v60;
  char v61;
  uint64_t v62;

  v62 = v0;
  *(_BYTE *)(v0 + 16) = 0;
  KeyPath = swift_getKeyPath();
  v61 = 0;
  v23 = type metadata accessor for AADevice();
  v12 = type metadata accessor for AAHeadGestureConfig();
  lazy protocol witness table accessor for type AADevice and conformance AADevice();
  lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v60);
  v59 = v60;
  AADeviceProperty.init(_:_:_:_:)(KeyPath, (uint64_t)&v61, v23, (uint64_t)&v59, v23, v12, v0 + 24);
  v7 = swift_getKeyPath();
  v58 = 0;
  v8 = type metadata accessor for AAAutoANCStrength();
  lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v57);
  v56 = v57;
  AADeviceProperty.init(_:_:_:_:)(v7, (uint64_t)&v58, v23, (uint64_t)&v56, v23, v8, v0 + 64);
  v9 = swift_getKeyPath();
  v55 = 0;
  v10 = type metadata accessor for AABobbleConfiguration();
  lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v54);
  v53 = v54;
  AADeviceProperty.init(_:_:_:_:)(v9, (uint64_t)&v55, v23, (uint64_t)&v53, v23, v10, v0 + 104);
  v11 = swift_getKeyPath();
  v52 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v51);
  v50 = v51;
  AADeviceProperty.init(_:_:_:_:)(v11, (uint64_t)&v52, v23, (uint64_t)&v50, v23, v12, v0 + 144);
  v13 = swift_getKeyPath();
  v49 = 0;
  v21 = type metadata accessor for AAMultiState();
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v48);
  v47 = v48;
  AADeviceProperty.init(_:_:_:_:)(v13, (uint64_t)&v49, v23, (uint64_t)&v47, v23, v21, v0 + 184);
  v14 = swift_getKeyPath();
  v46 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v45);
  v44 = v45;
  AADeviceProperty.init(_:_:_:_:)(v14, (uint64_t)&v46, v23, (uint64_t)&v44, v23, v21, v0 + 224);
  *(_QWORD *)(v0 + 264) = 0;
  *(_QWORD *)(v0 + 272) = 0xF000000000000000;
  v16 = swift_getKeyPath();
  v43 = 0;
  v42 = 1;
  v15 = type metadata accessor for AAAutoANCCapability();
  lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability();
  AADeviceProperty.init(_:_:_:_:)(v16, (uint64_t)&v43, v23, (uint64_t)&v42, v23, v15, v0 + 280);
  v17 = swift_getKeyPath();
  v41 = 0;
  v40 = 1;
  v22 = type metadata accessor for AAFeatureCapability();
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  AADeviceProperty.init(_:_:_:_:)(v17, (uint64_t)&v41, v23, (uint64_t)&v40, v23, v22, v0 + 320);
  v1 = swift_getKeyPath();
  v39 = 0;
  v38 = 1;
  AADeviceProperty.init(_:_:_:_:)(v1, (uint64_t)&v39, v23, (uint64_t)&v38, v23, v22, v0 + 360);
  v2 = swift_getKeyPath();
  v37 = 0;
  v36 = 1;
  AADeviceProperty.init(_:_:_:_:)(v2, (uint64_t)&v37, v23, (uint64_t)&v36, v23, v22, v0 + 400);
  v19 = swift_getKeyPath();
  v35 = 0;
  v34 = 1;
  v18 = type metadata accessor for AAFrequencyBand();
  lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand();
  AADeviceProperty.init(_:_:_:_:)(v19, (uint64_t)&v35, v23, (uint64_t)&v34, v23, v18, v0 + 440);
  v20 = swift_getKeyPath();
  v33 = 0;
  default argument 3 of AADeviceProperty.init(_:_:_:_:)(&v32);
  v31 = v32;
  AADeviceProperty.init(_:_:_:_:)(v20, (uint64_t)&v33, v23, (uint64_t)&v31, v23, v21, v0 + 480);
  v3 = swift_getKeyPath();
  v30 = 0;
  v29 = 1;
  AADeviceProperty.init(_:_:_:_:)(v3, (uint64_t)&v30, v23, (uint64_t)&v29, v23, v22, v0 + 520);
  *(_QWORD *)(v0 + 560) = 0;
  *(_QWORD *)(v0 + 568) = 0;
  v25 = swift_getKeyPath();
  v28 = 0;
  v27 = 1;
  v24 = type metadata accessor for AAStreamStateAoS();
  lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS();
  AADeviceProperty.init(_:_:_:_:)(v25, (uint64_t)&v28, v23, (uint64_t)&v27, v23, v24, v0 + 576);
  *(_QWORD *)(v0 + 616) = 0;
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unknown", 7uLL, 1);
  result = v26;
  v26[39] = v4;
  return result;
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance AADevice@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for AADevice();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t AADevice.deviceRemoteSendState.getter@<X0>(_BYTE *a1@<X8>)
{
  return AADevice._deviceRemoteSendState.getter(a1);
}

uint64_t protocol witness for AADeviceConfigurable.underlyingDevice.getter in conformance AADevice()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t protocol witness for AADeviceConfigurable.btAddress.getter in conformance AADevice()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t protocol witness for AADeviceConfigurable.deviceRemoteSendState.getter in conformance AADevice@<X0>(_BYTE *a1@<X8>)
{
  return AADevice.deviceRemoteSendState.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAHeadGestureConfig()
{
  lazy protocol witness table accessor for type AAHeadGestureConfig and conformance AAHeadGestureConfig();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAAutoANCStrength()
{
  lazy protocol witness table accessor for type AAAutoANCStrength and conformance AAAutoANCStrength();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AABobbleConfiguration()
{
  lazy protocol witness table accessor for type AABobbleConfiguration and conformance AABobbleConfiguration();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAMultiState()
{
  lazy protocol witness table accessor for type AAMultiState and conformance AAMultiState();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAAutoANCCapability()
{
  lazy protocol witness table accessor for type AAAutoANCCapability and conformance AAAutoANCCapability();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAFeatureCapability()
{
  lazy protocol witness table accessor for type AAFeatureCapability and conformance AAFeatureCapability();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAFrequencyBand()
{
  lazy protocol witness table accessor for type AAFrequencyBand and conformance AAFrequencyBand();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AAStreamStateAoS()
{
  lazy protocol witness table accessor for type AAStreamStateAoS and conformance AAStreamStateAoS();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAHeadGestureConfig@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AAHeadGestureConfig.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAHeadGestureConfig.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAHeadGestureConfig@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AAHeadGestureConfig.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAHeadGestureConfig.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAAutoANCStrength@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = AAAutoANCStrength.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t AAAutoANCStrength.init(rawValue:)(int a1)
{
  uint64_t v2;

  LODWORD(v2) = a1;
  BYTE4(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAAutoANCStrength@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = AAAutoANCStrength.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAAutoANCStrength.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AABobbleConfiguration@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AABobbleConfiguration.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AABobbleConfiguration.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AABobbleConfiguration@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AABobbleConfiguration.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AABobbleConfiguration.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAMultiState@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AAMultiState.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAMultiState.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAMultiState@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AAMultiState.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAMultiState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAAutoANCCapability@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = AAAutoANCCapability.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t AAAutoANCCapability.init(rawValue:)(int a1)
{
  uint64_t v2;

  LODWORD(v2) = a1;
  BYTE4(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAAutoANCCapability@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = AAAutoANCCapability.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAFrequencyBand@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AAFrequencyBand.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAFrequencyBand.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAFrequencyBand@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AAFrequencyBand.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAFrequencyBand.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AAStreamStateAoS@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = AAStreamStateAoS.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t AAStreamStateAoS.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AAStreamStateAoS@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = AAStreamStateAoS.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t AAStreamStateAoS.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTR(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 16) = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_;
  return v5(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23DB005E4()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB00614()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00644()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_1()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB0068C()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB006D4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00704()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00734()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23DB0077C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_23DB00818()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00848()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00878()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB008C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in AADevice.updateWithDevice(_:)()
{
  uint64_t v0;

  return implicit closure #6 in AADevice.updateWithDevice(_:)(v0);
}

uint64_t sub_23DB00910()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00940()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00970()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB009B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB00A00()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00A30()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00A60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23DB00AA8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t closure #1 in OSLogArguments.append<A>(_:)partial apply(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_23DB00B44()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00B74()
{
  return swift_deallocObject();
}

uint64_t sub_23DB00BA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB00BEC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB00C34()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AADevice.updateWithDevice(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #2 in AADevice.updateWithDevice(_:);
  return closure #2 in AADevice.updateWithDevice(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #2 in AADevice.updateWithDevice(_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAHeadGestureConfig>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAAutoANCStrength>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AABobbleConfiguration>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAMultiState>()
{
  swift_release();
  swift_release();
  swift_release();
}

uint64_t outlined destroy of Data?(uint64_t a1)
{
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000000) != 0xF000000000000000)
    outlined consume of Data._Representation(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAAutoANCCapability>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAFeatureCapability>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAFrequencyBand>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<AADevice, AAStreamStateAoS>()
{
  swift_release();
  swift_release();
  swift_release();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in AADevice()
{
  return MEMORY[0x24BDB9D70];
}

unint64_t instantiation function for generic protocol witness table for AADevice(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type AADevice and conformance AADevice();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for AADevice()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AADevice.acceptReplyPlayPauseConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of AADevice.acceptReplyPlayPauseConfig.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of AADevice.acceptReplyPlayPauseConfig.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of AADevice.$acceptReplyPlayPauseConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of AADevice.autoANCStrength.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of AADevice.autoANCStrength.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of AADevice.autoANCStrength.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of AADevice.$autoANCStrength.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of AADevice.bobbleConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of AADevice.bobbleConfig.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of AADevice.bobbleConfig.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of AADevice.$bobbleConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of AADevice.declineDismissSkipConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of AADevice.declineDismissSkipConfig.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of AADevice.declineDismissSkipConfig.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of AADevice.$declineDismissSkipConfig.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of AADevice.headGestureToggle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of AADevice.headGestureToggle.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of AADevice.headGestureToggle.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of AADevice.$headGestureToggle.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of AADevice.headGestureProxCardShown.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of AADevice.headGestureProxCardShown.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
}

uint64_t dispatch thunk of AADevice.headGestureProxCardShown.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 432))();
}

uint64_t dispatch thunk of AADevice.$headGestureProxCardShown.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of AADevice.bluetoothAddressData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of AADevice.autoANCCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t dispatch thunk of AADevice.autoANCCapability.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 480))();
}

uint64_t dispatch thunk of AADevice.autoANCCapability.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 488))();
}

uint64_t dispatch thunk of AADevice.$autoANCCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 496))();
}

uint64_t dispatch thunk of AADevice.bobbleCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of AADevice.bobbleCapability.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of AADevice.bobbleCapability.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 520))();
}

uint64_t dispatch thunk of AADevice.$bobbleCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 528))();
}

uint64_t dispatch thunk of AADevice.caseSoundCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 536))();
}

uint64_t dispatch thunk of AADevice.caseSoundCapability.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 544))();
}

uint64_t dispatch thunk of AADevice.caseSoundCapability.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 552))();
}

uint64_t dispatch thunk of AADevice.$caseSoundCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 560))();
}

uint64_t dispatch thunk of AADevice.earTipFitTestCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 568))();
}

uint64_t dispatch thunk of AADevice.earTipFitTestCapability.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of AADevice.earTipFitTestCapability.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of AADevice.$earTipFitTestCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 592))();
}

uint64_t dispatch thunk of AADevice.frequencyBand.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 600))();
}

uint64_t dispatch thunk of AADevice.frequencyBand.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 608))();
}

uint64_t dispatch thunk of AADevice.frequencyBand.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of AADevice.$frequencyBand.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 624))();
}

uint64_t dispatch thunk of AADevice.heartRateMonitorEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of AADevice.heartRateMonitorEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of AADevice.heartRateMonitorEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 648))();
}

uint64_t dispatch thunk of AADevice.$heartRateMonitorEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of AADevice.hideEarDetectionCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of AADevice.hideEarDetectionCapability.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of AADevice.hideEarDetectionCapability.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of AADevice.$hideEarDetectionCapability.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 688))();
}

uint64_t dispatch thunk of AADevice.identifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 696))();
}

uint64_t dispatch thunk of AADevice.identifier.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of AADevice.identifier.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of AADevice.streamStateAoS.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 720))();
}

uint64_t dispatch thunk of AADevice.streamStateAoS.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 728))();
}

uint64_t dispatch thunk of AADevice.streamStateAoS.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 736))();
}

uint64_t dispatch thunk of AADevice.$streamStateAoS.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of AADevice.underlyingDevice.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of AADevice.underlyingDevice.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of AADevice.underlyingDevice.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 768))();
}

uint64_t dispatch thunk of AADevice.updateWithDevice(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of AADevice.btAddress.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 792))();
}

uint64_t dispatch thunk of AADevice.btAddress.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 800))();
}

uint64_t dispatch thunk of AADevice.btAddress.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 808))();
}

_QWORD *outlined init with copy of String?(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  *a2 = *a1;
  v4 = a1[1];
  swift_bridgeObjectRetain();
  result = a2;
  a2[1] = v4;
  return result;
}

uint64_t outlined init with copy of Data?(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  if ((a1[1] & 0xF000000000000000) == 0xF000000000000000)
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
  }
  else
  {
    v3 = *a1;
    v4 = a1[1];
    outlined copy of Data._Representation(*a1, v4);
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  return a2;
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_0()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _swift_stdlib_has_malloc_size_1()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_1(const void *a1)
{
  return malloc_size(a1);
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for TaskPriority();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t sub_23DB01C84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

Swift::Int *deviceNameTextFieldCharacterLimit.unsafeMutableAddressor()
{
  return &deviceNameTextFieldCharacterLimit;
}

uint64_t deviceNameTextFieldCharacterLimit.getter()
{
  return 62;
}

id getDeviceIcon(symbolName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  id v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  id v16;
  id v17;
  const char *v18;
  const char *v19;
  const char *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  unint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Class v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;

  v22 = a1;
  v23 = a2;
  v18 = "Fatal error";
  v19 = "Unexpectedly found nil while unwrapping an Optional value";
  v20 = "HeadphoneManager/HeadphoneUtils.swift";
  v47 = 0;
  v48 = 0;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v21 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?)
                               - 8)
                   + 64)
       + 15) & 0xFFFFFFFFFFFFFFF0;
  v24 = (uint64_t)&v15 - v21;
  v47 = MEMORY[0x24BDAC7A8](v22, v23);
  v48 = v2;
  v25 = 0;
  type metadata accessor for IFSymbol();
  swift_bridgeObjectRetain();
  v3 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v24, 1);
  v39 = IFSymbol.__allocating_init(symbolName:bundleURL:)(v22, v23, v24);
  v46 = v39;
  v32 = type metadata accessor for IFColor();
  v26 = IFColor.__allocating_init(systemColor:)(11);
  v45 = v26;
  v33 = IFColor.__allocating_init(systemColor:)(13);
  v44 = v33;
  type metadata accessor for IFGraphicSymbolDescriptor();
  v40 = IFGraphicSymbolDescriptor.__allocating_init()();
  v43 = v40;
  v31 = 1;
  v28 = specialized _allocateUninitializedArray<A>(_:)();
  v27 = v4;
  v5 = v26;
  v6 = v26;
  v7 = v27;
  v8 = v28;
  v27[3] = v32;
  *v7 = v6;
  v36 = MEMORY[0x24BEE4AD8] + 8;
  _finalizeUninitializedArray<A>(_:)();
  v29 = v8;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setSymbolColors_, isa);

  v35 = specialized _allocateUninitializedArray<A>(_:)();
  v34 = v9;
  v10 = v33;
  v11 = v33;
  v12 = v34;
  v13 = v35;
  v34[3] = v32;
  *v12 = v11;
  _finalizeUninitializedArray<A>(_:)();
  v37 = v13;
  v38 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v40, sel_setEnclosureColors_, v38);

  objc_msgSend(v40, sel_setRenderingMode_, 2);
  v41 = objc_msgSend(v39, sel_imageForGraphicSymbolDescriptor_, v40);
  if (v41)
  {
    v17 = v41;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v16 = v17;
  v42 = v17;

  return v16;
}

unint64_t type metadata accessor for IFSymbol()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for IFSymbol;
  if (!lazy cache variable for type metadata for IFSymbol)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for IFSymbol);
    return ObjCClassMetadata;
  }
  return v2;
}

id IFSymbol.__allocating_init(symbolName:bundleURL:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v3;

  v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc IFSymbol.init(symbolName:bundleURL:)(a1, a2, a3);
}

unint64_t type metadata accessor for IFColor()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for IFColor;
  if (!lazy cache variable for type metadata for IFColor)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for IFColor);
    return ObjCClassMetadata;
  }
  return v2;
}

id IFColor.__allocating_init(systemColor:)(uint64_t a1)
{
  id v1;

  v1 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc IFColor.init(systemColor:)(a1);
}

unint64_t type metadata accessor for IFGraphicSymbolDescriptor()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for IFGraphicSymbolDescriptor;
  if (!lazy cache variable for type metadata for IFGraphicSymbolDescriptor)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for IFGraphicSymbolDescriptor);
    return ObjCClassMetadata;
  }
  return v2;
}

id IFGraphicSymbolDescriptor.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc IFGraphicSymbolDescriptor.init()();
}

uint64_t getSystemPrefsImage()()
{
  assertionFailure(_:file:line:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  return Image.init(systemName:)();
}

uint64_t implicit closure #1 in getSystemPrefsImage()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

uint64_t getBluetoothImage()()
{
  assertionFailure(_:file:line:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  return Image.init(systemName:)();
}

uint64_t implicit closure #1 in getBluetoothImage()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

uint64_t fetchFindMyIcon()()
{
  assertionFailure(_:file:line:)();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  return Image.init(systemName:)();
}

uint64_t implicit closure #1 in fetchFindMyIcon()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

UIImage_optional __swiftcall getIcon(bundleID:)(Swift::String bundleID)
{
  Swift::Bool v1;
  objc_class *v2;
  UIImage_optional result;

  assertionFailure(_:file:line:)();
  v2 = 0;
  result.value.super.isa = v2;
  result.is_nil = v1;
  return result;
}

uint64_t implicit closure #1 in getIcon(bundleID:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("unimplemented function for iOS clients", 0x26uLL, 1)._countAndFlagsBits;
}

id getUTType(hpDevice:)(_QWORD *a1)
{
  Swift::String v1;
  Swift::String v2;
  id v5;
  unsigned __int16 v6;
  id v7;
  void *v9;
  unsigned int v10;

  v9 = (void *)(*(uint64_t (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x210))();
  v10 = objc_msgSend(v9, sel_productID);

  type metadata accessor for CBProductID();
  lazy protocol witness table accessor for type CBProductID and conformance CBProductID();
  if ((== infix<A>(_:_:)() & 1) != 0)
    v10 = 8209;
  if ((== infix<A>(_:_:)() & 1) != 0)
    v10 = 8201;
  type metadata accessor for UTType();
  v5 = (id)(*(uint64_t (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x228))();
  v6 = (unsigned __int16)objc_msgSend(v5, sel_vendorIDBluetooth);

  v7 = @nonobjc UTType.init(_bluetoothProductID:vendorID:)(v10, v6);
  if (v7)
    return v7;
  type metadata accessor for Log();
  static Log.shared.getter();
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphoneSettings: Invalid PID: ", 0x20uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(", using regular headphone", 0x19uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  dispatch thunk of Log.error(_:function:file:line:)();
  swift_bridgeObjectRelease();
  swift_release();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.beats-headphones", 0x1AuLL, 1);
  return @nonobjc UTType.__allocating_init(_:)();
}

uint64_t type metadata accessor for CBProductID()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBProductID;
  if (!lazy cache variable for type metadata for CBProductID)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBProductID);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBProductID and conformance CBProductID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBProductID and conformance CBProductID;
  if (!lazy protocol witness table cache variable for type CBProductID and conformance CBProductID)
  {
    v0 = type metadata accessor for CBProductID();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBProductID, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBProductID and conformance CBProductID);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for UTType()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for UTType;
  if (!lazy cache variable for type metadata for UTType)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for UTType);
    return ObjCClassMetadata;
  }
  return v2;
}

id @nonobjc UTType.__allocating_init(_:)()
{
  id v1;
  id v2;

  v1 = (id)MEMORY[0x24263ADA4]();
  v2 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_typeWithIdentifier_, v1);

  swift_bridgeObjectRelease();
  return v2;
}

id @nonobjc UTType.init(_bluetoothProductID:vendorID:)(unsigned int a1, unsigned __int16 a2)
{
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__typeWithBluetoothProductID_vendorID_, a1, a2);
}

uint64_t checkIsFindMyNetworkSupported(cbDevice:)(void *a1)
{
  char v2;
  char v3;
  char v4;
  char v5;

  objc_msgSend(a1, sel_productID);
  type metadata accessor for CBProductID();
  lazy protocol witness table accessor for type CBProductID and conformance CBProductID();
  if ((== infix<A>(_:_:)() & 1) != 0)
    v5 = 1;
  else
    v5 = == infix<A>(_:_:)();
  if ((v5 & 1) != 0)
    v4 = 1;
  else
    v4 = == infix<A>(_:_:)();
  if ((v4 & 1) != 0)
    v3 = 1;
  else
    v3 = == infix<A>(_:_:)();
  if ((v3 & 1) != 0)
    v2 = 1;
  else
    v2 = == infix<A>(_:_:)();
  return v2 & 1;
}

_QWORD *one-time initialization function for shared()
{
  _QWORD *result;

  type metadata accessor for HPSDeviceAnalytics();
  result = HPSDeviceAnalytics.__allocating_init()();
  static HPSDeviceAnalytics.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for HPSDeviceAnalytics()
{
  return objc_opt_self();
}

_QWORD *HPSDeviceAnalytics.__allocating_init()()
{
  swift_allocObject();
  return HPSDeviceAnalytics.init()();
}

uint64_t *HPSDeviceAnalytics.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static HPSDeviceAnalytics.shared;
}

uint64_t static HPSDeviceAnalytics.shared.getter()
{
  uint64_t v1;

  v1 = *HPSDeviceAnalytics.shared.unsafeMutableAddressor();
  swift_retain();
  return v1;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.featureName()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureName.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureName.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_bridgeObjectRetain();
  *v2 = a1;
  v2[1] = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.keyValuePair.featureName.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.featureName.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.featureValue()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureValue.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.keyValuePair.featureValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.keyValuePair.featureValue.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.featureValue.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.pid()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.keyValuePair.pid.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t HPSDeviceAnalytics.keyValuePair.pid.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = result;
  return result;
}

void (*HPSDeviceAnalytics.keyValuePair.pid.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.pid.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

uint64_t HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

void (*HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.modify())()
{
  return HPSDeviceAnalytics.keyValuePair.adaptiveModeSupported.modify;
}

void __swiftcall HPSDeviceAnalytics.keyValuePair.init()(HeadphoneManager::HPSDeviceAnalytics::keyValuePair *__return_ptr retstr)
{
  Swift::String v1;
  void *object;
  Swift::String __b[3];

  memset(__b, 0, sizeof(__b));
  __b[0] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  object = __b[0]._object;
  retstr->featureName._countAndFlagsBits = __b[0]._countAndFlagsBits;
  retstr->featureName._object = object;
  retstr->featureValue = v1;
  retstr->pid = 0;
  retstr->adaptiveModeSupported = 0;
}

uint64_t default argument 0 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 1 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 2 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return 0;
}

uint64_t default argument 3 of HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)()
{
  return 0;
}

void __swiftcall HPSDeviceAnalytics.keyValuePair.init(featureName:featureValue:pid:adaptiveModeSupported:)(HeadphoneManager::HPSDeviceAnalytics::keyValuePair *__return_ptr retstr, Swift::String featureName, Swift::String featureValue, Swift::Int pid, Swift::Int adaptiveModeSupported)
{
  retstr->featureName = featureName;
  retstr->featureValue = featureValue;
  retstr->pid = pid;
  retstr->adaptiveModeSupported = adaptiveModeSupported;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.caseSound()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSound.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSound.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.caseSound.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.caseSound.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.caseSoundVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.crownRotation()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotation.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.crownRotation.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.crownRotation.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.crownRotationVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenLeftBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenRightBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 80) = a1;
  *(_QWORD *)(v2 + 88) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.cycleBetweenSingleVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.deviceName()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.deviceName.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.deviceName.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.deviceName.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.deviceName.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.disconnect()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.disconnect.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.disconnect.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.disconnect.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.disconnect.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.doubleTap()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTap.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTap.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 112) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.doubleTap.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.doubleTap.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 120);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.doubleTapLeftVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 136);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 136) = a1;
  *(_QWORD *)(v2 + 144) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.doubleTapRightVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.entryPoint()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("macOS_Sidebar", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.entryPoint.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 152);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.entryPoint.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 152) = a1;
  *(_QWORD *)(v2 + 160) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.entryPoint.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.entryPoint.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 168);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 168) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.earTipFitTest.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 176) = a1;
  *(_QWORD *)(v2 + 184) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.earTipFitTestVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.endCallGesture()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 192);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 192) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.endCallGesture.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 200);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 200) = a1;
  *(_QWORD *)(v2 + 208) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.endCallGestureVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 216);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 216) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.findMyNetwork.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 224) = a1;
  *(_QWORD *)(v2 + 232) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.findMyNetworkVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.forgetDevice()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 240);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.forgetDevice.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 248);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 248) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetection.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 256);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 256) = a1;
  *(_QWORD *)(v2 + 264) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.inEarOnHeadDetectionVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.listeningMode()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningMode.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 272);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningMode.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 272) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.listeningMode.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.listeningMode.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 280);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 280) = a1;
  *(_QWORD *)(v2 + 288) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.listeningModeVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 296);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 296) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetect.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 304);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 304) = a1;
  *(_QWORD *)(v2 + 312) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.magneticEarbudDetectVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 320);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 320) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitch.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 328);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 328) = a1;
  *(_QWORD *)(v2 + 336) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.microphoneSwitchVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 344);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 344) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.muteControlGesture.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 352);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 352) = a1;
  *(_QWORD *)(v2 + 360) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.muteControlGestureVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 368);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 368) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.optimizedBudCharging.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 376);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 376) = a1;
  *(_QWORD *)(v2 + 384) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.optimizedBudChargingVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.pressHold()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHold.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 392);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHold.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 392) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.pressHold.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.pressHold.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 400);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 400) = a1;
  *(_QWORD *)(v2 + 408) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.pressHoldLeftBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 416);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 416) = a1;
  *(_QWORD *)(v2 + 424) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.pressHoldRightBudVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.smartRouting()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRouting.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 432);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRouting.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 432) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.smartRouting.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.smartRouting.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 440);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 440) = a1;
  *(_QWORD *)(v2 + 448) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.smartRoutingVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 456);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 456) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.spatialAudioProfile.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 464);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 464) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.spatialAudioTutorial.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 472);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 472) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.viewInFindMy.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 480);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 480) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListening.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 488);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 488) = a1;
  *(_QWORD *)(v2 + 496) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.selectiveSpeechListeningVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.conversationDetect()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 504);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 504) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.conversationDetect.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 512);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 512) = a1;
  *(_QWORD *)(v2 + 520) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.conversationDetectVal.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume()
{
  return 0;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 528);
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 528) = result;
  return result;
}

void (*HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolume.modify;
}

uint64_t variable initialization expression of HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  *(_QWORD *)(v2 + 536) = a1;
  *(_QWORD *)(v2 + 544) = a2;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void (*HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.modify())()
{
  return HPSDeviceAnalytics.headphoneFeatureList.adaptiveVolumeVal.modify;
}

void __swiftcall HPSDeviceAnalytics.headphoneFeatureList.init()(HeadphoneManager::HPSDeviceAnalytics::headphoneFeatureList *__return_ptr retstr)
{
  _BYTE v2[552];
  _BYTE __dst[552];

  bzero(v2, 0x228uLL);
  *(_QWORD *)v2 = 0;
  *(Swift::String *)&v2[8] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[24] = 0;
  *(Swift::String *)&v2[32] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[48] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[64] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[80] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memset(&v2[96], 0, 24);
  *(Swift::String *)&v2[120] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[136] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[152] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("macOS_Sidebar", 0xDuLL, 1);
  *(_QWORD *)&v2[168] = 0;
  *(Swift::String *)&v2[176] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(_QWORD *)&v2[192] = 0;
  *(Swift::String *)&v2[200] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[216] = 0;
  *(Swift::String *)&v2[224] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[240] = 0;
  *(_QWORD *)&v2[248] = 0;
  *(Swift::String *)&v2[256] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[272] = 0;
  *(Swift::String *)&v2[280] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[296] = 0;
  *(Swift::String *)&v2[304] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(_QWORD *)&v2[320] = 0;
  *(Swift::String *)&v2[328] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[344] = 0;
  *(Swift::String *)&v2[352] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(_QWORD *)&v2[368] = 0;
  *(Swift::String *)&v2[376] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1);
  *(_QWORD *)&v2[392] = 0;
  *(Swift::String *)&v2[400] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(Swift::String *)&v2[416] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[432] = 0;
  *(Swift::String *)&v2[440] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memset(&v2[456], 0, 32);
  *(Swift::String *)&v2[488] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[504] = 0;
  *(Swift::String *)&v2[512] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  *(_QWORD *)&v2[528] = 0;
  *(Swift::String *)&v2[536] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  memcpy(__dst, v2, sizeof(__dst));
  memcpy(retstr, __dst, sizeof(HeadphoneManager::HPSDeviceAnalytics::headphoneFeatureList));
}

uint64_t default argument 0 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 1 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 2 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 3 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 4 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 5 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 6 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 7 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 8 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 9 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 10 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 11 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 12 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("macOS_Sidebar", 0xDuLL, 1)._countAndFlagsBits;
}

uint64_t default argument 13 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 14 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 15 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 16 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 17 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 18 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 19 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 20 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 21 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 22 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 23 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 24 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 25 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 26 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 27 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 28 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 29 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 30 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 31 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Unknown", 7uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 32 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 33 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 34 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 35 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 36 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 37 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 38 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 39 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 40 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 41 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 42 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 43 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t default argument 44 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return 0;
}

uint64_t default argument 45 of HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t HPSDeviceAnalytics.headphoneFeatureList.init(caseSound:caseSoundVal:crownRotation:crownRotationVal:cycleBetweenLeftBudVal:cycleBetweenRightBudVal:cycleBetweenSingleVal:deviceName:disconnect:doubleTap:doubleTapLeftVal:doubleTapRightVal:entryPoint:earTipFitTest:earTipFitTestVal:endCallGesture:endCallGestureVal:findMyNetwork:findMyNetworkVal:forgetDevice:inEarOnHeadDetection:inEarOnHeadDetectionVal:listeningMode:listeningModeVal:magneticEarbudDetect:magneticEarbudDetectVal:microphoneSwitch:microphoneSwitchVal:muteControlGesture:muteControlGestureVal:optimizedBudCharging:optimizedBudChargingVal:pressHold:pressHoldLeftBudVal:pressHoldRightBudVal:smartRouting:smartRoutingVal:spatialAudioProfile:spatialAudioTutorial:viewInFindMy:selectiveSpeechListening:selectiveSpeechListeningVal:conversationDetect:conversationDetectVal:adaptiveVolume:adaptiveVolumeVal:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a64;
  uint64_t a65;
  uint64_t a66;
  uint64_t a67;
  uint64_t a68;
  uint64_t a69;
  uint64_t a70;
  uint64_t result;

  *a9 = a1;
  result = a61;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  a9[10] = a12;
  a9[11] = a13;
  a9[12] = a14;
  a9[13] = a15;
  a9[14] = a16;
  a9[15] = a17;
  a9[16] = a18;
  a9[17] = a19;
  a9[18] = a20;
  a9[19] = a21;
  a9[20] = a22;
  a9[21] = a23;
  a9[22] = a24;
  a9[23] = a25;
  a9[24] = a26;
  a9[25] = a27;
  a9[26] = a28;
  a9[27] = a29;
  a9[28] = a30;
  a9[29] = a31;
  a9[30] = a32;
  a9[31] = a33;
  a9[32] = a34;
  a9[33] = a35;
  a9[34] = a36;
  a9[35] = a37;
  a9[36] = a38;
  a9[37] = a39;
  a9[38] = a40;
  a9[39] = a41;
  a9[40] = a42;
  a9[41] = a43;
  a9[42] = a44;
  a9[43] = a45;
  a9[44] = a46;
  a9[45] = a47;
  a9[46] = a48;
  a9[47] = a49;
  a9[48] = a50;
  a9[49] = a51;
  a9[50] = a52;
  a9[51] = a53;
  a9[52] = a54;
  a9[53] = a55;
  a9[54] = a56;
  a9[55] = a57;
  a9[56] = a58;
  a9[57] = a59;
  a9[58] = a60;
  a9[59] = a61;
  a9[60] = a62;
  a9[61] = a63;
  a9[62] = a64;
  a9[63] = a65;
  a9[64] = a66;
  a9[65] = a67;
  a9[66] = a68;
  a9[67] = a69;
  a9[68] = a70;
  return result;
}

void *HPSDeviceAnalytics.featureList.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _BYTE __dst[552];

  swift_beginAccess();
  memcpy(__dst, (const void *)(v1 + 16), sizeof(__dst));
  outlined retain of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
  swift_endAccess();
  return memcpy(a1, __dst, 0x228uLL);
}

uint64_t HPSDeviceAnalytics.featureList.setter(void *__src)
{
  uint64_t v1;
  _BYTE __dst[552];
  _BYTE v4[552];

  memcpy(__dst, __src, sizeof(__dst));
  outlined retain of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
  swift_beginAccess();
  memcpy(v4, (const void *)(v1 + 16), sizeof(v4));
  memcpy((void *)(v1 + 16), __dst, 0x228uLL);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v4);
  swift_endAccess();
  return outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)__dst);
}

uint64_t (*HPSDeviceAnalytics.featureList.modify())()
{
  swift_beginAccess();
  return HPSDeviceAnalytics.featureList.modify;
}

uint64_t HPSDeviceAnalytics.featureList.modify()
{
  return swift_endAccess();
}

uint64_t HPSDeviceAnalytics.eventV2.getter@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  swift_beginAccess();
  v3 = v1[71];
  v4 = v1[72];
  v5 = v1[73];
  v6 = v1[74];
  v7 = v1[75];
  v9 = v1[76];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = swift_endAccess();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v9;
  return result;
}

uint64_t HPSDeviceAnalytics.eventV2.setter(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD __b[6];

  memset(__b, 0, sizeof(__b));
  v8 = a1[1];
  v5 = a1[2];
  v9 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  __b[0] = *a1;
  v4 = __b[0];
  __b[1] = v8;
  __b[2] = v5;
  __b[3] = v9;
  __b[4] = v6;
  __b[5] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  v1[71] = v4;
  v1[72] = v8;
  v1[73] = v5;
  v1[74] = v9;
  v1[75] = v6;
  v1[76] = v7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t (*HPSDeviceAnalytics.eventV2.modify())()
{
  swift_beginAccess();
  return HPSDeviceAnalytics.eventV2.modify;
}

uint64_t HPSDeviceAnalytics.eventV2.modify()
{
  return swift_endAccess();
}

_QWORD *HPSDeviceAnalytics.init()()
{
  uint64_t v0;
  _QWORD *result;
  void *object;
  uint64_t countAndFlagsBits;
  void *v4;
  Swift::Int pid;
  Swift::Int adaptiveModeSupported;
  _QWORD *v7;
  HeadphoneManager::HPSDeviceAnalytics::keyValuePair v8;
  HeadphoneManager::HPSDeviceAnalytics::headphoneFeatureList v9;
  uint64_t v10;
  _BYTE __dst[552];

  v10 = v0;
  HPSDeviceAnalytics.headphoneFeatureList.init()(&v9);
  memcpy(__dst, &v9, sizeof(__dst));
  memcpy((void *)(v0 + 16), __dst, 0x228uLL);
  HPSDeviceAnalytics.keyValuePair.init()(&v8);
  result = v7;
  object = v8.featureName._object;
  countAndFlagsBits = v8.featureValue._countAndFlagsBits;
  v4 = v8.featureValue._object;
  pid = v8.pid;
  adaptiveModeSupported = v8.adaptiveModeSupported;
  v7[71] = v8.featureName._countAndFlagsBits;
  v7[72] = object;
  v7[73] = countAndFlagsBits;
  v7[74] = v4;
  v7[75] = pid;
  v7[76] = adaptiveModeSupported;
  return result;
}

uint64_t outlined retain of HPSDeviceAnalytics.headphoneFeatureList(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of HPSDeviceAnalytics.headphoneFeatureList(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void HPSDeviceAnalytics.updateFeatureCount(feature:)(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  if (v2 <= 0x16)
    __asm { BR              X8 }
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  JUMPOUT(0x23DB079D0);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HPSDeviceAnalytics.headphoneFeatureList()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

Swift::Void __swiftcall HPSDeviceAnalytics.sendEventV2()()
{
  uint64_t v0;
  uint64_t countAndFlagsBits;
  const void *v2;
  id v3;
  uint64_t aBlock;
  int v5;
  int v6;
  Class (*v7)(uint64_t);
  void *v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v11 = v0;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneSettings.FeatureInfo", 0x27uLL, 1)._countAndFlagsBits;
  v3 = (id)MEMORY[0x24263ADA4](countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_retain();
  v9 = partial apply for closure #1 in HPSDeviceAnalytics.sendEventV2();
  v10 = v0;
  aBlock = MEMORY[0x24BDAC760];
  v5 = 1107296256;
  v6 = 0;
  v7 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v8 = &block_descriptor_0;
  v2 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v2);

}

uint64_t closure #1 in HPSDeviceAnalytics.sendEventV2()(uint64_t a1)
{
  Swift::String *v1;
  uint64_t v3;
  uint64_t v5;
  Swift::String *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  _QWORD v11[7];

  v11[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
  _allocateUninitializedArray<A>(_:)();
  v6 = v1;
  *v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureChangeCount", 0x12uLL, 1);
  type metadata accessor for NSNumber();
  v6[1]._countAndFlagsBits = (uint64_t)NSNumber.init(integerLiteral:)(1).super.super.isa;
  *(Swift::String *)((char *)v6 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureName", 0xBuLL, 1);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 120))(v11);
  v3 = v11[0];
  v8 = v11[1];
  swift_bridgeObjectRetain();
  v6[2]._object = (void *)MEMORY[0x24263ADA4](v3, v8);
  v6[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FeatureValue", 0xCuLL, 1);
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 120))(v10);
  v5 = v10[2];
  v7 = v10[3];
  swift_bridgeObjectRetain();
  v6[4]._countAndFlagsBits = MEMORY[0x24263ADA4](v5, v7);
  *(Swift::String *)((char *)v6 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("HeadphonePID", 0xCuLL, 1);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 120))(&v9);
  v6[5]._object = Int._bridgeToObjectiveC()().super.super.isa;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for NSObject();
  return Dictionary.init(dictionaryLiteral:)();
}

Swift::Void __swiftcall HPSDeviceAnalytics.sendEvent()()
{
  uint64_t v0;
  uint64_t countAndFlagsBits;
  const void *v2;
  id v3;
  _BYTE v4[552];
  HeadphoneManager::HPSDeviceAnalytics::headphoneFeatureList v5;
  uint64_t aBlock;
  int v7;
  int v8;
  Class (*v9)(uint64_t);
  void *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE __dst[552];

  v13 = v0;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneSettings", 0x1BuLL, 1)._countAndFlagsBits;
  v3 = (id)MEMORY[0x24263ADA4](countAndFlagsBits);
  swift_bridgeObjectRelease();
  swift_retain();
  v11 = partial apply for closure #1 in HPSDeviceAnalytics.sendEvent();
  v12 = v0;
  aBlock = MEMORY[0x24BDAC760];
  v7 = 1107296256;
  v8 = 0;
  v9 = thunk for @escaping @callee_guaranteed () -> (@owned [String : NSObject]?);
  v10 = &block_descriptor_3;
  v2 = _Block_copy(&aBlock);
  swift_release();
  AnalyticsSendEventLazy();
  _Block_release(v2);

  HPSDeviceAnalytics.headphoneFeatureList.init()(&v5);
  memcpy(__dst, &v5, sizeof(__dst));
  memcpy(v4, __dst, sizeof(v4));
  (*(void (**)(_BYTE *))(*(_QWORD *)v0 + 104))(v4);
}

uint64_t closure #1 in HPSDeviceAnalytics.sendEvent()(uint64_t a1, uint64_t a2)
{
  Swift::String *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[552];
  _BYTE v53[552];
  _BYTE v54[552];
  _BYTE v55[552];
  _BYTE v56[552];
  _BYTE v57[552];
  _BYTE v58[552];
  _BYTE v59[552];
  _BYTE v60[552];
  _BYTE v61[552];
  _BYTE v62[552];
  _BYTE v63[552];
  _BYTE v64[552];
  _BYTE v65[552];
  _BYTE v66[552];
  _BYTE v67[552];
  _BYTE v68[552];
  _BYTE v69[552];
  _BYTE v70[552];
  _BYTE v71[552];
  _BYTE v72[552];
  _BYTE v73[552];
  _BYTE v74[552];
  _BYTE v75[552];
  _BYTE v76[552];
  _BYTE v77[552];
  _BYTE v78[552];
  _BYTE v79[552];
  _BYTE v80[552];
  _BYTE v81[552];
  _BYTE v82[552];
  _BYTE v83[552];
  _BYTE v84[552];
  _BYTE v85[552];
  _BYTE v86[552];
  _BYTE v87[552];
  _BYTE v88[552];
  _BYTE v89[552];
  _BYTE v90[552];
  _BYTE v91[552];
  _BYTE v92[552];
  _BYTE v93[552];
  _BYTE v94[552];
  _BYTE v95[552];
  _BYTE v96[552];
  _BYTE v97[552];
  uint64_t v98;
  _QWORD v99[69];
  _QWORD v100[69];
  _QWORD v101[69];
  _QWORD v102[69];
  _QWORD v103[69];
  _QWORD v104[69];
  _QWORD v105[69];
  _QWORD v106[69];
  _QWORD v107[69];
  _QWORD v108[69];
  _QWORD v109[69];
  _QWORD v110[69];
  _BYTE v111[552];
  _QWORD v112[69];
  _QWORD v113[69];
  _BYTE v114[552];
  _QWORD v115[69];
  _BYTE v116[552];
  _QWORD v117[69];
  _BYTE v118[552];
  _BYTE v119[552];
  _QWORD v120[69];
  _BYTE v121[552];
  _QWORD v122[69];
  _BYTE v123[552];
  _QWORD v124[69];
  _BYTE v125[552];
  _QWORD v126[69];
  _BYTE v127[552];
  _QWORD v128[69];
  _BYTE v129[552];
  _QWORD v130[69];
  _BYTE v131[552];
  _QWORD v132[69];
  _QWORD v133[69];
  _BYTE v134[552];
  _QWORD v135[69];
  _BYTE v136[552];
  _BYTE v137[552];
  _BYTE v138[552];
  _BYTE v139[552];
  _QWORD v140[69];
  _BYTE v141[552];
  _QWORD v142[69];
  _BYTE v143[552];
  _QWORD v144[69];

  v26 = MEMORY[0x24BDAC7A8](a1, a2);
  v98 = v26;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, NSObject));
  _allocateUninitializedArray<A>(_:)();
  v28 = v2;
  *v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CaseSound", 9uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v99, v97, sizeof(v99));
  v28[1]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 24) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CaseSoundValue", 0xEuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v100, v96, sizeof(v100));
  v4 = v100[1];
  v51 = v100[2];
  swift_bridgeObjectRetain();
  v28[2]._object = (void *)MEMORY[0x24263ADA4](v4, v51);
  v28[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CrownRotation", 0xDuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v101, v95, sizeof(v101));
  v28[4]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 72) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CrownRotationValue", 0x12uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v102, v94, sizeof(v102));
  v5 = v102[4];
  v50 = v102[5];
  swift_bridgeObjectRetain();
  v28[5]._object = (void *)MEMORY[0x24263ADA4](v5, v50);
  v28[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenLeftBudValue", 0x18uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v103, v93, sizeof(v103));
  v6 = v103[6];
  v49 = v103[7];
  swift_bridgeObjectRetain();
  v28[7]._countAndFlagsBits = MEMORY[0x24263ADA4](v6, v49);
  *(Swift::String *)((char *)v28 + 120) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenRightBudValue", 0x19uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v104, v92, sizeof(v104));
  v7 = v104[8];
  v48 = v104[9];
  swift_bridgeObjectRetain();
  v28[8]._object = (void *)MEMORY[0x24263ADA4](v7, v48);
  v28[9] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("CycleBetweenSingleValue", 0x17uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v105, v91, sizeof(v105));
  v8 = v105[10];
  v47 = v105[11];
  swift_bridgeObjectRetain();
  v28[10]._countAndFlagsBits = MEMORY[0x24263ADA4](v8, v47);
  *(Swift::String *)((char *)v28 + 168) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DeviceName", 0xAuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v106, v90, sizeof(v106));
  v28[11]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[12] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Disconnect", 0xAuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v107, v89, sizeof(v107));
  v28[13]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 216) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DoubleTap", 9uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v108, v88, sizeof(v108));
  v28[14]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[15] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DoubleTapLeftValue", 0x12uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v109, v87, sizeof(v109));
  v9 = v109[15];
  v46 = v109[16];
  swift_bridgeObjectRetain();
  v28[16]._countAndFlagsBits = MEMORY[0x24263ADA4](v9, v46);
  *(Swift::String *)((char *)v28 + 264) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("DoubleTapRightValue", 0x13uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v110, v86, sizeof(v110));
  v10 = v110[17];
  v45 = v110[18];
  swift_bridgeObjectRetain();
  v28[17]._object = (void *)MEMORY[0x24263ADA4](v10, v45);
  v28[18] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EarTipFitTest", 0xDuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v111, v85, sizeof(v111));
  v28[19]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 312) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EarTipFitTestValue", 0x12uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v112, v84, sizeof(v112));
  v11 = v112[22];
  v44 = v112[23];
  swift_bridgeObjectRetain();
  v28[20]._object = (void *)MEMORY[0x24263ADA4](v11, v44);
  v28[21] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EntryPoint", 0xAuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v113, v83, sizeof(v113));
  v12 = v113[19];
  v43 = v113[20];
  swift_bridgeObjectRetain();
  v28[22]._countAndFlagsBits = MEMORY[0x24263ADA4](v12, v43);
  *(Swift::String *)((char *)v28 + 360) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EndCallGesture", 0xEuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v114, v82, sizeof(v114));
  v28[23]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[24] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("EndCallGestureValue", 0x13uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v115, v81, sizeof(v115));
  v13 = v115[25];
  v42 = v115[26];
  swift_bridgeObjectRetain();
  v28[25]._countAndFlagsBits = MEMORY[0x24263ADA4](v13, v42);
  *(Swift::String *)((char *)v28 + 408) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FindMyNetwork", 0xDuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v116, v80, sizeof(v116));
  v28[26]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[27] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("FindMyNetworkValue", 0x12uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v117, v79, sizeof(v117));
  v14 = v117[28];
  v41 = v117[29];
  swift_bridgeObjectRetain();
  v28[28]._countAndFlagsBits = MEMORY[0x24263ADA4](v14, v41);
  *(Swift::String *)((char *)v28 + 456) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ForgetDevice", 0xCuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v118, v78, sizeof(v118));
  v28[29]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[30] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InEarOnHeadDetection", 0x14uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v119, v77, sizeof(v119));
  v28[31]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 504) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("InEarOnHeadDetectionValue", 0x19uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v120, v76, sizeof(v120));
  v15 = v120[32];
  v40 = v120[33];
  swift_bridgeObjectRetain();
  v28[32]._object = (void *)MEMORY[0x24263ADA4](v15, v40);
  v28[33] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ListeningMode", 0xDuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v121, v75, sizeof(v121));
  v28[34]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 552) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ListeningModeValue", 0x12uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v122, v74, sizeof(v122));
  v16 = v122[35];
  v39 = v122[36];
  swift_bridgeObjectRetain();
  v28[35]._object = (void *)MEMORY[0x24263ADA4](v16, v39);
  v28[36] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MagneticEarbudDetect", 0x14uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v123, v73, sizeof(v123));
  v28[37]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 600) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MagneticEarbudDetectValue", 0x19uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v124, v72, sizeof(v124));
  v17 = v124[38];
  v38 = v124[39];
  swift_bridgeObjectRetain();
  v28[38]._object = (void *)MEMORY[0x24263ADA4](v17, v38);
  v28[39] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MicrophoneSwitch", 0x10uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v125, v71, sizeof(v125));
  v28[40]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 648) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MicrophoneSwitchValue", 0x15uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v126, v70, sizeof(v126));
  v18 = v126[41];
  v37 = v126[42];
  swift_bridgeObjectRetain();
  v28[41]._object = (void *)MEMORY[0x24263ADA4](v18, v37);
  v28[42] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MuteControlGesture", 0x12uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v127, v69, sizeof(v127));
  v28[43]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 696) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("MuteControlGestureValue", 0x17uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v128, v68, sizeof(v128));
  v19 = v128[44];
  v36 = v128[45];
  swift_bridgeObjectRetain();
  v28[44]._object = (void *)MEMORY[0x24263ADA4](v19, v36);
  v28[45] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("OptimizedBudCharging", 0x14uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v129, v67, sizeof(v129));
  v28[46]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 744) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("OptimizedBudChargingValue", 0x19uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v130, v66, sizeof(v130));
  v20 = v130[47];
  v35 = v130[48];
  swift_bridgeObjectRetain();
  v28[47]._object = (void *)MEMORY[0x24263ADA4](v20, v35);
  v28[48] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressHold", 9uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v131, v65, sizeof(v131));
  v28[49]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 792) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressHoldLeftBudValue", 0x15uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v132, v64, sizeof(v132));
  v21 = v132[50];
  v34 = v132[51];
  swift_bridgeObjectRetain();
  v28[50]._object = (void *)MEMORY[0x24263ADA4](v21, v34);
  v28[51] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("PressHoldRightBudValue", 0x16uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v133, v63, sizeof(v133));
  v22 = v133[52];
  v33 = v133[53];
  swift_bridgeObjectRetain();
  v28[52]._countAndFlagsBits = MEMORY[0x24263ADA4](v22, v33);
  *(Swift::String *)((char *)v28 + 840) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SmartRouting", 0xCuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v134, v62, sizeof(v134));
  v28[53]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[54] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SmartRoutingValue", 0x11uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v135, v61, sizeof(v135));
  v23 = v135[55];
  v32 = v135[56];
  swift_bridgeObjectRetain();
  v28[55]._countAndFlagsBits = MEMORY[0x24263ADA4](v23, v32);
  *(Swift::String *)((char *)v28 + 888) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpatialAudioProfile", 0x13uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v136, v60, sizeof(v136));
  v28[56]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[57] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpatialAudioTutorial", 0x14uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v137, v59, sizeof(v137));
  v28[58]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 936) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ViewInFindMy", 0xCuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v138, v58, sizeof(v138));
  v28[59]._object = Int._bridgeToObjectiveC()().super.super.isa;
  v28[60] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ConversationBoost", 0x11uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v139, v57, sizeof(v139));
  v28[61]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 984) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("ConversationBoostValue", 0x16uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v140, v56, sizeof(v140));
  v24 = v140[61];
  v31 = v140[62];
  swift_bridgeObjectRetain();
  v28[62]._object = (void *)MEMORY[0x24263ADA4](v24, v31);
  v28[63] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpeechDetection", 0xFuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v141, v55, sizeof(v141));
  v28[64]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 1032) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("SpeechDetectionValue", 0x14uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v142, v54, sizeof(v142));
  v25 = v142[64];
  v30 = v142[65];
  swift_bridgeObjectRetain();
  v28[65]._object = (void *)MEMORY[0x24263ADA4](v25, v30);
  v28[66] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AutomaticallyAdjustVolume", 0x19uLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v143, v53, sizeof(v143));
  v28[67]._countAndFlagsBits = (uint64_t)Int._bridgeToObjectiveC()().super.super.isa;
  *(Swift::String *)((char *)v28 + 1080) = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("AutomaticallyAdjustVolumeValue", 0x1EuLL, 1);
  (*(void (**)(void))(*(_QWORD *)v26 + 96))();
  memcpy(v144, v52, sizeof(v144));
  v27 = v144[67];
  v29 = v144[68];
  swift_bridgeObjectRetain();
  v28[68]._object = (void *)MEMORY[0x24263ADA4](v27, v29);
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v144);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v143);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v142);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v141);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v140);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v139);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v138);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v137);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v136);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v135);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v134);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v133);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v132);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v131);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v130);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v129);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v128);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v127);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v126);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v125);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v124);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v123);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v122);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v121);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v120);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v119);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v118);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v117);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v116);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v115);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v114);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v113);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v112);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v111);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v110);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v109);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v108);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v107);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v106);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v105);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v104);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v103);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v102);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v101);
  swift_bridgeObjectRelease();
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v100);
  outlined release of HPSDeviceAnalytics.headphoneFeatureList((uint64_t)v99);
  type metadata accessor for NSObject();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t HPSDeviceAnalytics.deinit()
{
  uint64_t v1;

  outlined destroy of HPSDeviceAnalytics.headphoneFeatureList();
  outlined destroy of HPSDeviceAnalytics.keyValuePair();
  return v1;
}

uint64_t HPSDeviceAnalytics.__deallocating_deinit()
{
  HPSDeviceAnalytics.deinit();
  return swift_deallocClassInstance();
}

id @nonobjc IFSymbol.init(symbolName:bundleURL:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 v3;
  uint64_t v4;
  id v5;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v13;
  uint64_t v14;

  v11 = (id)MEMORY[0x24263ADA4]();
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  v3 = (*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a3, 1) == 1;
  if (v3)
  {
    v5 = objc_msgSend(v10, sel_initWithSymbolName_bundleURL_, v11, 0);
  }
  else
  {
    URL._bridgeToObjectiveC()((NSURL *)v3);
    v9 = v4;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a3, v13);
    v5 = objc_msgSend(v10, sel_initWithSymbolName_bundleURL_, v11, v9);
  }
  v8 = v5;

  swift_bridgeObjectRelease();
  return v8;
}

id @nonobjc IFColor.init(systemColor:)(uint64_t a1)
{
  void *v1;

  return objc_msgSend(v1, sel_initWithSystemColor_, a1);
}

id @nonobjc IFGraphicSymbolDescriptor.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBProductID@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CBProductID.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBProductID@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = CBProductID.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in HPSDeviceAnalytics.sendEventV2()()
{
  uint64_t v0;

  return closure #1 in HPSDeviceAnalytics.sendEventV2()(v0);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in HPSDeviceAnalytics.sendEvent()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in HPSDeviceAnalytics.sendEvent()(v2, a2);
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

{
  return swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HPSDeviceAnalytics.keyValuePair()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t method lookup function for HPSDeviceAnalytics()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HPSDeviceAnalytics.updateFeatureCount(feature:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t initializeBufferWithCopyOfBuffer for HPSDeviceAnalytics.keyValuePair(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for HPSDeviceAnalytics.keyValuePair()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HPSDeviceAnalytics.keyValuePair(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v5;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  a1[2] = a2[2];
  v5 = a2[3];
  swift_bridgeObjectRetain();
  result = a1;
  a1[3] = v5;
  a1[4] = a2[4];
  a1[5] = a2[5];
  return result;
}

_QWORD *assignWithCopy for HPSDeviceAnalytics.keyValuePair(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  swift_bridgeObjectRetain();
  a1[1] = v3;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  v4 = a2[3];
  swift_bridgeObjectRetain();
  a1[3] = v4;
  swift_bridgeObjectRelease();
  result = a1;
  a1[4] = a2[4];
  a1[5] = a2[5];
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy48_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x30uLL);
}

_QWORD *assignWithTake for HPSDeviceAnalytics.keyValuePair(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  result = a1;
  a1[4] = a2[4];
  a1[5] = a2[5];
  return result;
}

uint64_t getEnumTagSinglePayload for HPSDeviceAnalytics.keyValuePair(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 8)))
        v3 = *(_QWORD *)(a1 + 8);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HPSDeviceAnalytics.keyValuePair(uint64_t result, unsigned int a2, unsigned int a3)
{
  _BOOL4 v3;

  v3 = a3 > 0x7FFFFFFF;
  if (a2 > 0x7FFFFFFF)
  {
    *(_QWORD *)result = a2 + 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = 0;
    *(_QWORD *)(result + 40) = 0;
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 1;
      else
        __break(1u);
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFF)
    {
      if (v3)
        *(_BYTE *)(result + 48) = 0;
      else
        __break(1u);
    }
    if (a2)
      *(_QWORD *)(result + 8) = a2 - 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for HPSDeviceAnalytics.keyValuePair()
{
  return &type metadata for HPSDeviceAnalytics.keyValuePair;
}

uint64_t initializeBufferWithCopyOfBuffer for HPSDeviceAnalytics.headphoneFeatureList(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  swift_retain();
  *a1 = v4;
  return *a1 + 16;
}

uint64_t destroy for HPSDeviceAnalytics.headphoneFeatureList()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for HPSDeviceAnalytics.headphoneFeatureList(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v3;
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v4;
  a1[6] = a2[6];
  v5 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v5;
  a1[8] = a2[8];
  v6 = a2[9];
  swift_bridgeObjectRetain();
  a1[9] = v6;
  a1[10] = a2[10];
  v7 = a2[11];
  swift_bridgeObjectRetain();
  a1[11] = v7;
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  v8 = a2[16];
  swift_bridgeObjectRetain();
  a1[16] = v8;
  a1[17] = a2[17];
  v9 = a2[18];
  swift_bridgeObjectRetain();
  a1[18] = v9;
  a1[19] = a2[19];
  v10 = a2[20];
  swift_bridgeObjectRetain();
  a1[20] = v10;
  a1[21] = a2[21];
  a1[22] = a2[22];
  v11 = a2[23];
  swift_bridgeObjectRetain();
  a1[23] = v11;
  a1[24] = a2[24];
  a1[25] = a2[25];
  v12 = a2[26];
  swift_bridgeObjectRetain();
  a1[26] = v12;
  a1[27] = a2[27];
  a1[28] = a2[28];
  v13 = a2[29];
  swift_bridgeObjectRetain();
  a1[29] = v13;
  a1[30] = a2[30];
  a1[31] = a2[31];
  a1[32] = a2[32];
  v14 = a2[33];
  swift_bridgeObjectRetain();
  a1[33] = v14;
  a1[34] = a2[34];
  a1[35] = a2[35];
  v15 = a2[36];
  swift_bridgeObjectRetain();
  a1[36] = v15;
  a1[37] = a2[37];
  a1[38] = a2[38];
  v16 = a2[39];
  swift_bridgeObjectRetain();
  a1[39] = v16;
  a1[40] = a2[40];
  a1[41] = a2[41];
  v17 = a2[42];
  swift_bridgeObjectRetain();
  a1[42] = v17;
  a1[43] = a2[43];
  a1[44] = a2[44];
  v18 = a2[45];
  swift_bridgeObjectRetain();
  a1[45] = v18;
  a1[46] = a2[46];
  a1[47] = a2[47];
  v19 = a2[48];
  swift_bridgeObjectRetain();
  a1[48] = v19;
  a1[49] = a2[49];
  a1[50] = a2[50];
  v20 = a2[51];
  swift_bridgeObjectRetain();
  a1[51] = v20;
  a1[52] = a2[52];
  v21 = a2[53];
  swift_bridgeObjectRetain();
  a1[53] = v21;
  a1[54] = a2[54];
  a1[55] = a2[55];
  v22 = a2[56];
  swift_bridgeObjectRetain();
  a1[56] = v22;
  a1[57] = a2[57];
  a1[58] = a2[58];
  a1[59] = a2[59];
  a1[60] = a2[60];
  a1[61] = a2[61];
  v23 = a2[62];
  swift_bridgeObjectRetain();
  a1[62] = v23;
  a1[63] = a2[63];
  a1[64] = a2[64];
  v24 = a2[65];
  swift_bridgeObjectRetain();
  a1[65] = v24;
  a1[66] = a2[66];
  a1[67] = a2[67];
  v27 = a2[68];
  swift_bridgeObjectRetain();
  result = a1;
  a1[68] = v27;
  return result;
}

_QWORD *assignWithCopy for HPSDeviceAnalytics.headphoneFeatureList(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  swift_bridgeObjectRetain();
  a1[2] = v3;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  v4 = a2[5];
  swift_bridgeObjectRetain();
  a1[5] = v4;
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  v5 = a2[7];
  swift_bridgeObjectRetain();
  a1[7] = v5;
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  v6 = a2[9];
  swift_bridgeObjectRetain();
  a1[9] = v6;
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  v7 = a2[11];
  swift_bridgeObjectRetain();
  a1[11] = v7;
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  v8 = a2[16];
  swift_bridgeObjectRetain();
  a1[16] = v8;
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  v9 = a2[18];
  swift_bridgeObjectRetain();
  a1[18] = v9;
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  v10 = a2[20];
  swift_bridgeObjectRetain();
  a1[20] = v10;
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  v11 = a2[23];
  swift_bridgeObjectRetain();
  a1[23] = v11;
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  v12 = a2[26];
  swift_bridgeObjectRetain();
  a1[26] = v12;
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  v13 = a2[29];
  swift_bridgeObjectRetain();
  a1[29] = v13;
  swift_bridgeObjectRelease();
  a1[30] = a2[30];
  a1[31] = a2[31];
  a1[32] = a2[32];
  v14 = a2[33];
  swift_bridgeObjectRetain();
  a1[33] = v14;
  swift_bridgeObjectRelease();
  a1[34] = a2[34];
  a1[35] = a2[35];
  v15 = a2[36];
  swift_bridgeObjectRetain();
  a1[36] = v15;
  swift_bridgeObjectRelease();
  a1[37] = a2[37];
  a1[38] = a2[38];
  v16 = a2[39];
  swift_bridgeObjectRetain();
  a1[39] = v16;
  swift_bridgeObjectRelease();
  a1[40] = a2[40];
  a1[41] = a2[41];
  v17 = a2[42];
  swift_bridgeObjectRetain();
  a1[42] = v17;
  swift_bridgeObjectRelease();
  a1[43] = a2[43];
  a1[44] = a2[44];
  v18 = a2[45];
  swift_bridgeObjectRetain();
  a1[45] = v18;
  swift_bridgeObjectRelease();
  a1[46] = a2[46];
  a1[47] = a2[47];
  v19 = a2[48];
  swift_bridgeObjectRetain();
  a1[48] = v19;
  swift_bridgeObjectRelease();
  a1[49] = a2[49];
  a1[50] = a2[50];
  v20 = a2[51];
  swift_bridgeObjectRetain();
  a1[51] = v20;
  swift_bridgeObjectRelease();
  a1[52] = a2[52];
  v21 = a2[53];
  swift_bridgeObjectRetain();
  a1[53] = v21;
  swift_bridgeObjectRelease();
  a1[54] = a2[54];
  a1[55] = a2[55];
  v22 = a2[56];
  swift_bridgeObjectRetain();
  a1[56] = v22;
  swift_bridgeObjectRelease();
  a1[57] = a2[57];
  a1[58] = a2[58];
  a1[59] = a2[59];
  a1[60] = a2[60];
  a1[61] = a2[61];
  v23 = a2[62];
  swift_bridgeObjectRetain();
  a1[62] = v23;
  swift_bridgeObjectRelease();
  a1[63] = a2[63];
  a1[64] = a2[64];
  v24 = a2[65];
  swift_bridgeObjectRetain();
  a1[65] = v24;
  swift_bridgeObjectRelease();
  a1[66] = a2[66];
  a1[67] = a2[67];
  v26 = a2[68];
  swift_bridgeObjectRetain();
  a1[68] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> __swift_memcpy552_8(void *a1, const void *a2)
{
  memcpy(a1, a2, 0x228uLL);
}

_QWORD *assignWithTake for HPSDeviceAnalytics.headphoneFeatureList(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  a1[16] = a2[16];
  swift_bridgeObjectRelease();
  a1[17] = a2[17];
  a1[18] = a2[18];
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  a1[20] = a2[20];
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  a1[22] = a2[22];
  a1[23] = a2[23];
  swift_bridgeObjectRelease();
  a1[24] = a2[24];
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  a1[29] = a2[29];
  swift_bridgeObjectRelease();
  a1[30] = a2[30];
  a1[31] = a2[31];
  a1[32] = a2[32];
  a1[33] = a2[33];
  swift_bridgeObjectRelease();
  a1[34] = a2[34];
  a1[35] = a2[35];
  a1[36] = a2[36];
  swift_bridgeObjectRelease();
  a1[37] = a2[37];
  a1[38] = a2[38];
  a1[39] = a2[39];
  swift_bridgeObjectRelease();
  a1[40] = a2[40];
  a1[41] = a2[41];
  a1[42] = a2[42];
  swift_bridgeObjectRelease();
  a1[43] = a2[43];
  a1[44] = a2[44];
  a1[45] = a2[45];
  swift_bridgeObjectRelease();
  a1[46] = a2[46];
  a1[47] = a2[47];
  a1[48] = a2[48];
  swift_bridgeObjectRelease();
  a1[49] = a2[49];
  a1[50] = a2[50];
  a1[51] = a2[51];
  swift_bridgeObjectRelease();
  a1[52] = a2[52];
  a1[53] = a2[53];
  swift_bridgeObjectRelease();
  a1[54] = a2[54];
  a1[55] = a2[55];
  a1[56] = a2[56];
  swift_bridgeObjectRelease();
  a1[57] = a2[57];
  a1[58] = a2[58];
  a1[59] = a2[59];
  a1[60] = a2[60];
  a1[61] = a2[61];
  a1[62] = a2[62];
  swift_bridgeObjectRelease();
  a1[63] = a2[63];
  a1[64] = a2[64];
  a1[65] = a2[65];
  swift_bridgeObjectRelease();
  a1[66] = a2[66];
  a1[67] = a2[67];
  a1[68] = a2[68];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for HPSDeviceAnalytics.headphoneFeatureList(uint64_t a1, int a2)
{
  int v3;
  int v4;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 552))
    {
      v4 = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v3 = -1;
      if (!HIDWORD(*(_QWORD *)(a1 + 16)))
        v3 = *(_QWORD *)(a1 + 16);
      v4 = v3;
    }
  }
  else
  {
    v4 = -1;
  }
  return (v4 + 1);
}

_QWORD *storeEnumTagSinglePayload for HPSDeviceAnalytics.headphoneFeatureList(_QWORD *result, int a2, int a3)
{
  _BYTE *v3;

  v3 = result + 69;
  if (a2 < 0)
  {
    result[63] = 0;
    result[62] = 0;
    result[61] = 0;
    result[60] = 0;
    result[59] = 0;
    result[58] = 0;
    result[57] = 0;
    result[56] = 0;
    result[55] = 0;
    result[54] = 0;
    result[53] = 0;
    result[52] = 0;
    result[51] = 0;
    result[50] = 0;
    result[49] = 0;
    result[48] = 0;
    result[47] = 0;
    result[46] = 0;
    result[45] = 0;
    result[44] = 0;
    result[43] = 0;
    result[42] = 0;
    result[41] = 0;
    result[40] = 0;
    result[39] = 0;
    result[38] = 0;
    result[37] = 0;
    result[36] = 0;
    result[35] = 0;
    result[34] = 0;
    result[33] = 0;
    result[32] = 0;
    result[31] = 0;
    result[30] = 0;
    result[29] = 0;
    result[28] = 0;
    result[27] = 0;
    result[26] = 0;
    result[25] = 0;
    result[24] = 0;
    result[23] = 0;
    result[22] = 0;
    result[21] = 0;
    result[20] = 0;
    result[19] = 0;
    result[18] = 0;
    result[17] = 0;
    result[16] = 0;
    result[15] = 0;
    result[14] = 0;
    result[13] = 0;
    result[12] = 0;
    result[11] = 0;
    result[10] = 0;
    result[9] = 0;
    result[8] = 0;
    result[7] = 0;
    result[6] = 0;
    result[5] = 0;
    result[4] = 0;
    result[3] = 0;
    result[2] = 0;
    result[1] = 0;
    *result = a2 + 0x80000000;
    result[67] = 0;
    result[66] = 0;
    result[65] = 0;
    result[64] = 0;
    result[68] = 0;
    if (a3 < 0)
      *v3 = 1;
  }
  else
  {
    if (a3 < 0)
      *v3 = 0;
    if (a2)
      result[2] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for HPSDeviceAnalytics.headphoneFeatureList()
{
  return &type metadata for HPSDeviceAnalytics.headphoneFeatureList;
}

unint64_t type metadata accessor for NSObject()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSObject;
  if (!lazy cache variable for type metadata for NSObject)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t HeadphoneDeviceDataReplayable.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v11 = a1;
  v9 = a2;
  v8 = a3;
  v15 = 0;
  v14 = 0;
  v16 = a2;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](v9, v8);
  v13 = (uint64_t)&v7 - v10;
  v15 = v11;
  v14 = v3;
  (*(void (**)(uint64_t))(v5 + 280))(v4);
  lazy protocol witness table accessor for type UUID? and conformance <A> A?();
  Hasher.combine<A>(_:)();
  return outlined destroy of UUID?(v13);
}

unint64_t lazy protocol witness table accessor for type UUID? and conformance <A> A?()
{
  unint64_t v0;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v3 = lazy protocol witness table cache variable for type UUID? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type UUID? and conformance <A> A?)
  {
    v2 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for UUID?);
    v4 = lazy protocol witness table accessor for type UUID and conformance UUID();
    v0 = MEMORY[0x24263B698](MEMORY[0x24BEE4AB0], v2, &v4);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type UUID? and conformance <A> A?);
    return v0;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDCEA88], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDCEA98], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDCEA70], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v0 = type metadata accessor for UUID();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDCEAA8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t HeadphoneDeviceDataReplayable.description.getter(uint64_t a1, void (**a2)(_QWORD))
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\tclass: ", 8uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v2);
  swift_bridgeObjectRelease();
  swift_getDynamicType();
  swift_getMetatypeMetadata();
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tproductID:", 0xCuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  a2[5](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateCase:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  a2[8](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateLeft:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v5);
  swift_bridgeObjectRelease();
  a2[11](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateRight:", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  a2[14](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryStateMain:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  a2[17](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelCase:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  a2[20](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Float?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelLeft:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v9);
  swift_bridgeObjectRelease();
  a2[23](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelRight:", 0x14uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v10);
  swift_bridgeObjectRelease();
  a2[26](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tbatteryLevelMain:", 0x13uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  a2[29](a1);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n\tdeviceColor:", 0xEuLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  a2[32](a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  String.init<A>(describing:)();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t HeadphoneDeviceDataReplayable.customizableKeyPaths.getter()
{
  Swift::String *v0;
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Swift::String *v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  _allocateUninitializedArray<A>(_:)();
  v6 = v0;
  v1 = ReplayData.kProductIdKey.unsafeMutableAddressor();
  v4 = *(_QWORD *)v1;
  v5 = (void *)*((_QWORD *)v1 + 1);
  swift_bridgeObjectRetain();
  v6->_countAndFlagsBits = v4;
  v6->_object = v5;
  swift_getKeyPath();
  v6[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateCase", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[2] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateLeft", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[3] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateRight", 0x11uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[4] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateMain", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[5] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelCase", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[6] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelLeft", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[7] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelRight", 0x11uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[8] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelMain", 0x10uLL, 1);
  swift_release();
  swift_getKeyPath();
  v6[9] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceColor", 0xBuLL, 1);
  swift_release();
  _finalizeUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String?]);
  lazy protocol witness table accessor for type [String?] and conformance [A]();
  Sequence.compactMap<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v3 = Set.init<A>(_:)();
  swift_bridgeObjectRelease();
  return v3;
}

__int128 *ReplayData.kProductIdKey.unsafeMutableAddressor()
{
  if (one-time initialization token for kProductIdKey != -1)
    swift_once();
  return &static ReplayData.kProductIdKey;
}

void closure #1 in HeadphoneDeviceDataReplayable.customizableKeyPaths.getter(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;

  v3 = *a1;
  swift_bridgeObjectRetain();
  if (*((_QWORD *)&v3 + 1))
  {
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    outlined destroy of String?();
  }
}

unint64_t lazy protocol witness table accessor for type [String?] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [String?] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String?] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String?]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [String?] and conformance [A]);
    return v1;
  }
  return v3;
}

uint64_t static ReplayData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v17[12];
  int v18;
  void (*v19)(_BYTE *, char *, uint64_t);
  void (*v20)(_BYTE *, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v23 = a1;
  v34 = a2;
  v3 = v2;
  v4 = v23;
  v33 = v3;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v40 = type metadata accessor for UUID();
  v39 = *(_QWORD *)(v40 - 8);
  v24 = (*(_QWORD *)(v39 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v40, v5);
  v25 = &v17[-v24];
  v26 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v17[-v24], v7);
  v27 = &v17[-v26];
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  v28 = (*(_QWORD *)(*(_QWORD *)(v35 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v35, v8);
  v41 = &v17[-v28];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v29 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v9, v34);
  v30 = &v17[-v29];
  v31 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v17[-v29], v11);
  v38 = &v17[-v31];
  v32 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](&v17[-v31], v13);
  v36 = &v17[-v32];
  v45 = v4;
  v44 = v14;
  v43 = v33;
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 448))(v4);
  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 448))(v15);
  v37 = *(int *)(v35 + 48);
  outlined init with copy of UUID?(v36, v41);
  outlined init with copy of UUID?(v38, &v41[v37]);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
  if (v42(v41, 1, v40) == 1)
  {
    if (v42(&v41[v37], 1, v40) != 1)
      goto LABEL_8;
    outlined destroy of UUID?((uint64_t)v41);
    v22 = 1;
  }
  else
  {
    outlined init with copy of UUID?(v41, v30);
    if (v42(&v41[v37], 1, v40) == 1)
    {
      (*(void (**)(_BYTE *, uint64_t))(v39 + 8))(v30, v40);
LABEL_8:
      outlined destroy of (UUID?, UUID?)((uint64_t)v41);
      v22 = 0;
      goto LABEL_7;
    }
    v19 = *(void (**)(_BYTE *, char *, uint64_t))(v39 + 32);
    v19(v27, v30, v40);
    v19(v25, &v41[v37], v40);
    lazy protocol witness table accessor for type UUID and conformance UUID();
    v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    v20 = *(void (**)(_BYTE *, uint64_t))(v39 + 8);
    v20(v25, v40);
    v20(v27, v40);
    outlined destroy of UUID?((uint64_t)v41);
    v22 = v21;
  }
LABEL_7:
  v18 = v22;
  outlined destroy of UUID?((uint64_t)v38);
  outlined destroy of UUID?((uint64_t)v36);
  return v18 & 1;
}

uint64_t one-time initialization function for kProductIdKey()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("productId", 9uLL, 1);
  result = v1._countAndFlagsBits;
  static ReplayData.kProductIdKey = (__int128)v1;
  return result;
}

void *outlined init with copy of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t outlined destroy of (UUID?, UUID?)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(void);

  v4 = type metadata accessor for UUID();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(void))(v5 + 48);
  if (!((unsigned int (*)(uint64_t, uint64_t))v6)(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v2 = a1
     + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?))
              + 48);
  if (!v6())
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
  return a1;
}

uint64_t static ReplayData.kProductIdKey.getter()
{
  uint64_t v1;

  v1 = *(_QWORD *)ReplayData.kProductIdKey.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t variable initialization expression of ReplayData.productId()
{
  return 0;
}

uint64_t key path getter for ReplayData.productId : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *(_QWORD *)a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 184))(v2);
  *(_BYTE *)(a2 + 8) = v3 & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.productId : ReplayData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v4 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 192))(v3, v5 & 1);
  return swift_release();
}

uint64_t ReplayData.productId.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.productId.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_BYTE *)(v2 + 24) = a2 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.productId.modify())()
{
  swift_beginAccess();
  return ReplayData.productId.modify;
}

uint64_t ReplayData.productId.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateCase()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateCase : ReplayData@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 208))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateCase : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 216))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateCase.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 25);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateCase.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 25) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateCase.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryStateCase.modify;
}

uint64_t ReplayData.batteryStateCase.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateLeft()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateLeft : ReplayData@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 232))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateLeft : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 240))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateLeft.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 26);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateLeft.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 26) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateLeft.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryStateLeft.modify;
}

uint64_t ReplayData.batteryStateLeft.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateRight()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateRight : ReplayData@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 256))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateRight : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 264))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateRight.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 27);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateRight.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 27) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateRight.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryStateRight.modify;
}

uint64_t ReplayData.batteryStateRight.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryStateMain()
{
  return 2;
}

uint64_t key path getter for ReplayData.batteryStateMain : ReplayData@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 280))(v2);
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryStateMain : ReplayData(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 288))(v3);
  return swift_release();
}

uint64_t ReplayData.batteryStateMain.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 28);
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.batteryStateMain.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 28) = a1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryStateMain.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryStateMain.modify;
}

uint64_t ReplayData.batteryStateMain.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelCase()
{
  uint64_t v1;

  LODWORD(v1) = 0;
  BYTE4(v1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelCase : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 304))(v2);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelCase : ReplayData(int *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 4);
  v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 312))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelCase.getter()
{
  uint64_t v0;
  int v2;
  char v3;
  uint64_t v4;

  swift_beginAccess();
  v2 = *(_DWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v0 + 36);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelCase.setter(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;

  v3 = a1;
  v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 32) = v3;
  *(_BYTE *)(v1 + 36) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelCase.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryLevelCase.modify;
}

uint64_t ReplayData.batteryLevelCase.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelLeft()
{
  uint64_t v1;

  LODWORD(v1) = 0;
  BYTE4(v1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelLeft : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 328))(v2);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelLeft : ReplayData(int *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 4);
  v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 336))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelLeft.getter()
{
  uint64_t v0;
  int v2;
  char v3;
  uint64_t v4;

  swift_beginAccess();
  v2 = *(_DWORD *)(v0 + 40);
  v3 = *(_BYTE *)(v0 + 44);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelLeft.setter(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;

  v3 = a1;
  v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 40) = v3;
  *(_BYTE *)(v1 + 44) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelLeft.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryLevelLeft.modify;
}

uint64_t ReplayData.batteryLevelLeft.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelRight()
{
  uint64_t v1;

  LODWORD(v1) = 0;
  BYTE4(v1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelRight : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 352))(v2);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelRight : ReplayData(int *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 4);
  v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 360))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelRight.getter()
{
  uint64_t v0;
  int v2;
  char v3;
  uint64_t v4;

  swift_beginAccess();
  v2 = *(_DWORD *)(v0 + 48);
  v3 = *(_BYTE *)(v0 + 52);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelRight.setter(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;

  v3 = a1;
  v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 48) = v3;
  *(_BYTE *)(v1 + 52) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelRight.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryLevelRight.modify;
}

uint64_t ReplayData.batteryLevelRight.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.batteryLevelMain()
{
  uint64_t v1;

  LODWORD(v1) = 0;
  BYTE4(v1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.batteryLevelMain : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 376))(v2);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.batteryLevelMain : ReplayData(int *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 4);
  v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 384))(v6);
  return swift_release();
}

uint64_t ReplayData.batteryLevelMain.getter()
{
  uint64_t v0;
  int v2;
  char v3;
  uint64_t v4;

  swift_beginAccess();
  v2 = *(_DWORD *)(v0 + 56);
  v3 = *(_BYTE *)(v0 + 60);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.batteryLevelMain.setter(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;

  v3 = a1;
  v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 56) = v3;
  *(_BYTE *)(v1 + 60) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.batteryLevelMain.modify())()
{
  swift_beginAccess();
  return ReplayData.batteryLevelMain.modify;
}

uint64_t ReplayData.batteryLevelMain.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.deviceName()
{
  return 0;
}

uint64_t key path getter for ReplayData.deviceName : ReplayData@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 400))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for ReplayData.deviceName : ReplayData(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String?(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 408))(v4, v6);
  return swift_release();
}

uint64_t ReplayData.deviceName.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t ReplayData.deviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 64) = a1;
  *(_QWORD *)(v2 + 72) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplayData.deviceName.modify())()
{
  swift_beginAccess();
  return ReplayData.deviceName.modify;
}

uint64_t ReplayData.deviceName.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.deviceColor()
{
  uint64_t v1;

  LODWORD(v1) = 0;
  BYTE4(v1) = 1;
  return v1;
}

uint64_t key path getter for ReplayData.deviceColor : ReplayData@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 424))(v2);
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = BYTE4(v3) & 1;
  return swift_release();
}

uint64_t key path setter for ReplayData.deviceColor : ReplayData(int *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 4);
  v3 = *a2;
  swift_retain();
  LODWORD(v6) = v4;
  BYTE4(v6) = v5 & 1;
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 432))(v6);
  return swift_release();
}

uint64_t ReplayData.deviceColor.getter()
{
  uint64_t v0;
  int v2;
  char v3;
  uint64_t v4;

  swift_beginAccess();
  v2 = *(_DWORD *)(v0 + 80);
  v3 = *(_BYTE *)(v0 + 84);
  swift_endAccess();
  LODWORD(v4) = v2;
  BYTE4(v4) = v3 & 1;
  return v4;
}

uint64_t ReplayData.deviceColor.setter(uint64_t a1)
{
  uint64_t v1;
  int v3;
  char v4;

  v3 = a1;
  v4 = BYTE4(a1);
  swift_beginAccess();
  *(_DWORD *)(v1 + 80) = v3;
  *(_BYTE *)(v1 + 84) = v4 & 1;
  return swift_endAccess();
}

uint64_t (*ReplayData.deviceColor.modify())()
{
  swift_beginAccess();
  return ReplayData.deviceColor.modify;
}

uint64_t ReplayData.deviceColor.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData.randomHexAddress@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  UUID.init()();
  v1 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(a1, 0, 1);
}

uint64_t key path getter for ReplayData.randomHexAddress : ReplayData@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v10 = a2;
  v6 = a1;
  v7 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)&v5 - v7;
  v8 = *(_QWORD *)MEMORY[0x24BDAC7A8](v6, v2);
  v3 = swift_retain();
  v12 = v8;
  v11 = v8;
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 448))(v3);
  outlined init with take of UUID?(v9, v10);
  return swift_release();
}

uint64_t key path setter for ReplayData.randomHexAddress : ReplayData(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const void *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a1;
  v8 = a2;
  v7 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = (const void *)MEMORY[0x24BDAC7A8](v6, v2);
  v9 = (char *)&v5 - v7;
  outlined init with copy of UUID?(v3, (char *)&v5 - v7);
  v10 = *v8;
  swift_retain();
  v12 = v10;
  v11 = v10;
  (*(void (**)(char *))(*(_QWORD *)v10 + 456))(v9);
  return swift_release();
}

uint64_t ReplayData.randomHexAddress.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  const void *v3;

  v3 = (const void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
  swift_beginAccess();
  outlined init with copy of UUID?(v3, a1);
  return swift_endAccess();
}

uint64_t ReplayData.randomHexAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  const void *v11;

  v8 = a1;
  v11 = 0;
  v10 = 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?)
                              - 8)
                  + 64)
      + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (char *)&v4 - v4;
  v11 = (const void *)MEMORY[0x24BDAC7A8](v8, v2);
  v10 = v1;
  outlined init with copy of UUID?(v11, (char *)&v4 - v4);
  v6 = (void *)(v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
  v7 = &v9;
  swift_beginAccess();
  outlined assign with take of UUID?(v5, v6);
  swift_endAccess();
  return outlined destroy of UUID?(v8);
}

void *outlined assign with take of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(const void *, uint64_t, uint64_t);

  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  if (((unsigned int (*)(void *, uint64_t))v9)(a2, 1))
  {
    if (v9(a1, 1, v7))
    {
      v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a2, a1, v7);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
    }
  }
  else if (v9(a1, 1, v7))
  {
    (*(void (**)(void *, uint64_t))(v8 + 8))(a2, v7);
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a2, a1, v7);
  }
  return a2;
}

uint64_t (*ReplayData.randomHexAddress.modify())()
{
  swift_beginAccess();
  return ReplayData.randomHexAddress.modify;
}

uint64_t ReplayData.randomHexAddress.modify()
{
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of ReplayData.listeners@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  _QWORD v6[2];

  v6[1] = a1;
  swift_bridgeObjectRetain();
  v6[0] = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<AnyCancellable>);
  CodableIgnored.init(wrappedValue:)(v6, v2, a2);
  return swift_bridgeObjectRelease();
}

uint64_t ReplayData.listeners.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t ReplayData.listeners.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*ReplayData.listeners.modify())()
{
  swift_beginAccess();
  return ReplayData.listeners.modify;
}

uint64_t ReplayData.listeners.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of ReplayData._listeners()
{
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  return Set.init()();
}

unint64_t lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable;
  if (!lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable)
  {
    v0 = type metadata accessor for AnyCancellable();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDB9B70], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AnyCancellable and conformance AnyCancellable);
    return v1;
  }
  return v3;
}

uint64_t ReplayData.__allocating_init()()
{
  swift_allocObject();
  return ReplayData.init()();
}

uint64_t ReplayData.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 24) = 1;
  *(_BYTE *)(v0 + 25) = 2;
  *(_BYTE *)(v0 + 26) = 2;
  *(_BYTE *)(v0 + 27) = 2;
  *(_BYTE *)(v0 + 28) = 2;
  *(_DWORD *)(v0 + 32) = 0;
  *(_BYTE *)(v0 + 36) = 1;
  *(_DWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 44) = 1;
  *(_DWORD *)(v0 + 48) = 0;
  *(_BYTE *)(v0 + 52) = 1;
  *(_DWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 60) = 1;
  *(_QWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_DWORD *)(v0 + 80) = 0;
  *(_BYTE *)(v0 + 84) = 1;
  v4 = v0 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress;
  UUID.init()();
  v1 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v4, 0, 1);
  v5 = OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  v2 = Set.init()();
  property wrapper backing initializer of ReplayData.listeners(v2, &v7);
  result = v6;
  *(_QWORD *)(v6 + v5) = v7;
  return result;
}

void static ReplayData.CodingKeys.== infix(_:_:)(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23DB0ED70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23DB0EE28
                                                                                       + *((int *)qword_23DB0EF20 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23DB0EE38()
{
  uint64_t v1;

  return v1 == 0;
}

void ReplayData.CodingKeys.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X8 }
}

uint64_t sub_23DB0EFA4()
{
  return Hasher.combine<A>(_:)();
}

uint64_t ReplayData.CodingKeys.init(stringValue:)()
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  unsigned __int8 v15;

  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("productId", 9uLL, 1);
  swift_bridgeObjectRetain();
  v14 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 0;
LABEL_28:
    swift_bridgeObjectRelease();
    return v15;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateCase", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v13 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 1;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateLeft", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v12 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 2;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateRight", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v11 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 3;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryStateMain", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v10 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v10 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 4;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelCase", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v9 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 5;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelLeft", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v8 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 6;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelRight", 0x11uLL, 1);
  swift_bridgeObjectRetain();
  v7 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 7;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("batteryLevelMain", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v6 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 8;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceName", 0xAuLL, 1);
  swift_bridgeObjectRetain();
  v5 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v5 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 9;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("deviceColor", 0xBuLL, 1);
  swift_bridgeObjectRetain();
  v4 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 10;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("randomHexAddress", 0x10uLL, 1);
  swift_bridgeObjectRetain();
  v3 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 11;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("listeners", 9uLL, 1);
  swift_bridgeObjectRetain();
  v2 = static String.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    v15 = 12;
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 13;
}

uint64_t ReplayData.CodingKeys.init(intValue:)()
{
  return 13;
}

uint64_t ReplayData.CodingKeys.hashValue.getter()
{
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData.CodingKeys, &type metadata for ReplayData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData.CodingKeys, &type metadata for ReplayData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData.CodingKeys, &type metadata for ReplayData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData.CodingKeys, &type metadata for ReplayData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys;
  if (!lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData.CodingKeys, &type metadata for ReplayData.CodingKeys);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys);
    return v0;
  }
  return v2;
}

uint64_t ReplayData.CodingKeys.intValue.getter()
{
  return 0;
}

void ReplayData.CodingKeys.stringValue.getter(char a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23DB0F9F4()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("productId", 9uLL, 1)._countAndFlagsBits;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReplayData.CodingKeys(char *a1)
{
  char v1;

  static ReplayData.CodingKeys.== infix(_:_:)(*a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReplayData.CodingKeys()
{
  return ReplayData.CodingKeys.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance ReplayData.CodingKeys(uint64_t a1)
{
  char *v1;

  ReplayData.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReplayData.CodingKeys(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

void protocol witness for CodingKey.stringValue.getter in conformance ReplayData.CodingKeys()
{
  char *v0;

  ReplayData.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ReplayData.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReplayData.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance ReplayData.CodingKeys()
{
  return ReplayData.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance ReplayData.CodingKeys@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = ReplayData.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReplayData.CodingKeys()
{
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ReplayData.CodingKeys()
{
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t ReplayData.deinit()
{
  uint64_t v0;
  uint64_t v2;

  outlined destroy of String?();
  outlined destroy of UUID?(v0 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
  outlined destroy of CodableIgnored<Set<AnyCancellable>>();
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CodableIgnored<Set<AnyCancellable>>()
{
  swift_bridgeObjectRelease();
}

uint64_t ReplayData.__deallocating_deinit()
{
  ReplayData.deinit();
  return swift_deallocClassInstance();
}

uint64_t ReplayData.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  char v108;
  int v109;
  char v110;
  char v111;
  uint64_t v112;
  char v113;
  int v114;
  char v115;
  char v116;
  uint64_t v117;
  int v118;
  char v119;
  char v120;
  uint64_t v121;
  int v122;
  char v123;
  char v124;
  _BYTE v125[40];
  uint64_t v126;
  uint64_t v127;

  v93 = (uint64_t *)v125;
  v94 = a1;
  v127 = 0;
  v126 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v91 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v3);
  v92 = (uint64_t)v45 - v91;
  v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<ReplayData.CodingKeys>);
  v95 = *(_QWORD *)(v101 - 8);
  v96 = (*(_QWORD *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (_QWORD *)MEMORY[0x24BDAC7A8](v94, v4);
  v100 = (char *)v45 - v96;
  *(_QWORD *)(v6 + 48) = v5;
  *(_QWORD *)(v6 + 40) = v1;
  v97 = v5[3];
  v98 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v97);
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  v7 = dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(uint64_t))(*(_QWORD *)v99 + 184))(v7);
  v8 = v102;
  v125[39] = 0;
  v9 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  v103 = v8;
  v104 = v8;
  if (v8)
  {
    v56 = v104;
    result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
    v57 = v56;
  }
  else
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 208))(v9);
    v10 = v103;
    v125[38] = 1;
    v11 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v89 = v10;
    v90 = v10;
    if (v10)
    {
      v55 = v90;
      result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
      v57 = v55;
    }
    else
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v99 + 232))(v11);
      v12 = v89;
      v125[37] = 2;
      v13 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      v87 = v12;
      v88 = v12;
      if (v12)
      {
        v54 = v88;
        result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
        v57 = v54;
      }
      else
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 256))(v13);
        v14 = v87;
        v125[36] = 3;
        v15 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
        v85 = v14;
        v86 = v14;
        if (v14)
        {
          v53 = v86;
          result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
          v57 = v53;
        }
        else
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v99 + 280))(v15);
          v16 = v85;
          v125[35] = 4;
          v17 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
          v83 = v16;
          v84 = v16;
          if (v16)
          {
            v52 = v84;
            result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
            v57 = v52;
          }
          else
          {
            v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 304))(v17);
            v19 = v93;
            v20 = v83;
            v93[3] = v18;
            v21 = *((_DWORD *)v19 + 6);
            v22 = v125[28];
            v125[23] = 5;
            *((_DWORD *)v19 + 2) = v21;
            v125[12] = v22 & 1;
            v23 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
            v81 = v20;
            v82 = v20;
            if (v20)
            {
              v51 = v82;
              result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
              v57 = v51;
            }
            else
            {
              v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 328))(v23);
              v25 = v93;
              v26 = v81;
              *v93 = v24;
              v27 = *(_DWORD *)v25;
              v124 = 6;
              v122 = v27;
              v123 = v125[4] & 1;
              v28 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
              v79 = v26;
              v80 = v26;
              if (v26)
              {
                v50 = v80;
                result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                v57 = v50;
              }
              else
              {
                v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 352))(v28);
                v30 = v79;
                v121 = v29;
                v120 = 7;
                v118 = v29;
                v119 = BYTE4(v29) & 1;
                v31 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                v77 = v30;
                v78 = v30;
                if (v30)
                {
                  v49 = v78;
                  result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                  v57 = v49;
                }
                else
                {
                  v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 376))(v31);
                  v33 = v77;
                  v117 = v32;
                  v116 = 8;
                  v114 = v32;
                  v115 = BYTE4(v32) & 1;
                  v34 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                  v75 = v33;
                  v76 = v33;
                  if (v33)
                  {
                    v48 = v76;
                    result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                    v57 = v48;
                  }
                  else
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v99 + 400))(v34);
                    v35 = v75;
                    v72 = v36;
                    v113 = 9;
                    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                    v73 = v35;
                    v74 = v35;
                    if (v35)
                    {
                      v47 = v74;
                      swift_bridgeObjectRelease();
                      result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                      v57 = v47;
                    }
                    else
                    {
                      v37 = v99;
                      v38 = swift_bridgeObjectRelease();
                      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 424))(v38);
                      v40 = v73;
                      v112 = v39;
                      v111 = 10;
                      v109 = v39;
                      v110 = BYTE4(v39) & 1;
                      v41 = KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
                      v70 = v40;
                      v71 = v40;
                      if (v40)
                      {
                        v46 = v71;
                        result = (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                        v57 = v46;
                      }
                      else
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v99 + 448))(v41);
                        v66 = &v108;
                        v108 = 11;
                        v67 = type metadata accessor for UUID();
                        lazy protocol witness table accessor for type UUID and conformance UUID();
                        v42 = v70;
                        KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
                        v68 = v42;
                        v69 = v42;
                        if (v42)
                        {
                          v45[1] = v69;
                          outlined destroy of UUID?(v92);
                          return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                        }
                        else
                        {
                          outlined destroy of UUID?(v92);
                          v58 = (uint64_t *)(v99 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
                          v59 = &v107;
                          swift_beginAccess();
                          v60 = *v58;
                          swift_bridgeObjectRetain();
                          swift_endAccess();
                          v63 = &v106;
                          v106 = v60;
                          v61 = &v105;
                          v105 = 12;
                          v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
                          lazy protocol witness table accessor for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>();
                          v43 = v68;
                          KeyedEncodingContainer.encode<A>(_:forKey:)();
                          v64 = v43;
                          v65 = v43;
                          if (v43)
                            v45[0] = v65;
                          outlined destroy of CodableIgnored<Set<AnyCancellable>>();
                          return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v100, v101);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

unint64_t lazy protocol witness table accessor for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>;
  if (!lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CodableIgnored<A>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>;
  if (!lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CodableIgnored<A>, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>);
    return v1;
  }
  return v3;
}

uint64_t ReplayData.hashValue.getter()
{
  type metadata accessor for ReplayData();
  lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  return _hashValue<A>(for:)();
}

uint64_t type metadata accessor for ReplayData()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for ReplayData;
  if (!type metadata singleton initialization cache for ReplayData)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t lazy protocol witness table accessor for type ReplayData and conformance ReplayData()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    v0 = type metadata accessor for ReplayData();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    v0 = type metadata accessor for ReplayData();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    v0 = type metadata accessor for ReplayData();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    v0 = type metadata accessor for ReplayData();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type ReplayData and conformance ReplayData;
  if (!lazy protocol witness table cache variable for type ReplayData and conformance ReplayData)
  {
    v0 = type metadata accessor for ReplayData();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type ReplayData and conformance ReplayData);
    return v1;
  }
  return v3;
}

uint64_t ReplayData.__allocating_init(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  swift_allocObject();
  v5 = ReplayData.init(from:)(a1);
  if (v3)
    return v2;
  else
    return v5;
}

uint64_t ReplayData.init(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  void *v66;
  uint64_t *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  int v106;
  int v107;
  char *v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  int v113;
  _BYTE *v114;
  uint64_t v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  _BYTE *v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  _BYTE *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  _BYTE *v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  _BYTE *v136;
  int v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  unsigned int v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  uint64_t v167;
  uint64_t v168;
  char v169;
  _QWORD v170[4];
  char v171;
  _BYTE v172[32];
  _QWORD v173[4];
  char v174;
  _QWORD v175[4];
  char v176;
  _QWORD v177[4];
  char v178;
  char v179;
  uint64_t v180;
  char v181;
  _BYTE v182[32];
  _BYTE v183[32];
  _BYTE v184[32];
  _BYTE v185[32];
  _BYTE v186[32];
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v158 = (_QWORD *)a1;
  v189 = 0;
  v188 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v146 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v3);
  v147 = (char *)v49 - v146;
  v148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<ReplayData.CodingKeys>);
  v149 = *(_QWORD *)(v148 - 8);
  v150 = (*(_QWORD *)(v149 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v158, v4);
  v159 = (char *)v49 - v150;
  v189 = v5;
  v188 = v1;
  v155 = 0;
  *(_QWORD *)(v1 + 16) = 0;
  v151 = 1;
  *(_BYTE *)(v1 + 24) = 1;
  *(_BYTE *)(v1 + 25) = 2;
  *(_BYTE *)(v1 + 26) = 2;
  *(_BYTE *)(v1 + 27) = 2;
  *(_BYTE *)(v1 + 28) = 2;
  v152 = 0;
  *(_DWORD *)(v1 + 32) = 0;
  *(_BYTE *)(v1 + 36) = 1;
  *(_DWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 44) = 1;
  *(_DWORD *)(v1 + 48) = 0;
  *(_BYTE *)(v1 + 52) = 1;
  *(_DWORD *)(v1 + 56) = 0;
  *(_BYTE *)(v1 + 60) = 1;
  *(_QWORD *)(v1 + 64) = 0;
  *(_QWORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 84) = 1;
  v153 = v1 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress;
  UUID.init()();
  v154 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v154 - 8) + 56))(v153, v152, v151);
  v157 = OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners;
  v156 = type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  v6 = Set.init()();
  property wrapper backing initializer of ReplayData.listeners(v6, &v187);
  v7 = v158;
  *(_QWORD *)(v1 + v157) = v187;
  v161 = v7[3];
  v162 = v7[4];
  __swift_project_boxed_opaque_existential_1(v7, v161);
  lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
  v8 = v160;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v163 = v8;
  v164 = v8;
  if (v8)
  {
    v62 = v164;
  }
  else
  {
    v186[31] = 0;
    v9 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v141 = 0;
    v142 = v9;
    v143 = v10;
    v144 = 0;
    v135 = v10;
    v134 = v9;
    v136 = v186;
    swift_beginAccess();
    v11 = v135;
    v12 = v145;
    *(_QWORD *)(v145 + 16) = v134;
    v137 = 1;
    *(_BYTE *)(v12 + 24) = v11 & 1;
    swift_endAccess();
    v13 = v141;
    v185[31] = v137;
    v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v138 = v13;
    v139 = v14;
    v140 = v13;
    if (v13)
    {
      v61 = v140;
      (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
      v62 = v61;
    }
    else
    {
      v129 = v139;
      v130 = v185;
      swift_beginAccess();
      *(_BYTE *)(v145 + 25) = v129;
      swift_endAccess();
      v15 = v138;
      v184[31] = 2;
      v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v131 = v15;
      v132 = v16;
      v133 = v15;
      if (v15)
      {
        v60 = v133;
        (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
        v62 = v60;
      }
      else
      {
        v124 = v132;
        v125 = v184;
        swift_beginAccess();
        *(_BYTE *)(v145 + 26) = v124;
        swift_endAccess();
        v17 = v131;
        v183[31] = 3;
        v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
        v126 = v17;
        v127 = v18;
        v128 = v17;
        if (v17)
        {
          v59 = v128;
          (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
          v62 = v59;
        }
        else
        {
          v119 = v127;
          v120 = v183;
          swift_beginAccess();
          *(_BYTE *)(v145 + 27) = v119;
          swift_endAccess();
          v19 = v126;
          v182[31] = 4;
          v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          v121 = v19;
          v122 = v20;
          v123 = v19;
          if (v19)
          {
            v58 = v123;
            (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
            v62 = v58;
          }
          else
          {
            v113 = v122;
            v114 = v182;
            swift_beginAccess();
            *(_BYTE *)(v145 + 28) = v113;
            swift_endAccess();
            v21 = v121;
            v181 = 5;
            v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
            v115 = v21;
            v180 = v22;
            v116 = v22;
            v117 = BYTE4(v22);
            v118 = v21;
            if (v21)
            {
              v57 = v118;
              (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
              v62 = v57;
            }
            else
            {
              v107 = v117;
              v106 = v116;
              v108 = &v179;
              swift_beginAccess();
              v23 = v107;
              v24 = v145;
              *(_DWORD *)(v145 + 32) = v106;
              *(_BYTE *)(v24 + 36) = v23 & 1;
              swift_endAccess();
              v25 = v115;
              v178 = 6;
              v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
              v109 = v25;
              v177[3] = v26;
              v110 = v26;
              v111 = BYTE4(v26);
              v112 = v25;
              if (v25)
              {
                v56 = v112;
                (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                v62 = v56;
              }
              else
              {
                v100 = v111;
                v99 = v110;
                v101 = v177;
                swift_beginAccess();
                v27 = v100;
                v28 = v145;
                *(_DWORD *)(v145 + 40) = v99;
                *(_BYTE *)(v28 + 44) = v27 & 1;
                swift_endAccess();
                v29 = v109;
                v176 = 7;
                v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                v102 = v29;
                v175[3] = v30;
                v103 = v30;
                v104 = BYTE4(v30);
                v105 = v29;
                if (v29)
                {
                  v55 = v105;
                  (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                  v62 = v55;
                }
                else
                {
                  v93 = v104;
                  v92 = v103;
                  v94 = v175;
                  swift_beginAccess();
                  v31 = v93;
                  v32 = v145;
                  *(_DWORD *)(v145 + 48) = v92;
                  *(_BYTE *)(v32 + 52) = v31 & 1;
                  swift_endAccess();
                  v33 = v102;
                  v174 = 8;
                  v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                  v95 = v33;
                  v173[3] = v34;
                  v96 = v34;
                  v97 = BYTE4(v34);
                  v98 = v33;
                  if (v33)
                  {
                    v54 = v98;
                    (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                    v62 = v54;
                  }
                  else
                  {
                    v86 = v97;
                    v85 = v96;
                    v87 = v173;
                    swift_beginAccess();
                    v35 = v86;
                    v36 = v145;
                    *(_DWORD *)(v145 + 56) = v85;
                    *(_BYTE *)(v36 + 60) = v35 & 1;
                    swift_endAccess();
                    v37 = v95;
                    v172[31] = 9;
                    v38 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                    v88 = v37;
                    v89 = v38;
                    v90 = v39;
                    v91 = v37;
                    if (v37)
                    {
                      v53 = v91;
                      (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                      v62 = v53;
                    }
                    else
                    {
                      v79 = v90;
                      v78 = v89;
                      v80 = v172;
                      swift_beginAccess();
                      v40 = v145;
                      v41 = v79;
                      *(_QWORD *)(v145 + 64) = v78;
                      *(_QWORD *)(v40 + 72) = v41;
                      swift_bridgeObjectRelease();
                      swift_endAccess();
                      v42 = v88;
                      v171 = 10;
                      v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
                      v81 = v42;
                      v170[3] = v43;
                      v82 = v43;
                      v83 = BYTE4(v43);
                      v84 = v42;
                      if (v42)
                      {
                        v52 = v84;
                        (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                        v62 = v52;
                      }
                      else
                      {
                        v73 = v83;
                        v72 = v82;
                        v74 = v170;
                        swift_beginAccess();
                        v44 = v73;
                        v45 = v145;
                        *(_DWORD *)(v145 + 80) = v72;
                        *(_BYTE *)(v45 + 84) = v44 & 1;
                        swift_endAccess();
                        v75 = &v169;
                        v169 = 11;
                        lazy protocol witness table accessor for type UUID and conformance UUID();
                        v46 = v81;
                        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
                        v76 = v46;
                        v77 = v46;
                        if (v46)
                        {
                          v51 = v77;
                          (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                          v62 = v51;
                        }
                        else
                        {
                          v66 = (void *)(v145 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData_randomHexAddress);
                          v67 = &v168;
                          swift_beginAccess();
                          outlined assign with take of UUID?(v147, v66);
                          swift_endAccess();
                          v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodableIgnored<Set<AnyCancellable>>);
                          v68 = &v166;
                          v166 = 12;
                          lazy protocol witness table accessor for type CodableIgnored<Set<AnyCancellable>> and conformance CodableIgnored<A>();
                          v47 = v76;
                          KeyedDecodingContainer.decode<A>(_:forKey:)();
                          v70 = v47;
                          v71 = v47;
                          if (!v47)
                          {
                            v64 = v167;
                            v63 = (_QWORD *)(v145 + OBJC_IVAR____TtC16HeadphoneManager10ReplayData__listeners);
                            v65 = &v165;
                            swift_beginAccess();
                            *v63 = v64;
                            swift_bridgeObjectRelease();
                            swift_endAccess();
                            (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
                            return v145;
                          }
                          v50 = v71;
                          (*(void (**)(char *, uint64_t))(v149 + 8))(v159, v148);
                          v62 = v50;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v49[0] = v62;
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v158);
  return v49[1];
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.productId.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.productId.setter in conformance ReplayData(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(**(_QWORD **)v2 + 192))(a1, a2 & 1);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.productId.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 200))();
  return protocol witness for HeadphoneDeviceDataReplayable.productId.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.productId.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.setter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 224))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateCase.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.setter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 240))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 248))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateLeft.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.setter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 272))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateRight.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 280))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.setter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 288))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 296))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryStateMain.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.getter in conformance ReplayData()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 304))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.setter in conformance ReplayData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 312))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 320))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelCase.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.getter in conformance ReplayData()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 328))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.setter in conformance ReplayData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 336))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 344))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelLeft.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.getter in conformance ReplayData()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 352))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.setter in conformance ReplayData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 360))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 368))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelRight.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.getter in conformance ReplayData()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 376))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.setter in conformance ReplayData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 384))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 392))();
  return protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.batteryLevelMain.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.deviceColor.getter in conformance ReplayData()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(**(_QWORD **)v0 + 424))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.deviceColor.setter in conformance ReplayData(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)v1 + 432))(v3);
}

void (*protocol witness for HeadphoneDeviceDataReplayable.deviceColor.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 440))();
  return protocol witness for HeadphoneDeviceDataReplayable.deviceColor.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.deviceColor.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 448))();
}

uint64_t protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.setter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 456))();
}

void (*protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.modify in conformance ReplayData(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v4;

  v4 = malloc(0x28uLL);
  *a1 = v4;
  v4[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 464))();
  return protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.modify in conformance ReplayData;
}

void protocol witness for HeadphoneDeviceDataReplayable.randomHexAddress.modify in conformance ReplayData(void **a1, char a2)
{
  void (**v2)(void *, uint64_t);

  v2 = (void (**)(void *, uint64_t))*a1;
  if ((a2 & 1) != 0)
    v2[4](v2, 1);
  else
    v2[4](v2, 0);
  free(v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ReplayData@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 520))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 504))();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ReplayData(uint64_t a1)
{
  void (**v1)(_QWORD);

  v1 = (void (**)(_QWORD))MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData);
  return HeadphoneDeviceDataReplayable.description.getter(a1, v1);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance ReplayData()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 512))();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ReplayData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = MEMORY[0x24263B698](&protocol conformance descriptor for ReplayData);
  return HeadphoneDeviceDataReplayable.hash(into:)(a1, a2, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ReplayData(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReplayData(uint64_t *a1, uint64_t *a2)
{
  return static ReplayData.== infix(_:_:)(*a1, *a2) & 1;
}

unint64_t instantiation function for generic protocol witness table for ReplayData(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  a1[2] = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  a1[3] = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  result = lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  a1[4] = result;
  return result;
}

unint64_t base witness table accessor for Equatable in ReplayData()
{
  return lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.productId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.productId.setter(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 48))(a1, a2 & 1);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.productId.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateCase.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateCase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateCase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateLeft.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateLeft.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateLeft.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateRight.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateRight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 120))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateRight.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 128))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateMain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateMain.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryStateMain.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 152))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelCase.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 160))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelCase.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 168))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelCase.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 176))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelLeft.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 184))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelLeft.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 192))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelLeft.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 200))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelRight.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 208))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelRight.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 216))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelRight.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 224))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelMain.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 232))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelMain.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 240))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.batteryLevelMain.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 248))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.deviceColor.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v4 = (*(uint64_t (**)(void))(a2 + 256))();
  LODWORD(v3) = v4;
  BYTE4(v3) = BYTE4(v4) & 1;
  return v3;
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.deviceColor.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  LODWORD(v4) = a1;
  BYTE4(v4) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(a3 + 264))(v4);
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.deviceColor.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 272))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.randomHexAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 280))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.randomHexAddress.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 288))();
}

uint64_t dispatch thunk of HeadphoneDeviceDataReplayable.randomHexAddress.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 296))();
}

uint64_t ObjC metadata update function for ReplayData()
{
  return type metadata accessor for ReplayData();
}

uint64_t type metadata completion function for ReplayData()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for UUID?();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t method lookup function for ReplayData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ReplayData.productId.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ReplayData.productId.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 192))(a1, a2 & 1);
}

uint64_t dispatch thunk of ReplayData.productId.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ReplayData.batteryStateCase.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of ReplayData.batteryStateCase.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of ReplayData.batteryStateCase.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of ReplayData.batteryStateLeft.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of ReplayData.batteryStateLeft.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of ReplayData.batteryStateLeft.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of ReplayData.batteryStateRight.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of ReplayData.batteryStateRight.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of ReplayData.batteryStateRight.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of ReplayData.batteryStateMain.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of ReplayData.batteryStateMain.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of ReplayData.batteryStateMain.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelCase.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelCase.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 312))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelCase.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelLeft.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelLeft.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 336))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelLeft.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelRight.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelRight.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 360))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelRight.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of ReplayData.batteryLevelMain.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.batteryLevelMain.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 384))(v3);
}

uint64_t dispatch thunk of ReplayData.batteryLevelMain.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of ReplayData.deviceName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of ReplayData.deviceName.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of ReplayData.deviceName.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of ReplayData.deviceColor.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 424))();
  LODWORD(v2) = v3;
  BYTE4(v2) = BYTE4(v3) & 1;
  return v2;
}

uint64_t dispatch thunk of ReplayData.deviceColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  LODWORD(v3) = a1;
  BYTE4(v3) = BYTE4(a1) & 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 432))(v3);
}

uint64_t dispatch thunk of ReplayData.deviceColor.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 440))();
}

uint64_t dispatch thunk of ReplayData.randomHexAddress.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 448))();
}

uint64_t dispatch thunk of ReplayData.randomHexAddress.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 456))();
}

uint64_t dispatch thunk of ReplayData.randomHexAddress.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of ReplayData.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 496))();
}

uint64_t dispatch thunk of ReplayData.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 504))();
}

uint64_t dispatch thunk of ReplayData.hashValue.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 512))();
}

uint64_t dispatch thunk of ReplayData.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t type metadata accessor for UUID?()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v3;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for UUID?;
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v3 = type metadata accessor for Optional();
    v4 = v3;
    if (!v0)
    {
      v1 = v3;
      atomic_store(v3, (unint64_t *)&lazy cache variable for type metadata for UUID?);
      return v1;
    }
  }
  return v4;
}

uint64_t getEnumTagSinglePayload for ReplayData.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xF3)
      goto LABEL_15;
    v7 = ((a2 + 12) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 243;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 13;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for ReplayData.CodingKeys(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xF3)
  {
    v5 = ((a3 + 12) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xF3)
  {
    v4 = ((a2 - 244) >> 8) + 1;
    *result = a2 + 12;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 12;
  }
  return result;
}

uint64_t getEnumTag for ReplayData.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for ReplayData.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReplayData.CodingKeys()
{
  return &type metadata for ReplayData.CodingKeys;
}

unint64_t base witness table accessor for CustomDebugStringConvertible in ReplayData.CodingKeys()
{
  return lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
}

unint64_t base witness table accessor for CustomStringConvertible in ReplayData.CodingKeys()
{
  return lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
}

unint64_t base witness table accessor for Equatable in ReplayData.CodingKeys()
{
  return lazy protocol witness table accessor for type ReplayData.CodingKeys and conformance ReplayData.CodingKeys();
}

void *outlined init with take of UUID?(const void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t))(v7 + 48))(a1, 1))
  {
    v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(a2, a1, *(_QWORD *)(*(_QWORD *)(v2 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a2, a1, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  return a2;
}

uint64_t HMDeviceRecord.validAudiograms.getter()
{
  type metadata accessor for HKAudiogramSample();
  return _allocateUninitializedArray<A>(_:)();
}

unint64_t type metadata accessor for HKAudiogramSample()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HKAudiogramSample;
  if (!lazy cache variable for type metadata for HKAudiogramSample)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HKAudiogramSample);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t HMDeviceRecord.invalidAudiograms.getter()
{
  type metadata accessor for HKAudiogramSample();
  return _allocateUninitializedArray<A>(_:)();
}

uint64_t protocol witness for HMDeviceRecordType.bluetoothAddress.getter in conformance HMDeviceRecord()
{
  return @nonobjc HMDeviceRecord.bluetoothAddress.getter();
}

uint64_t @nonobjc HMDeviceRecord.bluetoothAddress.getter()
{
  void *v0;
  id v1;
  id v3;
  uint64_t v4;

  v1 = v0;
  v3 = objc_msgSend(v0, sel_bluetoothAddress);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t protocol witness for HMDeviceRecordType.bluetoothUUID.getter in conformance HMDeviceRecord()
{
  return @nonobjc HMDeviceRecord.bluetoothUUID.getter();
}

uint64_t @nonobjc HMDeviceRecord.bluetoothUUID.getter()
{
  void *v0;
  id v1;
  id v3;
  uint64_t v4;

  v1 = v0;
  v3 = objc_msgSend(v0, sel_bluetoothUUID);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t protocol witness for HMDeviceRecordType.pmeVoiceEnabled.getter in conformance HMDeviceRecord()
{
  return @nonobjc HMDeviceRecord.pmeVoiceEnabled.getter();
}

uint64_t @nonobjc HMDeviceRecord.pmeVoiceEnabled.getter()
{
  void *v0;
  id v1;
  unsigned int v3;

  v1 = v0;
  v3 = objc_msgSend(v0, sel_pmeVoiceEnabled);

  return v3;
}

uint64_t protocol witness for HMDeviceRecordType.pmeMediaEnabled.getter in conformance HMDeviceRecord()
{
  return @nonobjc HMDeviceRecord.pmeMediaEnabled.getter();
}

uint64_t @nonobjc HMDeviceRecord.pmeMediaEnabled.getter()
{
  void *v0;
  id v1;
  unsigned int v3;

  v1 = v0;
  v3 = objc_msgSend(v0, sel_pmeMediaEnabled);

  return v3;
}

uint64_t protocol witness for HMDeviceRecordType.listeningModeOffAllowed.getter in conformance HMDeviceRecord()
{
  return @nonobjc HMDeviceRecord.listeningModeOffAllowed.getter();
}

uint64_t @nonobjc HMDeviceRecord.listeningModeOffAllowed.getter()
{
  void *v0;
  id v1;
  unsigned int v3;

  v1 = v0;
  v3 = objc_msgSend(v0, sel_listeningModeOffAllowed);

  return v3;
}

void static HearingRecordPropertyRemoteSendState.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X8 }
}

uint64_t sub_23DB140AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, unsigned __int8 a12)
{
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_23DB140F8
                                                                                       + *((int *)qword_23DB14160 + a12)))(a1, a2, a3, a4, a5, a6);
}

BOOL sub_23DB14108()
{
  uint64_t v1;

  return v1 == 0;
}

void HearingRecordPropertyRemoteSendState.hash(into:)()
{
  __asm { BR              X8 }
}

uint64_t sub_23DB141C4()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HearingRecordPropertyRemoteSendState.hashValue.getter()
{
  lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HearingRecordPropertyRemoteSendState, &type metadata for HearingRecordPropertyRemoteSendState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState;
  if (!lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HearingRecordPropertyRemoteSendState, &type metadata for HearingRecordPropertyRemoteSendState);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState);
    return v0;
  }
  return v2;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HearingRecordPropertyRemoteSendState(uint64_t a1)
{
  char v1;

  static HearingRecordPropertyRemoteSendState.== infix(_:_:)(a1);
  return v1 & 1;
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HearingRecordPropertyRemoteSendState()
{
  return HearingRecordPropertyRemoteSendState.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance HearingRecordPropertyRemoteSendState()
{
  HearingRecordPropertyRemoteSendState.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HearingRecordPropertyRemoteSendState(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

unint64_t instantiation function for generic protocol witness table for HMDeviceRecord(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type HMDeviceRecord and conformance NSObject();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HMDeviceRecord and conformance NSObject()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HMDeviceRecord and conformance NSObject;
  if (!lazy protocol witness table cache variable for type HMDeviceRecord and conformance NSObject)
  {
    v0 = type metadata accessor for HMDeviceRecord();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE5BE0], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HMDeviceRecord and conformance NSObject);
    return v1;
  }
  return v3;
}

unint64_t type metadata accessor for HMDeviceRecord()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HMDeviceRecord;
  if (!lazy cache variable for type metadata for HMDeviceRecord)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HMDeviceRecord);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t base witness table accessor for Equatable in HearingRecordPropertyRemoteSendState()
{
  return lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState();
}

uint64_t dispatch thunk of HMDeviceRecordType.bluetoothAddress.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of HMDeviceRecordType.bluetoothUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of HMDeviceRecordType.pmeVoiceEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HMDeviceRecordType.pmeMediaEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of HMDeviceRecordType.listeningModeOffAllowed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t getEnumTagSinglePayload for HearingRecordPropertyRemoteSendState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFC)
      goto LABEL_15;
    v7 = ((a2 + 3) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 252;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 4;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for HearingRecordPropertyRemoteSendState(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFC)
  {
    v5 = ((a3 + 3) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFC)
  {
    v4 = ((a2 - 253) >> 8) + 1;
    *result = a2 + 3;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 3;
  }
  return result;
}

uint64_t getEnumTag for HearingRecordPropertyRemoteSendState(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for HearingRecordPropertyRemoteSendState(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HearingRecordPropertyRemoteSendState()
{
  return &type metadata for HearingRecordPropertyRemoteSendState;
}

uint64_t dispatch thunk of HMDeviceConfigurable.deviceRemoteSendState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of HMDeviceConfigurable.bluetoothUUID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of HMDeviceConfigurable.deviceConfigFor<A>(keyPath:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

Swift::Void __swiftcall Headphone_Manager.configHearingModeClient()()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  id v6;
  uint64_t v7;
  const void *v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  const void *v16;
  id v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t (*v21)(uint64_t, void *);
  void *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, void *);
  void *v29;
  uint64_t (*v30)(void *);
  uint64_t v31;
  _QWORD v32[6];
  uint64_t aBlock;
  int v34;
  int v35;
  uint64_t (*v36)(uint64_t);
  void *v37;
  void (*v38)();
  uint64_t v39;
  _QWORD *v40;

  v40 = v0;
  v14 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v6 = (id)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x138))();
  v4 = swift_allocObject();
  v1 = v10;
  swift_unknownObjectWeakInit();

  swift_retain();
  v38 = partial apply for closure #1 in Headphone_Manager.configHearingModeClient();
  v39 = v4;
  v15 = MEMORY[0x24BDAC760];
  aBlock = MEMORY[0x24BDAC760];
  v34 = 1107296256;
  v35 = 0;
  v36 = thunk for @escaping @callee_guaranteed () -> ();
  v37 = &block_descriptor_1;
  v5 = _Block_copy(&aBlock);
  swift_release();
  swift_release();
  objc_msgSend(v6, sel_setInterruptionHandler_, v5);
  _Block_release(v5);

  v9 = (id)(*(uint64_t (**)(void))((*v10 & *v14) + 0x138))();
  v7 = swift_allocObject();
  v2 = v10;
  swift_unknownObjectWeakInit();

  swift_retain();
  v32[4] = partial apply for closure #2 in Headphone_Manager.configHearingModeClient();
  v32[5] = v7;
  v32[0] = v15;
  v32[1] = 1107296256;
  v32[2] = thunk for @escaping @callee_guaranteed () -> ();
  v32[3] = &block_descriptor_4;
  v8 = _Block_copy(v32);
  swift_release();
  swift_release();
  objc_msgSend(v9, sel_setInvalidationHandler_, v8);
  _Block_release(v8);

  v13 = (id)(*(uint64_t (**)(void))((*v10 & *v14) + 0x138))();
  v11 = swift_allocObject();
  v3 = v10;
  swift_unknownObjectWeakInit();

  swift_retain();
  v30 = partial apply for closure #3 in Headphone_Manager.configHearingModeClient();
  v31 = v11;
  v25 = v15;
  v26 = 1107296256;
  v27 = 0;
  v28 = thunk for @escaping @callee_guaranteed (@guaranteed HMDeviceRecord) -> ();
  v29 = &block_descriptor_8;
  v12 = _Block_copy(&v25);
  swift_release();
  swift_release();
  objc_msgSend(v13, sel_setDeviceRecordChangedHandler_, v12);
  _Block_release(v12);

  v17 = (id)(*(uint64_t (**)(void))((*v10 & *v14) + 0x138))();
  v23 = closure #4 in Headphone_Manager.configHearingModeClient();
  v24 = 0;
  v18 = v15;
  v19 = 1107296256;
  v20 = 0;
  v21 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v22 = &block_descriptor_11;
  v16 = _Block_copy(&v18);
  objc_msgSend(v17, sel_activateWithCompletion_);
  _Block_release(v16);

}

uint64_t sub_23DB14D28()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  id v30;
  id *v31;
  id v32;
  uint64_t v33;
  id *v34;
  _QWORD *v35;
  uint64_t v36;
  id *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE **v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint32_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  NSObject *v80;
  int v81;
  uint64_t (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  id v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint32_t v91;
  uint64_t v92;

  v56 = a1;
  v92 = 0;
  v55 = 0;
  v60 = type metadata accessor for Logger();
  v59 = *(_QWORD *)(v60 - 8);
  v57 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)&v31 - v57;
  v58 = (char *)&v31 - v57;
  v92 = MEMORY[0x24BDAC7A8](v56, v1) + 16;
  v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v2, v3, v60);
  v80 = Logger.logObject.getter();
  v81 = static os_log_type_t.error.getter();
  v63 = &v90;
  v90 = 22;
  v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v62 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v64 = v91;
  v66 = 17;
  v69 = 7;
  v71 = swift_allocObject();
  *(_BYTE *)(v71 + 16) = 32;
  v72 = swift_allocObject();
  v67 = 8;
  *(_BYTE *)(v72 + 16) = 8;
  v68 = 32;
  v4 = swift_allocObject();
  v65 = v4;
  *(_QWORD *)(v4 + 16) = implicit closure #1 in closure #1 in Headphone_Manager.configHearingModeClient();
  *(_QWORD *)(v4 + 24) = 0;
  v5 = swift_allocObject();
  v6 = v65;
  v73 = v5;
  *(_QWORD *)(v5 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(_QWORD *)(v5 + 24) = v6;
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = 0;
  v75 = swift_allocObject();
  *(_BYTE *)(v75 + 16) = v67;
  v7 = swift_allocObject();
  v70 = v7;
  *(_QWORD *)(v7 + 16) = implicit closure #2 in closure #1 in Headphone_Manager.configHearingModeClient();
  *(_QWORD *)(v7 + 24) = 0;
  v8 = swift_allocObject();
  v9 = v70;
  v77 = v8;
  *(_QWORD *)(v8 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(_QWORD *)(v8 + 24) = v9;
  v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v76 = _allocateUninitializedArray<A>(_:)();
  v78 = v10;
  swift_retain();
  v11 = v71;
  v12 = v78;
  *v78 = closure #1 in OSLogArguments.append(_:)partial apply;
  v12[1] = v11;
  swift_retain();
  v13 = v72;
  v14 = v78;
  v78[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v14[3] = v13;
  swift_retain();
  v15 = v73;
  v16 = v78;
  v78[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v16[5] = v15;
  swift_retain();
  v17 = v74;
  v18 = v78;
  v78[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v18[7] = v17;
  swift_retain();
  v19 = v75;
  v20 = v78;
  v78[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v20[9] = v19;
  swift_retain();
  v21 = v77;
  v22 = v78;
  v78[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v22[11] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v80, (os_log_type_t)v81))
  {
    v23 = v55;
    v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v48 = createStorage<A>(capacity:type:)(0);
    v49 = createStorage<A>(capacity:type:)(1);
    v51 = &v86;
    v86 = v47;
    v52 = &v85;
    v85 = v48;
    v53 = &v84;
    v84 = v49;
    v50 = 2;
    serialize(_:at:)(2, &v86);
    serialize(_:at:)(v50, v51);
    v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v83 = v71;
    closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)v51, (uint64_t)v52, (uint64_t)v53);
    v54 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v83 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      v45 = 0;
      v24 = v45;
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v83 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      v44 = v24;
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v83 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      v43 = 0;
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v83 = v75;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      v42 = 0;
      v82 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v83 = v77;
      closure #1 in osLogInternal(_:log:type:)(&v82, (uint64_t)&v86, (uint64_t)&v85, (uint64_t)&v84);
      _os_log_impl(&dword_23DAB4000, v80, (os_log_type_t)v81, "HeadphoneManager: %s: %ld hearing client interrupted! Retrying to standup discovery stack", v47, v64);
      destroyStorage<A>(_:count:)(v48, 0, v46);
      destroyStorage<A>(_:count:)(v49, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v47, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
  v41 = v56 + 16;
  swift_beginAccess();
  v89 = (_QWORD *)MEMORY[0x24263B794](v41);
  if (v89)
  {
    v37 = (id *)&v89;
    v25 = v89;
    v40 = v89;
    v26 = v89;
    outlined destroy of Headphone_Manager?(v37);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HMDeviceRecord));
    v38 = 0;
    v39 = _allocateUninitializedArray<A>(_:)();
    type metadata accessor for HMDeviceRecord();
    v27 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v25 & *MEMORY[0x24BEE4EA0]) + 0x158))(v27);

  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v89);
    swift_endAccess();
  }
  v36 = v56 + 16;
  swift_beginAccess();
  v88 = (_QWORD *)MEMORY[0x24263B794](v36);
  if (v88)
  {
    v34 = (id *)&v88;
    v35 = v88;
    v28 = v88;
    outlined destroy of Headphone_Manager?(v34);
    swift_endAccess();
    type metadata accessor for HMServiceClient();
    v29 = HMServiceClient.__allocating_init()();
    (*(void (**)(id))((*v35 & *MEMORY[0x24BEE4EA0]) + 0x140))(v29);

  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v88);
    swift_endAccess();
  }
  v33 = v56 + 16;
  swift_beginAccess();
  v87 = (id)MEMORY[0x24263B794](v33);
  if (v87)
  {
    v31 = &v87;
    v32 = v87;
    v30 = v87;
    outlined destroy of Headphone_Manager?(v31);
    swift_endAccess();
    Headphone_Manager.configHearingModeClient()();

  }
  else
  {
    outlined destroy of Headphone_Manager?(&v87);
    swift_endAccess();
  }
}

void partial apply for closure #1 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;

  closure #1 in Headphone_Manager.configHearingModeClient()(v0);
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.configHearingModeClient()()
{
  return 16;
}

id HMServiceClient.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HMServiceClient.init()();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void closure #2 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  id *v28[3];
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BYTE **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint32_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _BYTE *v75;
  _QWORD *v76;
  uint64_t v77;
  uint32_t v78;
  uint64_t v79;

  v45 = a1;
  v79 = 0;
  v44 = 0;
  v49 = type metadata accessor for Logger();
  v48 = *(_QWORD *)(v49 - 8);
  v46 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)v28 - v46;
  v47 = (char *)v28 - v46;
  v79 = MEMORY[0x24BDAC7A8](v45, v1) + 16;
  v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v2, v3, v49);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.error.getter();
  v52 = &v77;
  v77 = 22;
  v50 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v53 = v78;
  v55 = 17;
  v58 = 7;
  v60 = swift_allocObject();
  *(_BYTE *)(v60 + 16) = 32;
  v61 = swift_allocObject();
  v56 = 8;
  *(_BYTE *)(v61 + 16) = 8;
  v57 = 32;
  v4 = swift_allocObject();
  v54 = v4;
  *(_QWORD *)(v4 + 16) = implicit closure #1 in closure #2 in Headphone_Manager.configHearingModeClient();
  *(_QWORD *)(v4 + 24) = 0;
  v5 = swift_allocObject();
  v6 = v54;
  v62 = v5;
  *(_QWORD *)(v5 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(_QWORD *)(v5 + 24) = v6;
  v63 = swift_allocObject();
  *(_BYTE *)(v63 + 16) = 0;
  v64 = swift_allocObject();
  *(_BYTE *)(v64 + 16) = v56;
  v7 = swift_allocObject();
  v59 = v7;
  *(_QWORD *)(v7 + 16) = implicit closure #2 in closure #2 in Headphone_Manager.configHearingModeClient();
  *(_QWORD *)(v7 + 24) = 0;
  v8 = swift_allocObject();
  v9 = v59;
  v66 = v8;
  *(_QWORD *)(v8 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
  *(_QWORD *)(v8 + 24) = v9;
  v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v65 = _allocateUninitializedArray<A>(_:)();
  v67 = v10;
  swift_retain();
  v11 = v60;
  v12 = v67;
  *v67 = closure #1 in OSLogArguments.append(_:)partial apply;
  v12[1] = v11;
  swift_retain();
  v13 = v61;
  v14 = v67;
  v67[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v14[3] = v13;
  swift_retain();
  v15 = v62;
  v16 = v67;
  v67[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v16[5] = v15;
  swift_retain();
  v17 = v63;
  v18 = v67;
  v67[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v18[7] = v17;
  swift_retain();
  v19 = v64;
  v20 = v67;
  v67[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v20[9] = v19;
  swift_retain();
  v21 = v66;
  v22 = v67;
  v67[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
  v22[11] = v21;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    v23 = v44;
    v36 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v37 = createStorage<A>(capacity:type:)(0);
    v38 = createStorage<A>(capacity:type:)(1);
    v40 = &v75;
    v75 = v36;
    v41 = &v74;
    v74 = v37;
    v42 = &v73;
    v73 = v38;
    v39 = 2;
    serialize(_:at:)(2, &v75);
    serialize(_:at:)(v39, v40);
    v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v72 = v60;
    closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)v40, (uint64_t)v41, (uint64_t)v42);
    v43 = v23;
    if (v23)
    {
      __break(1u);
    }
    else
    {
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v72 = v61;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v34 = 0;
      v24 = v34;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v72 = v62;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v33 = v24;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v72 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v32 = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v72 = v64;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      v31 = 0;
      v71 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v72 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v71, (uint64_t)&v75, (uint64_t)&v74, (uint64_t)&v73);
      _os_log_impl(&dword_23DAB4000, v69, (os_log_type_t)v70, "HeadphoneManager: %s: %ld hearing client invalidated! Retrying to standup discovery stack", v36, v53);
      destroyStorage<A>(_:count:)(v37, 0, v35);
      destroyStorage<A>(_:count:)(v38, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v36, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
  v30 = v45 + 16;
  swift_beginAccess();
  v76 = (_QWORD *)MEMORY[0x24263B794](v30);
  if (v76)
  {
    v28[0] = (id *)&v76;
    v25 = v76;
    v29 = v76;
    v26 = v76;
    outlined destroy of Headphone_Manager?(v28[0]);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HMDeviceRecord));
    v28[1] = 0;
    v28[2] = (id *)_allocateUninitializedArray<A>(_:)();
    type metadata accessor for HMDeviceRecord();
    v27 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v25 & *MEMORY[0x24BEE4EA0]) + 0x158))(v27);

  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v76);
    swift_endAccess();
  }
}

void partial apply for closure #2 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;

  closure #2 in Headphone_Manager.configHearingModeClient()(v0);
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

{
  return swift_release();
}

uint64_t implicit closure #1 in closure #2 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #2 in Headphone_Manager.configHearingModeClient()()
{
  return 24;
}

uint64_t closure #3 in Headphone_Manager.configHearingModeClient()(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *object;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  id v132;
  id v133;
  uint64_t (*v134)(void);
  uint64_t v135;
  id *v136;
  _QWORD *v137;
  id *v138;
  uint64_t *v139;
  void (*v140)(uint64_t *, _QWORD);
  id v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  _BYTE **v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  Swift::String v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t *v164;
  uint32_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  _QWORD *v190;
  uint64_t v191;
  NSObject *v192;
  int v193;
  id *v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  Swift::String v201;
  void *v202;
  Swift::String v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint8_t *v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE **v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  id v227;
  uint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t *v231;
  uint32_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  NSObject *v264;
  int v265;
  uint64_t v266;
  void *v267;
  void *v268;
  id *v269;
  _QWORD *v270;
  id v271;
  uint64_t v272;
  void *v273;
  void *v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  id v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  char *v282;
  unint64_t v283;
  char *v284;
  Builtin::Word v285;
  unint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  Swift::String *v290;
  Swift::String *v291;
  _QWORD *v292;
  id v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD v298[2];
  void *v299;
  uint64_t (*v300)(uint64_t, uint64_t, uint64_t);
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  _BYTE *v304;
  uint64_t v305;
  uint32_t v306;
  void *v307;
  uint64_t (*v308)(uint64_t, uint64_t, uint64_t);
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  _BYTE *v312;
  uint64_t v313;
  _QWORD v314[2];
  id v315;
  id v316[4];
  uint64_t v317;
  uint32_t v318;
  Swift::String v319;
  Swift::String v320;
  _QWORD *v321;
  Swift::String v322;
  _QWORD *v323;
  uint64_t v324;
  uint64_t v325;
  Swift::String v326;
  Swift::String v327;
  _QWORD v328[2];
  uint64_t v329;
  void *v330;

  v278 = a1;
  v277 = a2;
  v330 = 0;
  v329 = 0;
  v324 = 0;
  v325 = 0;
  v319 = (Swift::String)0;
  v296 = 0;
  v276 = 0;
  v307 = 0;
  v287 = 0;
  v279 = type metadata accessor for Logger();
  v280 = *(_QWORD *)(v279 - 8);
  v281 = (*(_QWORD *)(v280 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v278, v277);
  v282 = (char *)&v135 - v281;
  v283 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (void *)MEMORY[0x24BDAC7A8](v2, v4);
  v284 = (char *)&v135 - v283;
  v330 = v5;
  v297 = v6 + 16;
  v329 = v6 + 16;
  v293 = objc_msgSend(v5, sel_bluetoothAddress);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v292 = v328;
  v328[0] = v7;
  v328[1] = v8;
  v285 = 1;
  v288 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(":", 1uLL, 1);
  v291 = &v327;
  v327 = v9;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("-", v285, v288 & 1);
  v290 = &v326;
  v326 = v10;
  v286 = lazy protocol witness table accessor for type String and conformance String();
  v289 = MEMORY[0x24BEE0D00];
  default argument 2 of StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v294 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v295 = v11;
  outlined destroy of String();
  outlined destroy of String();
  outlined destroy of String();

  v324 = v294;
  v325 = v295;
  swift_beginAccess();
  v323 = (_QWORD *)MEMORY[0x24263B794](v297);
  if (v323)
  {
    v269 = (id *)&v323;
    v12 = v323;
    v271 = v323;
    v13 = v323;
    outlined destroy of Headphone_Manager?(v269);
    swift_endAccess();
    v14 = swift_bridgeObjectRetain();
    v272 = (*(uint64_t (**)(uint64_t))((*v12 & *MEMORY[0x24BEE4EA0]) + 0x180))(v14);
    v270 = v298;
    v298[0] = v294;
    v298[1] = v295;
    v15 = type metadata accessor for HeadphoneDevice();
    MEMORY[0x24263AD5C](&v299, v270, v272, MEMORY[0x24BEE0D00], v15, MEMORY[0x24BEE0D10]);
    outlined destroy of String();
    v273 = v299;

    swift_bridgeObjectRelease();
    v275 = v273;
  }
  else
  {
    v274 = 0;
    outlined destroy of Headphone_Manager?((id *)&v323);
    swift_endAccess();
    v275 = v274;
  }
  v268 = v275;
  if (v275)
  {
    v267 = v268;
    v16 = v284;
    v227 = v268;
    v307 = v268;
    v17 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v16, v17, v279);
    v18 = v227;
    v228 = 24;
    v243 = 7;
    v19 = swift_allocObject();
    v20 = v227;
    v235 = v19;
    *(_QWORD *)(v19 + 16) = v227;
    v21 = v20;
    v22 = swift_allocObject();
    v23 = v278;
    v237 = v22;
    *(_QWORD *)(v22 + 16) = v227;
    v24 = v23;
    v244 = swift_allocObject();
    *(_QWORD *)(v244 + 16) = v278;
    v264 = Logger.logObject.getter();
    v265 = static os_log_type_t.default.getter();
    v231 = &v305;
    v305 = 52;
    v229 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v230 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v232 = v306;
    v240 = 17;
    v246 = swift_allocObject();
    v239 = 32;
    *(_BYTE *)(v246 + 16) = 32;
    v247 = swift_allocObject();
    v241 = 8;
    *(_BYTE *)(v247 + 16) = 8;
    v242 = 32;
    v25 = swift_allocObject();
    v233 = v25;
    *(_QWORD *)(v25 + 16) = implicit closure #6 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v25 + 24) = 0;
    v26 = swift_allocObject();
    v27 = v233;
    v248 = v26;
    *(_QWORD *)(v26 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v26 + 24) = v27;
    v249 = swift_allocObject();
    *(_BYTE *)(v249 + 16) = 0;
    v250 = swift_allocObject();
    *(_BYTE *)(v250 + 16) = v241;
    v28 = swift_allocObject();
    v234 = v28;
    *(_QWORD *)(v28 + 16) = implicit closure #7 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v28 + 24) = 0;
    v29 = swift_allocObject();
    v30 = v234;
    v251 = v29;
    *(_QWORD *)(v29 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v29 + 24) = v30;
    v252 = swift_allocObject();
    *(_BYTE *)(v252 + 16) = 64;
    v253 = swift_allocObject();
    *(_BYTE *)(v253 + 16) = v241;
    v31 = swift_allocObject();
    v32 = v235;
    v236 = v31;
    *(_QWORD *)(v31 + 16) = partial apply for implicit closure #8 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v31 + 24) = v32;
    v33 = swift_allocObject();
    v34 = v236;
    v254 = v33;
    *(_QWORD *)(v33 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
    *(_QWORD *)(v33 + 24) = v34;
    v255 = swift_allocObject();
    *(_BYTE *)(v255 + 16) = v239;
    v256 = swift_allocObject();
    *(_BYTE *)(v256 + 16) = v241;
    v35 = swift_allocObject();
    v36 = v237;
    v238 = v35;
    *(_QWORD *)(v35 + 16) = partial apply for implicit closure #9 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v35 + 24) = v36;
    v37 = swift_allocObject();
    v38 = v238;
    v257 = v37;
    *(_QWORD *)(v37 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v37 + 24) = v38;
    v258 = swift_allocObject();
    *(_BYTE *)(v258 + 16) = v239;
    v259 = swift_allocObject();
    *(_BYTE *)(v259 + 16) = v241;
    v39 = swift_allocObject();
    v40 = v244;
    v245 = v39;
    *(_QWORD *)(v39 + 16) = partial apply for implicit closure #10 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v39 + 24) = v40;
    v41 = swift_allocObject();
    v42 = v245;
    v261 = v41;
    *(_QWORD *)(v41 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v41 + 24) = v42;
    v263 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v260 = _allocateUninitializedArray<A>(_:)();
    v262 = v43;
    swift_retain();
    v44 = v246;
    v45 = v262;
    *v262 = closure #1 in OSLogArguments.append(_:)partial apply;
    v45[1] = v44;
    swift_retain();
    v46 = v247;
    v47 = v262;
    v262[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v47[3] = v46;
    swift_retain();
    v48 = v248;
    v49 = v262;
    v262[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v49[5] = v48;
    swift_retain();
    v50 = v249;
    v51 = v262;
    v262[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v51[7] = v50;
    swift_retain();
    v52 = v250;
    v53 = v262;
    v262[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v53[9] = v52;
    swift_retain();
    v54 = v251;
    v55 = v262;
    v262[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v55[11] = v54;
    swift_retain();
    v56 = v252;
    v57 = v262;
    v262[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v57[13] = v56;
    swift_retain();
    v58 = v253;
    v59 = v262;
    v262[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v59[15] = v58;
    swift_retain();
    v60 = v254;
    v61 = v262;
    v262[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v61[17] = v60;
    swift_retain();
    v62 = v255;
    v63 = v262;
    v262[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v63[19] = v62;
    swift_retain();
    v64 = v256;
    v65 = v262;
    v262[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v65[21] = v64;
    swift_retain();
    v66 = v257;
    v67 = v262;
    v262[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v67[23] = v66;
    swift_retain();
    v68 = v258;
    v69 = v262;
    v262[24] = closure #1 in OSLogArguments.append(_:)partial apply;
    v69[25] = v68;
    swift_retain();
    v70 = v259;
    v71 = v262;
    v262[26] = closure #1 in OSLogArguments.append(_:)partial apply;
    v71[27] = v70;
    swift_retain();
    v72 = v261;
    v73 = v262;
    v262[28] = closure #1 in OSLogArguments.append(_:)partial apply;
    v73[29] = v72;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v264, (os_log_type_t)v265))
    {
      v74 = v276;
      v220 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v219 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v221 = createStorage<A>(capacity:type:)(1);
      v222 = createStorage<A>(capacity:type:)(3);
      v223 = &v304;
      v304 = v220;
      v224 = &v303;
      v303 = v221;
      v225 = &v302;
      v302 = v222;
      serialize(_:at:)(2, &v304);
      serialize(_:at:)(5, v223);
      v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v301 = v246;
      closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)v223, (uint64_t)v224, (uint64_t)v225);
      v226 = v74;
      if (v74)
      {
        __break(1u);
      }
      else
      {
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v247;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v218 = 0;
        v75 = v218;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v248;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v217 = v75;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v249;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v216 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v250;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v215 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v301 = v251;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v214 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v252;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v213 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v253;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v212 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v254;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v211 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v255;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v210 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v256;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v209 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v257;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v208 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v258;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v207 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v259;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        v206 = 0;
        v300 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v301 = v261;
        closure #1 in osLogInternal(_:log:type:)(&v300, (uint64_t)&v304, (uint64_t)&v303, (uint64_t)&v302);
        _os_log_impl(&dword_23DAB4000, v264, (os_log_type_t)v265, "HeadphoneManager: %s: %ld device: %@::%s updateWithRecord %s", v220, v232);
        destroyStorage<A>(_:count:)(v221, 1, v219);
        destroyStorage<A>(_:count:)(v222, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v220, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v76 = (uint64_t *)v227;

    v77 = (*(uint64_t (**)(char *, uint64_t))(v280 + 8))(v284, v279);
    v78 = *v76;
    v204 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v205 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v78 & *MEMORY[0x24BEE4EA0]) + 0x9F0))(v77);
    (*(void (**)(id))((*v205 & *v204) + 0x160))(v278);

    return swift_bridgeObjectRelease();
  }
  else
  {
    v266 = v277 + 16;
    swift_beginAccess();
    v321 = (_QWORD *)MEMORY[0x24263B794](v266);
    if (v321)
    {
      v194 = (id *)&v321;
      v80 = v321;
      v195 = v321;
      v81 = v321;
      outlined destroy of Headphone_Manager?(v194);
      v82 = swift_endAccess();
      v196 = (*(uint64_t (**)(uint64_t))((*v80 & *MEMORY[0x24BEE4EA0]) + 0x180))(v82);

      v198 = type metadata accessor for HeadphoneDevice();
      v197 = MEMORY[0x24BEE0D00];
      v199 = MEMORY[0x24BEE0D10];
      v200 = swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v201._countAndFlagsBits = Dictionary.Keys.debugDescription.getter();
      v201._object = v83;
      swift_bridgeObjectRelease();
      v203 = v201;
    }
    else
    {
      v202 = 0;
      outlined destroy of Headphone_Manager?((id *)&v321);
      swift_endAccess();
      v203._countAndFlagsBits = (uint64_t)v202;
      v203._object = v202;
    }
    v320 = v203;
    if (v203._object)
    {
      v322 = v320;
    }
    else
    {
      v322 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("none", 4uLL, 1);
      outlined destroy of String?();
    }
    v84 = v282;
    v161 = v322;
    v319 = v322;
    v85 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v280 + 16))(v84, v85, v279);
    swift_bridgeObjectRetain();
    v173 = 32;
    v174 = 7;
    v86 = swift_allocObject();
    v87 = v295;
    v168 = v86;
    *(_QWORD *)(v86 + 16) = v294;
    *(_QWORD *)(v86 + 24) = v87;
    swift_bridgeObjectRetain();
    v88 = swift_allocObject();
    object = v161._object;
    v175 = v88;
    *(_QWORD *)(v88 + 16) = v161._countAndFlagsBits;
    *(_QWORD *)(v88 + 24) = object;
    v192 = Logger.logObject.getter();
    v193 = static os_log_type_t.error.getter();
    v164 = &v317;
    v317 = 42;
    v162 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v163 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v165 = v318;
    v171 = 17;
    v177 = swift_allocObject();
    v170 = 32;
    *(_BYTE *)(v177 + 16) = 32;
    v178 = swift_allocObject();
    v172 = 8;
    *(_BYTE *)(v178 + 16) = 8;
    v90 = swift_allocObject();
    v166 = v90;
    *(_QWORD *)(v90 + 16) = implicit closure #2 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v90 + 24) = 0;
    v91 = swift_allocObject();
    v92 = v166;
    v179 = v91;
    *(_QWORD *)(v91 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v91 + 24) = v92;
    v180 = swift_allocObject();
    *(_BYTE *)(v180 + 16) = 0;
    v181 = swift_allocObject();
    *(_BYTE *)(v181 + 16) = v172;
    v93 = swift_allocObject();
    v167 = v93;
    *(_QWORD *)(v93 + 16) = implicit closure #3 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v93 + 24) = 0;
    v94 = swift_allocObject();
    v95 = v167;
    v182 = v94;
    *(_QWORD *)(v94 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v94 + 24) = v95;
    v183 = swift_allocObject();
    *(_BYTE *)(v183 + 16) = v170;
    v184 = swift_allocObject();
    *(_BYTE *)(v184 + 16) = v172;
    v96 = swift_allocObject();
    v97 = v168;
    v169 = v96;
    *(_QWORD *)(v96 + 16) = partial apply for implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v96 + 24) = v97;
    v98 = swift_allocObject();
    v99 = v169;
    v185 = v98;
    *(_QWORD *)(v98 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v98 + 24) = v99;
    v186 = swift_allocObject();
    *(_BYTE *)(v186 + 16) = v170;
    v187 = swift_allocObject();
    *(_BYTE *)(v187 + 16) = v172;
    v100 = swift_allocObject();
    v101 = v175;
    v176 = v100;
    *(_QWORD *)(v100 + 16) = partial apply for implicit closure #5 in closure #3 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v100 + 24) = v101;
    v102 = swift_allocObject();
    v103 = v176;
    v189 = v102;
    *(_QWORD *)(v102 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v102 + 24) = v103;
    v191 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v188 = _allocateUninitializedArray<A>(_:)();
    v190 = v104;
    swift_retain();
    v105 = v177;
    v106 = v190;
    *v190 = closure #1 in OSLogArguments.append(_:)partial apply;
    v106[1] = v105;
    swift_retain();
    v107 = v178;
    v108 = v190;
    v190[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v108[3] = v107;
    swift_retain();
    v109 = v179;
    v110 = v190;
    v190[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v110[5] = v109;
    swift_retain();
    v111 = v180;
    v112 = v190;
    v190[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v112[7] = v111;
    swift_retain();
    v113 = v181;
    v114 = v190;
    v190[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v114[9] = v113;
    swift_retain();
    v115 = v182;
    v116 = v190;
    v190[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v116[11] = v115;
    swift_retain();
    v117 = v183;
    v118 = v190;
    v190[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v118[13] = v117;
    swift_retain();
    v119 = v184;
    v120 = v190;
    v190[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v120[15] = v119;
    swift_retain();
    v121 = v185;
    v122 = v190;
    v190[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v122[17] = v121;
    swift_retain();
    v123 = v186;
    v124 = v190;
    v190[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v124[19] = v123;
    swift_retain();
    v125 = v187;
    v126 = v190;
    v190[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v126[21] = v125;
    swift_retain();
    v127 = v189;
    v128 = v190;
    v190[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v128[23] = v127;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v192, (os_log_type_t)v193))
    {
      v129 = v276;
      v154 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v153 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v155 = createStorage<A>(capacity:type:)(0);
      v156 = createStorage<A>(capacity:type:)(3);
      v157 = &v312;
      v312 = v154;
      v158 = &v311;
      v311 = v155;
      v159 = &v310;
      v310 = v156;
      serialize(_:at:)(2, &v312);
      serialize(_:at:)(4, v157);
      v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v309 = v177;
      closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)v157, (uint64_t)v158, (uint64_t)v159);
      v160 = v129;
      if (v129)
      {
        __break(1u);
      }
      else
      {
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v178;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v152 = 0;
        v130 = v152;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v179;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v151 = v130;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v180;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v150 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v181;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v149 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v309 = v182;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v148 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v183;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v147 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v184;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v146 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v185;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v145 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v186;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v144 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v187;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        v143 = 0;
        v308 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v309 = v189;
        closure #1 in osLogInternal(_:log:type:)(&v308, (uint64_t)&v312, (uint64_t)&v311, (uint64_t)&v310);
        _os_log_impl(&dword_23DAB4000, v192, (os_log_type_t)v193, "HeadphoneManager: %s: %ld headphoneDevice with bt address not found %s %s", v154, v165);
        destroyStorage<A>(_:count:)(v155, 0, v153);
        destroyStorage<A>(_:count:)(v156, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v154, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v280 + 8))(v282, v279);
    v142 = v277 + 16;
    swift_beginAccess();
    v316[0] = (id)MEMORY[0x24263B794](v142);
    if (v316[0])
    {
      v136 = v316;
      v131 = v316[0];
      v141 = v316[0];
      v132 = v316[0];
      outlined destroy of Headphone_Manager?(v136);
      swift_endAccess();
      swift_bridgeObjectRetain();
      v133 = v278;
      v138 = &v315;
      v315 = v278;
      v137 = v314;
      v314[0] = v294;
      v314[1] = v295;
      v134 = *(uint64_t (**)(void))((*v131 & *MEMORY[0x24BEE4EA0]) + 0x160);
      v139 = &v313;
      v140 = (void (*)(uint64_t *, _QWORD))v134();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HMDeviceRecord]);
      Dictionary.subscript.setter();
      v140(v139, 0);

    }
    else
    {
      outlined destroy of Headphone_Manager?(v316);
      swift_endAccess();
    }
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t partial apply for closure #3 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  uint64_t v1;

  return closure #3 in Headphone_Manager.configHearingModeClient()(a1, v1);
}

uint64_t implicit closure #2 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #3 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return 44;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  swift_bridgeObjectRetain();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #5 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  swift_bridgeObjectRetain();
}

uint64_t implicit closure #6 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #7 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  return 49;
}

void *implicit closure #8 in closure #3 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t implicit closure #9 in closure #3 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  _QWORD *v1;
  id v2;
  _QWORD *v5;
  uint64_t v6;

  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%p", 2uLL, 1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
  _allocateUninitializedArray<A>(_:)();
  v5 = v1;
  v2 = a1;
  v5[3] = type metadata accessor for HeadphoneDevice();
  v5[4] = lazy protocol witness table accessor for type HeadphoneDevice and conformance NSObject();
  *v5 = a1;
  _finalizeUninitializedArray<A>(_:)();
  v6 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t implicit closure #10 in closure #3 in Headphone_Manager.configHearingModeClient()(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed HMDeviceRecord) -> ()(uint64_t a1, void *a2)
{
  id v2;
  void (*v4)(void *);

  v4 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v2 = a2;
  v4(a2);

  return swift_release();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t closure #4 in Headphone_Manager.configHearingModeClient()(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  _BYTE **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint32_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  int v57;
  _BYTE v58[12];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint32_t v70;
  uint64_t v71;
  uint64_t v72;

  v59 = a1;
  v72 = 0;
  *(_QWORD *)&v58[4] = 0;
  v60 = type metadata accessor for Logger();
  v61 = *(_QWORD *)(v60 - 8);
  v62 = (*(_QWORD *)(v61 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  result = MEMORY[0x24BDAC7A8](v59, v1);
  v63 = (char *)v26 - v62;
  v72 = result;
  v71 = result;
  *(_QWORD *)v58 = result != 0;
  if (result)
  {
    v3 = v63;
    v4 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v3, v4, v60);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    v39 = &v69;
    v69 = 22;
    v37 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v38 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v40 = v70;
    v42 = 17;
    v45 = 7;
    v47 = swift_allocObject();
    *(_BYTE *)(v47 + 16) = 32;
    v48 = swift_allocObject();
    v43 = 8;
    *(_BYTE *)(v48 + 16) = 8;
    v44 = 32;
    v5 = swift_allocObject();
    v41 = v5;
    *(_QWORD *)(v5 + 16) = implicit closure #1 in closure #4 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v5 + 24) = 0;
    v6 = swift_allocObject();
    v7 = v41;
    v49 = v6;
    *(_QWORD *)(v6 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_2;
    *(_QWORD *)(v6 + 24) = v7;
    v50 = swift_allocObject();
    *(_BYTE *)(v50 + 16) = 0;
    v51 = swift_allocObject();
    *(_BYTE *)(v51 + 16) = v43;
    v8 = swift_allocObject();
    v46 = v8;
    *(_QWORD *)(v8 + 16) = implicit closure #2 in closure #4 in Headphone_Manager.configHearingModeClient();
    *(_QWORD *)(v8 + 24) = 0;
    v9 = swift_allocObject();
    v10 = v46;
    v53 = v9;
    *(_QWORD *)(v9 + 16) = _sSiIegd_SiIegr_TRTA_1;
    *(_QWORD *)(v9 + 24) = v10;
    v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v52 = _allocateUninitializedArray<A>(_:)();
    v54 = v11;
    swift_retain();
    v12 = v47;
    v13 = v54;
    *v54 = closure #1 in OSLogArguments.append(_:)partial apply;
    v13[1] = v12;
    swift_retain();
    v14 = v48;
    v15 = v54;
    v54[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v15[3] = v14;
    swift_retain();
    v16 = v49;
    v17 = v54;
    v54[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
    v17[5] = v16;
    swift_retain();
    v18 = v50;
    v19 = v54;
    v54[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v19[7] = v18;
    swift_retain();
    v20 = v51;
    v21 = v54;
    v54[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v21[9] = v20;
    swift_retain();
    v22 = v53;
    v23 = v54;
    v54[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
    v23[11] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v56, (os_log_type_t)v57))
    {
      v24 = *(_QWORD *)&v58[4];
      v29 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v30 = createStorage<A>(capacity:type:)(0);
      v31 = createStorage<A>(capacity:type:)(1);
      v33 = &v68;
      v68 = v29;
      v34 = &v67;
      v67 = v30;
      v35 = &v66;
      v66 = v31;
      v32 = 2;
      serialize(_:at:)(2, &v68);
      serialize(_:at:)(v32, v33);
      v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v65 = v47;
      closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35);
      v36 = v24;
      if (v24)
      {
        __break(1u);
      }
      else
      {
        v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v65 = v48;
        closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
        v27 = 0;
        v25 = v27;
        v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
        v65 = v49;
        closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
        v26[2] = v25;
        v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v65 = v50;
        closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
        v26[1] = 0;
        v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v65 = v51;
        closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
        v26[0] = 0;
        v64 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1;
        v65 = v53;
        closure #1 in osLogInternal(_:log:type:)(&v64, (uint64_t)&v68, (uint64_t)&v67, (uint64_t)&v66);
        _os_log_impl(&dword_23DAB4000, v56, (os_log_type_t)v57, "HeadphoneManager: %s: %ld failed to acitivate HMServiceClient", v29, v40);
        destroyStorage<A>(_:count:)(v30, 0, v28);
        destroyStorage<A>(_:count:)(v31, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v29, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v63, v60);
  }
  return result;
}

uint64_t implicit closure #1 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("configHearingModeClient()", 0x19uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #4 in Headphone_Manager.configHearingModeClient()()
{
  return 56;
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t ~= infix<A>(_:_:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v7 = a1;
  v14 = 0;
  v13 = 0;
  v10 = *(_QWORD *)(*a1 + *MEMORY[0x24BEE46A8]);
  v15 = v10;
  v8 = *(_QWORD *)(v10 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1, a2);
  v9 = (char *)&v5 - v6;
  v14 = v7;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  swift_retain();
  swift_getAtKeyPath();
  v11 = v12;
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v9, v10);
  return v11 & 1;
}

id HearingRecord.deviceConfigFor<A>(keyPath:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE **v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  uint32_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  NSObject *v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  id v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  signed __int8 v86;
  char v87;
  unsigned __int8 v88;
  signed __int8 v89;
  signed __int8 v90;
  char v91;
  unsigned __int8 v92;
  signed __int8 v93;
  uint64_t (*v94)(uint64_t, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint32_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v81 = a1;
  v68 = a2;
  v67 = a3;
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v107 = 0;
  v66 = 0;
  v111 = a3;
  v69 = 0;
  v70 = type metadata accessor for Logger();
  v71 = *(_QWORD *)(v70 - 8);
  v72 = (*(_QWORD *)(v71 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](0, v68);
  v73 = (char *)&v33 - v72;
  v74 = *(_QWORD *)(v5 - 8);
  v76 = *(_QWORD *)(v74 + 64);
  v75 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v4, v6);
  v77 = (char *)&v33 - v75;
  v78 = (v76 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v7, v8);
  v79 = (char *)&v33 - v78;
  v110 = v9;
  v109 = v10;
  v108 = v3;
  type metadata accessor for HMDeviceConfigurations();
  v80 = HMDeviceConfigurations.__allocating_init()();
  v107 = v80;
  swift_retain();
  KeyPath = swift_getKeyPath();
  v83 = &v106;
  v106 = KeyPath;
  v82 = &v105;
  v105 = v81;
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<HearingRecordModel>);
  v85 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if ((v85 & 1) != 0)
  {
    swift_release();
    (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v79, v68, v67);
    type metadata accessor for HMMultiState();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v63 = v88;
      v64 = 0;
    }
    else
    {
      v63 = 0;
      v64 = 1;
    }
    v86 = v63;
    v87 = v64 & 1;
    v12 = v80;
    if ((v87 & 1) != 0)
      v89 = objc_msgSend(v80, sel_allowListeningModeOff);
    else
      v89 = v86;

    objc_msgSend(v80, sel_setAllowListeningModeOff_, v89);
  }
  else
  {
    swift_release();
    swift_retain();
    v104 = swift_getKeyPath();
    v103 = v81;
    v62 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if ((v62 & 1) != 0)
    {
      swift_release();
      (*(void (**)(char *, uint64_t, uint64_t))(v74 + 16))(v77, v68, v67);
      type metadata accessor for HMMultiState();
      if ((swift_dynamicCast() & 1) != 0)
      {
        v60 = v92;
        v61 = 0;
      }
      else
      {
        v60 = 0;
        v61 = 1;
      }
      v90 = v60;
      v91 = v61 & 1;
      v13 = v80;
      if ((v91 & 1) != 0)
        v93 = objc_msgSend(v80, sel_enablePMEVoice);
      else
        v93 = v90;

      objc_msgSend(v80, sel_setEnablePMEVoice_, v93);
    }
    else
    {
      swift_release();
      swift_retain();
      v102 = swift_getKeyPath();
      v101 = v81;
      v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      if ((v59 & 1) != 0)
      {
        v14 = v65;
        v15 = swift_release();
        v16 = (*(uint64_t (**)(uint64_t))((*v14 & *MEMORY[0x24BEE4EA0]) + 0xC0))(v15);
        objc_msgSend(v80, sel_setEnablePMEMedia_, v16);
      }
      else
      {
        swift_release();
      }
    }
  }
  v17 = v73;
  v18 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v17, v18, v70);
  v19 = v80;
  v48 = 7;
  v49 = swift_allocObject();
  *(_QWORD *)(v49 + 16) = v80;
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.default.getter();
  v44 = &v99;
  v99 = 12;
  v42 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v45 = v100;
  v46 = 17;
  v51 = swift_allocObject();
  *(_BYTE *)(v51 + 16) = 64;
  v52 = swift_allocObject();
  *(_BYTE *)(v52 + 16) = 8;
  v47 = 32;
  v20 = swift_allocObject();
  v21 = v49;
  v50 = v20;
  *(_QWORD *)(v20 + 16) = partial apply for implicit closure #3 in HearingRecord.deviceConfigFor<A>(keyPath:value:);
  *(_QWORD *)(v20 + 24) = v21;
  v22 = swift_allocObject();
  v23 = v50;
  v54 = v22;
  *(_QWORD *)(v22 + 16) = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_0;
  *(_QWORD *)(v22 + 24) = v23;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v53 = _allocateUninitializedArray<A>(_:)();
  v55 = v24;
  swift_retain();
  v25 = v51;
  v26 = v55;
  *v55 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
  v26[1] = v25;
  swift_retain();
  v27 = v52;
  v28 = v55;
  v55[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[3] = v27;
  swift_retain();
  v29 = v54;
  v30 = v55;
  v55[4] = _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_0;
  v30[5] = v29;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v57, (os_log_type_t)v58))
  {
    v31 = v66;
    v35 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v36 = createStorage<A>(capacity:type:)(1);
    v37 = createStorage<A>(capacity:type:)(0);
    v38 = &v98;
    v98 = v35;
    v39 = &v97;
    v97 = v36;
    v40 = &v96;
    v96 = v37;
    serialize(_:at:)(2, &v98);
    serialize(_:at:)(1, v38);
    v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
    v95 = v51;
    closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)v38, (uint64_t)v39, (uint64_t)v40);
    v41 = v31;
    if (v31)
    {
      __break(1u);
    }
    else
    {
      v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v95 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      v33 = 0;
      v94 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_0;
      v95 = v54;
      closure #1 in osLogInternal(_:log:type:)(&v94, (uint64_t)&v98, (uint64_t)&v97, (uint64_t)&v96);
      _os_log_impl(&dword_23DAB4000, v57, (os_log_type_t)v58, "HeadphoneManager: CONFIG created: %@ ", v35, v45);
      destroyStorage<A>(_:count:)(v36, 1, v34);
      destroyStorage<A>(_:count:)(v37, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v35, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v70);
  return v80;
}

unint64_t type metadata accessor for HMDeviceConfigurations()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HMDeviceConfigurations;
  if (!lazy cache variable for type metadata for HMDeviceConfigurations)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HMDeviceConfigurations);
    return ObjCClassMetadata;
  }
  return v2;
}

id HMDeviceConfigurations.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc HMDeviceConfigurations.init()();
}

uint64_t key path getter for HearingRecordModel.listeningModeOffAllowed : HearingRecordModel@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 216))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.listeningModeOffAllowed : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 224))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.pmeVoiceEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 168))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.pmeVoiceEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 176))(v3);
  return swift_release();
}

uint64_t key path getter for HearingRecordModel.pmeMediaEnabled : HearingRecordModel@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  v4 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 192))(v2);
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.pmeMediaEnabled : HearingRecordModel(unsigned __int8 *a1, uint64_t *a2)
{
  unsigned int v3;
  uint64_t v4;

  v3 = *a1;
  v4 = *a2;
  swift_retain();
  (*(void (**)(_QWORD))(*(_QWORD *)v4 + 200))(v3);
  return swift_release();
}

void *implicit closure #3 in HearingRecord.deviceConfigFor<A>(keyPath:value:)(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t sub_23DB19B90()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #3 in HearingRecord.deviceConfigFor<A>(keyPath:value:)()
{
  uint64_t v0;

  return implicit closure #3 in HearingRecord.deviceConfigFor<A>(keyPath:value:)(*(void **)(v0 + 16));
}

uint64_t DeviceRecordType.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  void (**v21)(_QWORD);
  uint64_t countAndFlagsBits;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
  v2 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bluetoothAddress: ", 0x12uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  v21 = *(void (***)(_QWORD))(a2 + 8);
  v21[1](a1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v4 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v5 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v2._countAndFlagsBits, v2._object, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("bluetoothUUID: ", 0xFuLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v21[2](a1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v9 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v6._countAndFlagsBits, v6._object, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pmeVoiceEnabled: ", 0x11uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  v21[3](a1);
  type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v13 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v10._countAndFlagsBits, v10._object, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v14 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pmeMediaEnabled: ", 0x11uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v15);
  swift_bridgeObjectRelease();
  v21[4](a1);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v17 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v14._countAndFlagsBits, v14._object, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String();
  return countAndFlagsBits;
}

id @nonobjc HMServiceClient.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc HMDeviceConfigurations.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

uint64_t sub_23DB1A210()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB1A240()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A270()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_0()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB1A2B8()
{
  swift_release();
  return swift_deallocObject();
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_0(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t type metadata accessor for HMMultiState()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for HMMultiState;
  if (!lazy cache variable for type metadata for HMMultiState)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for HMMultiState);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState;
  if (!lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState)
  {
    v0 = type metadata accessor for HMMultiState();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for HMMultiState, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState;
  if (!lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState)
  {
    v0 = type metadata accessor for HMMultiState();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for HMMultiState, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState;
  if (!lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState)
  {
    v0 = type metadata accessor for HMMultiState();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for HMMultiState, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HMMultiState and conformance HMMultiState);
    return v1;
  }
  return v3;
}

uint64_t sub_23DB1A410()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A440()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A470()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_2()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB1A4B8()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB1A500()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A530()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A560()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_1@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23DB1A5A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_1(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_1()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _swift_stdlib_has_malloc_size_2()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_2(const void *a1)
{
  return malloc_size(a1);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Headphone_Manager?(id *a1)
{

}

uint64_t sub_23DB1A6C8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #4 in closure #3 in Headphone_Manager.configHearingModeClient()();
  return result;
}

uint64_t sub_23DB1A710()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #5 in closure #3 in Headphone_Manager.configHearingModeClient()();
  return result;
}

uint64_t sub_23DB1A758()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A788()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A7B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1A800()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1A848()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A878()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A8A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1A8F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1A98C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A9BC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1A9EC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1AA34()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1AA7C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AAAC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AADC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1AB24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1AB6C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #8 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;

  return implicit closure #8 in closure #3 in Headphone_Manager.configHearingModeClient()(*(void **)(v0 + 16));
}

uint64_t sub_23DB1ABB0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #9 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;

  return implicit closure #9 in closure #3 in Headphone_Manager.configHearingModeClient()(*(void **)(v0 + 16));
}

uint64_t sub_23DB1ABF4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #10 in closure #3 in Headphone_Manager.configHearingModeClient()()
{
  uint64_t v0;

  return implicit closure #10 in closure #3 in Headphone_Manager.configHearingModeClient()(*(void **)(v0 + 16));
}

uint64_t sub_23DB1AC38()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AC68()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AC98()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1ACE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1AD28()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AD58()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AD88()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1ADD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1AE6C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AE9C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AECC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB1AF14()
{
  swift_release();
  return swift_deallocObject();
}

void closure #1 in OSLogArguments.append(_:)partial apply(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB1AF5C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AF8C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1AFBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B004()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B04C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B07C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B0AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B0F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B13C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B16C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B19C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B1E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B22C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B25C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B28C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B2D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B370()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B3A0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B3D0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B418()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B460()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B490()
{
  return swift_deallocObject();
}

uint64_t sub_23DB1B4C0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB1B508()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t type metadata accessor for HMServiceClient()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for HMServiceClient;
  if (!lazy cache variable for type metadata for HMServiceClient)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for HMServiceClient);
    return ObjCClassMetadata;
  }
  return v2;
}

uint64_t static HearingRecordConfig.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v10[32];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0;
  v12 = 0;
  v4 = *a2;
  v16 = a1;
  v15 = *(_QWORD *)(v4 + *MEMORY[0x24BEE35B8]);
  v14 = a2;
  v13 = *(_QWORD *)(v4 + *MEMORY[0x24BEE35B8] + 8);
  v7 = v13;
  v12 = a3;
  swift_unknownObjectRetain();
  swift_retain();
  v11 = a1;
  v9 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4);
  v9(v10, 0);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t static HearingRecordConfig.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  int *v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, char *);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  char *v122;
  _QWORD *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  uint64_t v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  int *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  _BYTE **v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  _QWORD v202[7];
  uint64_t v203;
  uint64_t v204;
  uint8_t *v205;
  uint64_t v206;
  uint64_t v207;
  _BYTE **v208;
  char *v209;
  char *v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  unint64_t v215;
  unint64_t v216;
  char *v217;
  uint32_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  NSObject *v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t *v248;
  char *v249;
  char *v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unint64_t v257;
  char *v258;
  void *v259;
  id v260;
  id v261;
  id v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint8_t *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE **v277;
  uint64_t *v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  void (*v283)(char *, char *);
  _QWORD *v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t *v288;
  uint32_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  int v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _QWORD *v315;
  uint64_t v316;
  NSObject *v317;
  int v318;
  int v319;
  char *v320;
  char *v321;
  int v322;
  void (*v323)(char *, _QWORD);
  char *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t AssociatedTypeWitness;
  unint64_t v330;
  char *v331;
  _QWORD *v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  char *v337;
  unint64_t v338;
  char *v339;
  _QWORD *v340;
  uint64_t v341;
  unint64_t v342;
  char *v343;
  unint64_t v344;
  uint64_t v345;
  char *v346;
  unint64_t v347;
  uint64_t v348;
  uint64_t v349;
  void (*v350)(char *, _QWORD);
  char *v351;
  _QWORD *v352;
  uint64_t v353;
  void (*v354)(char *, uint64_t, uint64_t);
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  int *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  char v367;
  char v368;
  uint64_t (*v369)(uint64_t, uint64_t, uint64_t);
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _BYTE *v373;
  uint64_t v374;
  int v375;
  int v376;
  uint64_t (*v377)(uint64_t, void *);
  void *v378;
  uint64_t (*v379)(void *);
  _QWORD *v380;
  id v381;
  uint64_t v382;
  uint32_t v383;
  uint64_t v384;
  uint64_t v385;
  char v386;
  char v387;
  _QWORD v388[4];
  char v389;
  uint64_t (*v390[2])(uint64_t, uint64_t, uint64_t);
  char v391[8];
  char v392[8];
  _BYTE *v393;
  char v394;
  uint64_t v395;
  uint64_t v396;
  char v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;

  v361 = &v389;
  v364 = a1;
  v349 = a2;
  v332 = a3;
  v352 = a4;
  v403 = 0;
  v402 = 0;
  v401 = 0;
  v400 = 0;
  v399 = 0;
  v398 = 0;
  v395 = 0;
  v396 = 0;
  v325 = 0;
  v384 = 0;
  v381 = 0;
  v341 = *a3;
  v4 = *a4;
  v340 = (_QWORD *)MEMORY[0x24BEE35B8];
  v362 = *(int **)(v4 + *MEMORY[0x24BEE35B8] + 8);
  v326 = *((_QWORD *)v362 + 4);
  v327 = *(_QWORD *)(v326 + 8);
  v5 = *MEMORY[0x24BEE35B8];
  v355 = 0;
  v328 = *(_QWORD *)(v341 + v5);
  v404 = v328;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v330 = (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v6);
  v331 = (char *)v202 - v330;
  v333 = type metadata accessor for Logger();
  v334 = *(_QWORD *)(v333 - 8);
  v336 = *(_QWORD *)(v334 + 64);
  v335 = (v336 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v362, v349);
  v337 = (char *)v202 - v335;
  v338 = (v336 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v7, v8);
  v339 = (char *)v202 - v338;
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v357 = (uint64_t)v202 - v12;
  v13 = *(_QWORD *)(v341 + *v340 + 8);
  v365 = v13;
  *(_QWORD *)(v14 + 168) = v13;
  v353 = *(_QWORD *)(v13 - 8);
  v345 = *(_QWORD *)(v353 + 64);
  v342 = (v345 + 15) & 0xFFFFFFFFFFFFFFF0;
  v16 = MEMORY[0x24BDAC7A8](v11, v15);
  v343 = (char *)v202 - v342;
  v344 = (v345 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v16, v17);
  v346 = (char *)v202 - v344;
  v347 = (v345 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v18, v19);
  v20 = v364;
  v363 = (char *)v202 - v347;
  v21[20] = (char *)v202 - v347;
  v21[19] = v20;
  v21[18] = v22;
  v21[17] = v23;
  v21[16] = v24;
  v348 = swift_allocBox();
  v356 = v25;
  *((_QWORD *)v361 + 15) = v25;
  swift_unknownObjectRetain();
  swift_retain();
  *((_QWORD *)v361 + 14) = v349;
  v351 = &v397;
  v350 = (void (*)(char *, _QWORD))swift_readAtKeyPath();
  outlined init with copy of HearingRecordConfig<A, B>(v26, v356, v365, v362);
  v350(v351, 0);
  swift_unknownObjectRelease();
  swift_release();
  v354 = *(void (**)(char *, uint64_t, uint64_t))(v353 + 16);
  v354(v363, v356, v365);
  type metadata accessor for HearingRecordModel();
  outlined init with copy of HearingRecordConfig<A, B>(v356, v357, v365, v362);
  v358 = *(_QWORD *)(v357 + v362[17]);
  swift_retain();
  outlined destroy of HearingRecordConfig<A, B>(v357, v365);
  v359 = static HearingRecordModel.debugStringForModifyPath(keyPath:)();
  v360 = v27;
  swift_release();
  v28 = v360;
  v29 = v361;
  v30 = v362;
  *((_QWORD *)v361 + 8) = v359;
  *((_QWORD *)v29 + 9) = v28;
  v366 = *((_QWORD *)v30 + 6);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v124 = v337;
    v125 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v334 + 16))(v124, v125, v333);
    swift_bridgeObjectRetain();
    v225 = 32;
    v226 = 7;
    v126 = swift_allocObject();
    v127 = v360;
    v128 = v364;
    v129 = v354;
    v130 = v365;
    v131 = v126;
    v132 = v346;
    v220 = v131;
    *(_QWORD *)(v131 + 16) = v359;
    *(_QWORD *)(v131 + 24) = v127;
    v129(v132, v128, v130);
    v212 = (*(unsigned __int8 *)(v353 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v353 + 80);
    v133 = (_QWORD *)swift_allocObject();
    v134 = v326;
    v135 = v362;
    v136 = v366;
    v137 = v212;
    v138 = v353;
    v139 = v346;
    v140 = v365;
    v214 = v133;
    v133[2] = v328;
    v133[3] = v140;
    v133[4] = v134;
    v213 = *((_QWORD *)v135 + 5);
    v133[5] = v213;
    v133[6] = v136;
    (*(void (**)(char *, char *))(v138 + 32))((char *)v133 + v137, v139);
    swift_retain();
    v141 = swift_allocObject();
    v142 = v213;
    v143 = (_QWORD *)v141;
    v144 = v214;
    v227 = v143;
    v143[2] = v365;
    v143[3] = v142;
    v143[4] = partial apply for implicit closure #3 in static HearingRecordConfig.subscript.setter;
    v143[5] = v144;
    swift_release();
    v241 = Logger.logObject.getter();
    v242 = static os_log_type_t.default.getter();
    v217 = &v394;
    *((_QWORD *)v361 + 6) = v225;
    v215 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v216 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v218 = *((_DWORD *)v361 + 15);
    v223 = 17;
    v229 = swift_allocObject();
    v222 = 32;
    *(_BYTE *)(v229 + 16) = 32;
    v230 = swift_allocObject();
    v224 = 8;
    *(_BYTE *)(v230 + 16) = 8;
    v145 = swift_allocObject();
    v219 = v145;
    *(_QWORD *)(v145 + 16) = implicit closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v145 + 24) = 0;
    v146 = swift_allocObject();
    v147 = v219;
    v231 = v146;
    *(_QWORD *)(v146 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_3;
    *(_QWORD *)(v146 + 24) = v147;
    v232 = swift_allocObject();
    *(_BYTE *)(v232 + 16) = v222;
    v233 = swift_allocObject();
    *(_BYTE *)(v233 + 16) = v224;
    v148 = swift_allocObject();
    v149 = v220;
    v221 = v148;
    *(_QWORD *)(v148 + 16) = partial apply for implicit closure #2 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v148 + 24) = v149;
    v150 = swift_allocObject();
    v151 = v221;
    v234 = v150;
    *(_QWORD *)(v150 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v150 + 24) = v151;
    v235 = swift_allocObject();
    *(_BYTE *)(v235 + 16) = v222;
    v236 = swift_allocObject();
    *(_BYTE *)(v236 + 16) = v224;
    v152 = swift_allocObject();
    v153 = v227;
    v228 = v152;
    *(_QWORD *)(v152 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0;
    *(_QWORD *)(v152 + 24) = v153;
    v154 = swift_allocObject();
    v155 = v228;
    v238 = v154;
    *(_QWORD *)(v154 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v154 + 24) = v155;
    v240 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v237 = _allocateUninitializedArray<A>(_:)();
    v239 = v156;
    swift_retain();
    v157 = v229;
    v158 = v239;
    *v239 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
    v158[1] = v157;
    swift_retain();
    v159 = v230;
    v160 = v239;
    v239[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v160[3] = v159;
    swift_retain();
    v161 = v231;
    v162 = v239;
    v239[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
    v162[5] = v161;
    swift_retain();
    v163 = v232;
    v164 = v239;
    v239[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v164[7] = v163;
    swift_retain();
    v165 = v233;
    v166 = v239;
    v239[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v166[9] = v165;
    swift_retain();
    v167 = v234;
    v168 = v239;
    v239[10] = closure #1 in OSLogArguments.append(_:)partial apply;
    v168[11] = v167;
    swift_retain();
    v169 = v235;
    v170 = v239;
    v239[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v170[13] = v169;
    swift_retain();
    v171 = v236;
    v172 = v239;
    v239[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v172[15] = v171;
    swift_retain();
    v173 = v238;
    v174 = v239;
    v239[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v174[17] = v173;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v241, (os_log_type_t)v242))
    {
      v175 = v325;
      v205 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v204 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v206 = createStorage<A>(capacity:type:)(0);
      v176 = createStorage<A>(capacity:type:)(3);
      v177 = v206;
      v178 = v361;
      v207 = v176;
      v208 = &v393;
      *((_QWORD *)v361 + 5) = v205;
      v209 = v392;
      *((_QWORD *)v178 + 4) = v177;
      v210 = v391;
      *((_QWORD *)v178 + 3) = v176;
      serialize(_:at:)(2, &v393);
      serialize(_:at:)(3, v208);
      v179 = v229;
      v180 = v361;
      v181 = v208;
      v182 = (uint64_t)v209;
      v183 = (uint64_t)v210;
      *((_QWORD *)v361 + 1) = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
      *((_QWORD *)v180 + 2) = v179;
      closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)v181, v182, v183);
      v211 = v175;
      if (v175)
      {
        __break(1u);
      }
      else
      {
        v184 = v361;
        v185 = v230;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v184 + 2) = v185;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v203 = 0;
        v186 = v203;
        v187 = v361;
        v188 = v231;
        *((_QWORD *)v361 + 1) = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
        *((_QWORD *)v187 + 2) = v188;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v202[6] = v186;
        v189 = v361;
        v190 = v232;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v189 + 2) = v190;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v202[5] = 0;
        v191 = v361;
        v192 = v233;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v191 + 2) = v192;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v202[4] = 0;
        v193 = v361;
        v194 = v234;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v193 + 2) = v194;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v202[3] = 0;
        v195 = v361;
        v196 = v235;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v195 + 2) = v196;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v202[2] = 0;
        v197 = v361;
        v198 = v236;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v197 + 2) = v198;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        v202[1] = 0;
        v199 = v361;
        v200 = v238;
        *((_QWORD *)v361 + 1) = closure #1 in OSLogArguments.append(_:)partial apply;
        *((_QWORD *)v199 + 2) = v200;
        closure #1 in osLogInternal(_:log:type:)(v390, (uint64_t)&v393, (uint64_t)v392, (uint64_t)v391);
        _os_log_impl(&dword_23DAB4000, v241, (os_log_type_t)v242, "HeadphoneManager: %s: (Set) value same skiping update %s %s", v205, v218);
        destroyStorage<A>(_:count:)(v206, 0, v204);
        destroyStorage<A>(_:count:)(v207, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v205, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v334 + 8))(v337, v333);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v353 + 8))(v363, v365);
    swift_release();
  }
  else
  {
    v31 = v349;
    swift_unknownObjectRetain();
    swift_retain();
    v354(v346, v364, v365);
    *(_QWORD *)v361 = v31;
    v324 = (char *)v388 + 4;
    v323 = (void (*)(char *, _QWORD))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, char *, uint64_t))(v353 + 40))(v32, v346, v365);
    v323(v324, 0);
    swift_unknownObjectRelease();
    swift_release();
    (*(void (**)(char *__return_ptr, uint64_t))(v326 + 16))((char *)v388 + 3, v328);
    BYTE2(v388[0]) = BYTE3(v388[0]);
    BYTE1(v388[0]) = 0;
    static HearingRecordPropertyRemoteSendState.== infix(_:_:)((uint64_t)v388 + 2);
    if ((v33 & 1) != 0)
    {
      outlined init with copy of HearingRecordConfig<A, B>(v356, v357, v365, v362);
      v319 = *(unsigned __int8 *)(v357 + v362[18]);
      outlined destroy of HearingRecordConfig<A, B>(v357, v365);
      v321 = &v368;
      v368 = v319;
      v320 = &v367;
      v367 = 1;
      lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState();
      v322 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
    }
    else
    {
      v322 = 0;
    }
    if ((v322 & 1) != 0)
    {
      v34 = v339;
      v35 = Logger.shared.unsafeMutableAddressor();
      (*(void (**)(char *, uint64_t, uint64_t))(v334 + 16))(v34, v35, v333);
      swift_bridgeObjectRetain();
      v298 = 32;
      v299 = 7;
      v36 = swift_allocObject();
      v37 = v360;
      v38 = v364;
      v39 = v354;
      v40 = v365;
      v41 = v36;
      v42 = v346;
      v291 = v41;
      *(_QWORD *)(v41 + 16) = v359;
      *(_QWORD *)(v41 + 24) = v37;
      v39(v42, v38, v40);
      v281 = *(unsigned int *)(v353 + 80);
      v282 = (v281 + 56) & ~(unint64_t)v281;
      v43 = (_QWORD *)swift_allocObject();
      v44 = v362;
      v45 = v282;
      v46 = v353;
      v47 = v346;
      v48 = v365;
      v49 = v326;
      v50 = v366;
      v284 = v43;
      v43[2] = v328;
      v43[3] = v48;
      v43[4] = v49;
      v285 = *((_QWORD *)v44 + 5);
      v43[5] = v285;
      v43[6] = v50;
      v283 = *(void (**)(char *, char *))(v46 + 32);
      v283((char *)v43 + v45, v47);
      swift_retain();
      v51 = swift_allocObject();
      v52 = v285;
      v53 = (_QWORD *)v51;
      v54 = v284;
      v293 = v53;
      v53[2] = v365;
      v53[3] = v52;
      v53[4] = partial apply for implicit closure #7 in static HearingRecordConfig.subscript.setter;
      v53[5] = v54;
      swift_release();
      swift_unknownObjectRetain();
      v55 = (_QWORD *)swift_allocObject();
      v56 = v365;
      v57 = v326;
      v58 = v285;
      v59 = v366;
      v60 = v349;
      v300 = v55;
      v55[2] = v328;
      v55[3] = v56;
      v55[4] = v57;
      v55[5] = v58;
      v55[6] = v59;
      v55[7] = v60;
      v317 = Logger.logObject.getter();
      v318 = static os_log_type_t.default.getter();
      v288 = &v382;
      v382 = 42;
      v286 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      v287 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
      lazy protocol witness table accessor for type Int and conformance Int();
      UnsignedInteger<>.init<A>(_:)();
      v289 = v383;
      v296 = 17;
      v302 = swift_allocObject();
      v295 = 32;
      *(_BYTE *)(v302 + 16) = 32;
      v303 = swift_allocObject();
      v297 = 8;
      *(_BYTE *)(v303 + 16) = 8;
      v61 = swift_allocObject();
      v290 = v61;
      *(_QWORD *)(v61 + 16) = implicit closure #5 in static HearingRecordConfig.subscript.setter;
      *(_QWORD *)(v61 + 24) = 0;
      v62 = swift_allocObject();
      v63 = v290;
      v304 = v62;
      *(_QWORD *)(v62 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v62 + 24) = v63;
      v305 = swift_allocObject();
      *(_BYTE *)(v305 + 16) = v295;
      v306 = swift_allocObject();
      *(_BYTE *)(v306 + 16) = v297;
      v64 = swift_allocObject();
      v65 = v291;
      v292 = v64;
      *(_QWORD *)(v64 + 16) = partial apply for implicit closure #6 in static HearingRecordConfig.subscript.setter;
      *(_QWORD *)(v64 + 24) = v65;
      v66 = swift_allocObject();
      v67 = v292;
      v307 = v66;
      *(_QWORD *)(v66 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v66 + 24) = v67;
      v308 = swift_allocObject();
      *(_BYTE *)(v308 + 16) = v295;
      v309 = swift_allocObject();
      *(_BYTE *)(v309 + 16) = v297;
      v68 = swift_allocObject();
      v69 = v293;
      v294 = v68;
      *(_QWORD *)(v68 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply;
      *(_QWORD *)(v68 + 24) = v69;
      v70 = swift_allocObject();
      v71 = v294;
      v310 = v70;
      *(_QWORD *)(v70 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v70 + 24) = v71;
      v311 = swift_allocObject();
      *(_BYTE *)(v311 + 16) = v295;
      v312 = swift_allocObject();
      *(_BYTE *)(v312 + 16) = v297;
      v72 = swift_allocObject();
      v73 = v300;
      v301 = v72;
      *(_QWORD *)(v72 + 16) = partial apply for implicit closure #8 in static HearingRecordConfig.subscript.setter;
      *(_QWORD *)(v72 + 24) = v73;
      v74 = swift_allocObject();
      v75 = v301;
      v314 = v74;
      *(_QWORD *)(v74 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v74 + 24) = v75;
      v316 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
      v313 = _allocateUninitializedArray<A>(_:)();
      v315 = v76;
      swift_retain();
      v77 = v302;
      v78 = v315;
      *v315 = closure #1 in OSLogArguments.append(_:)partial apply;
      v78[1] = v77;
      swift_retain();
      v79 = v303;
      v80 = v315;
      v315[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v80[3] = v79;
      swift_retain();
      v81 = v304;
      v82 = v315;
      v315[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v82[5] = v81;
      swift_retain();
      v83 = v305;
      v84 = v315;
      v315[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v84[7] = v83;
      swift_retain();
      v85 = v306;
      v86 = v315;
      v315[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v86[9] = v85;
      swift_retain();
      v87 = v307;
      v88 = v315;
      v315[10] = closure #1 in OSLogArguments.append(_:)partial apply;
      v88[11] = v87;
      swift_retain();
      v89 = v308;
      v90 = v315;
      v315[12] = closure #1 in OSLogArguments.append(_:)partial apply;
      v90[13] = v89;
      swift_retain();
      v91 = v309;
      v92 = v315;
      v315[14] = closure #1 in OSLogArguments.append(_:)partial apply;
      v92[15] = v91;
      swift_retain();
      v93 = v310;
      v94 = v315;
      v315[16] = closure #1 in OSLogArguments.append(_:)partial apply;
      v94[17] = v93;
      swift_retain();
      v95 = v311;
      v96 = v315;
      v315[18] = closure #1 in OSLogArguments.append(_:)partial apply;
      v96[19] = v95;
      swift_retain();
      v97 = v312;
      v98 = v315;
      v315[20] = closure #1 in OSLogArguments.append(_:)partial apply;
      v98[21] = v97;
      swift_retain();
      v99 = v314;
      v100 = v315;
      v315[22] = closure #1 in OSLogArguments.append(_:)partial apply;
      v100[23] = v99;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v317, (os_log_type_t)v318))
      {
        v101 = v325;
        v274 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v273 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v275 = createStorage<A>(capacity:type:)(0);
        v276 = createStorage<A>(capacity:type:)(4);
        v277 = &v373;
        v373 = v274;
        v278 = &v372;
        v372 = v275;
        v279 = &v371;
        v371 = v276;
        serialize(_:at:)(2, &v373);
        serialize(_:at:)(4, v277);
        v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v370 = v302;
        closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)v277, (uint64_t)v278, (uint64_t)v279);
        v280 = v101;
        if (v101)
        {
          __break(1u);
        }
        else
        {
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v303;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v272 = 0;
          v102 = v272;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v304;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v271 = v102;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v305;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v270 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v306;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v269 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v307;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v268 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v308;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v267 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v309;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v266 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v310;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v265 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v311;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v264 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v312;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          v263 = 0;
          v369 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v370 = v314;
          closure #1 in osLogInternal(_:log:type:)(&v369, (uint64_t)&v373, (uint64_t)&v372, (uint64_t)&v371);
          _os_log_impl(&dword_23DAB4000, v317, (os_log_type_t)v318, "HeadphoneManager: %s: PropertyWrapper (Set) %s value:%s id: %s", v274, v289);
          destroyStorage<A>(_:count:)(v275, 0, v273);
          destroyStorage<A>(_:count:)(v276, 4, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24263B020](v274, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }

      (*(void (**)(char *, uint64_t))(v334 + 8))(v339, v333);
      outlined init with copy of HearingRecordConfig<A, B>(v356, v357, v365, v362);
      v251 = *(_QWORD *)(v357 + v362[17]);
      swift_retain();
      outlined destroy of HearingRecordConfig<A, B>(v357, v365);
      v262 = (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v326 + 32))(v251, v364, v365, v328);
      swift_release();
      v381 = v262;
      v252 = (_QWORD *)*Headphone_Manager.shared.unsafeMutableAddressor();
      v103 = v252;
      v104 = v252;
      v261 = (id)(*(uint64_t (**)(_QWORD *))((*v103 & *MEMORY[0x24BEE4EA0]) + 0x138))(v104);

      v105 = (*(uint64_t (**)(uint64_t))(v326 + 24))(v328);
      v253 = v106;
      v260 = (id)MEMORY[0x24263ADA4](v105);
      swift_bridgeObjectRelease();
      swift_retain();
      v354(v346, (uint64_t)v363, v365);
      v107 = v262;
      v354(v343, v364, v365);
      swift_unknownObjectRetain();
      v108 = v281;
      v254 = (v108 + 64) & ~v108;
      v255 = (v254 + v345 + 7) & 0xFFFFFFFFFFFFFFF8;
      v256 = (v255 + 8 + v108) & ~v108;
      v257 = (v256 + v345 + 7) & 0xFFFFFFFFFFFFFFF8;
      v109 = (_QWORD *)swift_allocObject();
      v110 = v326;
      v111 = v285;
      v112 = v366;
      v113 = v254;
      v114 = v346;
      v115 = v283;
      v116 = v365;
      v117 = v348;
      v258 = v109;
      v109[2] = v328;
      v109[3] = v116;
      v109[4] = v110;
      v109[5] = v111;
      v109[6] = v112;
      v109[7] = v117;
      v115((char *)v109 + v113, v114);
      v118 = v256;
      v119 = v343;
      v120 = (void (*)(char *, char *, uint64_t))v283;
      v121 = v365;
      v122 = (char *)v258;
      *(_QWORD *)((char *)v258 + v255) = v262;
      v120(&v122[v118], v119, v121);
      v123 = v258;
      *(_QWORD *)((char *)v258 + v257) = v349;
      v379 = partial apply for closure #1 in static HearingRecordConfig.subscript.setter;
      v380 = v123;
      v374 = MEMORY[0x24BDAC760];
      v375 = 1107296256;
      v376 = 0;
      v377 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
      v378 = &block_descriptor_2;
      v259 = _Block_copy(&v374);
      swift_release();
      objc_msgSend(v261, sel_modifyDeviceConfig_identifier_completion_, v262, v260, v259);
      _Block_release(v259);

      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v353 + 8))(v363, v365);
      swift_release();
    }
    else
    {
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(v326 + 16))(v388, v328);
      v250 = &v387;
      v387 = v388[0];
      v249 = &v386;
      v386 = 3;
      lazy protocol witness table accessor for type HearingRecordPropertyRemoteSendState and conformance HearingRecordPropertyRemoteSendState();
      if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
      {
        v248 = (uint64_t *)(v356 + v362[15]);
        if (*v248)
        {
          v247 = *v248;
          swift_retain();
          CurrentValueSubject.send(_:)();
          swift_release();
        }
        dispatch thunk of ObservableObject.objectWillChange.getter();
        type metadata accessor for ObservableObjectPublisher();
        if ((swift_dynamicCast() & 1) != 0)
          v246 = v385;
        else
          v246 = 0;
        v245 = v246;
        if (v246)
        {
          v244 = v245;
          v243 = v245;
          v384 = v245;
          ObservableObjectPublisher.send()();
          swift_release();
        }
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v353 + 8))(v363, v365);
      swift_release();
    }
  }
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v353 + 8))(v364, v365);
}

uint64_t outlined init with copy of HearingRecordConfig<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 16))();
  v5 = a4[15];
  v6 = *(_QWORD *)(a1 + v5);
  swift_retain();
  *(_QWORD *)(a2 + v5) = v6;
  v7 = a4[16];
  v8 = *(_QWORD *)(a1 + v7);
  swift_retain();
  *(_QWORD *)(a2 + v7) = v8;
  v10 = a4[17];
  v11 = *(_QWORD *)(a1 + v10);
  swift_retain();
  result = a2;
  *(_QWORD *)(a2 + v10) = v11;
  *(_BYTE *)(a2 + a4[18]) = *(_BYTE *)(a1 + a4[18]);
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HearingRecordConfig<A, B>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(a2 - 8) + 8))();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t implicit closure #1 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #2 in static HearingRecordConfig.subscript.setter()
{
  swift_bridgeObjectRetain();
}

uint64_t sub_23DB1D88C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in static HearingRecordConfig.subscript.setter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #2 in static HearingRecordConfig.subscript.setter();
  return result;
}

uint64_t implicit closure #3 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_23DB1D904()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return implicit closure #3 in static HearingRecordConfig.subscript.setter(v1 + ((v2 + 56) & ~v2), v4, a1);
}

uint64_t implicit closure #5 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #6 in static HearingRecordConfig.subscript.setter()
{
  swift_bridgeObjectRetain();
}

uint64_t implicit closure #7 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t implicit closure #8 in static HearingRecordConfig.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(a4 + 24))(a2);
}

uint64_t closure #1 in static HearingRecordConfig.subscript.setter(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t result;
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE **v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE **v138;
  uint64_t *v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  id v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t *v147;
  uint32_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  NSObject *v175;
  int v176;
  unint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint32_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  NSObject *v202;
  int v203;
  id v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t AssociatedTypeWitness;
  unint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  id v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  id v232;
  uint64_t (*v233)(uint64_t, uint64_t, uint64_t);
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  _BYTE *v237;
  uint64_t v238;
  uint32_t v239;
  uint64_t v240;
  id v241;
  uint64_t (*v242)(uint64_t, uint64_t, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _BYTE *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint32_t v250;
  uint64_t v251;
  uint64_t v252;
  id v253;
  uint64_t v254;
  uint64_t v255;
  _QWORD v256[5];
  id v257;
  uint64_t v258;
  uint64_t v259;

  v232 = a1;
  v225 = a2;
  v227 = a3;
  v228 = a4;
  v229 = a5;
  v230 = a6;
  v213 = a7;
  v214 = a8;
  v222 = a9;
  v223 = a10;
  v215 = a11;
  v257 = 0;
  v255 = 0;
  v254 = 0;
  v253 = 0;
  v252 = 0;
  v251 = 0;
  v247 = 0;
  v205 = 0;
  v241 = 0;
  v259 = a7;
  v258 = a8;
  v206 = *(_QWORD *)(a9 + 8);
  v216 = 0;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v208 = (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](0, v11);
  v209 = (char *)v104 - v208;
  v210 = *(_QWORD *)(v13 - 8);
  v211 = (*(_QWORD *)(v210 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12, (char *)v104 - v208);
  v212 = (char *)v104 - v211;
  v217 = type metadata accessor for Logger();
  v218 = *(_QWORD *)(v217 - 8);
  v220 = *(_QWORD *)(v218 + 64);
  v219 = (v220 + 15) & 0xFFFFFFFFFFFFFFF0;
  v15 = MEMORY[0x24BDAC7A8](v216, v14);
  v221 = (char *)v104 - v219;
  v16 = MEMORY[0x24BDAC7A8](v15, (char *)v104 - v219);
  v224 = (char *)v104 - v17;
  v257 = v232;
  v256[0] = v18;
  v256[1] = v19;
  v256[2] = v222;
  v256[3] = v223;
  v256[4] = v20;
  v226 = type metadata accessor for HearingRecordConfig(v16, (uint64_t)v256);
  v231 = swift_projectBox();
  v255 = v231;
  v254 = v227;
  v253 = v228;
  v252 = v229;
  v251 = v230;
  v21 = v232;
  if (v232)
  {
    v204 = v232;
    v54 = v221;
    v143 = v232;
    v241 = v232;
    (*(void (**)(char *, uint64_t, uint64_t))(v210 + 16))(v212, v227, v214);
    v142 = &v240;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v210 + 40))(v231, v212, v214);
    swift_endAccess();
    v55 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v218 + 16))(v54, v55, v217);
    v56 = v143;
    v144 = 24;
    v157 = 7;
    v57 = swift_allocObject();
    v58 = v228;
    v151 = v57;
    *(_QWORD *)(v57 + 16) = v143;
    v59 = v58;
    v158 = swift_allocObject();
    *(_QWORD *)(v158 + 16) = v228;
    v175 = Logger.logObject.getter();
    v176 = static os_log_type_t.error.getter();
    v147 = &v238;
    v238 = 42;
    v145 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v146 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v148 = v239;
    v154 = 17;
    v160 = swift_allocObject();
    v153 = 32;
    *(_BYTE *)(v160 + 16) = 32;
    v161 = swift_allocObject();
    v155 = 8;
    *(_BYTE *)(v161 + 16) = 8;
    v156 = 32;
    v60 = swift_allocObject();
    v149 = v60;
    *(_QWORD *)(v60 + 16) = implicit closure #1 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v60 + 24) = 0;
    v61 = swift_allocObject();
    v62 = v149;
    v162 = v61;
    *(_QWORD *)(v61 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v61 + 24) = v62;
    v163 = swift_allocObject();
    *(_BYTE *)(v163 + 16) = 0;
    v164 = swift_allocObject();
    *(_BYTE *)(v164 + 16) = v155;
    v63 = swift_allocObject();
    v150 = v63;
    *(_QWORD *)(v63 + 16) = implicit closure #2 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v63 + 24) = 0;
    v64 = swift_allocObject();
    v65 = v150;
    v165 = v64;
    *(_QWORD *)(v64 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v64 + 24) = v65;
    v166 = swift_allocObject();
    *(_BYTE *)(v166 + 16) = v153;
    v167 = swift_allocObject();
    *(_BYTE *)(v167 + 16) = v155;
    v66 = swift_allocObject();
    v67 = v151;
    v152 = v66;
    *(_QWORD *)(v66 + 16) = partial apply for implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v66 + 24) = v67;
    v68 = swift_allocObject();
    v69 = v152;
    v168 = v68;
    *(_QWORD *)(v68 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v68 + 24) = v69;
    v169 = swift_allocObject();
    *(_BYTE *)(v169 + 16) = v153;
    v170 = swift_allocObject();
    *(_BYTE *)(v170 + 16) = v155;
    v70 = swift_allocObject();
    v71 = v158;
    v159 = v70;
    *(_QWORD *)(v70 + 16) = partial apply for implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v70 + 24) = v71;
    v72 = swift_allocObject();
    v73 = v159;
    v172 = v72;
    *(_QWORD *)(v72 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v72 + 24) = v73;
    v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v171 = _allocateUninitializedArray<A>(_:)();
    v173 = v74;
    swift_retain();
    v75 = v160;
    v76 = v173;
    *v173 = closure #1 in OSLogArguments.append(_:)partial apply;
    v76[1] = v75;
    swift_retain();
    v77 = v161;
    v78 = v173;
    v173[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v78[3] = v77;
    swift_retain();
    v79 = v162;
    v80 = v173;
    v173[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v80[5] = v79;
    swift_retain();
    v81 = v163;
    v82 = v173;
    v173[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v82[7] = v81;
    swift_retain();
    v83 = v164;
    v84 = v173;
    v173[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v84[9] = v83;
    swift_retain();
    v85 = v165;
    v86 = v173;
    v173[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v86[11] = v85;
    swift_retain();
    v87 = v166;
    v88 = v173;
    v173[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v88[13] = v87;
    swift_retain();
    v89 = v167;
    v90 = v173;
    v173[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v90[15] = v89;
    swift_retain();
    v91 = v168;
    v92 = v173;
    v173[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v92[17] = v91;
    swift_retain();
    v93 = v169;
    v94 = v173;
    v173[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v94[19] = v93;
    swift_retain();
    v95 = v170;
    v96 = v173;
    v173[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v96[21] = v95;
    swift_retain();
    v97 = v172;
    v98 = v173;
    v173[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v98[23] = v97;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v175, (os_log_type_t)v176))
    {
      v99 = v205;
      v135 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v136 = createStorage<A>(capacity:type:)(0);
      v137 = createStorage<A>(capacity:type:)(3);
      v138 = &v237;
      v237 = v135;
      v139 = &v236;
      v236 = v136;
      v140 = &v235;
      v235 = v137;
      serialize(_:at:)(2, &v237);
      serialize(_:at:)(4, v138);
      v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v234 = v160;
      closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)v138, (uint64_t)v139, (uint64_t)v140);
      v141 = v99;
      if (v99)
      {
        __break(1u);
      }
      else
      {
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v161;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v133 = 0;
        v100 = v133;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v162;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v132 = v100;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v163;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v131 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v164;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v130 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v234 = v165;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v129 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v166;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v128 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v167;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v127 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v168;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v126 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v169;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v125 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v170;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        v124 = 0;
        v233 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v234 = v172;
        closure #1 in osLogInternal(_:log:type:)(&v233, (uint64_t)&v237, (uint64_t)&v236, (uint64_t)&v235);
        _os_log_impl(&dword_23DAB4000, v175, (os_log_type_t)v176, "HeadphoneManager: %s: %ld Failed to update AAD Device Config, Error: %s %s", v135, v148);
        destroyStorage<A>(_:count:)(v136, 0, v134);
        destroyStorage<A>(_:count:)(v137, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v135, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v218 + 8))(v221, v217);
  }
  else
  {
    v22 = v224;
    v23 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v218 + 16))(v22, v23, v217);
    v24 = v228;
    v187 = 7;
    v188 = swift_allocObject();
    *(_QWORD *)(v188 + 16) = v228;
    v202 = Logger.logObject.getter();
    v203 = static os_log_type_t.default.getter();
    v179 = &v249;
    v186 = 32;
    v249 = 32;
    v177 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v178 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v180 = v250;
    v184 = 17;
    v190 = swift_allocObject();
    v183 = 32;
    *(_BYTE *)(v190 + 16) = 32;
    v191 = swift_allocObject();
    v185 = 8;
    *(_BYTE *)(v191 + 16) = 8;
    v25 = swift_allocObject();
    v181 = v25;
    *(_QWORD *)(v25 + 16) = implicit closure #5 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v25 + 24) = 0;
    v26 = swift_allocObject();
    v27 = v181;
    v192 = v26;
    *(_QWORD *)(v26 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v26 + 24) = v27;
    v193 = swift_allocObject();
    *(_BYTE *)(v193 + 16) = 0;
    v194 = swift_allocObject();
    *(_BYTE *)(v194 + 16) = v185;
    v28 = swift_allocObject();
    v182 = v28;
    *(_QWORD *)(v28 + 16) = implicit closure #6 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v28 + 24) = 0;
    v29 = swift_allocObject();
    v30 = v182;
    v195 = v29;
    *(_QWORD *)(v29 + 16) = _sSiIegd_SiIegr_TRTA_2;
    *(_QWORD *)(v29 + 24) = v30;
    v196 = swift_allocObject();
    *(_BYTE *)(v196 + 16) = v183;
    v197 = swift_allocObject();
    *(_BYTE *)(v197 + 16) = v185;
    v31 = swift_allocObject();
    v32 = v188;
    v189 = v31;
    *(_QWORD *)(v31 + 16) = partial apply for implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter;
    *(_QWORD *)(v31 + 24) = v32;
    v33 = swift_allocObject();
    v34 = v189;
    v199 = v33;
    *(_QWORD *)(v33 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v33 + 24) = v34;
    v201 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v198 = _allocateUninitializedArray<A>(_:)();
    v200 = v35;
    swift_retain();
    v36 = v190;
    v37 = v200;
    *v200 = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[1] = v36;
    swift_retain();
    v38 = v191;
    v39 = v200;
    v200[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[3] = v38;
    swift_retain();
    v40 = v192;
    v41 = v200;
    v200[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v41[5] = v40;
    swift_retain();
    v42 = v193;
    v43 = v200;
    v200[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v43[7] = v42;
    swift_retain();
    v44 = v194;
    v45 = v200;
    v200[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v45[9] = v44;
    swift_retain();
    v46 = v195;
    v47 = v200;
    v200[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
    v47[11] = v46;
    swift_retain();
    v48 = v196;
    v49 = v200;
    v200[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v49[13] = v48;
    swift_retain();
    v50 = v197;
    v51 = v200;
    v200[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v51[15] = v50;
    swift_retain();
    v52 = v199;
    v53 = v200;
    v200[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v53[17] = v52;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v202, (os_log_type_t)v203))
    {
      v101 = v205;
      v117 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v116 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v118 = createStorage<A>(capacity:type:)(0);
      v119 = createStorage<A>(capacity:type:)(2);
      v120 = &v246;
      v246 = v117;
      v121 = &v245;
      v245 = v118;
      v122 = &v244;
      v244 = v119;
      serialize(_:at:)(2, &v246);
      serialize(_:at:)(3, v120);
      v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v243 = v190;
      closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)v120, (uint64_t)v121, (uint64_t)v122);
      v123 = v101;
      if (v101)
      {
        __break(1u);
      }
      else
      {
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v191;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v115 = 0;
        v102 = v115;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v192;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v114 = v102;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v193;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v113 = 0;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v194;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v112 = 0;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2;
        v243 = v195;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v111 = 0;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v196;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v110 = 0;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v197;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        v109 = 0;
        v242 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v243 = v199;
        closure #1 in osLogInternal(_:log:type:)(&v242, (uint64_t)&v246, (uint64_t)&v245, (uint64_t)&v244);
        _os_log_impl(&dword_23DAB4000, v202, (os_log_type_t)v203, "HeadphoneManager: %s: %ld  Successfully Updated AAD Device Config: %s", v117, v180);
        destroyStorage<A>(_:count:)(v118, 0, v116);
        destroyStorage<A>(_:count:)(v119, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v117, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v218 + 8))(v224, v217);
  }
  swift_beginAccess();
  v108 = (uint64_t *)(v231 + *(int *)(v226 + 60));
  if (*v108)
  {
    v107 = *v108;
    swift_retain();
    swift_endAccess();
    CurrentValueSubject.send(_:)();
    swift_release();
  }
  else
  {
    swift_endAccess();
  }
  dispatch thunk of ObservableObject.objectWillChange.getter();
  type metadata accessor for ObservableObjectPublisher();
  result = swift_dynamicCast();
  if ((result & 1) != 0)
    v106 = v248;
  else
    v106 = 0;
  v105 = v106;
  if (v106)
  {
    v104[2] = v105;
    v104[1] = v105;
    v247 = v105;
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #1 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return 56;
}

uint64_t implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t implicit closure #5 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #6 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  return 58;
}

uint64_t implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

void (*static HearingRecordConfig.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t __size;
  _QWORD *v9;
  void *v13;

  v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[1] = a3;
  *v9 = a2;
  v4 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE35B8] + 8);
  v9[3] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v9[4] = v5;
  __size = *(_QWORD *)(v5 + 64);
  v9[5] = malloc(__size);
  v13 = malloc(__size);
  v9[6] = v13;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return static HearingRecordConfig.subscript.modify;
}

void static HearingRecordConfig.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t *v11;

  v11 = *a1;
  if ((a2 & 1) != 0)
  {
    v7 = (void *)v11[6];
    v8 = (void *)v11[5];
    v2 = v11[4];
    v3 = v11[3];
    v4 = (_QWORD *)v11[2];
    v5 = (_QWORD *)v11[1];
    v6 = *v11;
    (*(void (**)(void))(v2 + 16))();
    static HearingRecordConfig.subscript.setter((uint64_t)v8, v6, v5, v4);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v7, v3);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    free(v7);
    free(v8);
  }
  else
  {
    v9 = (void *)v11[6];
    v10 = (void *)v11[5];
    static HearingRecordConfig.subscript.setter((uint64_t)v9, *v11, (_QWORD *)v11[1], (_QWORD *)v11[2]);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    free(v9);
    free(v10);
  }
  free(v11);
}

void HearingRecordConfig.wrappedValue.getter()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void key path getter for HearingRecordConfig.wrappedValue : <A, B>HearingRecordConfig<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD v23[7];

  v18 = a4;
  v15 = a1;
  v4 = (_QWORD *)(a2 + a3 - 40);
  v23[6] = *v4;
  v20 = v4[1];
  v23[5] = v20;
  v13 = v4[2];
  v14 = v4[3];
  v17 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v19 = (char *)&v12 - v5;
  v23[0] = v6;
  v23[1] = v20;
  v23[2] = v13;
  v23[3] = v14;
  v23[4] = v7;
  v21 = type metadata accessor for HearingRecordConfig(0, (uint64_t)v23);
  v16 = (*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v15, v8);
  v22 = (char *)&v12 - v16;
  outlined init with copy of HearingRecordConfig<A, B>(v9, (uint64_t)&v12 - v16, v10, v11);
  HearingRecordConfig.wrappedValue.getter();
}

uint64_t sub_23DB1F750()
{
  uint64_t v0;
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 - 120) + 32))(*(_QWORD *)(v0 - 112), *(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 96));
  result = *(_QWORD *)(v0 - 80);
  outlined destroy of HearingRecordConfig<A, B>(result, *(_QWORD *)(v0 - 96));
  return result;
}

void key path setter for HearingRecordConfig.wrappedValue : <A, B>HearingRecordConfig<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD v14[7];

  v6[1] = a1;
  v4 = (uint64_t *)(a3 + a4 - 40);
  v8 = *v4;
  v14[6] = v8;
  v9 = v4[1];
  v14[5] = v9;
  v10 = v4[2];
  v11 = v4[3];
  v12 = v4[4];
  v7 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1, a1);
  v13 = (char *)v6 - v7;
  (*(void (**)(void))(v5 + 16))();
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  v14[4] = v12;
  type metadata accessor for HearingRecordConfig(0, (uint64_t)v14);
  HearingRecordConfig.wrappedValue.setter();
}

void HearingRecordConfig.wrappedValue.setter()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void HearingRecordConfig.wrappedValue.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = v2;
  *v7 = a2;
  v3 = *(_QWORD *)(a2 + 24);
  v7[2] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v7[3] = v4;
  __size = *(_QWORD *)(v4 + 64);
  v7[4] = malloc(__size);
  v7[5] = malloc(__size);
  HearingRecordConfig.wrappedValue.getter();
}

void (*sub_23DB1F9B0())(uint64_t a1, char a2)
{
  return HearingRecordConfig.wrappedValue.modify;
}

void HearingRecordConfig.wrappedValue.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    HearingRecordConfig.wrappedValue.setter();
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16))();
  HearingRecordConfig.wrappedValue.setter();
}

void sub_23DB1FA74(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t))(a12 + 8))(a13, a14);
  free(a15);
  free(a16);
  free(*(void **)(v16 - 48));
}

void variable initialization expression of HearingRecordConfig.publisher(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of HearingRecordConfig.objectWillChange()
{
  return 0;
}

uint64_t HearingRecordConfig.objectWillChange.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 64));
  swift_retain();
  return v3;
}

uint64_t HearingRecordConfig.objectWillChange.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_retain();
  *(_QWORD *)(v2 + *(int *)(a2 + 64)) = a1;
  swift_release();
  return swift_release();
}

void (*HearingRecordConfig.objectWillChange.modify())()
{
  return HearingRecordConfig.objectWillChange.modify;
}

uint64_t HearingRecordConfig.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;

  v10 = a3;
  v11 = a1;
  v13 = "Fatal error";
  v14 = "Unexpectedly found nil while unwrapping an Optional value";
  v15 = "HeadphoneManager/HearingRecordConfigurationPropertyWrapper.swift";
  v23 = 0;
  v21 = 0;
  v16 = *(_QWORD *)(a1 + 24);
  v24 = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v19 = (uint64_t)&v6 - v18;
  v23 = v3;
  v22[1] = *(_QWORD *)(v4 + 16);
  v20 = *(_QWORD *)(v3 + *(int *)(v4 + 60));
  swift_retain();
  if (v20)
  {
    v9 = v20;
    v8 = v20;
    v21 = v20;
    swift_retain();
    *v10 = v8;
    return swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, v12, v16);
    HeadphonePropertyWrapperPublisher.init(_:)(v19, v16, v22);
    *(_QWORD *)(v12 + *(int *)(v11 + 60)) = v22[0];
    swift_release();
    v7 = *(_QWORD *)(v12 + *(int *)(v11 + 60));
    result = swift_retain();
    if (v7)
    {
      v6 = v7;
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    *v10 = v6;
  }
  return result;
}

void default argument 2 of HearingRecordConfig.init(_:_:_:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t HearingRecordConfig.init(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t result;
  _QWORD v26[3];
  unint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  int *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[7];

  v30 = a6;
  v33 = a1;
  v32 = a2;
  v26[1] = a3;
  v35 = a5;
  v40 = 0;
  v39 = 0;
  v38 = 0;
  v37 = 0;
  v41[6] = a4;
  v41[5] = a5;
  v31 = *(_QWORD *)(a5 - 8);
  v26[0] = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1, a2);
  v28 = (char *)v26 - v26[0];
  v41[0] = v6;
  v41[1] = v7;
  v41[2] = v8;
  v41[3] = v9;
  v41[4] = v10;
  v26[2] = 0;
  v36 = (int *)type metadata accessor for HearingRecordConfig(0, (uint64_t)v41);
  v27 = (*(_QWORD *)(*((_QWORD *)v36 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v33, v32);
  v12 = v36;
  v13 = (char *)v26 - v27;
  v34 = v13;
  v40 = (char *)v26 - v27;
  v39 = v11;
  v38 = v14;
  v29 = *v15;
  v37 = v29;
  *(_QWORD *)&v13[v36[15]] = v16;
  *(_QWORD *)&v13[v12[16]] = v16;
  swift_retain();
  v17 = v28;
  v18 = v31;
  v19 = v32;
  v20 = v35;
  *(_QWORD *)&v34[v36[17]] = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, v20);
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v34, v28, v35);
  v21 = v30;
  v22 = v35;
  v23 = v36;
  v24 = (uint64_t)v34;
  v34[v36[18]] = v29;
  outlined init with copy of HearingRecordConfig<A, B>(v24, v21, v22, v23);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v32, v35);
  swift_release();
  result = (uint64_t)v34;
  outlined destroy of HearingRecordConfig<A, B>((uint64_t)v34, v35);
  return result;
}

uint64_t sub_23DB1FF7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_0()
{
  uint64_t *v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t implicit closure #1 in default argument 0 of fatalError(_:file:line:)()
{
  swift_bridgeObjectRetain();
  return 0;
}

uint64_t sub_23DB20014()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB20044()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20074()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_3()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB200BC()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB20104()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20134()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20164()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB201AC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB201F4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20224()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20254()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB2029C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB202E4()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #6 in static HearingRecordConfig.subscript.setter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #6 in static HearingRecordConfig.subscript.setter();
  return result;
}

uint64_t sub_23DB2032C()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in static HearingRecordConfig.subscript.setter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
  return implicit closure #7 in static HearingRecordConfig.subscript.setter(v1 + ((v2 + 56) & ~v2), v4, a1);
}

uint64_t sub_23DB203E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)partial apply()
{
  uint64_t *v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v0[4], v0[5], v0[2], v0[3]);
}

uint64_t sub_23DB2044C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in static HearingRecordConfig.subscript.setter()
{
  uint64_t *v0;

  return implicit closure #8 in static HearingRecordConfig.subscript.setter(v0[7], v0[2], v0[3], v0[4]);
}

uint64_t sub_23DB204C4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB204F4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20524()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB2056C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB205B4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB205E4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20614()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB2065C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB206A4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB206D4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB20704()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB2074C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB20794()
{
  return swift_deallocObject();
}

uint64_t sub_23DB207C4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB207F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB2083C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB20884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v8 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v8 - 8);
  v1 = *(_DWORD *)(v3 + 80);
  v4 = (v1 + 64) & ~v1;
  v5 = (v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 8 + v1) & ~v1;
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v0 + v4, v8);

  v7(v0 + v6, v8);
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static HearingRecordConfig.subscript.setter(void *a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v8 = v1[3];
  v2 = *(_QWORD *)(v8 - 8);
  v3 = (*(_DWORD *)(v2 + 80) + 64) & ~(unint64_t)*(_DWORD *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = (v3 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 8 + *(_DWORD *)(v2 + 80)) & ~(unint64_t)*(_DWORD *)(v2 + 80);
  return closure #1 in static HearingRecordConfig.subscript.setter(a1, v1[7], (uint64_t)v1 + v3, *(void **)((char *)v1 + v5), (uint64_t)v1 + v6, *(uint64_t *)((char *)v1 + ((v6 + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), v1[2], v8, v1[4], v1[5], v1[6]);
}

uint64_t type metadata accessor for HearingRecordConfig(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x24263B62C](a1, a2, &nominal type descriptor for HearingRecordConfig);
}

uint64_t sub_23DB20AB8()
{
  return 40;
}

void *sub_23DB20AE4(const void *a1, void *__dst)
{
  return memcpy(__dst, a1, 0x28uLL);
}

uint64_t type metadata instantiation function for HearingRecordConfig()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for HearingRecordConfig()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for HearingRecordConfig(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v15;

  v15 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v15 & 0x20000) != 0)
  {
    v10 = *a2;
    swift_retain();
    *a1 = v10;
    return *a1 + ((v15 + 16) & ~(unint64_t)v15);
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 60);
    v5 = *(_QWORD *)((char *)a2 + v4);
    swift_retain();
    *(_QWORD *)((char *)a1 + v4) = v5;
    v6 = *(int *)(a3 + 64);
    v7 = *(_QWORD *)((char *)a2 + v6);
    swift_retain();
    *(_QWORD *)((char *)a1 + v6) = v7;
    v8 = *(int *)(a3 + 68);
    v9 = *(_QWORD *)((char *)a2 + v8);
    swift_retain();
    *(_QWORD *)((char *)a1 + v8) = v9;
    *((_BYTE *)a1 + *(int *)(a3 + 72)) = *((_BYTE *)a2 + *(int *)(a3 + 72));
    return (unint64_t)a1;
  }
}

uint64_t destroy for HearingRecordConfig(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  v4 = *(int *)(a3 + 60);
  v5 = *(_QWORD *)(a2 + v4);
  swift_retain();
  *(_QWORD *)(a1 + v4) = v5;
  v6 = *(int *)(a3 + 64);
  v7 = *(_QWORD *)(a2 + v6);
  swift_retain();
  *(_QWORD *)(a1 + v6) = v7;
  v9 = *(int *)(a3 + 68);
  v10 = *(_QWORD *)(a2 + v9);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + v9) = v10;
  *(_BYTE *)(a1 + *(int *)(a3 + 72)) = *(_BYTE *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t assignWithCopy for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  v3 = *(int *)(a3 + 60);
  v6 = (_QWORD *)(a1 + v3);
  v7 = *(_QWORD *)(a2 + v3);
  swift_retain();
  *v6 = v7;
  swift_release();
  v4 = *(int *)(a3 + 64);
  v8 = (_QWORD *)(a1 + v4);
  v9 = *(_QWORD *)(a2 + v4);
  swift_retain();
  *v8 = v9;
  swift_release();
  v10 = *(int *)(a3 + 68);
  v11 = *(_QWORD *)(a2 + v10);
  swift_retain();
  *(_QWORD *)(a1 + v10) = v11;
  swift_release();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(a3 + 72)) = *(_BYTE *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t initializeWithTake for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  result = a1;
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  *(_QWORD *)(a1 + *(int *)(a3 + 64)) = *(_QWORD *)(a2 + *(int *)(a3 + 64));
  *(_QWORD *)(a1 + *(int *)(a3 + 68)) = *(_QWORD *)(a2 + *(int *)(a3 + 68));
  *(_BYTE *)(a1 + *(int *)(a3 + 72)) = *(_BYTE *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t assignWithTake for HearingRecordConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 64)) = *(_QWORD *)(a2 + *(int *)(a3 + 64));
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 68)) = *(_QWORD *)(a2 + *(int *)(a3 + 68));
  swift_release();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(a3 + 72)) = *(_BYTE *)(a2 + *(int *)(a3 + 72));
  return result;
}

uint64_t getEnumTagSinglePayload for HearingRecordConfig()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DB211A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  if (a2 == *(_DWORD *)(v7 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 68)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 68));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for HearingRecordConfig()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DB212A0(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a4 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(result, a2, a2, v4);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(result + *(int *)(a4 + 68)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t sub_23DB21350()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  uint64_t v0;

  return implicit closure #7 in closure #1 in static HearingRecordConfig.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB21394()
{
  return swift_deallocObject();
}

uint64_t sub_23DB213C4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB213F4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB2143C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21484()
{
  return swift_deallocObject();
}

uint64_t sub_23DB214B4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB214E4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_2@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23DB2152C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_2(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_23DB215C8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB215F8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB21628()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21670()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB216B8()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  uint64_t v0;

  return implicit closure #3 in closure #1 in static HearingRecordConfig.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB216FC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter()
{
  uint64_t v0;

  return implicit closure #4 in closure #1 in static HearingRecordConfig.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB21740()
{
  return swift_deallocObject();
}

uint64_t sub_23DB21770()
{
  return swift_deallocObject();
}

uint64_t sub_23DB217A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB217E8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21830()
{
  return swift_deallocObject();
}

uint64_t sub_23DB21860()
{
  return swift_deallocObject();
}

uint64_t sub_23DB21890()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB218D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21974()
{
  return swift_deallocObject();
}

uint64_t sub_23DB219A4()
{
  return swift_deallocObject();
}

uint64_t sub_23DB219D4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21A1C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21A64()
{
  return swift_deallocObject();
}

uint64_t sub_23DB21A94()
{
  return swift_deallocObject();
}

uint64_t sub_23DB21AC4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB21B0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_2()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _swift_stdlib_has_malloc_size_3()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_3(const void *a1)
{
  return malloc_size(a1);
}

void variable initialization expression of HearingRecord.deviceRemoteSendState(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

void key path getter for HearingRecord.deviceRemoteSendState : HearingRecord(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;
  char v5;
  _QWORD *v6;

  v3 = *a1;
  v2 = *a1;
  v6 = v3;
  (*(void (**)(char *__return_ptr, id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x88))(&v5, v2);
  *a2 = v5;

}

void key path setter for HearingRecord.deviceRemoteSendState : HearingRecord(char *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  char v4;
  char v5;
  _QWORD *v6;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  v6 = v3;
  v5 = v4;
  (*(void (**)(char *))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x90))(&v5);

}

uint64_t HearingRecord.deviceRemoteSendState.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  char *v3;
  char v5;

  v3 = (char *)(v1 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRemoteSendState);
  swift_beginAccess();
  v5 = *v3;
  result = swift_endAccess();
  *a1 = v5;
  return result;
}

uint64_t HearingRecord.deviceRemoteSendState.setter(char *a1)
{
  uint64_t v1;
  _BYTE *v3;
  char v4;

  v4 = *a1;
  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRemoteSendState);
  swift_beginAccess();
  *v3 = v4;
  return swift_endAccess();
}

uint64_t (*HearingRecord.deviceRemoteSendState.modify())()
{
  swift_beginAccess();
  return HearingRecord.deviceRemoteSendState.modify;
}

uint64_t HearingRecord.deviceRemoteSendState.modify()
{
  return swift_endAccess();
}

uint64_t HearingRecord.pmeVoiceEnabled.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _QWORD *KeyPath;
  unsigned int v5;
  unsigned __int8 v6;
  void *v7;

  v7 = v0;
  v1 = v0;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v3 = swift_getKeyPath();
  static HearingRecordConfig.subscript.getter((uint64_t)v0, KeyPath, v3, (uint64_t)&v6);
  v5 = v6;
  swift_release();
  swift_release();

  return v5;
}

uint64_t HearingRecord.pmeVoiceEnabled.setter(char a1)
{
  void *v1;
  id v2;
  _QWORD *v3;
  _QWORD *KeyPath;
  char v7;
  void *v8;
  char v9;

  v9 = a1;
  v8 = v1;
  v2 = v1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v3 = (_QWORD *)swift_getKeyPath();
  v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t)v1, KeyPath, v3);
}

void key path getter for HearingRecord.pmeVoiceEnabled : HearingRecord(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xA0))(v2);

}

void key path setter for HearingRecord.pmeVoiceEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xA8))(v4);

}

void (*HearingRecord.pmeVoiceEnabled.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v2;
  id v3;
  _QWORD *KeyPath;
  uint64_t v7;

  *a1 = v1;
  v2 = v1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = KeyPath;
  v7 = swift_getKeyPath();
  a1[2] = v7;
  v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter((uint64_t)v1, KeyPath, v7, (uint64_t)(a1 + 3));
  return HearingRecord.pmeVoiceEnabled.modify;
}

void HearingRecord.pmeVoiceEnabled.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;

  if ((a2 & 1) != 0)
  {
    v2 = *(_QWORD **)(a1 + 16);
    v3 = *(_QWORD **)(a1 + 8);
    v4 = *(id *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, (uint64_t)v4, v3, v2);
    swift_release();
    swift_release();

  }
  else
  {
    v5 = *(_QWORD **)(a1 + 16);
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(id *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, (uint64_t)v7, v6, v5);
    swift_release();
    swift_release();

  }
}

uint64_t variable initialization expression of HearingRecord._pmeVoiceEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for HearingRecord();
  v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t type metadata accessor for HearingRecord()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for HearingRecord;
  if (!type metadata singleton initialization cache for HearingRecord)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord;
  if (!lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord)
  {
    v0 = type metadata accessor for HearingRecord();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for HearingRecord, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord);
    return v1;
  }
  return v3;
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord;
  if (!lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord)
  {
    v0 = type metadata accessor for HearingRecord();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for HearingRecord, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type HearingRecord and conformance HearingRecord);
    return v1;
  }
  return v3;
}

uint64_t HearingRecord.$pmeVoiceEnabled.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.pmeMediaEnabled.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _QWORD *KeyPath;
  unsigned int v5;
  unsigned __int8 v6;
  void *v7;

  v7 = v0;
  v1 = v0;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v3 = swift_getKeyPath();
  static HearingRecordConfig.subscript.getter((uint64_t)v0, KeyPath, v3, (uint64_t)&v6);
  v5 = v6;
  swift_release();
  swift_release();

  return v5;
}

uint64_t HearingRecord.pmeMediaEnabled.setter(char a1)
{
  void *v1;
  id v2;
  _QWORD *v3;
  _QWORD *KeyPath;
  char v7;
  void *v8;
  char v9;

  v9 = a1;
  v8 = v1;
  v2 = v1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v3 = (_QWORD *)swift_getKeyPath();
  v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t)v1, KeyPath, v3);
}

void key path getter for HearingRecord.pmeMediaEnabled : HearingRecord(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xC0))(v2);

}

void key path setter for HearingRecord.pmeMediaEnabled : HearingRecord(unsigned __int8 *a1, id *a2)
{
  id v2;
  _QWORD *v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  (*(void (**)(_QWORD))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xC8))(v4);

}

void (*HearingRecord.pmeMediaEnabled.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  void *v1;
  id v2;
  id v3;
  _QWORD *KeyPath;
  uint64_t v7;

  *a1 = v1;
  v2 = v1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  a1[1] = KeyPath;
  v7 = swift_getKeyPath();
  a1[2] = v7;
  v3 = v1;
  swift_retain();
  swift_retain();
  static HearingRecordConfig.subscript.getter((uint64_t)v1, KeyPath, v7, (uint64_t)(a1 + 3));
  return HearingRecord.pmeMediaEnabled.modify;
}

void HearingRecord.pmeMediaEnabled.modify(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  id v7;

  if ((a2 & 1) != 0)
  {
    v2 = *(_QWORD **)(a1 + 16);
    v3 = *(_QWORD **)(a1 + 8);
    v4 = *(id *)a1;
    *(_BYTE *)(a1 + 25) = *(_BYTE *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 25, (uint64_t)v4, v3, v2);
    swift_release();
    swift_release();

  }
  else
  {
    v5 = *(_QWORD **)(a1 + 16);
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(id *)a1;
    *(_BYTE *)(a1 + 26) = *(_BYTE *)(a1 + 24);
    static HearingRecordConfig.subscript.setter(a1 + 26, (uint64_t)v7, v6, v5);
    swift_release();
    swift_release();

  }
}

uint64_t variable initialization expression of HearingRecord._pmeMediaEnabled@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for HearingRecord();
  v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$pmeMediaEnabled.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t HearingRecord.listeningModeOffAllowed.getter()
{
  void *v0;
  id v1;
  uint64_t v3;
  _QWORD *KeyPath;
  unsigned int v5;
  unsigned __int8 v6;
  void *v7;

  v7 = v0;
  v1 = v0;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v3 = swift_getKeyPath();
  static HearingRecordConfig.subscript.getter((uint64_t)v0, KeyPath, v3, (uint64_t)&v6);
  v5 = v6;
  swift_release();
  swift_release();

  return v5;
}

char *keypath_get_selector_listeningModeOffAllowed()
{
  return sel_listeningModeOffAllowed;
}

uint64_t HearingRecord.listeningModeOffAllowed.setter(char a1)
{
  void *v1;
  id v2;
  _QWORD *v3;
  _QWORD *KeyPath;
  char v7;
  void *v8;
  char v9;

  v9 = a1;
  v8 = v1;
  v2 = v1;
  KeyPath = (_QWORD *)swift_getKeyPath();
  v3 = (_QWORD *)swift_getKeyPath();
  v7 = a1;
  return static HearingRecordConfig.subscript.setter((uint64_t)&v7, (uint64_t)v1, KeyPath, v3);
}

void key path getter for HearingRecord.listeningModeOffAllowed : HearingRecord(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id v2;
  id v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = objc_msgSend(v3, sel_listeningModeOffAllowed);

}

void key path setter for HearingRecord.listeningModeOffAllowed : HearingRecord(char *a1, id *a2)
{
  id v2;
  id v3;
  unsigned int v4;

  v4 = *a1;
  v3 = *a2;
  v2 = *a2;
  objc_msgSend(v3, sel_setListeningModeOffAllowed_, v4);

}

uint64_t variable initialization expression of HearingRecord._listeningModeOffAllowed@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;

  KeyPath = swift_getKeyPath();
  v8 = 0;
  v4 = type metadata accessor for HearingRecord();
  v5 = type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v7);
  v6 = v7;
  return HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)&v8, (uint64_t)&v6, v4, v5, a1);
}

uint64_t HearingRecord.$listeningModeOffAllowed.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  swift_beginAccess();
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for HearingRecordConfig<HearingRecord, HMMultiState>);
  HearingRecordConfig.projectedValue.getter(v1, v2, a1);
  return swift_endAccess();
}

uint64_t property wrapper backing initializer of HearingRecord.bluetoothAddress@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v7[4];

  v7[2] = a1;
  v7[3] = a2;
  swift_bridgeObjectRetain();
  v7[0] = a1;
  v7[1] = a2;
  Published.init(wrappedValue:)((uint64_t)v7, MEMORY[0x24BEE0D00], a3);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.bluetoothAddress : HearingRecord(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v4 & *MEMORY[0x24BEE4EA0]) + 0xE8))(v2);
  a2[1] = v3;

}

void key path setter for HearingRecord.bluetoothAddress : HearingRecord(_QWORD *a1, id *a2)
{
  id v2;
  id v4;
  uint64_t v5;

  outlined init with copy of String(a1, &v5);
  v4 = *a2;
  v2 = *a2;
  HearingRecord.bluetoothAddress.setter();

}

uint64_t HearingRecord.bluetoothAddress.getter()
{
  void *v0;
  id v1;
  uint64_t v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.bluetoothAddress.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.bluetoothAddress.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HearingRecord.bluetoothAddress.modify;
}

void HearingRecord.bluetoothAddress.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._bluetoothAddress()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

void key path getter for HearingRecord.$bluetoothAddress : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x100))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HearingRecord.$bluetoothAddress : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (uint64_t)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  HearingRecord.$bluetoothAddress.setter(v10);

}

uint64_t HearingRecord.$bluetoothAddress.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HearingRecord.$bluetoothAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HearingRecord.$bluetoothAddress.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HearingRecord.$bluetoothAddress.getter();
  return HearingRecord.$bluetoothAddress.modify;
}

void HearingRecord.$bluetoothAddress.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$bluetoothAddress.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HearingRecord.$bluetoothAddress.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t property wrapper backing initializer of HearingRecord.bluetoothUUID@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD v7[4];

  v7[2] = a1;
  v7[3] = a2;
  swift_bridgeObjectRetain();
  v7[0] = a1;
  v7[1] = a2;
  Published.init(wrappedValue:)((uint64_t)v7, MEMORY[0x24BEE0D00], a3);
  return swift_bridgeObjectRelease();
}

void key path getter for HearingRecord.bluetoothUUID : HearingRecord(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v4 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x118))(v2);
  a2[1] = v3;

}

void key path setter for HearingRecord.bluetoothUUID : HearingRecord(_QWORD *a1, id *a2)
{
  id v2;
  id v4;
  uint64_t v5;

  outlined init with copy of String(a1, &v5);
  v4 = *a2;
  v2 = *a2;
  HearingRecord.bluetoothUUID.setter();

}

uint64_t HearingRecord.bluetoothUUID.getter()
{
  void *v0;
  id v1;
  uint64_t v3;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();

  return v3;
}

uint64_t HearingRecord.bluetoothUUID.setter()
{
  void *v0;
  id v1;

  v1 = v0;
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  static Published.subscript.setter();
  return swift_bridgeObjectRelease();
}

void (*HearingRecord.bluetoothUUID.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  id v1;
  id v4;
  _QWORD *v5;

  v5 = malloc(0x40uLL);
  *a1 = v5;
  v5[4] = v4;
  v1 = v4;
  v5[5] = swift_getKeyPath();
  v5[6] = swift_getKeyPath();
  v5[7] = static Published.subscript.modify();
  return HearingRecord.bluetoothUUID.modify;
}

void HearingRecord.bluetoothUUID.modify(uint64_t *a1, char a2)
{
  id v2;
  void *v3;
  uint64_t v4;

  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(id *)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  else
  {
    v3 = *(void **)(v4 + 32);
    (*(void (**)(uint64_t, _QWORD))(v4 + 56))(v4, 0);
    swift_release();
    swift_release();

  }
  free((void *)v4);
}

uint64_t variable initialization expression of HearingRecord._bluetoothUUID()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

void key path getter for HearingRecord.$bluetoothUUID : HearingRecord(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;

  v9 = a2;
  v5 = a1;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v8 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = (char *)&v4 - v6;
  v7 = *(_QWORD **)MEMORY[0x24BDAC7A8](v5, v2);
  v3 = v7;
  v13 = v7;
  v12 = v7;
  (*(void (**)(_QWORD *))((*v7 & *MEMORY[0x24BEE4EA0]) + 0x130))(v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v9, v10, v11);

}

void key path setter for HearingRecord.$bluetoothUUID : HearingRecord(uint64_t a1, id *a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  id *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;

  v6 = a1;
  v8 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v7 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v6);
  v10 = (uint64_t)&v5 - v7;
  (*(void (**)(void))(v3 + 16))();
  v9 = *v8;
  v4 = v9;
  v12 = v9;
  v11 = v9;
  HearingRecord.$bluetoothUUID.setter(v10);

}

uint64_t HearingRecord.$bluetoothUUID.getter()
{
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.getter();
  return swift_endAccess();
}

uint64_t HearingRecord.$bluetoothUUID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v10 = a1;
  v14 = 0;
  v13 = 0;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v9 = *(_QWORD *)(v11 - 8);
  v6 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v10);
  v7 = (char *)&v5 - v6;
  v14 = v2;
  v13 = v1;
  (*(void (**)(void))(v3 + 16))();
  v8 = &v12;
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
}

void (*HearingRecord.$bluetoothUUID.modify(_QWORD *a1))(_QWORD **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x28uLL);
  *a1 = v7;
  *v7 = v1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>.Publisher);
  v7[1] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v7[2] = v3;
  __size = *(_QWORD *)(v3 + 64);
  v7[3] = malloc(__size);
  v7[4] = malloc(__size);
  HearingRecord.$bluetoothUUID.getter();
  return HearingRecord.$bluetoothUUID.modify;
}

void HearingRecord.$bluetoothUUID.modify(_QWORD **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;

  v8 = *a1;
  if ((a2 & 1) != 0)
  {
    v4 = (void *)v8[4];
    v5 = (void *)v8[3];
    v2 = v8[2];
    v3 = v8[1];
    (*(void (**)(void))(v2 + 16))();
    HearingRecord.$bluetoothUUID.setter((uint64_t)v5);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v3);
    free(v4);
    free(v5);
  }
  else
  {
    v6 = (void *)v8[4];
    v7 = (void *)v8[3];
    HearingRecord.$bluetoothUUID.setter((uint64_t)v6);
    free(v6);
    free(v7);
  }
  free(v8);
}

uint64_t variable initialization expression of HearingRecord.deviceRecord()
{
  return 0;
}

void key path getter for HearingRecord.deviceRecord : HearingRecord(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x148))(v2);

}

void key path setter for HearingRecord.deviceRecord : HearingRecord(id *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of HMDeviceRecord?(a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x150))(v5);

}

id HearingRecord.deviceRecord.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRecord);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void HearingRecord.deviceRecord.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRecord);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*HearingRecord.deviceRecord.modify())()
{
  swift_beginAccess();
  return HearingRecord.deviceRecord.modify;
}

uint64_t HearingRecord.deviceRecord.modify()
{
  return swift_endAccess();
}

uint64_t HearingRecord.updateWithRecord(_:)(void *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  id v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  _BYTE **v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  uint32_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  NSObject *v92;
  int v93;
  id v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  id v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint32_t v112;
  _QWORD *v113;
  uint64_t v114;

  v100 = a1;
  v96 = MEMORY[0x24BEE6930];
  v114 = 0;
  v113 = 0;
  v97 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v98 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v3);
  v99 = (char *)&v54 - v98;
  v101 = type metadata accessor for Logger();
  v102 = *(_QWORD *)(v101 - 8);
  v103 = (*(_QWORD *)(v102 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v100, v4);
  v104 = (char *)&v54 - v103;
  v114 = v5;
  v113 = v1;
  v105 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x148))();
  if (v105)
  {
    v94 = v105;
    v6 = v104;

    v7 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 16))(v6, v7, v101);
    v8 = v100;
    v80 = 7;
    v81 = swift_allocObject();
    *(_QWORD *)(v81 + 16) = v100;
    v92 = Logger.logObject.getter();
    v93 = static os_log_type_t.default.getter();
    v73 = &v111;
    v111 = 22;
    v71 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v72 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v74 = v112;
    v77 = 17;
    v83 = swift_allocObject();
    v76 = 32;
    *(_BYTE *)(v83 + 16) = 32;
    v84 = swift_allocObject();
    v78 = 8;
    *(_BYTE *)(v84 + 16) = 8;
    v79 = 32;
    v9 = swift_allocObject();
    v75 = v9;
    *(_QWORD *)(v9 + 16) = implicit closure #1 in HearingRecord.updateWithRecord(_:);
    *(_QWORD *)(v9 + 24) = 0;
    v10 = swift_allocObject();
    v11 = v75;
    v85 = v10;
    *(_QWORD *)(v10 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_4;
    *(_QWORD *)(v10 + 24) = v11;
    v86 = swift_allocObject();
    *(_BYTE *)(v86 + 16) = v76;
    v87 = swift_allocObject();
    *(_BYTE *)(v87 + 16) = v78;
    v12 = swift_allocObject();
    v13 = v81;
    v82 = v12;
    *(_QWORD *)(v12 + 16) = partial apply for implicit closure #2 in HearingRecord.updateWithRecord(_:);
    *(_QWORD *)(v12 + 24) = v13;
    v14 = swift_allocObject();
    v15 = v82;
    v89 = v14;
    *(_QWORD *)(v14 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v14 + 24) = v15;
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v88 = _allocateUninitializedArray<A>(_:)();
    v90 = v16;
    swift_retain();
    v17 = v83;
    v18 = v90;
    *v90 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4;
    v18[1] = v17;
    swift_retain();
    v19 = v84;
    v20 = v90;
    v90[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v20[3] = v19;
    swift_retain();
    v21 = v85;
    v22 = v90;
    v90[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4;
    v22[5] = v21;
    swift_retain();
    v23 = v86;
    v24 = v90;
    v90[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v24[7] = v23;
    swift_retain();
    v25 = v87;
    v26 = v90;
    v90[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v26[9] = v25;
    swift_retain();
    v27 = v89;
    v28 = v90;
    v90[10] = closure #1 in OSLogArguments.append(_:)partial apply;
    v28[11] = v27;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v92, (os_log_type_t)v93))
    {
      v29 = v97;
      v63 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v64 = createStorage<A>(capacity:type:)(0);
      v65 = createStorage<A>(capacity:type:)(2);
      v67 = &v110;
      v110 = v63;
      v68 = &v109;
      v109 = v64;
      v69 = &v108;
      v108 = v65;
      v66 = 2;
      serialize(_:at:)(2, &v110);
      serialize(_:at:)(v66, v67);
      v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4;
      v107 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)v67, (uint64_t)v68, (uint64_t)v69);
      v70 = v29;
      if (v29)
      {
        __break(1u);
      }
      else
      {
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v107 = v84;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        v61 = 0;
        v30 = v61;
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4;
        v107 = v85;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        v60 = v30;
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v107 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        v59 = 0;
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v107 = v87;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        v58 = 0;
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v107 = v89;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        _os_log_impl(&dword_23DAB4000, v92, (os_log_type_t)v93, "HeadphoneManager: %s: value changed  update: %s", v63, v74);
        destroyStorage<A>(_:count:)(v64, 0, v62);
        destroyStorage<A>(_:count:)(v65, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v63, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
    v31 = v95;

    (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v101);
    v32 = v100;
    (*(void (**)(id))((*v31 & *MEMORY[0x24BEE4EA0]) + 0x150))(v100);
    v56 = 0;
    v33 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v99, 1);
    v34 = v95;
    v35 = v100;
    type metadata accessor for MainActor();
    v57 = static MainActor.shared.getter();
    v36 = swift_allocObject();
    v37 = v96;
    v38 = v95;
    v39 = v100;
    v40 = (_QWORD *)v36;
    v41 = (uint64_t)v99;
    v40[2] = v57;
    v40[3] = v37;
    v40[4] = v38;
    v40[5] = v39;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v41, (uint64_t)&async function pointer to partial apply for closure #2 in HearingRecord.updateWithRecord(_:), (uint64_t)v40, MEMORY[0x24BEE4AE0] + 8);
    return swift_release();
  }
  else
  {
    v43 = v95;
    v44 = v100;
    (*(void (**)(id))((*v43 & *MEMORY[0x24BEE4EA0]) + 0x150))(v100);
    v54 = 0;
    v45 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v99, 1);
    v46 = v95;
    v47 = v100;
    type metadata accessor for MainActor();
    v55 = static MainActor.shared.getter();
    v48 = swift_allocObject();
    v49 = v96;
    v50 = v95;
    v51 = v100;
    v52 = (_QWORD *)v48;
    v53 = (uint64_t)v99;
    v52[2] = v55;
    v52[3] = v49;
    v52[4] = v50;
    v52[5] = v51;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfC(v53, (uint64_t)&async function pointer to partial apply for closure #1 in HearingRecord.updateWithRecord(_:), (uint64_t)v52, MEMORY[0x24BEE4AE0] + 8);
    return swift_release();
  }
}

uint64_t closure #1 in HearingRecord.updateWithRecord(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[7] = a5;
  v5[6] = a4;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v6 = type metadata accessor for Logger();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[11] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #1 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *buf;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint32_t size;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  NSObject *v28;
  os_log_type_t v29;
  char v30;
  char v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;

  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 64);
  v16 = *(id *)(v0 + 56);
  *(_QWORD *)(v0 + 16) = v0;
  default argument 1 of HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(&v30);
  v31 = v30;
  HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(v16, (uint64_t)&v31);
  v1 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, v1, v15);
  v2 = v16;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = v16;
  v28 = Logger.logObject.getter();
  v29 = static os_log_type_t.default.getter();
  *(_QWORD *)(v0 + 40) = 22;
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  size = *(_DWORD *)(v0 + 96);
  v21 = swift_allocObject();
  *(_BYTE *)(v21 + 16) = 32;
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = 8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = implicit closure #1 in closure #1 in HearingRecord.updateWithRecord(_:);
  *(_QWORD *)(v18 + 24) = 0;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(_QWORD *)(v23 + 24) = v18;
  v24 = swift_allocObject();
  *(_BYTE *)(v24 + 16) = 32;
  v25 = swift_allocObject();
  *(_BYTE *)(v25 + 16) = 8;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = partial apply for implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:);
  *(_QWORD *)(v20 + 24) = v19;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(_QWORD *)(v26 + 24) = v20;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  _allocateUninitializedArray<A>(_:)();
  v27 = v3;
  swift_retain();
  *v27 = closure #1 in OSLogArguments.append(_:)partial apply;
  v27[1] = v21;
  swift_retain();
  v27[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v27[3] = v22;
  swift_retain();
  v27[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v27[5] = v23;
  swift_retain();
  v27[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v27[7] = v24;
  swift_retain();
  v27[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v27[9] = v25;
  swift_retain();
  v27[10] = closure #1 in OSLogArguments.append(_:)partial apply;
  v27[11] = v26;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v28, v29))
  {
    buf = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v10 = createStorage<A>(capacity:type:)(0);
    v11 = createStorage<A>(capacity:type:)(2);
    v32 = buf;
    v33 = v10;
    v34 = v11;
    serialize(_:at:)(2, &v32);
    serialize(_:at:)(2, &v32);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v36 = v21;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v36 = v22;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v36 = v23;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v36 = v24;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v36 = v25;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    v35 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v36 = v26;
    closure #1 in osLogInternal(_:log:type:)(&v35, (uint64_t)&v32, (uint64_t)&v33, (uint64_t)&v34);
    _os_log_impl(&dword_23DAB4000, v28, v29, "HeadphoneManager: %s: deviceRecord set: %s", buf, size);
    destroyStorage<A>(_:count:)(v10, 0, v8);
    destroyStorage<A>(_:count:)(v11, 2, MEMORY[0x24BEE4AD8] + 8);
    MEMORY[0x24263B020](buf, MEMORY[0x24BEE4260]);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v7 = v12[10];
  v5 = v12[9];
  v6 = v12[8];

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v6);
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v12[2] + 8))();
}

uint64_t sub_23DB2552C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HearingRecord.updateWithRecord(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #1 in HearingRecord.updateWithRecord(_:);
  return closure #1 in HearingRecord.updateWithRecord(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

void default argument 1 of HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t implicit closure #1 in closure #1 in HearingRecord.updateWithRecord(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithRecord(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:)(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t implicit closure #1 in HearingRecord.updateWithRecord(_:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updateWithRecord(_:)", 0x14uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in HearingRecord.updateWithRecord(_:)(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t sub_23DB257AC()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v0;

  return implicit closure #2 in HearingRecord.updateWithRecord(_:)(*(void **)(v0 + 16));
}

uint64_t closure #2 in HearingRecord.updateWithRecord(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a5;
  v5[5] = a4;
  v5[2] = v5;
  v5[3] = 0;
  v5[4] = 0;
  v5[3] = a4;
  v5[4] = a5;
  type metadata accessor for MainActor();
  v5[7] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t closure #2 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v0;
  void *v2;
  char v3;
  char v4;

  v2 = *(void **)(v0 + 48);
  *(_QWORD *)(v0 + 16) = v0;
  default argument 1 of HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(&v3);
  v4 = v3;
  HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(v2, (uint64_t)&v4);
  swift_release();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 8))();
}

uint64_t HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(void *a1, uint64_t a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;
  char *v9;
  signed __int8 v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  _BYTE **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  id v51;
  char *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint32_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  NSObject *v79;
  int v80;
  uint64_t (*v81)(uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint32_t v87;
  char v88;
  _QWORD *v89;
  char v90;
  uint64_t v91;

  v54 = a1;
  v48 = a2;
  v91 = 0;
  v90 = 0;
  v89 = 0;
  v47 = 0;
  v56 = type metadata accessor for Logger();
  v55 = *(_QWORD *)(v56 - 8);
  v49 = (*(_QWORD *)(v55 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v52 = (char *)v36 - v49;
  v91 = MEMORY[0x24BDAC7A8](v54, v48);
  v90 = *v3;
  v89 = v2;
  v88 = v90;
  v4 = *v2;
  v50 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(char *))((v4 & *MEMORY[0x24BEE4EA0]) + 0x90))(&v88);
  v5 = v57;
  v6 = objc_msgSend(v54, sel_pmeVoiceEnabled);
  (*(void (**)(id))((*v5 & *v50) + 0xA8))(v6);
  v7 = v57;
  v8 = objc_msgSend(v54, sel_pmeMediaEnabled);
  (*(void (**)(id))((*v7 & *v50) + 0xC8))(v8);
  v51 = objc_msgSend(v54, sel_bluetoothAddress);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  HearingRecord.bluetoothAddress.setter();

  v53 = objc_msgSend(v54, sel_bluetoothUUID);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  HearingRecord.bluetoothUUID.setter();
  v9 = v52;

  v10 = objc_msgSend(v54, sel_listeningModeOffAllowed);
  objc_msgSend(v57, sel_setListeningModeOffAllowed_, v10);
  v11 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v9, v11, v56);
  v12 = v57;
  v67 = 7;
  v68 = swift_allocObject();
  *(_QWORD *)(v68 + 16) = v57;
  v79 = Logger.logObject.getter();
  v80 = static os_log_type_t.default.getter();
  v60 = &v86;
  v86 = 22;
  v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v61 = v87;
  v64 = 17;
  v70 = swift_allocObject();
  v63 = 32;
  *(_BYTE *)(v70 + 16) = 32;
  v71 = swift_allocObject();
  v65 = 8;
  *(_BYTE *)(v71 + 16) = 8;
  v66 = 32;
  v13 = swift_allocObject();
  v62 = v13;
  *(_QWORD *)(v13 + 16) = implicit closure #1 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:);
  *(_QWORD *)(v13 + 24) = 0;
  v14 = swift_allocObject();
  v15 = v62;
  v72 = v14;
  *(_QWORD *)(v14 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(_QWORD *)(v14 + 24) = v15;
  v73 = swift_allocObject();
  *(_BYTE *)(v73 + 16) = v63;
  v74 = swift_allocObject();
  *(_BYTE *)(v74 + 16) = v65;
  v16 = swift_allocObject();
  v17 = v68;
  v69 = v16;
  *(_QWORD *)(v16 + 16) = partial apply for implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:);
  *(_QWORD *)(v16 + 24) = v17;
  v18 = swift_allocObject();
  v19 = v69;
  v76 = v18;
  *(_QWORD *)(v18 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
  *(_QWORD *)(v18 + 24) = v19;
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v75 = _allocateUninitializedArray<A>(_:)();
  v77 = v20;
  swift_retain();
  v21 = v70;
  v22 = v77;
  *v77 = closure #1 in OSLogArguments.append(_:)partial apply;
  v22[1] = v21;
  swift_retain();
  v23 = v71;
  v24 = v77;
  v77[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v24[3] = v23;
  swift_retain();
  v25 = v72;
  v26 = v77;
  v77[4] = closure #1 in OSLogArguments.append(_:)partial apply;
  v26[5] = v25;
  swift_retain();
  v27 = v73;
  v28 = v77;
  v77[6] = closure #1 in OSLogArguments.append(_:)partial apply;
  v28[7] = v27;
  swift_retain();
  v29 = v74;
  v30 = v77;
  v77[8] = closure #1 in OSLogArguments.append(_:)partial apply;
  v30[9] = v29;
  swift_retain();
  v31 = v76;
  v32 = v77;
  v77[10] = closure #1 in OSLogArguments.append(_:)partial apply;
  v32[11] = v31;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v79, (os_log_type_t)v80))
  {
    v33 = v47;
    v39 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v38 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v40 = createStorage<A>(capacity:type:)(0);
    v41 = createStorage<A>(capacity:type:)(2);
    v43 = &v85;
    v85 = v39;
    v44 = &v84;
    v84 = v40;
    v45 = &v83;
    v83 = v41;
    v42 = 2;
    serialize(_:at:)(2, &v85);
    serialize(_:at:)(v42, v43);
    v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
    v82 = v70;
    closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
    v46 = v33;
    if (v33)
    {
      __break(1u);
    }
    else
    {
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v82 = v71;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v37 = 0;
      v34 = v37;
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v82 = v72;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v36[2] = v34;
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v82 = v73;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v36[1] = 0;
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v82 = v74;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      v36[0] = 0;
      v81 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v82 = v76;
      closure #1 in osLogInternal(_:log:type:)(&v81, (uint64_t)&v85, (uint64_t)&v84, (uint64_t)&v83);
      _os_log_impl(&dword_23DAB4000, v79, (os_log_type_t)v80, "HeadphoneManager: %s: updated VM set: %s", v39, v61);
      destroyStorage<A>(_:count:)(v40, 0, v38);
      destroyStorage<A>(_:count:)(v41, 2, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v39, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v55 + 8))(v52, v56);
  return $defer #1 () in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(v57);
}

uint64_t $defer #1 () in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(_QWORD *a1)
{
  char v2;
  _QWORD *v3;

  v3 = a1;
  v2 = 0;
  return (*(uint64_t (**)(char *))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x90))(&v2);
}

uint64_t implicit closure #1 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("updatePropertiesFor(updateRecord:remoteSendState:)", 0x32uLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_debugDescription);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

uint64_t HearingRecord.debugDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" bluetoothAddress: ", 0x13uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  v2 = swift_bridgeObjectRelease();
  v22 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((*v21 & *MEMORY[0x24BEE4EA0]) + 0xE8))(v2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v4 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v0._countAndFlagsBits, v0._object, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v5 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" bluetoothUUID: ", 0x10uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  v7 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v21 & *v22) + 0x118))(v7);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  outlined destroy of String();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v9 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v5._countAndFlagsBits, v5._object, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" pmeVoiceEnabled: ", 0x12uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  v12 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v21 & *v22) + 0xA0))(v12);
  type metadata accessor for HMMultiState();
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v13 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v14 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v10._countAndFlagsBits, v10._object, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  v15 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" pmeMediaEnabled: ", 0x12uLL, 1);
  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v16 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v16);
  v17 = swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))((*v21 & *v22) + 0xC0))(v17);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v18 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v19 = String.init(stringInterpolation:)();
  MEMORY[0x24263AE04](v15._countAndFlagsBits, v15._object, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  static String.+= infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of String();
  return countAndFlagsBits;
}

id HearingRecord.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id HearingRecord.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  id v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  Builtin::Word v36;
  char *v37;
  objc_class *v38;
  id v39;
  objc_super v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  id v50;

  v50 = 0;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String>);
  v28 = *(_QWORD *)(v34 - 8);
  v14 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v34, v1);
  v33 = (uint64_t)&v14 - v14;
  v2 = v0;
  v3 = v0;
  v4 = v0;
  v5 = v0;
  v6 = v0;
  v7 = v0;
  v8 = v0;
  v50 = v0;
  v0[OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRemoteSendState] = 0;

  v15 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__pmeVoiceEnabled;
  KeyPath = swift_getKeyPath();
  v17 = &v49;
  v49 = 0;
  v36 = 0;
  v38 = (objc_class *)type metadata accessor for HearingRecord();
  v24 = type metadata accessor for HMMultiState();
  v25 = lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  v26 = lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  v27 = lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v48);
  v47 = v48;
  HearingRecordConfig.init(_:_:_:)(KeyPath, (uint64_t)v17, (uint64_t)&v47, (uint64_t)v38, v24, (uint64_t)&v0[v15]);

  v18 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__pmeMediaEnabled;
  v19 = swift_getKeyPath();
  v20 = &v46;
  v46 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v45);
  v44 = v45;
  HearingRecordConfig.init(_:_:_:)(v19, (uint64_t)v20, (uint64_t)&v44, (uint64_t)v38, v24, (uint64_t)&v0[v18]);

  v21 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__listeningModeOffAllowed;
  v22 = swift_getKeyPath();
  v23 = &v43;
  v43 = 0;
  default argument 2 of HearingRecordConfig.init(_:_:_:)(&v42);
  v41 = v42;
  HearingRecordConfig.init(_:_:_:)(v22, (uint64_t)v23, (uint64_t)&v41, (uint64_t)v38, v24, (uint64_t)&v0[v21]);

  v29 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__bluetoothAddress;
  v30 = "";
  v31 = 1;
  v9 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v36, 1);
  property wrapper backing initializer of HearingRecord.bluetoothAddress(v9._countAndFlagsBits, (uint64_t)v9._object, v33);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
  v35(&v0[v29], v33, v34);

  v32 = OBJC_IVAR____TtC16HeadphoneManager13HearingRecord__bluetoothUUID;
  v10 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v30, v36, v31 & 1);
  property wrapper backing initializer of HearingRecord.bluetoothUUID(v10._countAndFlagsBits, (uint64_t)v10._object, v33);
  v35(&v0[v32], v33, v34);

  v11 = v37;
  *(_QWORD *)&v37[OBJC_IVAR____TtC16HeadphoneManager13HearingRecord_deviceRecord] = v36;

  v40.receiver = v50;
  v40.super_class = v38;
  v39 = objc_msgSendSuper2(&v40, sel_init);
  v12 = v39;
  v50 = v39;

  return v39;
}

id HearingRecord.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HearingRecord();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance HearingRecord@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for HearingRecord();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for HMDeviceConfigurable.deviceRemoteSendState.getter in conformance HearingRecord()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x88))();
}

uint64_t protocol witness for HMDeviceConfigurable.bluetoothUUID.getter in conformance HearingRecord()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x118))();
}

id protocol witness for HMDeviceConfigurable.deviceConfigFor<A>(keyPath:value:) in conformance HearingRecord(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return HearingRecord.deviceConfigFor<A>(keyPath:value:)(a1, a2, a3);
}

uint64_t variable initialization expression of HearingRecordModel.bluetoothAddress()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t key path getter for HearingRecordModel.bluetoothAddress : HearingRecordModel@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.bluetoothAddress : HearingRecordModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(v4, v6);
  return swift_release();
}

uint64_t HearingRecordModel.bluetoothAddress.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.bluetoothAddress.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.bluetoothAddress.modify())()
{
  swift_beginAccess();
  return HearingRecordModel.bluetoothAddress.modify;
}

uint64_t HearingRecordModel.bluetoothAddress.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.bluetoothUUID()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t key path getter for HearingRecordModel.bluetoothUUID : HearingRecordModel@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v5 = *a1;
  v2 = swift_retain();
  *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 144))(v2);
  a2[1] = v3;
  return swift_release();
}

uint64_t key path setter for HearingRecordModel.bluetoothUUID : HearingRecordModel(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  outlined init with copy of String(a1, v7);
  v4 = v7[0];
  v6 = v7[1];
  v5 = *a2;
  swift_retain();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 152))(v4, v6);
  return swift_release();
}

uint64_t HearingRecordModel.bluetoothUUID.getter()
{
  uint64_t v0;
  uint64_t v2;

  swift_beginAccess();
  v2 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.bluetoothUUID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HearingRecordModel.bluetoothUUID.modify())()
{
  swift_beginAccess();
  return HearingRecordModel.bluetoothUUID.modify;
}

uint64_t HearingRecordModel.bluetoothUUID.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.pmeVoiceEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.pmeVoiceEnabled.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 48);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.pmeVoiceEnabled.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 48) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.pmeVoiceEnabled.modify())()
{
  swift_beginAccess();
  return HearingRecordModel.pmeVoiceEnabled.modify;
}

uint64_t HearingRecordModel.pmeVoiceEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.pmeMediaEnabled()
{
  return 0;
}

uint64_t HearingRecordModel.pmeMediaEnabled.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 49);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.pmeMediaEnabled.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 49) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.pmeMediaEnabled.modify())()
{
  swift_beginAccess();
  return HearingRecordModel.pmeMediaEnabled.modify;
}

uint64_t HearingRecordModel.pmeMediaEnabled.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HearingRecordModel.listeningModeOffAllowed()
{
  return 0;
}

uint64_t HearingRecordModel.listeningModeOffAllowed.getter()
{
  uint64_t v0;
  unsigned int v2;

  swift_beginAccess();
  v2 = *(unsigned __int8 *)(v0 + 50);
  swift_endAccess();
  return v2;
}

uint64_t HearingRecordModel.listeningModeOffAllowed.setter(char a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_BYTE *)(v1 + 50) = a1;
  return swift_endAccess();
}

uint64_t (*HearingRecordModel.listeningModeOffAllowed.modify())()
{
  swift_beginAccess();
  return HearingRecordModel.listeningModeOffAllowed.modify;
}

uint64_t HearingRecordModel.listeningModeOffAllowed.modify()
{
  return swift_endAccess();
}

uint64_t static HearingRecordModel.debugStringForModifyPath(keyPath:)()
{
  char v2;
  char v3;
  char v5;

  swift_retain();
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<HearingRecordModel>);
  v5 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  if ((v5 & 1) != 0)
  {
    swift_release();
    return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pmeVoiceEnabled", 0xFuLL, 1)._countAndFlagsBits;
  }
  else
  {
    swift_release();
    swift_retain();
    swift_getKeyPath();
    v3 = dispatch thunk of static Equatable.== infix(_:_:)();
    swift_release();
    if ((v3 & 1) != 0)
    {
      swift_release();
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("pmeMediaEnabled", 0xFuLL, 1)._countAndFlagsBits;
    }
    else
    {
      swift_release();
      swift_retain();
      swift_getKeyPath();
      v2 = dispatch thunk of static Equatable.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v2 & 1) != 0)
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("listeningModeOffAllowed:", 0x18uLL, 1)._countAndFlagsBits;
      else
        return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("UNKNOWN", 7uLL, 1)._countAndFlagsBits;
    }
  }
}

uint64_t HearingRecordModel.deinit()
{
  uint64_t v1;

  outlined destroy of String();
  outlined destroy of String();
  return v1;
}

uint64_t HearingRecordModel.__deallocating_deinit()
{
  HearingRecordModel.deinit();
  return swift_deallocClassInstance();
}

uint64_t HearingRecordModel.__allocating_init()()
{
  swift_allocObject();
  return HearingRecordModel.init()();
}

uint64_t HearingRecordModel.init()()
{
  Swift::String *v0;
  Swift::String v1;
  uint64_t result;
  uint64_t v3;

  v0[1] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  result = v3;
  *(Swift::String *)(v3 + 32) = v1;
  *(_BYTE *)(v3 + 48) = 0;
  *(_BYTE *)(v3 + 49) = 0;
  *(_BYTE *)(v3 + 50) = 0;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance HMMultiState()
{
  lazy protocol witness table accessor for type HMMultiState and conformance HMMultiState();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance HMMultiState@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = HMMultiState.init(rawValue:)(*a1);
  *a2 = result;
  a2[1] = BYTE1(result) & 1;
  return result;
}

uint64_t HMMultiState.init(rawValue:)(uint64_t result)
{
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance HMMultiState@<X0>(_BYTE *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;

  result = HMMultiState.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t HMMultiState.rawValue.getter(uint64_t result)
{
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTQ0__0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23DB27D1C()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB27D4C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB27D7C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_4()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB27DC4()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_4(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB27E0C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB27E3C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB27E6C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB27EB4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB27EFC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in HearingRecord.updateWithRecord(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = partial apply for closure #2 in HearingRecord.updateWithRecord(_:);
  return closure #2 in HearingRecord.updateWithRecord(_:)(a1, v5, v6, v7, v8);
}

uint64_t partial apply for closure #2 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23DB2804C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)()
{
  uint64_t v0;

  return implicit closure #2 in HearingRecord.updatePropertiesFor(updateRecord:remoteSendState:)(*(void **)(v0 + 16));
}

uint64_t sub_23DB28090()
{
  return swift_deallocObject();
}

uint64_t sub_23DB280C0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB280F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB28138()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB28180()
{
  return swift_deallocObject();
}

uint64_t sub_23DB281B0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB281E0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB28228()
{
  swift_release();
  return swift_deallocObject();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HearingRecordConfig<HearingRecord, HMMultiState>()
{
  swift_release();
  swift_release();
  swift_release();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HMDeviceRecord?(id *a1)
{

}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in HearingRecord()
{
  return MEMORY[0x24BDB9D70];
}

unint64_t instantiation function for generic protocol witness table for HearingRecord(uint64_t a1)
{
  unint64_t result;

  result = lazy protocol witness table accessor for type HearingRecord and conformance HearingRecord();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t ObjC metadata update function for HearingRecord()
{
  return type metadata accessor for HearingRecord();
}

uint64_t type metadata completion function for HearingRecord()
{
  unint64_t v0;
  uint64_t updated;

  updated = type metadata accessor for Published<String>();
  if (v0 <= 0x3F)
  {
    updated = swift_updateClassMetadata2();
    if (!updated)
      return 0;
  }
  return updated;
}

uint64_t method lookup function for HearingRecord()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HearingRecord.deviceRemoteSendState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x88))();
}

uint64_t dispatch thunk of HearingRecord.deviceRemoteSendState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x90))();
}

uint64_t dispatch thunk of HearingRecord.deviceRemoteSendState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x98))();
}

uint64_t dispatch thunk of HearingRecord.pmeVoiceEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA0))();
}

uint64_t dispatch thunk of HearingRecord.pmeVoiceEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xA8))();
}

uint64_t dispatch thunk of HearingRecord.pmeVoiceEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB0))();
}

uint64_t dispatch thunk of HearingRecord.$pmeVoiceEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xB8))();
}

uint64_t dispatch thunk of HearingRecord.pmeMediaEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xC0))();
}

uint64_t dispatch thunk of HearingRecord.pmeMediaEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xC8))();
}

uint64_t dispatch thunk of HearingRecord.pmeMediaEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xD0))();
}

uint64_t dispatch thunk of HearingRecord.$pmeMediaEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xD8))();
}

uint64_t dispatch thunk of HearingRecord.$listeningModeOffAllowed.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xE0))();
}

uint64_t dispatch thunk of HearingRecord.bluetoothAddress.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xE8))();
}

uint64_t dispatch thunk of HearingRecord.$bluetoothAddress.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x100))();
}

uint64_t dispatch thunk of HearingRecord.bluetoothUUID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x118))();
}

uint64_t dispatch thunk of HearingRecord.$bluetoothUUID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x130))();
}

uint64_t dispatch thunk of HearingRecord.deviceRecord.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x148))();
}

uint64_t dispatch thunk of HearingRecord.deviceRecord.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x150))();
}

uint64_t dispatch thunk of HearingRecord.deviceRecord.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x158))();
}

uint64_t dispatch thunk of HearingRecord.updateWithRecord(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x160))();
}

uint64_t type metadata accessor for HearingRecordModel()
{
  return objc_opt_self();
}

uint64_t method lookup function for HearingRecordModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothAddress.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothAddress.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothAddress.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothUUID.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothUUID.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of HearingRecordModel.bluetoothUUID.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeVoiceEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeVoiceEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeVoiceEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeMediaEnabled.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeMediaEnabled.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of HearingRecordModel.pmeMediaEnabled.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of HearingRecordModel.listeningModeOffAllowed.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of HearingRecordModel.listeningModeOffAllowed.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of HearingRecordModel.listeningModeOffAllowed.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

_QWORD *outlined init with copy of HMDeviceRecord?(id *a1, _QWORD *a2)
{
  id v2;
  _QWORD *result;
  id v4;

  v4 = *a1;
  v2 = *a1;
  result = a2;
  *a2 = v4;
  return result;
}

uint64_t _swift_stdlib_has_malloc_size_4()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_4(const void *a1)
{
  return malloc_size(a1);
}

uint64_t sub_23DB28AD0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTA_0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int *v5;

  *(_QWORD *)(v2 + 16) = v2;
  v5 = *(int **)(v1 + 24);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 24) = v3;
  *v3 = *(_QWORD *)(v2 + 16);
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0__0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTu))(a1, v5);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRTATQ0__0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  *(_QWORD *)(*v0 + 16) = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 16) + 8))();
}

uint64_t sub_23DB28C28()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in HearingRecord.updateWithRecord(_:)(*(void **)(v0 + 16));
}

uint64_t sub_23DB28C6C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB28C9C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB28CCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB28D14()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB28D5C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB28D8C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB28DBC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB28E04()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t one-time initialization function for subsystem()
{
  uint64_t result;
  Swift::String v1;

  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.headphonemanager", 0x1AuLL, 1);
  result = v1._countAndFlagsBits;
  static Logger.subsystem = (__int128)v1;
  return result;
}

__int128 *Logger.subsystem.unsafeMutableAddressor()
{
  if (one-time initialization token for subsystem != -1)
    swift_once();
  return &static Logger.subsystem;
}

uint64_t static Logger.subsystem.getter()
{
  __int128 *v1;
  uint64_t v2;

  v1 = Logger.subsystem.unsafeMutableAddressor();
  swift_beginAccess();
  v2 = *(_QWORD *)v1;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v2;
}

uint64_t static Logger.subsystem.setter(uint64_t a1, uint64_t a2)
{
  __int128 *v4;

  v4 = Logger.subsystem.unsafeMutableAddressor();
  swift_bridgeObjectRetain();
  swift_beginAccess();
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*static Logger.subsystem.modify())()
{
  Logger.subsystem.unsafeMutableAddressor();
  swift_beginAccess();
  return static Logger.subsystem.modify;
}

uint64_t static Logger.subsystem.modify()
{
  return swift_endAccess();
}

uint64_t one-time initialization function for shared()
{
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v1, static Logger.shared);
  __swift_project_value_buffer(v1, (uint64_t)static Logger.shared);
  Logger.subsystem.unsafeMutableAddressor();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_endAccess();
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("general", 7uLL, 1);
  return Logger.init(subsystem:category:)();
}

uint64_t __swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v5;

  v5 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v2 = swift_slowAlloc();
    *a2 = v2;
    return v2;
  }
  return (uint64_t)v5;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = a2;
  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
    return *(_QWORD *)a2;
  return v3;
}

uint64_t Logger.shared.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for shared != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.shared);
}

uint64_t static Logger.shared.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.shared.unsafeMutableAddressor();
  v1 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

const char *HeadphoneFeatures.domain.getter()
{
  return "HeadphoneFeatures";
}

const char *HeadphoneFeatures.feature.getter(char a1)
{
  if (!a1)
    return "BetterDeviceManagement";
  if (a1 == 1)
    return "BatteryStatus";
  return "HeadphoneInfrastructureReDesign";
}

BOOL static HeadphoneFeatures.== infix(_:_:)(char a1, char a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    if (a1 == 1)
      v4 = 1;
    else
      v4 = 2;
  }
  else
  {
    v4 = 0;
  }
  if (a2)
  {
    if (a2 == 1)
      v3 = 1;
    else
      v3 = 2;
  }
  else
  {
    v3 = 0;
  }
  return v4 == v3;
}

uint64_t HeadphoneFeatures.hash(into:)()
{
  return Hasher.combine<A>(_:)();
}

uint64_t HeadphoneFeatures.hashValue.getter()
{
  lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures();
  return _hashValue<A>(for:)();
}

unint64_t lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneFeatures, &type metadata for HeadphoneFeatures);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneFeatures, &type metadata for HeadphoneFeatures);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures;
  if (!lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphoneFeatures, &type metadata for HeadphoneFeatures);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type HeadphoneFeatures and conformance HeadphoneFeatures);
    return v0;
  }
  return v2;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance HeadphoneFeatures(char *a1, char *a2)
{
  return static HeadphoneFeatures.== infix(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance HeadphoneFeatures(Swift::Int a1)
{
  return Hashable._rawHashValue(seed:)(a1);
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance HeadphoneFeatures()
{
  return HeadphoneFeatures.domain.getter();
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance HeadphoneFeatures()
{
  char *v0;

  return HeadphoneFeatures.feature.getter(*v0);
}

id one-time initialization function for shared()
{
  id result;

  type metadata accessor for Headphone_Manager();
  result = Headphone_Manager.__allocating_init()();
  static Headphone_Manager.shared = (uint64_t)result;
  return result;
}

{
  id result;

  type metadata accessor for HeadphoneDataProvider();
  result = HeadphoneDataProvider.__allocating_init()();
  static HeadphoneDataProvider.shared = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for Headphone_Manager()
{
  return objc_opt_self();
}

id Headphone_Manager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t *Headphone_Manager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static Headphone_Manager.shared;
}

void *static Headphone_Manager.shared.getter()
{
  id v0;
  void *v2;

  v2 = (void *)*Headphone_Manager.shared.unsafeMutableAddressor();
  v0 = v2;
  return v2;
}

uint64_t variable initialization expression of Headphone_Manager.dispatchQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v0);
  v11 = (uint64_t)&v4 - v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12, v1);
  v10 = (char *)&v4 - v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for DispatchQoS() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v12, v2);
  v9 = (char *)&v4 - v7;
  type metadata accessor for OS_dispatch_queue();
  v8 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneManager", 0x1AuLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v11);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  specialized static Array._allocateUninitialized(_:)(0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  unsigned int v3;

  v3 = *MEMORY[0x24BEE5750];
  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 8) + 104))(a1, v3);
}

void *Headphone_Manager.dispatchQueue.getter()
{
  uint64_t v0;
  id v1;
  void *v3;

  v3 = *(void **)(v0 + OBJC_IVAR___HPMHeadphoneManager_dispatchQueue);
  v1 = v3;
  return v3;
}

uint64_t variable initialization expression of Headphone_Manager._topLevelUIHandler()
{
  return 0;
}

uint64_t Headphone_Manager._topLevelUIHandler.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = v0 + OBJC_IVAR___HPMHeadphoneManager__topLevelUIHandler;
  swift_beginAccess();
  v3 = MEMORY[0x24263B794](v2);
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager._topLevelUIHandler.setter()
{
  swift_unknownObjectRetain();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void (*Headphone_Manager._topLevelUIHandler.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = v1;
  v2 = OBJC_IVAR___HPMHeadphoneManager__topLevelUIHandler;
  v6[5] = OBJC_IVAR___HPMHeadphoneManager__topLevelUIHandler;
  v5 = v1 + v2;
  swift_beginAccess();
  v6[3] = MEMORY[0x24263B794](v5);
  return Headphone_Manager._topLevelUIHandler.modify;
}

void Headphone_Manager._topLevelUIHandler.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v2);
}

uint64_t Headphone_Manager.topLevelUIHandler.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t *v18;
  _BYTE **v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint32_t v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  _BOOL4 v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint32_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = 0;
  v32 = 0;
  v33 = type metadata accessor for Logger();
  v34 = *(_QWORD *)(v33 - 8);
  v35 = (*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v33, v1);
  v36 = (char *)&v10 - v35;
  v44 = v0;
  v43 = Headphone_Manager._topLevelUIHandler.getter();
  v31 = v43 == 0;
  v30 = v31;
  outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  if (v30)
  {
    v2 = v36;
    v3 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v2, v3, v33);
    v28 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    v25 = &v41;
    v41 = 2;
    v23 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v24 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v26 = v42;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v29 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v28, (os_log_type_t)v27))
    {
      v4 = v32;
      v13 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v12 = 0;
      v14 = createStorage<A>(capacity:type:)(0);
      v15 = createStorage<A>(capacity:type:)(v12);
      v19 = &v40;
      v40 = v13;
      v20 = &v39;
      v39 = v14;
      v17 = &v38;
      v38 = v15;
      v16 = 0;
      serialize(_:at:)(0, &v40);
      serialize(_:at:)(v16, v19);
      v37 = v29;
      v18 = &v10;
      MEMORY[0x24BDAC7A8](&v10, v5);
      v6 = v20;
      v7 = &v10 - 6;
      v21 = &v10 - 6;
      v7[2] = (uint64_t)v19;
      v7[3] = (uint64_t)v6;
      v7[4] = v8;
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v4)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_23DAB4000, v28, (os_log_type_t)v27, "HeadphoneManager: deviceDiscoveryHandler unset", v13, v26);
        v10 = 0;
        destroyStorage<A>(_:count:)(v14, 0, v11);
        destroyStorage<A>(_:count:)(v15, v10, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v13, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v33);
  }
  return Headphone_Manager._topLevelUIHandler.getter();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?()
{
  swift_unknownObjectRelease();
}

uint64_t Headphone_Manager.topLevelUIHandler.setter()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  id *v4;
  id v5;

  swift_unknownObjectRetain();
  Headphone_Manager._topLevelUIHandler.setter();
  v4 = (id *)HeadphoneDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  v0 = *v4;
  v5 = *v4;
  v1 = *v4;
  v2 = swift_endAccess();
  (*(void (**)(uint64_t))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x158))(v2);

  return swift_unknownObjectRelease();
}

void key path getter for Headphone_Manager.topLevelUIHandler : Headphone_Manager(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0xC0))(v2);

}

void key path setter for Headphone_Manager.topLevelUIHandler : Headphone_Manager(uint64_t *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of HeadphoneMangerTopLevelEntryUIHandling?(a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0xC8))(v5);

}

uint64_t (*Headphone_Manager.topLevelUIHandler.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = Headphone_Manager.topLevelUIHandler.getter();
  return Headphone_Manager.topLevelUIHandler.modify;
}

uint64_t Headphone_Manager.topLevelUIHandler.modify(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return Headphone_Manager.topLevelUIHandler.setter();
  swift_unknownObjectRetain();
  Headphone_Manager.topLevelUIHandler.setter();
  result = a1;
  outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  return result;
}

id variable initialization expression of Headphone_Manager.cbDiscovery()
{
  type metadata accessor for CBDiscovery();
  return CBDiscovery.__allocating_init()();
}

id CBDiscovery.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBDiscovery.init()();
}

id Headphone_Manager.cbDiscovery.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_cbDiscovery);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.cbDiscovery.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_cbDiscovery);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.cbDiscovery.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.cbDiscovery.modify;
}

uint64_t Headphone_Manager.cbDiscovery.modify()
{
  return swift_endAccess();
}

id variable initialization expression of Headphone_Manager.controller()
{
  type metadata accessor for CBController();
  return CBController.__allocating_init()();
}

id CBController.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBController.init()();
}

id Headphone_Manager.controller.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_controller);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.controller.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_controller);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.controller.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.controller.modify;
}

uint64_t Headphone_Manager.controller.modify()
{
  return swift_endAccess();
}

id variable initialization expression of Headphone_Manager.connection()
{
  type metadata accessor for CBConnection();
  return CBConnection.__allocating_init()();
}

id CBConnection.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc CBConnection.init()();
}

id Headphone_Manager.connection.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_connection);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.connection.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_connection);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.connection.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.connection.modify;
}

uint64_t Headphone_Manager.connection.modify()
{
  return swift_endAccess();
}

id variable initialization expression of Headphone_Manager.deviceManger()
{
  type metadata accessor for AADeviceManager();
  return AADeviceManager.__allocating_init()();
}

id AADeviceManager.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return @nonobjc AADeviceManager.init()();
}

id Headphone_Manager.deviceManger.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager_deviceManger);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void Headphone_Manager.deviceManger.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager_deviceManger);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*Headphone_Manager.deviceManger.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.deviceManger.modify;
}

uint64_t Headphone_Manager.deviceManger.modify()
{
  return swift_endAccess();
}

void key path getter for Headphone_Manager.hmsClient : Headphone_Manager(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x138))(v2);

}

void key path setter for Headphone_Manager.hmsClient : Headphone_Manager(id *a1, id *a2)
{
  id v2;
  id v3;
  id v4;
  _QWORD *v6;

  v4 = *a1;
  v2 = *a1;
  v6 = *a2;
  v3 = *a2;
  (*(void (**)(id))((*v6 & *MEMORY[0x24BEE4EA0]) + 0x140))(v4);

}

id Headphone_Manager.hmsClient.getter()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;
  void **v5;
  id v6;
  uint64_t v8;
  id *v9;
  id v10;

  v9 = (id *)(v0 + OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient);
  swift_beginAccess();
  v10 = *v9;
  v1 = *v9;
  swift_endAccess();
  if (v10)
    return v10;
  type metadata accessor for HMServiceClient();
  v6 = HMServiceClient.__allocating_init()();
  v2 = v6;
  v5 = (void **)(v8 + OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient);
  swift_beginAccess();
  v3 = *v5;
  *v5 = v6;

  swift_endAccess();
  return v6;
}

void Headphone_Manager.hmsClient.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

void (*Headphone_Manager.hmsClient.modify(id *a1))(id *a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = Headphone_Manager.hmsClient.getter();
  return Headphone_Manager.hmsClient.modify;
}

void Headphone_Manager.hmsClient.modify(id *a1, char a2)
{
  id v2;
  id v3;

  if ((a2 & 1) != 0)
  {
    v3 = *a1;
    v2 = *a1;
    Headphone_Manager.hmsClient.setter(v3);

  }
  else
  {
    Headphone_Manager.hmsClient.setter(*a1);
  }
}

uint64_t variable initialization expression of Headphone_Manager.$__lazy_storage_$_hmsClient()
{
  return 0;
}

uint64_t variable initialization expression of Headphone_Manager.connectedRecords()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HMDeviceRecord));
  _allocateUninitializedArray<A>(_:)();
  type metadata accessor for HMDeviceRecord();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Headphone_Manager.connectedRecords.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneManager_connectedRecords);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.connectedRecords.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR___HPMHeadphoneManager_connectedRecords);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for Headphone_Manager.connectedRecords : Headphone_Manager(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x150))(v2);

}

void key path setter for Headphone_Manager.connectedRecords : Headphone_Manager(uint64_t *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [String : HMDeviceRecord](a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x158))(v5);

}

uint64_t (*Headphone_Manager.connectedRecords.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.connectedRecords.modify;
}

uint64_t Headphone_Manager.connectedRecords.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of Headphone_Manager.deviceConnectionListener()
{
  return 0;
}

uint64_t Headphone_Manager.deviceConnectionListener.getter()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  v2 = v0 + OBJC_IVAR___HPMHeadphoneManager_deviceConnectionListener;
  swift_beginAccess();
  v3 = MEMORY[0x24263B794](v2);
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.deviceConnectionListener.setter()
{
  swift_unknownObjectRetain();
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  swift_endAccess();
  return swift_unknownObjectRelease();
}

void key path getter for Headphone_Manager.deviceConnectionListener : Headphone_Manager(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x168))(v2);

}

void key path setter for Headphone_Manager.deviceConnectionListener : Headphone_Manager(uint64_t *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of CBDeviceReporting?(a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x170))(v5);

}

void (*Headphone_Manager.deviceConnectionListener.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = v1;
  v2 = OBJC_IVAR___HPMHeadphoneManager_deviceConnectionListener;
  v6[5] = OBJC_IVAR___HPMHeadphoneManager_deviceConnectionListener;
  v5 = v1 + v2;
  swift_beginAccess();
  v6[3] = MEMORY[0x24263B794](v5);
  return Headphone_Manager.deviceConnectionListener.modify;
}

void Headphone_Manager.deviceConnectionListener.modify(void **a1, char a2)
{
  void *v2;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
    outlined destroy of CBDeviceReporting?();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_unknownObjectRelease();
  }
  swift_endAccess();
  free(v2);
}

uint64_t variable initialization expression of Headphone_Manager.connectedHeadphones()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
  _allocateUninitializedArray<A>(_:)();
  type metadata accessor for HeadphoneDevice();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Headphone_Manager.connectedHeadphones.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneManager_connectedHeadphones);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.connectedHeadphones.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR___HPMHeadphoneManager_connectedHeadphones);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for Headphone_Manager.connectedHeadphones : Headphone_Manager(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x180))(v2);

}

void key path setter for Headphone_Manager.connectedHeadphones : Headphone_Manager(uint64_t *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [String : HeadphoneDevice](a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x188))(v5);

}

uint64_t (*Headphone_Manager.connectedHeadphones.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.connectedHeadphones.modify;
}

uint64_t Headphone_Manager.connectedHeadphones.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of Headphone_Manager.pendingConnectedHeadphones()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
  _allocateUninitializedArray<A>(_:)();
  type metadata accessor for HeadphoneDevice();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t Headphone_Manager.pendingConnectedHeadphones.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR___HPMHeadphoneManager_pendingConnectedHeadphones);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t Headphone_Manager.pendingConnectedHeadphones.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR___HPMHeadphoneManager_pendingConnectedHeadphones);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

void key path getter for Headphone_Manager.pendingConnectedHeadphones : Headphone_Manager(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v2;
  _QWORD *v3;

  v3 = *a1;
  v2 = *a1;
  *a2 = (*(uint64_t (**)(id))((*v3 & *MEMORY[0x24BEE4EA0]) + 0x198))(v2);

}

void key path setter for Headphone_Manager.pendingConnectedHeadphones : Headphone_Manager(uint64_t *a1, id *a2)
{
  id v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  outlined init with copy of [String : HeadphoneDevice](a1, &v6);
  v5 = v6;
  v4 = *a2;
  v2 = *a2;
  (*(void (**)(uint64_t))((*v4 & *MEMORY[0x24BEE4EA0]) + 0x1A0))(v5);

}

uint64_t (*Headphone_Manager.pendingConnectedHeadphones.modify())()
{
  swift_beginAccess();
  return Headphone_Manager.pendingConnectedHeadphones.modify;
}

uint64_t Headphone_Manager.pendingConnectedHeadphones.modify()
{
  return swift_endAccess();
}

_QWORD *Headphone_Manager.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  objc_class *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t *v54;
  uint64_t *v55;
  _BYTE **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint32_t v63;
  int v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  Swift::String v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  id v96;
  _QWORD *v97;
  char *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint32_t v105;
  char v106;
  ValueMetadata *v107;
  unint64_t v108;
  objc_super v109;
  id v110;

  v110 = 0;
  v86 = 0;
  v67 = 0;
  v95 = 0;
  v68 = type metadata accessor for Logger();
  v69 = *(_QWORD *)(v68 - 8);
  v70 = (*(_QWORD *)(v69 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v1);
  v71 = (char *)&v46 - v70;
  v72 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v95, v2);
  v78 = (uint64_t)&v46 - v72;
  v73 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for OS_dispatch_queue.Attributes() - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v95, v3);
  v77 = (char *)&v46 - v73;
  v4 = type metadata accessor for DispatchQoS();
  v74 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v4, v5);
  v76 = (char *)&v46 - v74;
  v6 = v0;
  v7 = v0;
  v8 = v0;
  v9 = v0;
  v10 = v0;
  v11 = v0;
  v12 = v0;
  v13 = v0;
  v14 = v0;
  v15 = v0;
  v16 = v0;
  v110 = v0;
  v79 = OBJC_IVAR___HPMHeadphoneManager_dispatchQueue;
  type metadata accessor for OS_dispatch_queue();
  v75 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneManager", 0x1AuLL, 1);
  default argument 1 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 2 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  default argument 3 of OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v78);
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v18 = v94;
  *(_QWORD *)&v94[v79] = v17;

  swift_unknownObjectWeakInit();
  v80 = OBJC_IVAR___HPMHeadphoneManager_cbDiscovery;
  type metadata accessor for CBDiscovery();
  v19 = CBDiscovery.__allocating_init()();
  v20 = v94;
  *(_QWORD *)&v94[v80] = v19;

  v81 = OBJC_IVAR___HPMHeadphoneManager_controller;
  type metadata accessor for CBController();
  v21 = CBController.__allocating_init()();
  v22 = v94;
  *(_QWORD *)&v94[v81] = v21;

  v82 = OBJC_IVAR___HPMHeadphoneManager_connection;
  type metadata accessor for CBConnection();
  v23 = CBConnection.__allocating_init()();
  v24 = v94;
  *(_QWORD *)&v94[v82] = v23;

  v83 = OBJC_IVAR___HPMHeadphoneManager_deviceManger;
  type metadata accessor for AADeviceManager();
  v25 = AADeviceManager.__allocating_init()();
  v26 = v94;
  *(_QWORD *)&v94[v83] = v25;

  *(_QWORD *)&v26[OBJC_IVAR___HPMHeadphoneManager____lazy_storage___hmsClient] = v95;
  v85 = OBJC_IVAR___HPMHeadphoneManager_connectedRecords;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HMDeviceRecord));
  v84 = _allocateUninitializedArray<A>(_:)();
  type metadata accessor for HMDeviceRecord();
  v92 = MEMORY[0x24BEE0D00];
  v91 = MEMORY[0x24BEE0D10];
  *(_QWORD *)&v26[v85] = Dictionary.init(dictionaryLiteral:)();

  swift_unknownObjectWeakInit();
  v88 = OBJC_IVAR___HPMHeadphoneManager_connectedHeadphones;
  v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
  v87 = _allocateUninitializedArray<A>(_:)();
  v90 = type metadata accessor for HeadphoneDevice();
  v27 = Dictionary.init(dictionaryLiteral:)();
  v28 = v94;
  *(_QWORD *)&v94[v88] = v27;

  v93 = OBJC_IVAR___HPMHeadphoneManager_pendingConnectedHeadphones;
  _allocateUninitializedArray<A>(_:)();
  v29 = Dictionary.init(dictionaryLiteral:)();
  v30 = v94;
  *(_QWORD *)&v94[v93] = v29;

  v96 = v110;
  v31 = (objc_class *)type metadata accessor for Headphone_Manager();
  v109.receiver = v96;
  v109.super_class = v31;
  v97 = objc_msgSendSuper2(&v109, sel_init);
  v32 = v97;
  v33 = v97;
  v34 = v97;
  v35 = v97;
  v110 = v97;
  v98 = &v106;
  v107 = &type metadata for HeadphoneFeatures;
  v108 = lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures();
  v106 = 0;
  v99 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v98);
  if ((v99 & 1) != 0)
  {
    v36 = v71;
    v37 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v36, v37, v68);
    v65 = Logger.logObject.getter();
    v64 = static os_log_type_t.default.getter();
    v62 = &v104;
    v104 = 2;
    v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v63 = v105;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v66 = _allocateUninitializedArray<A>(_:)();
    if (os_log_type_enabled(v65, (os_log_type_t)v64))
    {
      v38 = v67;
      v50 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v49 = 0;
      v51 = createStorage<A>(capacity:type:)(0);
      v52 = createStorage<A>(capacity:type:)(v49);
      v56 = &v103;
      v103 = v50;
      v57 = &v102;
      v102 = v51;
      v54 = &v101;
      v101 = v52;
      v53 = 0;
      serialize(_:at:)(0, &v103);
      serialize(_:at:)(v53, v56);
      v100 = v66;
      v55 = &v46;
      MEMORY[0x24BDAC7A8](&v46, v39);
      v40 = v57;
      v41 = &v46 - 6;
      v58 = &v46 - 6;
      v41[2] = (uint64_t)v56;
      v41[3] = (uint64_t)v40;
      v41[4] = v42;
      v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
      lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
      Sequence.forEach(_:)();
      if (v38)
      {
        __break(1u);
      }
      else
      {
        _os_log_impl(&dword_23DAB4000, v65, (os_log_type_t)v64, "HeadphoneManager: BDM Feature enabled", v50, v63);
        v47 = 0;
        destroyStorage<A>(_:count:)(v51, 0, v48);
        destroyStorage<A>(_:count:)(v52, v47, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v50, MEMORY[0x24BEE4260]);
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v43 = v97;

    v44 = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v71, v68);
    (*(void (**)(uint64_t))((*v43 & *MEMORY[0x24BEE4EA0]) + 0x1B0))(v44);

    Headphone_Manager.configHearingModeClient()();
  }
  else
  {

  }
  return v97;
}

id Headphone_Manager.__deallocating_deinit()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id *v6;
  id v7;
  id *v8;
  id v9;
  id *v10;
  id v11;
  id *v12;
  id v13;
  objc_super v14;
  uint64_t v15;

  v15 = 0;
  v6 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_deviceManger];
  swift_beginAccess();
  v7 = *v6;
  v1 = *v6;
  swift_endAccess();
  objc_msgSend(v7, (SEL)0x1F2608EC8);

  v8 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_cbDiscovery];
  swift_beginAccess();
  v9 = *v8;
  v2 = *v8;
  swift_endAccess();
  objc_msgSend(v9, (SEL)0x1F2608EC8);

  v10 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_controller];
  swift_beginAccess();
  v11 = *v10;
  v3 = *v10;
  swift_endAccess();
  objc_msgSend(v11, (SEL)0x1F2608EC8);

  v12 = (id *)&v0[OBJC_IVAR___HPMHeadphoneManager_connection];
  swift_beginAccess();
  v13 = *v12;
  v4 = *v12;
  swift_endAccess();
  objc_msgSend(v13, (SEL)0x1F2608EC8);

  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for Headphone_Manager();
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

Swift::Void __swiftcall Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t *v34;
  uint64_t *v35;
  void *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD v39[2];
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t (*v49)(uint64_t);
  uint64_t v50;
  void *v51;
  id v52;
  _QWORD *v53;
  uint64_t v54;
  unsigned int v55;
  void *v56;
  id v57;
  id v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  id v61;
  void *v62;
  id v63;
  uint64_t *v64;
  uint64_t *v65;
  char *v66;
  _QWORD *v67;
  id v68;
  id v69;
  id v70;
  uint64_t (*v71)(uint64_t);
  uint64_t v72;
  id v73;
  void *v74;
  id v75;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  _QWORD *v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t *v89;
  _QWORD *v90;
  _BYTE **v91;
  uint64_t *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t);
  uint64_t (*v96)(uint64_t);
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint32_t v106;
  uint64_t v107;
  int v108;
  NSObject *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  unsigned int v116;
  int v117;
  uint64_t (*v118)(uint64_t, void *);
  void *v119;
  void (*v120)(void *);
  uint64_t v121;
  _QWORD v122[6];
  uint64_t v123;
  int v124;
  int v125;
  uint64_t (*v126)(uint64_t);
  void *v127;
  void (*v128)();
  uint64_t v129;
  char v130;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t (*v134)(uint64_t, void *);
  void *v135;
  void (*v136)(void *);
  uint64_t v137;
  char v138;
  uint64_t aBlock;
  int v140;
  int v141;
  uint64_t (*v142)(uint64_t, void *);
  void *v143;
  void (*v144)(void *);
  uint64_t v145;
  uint64_t v146;
  uint32_t v147;
  uint64_t v148;

  v95 = thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply;
  v96 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ();
  v148 = 0;
  v97 = 0;
  v107 = 0;
  v102 = type metadata accessor for Logger();
  v101 = *(_QWORD *)(v102 - 8);
  v99 = (*(_QWORD *)(v101 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v102, v0);
  v1 = (char *)v39 - v99;
  v100 = (char *)v39 - v99;
  v148 = v2;
  v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v1, v3, v102);
  v109 = Logger.logObject.getter();
  v108 = static os_log_type_t.default.getter();
  v105 = &v146;
  v146 = 2;
  v103 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v104 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v106 = v147;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v110 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v109, (os_log_type_t)v108))
  {
    v4 = v97;
    v85 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v83 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v84 = 0;
    v86 = createStorage<A>(capacity:type:)(0);
    v87 = createStorage<A>(capacity:type:)(v84);
    v91 = &v114;
    v114 = v85;
    v92 = &v113;
    v113 = v86;
    v89 = &v112;
    v112 = v87;
    v88 = 0;
    serialize(_:at:)(0, &v114);
    serialize(_:at:)(v88, v91);
    v111 = v110;
    v90 = v39;
    MEMORY[0x24BDAC7A8](v39, v5);
    v6 = v92;
    v7 = &v39[-6];
    v93 = &v39[-6];
    v7[2] = v91;
    v7[3] = v6;
    v7[4] = v8;
    v94 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v4)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_23DAB4000, v109, (os_log_type_t)v108, "HeadphoneManager: Starting CB Discovery", v85, v106);
      v82 = 0;
      destroyStorage<A>(_:count:)(v86, 0, v83);
      destroyStorage<A>(_:count:)(v87, v82, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v85, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v9 = v98;

  v10 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v100, v102);
  v11 = *v9;
  v79 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v12 = (void *)(*(uint64_t (**)(uint64_t))((v11 & *MEMORY[0x24BEE4EA0]) + 0x120))(v10);
  v13 = v98;
  v75 = v12;
  v14 = v98;
  v15 = v13;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = v13;
  v144 = partial apply for closure #1 in Headphone_Manager.configCBDiscovery();
  v145 = v16;
  aBlock = MEMORY[0x24BDAC760];
  v140 = 1107296256;
  v141 = 0;
  v142 = thunk for @escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ();
  v143 = &block_descriptor_3;
  v74 = _Block_copy(&aBlock);
  swift_release();

  objc_msgSend(v75, sel_setDeviceFoundHandler_, v74);
  _Block_release(v74);

  v76 = HeadphoneDataProvider.shared.unsafeMutableAddressor();
  v78 = &v138;
  swift_beginAccess();
  v77 = (uint64_t *)*v76;
  v17 = v77;
  v18 = swift_endAccess();
  v80 = (id)(*(uint64_t (**)(uint64_t))((*v13 & *v79) + 0x120))(v18);
  v81 = objc_msgSend(v80, sel_deviceFoundHandler);
  if (v81)
  {
    v73 = v81;
    v70 = v81;
    v19 = swift_allocObject();
    v20 = v95;
    *(_QWORD *)(v19 + 16) = v70;
    v71 = v20;
    v72 = v19;
  }
  else
  {
    v71 = 0;
    v72 = 0;
  }
  v21 = *v77;
  v67 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))((v21 & *MEMORY[0x24BEE4EA0]) + 0x100))(v71, v72);
  v22 = v98;

  v23 = (void *)(*(uint64_t (**)(void))((*v22 & *v67) + 0x120))();
  v24 = v98;
  v63 = v23;
  v25 = v98;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = v24;
  v136 = partial apply for closure #2 in Headphone_Manager.configCBDiscovery();
  v137 = v26;
  v131 = MEMORY[0x24BDAC760];
  v132 = 1107296256;
  v133 = 0;
  v134 = thunk for @escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ();
  v135 = &block_descriptor_7;
  v62 = _Block_copy(&v131);
  swift_release();
  objc_msgSend(v63, sel_setDeviceLostHandler_, v62);
  _Block_release(v62);

  v64 = HeadphoneDataProvider.shared.unsafeMutableAddressor();
  v66 = &v130;
  swift_beginAccess();
  v65 = (uint64_t *)*v64;
  v27 = v65;
  v28 = swift_endAccess();
  v68 = (id)(*(uint64_t (**)(uint64_t))((*v24 & *v67) + 0x120))(v28);
  v69 = objc_msgSend(v68, sel_deviceLostHandler);
  if (v69)
  {
    v61 = v69;
    v58 = v69;
    v29 = swift_allocObject();
    v30 = v96;
    *(_QWORD *)(v29 + 16) = v58;
    v59 = v30;
    v60 = v29;
  }
  else
  {
    v59 = 0;
    v60 = 0;
  }
  v31 = *v65;
  v53 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))((v31 & *MEMORY[0x24BEE4EA0]) + 0x118))(v59, v60);
  v32 = v98;

  v33 = (void *)(*(uint64_t (**)(void))((*v32 & *v53) + 0x120))();
  v34 = v98;
  v43 = v33;
  v46 = &unk_250E77398;
  v44 = 24;
  v45 = 7;
  v41 = swift_allocObject();
  v39[1] = v41 + 16;
  v35 = v34;
  v40 = v34;
  swift_unknownObjectWeakInit();

  swift_retain();
  v128 = partial apply for closure #3 in Headphone_Manager.configCBDiscovery();
  v129 = v41;
  v54 = MEMORY[0x24BDAC760];
  v123 = MEMORY[0x24BDAC760];
  v55 = 1107296256;
  v124 = 1107296256;
  v125 = 0;
  v49 = thunk for @escaping @callee_guaranteed () -> ();
  v126 = thunk for @escaping @callee_guaranteed () -> ();
  v127 = &block_descriptor_13;
  v42 = _Block_copy(&v123);
  swift_release();
  swift_release();
  objc_msgSend(v43, sel_setInterruptionHandler_, v42);
  _Block_release(v42);

  v36 = (void *)(*(uint64_t (**)(void))((*v34 & *v53) + 0x120))();
  v37 = v98;
  v52 = v36;
  v50 = swift_allocObject();
  v47 = v50 + 16;
  v38 = v37;
  v48 = v37;
  swift_unknownObjectWeakInit();

  swift_retain();
  v122[4] = partial apply for closure #4 in Headphone_Manager.configCBDiscovery();
  v122[5] = v50;
  v122[0] = v54;
  v122[1] = v55;
  v122[2] = v49;
  v122[3] = &block_descriptor_17;
  v51 = _Block_copy(v122);
  swift_release();
  swift_release();
  objc_msgSend(v52, sel_setInvalidationHandler_, v51);
  _Block_release(v51);

  v57 = (id)(*(uint64_t (**)(void))((*v37 & *v53) + 0x120))();
  v120 = closure #5 in Headphone_Manager.configCBDiscovery();
  v121 = 0;
  v115 = v54;
  v116 = v55;
  v117 = 0;
  v118 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v119 = &block_descriptor_20;
  v56 = _Block_copy(&v115);
  objc_msgSend(v57, sel_activateWithCompletion_);
  _Block_release(v56);

}

void closure #1 in Headphone_Manager.configCBDiscovery()(void *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v47;
  _QWORD *v48;
  char v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE **v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint8_t *v117;
  uint64_t v118;
  uint64_t v119;
  unsigned int v120;
  uint64_t *v121;
  uint64_t *v122;
  _BYTE **v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t);
  void (*v128)(_QWORD);
  uint64_t (*v129)(uint64_t);
  void (*v130)(_QWORD);
  void (*v131)(_QWORD);
  uint64_t (*v132)(uint64_t);
  uint64_t (*v133)(uint64_t);
  uint64_t v134;
  id v135;
  uint64_t (*v136)(uint64_t);
  uint64_t v137;
  id v138;
  _QWORD *v139;
  id v140;
  id v141;
  uint64_t (*v142)(uint64_t);
  uint64_t (*v143)(uint64_t);
  void (*v144)(_QWORD);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint8_t *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t *v152;
  uint64_t *v153;
  _BYTE **v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint32_t v158;
  int v159;
  NSObject *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint8_t *v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE **v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint32_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  NSObject *v182;
  int v183;
  void **v184;
  id v185;
  id v186;
  id v187;
  _QWORD *v188;
  uint64_t v189;
  _QWORD *v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  uint64_t v196;
  Swift::String v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint32_t v202;
  int v203;
  NSObject *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  id v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  id v215;
  uint64_t v216;
  void (*v217)(char *, uint64_t);
  id v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE **v226;
  uint64_t *v227;
  uint64_t *v228;
  uint64_t v229;
  void (*v230)(char *, uint64_t, uint64_t);
  id v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t *v234;
  unint64_t v235;
  uint32_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  NSObject *v248;
  int v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t *v252;
  uint32_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  NSObject *v265;
  int v266;
  id v267;
  id v268;
  uint64_t (*v269)(uint64_t);
  uint64_t v270;
  _QWORD *v271;
  uint64_t v272;
  _QWORD *v273;
  unint64_t v274;
  char *v275;
  unint64_t v276;
  char *v277;
  unint64_t v278;
  char *v279;
  unint64_t v280;
  char *v281;
  unint64_t v282;
  char *v283;
  id v284;
  uint64_t (*v285)(uint64_t, uint64_t, uint64_t);
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  _BYTE *v289;
  _QWORD *v290;
  void *v291;
  _QWORD v292[2];
  _QWORD *v293;
  uint64_t (*v294)(uint64_t, uint64_t, uint64_t);
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE *v298[2];
  uint32_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _BYTE *v305;
  uint64_t (*v306)(uint64_t);
  void (*v307)(_QWORD);
  _QWORD v308[2];
  uint32_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  _BYTE *v315[2];
  uint32_t v316;
  uint64_t v317;
  uint32_t v318;
  id v319;
  uint64_t (*v320)(uint64_t, uint64_t, uint64_t);
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _BYTE *v324;
  uint64_t v325;
  uint32_t v326;
  uint64_t v327;
  void *v328;

  v268 = a1;
  v271 = a2;
  v269 = thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()partial apply;
  v328 = 0;
  v327 = 0;
  v270 = 0;
  v319 = 0;
  v310 = 0;
  v311 = 0;
  v306 = 0;
  v307 = 0;
  v300 = 0;
  v301 = 0;
  v290 = 0;
  v272 = type metadata accessor for Logger();
  v273 = *(_QWORD **)(v272 - 8);
  v274 = (v273[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v272, v271);
  v275 = (char *)&v105 - v274;
  v276 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v105 - v274, v4);
  v277 = (char *)&v105 - v276;
  v278 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v105 - v276, v6);
  v279 = (char *)&v105 - v278;
  v280 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v105 - v278, v8);
  v281 = (char *)&v105 - v280;
  v282 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v105 - v280, v10);
  v283 = (char *)&v105 - v282;
  v328 = a1;
  v327 = v11;
  v284 = AudioAccessoryDevice.cbDeviceValidator(aaDevice:)(a1);
  if (v284)
  {
    v267 = v284;
    v26 = v281;
    v231 = v284;
    v319 = v284;
    v27 = Logger.shared.unsafeMutableAddressor();
    v230 = (void (*)(char *, uint64_t, uint64_t))v273[2];
    v230(v26, v27, v272);
    v28 = v231;
    v239 = 7;
    v240 = swift_allocObject();
    *(_QWORD *)(v240 + 16) = v231;
    v248 = Logger.logObject.getter();
    v249 = static os_log_type_t.default.getter();
    v234 = &v317;
    v317 = 12;
    v232 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v233 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v235 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v236 = v318;
    v237 = 17;
    v242 = swift_allocObject();
    *(_BYTE *)(v242 + 16) = 32;
    v243 = swift_allocObject();
    *(_BYTE *)(v243 + 16) = 8;
    v238 = 32;
    v29 = swift_allocObject();
    v30 = v240;
    v241 = v29;
    *(_QWORD *)(v29 + 16) = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery();
    *(_QWORD *)(v29 + 24) = v30;
    v31 = swift_allocObject();
    v32 = v241;
    v245 = v31;
    *(_QWORD *)(v31 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v31 + 24) = v32;
    v247 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v244 = _allocateUninitializedArray<A>(_:)();
    v246 = v33;
    swift_retain();
    v34 = v242;
    v35 = v246;
    *v246 = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[1] = v34;
    swift_retain();
    v36 = v243;
    v37 = v246;
    v246[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[3] = v36;
    swift_retain();
    v38 = v245;
    v39 = v246;
    v246[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v248, (os_log_type_t)v249))
    {
      v40 = v270;
      v223 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v222 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v224 = createStorage<A>(capacity:type:)(0);
      v225 = createStorage<A>(capacity:type:)(1);
      v226 = &v289;
      v289 = v223;
      v227 = &v288;
      v288 = v224;
      v228 = &v287;
      v287 = v225;
      serialize(_:at:)(2, &v289);
      serialize(_:at:)(1, v226);
      v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v286 = v242;
      closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)v226, (uint64_t)v227, (uint64_t)v228);
      v229 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v286 = v243;
        closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)&v289, (uint64_t)&v288, (uint64_t)&v287);
        v220 = 0;
        v42 = v220;
        v285 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v286 = v245;
        closure #1 in osLogInternal(_:log:type:)(&v285, (uint64_t)&v289, (uint64_t)&v288, (uint64_t)&v287);
        v219 = v42;
        _os_log_impl(&dword_23DAB4000, v248, (os_log_type_t)v249, "HeadphoneManager: AAF Device Found: %s", v223, v236);
        destroyStorage<A>(_:count:)(v224, 0, v222);
        destroyStorage<A>(_:count:)(v225, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v223, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v221 = v219;
      }
    }
    else
    {
      v41 = v270;
      swift_release();
      swift_release();
      swift_release();
      v221 = v41;
    }
    v216 = v221;

    v217 = (void (*)(char *, uint64_t))v273[1];
    v217(v281, v272);
    v218 = objc_msgSend(v231, sel_btAddressData);
    if (v218)
    {
      v215 = v218;
      v210 = v218;
      v211 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v212 = v43;

      v213 = v211;
      v214 = v212;
    }
    else
    {
      v213 = 0;
      v214 = 0xF000000000000000;
    }
    v208 = v214;
    v209 = v213;
    if ((v214 & 0xF000000000000000) == 0xF000000000000000)
    {
      v44 = v279;
      v45 = Logger.shared.unsafeMutableAddressor();
      v230(v44, v45, v272);
      v204 = Logger.logObject.getter();
      v203 = static os_log_type_t.error.getter();
      v315[1] = (_BYTE *)2;
      UnsignedInteger<>.init<A>(_:)();
      v202 = v316;
      v205 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v204, (os_log_type_t)v203))
      {
        v99 = v216;
        v117 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v116 = 0;
        v118 = createStorage<A>(capacity:type:)(0);
        v119 = createStorage<A>(capacity:type:)(v116);
        v123 = v315;
        v315[0] = v117;
        v124 = &v314;
        v314 = v118;
        v121 = &v313;
        v313 = v119;
        v120 = 0;
        serialize(_:at:)(0, v315);
        serialize(_:at:)(v120, v123);
        v312 = v205;
        v122 = &v105;
        MEMORY[0x24BDAC7A8](&v105, v100);
        v101 = v124;
        v102 = &v105 - 6;
        v125 = &v105 - 6;
        v102[2] = (uint64_t)v123;
        v102[3] = (uint64_t)v101;
        v102[4] = v103;
        v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v99)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_23DAB4000, v204, (os_log_type_t)v203, "HeadphoneManager: Invalid BT Address", v117, v202);
          v114 = 0;
          destroyStorage<A>(_:count:)(v118, 0, v115);
          destroyStorage<A>(_:count:)(v119, v114, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24263B020](v117, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v217(v279, v272);
    }
    else
    {
      v206 = v209;
      v207 = v208;
      v200 = v208;
      v201 = v209;
      v310 = v209;
      v311 = v208;
      if (Data.count.getter() != 6)
      {
        v90 = v275;
        v91 = Logger.shared.unsafeMutableAddressor();
        v230(v90, v91, v272);
        v160 = Logger.logObject.getter();
        v159 = static os_log_type_t.error.getter();
        v308[1] = 2;
        UnsignedInteger<>.init<A>(_:)();
        v158 = v309;
        v161 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v160, (os_log_type_t)v159))
        {
          v92 = v216;
          v148 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v147 = 0;
          v149 = createStorage<A>(capacity:type:)(0);
          v150 = createStorage<A>(capacity:type:)(v147);
          v154 = &v305;
          v305 = v148;
          v155 = &v304;
          v304 = v149;
          v152 = &v303;
          v303 = v150;
          v151 = 0;
          serialize(_:at:)(0, &v305);
          serialize(_:at:)(v151, v154);
          v302 = v161;
          v153 = &v105;
          MEMORY[0x24BDAC7A8](&v105, v93);
          v94 = v155;
          v95 = &v105 - 6;
          v156 = &v105 - 6;
          v95[2] = (uint64_t)v154;
          v95[3] = (uint64_t)v94;
          v95[4] = v96;
          v157 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v92)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_23DAB4000, v160, (os_log_type_t)v159, "HeadphoneManager: Invalid BT Address Length", v148, v158);
            v145 = 0;
            destroyStorage<A>(_:count:)(v149, 0, v146);
            destroyStorage<A>(_:count:)(v150, v145, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24263B020](v148, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v89 = ((uint64_t (*)(char *, uint64_t))v217)(v275, v272);
      }
      else
      {
        v47 = v271;
        v197 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X-%02X-%02X-%02X-%02X-%02X", 0x1DuLL, 1);
        v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
        v196 = _allocateUninitializedArray<A>(_:)();
        v194 = v48;
        v49 = Data.subscript.getter();
        v50 = v194;
        v192 = MEMORY[0x24BEE4260];
        v194[3] = MEMORY[0x24BEE4260];
        v193 = MEMORY[0x24BEE42B0];
        v50[4] = MEMORY[0x24BEE42B0];
        *(_BYTE *)v50 = v49;
        v51 = Data.subscript.getter();
        v52 = v193;
        v53 = v194;
        v194[8] = v192;
        v53[9] = v52;
        *((_BYTE *)v53 + 40) = v51;
        v54 = Data.subscript.getter();
        v55 = v193;
        v56 = v194;
        v194[13] = v192;
        v56[14] = v55;
        *((_BYTE *)v56 + 80) = v54;
        v57 = Data.subscript.getter();
        v58 = v193;
        v59 = v194;
        v194[18] = v192;
        v59[19] = v58;
        *((_BYTE *)v59 + 120) = v57;
        v60 = Data.subscript.getter();
        v61 = v193;
        v62 = v194;
        v194[23] = v192;
        v62[24] = v61;
        *((_BYTE *)v62 + 160) = v60;
        v63 = Data.subscript.getter();
        v64 = v193;
        v65 = v194;
        v194[28] = v192;
        v65[29] = v64;
        *((_BYTE *)v65 + 200) = v63;
        _finalizeUninitializedArray<A>(_:)();
        v198 = String.init(format:_:)();
        v199 = v66;
        swift_bridgeObjectRelease();
        v300 = v198;
        v301 = v199;
        if (((*(uint64_t (**)(id))((*v47 & *MEMORY[0x24BEE4EA0]) + 0x1B8))(v231) & 1) != 0)
        {
          v67 = v271;
          v68 = swift_bridgeObjectRetain();
          v189 = (*(uint64_t (**)(uint64_t))((*v67 & *MEMORY[0x24BEE4EA0]) + 0x180))(v68);
          v190 = v292;
          v292[0] = v198;
          v292[1] = v199;
          v69 = type metadata accessor for HeadphoneDevice();
          MEMORY[0x24263AD5C](&v293, v190, v189, MEMORY[0x24BEE0D00], v69, MEMORY[0x24BEE0D10]);
          outlined destroy of String();
          v191 = v293;
          if (v293)
          {
            v188 = v191;
            v72 = v191;
            v187 = v191;
            v290 = v191;
            swift_bridgeObjectRelease();
            (*(void (**)(id, id))((*v72 & *MEMORY[0x24BEE4EA0]) + 0xA88))(v268, v231);

          }
          else
          {
            v70 = v271;
            v71 = swift_bridgeObjectRelease();
            v291 = (void *)(*(uint64_t (**)(uint64_t))((*v70 & *MEMORY[0x24BEE4EA0]) + 0xC0))(v71);
            if (v291)
            {
              v184 = &v291;
              v186 = v291;
              swift_unknownObjectRetain();
              outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
              swift_getObjectType();
              v73 = v271;
              v185 = objc_msgSend(v268, sel_headphoneDeviceWithCbDevice_withDelegate_, v231, v271);
              swift_unknownObjectRelease();
              objc_msgSend(v186, sel_addTopLevelEntryWithHpDevice_, v185);

              swift_unknownObjectRelease();
            }
            else
            {
              outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
            }
          }
        }
        else
        {
          v74 = v277;
          v75 = Logger.shared.unsafeMutableAddressor();
          v230(v74, v75, v272);
          v76 = v231;
          v174 = 7;
          v175 = swift_allocObject();
          *(_QWORD *)(v175 + 16) = v231;
          v182 = Logger.logObject.getter();
          v183 = static os_log_type_t.error.getter();
          v298[1] = (_BYTE *)12;
          UnsignedInteger<>.init<A>(_:)();
          v171 = v299;
          v172 = 17;
          v177 = swift_allocObject();
          *(_BYTE *)(v177 + 16) = 64;
          v178 = swift_allocObject();
          *(_BYTE *)(v178 + 16) = 8;
          v173 = 32;
          v77 = swift_allocObject();
          v78 = v175;
          v176 = v77;
          *(_QWORD *)(v77 + 16) = partial apply for implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery();
          *(_QWORD *)(v77 + 24) = v78;
          v79 = swift_allocObject();
          v80 = v176;
          v180 = v79;
          *(_QWORD *)(v79 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
          *(_QWORD *)(v79 + 24) = v80;
          v179 = _allocateUninitializedArray<A>(_:)();
          v181 = v81;
          swift_retain();
          v82 = v177;
          v83 = v181;
          *v181 = closure #1 in OSLogArguments.append(_:)partial apply;
          v83[1] = v82;
          swift_retain();
          v84 = v178;
          v85 = v181;
          v181[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v85[3] = v84;
          swift_retain();
          v86 = v180;
          v87 = v181;
          v181[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v87[5] = v86;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v182, (os_log_type_t)v183))
          {
            v88 = v216;
            v164 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v165 = createStorage<A>(capacity:type:)(1);
            v166 = createStorage<A>(capacity:type:)(0);
            v167 = v298;
            v298[0] = v164;
            v168 = &v297;
            v297 = v165;
            v169 = &v296;
            v296 = v166;
            serialize(_:at:)(2, v298);
            serialize(_:at:)(1, v167);
            v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v295 = v177;
            closure #1 in osLogInternal(_:log:type:)(&v294, (uint64_t)v167, (uint64_t)v168, (uint64_t)v169);
            v170 = v88;
            if (v88)
            {
              __break(1u);
            }
            else
            {
              v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v295 = v178;
              closure #1 in osLogInternal(_:log:type:)(&v294, (uint64_t)v298, (uint64_t)&v297, (uint64_t)&v296);
              v162 = 0;
              v294 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v295 = v180;
              closure #1 in osLogInternal(_:log:type:)(&v294, (uint64_t)v298, (uint64_t)&v297, (uint64_t)&v296);
              _os_log_impl(&dword_23DAB4000, v182, (os_log_type_t)v183, "HeadphoneManager: Not Supported Apple Headphone %@", v164, v171);
              destroyStorage<A>(_:count:)(v165, 1, v163);
              destroyStorage<A>(_:count:)(v166, 0, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24263B020](v164, MEMORY[0x24BEE4260]);
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
          }

          v217(v277, v272);
        }
        v89 = swift_bridgeObjectRelease();
      }
      v308[0] = (*(uint64_t (**)(uint64_t))((*v271 & *MEMORY[0x24BEE4EA0]) + 0x168))(v89);
      if (v308[0])
      {
        v139 = v308;
        v140 = (id)v308[0];
        swift_unknownObjectRetain();
        outlined destroy of CBDeviceReporting?();
        swift_getObjectType();
        v141 = objc_msgSend(v140, sel_deviceFoundHandler);
        if (v141)
        {
          v138 = v141;
          v135 = v141;
          v97 = swift_allocObject();
          v98 = v269;
          *(_QWORD *)(v97 + 16) = v135;
          v136 = v98;
          v137 = v97;
        }
        else
        {
          v136 = 0;
          v137 = 0;
        }
        v134 = v137;
        v133 = v136;
        swift_unknownObjectRelease();
        v143 = v133;
        v144 = (void (*)(_QWORD))v134;
      }
      else
      {
        v142 = 0;
        outlined destroy of CBDeviceReporting?();
        v143 = v142;
        v144 = (void (*)(_QWORD))v142;
      }
      v131 = v144;
      v132 = v143;
      if (v143)
      {
        v129 = v132;
        v130 = v131;
        v128 = v131;
        v127 = v132;
        v306 = v132;
        v307 = v131;
        swift_retain();
        v127((uint64_t)v231);
        swift_release();
        swift_release();
      }
      outlined consume of Data._Representation(v201, v200);

    }
  }
  else
  {
    v12 = v283;
    v13 = Logger.shared.unsafeMutableAddressor();
    ((void (*)(char *, uint64_t, uint64_t))v273[2])(v12, v13, v272);
    v14 = v268;
    v256 = 7;
    v257 = swift_allocObject();
    *(_QWORD *)(v257 + 16) = v268;
    v265 = Logger.logObject.getter();
    v266 = static os_log_type_t.error.getter();
    v252 = &v325;
    v325 = 12;
    v250 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v251 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v253 = v326;
    v254 = 17;
    v259 = swift_allocObject();
    *(_BYTE *)(v259 + 16) = 64;
    v260 = swift_allocObject();
    *(_BYTE *)(v260 + 16) = 8;
    v255 = 32;
    v15 = swift_allocObject();
    v16 = v257;
    v258 = v15;
    *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery();
    *(_QWORD *)(v15 + 24) = v16;
    v17 = swift_allocObject();
    v18 = v258;
    v262 = v17;
    *(_QWORD *)(v17 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
    *(_QWORD *)(v17 + 24) = v18;
    v264 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v261 = _allocateUninitializedArray<A>(_:)();
    v263 = v19;
    swift_retain();
    v20 = v259;
    v21 = v263;
    *v263 = closure #1 in OSLogArguments.append(_:)partial apply;
    v21[1] = v20;
    swift_retain();
    v22 = v260;
    v23 = v263;
    v263[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v23[3] = v22;
    swift_retain();
    v24 = v262;
    v25 = v263;
    v263[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v265, (os_log_type_t)v266))
    {
      v104 = v270;
      v107 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v106 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v108 = createStorage<A>(capacity:type:)(1);
      v109 = createStorage<A>(capacity:type:)(0);
      v110 = &v324;
      v324 = v107;
      v111 = &v323;
      v323 = v108;
      v112 = &v322;
      v322 = v109;
      serialize(_:at:)(2, &v324);
      serialize(_:at:)(1, v110);
      v320 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v321 = v259;
      closure #1 in osLogInternal(_:log:type:)(&v320, (uint64_t)v110, (uint64_t)v111, (uint64_t)v112);
      v113 = v104;
      if (v104)
      {
        __break(1u);
      }
      else
      {
        v320 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v321 = v260;
        closure #1 in osLogInternal(_:log:type:)(&v320, (uint64_t)&v324, (uint64_t)&v323, (uint64_t)&v322);
        v105 = 0;
        v320 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v321 = v262;
        closure #1 in osLogInternal(_:log:type:)(&v320, (uint64_t)&v324, (uint64_t)&v323, (uint64_t)&v322);
        _os_log_impl(&dword_23DAB4000, v265, (os_log_type_t)v266, "HeadphoneManager: AAF Device: %@ is missing cbDevice early exit found handler", v107, v253);
        destroyStorage<A>(_:count:)(v108, 1, v106);
        destroyStorage<A>(_:count:)(v109, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v107, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    ((void (*)(char *, uint64_t))v273[1])(v283, v272);
  }
}

void *implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t countAndFlagsBits;

  v7 = objc_msgSend(a1, sel_name);
  if (v7)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v1;

    v5 = v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (v6)
    return v5;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

void *implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ()(uint64_t a1, void *a2)
{
  id v2;
  void (*v4)(void *);

  v4 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v2 = a2;
  v4(a2);

  return swift_release();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

void closure #2 in Headphone_Manager.configCBDiscovery()(void *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v47;
  _QWORD *v48;
  char v49;
  _QWORD *v50;
  char v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  _QWORD *v56;
  char v57;
  uint64_t v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[2];
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE **v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t *v110;
  _QWORD *v111;
  _BYTE **v112;
  uint64_t *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t (*v116)(uint64_t);
  void (*v117)(_QWORD);
  uint64_t (*v118)(uint64_t);
  void (*v119)(_QWORD);
  void (*v120)(_QWORD);
  uint64_t (*v121)(uint64_t);
  uint64_t (*v122)(uint64_t);
  uint64_t v123;
  id v124;
  uint64_t (*v125)(uint64_t);
  uint64_t v126;
  id v127;
  _QWORD *v128;
  id v129;
  id v130;
  uint64_t (*v131)(uint64_t);
  uint64_t (*v132)(uint64_t);
  void (*v133)(_QWORD);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int v140;
  uint64_t *v141;
  _QWORD *v142;
  _BYTE **v143;
  uint64_t *v144;
  _QWORD *v145;
  uint64_t v146;
  uint32_t v147;
  int v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t *v158;
  _QWORD *v159;
  _BYTE **v160;
  uint64_t *v161;
  _QWORD *v162;
  uint64_t v163;
  void **v164;
  id v165;
  id v166;
  uint32_t v167;
  int v168;
  NSObject *v169;
  uint64_t v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  Swift::String v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  void *v183;
  unint64_t v184;
  uint64_t v185;
  uint32_t v186;
  int v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  id v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  id v199;
  uint64_t v200;
  void (*v201)(char *, uint64_t);
  id v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t v209;
  _BYTE **v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  void (*v214)(char *, uint64_t, uint64_t);
  id v215;
  unint64_t v216;
  unint64_t v217;
  uint64_t *v218;
  unint64_t v219;
  uint32_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  NSObject *v232;
  int v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t *v236;
  uint32_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  NSObject *v249;
  int v250;
  id v251;
  id v252;
  uint64_t (*v253)(uint64_t);
  uint64_t v254;
  _QWORD *v255;
  uint64_t v256;
  _QWORD *v257;
  unint64_t v258;
  char *v259;
  unint64_t v260;
  char *v261;
  unint64_t v262;
  char *v263;
  unint64_t v264;
  char *v265;
  unint64_t v266;
  char *v267;
  id v268;
  uint64_t (*v269)(uint64_t, uint64_t, uint64_t);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BYTE *v273;
  void *v274;
  void *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279[2];
  uint32_t v280;
  _QWORD v281[2];
  void *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _BYTE *v288;
  uint64_t (*v289)(uint64_t);
  void (*v290)(_QWORD);
  _QWORD v291[2];
  uint32_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _BYTE *v298[2];
  uint32_t v299;
  uint64_t v300;
  uint32_t v301;
  id v302;
  uint64_t (*v303)(uint64_t, uint64_t, uint64_t);
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  _BYTE *v307;
  uint64_t v308;
  uint32_t v309;
  uint64_t v310;
  void *v311;

  v252 = a1;
  v255 = a2;
  v253 = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ();
  v311 = 0;
  v310 = 0;
  v254 = 0;
  v302 = 0;
  v293 = 0;
  v294 = 0;
  v289 = 0;
  v290 = 0;
  v283 = 0;
  v284 = 0;
  v275 = 0;
  v256 = type metadata accessor for Logger();
  v257 = *(_QWORD **)(v256 - 8);
  v258 = (v257[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v256, v255);
  v259 = (char *)v94 - v258;
  v260 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v94 - v258, v4);
  v261 = (char *)v94 - v260;
  v262 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v94 - v260, v6);
  v263 = (char *)v94 - v262;
  v264 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v94 - v262, v8);
  v265 = (char *)v94 - v264;
  v266 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)v94 - v264, v10);
  v267 = (char *)v94 - v266;
  v311 = a1;
  v310 = v11;
  v268 = AudioAccessoryDevice.cbDeviceValidator(aaDevice:)(a1);
  if (v268)
  {
    v251 = v268;
    v26 = v265;
    v215 = v268;
    v302 = v268;
    v27 = Logger.shared.unsafeMutableAddressor();
    v214 = (void (*)(char *, uint64_t, uint64_t))v257[2];
    v214(v26, v27, v256);
    v28 = v215;
    v223 = 7;
    v224 = swift_allocObject();
    *(_QWORD *)(v224 + 16) = v215;
    v232 = Logger.logObject.getter();
    v233 = static os_log_type_t.default.getter();
    v218 = &v300;
    v300 = 12;
    v216 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v217 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v219 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v220 = v301;
    v221 = 17;
    v226 = swift_allocObject();
    *(_BYTE *)(v226 + 16) = 32;
    v227 = swift_allocObject();
    *(_BYTE *)(v227 + 16) = 8;
    v222 = 32;
    v29 = swift_allocObject();
    v30 = v224;
    v225 = v29;
    *(_QWORD *)(v29 + 16) = partial apply for implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery();
    *(_QWORD *)(v29 + 24) = v30;
    v31 = swift_allocObject();
    v32 = v225;
    v229 = v31;
    *(_QWORD *)(v31 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v31 + 24) = v32;
    v231 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v228 = _allocateUninitializedArray<A>(_:)();
    v230 = v33;
    swift_retain();
    v34 = v226;
    v35 = v230;
    *v230 = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[1] = v34;
    swift_retain();
    v36 = v227;
    v37 = v230;
    v230[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[3] = v36;
    swift_retain();
    v38 = v229;
    v39 = v230;
    v230[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[5] = v38;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v232, (os_log_type_t)v233))
    {
      v40 = v254;
      v207 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v206 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v208 = createStorage<A>(capacity:type:)(0);
      v209 = createStorage<A>(capacity:type:)(1);
      v210 = &v273;
      v273 = v207;
      v211 = &v272;
      v272 = v208;
      v212 = &v271;
      v271 = v209;
      serialize(_:at:)(2, &v273);
      serialize(_:at:)(1, v210);
      v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v270 = v226;
      closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)v210, (uint64_t)v211, (uint64_t)v212);
      v213 = v40;
      if (v40)
      {
        __break(1u);
      }
      else
      {
        v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v270 = v227;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        v204 = 0;
        v42 = v204;
        v269 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v270 = v229;
        closure #1 in osLogInternal(_:log:type:)(&v269, (uint64_t)&v273, (uint64_t)&v272, (uint64_t)&v271);
        v203 = v42;
        _os_log_impl(&dword_23DAB4000, v232, (os_log_type_t)v233, "HeadphoneManager: AAF Device Lost: %s", v207, v220);
        destroyStorage<A>(_:count:)(v208, 0, v206);
        destroyStorage<A>(_:count:)(v209, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v207, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v205 = v203;
      }
    }
    else
    {
      v41 = v254;
      swift_release();
      swift_release();
      swift_release();
      v205 = v41;
    }
    v200 = v205;

    v201 = (void (*)(char *, uint64_t))v257[1];
    v201(v265, v256);
    v202 = objc_msgSend(v215, sel_btAddressData);
    if (v202)
    {
      v199 = v202;
      v194 = v202;
      v195 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v196 = v43;

      v197 = v195;
      v198 = v196;
    }
    else
    {
      v197 = 0;
      v198 = 0xF000000000000000;
    }
    v192 = v198;
    v193 = v197;
    if ((v198 & 0xF000000000000000) == 0xF000000000000000)
    {
      v44 = v263;
      v45 = Logger.shared.unsafeMutableAddressor();
      v214(v44, v45, v256);
      v188 = Logger.logObject.getter();
      v187 = static os_log_type_t.error.getter();
      v298[1] = (_BYTE *)2;
      UnsignedInteger<>.init<A>(_:)();
      v186 = v299;
      v189 = _allocateUninitializedArray<A>(_:)();
      if (os_log_type_enabled(v188, (os_log_type_t)v187))
      {
        v88 = v200;
        v106 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v105 = 0;
        v107 = createStorage<A>(capacity:type:)(0);
        v108 = createStorage<A>(capacity:type:)(v105);
        v112 = v298;
        v298[0] = v106;
        v113 = &v297;
        v297 = v107;
        v110 = &v296;
        v296 = v108;
        v109 = 0;
        serialize(_:at:)(0, v298);
        serialize(_:at:)(v109, v112);
        v295 = v189;
        v111 = v94;
        MEMORY[0x24BDAC7A8](v94, v89);
        v90 = v113;
        v91 = &v94[-6];
        v114 = &v94[-6];
        v91[2] = v112;
        v91[3] = v90;
        v91[4] = v92;
        v115 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
        lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
        Sequence.forEach(_:)();
        if (v88)
        {
          __break(1u);
        }
        else
        {
          _os_log_impl(&dword_23DAB4000, v188, (os_log_type_t)v187, "HeadphoneManager: Invalid BT Address", v106, v186);
          v103 = 0;
          destroyStorage<A>(_:count:)(v107, 0, v104);
          destroyStorage<A>(_:count:)(v108, v103, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24263B020](v106, MEMORY[0x24BEE4260]);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }

      v201(v263, v256);
    }
    else
    {
      v190 = v193;
      v191 = v192;
      v184 = v192;
      v185 = v193;
      v293 = v193;
      v294 = v192;
      if (Data.count.getter() != 6)
      {
        v79 = v259;
        v80 = Logger.shared.unsafeMutableAddressor();
        v214(v79, v80, v256);
        v149 = Logger.logObject.getter();
        v148 = static os_log_type_t.error.getter();
        v291[1] = 2;
        UnsignedInteger<>.init<A>(_:)();
        v147 = v292;
        v150 = _allocateUninitializedArray<A>(_:)();
        if (os_log_type_enabled(v149, (os_log_type_t)v148))
        {
          v81 = v200;
          v137 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
          v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          v136 = 0;
          v138 = createStorage<A>(capacity:type:)(0);
          v139 = createStorage<A>(capacity:type:)(v136);
          v143 = &v288;
          v288 = v137;
          v144 = &v287;
          v287 = v138;
          v141 = &v286;
          v286 = v139;
          v140 = 0;
          serialize(_:at:)(0, &v288);
          serialize(_:at:)(v140, v143);
          v285 = v150;
          v142 = v94;
          MEMORY[0x24BDAC7A8](v94, v82);
          v83 = v144;
          v84 = &v94[-6];
          v145 = &v94[-6];
          v84[2] = v143;
          v84[3] = v83;
          v84[4] = v85;
          v146 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
          lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
          Sequence.forEach(_:)();
          if (v81)
          {
            __break(1u);
          }
          else
          {
            _os_log_impl(&dword_23DAB4000, v149, (os_log_type_t)v148, "HeadphoneManager: Invalid BT Address Length", v137, v147);
            v134 = 0;
            destroyStorage<A>(_:count:)(v138, 0, v135);
            destroyStorage<A>(_:count:)(v139, v134, MEMORY[0x24BEE4AD8] + 8);
            MEMORY[0x24263B020](v137, MEMORY[0x24BEE4260]);
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }

        v78 = ((uint64_t (*)(char *, uint64_t))v201)(v259, v256);
      }
      else
      {
        v47 = v255;
        v177 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("%02X-%02X-%02X-%02X-%02X-%02X", 0x1DuLL, 1);
        v175 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CVarArg);
        v176 = _allocateUninitializedArray<A>(_:)();
        v174 = v48;
        v180 = 0;
        v49 = Data.subscript.getter();
        v50 = v174;
        v172 = MEMORY[0x24BEE4260];
        v174[3] = MEMORY[0x24BEE4260];
        v173 = MEMORY[0x24BEE42B0];
        v50[4] = MEMORY[0x24BEE42B0];
        *(_BYTE *)v50 = v49;
        v51 = Data.subscript.getter();
        v52 = v173;
        v53 = v174;
        v174[8] = v172;
        v53[9] = v52;
        *((_BYTE *)v53 + 40) = v51;
        v54 = Data.subscript.getter();
        v55 = v173;
        v56 = v174;
        v174[13] = v172;
        v56[14] = v55;
        *((_BYTE *)v56 + 80) = v54;
        v57 = Data.subscript.getter();
        v58 = v173;
        v59 = v174;
        v174[18] = v172;
        v59[19] = v58;
        *((_BYTE *)v59 + 120) = v57;
        v60 = Data.subscript.getter();
        v61 = v173;
        v62 = v174;
        v174[23] = v172;
        v62[24] = v61;
        *((_BYTE *)v62 + 160) = v60;
        v63 = Data.subscript.getter();
        v64 = v173;
        v65 = v174;
        v174[28] = v172;
        v65[29] = v64;
        *((_BYTE *)v65 + 200) = v63;
        _finalizeUninitializedArray<A>(_:)();
        v178 = String.init(format:_:)();
        v179 = v66;
        swift_bridgeObjectRelease();
        v283 = v178;
        v284 = v179;
        v67 = swift_bridgeObjectRetain();
        v181 = (*(uint64_t (**)(uint64_t))((*v47 & *MEMORY[0x24BEE4EA0]) + 0x180))(v67);
        v182 = v281;
        v281[0] = v178;
        v281[1] = v179;
        v68 = type metadata accessor for HeadphoneDevice();
        MEMORY[0x24263AD5C](&v282, v182, v181, MEMORY[0x24BEE0D00], v68, MEMORY[0x24BEE0D10]);
        outlined destroy of String();
        v183 = v282;
        if (v282)
        {
          v171 = v183;
          v71 = v255;
          v166 = v183;
          v275 = v183;
          v72 = swift_bridgeObjectRelease();
          v274 = (void *)(*(uint64_t (**)(uint64_t))((*v71 & *MEMORY[0x24BEE4EA0]) + 0xC0))(v72);
          if (v274)
          {
            v164 = &v274;
            v165 = v274;
            swift_unknownObjectRetain();
            outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
            swift_getObjectType();
            objc_msgSend(v165, sel_removeTopLevelEntryWithHpDevice_, v166);
            swift_unknownObjectRelease();
          }
          else
          {
            outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
          }

        }
        else
        {
          v69 = v261;
          swift_bridgeObjectRelease();
          v70 = Logger.shared.unsafeMutableAddressor();
          v214(v69, v70, v256);
          v169 = Logger.logObject.getter();
          v168 = static os_log_type_t.error.getter();
          v279[1] = (_BYTE *)2;
          UnsignedInteger<>.init<A>(_:)();
          v167 = v280;
          v170 = _allocateUninitializedArray<A>(_:)();
          if (os_log_type_enabled(v169, (os_log_type_t)v168))
          {
            v73 = v200;
            v154 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v152 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v153 = 0;
            v155 = createStorage<A>(capacity:type:)(0);
            v156 = createStorage<A>(capacity:type:)(v153);
            v160 = v279;
            v279[0] = v154;
            v161 = &v278;
            v278 = v155;
            v158 = &v277;
            v277 = v156;
            v157 = 0;
            serialize(_:at:)(0, v279);
            serialize(_:at:)(v157, v160);
            v276 = v170;
            v159 = v94;
            MEMORY[0x24BDAC7A8](v94, v74);
            v75 = v161;
            v76 = &v94[-6];
            v162 = &v94[-6];
            v76[2] = v160;
            v76[3] = v75;
            v76[4] = v77;
            v163 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
            lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
            Sequence.forEach(_:)();
            if (v73)
            {
              __break(1u);
            }
            else
            {
              _os_log_impl(&dword_23DAB4000, v169, (os_log_type_t)v168, "HeadphoneManager: Failed to remove the device", v154, v167);
              v151 = 0;
              destroyStorage<A>(_:count:)(v155, 0, v152);
              destroyStorage<A>(_:count:)(v156, v151, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24263B020](v154, MEMORY[0x24BEE4260]);
              swift_bridgeObjectRelease();
            }
          }
          else
          {
            swift_bridgeObjectRelease();
          }

          v201(v261, v256);
        }
        v78 = swift_bridgeObjectRelease();
      }
      v291[0] = (*(uint64_t (**)(uint64_t))((*v255 & *MEMORY[0x24BEE4EA0]) + 0x168))(v78);
      if (v291[0])
      {
        v128 = v291;
        v129 = (id)v291[0];
        swift_unknownObjectRetain();
        outlined destroy of CBDeviceReporting?();
        swift_getObjectType();
        v130 = objc_msgSend(v129, sel_deviceLostHandler);
        if (v130)
        {
          v127 = v130;
          v124 = v130;
          v86 = swift_allocObject();
          v87 = v253;
          *(_QWORD *)(v86 + 16) = v124;
          v125 = v87;
          v126 = v86;
        }
        else
        {
          v125 = 0;
          v126 = 0;
        }
        v123 = v126;
        v122 = v125;
        swift_unknownObjectRelease();
        v132 = v122;
        v133 = (void (*)(_QWORD))v123;
      }
      else
      {
        v131 = 0;
        outlined destroy of CBDeviceReporting?();
        v132 = v131;
        v133 = (void (*)(_QWORD))v131;
      }
      v120 = v133;
      v121 = v132;
      if (v132)
      {
        v118 = v121;
        v119 = v120;
        v117 = v120;
        v116 = v121;
        v289 = v121;
        v290 = v120;
        swift_retain();
        v116((uint64_t)v215);
        swift_release();
        swift_release();
      }
      outlined consume of Data._Representation(v185, v184);

    }
  }
  else
  {
    v12 = v267;
    v13 = Logger.shared.unsafeMutableAddressor();
    ((void (*)(char *, uint64_t, uint64_t))v257[2])(v12, v13, v256);
    v14 = v252;
    v240 = 7;
    v241 = swift_allocObject();
    *(_QWORD *)(v241 + 16) = v252;
    v249 = Logger.logObject.getter();
    v250 = static os_log_type_t.error.getter();
    v236 = &v308;
    v308 = 12;
    v234 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v235 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v237 = v309;
    v238 = 17;
    v243 = swift_allocObject();
    *(_BYTE *)(v243 + 16) = 64;
    v244 = swift_allocObject();
    *(_BYTE *)(v244 + 16) = 8;
    v239 = 32;
    v15 = swift_allocObject();
    v16 = v241;
    v242 = v15;
    *(_QWORD *)(v15 + 16) = partial apply for implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery();
    *(_QWORD *)(v15 + 24) = v16;
    v17 = swift_allocObject();
    v18 = v242;
    v246 = v17;
    *(_QWORD *)(v17 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
    *(_QWORD *)(v17 + 24) = v18;
    v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v245 = _allocateUninitializedArray<A>(_:)();
    v247 = v19;
    swift_retain();
    v20 = v243;
    v21 = v247;
    *v247 = closure #1 in OSLogArguments.append(_:)partial apply;
    v21[1] = v20;
    swift_retain();
    v22 = v244;
    v23 = v247;
    v247[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v23[3] = v22;
    swift_retain();
    v24 = v246;
    v25 = v247;
    v247[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v25[5] = v24;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v249, (os_log_type_t)v250))
    {
      v93 = v254;
      v96 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v97 = createStorage<A>(capacity:type:)(1);
      v98 = createStorage<A>(capacity:type:)(0);
      v99 = &v307;
      v307 = v96;
      v100 = &v306;
      v306 = v97;
      v101 = &v305;
      v305 = v98;
      serialize(_:at:)(2, &v307);
      serialize(_:at:)(1, v99);
      v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v304 = v243;
      closure #1 in osLogInternal(_:log:type:)(&v303, (uint64_t)v99, (uint64_t)v100, (uint64_t)v101);
      v102 = v93;
      if (v93)
      {
        __break(1u);
      }
      else
      {
        v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v304 = v244;
        closure #1 in osLogInternal(_:log:type:)(&v303, (uint64_t)&v307, (uint64_t)&v306, (uint64_t)&v305);
        v94[1] = 0;
        v303 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v304 = v246;
        closure #1 in osLogInternal(_:log:type:)(&v303, (uint64_t)&v307, (uint64_t)&v306, (uint64_t)&v305);
        _os_log_impl(&dword_23DAB4000, v249, (os_log_type_t)v250, "HeadphoneManager: AAF Device: %@ is missing cbDevice early exit lost handler", v96, v237);
        destroyStorage<A>(_:count:)(v97, 1, v95);
        destroyStorage<A>(_:count:)(v98, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v96, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    ((void (*)(char *, uint64_t))v257[1])(v267, v256);
  }
}

void *implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t countAndFlagsBits;

  v7 = objc_msgSend(a1, sel_name);
  if (v7)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v1;

    v5 = v3;
    v6 = v4;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  if (v6)
    return v5;
  countAndFlagsBits = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("<Null>", 6uLL, 1)._countAndFlagsBits;
  outlined destroy of String?();
  return countAndFlagsBits;
}

void closure #3 in Headphone_Manager.configCBDiscovery()(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  id v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  id *v22;
  id v23;
  uint64_t v24;
  id *v25;
  id v26;
  uint64_t v27;
  id *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id *v33;
  uint64_t v34;
  id v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  _BYTE **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint32_t v64;
  uint64_t v65;
  int v66;
  NSObject *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72[2];
  _QWORD *v73;
  id v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint32_t v78;
  uint64_t v79;

  v56 = a1;
  v79 = 0;
  v55 = 0;
  v65 = 0;
  v60 = type metadata accessor for Logger();
  v59 = *(_QWORD *)(v60 - 8);
  v57 = (*(_QWORD *)(v59 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)&v21 - v57;
  v58 = (char *)&v21 - v57;
  v79 = MEMORY[0x24BDAC7A8](v56, v1) + 16;
  v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v2, v3, v60);
  v67 = Logger.logObject.getter();
  v66 = static os_log_type_t.error.getter();
  v63 = &v77;
  v77 = 2;
  v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v62 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v64 = v78;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v68 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v67, (os_log_type_t)v66))
  {
    v4 = v55;
    v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v43 = 0;
    v45 = createStorage<A>(capacity:type:)(0);
    v46 = createStorage<A>(capacity:type:)(v43);
    v50 = v72;
    v72[0] = v44;
    v51 = &v71;
    v71 = v45;
    v48 = &v70;
    v70 = v46;
    v47 = 0;
    serialize(_:at:)(0, v72);
    serialize(_:at:)(v47, v50);
    v69 = v68;
    v49 = &v21;
    MEMORY[0x24BDAC7A8](&v21, v5);
    v6 = v51;
    v7 = &v21 - 6;
    v52 = &v21 - 6;
    v7[2] = (uint64_t)v50;
    v7[3] = (uint64_t)v6;
    v7[4] = v8;
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    v54 = v4;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_23DAB4000, v67, (os_log_type_t)v66, "HeadphoneManager: AAF interruptionHandler! Retrying to standup discovery stack", v44, v64);
      v40 = 0;
      destroyStorage<A>(_:count:)(v45, 0, v42);
      destroyStorage<A>(_:count:)(v46, v40, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v44, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v41 = v54;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v41 = v55;
  }
  v38 = v41;

  (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
  v39 = v56 + 16;
  swift_beginAccess();
  v76 = (_QWORD *)MEMORY[0x24263B794](v39);
  if (v76)
  {
    v9 = v38;
    v33 = (id *)&v76;
    v10 = v76;
    v35 = v76;
    v11 = v76;
    outlined destroy of Headphone_Manager?(v33);
    v12 = swift_endAccess();
    v34 = (*(uint64_t (**)(uint64_t))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x180))(v12);
    type metadata accessor for HeadphoneDevice();
    v36 = (_BYTE *)Dictionary.values.getter();

    v72[1] = v36;
    swift_retain();
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HeadphoneDevice].Values);
    lazy protocol witness table accessor for type [String : HeadphoneDevice].Values and conformance [A : B].Values();
    Sequence.forEach(_:)();
    if (v9)
    {
      __break(1u);
      return;
    }
    swift_release();
    outlined destroy of [String : HeadphoneDevice].Values();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v76);
    swift_endAccess();
  }
  v32 = v56 + 16;
  swift_beginAccess();
  v75 = (_QWORD *)MEMORY[0x24263B794](v32);
  if (v75)
  {
    v28 = (id *)&v75;
    v13 = v75;
    v31 = v75;
    v14 = v75;
    outlined destroy of Headphone_Manager?(v28);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
    v29 = 0;
    v30 = _allocateUninitializedArray<A>(_:)();
    type metadata accessor for HeadphoneDevice();
    v15 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v13 & *MEMORY[0x24BEE4EA0]) + 0x188))(v15);

  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v75);
    swift_endAccess();
  }
  v27 = v56 + 16;
  swift_beginAccess();
  v74 = (id)MEMORY[0x24263B794](v27);
  if (v74)
  {
    v25 = &v74;
    v26 = v74;
    v16 = v74;
    outlined destroy of Headphone_Manager?(v25);
    swift_endAccess();
    type metadata accessor for AADeviceManager();
    v17 = AADeviceManager.__allocating_init()();
    Headphone_Manager.deviceManger.setter(v17);

  }
  else
  {
    outlined destroy of Headphone_Manager?(&v74);
    swift_endAccess();
  }
  v24 = v56 + 16;
  swift_beginAccess();
  v73 = (_QWORD *)MEMORY[0x24263B794](v24);
  if (v73)
  {
    v22 = (id *)&v73;
    v18 = v73;
    v23 = v73;
    v19 = v73;
    outlined destroy of Headphone_Manager?(v22);
    v20 = swift_endAccess();
    (*(void (**)(uint64_t))((*v18 & *MEMORY[0x24BEE4EA0]) + 0x1B0))(v20);

  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v73);
    swift_endAccess();
  }
}

void closure #1 in closure #3 in Headphone_Manager.configCBDiscovery()(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;

  v19 = 0;
  v18 = 0;
  v17 = 0;
  v19 = *a1;
  v18 = a2 + 16;
  v13 = (*(uint64_t (**)(void))((*v19 & *MEMORY[0x24BEE4EA0]) + 0xA20))();
  v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 752))(v13);
  if (v14)
  {
    v17 = v14;
    swift_release();
    swift_beginAccess();
    v16 = (_QWORD *)MEMORY[0x24263B794](a2 + 16);
    if (v16)
    {
      v2 = v16;
      v9 = v16;
      v3 = v16;
      outlined destroy of Headphone_Manager?((id *)&v16);
      v4 = swift_endAccess();
      v10 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x24BEE4EA0]) + 0x120))(v4);

      v11 = objc_msgSend(v10, sel_deviceLostHandler);
      if (v11)
      {
        v5 = swift_allocObject();
        *(_QWORD *)(v5 + 16) = v11;
        v7 = thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply;
        v8 = v5;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v15[0] = v7;
      v15[1] = v8;
      if (v7)
      {
        v6 = (void (*)(uint64_t))v15[0];
        swift_retain();
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);

        v6((uint64_t)v14);
        swift_release();
      }
      else
      {
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);

      }
    }
    else
    {
      outlined destroy of Headphone_Manager?((id *)&v16);
      swift_endAccess();
    }

  }
  else
  {
    swift_release();
  }
}

void closure #4 in Headphone_Manager.configCBDiscovery()(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  id *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id *v22;
  uint64_t v23;
  id v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t *v37;
  uint64_t *v38;
  _BYTE **v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint32_t v53;
  uint64_t v54;
  int v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61[2];
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  uint32_t v65;
  uint64_t v66;

  v45 = a1;
  v66 = 0;
  v44 = 0;
  v54 = 0;
  v49 = type metadata accessor for Logger();
  v48 = *(_QWORD *)(v49 - 8);
  v46 = (*(_QWORD *)(v48 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = (char *)&v16 - v46;
  v47 = (char *)&v16 - v46;
  v66 = MEMORY[0x24BDAC7A8](v45, v1) + 16;
  v3 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v2, v3, v49);
  v56 = Logger.logObject.getter();
  v55 = static os_log_type_t.error.getter();
  v52 = &v64;
  v64 = 2;
  v50 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v51 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v53 = v65;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v57 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v56, (os_log_type_t)v55))
  {
    v4 = v44;
    v33 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v32 = 0;
    v34 = createStorage<A>(capacity:type:)(0);
    v35 = createStorage<A>(capacity:type:)(v32);
    v39 = v61;
    v61[0] = v33;
    v40 = &v60;
    v60 = v34;
    v37 = &v59;
    v59 = v35;
    v36 = 0;
    serialize(_:at:)(0, v61);
    serialize(_:at:)(v36, v39);
    v58 = v57;
    v38 = &v16;
    MEMORY[0x24BDAC7A8](&v16, v5);
    v6 = v40;
    v7 = &v16 - 6;
    v41 = &v16 - 6;
    v7[2] = (uint64_t)v39;
    v7[3] = (uint64_t)v6;
    v7[4] = v8;
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    v43 = v4;
    if (v4)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_23DAB4000, v56, (os_log_type_t)v55, "HeadphoneManager: AAF invalidationHandler! Retrying to standup discovery stack", v33, v53);
      v29 = 0;
      destroyStorage<A>(_:count:)(v34, 0, v31);
      destroyStorage<A>(_:count:)(v35, v29, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v33, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
      v30 = v43;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v30 = v44;
  }
  v27 = v30;

  (*(void (**)(char *, uint64_t))(v48 + 8))(v47, v49);
  v28 = v45 + 16;
  swift_beginAccess();
  v63 = (_QWORD *)MEMORY[0x24263B794](v28);
  if (v63)
  {
    v9 = v27;
    v22 = (id *)&v63;
    v10 = v63;
    v24 = v63;
    v11 = v63;
    outlined destroy of Headphone_Manager?(v22);
    v12 = swift_endAccess();
    v23 = (*(uint64_t (**)(uint64_t))((*v10 & *MEMORY[0x24BEE4EA0]) + 0x180))(v12);
    type metadata accessor for HeadphoneDevice();
    v25 = (_BYTE *)Dictionary.values.getter();

    v61[1] = v25;
    swift_retain();
    v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : HeadphoneDevice].Values);
    lazy protocol witness table accessor for type [String : HeadphoneDevice].Values and conformance [A : B].Values();
    Sequence.forEach(_:)();
    if (v9)
    {
      __break(1u);
      return;
    }
    swift_release();
    outlined destroy of [String : HeadphoneDevice].Values();
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v63);
    swift_endAccess();
  }
  v21 = v45 + 16;
  swift_beginAccess();
  v62 = (_QWORD *)MEMORY[0x24263B794](v21);
  if (v62)
  {
    v17 = (id *)&v62;
    v13 = v62;
    v20 = v62;
    v14 = v62;
    outlined destroy of Headphone_Manager?(v17);
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, HeadphoneDevice));
    v18 = 0;
    v19 = _allocateUninitializedArray<A>(_:)();
    type metadata accessor for HeadphoneDevice();
    v15 = Dictionary.init(dictionaryLiteral:)();
    (*(void (**)(uint64_t))((*v13 & *MEMORY[0x24BEE4EA0]) + 0x188))(v15);

  }
  else
  {
    outlined destroy of Headphone_Manager?((id *)&v62);
    swift_endAccess();
  }
}

void closure #1 in closure #4 in Headphone_Manager.configCBDiscovery()(_QWORD **a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v13;
  void *v14;
  _QWORD v15[2];
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;

  v19 = 0;
  v18 = 0;
  v17 = 0;
  v19 = *a1;
  v18 = a2 + 16;
  v13 = (*(uint64_t (**)(void))((*v19 & *MEMORY[0x24BEE4EA0]) + 0xA20))();
  v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 752))(v13);
  if (v14)
  {
    v17 = v14;
    swift_release();
    swift_beginAccess();
    v16 = (_QWORD *)MEMORY[0x24263B794](a2 + 16);
    if (v16)
    {
      v2 = v16;
      v9 = v16;
      v3 = v16;
      outlined destroy of Headphone_Manager?((id *)&v16);
      v4 = swift_endAccess();
      v10 = (id)(*(uint64_t (**)(uint64_t))((*v2 & *MEMORY[0x24BEE4EA0]) + 0x120))(v4);

      v11 = objc_msgSend(v10, sel_deviceLostHandler);
      if (v11)
      {
        v5 = swift_allocObject();
        *(_QWORD *)(v5 + 16) = v11;
        v7 = thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply;
        v8 = v5;
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      v15[0] = v7;
      v15[1] = v8;
      if (v7)
      {
        v6 = (void (*)(uint64_t))v15[0];
        swift_retain();
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);

        v6((uint64_t)v14);
        swift_release();
      }
      else
      {
        outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v15);

      }
    }
    else
    {
      outlined destroy of Headphone_Manager?((id *)&v16);
      swift_endAccess();
    }

  }
  else
  {
    swift_release();
  }
}

void closure #5 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t *v32;
  uint32_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  void *v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint32_t v61;
  void *v62;
  id v63;

  v54 = a1;
  v63 = 0;
  v62 = 0;
  v49 = 0;
  v50 = type metadata accessor for Logger();
  v51 = *(_QWORD *)(v50 - 8);
  v52 = (*(_QWORD *)(v51 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v53 = (char *)v20 - v52;
  v63 = (id)MEMORY[0x24BDAC7A8](v54, v1);
  v2 = v63;
  if (v54)
  {
    v48 = v54;
    v3 = v53;
    v29 = v54;
    v62 = v54;
    v4 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v3, v4, v50);
    v5 = v29;
    v37 = 7;
    v35 = swift_allocObject();
    *(_QWORD *)(v35 + 16) = v29;
    default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
    swift_bridgeObjectRelease();
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    v32 = &v60;
    v60 = 12;
    v30 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v31 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v33 = v61;
    v34 = 17;
    v40 = swift_allocObject();
    *(_BYTE *)(v40 + 16) = 64;
    v41 = swift_allocObject();
    *(_BYTE *)(v41 + 16) = 8;
    v36 = 32;
    v6 = swift_allocObject();
    v7 = v35;
    v38 = v6;
    *(_QWORD *)(v6 + 16) = partial apply for implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery();
    *(_QWORD *)(v6 + 24) = v7;
    v8 = swift_allocObject();
    v9 = v38;
    v39 = v8;
    *(_QWORD *)(v8 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
    *(_QWORD *)(v8 + 24) = v9;
    v10 = swift_allocObject();
    v11 = v39;
    v43 = v10;
    *(_QWORD *)(v10 + 16) = partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:);
    *(_QWORD *)(v10 + 24) = v11;
    v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v42 = _allocateUninitializedArray<A>(_:)();
    v44 = v12;
    swift_retain();
    v13 = v40;
    v14 = v44;
    *v44 = closure #1 in OSLogArguments.append(_:)partial apply;
    v14[1] = v13;
    swift_retain();
    v15 = v41;
    v16 = v44;
    v44[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v16[3] = v15;
    swift_retain();
    v17 = v43;
    v18 = v44;
    v44[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v18[5] = v17;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v46, (os_log_type_t)v47))
    {
      v19 = v49;
      v22 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v23 = createStorage<A>(capacity:type:)(1);
      v24 = createStorage<A>(capacity:type:)(0);
      v25 = &v59;
      v59 = v22;
      v26 = &v58;
      v58 = v23;
      v27 = &v57;
      v57 = v24;
      serialize(_:at:)(2, &v59);
      serialize(_:at:)(1, v25);
      v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v56 = v40;
      closure #1 in osLogInternal(_:log:type:)(&v55, (uint64_t)v25, (uint64_t)v26, (uint64_t)v27);
      v28 = v19;
      if (v19)
      {
        __break(1u);
      }
      else
      {
        v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v56 = v41;
        closure #1 in osLogInternal(_:log:type:)(&v55, (uint64_t)&v59, (uint64_t)&v58, (uint64_t)&v57);
        v20[1] = 0;
        v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v56 = v43;
        closure #1 in osLogInternal(_:log:type:)(&v55, (uint64_t)&v59, (uint64_t)&v58, (uint64_t)&v57);
        _os_log_impl(&dword_23DAB4000, v46, (os_log_type_t)v47, "HeadphoneManager: AAF Discovery Activation Failed: %@", v22, v33);
        destroyStorage<A>(_:count:)(v23, 1, v21);
        destroyStorage<A>(_:count:)(v24, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v22, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v51 + 8))(v53, v50);
  }
}

void *implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1)._countAndFlagsBits;
}

uint64_t Headphone_Manager.isAppleHeadphone(cbDevice:)(void *a1)
{
  id v1;
  char v3;
  BOOL v5;

  v5 = CBProductIDIsAppleHeadphone((int)objc_msgSend(a1, sel_productID));
  v1 = a1;
  if (v5)
  {
    objc_msgSend(a1, sel_vendorID);
    type metadata accessor for CBVendorID();
    lazy protocol witness table accessor for type CBVendorID and conformance CBVendorID();
    v3 = == infix<A>(_:_:)();
  }
  else
  {
    v3 = 0;
  }

  return v3 & 1;
}

void Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(char *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE **v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint32_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  int v76;
  _BOOL4 v77;
  _BOOL4 v78;
  uint64_t v79;
  void (*v80)(char *, uint64_t);
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE **v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  _QWORD *v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  id v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  uint32_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  NSObject *v125;
  int v126;
  uint64_t (*v127)(uint64_t, uint64_t, uint64_t);
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t (*v132)(uint64_t, uint64_t, uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136[2];
  uint32_t v137;
  uint64_t aBlock;
  int v139;
  int v140;
  uint64_t (*v141)(uint64_t, void *);
  void *v142;
  uint64_t (*v143)(void *);
  uint64_t v144;
  id v145;
  _QWORD v146[2];
  void *v147;
  uint64_t v148;
  uint32_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;

  v99 = a1;
  v108 = a2;
  v152 = 0;
  v151 = 0;
  v150 = 0;
  v97 = 0;
  v106 = type metadata accessor for Logger();
  v105 = *(_QWORD **)(v106 - 8);
  v101 = v105[8];
  v100 = (v101 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v99, v108);
  v102 = (char *)&v50 - v100;
  v103 = v100;
  v4 = MEMORY[0x24BDAC7A8](v2, v3);
  v5 = (char *)&v50 - v103;
  v104 = (char *)&v50 - v103;
  v152 = v4;
  v151 = v6;
  v150 = v7;
  v8 = Logger.shared.unsafeMutableAddressor();
  v107 = (void (*)(char *, uint64_t, uint64_t))v105[2];
  v107(v5, v8, v106);
  v9 = v108;
  v116 = 7;
  v117 = swift_allocObject();
  *(_QWORD *)(v117 + 16) = v108;
  v125 = Logger.logObject.getter();
  v126 = static os_log_type_t.default.getter();
  v111 = &v148;
  v148 = 12;
  v109 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v110 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v112 = lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v113 = v149;
  v114 = 17;
  v119 = swift_allocObject();
  *(_BYTE *)(v119 + 16) = 64;
  v120 = swift_allocObject();
  *(_BYTE *)(v120 + 16) = 8;
  v115 = 32;
  v10 = swift_allocObject();
  v11 = v117;
  v118 = v10;
  *(_QWORD *)(v10 + 16) = partial apply for implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
  *(_QWORD *)(v10 + 24) = v11;
  v12 = swift_allocObject();
  v13 = v118;
  v122 = v12;
  *(_QWORD *)(v12 + 16) = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_1;
  *(_QWORD *)(v12 + 24) = v13;
  v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v121 = _allocateUninitializedArray<A>(_:)();
  v123 = v14;
  swift_retain();
  v15 = v119;
  v16 = v123;
  *v123 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5;
  v16[1] = v15;
  swift_retain();
  v17 = v120;
  v18 = v123;
  v123[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v18[3] = v17;
  swift_retain();
  v19 = v122;
  v20 = v123;
  v123[4] = _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_1;
  v20[5] = v19;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v125, (os_log_type_t)v126))
  {
    v21 = v97;
    v90 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v91 = createStorage<A>(capacity:type:)(1);
    v92 = createStorage<A>(capacity:type:)(0);
    v93 = &v131;
    v131 = v90;
    v94 = &v130;
    v130 = v91;
    v95 = &v129;
    v129 = v92;
    serialize(_:at:)(2, &v131);
    serialize(_:at:)(1, v93);
    v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5;
    v128 = v119;
    closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)v93, (uint64_t)v94, (uint64_t)v95);
    v96 = v21;
    if (v21)
    {
      __break(1u);
    }
    else
    {
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v128 = v120;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v131, (uint64_t)&v130, (uint64_t)&v129);
      v87 = 0;
      v23 = v87;
      v127 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_1;
      v128 = v122;
      closure #1 in osLogInternal(_:log:type:)(&v127, (uint64_t)&v131, (uint64_t)&v130, (uint64_t)&v129);
      v86 = v23;
      _os_log_impl(&dword_23DAB4000, v125, (os_log_type_t)v126, "HeadphoneManager: Update Device Config: %@", v90, v113);
      destroyStorage<A>(_:count:)(v91, 1, v89);
      destroyStorage<A>(_:count:)(v92, 0, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v90, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
      v88 = v86;
    }
  }
  else
  {
    v22 = v97;
    swift_release();
    swift_release();
    swift_release();
    v88 = v22;
  }
  v24 = (uint64_t *)v99;
  v79 = v88;

  v80 = (void (*)(char *, uint64_t))v105[1];
  v80(v104, v106);
  v25 = *v24;
  v81 = (_QWORD *)MEMORY[0x24BEE4EA0];
  (*(void (**)(uint64_t))((v25 & *MEMORY[0x24BEE4EA0]) + 0x260))(1);
  v26 = v98;
  v82 = *(_QWORD *)&v99[OBJC_IVAR___HPMHeadphoneDevice_btAddress];
  v83 = *(_QWORD *)&v99[OBJC_IVAR___HPMHeadphoneDevice_btAddress + 8];
  v27 = swift_bridgeObjectRetain();
  v84 = (*(uint64_t (**)(uint64_t))((*v26 & *v81) + 0x180))(v27);
  v85 = v146;
  v146[0] = v82;
  v146[1] = v83;
  v28 = type metadata accessor for HeadphoneDevice();
  MEMORY[0x24263AD5C](&v147, v85, v84, MEMORY[0x24BEE0D00], v28, MEMORY[0x24BEE0D10]);
  outlined destroy of String();
  v145 = v147;
  v78 = v147 == 0;
  v77 = v78;
  outlined destroy of HeadphoneDevice?(&v145);
  v29 = swift_bridgeObjectRelease();
  if (v77)
  {
    v30 = v102;
    v31 = Logger.shared.unsafeMutableAddressor();
    v107(v30, v31, v106);
    v32 = v99;
    v67 = 7;
    v68 = swift_allocObject();
    *(_QWORD *)(v68 + 16) = v99;
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.error.getter();
    v136[1] = (_BYTE *)12;
    UnsignedInteger<>.init<A>(_:)();
    v64 = v137;
    v65 = 17;
    v70 = swift_allocObject();
    *(_BYTE *)(v70 + 16) = 32;
    v71 = swift_allocObject();
    *(_BYTE *)(v71 + 16) = 8;
    v66 = 32;
    v33 = swift_allocObject();
    v34 = v68;
    v69 = v33;
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
    *(_QWORD *)(v33 + 24) = v34;
    v35 = swift_allocObject();
    v36 = v69;
    v73 = v35;
    *(_QWORD *)(v35 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_5;
    *(_QWORD *)(v35 + 24) = v36;
    v72 = _allocateUninitializedArray<A>(_:)();
    v74 = v37;
    swift_retain();
    v38 = v70;
    v39 = v74;
    *v74 = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[1] = v38;
    swift_retain();
    v40 = v71;
    v41 = v74;
    v74[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v41[3] = v40;
    swift_retain();
    v42 = v73;
    v43 = v74;
    v74[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5;
    v43[5] = v42;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v75, (os_log_type_t)v76))
    {
      v44 = v79;
      v57 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v58 = createStorage<A>(capacity:type:)(0);
      v59 = createStorage<A>(capacity:type:)(1);
      v60 = v136;
      v136[0] = v57;
      v61 = &v135;
      v135 = v58;
      v62 = &v134;
      v134 = v59;
      serialize(_:at:)(2, v136);
      serialize(_:at:)(1, v60);
      v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v133 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)v60, (uint64_t)v61, (uint64_t)v62);
      v63 = v44;
      if (v44)
      {
        __break(1u);
      }
      else
      {
        v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v133 = v71;
        closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)v136, (uint64_t)&v135, (uint64_t)&v134);
        v55 = 0;
        v132 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5;
        v133 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v132, (uint64_t)v136, (uint64_t)&v135, (uint64_t)&v134);
        _os_log_impl(&dword_23DAB4000, v75, (os_log_type_t)v76, "HeadphoneManager: Update Device Config, Device Not Connected with UUID: %s", v57, v64);
        destroyStorage<A>(_:count:)(v58, 0, v56);
        destroyStorage<A>(_:count:)(v59, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v57, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    v80(v102, v106);
  }
  else
  {
    v45 = *v98;
    v51 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v54 = (id)(*(uint64_t (**)(uint64_t))((v45 & *MEMORY[0x24BEE4EA0]) + 0xF0))(v29);
    v53 = (id)(*(uint64_t (**)(void))((*(_QWORD *)v99 & *v51) + 0x210))();
    v46 = v108;
    v47 = v99;
    v48 = swift_allocObject();
    v49 = v99;
    *(_QWORD *)(v48 + 16) = v108;
    *(_QWORD *)(v48 + 24) = v49;
    v143 = partial apply for closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
    v144 = v48;
    aBlock = MEMORY[0x24BDAC760];
    v139 = 1107296256;
    v140 = 0;
    v141 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
    v142 = &block_descriptor_50;
    v52 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v54, sel_modifyDevice_settings_completion_, v53, v108, v52);
    _Block_release(v52);

  }
}

void *implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

uint64_t implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + OBJC_IVAR___HPMHeadphoneDevice_btAddress);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE **v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE **v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint32_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  NSObject *v75;
  int v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t *v79;
  uint32_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  NSObject *v92;
  int v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  char *v103;
  void *v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint32_t v111;
  void *v112;
  uint64_t (*v113)(uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  uint32_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;

  v104 = a1;
  v97 = a2;
  v96 = a3;
  v122 = 0;
  v121 = 0;
  v120 = 0;
  v95 = 0;
  v112 = 0;
  v98 = type metadata accessor for Logger();
  v99 = *(_QWORD *)(v98 - 8);
  v100 = (*(_QWORD *)(v99 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v104, v97);
  v101 = (char *)v41 - v100;
  v102 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (void *)MEMORY[0x24BDAC7A8](v3, v5);
  v103 = (char *)v41 - v102;
  v122 = v6;
  v121 = v7;
  v120 = v8;
  v9 = v6;
  if (v104)
  {
    v94 = v104;
    v24 = v101;
    v59 = v104;
    v112 = v104;
    v25 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v24, v25, v98);
    v26 = v59;
    v66 = 7;
    v67 = swift_allocObject();
    *(_QWORD *)(v67 + 16) = v59;
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.error.getter();
    v62 = &v110;
    v110 = 12;
    v60 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v63 = v111;
    v64 = 17;
    v69 = swift_allocObject();
    *(_BYTE *)(v69 + 16) = 32;
    v70 = swift_allocObject();
    *(_BYTE *)(v70 + 16) = 8;
    v65 = 32;
    v27 = swift_allocObject();
    v28 = v67;
    v68 = v27;
    *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
    *(_QWORD *)(v27 + 24) = v28;
    v29 = swift_allocObject();
    v30 = v68;
    v72 = v29;
    *(_QWORD *)(v29 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v29 + 24) = v30;
    v74 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v71 = _allocateUninitializedArray<A>(_:)();
    v73 = v31;
    swift_retain();
    v32 = v69;
    v33 = v73;
    *v73 = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[1] = v32;
    swift_retain();
    v34 = v70;
    v35 = v73;
    v73[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[3] = v34;
    swift_retain();
    v36 = v72;
    v37 = v73;
    v73[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v75, (os_log_type_t)v76))
    {
      v38 = v95;
      v52 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v53 = createStorage<A>(capacity:type:)(0);
      v54 = createStorage<A>(capacity:type:)(1);
      v55 = &v109;
      v109 = v52;
      v56 = &v108;
      v108 = v53;
      v57 = &v107;
      v107 = v54;
      serialize(_:at:)(2, &v109);
      serialize(_:at:)(1, v55);
      v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v106 = v69;
      closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)v55, (uint64_t)v56, (uint64_t)v57);
      v58 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v106 = v70;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v109, (uint64_t)&v108, (uint64_t)&v107);
        v50 = 0;
        v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v106 = v72;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)&v109, (uint64_t)&v108, (uint64_t)&v107);
        _os_log_impl(&dword_23DAB4000, v75, (os_log_type_t)v76, "HeadphoneManager: Update Device Config Failed, Error: %s", v52, v63);
        destroyStorage<A>(_:count:)(v53, 0, v51);
        destroyStorage<A>(_:count:)(v54, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v52, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v98);
  }
  else
  {
    v10 = v103;
    v11 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v10, v11, v98);
    v12 = v97;
    v83 = 7;
    v84 = swift_allocObject();
    *(_QWORD *)(v84 + 16) = v97;
    v92 = Logger.logObject.getter();
    v93 = static os_log_type_t.default.getter();
    v79 = &v118;
    v118 = 12;
    v77 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v78 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v80 = v119;
    v81 = 17;
    v86 = swift_allocObject();
    *(_BYTE *)(v86 + 16) = 64;
    v87 = swift_allocObject();
    *(_BYTE *)(v87 + 16) = 8;
    v82 = 32;
    v13 = swift_allocObject();
    v14 = v84;
    v85 = v13;
    *(_QWORD *)(v13 + 16) = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:);
    *(_QWORD *)(v13 + 24) = v14;
    v15 = swift_allocObject();
    v16 = v85;
    v89 = v15;
    *(_QWORD *)(v15 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)partial apply;
    *(_QWORD *)(v15 + 24) = v16;
    v91 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v88 = _allocateUninitializedArray<A>(_:)();
    v90 = v17;
    swift_retain();
    v18 = v86;
    v19 = v90;
    *v90 = closure #1 in OSLogArguments.append(_:)partial apply;
    v19[1] = v18;
    swift_retain();
    v20 = v87;
    v21 = v90;
    v90[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v21[3] = v20;
    swift_retain();
    v22 = v89;
    v23 = v90;
    v90[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v23[5] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v92, (os_log_type_t)v93))
    {
      v39 = v95;
      v43 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v44 = createStorage<A>(capacity:type:)(1);
      v45 = createStorage<A>(capacity:type:)(0);
      v46 = &v117;
      v117 = v43;
      v47 = &v116;
      v116 = v44;
      v48 = &v115;
      v115 = v45;
      serialize(_:at:)(2, &v117);
      serialize(_:at:)(1, v46);
      v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v114 = v86;
      closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)v46, (uint64_t)v47, (uint64_t)v48);
      v49 = v39;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v114 = v87;
        closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v117, (uint64_t)&v116, (uint64_t)&v115);
        v41[1] = 0;
        v113 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v114 = v89;
        closure #1 in osLogInternal(_:log:type:)(&v113, (uint64_t)&v117, (uint64_t)&v116, (uint64_t)&v115);
        _os_log_impl(&dword_23DAB4000, v92, (os_log_type_t)v93, "HeadphoneManager: Successfully Updated Device Config: %@", v43, v80);
        destroyStorage<A>(_:count:)(v44, 1, v42);
        destroyStorage<A>(_:count:)(v45, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v43, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v103, v98);
  }
  return (*(uint64_t (**)(_QWORD))((*v96 & *MEMORY[0x24BEE4EA0]) + 0x260))(0);
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

void *implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

void Headphone_Manager.disconnect(hpDevice:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  _QWORD *v9;
  const void *v11;
  id v12;
  uint64_t aBlock;
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, void *);
  void *v17;
  void (*v18)(void *);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;

  v21 = a1;
  v20 = v1;
  v8 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x24BEE4EA0]) + 0x108))();
  v6 = (id)(*(uint64_t (**)(void))((*a1 & *v8) + 0x210))();
  objc_msgSend(v5, sel_setPeerDevice_);

  v7 = (id)(*(uint64_t (**)(void))((*v9 & *v8) + 0x108))();
  objc_msgSend(v7, sel_setServiceFlags_, 0xFFFFFFFFLL);

  v12 = (id)(*(uint64_t (**)(void))((*v9 & *v8) + 0x108))();
  v2 = a1;
  v3 = v9;
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = v9;
  v18 = partial apply for closure #1 in Headphone_Manager.disconnect(hpDevice:);
  v19 = v4;
  aBlock = MEMORY[0x24BDAC760];
  v14 = 1107296256;
  v15 = 0;
  v16 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v17 = &block_descriptor_73;
  v11 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v12, sel_disconnectWithCompletion_, v11);
  _Block_release(v11);

}

void closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1, void *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42[2];
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE **v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE **v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint32_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  NSObject *v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  uint32_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  NSObject *v93;
  int v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  unint64_t v103;
  char *v104;
  void *v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  uint64_t v111;
  uint32_t v112;
  void *v113;
  uint64_t (*v114)(uint64_t, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint32_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;

  v105 = a1;
  v98 = a2;
  v97 = a3;
  v123 = 0;
  v122 = 0;
  v121 = 0;
  v96 = 0;
  v113 = 0;
  v99 = type metadata accessor for Logger();
  v100 = *(_QWORD *)(v99 - 8);
  v101 = (*(_QWORD *)(v100 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3 = MEMORY[0x24BDAC7A8](v105, v98);
  v102 = (char *)v42 - v101;
  v103 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = (void *)MEMORY[0x24BDAC7A8](v3, v5);
  v104 = (char *)v42 - v103;
  v123 = v6;
  v122 = v7;
  v121 = v8;
  v9 = v6;
  if (v105)
  {
    v95 = v105;
    v24 = v102;
    v60 = v105;
    v113 = v105;
    v25 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v24, v25, v99);
    v26 = v60;
    v67 = 7;
    v68 = swift_allocObject();
    *(_QWORD *)(v68 + 16) = v60;
    v76 = Logger.logObject.getter();
    v77 = static os_log_type_t.error.getter();
    v63 = &v111;
    v111 = 12;
    v61 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v62 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v64 = v112;
    v65 = 17;
    v70 = swift_allocObject();
    *(_BYTE *)(v70 + 16) = 32;
    v71 = swift_allocObject();
    *(_BYTE *)(v71 + 16) = 8;
    v66 = 32;
    v27 = swift_allocObject();
    v28 = v68;
    v69 = v27;
    *(_QWORD *)(v27 + 16) = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:);
    *(_QWORD *)(v27 + 24) = v28;
    v29 = swift_allocObject();
    v30 = v69;
    v73 = v29;
    *(_QWORD *)(v29 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v29 + 24) = v30;
    v75 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v72 = _allocateUninitializedArray<A>(_:)();
    v74 = v31;
    swift_retain();
    v32 = v70;
    v33 = v74;
    *v74 = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[1] = v32;
    swift_retain();
    v34 = v71;
    v35 = v74;
    v74[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[3] = v34;
    swift_retain();
    v36 = v73;
    v37 = v74;
    v74[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v37[5] = v36;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v76, (os_log_type_t)v77))
    {
      v38 = v96;
      v53 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v54 = createStorage<A>(capacity:type:)(0);
      v55 = createStorage<A>(capacity:type:)(1);
      v56 = &v110;
      v110 = v53;
      v57 = &v109;
      v109 = v54;
      v58 = &v108;
      v108 = v55;
      serialize(_:at:)(2, &v110);
      serialize(_:at:)(1, v56);
      v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v107 = v70;
      closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)v56, (uint64_t)v57, (uint64_t)v58);
      v59 = v38;
      if (v38)
      {
        __break(1u);
      }
      else
      {
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v107 = v71;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        v51 = 0;
        v106 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v107 = v73;
        closure #1 in osLogInternal(_:log:type:)(&v106, (uint64_t)&v110, (uint64_t)&v109, (uint64_t)&v108);
        _os_log_impl(&dword_23DAB4000, v76, (os_log_type_t)v77, "HeadphoneManager: Disconnect Failed, Error: %s", v53, v64);
        destroyStorage<A>(_:count:)(v54, 0, v52);
        destroyStorage<A>(_:count:)(v55, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v53, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v99);
  }
  else
  {
    v10 = v104;
    v11 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v10, v11, v99);
    v12 = v98;
    v84 = 7;
    v85 = swift_allocObject();
    *(_QWORD *)(v85 + 16) = v98;
    v93 = Logger.logObject.getter();
    v94 = static os_log_type_t.default.getter();
    v80 = &v119;
    v119 = 12;
    v78 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v79 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v81 = v120;
    v82 = 17;
    v87 = swift_allocObject();
    *(_BYTE *)(v87 + 16) = 32;
    v88 = swift_allocObject();
    *(_BYTE *)(v88 + 16) = 8;
    v83 = 32;
    v13 = swift_allocObject();
    v14 = v85;
    v86 = v13;
    *(_QWORD *)(v13 + 16) = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:);
    *(_QWORD *)(v13 + 24) = v14;
    v15 = swift_allocObject();
    v16 = v86;
    v90 = v15;
    *(_QWORD *)(v15 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v15 + 24) = v16;
    v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v89 = _allocateUninitializedArray<A>(_:)();
    v91 = v17;
    swift_retain();
    v18 = v87;
    v19 = v91;
    *v91 = closure #1 in OSLogArguments.append(_:)partial apply;
    v19[1] = v18;
    swift_retain();
    v20 = v88;
    v21 = v91;
    v91[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v21[3] = v20;
    swift_retain();
    v22 = v90;
    v23 = v91;
    v91[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v23[5] = v22;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v93, (os_log_type_t)v94))
    {
      v39 = v96;
      v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v45 = createStorage<A>(capacity:type:)(0);
      v46 = createStorage<A>(capacity:type:)(1);
      v47 = &v118;
      v118 = v44;
      v48 = &v117;
      v117 = v45;
      v49 = &v116;
      v116 = v46;
      serialize(_:at:)(2, &v118);
      serialize(_:at:)(1, v47);
      v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v115 = v87;
      closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)v47, (uint64_t)v48, (uint64_t)v49);
      v50 = v39;
      if (v39)
      {
        __break(1u);
      }
      else
      {
        v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v115 = v88;
        closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v118, (uint64_t)&v117, (uint64_t)&v116);
        v42[1] = 0;
        v114 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v115 = v90;
        closure #1 in osLogInternal(_:log:type:)(&v114, (uint64_t)&v118, (uint64_t)&v117, (uint64_t)&v116);
        _os_log_impl(&dword_23DAB4000, v93, (os_log_type_t)v94, "HeadphoneManager: Disconnected from %s", v44, v81);
        destroyStorage<A>(_:count:)(v45, 0, v43);
        destroyStorage<A>(_:count:)(v46, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v44, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v40 = v97;

    v41 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v104, v99);
    v42[0] = (id)(*(uint64_t (**)(uint64_t))((*v40 & *MEMORY[0x24BEE4EA0]) + 0x108))(v41);
    objc_msgSend(v42[0], sel_invalidate);

  }
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(_QWORD *a1)
{
  (*(void (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x348))();
  return String.init<A>(describing:)();
}

void Headphone_Manager.unpair(hpDevice:)(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  const void *v6;
  id v7;
  id v8;
  uint64_t aBlock;
  int v10;
  int v11;
  uint64_t (*v12)(uint64_t, void *);
  void *v13;
  void (*v14)(void *);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v17 = a1;
  v16 = v1;
  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v8 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x24BEE4EA0]) + 0xF0))();
  v7 = (id)(*(uint64_t (**)(void))((*a1 & *v4) + 0x210))();
  v2 = a1;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = a1;
  v14 = partial apply for closure #1 in Headphone_Manager.unpair(hpDevice:);
  v15 = v3;
  aBlock = MEMORY[0x24BDAC760];
  v10 = 1107296256;
  v11 = 0;
  v12 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
  v13 = &block_descriptor_79;
  v6 = _Block_copy(&aBlock);
  swift_release();
  objc_msgSend(v8, sel_deleteDevice_completion_, v7, v6);
  _Block_release(v6);

}

void closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE **v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE **v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint32_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  NSObject *v72;
  int v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint32_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  NSObject *v89;
  int v90;
  void *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  void *v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint32_t v107;
  void *v108;
  uint64_t (*v109)(uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  uint64_t v114;
  uint32_t v115;
  uint64_t v116;
  void *v117;

  v100 = a1;
  v93 = a2;
  v117 = 0;
  v116 = 0;
  v92 = 0;
  v108 = 0;
  v94 = type metadata accessor for Logger();
  v95 = *(_QWORD *)(v94 - 8);
  v96 = (*(_QWORD *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2 = MEMORY[0x24BDAC7A8](v100, v93);
  v97 = (char *)v38 - v96;
  v98 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = (void *)MEMORY[0x24BDAC7A8](v2, v4);
  v99 = (char *)v38 - v98;
  v117 = v5;
  v116 = v6;
  v7 = v5;
  if (v100)
  {
    v91 = v100;
    v22 = v97;
    v56 = v100;
    v108 = v100;
    v23 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v22, v23, v94);
    v24 = v56;
    v63 = 7;
    v64 = swift_allocObject();
    *(_QWORD *)(v64 + 16) = v56;
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.error.getter();
    v59 = &v106;
    v106 = 12;
    v57 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v60 = v107;
    v61 = 17;
    v66 = swift_allocObject();
    *(_BYTE *)(v66 + 16) = 32;
    v67 = swift_allocObject();
    *(_BYTE *)(v67 + 16) = 8;
    v62 = 32;
    v25 = swift_allocObject();
    v26 = v64;
    v65 = v25;
    *(_QWORD *)(v25 + 16) = partial apply for implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:);
    *(_QWORD *)(v25 + 24) = v26;
    v27 = swift_allocObject();
    v28 = v65;
    v69 = v27;
    *(_QWORD *)(v27 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v27 + 24) = v28;
    v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v68 = _allocateUninitializedArray<A>(_:)();
    v70 = v29;
    swift_retain();
    v30 = v66;
    v31 = v70;
    *v70 = closure #1 in OSLogArguments.append(_:)partial apply;
    v31[1] = v30;
    swift_retain();
    v32 = v67;
    v33 = v70;
    v70[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v33[3] = v32;
    swift_retain();
    v34 = v69;
    v35 = v70;
    v70[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v35[5] = v34;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v72, (os_log_type_t)v73))
    {
      v36 = v92;
      v49 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v50 = createStorage<A>(capacity:type:)(0);
      v51 = createStorage<A>(capacity:type:)(1);
      v52 = &v105;
      v105 = v49;
      v53 = &v104;
      v104 = v50;
      v54 = &v103;
      v103 = v51;
      serialize(_:at:)(2, &v105);
      serialize(_:at:)(1, v52);
      v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v102 = v66;
      closure #1 in osLogInternal(_:log:type:)(&v101, (uint64_t)v52, (uint64_t)v53, (uint64_t)v54);
      v55 = v36;
      if (v36)
      {
        __break(1u);
      }
      else
      {
        v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v102 = v67;
        closure #1 in osLogInternal(_:log:type:)(&v101, (uint64_t)&v105, (uint64_t)&v104, (uint64_t)&v103);
        v47 = 0;
        v101 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v102 = v69;
        closure #1 in osLogInternal(_:log:type:)(&v101, (uint64_t)&v105, (uint64_t)&v104, (uint64_t)&v103);
        _os_log_impl(&dword_23DAB4000, v72, (os_log_type_t)v73, "HeadphoneManager: Forget this device Failed, Error: %s", v49, v60);
        destroyStorage<A>(_:count:)(v50, 0, v48);
        destroyStorage<A>(_:count:)(v51, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v49, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
  }
  else
  {
    v8 = v99;
    v9 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v8, v9, v94);
    v10 = v93;
    v80 = 7;
    v81 = swift_allocObject();
    *(_QWORD *)(v81 + 16) = v93;
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.default.getter();
    v76 = &v114;
    v114 = 12;
    v74 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v75 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v77 = v115;
    v78 = 17;
    v83 = swift_allocObject();
    *(_BYTE *)(v83 + 16) = 32;
    v84 = swift_allocObject();
    *(_BYTE *)(v84 + 16) = 8;
    v79 = 32;
    v11 = swift_allocObject();
    v12 = v81;
    v82 = v11;
    *(_QWORD *)(v11 + 16) = partial apply for implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:);
    *(_QWORD *)(v11 + 24) = v12;
    v13 = swift_allocObject();
    v14 = v82;
    v86 = v13;
    *(_QWORD *)(v13 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v13 + 24) = v14;
    v88 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v85 = _allocateUninitializedArray<A>(_:)();
    v87 = v15;
    swift_retain();
    v16 = v83;
    v17 = v87;
    *v87 = closure #1 in OSLogArguments.append(_:)partial apply;
    v17[1] = v16;
    swift_retain();
    v18 = v84;
    v19 = v87;
    v87[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v19[3] = v18;
    swift_retain();
    v20 = v86;
    v21 = v87;
    v87[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v21[5] = v20;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v89, (os_log_type_t)v90))
    {
      v37 = v92;
      v40 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v41 = createStorage<A>(capacity:type:)(0);
      v42 = createStorage<A>(capacity:type:)(1);
      v43 = &v113;
      v113 = v40;
      v44 = &v112;
      v112 = v41;
      v45 = &v111;
      v111 = v42;
      serialize(_:at:)(2, &v113);
      serialize(_:at:)(1, v43);
      v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v110 = v83;
      closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)v43, (uint64_t)v44, (uint64_t)v45);
      v46 = v37;
      if (v37)
      {
        __break(1u);
      }
      else
      {
        v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v110 = v84;
        closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v113, (uint64_t)&v112, (uint64_t)&v111);
        v38[1] = 0;
        v109 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v110 = v86;
        closure #1 in osLogInternal(_:log:type:)(&v109, (uint64_t)&v113, (uint64_t)&v112, (uint64_t)&v111);
        _os_log_impl(&dword_23DAB4000, v89, (os_log_type_t)v90, "HeadphoneManager: Forget %s", v40, v77);
        destroyStorage<A>(_:count:)(v41, 0, v39);
        destroyStorage<A>(_:count:)(v42, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v40, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v95 + 8))(v99, v94);
  }
}

uint64_t implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:)(_QWORD *a1)
{
  (*(void (**)(void))((*a1 & *MEMORY[0x24BEE4EA0]) + 0x348))();
  return String.init<A>(describing:)();
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance Headphone_Manager@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for Headphone_Manager();
  result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

Swift::Void __swiftcall Headphone_Manager.updateTitleBar()()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xC0))();
  if (v1)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v1, sel_updateTitleBar);
    swift_unknownObjectRelease();
  }
  else
  {
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
}

id *Headphone_Manager.addTopLevelEntry(hpDevice:)(uint64_t a1)
{
  _QWORD *v1;
  id *result;
  id v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x24BEE4EA0]) + 0xC0))();
  if (v4)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v4, sel_addTopLevelEntryWithHpDevice_, a1);
    return (id *)swift_unknownObjectRelease();
  }
  else
  {
    result = &v4;
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  return result;
}

id *Headphone_Manager.updateTopLevelEntry(hpDevice:)(uint64_t a1)
{
  _QWORD *v1;
  id *result;
  id v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x24BEE4EA0]) + 0xC0))();
  if (v4)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v4, sel_updateTopLevelEntryWithHpDevice_, a1);
    return (id *)swift_unknownObjectRelease();
  }
  else
  {
    result = &v4;
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  return result;
}

id *Headphone_Manager.removeTopLevelEntry(hpDevice:)(uint64_t a1)
{
  _QWORD *v1;
  id *result;
  id v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = a1;
  v5 = v1;
  v4 = (id)(*(uint64_t (**)(void))((*v1 & *MEMORY[0x24BEE4EA0]) + 0xC0))();
  if (v4)
  {
    swift_unknownObjectRetain();
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
    swift_getObjectType();
    objc_msgSend(v4, sel_removeTopLevelEntryWithHpDevice_, a1);
    return (id *)swift_unknownObjectRelease();
  }
  else
  {
    result = &v4;
    outlined destroy of HeadphoneMangerTopLevelEntryUIHandling?();
  }
  return result;
}

id @nonobjc CBDiscovery.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc CBController.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc CBConnection.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc AADeviceManager.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CBVendorID@<X0>(__int16 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = CBVendorID.init(rawValue:)(*a1);
  *(_WORD *)a2 = result;
  *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t CBVendorID.init(rawValue:)(__int16 a1)
{
  unsigned int v2;

  LOWORD(v2) = a1;
  BYTE2(v2) = 0;
  return v2;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CBVendorID@<X0>(_WORD *a1@<X8>)
{
  unsigned __int16 *v1;
  uint64_t result;

  result = CBVendorID.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t CBVendorID.rawValue.getter(uint64_t result)
{
  return (unsigned __int16)result;
}

uint64_t _s2os0A11LogInternal_3log4typeyAA12OSLogMessageV_So03OS_a1_D0CSo0a1_d1_E2_tatFyySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcXEfU_TA_0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

unint64_t type metadata accessor for CBDiscovery()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CBDiscovery;
  if (!lazy cache variable for type metadata for CBDiscovery)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBDiscovery);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for CBController()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CBController;
  if (!lazy cache variable for type metadata for CBController)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBController);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for CBConnection()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for CBConnection;
  if (!lazy cache variable for type metadata for CBConnection)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for CBConnection);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t type metadata accessor for AADeviceManager()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for AADeviceManager;
  if (!lazy cache variable for type metadata for AADeviceManager)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for AADeviceManager);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of CBDeviceReporting?()
{
  swift_unknownObjectRelease();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak HeadphoneMangerTopLevelEntryUIHandling?()
{
  swift_unknownObjectWeakDestroy();
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HMServiceClient?(id *a1)
{

}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of weak CBDeviceReporting?()
{
  swift_unknownObjectWeakDestroy();
}

uint64_t sub_23DB36640()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  uint64_t v1;

  closure #1 in Headphone_Manager.configCBDiscovery()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t sub_23DB366E0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #2 in Headphone_Manager.configCBDiscovery()(void *a1)
{
  uint64_t v1;

  closure #2 in Headphone_Manager.configCBDiscovery()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t sub_23DB36780()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #3 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  closure #3 in Headphone_Manager.configCBDiscovery()(v0);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

void partial apply for closure #4 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  closure #4 in Headphone_Manager.configCBDiscovery()(v0);
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t sub_23DB368E0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23DB36924()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()partial apply(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(_QWORD *)(v1 + 16));
}

{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned AudioAccessoryDevice) -> ()(a1, *(_QWORD *)(v1 + 16));
}

BOOL CBProductIDIsAppleHeadphone(int a1)
{
  return CBProductIDIsWx(a1) || CBProductIDIsMTK(a1);
}

uint64_t type metadata accessor for CBVendorID()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  v4 = lazy cache variable for type metadata for CBVendorID;
  if (!lazy cache variable for type metadata for CBVendorID)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    v4 = ForeignTypeMetadata;
    if (!v0)
    {
      v1 = ForeignTypeMetadata;
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for CBVendorID);
      return v1;
    }
  }
  return v4;
}

unint64_t lazy protocol witness table accessor for type CBVendorID and conformance CBVendorID()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type CBVendorID and conformance CBVendorID;
  if (!lazy protocol witness table cache variable for type CBVendorID and conformance CBVendorID)
  {
    v0 = type metadata accessor for CBVendorID();
    v1 = MEMORY[0x24263B698](&protocol conformance descriptor for CBVendorID, v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type CBVendorID and conformance CBVendorID);
    return v1;
  }
  return v3;
}

uint64_t sub_23DB36B24()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  uint64_t v0;

  return implicit closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void **)(v0 + 16));
}

void *implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  id v1;
  void *v3;

  a1();
  v3 = (void *)_swift_stdlib_bridgeErrorToNSError();
  v1 = v3;
  swift_unknownObjectRelease();
  return v3;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23DB36C80()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB36CB0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB36CE0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_1()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB36D28()
{
  swift_release();
  return swift_deallocObject();
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_1(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphoneDevice?(id *a1)
{

}

uint64_t sub_23DB36D98()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(void *a1)
{
  uint64_t v1;

  return closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(a1, *(void **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t sub_23DB36E44()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  uint64_t v0;

  return implicit closure #2 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_23DB36E88()
{
  return swift_deallocObject();
}

uint64_t sub_23DB36EB8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB36EE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_5()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB36F30()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_5(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB36F78()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in Headphone_Manager.disconnect(hpDevice:)(void *a1)
{
  uint64_t v1;

  closure #1 in Headphone_Manager.disconnect(hpDevice:)(a1, *(void **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_72()
{
  return swift_release();
}

uint64_t sub_23DB37024()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in Headphone_Manager.unpair(hpDevice:)(void *a1)
{
  uint64_t v1;

  closure #1 in Headphone_Manager.unpair(hpDevice:)(a1, *(void **)(v1 + 16));
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_78()
{
  return swift_release();
}

unint64_t base witness table accessor for Equatable in HeadphoneFeatures()
{
  return lazy protocol witness table accessor for type HeadphoneFeatures and conformance HeadphoneFeatures();
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in Headphone_Manager()
{
  return MEMORY[0x24BDB9D70];
}

uint64_t getEnumTagSinglePayload for HeadphoneFeatures(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (a2)
  {
    if (a2 <= 0xFD)
      goto LABEL_15;
    v7 = ((a2 + 2) >> 8) + 1;
    v8 = 1;
    if (v7 >= 0x100)
    {
      if (v7 >= 0x10000)
        v2 = 4;
      else
        v2 = 2;
      v8 = v2;
    }
    if (v8 == 1)
      v6 = a1[1];
    else
      v6 = v8 == 2 ? *(unsigned __int16 *)(a1 + 1) : *(_DWORD *)(a1 + 1);
    if (v6)
    {
      v5 = (*a1 | ((v6 - 1) << 8)) + 253;
    }
    else
    {
LABEL_15:
      v3 = *a1 - 3;
      if (v3 < 0)
        v3 = -1;
      v5 = v3;
    }
  }
  else
  {
    v5 = -1;
  }
  return (v5 + 1);
}

_BYTE *storeEnumTagSinglePayload for HeadphoneFeatures(_BYTE *result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  int v7;

  v7 = 0;
  if (a3 > 0xFD)
  {
    v5 = ((a3 + 2) >> 8) + 1;
    v6 = 1;
    if (v5 >= 0x100)
    {
      if (v5 >= 0x10000)
        v3 = 4;
      else
        v3 = 2;
      v6 = v3;
    }
    v7 = v6;
  }
  if (a2 > 0xFD)
  {
    v4 = ((a2 - 254) >> 8) + 1;
    *result = a2 + 2;
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = v4;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = v4;
      }
      else
      {
        *(_DWORD *)(result + 1) = v4;
      }
    }
  }
  else
  {
    if (v7)
    {
      if (v7 == 1)
      {
        result[1] = 0;
      }
      else if (v7 == 2)
      {
        *(_WORD *)(result + 1) = 0;
      }
      else
      {
        *(_DWORD *)(result + 1) = 0;
      }
    }
    if (a2)
      *result = a2 + 2;
  }
  return result;
}

uint64_t getEnumTag for HeadphoneFeatures(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for HeadphoneFeatures(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for HeadphoneFeatures()
{
  return &type metadata for HeadphoneFeatures;
}

uint64_t method lookup function for Headphone_Manager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Headphone_Manager.topLevelUIHandler.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xC0))();
}

uint64_t dispatch thunk of Headphone_Manager.topLevelUIHandler.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xC8))();
}

uint64_t dispatch thunk of Headphone_Manager.topLevelUIHandler.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0xD0))();
}

uint64_t dispatch thunk of Headphone_Manager.hmsClient.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x138))();
}

uint64_t dispatch thunk of Headphone_Manager.hmsClient.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x140))();
}

uint64_t dispatch thunk of Headphone_Manager.hmsClient.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x148))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedRecords.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x150))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedRecords.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x158))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedRecords.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x160))();
}

uint64_t dispatch thunk of Headphone_Manager.deviceConnectionListener.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x168))();
}

uint64_t dispatch thunk of Headphone_Manager.deviceConnectionListener.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x170))();
}

uint64_t dispatch thunk of Headphone_Manager.deviceConnectionListener.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x178))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedHeadphones.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x180))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedHeadphones.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x188))();
}

uint64_t dispatch thunk of Headphone_Manager.connectedHeadphones.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x190))();
}

uint64_t dispatch thunk of Headphone_Manager.pendingConnectedHeadphones.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x198))();
}

uint64_t dispatch thunk of Headphone_Manager.pendingConnectedHeadphones.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x1A0))();
}

uint64_t dispatch thunk of Headphone_Manager.pendingConnectedHeadphones.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x1A8))();
}

uint64_t dispatch thunk of Headphone_Manager.isAppleHeadphone(cbDevice:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x1B8))() & 1;
}

uint64_t dispatch thunk of Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x1C0))();
}

uint64_t dispatch thunk of Headphone_Manager.disconnect(hpDevice:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x1C8))();
}

uint64_t dispatch thunk of Headphone_Manager.unpair(hpDevice:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x1D0))();
}

_QWORD *outlined init with copy of CBDeviceReporting?(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

_QWORD *outlined init with copy of HeadphoneMangerTopLevelEntryUIHandling?(uint64_t *a1, _QWORD *a2)
{
  _QWORD *result;
  uint64_t v4;

  v4 = *a1;
  swift_unknownObjectRetain();
  result = a2;
  *a2 = v4;
  return result;
}

uint64_t sub_23DB37A24()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in Headphone_Manager.unpair(hpDevice:)(*(_QWORD **)(v0 + 16));
}

uint64_t sub_23DB37A68()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37A98()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37AC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37B10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37B58()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:)()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in Headphone_Manager.unpair(hpDevice:)(*(void **)(v0 + 16));
}

uint64_t sub_23DB37B9C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37BCC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37BFC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37C44()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37C8C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(*(_QWORD **)(v0 + 16));
}

uint64_t sub_23DB37CD0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37D00()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37D30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37D78()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37DC0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:)()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in Headphone_Manager.disconnect(hpDevice:)(*(void **)(v0 + 16));
}

uint64_t sub_23DB37E04()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37E34()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37E64()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB37EAC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _swift_stdlib_has_malloc_size_5()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_5(const void *a1)
{
  return malloc_size(a1);
}

uint64_t sub_23DB37F24()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void **)(v0 + 16));
}

uint64_t sub_23DB37F68()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37F98()
{
  return swift_deallocObject();
}

uint64_t sub_23DB37FC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38010()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38058()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in Headphone_Manager.updateDeviceConfig(hpDevice:settings:)(*(void **)(v0 + 16));
}

uint64_t sub_23DB3809C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB380CC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB380FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38144()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB3818C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  return implicit closure #1 in closure #5 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_23DB381D0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB38200()
{
  return swift_deallocObject();
}

uint64_t sub_23DB38230()
{
  swift_release();
  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(void (**)(void))(v0 + 16));
}

uint64_t sub_23DB38278()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB382C0()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #4 in Headphone_Manager.configCBDiscovery()(_QWORD **a1)
{
  uint64_t v1;

  closure #1 in closure #4 in Headphone_Manager.configCBDiscovery()(a1, v1);
}

_QWORD *outlined destroy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(_QWORD *a1)
{
  if (*a1)
    swift_release();
  return a1;
}

uint64_t sub_23DB38430()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #3 in Headphone_Manager.configCBDiscovery()(_QWORD **a1)
{
  uint64_t v1;

  closure #1 in closure #3 in Headphone_Manager.configCBDiscovery()(a1, v1);
}

uint64_t sub_23DB384C0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_23DB38504()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  return implicit closure #1 in closure #2 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_23DB38548()
{
  return swift_deallocObject();
}

uint64_t sub_23DB38578()
{
  return swift_deallocObject();
}

uint64_t sub_23DB385A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB385F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38638()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  return implicit closure #2 in closure #2 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_23DB3867C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB386AC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB386DC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38724()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38798()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23DB38834()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_23DB38878()
{
  return swift_deallocObject();
}

uint64_t sub_23DB388A8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB388D8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38920()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38968()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  return implicit closure #2 in closure #1 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_23DB389AC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB389DC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB38A0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38A54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38AC8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()partial apply(uint64_t a1)
{
  uint64_t v1;

  return thunk for @escaping @callee_unowned @convention(block) (@unowned CBDevice) -> ()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23DB38B38()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery()()
{
  uint64_t v0;

  return implicit closure #4 in closure #1 in Headphone_Manager.configCBDiscovery()(*(void **)(v0 + 16));
}

uint64_t sub_23DB38B7C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB38BAC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB38BDC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB38C24()
{
  swift_release();
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v0 = type metadata accessor for OS_dispatch_queue.Attributes();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE5698], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
    return v1;
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
    return v1;
  }
  return v3;
}

BOOL CBProductIDIsWx(int a1)
{
  return (CBProductIDIsW1(a1) & 1) != 0 || (CBProductIDIsW2(a1) & 1) != 0 || (CBProductIDIsW3(a1) & 1) != 0;
}

BOOL CBProductIDIsMTK(int a1)
{
  BOOL v2;

  switch(a1)
  {
    case 8209:
      v2 = 1;
      break;
    case 8214:
      v2 = 1;
      break;
    case 8215:
      v2 = 1;
      break;
    case 8230:
      v2 = 1;
      break;
    default:
      v2 = a1 == 8229 || a1 == 8218;
      break;
  }
  return v2;
}

uint64_t CBProductIDIsW1(int a1)
{
  unint64_t v2;

  v2 = (a1 - 8194);
  if (v2 <= 0xE)
    __asm { BR              X8 }
  return 0;
}

uint64_t CBProductIDIsW2(int a1)
{
  unint64_t v2;

  v2 = (a1 - 8202);
  if (v2 <= 0x15)
    __asm { BR              X8 }
  return 0;
}

uint64_t CBProductIDIsW3(int a1)
{
  unint64_t v2;

  v2 = (a1 - 8212);
  if (v2 <= 0x10)
    __asm { BR              X8 }
  return 0;
}

uint64_t one-time initialization function for binding()
{
  uint64_t v1;

  v1 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v1, static Logger.binding);
  __swift_project_value_buffer(v1, (uint64_t)static Logger.binding);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.HeadphoneManager", 0x1AuLL, 1);
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Binding", 7uLL, 1);
  return Logger.init(subsystem:category:)();
}

uint64_t Logger.binding.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for binding != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  return __swift_project_value_buffer(v0, (uint64_t)static Logger.binding);
}

uint64_t static Logger.binding.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = Logger.binding.unsafeMutableAddressor();
  v1 = type metadata accessor for Logger();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(a1, v3);
}

uint64_t static AADeviceProperty.subscript.getter@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  void (*v9)(_BYTE *, _QWORD);
  _BYTE v10[32];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0;
  v12 = 0;
  v4 = *a2;
  v16 = a1;
  v15 = *(_QWORD *)(v4 + *MEMORY[0x24BEE35B8]);
  v14 = a2;
  v13 = *(_QWORD *)(v4 + *MEMORY[0x24BEE35B8] + 8);
  v7 = v13;
  v12 = a3;
  swift_unknownObjectRetain();
  swift_retain();
  v11 = a1;
  v9 = (void (*)(_BYTE *, _QWORD))swift_readAtKeyPath();
  (*(void (**)(uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4);
  v9(v10, 0);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t static AADeviceProperty.subscript.setter(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  id v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  char *v134;
  void (*v135)(char *, char *);
  uint64_t v136;
  uint64_t v137;
  char *v138;
  void (*v139)(char *, char *, uint64_t);
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  _QWORD *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(char *, uint64_t, uint64_t);
  uint64_t v199;
  uint64_t v200;
  char *v201;
  _QWORD *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  _QWORD *v229;
  uint64_t v230;
  _QWORD *v231;
  uint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  _QWORD *v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  _QWORD v250[11];
  uint64_t v251;
  uint8_t *v252;
  uint64_t v253;
  uint64_t v254;
  _BYTE **v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t *v262;
  uint32_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  _QWORD *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  _QWORD *v288;
  uint64_t v289;
  NSObject *v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint8_t *v309;
  uint64_t v310;
  uint64_t v311;
  _BYTE **v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  uint32_t v317;
  uint64_t v318;
  uint64_t v319;
  int v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  _QWORD *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  NSObject *v342;
  int v343;
  uint64_t v344;
  id v345;
  uint64_t v346;
  unint64_t v347;
  uint64_t v348;
  char *v349;
  void *v350;
  id v351;
  id v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint8_t *v361;
  uint64_t v362;
  uint64_t v363;
  _BYTE **v364;
  uint64_t *v365;
  uint64_t *v366;
  uint64_t v367;
  uint64_t v368;
  id v369;
  uint32_t v370;
  uint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  _QWORD *v390;
  NSObject *v391;
  int v392;
  _BOOL4 v393;
  _BOOL4 v394;
  id v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  _QWORD *v399;
  void *v400;
  _QWORD *v401;
  void *v402;
  int v403;
  int v404;
  char *v405;
  char *v406;
  int v407;
  int v408;
  uint64_t v409;
  void (*v410)(char *, uint64_t);
  _BOOL4 v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint8_t *v425;
  uint64_t v426;
  uint64_t v427;
  _BYTE **v428;
  uint64_t *v429;
  uint64_t *v430;
  uint64_t v431;
  void (*v432)(_QWORD *, _QWORD);
  _QWORD *v433;
  void (*v434)(char *, uint64_t, uint64_t);
  uint64_t v435;
  unint64_t v436;
  void (*v437)(char *, char *);
  unint64_t v438;
  unint64_t v439;
  uint64_t *v440;
  unint64_t v441;
  uint32_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  int v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  _QWORD *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  _QWORD *v467;
  uint64_t v468;
  NSObject *v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t AssociatedTypeWitness;
  unint64_t v476;
  char *v477;
  _QWORD *v478;
  uint64_t v479;
  uint64_t v480;
  unint64_t v481;
  char *v482;
  unint64_t v483;
  char *v484;
  unint64_t v485;
  uint64_t v486;
  char *v487;
  unint64_t v488;
  char *v489;
  unint64_t v490;
  uint64_t v491;
  uint64_t v492;
  _QWORD *v493;
  uint64_t v494;
  unint64_t v495;
  char *v496;
  unint64_t v497;
  uint64_t v498;
  char *v499;
  unint64_t v500;
  uint64_t v501;
  void (*v502)(char *);
  void (*v503)(char *, _QWORD);
  char *v504;
  void *object;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  _QWORD *v510;
  char *v511;
  Builtin::Word v512;
  int v513;
  void *v514;
  uint64_t *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  char *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t (*v525)(uint64_t, uint64_t, uint64_t);
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  _BYTE *v529;
  char v530;
  char v531;
  uint64_t v532;
  uint64_t (*v533)(uint64_t, uint64_t, uint64_t);
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  _BYTE *v537;
  uint64_t v538;
  int v539;
  int v540;
  uint64_t (*v541)(uint64_t, void *);
  void *v542;
  uint64_t (*v543)(void *);
  char *v544;
  uint64_t v545;
  uint32_t v546;
  id v547;
  uint64_t v548;
  id v549;
  _QWORD v550[2];
  void *v551;
  void *v552;
  uint64_t (*v553)(uint64_t, uint64_t, uint64_t);
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  _BYTE *v557[2];
  uint32_t v558;
  _QWORD *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  char v563;
  char v564;
  char v565;
  uint64_t v566;
  uint32_t v567;
  _QWORD v568[5];
  uint64_t (*v569)(uint64_t, uint64_t, uint64_t);
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  _BYTE *v573;
  uint64_t v574;
  uint32_t v575;
  uint64_t v576;
  uint64_t v577;
  _QWORD v578[2];
  uint64_t v579;
  uint64_t v580;
  char v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  char *v587;
  uint64_t v588;
  uint64_t v589;

  v522 = a1;
  v506 = a2;
  v478 = a3;
  v510 = a4;
  v587 = 0;
  v586 = 0;
  v585 = 0;
  v584 = 0;
  v583 = 0;
  v576 = 0;
  v577 = 0;
  v471 = 0;
  v560 = 0;
  v559 = 0;
  v552 = 0;
  v547 = 0;
  v494 = *a3;
  v4 = *a4;
  v493 = (_QWORD *)MEMORY[0x24BEE35B8];
  v518 = *(_QWORD *)(v4 + *MEMORY[0x24BEE35B8] + 8);
  v472 = *(_QWORD *)(v518 + 32);
  v473 = *(_QWORD *)(v472 + 8);
  v5 = *MEMORY[0x24BEE35B8];
  v512 = 0;
  v474 = *(_QWORD *)(v494 + v5);
  v589 = v474;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v476 = (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v6);
  v477 = (char *)v250 - v476;
  v479 = type metadata accessor for Logger();
  v480 = *(_QWORD *)(v479 - 8);
  v486 = *(_QWORD *)(v480 + 64);
  v481 = (v486 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v506, v7);
  v482 = (char *)v250 - v481;
  v483 = (v486 + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](v8, (char *)v250 - v481);
  v484 = (char *)v250 - v483;
  v485 = (v486 + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = MEMORY[0x24BDAC7A8](v9, (char *)v250 - v483);
  v487 = (char *)v250 - v485;
  v488 = (v486 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v10, (char *)v250 - v485);
  v489 = (char *)v250 - v488;
  v491 = *(_QWORD *)(*(_QWORD *)(v518 - 8) + 64);
  v490 = (v491 + 15) & 0xFFFFFFFFFFFFFFF0;
  v12 = MEMORY[0x24BDAC7A8](v11, (char *)v250 - v488);
  v492 = (uint64_t)v250 - v490;
  v14 = MEMORY[0x24BDAC7A8](v12, v13);
  v507 = (uint64_t)v250 - v15;
  v519 = *(_QWORD *)(v494 + *v493 + 8);
  v588 = v519;
  v501 = *(_QWORD *)(v519 - 8);
  v498 = *(_QWORD *)(v501 + 64);
  v495 = (v498 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = MEMORY[0x24BDAC7A8](v14, v16);
  v496 = (char *)v250 - v495;
  v497 = (v498 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = MEMORY[0x24BDAC7A8](v17, (char *)v250 - v495);
  v499 = (char *)v250 - v497;
  v500 = (v498 + 15) & 0xFFFFFFFFFFFFFFF0;
  v19 = MEMORY[0x24BDAC7A8](v18, (char *)v250 - v497);
  v520 = (char *)v250 - v500;
  v587 = (char *)v250 - v500;
  v586 = v20;
  v585 = v19;
  v584 = v21;
  v583 = v22;
  swift_unknownObjectRetain();
  swift_retain();
  v582 = v506;
  v504 = &v581;
  v503 = (void (*)(char *, _QWORD))swift_readAtKeyPath();
  v502 = *(void (**)(char *))(v501 + 16);
  v502(v520);
  v513 = 1;
  v503(v504, 0);
  swift_unknownObjectRelease();
  swift_release();
  v23 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v515 = &v579;
  v579 = v23;
  v580 = v24;
  v511 = "";
  v25 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v512, v513 & 1);
  object = v25._object;
  DefaultStringInterpolation.appendLiteral(_:)(v25);
  swift_bridgeObjectRelease();
  swift_unknownObjectRetain();
  swift_retain();
  v578[1] = v506;
  swift_getAtKeyPath();
  v508 = *(_QWORD *)(v507 + *(int *)(v518 + 60));
  swift_retain();
  outlined destroy of AADeviceProperty<A, B>(v507, v519);
  v509 = v578;
  v578[0] = v508;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PartialKeyPath<AADeviceModel>);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  v26 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v511, v512, v513 & 1);
  v514 = v26._object;
  DefaultStringInterpolation.appendLiteral(_:)(v26);
  swift_bridgeObjectRelease();
  v517 = v579;
  v516 = v580;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  v521 = String.init(stringInterpolation:)();
  v523 = v27;
  v576 = v521;
  v577 = v27;
  v524 = *(_QWORD *)(v518 + 40);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
  {
    v193 = v482;
    v194 = Logger.binding.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v480 + 16))(v193, v194, v479);
    swift_bridgeObjectRetain();
    v271 = 32;
    v272 = 7;
    v195 = swift_allocObject();
    v196 = v523;
    v197 = v522;
    v198 = (void (*)(char *, uint64_t, uint64_t))v502;
    v199 = v519;
    v200 = v195;
    v201 = v499;
    v266 = v200;
    *(_QWORD *)(v200 + 16) = v521;
    *(_QWORD *)(v200 + 24) = v196;
    v198(v201, v197, v199);
    v259 = (*(unsigned __int8 *)(v501 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v501 + 80);
    v202 = (_QWORD *)swift_allocObject();
    v203 = v472;
    v204 = v524;
    v205 = v259;
    v206 = v501;
    v207 = v499;
    v208 = v519;
    v273 = v202;
    v202[2] = v474;
    v202[3] = v208;
    v202[4] = v203;
    v202[5] = v204;
    (*(void (**)(char *, char *))(v206 + 32))((char *)v202 + v205, v207);
    v290 = Logger.logObject.getter();
    v291 = static os_log_type_t.debug.getter();
    v262 = &v574;
    v574 = 42;
    v260 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v261 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v263 = v575;
    v269 = 17;
    v275 = swift_allocObject();
    v268 = 32;
    *(_BYTE *)(v275 + 16) = 32;
    v276 = swift_allocObject();
    v270 = 8;
    *(_BYTE *)(v276 + 16) = 8;
    v209 = swift_allocObject();
    v264 = v209;
    *(_QWORD *)(v209 + 16) = implicit closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v209 + 24) = 0;
    v210 = swift_allocObject();
    v211 = v264;
    v277 = v210;
    *(_QWORD *)(v210 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_6;
    *(_QWORD *)(v210 + 24) = v211;
    v278 = swift_allocObject();
    *(_BYTE *)(v278 + 16) = 0;
    v279 = swift_allocObject();
    *(_BYTE *)(v279 + 16) = v270;
    v212 = swift_allocObject();
    v265 = v212;
    *(_QWORD *)(v212 + 16) = implicit closure #2 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v212 + 24) = 0;
    v213 = swift_allocObject();
    v214 = v265;
    v280 = v213;
    *(_QWORD *)(v213 + 16) = _sSiIegd_SiIegr_TRTA_3;
    *(_QWORD *)(v213 + 24) = v214;
    v281 = swift_allocObject();
    *(_BYTE *)(v281 + 16) = v268;
    v282 = swift_allocObject();
    *(_BYTE *)(v282 + 16) = v270;
    v215 = swift_allocObject();
    v216 = v266;
    v267 = v215;
    *(_QWORD *)(v215 + 16) = partial apply for implicit closure #3 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v215 + 24) = v216;
    v217 = swift_allocObject();
    v218 = v267;
    v283 = v217;
    *(_QWORD *)(v217 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v217 + 24) = v218;
    v284 = swift_allocObject();
    *(_BYTE *)(v284 + 16) = v268;
    v285 = swift_allocObject();
    *(_BYTE *)(v285 + 16) = v270;
    v219 = swift_allocObject();
    v220 = v273;
    v274 = v219;
    *(_QWORD *)(v219 + 16) = partial apply for implicit closure #4 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v219 + 24) = v220;
    v221 = swift_allocObject();
    v222 = v274;
    v287 = v221;
    *(_QWORD *)(v221 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v221 + 24) = v222;
    v289 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v286 = _allocateUninitializedArray<A>(_:)();
    v288 = v223;
    swift_retain();
    v224 = v275;
    v225 = v288;
    *v288 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_6;
    v225[1] = v224;
    swift_retain();
    v226 = v276;
    v227 = v288;
    v288[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v227[3] = v226;
    swift_retain();
    v228 = v277;
    v229 = v288;
    v288[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_6;
    v229[5] = v228;
    swift_retain();
    v230 = v278;
    v231 = v288;
    v288[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v231[7] = v230;
    swift_retain();
    v232 = v279;
    v233 = v288;
    v288[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v233[9] = v232;
    swift_retain();
    v234 = v280;
    v235 = v288;
    v288[10] = _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
    v235[11] = v234;
    swift_retain();
    v236 = v281;
    v237 = v288;
    v288[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v237[13] = v236;
    swift_retain();
    v238 = v282;
    v239 = v288;
    v288[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v239[15] = v238;
    swift_retain();
    v240 = v283;
    v241 = v288;
    v288[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v241[17] = v240;
    swift_retain();
    v242 = v284;
    v243 = v288;
    v288[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v243[19] = v242;
    swift_retain();
    v244 = v285;
    v245 = v288;
    v288[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v245[21] = v244;
    swift_retain();
    v246 = v287;
    v247 = v288;
    v288[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v247[23] = v246;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v290, (os_log_type_t)v291))
    {
      v248 = v471;
      v252 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v253 = createStorage<A>(capacity:type:)(0);
      v254 = createStorage<A>(capacity:type:)(3);
      v255 = &v573;
      v573 = v252;
      v256 = &v572;
      v572 = v253;
      v257 = &v571;
      v571 = v254;
      serialize(_:at:)(2, &v573);
      serialize(_:at:)(4, v255);
      v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_6;
      v570 = v275;
      closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)v255, (uint64_t)v256, (uint64_t)v257);
      v258 = v248;
      if (v248)
      {
        __break(1u);
      }
      else
      {
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v276;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[10] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_6;
        v570 = v277;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[9] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v278;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[8] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v279;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[7] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3;
        v570 = v280;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[6] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v281;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[5] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v282;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[4] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v283;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[3] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v284;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[2] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v285;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        v250[1] = 0;
        v569 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v570 = v287;
        closure #1 in osLogInternal(_:log:type:)(&v569, (uint64_t)&v573, (uint64_t)&v572, (uint64_t)&v571);
        _os_log_impl(&dword_23DAB4000, v290, (os_log_type_t)v291, "HeadphoneManager: %s: %ld  (Set) value same skiping update %s ::  %s", v252, v263);
        destroyStorage<A>(_:count:)(v253, 0, v251);
        destroyStorage<A>(_:count:)(v254, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v252, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v480 + 8))(v482, v479);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v501 + 8))(v520, v519);
  }
  else
  {
    v28 = v489;
    swift_unknownObjectRetain();
    swift_retain();
    ((void (*)(char *, uint64_t, uint64_t))v502)(v499, v522, v519);
    v568[4] = v506;
    v433 = v568;
    v432 = (void (*)(_QWORD *, _QWORD))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, char *, uint64_t))(v501 + 40))(v29, v499, v519);
    v432(v433, 0);
    swift_unknownObjectRelease();
    swift_release();
    v30 = Logger.binding.unsafeMutableAddressor();
    v434 = *(void (**)(char *, uint64_t, uint64_t))(v480 + 16);
    v434(v28, v30, v479);
    swift_bridgeObjectRetain();
    v450 = 32;
    v451 = 7;
    v31 = swift_allocObject();
    v32 = v523;
    v33 = v522;
    v34 = (void (*)(char *, uint64_t, uint64_t))v502;
    v35 = v519;
    v36 = v31;
    v37 = v499;
    v445 = v36;
    *(_QWORD *)(v36 + 16) = v521;
    *(_QWORD *)(v36 + 24) = v32;
    v34(v37, v33, v35);
    v435 = *(unsigned int *)(v501 + 80);
    v436 = (v435 + 48) & ~(unint64_t)v435;
    v38 = (_QWORD *)swift_allocObject();
    v39 = v472;
    v40 = v524;
    v41 = v436;
    v42 = v501;
    v43 = v499;
    v44 = v519;
    v452 = v38;
    v38[2] = v474;
    v38[3] = v44;
    v38[4] = v39;
    v38[5] = v40;
    v437 = *(void (**)(char *, char *))(v42 + 32);
    v437((char *)v38 + v41, v43);
    v469 = Logger.logObject.getter();
    v470 = static os_log_type_t.default.getter();
    v440 = &v566;
    v566 = 42;
    v438 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v439 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v441 = lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v442 = v567;
    v448 = 17;
    v454 = swift_allocObject();
    v447 = 32;
    *(_BYTE *)(v454 + 16) = 32;
    v455 = swift_allocObject();
    v449 = 8;
    *(_BYTE *)(v455 + 16) = 8;
    v45 = swift_allocObject();
    v443 = v45;
    *(_QWORD *)(v45 + 16) = implicit closure #5 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v45 + 24) = 0;
    v46 = swift_allocObject();
    v47 = v443;
    v456 = v46;
    *(_QWORD *)(v46 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v46 + 24) = v47;
    v457 = swift_allocObject();
    *(_BYTE *)(v457 + 16) = 0;
    v458 = swift_allocObject();
    *(_BYTE *)(v458 + 16) = v449;
    v48 = swift_allocObject();
    v444 = v48;
    *(_QWORD *)(v48 + 16) = implicit closure #6 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v48 + 24) = 0;
    v49 = swift_allocObject();
    v50 = v444;
    v459 = v49;
    *(_QWORD *)(v49 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v49 + 24) = v50;
    v460 = swift_allocObject();
    *(_BYTE *)(v460 + 16) = v447;
    v461 = swift_allocObject();
    *(_BYTE *)(v461 + 16) = v449;
    v51 = swift_allocObject();
    v52 = v445;
    v446 = v51;
    *(_QWORD *)(v51 + 16) = partial apply for implicit closure #7 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v51 + 24) = v52;
    v53 = swift_allocObject();
    v54 = v446;
    v462 = v53;
    *(_QWORD *)(v53 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v53 + 24) = v54;
    v463 = swift_allocObject();
    *(_BYTE *)(v463 + 16) = v447;
    v464 = swift_allocObject();
    *(_BYTE *)(v464 + 16) = v449;
    v55 = swift_allocObject();
    v56 = v452;
    v453 = v55;
    *(_QWORD *)(v55 + 16) = partial apply for implicit closure #8 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v55 + 24) = v56;
    v57 = swift_allocObject();
    v58 = v453;
    v466 = v57;
    *(_QWORD *)(v57 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v57 + 24) = v58;
    v468 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v465 = _allocateUninitializedArray<A>(_:)();
    v467 = v59;
    swift_retain();
    v60 = v454;
    v61 = v467;
    *v467 = closure #1 in OSLogArguments.append(_:)partial apply;
    v61[1] = v60;
    swift_retain();
    v62 = v455;
    v63 = v467;
    v467[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v63[3] = v62;
    swift_retain();
    v64 = v456;
    v65 = v467;
    v467[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v65[5] = v64;
    swift_retain();
    v66 = v457;
    v67 = v467;
    v467[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v67[7] = v66;
    swift_retain();
    v68 = v458;
    v69 = v467;
    v467[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v69[9] = v68;
    swift_retain();
    v70 = v459;
    v71 = v467;
    v467[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v71[11] = v70;
    swift_retain();
    v72 = v460;
    v73 = v467;
    v467[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v73[13] = v72;
    swift_retain();
    v74 = v461;
    v75 = v467;
    v467[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v75[15] = v74;
    swift_retain();
    v76 = v462;
    v77 = v467;
    v467[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v77[17] = v76;
    swift_retain();
    v78 = v463;
    v79 = v467;
    v467[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[19] = v78;
    swift_retain();
    v80 = v464;
    v81 = v467;
    v467[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v81[21] = v80;
    swift_retain();
    v82 = v466;
    v83 = v467;
    v467[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v83[23] = v82;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v469, (os_log_type_t)v470))
    {
      v84 = v471;
      v425 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v424 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v426 = createStorage<A>(capacity:type:)(0);
      v427 = createStorage<A>(capacity:type:)(3);
      v428 = &v529;
      v529 = v425;
      v429 = &v528;
      v528 = v426;
      v430 = &v527;
      v527 = v427;
      serialize(_:at:)(2, &v529);
      serialize(_:at:)(4, v428);
      v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v526 = v454;
      closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)v428, (uint64_t)v429, (uint64_t)v430);
      v431 = v84;
      if (v84)
      {
        __break(1u);
      }
      else
      {
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v455;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v422 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v456;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v421 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v457;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v420 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v458;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v419 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v526 = v459;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v418 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v460;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v417 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v461;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v416 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v462;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v415 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v463;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v414 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v464;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v413 = 0;
        v525 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v526 = v466;
        closure #1 in osLogInternal(_:log:type:)(&v525, (uint64_t)&v529, (uint64_t)&v528, (uint64_t)&v527);
        v412 = 0;
        _os_log_impl(&dword_23DAB4000, v469, (os_log_type_t)v470, "HeadphoneManager: %s: %ld  (Set)  %s :: %s", v425, v442);
        destroyStorage<A>(_:count:)(v426, 0, v424);
        destroyStorage<A>(_:count:)(v427, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v425, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v423 = v412;
      }
    }
    else
    {
      v85 = v471;
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      v423 = v85;
    }
    v409 = v423;

    v410 = *(void (**)(char *, uint64_t))(v480 + 8);
    v410(v489, v479);
    (*(void (**)(char *__return_ptr, uint64_t))(v472 + 32))(&v565, v474);
    v564 = v565;
    v563 = 0;
    v411 = static AADevicePropertyRemoteSendState.== infix(_:_:)(&v564, &v563);
    swift_unknownObjectRetain();
    swift_retain();
    if (v411)
    {
      swift_unknownObjectRetain();
      swift_retain();
      v532 = v506;
      swift_getAtKeyPath();
      v404 = *(unsigned __int8 *)(v507 + *(int *)(v518 + 64));
      outlined destroy of AADeviceProperty<A, B>(v507, v519);
      v406 = &v531;
      v531 = v404;
      v405 = &v530;
      v530 = 1;
      lazy protocol witness table accessor for type AADevicePropertyRemoteSendState and conformance AADevicePropertyRemoteSendState();
      v407 = dispatch thunk of static Equatable.== infix(_:_:)() ^ 1;
      swift_unknownObjectRelease();
      swift_release();
      v408 = v407;
    }
    else
    {
      v408 = 0;
    }
    v403 = v408;
    swift_unknownObjectRelease();
    swift_release();
    if ((v403 & 1) != 0)
    {
      v401 = (_QWORD *)*Headphone_Manager.shared.unsafeMutableAddressor();
      v86 = v401;
      v559 = v401;
      v402 = (void *)(*(uint64_t (**)(uint64_t))(v472 + 16))(v474);
      if (v402)
      {
        v400 = v402;
        v395 = v402;
        v552 = v402;
        v397 = (*(uint64_t (**)(uint64_t))(v472 + 24))(v474);
        v396 = v87;
        v398 = (*(uint64_t (**)(void))((*v401 & *MEMORY[0x24BEE4EA0]) + 0x180))();
        v399 = v550;
        v550[0] = v397;
        v550[1] = v396;
        v88 = type metadata accessor for HeadphoneDevice();
        MEMORY[0x24263AD5C](&v551, v399, v398, MEMORY[0x24BEE0D00], v88, MEMORY[0x24BEE0D10]);
        outlined destroy of String();
        v549 = v551;
        v394 = v551 != 0;
        v393 = v394;
        outlined destroy of HeadphoneDevice?(&v549);
        swift_bridgeObjectRelease();
        if (v393)
        {
          v89 = v487;
          swift_unknownObjectRetain();
          swift_retain();
          v548 = v506;
          swift_getAtKeyPath();
          v368 = *(_QWORD *)(v507 + *(int *)(v518 + 60));
          swift_retain();
          outlined destroy of AADeviceProperty<A, B>(v507, v519);
          v369 = static AADeviceModel.deviceConfigFor<A>(keyPath:value:)(v368, v522, v519);
          swift_release();
          swift_unknownObjectRelease();
          swift_release();
          v547 = v369;
          v90 = Logger.shared.unsafeMutableAddressor();
          v434(v89, v90, v479);
          v91 = v369;
          v377 = 7;
          v378 = swift_allocObject();
          *(_QWORD *)(v378 + 16) = v369;
          v391 = Logger.logObject.getter();
          v392 = static os_log_type_t.error.getter();
          v376 = 32;
          v545 = 32;
          UnsignedInteger<>.init<A>(_:)();
          v370 = v546;
          v374 = 17;
          v380 = swift_allocObject();
          v373 = 32;
          *(_BYTE *)(v380 + 16) = 32;
          v381 = swift_allocObject();
          v375 = 8;
          *(_BYTE *)(v381 + 16) = 8;
          v92 = swift_allocObject();
          v371 = v92;
          *(_QWORD *)(v92 + 16) = implicit closure #14 in static AADeviceProperty.subscript.setter;
          *(_QWORD *)(v92 + 24) = 0;
          v93 = swift_allocObject();
          v94 = v371;
          v382 = v93;
          *(_QWORD *)(v93 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(_QWORD *)(v93 + 24) = v94;
          v383 = swift_allocObject();
          *(_BYTE *)(v383 + 16) = 0;
          v384 = swift_allocObject();
          *(_BYTE *)(v384 + 16) = v375;
          v95 = swift_allocObject();
          v372 = v95;
          *(_QWORD *)(v95 + 16) = implicit closure #15 in static AADeviceProperty.subscript.setter;
          *(_QWORD *)(v95 + 24) = 0;
          v96 = swift_allocObject();
          v97 = v372;
          v385 = v96;
          *(_QWORD *)(v96 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
          *(_QWORD *)(v96 + 24) = v97;
          v386 = swift_allocObject();
          *(_BYTE *)(v386 + 16) = v373;
          v387 = swift_allocObject();
          *(_BYTE *)(v387 + 16) = v375;
          v98 = swift_allocObject();
          v99 = v378;
          v379 = v98;
          *(_QWORD *)(v98 + 16) = partial apply for implicit closure #16 in static AADeviceProperty.subscript.setter;
          *(_QWORD *)(v98 + 24) = v99;
          v100 = swift_allocObject();
          v101 = v379;
          v389 = v100;
          *(_QWORD *)(v100 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(_QWORD *)(v100 + 24) = v101;
          v388 = _allocateUninitializedArray<A>(_:)();
          v390 = v102;
          swift_retain();
          v103 = v380;
          v104 = v390;
          *v390 = closure #1 in OSLogArguments.append(_:)partial apply;
          v104[1] = v103;
          swift_retain();
          v105 = v381;
          v106 = v390;
          v390[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v106[3] = v105;
          swift_retain();
          v107 = v382;
          v108 = v390;
          v390[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v108[5] = v107;
          swift_retain();
          v109 = v383;
          v110 = v390;
          v390[6] = closure #1 in OSLogArguments.append(_:)partial apply;
          v110[7] = v109;
          swift_retain();
          v111 = v384;
          v112 = v390;
          v390[8] = closure #1 in OSLogArguments.append(_:)partial apply;
          v112[9] = v111;
          swift_retain();
          v113 = v385;
          v114 = v390;
          v390[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
          v114[11] = v113;
          swift_retain();
          v115 = v386;
          v116 = v390;
          v390[12] = closure #1 in OSLogArguments.append(_:)partial apply;
          v116[13] = v115;
          swift_retain();
          v117 = v387;
          v118 = v390;
          v390[14] = closure #1 in OSLogArguments.append(_:)partial apply;
          v118[15] = v117;
          swift_retain();
          v119 = v389;
          v120 = v390;
          v390[16] = closure #1 in OSLogArguments.append(_:)partial apply;
          v120[17] = v119;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v391, (os_log_type_t)v392))
          {
            v121 = v409;
            v361 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v360 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v362 = createStorage<A>(capacity:type:)(0);
            v363 = createStorage<A>(capacity:type:)(2);
            v364 = &v537;
            v537 = v361;
            v365 = &v536;
            v536 = v362;
            v366 = &v535;
            v535 = v363;
            serialize(_:at:)(2, &v537);
            serialize(_:at:)(3, v364);
            v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v534 = v380;
            closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)v364, (uint64_t)v365, (uint64_t)v366);
            v367 = v121;
            if (v121)
            {
              __break(1u);
            }
            else
            {
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v381;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v359 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v382;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v358 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v383;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v357 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v384;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v356 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
              v534 = v385;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v355 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v386;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v354 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v387;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              v353 = 0;
              v533 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v534 = v389;
              closure #1 in osLogInternal(_:log:type:)(&v533, (uint64_t)&v537, (uint64_t)&v536, (uint64_t)&v535);
              _os_log_impl(&dword_23DAB4000, v391, (os_log_type_t)v392, "HeadphoneManager: %s: %ld Prepared config :%s", v361, v370);
              destroyStorage<A>(_:count:)(v362, 0, v360);
              destroyStorage<A>(_:count:)(v363, 2, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24263B020](v361, MEMORY[0x24BEE4260]);
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          v122 = v401;

          v123 = ((uint64_t (*)(char *, uint64_t))v410)(v487, v479);
          v352 = (id)(*(uint64_t (**)(uint64_t))((*v122 & *MEMORY[0x24BEE4EA0]) + 0x120))(v123);
          v345 = objc_msgSend(v395, sel_identifier);
          v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v344 = v125;
          v351 = (id)MEMORY[0x24263ADA4](v124);
          swift_bridgeObjectRelease();

          swift_unknownObjectRetain();
          swift_retain();
          ((void (*)(char *, char *, uint64_t))v502)(v499, v520, v519);
          v126 = v369;
          ((void (*)(char *, uint64_t, uint64_t))v502)(v496, v522, v519);
          v127 = v435;
          v346 = (v127 + 64) & ~v127;
          v347 = (v346 + v498 + 7) & 0xFFFFFFFFFFFFFFF8;
          v348 = (v347 + 8 + v127) & ~v127;
          v128 = (char *)swift_allocObject();
          v129 = v472;
          v130 = v524;
          v131 = v506;
          v132 = v510;
          v133 = v346;
          v134 = v499;
          v135 = v437;
          v136 = v519;
          v349 = v128;
          *((_QWORD *)v128 + 2) = v474;
          *((_QWORD *)v128 + 3) = v136;
          *((_QWORD *)v128 + 4) = v129;
          *((_QWORD *)v128 + 5) = v130;
          *((_QWORD *)v128 + 6) = v131;
          *((_QWORD *)v128 + 7) = v132;
          v135(&v128[v133], v134);
          v137 = v348;
          v138 = v496;
          v139 = (void (*)(char *, char *, uint64_t))v437;
          v140 = v519;
          v141 = v349;
          *(_QWORD *)&v349[v347] = v369;
          v139(&v141[v137], v138, v140);
          v543 = partial apply for closure #1 in static AADeviceProperty.subscript.setter;
          v544 = v349;
          v538 = MEMORY[0x24BDAC760];
          v539 = 1107296256;
          v540 = 0;
          v541 = thunk for @escaping @callee_guaranteed (@guaranteed Error?) -> ();
          v542 = &block_descriptor_4;
          v350 = _Block_copy(&v538);
          swift_release();
          objc_msgSend(v352, sel_sendDeviceConfig_identifier_completion_, v369, v351, v350);
          _Block_release(v350);

          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v501 + 8))(v520, v519);
          goto LABEL_43;
        }

      }
      v142 = v484;
      v143 = Logger.shared.unsafeMutableAddressor();
      v434(v142, v143, v479);
      swift_unknownObjectRetain();
      v316 = 56;
      v326 = 7;
      v144 = swift_allocObject();
      v145 = v519;
      v146 = v472;
      v147 = v524;
      v148 = (_QWORD *)v144;
      v149 = v506;
      v321 = v148;
      v148[2] = v474;
      v148[3] = v145;
      v148[4] = v146;
      v148[5] = v147;
      v148[6] = v149;
      swift_unknownObjectRetain();
      v150 = (_QWORD *)swift_allocObject();
      v151 = v519;
      v152 = v472;
      v153 = v524;
      v154 = v506;
      v327 = v150;
      v150[2] = v474;
      v150[3] = v151;
      v150[4] = v152;
      v150[5] = v153;
      v150[6] = v154;
      default argument 2 of OSLogInterpolation.appendInterpolation(_:privacy:attributes:)();
      swift_bridgeObjectRelease();
      v342 = Logger.logObject.getter();
      v343 = static os_log_type_t.error.getter();
      v557[1] = (_BYTE *)42;
      UnsignedInteger<>.init<A>(_:)();
      v317 = v558;
      v323 = 17;
      v328 = swift_allocObject();
      v320 = 32;
      *(_BYTE *)(v328 + 16) = 32;
      v329 = swift_allocObject();
      v324 = 8;
      *(_BYTE *)(v329 + 16) = 8;
      v325 = 32;
      v155 = swift_allocObject();
      v318 = v155;
      *(_QWORD *)(v155 + 16) = implicit closure #10 in static AADeviceProperty.subscript.setter;
      *(_QWORD *)(v155 + 24) = 0;
      v156 = swift_allocObject();
      v157 = v318;
      v330 = v156;
      *(_QWORD *)(v156 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v156 + 24) = v157;
      v331 = swift_allocObject();
      *(_BYTE *)(v331 + 16) = 0;
      v332 = swift_allocObject();
      *(_BYTE *)(v332 + 16) = v324;
      v158 = swift_allocObject();
      v319 = v158;
      *(_QWORD *)(v158 + 16) = implicit closure #11 in static AADeviceProperty.subscript.setter;
      *(_QWORD *)(v158 + 24) = 0;
      v159 = swift_allocObject();
      v160 = v319;
      v333 = v159;
      *(_QWORD *)(v159 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
      *(_QWORD *)(v159 + 24) = v160;
      v334 = swift_allocObject();
      *(_BYTE *)(v334 + 16) = v320;
      v335 = swift_allocObject();
      *(_BYTE *)(v335 + 16) = v324;
      v161 = swift_allocObject();
      v162 = v321;
      v322 = v161;
      *(_QWORD *)(v161 + 16) = partial apply for implicit closure #12 in static AADeviceProperty.subscript.setter;
      *(_QWORD *)(v161 + 24) = v162;
      v163 = swift_allocObject();
      v164 = v322;
      v336 = v163;
      *(_QWORD *)(v163 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
      *(_QWORD *)(v163 + 24) = v164;
      v337 = swift_allocObject();
      *(_BYTE *)(v337 + 16) = 64;
      v338 = swift_allocObject();
      *(_BYTE *)(v338 + 16) = v324;
      v165 = swift_allocObject();
      v166 = v327;
      v340 = v165;
      *(_QWORD *)(v165 + 16) = partial apply for implicit closure #13 in static AADeviceProperty.subscript.setter;
      *(_QWORD *)(v165 + 24) = v166;
      v339 = _allocateUninitializedArray<A>(_:)();
      v341 = v167;
      swift_retain();
      v168 = v328;
      v169 = v341;
      *v341 = closure #1 in OSLogArguments.append(_:)partial apply;
      v169[1] = v168;
      swift_retain();
      v170 = v329;
      v171 = v341;
      v341[2] = closure #1 in OSLogArguments.append(_:)partial apply;
      v171[3] = v170;
      swift_retain();
      v172 = v330;
      v173 = v341;
      v341[4] = closure #1 in OSLogArguments.append(_:)partial apply;
      v173[5] = v172;
      swift_retain();
      v174 = v331;
      v175 = v341;
      v341[6] = closure #1 in OSLogArguments.append(_:)partial apply;
      v175[7] = v174;
      swift_retain();
      v176 = v332;
      v177 = v341;
      v341[8] = closure #1 in OSLogArguments.append(_:)partial apply;
      v177[9] = v176;
      swift_retain();
      v178 = v333;
      v179 = v341;
      v341[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
      v179[11] = v178;
      swift_retain();
      v180 = v334;
      v181 = v341;
      v341[12] = closure #1 in OSLogArguments.append(_:)partial apply;
      v181[13] = v180;
      swift_retain();
      v182 = v335;
      v183 = v341;
      v341[14] = closure #1 in OSLogArguments.append(_:)partial apply;
      v183[15] = v182;
      swift_retain();
      v184 = v336;
      v185 = v341;
      v341[16] = closure #1 in OSLogArguments.append(_:)partial apply;
      v185[17] = v184;
      swift_retain();
      v186 = v337;
      v187 = v341;
      v341[18] = closure #1 in OSLogArguments.append(_:)partial apply;
      v187[19] = v186;
      swift_retain();
      v188 = v338;
      v189 = v341;
      v341[20] = closure #1 in OSLogArguments.append(_:)partial apply;
      v189[21] = v188;
      swift_retain();
      v190 = v340;
      v191 = v341;
      v341[22] = _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_2;
      v191[23] = v190;
      _finalizeUninitializedArray<A>(_:)();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v342, (os_log_type_t)v343))
      {
        v192 = v409;
        v309 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
        v308 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        v310 = createStorage<A>(capacity:type:)(1);
        v311 = createStorage<A>(capacity:type:)(2);
        v312 = v557;
        v557[0] = v309;
        v313 = &v556;
        v556 = v310;
        v314 = &v555;
        v555 = v311;
        serialize(_:at:)(2, v557);
        serialize(_:at:)(4, v312);
        v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v554 = v328;
        closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v312, (uint64_t)v313, (uint64_t)v314);
        v315 = v192;
        if (v192)
        {
          __break(1u);
        }
        else
        {
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v329;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v307 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v330;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v306 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v331;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v305 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v332;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v304 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
          v554 = v333;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v303 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v334;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v302 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v335;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v301 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v336;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v300 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v337;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v299 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
          v554 = v338;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          v298 = 0;
          v553 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_2;
          v554 = v340;
          closure #1 in osLogInternal(_:log:type:)(&v553, (uint64_t)v557, (uint64_t)&v556, (uint64_t)&v555);
          _os_log_impl(&dword_23DAB4000, v342, (os_log_type_t)v343, "HeadphoneManager: %s: %ld (Set) : Update AAD Device Config, Device Not Connected with UUID: %s device:%@", v309, v317);
          destroyStorage<A>(_:count:)(v310, 1, v308);
          destroyStorage<A>(_:count:)(v311, 2, MEMORY[0x24BEE4AD8] + 8);
          MEMORY[0x24263B020](v309, MEMORY[0x24BEE4260]);
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
          swift_release();
        }
      }
      else
      {
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }

      v410(v484, v479);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v501 + 8))(v520, v519);
    }
    else
    {
      swift_unknownObjectRetain();
      swift_retain();
      v562 = v506;
      swift_getAtKeyPath();
      v297 = (uint64_t *)(v492 + *(int *)(v518 + 52));
      if (*v297)
      {
        v296 = *v297;
        swift_retain();
        outlined destroy of AADeviceProperty<A, B>(v492, v519);
        CurrentValueSubject.send(_:)();
        swift_release();
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
        swift_release();
        outlined destroy of AADeviceProperty<A, B>(v492, v519);
      }
      dispatch thunk of ObservableObject.objectWillChange.getter();
      type metadata accessor for ObservableObjectPublisher();
      if ((swift_dynamicCast() & 1) != 0)
        v295 = v561;
      else
        v295 = 0;
      v294 = v295;
      if (v295)
      {
        v293 = v294;
        v292 = v294;
        v560 = v294;
        ObservableObjectPublisher.send()();
        swift_release();
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v501 + 8))(v520, v519);
    }
  }
LABEL_43:
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v501 + 8))(v522, v519);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of AADeviceProperty<A, B>(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(a2 - 8) + 8))();
  swift_release();
  swift_release();
  swift_release();
}

uint64_t implicit closure #1 in static AADeviceProperty.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in static AADeviceProperty.subscript.setter()
{
  return 35;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #3 in static AADeviceProperty.subscript.setter()
{
  swift_bridgeObjectRetain();
}

uint64_t sub_23DB3CC80()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in static AADeviceProperty.subscript.setter()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #3 in static AADeviceProperty.subscript.setter();
  return result;
}

uint64_t implicit closure #4 in static AADeviceProperty.subscript.setter()
{
  Swift::String v0;
  Swift::String v1;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t sub_23DB3CDA8()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in static AADeviceProperty.subscript.setter()
{
  return implicit closure #4 in static AADeviceProperty.subscript.setter();
}

uint64_t implicit closure #5 in static AADeviceProperty.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #6 in static AADeviceProperty.subscript.setter()
{
  return 42;
}

uint64_t implicit closure #7 in static AADeviceProperty.subscript.setter()
{
  return MEMORY[0x24263ADE0]();
}

uint64_t implicit closure #8 in static AADeviceProperty.subscript.setter()
{
  Swift::String v0;
  Swift::String v1;

  DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v0 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v0);
  swift_bridgeObjectRelease();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", 0, 1);
  DefaultStringInterpolation.appendLiteral(_:)(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t implicit closure #10 in static AADeviceProperty.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #11 in static AADeviceProperty.subscript.setter()
{
  return 55;
}

uint64_t implicit closure #12 in static AADeviceProperty.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(a4 + 24))(a2);
}

uint64_t implicit closure #13 in static AADeviceProperty.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = (*(uint64_t (**)(uint64_t))(a4 + 16))(a2);
  if (v6)
    return v6;
  else
    return 0;
}

uint64_t implicit closure #14 in static AADeviceProperty.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #15 in static AADeviceProperty.subscript.setter()
{
  return 60;
}

uint64_t implicit closure #16 in static AADeviceProperty.subscript.setter(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t closure #1 in static AADeviceProperty.subscript.setter(void *a1, uint64_t a2, _QWORD *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t result;
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  _BYTE **v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  _BYTE **v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t v144;
  void (*v145)(char *, _QWORD);
  char *v146;
  id v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t *v151;
  uint32_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  NSObject *v179;
  int v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t *v183;
  uint32_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  NSObject *v206;
  int v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t AssociatedTypeWitness;
  unint64_t v215;
  char *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  char *v222;
  _QWORD *v223;
  uint64_t v224;
  id v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  char *v231;
  unint64_t v232;
  char *v233;
  void *v234;
  uint64_t (*v235)(uint64_t, uint64_t, uint64_t);
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _BYTE *v239;
  uint64_t v240;
  uint32_t v241;
  char v242;
  uint64_t v243;
  void *v244;
  uint64_t (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint32_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;

  v234 = a1;
  v227 = a2;
  v223 = a3;
  v224 = a4;
  v225 = a5;
  v226 = a6;
  v260 = 0;
  v259 = 0;
  v258 = 0;
  v257 = 0;
  v256 = 0;
  v255 = 0;
  v250 = 0;
  v209 = 0;
  v244 = 0;
  v6 = *a3;
  v212 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE35B8] + 8);
  v210 = *(_QWORD *)(*(_QWORD *)(v212 + 32) + 8);
  v7 = *MEMORY[0x24BEE35B8];
  v213 = 0;
  v211 = *(_QWORD *)(v6 + v7);
  v262 = v211;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v215 = (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = MEMORY[0x24BDAC7A8](0, v8);
  v216 = (char *)v107 - v215;
  v217 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v9, (char *)v107 - v215);
  v218 = (uint64_t)v107 - v217;
  v219 = *(_QWORD *)(v12 + 24);
  v261 = v219;
  v220 = *(_QWORD *)(v219 - 8);
  v221 = (*(_QWORD *)(v220 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v11, v13);
  v222 = (char *)v107 - v221;
  v228 = type metadata accessor for Logger();
  v229 = *(_QWORD *)(v228 - 8);
  v230 = (*(_QWORD *)(v229 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = MEMORY[0x24BDAC7A8](v234, v227);
  v231 = (char *)v107 - v230;
  v232 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = (void *)MEMORY[0x24BDAC7A8](v14, v16);
  v233 = (char *)v107 - v232;
  v260 = v17;
  v259 = v18;
  v258 = v19;
  v257 = v20;
  v256 = v21;
  v255 = v22;
  v23 = v17;
  if (v234)
  {
    v208 = v234;
    v56 = v231;
    v147 = v234;
    v244 = v234;
    swift_unknownObjectRetain();
    swift_retain();
    (*(void (**)(char *, uint64_t, uint64_t))(v220 + 16))(v222, v224, v219);
    v243 = v227;
    v146 = &v242;
    v145 = (void (*)(char *, _QWORD))swift_modifyAtReferenceWritableKeyPath();
    (*(void (**)(uint64_t, char *, uint64_t))(v220 + 40))(v57, v222, v219);
    v145(v146, 0);
    swift_unknownObjectRelease();
    swift_release();
    v58 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(v56, v58, v228);
    v59 = v147;
    v148 = 24;
    v161 = 7;
    v60 = swift_allocObject();
    v61 = v225;
    v155 = v60;
    *(_QWORD *)(v60 + 16) = v147;
    v62 = v61;
    v162 = swift_allocObject();
    *(_QWORD *)(v162 + 16) = v225;
    v179 = Logger.logObject.getter();
    v180 = static os_log_type_t.error.getter();
    v151 = &v240;
    v240 = 42;
    v149 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v150 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v152 = v241;
    v158 = 17;
    v164 = swift_allocObject();
    v157 = 32;
    *(_BYTE *)(v164 + 16) = 32;
    v165 = swift_allocObject();
    v159 = 8;
    *(_BYTE *)(v165 + 16) = 8;
    v160 = 32;
    v63 = swift_allocObject();
    v153 = v63;
    *(_QWORD *)(v63 + 16) = implicit closure #1 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v63 + 24) = 0;
    v64 = swift_allocObject();
    v65 = v153;
    v166 = v64;
    *(_QWORD *)(v64 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v64 + 24) = v65;
    v167 = swift_allocObject();
    *(_BYTE *)(v167 + 16) = 0;
    v168 = swift_allocObject();
    *(_BYTE *)(v168 + 16) = v159;
    v66 = swift_allocObject();
    v154 = v66;
    *(_QWORD *)(v66 + 16) = implicit closure #2 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v66 + 24) = 0;
    v67 = swift_allocObject();
    v68 = v154;
    v169 = v67;
    *(_QWORD *)(v67 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v67 + 24) = v68;
    v170 = swift_allocObject();
    *(_BYTE *)(v170 + 16) = v157;
    v171 = swift_allocObject();
    *(_BYTE *)(v171 + 16) = v159;
    v69 = swift_allocObject();
    v70 = v155;
    v156 = v69;
    *(_QWORD *)(v69 + 16) = partial apply for implicit closure #3 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v69 + 24) = v70;
    v71 = swift_allocObject();
    v72 = v156;
    v172 = v71;
    *(_QWORD *)(v71 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v71 + 24) = v72;
    v173 = swift_allocObject();
    *(_BYTE *)(v173 + 16) = v157;
    v174 = swift_allocObject();
    *(_BYTE *)(v174 + 16) = v159;
    v73 = swift_allocObject();
    v74 = v162;
    v163 = v73;
    *(_QWORD *)(v73 + 16) = partial apply for implicit closure #4 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v73 + 24) = v74;
    v75 = swift_allocObject();
    v76 = v163;
    v176 = v75;
    *(_QWORD *)(v75 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v75 + 24) = v76;
    v178 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v175 = _allocateUninitializedArray<A>(_:)();
    v177 = v77;
    swift_retain();
    v78 = v164;
    v79 = v177;
    *v177 = closure #1 in OSLogArguments.append(_:)partial apply;
    v79[1] = v78;
    swift_retain();
    v80 = v165;
    v81 = v177;
    v177[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v81[3] = v80;
    swift_retain();
    v82 = v166;
    v83 = v177;
    v177[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v83[5] = v82;
    swift_retain();
    v84 = v167;
    v85 = v177;
    v177[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v85[7] = v84;
    swift_retain();
    v86 = v168;
    v87 = v177;
    v177[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v87[9] = v86;
    swift_retain();
    v88 = v169;
    v89 = v177;
    v177[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v89[11] = v88;
    swift_retain();
    v90 = v170;
    v91 = v177;
    v177[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v91[13] = v90;
    swift_retain();
    v92 = v171;
    v93 = v177;
    v177[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v93[15] = v92;
    swift_retain();
    v94 = v172;
    v95 = v177;
    v177[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v95[17] = v94;
    swift_retain();
    v96 = v173;
    v97 = v177;
    v177[18] = closure #1 in OSLogArguments.append(_:)partial apply;
    v97[19] = v96;
    swift_retain();
    v98 = v174;
    v99 = v177;
    v177[20] = closure #1 in OSLogArguments.append(_:)partial apply;
    v99[21] = v98;
    swift_retain();
    v100 = v176;
    v101 = v177;
    v177[22] = closure #1 in OSLogArguments.append(_:)partial apply;
    v101[23] = v100;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v179, (os_log_type_t)v180))
    {
      v102 = v209;
      v138 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v139 = createStorage<A>(capacity:type:)(0);
      v140 = createStorage<A>(capacity:type:)(3);
      v141 = &v239;
      v239 = v138;
      v142 = &v238;
      v238 = v139;
      v143 = &v237;
      v237 = v140;
      serialize(_:at:)(2, &v239);
      serialize(_:at:)(4, v141);
      v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v236 = v164;
      closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)v141, (uint64_t)v142, (uint64_t)v143);
      v144 = v102;
      if (v102)
      {
        __break(1u);
      }
      else
      {
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v165;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v136 = 0;
        v103 = v136;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v166;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v135 = v103;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v167;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v134 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v168;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v133 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v236 = v169;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v132 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v170;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v131 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v171;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v130 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v172;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v129 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v173;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v128 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v174;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        v127 = 0;
        v235 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v236 = v176;
        closure #1 in osLogInternal(_:log:type:)(&v235, (uint64_t)&v239, (uint64_t)&v238, (uint64_t)&v237);
        _os_log_impl(&dword_23DAB4000, v179, (os_log_type_t)v180, "HeadphoneManager: %s: %ld Failed to update AAD Device Config, Error: %s %s", v138, v152);
        destroyStorage<A>(_:count:)(v139, 0, v137);
        destroyStorage<A>(_:count:)(v140, 3, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v138, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v229 + 8))(v231, v228);
  }
  else
  {
    v24 = v233;
    v25 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v229 + 16))(v24, v25, v228);
    v26 = v225;
    v191 = 7;
    v192 = swift_allocObject();
    *(_QWORD *)(v192 + 16) = v225;
    v206 = Logger.logObject.getter();
    v207 = static os_log_type_t.default.getter();
    v183 = &v253;
    v190 = 32;
    v253 = 32;
    v181 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v182 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v184 = v254;
    v188 = 17;
    v194 = swift_allocObject();
    v187 = 32;
    *(_BYTE *)(v194 + 16) = 32;
    v195 = swift_allocObject();
    v189 = 8;
    *(_BYTE *)(v195 + 16) = 8;
    v27 = swift_allocObject();
    v185 = v27;
    *(_QWORD *)(v27 + 16) = implicit closure #5 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v27 + 24) = 0;
    v28 = swift_allocObject();
    v29 = v185;
    v196 = v28;
    *(_QWORD *)(v28 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v28 + 24) = v29;
    v197 = swift_allocObject();
    *(_BYTE *)(v197 + 16) = 0;
    v198 = swift_allocObject();
    *(_BYTE *)(v198 + 16) = v189;
    v30 = swift_allocObject();
    v186 = v30;
    *(_QWORD *)(v30 + 16) = implicit closure #6 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v30 + 24) = 0;
    v31 = swift_allocObject();
    v32 = v186;
    v199 = v31;
    *(_QWORD *)(v31 + 16) = thunk for @escaping @callee_guaranteed () -> (@unowned Int)partial apply;
    *(_QWORD *)(v31 + 24) = v32;
    v200 = swift_allocObject();
    *(_BYTE *)(v200 + 16) = v187;
    v201 = swift_allocObject();
    *(_BYTE *)(v201 + 16) = v189;
    v33 = swift_allocObject();
    v34 = v192;
    v193 = v33;
    *(_QWORD *)(v33 + 16) = partial apply for implicit closure #7 in closure #1 in static AADeviceProperty.subscript.setter;
    *(_QWORD *)(v33 + 24) = v34;
    v35 = swift_allocObject();
    v36 = v193;
    v203 = v35;
    *(_QWORD *)(v35 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v35 + 24) = v36;
    v205 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v202 = _allocateUninitializedArray<A>(_:)();
    v204 = v37;
    swift_retain();
    v38 = v194;
    v39 = v204;
    *v204 = closure #1 in OSLogArguments.append(_:)partial apply;
    v39[1] = v38;
    swift_retain();
    v40 = v195;
    v41 = v204;
    v204[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v41[3] = v40;
    swift_retain();
    v42 = v196;
    v43 = v204;
    v204[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v43[5] = v42;
    swift_retain();
    v44 = v197;
    v45 = v204;
    v204[6] = closure #1 in OSLogArguments.append(_:)partial apply;
    v45[7] = v44;
    swift_retain();
    v46 = v198;
    v47 = v204;
    v204[8] = closure #1 in OSLogArguments.append(_:)partial apply;
    v47[9] = v46;
    swift_retain();
    v48 = v199;
    v49 = v204;
    v204[10] = closure #1 in OSLogArguments.append<A>(_:)partial apply;
    v49[11] = v48;
    swift_retain();
    v50 = v200;
    v51 = v204;
    v204[12] = closure #1 in OSLogArguments.append(_:)partial apply;
    v51[13] = v50;
    swift_retain();
    v52 = v201;
    v53 = v204;
    v204[14] = closure #1 in OSLogArguments.append(_:)partial apply;
    v53[15] = v52;
    swift_retain();
    v54 = v203;
    v55 = v204;
    v204[16] = closure #1 in OSLogArguments.append(_:)partial apply;
    v55[17] = v54;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v206, (os_log_type_t)v207))
    {
      v104 = v209;
      v120 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v119 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v121 = createStorage<A>(capacity:type:)(0);
      v122 = createStorage<A>(capacity:type:)(2);
      v123 = &v249;
      v249 = v120;
      v124 = &v248;
      v248 = v121;
      v125 = &v247;
      v247 = v122;
      serialize(_:at:)(2, &v249);
      serialize(_:at:)(3, v123);
      v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v246 = v194;
      closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)v123, (uint64_t)v124, (uint64_t)v125);
      v126 = v104;
      if (v104)
      {
        __break(1u);
      }
      else
      {
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v195;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v118 = 0;
        v105 = v118;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v196;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v117 = v105;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v197;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v116 = 0;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v198;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v115 = 0;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append<A>(_:)partial apply;
        v246 = v199;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v114 = 0;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v200;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v113 = 0;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v201;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        v112 = 0;
        v245 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v246 = v203;
        closure #1 in osLogInternal(_:log:type:)(&v245, (uint64_t)&v249, (uint64_t)&v248, (uint64_t)&v247);
        _os_log_impl(&dword_23DAB4000, v206, (os_log_type_t)v207, "HeadphoneManager: %s: %ld  Successfully Updated AAD Device Config: %s", v120, v184);
        destroyStorage<A>(_:count:)(v121, 0, v119);
        destroyStorage<A>(_:count:)(v122, 2, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v120, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
    }

    (*(void (**)(char *, uint64_t))(v229 + 8))(v233, v228);
  }
  swift_unknownObjectRetain();
  swift_retain();
  v252 = v227;
  swift_getAtKeyPath();
  v111 = (uint64_t *)(v218 + *(int *)(v212 + 52));
  if (*v111)
  {
    v110 = *v111;
    swift_retain();
    outlined destroy of AADeviceProperty<A, B>(v218, v219);
    CurrentValueSubject.send(_:)();
    swift_release();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    swift_release();
    outlined destroy of AADeviceProperty<A, B>(v218, v219);
  }
  dispatch thunk of ObservableObject.objectWillChange.getter();
  type metadata accessor for ObservableObjectPublisher();
  result = swift_dynamicCast();
  if ((result & 1) != 0)
    v109 = v251;
  else
    v109 = 0;
  v108 = v109;
  if (v109)
  {
    v107[2] = v108;
    v107[1] = v108;
    v250 = v108;
    ObservableObjectPublisher.send()();
    return swift_release();
  }
  return result;
}

uint64_t implicit closure #1 in closure #1 in static AADeviceProperty.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #2 in closure #1 in static AADeviceProperty.subscript.setter()
{
  return 65;
}

uint64_t implicit closure #3 in closure #1 in static AADeviceProperty.subscript.setter(void *a1)
{
  id v1;

  v1 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  return String.init<A>(describing:)();
}

uint64_t implicit closure #4 in closure #1 in static AADeviceProperty.subscript.setter(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

uint64_t implicit closure #5 in closure #1 in static AADeviceProperty.subscript.setter()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("subscript(_enclosingInstance:wrapped:storage:)", 0x2EuLL, 1)._countAndFlagsBits;
}

uint64_t implicit closure #6 in closure #1 in static AADeviceProperty.subscript.setter()
{
  return 67;
}

uint64_t implicit closure #7 in closure #1 in static AADeviceProperty.subscript.setter(void *a1)
{
  id v1;
  id v4;
  uint64_t v5;

  v1 = a1;
  v4 = objc_msgSend(a1, sel_debugDescription);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

void (*static AADeviceProperty.subscript.modify(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4))(uint64_t **a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t __size;
  _QWORD *v9;
  void *v13;

  v9 = malloc(0x38uLL);
  *a1 = v9;
  v9[2] = a4;
  v9[1] = a3;
  *v9 = a2;
  v4 = *(_QWORD *)(*a3 + *MEMORY[0x24BEE35B8] + 8);
  v9[3] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v9[4] = v5;
  __size = *(_QWORD *)(v5 + 64);
  v9[5] = malloc(__size);
  v13 = malloc(__size);
  v9[6] = v13;
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  static AADeviceProperty.subscript.getter(a2, a3, a4, (uint64_t)v13);
  return static AADeviceProperty.subscript.modify;
}

void static AADeviceProperty.subscript.modify(uint64_t **a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t *v11;

  v11 = *a1;
  if ((a2 & 1) != 0)
  {
    v7 = (void *)v11[6];
    v8 = (void *)v11[5];
    v2 = v11[4];
    v3 = v11[3];
    v4 = (_QWORD *)v11[2];
    v5 = (_QWORD *)v11[1];
    v6 = *v11;
    (*(void (**)(void))(v2 + 16))();
    static AADeviceProperty.subscript.setter((uint64_t)v8, v6, v5, v4);
    (*(void (**)(void *, uint64_t))(v2 + 8))(v7, v3);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    free(v7);
    free(v8);
  }
  else
  {
    v9 = (void *)v11[6];
    v10 = (void *)v11[5];
    static AADeviceProperty.subscript.setter((uint64_t)v9, *v11, (_QWORD *)v11[1], (_QWORD *)v11[2]);
    swift_release();
    swift_release();
    swift_unknownObjectRelease();
    free(v9);
    free(v10);
  }
  free(v11);
}

void AADeviceProperty.wrappedValue.getter()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void key path getter for AADeviceProperty.wrappedValue : <A, B>AADeviceProperty<A, B>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD v21[6];

  v16 = a4;
  v13 = a1;
  v4 = (uint64_t *)(a2 + a3 - 32);
  v11 = *v4;
  v21[5] = v11;
  v18 = v4[1];
  v21[4] = v18;
  v12 = v4[2];
  v15 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](a1, a2);
  v17 = (char *)&v11 - v5;
  v21[0] = v11;
  v21[1] = v18;
  v21[2] = v12;
  v21[3] = v6;
  v19 = type metadata accessor for AADeviceProperty(0, (uint64_t)v21);
  v14 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v13, v7);
  v20 = (char *)&v11 - v14;
  outlined init with copy of AADeviceProperty<A, B>(v8, (uint64_t)&v11 - v14, v9, v10);
  AADeviceProperty.wrappedValue.getter();
}

uint64_t sub_23DB3F670()
{
  uint64_t v0;
  uint64_t result;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 - 112) + 32))(*(_QWORD *)(v0 - 104), *(_QWORD *)(v0 - 96), *(_QWORD *)(v0 - 88));
  result = *(_QWORD *)(v0 - 72);
  outlined destroy of AADeviceProperty<A, B>(result, *(_QWORD *)(v0 - 88));
  return result;
}

void key path setter for AADeviceProperty.wrappedValue : <A, B>AADeviceProperty<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD v6[2];
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[6];

  v6[1] = a1;
  v4 = (uint64_t *)(a3 + a4 - 32);
  v8 = *v4;
  v13[5] = v8;
  v9 = v4[1];
  v13[4] = v9;
  v10 = v4[2];
  v11 = v4[3];
  v7 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1, a1);
  v12 = (char *)v6 - v7;
  (*(void (**)(void))(v5 + 16))();
  v13[0] = v8;
  v13[1] = v9;
  v13[2] = v10;
  v13[3] = v11;
  type metadata accessor for AADeviceProperty(0, (uint64_t)v13);
  AADeviceProperty.wrappedValue.setter();
}

void AADeviceProperty.wrappedValue.setter()
{
  implicit closure #1 in default argument 0 of fatalError(_:file:line:)();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void AADeviceProperty.wrappedValue.modify(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t __size;
  _QWORD *v7;

  v7 = malloc(0x30uLL);
  *a1 = v7;
  v7[1] = v2;
  *v7 = a2;
  v3 = *(_QWORD *)(a2 + 24);
  v7[2] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v7[3] = v4;
  __size = *(_QWORD *)(v4 + 64);
  v7[4] = malloc(__size);
  v7[5] = malloc(__size);
  AADeviceProperty.wrappedValue.getter();
}

void (*sub_23DB3F8C0())(uint64_t a1, char a2)
{
  return AADeviceProperty.wrappedValue.modify;
}

void AADeviceProperty.wrappedValue.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
    AADeviceProperty.wrappedValue.setter();
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)a1 + 24) + 16))();
  AADeviceProperty.wrappedValue.setter();
}

void sub_23DB3F984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  uint64_t v16;

  (*(void (**)(uint64_t, uint64_t))(a12 + 8))(a13, a14);
  free(a15);
  free(a16);
  free(*(void **)(v16 - 48));
}

void variable initialization expression of AADeviceProperty.publisher(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t variable initialization expression of AADeviceProperty.objectWillChange()
{
  return 0;
}

uint64_t AADeviceProperty.objectWillChange.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + *(int *)(a1 + 56));
  swift_retain();
  return v3;
}

uint64_t AADeviceProperty.objectWillChange.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_retain();
  *(_QWORD *)(v2 + *(int *)(a2 + 56)) = a1;
  swift_release();
  return swift_release();
}

void (*AADeviceProperty.objectWillChange.modify())()
{
  return AADeviceProperty.objectWillChange.modify;
}

uint64_t AADeviceProperty.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  uint64_t v23;
  uint64_t v24;

  v10 = a3;
  v11 = a1;
  v13 = "Fatal error";
  v14 = "Unexpectedly found nil while unwrapping an Optional value";
  v15 = "HeadphoneManager/AADevicePropertyWrapper.swift";
  v23 = 0;
  v21 = 0;
  v16 = *(_QWORD *)(a1 + 24);
  v24 = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v19 = (uint64_t)&v6 - v18;
  v23 = v3;
  v22[1] = *(_QWORD *)(v4 + 16);
  v20 = *(_QWORD *)(v3 + *(int *)(v4 + 52));
  swift_retain();
  if (v20)
  {
    v9 = v20;
    v8 = v20;
    v21 = v20;
    swift_retain();
    *v10 = v8;
    return swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v19, v12, v16);
    HeadphonePropertyWrapperPublisher.init(_:)(v19, v16, v22);
    *(_QWORD *)(v12 + *(int *)(v11 + 52)) = v22[0];
    swift_release();
    v7 = *(_QWORD *)(v12 + *(int *)(v11 + 52));
    result = swift_retain();
    if (v7)
    {
      v6 = v7;
    }
    else
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    *v10 = v6;
  }
  return result;
}

void default argument 3 of AADeviceProperty.init(_:_:_:_:)(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AADeviceProperty.init(_:_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD v47[6];

  v35 = a7;
  v38 = a1;
  v37 = a2;
  v29 = a3;
  v30 = a4;
  v40 = a6;
  v46 = 0;
  v45 = 0;
  v44 = 0;
  v43 = 0;
  v42 = 0;
  v47[5] = a5;
  v47[4] = a6;
  v36 = *(_QWORD *)(a6 - 8);
  v28 = (*(_QWORD *)(v36 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](a1, a2);
  v33 = (char *)&v27 - v28;
  v47[0] = v7;
  v47[1] = v8;
  v47[2] = v9;
  v47[3] = v10;
  v31 = 0;
  v41 = (int *)type metadata accessor for AADeviceProperty(0, (uint64_t)v47);
  v32 = (*(_QWORD *)(*((_QWORD *)v41 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = MEMORY[0x24BDAC7A8](v38, v37);
  v12 = v41;
  v13 = (char *)&v27 - v32;
  v39 = v13;
  v46 = (char *)&v27 - v32;
  v45 = v11;
  v44 = v14;
  v43 = v15;
  v34 = *v16;
  v42 = v34;
  *(_QWORD *)&v13[v41[13]] = v17;
  *(_QWORD *)&v13[v12[14]] = v17;
  swift_retain();
  v18 = v33;
  v19 = v36;
  v20 = v37;
  v21 = v40;
  *(_QWORD *)&v39[v41[15]] = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v18, v20, v21);
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v39, v33, v40);
  v22 = v35;
  v23 = v40;
  v24 = v41;
  v25 = (uint64_t)v39;
  v39[v41[16]] = v34;
  outlined init with copy of AADeviceProperty<A, B>(v25, v22, v23, v24);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v40);
  swift_release();
  result = (uint64_t)v39;
  outlined destroy of AADeviceProperty<A, B>((uint64_t)v39, v40);
  return result;
}

uint64_t sub_23DB3FE98()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_6(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB3FEC8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB3FEF8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_6()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB3FF40()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_6(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB3FF88()
{
  return swift_deallocObject();
}

uint64_t sub_23DB3FFB8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB3FFE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sSiIegd_SiIegr_TRTA_3@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return thunk for @escaping @callee_guaranteed () -> (@unowned Int)(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_23DB40030()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os14OSLogArgumentsV6appendyyxycs17FixedWidthIntegerRzlFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_3(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;

  v8 = *(_QWORD *)(v3 + 16);
  v9 = *(_QWORD *)(v3 + 24);
  v4 = lazy protocol witness table accessor for type Int and conformance Int();
  return closure #1 in OSLogArguments.append<A>(_:)(a1, a2, a3, v8, v9, MEMORY[0x24BEE1768], v4);
}

uint64_t sub_23DB400CC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB400FC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB4012C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40174()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB401BC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB401EC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB4021C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40264()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB402AC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in static AADeviceProperty.subscript.setter()
{
  return implicit closure #7 in static AADeviceProperty.subscript.setter();
}

uint64_t sub_23DB402F4()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #8 in static AADeviceProperty.subscript.setter()
{
  return implicit closure #8 in static AADeviceProperty.subscript.setter();
}

uint64_t sub_23DB403AC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB403DC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB4040C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40454()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB4049C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB404CC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB404FC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40544()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB405E0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40610()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40640()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40688()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB406D0()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40700()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40730()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40778()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB407C0()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in static AADeviceProperty.subscript.setter()
{
  uint64_t *v0;

  return implicit closure #12 in static AADeviceProperty.subscript.setter(v0[6], v0[2], v0[3], v0[4]);
}

uint64_t sub_23DB40834()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #13 in static AADeviceProperty.subscript.setter()
{
  uint64_t *v0;

  return implicit closure #13 in static AADeviceProperty.subscript.setter(v0[6], v0[2], v0[3], v0[4]);
}

uint64_t sub_23DB408A8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB408D8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40908()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40950()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40998()
{
  return swift_deallocObject();
}

uint64_t sub_23DB409C8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB409F8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40A40()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40ADC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40B0C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40B3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40B84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40BCC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40BFC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40C2C()
{
  swift_release();
  return swift_deallocObject();
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_2(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB40C74()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #16 in static AADeviceProperty.subscript.setter()
{
  uint64_t v0;

  return implicit closure #16 in static AADeviceProperty.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB40CB8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40CE8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40D18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40D60()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40DA8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40DD8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40E08()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40E50()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40EEC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40F1C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB40F4C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40F94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB40FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  v8 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v8 - 8);
  v1 = *(_DWORD *)(v3 + 80);
  v4 = (v1 + 64) & ~v1;
  v5 = (v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 8 + v1) & ~v1;
  swift_unknownObjectRelease();
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v7(v0 + v4, v8);

  v7(v0 + v6, v8);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static AADeviceProperty.subscript.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) - 8);
  v3 = (*(_DWORD *)(v2 + 80) + 64) & ~(unint64_t)*(_DWORD *)(v2 + 80);
  v4 = (v3 + *(_QWORD *)(v2 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in static AADeviceProperty.subscript.setter(a1, *(_QWORD *)(v1 + 48), *(_QWORD **)(v1 + 56), v1 + v3, *(void **)(v1 + v4), v1+ ((v4 + 8 + *(_DWORD *)(v2 + 80)) & ~(unint64_t)*(_DWORD *)(v2 + 80)));
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return result;
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t type metadata accessor for AADeviceProperty(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x24263B62C](a1, a2, &nominal type descriptor for AADeviceProperty);
}

uint64_t outlined init with copy of AADeviceProperty<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(void))(*(_QWORD *)(a3 - 8) + 16))();
  v5 = a4[13];
  v6 = *(_QWORD *)(a1 + v5);
  swift_retain();
  *(_QWORD *)(a2 + v5) = v6;
  v7 = a4[14];
  v8 = *(_QWORD *)(a1 + v7);
  swift_retain();
  *(_QWORD *)(a2 + v7) = v8;
  v10 = a4[15];
  v11 = *(_QWORD *)(a1 + v10);
  swift_retain();
  result = a2;
  *(_QWORD *)(a2 + v10) = v11;
  *(_BYTE *)(a2 + a4[16]) = *(_BYTE *)(a1 + a4[16]);
  return result;
}

uint64_t sub_23DB412B0()
{
  return 32;
}

__n128 sub_23DB412DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  result = *(__n128 *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t type metadata instantiation function for AADeviceProperty()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for AADeviceProperty()
{
  unint64_t v0;
  uint64_t v2;

  v2 = swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return v2;
}

unint64_t initializeBufferWithCopyOfBuffer for AADeviceProperty(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v15;

  v15 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v15 & 0x20000) != 0)
  {
    v10 = *a2;
    swift_retain();
    *a1 = v10;
    return *a1 + ((v15 + 16) & ~(unint64_t)v15);
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))(a1, a2);
    v4 = *(int *)(a3 + 52);
    v5 = *(_QWORD *)((char *)a2 + v4);
    swift_retain();
    *(_QWORD *)((char *)a1 + v4) = v5;
    v6 = *(int *)(a3 + 56);
    v7 = *(_QWORD *)((char *)a2 + v6);
    swift_retain();
    *(_QWORD *)((char *)a1 + v6) = v7;
    v8 = *(int *)(a3 + 60);
    v9 = *(_QWORD *)((char *)a2 + v8);
    swift_retain();
    *(_QWORD *)((char *)a1 + v8) = v9;
    *((_BYTE *)a1 + *(int *)(a3 + 64)) = *((_BYTE *)a2 + *(int *)(a3 + 64));
    return (unint64_t)a1;
  }
}

uint64_t destroy for AADeviceProperty(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t initializeWithCopy for AADeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 16))();
  v4 = *(int *)(a3 + 52);
  v5 = *(_QWORD *)(a2 + v4);
  swift_retain();
  *(_QWORD *)(a1 + v4) = v5;
  v6 = *(int *)(a3 + 56);
  v7 = *(_QWORD *)(a2 + v6);
  swift_retain();
  *(_QWORD *)(a1 + v6) = v7;
  v9 = *(int *)(a3 + 60);
  v10 = *(_QWORD *)(a2 + v9);
  swift_retain();
  result = a1;
  *(_QWORD *)(a1 + v9) = v10;
  *(_BYTE *)(a1 + *(int *)(a3 + 64)) = *(_BYTE *)(a2 + *(int *)(a3 + 64));
  return result;
}

uint64_t assignWithCopy for AADeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 24))();
  v3 = *(int *)(a3 + 52);
  v6 = (_QWORD *)(a1 + v3);
  v7 = *(_QWORD *)(a2 + v3);
  swift_retain();
  *v6 = v7;
  swift_release();
  v4 = *(int *)(a3 + 56);
  v8 = (_QWORD *)(a1 + v4);
  v9 = *(_QWORD *)(a2 + v4);
  swift_retain();
  *v8 = v9;
  swift_release();
  v10 = *(int *)(a3 + 60);
  v11 = *(_QWORD *)(a2 + v10);
  swift_retain();
  *(_QWORD *)(a1 + v10) = v11;
  swift_release();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(a3 + 64)) = *(_BYTE *)(a2 + *(int *)(a3 + 64));
  return result;
}

uint64_t initializeWithTake for AADeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 32))();
  result = a1;
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  *(_QWORD *)(a1 + *(int *)(a3 + 56)) = *(_QWORD *)(a2 + *(int *)(a3 + 56));
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  *(_BYTE *)(a1 + *(int *)(a3 + 64)) = *(_BYTE *)(a2 + *(int *)(a3 + 64));
  return result;
}

uint64_t assignWithTake for AADeviceProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 40))();
  *(_QWORD *)(a1 + *(int *)(a3 + 52)) = *(_QWORD *)(a2 + *(int *)(a3 + 52));
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 56)) = *(_QWORD *)(a2 + *(int *)(a3 + 56));
  swift_release();
  *(_QWORD *)(a1 + *(int *)(a3 + 60)) = *(_QWORD *)(a2 + *(int *)(a3 + 60));
  swift_release();
  result = a1;
  *(_BYTE *)(a1 + *(int *)(a3 + 64)) = *(_BYTE *)(a2 + *(int *)(a3 + 64));
  return result;
}

uint64_t getEnumTagSinglePayload for AADeviceProperty()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DB4198C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  if (a2 == *(_DWORD *)(v7 + 84))
  {
    return (*(unsigned int (**)(uint64_t, _QWORD, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    v4 = -1;
    if (*(_QWORD *)(a1 + *(int *)(a3 + 60)) < 0x100000000uLL)
      v4 = *(_QWORD *)(a1 + *(int *)(a3 + 60));
    return (v4 + 1);
  }
  else
  {
    __break(1u);
  }
  return v5;
}

uint64_t storeEnumTagSinglePayload for AADeviceProperty()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23DB41A84(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a4 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (a3 == *(_DWORD *)(v5 + 84))
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, uint64_t))(v5 + 56))(result, a2, a2, v4);
  if (a3 == 0x7FFFFFFF)
    *(_QWORD *)(result + *(int *)(a4 + 60)) = a2 - 1;
  else
    __break(1u);
  return result;
}

uint64_t sub_23DB41B34()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #7 in closure #1 in static AADeviceProperty.subscript.setter()
{
  uint64_t v0;

  return implicit closure #7 in closure #1 in static AADeviceProperty.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB41B78()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41BA8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41BD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41C20()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41C68()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41C98()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41CC8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41D10()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41DAC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41DDC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41E0C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41E54()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41E9C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #3 in closure #1 in static AADeviceProperty.subscript.setter()
{
  uint64_t v0;

  return implicit closure #3 in closure #1 in static AADeviceProperty.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB41EE0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in closure #1 in static AADeviceProperty.subscript.setter()
{
  uint64_t v0;

  return implicit closure #4 in closure #1 in static AADeviceProperty.subscript.setter(*(void **)(v0 + 16));
}

uint64_t sub_23DB41F24()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41F54()
{
  return swift_deallocObject();
}

uint64_t sub_23DB41F84()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB41FCC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB42014()
{
  return swift_deallocObject();
}

uint64_t sub_23DB42044()
{
  return swift_deallocObject();
}

uint64_t sub_23DB42074()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB420BC()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB42158()
{
  return swift_deallocObject();
}

uint64_t sub_23DB42188()
{
  return swift_deallocObject();
}

uint64_t sub_23DB421B8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB42200()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB42248()
{
  return swift_deallocObject();
}

uint64_t sub_23DB42278()
{
  return swift_deallocObject();
}

uint64_t sub_23DB422A8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB422F0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os9serialize_2atyx_Spys5UInt8VGzts17FixedWidthIntegerRzlFySWXEfU_TA_3()
{
  return closure #1 in serialize<A>(_:at:)();
}

uint64_t _swift_stdlib_has_malloc_size_6()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_6(const void *a1)
{
  return malloc_size(a1);
}

uint64_t variable initialization expression of HeadphoneDataProvider.kDefaultsStorageIdentifier()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.settings.headphone.HeadphoneManager.Mock", 0x32uLL, 1)._countAndFlagsBits;
}

uint64_t HeadphoneDataProvider.kDefaultsStorageIdentifier.getter()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_kDefaultsStorageIdentifier);
  swift_bridgeObjectRetain();
  return v2;
}

char *HeadphoneDataProvider.defaultsObserver.getter()
{
  uint64_t v0;
  NSUserDefaults_optional *v1;
  void *v2;
  char *v3;
  void *v4;
  Swift::String_optional suiteName;
  void **v7;
  char *v8;
  uint64_t v10;
  id *v11;
  id v12;

  v11 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver);
  swift_beginAccess();
  v12 = *v11;
  outlined copy of DefaultsObserver??(*v11);
  swift_endAccess();
  if (v12 != (id)1)
    return (char *)v12;
  type metadata accessor for DefaultsObserver();
  type metadata accessor for NSUserDefaults();
  suiteName = *(Swift::String_optional *)(v10
                                        + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_kDefaultsStorageIdentifier);
  swift_bridgeObjectRetain();
  NSUserDefaults.__allocating_init(suiteName:)(v1, suiteName);
  v8 = DefaultsObserver.__allocating_init(withDefault:)(v2);
  v3 = v8;
  v7 = (void **)(v10 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver);
  swift_beginAccess();
  v4 = *v7;
  *v7 = v8;
  outlined consume of DefaultsObserver??(v4);
  swift_endAccess();
  return v8;
}

id outlined copy of DefaultsObserver??(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

unint64_t type metadata accessor for NSUserDefaults()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSUserDefaults;
  if (!lazy cache variable for type metadata for NSUserDefaults)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSUserDefaults);
    return ObjCClassMetadata;
  }
  return v2;
}

void __swiftcall NSUserDefaults.__allocating_init(suiteName:)(NSUserDefaults_optional *__return_ptr retstr, Swift::String_optional suiteName)
{
  id v2;
  void *object;
  uint64_t countAndFlagsBits;

  countAndFlagsBits = suiteName.value._countAndFlagsBits;
  object = suiteName.value._object;
  v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  @nonobjc NSUserDefaults.init(suiteName:)(countAndFlagsBits, (uint64_t)object);
}

void outlined consume of DefaultsObserver??(void *a1)
{
  if (a1 != (void *)1)

}

void HeadphoneDataProvider.defaultsObserver.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;
  outlined consume of DefaultsObserver??(v3);
  swift_endAccess();

}

void (*HeadphoneDataProvider.defaultsObserver.modify(char **a1))(id *a1, char a2)
{
  char *v1;

  a1[1] = v1;
  *a1 = HeadphoneDataProvider.defaultsObserver.getter();
  return HeadphoneDataProvider.defaultsObserver.modify;
}

void HeadphoneDataProvider.defaultsObserver.modify(id *a1, char a2)
{
  id v2;
  id v3;

  if ((a2 & 1) != 0)
  {
    v3 = *a1;
    v2 = *a1;
    HeadphoneDataProvider.defaultsObserver.setter(v3);
    outlined destroy of DefaultsObserver?(a1);
  }
  else
  {
    HeadphoneDataProvider.defaultsObserver.setter(*a1);
  }
}

uint64_t variable initialization expression of HeadphoneDataProvider.$__lazy_storage_$_defaultsObserver()
{
  return 1;
}

uint64_t type metadata accessor for HeadphoneDataProvider()
{
  return objc_opt_self();
}

id HeadphoneDataProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t *HeadphoneDataProvider.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static HeadphoneDataProvider.shared;
}

id static HeadphoneDataProvider.shared.getter()
{
  id v0;
  id *v2;
  id v3;

  v2 = (id *)HeadphoneDataProvider.shared.unsafeMutableAddressor();
  swift_beginAccess();
  v3 = *v2;
  v0 = *v2;
  swift_endAccess();
  return v3;
}

void static HeadphoneDataProvider.shared.setter(void *a1)
{
  id v1;
  void *v2;
  uint64_t *v3;

  v3 = HeadphoneDataProvider.shared.unsafeMutableAddressor();
  v1 = a1;
  swift_beginAccess();
  v2 = (void *)*v3;
  *v3 = (uint64_t)a1;

  swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDataProvider.listeners()
{
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  return Set.init()();
}

uint64_t HeadphoneDataProvider.listeners.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_listeners);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDataProvider.listeners.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_listeners);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HeadphoneDataProvider.listeners.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.listeners.modify;
}

uint64_t HeadphoneDataProvider.listeners.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDataProvider.shouldShowMock()
{
  return 0;
}

uint64_t HeadphoneDataProvider.shouldShowMock.getter()
{
  uint64_t v0;
  char *v2;
  char v3;

  v2 = (char *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMock);
  swift_beginAccess();
  v3 = *v2;
  swift_endAccess();
  return v3 & 1;
}

uint64_t HeadphoneDataProvider.shouldShowMock.setter(char a1)
{
  uint64_t v1;
  _BYTE *v4;

  v4 = (_BYTE *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMock);
  swift_beginAccess();
  *v4 = a1 & 1;
  return swift_endAccess();
}

uint64_t (*HeadphoneDataProvider.shouldShowMock.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.shouldShowMock.modify;
}

uint64_t HeadphoneDataProvider.shouldShowMock.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDataProvider.shouldShowMockKey()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("shouldShowMock", 0xEuLL, 1)._countAndFlagsBits;
}

uint64_t HeadphoneDataProvider.shouldShowMockKey.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMockKey);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDataProvider.shouldShowMockKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  swift_bridgeObjectRetain();
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMockKey);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HeadphoneDataProvider.shouldShowMockKey.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.shouldShowMockKey.modify;
}

uint64_t HeadphoneDataProvider.shouldShowMockKey.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDataProvider.deviceFoundHandler()
{
  return 0;
}

uint64_t HeadphoneDataProvider.deviceFoundHandler.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceFoundHandler);
  swift_beginAccess();
  v3 = *v2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(*v2);
  swift_endAccess();
  return v3;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t HeadphoneDataProvider.deviceFoundHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;

  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceFoundHandler);
  swift_beginAccess();
  v3 = *v5;
  *v5 = a1;
  v5[1] = a2;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v3);
  swift_endAccess();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t (*HeadphoneDataProvider.deviceFoundHandler.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.deviceFoundHandler.modify;
}

uint64_t HeadphoneDataProvider.deviceFoundHandler.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDataProvider.deviceLostHandler()
{
  return 0;
}

uint64_t HeadphoneDataProvider.deviceLostHandler.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceLostHandler);
  swift_beginAccess();
  v3 = *v2;
  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(*v2);
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDataProvider.deviceLostHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;

  outlined copy of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
  v5 = (uint64_t *)(v2 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceLostHandler);
  swift_beginAccess();
  v3 = *v5;
  *v5 = a1;
  v5[1] = a2;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(v3);
  swift_endAccess();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed AudioAccessoryDevice) -> ())?(a1);
}

uint64_t (*HeadphoneDataProvider.deviceLostHandler.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.deviceLostHandler.modify;
}

uint64_t HeadphoneDataProvider.deviceLostHandler.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneDataProvider.dataObjects()
{
  return Dictionary.init()();
}

uint64_t HeadphoneDataProvider.dataObjects.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_dataObjects);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneDataProvider.dataObjects.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_dataObjects);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HeadphoneDataProvider.dataObjects.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.dataObjects.modify;
}

uint64_t HeadphoneDataProvider.dataObjects.modify()
{
  return swift_endAccess();
}

NSMutableDictionary variable initialization expression of HeadphoneDataProvider.hexForReplayDeviceMap()
{
  type metadata accessor for NSMutableDictionary();
  return NSMutableDictionary.__allocating_init()();
}

unint64_t type metadata accessor for NSMutableDictionary()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSMutableDictionary;
  if (!lazy cache variable for type metadata for NSMutableDictionary)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSMutableDictionary);
    return ObjCClassMetadata;
  }
  return v2;
}

NSMutableDictionary __swiftcall NSMutableDictionary.__allocating_init()()
{
  id v0;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  return (NSMutableDictionary)@nonobjc NSMutableDictionary.init()();
}

id HeadphoneDataProvider.hexForReplayDeviceMap.getter()
{
  uint64_t v0;
  id v1;
  id *v3;
  id v4;

  v3 = (id *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_hexForReplayDeviceMap);
  swift_beginAccess();
  v4 = *v3;
  v1 = *v3;
  swift_endAccess();
  return v4;
}

void HeadphoneDataProvider.hexForReplayDeviceMap.setter(void *a1)
{
  uint64_t v1;
  id v2;
  void *v3;
  void **v4;

  v2 = a1;
  v4 = (void **)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_hexForReplayDeviceMap);
  swift_beginAccess();
  v3 = *v4;
  *v4 = a1;

  swift_endAccess();
}

uint64_t (*HeadphoneDataProvider.hexForReplayDeviceMap.modify())()
{
  swift_beginAccess();
  return HeadphoneDataProvider.hexForReplayDeviceMap.modify;
}

uint64_t HeadphoneDataProvider.hexForReplayDeviceMap.modify()
{
  return swift_endAccess();
}

id HeadphoneDataProvider.init()()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  char *v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  char *v17;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  char has_internal_ui;
  char *v28;
  objc_super v29;
  id v30;

  v1 = v0;
  v2 = v0;
  v3 = v0;
  v4 = v0;
  v5 = v0;
  v6 = v0;
  v7 = v0;
  v8 = v0;
  v9 = v0;
  v30 = v0;
  v20 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_kDefaultsStorageIdentifier;
  *(Swift::String *)&v25[v20] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.settings.headphone.HeadphoneManager.Mock", 0x32uLL, 1);

  *(_QWORD *)&v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider____lazy_storage___defaultsObserver] = 1;
  v21 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_listeners;
  type metadata accessor for AnyCancellable();
  lazy protocol witness table accessor for type AnyCancellable and conformance AnyCancellable();
  *(_QWORD *)&v25[v21] = Set.init()();

  v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMock] = 0;
  v22 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_shouldShowMockKey;
  *(Swift::String *)&v25[v22] = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("shouldShowMock", 0xEuLL, 1);

  v10 = &v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceFoundHandler];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;

  v11 = &v25[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_deviceLostHandler];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;

  v23 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_dataObjects;
  *(_QWORD *)&v25[v23] = Dictionary.init()();

  v24 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneDataProvider_hexForReplayDeviceMap;
  type metadata accessor for NSMutableDictionary();
  *(NSMutableDictionary *)&v25[v24] = NSMutableDictionary.__allocating_init()();

  v29.receiver = v30;
  v29.super_class = (Class)type metadata accessor for HeadphoneDataProvider();
  v26 = objc_msgSendSuper2(&v29, sel_init);
  v12 = v26;
  v13 = v26;
  v14 = v26;
  v15 = v26;
  v30 = v26;
  String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Perferences", 0x15uLL, 1);
  String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  has_internal_ui = os_variant_has_internal_ui();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((has_internal_ui & 1) != 0)
  {
    v28 = HeadphoneDataProvider.defaultsObserver.getter();
    if (v28)
    {
      v16 = v28;
      v19 = v28;
      v17 = v28;
      outlined destroy of DefaultsObserver?((id *)&v28);
      (*(void (**)(void))((*(_QWORD *)v16 & *MEMORY[0x24BEE4EA0]) + 0x68))();

      swift_allocObject();
      swift_unknownObjectWeakInit();

      swift_retain();
      swift_release();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<NSUserDefaults, Never>);
      lazy protocol witness table accessor for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>();
      Publisher<>.sink(receiveValue:)();
      swift_release();
      outlined destroy of AnyPublisher<NSUserDefaults, Never>();

      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();

      swift_release();
    }
    else
    {

      outlined destroy of DefaultsObserver?((id *)&v28);
    }
  }
  else
  {

  }
  return v26;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of DefaultsObserver?(id *a1)
{

}

uint64_t sub_23DB43A70()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void closure #1 in HeadphoneDataProvider.init()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  NSMutableDictionary v28;
  uint64_t v29;
  id v30;
  id v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE **v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint32_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  NSObject *v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  id v83;
  id v84;
  _QWORD *v85;
  void *object;
  id v87;
  id v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  id v98;
  uint64_t v99;
  char *v100;
  _QWORD *v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109[2];
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint32_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  _QWORD *v119;
  char v120;
  uint64_t v121;
  id v122;

  v93 = a1;
  v92 = a2;
  v122 = 0;
  v121 = 0;
  v119 = 0;
  v110 = 0;
  v111 = 0;
  v91 = 0;
  v90 = 0;
  v104 = 0;
  v94 = type metadata accessor for Logger();
  v95 = *(_QWORD *)(v94 - 8);
  v96 = (*(_QWORD *)(v95 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v97 = (char *)&v29 - v96;
  v98 = *(id *)MEMORY[0x24BDAC7A8](v93, v92);
  v122 = v98;
  v99 = v2 + 16;
  v121 = v2 + 16;
  v100 = &v120;
  swift_beginAccess();
  v101 = (_QWORD *)MEMORY[0x24263B794](v99);
  swift_endAccess();
  if (v101)
  {
    v89 = v101;
    v85 = v101;
    v119 = v101;
    v3 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("root", 4uLL, 1);
    object = v3._object;
    v87 = (id)MEMORY[0x24263ADA4](v3._countAndFlagsBits);
    swift_bridgeObjectRelease();
    v88 = objc_msgSend(v98, sel_valueForKey_, v87);

    if (v88)
    {
      v84 = v88;
      v83 = v88;
      v82 = &v102;
      _bridgeAnyObjectToAny(_:)();
      outlined init with take of Any((uint64_t)v82, (uint64_t)&v114);
      swift_unknownObjectRelease();
    }
    else
    {
      v114 = 0uLL;
      v115 = 0;
      v116 = 0;
    }
    outlined init with take of Any?(&v114, &v117);
    if (v118)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      if ((swift_dynamicCast() & 1) != 0)
        v79 = v103;
      else
        v79 = 0;
      v81 = v79;
    }
    else
    {
      v80 = 0;
      outlined destroy of Any?((uint64_t)&v117);
      v81 = v80;
    }
    v78 = v81;
    if (v81)
    {
      v77 = v78;
      v71 = v78;
      v104 = v78;
      v72 = MEMORY[0x24BEE0D00];
      v73 = MEMORY[0x24BDCDDE8];
      v74 = MEMORY[0x24BEE0D10];
      v75 = Dictionary.values.getter();
      v76 = MEMORY[0x24263AD44](v75, v72, v73, v74);
      swift_bridgeObjectRelease();
      if (v76 > 0)
      {
        HeadphoneDataProvider.shouldShowMock.setter(1);
        v4 = HeadphoneDataProvider.dataObjects.setter(v71);
        (*(void (**)(uint64_t))((*v85 & *MEMORY[0x24BEE4EA0]) + 0x158))(v4);

        return;
      }
      swift_bridgeObjectRelease();
    }
    v5 = v97;
    v6 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v5, v6, v94);
    v7 = v98;
    v60 = 7;
    v61 = swift_allocObject();
    *(_QWORD *)(v61 + 16) = v98;
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.default.getter();
    v56 = &v112;
    v112 = 12;
    v54 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v55 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v57 = v113;
    v58 = 17;
    v63 = swift_allocObject();
    *(_BYTE *)(v63 + 16) = 64;
    v64 = swift_allocObject();
    *(_BYTE *)(v64 + 16) = 8;
    v59 = 32;
    v8 = swift_allocObject();
    v9 = v61;
    v62 = v8;
    *(_QWORD *)(v8 + 16) = partial apply for implicit closure #1 in closure #1 in HeadphoneDataProvider.init();
    *(_QWORD *)(v8 + 24) = v9;
    v10 = swift_allocObject();
    v11 = v62;
    v66 = v10;
    *(_QWORD *)(v10 + 16) = _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_2;
    *(_QWORD *)(v10 + 24) = v11;
    v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v65 = _allocateUninitializedArray<A>(_:)();
    v67 = v12;
    swift_retain();
    v13 = v63;
    v14 = v67;
    *v67 = closure #1 in OSLogArguments.append(_:)partial apply;
    v14[1] = v13;
    swift_retain();
    v15 = v64;
    v16 = v67;
    v67[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v16[3] = v15;
    swift_retain();
    v17 = v66;
    v18 = v67;
    v67[4] = _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_3;
    v18[5] = v17;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v69, (os_log_type_t)v70))
    {
      v19 = v90;
      v47 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v48 = createStorage<A>(capacity:type:)(1);
      v49 = createStorage<A>(capacity:type:)(0);
      v50 = v109;
      v109[0] = v47;
      v51 = &v108;
      v108 = v48;
      v52 = &v107;
      v107 = v49;
      serialize(_:at:)(2, v109);
      serialize(_:at:)(1, v50);
      v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v106 = v63;
      closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)v50, (uint64_t)v51, (uint64_t)v52);
      v53 = v19;
      if (v19)
      {
        __break(1u);
      }
      else
      {
        v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v106 = v64;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)v109, (uint64_t)&v108, (uint64_t)&v107);
        v44 = 0;
        v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_3;
        v106 = v66;
        closure #1 in osLogInternal(_:log:type:)(&v105, (uint64_t)v109, (uint64_t)&v108, (uint64_t)&v107);
        v43 = 0;
        _os_log_impl(&dword_23DAB4000, v69, (os_log_type_t)v70, "HeadphoneManager-Replay: did not find data dict for notification %@", v47, v57);
        destroyStorage<A>(_:count:)(v48, 1, v46);
        destroyStorage<A>(_:count:)(v49, 0, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v47, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
        v45 = v43;
      }
    }
    else
    {
      v20 = v90;
      swift_release();
      swift_release();
      swift_release();
      v45 = v20;
    }
    v40 = v45;

    (*(void (**)(char *, uint64_t))(v95 + 8))(v97, v94);
    HeadphoneDataProvider.shouldShowMock.setter(0);
    v21 = Dictionary.init()();
    v22 = HeadphoneDataProvider.dataObjects.setter(v21);
    v41 = (*(uint64_t (**)(uint64_t))((*v85 & *MEMORY[0x24BEE4EA0]) + 0x110))(v22);
    v42 = v23;
    if (!v41)
      goto LABEL_29;
    v38 = v41;
    v39 = v42;
    v24 = v40;
    v33 = v42;
    v35 = v41;
    v110 = v41;
    v111 = v42;
    v31 = (id)(*(uint64_t (**)(void))((*v85 & *MEMORY[0x24BEE4EA0]) + 0x140))();
    v30 = objc_msgSend(v31, sel_allValues);
    v32 = (_BYTE *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v109[1] = v32;
    swift_retain();
    v34 = &v29;
    MEMORY[0x24BDAC7A8](&v29, v25);
    v26 = &v29 - 4;
    v36 = &v29 - 4;
    v26[2] = v35;
    v26[3] = v27;
    v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
    lazy protocol witness table accessor for type [Any] and conformance [A]();
    Sequence.forEach(_:)();
    if (!v24)
    {
      swift_release();
      outlined destroy of [Any]();

      swift_release();
LABEL_29:
      type metadata accessor for NSMutableDictionary();
      v28.super.super.isa = NSMutableDictionary.__allocating_init()().super.super.isa;
      HeadphoneDataProvider.hexForReplayDeviceMap.setter(v28.super.super.isa);

      return;
    }
    __break(1u);
  }
}

void partial apply for closure #1 in HeadphoneDataProvider.init()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in HeadphoneDataProvider.init()(a1, v1);
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<NSUserDefaults, Never>);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDB9AF8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<NSUserDefaults, Never> and conformance AnyPublisher<A, B>);
    return v1;
  }
  return v3;
}

void *implicit closure #1 in closure #1 in HeadphoneDataProvider.init()(void *a1)
{
  id v1;

  v1 = a1;
  return a1;
}

void closure #1 in closure #1 in HeadphoneDataProvider.init()(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  void *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v7;
  _BYTE v8[32];
  void (*v9)(void);
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v9 = a2;
  v10 = a3;
  outlined init with copy of Any(a1, (uint64_t)v8);
  type metadata accessor for HeadphoneDevice();
  if ((swift_dynamicCast() & 1) != 0)
    v5 = v7;
  else
    v5 = 0;
  if (v5)
  {
    swift_retain();
    type metadata accessor for ReplayAudioAccessoryDevice();
    v3 = (void *)(*(uint64_t (**)(void))((*v5 & *MEMORY[0x24BEE4EA0]) + 0x210))();
    v4 = ReplayAudioAccessoryDevice.__allocating_init(withCBDevice:)(v3);
    a2();

    swift_release();
  }
}

Swift::Void __swiftcall HeadphoneDataProvider.provideDeviceForDiscoveryHandler()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE v13[16];
  _QWORD v14[2];
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  unint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *object;
  int has_internal_ui;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;

  v47 = 0;
  v45 = 0;
  v46 = 0;
  v38 = 0;
  v48 = v0;
  v39 = (id)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x140))();
  v47 = v39;
  object = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("com.apple.Perferences", 0x15uLL, 1)._object;
  v40 = String.utf8CString.getter();
  swift_retain();
  swift_release();
  swift_retain();
  swift_bridgeObjectRelease();
  has_internal_ui = os_variant_has_internal_ui();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  if ((has_internal_ui & 1) != 0)
  {
    v35 = (*(uint64_t (**)(void))((*v37 & *MEMORY[0x24BEE4EA0]) + 0xF8))();
    v36 = v1;
    if (v35)
    {
      v33 = v35;
      v34 = v36;
      v2 = v38;
      v25 = v36;
      v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))v35;
      v45 = v35;
      v46 = v36;
      v44 = HeadphoneDataProvider.dataObjects.getter();
      v27 = &v17;
      MEMORY[0x24BDAC7A8](&v17, v3);
      v28 = v14;
      v15 = closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler();
      v16 = 0;
      v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Data]);
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ReplayData));
      lazy protocol witness table accessor for type [String : Data] and conformance [A : B]();
      v4 = Sequence.compactMap<A>(_:)();
      v31 = v2;
      v32 = v4;
      v18 = v4;
      outlined destroy of [String : Data]();
      v43 = v18;
      v5 = v37;
      v6 = v39;
      swift_retain();
      v19 = &v17;
      v20 = 15;
      MEMORY[0x24BDAC7A8](&v17, v7);
      v14[0] = v8;
      v14[1] = v9;
      v15 = v26;
      v16 = v25;
      v21 = v13;
      v22 = (v20 + 32) & 0xFFFFFFFFFFFFFFF0;
      MEMORY[0x24BDAC7A8](v13, v10);
      v11 = &v13[-v22];
      v23 = v11;
      *((_QWORD *)v11 + 2) = partial apply for closure #2 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler();
      *((_QWORD *)v11 + 3) = v12;
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, ReplayData)]);
      lazy protocol witness table accessor for type [(String, ReplayData)] and conformance [A]();
      Sequence.forEach(_:)();

      swift_release();
      outlined destroy of [(String, ReplayData)]();
      swift_release();
    }
  }

}

uint64_t closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE **v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint32_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint32_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v65 = a1;
  v66 = a2;
  v73 = a3;
  v74 = a4;
  v89 = 0;
  v90 = 0;
  v87 = 0;
  v88 = 0;
  v78 = 0;
  v71 = 0;
  v67 = type metadata accessor for Logger();
  v68 = *(_QWORD *)(v67 - 8);
  v69 = (*(_QWORD *)(v68 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v66);
  v70 = (char *)&v27 - v69;
  v89 = v4;
  v90 = v5;
  v87 = v6;
  v88 = v7;
  type metadata accessor for JSONDecoder();
  v72 = JSONDecoder.__allocating_init()();
  v75 = type metadata accessor for ReplayData();
  lazy protocol witness table accessor for type ReplayData and conformance ReplayData();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v76 = 0;
  v77 = 0;
  swift_release();
  v63 = v86;
  v64 = v76;
  v61 = v76;
  v62 = v86;
  if (v86)
  {
    v60 = v62;
    v38 = v62;
    v78 = v62;
    swift_bridgeObjectRetain();
    v39 = v65;
    v40 = v66;
    v41 = v38;
  }
  else
  {
    v8 = v70;
    v9 = Logger.shared.unsafeMutableAddressor();
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v8, v9, v67);
    outlined copy of Data._Representation(v73, v74);
    v48 = 32;
    v49 = 7;
    v10 = swift_allocObject();
    v11 = v74;
    v42 = v10;
    *(_QWORD *)(v10 + 16) = v73;
    *(_QWORD *)(v10 + 24) = v11;
    swift_retain();
    v12 = swift_allocObject();
    v13 = v42;
    v50 = v12;
    *(_QWORD *)(v12 + 16) = partial apply for implicit closure #1 in closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler();
    *(_QWORD *)(v12 + 24) = v13;
    swift_release();
    v58 = Logger.logObject.getter();
    v59 = static os_log_type_t.error.getter();
    v45 = &v84;
    v84 = 12;
    v43 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    v44 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type Int and conformance Int();
    UnsignedInteger<>.init<A>(_:)();
    v46 = v85;
    v47 = 17;
    v52 = swift_allocObject();
    *(_BYTE *)(v52 + 16) = 32;
    v53 = swift_allocObject();
    *(_BYTE *)(v53 + 16) = 8;
    v14 = swift_allocObject();
    v15 = v50;
    v51 = v14;
    *(_QWORD *)(v14 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1;
    *(_QWORD *)(v14 + 24) = v15;
    v16 = swift_allocObject();
    v17 = v51;
    v55 = v16;
    *(_QWORD *)(v16 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
    *(_QWORD *)(v16 + 24) = v17;
    v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
    v54 = _allocateUninitializedArray<A>(_:)();
    v56 = v18;
    swift_retain();
    v19 = v52;
    v20 = v56;
    *v56 = closure #1 in OSLogArguments.append(_:)partial apply;
    v20[1] = v19;
    swift_retain();
    v21 = v53;
    v22 = v56;
    v56[2] = closure #1 in OSLogArguments.append(_:)partial apply;
    v22[3] = v21;
    swift_retain();
    v23 = v55;
    v24 = v56;
    v56[4] = closure #1 in OSLogArguments.append(_:)partial apply;
    v24[5] = v23;
    _finalizeUninitializedArray<A>(_:)();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v58, (os_log_type_t)v59))
    {
      v25 = v61;
      v31 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
      v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      v32 = createStorage<A>(capacity:type:)(0);
      v33 = createStorage<A>(capacity:type:)(1);
      v34 = &v83;
      v83 = v31;
      v35 = &v82;
      v82 = v32;
      v36 = &v81;
      v81 = v33;
      serialize(_:at:)(2, &v83);
      serialize(_:at:)(1, v34);
      v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v80 = v52;
      closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)v34, (uint64_t)v35, (uint64_t)v36);
      v37 = v25;
      if (v25)
      {
        __break(1u);
      }
      else
      {
        v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v80 = v53;
        closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v83, (uint64_t)&v82, (uint64_t)&v81);
        v29 = 0;
        v79 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
        v80 = v55;
        closure #1 in osLogInternal(_:log:type:)(&v79, (uint64_t)&v83, (uint64_t)&v82, (uint64_t)&v81);
        _os_log_impl(&dword_23DAB4000, v58, (os_log_type_t)v59, "HeadphoneManager-Replay: could not decode from JSONDecoder %s!", v31, v46);
        destroyStorage<A>(_:count:)(v32, 0, v30);
        destroyStorage<A>(_:count:)(v33, 1, MEMORY[0x24BEE4AD8] + 8);
        MEMORY[0x24263B020](v31, MEMORY[0x24BEE4260]);
        swift_release();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      swift_release();
    }
    v28 = 0;

    (*(void (**)(char *, uint64_t))(v68 + 8))(v70, v67);
    v39 = v28;
    v40 = v28;
    v41 = v28;
  }
  return v39;
}

uint64_t implicit closure #1 in closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  outlined copy of Data._Representation(a1, a2);
  result = a1;
  *a3 = a1;
  a3[1] = a2;
  return result;
}

uint64_t thunk for @callee_guaranteed (@guaranteed String, @guaranteed Data) -> (@owned (String, ReplayData)?)@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD)@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = a2(*a1, a1[1], a1[2], a1[3]);
  *a3 = result;
  a3[1] = v4;
  a3[2] = v5;
  return result;
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed Data) -> (@owned (String, ReplayData)?)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return thunk for @callee_guaranteed (@guaranteed String, @guaranteed Data) -> (@owned (String, ReplayData)?)(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v2 + 16), a2);
}

void closure #2 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()(uint64_t a1, uint64_t a2, void *a3, _QWORD *a4, void *a5, void (*a6)(void), uint64_t a7)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char *v23;
  id v24;
  id v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD *v41;
  id v42;
  void (*v43)(void);
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  _QWORD *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[4];
  __int128 v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(void);
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;

  v38 = a1;
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v42 = a5;
  v43 = a6;
  v44 = a7;
  v57 = 0;
  v55 = 0;
  v48 = 0;
  v63 = a1;
  v64 = a2;
  v62 = a3;
  v61 = a4;
  v60 = a5;
  v58 = a6;
  v59 = a7;
  v45 = (*(uint64_t (**)(void))(*(_QWORD *)a3 + 184))();
  if ((v7 & 1) == 0)
  {
    v37 = v45;
    v57 = v45;
    v56 = v45;
    v8 = String.init<A>(_:)();
    v35 = v9;
    v36 = (void *)(*(uint64_t (**)(uint64_t))((*v41 & *MEMORY[0x24BEE4EA0]) + 0x160))(v8);
    swift_bridgeObjectRelease();
    if (v36)
    {
      v34 = v36;
      v26 = v36;
      v55 = v36;
      swift_retain();
      CBDevice.replayDevice.setter(v40);
      swift_bridgeObjectRetain();
      v52[3] = MEMORY[0x24BEE0D00];
      v52[0] = v38;
      v52[1] = v39;
      v29 = MEMORY[0x24BEE0D00];
      v10 = __swift_project_boxed_opaque_existential_0(v52, MEMORY[0x24BEE0D00]);
      v28 = *(_QWORD *)(v29 - 8);
      v11 = *(_QWORD *)(v28 + 64);
      v31 = &v14;
      v27 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
      MEMORY[0x24BDAC7A8](&v14, v10);
      v30 = (char *)&v14 - v27;
      (*(void (**)(void))(v12 + 16))();
      v32 = _bridgeAnythingToObjectiveC<A>(_:)();
      (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v29);
      v33 = objc_msgSend(v42, sel___swift_objectForKeyedSubscript_, v32);
      swift_unknownObjectRelease();
      if (v33)
      {
        v25 = v33;
        v24 = v33;
        v23 = &v46;
        _bridgeAnyObjectToAny(_:)();
        outlined init with take of Any((uint64_t)v23, (uint64_t)&v49);
        swift_unknownObjectRelease();
      }
      else
      {
        v49 = 0uLL;
        v50 = 0;
        v51 = 0;
      }
      outlined init with take of Any?(&v49, &v53);
      if (v54)
      {
        type metadata accessor for HeadphoneReplayDevice();
        if ((swift_dynamicCast() & 1) != 0)
          v20 = v47;
        else
          v20 = 0;
        v19 = v20;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
        v22 = v19;
      }
      else
      {
        v21 = 0;
        __swift_destroy_boxed_opaque_existential_0((uint64_t)v52);
        outlined destroy of Any?((uint64_t)&v53);
        v22 = v21;
      }
      v18 = v22;
      if (v22)
      {
        v17 = v18;
        v16 = v18;
        v48 = v18;
        (*(void (**)(void *))((*v18 & *MEMORY[0x24BEE4EA0]) + 0xB98))(v40);

      }
      swift_retain();
      type metadata accessor for ReplayAudioAccessoryDevice();
      v13 = v26;
      v15 = ReplayAudioAccessoryDevice.__allocating_init(withCBDevice:)(v26);
      v43();

      swift_release();
    }
  }
}

void partial apply for closure #2 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  closure #2 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()(a1, a2, a3, *(_QWORD **)(v3 + 16), *(void **)(v3 + 24), *(void (**)(void))(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t thunk for @callee_guaranteed (@guaranteed String, @guaranteed ReplayData) -> ()(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  return a2(*a1, a1[1], a1[2]);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed String, @guaranteed ReplayData) -> ()(_QWORD *a1)
{
  uint64_t v1;

  return thunk for @callee_guaranteed (@guaranteed String, @guaranteed ReplayData) -> ()(a1, *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 16));
}

uint64_t HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  Swift::String v19;
  id v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t v54;
  void *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE **v65;
  uint64_t *v66;
  uint64_t *v67;
  void *v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  uint32_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  NSObject *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE **v93;
  uint64_t *v94;
  uint64_t *v95;
  void *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t *v99;
  uint32_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  NSObject *v112;
  int v113;
  uint64_t v114;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t *v123;
  _QWORD *v124;
  Swift::String *v125;
  uint64_t v126;
  void *v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  id v135;
  id v136;
  unint64_t v137;
  uint64_t v138;
  id v139;
  Class isa;
  id v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  unint64_t v150;
  void *v151;
  uint64_t v152;
  void *v153;
  uint64_t v154;
  unint64_t v155;
  void *v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  id v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  void *object;
  id v185;
  id v186;
  id v187;
  id v188;
  _QWORD v189[5];
  uint64_t v190;
  uint64_t (*v191)(uint64_t, uint64_t, uint64_t);
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  _BYTE *v195;
  uint64_t v196;
  uint32_t v197;
  _QWORD v198[4];
  uint64_t v199;
  Swift::String v200;
  uint64_t v201;
  unint64_t v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t (*v213)(uint64_t, uint64_t, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  uint64_t v218;
  uint32_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;

  v182 = a1;
  v183 = a2;
  v175 = a3;
  v176 = a4;
  v223 = 0;
  v224 = 0;
  v221 = 0;
  v222 = 0;
  v220 = 0;
  v168 = 0;
  v211 = 0;
  v212 = 0;
  v209 = 0;
  v210 = 0;
  v208 = 0;
  v201 = 0;
  v202 = 0;
  v190 = 0;
  v177 = 0;
  v169 = type metadata accessor for Logger();
  v170 = *(_QWORD *)(v169 - 8);
  v171 = (*(_QWORD *)(v170 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6 = MEMORY[0x24BDAC7A8](0, v5);
  v172 = (char *)&v54 - v171;
  v173 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v6, (char *)&v54 - v171);
  v174 = (char *)&v54 - v173;
  v178 = type metadata accessor for URL();
  v179 = *(_QWORD *)(v178 - 8);
  v180 = (*(_QWORD *)(v179 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v177, v183);
  v181 = (char *)&v54 - v180;
  v223 = v8;
  v224 = v9;
  v221 = v10;
  v222 = v11;
  v220 = v4;
  type metadata accessor for NSBundle();
  swift_getObjectType();
  v187 = @nonobjc NSBundle.__allocating_init(for:)();
  swift_bridgeObjectRetain();
  v186 = (id)MEMORY[0x24263ADA4](v182, v183);
  swift_bridgeObjectRelease();
  v12 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("data", 4uLL, 1);
  object = v12._object;
  v185 = (id)MEMORY[0x24263ADA4](v12._countAndFlagsBits);
  swift_bridgeObjectRelease();
  v188 = objc_msgSend(v187, sel_pathForResource_ofType_, v186, v185);

  if (v188)
  {
    v167 = v188;
    v162 = v188;
    v163 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v164 = v13;

    v165 = v163;
    v166 = v164;
  }
  else
  {
    v165 = 0;
    v166 = 0;
  }
  v160 = v166;
  v161 = v165;
  if (v166)
  {
    v158 = v161;
    v159 = v160;
    v14 = v168;
    v152 = v160;
    v211 = v161;
    v212 = v160;
    URL.init(fileURLWithPath:)();
    default argument 1 of Data.init(contentsOf:options:)();
    v15 = Data.init(contentsOf:options:)();
    v153 = v14;
    v154 = v15;
    v155 = v16;
    v156 = v14;
    if (v14)
    {
      v56 = v156;
      v57 = 0;
      v58 = 0xF000000000000000;
      v59 = 0;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v181, v178);

      v149 = v57;
      v150 = v58;
      v151 = v59;
    }
    else
    {
      v148 = v155;
      v147 = v154;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v181, v178);
      v149 = v147;
      v150 = v148;
      v151 = v153;
    }
    v144 = v151;
    v145 = v150;
    v146 = v149;
    if ((v150 & 0xF000000000000000) == 0xF000000000000000)
    {
      swift_bridgeObjectRelease();
      v157 = v144;
    }
    else
    {
      v142 = v146;
      v143 = v145;
      v137 = v145;
      v138 = v146;
      v209 = v146;
      v210 = v145;
      v139 = (id)objc_opt_self();
      outlined copy of Data._Representation(v138, v137);
      isa = Data._bridgeToObjectiveC()().super.isa;
      outlined consume of Data._Representation(v138, v137);
      v141 = objc_msgSend(v139, sel_unarchiveObjectWithData_, isa);

      if (v141)
      {
        v136 = v141;
        v135 = v141;
        v134 = v189;
        _bridgeAnyObjectToAny(_:)();
        outlined init with take of Any((uint64_t)v134, (uint64_t)&v203);
        swift_unknownObjectRelease();
      }
      else
      {
        v203 = 0uLL;
        v204 = 0;
        v205 = 0;
      }
      outlined init with take of Any?(&v203, &v206);
      if (v207)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
        if ((swift_dynamicCast() & 1) != 0)
          v133 = v189[4];
        else
          v133 = 0;
        v132 = v133;
      }
      else
      {
        v87 = 0;
        outlined destroy of Any?((uint64_t)&v206);
        v132 = v87;
      }
      v131 = v132;
      if (v132)
      {
        v130 = v131;
        v17 = v144;
        v208 = v131;
        swift_bridgeObjectRetain();
        v121 = Data.init(hexString:)();
        v122 = v18;
        v201 = v121;
        v202 = v18;
        v19 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("btAd", 4uLL, 1);
        v125 = &v200;
        v200 = v19;
        v123 = &v199;
        _convertToAnyHashable<A>(_:)();
        outlined copy of Data._Representation(v121, v122);
        v124 = v198;
        v198[3] = MEMORY[0x24BDCDDE8];
        v198[0] = v121;
        v198[1] = v122;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [AnyHashable : Any]);
        Dictionary.subscript.setter();
        outlined destroy of String();
        type metadata accessor for CBDevice();
        v126 = v208;
        swift_bridgeObjectRetain();
        v20 = CBDevice.__allocating_init(dictionary:)();
        v127 = v17;
        v128 = (uint64_t)v20;
        v129 = v17;
        if (v17)
        {
          v54 = 0;
          v55 = 0;

          v119 = v54;
          v120 = v55;
        }
        else
        {
          v119 = v128;
          v120 = v127;
        }
        v117 = v120;
        v118 = v119;
        if (v119)
        {
          v116 = v118;
          v114 = v118;
          v190 = v118;
          outlined consume of Data._Representation(v121, v122);
          outlined destroy of [AnyHashable : Any]();
          outlined consume of Data._Representation(v138, v137);
          swift_bridgeObjectRelease();
          return v114;
        }
        else
        {
          v21 = v174;
          v22 = Logger.shared.unsafeMutableAddressor();
          (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v21, v22, v169);
          swift_bridgeObjectRetain();
          v102 = 32;
          v103 = 7;
          v23 = swift_allocObject();
          v24 = v183;
          v104 = v23;
          *(_QWORD *)(v23 + 16) = v182;
          *(_QWORD *)(v23 + 24) = v24;
          v112 = Logger.logObject.getter();
          v113 = static os_log_type_t.error.getter();
          v99 = &v196;
          v196 = 12;
          v97 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          v98 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
          lazy protocol witness table accessor for type Int and conformance Int();
          UnsignedInteger<>.init<A>(_:)();
          v100 = v197;
          v101 = 17;
          v106 = swift_allocObject();
          *(_BYTE *)(v106 + 16) = 32;
          v107 = swift_allocObject();
          *(_BYTE *)(v107 + 16) = 8;
          v25 = swift_allocObject();
          v26 = v104;
          v105 = v25;
          *(_QWORD *)(v25 + 16) = partial apply for implicit closure #2 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:);
          *(_QWORD *)(v25 + 24) = v26;
          v27 = swift_allocObject();
          v28 = v105;
          v109 = v27;
          *(_QWORD *)(v27 + 16) = implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)partial apply;
          *(_QWORD *)(v27 + 24) = v28;
          v111 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
          v108 = _allocateUninitializedArray<A>(_:)();
          v110 = v29;
          swift_retain();
          v30 = v106;
          v31 = v110;
          *v110 = closure #1 in OSLogArguments.append(_:)partial apply;
          v31[1] = v30;
          swift_retain();
          v32 = v107;
          v33 = v110;
          v110[2] = closure #1 in OSLogArguments.append(_:)partial apply;
          v33[3] = v32;
          swift_retain();
          v34 = v109;
          v35 = v110;
          v110[4] = closure #1 in OSLogArguments.append(_:)partial apply;
          v35[5] = v34;
          _finalizeUninitializedArray<A>(_:)();
          swift_bridgeObjectRelease();
          if (os_log_type_enabled(v112, (os_log_type_t)v113))
          {
            v36 = v117;
            v90 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
            v89 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            v91 = createStorage<A>(capacity:type:)(0);
            v92 = createStorage<A>(capacity:type:)(1);
            v93 = &v195;
            v195 = v90;
            v94 = &v194;
            v194 = v91;
            v95 = &v193;
            v193 = v92;
            serialize(_:at:)(2, &v195);
            serialize(_:at:)(1, v93);
            v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
            v192 = v106;
            closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)v93, (uint64_t)v94, (uint64_t)v95);
            v96 = v36;
            if (v36)
            {
              __break(1u);
            }
            else
            {
              v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v192 = v107;
              closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v195, (uint64_t)&v194, (uint64_t)&v193);
              v88 = 0;
              v191 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
              v192 = v109;
              closure #1 in osLogInternal(_:log:type:)(&v191, (uint64_t)&v195, (uint64_t)&v194, (uint64_t)&v193);
              _os_log_impl(&dword_23DAB4000, v112, (os_log_type_t)v113, "HeadphoneManager-Replay: could not inflate %s!", v90, v100);
              destroyStorage<A>(_:count:)(v91, 0, v89);
              destroyStorage<A>(_:count:)(v92, 1, MEMORY[0x24BEE4AD8] + 8);
              MEMORY[0x24263B020](v90, MEMORY[0x24BEE4260]);
              swift_release();
              swift_release();
              swift_release();
            }
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
          }

          (*(void (**)(char *, uint64_t))(v170 + 8))(v174, v169);
          outlined consume of Data._Representation(v121, v122);
          outlined destroy of [AnyHashable : Any]();
          outlined consume of Data._Representation(v138, v137);
          swift_bridgeObjectRelease();
          return v177;
        }
      }
      outlined consume of Data._Representation(v138, v137);
      swift_bridgeObjectRelease();
      v157 = v144;
    }
  }
  else
  {
    v157 = v168;
  }
  v37 = v172;
  v69 = v157;
  v38 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v170 + 16))(v37, v38, v169);
  swift_bridgeObjectRetain();
  v75 = 32;
  v76 = 7;
  v39 = swift_allocObject();
  v40 = v183;
  v77 = v39;
  *(_QWORD *)(v39 + 16) = v182;
  *(_QWORD *)(v39 + 24) = v40;
  v85 = Logger.logObject.getter();
  v86 = static os_log_type_t.error.getter();
  v72 = &v218;
  v218 = 12;
  v70 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v71 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v73 = v219;
  v74 = 17;
  v79 = swift_allocObject();
  *(_BYTE *)(v79 + 16) = 32;
  v80 = swift_allocObject();
  *(_BYTE *)(v80 + 16) = 8;
  v41 = swift_allocObject();
  v42 = v77;
  v78 = v41;
  *(_QWORD *)(v41 + 16) = partial apply for implicit closure #1 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:);
  *(_QWORD *)(v41 + 24) = v42;
  v43 = swift_allocObject();
  v44 = v78;
  v82 = v43;
  *(_QWORD *)(v43 + 16) = _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_7;
  *(_QWORD *)(v43 + 24) = v44;
  v84 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v81 = _allocateUninitializedArray<A>(_:)();
  v83 = v45;
  swift_retain();
  v46 = v79;
  v47 = v83;
  *v83 = _s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_7;
  v47[1] = v46;
  swift_retain();
  v48 = v80;
  v49 = v83;
  v83[2] = closure #1 in OSLogArguments.append(_:)partial apply;
  v49[3] = v48;
  swift_retain();
  v50 = v82;
  v51 = v83;
  v83[4] = _s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_7;
  v51[5] = v50;
  _finalizeUninitializedArray<A>(_:)();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v85, (os_log_type_t)v86))
  {
    v52 = v69;
    v62 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v63 = createStorage<A>(capacity:type:)(0);
    v64 = createStorage<A>(capacity:type:)(1);
    v65 = &v217;
    v217 = v62;
    v66 = &v216;
    v216 = v63;
    v67 = &v215;
    v215 = v64;
    serialize(_:at:)(2, &v217);
    serialize(_:at:)(1, v65);
    v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_7;
    v214 = v79;
    closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)v65, (uint64_t)v66, (uint64_t)v67);
    v68 = v52;
    if (v52)
    {
      __break(1u);
    }
    else
    {
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in OSLogArguments.append(_:)partial apply;
      v214 = v80;
      closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
      v60 = 0;
      v213 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_7;
      v214 = v82;
      closure #1 in osLogInternal(_:log:type:)(&v213, (uint64_t)&v217, (uint64_t)&v216, (uint64_t)&v215);
      _os_log_impl(&dword_23DAB4000, v85, (os_log_type_t)v86, "HeadphoneManager-Replay: could not unarchive %s!", v62, v73);
      destroyStorage<A>(_:count:)(v63, 0, v61);
      destroyStorage<A>(_:count:)(v64, 1, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v62, MEMORY[0x24BEE4260]);
      swift_release();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    swift_release();
  }

  (*(void (**)(char *, uint64_t))(v170 + 8))(v172, v169);
  return v177;
}

unint64_t type metadata accessor for NSBundle()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSBundle;
  if (!lazy cache variable for type metadata for NSBundle)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSBundle);
    return ObjCClassMetadata;
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #1 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)()
{
  swift_bridgeObjectRetain();
}

id @nonobjc NSBundle.__allocating_init(for:)()
{
  uint64_t ObjCClassFromMetadata;

  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  return objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_bundleForClass_, ObjCClassFromMetadata);
}

uint64_t sub_23DB46E48()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #1 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)();
  return result;
}

uint64_t default argument 1 of Data.init(contentsOf:options:)()
{
  return 0;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> implicit closure #2 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)()
{
  swift_bridgeObjectRetain();
}

id CBDevice.__allocating_init(dictionary:)()
{
  id v0;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v4 = @nonobjc CBDevice.init(dictionary:)();
  if (v3)
    return (id)v2;
  else
    return v4;
}

id HeadphoneDataProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HeadphoneDataProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  id v2;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;

  if (a2)
  {
    v6 = MEMORY[0x24263ADA4](a1);
    swift_bridgeObjectRelease();
    v2 = objc_msgSend(v7, sel_initWithSuiteName_, v6);
  }
  else
  {
    v2 = objc_msgSend(v7, sel_initWithSuiteName_, 0);
  }
  v5 = v2;

  return v5;
}

id @nonobjc NSMutableDictionary.init()()
{
  void *v0;

  return objc_msgSend(v0, sel_init);
}

id @nonobjc CBDevice.init(dictionary:)()
{
  id v0;
  uint64_t v2;
  id v3;
  NSDictionary v4;
  id v5;
  uint64_t v6;

  v4.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
  lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>();
  _convertInOutToPointerArgument<A>(_:)();
  v5 = objc_msgSend(v3, sel_initWithDictionary_error_, v4.super.isa, v6);
  v0 = 0;

  if (v5)
  {

    swift_bridgeObjectRelease();
    return v5;
  }
  else
  {
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();
    return (id)v2;
  }
}

uint64_t sub_23DB472C8()
{
  return swift_deallocObject();
}

_BYTE **_s2os14OSLogArgumentsV6appendyys5UInt8VFySpyAFGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_7(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_23DB472F8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB47328()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyySSyXA_AA0B15StringAlignmentVAA0B7PrivacyVtFSSycfu_TA_7()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB47370()
{
  swift_release();
  return swift_deallocObject();
}

_QWORD *_s2os14OSLogArgumentsV6appendyySSycFySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcfU_TA_7(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_23DB473B8()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  implicit closure #2 in HeadphoneDataProvider.readCBDeviceFromData(_:hexAddressString:)();
  return result;
}

uint64_t sub_23DB47400()
{
  return swift_deallocObject();
}

uint64_t sub_23DB47430()
{
  return swift_deallocObject();
}

uint64_t sub_23DB47460()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB474A8()
{
  swift_release();
  return swift_deallocObject();
}

id *outlined destroy of DefaultsObserver??(id *a1)
{
  if (*a1 != (id)1)

  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of Set<AnyCancellable>()
{
  swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>;
  if (!lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>)
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AutoreleasingUnsafeMutablePointer<NSError?>);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE01C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type AutoreleasingUnsafeMutablePointer<NSError?> and conformance AutoreleasingUnsafeMutablePointer<A>);
    return v1;
  }
  return v3;
}

uint64_t _swift_stdlib_has_malloc_size_7()
{
  return 1;
}

size_t _swift_stdlib_malloc_size_7(const void *a1)
{
  return malloc_size(a1);
}

_QWORD *__swift_project_boxed_opaque_existential_0(_QWORD *result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 8) + 80);
  if ((v2 & 0x20000) != 0)
    return (_QWORD *)(*result + ((v2 + 16) & ~(unint64_t)v2));
  return result;
}

uint64_t sub_23DB47678()
{
  uint64_t v0;

  outlined consume of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return implicit closure #1 in closure #1 in HeadphoneDataProvider.provideDeviceForDiscoveryHandler()(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_23DB476C4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_5align7privacyyxyXA_AA0B15StringAlignmentVAA0B7PrivacyVts06CustomG11ConvertibleRzlFSSycfu_TA_1()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v1 = lazy protocol witness table accessor for type Data and conformance Data();
  return implicit closure #1 in OSLogInterpolation.appendInterpolation<A>(_:align:privacy:)(v4, v3, MEMORY[0x24BDCDDE8], v1);
}

uint64_t sub_23DB477A8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB477D8()
{
  return swift_deallocObject();
}

uint64_t sub_23DB47808()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB47850()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_23DB47898()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #1 in closure #1 in HeadphoneDataProvider.init()()
{
  uint64_t v0;

  return implicit closure #1 in closure #1 in HeadphoneDataProvider.init()(*(void **)(v0 + 16));
}

uint64_t sub_23DB478DC()
{
  return swift_deallocObject();
}

uint64_t sub_23DB4790C()
{
  return swift_deallocObject();
}

uint64_t sub_23DB4793C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _s2os18OSLogInterpolationV06appendC0_7privacyySo8NSObjectCyXA_AA0B7PrivacyVtFAGSgycfu_TA_2()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_23DB47984()
{
  swift_release();
  return swift_deallocObject();
}

void _s2os14OSLogArgumentsV6appendyySo8NSObjectCSgycFySpys5UInt8VGz_SpyAGGSgzSpyypGSgztcfU_TA_3(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  closure #1 in OSLogArguments.append(_:)(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void partial apply for closure #1 in closure #1 in HeadphoneDataProvider.init()(uint64_t a1)
{
  uint64_t v1;

  closure #1 in closure #1 in HeadphoneDataProvider.init()(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type [Any] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [Any] and conformance [A];
  if (!lazy protocol witness table cache variable for type [Any] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Any]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [Any] and conformance [A]);
    return v1;
  }
  return v3;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [Any]()
{
  swift_bridgeObjectRelease();
}

uint64_t one-time initialization function for none()
{
  _allocateUninitializedArray<A>(_:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FeatureOptionSet]);
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  lazy protocol witness table accessor for type [FeatureOptionSet] and conformance [A]();
  return SetAlgebra.init<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet()
{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet;
  if (!lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for FeatureOptionSet, &type metadata for FeatureOptionSet);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet;
  if (!lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for FeatureOptionSet, &type metadata for FeatureOptionSet);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet;
  if (!lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for FeatureOptionSet, &type metadata for FeatureOptionSet);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet;
  if (!lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for FeatureOptionSet, &type metadata for FeatureOptionSet);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet);
    return v0;
  }
  return v2;
}

{
  unint64_t v0;
  uint64_t v2;

  v2 = lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet;
  if (!lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet)
  {
    v0 = MEMORY[0x24263B698](&protocol conformance descriptor for FeatureOptionSet, &type metadata for FeatureOptionSet);
    atomic_store(v0, (unint64_t *)&lazy protocol witness table cache variable for type FeatureOptionSet and conformance FeatureOptionSet);
    return v0;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type [FeatureOptionSet] and conformance [A]()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type [FeatureOptionSet] and conformance [A];
  if (!lazy protocol witness table cache variable for type [FeatureOptionSet] and conformance [A])
  {
    v0 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [FeatureOptionSet]);
    v1 = MEMORY[0x24263B698](MEMORY[0x24BEE12C8], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type [FeatureOptionSet] and conformance [A]);
    return v1;
  }
  return v3;
}

void *FeatureOptionSet.none.unsafeMutableAddressor()
{
  if (one-time initialization token for none != -1)
    swift_once();
  return &static FeatureOptionSet.none;
}

uint64_t static FeatureOptionSet.none.getter()
{
  return *(unsigned int *)FeatureOptionSet.none.unsafeMutableAddressor();
}

uint64_t one-time initialization function for rename()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(1);
  static FeatureOptionSet.rename = result;
  return result;
}

int *FeatureOptionSet.rename.unsafeMutableAddressor()
{
  if (one-time initialization token for rename != -1)
    swift_once();
  return &static FeatureOptionSet.rename;
}

uint64_t static FeatureOptionSet.rename.getter()
{
  return *FeatureOptionSet.rename.unsafeMutableAddressor();
}

uint64_t one-time initialization function for doubleTap()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(2);
  static FeatureOptionSet.doubleTap = result;
  return result;
}

int *FeatureOptionSet.doubleTap.unsafeMutableAddressor()
{
  if (one-time initialization token for doubleTap != -1)
    swift_once();
  return &static FeatureOptionSet.doubleTap;
}

uint64_t static FeatureOptionSet.doubleTap.getter()
{
  return *FeatureOptionSet.doubleTap.unsafeMutableAddressor();
}

uint64_t one-time initialization function for doubleTapEnhanced()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(4);
  static FeatureOptionSet.doubleTapEnhanced = result;
  return result;
}

int *FeatureOptionSet.doubleTapEnhanced.unsafeMutableAddressor()
{
  if (one-time initialization token for doubleTapEnhanced != -1)
    swift_once();
  return &static FeatureOptionSet.doubleTapEnhanced;
}

uint64_t static FeatureOptionSet.doubleTapEnhanced.getter()
{
  return *FeatureOptionSet.doubleTapEnhanced.unsafeMutableAddressor();
}

uint64_t one-time initialization function for inEarDetection()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(8);
  static FeatureOptionSet.inEarDetection = result;
  return result;
}

int *FeatureOptionSet.inEarDetection.unsafeMutableAddressor()
{
  if (one-time initialization token for inEarDetection != -1)
    swift_once();
  return &static FeatureOptionSet.inEarDetection;
}

uint64_t static FeatureOptionSet.inEarDetection.getter()
{
  return *FeatureOptionSet.inEarDetection.unsafeMutableAddressor();
}

uint64_t one-time initialization function for mic()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(16);
  static FeatureOptionSet.mic = result;
  return result;
}

int *FeatureOptionSet.mic.unsafeMutableAddressor()
{
  if (one-time initialization token for mic != -1)
    swift_once();
  return &static FeatureOptionSet.mic;
}

uint64_t static FeatureOptionSet.mic.getter()
{
  return *FeatureOptionSet.mic.unsafeMutableAddressor();
}

uint64_t one-time initialization function for headDetection()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(32);
  static FeatureOptionSet.headDetection = result;
  return result;
}

int *FeatureOptionSet.headDetection.unsafeMutableAddressor()
{
  if (one-time initialization token for headDetection != -1)
    swift_once();
  return &static FeatureOptionSet.headDetection;
}

uint64_t static FeatureOptionSet.headDetection.getter()
{
  return *FeatureOptionSet.headDetection.unsafeMutableAddressor();
}

uint64_t one-time initialization function for transparency()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(256);
  static FeatureOptionSet.transparency = result;
  return result;
}

int *FeatureOptionSet.transparency.unsafeMutableAddressor()
{
  if (one-time initialization token for transparency != -1)
    swift_once();
  return &static FeatureOptionSet.transparency;
}

uint64_t static FeatureOptionSet.transparency.getter()
{
  return *FeatureOptionSet.transparency.unsafeMutableAddressor();
}

uint64_t one-time initialization function for anc()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(512);
  static FeatureOptionSet.anc = result;
  return result;
}

int *FeatureOptionSet.anc.unsafeMutableAddressor()
{
  if (one-time initialization token for anc != -1)
    swift_once();
  return &static FeatureOptionSet.anc;
}

uint64_t static FeatureOptionSet.anc.getter()
{
  return *FeatureOptionSet.anc.unsafeMutableAddressor();
}

uint64_t one-time initialization function for untethered()
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(1024);
  static FeatureOptionSet.untethered = result;
  return result;
}

int *FeatureOptionSet.untethered.unsafeMutableAddressor()
{
  if (one-time initialization token for untethered != -1)
    swift_once();
  return &static FeatureOptionSet.untethered;
}

uint64_t static FeatureOptionSet.untethered.getter()
{
  return *FeatureOptionSet.untethered.unsafeMutableAddressor();
}

uint64_t one-time initialization function for all()
{
  int *v0;
  int *v2;

  _allocateUninitializedArray<A>(_:)();
  v2 = v0;
  *v0 = *FeatureOptionSet.rename.unsafeMutableAddressor();
  v2[1] = *FeatureOptionSet.doubleTap.unsafeMutableAddressor();
  v2[2] = *FeatureOptionSet.doubleTapEnhanced.unsafeMutableAddressor();
  v2[3] = *FeatureOptionSet.inEarDetection.unsafeMutableAddressor();
  v2[4] = *FeatureOptionSet.mic.unsafeMutableAddressor();
  v2[5] = *FeatureOptionSet.headDetection.unsafeMutableAddressor();
  v2[6] = *FeatureOptionSet.transparency.unsafeMutableAddressor();
  v2[7] = *FeatureOptionSet.anc.unsafeMutableAddressor();
  v2[8] = *FeatureOptionSet.untethered.unsafeMutableAddressor();
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return SetAlgebra<>.init(arrayLiteral:)();
}

void *FeatureOptionSet.all.unsafeMutableAddressor()
{
  if (one-time initialization token for all != -1)
    swift_once();
  return &static FeatureOptionSet.all;
}

uint64_t static FeatureOptionSet.all.getter()
{
  return *(unsigned int *)FeatureOptionSet.all.unsafeMutableAddressor();
}

uint64_t one-time initialization function for Replay_B698()
{
  int *v0;
  int *v2;

  _allocateUninitializedArray<A>(_:)();
  v2 = v0;
  *v0 = *FeatureOptionSet.rename.unsafeMutableAddressor();
  v2[1] = *FeatureOptionSet.inEarDetection.unsafeMutableAddressor();
  v2[2] = *FeatureOptionSet.mic.unsafeMutableAddressor();
  v2[3] = *FeatureOptionSet.transparency.unsafeMutableAddressor();
  v2[4] = *FeatureOptionSet.untethered.unsafeMutableAddressor();
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return SetAlgebra<>.init(arrayLiteral:)();
}

void *FeatureOptionSet.Replay_B698.unsafeMutableAddressor()
{
  if (one-time initialization token for Replay_B698 != -1)
    swift_once();
  return &static FeatureOptionSet.Replay_B698;
}

uint64_t static FeatureOptionSet.Replay_B698.getter()
{
  return *(unsigned int *)FeatureOptionSet.Replay_B698.unsafeMutableAddressor();
}

uint64_t one-time initialization function for Replay_Beats_B607()
{
  int *v0;
  int *v2;

  _allocateUninitializedArray<A>(_:)();
  v2 = v0;
  *v0 = *FeatureOptionSet.rename.unsafeMutableAddressor();
  v2[1] = *FeatureOptionSet.inEarDetection.unsafeMutableAddressor();
  v2[2] = *FeatureOptionSet.mic.unsafeMutableAddressor();
  _finalizeUninitializedArray<A>(_:)();
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return SetAlgebra<>.init(arrayLiteral:)();
}

void *FeatureOptionSet.Replay_Beats_B607.unsafeMutableAddressor()
{
  if (one-time initialization token for Replay_Beats_B607 != -1)
    swift_once();
  return &static FeatureOptionSet.Replay_Beats_B607;
}

uint64_t static FeatureOptionSet.Replay_Beats_B607.getter()
{
  return *(unsigned int *)FeatureOptionSet.Replay_Beats_B607.unsafeMutableAddressor();
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance FeatureOptionSet@<X0>(unsigned int *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.init() in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.init()();
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet.union(_:)();
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet.intersection(_:)();
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet.symmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet<>.insert(_:)() & 1;
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet<>.remove(_:)();
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return OptionSet<>.update(with:)();
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formUnion(_:)();
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formIntersection(_:)();
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  return OptionSet<>.formSymmetricDifference(_:)();
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance FeatureOptionSet()
{
  return SetAlgebra.subtracting(_:)();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance FeatureOptionSet()
{
  return SetAlgebra.isSubset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance FeatureOptionSet()
{
  return SetAlgebra.isDisjoint(with:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance FeatureOptionSet()
{
  return SetAlgebra.isSuperset(of:)() & 1;
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance FeatureOptionSet()
{
  return SetAlgebra.isEmpty.getter() & 1;
}

uint64_t protocol witness for SetAlgebra.init<A>(_:) in conformance FeatureOptionSet()
{
  return SetAlgebra.init<A>(_:)();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance FeatureOptionSet()
{
  return SetAlgebra.subtract(_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FeatureOptionSet@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = FeatureOptionSet.init(rawValue:)(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FeatureOptionSet@<X0>(_DWORD *a1@<X8>)
{
  unsigned int *v1;
  uint64_t result;

  result = FeatureOptionSet.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return == infix<A>(_:_:)() & 1;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance FeatureOptionSet()
{
  lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t variable initialization expression of HeadphoneReplayDevice.replayDevice()
{
  return 0;
}

uint64_t HeadphoneReplayDevice.replayDevice.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_replayDevice);
  swift_beginAccess();
  v3 = *v2;
  swift_retain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneReplayDevice.replayDevice.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_retain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_replayDevice);
  swift_beginAccess();
  *v3 = a1;
  swift_release();
  swift_endAccess();
  return swift_release();
}

uint64_t (*HeadphoneReplayDevice.replayDevice.modify())()
{
  swift_beginAccess();
  return HeadphoneReplayDevice.replayDevice.modify;
}

uint64_t HeadphoneReplayDevice.replayDevice.modify()
{
  return swift_endAccess();
}

uint64_t variable initialization expression of HeadphoneReplayDevice.listeners()
{
  type metadata accessor for AnyCancellable();
  return Array.init()();
}

uint64_t HeadphoneReplayDevice.listeners.getter()
{
  uint64_t v0;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_listeners);
  swift_beginAccess();
  v3 = *v2;
  swift_bridgeObjectRetain();
  swift_endAccess();
  return v3;
}

uint64_t HeadphoneReplayDevice.listeners.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  swift_bridgeObjectRetain();
  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_listeners);
  swift_beginAccess();
  *v3 = a1;
  swift_bridgeObjectRelease();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t (*HeadphoneReplayDevice.listeners.modify())()
{
  swift_beginAccess();
  return HeadphoneReplayDevice.listeners.modify;
}

uint64_t HeadphoneReplayDevice.listeners.modify()
{
  return swift_endAccess();
}

_QWORD *HeadphoneReplayDevice.__allocating_init(cbDevice:)(void *a1)
{
  objc_class *v1;
  id v2;

  v2 = objc_allocWithZone(v1);
  return HeadphoneReplayDevice.init(cbDevice:)(a1);
}

_QWORD *HeadphoneReplayDevice.init(cbDevice:)(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v12;

  v2 = v1;
  v3 = v1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_replayDevice] = 0;

  v8 = OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_listeners;
  type metadata accessor for AnyCancellable();
  *(_QWORD *)&v1[v8] = Array.init()();

  v4 = a1;
  v12 = HeadphoneDevice.init(cbDevice:)(a1);
  v5 = v12;
  v6 = v12;
  v10 = CBDevice.replayDevice.getter();
  v9 = (_QWORD *)((char *)v12 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_replayDevice);
  swift_beginAccess();
  *v9 = v10;
  swift_release();
  swift_endAccess();

  return v12;
}

uint64_t HeadphoneReplayDevice.name.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v0;
  v12 = HeadphoneReplayDevice.replayDevice.getter();
  if (v12)
  {
    v1 = v12;
    swift_retain();
    outlined destroy of ReplayData?();
    v7 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 400))(&v12);
    v8 = v2;
    swift_release();
    v9 = v7;
    v10 = v8;
  }
  else
  {
    outlined destroy of ReplayData?();
    v9 = 0;
    v10 = 0;
  }
  v3 = v11;
  if (v10)
  {
    v13 = v9;
    v14 = v10;
  }
  else
  {
    v4 = v11;
    v13 = HeadphoneDevice.name.getter();
    v14 = v5;

    outlined destroy of String?();
  }

  return v13;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of ReplayData?()
{
  swift_release();
}

void HeadphoneReplayDevice.name.setter()
{
  void *v0;
  id v1;
  id v2;

  v1 = v0;
  HeadphoneDevice.name.setter();

}

void (*HeadphoneReplayDevice.name.modify(uint64_t *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  uint64_t v2;

  a1[2] = v1;
  *a1 = HeadphoneReplayDevice.name.getter();
  a1[1] = v2;
  return HeadphoneReplayDevice.name.modify;
}

void HeadphoneReplayDevice.name.modify(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    swift_bridgeObjectRetain();
    HeadphoneReplayDevice.name.setter();
    outlined destroy of String();
  }
  else
  {
    HeadphoneReplayDevice.name.setter();
  }
}

uint64_t HeadphoneReplayDevice.accessorySettingFeatureBitMask.getter()
{
  _QWORD *v0;
  id v3;

  v3 = (id)(*(uint64_t (**)(void))((*v0 & *MEMORY[0x24BEE4EA0]) + 0x228))();
  objc_msgSend(v3, sel_productID);

  type metadata accessor for CBProductID();
  lazy protocol witness table accessor for type CBProductID and conformance CBProductID();
  if ((== infix<A>(_:_:)() & 1) != 0)
    return *(unsigned int *)FeatureOptionSet.Replay_B698.unsafeMutableAddressor();
  else
    return *(unsigned int *)FeatureOptionSet.Replay_Beats_B607.unsafeMutableAddressor();
}

void HeadphoneReplayDevice.accessorySettingFeatureBitMask.setter(int a1)
{
  void *v1;
  id v2;
  id v4;

  v2 = v1;
  HeadphoneDevice.accessorySettingFeatureBitMask.setter(a1);

}

void (*HeadphoneReplayDevice.accessorySettingFeatureBitMask.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = HeadphoneReplayDevice.accessorySettingFeatureBitMask.getter();
  return HeadphoneReplayDevice.accessorySettingFeatureBitMask.modify;
}

void HeadphoneReplayDevice.accessorySettingFeatureBitMask.modify(uint64_t a1)
{
  HeadphoneReplayDevice.accessorySettingFeatureBitMask.setter(*(_DWORD *)(a1 + 8));
}

uint64_t HeadphoneReplayDevice.deviceColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  id v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v13 = v0;
  v11 = HeadphoneReplayDevice.replayDevice.getter();
  if (v11)
  {
    v1 = v11;
    swift_retain();
    outlined destroy of ReplayData?();
    v2 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 424))(&v11);
    v7 = v2;
    v6 = BYTE4(v2);
    swift_release();
    v8 = v7;
    v9 = v6;
  }
  else
  {
    outlined destroy of ReplayData?();
    v8 = 0;
    v9 = 1;
  }
  v3 = v10;
  if ((v9 & 1) != 0)
  {
    v4 = v10;
    v12 = HeadphoneDevice.deviceColor.getter();

  }
  else
  {
    v12 = v8;
  }

  return v12;
}

void HeadphoneReplayDevice.deviceColor.setter(int a1)
{
  void *v1;
  id v2;
  id v4;

  v2 = v1;
  HeadphoneDevice.deviceColor.setter(a1);

}

void (*HeadphoneReplayDevice.deviceColor.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = HeadphoneReplayDevice.deviceColor.getter();
  return HeadphoneReplayDevice.deviceColor.modify;
}

void HeadphoneReplayDevice.deviceColor.modify(uint64_t a1)
{
  HeadphoneReplayDevice.deviceColor.setter(*(_DWORD *)(a1 + 8));
}

id HeadphoneReplayDevice.productInfo.getter()
{
  void *v0;
  id v1;
  id v3;
  id v4;

  v1 = v0;
  v4 = HeadphoneDevice.productInfo.getter();

  return v4;
}

void HeadphoneReplayDevice.productInfo.setter(void *a1)
{
  void *v1;
  id v2;
  id v4;

  v2 = v1;
  HeadphoneDevice.productInfo.setter(a1);

}

void (*HeadphoneReplayDevice.productInfo.modify(id *a1))(id *a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = HeadphoneReplayDevice.productInfo.getter();
  return HeadphoneReplayDevice.productInfo.modify;
}

void HeadphoneReplayDevice.productInfo.modify(id *a1, char a2)
{
  id v2;
  id v3;

  if ((a2 & 1) != 0)
  {
    v3 = *a1;
    v2 = *a1;
    HeadphoneReplayDevice.productInfo.setter(v3);

  }
  else
  {
    HeadphoneReplayDevice.productInfo.setter(*a1);
  }
}

float HeadphoneReplayDevice.batteryLevelMain.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v6;
  float v7;
  float v8;
  char v9;
  id v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  v13 = v0;
  v11 = HeadphoneReplayDevice.replayDevice.getter();
  if (v11)
  {
    v1 = v11;
    swift_retain();
    outlined destroy of ReplayData?();
    v2 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 376))(&v11);
    v7 = *(float *)&v2;
    v6 = BYTE4(v2);
    swift_release();
    v8 = v7;
    v9 = v6;
  }
  else
  {
    outlined destroy of ReplayData?();
    v8 = 0.0;
    v9 = 1;
  }
  v3 = v10;
  if ((v9 & 1) != 0)
  {
    v4 = v10;
    v12 = HeadphoneDevice.batteryLevelMain.getter();

  }
  else
  {
    v12 = v8;
  }

  return v12;
}

void HeadphoneReplayDevice.batteryLevelMain.setter()
{
  void *v0;
  id v1;
  id v2;

  v1 = v0;
  HeadphoneDevice.batteryLevelMain.setter();

}

void (*HeadphoneReplayDevice.batteryLevelMain.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = HeadphoneReplayDevice.batteryLevelMain.getter();
  return HeadphoneReplayDevice.batteryLevelMain.modify;
}

void HeadphoneReplayDevice.batteryLevelMain.modify()
{
  HeadphoneReplayDevice.batteryLevelMain.setter();
}

float HeadphoneReplayDevice.batteryLevelCase.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v6;
  float v7;
  float v8;
  char v9;
  id v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  v13 = v0;
  v11 = HeadphoneReplayDevice.replayDevice.getter();
  if (v11)
  {
    v1 = v11;
    swift_retain();
    outlined destroy of ReplayData?();
    v2 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 304))(&v11);
    v7 = *(float *)&v2;
    v6 = BYTE4(v2);
    swift_release();
    v8 = v7;
    v9 = v6;
  }
  else
  {
    outlined destroy of ReplayData?();
    v8 = 0.0;
    v9 = 1;
  }
  v3 = v10;
  if ((v9 & 1) != 0)
  {
    v4 = v10;
    v12 = HeadphoneDevice.batteryLevelCase.getter();

  }
  else
  {
    v12 = v8;
  }

  return v12;
}

void HeadphoneReplayDevice.batteryLevelCase.setter()
{
  void *v0;
  id v1;
  id v2;

  v1 = v0;
  HeadphoneDevice.batteryLevelCase.setter();

}

void (*HeadphoneReplayDevice.batteryLevelCase.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = HeadphoneReplayDevice.batteryLevelCase.getter();
  return HeadphoneReplayDevice.batteryLevelCase.modify;
}

void HeadphoneReplayDevice.batteryLevelCase.modify()
{
  HeadphoneReplayDevice.batteryLevelCase.setter();
}

float HeadphoneReplayDevice.batteryLevelLeft.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v6;
  float v7;
  float v8;
  char v9;
  id v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  v13 = v0;
  v11 = HeadphoneReplayDevice.replayDevice.getter();
  if (v11)
  {
    v1 = v11;
    swift_retain();
    outlined destroy of ReplayData?();
    v2 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 328))(&v11);
    v7 = *(float *)&v2;
    v6 = BYTE4(v2);
    swift_release();
    v8 = v7;
    v9 = v6;
  }
  else
  {
    outlined destroy of ReplayData?();
    v8 = 0.0;
    v9 = 1;
  }
  v3 = v10;
  if ((v9 & 1) != 0)
  {
    v4 = v10;
    v12 = HeadphoneDevice.batteryLevelLeft.getter();

  }
  else
  {
    v12 = v8;
  }

  return v12;
}

void HeadphoneReplayDevice.batteryLevelLeft.setter()
{
  void *v0;
  id v1;
  id v2;

  v1 = v0;
  HeadphoneDevice.batteryLevelLeft.setter();

}

void (*HeadphoneReplayDevice.batteryLevelLeft.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = HeadphoneReplayDevice.batteryLevelLeft.getter();
  return HeadphoneReplayDevice.batteryLevelLeft.modify;
}

void HeadphoneReplayDevice.batteryLevelLeft.modify()
{
  HeadphoneReplayDevice.batteryLevelLeft.setter();
}

float HeadphoneReplayDevice.batteryLevelRight.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  char v6;
  float v7;
  float v8;
  char v9;
  id v10;
  uint64_t v11;
  float v12;
  uint64_t v13;

  v13 = v0;
  v11 = HeadphoneReplayDevice.replayDevice.getter();
  if (v11)
  {
    v1 = v11;
    swift_retain();
    outlined destroy of ReplayData?();
    v2 = (*(uint64_t (**)(uint64_t *))(*(_QWORD *)v1 + 352))(&v11);
    v7 = *(float *)&v2;
    v6 = BYTE4(v2);
    swift_release();
    v8 = v7;
    v9 = v6;
  }
  else
  {
    outlined destroy of ReplayData?();
    v8 = 0.0;
    v9 = 1;
  }
  v3 = v10;
  if ((v9 & 1) != 0)
  {
    v4 = v10;
    v12 = HeadphoneDevice.batteryLevelRight.getter();

  }
  else
  {
    v12 = v8;
  }

  return v12;
}

void HeadphoneReplayDevice.batteryLevelRight.setter()
{
  void *v0;
  id v1;
  id v2;

  v1 = v0;
  HeadphoneDevice.batteryLevelRight.setter();

}

void (*HeadphoneReplayDevice.batteryLevelRight.modify(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(float *)(a1 + 8) = HeadphoneReplayDevice.batteryLevelRight.getter();
  return HeadphoneReplayDevice.batteryLevelRight.modify;
}

void HeadphoneReplayDevice.batteryLevelRight.modify()
{
  HeadphoneReplayDevice.batteryLevelRight.setter();
}

Swift::Void __swiftcall HeadphoneReplayDevice.captureCBDeviceData()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *boxed_opaque_existential_0;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  id v20;
  id v21;
  void *v22;
  void *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t *v49;
  _BYTE **v50;
  uint64_t *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint32_t v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  void *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  id v90;
  id v91;
  uint64_t v92;
  void *object;
  id v94;
  unsigned int v95;
  unsigned int *v96;
  char *v97;
  Builtin::Word v98;
  int v99;
  void *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  _QWORD *v108;
  char *v109;
  uint64_t v110;
  void (*v111)(uint64_t *, char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  id v119;
  id v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint32_t v124;
  id v125;
  void *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  _QWORD var20[5];
  uint64_t v140;

  v80 = "Fatal error";
  v81 = "Unexpectedly found nil while implicitly unwrapping an Optional value";
  v82 = "HeadphoneManager/HeadphoneReplayDevice.swift";
  v138 = *MEMORY[0x24BDAC8D0];
  v132 = 0;
  v131 = 0;
  v130 = 0;
  v126 = 0;
  v83 = 0;
  v133 = 0;
  v134 = 0;
  v98 = 0;
  v84 = type metadata accessor for Logger();
  v85 = *(_QWORD *)(v84 - 8);
  v86 = (*(_QWORD *)(v85 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](0, v1);
  v87 = (char *)&v35 - v86;
  v110 = type metadata accessor for URL();
  v108 = *(_QWORD **)(v110 - 8);
  v88 = (v108[8] + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v110, v2);
  v105 = (char *)&v35 - v88;
  v89 = (v3 + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8]((char *)&v35 - v88, v4);
  v109 = (char *)&v35 - v89;
  v132 = (char *)&v35 - v89;
  v131 = v0;
  v90 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v107 = 1;
  v91 = objc_msgSend(v90, sel_URLsForDirectory_inDomains_, 9);

  v92 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v130 = v92;

  Array.subscript.getter();
  v5 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v101 = &v128;
  v128 = v5;
  v129 = v6;
  v97 = "";
  v99 = 1;
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("", v98, 1);
  object = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  v8 = v118;
  swift_bridgeObjectRelease();
  v9 = v8;
  v10 = *v8;
  v117 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v94 = (id)(*(uint64_t (**)(uint64_t *))((v10 & *MEMORY[0x24BEE4EA0]) + 0x210))(v9);

  v95 = objc_msgSend(v94, sel_productID);
  v96 = &v127;
  v127 = v95;
  type metadata accessor for CBProductID();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v11 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(v97, v98, v99 & 1);
  v100 = v11._object;
  DefaultStringInterpolation.appendLiteral(_:)(v11);
  swift_bridgeObjectRelease();
  v103 = v128;
  v102 = v129;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  String.init(stringInterpolation:)();
  v104 = v12;
  URL.appendingPathComponent(_:)();
  v13 = v118;
  swift_bridgeObjectRelease();
  v106 = (void (*)(char *, uint64_t))v108[1];
  v106(v105, v110);
  v112 = specialized _allocateUninitializedArray<A>(_:)();
  v14[3] = v110;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v14);
  v111 = (void (*)(uint64_t *, char *, uint64_t))v108[2];
  v111(boxed_opaque_existential_0, v109, v110);
  v16 = v112;
  _finalizeUninitializedArray<A>(_:)();
  v116 = v16;
  v113 = default argument 1 of print(_:separator:terminator:)();
  v115 = v17;
  default argument 2 of print(_:separator:terminator:)();
  v114 = v18;
  print(_:separator:terminator:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v13;
  v119 = (id)(*(uint64_t (**)(uint64_t *))((*v13 & *v117) + 0x210))(v19);

  v120 = objc_msgSend(v119, sel_dictionaryRepresentation);
  if (v120)
  {
    v79 = v120;
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  v77 = v79;
  v126 = v79;
  v137 = 0;
  v75 = (id)objc_opt_self();
  v20 = v77;
  v125 = v137;
  v78 = objc_msgSend(v75, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v77, 0, &v125);
  v76 = v125;
  v21 = v125;
  v22 = v137;
  v137 = v76;

  swift_unknownObjectRelease();
  if (v78)
  {
    v74 = v78;
    v23 = v83;
    v65 = v78;
    v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v24;
    v133 = v71;
    v134 = v24;

    v66 = specialized _allocateUninitializedArray<A>(_:)();
    v25[3] = v110;
    v26 = __swift_allocate_boxed_opaque_existential_0(v25);
    v111(v26, v109, v110);
    v27 = v66;
    _finalizeUninitializedArray<A>(_:)();
    v70 = v27;
    v67 = default argument 1 of print(_:separator:terminator:)();
    v69 = v28;
    default argument 2 of print(_:separator:terminator:)();
    v68 = v29;
    print(_:separator:terminator:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    default argument 1 of Data.write(to:options:)();
    Data.write(to:options:)();
    v73 = v23;
    if (!v23)
    {
      outlined consume of Data._Representation(v71, v72);

      v106(v109, v110);
      swift_bridgeObjectRelease();
      return;
    }
    v36 = v73;
    v37 = 0;
    outlined consume of Data._Representation(v71, v72);

    v106(v109, v110);
    swift_bridgeObjectRelease();
    v55 = v36;
    v54 = v37;
  }
  else
  {
    v38 = v137;
    v39 = _convertNSErrorToError(_:)();

    swift_willThrow();
    v40 = 0;

    v106(v109, v110);
    swift_bridgeObjectRelease();
    v55 = (void *)v39;
    v54 = v40;
  }
  v30 = v87;
  v56 = v54;
  v57 = v55;
  v31 = Logger.shared.unsafeMutableAddressor();
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v30, v31, v84);
  v63 = Logger.logObject.getter();
  v62 = static os_log_type_t.default.getter();
  v60 = &v123;
  v123 = 2;
  v58 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  v59 = lazy protocol witness table accessor for type UInt32 and conformance UInt32();
  lazy protocol witness table accessor for type Int and conformance Int();
  UnsignedInteger<>.init<A>(_:)();
  v61 = v124;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (_:_:_:));
  v64 = _allocateUninitializedArray<A>(_:)();
  if (os_log_type_enabled(v63, (os_log_type_t)v62))
  {
    v32 = v56;
    v44 = (uint8_t *)static UnsafeMutablePointer.allocate(capacity:)();
    v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    v43 = 0;
    v45 = createStorage<A>(capacity:type:)(0);
    v46 = createStorage<A>(capacity:type:)(v43);
    v50 = &v122;
    v122 = v44;
    v51 = &v136;
    v136 = v45;
    v48 = &v135;
    v135 = v46;
    v47 = 0;
    serialize(_:at:)(0, &v122);
    serialize(_:at:)(v47, v50);
    v121 = v64;
    v49 = &v140;
    MEMORY[0x24BDAC7A8](&v140, v33);
    v52 = var20;
    var20[2] = v50;
    var20[3] = v51;
    var20[4] = v34;
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(_:_:_:)]);
    lazy protocol witness table accessor for type [(_:_:_:)] and conformance [A]();
    Sequence.forEach(_:)();
    if (v32)
    {
      __break(1u);
    }
    else
    {
      _os_log_impl(&dword_23DAB4000, v63, (os_log_type_t)v62, "HeadphoneManager-Replay: capture device data failed!", v44, v61);
      v41 = 0;
      destroyStorage<A>(_:count:)(v45, 0, v42);
      destroyStorage<A>(_:count:)(v46, v41, MEMORY[0x24BEE4AD8] + 8);
      MEMORY[0x24263B020](v44, MEMORY[0x24BEE4260]);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v84);
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;

  v3 = result;
  if ((*(_DWORD *)(*(_QWORD *)(result[3] - 8) + 80) & 0x20000) != 0)
  {
    v1 = swift_allocBox();
    result = v2;
    *v3 = v1;
  }
  return result;
}

uint64_t default argument 1 of print(_:separator:terminator:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", 1uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 2 of print(_:separator:terminator:)()
{
  return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("\n", 1uLL, 1)._countAndFlagsBits;
}

uint64_t default argument 1 of Data.write(to:options:)()
{
  return 0;
}

uint64_t HeadphoneReplayDevice.updateReplayData(_:)(uint64_t a1)
{
  swift_retain();
  return HeadphoneReplayDevice.replayDevice.setter(a1);
}

Swift::Bool __swiftcall HeadphoneReplayDevice.isServiceSupported(_:)(Swift::UInt32 a1)
{
  return 1;
}

uint64_t HeadphoneReplayDevice.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t result;

  outlined destroy of ReplayData?();
  result = v0 + OBJC_IVAR____TtC16HeadphoneManager21HeadphoneReplayDevice_listeners;
  outlined destroy of [AnyCancellable]();
  return result;
}

id HeadphoneReplayDevice.__deallocating_deinit()
{
  void *v0;
  objc_super v2;
  void *v3;

  v3 = v0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HeadphoneReplayDevice();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t _s2os0A11LogInternal_3log4typeyAA12OSLogMessageV_So03OS_a1_D0CSo0a1_d1_E2_tatFyySpys5UInt8VGz_SpySo8NSObjectCSgGSgzSpyypGSgztcXEfU_TA_1(uint64_t (**a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t *v1;

  return closure #1 in osLogInternal(_:log:type:)(a1, v1[2], v1[3], v1[4]);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of [AnyCancellable]()
{
  swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for HeadphoneReplayDevice()
{
  uint64_t v1;

  v1 = type metadata singleton initialization cache for HeadphoneReplayDevice;
  if (!type metadata singleton initialization cache for HeadphoneReplayDevice)
    return swift_getSingletonMetadata();
  return v1;
}

unint64_t base witness table accessor for RawRepresentable in FeatureOptionSet()
{
  return lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
}

unint64_t base witness table accessor for SetAlgebra in FeatureOptionSet()
{
  return lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
}

unint64_t base witness table accessor for Equatable in FeatureOptionSet()
{
  return lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
}

unint64_t base witness table accessor for ExpressibleByArrayLiteral in FeatureOptionSet()
{
  return lazy protocol witness table accessor for type FeatureOptionSet and conformance FeatureOptionSet();
}

ValueMetadata *type metadata accessor for FeatureOptionSet()
{
  return &type metadata for FeatureOptionSet;
}

uint64_t ObjC metadata update function for HeadphoneReplayDevice()
{
  return type metadata accessor for HeadphoneReplayDevice();
}

uint64_t type metadata completion function for HeadphoneReplayDevice()
{
  uint64_t updated;

  updated = swift_updateClassMetadata2();
  if (!updated)
    return 0;
  return updated;
}

uint64_t Binding._optional<A>()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  void (*v12)(char *, char *);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v32 = a3;
  v33 = a1;
  v50 = 0;
  v49 = 0;
  v35 = *(_QWORD *)(a1 - 8);
  v36 = *(_QWORD *)(v35 + 64);
  v37 = (v36 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4 = MEMORY[0x24BDAC7A8](a1, a2);
  v38 = (char *)&v24 - v37;
  v40 = *(_QWORD *)(v4 + 16);
  v39 = (*(_QWORD *)(*(_QWORD *)(v40 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v4, (char *)&v24 - v37);
  v47 = (uint64_t)&v24 - v39;
  v48 = *(_QWORD *)(v40 + 16);
  v51 = v48;
  v46 = *(_QWORD *)(v48 - 8);
  v42 = *(_QWORD *)(v46 + 64);
  v41 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = MEMORY[0x24BDAC7A8](v5, v6);
  v43 = (char *)&v24 - v41;
  v44 = (v42 + 15) & 0xFFFFFFFFFFFFFFF0;
  v8 = MEMORY[0x24BDAC7A8](v7, (char *)&v24 - v41);
  v45 = (char *)&v24 - v44;
  v50 = (char *)&v24 - v44;
  v49 = v3;
  MEMORY[0x24263AC00](v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v47, 1, v48) == 1)
  {
    outlined destroy of A1?(v47, v48);
    v23 = type metadata accessor for Binding();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v32, 1);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 32);
    v26(v45, v47, v48);
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v45, v48);
    v25 = (*(unsigned __int8 *)(v46 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v27 = 7;
    v9 = (_QWORD *)swift_allocObject();
    v10 = v25;
    v11 = v43;
    v12 = (void (*)(char *, char *))v26;
    v13 = v48;
    v29 = v9;
    v31 = 0;
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v13;
    v12((char *)v9 + v10, v11);
    outlined init with copy of Binding<A1?>(v34, v38, v48, v40, v33);
    v28 = (*(unsigned __int8 *)(v35 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    v14 = swift_allocObject();
    v15 = v28;
    v16 = v40;
    v17 = v33;
    v18 = v48;
    v19 = (char *)v14;
    v20 = v38;
    v30 = v19;
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 3) = 0;
    *((_QWORD *)v19 + 4) = v18;
    outlined init with take of Binding<A1?>(v20, &v19[v15], v18, v16, v17);
    Binding.init(get:set:)();
    v21 = type metadata accessor for Binding();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v32, 0, 1);
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v45, v48);
  }
}

uint64_t outlined destroy of A1?(uint64_t a1, uint64_t a2)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v5 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, a2);
  return a1;
}

uint64_t closure #1 in Binding._optional<A>()@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 8) + 16))(a2);
}

uint64_t sub_23DB4B954()
{
  uint64_t v0;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v4 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v4);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Binding._optional<A>()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in Binding._optional<A>()(*(_QWORD *)(v1 + 32), a1);
}

uint64_t closure #2 in Binding._optional<A>()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = a1;
  v12 = a5;
  v17 = 0;
  v16 = 0;
  v18 = a5;
  v13 = 0;
  v14 = type metadata accessor for Optional();
  v10 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v14, v9);
  v15 = (char *)&v9 - v10;
  v17 = v6;
  v16 = a4;
  v11 = *(_QWORD *)(v7 - 8);
  (*(void (**)(void))(v11 + 16))();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v12);
  type metadata accessor for Binding();
  return Binding.wrappedValue.setter();
}

char *outlined init with copy of Binding<A1?>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)a1;
  swift_retain();
  *(_QWORD *)a2 = v7;
  v10 = *((_QWORD *)a1 + 1);
  swift_retain();
  *((_QWORD *)a2 + 1) = v10;
  v13 = *(int *)(a5 + 32);
  v14 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v14 + 48))(&a1[v13], 1))
  {
    memcpy(&a2[v13], &a1[v13], *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v14 + 16))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(&a2[v13], 0, 1, a3);
  }
  return a2;
}

uint64_t sub_23DB4BC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(v0 + 32);
  type metadata accessor for Optional();
  v5 = type metadata accessor for Binding();
  v1 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v4 = (v1 + 40) & ~v1;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  v7 = *(int *)(v5 + 32);
  v8 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v8 + 48))(v0 + v4 + v7, 1))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v3 + v4 + v7, v6);
  return swift_deallocObject();
}

char *outlined init with take of Binding<A1?>(char *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a2 = *(_QWORD *)a1;
  *((_QWORD *)a2 + 1) = *((_QWORD *)a1 + 1);
  v10 = *(int *)(a5 + 32);
  v11 = *(_QWORD *)(a3 - 8);
  if ((*(unsigned int (**)(char *, uint64_t))(v11 + 48))(&a1[v10], 1))
  {
    memcpy(&a2[v10], &a1[v10], *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  }
  else
  {
    (*(void (**)(void))(v11 + 32))();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(&a2[v10], 0, 1, a3);
  }
  return a2;
}

uint64_t partial apply for closure #2 in Binding._optional<A>()(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = v1[4];
  type metadata accessor for Optional();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Binding() - 8) + 80);
  return closure #2 in Binding._optional<A>()(a1, v1[2], v1[3], (uint64_t)v1 + ((v2 + 40) & ~v2), v4);
}

uint64_t HeadphonePropertyWrapperPublisher.didSet.getter(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23[3];
  void *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v13 = a1;
  v24 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  v9 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v3);
  v17 = (uint64_t)&v9 - v9;
  v14 = type metadata accessor for NSRunLoop();
  v15 = MEMORY[0x24263B698](&protocol conformance descriptor for HeadphonePropertyWrapperPublisher<A>, v13, v18);
  v16 = lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  v25 = v13;
  v26 = v14;
  v27 = v15;
  v28 = v16;
  v11 = 0;
  v20 = type metadata accessor for Publishers.ReceiveOn();
  v19 = *(_QWORD *)(v20 - 8);
  v10 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v13, v4);
  v21 = (char *)&v9 - v10;
  v24 = *v1;
  v23[2] = *(id *)(v5 + 16);
  v23[1] = v24;
  v6 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  v12 = v23;
  v23[0] = v6;
  v7 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v17, 1);
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v17);

  MEMORY[0x24263B698](MEMORY[0x24BDB9A08], v20, v18);
  v22 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v20);
  return v22;
}

unint64_t type metadata accessor for NSRunLoop()
{
  unint64_t ObjCClassMetadata;
  uint64_t v2;

  v2 = lazy cache variable for type metadata for NSRunLoop;
  if (!lazy cache variable for type metadata for NSRunLoop)
  {
    objc_opt_self();
    ObjCClassMetadata = swift_getObjCClassMetadata();
    atomic_store(ObjCClassMetadata, (unint64_t *)&lazy cache variable for type metadata for NSRunLoop);
    return ObjCClassMetadata;
  }
  return v2;
}

unint64_t lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v3;

  v3 = lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop;
  if (!lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop)
  {
    v0 = type metadata accessor for NSRunLoop();
    v1 = MEMORY[0x24263B698](MEMORY[0x24BDD0408], v0);
    atomic_store(v1, (unint64_t *)&lazy protocol witness table cache variable for type NSRunLoop and conformance NSRunLoop);
    return v1;
  }
  return v3;
}

uint64_t outlined destroy of NSRunLoop.SchedulerOptions?(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for NSRunLoop.SchedulerOptions();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(v4 + 48))(a1, 1))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return a1;
}

uint64_t Published.Publisher.didSet.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  id v24[2];
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v14 = a1;
  v25 = 0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSRunLoop.SchedulerOptions?);
  v10 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](v2, v3);
  v18 = (uint64_t)&v9 - v10;
  v15 = type metadata accessor for NSRunLoop();
  v16 = MEMORY[0x24263B698](MEMORY[0x24BDB9EE8], v14, v19);
  v17 = lazy protocol witness table accessor for type NSRunLoop and conformance NSRunLoop();
  v26 = v14;
  v27 = v15;
  v28 = v16;
  v29 = v17;
  v12 = 0;
  v21 = type metadata accessor for Publishers.ReceiveOn();
  v20 = *(_QWORD *)(v21 - 8);
  v11 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5 = MEMORY[0x24BDAC7A8](v14, v4);
  v22 = (char *)&v9 - v11;
  v25 = v1;
  v24[1] = *(id *)(v5 + 16);
  v6 = objc_msgSend((id)objc_opt_self(), sel_mainRunLoop);
  v13 = v24;
  v24[0] = v6;
  v7 = type metadata accessor for NSRunLoop.SchedulerOptions();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v18, 1);
  Publisher.receive<A>(on:options:)();
  outlined destroy of NSRunLoop.SchedulerOptions?(v18);

  MEMORY[0x24263B698](MEMORY[0x24BDB9A08], v21, v19);
  v23 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v21);
  return v23;
}

uint64_t HMMultiState.description.getter(char a1)
{
  uint64_t v2;

  type metadata accessor for HMMultiState();
  switch(a1)
  {
    case 0:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("Don't know", 0xAuLL, 1)._countAndFlagsBits;
    case 1:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("YES", 3uLL, 1)._countAndFlagsBits;
    case 2:
      return String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)("NO", 2uLL, 1)._countAndFlagsBits;
  }
  _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return v2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance HMMultiState()
{
  char *v0;

  return HMMultiState.description.getter(*v0);
}

uint64_t HeadphonePropertyWrapperPublisher.receive<A>(subscriber:)()
{
  swift_retain();
  type metadata accessor for CurrentValueSubject();
  MEMORY[0x24263B698](MEMORY[0x24BDB9D10]);
  Publisher.subscribe<A>(_:)();
  return swift_release();
}

uint64_t HeadphonePropertyWrapperPublisher.subject.getter()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_retain();
  return v2;
}

_QWORD *HeadphonePropertyWrapperPublisher.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD v17[2];

  v12 = a3;
  v10 = a1;
  v14 = a2;
  v15 = v17;
  v17[0] = 0;
  v16 = 0;
  v17[1] = a2;
  v13 = *(_QWORD *)(a2 - 8);
  v8 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v9 = (char *)&v7 - v8;
  v16 = MEMORY[0x24BDAC7A8](a1, a2);
  type metadata accessor for CurrentValueSubject();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v9, v10, v14);
  v11 = CurrentValueSubject.__allocating_init(_:)();
  swift_retain();
  v3 = v10;
  v4 = v13;
  v5 = v14;
  v17[0] = v11;
  *v12 = v11;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  result = v15;
  outlined destroy of HeadphonePropertyWrapperPublisher<A>();
  return result;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> outlined destroy of HeadphonePropertyWrapperPublisher<A>()
{
  swift_release();
}

uint64_t protocol witness for Publisher.receive<A>(subscriber:) in conformance HeadphonePropertyWrapperPublisher<A>()
{
  return HeadphonePropertyWrapperPublisher.receive<A>(subscriber:)();
}

uint64_t RawRepresentable.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  _QWORD v9[5];
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;
  Builtin::Word v13;
  int v14;
  void *object;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9[3] = a1;
  v9[4] = a2;
  v21 = 0;
  v22 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9[0] = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  MEMORY[0x24BDAC7A8](AssociatedTypeWitness, v3);
  v11 = (char *)v9 - v9[0];
  v21 = v2;
  v13 = 1;
  v4 = DefaultStringInterpolation.init(literalCapacity:interpolationCount:)();
  v16 = &v19;
  v19 = v4;
  v20 = v5;
  v14 = 1;
  v6 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(">>>> ", 5uLL, 1);
  v9[2] = v6._object;
  DefaultStringInterpolation.appendLiteral(_:)(v6);
  swift_bridgeObjectRelease();
  dispatch thunk of RawRepresentable.rawValue.getter();
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v11, AssociatedTypeWitness);
  v7 = String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(" ", v13, v14 & 1);
  object = v7._object;
  DefaultStringInterpolation.appendLiteral(_:)(v7);
  swift_bridgeObjectRelease();
  v18 = v19;
  v17 = v20;
  swift_bridgeObjectRetain();
  outlined destroy of DefaultStringInterpolation();
  return String.init(stringInterpolation:)();
}

uint64_t associated type witness table accessor for Publisher.Failure : Error in HeadphonePropertyWrapperPublisher<A>()
{
  return MEMORY[0x24BEE40A8];
}

uint64_t type metadata instantiation function for HeadphonePropertyWrapperPublisher()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for HeadphonePropertyWrapperPublisher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a4, a4, (uint64_t)&nominal type descriptor for HeadphonePropertyWrapperPublisher);
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.__allocating_init()()
{
  return MEMORY[0x24BDCB250]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t URL.appendingPathComponent(_:)()
{
  return MEMORY[0x24BDCD928]();
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

Swift::String __swiftcall Data.base64EncodedString(options:)(NSDataBase64EncodingOptions options)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCDCA8](options);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Data.count.getter()
{
  return MEMORY[0x24BDCDD10]();
}

uint64_t Data.write(to:options:)()
{
  return MEMORY[0x24BDCDD20]();
}

uint64_t Data.init(capacity:)()
{
  return MEMORY[0x24BDCDD98]();
}

uint64_t Data.init<A>(_:)()
{
  return MEMORY[0x24BDCDE68]();
}

uint64_t Data.subscript.getter()
{
  return MEMORY[0x24BDCDE70]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t _convertBoolToObjCBool(_:)()
{
  return MEMORY[0x24BEE5B78]();
}

uint64_t _convertObjCBoolToBool(_:)()
{
  return MEMORY[0x24BEE5B80]();
}

uint64_t isFeatureEnabled(_:)()
{
  return MEMORY[0x24BE30BE0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t type metadata accessor for Publishers.ReceiveOn()
{
  return MEMORY[0x24BDB99F8]();
}

uint64_t AnyCancellable.store(in:)()
{
  return MEMORY[0x24BDB9B40]();
}

uint64_t type metadata accessor for AnyCancellable()
{
  return MEMORY[0x24BDB9B60]();
}

uint64_t dispatch thunk of ObservableObject.objectWillChange.getter()
{
  return MEMORY[0x24BDB9C40]();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return MEMORY[0x24BDB9C48]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x24BDB9CC0]();
}

uint64_t type metadata accessor for CurrentValueSubject()
{
  return MEMORY[0x24BDB9CE0]();
}

uint64_t CurrentValueSubject.__allocating_init(_:)()
{
  return MEMORY[0x24BDB9CF8]();
}

Swift::Void __swiftcall ObservableObjectPublisher.send()()
{
  MEMORY[0x24BDB9D68]();
}

uint64_t type metadata accessor for ObservableObjectPublisher()
{
  return MEMORY[0x24BDB9D80]();
}

uint64_t Published.init(initialValue:)()
{
  return MEMORY[0x24BDB9E98]();
}

uint64_t Published.projectedValue.getter()
{
  return MEMORY[0x24BDB9EA0]();
}

uint64_t Published.projectedValue.setter()
{
  return MEMORY[0x24BDB9EA8]();
}

uint64_t static Published.subscript.modify()
{
  return MEMORY[0x24BDB9EC0]();
}

uint64_t static Published.subscript.getter()
{
  return MEMORY[0x24BDB9EC8]();
}

uint64_t static Published.subscript.setter()
{
  return MEMORY[0x24BDB9ED0]();
}

uint64_t type metadata accessor for Published()
{
  return MEMORY[0x24BDB9EF0]();
}

uint64_t Publisher.eraseToAnyPublisher()()
{
  return MEMORY[0x24BDB9F20]();
}

uint64_t Publisher.receive<A>(on:options:)()
{
  return MEMORY[0x24BDBA090]();
}

uint64_t Publisher.subscribe<A>(_:)()
{
  return MEMORY[0x24BDBA0E0]();
}

uint64_t Publisher<>.sink(receiveValue:)()
{
  return MEMORY[0x24BDBA110]();
}

uint64_t Image.init(systemName:)()
{
  return MEMORY[0x24BDF3F80]();
}

uint64_t Binding.wrappedValue.getter()
{
  return MEMORY[0x24BDF47B0]();
}

uint64_t Binding.wrappedValue.setter()
{
  return MEMORY[0x24BDF47B8]();
}

uint64_t Binding.init(get:set:)()
{
  return MEMORY[0x24BDF47F8]();
}

uint64_t type metadata accessor for Binding()
{
  return MEMORY[0x24BDF4870]();
}

uint64_t static DispatchTimeoutResult.== infix(_:_:)()
{
  return MEMORY[0x24BEE5438]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5628]();
}

uint64_t dispatch thunk of Log.debug(_:function:file:line:)()
{
  return MEMORY[0x24BE85630]();
}

uint64_t dispatch thunk of Log.error(_:function:file:line:)()
{
  return MEMORY[0x24BE85638]();
}

uint64_t dispatch thunk of Log.notice(_:function:file:line:)()
{
  return MEMORY[0x24BE85640]();
}

uint64_t static Log.shared.getter()
{
  return MEMORY[0x24BE85648]();
}

uint64_t type metadata accessor for Log()
{
  return MEMORY[0x24BE85650]();
}

uint64_t static HashFunction.hash<A>(data:)()
{
  return MEMORY[0x24BDC62B8]();
}

uint64_t type metadata accessor for SHA256Digest()
{
  return MEMORY[0x24BDC62F0]();
}

uint64_t type metadata accessor for SHA256()
{
  return MEMORY[0x24BDC6AF8]();
}

uint64_t Dictionary.init()()
{
  return MEMORY[0x24BEE01A8]();
}

uint64_t Array.init()()
{
  return MEMORY[0x24BEE01B8]();
}

uint64_t Set.init()()
{
  return MEMORY[0x24BEE01C0]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t Dictionary.Keys.debugDescription.getter()
{
  return MEMORY[0x24BEE02D0]();
}

uint64_t Dictionary.keys.getter()
{
  return MEMORY[0x24BEE0328]();
}

uint64_t Dictionary.Values.count.getter()
{
  return MEMORY[0x24BEE0398]();
}

uint64_t Dictionary.values.getter()
{
  return MEMORY[0x24BEE03E0]();
}

uint64_t Dictionary.subscript.getter()
{
  return MEMORY[0x24BEE04A8]();
}

uint64_t Dictionary.subscript.setter()
{
  return MEMORY[0x24BEE04B0]();
}

Swift::Int __swiftcall Hashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE0630](seed);
}

uint64_t Character.hexDigitValue.getter()
{
  return MEMORY[0x24BEE06B8]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

{
  return MEMORY[0x24BEE0A00]();
}

uint64_t String.description.getter()
{
  return MEMORY[0x24BEE0A28]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t String.init(stringInterpolation:)()
{
  return MEMORY[0x24BEE0AE0]();
}

uint64_t static String.+ infix(_:_:)()
{
  return MEMORY[0x24BEE0AF0]();
}

Swift::String __swiftcall String.init(_builtinStringLiteral:utf8CodeUnitCount:isASCII:)(Builtin::RawPointer _builtinStringLiteral, Builtin::Word utf8CodeUnitCount, Builtin::Int1 isASCII)
{
  uint64_t v3;
  void *v4;
  Swift::String result;

  v3 = MEMORY[0x24BEE0AF8](_builtinStringLiteral, utf8CodeUnitCount, isASCII);
  result._object = v4;
  result._countAndFlagsBits = v3;
  return result;
}

uint64_t static String.== infix(_:_:)()
{
  return MEMORY[0x24BEE0B08]();
}

uint64_t static String.+= infix(_:_:)()
{
  return MEMORY[0x24BEE0B10]();
}

uint64_t String.utf8.getter()
{
  return MEMORY[0x24BEE0B28]();
}

uint64_t String.count.getter()
{
  return MEMORY[0x24BEE0B68]();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CC8](a1._countAndFlagsBits, a1._object);
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

{
  return MEMORY[0x24BEE0DD8]();
}

uint64_t Sequence.compactMap<A>(_:)()
{
  return MEMORY[0x24BEE0E40]();
}

uint64_t Sequence.reduce<A>(into:_:)()
{
  return MEMORY[0x24BEE0EB0]();
}

uint64_t Sequence.forEach(_:)()
{
  return MEMORY[0x24BEE0EE0]();
}

uint64_t UnsignedInteger<>.init<A>(_:)()
{
  return MEMORY[0x24BEE0F48]();
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return MEMORY[0x24BEE0FD8]();
}

uint64_t RawRepresentable<>.hashValue.getter()
{
  return MEMORY[0x24BEE1068]();
}

uint64_t RawRepresentable<>._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE1070]();
}

uint64_t RawRepresentable<>.hash(into:)()
{
  return MEMORY[0x24BEE1078]();
}

uint64_t SignedInteger<>.init<A>(_:)()
{
  return MEMORY[0x24BEE1108]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t Array.subscript.getter()
{
  return MEMORY[0x24BEE1308]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t Set.init<A>(_:)()
{
  return MEMORY[0x24BEE16F8]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t Collection.dropFirst(_:)()
{
  return MEMORY[0x24BEE19D0]();
}

uint64_t RangeReplaceableCollection.append(_:)()
{
  return MEMORY[0x24BEE1AC8]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t OS_dispatch_group.wait(timeout:)()
{
  return MEMORY[0x24BEE5650]();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return MEMORY[0x24BEE5660]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

NSNumber __swiftcall NSNumber.init(integerLiteral:)(Swift::Int integerLiteral)
{
  return (NSNumber)MEMORY[0x24BDD01F8](integerLiteral);
}

uint64_t type metadata accessor for NSRunLoop.SchedulerOptions()
{
  return MEMORY[0x24BDD03C0]();
}

Swift::Void __swiftcall UnsafeMutablePointer.deallocate()()
{
  MEMORY[0x24BEE1BE0]();
}

uint64_t UnsafeMutablePointer.deinitialize(count:)()
{
  return MEMORY[0x24BEE1C00]();
}

uint64_t static UnsafeMutablePointer.allocate(capacity:)()
{
  return MEMORY[0x24BEE1C20]();
}

uint64_t Optional.debugDescription.getter()
{
  return MEMORY[0x24BEE1C58]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)()
{
  return MEMORY[0x24BDD0568]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t SetAlgebra<>.init(arrayLiteral:)()
{
  return MEMORY[0x24BEE2278]();
}

uint64_t SetAlgebra.isDisjoint(with:)()
{
  return MEMORY[0x24BEE2280]();
}

uint64_t SetAlgebra.isSuperset(of:)()
{
  return MEMORY[0x24BEE2288]();
}

uint64_t SetAlgebra.subtracting(_:)()
{
  return MEMORY[0x24BEE2290]();
}

uint64_t SetAlgebra.isEmpty.getter()
{
  return MEMORY[0x24BEE2298]();
}

uint64_t SetAlgebra.isSubset(of:)()
{
  return MEMORY[0x24BEE22A0]();
}

uint64_t SetAlgebra.subtract(_:)()
{
  return MEMORY[0x24BEE22A8]();
}

uint64_t SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22B0]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _hashValue<A>(for:)()
{
  return MEMORY[0x24BEE2380]();
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t assertionFailure(_:file:line:)()
{
  return MEMORY[0x24BEE2CB0]();
}

uint64_t dispatch thunk of static FixedWidthInteger.bitWidth.getter()
{
  return MEMORY[0x24BEE2D18]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _SwiftNewtypeWrapper<>.hashValue.getter()
{
  return MEMORY[0x24BEE31C0]();
}

uint64_t _SwiftNewtypeWrapper<>._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE31C8]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

uint64_t _SwiftNewtypeWrapper<>.hash(into:)()
{
  return MEMORY[0x24BEE31D8]();
}

uint64_t static _SwiftNewtypeWrapper<>._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BEE31E0]();
}

uint64_t static _SwiftNewtypeWrapper<>._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BEE31E8]();
}

uint64_t static _SwiftNewtypeWrapper<>._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BEE31F0]();
}

uint64_t _SwiftNewtypeWrapper<>._bridgeToObjectiveC()()
{
  return MEMORY[0x24BEE31F8]();
}

uint64_t _convertToAnyHashable<A>(_:)()
{
  return MEMORY[0x24BEE3288]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

{
  return MEMORY[0x24BEE32E0]();
}

{
  return MEMORY[0x24BEE32F0]();
}

{
  return MEMORY[0x24BEE32F8]();
}

{
  return MEMORY[0x24BEE3340]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

{
  return MEMORY[0x24BEE3430]();
}

{
  return MEMORY[0x24BEE3440]();
}

{
  return MEMORY[0x24BEE3448]();
}

{
  return MEMORY[0x24BEE3488]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3930]();
}

{
  return MEMORY[0x24BEE3938]();
}

{
  return MEMORY[0x24BEE3940]();
}

Swift::Void __swiftcall DefaultStringInterpolation.appendLiteral(_:)(Swift::String a1)
{
  MEMORY[0x24BEE3948](a1._countAndFlagsBits, a1._object);
}

uint64_t DefaultStringInterpolation.init(literalCapacity:interpolationCount:)()
{
  return MEMORY[0x24BEE3950]();
}

uint64_t _allocateUninitializedArray<A>(_:)()
{
  return MEMORY[0x24BEE3A18]();
}

uint64_t specialized _allocateUninitializedArray<A>(_:)()
{
  return MEMORY[0x24BEE5F58]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t == infix<A>(_:_:)()
{
  return MEMORY[0x24BEE3BB8]();
}

uint64_t _convertInOutToPointerArgument<A>(_:)()
{
  return MEMORY[0x24BEE3D30]();
}

uint64_t _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)()
{
  return MEMORY[0x24BEE3D98]();
}

uint64_t print(_:separator:terminator:)()
{
  return MEMORY[0x24BEE42C0]();
}

uint64_t Hasher.combine<A>(_:)()
{
  return MEMORY[0x24BEE42F0]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t OptionSet<>.insert(_:)()
{
  return MEMORY[0x24BEE4A20]();
}

uint64_t OptionSet<>.remove(_:)()
{
  return MEMORY[0x24BEE4A28]();
}

uint64_t OptionSet<>.update(with:)()
{
  return MEMORY[0x24BEE4A30]();
}

uint64_t OptionSet<>.contains(_:)()
{
  return MEMORY[0x24BEE4A38]();
}

uint64_t OptionSet.intersection(_:)()
{
  return MEMORY[0x24BEE4A40]();
}

uint64_t OptionSet.symmetricDifference(_:)()
{
  return MEMORY[0x24BEE4A48]();
}

uint64_t OptionSet.union(_:)()
{
  return MEMORY[0x24BEE4A50]();
}

uint64_t OptionSet<>.formIntersection(_:)()
{
  return MEMORY[0x24BEE4A58]();
}

uint64_t OptionSet<>.formSymmetricDifference(_:)()
{
  return MEMORY[0x24BEE4A60]();
}

uint64_t OptionSet<>.formUnion(_:)()
{
  return MEMORY[0x24BEE4A68]();
}

uint64_t OptionSet<>.init()()
{
  return MEMORY[0x24BEE4A70]();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x24BE1A1C8]();
}

Boolean CFPreferencesAppSynchronize(CFStringRef applicationID)
{
  return MEMORY[0x24BDBC150](applicationID);
}

Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC188](key, applicationID, keyExistsAndHasValidFormat);
}

uint64_t CUPrintNSDataAddress()
{
  return MEMORY[0x24BE291C8]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializerInFile()
{
  return MEMORY[0x24BEE4B40]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x24BDADDC8]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x24BDADDD0](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x24BDADDD8](group);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x24BEDD080](object, key);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
  MEMORY[0x24BEDD3C0](object, key, value, policy);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

uint64_t os_variant_has_internal_ui()
{
  return MEMORY[0x24BDAF4E0]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x24BEE4CD8]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x24BEE4CE8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getMetatypeMetadata()
{
  return MEMORY[0x24BEE4D98]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_modifyAtReferenceWritableKeyPath()
{
  return MEMORY[0x24BEE4EB8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_projectBox()
{
  return MEMORY[0x24BEE4ED0]();
}

uint64_t swift_readAtKeyPath()
{
  return MEMORY[0x24BEE4ED8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

