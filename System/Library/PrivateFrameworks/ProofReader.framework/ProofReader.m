void sub_1DE231860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  _Block_object_dispose(&a40, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void _freeDatabaseConnection(_QWORD *a1)
{
  void **v2;
  void **v3;

  v2 = (void **)a1[5];
  if (v2)
  {
    if (*v2)
    {
      free(*v2);
      v2 = (void **)a1[5];
    }
    free(v2);
  }
  v3 = (void **)a1[9];
  if (v3)
  {
    if (*v3)
    {
      free(*v3);
      v3 = (void **)a1[9];
    }
    free(v3);
  }
  free(a1);
}

void _releaseDatabaseConnection(uint64_t a1, unsigned __int8 *a2)
{
  PRdb(a2, 2, 0);
  _freeDatabaseConnection(a2);
}

uint64_t _appIdentifierFromOptions(void *a1)
{
  uint64_t result;
  uint64_t v2;

  result = objc_msgSend(a1, "objectForKey:", CFSTR("AppIdentifier"));
  if (result)
  {
    v2 = result;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      return v2;
    else
      return 0;
  }
  return result;
}

uint64_t SLLngToA(unsigned int a1)
{
  if ((SLLngToA_LToANotDef & 1) == 0)
  {
    SLLngToA_SLLangToAttr[0] = (uint64_t)&SLatt1_tab;
    unk_1ED0A5010 = &SLatt2_tab;
    qword_1ED0A5018 = (uint64_t)&SLatt5_tab;
    unk_1ED0A5020 = &SLatt1_tab;
    qword_1ED0A5028 = (uint64_t)&SLatt2_tab;
    unk_1ED0A5030 = &SLatt1_tab;
    qword_1ED0A5038 = (uint64_t)&SLatt1_tab;
    unk_1ED0A5040 = &SLatt1_tab;
    qword_1ED0A5048 = (uint64_t)&SLatt1_tab;
    unk_1ED0A5050 = &SLatt1_tab;
    qword_1ED0A5058 = (uint64_t)&SLatt1_tab;
    unk_1ED0A5060 = &SLatt1_tab;
    qword_1ED0A5068 = (uint64_t)&SLatt1_tab;
    unk_1ED0A5070 = &SLatt1_tab;
    qword_1ED0A5078 = (uint64_t)&SLatt1_tab;
    unk_1ED0A5080 = &SLatt7_tab;
    qword_1ED0A5088 = (uint64_t)&SLatt1_tab;
    unk_1ED0A5090 = &SLatt1_tab;
    qword_1ED0A5098 = (uint64_t)&SLatt2_tab;
    unk_1ED0A50A0 = &SLatt1_tab;
    SLLngToA_LToANotDef = 1;
  }
  if (a1 > 0x25)
    return 0;
  else
    return SLLngToA_SLLangToAttr[a1];
}

uint64_t SLcap(uint64_t a1, int a2, int a3, _QWORD *a4, uint64_t a5)
{
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  int v10;

  *a4 = 0;
  if (a2 > a3)
    return 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = a2;
  LOWORD(v10) = a2;
  do
  {
    if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)(a1 + (__int16)v10)) & 0x40000000) != 0)
    {
      ++v7;
      *((_DWORD *)a4 + ((unsigned __int16)(v10 - v9) >> 5)) |= 1 << ~(v10 - v9);
      if ((unsigned __int16)v10 == (unsigned __int16)a2)
        ++v6;
    }
    else if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)(a1 + (__int16)v10)) & 0x60000040) != 0)
    {
      ++v8;
    }
    else
    {
      LOWORD(a2) = a2 + 1;
    }
    v10 = (__int16)(v10 + 1);
  }
  while (v10 <= a3);
  if (v6 && v7 == 1)
    return 1;
  if (v8 && v7)
    return 3;
  if (!v7)
    return 0;
  return 2;
}

uint64_t SLstrcmp(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1 + 1;
    do
    {
      if (v2 != *a2)
        break;
      ++a2;
      v4 = *v3++;
      v2 = v4;
    }
    while (v4);
  }
  return v2 - *a2;
}

uint64_t SLstrncmp(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  _BYTE *v3;

  v3 = &a1[a3];
  if (a3 >= 1)
  {
    do
    {
      if (!*a1)
        break;
      if (*a1 != *a2)
        break;
      ++a1;
      ++a2;
    }
    while (a1 < v3);
  }
  if (a1 == v3)
    return 0;
  else
    return *a1 - *a2;
}

uint64_t SLc2pasc(char *a1)
{
  int v2;
  __int16 v3;
  int v4;

  v2 = strlen(a1);
  if (v2 << 16 <= 16711680)
    v3 = v2;
  else
    v3 = 255;
  LOWORD(v4) = v3 - 1;
  if (((v3 - 1) & 0x8000) == 0)
  {
    v4 = (__int16)v4;
    do
      a1[(unsigned __int16)v4 + 1] = a1[(unsigned __int16)v4];
    while ((unsigned __int16)v4--);
  }
  *a1 = v3;
  return v3;
}

uint64_t SLpasc2c(unsigned __int8 *a1)
{
  uint64_t result;
  int v3;
  int v4;

  result = *a1;
  if ((_DWORD)result)
  {
    v3 = 1;
    v4 = 1;
    do
    {
      a1[v3 - 1] = a1[(__int16)v4++];
      v3 = (__int16)v4;
    }
    while ((__int16)v4 <= (int)result);
  }
  a1[result] = 0;
  return result;
}

void sub_1DE235EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1DE2367F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__0(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t _setLanguageModel(void *a1, uint64_t a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v8 = objc_msgSend(a1, "objectForKey:", a2);
  v9 = v8;
  if (!a3)
    a3 = &stru_1EA8D8440;
  if (!v8)
  {
    v9 = objc_msgSend(MEMORY[0x1E0C99E08], "dictionary");
    objc_msgSend(a1, "setObject:forKey:", v9, a2);
    if (a4)
      goto LABEL_5;
LABEL_7:
    v11 = objc_msgSend(MEMORY[0x1E0C99E38], "null");
    v10 = (void *)v9;
    return objc_msgSend(v10, "setObject:forKey:", v11, a3);
  }
  if (!a4)
    goto LABEL_7;
LABEL_5:
  v10 = (void *)v9;
  v11 = a4;
  return objc_msgSend(v10, "setObject:forKey:", v11, a3);
}

void sub_1DE236C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

BOOL _allowModelUsage()
{
  if (_allowModelUsage_onceToken != -1)
    dispatch_once(&_allowModelUsage_onceToken, &__block_literal_global_303);
  return (_allowModelUsage_kbdProcess | _allowModelUsage_inputuiProcess) == 0;
}

void sub_1DE23711C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1DE2373D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE237B08(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1DE2384C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

void sub_1DE238A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void sub_1DE23B344(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___allowModelUsage_block_invoke()
{
  void *v0;
  uint64_t result;

  v0 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3898], "processInfo"), "processName");
  _allowModelUsage_kbdProcess = objc_msgSend(v0, "isEqualToString:", CFSTR("kbd"));
  result = objc_msgSend(v0, "isEqualToString:", CFSTR("InputUI"));
  _allowModelUsage_inputuiProcess = result;
  return result;
}

uint64_t descendingDoubleValueComparator_block_invoke(uint64_t a1, void *a2, void *a3)
{
  double v4;
  double v5;
  double v6;

  objc_msgSend(a2, "doubleValue");
  v5 = v4;
  objc_msgSend(a3, "doubleValue");
  if (v5 > v6)
    return -1;
  else
    return v5 < v6;
}

uint64_t descendingScoreComparator_block_invoke_2(uint64_t a1, void *a2, void *a3)
{
  double v4;
  double v5;
  double v6;

  objc_msgSend(a2, "score");
  v5 = v4;
  objc_msgSend(a3, "score");
  if (v5 > v6)
    return -1;
  else
    return v5 < v6;
}

void sub_1DE23CFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

uint64_t SLchk(unsigned __int8 *a1, int a2, unsigned int a3, int *a4, unsigned int a5, _DWORD *a6)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;

  if (a3 > 2)
  {
    if (a3 > a5)
      return 8;
    v8 = *a4;
    if (*a4 == *a6 && a4[1] == a6[1])
      return 0;
    if (a2 < 1)
      return 8;
    v9 = (unsigned __int16)a2;
    while (1)
    {
      v10 = *a1++;
      if (v10 == 45)
        break;
      if (!--v9)
        return 8;
    }
    if (((*a6 ^ v8) & 0x7FFFFFFF) != 0 || (v8 & 0x80000000) == 0)
      return 8;
LABEL_21:
    if (a4[1] != a6[1])
      return 8;
    return 0;
  }
  if (a3 >= a5)
    return 0;
  if (a3 == 2 && a5 == 3)
  {
    if (a2 >= 1)
    {
      v6 = (unsigned __int16)a2;
      do
      {
        v7 = *a1++;
        if (v7 == 45)
          return 0;
      }
      while (--v6);
    }
    if (*a4 == *a6)
      goto LABEL_21;
  }
  return 8;
}

uint64_t SLLngToC(int a1, unsigned int a2)
{
  if ((LtoCNotDef & 1) == 0)
    SLLtoCInit();
  return SLLangToChar[2 * a2 + a1];
}

uint64_t SLLtoCInit()
{
  SLLangToChar = (uint64_t)&SLToNat1ChrSet;
  *(_QWORD *)algn_1ED0A4DA8 = &SLToDef1ChrSet;
  qword_1ED0A4DC0 = (uint64_t)&SLToNat5ChrSet;
  unk_1ED0A4DC8 = &SLToDef5ChrSet;
  qword_1ED0A4E90 = (uint64_t)&SLToNat7ChrSet;
  unk_1ED0A4E98 = &SLToDef7ChrSet;
  qword_1ED0A4DB0 = (uint64_t)&SLToNat2ChrSet;
  unk_1ED0A4DB8 = &SLToDef2ChrSet;
  qword_1ED0A4DD0 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4DD8 = &SLToDef1ChrSet;
  qword_1ED0A4DE0 = (uint64_t)&SLToNat2ChrSet;
  unk_1ED0A4DE8 = &SLToDef2ChrSet;
  qword_1ED0A4DF0 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4DF8 = &SLToDef1ChrSet;
  qword_1ED0A4E00 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E08 = &SLToDef1ChrSet;
  qword_1ED0A4E10 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E18 = &SLToDef1ChrSet;
  qword_1ED0A4E20 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E28 = &SLToDef1ChrSet;
  qword_1ED0A4E30 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E38 = &SLToDef1ChrSet;
  qword_1ED0A4E40 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E48 = &SLToDef1ChrSet;
  qword_1ED0A4E50 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E58 = &SLToDef1ChrSet;
  qword_1ED0A4E60 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E68 = &SLToDef1ChrSet;
  qword_1ED0A4E70 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E78 = &SLToDef1ChrSet;
  qword_1ED0A4E80 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4E88 = &SLToDef1ChrSet;
  qword_1ED0A4EA0 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4EA8 = &SLToDef1ChrSet;
  qword_1ED0A4EB0 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4EB8 = &SLToDef1ChrSet;
  qword_1ED0A4EC0 = (uint64_t)&SLToNat2ChrSet;
  unk_1ED0A4EC8 = &SLToDef2ChrSet;
  qword_1ED0A4ED0 = (uint64_t)&SLToNat1ChrSet;
  unk_1ED0A4ED8 = &SLToDef1ChrSet;
  LtoCNotDef = 1;
  return 0;
}

uint64_t SLchcnv(char *a1, int a2, unsigned __int8 *a3, int a4, unsigned int a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  int v16;

  if ((LtoCNotDef & 1) == 0)
    SLLtoCInit();
  result = 8;
  if (a5 <= 0x25)
  {
    v11 = SLLangToChar[2 * a5 + a4];
    if (v11)
    {
      if (a2 < 1)
      {
        v12 = 0;
      }
      else
      {
        v12 = (unsigned __int16)a2;
        v13 = (unsigned __int16)a2;
        v14 = a3;
        do
        {
          v16 = *a1++;
          v15 = v16;
          if (v16 < 0)
            v15 = *(_BYTE *)(v11 + v15 - 128);
          *v14++ = v15;
          --v13;
        }
        while (v13);
      }
      result = 0;
      a3[v12] = 0;
    }
  }
  return result;
}

uint64_t SLcrypt(_BYTE *a1, unsigned int a2, uint64_t a3, int a4)
{
  unsigned __int16 v4;
  uint64_t v5;
  int v6;

  if (a2)
  {
    v4 = 0;
    v5 = a2;
    do
    {
      if (a4 == v4)
        v4 = 0;
      if (*a1)
      {
        v6 = *(unsigned __int8 *)(a3 + v4) ^ *a1;
        if (v6)
          *a1 = v6;
      }
      ++v4;
      ++a1;
      --v5;
    }
    while (v5);
  }
  return 0;
}

uint64_t SLOpen(uint64_t a1, uint64_t a2, int *a3, unsigned int a4)
{
  char v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  stat v16;
  char v17[510];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  __strcpy_chk();
  __strcat_chk();
  v6 = a4;
  v15 = 0;
  v7 = open(v17, a4 & 0xFFF, 511, 0, 0);
  *a3 = v7;
  if (v7 == -1)
    return 8;
  v8 = (a4 >> 12) & 3;
  if (v8 == 3)
    v9 = 1;
  else
    v9 = v8;
  if (v8)
    v10 = v9;
  else
    v10 = 1;
  WORD2(v15) = v10;
  if (fcntl(v7, 7, &v14) < 0)
    goto LABEL_18;
  if (v8 && WORD2(v15) == 2)
  {
    WORD2(v15) = v8;
    if (fcntl(*a3, 8, &v14) < 0)
    {
      if (close(*a3) == -1)
        return 8;
      else
        return 4;
    }
    goto LABEL_21;
  }
  if (v8 && (_DWORD)v15)
  {
LABEL_18:
    if (close(*a3) == -1)
      return 8;
    else
      return 4;
  }
LABEL_21:
  result = 0;
  if ((v6 & 3) == 0)
  {
    v12 = *a3;
    if (v12 <= 0x3F)
    {
      memset(&v16, 0, sizeof(v16));
      if (!fstat(v12, &v16) && v16.st_size >= 1 && (v16.st_mode & 0xF000) == 0x8000)
      {
        v13 = mmap(0, v16.st_size, 1, 2, v12, 0);
        if (v13 != (void *)-1)
        {
          mapped_file_buffers[v12] = v13;
          mapped_file_sizes[v12] = v16.st_size;
          mapped_file_offsets[v12] = 0;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t SLfulfspec(char *__src, const char *a2, char *__dst)
{
  strcpy(__dst, __src);
  strcat(__dst, a2);
  return 0;
}

uint64_t SLClose(unsigned int a1)
{
  void *v2;
  int64_t v3;

  if (a1 <= 0x3F)
  {
    v2 = (void *)mapped_file_buffers[a1];
    if (v2)
    {
      v3 = mapped_file_sizes[a1];
      if (v3 >= 1)
      {
        munmap(v2, v3);
        mapped_file_buffers[a1] = 0;
        mapped_file_sizes[a1] = 0;
        mapped_file_offsets[a1] = 0;
      }
    }
  }
  return 8 * (close(a1) == -1);
}

uint64_t SLSeek(unsigned int a1, int a2, unsigned int a3)
{
  uint64_t v3;

  if (a3 > 2)
    return 8;
  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t)mapped_file_sizes[a1] >= 1)
    v3 = seek_file_map(a1, a2, a3);
  else
    v3 = lseek(a1, a2, a3);
  return 8 * (v3 == -1);
}

uint64_t seek_file_map(unsigned int a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;

  if (a1 > 0x3F)
    return -1;
  if (!mapped_file_buffers[a1])
    return -1;
  v3 = a1;
  v4 = mapped_file_sizes[a1];
  if (v4 < 1)
    return -1;
  if (a3 == 2)
  {
    v5 = v4 + a2;
  }
  else
  {
    v5 = mapped_file_offsets[a1];
    if (a3 == 1)
    {
      v5 += a2;
    }
    else if (!a3)
    {
      v5 = a2;
    }
  }
  result = -1;
  if ((v5 & 0x8000000000000000) == 0 && v5 <= v4)
  {
    mapped_file_offsets[v3] = v5;
    return v5;
  }
  return result;
}

uint64_t SLFpos(unsigned int a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  BOOL v6;
  int v7;

  if (a1 <= 0x3F && mapped_file_buffers[a1] && (v3 = mapped_file_sizes[a1], v3 >= 1))
  {
    v4 = mapped_file_offsets[a1];
    result = 8;
    if ((v4 & 0x8000000000000000) == 0)
    {
      v6 = v4 > v3 || (_DWORD)v4 == -1;
      v7 = v4;
      if (!v6)
        goto LABEL_12;
    }
  }
  else
  {
    v7 = lseek(a1, 0, 1);
    if (v7 != -1)
    {
LABEL_12:
      result = 0;
      *a2 = v7;
      return result;
    }
    return 8;
  }
  return result;
}

uint64_t SLRead(unsigned int a1, unsigned int a2, void *__dst, _DWORD *a4)
{
  int file_map;

  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t)mapped_file_sizes[a1] >= 1)
    file_map = read_file_map(a1, __dst, (int)a2);
  else
    file_map = read(a1, __dst, a2);
  *a4 = file_map;
  return 8 * (file_map == -1);
}

size_t read_file_map(unsigned int a1, void *__dst, size_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  if (a1 > 0x3F)
    return -1;
  v3 = mapped_file_buffers[a1];
  if (!v3)
    return -1;
  v4 = a1;
  v5 = mapped_file_sizes[a1];
  if (v5 < 1)
    return -1;
  v6 = mapped_file_offsets[a1];
  if (v6 + a3 <= v5)
    v7 = a3;
  else
    v7 = v5 - v6;
  memmove(__dst, (const void *)(v3 + v6), v7);
  mapped_file_offsets[v4] += v7;
  return v7;
}

uint64_t SLFRead(unsigned int a1, int a2, void *__dst, unsigned int *a4)
{
  unsigned int file_map;

  if (a1 <= 0x3F && mapped_file_buffers[a1] && (uint64_t)mapped_file_sizes[a1] >= 1)
    file_map = read_file_map(a1, __dst, a2);
  else
    file_map = read(a1, __dst, a2);
  *a4 = file_map;
  return (file_map >> 28) & 8;
}

uint64_t SLHRead(unsigned int a1, int a2, char *__dst, _DWORD *a4)
{
  int v6;
  int v8;
  int v9;
  int v11;

  *a4 = 0;
  if (!a2)
    return 0;
  v6 = a2;
  while (1)
  {
    v8 = v6 >= 4096 ? 4096 : v6;
    v11 = v8;
    if (SLFRead(a1, v8, __dst, (unsigned int *)&v11))
      break;
    v9 = v11;
    __dst += v11;
    *a4 += v11;
    v6 -= v9;
    if (!v6)
      return 0;
  }
  return 8;
}

uint64_t SLFWrite(int a1, int a2, void *__buf, unsigned int *a4)
{
  unsigned int v5;

  v5 = write(a1, __buf, a2);
  *a4 = v5;
  return (v5 >> 28) & 8;
}

uint64_t SLtmpnam(_BYTE *a1, char *a2)
{
  const char *v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  char *__dst;

  v4 = (const char *)malloc_type_malloc(0x1FEuLL, 0x100004077774924uLL);
  v5 = (char *)malloc_type_malloc(8uLL, 0x100004077774924uLL);
  if (!*a2)
    goto LABEL_6;
  if (*a1)
  {
    __strcpy_chk();
    __strcat_chk();
  }
  else
  {
    __strcpy_chk();
  }
  if (access(v4, 0) == -1)
  {
    v9 = 0;
LABEL_18:
    v10 = (void *)v4;
  }
  else
  {
LABEL_6:
    __dst = a2;
    v6 = time(0) ^ 0x75BD924;
    v7 = 308915776;
    while (1)
    {
      v8 = -2836 * (v6 / 127773) + 16807 * (v6 % 127773);
      v6 = v8 >= 0 ? -2836 * (v6 / 127773) + 16807 * (v6 % 127773) : v8 + 0x7FFFFFFF;
      snprintf(v5, 8uLL, "%06d", (unsigned __int16)(v6 % 308915776));
      if (*a1)
      {
        __strcpy_chk();
        __strcat_chk();
      }
      else
      {
        __strcpy_chk();
      }
      if (access(v4, 0) == -1)
        break;
      if (!--v7)
      {
        v9 = 8;
        goto LABEL_18;
      }
    }
    strcpy(__dst, v5);
    v9 = 0;
    v10 = v5;
    v5 = (char *)v4;
  }
  free(v10);
  free(v5);
  return v9;
}

uint64_t SLRand(_DWORD *a1)
{
  uint64_t v1;

  LODWORD(v1) = -2836 * ((*a1 ^ 0x75BD924) / 127773) + 16807 * ((*a1 ^ 0x75BD924) % 127773);
  if ((int)v1 >= 0)
    v1 = v1;
  else
    v1 = (v1 + 0x7FFFFFFF);
  *a1 = v1 ^ 0x75BD924;
  return v1;
}

uint64_t SLremove()
{
  char *v0;
  char *v1;
  _BOOL4 v2;

  v0 = (char *)malloc_type_calloc(1uLL, 0x1FEuLL, 0xABFD737CuLL);
  if (!v0)
    return 8;
  v1 = v0;
  __strcpy_chk();
  __strcat_chk();
  v2 = unlink(v1) == -1;
  free(v1);
  return (8 * v2);
}

uint64_t SLpthcmp(_BYTE *a1, unsigned __int8 *a2)
{
  return 8 * (SLstrcmp(a1, a2) != 0);
}

uint64_t SLpthcpy(char *a1, const char *a2)
{
  strcpy(a1, a2);
  return 0;
}

uint64_t SLfun(uint64_t a1, int a2, int a3, unsigned __int16 *a4, _WORD *a5)
{
  __int16 v5;
  int v6;
  unsigned __int16 v7;

  v5 = *(unsigned __int8 *)(a1 + a2);
  v6 = (__int16)(a2 + 1);
  if (v6 <= a3)
  {
    v7 = *(unsigned __int8 *)(a1 + a2);
    do
    {
      v7 = ((v7 & 0x7F) << 8) + 19 * (v7 >> 7) + *(unsigned __int8 *)(a1 + (__int16)v6);
      if (v7 > 0x7FECu)
        v7 -= 32749;
      v5 ^= v7;
      v6 = (__int16)(v6 + 1);
    }
    while (v6 <= a3);
  }
  else
  {
    v7 = *(unsigned __int8 *)(a1 + a2);
  }
  *a5 = v5 & 0x7FFF;
  *a4 = v7;
  return 0;
}

uint64_t SLisint(_BYTE *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned int v4;

  v2 = *a1;
  if (!*a1)
    return 1;
  v3 = a1 + 1;
  while ((*(_DWORD *)(a2 + 4 * v2) & 0x8000000) != 0)
  {
    v4 = *v3++;
    v2 = v4;
    if (!v4)
      return 1;
  }
  return 0;
}

uint64_t SLlisten(const char *a1)
{
  _BYTE *v1;
  __darwin_ct_rune_t v2;
  signed int v3;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __darwin_ct_rune_t v9;

  v1 = a1 + 1;
  v2 = *(unsigned __int8 *)a1;
  v3 = strlen(a1) << 16;
  if (v3 >= 0x20000)
  {
    if (v3 == 0x20000)
    {
      if (v2 == 45)
      {
        if (*v1 == 45)
        {
          LOBYTE(v4) = 2;
          return (char)v4;
        }
      }
      else if ((v2 - 65) <= 0x19 && *v1 == 46)
      {
LABEL_18:
        LOBYTE(v4) = 0;
        return (char)v4;
      }
    }
    v6 = 0;
    v7 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (v2 <= 85)
      {
        if (v2 <= 66)
        {
          if (v2 > 40)
          {
            if (v2 == 41)
            {
              v8 = 3;
              goto LABEL_42;
            }
            if (v2 == 46)
            {
              v8 = 6;
              goto LABEL_42;
            }
          }
          else
          {
            if (!v2)
            {
              v8 = 11;
              goto LABEL_42;
            }
            if (v2 == 40)
            {
              v8 = 2;
              goto LABEL_42;
            }
          }
        }
        else if ((v2 - 67) < 2 || (v2 - 76) < 2 || v2 == 73)
        {
LABEL_28:
          v8 = 4;
          goto LABEL_42;
        }
LABEL_45:
        if ((v2 & 0x80) != 0)
        {
          if (__maskrune(v2, 0x100uLL))
          {
LABEL_47:
            v8 = 0;
            goto LABEL_42;
          }
        }
        else if ((*(_DWORD *)(v7 + 4 * v2 + 60) & 0x100) != 0)
        {
          goto LABEL_47;
        }
        if ((v2 - 48) > 9)
          goto LABEL_18;
        v8 = 1;
      }
      else
      {
        if (v2 <= 107)
        {
          switch(v2)
          {
            case 'V':
            case 'X':
              goto LABEL_28;
            case 'W':
            case 'Y':
            case 'Z':
            case '\\':
            case '^':
            case '_':
            case 'a':
            case 'b':
              goto LABEL_45;
            case '[':
              v8 = 7;
              goto LABEL_42;
            case ']':
              v8 = 8;
              goto LABEL_42;
            case 'c':
            case 'd':
              goto LABEL_41;
            default:
              if (v2 == 105)
                goto LABEL_41;
              goto LABEL_45;
          }
        }
        switch(v2)
        {
          case 'v':
          case 'x':
            goto LABEL_41;
          case 'w':
          case 'y':
          case 'z':
          case '|':
            goto LABEL_45;
          case '{':
            v8 = 9;
            break;
          case '}':
            v8 = 10;
            break;
          default:
            if ((v2 - 108) >= 2)
              goto LABEL_45;
LABEL_41:
            v8 = 5;
            break;
        }
      }
LABEL_42:
      LODWORD(v6) = state_table[12 * v6 + v8];
      if ((v6 + 2) < 3u)
      {
        v4 = -(int)v6;
        return (char)v4;
      }
      v9 = *v1++;
      v2 = v9;
    }
  }
  LOBYTE(v4) = 2;
  v5 = v2 > 0x3D || ((1 << v2) & 0x20006C0000000000) == 0;
  if (v5 && ((v2 - 126) > 0x39 || ((1 << (v2 - 126)) & 0x200000002000001) == 0))
  {
    if (v2 == 111)
      LOBYTE(v4) = 2;
    else
      LOBYTE(v4) = 0;
  }
  return (char)v4;
}

uint64_t SLmap(uint64_t a1, int a2, int a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7)
{
  __int16 v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  _QWORD *v11;
  int v12;

  *a7 = 0;
  *a6 = 0;
  *a5 = 0;
  *a4 = 0;
  if (a2 < a3)
  {
    v7 = a2;
    do
    {
      v8 = *(unsigned __int8 *)(a1 + (__int16)a2);
      if (v8 > 0x2E)
      {
        v11 = a5;
        if (v8 != 47)
        {
          v11 = a6;
          if (v8 != 151)
            goto LABEL_23;
        }
      }
      else
      {
        if (v8 != 45)
        {
          v9 = v8 != 46 || a3 - 2 <= (__int16)a2;
          if (!v9 && *(_BYTE *)((__int16)a2 + a1 + 1) == 46 && *(_BYTE *)((__int16)a2 + a1 + 2) == 46)
          {
            v10 = a2;
            do
            {
              LOWORD(a2) = v10;
              *((_DWORD *)a7 + ((unsigned __int16)(v10 - v7) >> 5)) |= 1 << ~(v10 - v7);
              ++v10;
            }
            while (*(_BYTE *)(a1 + (__int16)(a2 + 1)) == 46);
          }
          goto LABEL_23;
        }
        v11 = a4;
        if (a3 - 1 > (__int16)a2)
        {
          v11 = a4;
          if (*(_BYTE *)((__int16)a2 + a1 + 1) == 45)
          {
            v12 = a2;
            do
            {
              LOWORD(a2) = v12;
              *((_DWORD *)a6 + ((unsigned __int16)(v12 - v7) >> 5)) |= 1 << ~(v12 - v7);
              ++v12;
            }
            while (*(_BYTE *)(a1 + (__int16)(a2 + 1)) == 45);
            goto LABEL_23;
          }
        }
      }
      *((_DWORD *)v11 + ((unsigned __int16)(a2 - v7) >> 5)) |= 1 << ~(a2 - v7);
LABEL_23:
      a2 = (__int16)(a2 + 1);
    }
    while (a2 < a3);
  }
  return 0;
}

uint64_t SLInitMutex(int a1, pthread_mutex_t *a2)
{
  return 8 * (pthread_mutex_init(a2, 0) != 0);
}

uint64_t SLTermMutex(pthread_mutex_t *a1)
{
  return 8 * (pthread_mutex_destroy(a1) != 0);
}

uint64_t SLord(uint64_t a1, char *__dst, int a3, int a4, uint64_t a5)
{
  __int16 v6;
  int v7;
  uint64_t v8;
  char v9;
  __int16 v10;
  size_t v11;
  int v12;
  int v13;
  __int16 v14;
  size_t v15;
  char v16;
  uint64_t result;
  char v18;
  int v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char __src[65];
  uint64_t v26;

  v6 = 0;
  v26 = *MEMORY[0x1E0C80C00];
  *__dst = 0;
  if (a3 <= a4)
  {
    v7 = 0;
    do
    {
      v8 = *(unsigned __int8 *)(a1 + (__int16)a3);
      if ((*(_DWORD *)(a5 + 4 * v8) & 0x40000000) != 0)
        v9 = v8 + 32;
      else
        v9 = *(_BYTE *)(a1 + (__int16)a3);
      v6 = v7 + 1;
      __src[(__int16)v7] = v9;
      a3 = (__int16)(a3 + 1);
      ++v7;
    }
    while (a3 <= a4);
  }
  v10 = 0;
  __src[v6] = 0;
  do
  {
    v11 = v10;
    v12 = __src[v10];
    v13 = *(_DWORD *)(a5 + 4 * __src[v10++]);
  }
  while ((v13 & 0x8000000) != 0);
  if (!(_DWORD)v11)
    return 0;
  v14 = v6 - 1;
  v15 = v11 + 1;
  if ((_DWORD)v11 + 1 != v14)
    return 0;
  if (v12 == 116)
  {
    if (__src[v15] == 104)
    {
      v16 = 1;
LABEL_23:
      v18 = 1;
      goto LABEL_24;
    }
    return 0;
  }
  if (v12 != 110 && v12 != 114)
  {
    if (v12 == 115)
    {
      result = 0;
      if (__src[v15] == 116)
      {
        v18 = 0;
        v16 = 1;
LABEL_24:
        if ((int)v11 < 2
          || __src[(v11 - 2)] != 49
          || __src[(v11 - 1)] - 49 > 2)
        {
          v19 = __src[v11 - 1];
          switch(v19)
          {
            case '3':
              if (v12 == 114)
                v23 = v16;
              else
                v23 = 1;
              if ((v23 & 1) == 0)
                return 1;
              v21 = 100;
              v22 = 114;
              goto LABEL_47;
            case '2':
              if (v12 == 110)
                v24 = v16;
              else
                v24 = 1;
              if ((v24 & 1) == 0)
                return 1;
              v21 = 100;
              v22 = 110;
              goto LABEL_47;
            case '1':
              if (v12 == 115)
                v20 = v18;
              else
                v20 = 1;
              if ((v20 & 1) == 0)
                return 1;
              v21 = 116;
              v22 = 115;
              goto LABEL_47;
          }
        }
        if (v12 == 116)
          return 1;
        v21 = 104;
        v22 = 116;
LABEL_47:
        strncpy(__dst, __src, v11);
        __dst[v11] = v22;
        __dst[v10] = v21;
        __dst[(__int16)(v11 + 2)] = 0;
        return 1;
      }
      return result;
    }
    return 0;
  }
  result = 0;
  if (__src[v15] == 100)
  {
    v16 = 0;
    goto LABEL_23;
  }
  return result;
}

uint64_t SLpar(const char *a1, unsigned __int16 *a2, __int16 *a3, _WORD *a4, uint64_t a5)
{
  __int16 v10;
  int v11;
  const char *v12;
  uint64_t v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  const char *v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  __int16 v24;

  *a2 = 0;
  v10 = strlen(a1);
  v11 = (__int16)(v10 - 1);
  *a3 = v10 - 1;
  if (v11 >= 1)
  {
    v12 = &a1[(unsigned __int16)v11];
    if (*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v12) & 0x1000400)
    {
      do
      {
        --*a3;
        if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v12) & 0xA00000) == 0)
          *a4 |= 0x100u;
        if ((__int16)v11 <= 1)
          break;
        LOWORD(v11) = v11 - 1;
        v12 = &a1[(unsigned __int16)v11];
      }
      while ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v12) & 0x1000400) != 0);
      v14 = *a3;
      v15 = a1[v14 + 1];
      switch(v15)
      {
        case '.':
          v16 = 512;
          goto LABEL_14;
        case '-':
          if (a1[v14 + 2] != 45)
          {
            v16 = 1024;
            goto LABEL_14;
          }
          break;
        case '\'':
          v16 = 4096;
LABEL_14:
          *a4 |= v16;
          break;
      }
    }
    LOWORD(v11) = *a3;
  }
  if (!(_WORD)v11)
    return 8;
  v17 = (__int16)*a2;
  if (v17 <= (__int16)v11)
  {
    v18 = (__int16)*a2;
    v19 = &a1[v18];
    v20 = *(_DWORD *)(a5 + 4 * a1[v18]) & 0x1000400;
    v21 = *a2;
    if (v20)
    {
      while (1)
      {
        *a2 = v21 + 1;
        v22 = *(unsigned __int8 *)v19;
        if ((*(_DWORD *)(a5 + 4 * v22) & 0x400000) == 0
          && ((_DWORD)v22 != 46 || *a3 <= (__int16)v17 || a1[v18 + 1] - 48 >= 0xA))
        {
          *a4 |= 0x100u;
        }
        v17 = (__int16)(v17 + 1);
        if (v17 > *a3)
          break;
        v18 = v17;
        v19 = &a1[v17];
        v21 = *a2;
        if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)v19) & 0x1000400) == 0)
          goto LABEL_26;
      }
      v21 = *a2;
    }
    else
    {
LABEL_26:
      if (!v20)
        return 8 * (*a2 == (unsigned __int16)*a3);
    }
    if ((__int16)v21 >= 1)
    {
      if (a1[v21 - 1] == 39)
      {
        v24 = 0x2000;
      }
      else
      {
        if (a1[v21 - 1] != 45 || v21 >= 2 && a1[v21 - 2] == 45)
          return 8 * (*a2 == (unsigned __int16)*a3);
        v24 = 2048;
      }
      *a4 |= v24;
    }
  }
  return 8 * (*a2 == (unsigned __int16)*a3);
}

uint64_t SLrecap(unsigned __int8 *a1, int a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 v16;

  if (a1 && *a1)
  {
    if (a5 <= a3 || a5 == 3)
      v7 = a3;
    else
      v7 = a5;
    if (v7 >= 3)
    {
      if (a2 >= 1)
      {
        v10 = 0;
        do
        {
          if (v10 <= 0x3F && (*(_DWORD *)(a4 + 4 * ((unsigned __int16)v10 >> 5)) & (1 << ~(_BYTE)v10)) != 0)
          {
            v11 = a1[v10];
            if ((*(_DWORD *)(a6 + 4 * v11) & 0x20000000) != 0)
              LOBYTE(v11) = v11 - 32;
            a1[v10] = v11;
          }
          ++v10;
        }
        while ((unsigned __int16)a2 != v10);
      }
    }
    else if (v7 == 1)
    {
      if (a2 >= 1)
      {
        v13 = (unsigned __int16)a2;
        while (1)
        {
          v14 = *a1;
          v15 = *(_DWORD *)(a6 + 4 * v14);
          if ((v15 & 0x60000040) != 0)
            break;
          ++a1;
          if (!--v13)
            return 0;
        }
        v16 = v14 - 32;
        if ((v15 & 0x20000000) == 0)
          v16 = *a1;
        *a1 = v16;
      }
    }
    else if (v7 == 2 && a2 >= 1)
    {
      v8 = (unsigned __int16)a2;
      do
      {
        v9 = *a1;
        if ((*(_DWORD *)(a6 + 4 * v9) & 0x20000000) != 0)
          LOBYTE(v9) = v9 - 32;
        *a1++ = v9;
        --v8;
      }
      while (v8);
    }
  }
  return 0;
}

uint64_t SLwldcmp(uint64_t a1, int a2, unsigned __int8 *a3, int a4)
{
  int v7;
  unint64_t v9;
  unsigned __int16 v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  int v16;
  __int16 v18;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;

  v7 = *a3;
  if (v7 != 42 && a4 >= 1)
  {
    v11 = 0;
    while (v7 == 63 || v7 == *(unsigned __int8 *)(a1 + v11))
    {
      v9 = v11 + 1;
      v7 = a3[v11 + 1];
      v12 = v7 == 42 || v9 >= (unsigned __int16)a4;
      ++v11;
      if (v12)
      {
        v10 = v9;
        goto LABEL_15;
      }
    }
    return 0;
  }
  v9 = 0;
  v10 = 0;
LABEL_15:
  if (v10 == (unsigned __int16)a4 && v10 == (unsigned __int16)a2)
    return 1;
  v14 = a4 - 1;
  v15 = a3[v14];
  v16 = 1;
  if (v15 == 42 || a4 < 1)
  {
LABEL_29:
    v20 = (__int16)v10;
    v21 = v16 + (__int16)v10;
    if (v21 <= a4 + 1 && v21 <= a2 + 1)
    {
      if (v21 == a4)
        return 1;
      if (a2 - v16 >= (__int16)v10)
      {
        v28 = a2 - v16;
        v29 = a3[(__int16)v10 + 1];
        v27 = (int)v14 - 1;
        v31 = (uint64_t)&a3[v9 + 1];
        v30 = (__int16)(v14 + ~v10);
        while (1)
        {
          if (*(unsigned __int8 *)(a1 + (__int16)v10) == v29)
          {
            v22 = a2 - v20;
            if (a2 - v20 >= v16)
              break;
          }
LABEL_41:
          result = 0;
          v20 = (__int16)++v10;
          if (v28 < (__int16)v10)
            return result;
        }
        v23 = a3[v27];
        v24 = v16;
        v25 = v16;
        while (1)
        {
          v26 = a2 - (uint64_t)v24;
          if (*(unsigned __int8 *)(a1 + v26) == v23)
          {
            if (SLwldcmp(a1 + (__int16)v10, (__int16)(v26 - v10 + 1), v31, v30))
              return 1;
          }
          v24 = (__int16)++v25;
          if (v22 < (__int16)v25)
            goto LABEL_41;
        }
      }
    }
  }
  else
  {
    while (v15 == 63 || a2 >= (__int16)v16 && v15 == *(unsigned __int8 *)(a1 - v16 + a2))
    {
      v18 = v16 + 1;
      v16 = (__int16)(v16 + 1);
      v14 = a4 - (uint64_t)v18;
      v15 = a3[v14];
      if (v15 == 42 || v16 > a4)
        goto LABEL_29;
    }
  }
  return 0;
}

BOOL SLWildCmp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned __int8 *v13;
  int v14;
  BOOL v17;
  uint64_t v18;
  char v20;
  uint64_t v21;

  v4 = *a1;
  if (*a1)
  {
    v5 = a1;
    while (1)
    {
      v6 = *a2;
      if (!*a2)
        break;
      if ((_DWORD)a3 == 2)
      {
        if ((v6 + 127) < 0x1Fu)
        {
          if (*a2 != 129)
            goto LABEL_15;
          v9 = a2[1];
          v7 = 2;
          if (v9 != 72)
          {
            if (v9 == 150)
              goto LABEL_39;
LABEL_15:
            if (*a2 != v4)
              return 0;
            if ((v4 + 127) < 0x1Fu)
            {
              if (a2[1] != v5[1])
                return 0;
              LOBYTE(v10) = v4 & 0xF0;
              goto LABEL_22;
            }
            if ((v4 & 0xF0) == 0xE0)
            {
              if (a2[1] != v5[1])
                return 0;
              LOBYTE(v10) = -32;
LABEL_22:
              v7 = 2;
            }
            else
            {
              LOBYTE(v10) = v4 & 0xF0;
              v7 = 1;
            }
            v11 = (v4 + 127);
            v10 = v10;
LABEL_28:
            if (v10 != 224 && v11 >= 0x1F)
              v8 = 1;
            else
              v8 = 2;
            goto LABEL_34;
          }
LABEL_25:
          v11 = (v4 + 127);
          v10 = v4 & 0xF0;
          goto LABEL_28;
        }
        if ((v6 & 0xF0) == 0xE0)
          goto LABEL_15;
        if (*a2 == 63)
        {
          v7 = 1;
          goto LABEL_25;
        }
        if (*a2 != 42 || (v6 & 0xF0) == 0xE0)
          goto LABEL_15;
        v7 = 1;
LABEL_39:
        v13 = &a2[v7];
        v14 = a2[v7];
        if (a2[v7])
        {
          v17 = (v14 + 96) < 0xE1u && (v14 & 0xF0) != 224 || (_DWORD)a3 != 2;
          while (1)
          {
            if (v14 == v4)
            {
              if (!v17 && v5[1] != v13[1])
              {
LABEL_55:
                if ((v4 & 0xF0) != 0xE0 && (v4 + 127) >= 0x1Fu)
                  v18 = 1;
                else
                  v18 = 2;
                goto LABEL_61;
              }
              if (SLWildCmp(v5, v13, a3))
                return 1;
            }
            if ((_DWORD)a3 == 2)
              goto LABEL_55;
            v18 = 1;
LABEL_61:
            v5 += v18;
            v4 = *v5;
            if (!*v5)
              return 0;
          }
        }
        return 1;
      }
      if (*a2 != 63)
      {
        v7 = 1;
        if (*a2 == 42)
          goto LABEL_39;
        if (*a2 != v4)
          return 0;
      }
      v8 = 1;
      v7 = 1;
LABEL_34:
      a2 += v7;
      v5 += v8;
      v4 = *v5;
      if (!*v5)
        goto LABEL_63;
    }
    v20 = 0;
  }
  else
  {
LABEL_63:
    v6 = *a2;
    v20 = 1;
  }
  if (v6)
  {
    while ((_DWORD)a3 == 2)
    {
      if ((v6 + 127) >= 0x1Fu)
      {
        if (v6 != 42 || (v6 & 0xF0) == 0xE0)
          return 0;
        goto LABEL_75;
      }
      if (v6 != 129 || a2[1] != 150)
        return 0;
      v21 = 2;
LABEL_76:
      a2 += v21;
      v6 = *a2;
      if (!*a2)
        return (v20 & 1) != 0;
    }
    if (v6 != 42)
      return 0;
LABEL_75:
    v21 = 1;
    goto LABEL_76;
  }
  return (v20 & 1) != 0;
}

uint64_t SLwldfix(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  while (1)
  {
    if ((__int16)a2 >= 1)
    {
      v2 = 0;
      while (1)
      {
        if (*(_BYTE *)(a1 + v2) == 42)
        {
          v3 = *(unsigned __int8 *)(a1 + v2 + 1);
          if (v3 == 42)
          {
            *(_BYTE *)(a1 + v2) = 1;
          }
          else
          {
            if (v3 != 63)
            {
              v4 = v2;
              goto LABEL_12;
            }
            *(_BYTE *)(a1 + v2) = 63;
            *(_BYTE *)(a1 + v2 + 1) = 42;
          }
        }
        if (a2 == ++v2)
          return 1;
      }
    }
    v4 = 0;
    v2 = 0;
LABEL_12:
    if ((unsigned __int16)v4 == a2)
      return 1;
    LOWORD(v5) = a2 - 1;
    if ((__int16)(a2 - 1) > v4)
    {
      v5 = (__int16)(a2 - 1);
      do
      {
        if (*(_BYTE *)(a1 + v5) == 42)
        {
          v6 = (__int16)(a2 - 2);
          v7 = *(unsigned __int8 *)(a1 + v6);
          if (v7 == 42)
          {
            *(_BYTE *)(a1 + v5) = 1;
          }
          else
          {
            if (v7 != 63)
              goto LABEL_22;
            *(_BYTE *)(a1 + v5) = 63;
            *(_BYTE *)(a1 + v6) = 42;
          }
        }
        a2 = v5--;
      }
      while (v5 > v4);
      LOWORD(v5) = v4;
    }
LABEL_22:
    if ((unsigned __int16)v4 == (unsigned __int16)v5)
      return 1;
    a1 += v2 + 1;
    a2 = v5 + ~v4;
  }
}

uint64_t SLwldpro(const char *a1, _WORD *a2, _WORD *a3, __int16 a4)
{
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  char __dst[127];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = strlen(a1);
  v9 = v8;
  *a3 = 0;
  *a2 = 0;
  v10 = v8;
  if (v8)
  {
    v11 = v8;
    v12 = a1;
    do
    {
      v13 = *(unsigned __int8 *)v12++;
      v14 = a4;
      if (v13 != 42)
      {
        ++*a2;
        v14 = *a3 + 1;
      }
      *a3 = v14;
      --v11;
    }
    while (v11);
  }
  strncpy(__dst, a1, 0x7EuLL);
  __dst[126] = 0;
  v15 = strlen(__dst);
  SLwldfix((uint64_t)__dst, v15);
  v16 = 0;
  v17 = 0;
  do
  {
    v18 = __dst[v16];
    if (v18 >= 2)
    {
      v19 = (unsigned __int16)v17++;
      a1[v19] = v18;
    }
    ++v16;
  }
  while (v18);
  if (v10 >= 0x7F)
  {
    v20 = (char *)(a1 + 126);
    v21 = v9 - 126;
    v22 = v17;
    do
    {
      v23 = *v20++;
      LOWORD(v17) = v22 + 1;
      a1[(unsigned __int16)v22++] = v23;
      --v21;
    }
    while (v21);
  }
  a1[(unsigned __int16)v17] = 0;
  return 1;
}

uint64_t SLWildPro(const char *a1, _WORD *a2, _WORD *a3, __int16 a4, int a5)
{
  unsigned __int16 v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  __int16 v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  unsigned __int8 v19;
  char *v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  unsigned __int16 v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int v34;
  char v35;
  char __dst[127];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = strlen(a1);
  *a3 = 0;
  *a2 = 0;
  v11 = *a1;
  if (*a1)
  {
    v12 = (unsigned __int8 *)a1;
    do
    {
      if (a5 != 2)
      {
        if (v11 == 42)
        {
          *a3 = a4;
        }
        else
        {
          ++*a2;
          ++*a3;
        }
        v16 = 1;
        goto LABEL_30;
      }
      if ((v11 + 127) >= 0x1Fu)
      {
        if ((v11 & 0xF0) == 0xE0 || (v14 = v11, v13 = a4, v14 != 42))
        {
LABEL_12:
          ++*a2;
          v15 = *v12;
          if ((v15 + 127) >= 0x1Fu)
          {
            if ((v15 & 0xF0) == 0xE0 || v15 != 63)
              goto LABEL_19;
          }
          else
          {
            if (v15 == 129)
              goto LABEL_22;
LABEL_19:
            if ((v15 + 127) >= 0x1Fu && (v15 & 0xF0) != 0xE0)
            {
              v17 = 1;
LABEL_23:
              v13 = *a3 + v17;
              goto LABEL_24;
            }
          }
LABEL_22:
          v17 = 2;
          goto LABEL_23;
        }
      }
      else
      {
        if (v11 != 129)
          goto LABEL_12;
        v13 = a4;
        if (v12[1] != 150)
          goto LABEL_12;
      }
LABEL_24:
      *a3 = v13;
      if ((*v12 & 0xF0) != 0xE0 && (*v12 + 127) >= 0x1Fu)
        v16 = 1;
      else
        v16 = 2;
LABEL_30:
      v12 += v16;
      v11 = *v12;
    }
    while (*v12);
  }
  strncpy(__dst, a1, 0x7EuLL);
  __dst[126] = 0;
  v19 = __dst[0];
  if (__dst[0])
  {
    v20 = __dst;
    do
    {
      v21 = v20[1];
      if (!v20[1])
        break;
      if (a5 == 2)
      {
        if ((v19 + 127) >= 0x1Fu)
        {
          if ((v19 & 0xF0) == 0xE0 || v19 != 42)
          {
LABEL_65:
            v25 = v19;
            goto LABEL_66;
          }
          v22 = v20[1];
          v23 = 1;
        }
        else
        {
          if (v19 != 129 || v21 != 150)
            goto LABEL_65;
          v22 = v20[2];
          v23 = 2;
        }
        if ((v22 + 127) >= 0x1Fu)
        {
          if ((v22 & 0xF0) != 0xE0 && v22 == 63)
            goto LABEL_56;
          if ((v22 & 0xF0) == 0xE0 || v22 != 42)
            goto LABEL_65;
          if (v19 > 0x80u)
            goto LABEL_64;
        }
        else
        {
          if (v22 != 129)
            goto LABEL_65;
          v24 = v20[v23 + 1];
          if (v24 == 72)
          {
LABEL_56:
            if (v19 > 0x80u)
            {
              v25 = v20[2];
              *v20 = v25;
              if ((v25 + 127) < 0x1Fu || (v25 & 0xF0) == 0xE0)
                v20[1] = v20[3];
              v20[2] = v19;
              v20[3] = v21;
              goto LABEL_66;
            }
            if ((v21 + 127) < 0x1Fu || (v21 & 0xF0) == 0xE0)
            {
              *v20 = v21;
              v20[1] = v19;
              v25 = v21;
              goto LABEL_66;
            }
LABEL_42:
            *v20 = v21;
            v20[1] = v19;
            goto LABEL_52;
          }
          if (v24 != 150)
            goto LABEL_65;
          if (v19 >= 0x81u)
          {
LABEL_64:
            *(_WORD *)v20 = 257;
            v25 = 1;
LABEL_66:
            if ((v25 & 0xF0) != 0xE0 && (v25 + 127) >= 0x1Fu)
              v26 = 1;
            else
              v26 = 2;
            goto LABEL_72;
          }
        }
      }
      else
      {
        if (v19 != 42)
          goto LABEL_53;
        if (v21 != 42)
        {
          if (v21 != 63)
            goto LABEL_53;
          goto LABEL_42;
        }
      }
      LOBYTE(v21) = 1;
      *v20 = 1;
LABEL_52:
      v25 = v21;
      if (a5 == 2)
        goto LABEL_66;
LABEL_53:
      v26 = 1;
LABEL_72:
      v20 += v26;
      v19 = *v20;
    }
    while (*v20);
  }
  v28 = 0;
  v29 = 0;
  do
  {
    v30 = __dst[v28];
    if (v30 >= 2)
    {
      v31 = (unsigned __int16)v29++;
      a1[v31] = v30;
    }
    ++v28;
  }
  while (v30);
  if (v10 >= 0x7FuLL)
  {
    v32 = (char *)(a1 + 126);
    v33 = v10 - 126;
    v34 = v29;
    do
    {
      v35 = *v32++;
      LOWORD(v29) = v34 + 1;
      a1[(unsigned __int16)v34++] = v35;
      --v33;
    }
    while (v33);
  }
  a1[(unsigned __int16)v29] = 0;
  return 1;
}

uint64_t SLparcmp(uint64_t a1, _BYTE *a2, _WORD *a3, int a4, uint64_t a5)
{
  unint64_t v5;
  int v6;
  uint64_t result;
  unsigned __int8 *v8;
  int v9;
  __int16 v10;
  __int16 i;
  int v12;
  int v13;
  int v14;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  v5 = 0;
  *a3 = 0;
  *a2 = 0;
  while (1)
  {
    v6 = *(unsigned __int8 *)(a1 + v5);
    if ((*(_DWORD *)(a5 + 4 * *(unsigned __int8 *)(a1 + v5)) & 0x400) == 0 || !a4 && (v6 == 42 || v6 == 63))
      break;
    ++v5;
    if (!v6)
      return 0;
  }
  v8 = (unsigned __int8 *)(a1 + v5);
  if (!v5)
    goto LABEL_21;
  v9 = *(v8 - 1);
  if (v9 == 39)
  {
    v10 = 0x2000;
    if (v5 != 1)
    {
      v10 = *(_BYTE *)(a1 + v5 - 2) == 45 ? 2048 : 0x2000;
      if (*(_BYTE *)(a1 + v5 - 2) == 45)
        --v8;
    }
  }
  else
  {
    if (v9 != 45 || v5 >= 2 && *(_BYTE *)(a1 + v5 - 2) == 45)
      goto LABEL_21;
    v10 = 2048;
  }
  *a3 |= v10;
LABEL_21:
  for (i = 0; ; ++i)
  {
    v12 = *v8;
    if (v12 != 10 && v12 != 32)
      break;
    a2[i] = 32;
    do
    {
      v14 = *++v8;
      v13 = v14;
    }
    while (v14 == 32 || v13 == 10);
LABEL_34:
    ;
  }
  if (*v8)
  {
    a2[i] = v12;
    if (*v8 == 45 && v8[1] == 10)
      ++v8;
    ++v8;
    goto LABEL_34;
  }
  v16 = &a2[i];
  *v16 = 0;
  v17 = *(v16 - 1);
  if ((*(_DWORD *)(a5 + 4 * v17) & 0x400) == 0)
    goto LABEL_49;
  do
  {
    if (!a4 && (v17 == 42 || v17 == 63))
      break;
    v16 = &a2[--i];
    v17 = *(v16 - 1);
  }
  while ((*(_DWORD *)(a5 + 4 * v17) & 0x400) != 0);
  v18 = *v16;
  if (v18 == 39)
  {
    v19 = 4096;
LABEL_48:
    *a3 |= v19;
    goto LABEL_49;
  }
  if (v18 == 45)
  {
    if (v16[1] == 45)
      goto LABEL_49;
    v19 = 1024;
    goto LABEL_48;
  }
  if (v18 == 46 && v16[1] != 46)
  {
    v19 = 512;
    goto LABEL_48;
  }
LABEL_49:
  result = i;
  *v16 = 0;
  return result;
}

uint64_t SLtokenz(unsigned __int8 **a1, _BYTE *a2, __int16 *a3, int a4, uint64_t a5)
{
  int v5;
  unsigned __int8 *v6;
  int v7;
  __int16 v8;
  int v9;
  unsigned int v10;
  int v11;
  __int16 v12;
  unsigned __int8 *i;
  unsigned int v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  __int16 v24;

  LOWORD(v5) = 0;
  v6 = *a1;
  *a2 = 0;
  if ((*(_DWORD *)(a5 + 4 * *v6) & 0x400) != 0)
    return (__int16)v5;
  *a3 = 0;
  v7 = *(v6 - 1);
  if (v7 == 39)
  {
    v8 = 0x2000;
  }
  else
  {
    if (v7 != 45 || *(v6 - 2) == 45)
      goto LABEL_8;
    v8 = 2048;
  }
  *a3 = v8;
LABEL_8:
  v5 = 0;
  v9 = 0;
  v10 = *v6;
  v11 = *(_DWORD *)(a5 + 4 * *v6);
  v12 = 1;
  do
  {
    for (i = v6; (v11 & 0x400) == 0; v11 = *(_DWORD *)(a5 + 4 * v14))
    {
      a2[(__int16)v5] = v10;
      if ((v11 & 0x60000040) != 0)
        v12 = 0;
      v14 = *++i;
      v10 = v14;
      ++v5;
    }
    v6 = i + 1;
    v15 = i[1];
    if (v10 == 45 && v15 == 10)
    {
      if ((*(_DWORD *)(a5 + 4 * i[2]) & 0x400) == 0)
      {
        *a3 |= ++v9;
        v16 = v5++;
        a2[v16] = *i;
        v6 = i + 2;
        goto LABEL_44;
      }
      v15 = 10;
    }
    if ((*(_DWORD *)(a5 + 4 * v15) & 0x400) == 0)
    {
      if (v10 <= 0x2E && ((1 << v10) & 0x608000000000) != 0)
      {
        if (v10 == 45)
        {
          *a3 |= 0x8000u;
          ++v9;
          LOBYTE(v10) = *i;
        }
LABEL_33:
        v18 = v5++;
        a2[v18] = v10;
        goto LABEL_44;
      }
      if (a4 == 7 && v10 == 58)
        goto LABEL_33;
      if (v10 == 47)
      {
        v19 = v5++;
        a2[v19] = 47;
        *a3 |= 0x4000u;
        goto LABEL_44;
      }
LABEL_36:
      if (v10 == 44)
      {
        if (v12)
        {
          v20 = 1;
          do
          {
            v21 = v20;
            v22 = *(_DWORD *)(a5 + 4 * i[(__int16)v20++]);
          }
          while ((v22 & 0x8000400) == 0x8000000);
          if (v21 >= 2 && (v22 & 0x400) != 0)
          {
            v23 = v5++;
            a2[v23] = 44;
            goto LABEL_44;
          }
        }
      }
LABEL_43:
      v6 = i;
      goto LABEL_44;
    }
    if (v10 == 47)
      goto LABEL_43;
    if (v10 != 46)
      goto LABEL_36;
    if (v15 != 45 && v15 != 39 || (*(_DWORD *)(a5 + 4 * i[2]) & 0x400) != 0)
      goto LABEL_43;
    if (v15 == 45)
      ++v9;
    v17 = v5 + 1;
    a2[(__int16)v5] = 46;
    v5 += 2;
    a2[v17] = *v6;
    v6 = i + 2;
LABEL_44:
    v10 = *v6;
    v11 = *(_DWORD *)(a5 + 4 * *v6);
  }
  while ((v11 & 0x400) == 0);
  if (v10 == 39)
  {
    v24 = 4096;
    goto LABEL_53;
  }
  if (v10 == 45)
  {
    if (v6[1] == 45)
      goto LABEL_54;
    v24 = 1024;
LABEL_53:
    *a3 |= v24;
    goto LABEL_54;
  }
  if (v10 == 46 && v6[1] != 46)
  {
    v24 = 512;
    goto LABEL_53;
  }
LABEL_54:
  a2[(__int16)v5] = 0;
  *a1 = v6;
  if (v12)
    v5 = -v5;
  return (__int16)v5;
}

uint64_t SFaccent(unsigned __int8 *a1, int a2, uint64_t a3, __int16 *a4)
{
  BOOL v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  __int16 v26;
  _OWORD *v27;
  __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  BOOL v62;
  int v63;
  __int16 v64;
  __int16 v65;
  unsigned __int16 v66;
  uint64_t i;
  int v68;
  uint64_t v69;
  int v70;
  unsigned __int8 *v71;
  __int16 v72;
  unsigned __int8 *v73;
  int v74;
  unsigned __int8 *v75;
  __int16 v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  __int16 v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  __int16 v82;
  unsigned __int8 *v83;
  unsigned __int8 *v84;
  __int16 v85;
  unsigned __int8 *v86;
  uint64_t v87;
  __int16 *v88;
  unsigned int v89;
  int v90;
  int v91;
  unsigned int v92;
  int v93;
  __int16 v94;
  uint64_t v96;
  BOOL v97;
  unsigned __int8 *v98;
  _DWORD v100[2];
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  __int16 v106;
  _OWORD v107[16];
  _OWORD v108[16];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a3 + 55) == 8 && (a4[1745] & 0x40) != 0 && *a4 == 3;
  v106 = 0;
  v7 = *(_QWORD *)(a3 + 56);
  v8 = *(unsigned __int8 **)(*((_QWORD *)a4 + 4) + 24);
  v9 = *(unsigned __int8 *)(a3 + 136);
  a4[1066] = 0;
  if (a2 < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = (unsigned __int16)a2;
    v11 = (unsigned __int16)a2;
    v12 = v8;
    do
    {
      v14 = *a1++;
      v13 = v14;
      v15 = *(_DWORD *)(v7 + 4 * v14);
      if ((v15 & 0x4064000) != 0 && (!v6 || (*(_QWORD *)&v15 & 0x40000) == 0))
      {
        if (*(_BYTE *)(a3 + 55) == 15)
        {
          if ((_BYTE)v13 == 1)
          {
            LOBYTE(v13) = 1;
          }
          else if ((v15 & 0x4020000) != 0)
          {
            LOBYTE(v13) = v13 - 1;
          }
        }
        else if ((_BYTE)v13 != 0xE0 && Lat_1_acc_0[v13 - 224])
        {
          LOBYTE(v13) = Lat_1_acc_0[v13 - 224];
        }
      }
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  v16 = 0;
  v8[v10] = 0;
  memset(v108, 0, 224);
  memset(v107, 0, sizeof(v107));
  *((_BYTE *)v107 + v8[1]) = 1;
  memset(&v108[14], 0, 32);
  *((_BYTE *)v108 + *v8) = 1;
  if (!*(_WORD *)(a3 + 104) || a2 < 1)
    return v16;
  v97 = v6;
  v96 = v9;
  v98 = v8;
  v17 = 0;
  v18 = 0;
  v19 = (unsigned __int16)a2;
  LOWORD(v20) = a4[1085];
  do
  {
    v21 = 0;
    v22 = &v98[v17];
    do
    {
      if ((int)SLstrncmp(*(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)((v21 + (__int16)v20) >> 1)), v22, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)((v21 + (__int16)v20) >> 1))) < 0)v21 = (v21 + (__int16)v20) >> 1;
      else
        LOWORD(v20) = (v21 + (__int16)v20) >> 1;
    }
    while ((__int16)v20 - v21 > 1);
    do
    {
      v23 = (__int16)v20;
      if (*(_BYTE *)(*(_QWORD *)(a3 + 176) + (__int16)v20) == 1
        && *(_BYTE *)(*(_QWORD *)(a3 + 168) + (__int16)v20) == 1
        && (v24 = **(unsigned __int8 **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)v20), (_DWORD)v24 == *v22)
        && (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(_QWORD *)(a3 + 152) + 8 * (__int16)v20)) & 0x4064000) != (unint64_t)(*(_DWORD *)(v7 + 4 * v24) & 0x4064000)
        && (*(_DWORD *)&v97 & (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(_QWORD *)(a3 + 152) + 8 * (__int16)v20)) >> 18) & 1) == 0)
      {
        v25 = a4 + 1086;
        LOBYTE(v25[v18]) = a2 - v17;
        v26 = v18 * 2 + 1;
        ++v18;
        *((_BYTE *)v25 + v26) = v20;
        if ((_WORD)v17)
        {
          if ((unsigned __int16)v17 != 1)
            goto LABEL_35;
          v27 = v107;
        }
        else
        {
          v27 = v108;
        }
        *((_BYTE *)v27 + **(unsigned __int8 **)(*(_QWORD *)(a3 + 152) + 8 * (__int16)v20)) = 1;
      }
      else
      {
        v20 = a4[1085];
        if ((int)v23 >= v20 || **(unsigned __int8 **)(*(_QWORD *)(a3 + 160) + 8 * v23) > *v22)
          goto LABEL_42;
      }
LABEL_35:
      v20 = (__int16)(v23 + 1);
    }
    while (v20 < a4[1085]);
    LOWORD(v20) = a4[1085];
LABEL_42:
    ++v17;
  }
  while (v17 != v19);
  if (v18 * 2)
  {
    v28 = a4 + 1086;
    LOBYTE(v28[v18]) = -1;
    *((_BYTE *)v28 + (__int16)(v18 * 2 + 1)) = -1;
    v105 = 0;
    v29 = *(_QWORD *)(a3 + 1184);
    v30 = (unsigned __int16)a4[1068];
    v31 = (unsigned __int16)a4[1067];
    v32 = (unsigned __int8 *)(v31 + v30 + v29);
    v33 = *v32;
    v34 = (unsigned __int8 *)(v29 + v30);
    v35 = *v34;
    v36 = v32[1];
    v37 = v34[1];
    v38 = (unsigned __int16)a4[1069];
    v39 = *(unsigned __int8 *)(v29 + v38);
    v40 = *(unsigned __int8 *)(v29 + v38 + v31);
    v101 = *(_BYTE *)(v29 + v38);
    v102 = v40;
    if (v31 >= 2)
    {
      v41 = 0;
      v42 = 0;
      v43 = (v36 | (v37 << 8)) - 1;
      v44 = (v33 | (v35 << 8)) - 1;
      LODWORD(v45) = 1;
      do
      {
        v46 = *(_QWORD *)(a3 + 1184);
        if ((unsigned __int16)v44 >= (unsigned __int16)v43)
        {
          v47 = (unsigned __int16)a4[1069];
          v48 = v47 + v45;
          v49 = (v45 + v31);
          v45 = (v45 + 1);
          v39 = *(unsigned __int8 *)(v46 + v48);
          v40 = *(unsigned __int8 *)(v46 + v49 + v47);
          v101 = v39;
          v50 = (unsigned __int16)a4[1068];
          v51 = *(unsigned __int8 *)(v46 + (v31 + v45) + v50);
          LODWORD(v50) = *(unsigned __int8 *)(v46 + v50 + v45);
          v102 = v40;
          v52 = v51 | ((_DWORD)v50 << 8);
          v44 = v43;
          v43 = v52 - 1;
        }
        v53 = v44 + 1;
        v54 = *(unsigned __int8 *)(v46 + (unsigned __int16)(v44 + 1) - 1);
        if (v54 == 255)
        {
          v44 += 3;
          v56 = (unsigned __int16)v44 - 2;
          v57 = (unsigned __int16)v44 - 1;
        }
        else
        {
          v55 = (unsigned __int16)a4[1070] + v54;
          v56 = v55 - 1;
          v57 = (v55 + 255);
          v44 = v53;
        }
        v58 = *(unsigned __int8 *)(v46 + v57);
        v59 = *(unsigned __int8 *)(v46 + v56);
        if (v59)
          v41 = v59;
        v103 = v41;
        if (v58)
          v42 = v58;
        v104 = v42;
        v62 = v42 == 32 && v41 == 32 && v40 != 32;
        if (*((_BYTE *)v108 + v39) && *((_BYTE *)v107 + v40))
        {
          if (v62)
            goto LABEL_82;
          v63 = *((unsigned __int8 *)a4 + 2172);
          if (v63 == 255)
            goto LABEL_80;
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = a2 - v63;
            if ((v66 & 0xFFFE) == 2
              && *(&v101 + v66) == **(_BYTE **)(*(_QWORD *)(a3 + 152)
                                              + 8 * *((unsigned __int8 *)a4 + ((v65 * 2) | 1) + 2172)))
            {
              ++v64;
            }
            v63 = LOBYTE(a4[++v65 + 1086]);
          }
          while (v63 != 255);
          if (!v64)
          {
LABEL_80:
            if (v42 != 32 && v42 != v98[3])
              continue;
          }
          else if (v42 == 32 || v64 != 1 || v42 == v98[3])
          {
LABEL_82:
            if (a4[1066] > 499)
              break;
            for (i = 0; i != 4; ++i)
              *((_BYTE *)&a4[2 * a4[1066] + 64] + i) = *(&v101 + i);
            ++a4[1066];
            LODWORD(v31) = (unsigned __int16)a4[1067];
            continue;
          }
          if (v41 == v98[2])
            goto LABEL_82;
        }
        else
        {
          v44 = v43;
        }
      }
      while (v45 < v31);
    }
    v68 = *a4;
    if (v68 <= 99)
    {
      *a4 = 101;
      a4[1746] |= 0x200u;
      v69 = *(_QWORD *)(a3 + 128);
      v70 = 255;
      do
      {
        *((_BYTE *)a4 + 2156) = ++v70;
        v71 = (unsigned __int8 *)(v69 + (char)v70);
        v72 = *v71;
        v73 = &v71[v96];
        a4[1076] = v72;
        v74 = *v73;
        a4[1077] = v74;
        v75 = &v73[v96];
        v76 = *v75;
        v77 = &v75[v96];
        a4[1072] = v76;
        a4[1073] = *v77;
        v78 = &v77[v96];
        v79 = *v78;
        v80 = &v78[v96];
        a4[1074] = v79;
        a4[1075] = *v80;
        v81 = &v80[v96];
        v82 = *v81;
        v83 = &v81[v96];
        a4[1071] = v82;
        a4[1081] = *v83;
        v84 = &v83[v96];
        v85 = *v84;
        v86 = &v84[v96];
        a4[1082] = v85;
        a4[1083] = *v86;
        a4[1084] = v86[v96];
      }
      while (v74 != 4);
    }
    *((_QWORD *)a4 + 15) = a4 + 64;
    if (a4[1066] >= 1)
    {
      v87 = 0;
      do
      {
        v88 = &a4[2 * v87];
        if ((int)SLstrncmp(*((_BYTE **)a4 + 15), (unsigned __int8 *)v88 + 128, 4) <= 0)
        {
          *((_QWORD *)a4 + 15) = v88 + 64;
          v100[0] = *((_DWORD *)v88 + 32);
          v89 = *(unsigned __int8 *)(a3 + 54);
          if (v89 >= 5)
          {
            v90 = 4;
            do
              *((_BYTE *)v100 + (__int16)v90++) = 0;
            while ((int)v89 > (__int16)v90);
          }
          v91 = SFbisrch((uint64_t)v100, 0, v89 - 1, &v106, a3);
          v92 = *(unsigned __int8 *)(a3 + 54);
          if (v92 >= 5)
          {
            v93 = 4;
            do
              *((_BYTE *)v100 + (__int16)v93++) = -1;
            while ((int)v92 > (__int16)v93);
          }
          v94 = SFbisrch((uint64_t)v100, 0, v92 - 1, &v106, a3);
          v106 += v94 - v91;
          if (*((_BYTE *)a4 + 3202) == 1)
            PDdecod2(v98, a2, v91, v106, a3, (unsigned __int16 *)a4);
          else
            SFdecode(v98, a2, v91, v106, (_QWORD *)a3, (unsigned __int16 *)a4);
        }
        ++v87;
      }
      while (v87 < a4[1066]);
    }
    *a4 = v68;
    if (v68 == 3)
      a4[1746] &= ~0x200u;
    return a4[20];
  }
  else
  {
    return 0;
  }
}

uint64_t SFadd(char *a1, int a2, __int16 *a3, __int16 *a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int16 v11;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v8 = *a3;
  if (v8 >= a5)
    return 8;
  v11 = *a4;
  if (a6 <= (__int16)(*a4 + a2))
    return 8;
  if (v8 < 1)
  {
    v19 = *a3;
LABEL_13:
    *a3 = v8 + 1;
    *(_WORD *)(a8 + 2 * v19) = v11;
    if (a2 >= 1)
    {
      v21 = (unsigned __int16)a2;
      do
      {
        v22 = *a1++;
        v23 = *a4;
        *a4 = v23 + 1;
        *(_BYTE *)(a7 + v23) = v22;
        --v21;
      }
      while (v21);
    }
    v24 = *a4;
    *a4 = v24 + 1;
    *(_BYTE *)(a7 + v24) = 0;
    return 10;
  }
  else
  {
    v16 = 0;
    while (1)
    {
      v17 = (__int16)strlen((const char *)(a7 + *(__int16 *)(a8 + 2 * v16)));
      v18 = v17 <= a2 ? a2 : v17;
      if (!SLstrncmp(a1, (unsigned __int8 *)(a7 + *(__int16 *)(a8 + 2 * v16)), v18))
        return 11;
      ++v16;
      v19 = *a3;
      if (v16 >= v19)
      {
        LOWORD(v8) = *a3;
        v11 = *a4;
        goto LABEL_13;
      }
    }
  }
}

uint64_t SFadd1(char *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v8;
  int v9;
  int v10;
  char *v12;
  int v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  _BYTE *v17;
  int v18;
  char v19;

  LODWORD(v4) = *(__int16 *)(a3 + 40);
  if ((int)v4 >= *(__int16 *)(a3 + 42)
    || *(unsigned __int16 *)(a3 + 56) <= (unsigned __int16)(*(_WORD *)(a3 + 44) + a2))
  {
    return 8;
  }
  if (a4 == 2)
  {
    if ((int)v4 >= 1)
    {
      v12 = (char *)(*(_QWORD *)(a3 + 48) + *(__int16 *)(*(_QWORD *)(a3 + 64) + 2 * (unsigned __int16)(v4 - 1)));
      v13 = (__int16)strlen(v12);
      if (v13 <= a2)
        v14 = a2;
      else
        v14 = v13;
      if (!SLstrncmp(a1, (unsigned __int8 *)v12, v14))
        return 11;
      LOWORD(v4) = *(_WORD *)(a3 + 40);
    }
  }
  else if (a4 == 1 && (int)v4 >= 1)
  {
    v8 = 0;
    do
    {
      v9 = (__int16)strlen((const char *)(*(_QWORD *)(a3 + 48) + *(__int16 *)(*(_QWORD *)(a3 + 64) + 2 * v8)));
      v10 = v9 <= a2 ? a2 : v9;
      if (!SLstrncmp(a1, (unsigned __int8 *)(*(_QWORD *)(a3 + 48) + *(__int16 *)(*(_QWORD *)(a3 + 64) + 2 * v8)), v10))return 11;
      ++v8;
      v4 = *(__int16 *)(a3 + 40);
    }
    while (v8 < v4);
  }
  v15 = *(_WORD *)(a3 + 44);
  v16 = *(_QWORD *)(a3 + 64);
  *(_WORD *)(a3 + 40) = v4 + 1;
  *(_WORD *)(v16 + 2 * (__int16)v4) = v15;
  v17 = (_BYTE *)(*(_QWORD *)(a3 + 48) + *(__int16 *)(a3 + 44));
  if (a2 >= 1)
  {
    LOWORD(v18) = 0;
    do
    {
      v19 = *a1++;
      *v17++ = v19;
      v18 = (__int16)(v18 + 1);
    }
    while (v18 < a2);
  }
  *v17 = 0;
  *(_WORD *)(a3 + 44) += a2 + 1;
  return 10;
}

uint64_t SFanachk(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned __int8 v5;
  _OWORD v7[16];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  memset(v7, 0, sizeof(v7));
  if (!a2)
    return 1;
  v3 = (unsigned __int8 *)(a1 + a2 - 1);
  while (1)
  {
    v4 = *v3--;
    v5 = *((_BYTE *)v7 + v4) + 1;
    *((_BYTE *)v7 + v4) = v5;
    if (*(unsigned __int8 *)(a3 + v4) < v5)
      break;
    if (!(_WORD)--a2)
      return 1;
  }
  return 0;
}

uint64_t SFanagrm(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  if (*(unsigned __int16 *)(a4 + 68) < (unsigned __int16)a2)
    return 8;
  *(_OWORD *)(a3 + 3431) = 0u;
  *(_OWORD *)(a3 + 3447) = 0u;
  *(_OWORD *)(a3 + 3399) = 0u;
  *(_OWORD *)(a3 + 3415) = 0u;
  *(_OWORD *)(a3 + 3367) = 0u;
  *(_OWORD *)(a3 + 3383) = 0u;
  *(_OWORD *)(a3 + 3335) = 0u;
  *(_OWORD *)(a3 + 3351) = 0u;
  *(_OWORD *)(a3 + 3303) = 0u;
  *(_OWORD *)(a3 + 3319) = 0u;
  *(_OWORD *)(a3 + 3271) = 0u;
  *(_OWORD *)(a3 + 3287) = 0u;
  *(_OWORD *)(a3 + 3239) = 0u;
  *(_OWORD *)(a3 + 3255) = 0u;
  *(_OWORD *)(a3 + 3207) = 0u;
  *(_OWORD *)(a3 + 3223) = 0u;
  if (a2 < 1)
    goto LABEL_11;
  v9 = 0;
  v10 = *a1;
  v11 = *a1;
  do
  {
    v12 = a1[v9];
    if (v12 < v11)
      v11 = a1[v9];
    if (v12 > v10)
      v10 = a1[v9];
    ++*(_BYTE *)(a3 + v12 + 3207);
    ++v9;
  }
  while ((unsigned __int16)a2 != v9);
  if (a2 > 24)
  {
    v20 = 0;
    **(_BYTE **)(*(_QWORD *)(a3 + 32) + 16) = v11;
    v13 = *(unsigned __int8 *)(a4 + 54);
    if (v13 >= 2)
    {
      v14 = 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16) + (__int16)v14++) = 0;
        v13 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v13 > (__int16)v14);
    }
    v15 = SFbisrch(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16), 0, v13 - 1, &v20, a4);
    **(_BYTE **)(*(_QWORD *)(a3 + 32) + 16) = v10;
    v16 = *(unsigned __int8 *)(a4 + 54);
    if (v16 >= 2)
    {
      v17 = 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16) + (__int16)v17++) = -1;
        v16 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v16 > (__int16)v17);
    }
    v18 = SFbisrch(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16), 0, v16 - 1, &v20, a4);
    v20 += v18 - v15;
    v19 = v20;
    *(_WORD *)(a3 + 40) = 0;
    *(_WORD *)(a3 + 44) = 0;
    if (*(_BYTE *)(a3 + 3202) == 1)
      PDdecod2(a1, a2, v15, v19, a4, (unsigned __int16 *)a3);
    else
      SFdecode(a1, a2, v15, v19, (_QWORD *)a4, (unsigned __int16 *)a3);
  }
  else
  {
LABEL_11:
    SFanaqua((uint64_t)a1, a2, (_WORD *)a3, a4);
  }
  if (*(_WORD *)(a3 + 40))
    return 10;
  else
    return 11;
}

uint64_t SFanaqua(uint64_t a1, int a2, _WORD *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int16 v26;
  __int128 v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _OWORD v52[16];
  _BYTE v53[264];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  memset(v53, 0, 256);
  if (a2 >= 1)
  {
    v8 = (unsigned __int16)a2;
    v9 = (unsigned __int8 *)a1;
    do
    {
      v10 = *v9++;
      ++v53[v10];
      --v8;
    }
    while (v8);
  }
  a3[1066] = 0;
  v51 = 0;
  v11 = *(_QWORD *)(a4 + 1184);
  v12 = (unsigned __int16)a3[1068];
  v13 = (unsigned __int16)a3[1067];
  v14 = (unsigned __int8 *)(v13 + v12 + v11);
  v15 = *v14;
  v16 = v11 + v12;
  v17 = *(unsigned __int8 *)(v11 + v12);
  v18 = v14[1];
  v19 = (unsigned __int16)a3[1069];
  v20 = *(unsigned __int8 *)(v11 + v19);
  v21 = *(unsigned __int8 *)(v16 + 1);
  v22 = *(unsigned __int8 *)(v11 + v19 + v13);
  v47 = *(_BYTE *)(v11 + v19);
  v48 = v22;
  if (v13)
  {
    v23 = (v18 | (v21 << 8)) - 1;
    v24 = (v15 | (v17 << 8)) - 1;
    v25 = 32;
    v26 = 1;
    v27 = 0uLL;
    v28 = 32;
    while (1)
    {
      v29 = v24 + 1;
      v30 = *(_QWORD *)(a4 + 1184);
      v31 = *(unsigned __int8 *)(v30 + (unsigned __int16)(v24 + 1) - 1);
      if (v31 == 255)
      {
        v29 = v24 + 3;
        v33 = (unsigned __int16)(v24 + 3) - 2;
        v34 = (unsigned __int16)v29 - 1;
      }
      else
      {
        v32 = (unsigned __int16)a3[1070] + v31;
        v33 = v32 - 1;
        v34 = (v32 + 255);
      }
      if (!v53[v20] || !v53[v22])
        goto LABEL_39;
      v35 = *(unsigned __int8 *)(v30 + v34);
      v36 = *(unsigned __int8 *)(v30 + v33);
      if (v36)
        v25 = v36;
      v49 = v25;
      if (v35)
        v28 = v35;
      v50 = v28;
      if ((v25 == 32 || v53[v25]) && (v28 == 32 || v53[v28]))
      {
        v37 = 0;
        v52[14] = v27;
        v52[15] = v27;
        v52[12] = v27;
        v52[13] = v27;
        v52[10] = v27;
        v52[11] = v27;
        v52[8] = v27;
        v52[9] = v27;
        v52[6] = v27;
        v52[7] = v27;
        v52[4] = v27;
        v52[5] = v27;
        v52[2] = v27;
        v52[3] = v27;
        v52[0] = v27;
        v52[1] = v27;
        while (1)
        {
          v38 = *(&v47 + v37);
          if (v38 == 32)
            break;
          ++*((_BYTE *)v52 + v38);
          if (++v37 == 4)
            goto LABEL_28;
        }
        if ((unsigned __int16)v37 == 4 || (unsigned __int16)v37 == (unsigned __int16)a2)
        {
LABEL_28:
          v37 = 0;
          while (*((unsigned __int8 *)v52 + v37) <= v53[v37])
          {
            if (++v37 == 256)
              goto LABEL_31;
          }
          goto LABEL_26;
        }
        if ((unsigned __int16)v37 == 256)
          goto LABEL_31;
LABEL_26:
        if (*(&v47 + (__int16)v37) != 32)
          goto LABEL_36;
LABEL_31:
        if ((__int16)a3[1066] > 498)
        {
          v43 = v22;
          v44 = v20;
          v45 = v28;
          v46 = v25;
          icgetana(a1, a2, (uint64_t)a3, a4);
          v22 = v43;
          v20 = v44;
          v28 = v45;
          v25 = v46;
          v27 = 0uLL;
        }
        else
        {
          for (i = 0; i != 4; ++i)
            *((_BYTE *)&a3[2 * (__int16)a3[1066] + 64] + i) = *(&v47 + i);
          ++a3[1066];
        }
      }
LABEL_36:
      LOWORD(v13) = a3[1067];
      if ((unsigned __int16)v29 >= (unsigned __int16)v23)
        break;
      v40 = v23;
      LODWORD(v23) = v29;
LABEL_40:
      v24 = v23;
      v23 = v40;
      if (v26 > (unsigned __int16)v13)
        goto LABEL_41;
    }
    v30 = *(_QWORD *)(a4 + 1184);
LABEL_39:
    v41 = (unsigned __int16)a3[1069] + (unint64_t)++v26 - 1;
    v20 = *(unsigned __int8 *)(v30 + v41);
    v22 = *(unsigned __int8 *)(v30 + (int)(v41 + (unsigned __int16)v13));
    v47 = *(_BYTE *)(v30 + v41);
    v48 = v22;
    v40 = (*(unsigned __int8 *)(v30
                              + (unsigned __int16)v13
                              + v26
                              + (unint64_t)(unsigned __int16)a3[1068]) | (*(unsigned __int8 *)(v30 + (unsigned __int16)a3[1068] + (unint64_t)v26) << 8))
        - 1;
    goto LABEL_40;
  }
LABEL_41:
  icgetana(a1, a2, (uint64_t)a3, a4);
  return 10;
}

uint64_t icgetana(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  _DWORD v19[3];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132)) = 0;
  v5 = *(__int16 *)(a3 + 2132);
  *(_QWORD *)(a3 + 120) = a3 + 128;
  if (v5 >= 1)
  {
    v8 = (unsigned __int8 *)result;
    v9 = 0;
    v10 = (unsigned __int16)v5;
    v18 = 0;
    do
    {
      v11 = a3 + 4 * v9;
      result = SLstrncmp(*(_BYTE **)(a3 + 120), (unsigned __int8 *)(v11 + 128), 4);
      if ((int)result <= 0)
      {
        *(_QWORD *)(a3 + 120) = v11 + 128;
        v19[0] = *(_DWORD *)(v11 + 128);
        v12 = *(unsigned __int8 *)(a4 + 54);
        if (v12 >= 5)
        {
          v13 = 4;
          do
            *((_BYTE *)v19 + (__int16)v13++) = 0;
          while ((int)v12 > (__int16)v13);
        }
        v14 = SFbisrch((uint64_t)v19, 0, v12 - 1, &v18, a4);
        v15 = *(unsigned __int8 *)(a4 + 54);
        if (v15 >= 5)
        {
          v16 = 4;
          do
            *((_BYTE *)v19 + (__int16)v16++) = -1;
          while ((int)v15 > (__int16)v16);
        }
        v17 = SFbisrch((uint64_t)v19, 0, v15 - 1, &v18, a4);
        v18 += v17 - v14;
        if (*(_BYTE *)(a3 + 3202) == 1)
          result = PDdecod2(v8, a2, v14, v18, a4, (unsigned __int16 *)a3);
        else
          result = SFdecode(v8, a2, v14, v18, (_QWORD *)a4, (unsigned __int16 *)a3);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *(_WORD *)(a3 + 2132) = 0;
  return result;
}

uint64_t SFbisrch(uint64_t a1, int a2, int a3, _WORD *a4, uint64_t a5)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  __int16 v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  __int16 v21;
  unsigned int v22;
  __int16 v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t result;
  int i;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  _BYTE v35[7];

  v7 = *(unsigned __int8 *)(a5 + 54);
  if (*(_BYTE *)(a5 + 54))
    v8 = a2 <= a3;
  else
    v8 = 0;
  if (v8)
  {
    LOWORD(v9) = 0;
    do
    {
      v35[(__int16)v9] = *(_BYTE *)(a1 + (__int16)a2);
      LOWORD(v9) = v9 + 1;
      v10 = (__int16)v9;
      if ((__int16)v9 >= (int)v7)
        break;
      a2 = (__int16)(a2 + 1);
    }
    while (a2 <= a3);
    v9 = (__int16)v9;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  memset(&v35[v9], 32, v7 - v10);
  v35[v7] = 0;
  v11 = *(__int16 *)(a5 + 48);
  if (v11 < 2)
  {
    v16 = 0;
    v13 = 0;
    v15 = *(_WORD *)(a5 + 48);
  }
  else
  {
    v12 = 0;
    v13 = 0;
    v14 = *(unsigned __int16 *)(a5 + 48);
    v15 = *(_WORD *)(a5 + 48);
    do
    {
      v16 = (v14 + v12) >> 1;
      if ((_DWORD)v7)
      {
        v17 = 4 * v16;
        v18 = *(_QWORD *)(a5 + 40);
        v19 = *(unsigned __int8 *)(v18 + (__int16)(4 * v16));
        if (v35[0] >= v19)
        {
          v21 = 0;
          v20 = 0;
          v22 = v35[0];
          while (v22 <= v19)
          {
            v20 = ++v21;
            if (v21 >= (int)v7)
              goto LABEL_22;
            ++v17;
            v22 = v35[v21];
            v19 = *(unsigned __int8 *)(v18 + (__int16)v17);
            if (v22 < v19)
              goto LABEL_20;
          }
          v13 = v16;
        }
        else
        {
          v20 = 0;
LABEL_20:
          v15 = v16;
        }
      }
      else
      {
        v20 = 0;
      }
LABEL_22:
      if (v20 == (_DWORD)v7)
        break;
      v14 = v15;
      v12 = (__int16)v13;
    }
    while (v15 - (__int16)v13 >= 2);
  }
  if (v15 - (__int16)v13 >= 2)
    v13 = v16;
  if ((_WORD)v13)
  {
    v23 = 0;
    v24 = v13;
    while (1)
    {
      if ((_DWORD)v7
        && (v25 = 4 * v24, v26 = *(_QWORD *)(a5 + 40), v35[0] == *(unsigned __int8 *)(v26 + (__int16)(4 * v24))))
      {
        v27 = 0;
        do
        {
          v28 = ++v27;
          if (v27 >= (int)v7)
            break;
          ++v25;
        }
        while (v35[v27] == *(_BYTE *)(v26 + (__int16)v25));
      }
      else
      {
        v28 = 0;
      }
      if (v28 != (_DWORD)v7)
        break;
      --v24;
      ++v23;
      if (!(_WORD)v24)
      {
        LOWORD(v24) = 0;
        goto LABEL_42;
      }
    }
    LOWORD(v13) = v23;
  }
  else
  {
    LOWORD(v24) = 0;
    LOWORD(v13) = 0;
  }
LABEL_42:
  result = (__int16)v24;
  for (i = result + 1 + (__int16)v13; i != v11; i = result + 1 + (__int16)v13)
  {
    if ((_DWORD)v7 && (v31 = 4 * i, v32 = *(_QWORD *)(a5 + 40), v35[0] == *(unsigned __int8 *)(v32 + (__int16)v31)))
    {
      v33 = 0;
      do
      {
        v34 = ++v33;
        if (v33 >= (int)v7)
          break;
        ++v31;
      }
      while (v35[v33] == *(_BYTE *)(v32 + (__int16)v31));
    }
    else
    {
      v34 = 0;
    }
    if (v34 != (_DWORD)v7)
      break;
    LOWORD(v13) = v13 + 1;
  }
  *a4 = v13;
  return result;
}

uint64_t SFchkwrd(uint64_t a1, uint64_t a2, char *__src, int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v7;
  __int16 v8;
  char *v9;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  char *v25;
  _BYTE *v26;
  unsigned __int16 v27;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  int v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *__dst;

  v7 = a5;
  v8 = a4;
  v9 = __src;
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(_QWORD **)(a2 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a2 + 3192);
  v16 = (char *)v13[4];
  v46 = (char *)v13[6];
  __dst = (char *)v13[5];
  if (!*(_WORD *)(a2 + 2))
  {
    if (*(_BYTE *)(a1 + 55) == 2 && *(_WORD *)(a2 + 3490) == 64 && **(_BYTE **)(a2 + 3496))
      __src[a4 - **(unsigned __int8 **)(a2 + 3496)] = -95;
    v22 = *(_WORD *)(a2 + 18);
    if ((v22 & 0x40) != 0 && !*(_DWORD *)(a2 + 3472))
      return 11;
    v23 = *(unsigned __int8 *)(a1 + 55);
    if (v23 == 5 && (**(_BYTE **)(a2 + 3496) & 0x30) != 0)
    {
      v24 = *(_WORD *)(a2 + 3490);
      if ((v24 & 0x30) != 0
        && ((**(_BYTE **)(a2 + 3496) & 0x10) == 0 && (v24 & 0x10) != 0
         || (**(_BYTE **)(a2 + 3496) & 0x20) == 0 && (v24 & 0x20) != 0))
      {
        return 11;
      }
    }
    if ((v22 & 1) != 0 || (a5 & 0xFFFFFFFB) == 0 && (v22 & 0x20) != 0)
      return 11;
    if (v23 == 1 && *(_BYTE *)(a2 + 3512))
    {
      if (!**(_BYTE **)(a2 + 3496))
        return 11;
      v44 = v14;
      v25 = *(char **)(*(_QWORD *)(a2 + 32) + 24);
      strcpy(v25, "ne");
      strcpy(v25 + 2, __src);
      v8 += 2;
      v9 = v25;
      v14 = v44;
    }
  }
  if (*(_BYTE *)(a2 + 3184) && *(_BYTE *)(a2 + 3206))
  {
    strcpy(*(char **)(v15 + 8), v9);
    *(_BYTE *)(v15 + 17) = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(a2 + 96);
    *(_WORD *)(v15 + 2) = *(_WORD *)(a2 + 3204);
    *(_WORD *)v15 = 0;
    *(_BYTE *)(v15 + 42) = 1;
    v17 = 1 << (*(_BYTE *)(a1 + 55) - 1);
    if (!*(_BYTE *)(a1 + 55))
      LODWORD(v17) = -1;
    *(_DWORD *)(v15 + 36) = v17;
    PDword((unsigned __int16 *)v15, 1u, 1);
    v18 = *(unsigned __int16 *)(v15 + 50);
    if (*(_WORD *)(v15 + 50))
    {
      *(_WORD *)(a2 + 102) = v18;
      if ((__int16)v18 >= 1)
      {
        v19 = *(_QWORD *)(v15 + 104);
        while (*(unsigned __int8 *)(*(_QWORD *)v19 + 71) != v7 || !*(_BYTE *)(*(_QWORD *)v19 + 70))
        {
          v19 += 8;
          if (!--v18)
            goto LABEL_12;
        }
        return 11;
      }
    }
  }
LABEL_12:
  if (!*(_WORD *)(a2 + 2))
  {
    if (!v12)
    {
      v45 = v14;
      v26 = (_BYTE *)(a2 + 88);
      if (v7 || *(_BYTE *)(a2 + 88) != 3)
      {
        strcpy(v16, v9);
        goto LABEL_63;
      }
      v27 = 0;
      goto LABEL_49;
    }
    if (!*(_BYTE *)(v12 + 34) && !*(_BYTE *)(v12 + 44)
      || (*(_WORD *)(a2 + 3492) & 0x200) != 0
      || SFcltcmp(a1, a2) == 10 && SFcltscr((unsigned __int8 *)v9, v8, a1, v12) == 10)
    {
      v45 = v14;
      v26 = (_BYTE *)(a2 + 88);
      if (v7 || *(_BYTE *)(a2 + 88) != 3)
      {
        strcpy(v16, v9);
LABEL_56:
        if (*(_WORD *)v12 && (*(_BYTE *)(v12 + 34) || *(_BYTE *)(v12 + 44)))
        {
          if (v7 == 4)
            v29 = 0;
          else
            v29 = v7;
          v30 = v12 + 80;
          v31 = *(unsigned __int8 *)(v12 + 76);
          v32 = v8;
          v33 = (unsigned __int8 *)v16;
LABEL_67:
          SLrecap(v33, v32, v29, v30, v31, v45);
          v34 = *(unsigned __int8 *)(a1 + 55);
          switch(v34)
          {
            case 5:
              goto LABEL_70;
            case 15:
              if (*v26 == 2 || (*(_WORD *)(a2 + 3490) & 0x40) != 0 && (*(_DWORD *)(a2 + 92) & 0x80000000) != 0)
                SFremacc(v16, v45, 15);
              v35 = v8 - 1;
              if (v9[v35] == 253 && *v26 == 2)
                v16[v35] = -81;
              break;
            case 8:
LABEL_70:
              if ((*(_WORD *)(a2 + 3490) & 0x40) != 0)
                SFremacc(v16, v45, v34);
              break;
          }
          if (v12 && (*(_WORD *)(a2 + 3492) & 0x200) == 0)
          {
            if (*(_BYTE *)(v12 + 34))
            {
              v36 = __dst;
              strcpy(__dst, (const char *)(v12 + 34));
              v37 = *(unsigned __int8 *)(v12 + 16);
              v38 = v45;
              if (v37 != 3)
              {
                v39 = strlen(__dst);
                if (v37 == 4)
                  v40 = 0;
                else
                  v40 = *(unsigned __int8 *)(v12 + 16);
                SLrecap((unsigned __int8 *)__dst, v39, v40, 0, v37, v45);
              }
              strcat(__dst, v16);
            }
            else
            {
              v36 = __dst;
              strcpy(__dst, v16);
              v38 = v45;
            }
            if (*(_BYTE *)(v12 + 44))
            {
              strcpy(v46, (const char *)(v12 + 44));
              v41 = *(unsigned __int8 *)(v12 + 17);
              if (v41 != 3)
              {
                v42 = strlen(v46);
                if (v41 == 4)
                  v43 = 0;
                else
                  v43 = *(unsigned __int8 *)(v12 + 17);
                SLrecap((unsigned __int8 *)v46, v42, v43, 0, v41, v38);
              }
              strcat(v36, v46);
            }
            strcpy(v16, v36);
          }
          v21 = (__int16)strlen(v16);
          v20 = v16;
          return SFadd1(v20, v21, a2, 1);
        }
LABEL_63:
        if (v7 == 4)
          v29 = 0;
        else
          v29 = v7;
        v31 = *v26;
        v32 = v8;
        v33 = (unsigned __int8 *)v16;
        v30 = a6;
        goto LABEL_67;
      }
      v27 = strlen((const char *)(v12 + 34));
LABEL_49:
      if (((*(_DWORD *)(a2 + 92 + 4 * (v27 >> 5)) >> ~(_BYTE)v27) & 1) != 0)
      {
        if (((*(_DWORD *)(a2 + 92 + 4 * ((unsigned __int16)(v27 + 1) >> 5)) >> ~(v27 + 1)) & 1) != 0)
          v7 = 1;
      }
      else
      {
        v7 = 0;
      }
      strcpy(v16, v9);
      if (!v12)
        goto LABEL_63;
      goto LABEL_56;
    }
    return 11;
  }
  if (v7)
    SLrecap((unsigned __int8 *)v9, v8, v7, a6, v7, v14);
  v20 = v9;
  v21 = v8;
  return SFadd1(v20, v21, a2, 1);
}

uint64_t SFcltchk(uint64_t a1, int a2, int a3, unsigned __int16 *a4, _WORD *a5, unsigned int a6, uint64_t a7)
{
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  SLfun(a1, a2, a3, a4, a5);
  v11 = 0;
  v12 = (unsigned __int16)*a5 & (((a6 - 1) & 0xFFFC) >> 2);
  *a5 &= ((a6 - 1) & 0xFFFC) >> 2;
  v13 = *a4 & 7;
  v14 = 3 - v13;
  v15 = 2 * v13;
  while (1)
  {
    v16 = bswap32(*(_DWORD *)(a7 + 4 * (unsigned __int16)v12));
    if (!v16)
      return 11;
    if ((v16 & 0x7FFF) == *a4)
      break;
    v14 += v15;
    v17 = v12 + v14;
    if ((unsigned __int16)(a6 - 1) >> 2 >= (unsigned __int16)v17)
      v18 = 0;
    else
      v18 = a6 >> 2;
    v12 = v17 - v18;
    *a5 = v12;
    if (v11++ >= 0xA)
      return 11;
  }
  return 10;
}

uint64_t SFcltcmp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v6;
  int v8;
  BOOL v9;
  _BYTE v11[13];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 112);
  __strcpy_chk();
  v5 = *(unsigned __int8 *)(a1 + 55);
  v6 = 1;
  if (v5 > 0xC || ((1 << v5) & 0x1228) == 0)
    goto LABEL_13;
  if (*(_BYTE *)(v4 + 34))
    v6 = (unsigned __int16)(*(_WORD *)(v4 + 88) & *(_WORD *)(v4 + 58)) != 0;
  if (!*(_BYTE *)(v4 + 44))
  {
LABEL_13:
    v9 = 1;
  }
  else
  {
    v8 = (unsigned __int16)(*(_WORD *)(v4 + 90) & *(_WORD *)(v4 + 60));
    v9 = v8 != 0;
    if (v5 == 5
      && (*(_WORD *)(a2 + 3490) & 0x40) != 0
      && *(_BYTE *)(a2 + 88) == 2
      && !SLstrcmp(v11, "-la"))
    {
      v9 = (*(_WORD *)(v4 + 60) & 0x1A00 | v8) != 0;
    }
  }
  if (v6 && v9)
    return 10;
  else
    return 11;
}

uint64_t SFcltdb(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;

  v2 = *(unsigned __int8 *)(a1 + 55);
  v3 = *(_QWORD *)(a2 + 112);
  if ((*(_WORD *)(a2 + 3492) & 0x200) == 0 || *(__int16 *)(a2 + 40) <= 0)
    *(_DWORD *)(v3 + 58) = 0;
  switch(v2)
  {
    case 3:
      v4 = *(unsigned __int16 *)(v3 + 62);
      v5 = (v4 & 0xF) - 1;
      if (v5 <= 3)
        *(_WORD *)(v3 + 58) |= 0x400020000020001uLL >> (16 * v5);
      v6 = (v4 >> 4) & 7;
      if (v6 == 2)
      {
        v7 = *(_WORD *)(v3 + 60) | 2;
        goto LABEL_30;
      }
      if (v6 == 1)
      {
        v7 = *(_WORD *)(v3 + 60) | 1;
        goto LABEL_30;
      }
      break;
    case 5:
      v8 = *(unsigned __int16 *)(v3 + 62);
      v9 = (v8 & 0xF) - 1;
      if (v9 <= 7 && ((0xEFu >> v9) & 1) != 0)
        *(_WORD *)(v3 + 58) |= word_1DE2EC7C0[v9];
      switch((v8 >> 4) & 7)
      {
        case 1u:
          goto LABEL_24;
        case 2u:
          goto LABEL_26;
        case 3u:
          goto LABEL_27;
        case 4u:
          goto LABEL_28;
        case 5u:
          goto LABEL_29;
        case 6u:
          v7 = *(_WORD *)(v3 + 60) | 0x1000;
          goto LABEL_30;
        default:
          return 1;
      }
    case 8:
      v10 = *(unsigned __int16 *)(v3 + 62);
      *(_BYTE *)(v3 + 92) = v10 & 0xF;
      v11 = (32 * v10) & 0xE00;
      *(_WORD *)(v3 + 60) = (32 * v10) & 0xE00;
      v12 = *(unsigned __int16 *)(a2 + 40);
      if (v12 <= 2)
      {
        if ((v10 & 0xF) != 0)
        {
          *(_WORD *)(v3 + 2 * v12 + 64) |= (_WORD)v10 << 12;
          v11 = *(unsigned __int16 *)(v3 + 60);
        }
        if (v11)
        {
          v13 = v3 + 2 * *(__int16 *)(a2 + 40);
          *(_WORD *)(v13 + 64) |= (__int16)v11 >> 8;
        }
      }
      break;
    case 9:
      v14 = *(_WORD *)(v3 + 62);
      v15 = (v14 & 0xF) - 1;
      if (v15 <= 0xA)
        *(_WORD *)(v3 + 58) |= word_1DE2EC7A8[v15];
      v7 = *(_WORD *)(v3 + 60) | (16 * v14) & 0x100;
LABEL_30:
      *(_WORD *)(v3 + 60) = v7;
      break;
    case 12:
      switch(*(_WORD *)(v3 + 62) & 7)
      {
        case 0:
LABEL_24:
          v7 = *(_WORD *)(v3 + 60) | 0x80;
          goto LABEL_30;
        case 1:
LABEL_26:
          v7 = *(_WORD *)(v3 + 60) | 0x100;
          goto LABEL_30;
        case 2:
LABEL_27:
          v7 = *(_WORD *)(v3 + 60) | 0x200;
          goto LABEL_30;
        case 3:
LABEL_28:
          v7 = *(_WORD *)(v3 + 60) | 0x400;
          goto LABEL_30;
        case 4:
LABEL_29:
          v7 = *(_WORD *)(v3 + 60) | 0x800;
          goto LABEL_30;
        default:
          return 1;
      }
    default:
      return 1;
  }
  return 1;
}

uint64_t SFcltscr(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  _BOOL4 v15;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  int v26;
  int v27;

  v6 = (_BYTE *)(a4 + 34);
  v7 = *(_QWORD *)(a3 + 56);
  if (*(_BYTE *)(a4 + 34)
    && ((v8 = *a1, v8 != 104) ? (v9 = (*(_DWORD *)(v7 + 4 * v8) & 0x10000000) == 0) : (v9 = 0), v9))
  {
    if (*(_BYTE *)(a3 + 55) == 5 && !SLstrcmp(v6, "d'"))
    {
      v17 = "yeux";
      v18 = a1;
LABEL_28:
      if (!SLstrcmp(v18, (unsigned __int8 *)v17))
        return 10;
    }
  }
  else
  {
    v10 = (_BYTE *)(a4 + 44);
    switch(*(_BYTE *)(a3 + 55))
    {
      case 3:
        if (*v10)
        {
          v11 = *(unsigned __int16 *)(a4 + 60);
          if (v11 != 3)
          {
            v12 = a1[a2 - 1];
            v13 = (*(_DWORD *)(v7 + 4 * v12) & 0x10000000) == 0 || v12 == 117;
            v14 = v13 || v12 == 249;
            v15 = v14;
            if ((v11 & 1) == 0 && !v15)
              return 11;
            if ((v11 & 2) == 0 && v15)
              return 11;
          }
        }
        return 10;
      case 5:
        if (!*v10 || (*(__int16 *)(a4 + 90) & 0x80000000) == 0)
          return 10;
        v19 = a2 - 1;
        result = 11;
        switch(a1[v19])
        {
          case 'a':
          case 'c':
          case 'e':
            if (!SLstrcmp(v10, "-t-il") || !SLstrcmp(v10, "-t-elle"))
              return 10;
            v17 = "-t-on";
LABEL_64:
            v18 = v10;
            goto LABEL_28;
          case 'b':
          case 'f':
          case 'g':
          case 'h':
            return result;
          case 'd':
LABEL_65:
            if (!SLstrcmp(v10, "-il")
              || !SLstrcmp(v10, "-elle")
              || !SLstrcmp(v10, "-on"))
            {
              return 10;
            }
            if (SLstrcmp(v10, "-ils"))
            {
              v26 = SLstrcmp(v10, "-elles");
              result = 11;
              if (a2 < 2 || v26)
                return result;
            }
            else if (a2 < 2)
            {
              return 11;
            }
            if (a1[a2 - 2] == 110)
              return 10;
            break;
          case 'i':
            v27 = SLstrcmp(v10, "-je");
            result = 11;
            if (a2 < 2 || v27 || a1[a2 - 2] != 97)
              return result;
            return 10;
          default:
            switch(a1[v19])
            {
              case 's':
                if (!SLstrcmp(v10, "-je") || !SLstrcmp(v10, "-tu"))
                  return 10;
                goto LABEL_36;
              case 't':
                goto LABEL_65;
              case 'u':
              case 'v':
              case 'w':
              case 'y':
                return result;
              case 'x':
                goto LABEL_73;
              case 'z':
LABEL_36:
                if (!SLstrcmp(v10, "-y") || !SLstrcmp(v10, "-en"))
                  return 10;
                v17 = "-y-en";
                goto LABEL_64;
              default:
                if (a1[v19] != 233)
                  return result;
LABEL_73:
                if (SLstrcmp(v10, "-je") && (SLstrcmp(v10, "-tu") || a1[v19] != 120))
                  return 11;
                return 10;
            }
        }
        return 11;
      case 9:
        if (*(_BYTE *)(a4 + 34)
          && (*(_WORD *)(a4 + 88) & 0x40) != 0
          && *a1 != 105
          && (*(_DWORD *)(v7 + 4 * a1[1]) & 0x10000000) != 0
          || !SLstrcmp(v6, "c'") && (*(_DWORD *)(v7 + 4 * *a1) & 0x800) == 0)
        {
          return 11;
        }
        return 10;
      case 0xC:
        v21 = *(__int16 *)(a4 + 90);
        if ((v21 & 0x80000000) == 0)
          return 10;
        if ((v21 & 0x20) == 0)
        {
          v22 = a1[a2 - 1];
          result = 10;
          if ((v22 - 224) > 0x14 || ((1 << (v22 + 32)) & 0x101401) == 0)
          {
            if (v22 == 105)
              return 10;
            else
              return 11;
          }
          return result;
        }
        if (a1[a2 - 1] == 114)
        {
          v24 = a1[a2 - 2] - 97;
          v25 = (v24 >> 1) | (v24 << 7);
          if (v25 < 8u)
            return dword_1DE2EC7EC[(char)v25];
        }
        break;
      default:
        return 10;
    }
  }
  return 11;
}

uint64_t SFcor1qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int16 v8;
  __int16 v9;
  unsigned __int16 v10;
  __int16 v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  __int16 v41;
  BOOL v42;
  int v43;
  _BOOL4 v45;
  int v47;
  uint64_t v50;
  int v51;
  uint64_t i;
  int v54;
  int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int8 v62;
  unsigned __int8 v63;
  char v64;
  char v65;
  char v66;

  v5 = a2[148];
  v6 = *(unsigned __int16 *)(a3 + 2134);
  v7 = *(unsigned __int16 *)(a3 + 2136);
  v8 = *(_WORD *)(a3 + 2138) - 1;
  v9 = *(_WORD *)(a3 + 2140);
  v10 = v8 + v6;
  v11 = strlen(a1);
  v66 = 0;
  v12 = (unsigned __int8 *)(v5 + (unsigned __int16)(v7 + v6));
  v13 = *v12;
  v14 = *(unsigned __int8 *)(v5 + v7);
  v15 = v12[1];
  v16 = *(unsigned __int8 *)(v5 + v7 + 1);
  v17 = *(unsigned __int8 *)(v5 + v8 + 1);
  v18 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v8 + v6) + 1);
  v62 = *(_BYTE *)(v5 + v8 + 1);
  v63 = v18;
  if (v6 >= 2)
  {
    v19 = v8;
    v20 = (unsigned __int16)(v9 - 1);
    v21 = (unsigned __int16)(v7 + v6);
    v22 = v10;
    v23 = (unsigned __int16)(v9 + 255);
    v24 = (v15 | (v16 << 8)) - 1;
    v25 = (v13 | (v14 << 8)) - 1;
    v26 = a3 + 128;
    v27 = v11;
    v28 = 1;
    v29 = 32;
    v30 = 32;
    do
    {
      v31 = *((unsigned __int8 *)a1 + 1);
      v32 = *(unsigned __int8 *)a1;
      while (1)
      {
        if ((unsigned __int16)v25 >= (unsigned __int16)v24)
        {
          v17 = *(unsigned __int8 *)(v5 + ++v28 + (unint64_t)v19);
          v18 = *(unsigned __int8 *)(v5 + v28 + (unint64_t)v22);
          v62 = *(_BYTE *)(v5 + v28 + (unint64_t)v19);
          v63 = v18;
          v25 = v24;
          v24 = (*(unsigned __int8 *)(v5 + v28 + (unint64_t)v21) | (*(unsigned __int8 *)(v5 + v7 + v28) << 8))
              - 1;
        }
        v33 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v25 + 1) - 1);
        v34 = (unsigned __int16)(v25 + 3) - 2;
        v35 = v33 == 255;
        if (v33 == 255)
        {
          v36 = (unsigned __int16)(v25 + 3) - 1;
        }
        else
        {
          v34 = (v33 + v20);
          v36 = (v33 + v23);
        }
        if (v35)
          v25 += 3;
        else
          ++v25;
        v37 = *(unsigned __int8 *)(v5 + v36);
        v38 = *(unsigned __int8 *)(v5 + v34);
        if (v17 == v31 && v18 == v32)
        {
          v39 = v17;
          goto LABEL_22;
        }
        if (v17 == v32 && (v18 == v31 || v18 == *((unsigned __int8 *)a1 + 2) || v18 == v17))
          break;
        v25 = v24;
        if (v6 <= v28)
          return 10;
      }
      v39 = v31;
LABEL_22:
      if (v38)
        v29 = v38;
      v64 = v29;
      if (v37)
        v30 = v37;
      v65 = v30;
      if (v30 == 32)
      {
        if (v29 == 32)
        {
          v40 = v18 != 32;
          if (v18 == 32)
            v41 = 1;
          else
            v41 = 2;
        }
        else
        {
          v40 = 0;
          v41 = 3;
        }
      }
      else
      {
        v40 = 0;
        v41 = 4;
      }
      if (v17 == v32)
      {
        v42 = v18 == v17 && v29 == v39;
        v43 = *((unsigned __int8 *)a1 + 2);
        v45 = v42 && v30 == v43;
        if (v18 == v39)
        {
          if (v30 == v43 && v29 == v18)
            v45 = 1;
          if (v29 == v43 && (v30 == v29 || v30 == *((unsigned __int8 *)a1 + 4) || v30 == *((unsigned __int8 *)a1 + 3)))
            v45 = 1;
          if (v29 == *((unsigned __int8 *)a1 + 3) && (v30 == v43 || v30 == *((unsigned __int8 *)a1 + 4)))
            v45 = 1;
        }
        if (v18 == v43)
        {
          v47 = *((unsigned __int8 *)a1 + 3);
          if ((v30 == v47 || v30 == 32) && v29 == v39)
            v45 = 1;
LABEL_79:
          if (v29 == v47 && v30 == *((unsigned __int8 *)a1 + 4))
          {
LABEL_82:
            v54 = v30;
            v55 = v29;
            v58 = v22;
            v59 = v21;
            v60 = v7;
            v57 = v19;
            v56 = v26;
            v50 = v27;
            v51 = SFcorqbr(a2, a3, (uint64_t)&v62, v41, (uint64_t)a1, v27, *(__int16 *)(a3 + 2162), *(__int16 *)(a3 + 2164), *(_DWORD *)(a3 + 2166), HIWORD(*(_DWORD *)(a3 + 2166)));
            v27 = v50;
            v26 = v56;
            v22 = v58;
            v21 = v59;
            v19 = v57;
            v7 = v60;
            v35 = v51 == 10;
            v30 = v54;
            v29 = v55;
            if (v35)
            {
              if (*(__int16 *)(a3 + 2132) > 499)
                return 10;
              for (i = 0; i != 4; ++i)
                *(_BYTE *)(v56 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v62 + i);
              ++*(_WORD *)(a3 + 2132);
            }
            goto LABEL_88;
          }
        }
      }
      else
      {
        if (v17 != v31)
          goto LABEL_88;
        v45 = v18 == v32
           && (v40 || v29 == *((unsigned __int8 *)a1 + 2) && (v30 == 32 || v30 == *((unsigned __int8 *)a1 + 3)));
        if (v18 == *((unsigned __int8 *)a1 + 2))
        {
          v47 = *((unsigned __int8 *)a1 + 3);
          goto LABEL_79;
        }
      }
      if (v45)
        goto LABEL_82;
LABEL_88:
      v17 = v62;
      v18 = v63;
    }
    while (v6 > v28);
  }
  return 10;
}

uint64_t SFcor2qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int16 v8;
  __int16 v9;
  __int16 v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t i;
  int v48;
  int v49;
  int v50;
  _BOOL4 v51;
  int v56;
  unsigned int v57;
  int v58;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  char v66;
  char v67;
  char v68;

  v5 = a2[148];
  v6 = *(unsigned __int16 *)(a3 + 2134);
  v7 = *(unsigned __int16 *)(a3 + 2136);
  v8 = *(_WORD *)(a3 + 2138) - 1;
  v9 = *(_WORD *)(a3 + 2140);
  v10 = strlen(a1);
  v68 = 0;
  v11 = (unsigned __int8 *)(v5 + (unsigned __int16)(v7 + v6));
  v12 = *v11;
  v13 = *(unsigned __int8 *)(v5 + v7);
  v14 = v11[1];
  v15 = *(unsigned __int8 *)(v5 + v7 + 1);
  v16 = *(_BYTE *)(v5 + (unsigned __int16)(v8 + v6) + 1);
  v64 = *(_BYTE *)(v5 + v8 + 1);
  v65 = v16;
  if (v6 >= 2)
  {
    v17 = a1;
    v18 = v7;
    v19 = v6;
    v20 = v8;
    v21 = (unsigned __int16)(v9 - 1);
    v22 = (unsigned __int16)(v7 + v6);
    v23 = (unsigned __int16)(v8 + v6);
    v24 = (v14 | (v15 << 8)) - 1;
    v25 = (v12 | (v13 << 8)) - 1;
    v26 = (unsigned __int16)(v9 + 255);
    v27 = 32;
    v57 = v23;
    v58 = v10;
    v28 = 1;
    v29 = 32;
    v56 = v26;
    do
    {
      if ((unsigned __int16)v25 >= (unsigned __int16)v24)
      {
        v28 = (v28 + 1);
        v30 = *(_BYTE *)(v5 + (unsigned __int16)v28 + (unint64_t)v23);
        v64 = *(_BYTE *)(v5 + (unsigned __int16)v28 + (unint64_t)v20);
        v65 = v30;
        v25 = v24;
        v24 = (*(unsigned __int8 *)(v5 + (unsigned __int16)v28 + (unint64_t)v22) | (*(unsigned __int8 *)(v5 + v18 + (unsigned __int16)v28) << 8))
            - 1;
      }
      v31 = *(unsigned __int8 *)(v5 + (unsigned __int16)(v25 + 1) - 1);
      v32 = (unsigned __int16)(v25 + 3) - 2;
      v33 = v31 == 255;
      if (v31 == 255)
      {
        v34 = (unsigned __int16)(v25 + 3) - 1;
      }
      else
      {
        v32 = (v31 + v21);
        v34 = (v31 + v26);
      }
      v35 = *(unsigned __int8 *)(v5 + v34);
      if (v33)
        v25 += 3;
      else
        ++v25;
      v36 = *(unsigned __int8 *)(v5 + v32);
      v37 = *(unsigned __int16 *)(a3 + 2152);
      if (*(__int16 *)(a3 + 2152) >= 1)
      {
        v38 = *(unsigned __int8 *)v17;
        if (v64 < v38)
          goto LABEL_13;
        if (v64 > v38)
          return 10;
        v39 = *((unsigned __int8 *)v17 + 1);
        if (v37 < 2)
        {
          if (v65 == v39)
            goto LABEL_13;
        }
        else
        {
          if (v65 < v39)
            goto LABEL_13;
          if (v65 > v39)
            return 10;
        }
      }
      if (v36)
        v27 = v36;
      v66 = v27;
      if (v35)
        v29 = v35;
      v67 = v29;
      if (!v37
        && v64 == *(unsigned __int8 *)v17
        && v65 == *((unsigned __int8 *)v17 + 1)
        && v27 == *((unsigned __int8 *)v17 + 2))
      {
        continue;
      }
      if (v29 == 32)
      {
        if (v27 == 32)
        {
          v40 = 0;
          if (v65 == 32)
            v41 = 1;
          else
            v41 = 2;
        }
        else
        {
          v41 = 3;
          v40 = 1;
        }
      }
      else
      {
        v40 = 0;
        v41 = 4;
      }
      if ((__int16)v37 >= 3)
      {
        if (v27 == *((unsigned __int8 *)v17 + 2) && (v37 < 4 || v29 == *((unsigned __int8 *)v17 + 3)))
          goto LABEL_44;
      }
      else if (v37 == 2)
      {
        if (v27 != *((unsigned __int8 *)v17 + 2))
          goto LABEL_44;
      }
      else
      {
        if (v37)
          goto LABEL_44;
        v48 = *(unsigned __int8 *)v17;
        if (v64 == v48)
        {
LABEL_13:
          v25 = v24;
          continue;
        }
        v49 = *((unsigned __int8 *)v17 + 1);
        if (v65 == v48)
        {
          v50 = *((unsigned __int8 *)v17 + 2);
          v51 = v29 == v50;
          if (v27 != v49)
            v51 = 0;
        }
        else
        {
          v51 = 0;
          v50 = *((unsigned __int8 *)v17 + 2);
        }
        if (v65 == v49 && v27 == v50 && ((v40 & 1) != 0 || v29 == *((unsigned __int8 *)v17 + 3)))
          v51 = 1;
        if (v64 == v49 && v65 == v50 && v27 == *((unsigned __int8 *)v17 + 3))
        {
          if (v29 == *((unsigned __int8 *)v17 + 4) || v51)
          {
LABEL_44:
            v60 = v29;
            v61 = v28;
            v62 = v27;
            v63 = v24;
            v42 = v21;
            v43 = v20;
            v44 = v18;
            v45 = v19;
            v46 = v17;
            if (SFcorqbr(a2, a3, (uint64_t)&v64, v41, (uint64_t)v17, v58, *(__int16 *)(a3 + 2162), *(__int16 *)(a3 + 2164), *(_DWORD *)(a3 + 2166), HIWORD(*(_DWORD *)(a3 + 2166))) == 10)
            {
              v18 = v44;
              v21 = v42;
              v26 = v56;
              v23 = v57;
              v27 = v62;
              v24 = v63;
              v28 = v61;
              v29 = v60;
              if (*(__int16 *)(a3 + 2132) > 499)
                return 10;
              v19 = v45;
              v17 = v46;
              v20 = v43;
              for (i = 0; i != 4; ++i)
                *(_BYTE *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v64 + i);
              ++*(_WORD *)(a3 + 2132);
            }
            else
            {
              v19 = v45;
              v18 = v44;
              v17 = v46;
              v20 = v43;
              v21 = v42;
              v26 = v56;
              v23 = v57;
              v27 = v62;
              v24 = v63;
              v28 = v61;
              v29 = v60;
            }
            continue;
          }
        }
        else if (v51)
        {
          goto LABEL_44;
        }
        if (v65 != v50 && v65 != v49 && v65 != v48)
          v25 = v24;
      }
    }
    while (v19 > (unsigned __int16)v28);
  }
  return 10;
}

uint64_t SFcor3qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned __int8 *v22;
  const char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned __int8 v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unsigned __int16 v34;
  int v35;
  unsigned __int8 v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  unsigned __int16 v45;
  int v46;
  unsigned __int16 v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t i;
  int v64;
  unsigned int v65;
  int v66;
  __int16 v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  int v72;
  unsigned __int8 v73;
  unsigned __int8 v74;
  char v75;
  char v76;
  char v77;
  _OWORD v78[16];
  _BYTE v79[264];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v6 = a2[148];
  v7 = *(unsigned __int16 *)(a3 + 2134);
  v8 = *(unsigned __int16 *)(a3 + 2136);
  v9 = *(_WORD *)(a3 + 2138);
  v10 = *(_WORD *)(a3 + 2140);
  v11 = strlen(a1);
  v12 = v11;
  v13 = v11;
  v14 = *(unsigned __int8 *)(a3 + 2172);
  if (v11 - v14 > 1)
    return 10;
  v15 = v8;
  v16 = v7;
  v17 = (unsigned __int16)(v9 - 1);
  memset(v79, 0, 256);
  memset(v78, 0, sizeof(v78));
  if (v14 != 255)
  {
    v18 = 0;
    do
    {
      if (v14 == v11)
      {
        v19 = *(unsigned __int8 *)(a3 + (v18 | 1) + 2172);
        v20 = *(unsigned __int8 *)(a2[21] + v19);
        v21 = *(unsigned __int8 *)(a2[22] + v19);
        v22 = *(unsigned __int8 **)(a2[19] + 8 * v19);
        v79[*v22] = 1;
        if (v20 == 1)
          v23 = &a1[v21];
        else
          v23 = (const char *)(v22 + 1);
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1)
          break;
        v79[*(unsigned __int8 *)a1] = 1;
        v23 = *(const char **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v18 | 1) + 2172));
      }
      *((_BYTE *)v78 + *(unsigned __int8 *)v23) = 1;
      v18 += 2;
      v14 = *(unsigned __int8 *)(a3 + v18 + 2172);
    }
    while (v14 != 255);
  }
  v77 = 0;
  v24 = (unsigned __int8 *)(v6 + (unsigned __int16)(v8 + v7));
  v25 = *v24;
  v26 = *(unsigned __int8 *)(v6 + v8);
  v27 = v24[1];
  v28 = *(unsigned __int8 *)(v8 + v6 + 1);
  v29 = *(_BYTE *)(v6 + (unsigned __int16)(v9 - 1 + v7) + 1);
  v73 = *(_BYTE *)(v6 + (unsigned __int16)(v9 - 1) + 1);
  v74 = v29;
  if (v7 < 2)
    return 10;
  v30 = (unsigned __int16)(v10 - 1);
  v70 = (unsigned __int16)(v8 + v7);
  v68 = v7;
  v69 = (unsigned __int16)(v9 - 1 + v7);
  v31 = (v27 | (v28 << 8)) - 1;
  v32 = (v25 | (v26 << 8)) - 1;
  v71 = (unsigned __int16)(v10 + 255);
  v33 = 32;
  v34 = 1;
  v35 = 32;
  v67 = v11;
  v65 = v17;
  v66 = v11;
  do
  {
    if ((unsigned __int16)v32 >= (unsigned __int16)v31)
    {
      v36 = *(_BYTE *)(v6 + ++v34 + (unint64_t)v69);
      v73 = *(_BYTE *)(v6 + v34 + (unint64_t)v17);
      v74 = v36;
      v32 = v31;
      v31 = (*(unsigned __int8 *)(v6 + v34 + (unint64_t)v70) | (*(unsigned __int8 *)(v6 + v15 + v34) << 8)) - 1;
    }
    v37 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v32 + 1) - 1);
    v38 = (v37 + v71);
    v39 = v37 == 255;
    if (v37 == 255)
      v40 = (unsigned __int16)(v32 + 3) - 2;
    else
      v40 = (v37 + v30);
    if (v39)
      v41 = (unsigned __int16)(v32 + 3) - 1;
    else
      v41 = v38;
    if (v39)
      v42 = v32 + 3;
    else
      v42 = v32 + 1;
    v43 = *(unsigned __int8 *)(v6 + v41);
    v44 = *(unsigned __int8 *)(v6 + v40);
    if (v44)
      v33 = v44;
    v75 = v33;
    if (v43)
      v35 = v43;
    v76 = v35;
    v72 = v42;
    if (v35 == 32)
    {
      if (v33 == 32)
      {
        if (v74 == 32)
          v45 = 1;
        else
          v45 = 2;
      }
      else
      {
        v45 = 3;
      }
    }
    else
    {
      v45 = 4;
    }
    v32 = v31;
    if (!v79[v73])
      continue;
    v32 = v31;
    if (!*((_BYTE *)v78 + v74))
      continue;
    v46 = *(unsigned __int8 *)(a3 + 2172);
    v32 = v31;
    if (v46 == 255)
      continue;
    v47 = 0;
    v48 = 0;
    do
    {
      v49 = (__int16)(v12 - v46);
      if (v49 > 1)
        break;
      if (v49 == 1 && *(unsigned __int8 *)a1 != v73)
        goto LABEL_68;
      v50 = *(unsigned __int8 *)(a3 + (v48 | 1) + 2172);
      v51 = a2[21];
      v52 = *(unsigned __int8 *)(v51 + v50);
      v53 = *(unsigned __int8 *)(a2[22] + v50);
      if (!*(_BYTE *)(v51 + v50))
      {
        if ((unsigned __int16)v49 == v45)
          goto LABEL_62;
        v54 = 0;
LABEL_54:
        v58 = v49 + (__int16)v54;
        if (v58 < v45)
        {
          v59 = v53 - v52;
          do
          {
            if (*(&v73 + v58) != a1[v59 + v58])
              break;
            v58 = v49 + (__int16)++v54;
          }
          while (v58 < v45);
        }
        if (v58 == v45)
          goto LABEL_62;
        goto LABEL_59;
      }
      if (v49 >= (__int16)v45)
      {
        v54 = 0;
        v55 = 0;
      }
      else
      {
        v54 = 0;
        v55 = 0;
        v56 = *(_QWORD *)(a2[19] + 8 * v50);
        v57 = v49;
        do
        {
          if (*(&v73 + v57) != *(unsigned __int8 *)(v56 + (__int16)v54))
            break;
          v55 = (__int16)++v54;
          v47 = 1;
          if ((__int16)v54 >= (int)v52)
            break;
          v57 = v49 + (__int16)v54;
        }
        while (v57 < v45);
      }
      if (v55 + v49 == v45)
        goto LABEL_62;
      if (v55 == v52)
        goto LABEL_54;
LABEL_59:
      v48 += 2;
      v46 = *(unsigned __int8 *)(a3 + v48 + 2172);
    }
    while (v46 != 255);
    v60 = v47;
    if (v47 == 1)
      goto LABEL_68;
    v32 = v31;
    if (!v60)
      continue;
LABEL_62:
    if (v35 != 32
      || (v61 = SFcorqbr(a2, a3, (uint64_t)&v73, (__int16)v45, (uint64_t)a1, v13, *(__int16 *)(a3 + 2162), *(__int16 *)(a3 + 2164), *(_DWORD *)(a3 + 2166), HIWORD(*(_DWORD *)(a3 + 2166))), v30 = v64, v17 = v65, v13 = v66, v12 = v67, v15 = v8, v16 = v68, v61 == 10))
    {
      if (*(__int16 *)(a3 + 2132) > 499)
        return 10;
      for (i = 0; i != 4; ++i)
        *(_BYTE *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v73 + i);
      ++*(_WORD *)(a3 + 2132);
    }
LABEL_68:
    v32 = v72;
  }
  while (v16 > v34);
  return 10;
}

uint64_t SFcor6qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  int v9;
  int v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  char *v20;
  int8x16_t v21;
  int64x2_t v22;
  int16x4_t v23;
  unsigned __int16 v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  int8x16_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  int64x2_t v37;
  char *v38;
  int64x2_t v39;
  int64x2_t v40;
  int16x4_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  int v44;
  unsigned __int8 *v46;
  int v47;
  int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned __int8 v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  unsigned __int16 v60;
  int v61;
  unsigned __int8 v62;
  int v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  __int16 v72;
  int v73;
  __int16 v74;
  __int16 v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  uint64_t v82;
  int v83;
  uint64_t i;
  unsigned int v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  int v94;
  unsigned __int8 v95;
  unsigned __int8 v96;
  char v97;
  char v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;

  v132 = *MEMORY[0x1E0C80C00];
  v5 = a2[7];
  v6 = a2[148];
  v92 = *(unsigned __int16 *)(a3 + 2134);
  v91 = *(unsigned __int16 *)(a3 + 2136);
  v7 = *(_WORD *)(a3 + 2138);
  v8 = *(_WORD *)(a3 + 2140);
  v9 = (__int16)strlen(a1);
  v10 = *(unsigned __int8 *)(a3 + 2172);
  v11 = *(unsigned __int8 *)a1;
  v12 = *(_DWORD *)(v5 + 4 * v11);
  if (v9 <= v10)
  {
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v13 = a2;
    v14 = v92;
    v15 = v91;
    if ((v12 & 0x10000000) == 0)
      goto LABEL_16;
  }
  else
  {
    v13 = a2;
    v14 = v92;
    v15 = v91;
    if ((v12 & 0x10000000) == 0)
      return 10;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v116 = 0u;
    v117 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
  }
  v16 = 0;
  v17 = vdupq_n_s64(v11);
  v18 = (int64x2_t)xmmword_1DE2EC810;
  v19 = (int64x2_t)xmmword_1DE2EC820;
  v20 = (char *)&v116 + 1;
  v21.i64[0] = 0x1000000010000000;
  v21.i64[1] = 0x1000000010000000;
  v22 = vdupq_n_s64(4uLL);
  do
  {
    v23 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v19, v17), (int32x4_t)vceqq_s64(v18, v17))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v16), v21))));
    if ((v23.i8[0] & 1) != 0)
      *(v20 - 1) = 1;
    if ((v23.i8[2] & 1) != 0)
      *v20 = 1;
    if ((v23.i8[4] & 1) != 0)
      v20[1] = 1;
    if ((v23.i8[6] & 1) != 0)
      v20[2] = 1;
    v18 = vaddq_s64(v18, v22);
    v19 = vaddq_s64(v19, v22);
    v20 += 4;
    v16 += 16;
  }
  while (v16 != 1024);
  *((_BYTE *)&v100 + *((unsigned __int8 *)a1 + 1)) = 1;
LABEL_16:
  v90 = (unsigned __int16)(v7 - 1);
  v24 = v7 - 1 + v14;
  if (v10 != 255 && v9 == v10)
  {
    v25 = 0;
    v26 = v13[21];
    v27 = v13[22];
    v28.i64[0] = 0x1000000010000000;
    v28.i64[1] = 0x1000000010000000;
    v29 = vdupq_n_s64(4uLL);
    v30 = v13[19];
    do
    {
      v31 = *(unsigned __int8 *)(a3 + (v25 | 1) + 2172);
      v32 = *(unsigned __int8 *)(v26 + v31);
      v33 = *(unsigned __int8 *)(v27 + v31);
      v34 = *(unsigned __int8 **)(v30 + 8 * v31);
      *((_BYTE *)&v116 + *v34) = 1;
      if (v33 == 1)
      {
        v35 = *((unsigned __int8 *)a1 + 1);
        if ((*(_DWORD *)(v5 + 4 * v35) & 0x10000000) != 0)
        {
          v36 = 0;
          v37 = vdupq_n_s64(v35);
          v38 = (char *)&v100 + 1;
          v39 = (int64x2_t)xmmword_1DE2EC820;
          v40 = (int64x2_t)xmmword_1DE2EC810;
          do
          {
            v41 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v39, v37), (int32x4_t)vceqq_s64(v40, v37))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v36), v28))));
            if ((v41.i8[0] & 1) != 0)
              *(v38 - 1) = 1;
            if ((v41.i8[2] & 1) != 0)
              *v38 = 1;
            if ((v41.i8[4] & 1) != 0)
              v38[1] = 1;
            if ((v41.i8[6] & 1) != 0)
              v38[2] = 1;
            v40 = vaddq_s64(v40, v29);
            v39 = vaddq_s64(v39, v29);
            v38 += 4;
            v36 += 16;
          }
          while (v36 != 1024);
        }
      }
      v42 = (unsigned __int8 *)&a1[v33];
      if (v32 == 1)
        v43 = v42;
      else
        v43 = v34 + 1;
      *((_BYTE *)&v100 + *v43) = 1;
      v25 += 2;
      v44 = *(unsigned __int8 *)(a3 + v25 + 2172);
    }
    while (v44 != 255 && v9 == v44);
  }
  v94 = v9;
  v99 = 0;
  v46 = (unsigned __int8 *)(v6 + (unsigned __int16)(v15 + v14));
  v47 = *v46;
  v48 = *(unsigned __int8 *)(v6 + v15);
  v49 = v46[1];
  v50 = *(unsigned __int8 *)(v15 + v6 + 1);
  v51 = (unsigned __int16)(v7 - 1);
  v52 = *(_BYTE *)(v6 + v24 + 1);
  v95 = *(_BYTE *)(v6 + (unsigned __int16)(v7 - 1) + 1);
  v96 = v52;
  if (v14 >= 2)
  {
    v53 = (unsigned __int16)(v8 - 1);
    v54 = (unsigned __int16)(v15 + v14);
    v55 = (unsigned __int16)(v7 - 1 + v14);
    v56 = (v49 | (v50 << 8)) - 1;
    v57 = (v47 | (v48 << 8)) - 1;
    v58 = (unsigned __int16)(v8 + 255);
    v59 = 32;
    v60 = 1;
    v61 = 32;
    v87 = v54;
    v88 = v53;
    v86 = v24;
    v89 = v58;
    do
    {
      if ((unsigned __int16)v57 >= (unsigned __int16)v56)
      {
        v62 = *(_BYTE *)(v6 + ++v60 + (unint64_t)v55);
        v95 = *(_BYTE *)(v6 + v60 + (unint64_t)v51);
        v96 = v62;
        v57 = v56;
        v56 = (*(unsigned __int8 *)(v6 + v60 + (unint64_t)v54) | (*(unsigned __int8 *)(v6 + v15 + v60) << 8)) - 1;
      }
      v63 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v57 + 1) - 1);
      v64 = (unsigned __int16)(v57 + 3) - 2;
      v65 = v63 == 255;
      if (v63 == 255)
      {
        v66 = (unsigned __int16)(v57 + 3) - 1;
      }
      else
      {
        v64 = (v63 + v53);
        v66 = (v63 + v58);
      }
      v67 = *(unsigned __int8 *)(v6 + v66);
      if (v65)
        v57 += 3;
      else
        ++v57;
      v68 = *(unsigned __int8 *)(v6 + v64);
      v69 = *(unsigned __int16 *)(a3 + 2152);
      if (*(__int16 *)(a3 + 2152) >= 1)
      {
        v70 = *(unsigned __int8 *)a1;
        if (v95 < v70)
          goto LABEL_77;
        if (v95 > v70)
          return 10;
        v71 = *((unsigned __int8 *)a1 + 1);
        if (v69 < 2)
        {
          if (v96 == v71)
            goto LABEL_77;
        }
        else
        {
          if (v96 < v71)
            goto LABEL_77;
          if (v96 > v71)
            return 10;
        }
      }
      if (v68)
        v59 = v68;
      v97 = v59;
      if (v67)
        v61 = v67;
      v98 = v61;
      if (!v69
        && v95 == *(unsigned __int8 *)a1
        && v96 == *((unsigned __int8 *)a1 + 1)
        && v59 == *((unsigned __int8 *)a1 + 2))
      {
        continue;
      }
      if (v61 == 32)
      {
        if (v59 == 32)
        {
          if (v96 == 32)
            v72 = 1;
          else
            v72 = 2;
        }
        else
        {
          v72 = 3;
        }
      }
      else
      {
        v72 = 4;
      }
      if (!*((_BYTE *)&v116 + v95) || !*((_BYTE *)&v100 + v96))
      {
LABEL_77:
        v57 = v56;
        continue;
      }
      if ((*(_DWORD *)(v5 + 4 * v95) & 0x10000000) == 0
        || (*(_DWORD *)(v5 + 4 * *(unsigned __int8 *)a1) & 0x10000000) == 0)
      {
        v73 = *(unsigned __int8 *)(a3 + 2172);
        if (v73 == 255)
          goto LABEL_76;
        v74 = 0;
        v75 = 0;
        do
        {
          v76 = (__int16)(v94 - v73);
          if (v76 > 1)
            break;
          if (v76 == 1 && *(unsigned __int8 *)a1 != v95)
            goto LABEL_101;
          v77 = 0;
          v78 = v13[21];
          v79 = *(unsigned __int8 *)(a3 + (v75 | 1) + 2172);
          v80 = *(unsigned __int8 *)(v78 + v79);
          if (*(_BYTE *)(v78 + v79) && v76 < v72)
          {
            v81 = 0;
            v77 = 0;
            v82 = *(_QWORD *)(v13[19] + 8 * v79);
            v83 = v76;
            do
            {
              if (*(&v95 + v83) != *(unsigned __int8 *)(v82 + v81))
                break;
              v77 = ++v81;
              v74 = 1;
              if (v81 >= v80)
                break;
              v83 = v76 + v81;
            }
            while (v83 < (unsigned __int16)v72);
          }
          if (v77 == v80 || v77 + v76 == (unsigned __int16)v72)
            goto LABEL_95;
          v75 += 2;
          v73 = *(unsigned __int8 *)(a3 + v75 + 2172);
        }
        while (v73 != 255);
        if (v74 == 1)
          goto LABEL_101;
        if (!v74)
        {
LABEL_76:
          v57 = v56;
LABEL_101:
          v58 = v89;
          continue;
        }
      }
LABEL_95:
      if (SFcorqbr(v13, a3, (uint64_t)&v95, v72, (uint64_t)a1, v94, *(__int16 *)(a3 + 2144), *(__int16 *)(a3 + 2146), *(_DWORD *)(a3 + 2148), HIWORD(*(_DWORD *)(a3 + 2148))) != 10)
      {
        v13 = a2;
        v14 = v92;
        v15 = v91;
        v51 = v90;
        v54 = v87;
        v53 = v88;
        v55 = v86;
        goto LABEL_101;
      }
      v13 = a2;
      v14 = v92;
      v15 = v91;
      v58 = v89;
      v51 = v90;
      v54 = v87;
      v53 = v88;
      v55 = v86;
      if (*(__int16 *)(a3 + 2132) > 499)
        return 10;
      for (i = 0; i != 4; ++i)
        *(_BYTE *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v95 + i);
      ++*(_WORD *)(a3 + 2132);
    }
    while (v14 > v60);
  }
  return 10;
}

uint64_t SFcor8qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  __int16 v9;
  unsigned __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unsigned __int16 v33;
  int v34;
  int v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  int v48;
  int v49;
  int v50;
  uint64_t i;
  __int16 v52;
  unsigned __int16 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;
  int v59;
  int v60;
  unint64_t v61;
  unsigned int v63;
  unsigned int v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  _OWORD v70[2];
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[264];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = a2[148];
  v7 = *(unsigned __int16 *)(a3 + 2134);
  v8 = *(unsigned __int16 *)(a3 + 2136);
  v9 = *(_WORD *)(a3 + 2140);
  v64 = (unsigned __int16)(*(_WORD *)(a3 + 2138) - 1);
  v10 = *(_WORD *)(a3 + 2138) - 1 + v7;
  v11 = strlen(a1);
  memset(v85, 0, 256);
  memset(v70, 0, sizeof(v70));
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v79 = 0u;
  v80 = 0u;
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v12 = *((unsigned __int8 *)a1 + 1);
  *((_BYTE *)v70 + v12) = 1;
  v13 = *(unsigned __int8 *)a1;
  v85[v13] = 1;
  *((_BYTE *)v70 + *((unsigned __int8 *)a1 + 2)) = 1;
  v85[v12] = 1;
  BYTE14(v71) = 1;
  v14 = *(unsigned __int8 *)(a3 + 2172);
  if (v14 != 255)
  {
    v15 = 0;
    do
    {
      if (v14 == v11)
      {
        v16 = *(unsigned __int8 *)(a3 + (v15 | 1) + 2172);
        v17 = *(unsigned __int8 *)(a2[21] + v16);
        v18 = *(unsigned __int8 *)(a2[22] + v16);
        v19 = *(unsigned __int8 **)(a2[19] + 8 * v16);
        v85[*v19] = 1;
        if (v17 == 1)
          v20 = (unsigned __int8 *)&a1[v18];
        else
          v20 = v19 + 1;
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1)
          break;
        v85[v13] = 1;
        v20 = *(unsigned __int8 **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v15 | 1) + 2172));
      }
      *((_BYTE *)v70 + *v20) = 1;
      v15 += 2;
      v14 = *(unsigned __int8 *)(a3 + v15 + 2172);
    }
    while (v14 != 255);
  }
  v69 = 0;
  v21 = (unsigned __int8 *)(v6 + (unsigned __int16)(v8 + v7));
  v22 = *v21;
  v23 = *(unsigned __int8 *)(v6 + v8);
  v24 = v21[1];
  v25 = *(unsigned __int8 *)(v8 + v6 + 1);
  v26 = *(unsigned __int8 *)(v6 + v64 + 1);
  v27 = *(unsigned __int8 *)(v6 + v10 + 1);
  v65 = *(_BYTE *)(v6 + v64 + 1);
  v66 = v27;
  if (v7 < 2)
    return 10;
  v28 = (unsigned __int16)(v9 - 1);
  v63 = v10;
  v29 = (v24 | (v25 << 8)) - 1;
  v30 = (v22 | (v23 << 8)) - 1;
  v31 = (unsigned __int16)(v9 + 255);
  v32 = 32;
  v33 = 1;
  v34 = 32;
  while (1)
  {
    if ((unsigned __int16)v30 >= (unsigned __int16)v29)
    {
      v26 = *(unsigned __int8 *)(v6 + ++v33 + (unint64_t)v64);
      v27 = *(unsigned __int8 *)(v6 + v33 + (unint64_t)v63);
      v65 = *(_BYTE *)(v6 + v33 + (unint64_t)v64);
      v66 = v27;
      v30 = v29;
      v29 = (*(unsigned __int8 *)(v6 + v33 + (unint64_t)(unsigned __int16)(v8 + v7)) | (*(unsigned __int8 *)(v6 + v8 + v33) << 8))
          - 1;
    }
    v35 = *(unsigned __int8 *)(v6 + (unsigned __int16)(v30 + 1) - 1);
    v36 = (v35 + v31);
    v37 = v35 == 255;
    if (v35 == 255)
      v38 = (unsigned __int16)(v30 + 3) - 2;
    else
      v38 = (v35 + v28);
    if (v37)
      v39 = (unsigned __int16)(v30 + 3) - 1;
    else
      v39 = v36;
    if (v37)
      v40 = v30 + 3;
    else
      v40 = v30 + 1;
    v41 = *(unsigned __int8 *)(v6 + v39);
    v42 = *(unsigned __int8 *)(v6 + v38);
    if (v42)
      v32 = v42;
    v67 = v32;
    if (v41)
      v34 = v41;
    v68 = v34;
    if (v34 == 32)
    {
      if (v32 == 32)
        v43 = v27 == 32 ? 1 : 2;
      else
        v43 = 3;
    }
    else
    {
      v43 = 4;
    }
    v30 = v29;
    if (v85[v26])
    {
      v30 = v29;
      if (*((_BYTE *)v70 + v27))
        break;
    }
LABEL_57:
    if (v7 <= v33)
      return 10;
  }
  v44 = *(unsigned __int8 *)(a3 + 2172);
  if (v44 == 255)
  {
LABEL_37:
    if (v43 + 1 == v11)
    {
      v45 = 0;
      v46 = 0;
      while (1)
      {
        if (a1[v45] == *(&v65 + v46))
        {
          ++v46;
        }
        else
        {
          if (v43 == v46)
            goto LABEL_53;
          v37 = v45 == v46;
          v46 = v45;
          if (!v37)
            break;
        }
        ++v45;
      }
    }
    v47 = 0;
    v48 = 0;
    while (1)
    {
      v49 = a1[(__int16)v48];
      v50 = *(&v65 + v47);
      if (v49 == v50)
        break;
      if (v49 != 46)
      {
        if (v50 != 46)
        {
          v30 = v40;
          goto LABEL_57;
        }
        goto LABEL_51;
      }
      ++v48;
LABEL_52:
      if (v43 == v47)
        goto LABEL_53;
    }
    ++v48;
LABEL_51:
    ++v47;
    goto LABEL_52;
  }
  v52 = 0;
  while (1)
  {
    v53 = v11 - v44;
    if (v53 > 1u)
      goto LABEL_37;
    v54 = (__int16)v53;
    if (v53 == 1 && *(unsigned __int8 *)a1 != v26)
      goto LABEL_37;
    v55 = *(unsigned __int8 *)(a3 + (v52 | 1) + 2172);
    v56 = a2[21];
    v57 = *(unsigned __int8 *)(v56 + v55);
    if (!*(_BYTE *)(v56 + v55))
      break;
    v58 = 0;
    v59 = 0;
    do
    {
      if (v58 + v54 >= v43)
        break;
      if (*(&v65 + v58 + v54) != *(_BYTE *)(*(_QWORD *)(a2[19] + 8 * v55) + (__int16)v59))
        break;
      v58 = (__int16)++v59;
    }
    while ((__int16)v59 < (int)v57);
    if (v58 + v54 == v43)
      goto LABEL_53;
    if (v58 == v57)
      goto LABEL_73;
LABEL_78:
    v52 += 2;
    v44 = *(unsigned __int8 *)(a3 + v52 + 2172);
    if (v44 == 255)
      goto LABEL_37;
  }
  if (v43 == v54)
    goto LABEL_53;
  v59 = 0;
LABEL_73:
  v60 = v54 + (__int16)v59;
  if (v60 < v43)
  {
    v61 = *(unsigned __int8 *)(a2[22] + v55) - (unint64_t)v57;
    do
    {
      if (*(&v65 + v60) != a1[v61 + v60])
        break;
      v60 = v54 + (__int16)++v59;
    }
    while (v60 < v43);
  }
  if (v60 != v43)
    goto LABEL_78;
LABEL_53:
  if (*(__int16 *)(a3 + 2132) <= 499)
  {
    for (i = 0; i != 4; ++i)
      *(_BYTE *)(a3 + 128 + 4 * *(__int16 *)(a3 + 2132) + i) = *(&v65 + i);
    ++*(_WORD *)(a3 + 2132);
    v30 = v40;
    goto LABEL_57;
  }
  return 10;
}

uint64_t SFcorbr8(_QWORD *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, int a6)
{
  _QWORD *v10;
  uint64_t v11;
  int v12;
  unsigned __int16 v13;
  int v14;
  int v15;
  unsigned __int16 v16;
  int v17;
  int v18;
  __int16 v20;
  unint64_t v21;
  int v22;
  int v23;
  unint64_t *v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  BOOL v28;
  unint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;

  if ((a6 | a4) < 0)
    return 0;
  v10 = a1;
  if (a4 < 1)
  {
LABEL_6:
    LOWORD(v11) = 0;
  }
  else
  {
    v11 = 0;
    while (*(unsigned __int8 *)(a3 + v11) == *(unsigned __int8 *)(a5 + v11))
    {
      if ((unsigned __int16)a4 == ++v11)
        goto LABEL_6;
    }
  }
  v12 = *(unsigned __int8 *)(a2 + 2172);
  if (v12 != 255)
  {
    v20 = 0;
    v21 = a3 + a4 + 1;
    v22 = a4 + 1;
    v34 = a4 + 1;
    do
    {
      v23 = (__int16)(a6 - v12);
      if (v23 > (__int16)v11)
        break;
      v24 = *(unint64_t **)(a2 + 32);
      if (v24)
      {
        v25 = *(unsigned __int8 *)(a2 + (v20 | 1) + 2172);
        v26 = *(unsigned __int8 *)(v10[21] + v25);
        v27 = *v24;
        v28 = v27 > a3 || v21 > v27 + 455;
        if (!v28 && (int)(v26 + v23) <= v22)
        {
          v33 = *(unsigned __int8 *)(v10[22] + v25);
          v30 = v21;
          v31 = SLstrncmp((_BYTE *)(a3 + v23), *(unsigned __int8 **)(v10[19] + 8 * v25), v26);
          v22 = v34;
          v21 = v30;
          v10 = a1;
          if (!v31)
          {
            v32 = SLstrcmp((_BYTE *)(a3 + v23 + v26), (unsigned __int8 *)(a5 + v23 + v33));
            v22 = v34;
            v21 = v30;
            v10 = a1;
            if (!v32)
              return 1;
          }
        }
      }
      v20 += 2;
      v12 = *(unsigned __int8 *)(a2 + v20 + 2172);
    }
    while (v12 != 255);
  }
  if (a6 - 1 != a4)
  {
LABEL_16:
    v15 = 0;
    v16 = 0;
    while (1)
    {
      if (v16 == (unsigned __int16)a6 && (unsigned __int16)v15 == (unsigned __int16)a4)
        return 1;
      v17 = *(unsigned __int8 *)(a3 + (__int16)v15);
      v18 = *(unsigned __int8 *)(a5 + (__int16)v16);
      if (v17 == v18)
        break;
      if (v17 != 46)
      {
        if (v18 != 46)
          return 0;
        goto LABEL_24;
      }
      ++v15;
LABEL_25:
      if (a6 < (__int16)v16)
        return 0;
    }
    ++v15;
LABEL_24:
    ++v16;
    goto LABEL_25;
  }
  v13 = 0;
  LOWORD(v14) = 0;
  while ((unsigned __int16)v14 != (unsigned __int16)a6 || v13 != (unsigned __int16)a4)
  {
    if (*(unsigned __int8 *)(a3 + (__int16)v13) == *(unsigned __int8 *)(a5 + (__int16)v14))
    {
      ++v13;
    }
    else if (v13 != (unsigned __int16)v14)
    {
      goto LABEL_16;
    }
    v14 = (__int16)(v14 + 1);
    if (v14 > a6)
      goto LABEL_16;
  }
  return 1;
}

uint64_t SFcorbru(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, unsigned __int16 a6, unsigned int a7, unsigned int a8, int a9, __int16 a10)
{
  __int16 v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  __int16 v59;
  unsigned int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  BOOL v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v79;
  char v81;

  v13 = 0;
  v14 = a10;
  v79 = (unsigned __int16)a7 + 0xFFFF;
  v73 = a1[7];
  v72 = (unsigned __int16)a8 + 0xFFFF;
  v74 = HIWORD(v79) & HIWORD(v72);
  v75 = HIWORD(v79) & (((unsigned __int16)a9 + 0xFFFF) >> 16);
LABEL_2:
  v15 = 0;
  v16 = -(uint64_t)v13;
  v17 = (__int16)(a4 - a6);
  if (v17 >= 0)
    v18 = (__int16)(a4 - a6);
  else
    v18 = -v17;
  v19 = 1;
  v76 = v18;
  while (1)
  {
    v20 = (__int16)a6;
    v21 = (__int16)a4;
    if ((a6 & 0x8000) != 0 || (a4 & 0x8000) != 0)
    {
      if ((v19 & (v13 != 0)) != 1)
        return 0;
      goto LABEL_108;
    }
    if (v18 > v14)
    {
      if ((v19 & (v13 != 0)) == 0)
        return 0;
      goto LABEL_108;
    }
    LOWORD(v22) = 0;
    v23 = a4 != 0;
    v24 = a6 != 0;
    if (a4 && a6)
    {
      LOWORD(v22) = 0;
      while (*(unsigned __int8 *)(a3 + (unsigned __int16)v22) == *(unsigned __int8 *)(a5 + (unsigned __int16)v22))
      {
        v22 = (__int16)(v22 + 1);
        v24 = v22 < (__int16)a6;
        v23 = v22 < (__int16)a4;
        if (v22 >= (__int16)a4 || v22 >= (__int16)a6)
          goto LABEL_21;
      }
      v23 = 1;
      v24 = 1;
    }
LABEL_21:
    if (a4 == (unsigned __int16)v22 && a6 == (unsigned __int16)v22)
      return 1;
    v25 = (__int16)v22;
    v81 = v19;
    if (a7)
    {
      if (v23 && v24)
      {
        if (a8)
        {
          v26 = (unsigned __int8 *)(a3 + (__int16)v22);
          if ((*(_DWORD *)(v73 + 4 * *v26) & 0x10000000) != 0)
          {
            v27 = (unsigned __int8 *)(a5 + v25);
            if ((*(_DWORD *)(v73 + 4 * *v27) & 0x10000000) != 0)
            {
              v28 = (uint64_t)(v26 + 1);
              v29 = (uint64_t)(v27 + 1);
              WORD2(v71) = a10;
              v30 = (__int16)(a4 + ~(_WORD)v25);
              v31 = (__int16)(a6 + ~(_WORD)v25);
              LODWORD(v71) = a9;
              v33 = (__int16)v79;
              v32 = (__int16)v72;
              goto LABEL_42;
            }
          }
        }
        if ((_WORD)a9)
        {
          v28 = a3 + v25 + 1;
          v29 = a5 + v25 + 1;
          WORD2(v71) = a10;
          WORD1(v71) = HIWORD(a9);
          v30 = (__int16)(a4 + ~(_WORD)v25);
          v31 = (__int16)(a6 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          v32 = a8;
          v33 = (__int16)v79;
LABEL_42:
          if (SFcorbru(a1, a2, v28, v30, v29, v31, v33, v32, v71))
            return 1;
        }
      }
LABEL_43:
      if ((v15 & 1) == 0)
      {
        v42 = v25 + 1;
        if ((int)v42 < v21
          && (int)v42 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2154) != 4)
        {
          v68 = 2;
          goto LABEL_110;
        }
        v43 = v25 + 2;
        if (v25 + 2 < v21
          && (int)v43 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v43)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v43) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2154) != 4)
        {
          v68 = 3;
LABEL_110:
          v14 = a10;
          v69 = v25 + (unint64_t)v68;
          a3 += v69;
          a4 = v21 - v69;
          a5 += v69;
          a6 = v20 - v69;
          v13 += v69;
          goto LABEL_2;
        }
      }
      if (v23)
      {
        if (v25 || *(__int16 *)(a2 + 2158) > v21)
        {
          v36 = (unsigned __int8 *)(a3 + v25);
          if (*v36 == *(v36 - 1))
          {
            v37 = (uint64_t)(v36 + 1);
            v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            v39 = (__int16)(v20 - v25);
            v40 = (__int16)(v21 + ~(_WORD)v25);
            v41 = a7;
            LODWORD(v71) = a9;
            goto LABEL_65;
          }
        }
        if (v74)
        {
          v44 = (unsigned __int8 *)(a3 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v44) & 0x10000000) != 0)
          {
            v37 = (uint64_t)(v44 + 1);
            v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            v39 = (__int16)(v20 - v25);
            v40 = (__int16)(v21 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            v41 = (__int16)v79;
            v47 = (__int16)v72;
            v45 = a1;
            v46 = a2;
            goto LABEL_67;
          }
        }
        if (v75)
        {
          v37 = a3 + v25 + 1;
          v38 = a5 + v25;
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          v39 = (__int16)(v20 - v25);
          v40 = (__int16)(v21 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          v41 = (__int16)v79;
LABEL_65:
          v45 = a1;
          v46 = a2;
          v47 = a8;
LABEL_67:
          if (SFcorbru(v45, v46, v37, v40, v38, v39, v41, v47, v71))
            return 1;
        }
      }
      v14 = a10;
      if (v24)
      {
        if ((v25 || *(__int16 *)(a2 + 2160) > v20) && (v48 = (unsigned __int8 *)(a5 + v25), *v48 == *(v48 - 1)))
        {
          v49 = a3 + v25;
          v50 = v48 + 1;
          WORD2(v71) = a10 - 1;
          v51 = (__int16)(v21 - v25);
          v52 = (__int16)(v20 + ~(_WORD)v25);
          v53 = a7;
          LODWORD(v71) = a9;
          v54 = a1;
          v55 = a2;
          v56 = a8;
LABEL_76:
          if (SFcorbru(v54, v55, v49, v51, v50, v52, v53, v56, v71))
            return 1;
        }
        else if (v74)
        {
          v57 = (unsigned __int8 *)(a5 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v57) & 0x10000000) != 0)
          {
            v49 = a3 + v25;
            v50 = v57 + 1;
            WORD2(v71) = a10 - 1;
            v51 = (__int16)(v21 - v25);
            v52 = (__int16)(v20 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            v53 = (__int16)v79;
            v56 = (__int16)v72;
            v54 = a1;
            v55 = a2;
            goto LABEL_76;
          }
        }
        if (v75)
        {
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          LOWORD(v71) = a9 - 1;
          if (SFcorbru(a1, a2, a3 + v25, (__int16)(v21 - v25), a5 + v25 + 1, (__int16)(v20 + ~(_WORD)v25), (__int16)v79, a8, v71))return 1;
        }
      }
      if ((HIWORD(v79) & ((HIWORD(a9) + 0xFFFF) >> 16)) != 0)
      {
        v58 = *(unsigned __int8 *)(a2 + 2172);
        if (v58 != 255)
        {
          v59 = 0;
          while (1)
          {
            v60 = (__int16)(v20 - v58);
            if (((v20 - v58) & 0x8000) != 0 || (int)v60 > v25)
            {
              if ((int)v60 > v25)
                goto LABEL_106;
              goto LABEL_105;
            }
            v61 = *(unsigned __int8 *)(a2 + (v59 | 1) + 2172);
            v62 = *(unsigned __int8 **)(a1[19] + 8 * v61);
            if (*v62 == *(unsigned __int8 *)(a3 + (unsigned __int16)(v20 - v58)))
              break;
LABEL_105:
            v59 += 2;
            v58 = *(unsigned __int8 *)(a2 + v59 + 2172);
            if (v58 == 255)
              goto LABEL_106;
          }
          v63 = *(unsigned __int8 *)(a1[21] + v61);
          if (v63 != 2)
          {
            if (v63 != 3)
            {
              if (v63 != 4)
              {
LABEL_91:
                v64 = *(unsigned __int8 *)(a1[22] + v61);
                if (*(_WORD *)(a2 + 2)
                  || ((_DWORD)v64 + v60 == v20 ? (v65 = 1) : (v65 = 2),
                      *(unsigned __int16 *)(a2 + 2160) == (unsigned __int16)v20
                    ? (v66 = v20 == v58)
                    : (v66 = 0),
                      !v66 ? (v67 = v65) : (v67 = 4),
                      (v67 & *((_BYTE *)a1 + v61 + 183)) != 0))
                {
                  WORD2(v71) = a10;
                  LODWORD(v71) = a9 - 0x10000;
                  if (SFcorbru(a1, a2, a3 + v60 + v63, (__int16)(v21 - v60 - v63), a5 + v60 + v64, v58 - v64, (__int16)v79, a8, v71))return 1;
                }
                goto LABEL_105;
              }
              if (v62[3] != *(unsigned __int8 *)(a3 + v60 + 3))
                goto LABEL_105;
            }
            if (v62[2] != *(unsigned __int8 *)(a3 + v60 + 2))
              goto LABEL_105;
          }
          if (v62[1] != *(unsigned __int8 *)(a3 + v60 + 1))
            goto LABEL_105;
          goto LABEL_91;
        }
      }
LABEL_106:
      v35 = v81 & (v13 != 0);
      goto LABEL_107;
    }
    if ((!v24 || *(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a5 + (__int16)v22 + 1))
      && (!v23 || *(unsigned __int8 *)(a3 + (__int16)v22 + 1) == *(unsigned __int8 *)(a5 + (__int16)v22)))
    {
      goto LABEL_43;
    }
    if (!(_WORD)v22 && *(__int16 *)(a2 + 2158) <= (__int16)a4)
      goto LABEL_43;
    v34 = (__int16)v22 - 1;
    if (*(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a3 + v34)
      || !(_WORD)v22 && *(__int16 *)(a2 + 2160) <= (__int16)a6)
    {
      goto LABEL_43;
    }
    if (*(unsigned __int8 *)(a5 + (__int16)v22) == *(unsigned __int8 *)(a5 + v34))
      goto LABEL_43;
    v35 = v19 & (v13 != 0);
    v14 = a10;
LABEL_107:
    v16 = -(uint64_t)v13;
    v18 = v76;
    if ((v35 & 1) == 0)
      return 0;
LABEL_108:
    v19 = 0;
    a3 += v16;
    a5 += v16;
    a4 = v13 + v21;
    a6 = v13 + v20;
    v15 = 1;
  }
}

void sub_1DE244698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t SFcorqbr(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, __int16 a9, __int16 a10)
{
  _QWORD *v16;
  int v17;
  _BOOL4 v18;
  _BOOL4 v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  _BOOL4 v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  int v49;
  _BOOL4 v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  _BOOL4 v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  unsigned __int8 *v77;
  int v78;
  int v79;
  uint64_t v80;
  char v81;
  BOOL v82;
  char v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  __int16 v120;
  uint64_t v121;
  unsigned int v122;

  if (a4 < 1)
    return 10;
  v16 = a1;
  if (a6 < 1)
  {
    LOWORD(v17) = 0;
    v18 = 0;
    v19 = 1;
  }
  else
  {
    LOWORD(v17) = 0;
    while (*(unsigned __int8 *)(a3 + (unsigned __int16)v17) == *(unsigned __int8 *)(a5 + (unsigned __int16)v17))
    {
      v17 = (__int16)(v17 + 1);
      v18 = v17 < a6;
      v19 = v17 < a4;
      if (v17 >= a4 || v17 >= a6)
        goto LABEL_11;
    }
    v19 = 1;
    v18 = 1;
  }
LABEL_11:
  v21 = a1[7];
  v22 = (__int16)v17;
  v23 = (unsigned __int8 *)(a3 + (__int16)v17);
  v24 = *v23;
  if ((_DWORD)v24 == 32)
  {
    if (a6 == (__int16)v17)
      return 10;
  }
  else if (!v19)
  {
    return 10;
  }
  if (!(_DWORD)a7)
    return 11;
  v25 = a10;
  v26 = a9;
  v27 = (__int16)v17;
  if (v19 && v18)
  {
    if (a8
      && (*(_DWORD *)(v21 + 4 * v24) & 0x10000000) != 0
      && (*(_DWORD *)(v21 + 4 * *(unsigned __int8 *)(a5 + (__int16)v17)) & 0x10000000) != 0)
    {
      v108 = v16[7];
      v113 = (__int16)v17;
      HIWORD(v87) = a10;
      LOWORD(v87) = 0;
      v96 = a7;
      v118 = (unsigned __int8 *)(a3 + (__int16)v17);
      v101 = v16;
      v94 = (__int16)v17;
      v33 = SFcorqbr(v16, a2, v23 + 1, (__int16)(~(_WORD)v17 + a4), a5 + (__int16)v17 + 1, (__int16)(~(_WORD)v17 + a6), (__int16)(a7 - 1), (__int16)(a8 - 1), v87);
      v26 = a9;
      v21 = v108;
      v22 = v113;
      v25 = a10;
      a7 = v96;
      v27 = v94;
      v16 = v101;
      v82 = v33 == 10;
      v23 = v118;
      if (v82)
        return 10;
    }
    else if (a9)
    {
      v28 = (__int16)(~(_WORD)v17 + a4);
      if (v28 < 1)
        return 10;
      v29 = v23 + 1;
      v30 = (__int16)(~(_WORD)v17 + a6);
      if (v30 < 1)
      {
        LOWORD(v31) = 0;
      }
      else
      {
        LOWORD(v31) = 0;
        while (v29[(unsigned __int16)v31] == *(unsigned __int8 *)(a5 + v22 + 1 + (unsigned __int16)v31))
        {
          v31 = (__int16)(v31 + 1);
          v32 = v31 < v28;
          if (v31 >= v28 || v31 >= v30)
            goto LABEL_33;
        }
      }
      v32 = 1;
LABEL_33:
      if (v29[(__int16)v31] == 32)
      {
        if ((unsigned __int16)v31 == (unsigned __int16)v30)
          return 10;
      }
      else if (!v32)
      {
        return 10;
      }
    }
  }
  v119 = v23;
  v121 = a2;
  v122 = a8;
  v34 = v22 + 1;
  v35 = *(unsigned __int8 *)(a5 + v22 + 1);
  if ((_DWORD)v24 == v35 && *(unsigned __int8 *)(a3 + v34) == *(unsigned __int8 *)(a5 + v22))
  {
    v109 = v21;
    v114 = v22;
    HIWORD(v88) = v25;
    LOWORD(v88) = v26;
    v104 = v26;
    v36 = a7;
    v102 = v16;
    v95 = v27;
    v97 = v25;
    v37 = SFcorqbr(v16, v121, v23 + 2, (__int16)(a4 - v22 - 2), a5 + v22 + 2, (__int16)(a6 - v27 - 2), a7, v122, v88);
    v26 = v104;
    v21 = v109;
    v22 = v114;
    v25 = v97;
    a7 = v36;
    v27 = v95;
    v16 = v102;
    v82 = v37 == 10;
    v23 = v119;
    if (v82)
      return 10;
  }
  v38 = v22 + 2;
  if ((int)v22 + 2 > a4)
    goto LABEL_48;
  if ((int)v38 > a6)
    goto LABEL_48;
  if ((_DWORD)v24 != *(unsigned __int8 *)(a5 + v38))
    goto LABEL_48;
  if (*(unsigned __int8 *)(a3 + v34) != v35)
    goto LABEL_48;
  if (a6 < 3)
    goto LABEL_48;
  if (a4 < 3)
    goto LABEL_48;
  if (*(unsigned __int8 *)(a3 + v38) != *(unsigned __int8 *)(a5 + v22))
    goto LABEL_48;
  v110 = v21;
  v115 = v22;
  HIWORD(v89) = v25;
  LOWORD(v89) = v26;
  v105 = v26;
  v39 = a7;
  v40 = v16;
  v41 = v27;
  v98 = v25;
  result = SFcorqbr(v16, v121, v23 + 3, (__int16)(a4 - v22 - 3), a5 + v22 + 3, (__int16)(a6 - v27 - 3), a7, v122, v89);
  v26 = v105;
  v21 = v110;
  v22 = v115;
  v25 = v98;
  a7 = v39;
  v27 = v41;
  v16 = v40;
  if ((_DWORD)result != 10)
  {
LABEL_48:
    v42 = v122;
    if (v19)
    {
      if ((int)v27 >= 1 && (v43 = a3 + v27, (_DWORD)v24 == *(unsigned __int8 *)(v43 - 1)))
      {
        v111 = v21;
        v116 = v22;
        HIWORD(v90) = v25;
        LOWORD(v90) = 0;
        v106 = v26;
        v44 = a7;
        v103 = v16;
        v45 = v27;
        v99 = v25;
        result = SFcorqbr(v16, v121, v43 + 1, (__int16)(~(_WORD)v22 + a4), a5 + v27, (__int16)(a6 - v27), a7, v122, v90);
        v26 = v106;
        v21 = v111;
        v22 = v116;
        v42 = v122;
        v25 = v99;
        a7 = v44;
        v27 = v45;
        v16 = v103;
      }
      else
      {
        if (!v122 || (*(_DWORD *)(v21 + 4 * v24) & 0x10000000) == 0)
        {
          if (v26)
          {
            v46 = (__int16)(~(_WORD)v22 + a4);
            if (v46 < 1)
              return 10;
            v47 = v119 + 1;
            v48 = (__int16)(a6 - v27);
            if (v48 < 1)
            {
              LOWORD(v49) = 0;
            }
            else
            {
              LOWORD(v49) = 0;
              while (v47[(unsigned __int16)v49] == *(unsigned __int8 *)(a5 + v22 + (unsigned __int16)v49))
              {
                v49 = (__int16)(v49 + 1);
                v50 = v49 < v46;
                if (v49 >= v46 || v49 >= v48)
                  goto LABEL_111;
              }
            }
            v50 = 1;
LABEL_111:
            if (v47[(__int16)v49] == 32)
            {
              if ((unsigned __int16)v49 == (unsigned __int16)v48)
                return 10;
            }
            else if (!v50)
            {
              return 10;
            }
          }
          goto LABEL_64;
        }
        v112 = v21;
        v117 = v22;
        HIWORD(v91) = v25;
        LOWORD(v91) = 0;
        v107 = v26;
        v100 = a7;
        v51 = v16;
        v52 = v27;
        v53 = v25;
        result = SFcorqbr(v16, v121, v119 + 1, (__int16)(~(_WORD)v22 + a4), a5 + v22, (__int16)(a6 - v27), (__int16)(a7 - 1), (__int16)(v122 - 1), v91);
        v26 = v107;
        v21 = v112;
        v22 = v117;
        v42 = v122;
        v25 = v53;
        a7 = v100;
        v27 = v52;
        v16 = v51;
      }
      if ((_DWORD)result == 10)
        return result;
    }
LABEL_64:
    if (!v18)
      goto LABEL_80;
    if ((int)v22 >= 1)
    {
      v54 = a5 + v27;
      if (*(unsigned __int8 *)(a5 + v22) == *(unsigned __int8 *)(v54 - 1))
      {
        v55 = (unsigned __int8 *)(a3 + v27);
        v56 = v54 + 1;
        HIWORD(v92) = v25;
        LOWORD(v92) = 0;
        v57 = (__int16)(a4 - v27);
        v58 = (__int16)(~(_WORD)v22 + a6);
        v59 = v42;
        v60 = (__int16)(v42 - 1);
        v61 = v16;
        v62 = v121;
        v63 = a7;
        goto LABEL_79;
      }
    }
    if ((_DWORD)v42 && (*(_DWORD *)(v21 + 4 * *(unsigned __int8 *)(a5 + v22)) & 0x10000000) != 0)
    {
      v56 = a5 + v22 + 1;
      HIWORD(v92) = v25;
      LOWORD(v92) = 0;
      v57 = (__int16)(a4 - v27);
      v58 = (__int16)(~(_WORD)v22 + a6);
      v63 = a7;
      a7 = (__int16)(a7 - 1);
      v59 = v42;
      v60 = (__int16)(v42 - 1);
      v61 = v16;
      v62 = v121;
      v55 = v119;
LABEL_79:
      v69 = v16;
      v70 = v27;
      v71 = v25;
      result = SFcorqbr(v61, v62, v55, v57, v56, v58, a7, v60, v92);
      v42 = v59;
      v25 = v71;
      LOWORD(a7) = v63;
      v27 = v70;
      v16 = v69;
      if ((_DWORD)result == 10)
        return result;
      goto LABEL_80;
    }
    if (!v26)
      goto LABEL_80;
    v64 = (__int16)(a4 - v27);
    if (v64 >= 1)
    {
      v65 = (__int16)(~(_WORD)v22 + a6);
      if (v65 < 1)
      {
        LOWORD(v66) = 0;
      }
      else
      {
        LOWORD(v66) = 0;
        while (1)
        {
          LODWORD(v24) = v119[(unsigned __int16)v66];
          if ((_DWORD)v24 != *(unsigned __int8 *)(a5 + v22 + 1 + (unsigned __int16)v66))
            break;
          v67 = (unsigned __int16)v66 + 1;
          v66 = (__int16)(v66 + 1);
          v68 = v66 < v64;
          if (v66 >= v64 || v66 >= v65)
          {
            LODWORD(v24) = v119[v67];
            goto LABEL_118;
          }
        }
      }
      v68 = 1;
LABEL_118:
      if ((_DWORD)v24 == 32)
      {
        if ((unsigned __int16)v66 == (unsigned __int16)v65)
          return 10;
        goto LABEL_80;
      }
      if (v68)
      {
LABEL_80:
        if (!v25)
          return 11;
        v72 = *(unsigned __int8 *)(v121 + 2172);
        if (v72 == 255)
          return 11;
        v73 = 0;
        v120 = v25 - 1;
        v74 = (__int16)(a7 - 1);
        while (1)
        {
          v75 = a6 - v72;
          if (v75 < 0)
            goto LABEL_107;
          if (v75 > (int)v27)
            goto LABEL_107;
          v76 = *(unsigned __int8 *)(v121 + (v73 | 1) + 2172);
          v77 = *(unsigned __int8 **)(v16[19] + 8 * v76);
          if (*v77 != *(unsigned __int8 *)(a3 + (unsigned __int16)(a6 - v72)))
            goto LABEL_107;
          v78 = *(unsigned __int8 *)(v16[21] + v76);
          v79 = a4 - v75;
          if (v79 >= v78)
            v79 = *(unsigned __int8 *)(v16[21] + v76);
          if (v79 == 2)
            goto LABEL_94;
          if (v79 == 3)
            goto LABEL_93;
          if (v79 == 4)
            break;
LABEL_95:
          v80 = *(unsigned __int8 *)(v16[22] + v76);
          if (*(_WORD *)(v121 + 2)
            || ((_DWORD)v80 + v75 == a6 ? (v81 = 1) : (v81 = 2),
                *(unsigned __int16 *)(v121 + 2160) == (unsigned __int16)a6
              ? (v82 = a6 == v72)
              : (v82 = 0),
                !v82 ? (v83 = v81) : (v83 = 4),
                (v83 & *((_BYTE *)v16 + v76 + 183)) != 0))
          {
            HIWORD(v93) = v120;
            LOWORD(v93) = 0;
            v84 = v42;
            v85 = v16;
            v86 = v27;
            result = SFcorqbr(v16, v121, a3 + v75 + *(unsigned __int8 *)(v16[21] + v76), (__int16)(a4 - v75 - v78), a5 + v75 + v80, v72 - v80, v74, v42, v93);
            v42 = v84;
            v27 = v86;
            v16 = v85;
            if ((_DWORD)result == 10)
              return result;
          }
LABEL_107:
          v73 += 2;
          v72 = *(unsigned __int8 *)(v121 + v73 + 2172);
          result = 11;
          if (v72 == 255)
            return result;
        }
        if (v77[3] != *(unsigned __int8 *)(a3 + v75 + 3))
          goto LABEL_107;
LABEL_93:
        if (v77[2] != *(unsigned __int8 *)(a3 + v75 + 2))
          goto LABEL_107;
LABEL_94:
        if (v77[1] != *(unsigned __int8 *)(a3 + v75 + 1))
          goto LABEL_107;
        goto LABEL_95;
      }
    }
    return 10;
  }
  return result;
}

uint64_t SFcorrec(char *__src, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v8;
  char *v9;
  char *v10;
  size_t v11;
  int v12;
  uint64_t v13;
  BOOL v15;
  int v16;
  int v17;
  uint64_t result;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  __int16 v32;
  signed int v33;
  __int16 v34;
  unsigned __int8 *v35;
  signed int v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  char v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  int v45;
  BOOL v47;
  BOOL v48;
  BOOL v49;
  int v50;
  __int16 v51;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  __int16 v61;
  int v62;
  char v63;
  int v64;
  char v65;
  int v66;
  unsigned int v67;
  char v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  void *__dst;
  int v73;
  int v74;
  int v75;
  size_t v76;
  int v77;
  __int16 v78;

  v4 = *(__int16 *)(a4 + 42);
  if (*(__int16 *)(a4 + 40) > v4)
    return 0;
  v8 = a2;
  v9 = *(char **)(*(_QWORD *)(a4 + 32) + 16);
  v10 = strcpy(v9, __src);
  v11 = strlen(v10);
  *(_WORD *)(a4 + 2160) = v11;
  v12 = *(__int16 *)(a4 + 40);
  v13 = *(unsigned __int8 *)(a3 + 136);
  if (*(unsigned __int8 *)(a4 + 2156) == 255)
  {
    *(_BYTE *)(a4 + 2157) = v13;
    *(_BYTE *)(a4 + 3172) = 0;
  }
  v78 = 0;
  v15 = v8 < 2 && v12 == 0;
  v16 = *(unsigned __int8 *)(a4 + 2156);
  if (v16 == (_DWORD)v13)
  {
    LOWORD(v17) = v12;
LABEL_12:
    if ((__int16)v12 < (__int16)v17)
      SFcorsrt(__src, (__int16)v12, (__int16)(v17 - 1), a3, a4);
    return 0;
  }
  v71 = v13;
  v75 = v4;
  __dst = v9 + 2;
  v67 = v8 & 0xFFFFFFFD;
  v68 = !v15;
  v69 = v8;
  v19 = v12;
  v66 = v12;
  LOWORD(v17) = v12;
  while (2)
  {
    if (*(unsigned __int8 *)(a4 + 2157) == v16)
    {
      LOWORD(v12) = v19;
      goto LABEL_12;
    }
    v70 = v19;
    v76 = v11;
    *(_BYTE *)(a4 + 2156) = v16 + 1;
    *(_WORD *)(a4 + 2132) = 0;
    v20 = (unsigned __int8 *)(*(_QWORD *)(a3 + 128) + (char)(v16 + 1));
    *(_WORD *)(a4 + 2152) = *v20;
    v21 = &v20[v71];
    v74 = *v21;
    *(_WORD *)(a4 + 2154) = v74;
    v22 = &v21[v71];
    *(_WORD *)(a4 + 2144) = *v22;
    v23 = &v22[v71];
    *(_WORD *)(a4 + 2146) = *v23;
    v24 = &v23[v71];
    *(_WORD *)(a4 + 2148) = *v24;
    v25 = &v24[v71];
    *(_WORD *)(a4 + 2150) = *v25;
    v26 = &v25[v71];
    *(_WORD *)(a4 + 2142) = *v26;
    v27 = &v26[v71];
    *(_WORD *)(a4 + 2162) = *v27;
    v28 = &v27[v71];
    *(_WORD *)(a4 + 2164) = *v28;
    v29 = &v28[v71];
    *(_WORD *)(a4 + 2166) = *v29;
    v30 = &v29[v71];
    *(_WORD *)(a4 + 2168) = *v30;
    v73 = v30[v71];
    if ((v16 + 1) == 2)
    {
      if (*(_WORD *)(a3 + 104) && (__int16)v11 >= 1)
      {
        v31 = 0;
        v32 = 0;
        LOWORD(v33) = *(_WORD *)(a4 + 2170);
        do
        {
          v34 = 0;
          v35 = (unsigned __int8 *)&v9[v31];
          do
          {
            if ((int)SLstrncmp(*(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)(((__int16)v33 + v34) >> 1)), v35, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)(((__int16)v33 + v34) >> 1))) >= 0)v33 = ((__int16)v33 + v34) >> 1;
            else
              v34 = ((__int16)v33 + v34) >> 1;
          }
          while ((__int16)v33 - v34 > 1);
          LOWORD(v36) = v33 - (*(unsigned __int16 *)(a4 + 2170) == (unsigned __int16)v33);
          v37 = *(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)v36);
          do
          {
            if (!SLstrncmp(v37, v35, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)v36))
              && v32 <= 999)
            {
              v38 = a4 + v32;
              *(_BYTE *)(v38 + 2172) = v76 - v31;
              v32 += 2;
              *(_BYTE *)(v38 + 2173) = v36;
            }
            v36 = (__int16)(v36 + 1);
            v33 = *(__int16 *)(a4 + 2170);
            if (v36 >= v33)
              break;
            v37 = *(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * v36);
          }
          while (*v37 <= *v35);
          ++v31;
        }
        while (v31 != (unsigned __int16)v76);
      }
      else
      {
        v32 = 0;
      }
      v39 = a4 + 2172;
      *(_BYTE *)(v39 + v32) = -1;
      *(_BYTE *)(v39 + (__int16)(v32 + 1)) = -1;
    }
    do
    {
      if (*(_BYTE *)(a3 + 55) == 1)
      {
        v40 = v76;
        if (*(_BYTE *)(a4 + 3512))
        {
          if ((v76 & 0x8000) == 0)
            memmove(__dst, v9, (unsigned __int16)(v76 + 1));
          *(_WORD *)v9 = 25966;
          v40 = strlen(v9);
          v41 = 0;
          goto LABEL_41;
        }
        if (*v9 == 110 && v9[1] == 101 && (__int16)v76 >= 3)
        {
          v40 = (v76 - 2);
          strcpy(v9, (const char *)__dst);
          v41 = 1;
LABEL_41:
          *(_BYTE *)(a4 + 3512) = v41;
        }
      }
      else
      {
        v40 = v76;
      }
      v42 = (__int16)v40;
      if (*(_WORD *)(a4 + 40))
        v43 = 1;
      else
        v43 = (__int16)v40 <= 8;
      if (v43 && *(_WORD *)(a4 + 2148) == 2)
        *(_WORD *)(a4 + 2148) = 1;
      v44 = *(unsigned __int8 *)(a4 + 2156);
      if (v44 == 14 && *(_WORD *)(a4 + 2148) == 1)
        *(_WORD *)(a4 + 2148) = 0;
      v45 = *(unsigned __int8 *)(a3 + 55);
      if (v45 != 5 && v45 != 16)
      {
        v50 = *(unsigned __int16 *)(a4 + 2154);
        if (v50 == 1)
        {
          v51 = 3;
          goto LABEL_82;
        }
        if (v50 != 8 && *(_WORD *)(a4 + 2142))
        {
          if ((char)v44 < 12)
          {
            v51 = 1;
LABEL_82:
            *(_WORD *)(a4 + 2142) = v51;
            goto LABEL_58;
          }
          if (v44 <= 0xD)
          {
            v51 = 2;
            goto LABEL_82;
          }
        }
      }
LABEL_58:
      v47 = v73 == 0;
      v48 = v74 == 8;
      v76 = v40;
      if ((__int16)v40 <= 4)
        v48 = 0;
      if ((__int16)v40 >= 4)
        v47 = 0;
      v49 = (unsigned __int16)(v40 - 7) < 0xFFFBu && v74 == 7;
      if (!v49 && !v48 && !v47)
      {
        *(_QWORD *)(a4 + 120) = "";
        switch(v74)
        {
          case 1:
            SFcor1qd(v9, (_QWORD *)a3, a4);
            goto LABEL_90;
          case 2:
          case 7:
            SFcor2qd(v9, (_QWORD *)a3, a4);
            goto LABEL_90;
          case 3:
            SFcor3qd(v9, (_QWORD *)a3, a4);
            goto LABEL_90;
          case 4:
            goto LABEL_86;
          case 5:
            if (*(_BYTE *)(a4 + 3202) == 1)
            {
LABEL_86:
              if ((v45 - 1) >= 2)
                SFaccent((unsigned __int8 *)v9, (__int16)v40, a3, (__int16 *)a4);
            }
            else if (SFcorrig(v9, a3, a4) == 10)
            {
              goto LABEL_132;
            }
            break;
          case 6:
            SFcor6qd(v9, (_QWORD *)a3, a4);
            goto LABEL_90;
          case 8:
            SFcor8qd(v9, (_QWORD *)a3, a4);
            goto LABEL_90;
          default:
LABEL_90:
            *(_BYTE *)(a4 + 4 * *(__int16 *)(a4 + 2132) + 128) = 0;
            v53 = *(__int16 *)(a4 + 2132);
            if (v53 < 1)
              break;
            LOWORD(v54) = 0;
LABEL_92:
            v55 = *(_DWORD *)(a4 + 128 + 4 * (__int16)v54);
            if ((int)SLstrncmp(*(_BYTE **)(a4 + 120), (unsigned __int8 *)(a4 + 4 * (__int16)v54 + 128), 4) > 0)
              goto LABEL_105;
            *(_QWORD *)(a4 + 120) = a4 + 4 * (__int16)v54 + 128;
            v77 = v55;
            v56 = *(unsigned __int8 *)(a3 + 54);
            if (v56 >= 5)
            {
              v57 = 4;
              do
                *((_BYTE *)&v77 + (__int16)v57++) = 0;
              while ((int)v56 > (__int16)v57);
            }
            v58 = SFbisrch((uint64_t)&v77, 0, v56 - 1, &v78, a3);
            v59 = *(unsigned __int8 *)(a3 + 54);
            if (v59 >= 5)
            {
              v60 = 4;
              do
                *((_BYTE *)&v77 + (__int16)v60++) = -1;
              while ((int)v59 > (__int16)v60);
              v61 = SFbisrch((uint64_t)&v77, 0, v59 - 1, &v78, a3);
              v78 += v61 - v58;
            }
            if (*(_BYTE *)(a4 + 3202) == 1)
              v62 = PDdecod2((unsigned __int8 *)v9, v42, v58, v78, a3, (unsigned __int16 *)a4);
            else
              v62 = SFdecode((unsigned __int8 *)v9, v42, v58, v78, (_QWORD *)a3, (unsigned __int16 *)a4);
            if (v62 != 8)
            {
              if (*(unsigned __int16 *)(a4 + 40) == (unsigned __int16)v75)
                break;
LABEL_105:
              v54 = (__int16)(v54 + 1);
              if (v54 >= v53)
                break;
              goto LABEL_92;
            }
            return 0;
        }
      }
    }
    while (*(_BYTE *)(a4 + 3512));
    v17 = *(__int16 *)(a4 + 40);
    if (v69 != 2 || v17 == v75)
    {
      v12 = *(__int16 *)(a4 + 40);
      if (v17 > (__int16)v70)
      {
        SFcorsrt(__src, (__int16)v70, (__int16)(v17 - 1), a3, a4);
        LOWORD(v17) = *(_WORD *)(a4 + 40);
        v12 = (unsigned __int16)v17;
      }
    }
    else
    {
      v12 = v70;
    }
    v11 = v76;
    if ((unsigned __int16)v17 == (unsigned __int16)v75)
      return 0;
    v63 = v68;
    if ((__int16)v17 < 1)
      v63 = 1;
    if ((v63 & 1) != 0)
    {
      if (v69 != 2)
        goto LABEL_126;
      goto LABEL_128;
    }
    v64 = *(char *)(a4 + 2156);
    if (v64 <= 4)
      v65 = 8;
    else
      v65 = v64 + 4;
    *(_BYTE *)(a4 + 2157) = v65;
LABEL_126:
    if (*(_BYTE *)(a4 + 3172) || v66 >= (__int16)v17)
    {
LABEL_128:
      if (v67 != 1)
      {
        v16 = *(unsigned __int8 *)(a4 + 2156);
        v19 = v12;
        if (v16 == (_DWORD)v71)
          goto LABEL_12;
        continue;
      }
      return 1;
    }
    else
    {
LABEL_132:
      result = 1;
      *(_BYTE *)(a4 + 3172) = 1;
    }
    return result;
  }
}

uint64_t SFcorrig(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unsigned __int8 *v7;
  int v8;
  size_t v9;
  char *v11;
  int v12;

  if (!*(_WORD *)(a2 + 138))
    return 11;
  v6 = 0;
  v7 = *(unsigned __int8 **)(a2 + 144);
  while (1)
  {
    v8 = SLstrcmp(a1, v7);
    v9 = strlen((const char *)v7);
    if (!v8)
      break;
    v6 += v9 + 1;
    v7 = (unsigned __int8 *)(*(_QWORD *)(a2 + 144) + (unsigned __int16)v6);
    if (*(unsigned __int16 *)(a2 + 138) <= (unsigned __int16)v6)
      return 11;
  }
  v11 = (char *)&v7[v9 + 1];
  v12 = (__int16)strlen(v11);
  return SFadd1(v11, v12, a3, 1);
}

uint64_t SFcorsrt(char *__src, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  __int16 v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[16];
  _OWORD v63[16];
  uint64_t v64;

  v7 = a3;
  v64 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a5 + 3202) == 1)
    return PDcorsrt(__src, a2, a3, a4, (_QWORD *)a5);
  v11 = *(_QWORD *)(a5 + 3176);
  v12 = *(char **)(*(_QWORD *)(a5 + 32) + 24);
  v13 = *(_QWORD *)(a5 + 112);
  if (v13 && (v15 = *(unsigned __int8 *)(v13 + 34), v14 = (const char *)(v13 + 34), v15))
  {
    v16 = strcpy(v12, v14);
    strcat(v16, __src);
  }
  else
  {
    strcpy(v12, __src);
  }
  v17 = *(_QWORD *)(a5 + 112);
  if (v17)
  {
    v19 = *(unsigned __int8 *)(v17 + 44);
    v18 = (const char *)(v17 + 44);
    if (v19)
      strcat(v12, v18);
  }
  v59 = a2;
  if (a2 <= (int)v7)
  {
    v60 = *(_QWORD *)(a5 + 48);
    v61 = *(_QWORD *)(a5 + 64);
    LOWORD(v20) = a2;
    v21 = *(_QWORD *)(a4 + 56);
    do
    {
      v22 = v7;
      v23 = (__int16)v20;
      v24 = (const char *)(v60 + *(__int16 *)(v61 + 2 * (__int16)v20));
      v25 = strlen(v12);
      v26 = strlen(v24);
      memset(v63, 0, sizeof(v63));
      memset(v62, 0, sizeof(v62));
      if (v25 << 16 >= 1)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = v12[v28];
          if ((_DWORD)v29 != v12[v27 + 1])
          {
            if ((*(_DWORD *)(v21 + 4 * v29) & 0x40000000) != 0)
              v30 = v29 + 32;
            else
              v30 = v12[v28];
            ++*((_BYTE *)v63 + v30);
          }
          v27 = ++v28;
        }
        while ((__int16)v25 > v28);
      }
      v31 = v26 << 16;
      v32 = (__int16)v26;
      if (v26 << 16 >= 1)
      {
        v33 = 0;
        v34 = 0;
        do
        {
          v35 = v24[v34];
          if ((_DWORD)v35 != v24[v33 + 1])
          {
            if ((*(_DWORD *)(v21 + 4 * v35) & 0x40000000) != 0)
              v36 = v35 + 32;
            else
              v36 = v24[v34];
            ++*((_BYTE *)v62 + v36);
          }
          v33 = ++v34;
        }
        while ((__int16)v26 > v34);
      }
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = *((unsigned __int8 *)v63 + v37) - *((unsigned __int8 *)v62 + v37);
        if (v39)
        {
          if (v39 < 0)
            v39 = *((unsigned __int8 *)v62 + v37) - *((unsigned __int8 *)v63 + v37);
          if ((*(_DWORD *)(v21 + 4 * v37) & 0x10000000) != 0)
            v38 += 2 * v39;
          else
            v38 += 3 * v39;
        }
        ++v37;
      }
      while (v37 != 256);
      if (v25 << 16 < 1)
      {
        v42 = 0;
      }
      else
      {
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          if (v31 >= 1)
          {
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = 0;
              do
              {
                v46 = v45;
                v47 = v40 + (uint64_t)(__int16)v45;
                v48 = v43 + (uint64_t)(__int16)v45++;
              }
              while ((int)v48 < v32 && v12[v47] == v24[v48] && (int)v47 < (__int16)v25);
              if (v46 > v42)
                v42 = v46;
              v43 = (__int16)++v44;
            }
            while (v32 > (__int16)v44);
          }
          v40 = (__int16)++v41;
        }
        while ((__int16)v25 > (__int16)v41);
      }
      v51 = v25 - v32;
      if ((__int16)v25 - v32 < 0)
        v51 = v32 - v25;
      *(_WORD *)(v11 + 2 * v23) = 2 * v38 + 4 * v51 - v42 + 16 * (v12[(__int16)v25 - 1] != v24[v32 - 1]);
      v20 = (__int16)(v23 + 1);
      v7 = v22;
    }
    while (v20 <= (int)v22);
  }
  if (v59 < (int)v7)
  {
    v52 = v7 + v59;
    v53 = v59;
    do
    {
      if (v52 - v53 > v59)
      {
        v54 = v59;
        v55 = v59;
        do
        {
          v56 = v54 + 1;
          if (*(__int16 *)(v11 + 2 * v55) > *(__int16 *)(v11 + 2 * v56))
          {
            v57 = *(_QWORD *)(a5 + 64);
            v58 = *(_WORD *)(v57 + 2 * v55);
            *(_WORD *)(v57 + 2 * v55) = *(_WORD *)(v57 + 2 * v56);
            *(_WORD *)(v57 + 2 * v56) = v58;
            LOWORD(v57) = *(_WORD *)(v11 + 2 * v55);
            *(_WORD *)(v11 + 2 * v55) = *(_WORD *)(v11 + 2 * v56);
            *(_WORD *)(v11 + 2 * v56) = v57;
          }
          v54 = ++v55;
        }
        while (v52 - v53 > v55);
      }
      ++v53;
    }
    while (v53 != (_DWORD)v7);
  }
  return 10;
}

uint64_t PRSetEnabledLogTypes()
{
  int AppBooleanValue;
  BOOL v1;
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  BOOL v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v21;
  uint64_t v22;
  uint64_t result;
  Boolean keyExistsAndHasValidFormat;

  keyExistsAndHasValidFormat = 0;
  AppBooleanValue = CFPreferencesGetAppBooleanValue(CFSTR("PRLogCorrection"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v1 = AppBooleanValue == 0;
  else
    v1 = 1;
  v2 = !v1;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogGuessing"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v3 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    v3 = 1;
  }
  if (!v3)
    v2 |= 2uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogCompletion"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v4 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    v4 = 1;
  }
  if (!v4)
    v2 |= 4uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogAdaptation"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v5 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    v5 = 1;
  }
  if (!v5)
    v2 |= 8uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogAssets"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
    v6 = keyExistsAndHasValidFormat == 0;
  else
    v6 = 1;
  if (!v6)
    v2 |= 0x10uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogTimes"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
    v7 = keyExistsAndHasValidFormat == 0;
  else
    v7 = 1;
  if (!v7)
    v2 |= 0x20uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogNames"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
    v8 = keyExistsAndHasValidFormat == 0;
  else
    v8 = 1;
  if (!v8)
    v2 |= 0x40uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogXPC"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
    v9 = keyExistsAndHasValidFormat == 0;
  else
    v9 = 1;
  if (!v9)
    v2 |= 0x80uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogLexicon"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v10 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    v10 = 1;
  }
  if (!v10)
    v2 |= 0x100uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogLanguageModel"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v11 = keyExistsAndHasValidFormat == 0;
  }
  else
  {
    v11 = 1;
  }
  if (v11)
    v12 = v2;
  else
    v12 = v2 | 0x200;
  v13 = objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager"), "fileExistsAtPath:", CFSTR("/AppleInternal/Applications/TypoTracker.app"));
  keyExistsAndHasValidFormat = 0;
  v14 = CFPreferencesGetAppBooleanValue(CFSTR("PRLogTypology"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
    v15 = v14;
  else
    v15 = v13;
  if (v15)
    v16 = v12 | 0x400;
  else
    v16 = v12;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogReplacements"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v17 = 1;
  }
  else
  {
    v17 = keyExistsAndHasValidFormat == 0;
  }
  if (v17)
    v16 |= 0x800uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogAssetRequests"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v18 = 1;
  }
  else
  {
    v18 = keyExistsAndHasValidFormat == 0;
  }
  if (v18)
    v16 |= 0x1000uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogBackground"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v19 = 1;
  }
  else
  {
    v19 = keyExistsAndHasValidFormat == 0;
  }
  if (v19)
    v16 |= 0x2000uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogSentenceCorrection"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v20 = 1;
  }
  else
  {
    v20 = keyExistsAndHasValidFormat == 0;
  }
  if (v20)
    v16 |= 0x4000uLL;
  keyExistsAndHasValidFormat = 0;
  if (CFPreferencesGetAppBooleanValue(CFSTR("PRLogContainer"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat))
  {
    v21 = 1;
  }
  else
  {
    v21 = keyExistsAndHasValidFormat == 0;
  }
  v22 = v16 | 0x10000;
  if (!v21)
    v22 = v16;
  _enabledLogTypes = v22;
  keyExistsAndHasValidFormat = 0;
  result = CFPreferencesGetAppBooleanValue(CFSTR("PRLogToFile"), CFSTR("com.apple.applespell"), &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    if ((_DWORD)result)
      _logToFile = 1;
  }
  return result;
}

uint64_t PRLogObject(uint64_t a1)
{
  uint64_t *v2;

  if (PRLogObject_onceToken != -1)
    dispatch_once(&PRLogObject_onceToken, &__block_literal_global_0);
  if (a1 > 511)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x8000)
      {
        if (a1 == 0x8000)
        {
          v2 = &__PRLogInputAnalytics;
          return *v2;
        }
        if (a1 == 0x10000)
        {
          v2 = &__PRLogContainer;
          return *v2;
        }
      }
      else
      {
        if (a1 == 0x2000)
        {
          v2 = &__PRLogBackground;
          return *v2;
        }
        if (a1 == 0x4000)
        {
          v2 = &__PRLogSentenceCorrection;
          return *v2;
        }
      }
    }
    else if (a1 > 2047)
    {
      if (a1 == 2048)
      {
        v2 = &__PRLogReplacements;
        return *v2;
      }
      if (a1 == 4096)
      {
        v2 = &__PRLogAssetRequests;
        return *v2;
      }
    }
    else
    {
      if (a1 == 512)
      {
        v2 = &__PRLogLanguageModel;
        return *v2;
      }
      if (a1 == 1024)
      {
        v2 = &__PRLogTypology;
        return *v2;
      }
    }
LABEL_33:
    v2 = &__PRLogGeneral;
    return *v2;
  }
  if (a1 > 31)
  {
    if (a1 > 127)
    {
      if (a1 == 128)
      {
        v2 = &__PRLogXPC;
        return *v2;
      }
      if (a1 == 256)
      {
        v2 = &__PRLogLexicon;
        return *v2;
      }
    }
    else
    {
      if (a1 == 32)
      {
        v2 = &__PRLogTimes;
        return *v2;
      }
      if (a1 == 64)
      {
        v2 = &__PRLogNames;
        return *v2;
      }
    }
    goto LABEL_33;
  }
  v2 = &__PRLogCorrection;
  switch(a1)
  {
    case 1:
      return *v2;
    case 2:
      v2 = &__PRLogGuessing;
      break;
    case 3:
    case 5:
    case 6:
    case 7:
      goto LABEL_33;
    case 4:
      v2 = &__PRLogCompletion;
      break;
    case 8:
      v2 = &__PRLogAdaptation;
      break;
    default:
      if (a1 != 16)
        goto LABEL_33;
      v2 = &__PRLogAssets;
      break;
  }
  return *v2;
}

void PRLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double Current;
  double v12;
  const char *v14;
  int v15;
  _opaque_pthread_t *v16;
  __uint64_t v17;
  _QWORD block[7];
  uint64_t *v19;
  __uint64_t v20;

  Current = CFAbsoluteTimeGetCurrent();
  v20 = 0;
  if ((_enabledLogTypes & a1) != 0)
  {
    v12 = Current;
    if (PRLog_onceToken != -1)
      dispatch_once(&PRLog_onceToken, &__block_literal_global_55);
    if (PRLog_fd == -2 && _logToFile != 0)
    {
      v14 = -[NSString UTF8String](-[NSString stringByAppendingPathComponent:](_NSSpellingDictDirectoryPath2(), "stringByAppendingPathComponent:", CFSTR("prlog.txt")), "UTF8String");
      v15 = open(v14, 522);
      PRLog_fd = v15;
      if ((v15 & 0x80000000) == 0)
        fchmod(v15, 0x1B6u);
    }
    v19 = &a9;
    if (a2)
      a2 = objc_msgSend(objc_alloc(MEMORY[0x1E0CB3940]), "initWithFormat:locale:arguments:", a2, 0, v19);
    if (pthread_threadid_np(0, &v20))
    {
      v16 = pthread_self();
      v17 = pthread_mach_thread_np(v16);
      v20 = v17;
    }
    else
    {
      v17 = v20;
    }
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = __PRLog_block_invoke_2;
    block[3] = &unk_1EA8CCEF8;
    block[4] = a2;
    *(double *)&block[5] = v12;
    block[6] = v17;
    dispatch_async((dispatch_queue_t)PRLog__queue, block);
  }
}

void sub_1DE247628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void SFdecbit(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  *(_WORD *)(a6[440] + 2 * a3) = 0;
  *(_BYTE *)(a6[441] + a3) = 0;
  *(_BYTE *)(a6[442] + a3) = 0;
  *(_BYTE *)(a6[437] + a3) = 0;
  __asm { BR              X10 }
}

uint64_t sub_1DE247E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_WORD *)(*(_QWORD *)(v0 + 3520) + 2 * v2) &= 0xF3FFu;
  return ((uint64_t (*)(void))((char *)sub_1DE247E68 + 4 * byte_1DE2EC844[*(_BYTE *)(v1 + 6) & 3]))();
}

uint64_t sub_1DE247E68@<X0>(int a1@<W1>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  __int16 v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  __int16 v7;
  unsigned int v8;
  _WORD *v9;
  int v10;
  unsigned int v11;

  v7 = v3 & 0xCFFF;
  *(_WORD *)(a3 + 2 * v6) = v7;
  if (*(_WORD *)(a2 + 88))
  {
    if ((*v5 & 1) != 0)
    {
      v7 |= 0x200u;
      *(_WORD *)(a3 + 2 * v6) = v7;
    }
    v8 = v5[1];
    if (v8 >= 0x40)
    {
      *(_WORD *)(a3 + 2 * v6) = v7 | 4;
      v8 = v5[1];
    }
    __asm { BR              X12 }
  }
  v9 = *(_WORD **)(v4 + 112);
  if (*v9)
  {
    v10 = (v5[1] >> 3) & 7;
    if (a1 != 12)
      LOWORD(v10) = 16 * v10;
    v9[31] = v10;
    __asm { BR              X10 }
  }
  if ((a1 - 1) < 2)
  {
    *(_BYTE *)(*(_QWORD *)(v4 + 3496) + v6) |= (v5[4] >> 1) & 0x3F;
  }
  else
  {
    if (a1 == 15)
      __asm { BR              X10 }
    if (a1 == 16)
      __asm { BR              X10 }
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 72) + v6);
  if (*(unsigned __int8 *)(v4 + 88) >= v11 || v11 == 4 || !*(_WORD *)(v4 + 18))
    *(_WORD *)(v4 + 18) = *(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * v6);
  return 0;
}

void sub_1DE248204()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t v2;

  *(_BYTE *)(*(_QWORD *)(v0 + 3496) + v2) = 0;
  if ((v1[6] & 4) != 0)
    *(_WORD *)(*(_QWORD *)(v0 + 3520) + 2 * v2) |= 0x10u;
  if ((v1[1] & 1) != 0)
    *(_WORD *)(*(_QWORD *)(v0 + 3520) + 2 * v2) |= 1u;
  if ((v1[4] & 1) != 0)
    *(_WORD *)(*(_QWORD *)(v0 + 3520) + 2 * v2) |= 0x200u;
  JUMPOUT(0x1DE248190);
}

uint64_t SFdecode(unsigned __int8 *a1, int a2, int a3, __int16 a4, _QWORD *a5, unsigned __int16 *a6)
{
  if (a2 <= 0 && *a6 != 17)
    return 11;
  if (a6[1])
    return 8;
  return SFicdecode(a1, a2, a3, a4, a5, a6);
}

uint64_t SFicdecode(unsigned __int8 *a1, int a2, int a3, __int16 a4, _QWORD *a5, unsigned __int16 *a6)
{
  unsigned int v6;
  _BOOL4 v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  unsigned __int8 *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  int v51;
  char *v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned __int16 v61;
  unsigned int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char *v74;
  char v75;
  char v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  int v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned __int8 *v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  uint64_t v119;
  unsigned __int8 *v120;
  int v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  int v130;
  int v131;
  unsigned __int8 *v132;
  unsigned int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int v137;
  int v138;
  unsigned __int8 v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  unsigned __int8 *v145;
  int v146;
  int v147;
  uint64_t v148;
  unsigned int v149;
  int v150;
  int v151;
  unsigned int v152;
  __int16 v153;
  int v154;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned __int8 *v162;
  int v163;
  int v164;
  uint64_t v165;
  char *__dst;
  int v167;
  int v168;
  unsigned int v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  int v173;
  uint64_t v174;
  char v175;
  int v176;
  unsigned __int8 *v177;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  uint64_t v186;
  _QWORD *v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned __int8 *v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  int v196;
  int v197;
  int v198;
  uint64_t v199;
  unsigned int v200;
  const char *__s1;
  unsigned int v202;
  uint64_t v203;
  char v204;
  int v205;
  char *v206;
  unsigned int v207;
  char *v208;
  _BOOL4 v209;
  int v210;
  int v211;
  int v212;
  unsigned __int8 *v214;
  uint64_t v215;
  unsigned int v216;
  int v217;
  unsigned int v218;
  unsigned int v219;
  _BYTE v220[296];
  _QWORD v221[3];

  v221[1] = *MEMORY[0x1E0C80C00];
  v221[0] = 0;
  v6 = *a6;
  v7 = a2 < 25;
  if (v6 != 6)
    v7 = 0;
  if (v6 > 0x63)
    v7 = 1;
  v209 = v7;
  if (v6 == 6)
  {
    v204 = 0;
    LOWORD(v186) = a2;
    WORD2(v186) = a6[1732];
  }
  else if (v6 < 0x64)
  {
    v186 = 0;
    v204 = 1;
  }
  else
  {
    v204 = 0;
    v8 = a6[1071];
    LOWORD(v186) = v8 + a2;
    WORD2(v186) = a2 - v8;
  }
  if (v6 == 3)
    v9 = 0xFFFFFFFFLL;
  else
    v9 = 0;
  v10 = v9;
  v11 = (v9 & a4);
  if ((v9 & a4) != 0)
    v12 = a3 + 1;
  else
    v12 = a3;
  v13 = (__int16)(a4 - ((_DWORD)v11 != 0));
  v14 = *((__int16 *)a5 + 3);
  if (v14 < 7)
  {
    v16 = (v6 == 3 || v6 > 0x63) && v14 == 6;
    if (v13 < 0)
      return 11;
  }
  else
  {
    v15 = v6 > 0x63 || v6 == 3;
    if (v15)
      v16 = a5[1] & 1;
    else
      v16 = 0;
    if (v13 < 0)
      return 11;
  }
  v19 = v10;
  v193 = 0;
  v20 = 0;
  v21 = 0;
  v175 = 0;
  v22 = *((_QWORD *)a6 + 4);
  v23 = *((__int16 *)a5 + 1);
  v210 = *((_DWORD *)a5 + 3) + (__int16)v12 * v23;
  v203 = a5[7];
  v24 = (char *)*((_QWORD *)a6 + 1);
  v25 = (unsigned __int8 *)&v24[*((__int16 *)a5 + 1)];
  v191 = v25 - 1;
  v200 = *((unsigned __int8 *)a5 + 55);
  v177 = v25 - 2;
  v26 = *(unsigned __int8 **)v22;
  v163 = a6[1077];
  v164 = *((unsigned __int8 *)a6 + 88);
  v195 = *((__int16 *)a5 + 26);
  v198 = a6[1744];
  v171 = v198 & 0xF;
  v165 = (uint64_t)a6 + 3207;
  __dst = *(char **)(v22 + 8);
  v27 = a2;
  v161 = a2 - 1;
  v162 = &a1[a2];
  v28 = 0;
  v160 = v27 - 2;
  v196 = *((__int16 *)a5 + 25);
  if ((v196 - 9) >= 3)
    v29 = 12;
  else
    v29 = *((__int16 *)a5 + 25);
  v167 = v29;
  v168 = 2 * v23;
  v30 = a5[3];
  v215 = a5[2];
  v31 = (unsigned __int8 *)*((_QWORD *)a6 + 15);
  v194 = (uint64_t)a6;
  v187 = a5;
  v189 = v10;
  v190 = *a6;
  v188 = v16;
  v208 = (char *)*((_QWORD *)a6 + 1);
  __s1 = (const char *)v26;
  v185 = *((__int16 *)a5 + 1);
  v199 = a5[4];
LABEL_39:
  v32 = v12;
  v33 = v13;
  if (a6[8] != (unsigned __int16)v12)
  {
    v217 = v13;
    v34 = v31;
    v35 = v30;
    v36 = v21;
    v37 = v11;
    v38 = v12;
    v39 = a5;
    v40 = v28;
    v219 = 0;
    if (SLSeek(*((_DWORD *)a5 + 16), v210, 0) == 8
      || (!SLFRead(*((_DWORD *)v39 + 16), v23, v208, &v219) ? (v41 = v219 == v23) : (v41 = 0), !v41))
    {
      *(_WORD *)(v194 + 16) = 0;
      return 11;
    }
    a6 = (unsigned __int16 *)v194;
    v19 = v189;
    v6 = v190;
    v16 = v188;
    v28 = v40;
    v24 = v208;
    v26 = (unsigned __int8 *)__s1;
    v32 = v38;
    v11 = v37;
    v21 = v36;
    v30 = v35;
    a5 = v39;
    v31 = v34;
    v33 = v217;
  }
  a6[8] = v32;
  v42 = v191;
  if (v16)
  {
    v20 = 0;
    LODWORD(v193) = *v191;
    if (v193 <= 4)
      v43 = 3;
    else
      v43 = 4;
    v42 = v177;
    if (v43 >= a2)
      LOWORD(v43) = a2;
    WORD2(v193) = v43 + 1;
  }
  v44 = a5;
  v197 = v33 - 1;
  v12 = v32 + 1;
  v210 += v23;
  v212 = (__int16)v33;
  if (v24 > (char *)v42)
  {
LABEL_55:
    v45 = v11;
    goto LABEL_56;
  }
  v173 = v32;
  LOBYTE(v216) = 0;
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  LOWORD(v218) = 0;
  v50 = 0;
  v211 = 0;
  v51 = 0;
  v176 = (__int16)v12 + 1;
  v174 = 4 * v176;
  v52 = v24;
  v53 = v199;
  v192 = v32 + 1;
  while (1)
  {
    if (v52 > (char *)v42)
      goto LABEL_55;
    v54 = v51 << (v211 + v196);
    v55 = v211 + v196;
LABEL_61:
    v56 = (__int16)(v55 - 8);
    if (v56 >= 1)
    {
      v57 = *v52++;
      v54 = (v57 << (v55 - 8)) | (__int16)v54;
      v56 = v55 - 16;
    }
    v211 = v56;
    v207 = *v52;
    v58 = (v207 >> -(char)v56) | v54;
    if (!(v58 << 16))
      goto LABEL_55;
    v206 = v52;
    v214 = v42;
    if (v195 >= (__int16)v58)
    {
      LODWORD(v60) = *(unsigned __int8 *)(v53 + (__int16)v58);
      v67 = (_BYTE *)(v215
                    + ((__int16)(*(unsigned __int8 *)(v30 + ((2 * v58) & 0xFFFELL) + 1) << 8) | (unint64_t)*(unsigned __int8 *)(v30 + ((2 * v58) & 0xFFFELL))));
    }
    else
    {
      v59 = 0;
      v60 = 0;
      do
      {
        while (1)
        {
          v61 = 2 * v58;
          v62 = *(unsigned __int8 *)(v30 + 2 * (v58 & 0x7FFF));
          if (v195 >= (__int16)v58)
            break;
          *(_WORD *)&v220[2 * (unsigned __int16)v59 + 256] = *(unsigned __int8 *)(v53 + (__int16)v58) | ((v62 & 0xF) << 8);
          v58 = (v62 >> 4) | (16 * *(unsigned __int8 *)(v30 + (v61 | 1u)));
          if ((++v59 & 0x8000) != 0)
            goto LABEL_75;
        }
        v63 = *(unsigned __int8 *)(v53 + (__int16)v58);
        if (v63)
        {
          v64 = 0;
          v65 = v215 + (__int16)(v62 | (*(unsigned __int8 *)(v30 + (v61 | 1u)) << 8));
          do
          {
            v66 = (v60 + 1);
            v220[(__int16)v60] = *(_BYTE *)(v65 + (__int16)v64++);
            LODWORD(v60) = v60 + 1;
          }
          while (v63 > (__int16)v64);
        }
        else
        {
          v66 = v60;
        }
        LOWORD(v58) = *(_WORD *)&v220[2 * (__int16)--v59 + 256];
        v60 = v66;
      }
      while ((v59 & 0x8000) == 0);
LABEL_75:
      v67 = v220;
      v26 = (unsigned __int8 *)__s1;
    }
    v205 = SFU2MASK[(unsigned __int16)-(__int16)v56];
    v68 = v46;
    v69 = v47;
    v70 = v48;
    v71 = v50;
    a5 = v44;
    if ((_WORD)v60)
      break;
LABEL_292:
    v44 = a5;
    v50 = v71;
    v48 = v70;
    v47 = v69;
    v46 = v68;
    v52 = v206 + 1;
    v51 = v205 & v207;
    v45 = v11;
    v42 = v214;
    v24 = v208;
    v53 = v199;
    v12 = v192;
    if (v206 + 1 > (char *)v214)
      goto LABEL_56;
  }
  while (2)
  {
    LODWORD(v60) = v60 - 1;
    switch(v49)
    {
      case 0:
        v72 = (unsigned __int16)v20;
        if (v16)
          v73 = v20;
        else
          v73 = 0;
        if (v16)
        {
          v20 = 0;
        }
        else
        {
          v72 = 0;
          v20 = v20;
        }
        v74 = &v67[v72];
        v76 = *v74;
        v67 = v74 + 1;
        v75 = v76;
        v28 = (__int16)(v218 - (v76 & 0x3F));
        if ((_DWORD)v70)
        {
          if ((int)v28 > 31)
          {
            v77 = HIDWORD(v221[0]) & SFU4MASK[v28 & 0x1F];
          }
          else
          {
            v77 = 0;
            LODWORD(v221[0]) &= SFU4MASK[(int)v28];
          }
          HIDWORD(v221[0]) = v77;
          if (v75 < 0)
            v103 = LODWORD(v221[0]) | 0x80000000;
          else
            v103 = v221[0] & 0x7FFFFFFF;
          LODWORD(v221[0]) = v103;
        }
        else
        {
          v221[0] = (v75 & 0x80) << 24;
        }
        LODWORD(v60) = v60 - v73;
        v70 = v75 & 0x40;
        v49 = 1;
        v71 = v28;
        goto LABEL_143;
      case 1:
        v79 = *v67++;
        v78 = v79;
        if (v79 > 7uLL)
        {
          if ((_DWORD)v70 && (*(_DWORD *)(v203 + 4 * v78) & 0x40000000) != 0)
          {
            v85 = v70;
            LOBYTE(v78) = v78 + 32;
            if ((__int16)v71 <= 63)
              *((_DWORD *)v221 + ((unsigned __int16)v71 >> 5)) |= 1 << ~(_BYTE)v71;
          }
          else
          {
            v85 = v70;
          }
          v26[(__int16)v71] = v78;
          v86 = v71;
          if ((_WORD)v68)
            v87 = 0;
          else
            v87 = (unsigned __int16)v71 == (unsigned __int16)v69;
          v88 = v87;
          if ((__int16)v71 < (__int16)v69 || (v88 & 1) != 0)
          {
            v68 = v78 - a1[(__int16)v71];
            v71 = (v71 + 1);
            v69 = (v86 + 1);
          }
          else
          {
            v71 = (v71 + 1);
          }
          v70 = v85;
          goto LABEL_143;
        }
        v26[(__int16)v71] = 0;
        if ((unsigned __int16)v71 == (unsigned __int16)v69 && !(_WORD)v68)
        {
          v68 = -a1[(__int16)v71];
          v69 = (v69 + 1);
        }
        if ((_DWORD)v11)
        {
          if ((v68 & 0x8000) == 0)
          {
            v11 = 0;
            v12 = v173 - 1;
            v210 -= v168;
            if ((_WORD)v68)
              v13 = 1;
            else
              v13 = 2;
            v24 = v208;
            goto LABEL_298;
          }
          if (v212 > 0)
          {
            v24 = v208;
            v13 = v197;
            v12 = v192;
            goto LABEL_298;
          }
LABEL_147:
          v11 = 0;
          v49 = 2;
          if (!v16 || (__int16)v28 >= (int)(unsigned __int16)v193)
          {
            LOBYTE(v216) = 0;
            v21 = 0;
LABEL_143:
            if (!(_WORD)v60)
              goto LABEL_292;
            continue;
          }
          if (v6 == 3)
          {
            if ((__int16)v69 <= SWORD2(v193))
            {
              v44 = a5;
              v50 = v71;
              if (((v68 >> 15) & 1) != 0)
                goto LABEL_285;
LABEL_239:
              v71 = v50;
              a5 = v44;
            }
LABEL_240:
            v11 = 0;
            LOBYTE(v216) = 0;
            v21 = 0;
            v214 -= 3;
            v49 = 2;
            goto LABEL_143;
          }
          if (v6 < 0x64)
            goto LABEL_240;
          if ((__int16)v28 > 3)
          {
            v44 = a5;
            v169 = v70;
            v179 = v69;
            v182 = v68;
            v111 = v28;
            v112 = v20;
          }
          else
          {
            v104 = *v26;
            v105 = *v31;
            while (1)
            {
              if (v104 <= v105)
              {
                if (v104 != v105)
                  goto LABEL_227;
                v106 = v26[1];
                v107 = v31[1];
                if (v106 <= v107)
                {
                  if (v106 != v107)
                    break;
                  v108 = v26[2];
                  v109 = v31[2];
                  if (v108 <= v109 && (v108 != v109 || v26[3] <= v31[3]))
                    break;
                }
              }
              v110 = v31[4];
              v31 += 4;
              v105 = v110;
              if (!v110)
                goto LABEL_303;
            }
            v105 = *v26;
LABEL_227:
            if (v176 < *((__int16 *)a5 + 24))
            {
              v132 = (unsigned __int8 *)(a5[5] + v174);
              v133 = *v132;
              if (v105 > v133)
                goto LABEL_304;
              if (v105 == v133)
              {
                v134 = v31[1];
                v135 = v132[1];
                if (v134 > v135)
                  goto LABEL_304;
                if (v134 == v135)
                {
                  v136 = v31[2];
                  v137 = v132[2];
                  if (v136 > v137 || v136 == v137 && v31[3] > v132[3])
                    goto LABEL_304;
                }
              }
            }
            v44 = a5;
            v169 = v70;
            v179 = v69;
            v182 = v68;
            v111 = v28;
            v112 = v20;
            *((_QWORD *)a6 + 15) = v31;
          }
          v50 = v71;
          v138 = (__int16)v71;
          if ((__int16)v71 >= 4)
            v138 = 4;
          v139 = memcmp(v26, v31, v138);
          v26 = (unsigned __int8 *)__s1;
          v140 = v139;
          a6 = (unsigned __int16 *)v194;
          v19 = v189;
          v6 = v190;
          v16 = v188;
          v20 = v112;
          v28 = v111;
          v69 = v179;
          v68 = v182;
          v70 = v169;
          if (!v140)
            goto LABEL_239;
LABEL_285:
          v20 = *v214 - 1;
          if (!*v214)
          {
            v11 = 0;
            v24 = v208;
            v13 = v197;
            v12 = v192;
            goto LABEL_302;
          }
          v48 = v70;
          v149 = *(v214 - 2);
          v150 = *(v214 - 1) | ((v149 & 3) << 8);
          v24 = v208;
          v53 = v199;
          v12 = v192;
          if (!v150)
          {
            v11 = 0;
            v13 = v197;
LABEL_302:
            a5 = v44;
LABEL_298:
            v23 = v185;
            if ((v13 & 0x8000) == 0)
              goto LABEL_39;
LABEL_310:
            if (v175)
              return 10;
            return 11;
          }
          v151 = (unsigned __int16)(v150 - 1);
          v52 = &v208[(v167 * v151) >> 3];
          v152 = -(v167 * v151) & 7;
          v47 = v69;
          v46 = v68;
          if (v152)
          {
            v153 = *v52++;
            v154 = (unsigned __int16)(SFU2MASK[v152] & v153);
          }
          else
          {
            v154 = 0;
          }
          v49 = 0;
          v11 = 0;
          v45 = 0;
          v42 = v214 - 3;
          v218 = v149 >> 2;
          v55 = v196 - v152;
          v54 = v154 << (v196 - v152);
          if (v52 > (char *)v214 - 3)
          {
LABEL_56:
            v11 = v45;
            v23 = v185;
            v13 = v197;
            a5 = v44;
            if (v212 <= 0)
              goto LABEL_310;
            goto LABEL_39;
          }
          goto LABEL_61;
        }
        if (v6 != 3 || (__int16)v68 < 1)
          goto LABEL_147;
        if (v175)
          return 10;
        else
          return 11;
      case 2:
        v80 = *v67++;
        v216 = v80 >> 3;
        v21 = v21 | ((v80 & 7) << 8);
        v49 = 3;
        goto LABEL_143;
      case 3:
        v81 = *v67++;
        v82 = v21 | v81;
        v21 = (v21 | v81) - 1;
        v83 = (__int16)v71;
        if ((__int16)v71 >= 63)
          v84 = 63;
        else
          v84 = v71;
        LOWORD(v218) = v84;
        if (((__int16)v68 & v19) != 0)
          goto LABEL_101;
        v89 = a5[10];
        if (!v209)
          goto LABEL_179;
        if ((__int16)v71 >= 4)
        {
          v90 = *v26;
          v91 = *v31;
          if (v90 < v91
            || v90 == v91
            && ((v92 = v26[1], v93 = v31[1], v92 < v93)
             || v92 == v93 && ((v94 = v26[2], v95 = v31[2], v94 < v95) || v94 == v95 && v26[3] < v31[3])))
          {
LABEL_101:
            v49 = 0;
            goto LABEL_143;
          }
        }
        if ((__int16)v28 <= 3)
        {
          v96 = *v26;
          v97 = *v31;
          while (1)
          {
            if (v96 <= v97)
            {
              if (v96 != v97)
                goto LABEL_170;
              v98 = v26[1];
              v99 = v31[1];
              if (v98 <= v99)
              {
                if (v98 != v99)
                  break;
                v100 = v26[2];
                v101 = v31[2];
                if (v100 <= v101 && (v100 != v101 || v26[3] <= v31[3]))
                  break;
              }
            }
            v102 = v31[4];
            v31 += 4;
            v97 = v102;
            if (!v102)
            {
LABEL_303:
              *v31 = -1;
              goto LABEL_304;
            }
          }
          v97 = *v26;
LABEL_170:
          if (v176 < *((__int16 *)a5 + 24))
          {
            v113 = (unsigned __int8 *)(a5[5] + v174);
            v114 = *v113;
            if (v97 > v114
              || v97 == v114
              && ((v115 = v31[1], v116 = v113[1], v115 > v116)
               || v115 == v116
               && ((v117 = v31[2], v118 = v113[2], v117 > v118) || v117 == v118 && v31[3] > v113[3])))
            {
LABEL_304:
              *((_QWORD *)a6 + 15) = v31;
              return 10;
            }
          }
          *((_QWORD *)a6 + 15) = v31;
        }
LABEL_179:
        if ((v204 & 1) == 0)
        {
          v49 = 0;
          if ((__int16)v71 < SWORD2(v186) || (__int16)v71 > (__int16)v186)
            goto LABEL_143;
        }
        v119 = v19;
        v120 = (unsigned __int8 *)(v89 - (unsigned __int16)v21 + 8 * (unsigned __int16)v21);
        if (v200 == 6)
        {
          if ((v198 & (8 * *v120) & 0xF0) == 0)
          {
            v49 = 0;
            goto LABEL_261;
          }
          v122 = (v120[6] >> 3) & 0xF;
          v202 = v11;
          switch(v122)
          {
            case 3:
              v121 = 48;
              break;
            case 15:
              v121 = 32;
              break;
            case 14:
              v121 = 16;
              break;
            default:
              LOBYTE(v121) = 0;
              goto LABEL_193;
          }
          goto LABEL_192;
        }
        v202 = v11;
        if (v200 != 16)
        {
          v121 = (8 * *v120) & 0xF0;
LABEL_192:
          if ((v121 & v198) == 0)
            goto LABEL_259;
          goto LABEL_193;
        }
        v121 = 0;
        switch((v120[6] >> 3) & 7)
        {
          case 1:
            v121 = 128;
            break;
          case 2:
            goto LABEL_211;
          case 3:
            v121 = 144;
LABEL_211:
            v129 = *v120 & 0xF8;
            if (v129 == 8)
              v130 = v121;
            else
              v130 = v121 | 0x40;
            v131 = v130 | 0x20;
            if (v129 == 16)
              v121 |= 0x40u;
            else
              v121 = v131;
            break;
          case 4:
            v121 = 16;
            break;
          default:
            break;
        }
        if ((v121 & v198) == 0)
          goto LABEL_259;
        switch(v120[2] & 0x1F)
        {
          case 2:
          case 6:
          case 9:
            v121 |= 8u;
            break;
          case 3:
          case 4:
          case 5:
          case 7:
          case 8:
          case 0xA:
          case 0xB:
            break;
          case 0xC:
            v121 |= 4u;
            break;
          case 0xD:
            v121 |= 2u;
            break;
          default:
            if ((v120[2] & 0x1F) == 0x13)
              v121 |= 1u;
            break;
        }
        if ((v121 & 0xF) != 0)
        {
          v49 = v171 & v121;
          if ((v171 & v121) == 0)
            goto LABEL_260;
        }
LABEL_193:
        v123 = v120[2];
        v124 = v123 >> 5;
        if (v6 == 3)
        {
          if ((__int16)a6[51] >= 5)
            v125 = 5;
          else
            v125 = (__int16)a6[51];
          *(_BYTE *)(*((_QWORD *)a6 + 9) + v125) = v124;
          *(_QWORD *)(*((_QWORD *)a6 + 10) + 8 * v125) = v221[0];
          *(_BYTE *)(*((_QWORD *)a6 + 438) + v125) = v121;
          *(_WORD *)(*((_QWORD *)a6 + 3) + 2 * v125) = v82;
          v180 = v69;
          v183 = v68;
          v126 = v28;
          v127 = v70;
          v128 = v71;
          SFdecbit(v216, v200, v125, (uint64_t)v120, (uint64_t)v187, (_QWORD *)v194);
          v71 = v128;
          v70 = v127;
          a5 = v187;
          v69 = v180;
          v68 = v183;
          v21 = (v82 - 1);
          v26 = (unsigned __int8 *)__s1;
          v28 = v126;
          v16 = v188;
          v19 = v189;
          v6 = v190;
          a6 = (unsigned __int16 *)v194;
          v49 = 0;
          ++*(_WORD *)(v194 + 102);
          v175 = 1;
          v11 = v202;
          goto LABEL_143;
        }
        if ((v123 & 0x1F) == 0x12
          || (char)v120[4] < 0
          || v200 == 6 && (v120[5] & 1) != 0 && v123 < 0x20
          || (*v120 & v198 & 7) != 0
          || (v120[1] & 1) != 0)
        {
          goto LABEL_259;
        }
        if (v6 == 5)
        {
          v172 = v123 >> 5;
          v156 = v89 - (unsigned __int16)v21 + 8 * (unsigned __int16)v21;
          v157 = v28;
          v158 = v20;
          v159 = v71;
          v170 = v70;
          v181 = v69;
          v184 = v68;
          if (!SLwldcmp((uint64_t)v26, (__int16)v71, a1, a2))
            goto LABEL_208;
          goto LABEL_247;
        }
        if (v6 == 6)
        {
          v172 = v123 >> 5;
          v156 = v89 - (unsigned __int16)v21 + 8 * (unsigned __int16)v21;
          v157 = v28;
          v170 = v70;
          v181 = v69;
          v184 = v68;
          v158 = v20;
          v159 = v71;
          if (!SFanachk((uint64_t)v26, (unsigned __int16)v71, v165))
            goto LABEL_208;
          goto LABEL_247;
        }
        if (v124 == 2)
        {
          v49 = v164;
          if (!v164)
            goto LABEL_260;
        }
        v142 = v31[3];
        if (v142 != 32 && v142 != v26[3]
          || (v143 = v31[2], v143 != 32) && v143 != v26[2]
          || (v144 = v31[1], v144 != 32) && v144 != v26[1])
        {
LABEL_259:
          v49 = 0;
LABEL_260:
          a5 = v187;
          v11 = v202;
LABEL_261:
          v19 = v119;
          goto LABEL_143;
        }
        a6[1079] = v71;
        a6[1080] = a2;
        v157 = v28;
        v158 = v20;
        v181 = v69;
        v184 = v68;
        v170 = v70;
        v159 = v71;
        v172 = v124;
        v156 = v89 - (unsigned __int16)v21 + 8 * (unsigned __int16)v21;
        if (v163 == 2)
        {
          if (!a6[1076])
          {
            v147 = v26[(__int16)v71 - 1];
            v148 = v161;
            goto LABEL_278;
          }
LABEL_279:
          if (!SFcorbru(v187, (uint64_t)a6, (uint64_t)v26, v71, (uint64_t)a1, a2, (__int16)a6[1072], (__int16)a6[1073], *((_DWORD *)a6 + 537), a6[1071]))goto LABEL_208;
          goto LABEL_247;
        }
        if (v163 != 8)
        {
          if (v163 == 7)
          {
            if (a2 < 7
              || (v145 = &v26[(__int16)v71], *(v162 - 3) != *(v145 - 3))
              || *(v162 - 2) != *(v145 - 2)
              || *(v162 - 1) != *(v145 - 1))
            {
              v146 = (__int16)a6[1076];
              if (v146 <= 1)
              {
                if (v26[(__int16)v71 - 1] != a1[v161])
                {
                  v49 = 0;
                  a6 = (unsigned __int16 *)v194;
                  a5 = v187;
                  v19 = v189;
                  v6 = v190;
                  v16 = v188;
                  v26 = (unsigned __int8 *)__s1;
                  v11 = v202;
                  v69 = v69;
                  v68 = v68;
                  v70 = v70;
                  goto LABEL_143;
                }
                a6 = (unsigned __int16 *)v194;
                v26 = (unsigned __int8 *)__s1;
                if (!v146)
                {
                  v147 = __s1[(__int16)v71 - 2];
                  v148 = v160;
LABEL_278:
                  if (v147 != a1[v148])
                  {
                    v49 = 0;
                    a5 = v187;
                    v19 = v189;
                    v6 = v190;
                    v16 = v188;
                    v11 = v202;
                    v69 = v69;
                    v68 = v68;
                    v70 = v70;
                    goto LABEL_143;
                  }
                }
              }
            }
          }
          goto LABEL_279;
        }
        if (!SFcorbr8(v187, (uint64_t)a6, (unint64_t)v26, (__int16)v71, (uint64_t)a1, a2))
        {
LABEL_208:
          v49 = 0;
          a6 = (unsigned __int16 *)v194;
          a5 = v187;
          v19 = v189;
          v6 = v190;
          v16 = v188;
          v28 = v157;
          v20 = v158;
          v26 = (unsigned __int8 *)__s1;
          v11 = v202;
          v69 = v181;
          v68 = v184;
          v70 = v170;
          v71 = v159;
          goto LABEL_143;
        }
LABEL_247:
        strcpy(__dst, __s1);
        *(_BYTE *)(*(_QWORD *)(v194 + 3504) + *(__int16 *)(v194 + 102)) = v121;
        SFdecbit(v216, v200, 0, v156, (uint64_t)v187, (_QWORD *)v194);
        **(_WORD **)(v194 + 24) = v82;
        v141 = SFchkwrd((uint64_t)v187, v194, __dst, v83, v172, (uint64_t)v221);
        if (v141 == 10)
        {
          **(_BYTE **)(v194 + 72) = v172;
          **(_QWORD **)(v194 + 80) = v221[0];
          *(_WORD *)(v194 + 102) = 1;
          v71 = v159;
          if (*(unsigned __int16 *)(v194 + 40) == *(unsigned __int16 *)(v194 + 42))
            return 10;
          a6 = (unsigned __int16 *)v194;
          v19 = v189;
          v6 = v190;
          v16 = v188;
          v28 = v157;
          v20 = v158;
          v11 = v202;
          v70 = v170;
          if (*(unsigned __int16 *)(v194 + 56) <= (unsigned __int16)(*(_WORD *)(v194 + 44) + v159))
            return 10;
          v49 = 0;
          v26 = (unsigned __int8 *)__s1;
          v69 = v181;
          v68 = v184;
          a5 = v187;
        }
        else
        {
          v49 = 0;
          v15 = v141 == 8;
          a6 = (unsigned __int16 *)v194;
          v19 = v189;
          v6 = v190;
          v16 = v188;
          v28 = v157;
          v20 = v158;
          v26 = (unsigned __int8 *)__s1;
          v11 = v202;
          v69 = v181;
          v68 = v184;
          v70 = v170;
          v71 = v159;
          a5 = v187;
          if (v15)
            return 11;
        }
        goto LABEL_143;
      default:
        goto LABEL_143;
    }
  }
}

uint64_t SFlstini(_WORD *a1, _WORD *a2, _BYTE *a3, _WORD *a4)
{
  *a1 = 0;
  *a2 = 0;
  *a4 = 0;
  *a3 = 0;
  return 10;
}

uint64_t SFmemory(void **a1, int a2, int a3)
{
  uint64_t result;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;

  if (a3)
  {
    result = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x1004092C2EC0CuLL);
    *a1 = (void *)result;
    if (!result)
      return result;
    v6 = (_QWORD *)result;
    v7 = (char *)malloc_type_calloc(7uLL, a2, 0xF73EFA43uLL);
    if (v7)
    {
      v8 = &v7[a2 + a2];
      v6[4] = v8;
      v6[5] = &v8[a2];
      v9 = &v8[a2 + a2];
      v6[6] = v9;
      v10 = &v9[a2];
      v6[2] = v10;
      v6[3] = &v7[a2];
      *v6 = v7;
      v6[1] = &v10[a2];
      return 1;
    }
    free(*a1);
    result = 0;
    *a1 = 0;
  }
  else
  {
    v11 = (void **)*a1;
    if (*a1)
    {
      if (*v11)
        free(*v11);
      free(v11);
      *a1 = 0;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t SFremacc(const char *a1, uint64_t a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;

  v5 = a1;
  v6 = (unsigned __int16)strlen(a1);
  if (v6)
  {
    while (a3 != 8)
    {
      if (a3 != 15)
      {
        v8 = *v5;
        v9 = *(_DWORD *)(a2 + 4 * v8);
LABEL_8:
        if ((~v9 & 0x50000000) != 0 || (v9 & 0x4064000) == 0)
          goto LABEL_14;
        v7 = SFchkaccent[v8 - 192];
        goto LABEL_13;
      }
      v7 = *v5 - ((*(_DWORD *)(a2 + 4 * *v5) & 0x4020000) != 0);
LABEL_13:
      *v5 = v7;
LABEL_14:
      ++v5;
      if (!--v6)
        return 0;
    }
    v8 = *v5;
    v9 = *(_DWORD *)(a2 + 4 * v8);
    if ((v9 & 0x40000) != 0)
      goto LABEL_14;
    goto LABEL_8;
  }
  return 0;
}

uint64_t SFwild(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;

  if (*(__int16 *)(a3 + 68) < a2)
    return 8;
  v9 = *(unsigned __int8 *)(a3 + 54);
  v10 = *(unsigned __int16 *)(a3 + 1192);
  if (*(_WORD *)a4 != 5)
    *(_WORD *)a4 = 5;
  v40 = 0;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = a1;
    while (1)
    {
      v14 = *v13;
      if ((_DWORD)v9 - 1 == v11 && v10 == 2)
        break;
      if (v10 == 2)
      {
        if ((v14 + 127) >= 0x1Fu)
          goto LABEL_18;
        if (v14 != 129)
          goto LABEL_39;
        v16 = v13[1];
        if (v16 == 72)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
          v23 = (__int16)v12;
          v20 = 1;
LABEL_50:
          *(_BYTE *)(v22 + v23) = v20;
LABEL_51:
          v24 = v12 + 1;
          v12 += 2;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + v24) = v20;
LABEL_30:
          if ((*v13 & 0xF0) != 0xE0 && (*v13 + 127) >= 0x1Fu)
            v19 = 1;
          else
            v19 = 2;
          goto LABEL_37;
        }
        if (v16 != 150)
        {
          LOBYTE(v14) = -127;
LABEL_39:
          if (a2 <= (__int16)v12)
          {
            if (v10 == 2)
            {
              v20 = 32;
              if ((v14 + 127) < 0x1Fu || (v21 = v14 & 0xF0, LOBYTE(v14) = 32, v21 == 224))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
                v23 = (__int16)v12;
                goto LABEL_50;
              }
            }
            else
            {
              LOBYTE(v14) = 32;
            }
          }
          else if (v10 == 2 && ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v12) = v14;
            v20 = v13[1];
            goto LABEL_51;
          }
          goto LABEL_26;
        }
      }
      else if (v14 != 42)
      {
        if (v14 != 63)
          goto LABEL_39;
LABEL_25:
        LOBYTE(v14) = 1;
LABEL_26:
        v17 = v12++;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + v17) = v14;
        goto LABEL_29;
      }
LABEL_28:
      while ((int)v9 > (__int16)v12)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v12++) = 1;
LABEL_29:
      if (v10 == 2)
        goto LABEL_30;
      v19 = 1;
LABEL_37:
      v13 += v19;
      v11 = (__int16)v12;
      if ((__int16)v12 >= (int)v9)
        goto LABEL_52;
    }
    v15 = -1;
    if ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0)
      goto LABEL_53;
LABEL_18:
    if ((v14 & 0xF0) != 0xE0 && v14 == 63)
      goto LABEL_25;
    if ((v14 & 0xF0) == 0xE0 || v14 != 42)
      goto LABEL_39;
    goto LABEL_28;
  }
LABEL_52:
  v15 = 0;
LABEL_53:
  v25 = SFbisrch(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16), 0, v15 + (int)v9 - 1, &v40, a3);
  if (v9 <= a2)
    v26 = v9;
  else
    v26 = a2;
  if (v26 >= 1)
  {
    v27 = 0;
    v28 = a1;
    while (1)
    {
      v29 = *v28;
      if ((unsigned __int16)v26 - 1 == (__int16)v27 && v10 == 2)
        break;
      if (v10 == 2)
      {
        if ((v29 + 127) < 0x1Fu)
        {
          if (v29 != 129)
            goto LABEL_73;
          v30 = v28[1];
          if (v30 == 72)
          {
            v31 = -1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27) = -1;
            goto LABEL_76;
          }
          if (v30 != 150)
          {
            LOBYTE(v29) = -127;
LABEL_75:
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27) = v29;
            v31 = v28[1];
LABEL_76:
            v32 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27;
            v27 += 2;
            *(_BYTE *)(v32 + 1) = v31;
LABEL_82:
            if ((*v28 & 0xF0) != 0xE0 && (*v28 + 127) >= 0x1Fu)
              v35 = 1;
            else
              v35 = 2;
            goto LABEL_89;
          }
          goto LABEL_91;
        }
        goto LABEL_69;
      }
      if (v29 != 42)
      {
        if (v29 == 63)
LABEL_79:
          LOBYTE(v29) = -1;
LABEL_80:
        v33 = v27++;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + v33) = v29;
        goto LABEL_81;
      }
LABEL_91:
      while ((int)v9 > (__int16)v27)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27++) = -1;
LABEL_81:
      if (v10 == 2)
        goto LABEL_82;
      v35 = 1;
LABEL_89:
      v28 += v35;
      if ((__int16)v27 >= (__int16)v26)
        goto LABEL_96;
    }
    if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0)
      goto LABEL_96;
LABEL_69:
    if ((v29 & 0xF0) != 0xE0 && v29 == 63)
      goto LABEL_79;
    if ((v29 & 0xF0) == 0xE0 || v29 != 42)
    {
LABEL_73:
      if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0)
        goto LABEL_75;
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  v27 = 0;
LABEL_96:
  while ((int)v9 > (__int16)v27)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27++) = 32;
  v36 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
  v37 = v9 - 1;
  if (*(unsigned __int8 *)(v36 + v9 - 1) == 255)
  {
    *(_BYTE *)(v36 + v37) = -2;
    v36 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
  }
  v38 = SFbisrch(v36, 0, v37, &v40, a3);
  v40 += v38 - v25;
  v39 = v40;
  *(_WORD *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 44) = 0;
  if (*(_BYTE *)(a4 + 3202) == 1)
    PDdecod2(a1, a2, v25, v39, a3, (unsigned __int16 *)a4);
  else
    SFdecode(a1, a2, v25, v39, (_QWORD *)a3, (unsigned __int16 *)a4);
  if (*(_WORD *)(a4 + 40))
    return 10;
  else
    return 11;
}

uint64_t SFdc(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  char v17[2];
  char v18;
  unsigned __int8 v19[65];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a3 + 55);
  v8 = SLLngToA(*(unsigned __int8 *)(a3 + 55));
  if (a2 > 64)
    return 0;
  v9 = v8;
  v10 = **(unsigned __int8 **)(a4 + 72);
  __strcpy_chk();
  if (v10)
    SLrecap(v19, a2, v10, *(_QWORD *)(a4 + 80), v10, v9);
  v18 = 0;
  *(_WORD *)v17 = 0;
  *(_WORD *)(a4 + 18) = 0;
  *(_WORD *)(*(_QWORD *)(a4 + 112) + 62) = 0;
  if ((_DWORD)v7)
    v11 = 1 << (v7 - 1);
  else
    LODWORD(v11) = -1;
  if ((v11 & 0x8000) != 0)
  {
    DCengan((uint64_t)v19, v10, v9, v17);
    v17[1] = 0;
    **(_BYTE **)(a4 + 3496) = atoi(v17);
    return 0;
  }
  if ((v11 & 0x994) != 0)
  {
    DCposclt(v7, (uint64_t)v19, a2, v17);
    if ((v11 & 0x814) == 0 || v17[0] != 49)
      goto LABEL_26;
    DCposcls(v7, (uint64_t)v19, a2, v9, v17);
    v17[1] = 0;
    v12 = atoi(v17);
    if ((v11 & 0x94) != 0)
    {
      v13 = *(_QWORD *)(a4 + 112);
      v14 = 16 * (*(_WORD *)(v13 + 62) | v12 & 7);
    }
    else
    {
      if ((v11 & 0x800) == 0)
      {
LABEL_26:
        if ((v11 & 0x114) != 0)
        {
          PDDCpreclt(v19, v9, v17);
          PDDCprecls(v7, (uint64_t)v17);
          *(_WORD *)(*(_QWORD *)(a4 + 112) + 62) |= atoi(v17) & 0xF;
        }
        if ((v11 & 0x80) != 0)
        {
          DCposacc((uint64_t)v19, a2, v9, v17);
          *(_WORD *)(*(_QWORD *)(a4 + 112) + 62) |= atoi(v17) & 0xF;
        }
        SFcltdb(a3, a4);
        return 0;
      }
      v13 = *(_QWORD *)(a4 + 112);
      v14 = *(_WORD *)(v13 + 62) | v12 & 7;
    }
    *(_WORD *)(v13 + 62) = v14;
    goto LABEL_26;
  }
  if ((v11 & 0x11660) != 0 && *(__int16 *)(a4 + 102) >= 1)
  {
    v15 = 0;
    do
    {
      PDDCrmcc(v7, *(unsigned __int8 *)(*(_QWORD *)(a4 + 72) + v15), v17);
      if (v17[0] == 49)
        *(_WORD *)(*(_QWORD *)(a4 + 3520) + 2 * v15) |= 8u;
      *(_BYTE *)(*(_QWORD *)(a4 + 3528) + v15) = 0;
      *(_BYTE *)(*(_QWORD *)(a4 + 3536) + v15) = 0;
      if ((v11 & 0x1060) != 0)
        *(_BYTE *)(*(_QWORD *)(a4 + 3536) + v15) |= PDDCdblend(v7, (uint64_t)v19, v9, a2) & 3;
      ++v15;
    }
    while (v15 < *(__int16 *)(a4 + 102));
  }
  return 0;
}

uint64_t ICcapcod(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 v24;
  uint64_t v25;
  __int16 v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  unsigned int v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  _BYTE v41[6];

  if ((*(_WORD *)(a2 + 1322) & 1) == 0)
  {
    v4 = *(_QWORD *)(a2 + 3184);
    v5 = *(_QWORD *)(v4 + 264);
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 56);
    v7 = ICEndToken(a2);
    v8 = strlen(a1);
    if (*(_WORD *)(v5 + 102))
    {
      v40 = v6;
      v9 = 0;
      v10 = 0;
      v11 = (_DWORD *)(v5 + 92);
      v12 = v8;
      while (1)
      {
        v13 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 72) + v10);
        v41[v10] = v13;
        v14 = *(unsigned __int8 *)(v5 + 88);
        if (v13 == 4)
        {
          if (v14 == 1)
          {
            if (!v7)
              goto LABEL_13;
          }
          else if (v14 == 3 && v7 == 0)
          {
LABEL_13:
            *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v10) = 0;
            if ((*(_DWORD *)(v5 + 92) & 0x80000000) != 0)
              *(_WORD *)(a2 + 1322) |= 0x400u;
            v13 = 4;
            goto LABEL_16;
          }
          v13 = 0;
          v41[v10] = 0;
        }
LABEL_16:
        if ((v14 == 3 || v14 == 0) && v13 == 0 && v7 == 1)
        {
          if ((*v11 & 0x80000000) == 0)
            *(_WORD *)(a2 + 1322) |= 0x800u;
          v13 = 1;
          v41[v10] = 1;
          *(_DWORD *)(*(_QWORD *)(v5 + 80) + v9) |= 0x80000000;
        }
        result = SLchk((unsigned __int8 *)a1, v12, v14, (int *)(v5 + 92), v13, (_DWORD *)(*(_QWORD *)(v5 + 80) + v9));
        if (!(_DWORD)result)
        {
          if ((!*(_BYTE *)(a2 + 1414)
             || *(_BYTE *)(v5 + 88) != 3
             || *(_BYTE *)(*(_QWORD *)(v5 + 72) + v10) != 3
             || *(_DWORD *)(v5 + 92) == **(_DWORD **)(v5 + 80))
            && (*(_BYTE *)(a2 + 8) != 11
             || *a1 != 39
             || *(_BYTE *)(*(_QWORD *)(v5 + 72) + v10)
             || *(_BYTE *)(v5 + 88) != 1))
          {
            SLrecap((unsigned __int8 *)a1, v12, v13, v5 + 92, *(unsigned __int8 *)(v5 + 88), v6);
            v26 = *(_WORD *)(a2 + 1322);
            if ((v26 & 0x40) != 0)
            {
              v27 = strlen((const char *)(a2 + 3090));
              SLrecap((unsigned __int8 *)(a2 + 3090), v27, v13, v5 + 92, *(unsigned __int8 *)(v5 + 88), v6);
              v26 = *(_WORD *)(a2 + 1322);
            }
            if ((v26 & 0x20) != 0)
              *(_WORD *)(a2 + 3176) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 3184) + 232)
                                                                       + 104)
                                                           + 8 * v10)
                                               + 66);
            return 10;
          }
          result = 8;
        }
        ++v10;
        v9 += 8;
        if (v10 >= *(unsigned __int16 *)(v5 + 102))
        {
          if ((_DWORD)result != 8)
            return result;
          if (*(_BYTE *)(a2 + 8) == 6 && (*(_BYTE *)(a2 + 1328) & 0x40) != 0)
            return 11;
          v20 = strlen(a1);
          SFadd(a1, v20, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
          v21 = *(unsigned __int16 *)(v5 + 102);
          if (*(_WORD *)(v5 + 102))
          {
            v22 = 0;
            v23 = *(unsigned __int8 *)(v5 + 88);
            v24 = v21 - 1;
            while (1)
            {
              if (v41[v22] == v23)
              {
                v25 = *(_QWORD *)(v5 + 80);
                if (v23 != 3 || *(_DWORD *)(v25 + 8 * v22) == *v11)
                {
                  SLrecap((unsigned __int8 *)(a2 + 1690), v12, *(unsigned __int8 *)(v5 + 88), v25 + 8 * v22, *(unsigned __int8 *)(v5 + 88), v40);
                  v28 = *(_WORD *)(a2 + 1322);
                  if ((v28 & 0x40) == 0)
                    goto LABEL_76;
                  v29 = strlen((const char *)(a2 + 3090));
                  v30 = *(_QWORD *)(v5 + 80) + 8 * v22;
                  v31 = *(unsigned __int8 *)(v5 + 88);
                  v32 = v29;
                  v33 = (unsigned __int8 *)(a2 + 3090);
                  v34 = v23;
                  goto LABEL_75;
                }
              }
              if (v22 == (_DWORD)v21 - 1)
                break;
              if (++v22 == v21)
                goto LABEL_78;
            }
            if ((__int16)v21 >= 2)
            {
              if ((v21 & 0xFE) != 0)
              {
                LOBYTE(v24) = v21 - 1;
                v35 = (v21 - 1);
                if (v41[v35 - 1] <= v41[v35])
                  LOBYTE(v24) = v35 - 1;
                v24 = v24;
              }
              else
              {
                v24 = 0;
              }
            }
            v22 = v24;
            if (v41[v24] <= 1u)
              v36 = 1;
            else
              v36 = v41[v24];
            if (*(int *)(v5 + 92) >= 0)
              v37 = v41[v24];
            else
              v37 = v36;
            SLrecap((unsigned __int8 *)(a2 + 1690), v12, v37, *(_QWORD *)(v5 + 80) + 8 * v24, *(unsigned __int8 *)(v5 + 88), v40);
            v28 = *(_WORD *)(a2 + 1322);
            if ((v28 & 0x40) != 0)
            {
              v38 = strlen((const char *)(a2 + 3090));
              v30 = *(_QWORD *)(v5 + 80) + 8 * v22;
              v31 = *(unsigned __int8 *)(v5 + 88);
              v32 = v38;
              v33 = (unsigned __int8 *)(a2 + 3090);
              v34 = v37;
LABEL_75:
              SLrecap(v33, v32, v34, v30, v31, v40);
              v28 = *(_WORD *)(a2 + 1322);
            }
LABEL_76:
            if ((v28 & 0x20) != 0)
              *(_WORD *)(a2 + 3176) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 3184) + 232)
                                                                       + 104)
                                                           + 8 * v22)
                                               + 66);
          }
LABEL_78:
          v39 = *(unsigned __int8 *)(a2 + 8);
          switch(v39)
          {
            case 5:
LABEL_81:
              if ((*(_BYTE *)(a2 + 24) & 0x40) == 0)
                goto LABEL_86;
              break;
            case 15:
              if (*(_BYTE *)(v5 + 88) != 2 && ((*(_BYTE *)(a2 + 24) & 0x40) == 0 || (*v11 & 0x80000000) == 0))
                goto LABEL_86;
              v39 = 15;
              break;
            case 8:
              goto LABEL_81;
            default:
LABEL_86:
              *(_QWORD *)(a2 + 1328) |= 0x400uLL;
              **(_WORD **)(a2 + 3184) |= 4u;
              return 2;
          }
          SFremacc((const char *)(a2 + 1690), v40, v39);
          goto LABEL_86;
        }
      }
    }
  }
  return 10;
}

uint64_t ICEndToken(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  signed int v7;
  unsigned __int8 v8;
  int v10;
  unsigned int v11;
  __int16 v12;

  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD *)(v2 + 80);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 248) + 56);
  v5 = (_BYTE *)(v3 + 65);
  v6 = strlen((const char *)(v3 + 65));
  v7 = strlen((const char *)(a1 + 1339)) << 16;
  if (!v7 || v7 < 0x20000 && *v5 == 46 || SLstrcmp((_BYTE *)v3, (unsigned __int8 *)(a1 + 1339)))
    return 2;
  v10 = v6 << 16;
  if (v6 << 16 >= 1 && (*(_DWORD *)(v4 + 4 * v5[(__int16)v6 - 1]) & 0x800000) != 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 1417);
    if (!*(_BYTE *)(a1 + 1417))
    {
      v8 = 1;
      goto LABEL_22;
    }
  }
  else
  {
    v11 = *(unsigned __int8 *)(a1 + 1417);
    if (!*(_BYTE *)(a1 + 1417)
      || (*(_DWORD *)(v4 + 4 * *(unsigned __int8 *)(strlen((const char *)(a1 + 1417)) + a1 + 1416)) & 0x800000) == 0)
    {
      if (v10 > 0x10000)
      {
        v12 = 0;
        while ((*(_DWORD *)(v4 + 4 * v5[v12]) & 0x800000) == 0)
        {
          v8 = 0;
          if ((__int16)v6 - 1 <= ++v12)
            return v8;
        }
        v8 = 2;
        goto LABEL_28;
      }
      return 0;
    }
  }
  if ((*(_DWORD *)(v4 + 4 * v11) & 0xC00000) != 0)
    v8 = 1;
  else
    v8 = 2;
LABEL_22:
  if (v10 > 0x20000 && v5[(__int16)v6 - 1] == 46 && v5[(__int16)v6 - 3] == 46)
    v8 = 2;
  if (*(_BYTE *)(a1 + 1416) && *(_BYTE *)(a1 + 8) != 16)
    return 0;
LABEL_28:
  if ((*(_WORD *)(v3 + 132) & 0xC00) != 0 && *v5 == 46)
    v8 = 2;
  if (*(unsigned __int8 *)(a1 + 1414) | *(_DWORD *)(v4 + 4 * *(unsigned __int8 *)(a1 + 1547)) & 0x8000000)
    return 0;
  return v8;
}

uint64_t ICcchadd(uint64_t a1, unsigned __int16 a2, int a3, int a4, int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  __int16 v17;
  int v18;
  int v19;
  __int16 v20;
  unsigned int v21;
  int v22;
  __int16 v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  BOOL v36;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  if (a3 == 3)
    return 11;
  v42 = v6;
  v43 = v7;
  v11 = a2;
  v12 = *(_QWORD *)(a6 + 3184);
  v41 = 0;
  v13 = *(_QWORD *)(v12 + 264);
  v14 = a2;
  SLfun(a1, 0, (__int16)(a2 - 1), (unsigned __int16 *)&v41 + 1, &v41);
  v15 = *(__int16 *)(*(_QWORD *)(v13 + 24) + 2 * a4);
  v16 = *(_DWORD *)(v12 + 24);
  v17 = v41 & (v16 - 1);
  LOWORD(v41) = v17;
  v18 = *(__int16 *)(v12 + 20);
  if (v18 < 0)
  {
    LOWORD(v25) = 0;
    LODWORD(v26) = 0;
    goto LABEL_35;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  LOWORD(v22) = 0;
  v23 = 3 - BYTE2(v41);
  v24 = 2 * BYTE2(v41);
  while (1)
  {
    v25 = v17 >> 13;
    v26 = 4 * (v17 & 0x1FFF);
    v27 = v12 + 8 * v25;
    v30 = *(_QWORD *)(v27 + 32);
    v29 = (uint64_t *)(v27 + 32);
    v28 = v30;
    v31 = *(unsigned __int8 *)(v30 + v26);
    v32 = *(unsigned __int8 *)(v30 + (v26 | 1));
    v33 = *(unsigned __int8 *)(v30 + v26 + 2);
    v34 = *(unsigned __int8 *)(v30 + v26 + 3);
    if (v34 == BYTE2(v41))
      break;
    if (v19)
    {
      v19 = 1;
      goto LABEL_17;
    }
    if ((v31 & 0x80) == 0)
    {
      v19 = 1;
      v21 = v26;
      v20 = v25;
      goto LABEL_17;
    }
    v19 = 0;
LABEL_25:
    if ((unsigned __int16)v22 != (unsigned __int16)v18)
    {
      do
        v23 += v24;
      while (v16 == v23);
      v17 = (v41 + v23) & (v16 - 1);
      LOWORD(v41) = v17;
      v22 = (__int16)(v22 + 1);
      if (v22 <= (__int16)v18)
        continue;
    }
    goto LABEL_32;
  }
  if ((v33 & 0x7F) == HIBYTE(HIWORD(v41)) && ((v33 >> 7) & 0xFFFFFFF1 | (2 * (v32 & 7))) == (v14 & 0xF))
  {
    if (((v32 >> 4) & 0xFFFFF80F | (16 * (v31 & 0x7F))) != v15)
    {
      *(_BYTE *)(v28 + v26) = v31 | 0x80;
      goto LABEL_17;
    }
    if (a5)
    {
      *(_BYTE *)(v28 + (v26 | 1)) = v32 | 8;
      v28 = *v29;
      LOBYTE(v31) = *(_BYTE *)(*v29 + v26);
    }
    *(_BYTE *)(v28 + v26) = v31 | 0x80;
    return 11;
  }
LABEL_17:
  if (v31)
    v36 = 0;
  else
    v36 = v32 == 0;
  if (!v36 || (v34 | v33) != 0)
  {
    LOWORD(v18) = *(_WORD *)(v12 + 20);
    goto LABEL_25;
  }
  LOBYTE(v31) = 0;
LABEL_32:
  if (v19)
  {
    LOBYTE(v31) = *(_BYTE *)(*(_QWORD *)(v12 + 8 * v20 + 32) + v21);
    LODWORD(v26) = v21;
    LOWORD(v25) = v20;
  }
  if ((v31 & 0x80) != 0)
  {
    v40 = *(_QWORD *)(v12 + 8 * (__int16)v25 + 32);
    *(_BYTE *)(v40 + v26) &= ~0x80u;
    return 11;
  }
LABEL_35:
  v38 = v12 + 8 * (__int16)v25;
  *(_BYTE *)(*(_QWORD *)(v38 + 32) + v26) = v15 >> 4;
  v39 = (v14 >> 1) & 7 | (16 * v15);
  if (a5)
    LOBYTE(v39) = v39 | 8;
  *(_BYTE *)(*(_QWORD *)(v38 + 32) + v26 + 1) = v39;
  *(_BYTE *)(*(_QWORD *)(v38 + 32) + v26 + 2) = HIBYTE(v41) | (v11 << 7);
  *(_BYTE *)(*(_QWORD *)(v38 + 32) + v26 + 3) = BYTE2(v41);
  *(_BYTE *)(*(_QWORD *)(v38 + 32) + v26) |= 0x80u;
  return 10;
}

uint64_t ICcchver(uint64_t a1, int a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  unsigned __int16 v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  unsigned int v24;
  char v26;
  unsigned int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v43;
  unsigned int v45;
  int v46;

  v5 = *(_QWORD *)(a4 + 3184);
  v6 = *(_QWORD *)(v5 + 248);
  v40 = *(_QWORD *)(v6 + 56);
  v43 = *(_QWORD *)(v5 + 264);
  v45 = *(unsigned __int16 *)(v43 + 3488);
  v46 = 0;
  *a3 = 0;
  SLfun(a1, 0, (__int16)(a2 - 1), (unsigned __int16 *)&v46 + 1, &v46);
  v7 = *(_DWORD *)(v5 + 24);
  v8 = v7 - 1;
  v9 = (v7 - 1) & v46;
  LOWORD(v46) = v9;
  if ((*(__int16 *)(v5 + 20) & 0x80000000) == 0)
  {
    v10 = 0;
    LOWORD(v11) = 0;
    v12 = 3 - BYTE2(v46);
    v13 = a2 & 0xF;
    v14 = 2 * BYTE2(v46);
    v37 = a2;
    v15 = (unsigned __int16)a2;
    result = 11;
    v39 = v6;
    v38 = v13;
    while (1)
    {
      v17 = 4 * (v9 & 0x1FFF);
      v18 = v5 + 8 * (v9 >> 13);
      v21 = *(_QWORD *)(v18 + 32);
      v20 = (_QWORD *)(v18 + 32);
      v19 = v21;
      v22 = (char *)(v21 + v17);
      if (*(unsigned __int8 *)(v21 + v17 + 3) != BYTE2(v46))
        goto LABEL_8;
      v23 = *(unsigned __int8 *)(v19 + (v17 | 2));
      v24 = v22[1];
      if ((v23 & 0x7F) != HIBYTE(HIWORD(v46)) || ((v23 >> 7) & 0xFFFFFFF1 | (2 * (v24 & 7))) != v13)
        goto LABEL_8;
      if (v10 > 5)
        return result;
      v26 = *v22;
      if ((v24 & 8) != 0)
        *a3 = 1;
      v27 = (v24 >> 4) & 0xFFFFF80F | (16 * (v26 & 0x7F));
      if (!v27)
      {
        **(_WORD **)(v43 + 24) = 0;
        *(_BYTE *)(*v20 + 4 * (v9 & 0x1FFF)) |= 0x80u;
        return 10;
      }
      v28 = (unsigned __int8 *)(*(_QWORD *)(v6 + 80) + 7 * (unsigned __int16)(v27 - 1));
      v29 = v28[2];
      if (*(_BYTE *)(v6 + 55) == 16)
        break;
      v30 = (8 * *v28) & 0xC0;
      if ((v30 & v45) != 0)
        goto LABEL_20;
LABEL_10:
      v11 = (__int16)(v11 + 1);
      if (v11 > *(__int16 *)(v5 + 20))
        return result;
    }
    v30 = 0;
    switch(v28[6] >> 3)
    {
      case 1:
        v30 = 128;
        break;
      case 2:
        goto LABEL_34;
      case 3:
        v30 = 144;
LABEL_34:
        v35 = *v28 & 0xF8;
        v36 = v30 | 0x40;
        if (v35 != 8)
          v30 |= 0x40u;
        v30 |= 0x20u;
        if (v35 == 16)
          v30 = v36;
        break;
      case 4:
        v30 = 16;
        break;
      default:
        break;
    }
    switch(v29 & 0x1F)
    {
      case 2u:
      case 6u:
      case 9u:
        v30 |= 8u;
        break;
      case 3u:
      case 4u:
      case 5u:
      case 7u:
      case 8u:
      case 0xAu:
      case 0xBu:
        break;
      case 0xCu:
        v30 |= 4u;
        break;
      case 0xDu:
        v30 |= 2u;
        break;
      default:
        if ((v29 & 0x1F) == 0x13)
          v30 |= 1u;
        break;
    }
    if ((v30 & v45) < 0x10 || (v30 & 0xF) != 0 && (v30 & v45 & 0xF) == 0)
      goto LABEL_10;
LABEL_20:
    v31 = v29 >> 5;
    v32 = (_QWORD *)(*(_QWORD *)(v43 + 80) + 8 * v10);
    *v32 = 0;
    if (v31 == 1)
    {
      *(_DWORD *)v32 = 0x80000000;
    }
    else if (v31 == 2 && v37 >= 1)
    {
      v34 = 0;
      do
      {
        if ((*(_DWORD *)(v40 + 4 * *(unsigned __int8 *)(a1 + v34)) & 0x60000040) != 0)
          *((_DWORD *)v32 + ((unsigned __int16)v34 >> 5)) |= 1 << ~(_BYTE)v34;
        ++v34;
      }
      while (v15 != v34);
    }
    *(_BYTE *)(*(_QWORD *)(v43 + 72) + v10) = v31;
    *(_BYTE *)(*(_QWORD *)(v43 + 3504) + v10) = v30;
    *(_WORD *)(*(_QWORD *)(v43 + 24) + 2 * v10) = v27;
    SFdecbit(0, *(unsigned __int8 *)(a4 + 8), v10++, (uint64_t)v28, *(_QWORD *)(v5 + 248), (_QWORD *)v43);
    *(_WORD *)(v43 + 102) = v10;
    *(_BYTE *)(*v20 + v17) |= 0x80u;
    result = 10;
    v6 = v39;
    v8 = v7 - 1;
    v13 = v38;
    if (*a3)
      return result;
    do
LABEL_8:
      v12 += v14;
    while (v7 == v12);
    v9 = (v46 + v12) & v8;
    LOWORD(v46) = v9;
    goto LABEL_10;
  }
  return 11;
}

uint64_t ICclt(char *a1, size_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  __int16 v8;
  char *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  char *v18;
  uint64_t v19;
  _BOOL4 v20;
  void *v21;
  uint64_t v22;
  _WORD *v23;
  __int16 v24;
  __int16 v25;
  _BOOL4 v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  void *v37;
  int v38;
  char v39[65];
  char __s[65];
  char v41;
  unsigned __int8 v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 3184);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = *(unsigned __int16 **)(v5 + 112);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = strlen(a1);
  v34 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 56);
  v35 = 0;
  *(_WORD *)(v5 + 3492) &= ~0x100u;
  v6[32] &= ~0x100u;
  v6[33] &= ~0x100u;
  v6[34] &= ~0x100u;
  v6[17] = 0;
  v9 = (char *)(v6 + 17);
  v10 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
  v11 = *(_WORD **)(v10 + 112);
  *(_WORD *)(v10 + 3492) &= ~0x80u;
  v11[32] &= ~0x200u;
  v11[33] &= ~0x200u;
  v11[34] &= ~0x200u;
  v11[22] = 0;
  v36 = 0;
  v37 = 0;
  *(_QWORD *)(a2 + 1328) &= 0xFFFFFFFFFFFFCBE8;
  v6[31] &= ~0x80u;
  *((_BYTE *)v6 + 92) = 0;
  *((_BYTE *)v6 + 18) = 0;
  v6[16] = 0;
  *((_DWORD *)v6 + 22) = 0;
  v6[34] = 0;
  *((_DWORD *)v6 + 16) = 0;
  if (*(_BYTE *)(a2 + 1415))
  {
    v12 = do_trailcheck(a2);
    if ((_DWORD)v12)
      return v12;
    a1[*(__int16 *)(a2 + 1612)] = 0;
    v13 = *(_WORD *)(a2 + 1612);
  }
  else
  {
    v13 = v8;
  }
  if (v7 > 0xC || ((1 << v7) & 0x1028) == 0)
    goto LABEL_17;
  if (!*(_BYTE *)(a2 + 1414))
  {
    if (v7 == 3)
    {
      if (*(_BYTE *)(a2 + 1416))
      {
        v12 = do_leadcheck((uint64_t)a1, a2);
        if ((_DWORD)v12 != 11)
          return v12;
      }
      *(_WORD *)(v5 + 42) = 100;
      goto LABEL_15;
    }
LABEL_17:
    *(_WORD *)(v5 + 42) = 100;
LABEL_18:
    v14 = ICverify(a1, v13, a2);
    goto LABEL_19;
  }
  v12 = do_leadcheck((uint64_t)a1, a2);
  if ((_DWORD)v12 != 11)
    return v12;
  *(_WORD *)(v5 + 42) = 100;
  if (v7 != 3)
    goto LABEL_18;
LABEL_15:
  if (*(_DWORD *)(v5 + 3472))
    v14 = middle_dot(a1, v13, a2);
  else
    v14 = middle_dot_ver(a1, v13, a2);
LABEL_19:
  v12 = v14;
  if ((v14 & 0xFFFFFFF7) == 2)
    return v12;
  v38 = 0;
  if (v7 != 12)
  {
    if (v7 == 8)
    {
      v15 = spanish_accentchk(a1, a2, (__int16)v14);
    }
    else
    {
      if ((*(_WORD *)(v5 + 3492) & 0x400) == 0)
        goto LABEL_26;
      v15 = preclitic_search(a1, &v41, a2, &v35);
      if ((_DWORD)v15 == 11)
        goto LABEL_26;
    }
    v12 = v15;
    if ((_DWORD)v15)
      return v12;
  }
LABEL_26:
  v33 = *(_WORD *)(*(_QWORD *)(a2 + 3184) + 4);
  v16 = v35;
  if (!v35)
    __strcpy_chk();
  if (v7 == 12 || v7 == 5)
  {
    if (!*(_DWORD *)(a2 + 1672))
      goto LABEL_44;
  }
  else if (v7 == 3 && (*(_WORD *)(v5 + 3492) & 0x400) == 0 && !*(_DWORD *)(a2 + 1672))
  {
    v20 = 0;
    if (v16)
      goto LABEL_56;
LABEL_66:
    if (!*(_BYTE *)(a2 + 1412))
    {
      v26 = v20;
      __strcpy_chk();
      if (v13 >= 3 && !strcspn(v39, "cdjlmnstv"))
      {
        __strcpy_chk();
        *((_BYTE *)v6 + 34) = *a1;
        v27 = *(unsigned __int8 *)(v5 + 88);
        if (v27 == 1)
          v27 = 0;
        *((_BYTE *)v6 + 76) = v27;
        if (v27 == 3)
        {
          if ((*(_DWORD *)(v5 + 92) & 0x7FFFFFFF) == 0x40000000)
            *((_BYTE *)v6 + 76) = 1;
          else
            *((_DWORD *)v6 + 20) *= 2;
        }
        *(unsigned __int16 *)((char *)v6 + 35) = 39;
        v28 = (__int16)(v13 - 1);
        if (ICverify(&v41, v28, a2) == 10
          && SFcltchk((uint64_t)(v6 + 17), 0, 1, (unsigned __int16 *)&v38 + 1, &v38, *v6, *((_QWORD *)v6 + 1)) == 10&& (_byteswap_ushort(*(_WORD *)(*((_QWORD *)v6 + 1) + 4 * (unsigned __int16)v38)) & v6[29]) != 0)
        {
          if (SFcltscr((unsigned __int8 *)&v41, v28, *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 248), (uint64_t)v6) == 10)
          {
            if (!v26
              || ((v29 = *(_DWORD *)(v34 + 4 * v41), v41 == 104) || (v29 & 0x10000000) != 0)
              && (v41 != 105 || (*(_DWORD *)(v34 + 4 * v42) & 0x10000000) == 0)
              && ((v29 & 0x800) != 0 || *v9 != 99 || *((_BYTE *)v6 + 35) != 39))
            {
              v32 = strlen(&v41);
              SFadd(&v41, v32, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
              ++*(_WORD *)(v4 + 2);
              if (*(_BYTE *)(a2 + 8) == 3)
                puntvolat_to_period_list(a2);
              goto LABEL_64;
            }
          }
          v30 = *(_WORD *)(a2 + 1322);
          if ((v30 & 0x20) != 0)
            *(_WORD *)(a2 + 1322) = v30 & 0xFFDF;
        }
        clear_preorpost(a2, 1);
      }
    }
    return 11;
  }
  if (v16)
  {
    v17 = (char)v16;
    v18 = &v41;
    v19 = a2;
  }
  else
  {
    v18 = v39;
    v19 = a2;
    v17 = 0;
  }
  v12 = postclitic_search((uint64_t)v18, v19, (uint64_t)&v36, v33, v17);
  if ((v12 - 890) <= 0xFFFFFFFD)
  {
    if ((v7 == 9 || v7 == 5) && v37)
      free(v37);
    return v12;
  }
LABEL_44:
  v20 = v7 == 9;
  if (v7 == 9 || v7 == 5)
  {
    v21 = v37;
    if (v37)
    {
      if (v7 == 5 && *(_BYTE *)v37)
        __strcpy_chk();
      free(v21);
      v20 = v7 == 9;
    }
  }
  if ((v7 & 0xFE) == 8)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
    v23 = *(_WORD **)(v22 + 112);
    *(_WORD *)(v22 + 3492) &= ~0x80u;
    v23[32] &= ~0x200u;
    v23[33] &= ~0x200u;
    v23[34] &= ~0x200u;
    v23[22] = 0;
    *(_WORD *)(*(_QWORD *)(a2 + 3184) + 4) = v33;
  }
  v12 = 11;
  if (v7 > 9 || ((1 << v7) & 0x228) == 0)
    return v12;
  if (!v16)
    goto LABEL_66;
LABEL_56:
  if (!*v9)
    return 11;
  v12 = 11;
  if (*((_BYTE *)v6 + 35) == 39)
  {
    if (v41)
    {
      if (v42)
      {
        __s[0] = *v9;
        __s[1] = 0;
        __strcat_chk();
        __strcat_chk();
        v24 = strlen(__s);
        if (ICverify(__s, v24, a2) == 10)
        {
          v25 = strlen(__s);
          SFadd(__s, v25, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
          if (*(_BYTE *)(a2 + 8) == 3)
            puntvolat_to_period_list(a2);
          clear_preorpost(a2, 1);
LABEL_64:
          *(_WORD *)v4 |= 4u;
          *(_QWORD *)(a2 + 1328) |= 0x2000uLL;
          return 2;
        }
      }
    }
  }
  return v12;
}

uint64_t clear_preorpost(uint64_t result, int a2)
{
  uint64_t v2;
  _WORD *v3;
  __int16 v4;
  __int16 v5;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 3184) + 264);
  v3 = *(_WORD **)(v2 + 112);
  if (a2)
    v4 = -257;
  else
    v4 = -129;
  *(_WORD *)(v2 + 3492) &= v4;
  if (a2)
    v5 = -257;
  else
    v5 = -513;
  v3[32] &= v5;
  v3[33] &= v5;
  v3[34] &= v5;
  if (a2)
    v3[17] = 0;
  else
    v3[22] = 0;
  return result;
}

uint64_t do_trailcheck(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  __int16 v9;
  uint64_t v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v14 = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 264);
  v3 = *(unsigned __int16 **)(v2 + 112);
  v4 = *v3;
  v5 = *((_QWORD *)v3 + 1);
  *(_WORD *)(v2 + 42) = 100;
  v6 = a1 + 1547;
  v7 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
  if (SFcltchk(v6, 0, (__int16)(*(_WORD *)(a1 + 1612) - 1), (unsigned __int16 *)&v14 + 1, &v14, v4, v5) == 10)
  {
    *(_WORD *)(v2 + 3492) |= 0x100u;
    *(_QWORD *)(a1 + 1328) |= 0x10uLL;
    return 3;
  }
  else if (v7 == 10 && *(_BYTE *)(a1 + 8) == 9)
  {
    return 10;
  }
  else
  {
    --*(_WORD *)(*(_QWORD *)(a1 + 3184) + 4);
    v9 = *(_WORD *)(a1 + 1612) - 1;
    *(_WORD *)(a1 + 1612) = v9;
    *(_BYTE *)(a1 + v9 + 1547) = 0;
    v10 = a1 + 1482;
    v11 = strlen((const char *)(a1 + 1482));
    v12 = v11;
    if (v11)
    {
      v13 = v11;
      do
      {
        *(_BYTE *)(v10 + v13) = *(_BYTE *)(a1 + (v13 - 1) + 1482);
        --v13;
      }
      while ((_WORD)v13);
    }
    result = 0;
    *(_BYTE *)(a1 + 1482) = 39;
    *(_BYTE *)(v12 + v10 + 1) = 0;
  }
  return result;
}

uint64_t do_leadcheck(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned int v5;
  uint64_t v6;
  char v7;
  __int16 v8;
  uint64_t result;
  __int16 v10;
  unsigned __int16 v11;
  char __s[65];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
  v4 = *(unsigned __int16 **)(v3 + 112);
  v5 = *v4;
  v6 = *((_QWORD *)v4 + 1);
  if (*(_BYTE *)(a2 + 8) == 3 && *(_BYTE *)(a2 + 1416))
    v7 = 39;
  else
    v7 = 45;
  v11 = 0;
  v10 = 0;
  __s[0] = v7;
  __s[1] = 0;
  __strcat_chk();
  v8 = strlen(__s);
  result = SFcltchk((uint64_t)__s, 0, (__int16)(v8 - 1), &v11, &v10, v5, v6);
  if ((_DWORD)result != 11)
  {
    *(_WORD *)(v3 + 3492) |= 0x80u;
    *(_QWORD *)(a2 + 1328) |= 0x10uLL;
    ++*(_WORD *)(*(_QWORD *)(a2 + 3184) + 4);
    __strcpy_chk();
    if (__s[0] == 45 || __s[0] == 39)
      *(_BYTE *)(strlen((const char *)(a2 + 1417)) + a2 + 1417 - 1) = 0;
    return 3;
  }
  return result;
}

uint64_t middle_dot(char *__src, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  size_t v15;
  __int16 i;
  uint64_t result;
  uint64_t v18;
  char __dst[65];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 < 3)
    return ICverify(__src, a2, a3);
  v6 = *(_QWORD *)(a3 + 3184);
  v7 = *(_QWORD *)(v6 + 264);
  v8 = *(_WORD *)(v6 + 2);
  v9 = a2 - 1;
  v10 = 1;
  v11 = 1;
  while (((*(_DWORD *)(v7 + 3472 + 4 * ((unsigned __int16)(v11 + v8) >> 5)) >> ~(v10 + v8)) & 1) == 0
       || __src[v11] != 108
       || __src[v10 + 1] != 108)
  {
    v10 = ++v11;
    if (v9 <= v11)
    {
      v11 = 0;
      break;
    }
  }
  v12 = 1;
  v13 = 1;
  while (*(_BYTE *)(a3 + 8) != 3
       || __src[v12 - 1] != 108
       || __src[v12 + 1] != 108
       || (*(_BYTE *)(a3 + 24) & 0x40) == 0
       || __src[v13] != 46)
  {
    v12 = ++v13;
    if (v9 <= v13)
      goto LABEL_15;
  }
  __src[v13] = -73;
LABEL_15:
  if (!v11)
    return ICverify(__src, a2, a3);
  if ((v11 & 0x8000) == 0)
  {
    v14 = (__int16)(v11 + 1);
    if (v14 <= 1)
      v15 = 1;
    else
      v15 = v14;
    memcpy(__dst, __src, v15);
  }
  __dst[v11 + 1] = -73;
  for (i = v11 + 2; i <= a2; ++i)
    __dst[i] = __src[i - 1];
  v18 = a2 + 1;
  __dst[v18] = 0;
  result = ICverify(__dst, (__int16)v18, a3);
  if ((_DWORD)result == 10)
  {
    *(_WORD *)(a3 + 1322) |= 2u;
    *(_DWORD *)(v7 + 4 * ((unsigned __int16)v11 >> 5) + 3480) |= 1 << ~(_BYTE)v11;
  }
  return result;
}

uint64_t middle_dot_ver(char *a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  __int16 v8;

  result = ICverify(a1, a2, a3);
  if ((_DWORD)result == 11)
  {
    if (a2 >= 3)
    {
      v7 = 1;
      v8 = 1;
      do
      {
        if (a1[v8] == 46 && a1[v7 - 1] == 108 && a1[v7 + 1] == 108)
          a1[v8] = -73;
        v7 = ++v8;
      }
      while (a2 - 1 > v8);
    }
    return ICverify(a1, a2, a3);
  }
  return result;
}

uint64_t spanish_accentchk(const char *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  __int16 v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 3184);
  v6 = *(_QWORD *)(v5 + 264);
  v7 = strlen(a1);
  if (v7 << 16 >= 1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(v5 + 248) + 56);
    do
    {
      v12 = *(_DWORD *)(v11 + 4 * a1[v8]);
      if ((v12 & 0x4064000) != 0)
      {
        if ((v12 & 0x4000000) != 0)
        {
          ++v9;
        }
        else
        {
          *(_WORD *)(v6 + 3492) |= 4u;
          v12 = *(_DWORD *)(v11 + 4 * a1[v8]);
        }
        if ((v12 & 0x64000) != 0)
          v10 = 1;
      }
      ++v8;
    }
    while ((__int16)v7 > v8);
    if (v9 >= 2)
      *(_WORD *)(v6 + 3492) |= 8u;
    if (v10)
    {
      if (a3 != 11)
        return 0;
      return 11;
    }
  }
  result = 0;
  if (a3 == 11 && (*(_WORD *)(v6 + 3492) & 8) != 0)
    return 11;
  return result;
}

uint64_t preclitic_search(_BYTE *a1, char *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  unsigned __int16 *v9;
  int v10;
  unint64_t v11;
  __int16 v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  __int16 v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  _BYTE v19[10];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 264);
  v9 = *(unsigned __int16 **)(v8 + 112);
  v10 = *a1;
  if (*a1)
  {
    v11 = 0;
    while (1)
    {
      v19[v11] = v10;
      if (v10 == 39)
        break;
      v12 = v11 + 1;
      if (v11 <= 7)
      {
        v10 = a1[++v11];
        if (v10)
          continue;
      }
      goto LABEL_9;
    }
    v12 = v11 + 1;
  }
  else
  {
    v12 = 0;
  }
LABEL_9:
  v19[v12] = 0;
  if (v12 != 2 && *(_BYTE *)(a3 + 8) == 3)
    return 11;
  v18 = 0;
  v17 = 0;
  result = SFcltchk((uint64_t)v19, 0, (__int16)(v12 - 1), &v18, &v17, *v9, *((_QWORD *)v9 + 1));
  if ((_DWORD)result == 10)
  {
    *a4 = 1;
    if (!a1[v12])
    {
      v15 = *(_QWORD *)(a3 + 1328) | 0x10;
LABEL_26:
      *(_QWORD *)(a3 + 1328) = v15;
      return 3;
    }
    strcpy(a2, &a1[v12]);
    *(_WORD *)(*(_QWORD *)(a3 + 3184) + 2) = v12;
    *(_WORD *)(v8 + 3492) |= 0x100u;
    __strcpy_chk();
    v9[44] = _byteswap_ushort(*(_WORD *)(*((_QWORD *)v9 + 1) + 4 * v17));
    if (*(_BYTE *)(a3 + 8) == 3)
    {
      v14 = (__int16)strlen(a2);
      if (*(_DWORD *)(v8 + 3472))
        result = middle_dot(a2, v14, a3);
      else
        result = middle_dot_ver(a2, v14, a3);
    }
    else
    {
      v16 = strlen(a2);
      result = ICverify(a2, v16, a3);
    }
    if ((_DWORD)result == 10)
    {
      if ((_byteswap_ushort(*(_WORD *)(*((_QWORD *)v9 + 1) + 4 * v17)) & v9[29]) != 0)
        return stemnpre((unsigned __int8 *)a2, a3);
      v15 = *(_QWORD *)(a3 + 1328) | 1;
      goto LABEL_26;
    }
    if (*(_BYTE *)(a3 + 8) != 3)
      return prenotstem(a2, a3);
  }
  return result;
}

uint64_t postclitic_search(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, int a5)
{
  unsigned __int16 *v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  _BYTE *v26;
  uint64_t v28;
  char *v32;
  uint64_t v33;
  unsigned __int16 v35;
  unsigned __int16 v36;
  char __src[65];
  char __s2[13];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v36 = 0;
  v35 = 0;
  v33 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
  v6 = *(unsigned __int16 **)(v33 + 112);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = strlen((const char *)a1);
  __strcpy_chk();
  if ((__int16)v8 >= 12)
    v9 = 12;
  else
    v9 = v8;
  if ((v7 & 0xFE) != 8 && v7 != 3 || v8 << 16 <= 0x80000)
    v12 = v9;
  else
    v12 = 8;
  if (v7 == 9 || v7 == 5)
    *(_QWORD *)(a3 + 8) = malloc_type_calloc(0xDuLL, 1uLL, 0x100004077774924uLL);
  if (!v12)
    return 888;
  v14 = v7 == 5 || v7 == 12;
  v32 = (char *)(v6 + 22);
  v15 = 888;
  while (1)
  {
    v16 = (__int16)v8 - (uint64_t)v12;
    v17 = __src[v16];
    v18 = v17 != 45 && v14;
    if (v18 || v7 == 3 && v17 != 45 && v17 != 39)
      goto LABEL_72;
    v19 = (__int16)v16;
    if (__src[(__int16)v16])
    {
      v20 = 0;
      do
      {
        __s2[v20] = __src[v19];
        LODWORD(v16) = v16 + 1;
        v19 = (__int16)v16;
        if (__src[(__int16)v16])
          v21 = v20 >= 0xB;
        else
          v21 = 1;
        ++v20;
      }
      while (!v21);
      __s2[v20] = 0;
      if ((unsigned __int16)v20 == 1 && v7 != 12)
        return v15;
      v22 = v20;
    }
    else
    {
      v22 = 0;
      LOWORD(v20) = 0;
      __s2[0] = 0;
    }
    if (SFcltchk((uint64_t)__s2, 0, (__int16)(v20 - 1), &v36, &v35, *v6, *((_QWORD *)v6 + 1)) != 10)
    {
      v15 = 889;
      goto LABEL_72;
    }
    strcpy((char *)a1, __src);
    v23 = (__int16)v8 - (uint64_t)v22;
    *(_BYTE *)(a1 + v23) = 0;
    if (*(_BYTE *)a1 && !*(_BYTE *)(a1 + 1) && v7 != 5)
    {
      v15 = 11;
      goto LABEL_72;
    }
    *(_WORD *)(*(_QWORD *)(a2 + 3184) + 4) = a4 - v20;
    *(_WORD *)(v33 + 3492) |= 0x80u;
    if (v7 == 5 && *v32)
      strcpy(*(char **)(a3 + 8), v32);
    __strcpy_chk();
    v6[45] = _byteswap_ushort(*(_WORD *)(*((_QWORD *)v6 + 1) + 4 * v35));
    if (!*(_BYTE *)a1)
    {
      v28 = *(_QWORD *)(a2 + 1328) | (v7 == 12) | 0x10;
      goto LABEL_77;
    }
    postclitic_search_spanflags = 0;
    byte_1F043DA82 = 0;
    if (v7 == 3)
    {
      if (*(_DWORD *)(v33 + 3472))
        v24 = middle_dot((char *)a1, (__int16)v23, a2);
      else
        v24 = middle_dot_ver((char *)a1, (__int16)v23, a2);
      if (v24 != 10)
        return 888;
      goto LABEL_64;
    }
    v25 = ICverify((char *)a1, (__int16)v23, a2);
    if (v7 == 12 && v25 == 10)
    {
      if ((v6[30] & 0x80) != 0)
      {
        v28 = *(_QWORD *)(a2 + 1328) | 2;
LABEL_77:
        *(_QWORD *)(a2 + 1328) = v28;
        return 3;
      }
      goto LABEL_64;
    }
    if (v25 != 10)
      break;
LABEL_64:
    if ((*(_BYTE *)(a2 + 1328) & 0x20) != 0)
      v15 = 11;
    else
      v15 = stemnpost((char *)a1, (uint64_t)__s2, a2, v35, &postclitic_search_spanflags, a3, a5);
    if (v7 != 9)
      return v15;
    strcat((char *)a1, __s2);
    if ((_DWORD)v15 == 3)
      return v15;
    if ((_DWORD)v15 == 10)
      return v15;
    v26 = *(_BYTE **)(a3 + 8);
    if (!v26 || !*v26)
      return v15;
LABEL_72:
    if (!--v12)
      return v15;
  }
  v15 = postnotstem((char *)a1, a2, v35, &postclitic_search_spanflags);
  if ((_DWORD)v15 == 889)
    goto LABEL_72;
  if (v7 == 9)
    strcat((char *)a1, __s2);
  return v15;
}

uint64_t stemnpre(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v9;
  uint64_t v10;
  _BYTE *v11;

  v2 = *(_QWORD *)(a2 + 1328);
  if ((v2 & 0x20) != 0)
    return 11;
  if (*(_BYTE *)(a2 + 8) != 9)
    return 10;
  v5 = *(_QWORD *)(a2 + 3184);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 248) + 56);
  v7 = *a1;
  v9 = (*(_DWORD *)(v6 + 4 * v7) & 0x10000000) == 0 && v7 != 104;
  if ((_DWORD)v7 == 105 || v9)
  {
    if ((*(_DWORD *)(v6 + 4 * a1[1]) & 0x10000000) != 0)
      goto LABEL_23;
    return 10;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v5 + 264) + 112);
  v11 = (_BYTE *)(v10 + 34);
  if (((*(_WORD *)(v10 + 88) & 0x40) == 0
     || !SLstrcmp(v11, "grand'")
     || !SLstrcmp(v11, "d'")
     || !SLstrcmp(v11, "senz'"))
    && ((*(_DWORD *)(v6 + 4 * *a1) & 0x800) != 0
     || SLstrcmp(v11, "c'") && SLstrcmp(v11, "ch'") && SLstrcmp(v11, "finch'")))
  {
    return 10;
  }
  v2 = *(_QWORD *)(a2 + 1328);
LABEL_23:
  *(_QWORD *)(a2 + 1328) = v2 | 1;
  return 3;
}

uint64_t prenotstem(char *__s, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;
  __int16 v11;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  _WORD *v17;
  char __sa[65];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 3184);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = *__s;
  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 248) + 56) + 4 * v6) & 0x10000000;
  if (v6 != 104 && v7 == 0)
    *(_QWORD *)(a2 + 1328) |= 1uLL;
  v9 = *(unsigned __int8 *)(a2 + 8);
  if (v9 == 5 || v9 == 8)
  {
    if ((*(_BYTE *)(a2 + 24) & 0x40) == 0 || !*(_BYTE *)(v5 + 88))
      return 0;
    v11 = strlen(__s);
    if (ICcltuna(__s, v11, a2) == 10)
      return 10;
    else
      return 0;
  }
  else if (v9 == 9)
  {
    v13 = *(_QWORD *)(v5 + 112);
    if ((~*(unsigned __int16 *)(v13 + 88) & 0x201) == 0)
      return 0;
    if (*(_BYTE *)(v13 + 34)
      && *(_BYTE *)(v13 + 35) == 39
      && (__sa[0] = *(_BYTE *)(v13 + 34),
          __sa[1] = 0,
          __strcat_chk(),
          v14 = strlen(__sa),
          ICverify(__sa, v14, a2) == 10))
    {
      v15 = strlen(__sa);
      SFadd(__sa, v15, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
      v17 = *(_WORD **)(v16 + 112);
      *(_WORD *)(v16 + 3492) &= ~0x100u;
      v17[32] &= ~0x100u;
      v17[33] &= ~0x100u;
      v17[34] &= ~0x100u;
      v17[17] = 0;
      **(_WORD **)(a2 + 3184) |= 4u;
      *(_QWORD *)(a2 + 1328) = *(_QWORD *)(a2 + 1328) & 0xFFFFFFFFFFFFDFFELL | 0x2000;
      return 2;
    }
    else
    {
      return 11;
    }
  }
  else
  {
    return 888;
  }
}

uint64_t pandstemfr(const char *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  int v22;
  int v23;

  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 264);
  v11 = *(_QWORD *)(v10 + 112);
  v12 = strlen(a1);
  v13 = (_BYTE *)(a2 + 1);
  v14 = *(unsigned __int16 *)(v11 + 60);
  v15 = (char *)(*(_QWORD *)(v11 + 8) + 4 * a4);
  v16 = *v15;
  if (((v15[1] | (v16 << 8)) & v14) != 0)
  {
    if (v16 < 0)
    {
      v17 = v12 << 16;
      v18 = (__int16)v12;
      v19 = (__int16)v12 - 1;
      switch(a1[v19])
      {
        case 'a':
        case 'c':
        case 'e':
          if (!SLstrcmp((_BYTE *)(a2 + 1), "t-il")
            || !SLstrcmp((_BYTE *)(a2 + 1), "t-elle"))
          {
            return a5;
          }
          v21 = "t-on";
LABEL_42:
          if (SLstrcmp((_BYTE *)(a2 + 1), (unsigned __int8 *)v21))
            goto LABEL_43;
          return a5;
        case 'b':
        case 'f':
        case 'g':
        case 'h':
          goto LABEL_43;
        case 'd':
LABEL_23:
          if (!SLstrcmp((_BYTE *)(a2 + 1), "il")
            || !SLstrcmp((_BYTE *)(a2 + 1), "elle")
            || !SLstrcmp((_BYTE *)(a2 + 1), "on"))
          {
            return a5;
          }
          if (SLstrcmp((_BYTE *)(a2 + 1), "ils"))
          {
            v22 = SLstrcmp((_BYTE *)(a2 + 1), "elles");
            if (v17 <= 0x10000 || v22)
              goto LABEL_43;
          }
          else if (v17 <= 0x10000)
          {
            goto LABEL_43;
          }
          if (a1[v18 - 2] != 110 || a1[v19] != 116)
            goto LABEL_43;
          break;
        case 'i':
          v23 = SLstrcmp((_BYTE *)(a2 + 1), "je");
          if (v17 <= 0x10000 || v23 || a1[(v18 - 2)] != 97)
            goto LABEL_43;
          return a5;
        default:
          switch(a1[v19])
          {
            case 's':
              if (!SLstrcmp((_BYTE *)(a2 + 1), "je")
                || !SLstrcmp((_BYTE *)(a2 + 1), "tu")
                || !SLstrcmp((_BYTE *)(a2 + 1), "y"))
              {
                return a5;
              }
              goto LABEL_40;
            case 't':
              goto LABEL_23;
            case 'u':
            case 'v':
            case 'w':
            case 'y':
              goto LABEL_43;
            case 'x':
              if (!SLstrcmp((_BYTE *)(a2 + 1), "je"))
                return a5;
              v21 = "tu";
              goto LABEL_42;
            case 'z':
              if (*v13 == 121 && !*(_BYTE *)(a2 + 2))
                return a5;
LABEL_40:
              if (!SLstrcmp((_BYTE *)(a2 + 1), "en"))
                return a5;
              v21 = "y-en";
              break;
            default:
              if (a1[v19] != 233)
                goto LABEL_43;
              v21 = "je";
              goto LABEL_42;
          }
          goto LABEL_42;
      }
    }
  }
  else if (*v13 == 108
         && *(_BYTE *)(a2 + 2) == 97
         && *(_BYTE *)(a3 + 8) == 5
         && (*(_BYTE *)(a3 + 24) & 0x40) != 0
         && ((v14 & 0x1A00) != 0 ? (v20 = *(_BYTE *)(v10 + 88) == 2) : (v20 = 0), v20))
  {
    return 10;
  }
  else
  {
LABEL_43:
    *(_QWORD *)(a3 + 1328) |= 2uLL;
    return 3;
  }
  return a5;
}

uint64_t stemnpost(char *a1, uint64_t a2, uint64_t a3, unsigned int a4, _BYTE *a5, uint64_t a6, int a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  __int16 v26;
  int v27;
  _BYTE *v28;
  int v29;

  v13 = *(_QWORD *)(a3 + 3184);
  v14 = *(_QWORD *)(v13 + 264);
  v15 = *(_QWORD *)(v14 + 112);
  v16 = *(unsigned __int8 *)(a3 + 8);
  v17 = strlen(a1);
  if (a7)
  {
    if ((*(_WORD *)(v15 + 88) & *(_WORD *)(v15 + 58)) == 0)
    {
      *(_QWORD *)(a3 + 1328) |= 1uLL;
      v18 = 3;
      goto LABEL_6;
    }
    *(_WORD *)(v14 + 3492) |= 0x100u;
  }
  v18 = 10;
LABEL_6:
  switch(v16)
  {
    case 3:
      if ((_byteswap_ushort(*(_WORD *)(*(_QWORD *)(v15 + 8) + 4 * a4)) & *(_WORD *)(v15 + 60)) != 0)
        return v18;
      v19 = *(_QWORD *)(a3 + 1328) | 2;
      goto LABEL_26;
    case 5:
      return pandstemfr(a1, a2, a3, a4, v18);
    case 8:
      v21 = *(_QWORD *)(v15 + 8);
      v22 = (4 * a4) | 1;
      v23 = *(_BYTE *)(v21 + v22);
      if ((v23 & 1) != 0 && a1[v17 - 1] == 115)
      {
        *a5 = 1;
        v23 = *(_BYTE *)(v21 + v22);
      }
      return ICcltstm(a1, v23, a5, (char *)(a3 + 1547), a3);
    case 9:
      if (*(_WORD *)(v15 + 60))
      {
        v24 = v17 - 1;
        if (v17 >= 2 && a1[v24] == 101 && a1[v17 - 2] == 114)
        {
          a1[v24] = 0;
          v25 = strcat(a1, (const char *)a2);
          v26 = strlen(v25);
          SFadd(a1, v26, (__int16 *)(v14 + 40), (__int16 *)(v14 + 44), *(__int16 *)(v14 + 42), *(__int16 *)(v14 + 56), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 64));
          **(_WORD **)(a3 + 3184) |= 4u;
          *(_QWORD *)(a3 + 1328) |= 0x1000uLL;
          return 2;
        }
        else
        {
          v27 = a1[v24];
          if (v27 == 114)
            v18 = 10;
          else
            v18 = v18;
          if (a7 && v27 != 114)
          {
            v19 = *(_QWORD *)(a3 + 1328) | 1;
LABEL_26:
            *(_QWORD *)(a3 + 1328) = v19;
            return 3;
          }
        }
      }
      else
      {
        if (*(_BYTE *)a2 && *(_BYTE *)(a2 + 1) && *(_BYTE *)(a2 + 2))
        {
          *(_WORD *)a6 = *(_WORD *)(v15 + 90);
          *(_WORD *)(a6 + 2) = *(_WORD *)(v13 + 4);
          strcpy(*(char **)(a6 + 8), (const char *)a2);
        }
        else
        {
          v28 = *(_BYTE **)(a6 + 8);
          if (v28 && *v28)
          {
            *(_WORD *)(v15 + 90) = *(_WORD *)a6;
            *(_WORD *)(v14 + 3492) |= 0x80u;
            v29 = *(__int16 *)(a6 + 2);
            *(_WORD *)(v13 + 4) = *(_WORD *)(a6 + 2);
            SFadd(a1, v29, (__int16 *)(v14 + 40), (__int16 *)(v14 + 44), *(__int16 *)(v14 + 42), *(__int16 *)(v14 + 56), *(_QWORD *)(v14 + 48), *(_QWORD *)(v14 + 64));
            __strcpy_chk();
          }
        }
        return 889;
      }
      return v18;
    case 12:
      *(_WORD *)(v13 + 4) = v17 - 1;
      return ICcltrp(a1, (_BYTE *)a2, a3);
    default:
      return v18;
  }
}

uint64_t postnotstem(char *a1, uint64_t a2, unsigned int a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int16 v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  char *v43;
  char __s[65];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a2 + 3184);
  v9 = *(_QWORD *)(v8 + 264);
  v10 = *(_QWORD *)(v9 + 112);
  v11 = *(unsigned __int8 *)(a2 + 8);
  v12 = strlen(a1);
  result = 888;
  switch(v11)
  {
    case 5:
      if ((*(_BYTE *)(a2 + 24) & 0x40) == 0)
        return 888;
      if (!*(_BYTE *)(v9 + 88))
        return 888;
      result = ICcltuna(a1, (__int16)v12, a2);
      if ((_DWORD)result != 10)
        return 888;
      return result;
    case 8:
      if (SFaccent((unsigned __int8 *)a1, (__int16)v12, *(_QWORD *)(v8 + 248), (__int16 *)v9))
      {
        a4[2] = 1;
        v14 = *(_QWORD *)(v10 + 8);
        v15 = (4 * a3) | 1;
        if ((*(_BYTE *)(v14 + v15) & 1) != 0 && *(_BYTE *)(strlen((const char *)(a2 + 1690)) + a2 + 1690 - 1) == 115)
          *a4 = 1;
        if (*(__int16 *)(v9 + 40) < 2)
        {
          LODWORD(result) = ICcltstm((char *)(a2 + 1690), *(_BYTE *)(v14 + v15), a4, (char *)(a2 + 1547), a2);
          if ((_DWORD)result == 11)
            return 889;
          else
            return result;
        }
        else
        {
          __strcpy_chk();
          if (*(__int16 *)(v9 + 40) < 1)
            return 888;
          v16 = 0;
          do
          {
            v17 = *(__int16 *)(v10 + 64 + 2 * v16);
            *(_WORD *)(v10 + 60) = *(_WORD *)(v10 + 64 + 2 * v16) & 0xF;
            *(_BYTE *)(v10 + 92) = v17 >> 12;
            result = ICcltstm((char *)(a2 + *(__int16 *)(a2 + 2 * v16 + 2890) + 1690), *(_BYTE *)(*(_QWORD *)(v10 + 8) + v15), a4, (char *)(a2 + 1547), a2);
            if ((_DWORD)result != 11)
              break;
            v18 = *(__int16 *)(v9 + 40);
            if (v16 < v18)
            {
              __strcpy_chk();
              v18 = *(__int16 *)(v9 + 40);
            }
            ++v16;
            result = 889;
          }
          while (v16 < v18);
        }
      }
      else
      {
        v20 = (4 * a3) | 1;
        if ((*(_BYTE *)(*(_QWORD *)(v10 + 8) + v20) & 1) == 0)
          return 889;
        a1[(__int16)v12] = 115;
        a1[(__int16)(v12 + 1)] = 0;
        *(_WORD *)a4 = 257;
        v22 = (__int16)(v12 + 1);
        if (ICverify(a1, v22, a2) != 10
          && !SFaccent((unsigned __int8 *)a1, v22, *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 248), (__int16 *)v9))
        {
          return 889;
        }
        a4[2] = 1;
        strcpy(a1, (const char *)(a2 + 1690));
        return ICcltstm(a1, *(_BYTE *)(*(_QWORD *)(v10 + 8) + v20), a4, (char *)(a2 + 1547), a2);
      }
      return result;
    case 9:
      if (a1[(__int16)v12 - 1] == 114)
      {
        __strcpy_chk();
        __s[(__int16)v12] = 101;
        __s[(__int16)(v12 + 1)] = 0;
        if (ICverify(__s, (__int16)(v12 + 1), a2) == 10 && *(_WORD *)(v10 + 60))
        {
          strcat(a1, (const char *)(v10 + 44));
          return 10;
        }
        return 888;
      }
      else
      {
        strcat(a1, (const char *)(v10 + 44));
        return 889;
      }
    case 12:
      v19 = *(_WORD *)(v10 + 90);
      if ((v19 & 0x18) != 0)
        return 11;
      v21 = v19 & 0x7F;
      if (v21 == 32)
      {
        v23 = (__int16)v12;
        v24 = (__int16)v12 - 1;
        v25 = a1[v24];
        v26 = (v25 - 225) > 0x13 || ((1 << (v25 + 31)) & 0x81201) == 0;
        if (v26 && v25 != 105)
        {
          if (v25 == 114)
          {
            if (*(_BYTE *)(v10 + 45) != 108 || (v27 = *(unsigned __int8 *)(v10 + 46), v27 != 111) && v27 != 97)
            {
              v42 = (v23 - 3);
              if ((int)v23 < 3)
                return 11;
              v43 = &a1[v42];
              if (SLstrncmp(&a1[v42], "far", 3))
              {
                if (SLstrncmp(v43, "dir", 3)
                  && (v12 < 4u || SLstrncmp(&a1[(v23 - 4)], "trar", 4)))
                {
                  return 11;
                }
              }
              return 10;
            }
            a1[v24] = 122;
            a1[(__int16)v12] = 0;
            if (ICverify(a1, (__int16)v12, a2) == 10)
            {
              v28 = (__int16)(v12 - 1);
              a1[v28] = 0;
              v29 = (__int16)(v12 - 1);
              v30 = (v28 - 2);
              if ((int)v28 < 2
                || (v31 = &a1[v30], SLstrncmp(&a1[v30], "fa", 2))
                && SLstrncmp(v31, "di", 2)
                && (v29 < 3 || SLstrncmp(&a1[v29 - 3], "tra", 3)))
              {
                *(_QWORD *)(a2 + 1328) |= 2uLL;
                return 3;
              }
              v32 = v10 + 44;
              if (a1[v28 - 1] == 97)
                a1[v28 - 1] = -31;
              *(_QWORD *)(a2 + 1328) |= 0x1004uLL;
              goto LABEL_63;
            }
            return 11;
          }
          result = 11;
          if ((int)v23 < 3 || v25 != 233 || a1[(v23 - 2)] != 117 || a1[(v23 - 3)] != 113)
            return result;
        }
        if (*(_BYTE *)(v10 + 45) == 108)
        {
          v36 = *(unsigned __int8 *)(v10 + 46);
          if (v36 == 111 || v36 == 97)
          {
            result = vowelchange(a1, a2);
            if ((_DWORD)result == 10)
              return result;
            if ((_DWORD)result != 2)
            {
              a1[(__int16)v12] = 122;
              a1[(__int16)v12 + 1] = 0;
              v35 = (__int16)(v12 + 1);
              v34 = a1;
LABEL_75:
              if (ICverify(v34, v35, a2) == 10)
                return 10;
              else
                return 11;
            }
LABEL_95:
            v33 = (uint64_t)a1;
            v32 = v10 + 44;
            goto LABEL_96;
          }
        }
        v37 = v23 - 3;
        if ((int)v23 < 3)
          goto LABEL_92;
        if (v25 == 233)
        {
          if (a1[(v23 - 2)] == 117 && a1[v37] == 113)
          {
            a1[v24] = 101;
            a1[(__int16)v12] = 114;
            *(_WORD *)&a1[v23 + 1] = 29285;
            a1[v23 + 3] = 0;
            v38 = ICverify(a1, (__int16)(v12 + 3), a2);
            goto LABEL_93;
          }
LABEL_92:
          v38 = vowelchange(a1, a2);
LABEL_93:
          if (v38 != 10)
            return 11;
          goto LABEL_94;
        }
        if (v12 < 4u)
          goto LABEL_92;
        if (v25 != 234)
          goto LABEL_92;
        v39 = (v23 - 2);
        if (a1[v39] != 122)
          goto LABEL_92;
        v40 = a1[v37];
        if (v40 == 105)
        {
          if (a1[(v23 - 4)] != 100)
            goto LABEL_92;
        }
        else
        {
          if (v40 != 97)
            goto LABEL_92;
          v41 = a1[(v23 - 4)];
          if (v41 != 102 && (v12 < 5u || v41 != 114 || a1[(v23 - 5)] != 116))
            goto LABEL_92;
        }
        a1[v39] = 114;
        a1[v24] = 0;
LABEL_94:
        *(_QWORD *)(a2 + 1328) |= 0x2000000uLL;
        goto LABEL_95;
      }
      if (v21 != 4)
      {
        if (v21 != 2)
          return 11;
        a1[(__int16)v12] = 115;
        a1[(__int16)v12 + 1] = 0;
        if (ICverify(a1, (__int16)(v12 + 1), a2) != 10 || (*(_WORD *)(v10 + 60) & 0x100) == 0)
          return 11;
        return 10;
      }
      a1[(__int16)v12] = 115;
      a1[(__int16)v12 + 1] = 0;
      result = ICverify(a1, (__int16)(v12 + 1), a2);
      if ((_DWORD)result != 10)
      {
        a1[(__int16)v12] = 0;
        result = vowelchange(a1, a2);
        if ((_DWORD)result != 10)
        {
          if ((_DWORD)result == 2)
          {
            *(_QWORD *)(a2 + 1328) |= 4uLL;
            v32 = v10 + 44;
LABEL_63:
            v33 = (uint64_t)a1;
LABEL_96:
            altstem(v33, v32, a2);
            return 2;
          }
          a1[(__int16)v12] = 122;
          a1[(__int16)v12 + 1] = 0;
          v34 = a1;
          v35 = (__int16)(v12 + 1);
          goto LABEL_75;
        }
      }
      return result;
    default:
      return result;
  }
}

uint64_t vowelchange(char *a1, uint64_t a2)
{
  __int16 v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  char *v15;
  uint64_t v16;
  char v17;
  BOOL v18;

  v4 = strlen(a1);
  v5 = (__int16)(v4 - 1);
  v6 = a1[v5];
  v7 = *(_QWORD *)(a2 + 3184);
  if (v6 <= 0xEC)
  {
    if (v6 == 225)
    {
      v8 = 97;
      goto LABEL_39;
    }
    if (v6 == 234)
    {
      v8 = 101;
      v9 = v5 - 3;
      if ((int)v5 >= 3 && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 264) + 112) + 90) & 0x20) != 0)
      {
        v10 = (v5 - 1);
        if (a1[v10] == 122)
        {
          v11 = (v5 - 2);
          v12 = a1[v11];
          if (v12 == 105)
          {
            if (a1[v9] == 100)
            {
              a1[v10] = 0;
              goto LABEL_37;
            }
          }
          else if (v12 == 97)
          {
            v13 = a1[v9];
            if (v13 == 102)
            {
LABEL_13:
              a1[v10] = 0;
              a1[v11] = -31;
LABEL_37:
              *(_QWORD *)(a2 + 1328) |= 0x2000000uLL;
              return 2;
            }
            v8 = 101;
            if (v5 < 4 || v13 != 114)
              goto LABEL_39;
            if (a1[(v5 - 4)] == 116)
              goto LABEL_13;
          }
        }
        v8 = 101;
      }
LABEL_39:
      a1[v5] = v8;
      goto LABEL_40;
    }
LABEL_17:
    v14 = v6 != 233 || (int)v5 < 2;
    if (!v14 && a1[(v5 - 1)] == 117 && a1[(v5 - 2)] == 113)
    {
      a1[v5] = 101;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264) + 112) + 90) & 0x20) != 0)
      {
        v15 = &a1[v5];
        *(_WORD *)(v15 + 1) = -5518;
        v15[3] = 0;
        goto LABEL_37;
      }
    }
    else if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 264) + 112) + 90) & 4) != 0)
    {
      v16 = v5 + 1;
      a1[v5 + 1] = 122;
      a1[v5 + 3] = 0;
      if (ICverify(a1, (__int16)(v4 + 1), a2) == 10)
      {
        switch(v6)
        {
          case 'a':
            v17 = -31;
            break;
          case 'e':
            v17 = -22;
            break;
          case 'o':
            v17 = -12;
            break;
          default:
            a1[v16] = 0;
            return 10;
        }
        a1[v5] = v17;
        a1[v16] = 0;
        return 2;
      }
    }
    goto LABEL_40;
  }
  if (v6 != 237)
  {
    if (v6 == 244)
    {
      v8 = 111;
      goto LABEL_39;
    }
    goto LABEL_17;
  }
  if ((int)v5 >= 1
    && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 248) + 56) + 4 * a1[(v5 - 1)]) & 0x10000000) != 0)
  {
    v8 = 105;
    goto LABEL_39;
  }
LABEL_40:
  *(_WORD *)&a1[v5 + 1] = 114;
  if (ICverify(a1, (__int16)(v5 + 2), a2) != 10)
    return 11;
  v18 = v6 != 101 || (int)v5 < 2;
  if (!v18 && a1[(v5 - 1)] == 117 && a1[(v5 - 2)] == 113)
  {
    a1[v5 + 1] = 0;
    a1[v5] = -23;
    return 2;
  }
  return 10;
}

uint64_t altstem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int16 v5;
  char __s[65];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 264);
  __strcpy_chk();
  __strcat_chk();
  v5 = strlen(__s);
  SFadd(__s, v5, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
  **(_WORD **)(a3 + 3184) |= 4u;
  return 0;
}

uint64_t ICcltacc(char *__s, _BYTE *a2, char *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  size_t v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t i;
  uint64_t v18;
  char v19;
  size_t v20;
  size_t v21;
  size_t v23;
  uint64_t v24;
  char __sa[65];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = a4[398];
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 248) + 56);
  v9 = *(_QWORD *)(*(_QWORD *)(v7 + 264) + 112);
  if (a2[2])
  {
    v10 = strlen(a3);
    __memmove_chk();
    __sa[v10 - strlen((const char *)(v9 + 44))] = 0;
    if (a2[1])
      *(_WORD *)&__sa[(__int16)strlen(__sa)] = 115;
    v11 = strlen(__sa);
    memmove(__s, __sa, v11 + 1);
  }
  v12 = strlen(__s);
  v13 = (__int16)(v12 - *(char *)(v9 + 92));
  v14 = __s[v13];
  if ((*(_DWORD *)(v8 + 4 * v14) & 0x4000000) != 0)
  {
    if (!*a2)
      return 10;
    __s[(__int16)(v12 - 1)] = 0;
    v21 = strlen(__s);
    memmove((char *)a4 + 1690, __s, v21 + 1);
    __strcat_chk();
    if (a2[1])
      return 10;
    v24 = 4096;
  }
  else
  {
    HIDWORD(v16) = v14 - 97;
    LODWORD(v16) = v14 - 97;
    v15 = v16 >> 1;
    if (v15 <= 0xA && ((0x495u >> v15) & 1) != 0)
      __s[v13] = byte_1DE2EC8A5[v15];
    if ((__int16)v12 >= 1)
    {
      for (i = 0; v12 != i; ++i)
      {
        v18 = __s[i];
        if ((*(_DWORD *)(v8 + 4 * v18) & 0x4000000) == 0 || (_DWORD)i == (__int16)v12 - *(char *)(v9 + 92))
          continue;
        if (__s[i] <= 0xECu)
        {
          if ((_DWORD)v18 == 225)
          {
            v19 = 97;
            goto LABEL_24;
          }
          if ((_DWORD)v18 == 233)
          {
            v19 = 101;
            goto LABEL_24;
          }
        }
        else
        {
          switch((_DWORD)v18)
          {
            case 0xED:
              v19 = 105;
              goto LABEL_24;
            case 0xF3:
              v19 = 111;
              goto LABEL_24;
            case 0xFA:
              v19 = 117;
LABEL_24:
              __s[i] = v19;
              break;
          }
        }
      }
    }
    if (*a2)
    {
      __s[(__int16)v12 - 1] = 0;
      v20 = strlen(__s);
      memmove((char *)a4 + 1690, __s, v20 + 1);
      __strcat_chk();
      if (!a2[1])
        a4[166] |= 0x1000uLL;
    }
    else
    {
      v23 = strlen(__s);
      memmove((char *)a4 + 1690, __s, v23 + 1);
      __strcat_chk();
    }
    v24 = 4;
  }
  a4[166] |= v24;
  *(_WORD *)a4[398] |= 4u;
  return 2;
}

uint64_t ICcltcap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  __int16 v7;
  size_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  char v32;
  int v33;
  int v34;
  int v35;
  BOOL v38;
  unsigned int v39;
  int v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  int v51;
  uint64_t *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  int v56;
  unsigned int v57;
  BOOL v58;
  const char *v59;
  int v60;
  _WORD *v61;
  char *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char __s[65];
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v70 = 0;
  v71 = 0;
  v68 = 0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 248) + 56);
  v63 = *(_QWORD *)(v2 + 264);
  v4 = *(_QWORD *)(v63 + 112);
  v5 = (_BYTE *)(v4 + 34);
  v6 = strlen((const char *)(v4 + 34));
  v7 = strlen((const char *)(v4 + 44));
  v64 = *(unsigned __int8 *)(a1 + 8);
  v59 = (const char *)(a1 + 1690);
  __strcpy_chk();
  v61 = (_WORD *)v2;
  if ((*(_WORD *)v2 & 4) != 0 && (*(_BYTE *)(a1 + 1330) & 0x80) == 0)
  {
    v8 = strlen(__s);
    if (v8 >= v7)
      __s[v8 - v7] = 0;
  }
  v9 = ICEndToken(a1);
  v10 = *v5;
  if (*v5)
  {
    v11 = *(unsigned __int8 *)(v4 + 16);
    v12 = v63;
    if (v11 == 3)
    {
      if (v6 << 16 >= 1)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = 1 << ~v13;
          if ((*(_DWORD *)(v63 + 92 + 4 * (v14 >> 5)) & v15) != 0)
            *(_DWORD *)&__s[4 * (v14 >> 5) - 1] |= v15;
          v13 = ++v14;
        }
        while ((__int16)v6 > (__int16)v14);
      }
      v11 = 3;
    }
  }
  else
  {
    v11 = 0;
    v12 = v63;
  }
  v16 = *(unsigned __int8 *)(v4 + 44);
  v62 = (char *)(v4 + 44);
  if (!*(_BYTE *)(v4 + 44))
  {
    v22 = 0;
    v17 = 0;
LABEL_25:
    v21 = 1;
    goto LABEL_26;
  }
  v17 = *(unsigned __int8 *)(v4 + 17);
  if (v17 == 3 && v7 >= 1)
  {
    LOWORD(v18) = 0;
    do
    {
      v19 = 1 << ~(_BYTE)v18;
      if ((*(_DWORD *)(v12 + 92 + 4 * ((unsigned __int16)v18 >> 5)) & v19) != 0)
        *((_DWORD *)&v68 + ((unsigned __int16)v18 >> 5)) |= v19;
      v18 = (__int16)(v18 + 1);
    }
    while (v18 < v7);
  }
  if (v64 != 9)
  {
    v22 = 0;
    goto LABEL_25;
  }
  v20 = *(__int16 *)(v4 + 90);
  v21 = v20 >= 0;
  v22 = v20 < 0;
LABEL_26:
  v23 = *(unsigned __int8 *)(v4 + 76);
  v24 = *(_QWORD *)(v4 + 80);
  v67 = v24;
  v25 = *(unsigned __int8 **)(v12 + 72);
  v26 = *v25;
  if (*(_WORD *)(v12 + 102) == 2 && v26 == 1)
  {
    v26 = v25[1];
    if (!v25[1])
    {
      v27 = 0;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      if (!v16)
        goto LABEL_64;
      goto LABEL_47;
    }
    v27 = 0;
    v28 = 0;
    v26 = 1;
  }
  else if (v26 == 4)
  {
    v27 = 0;
    if (v23 == 2 || !(_DWORD)v24)
    {
      v28 = 0;
      v26 = 0;
    }
    else
    {
      v27 = v10 != 0 || v9 == 0;
      if (v10 == 0 && v9 != 0)
        v28 = 0;
      else
        v28 = 4;
      if (v10 == 0 && v9 != 0 || v10)
      {
        v26 = v28;
      }
      else
      {
        if ((*(_DWORD *)(v12 + 92) & 0x80000000) != 0)
        {
          *(_WORD *)(a1 + 1322) |= 0x400u;
          v16 = *v62;
        }
        v28 = 4;
        v27 = 1;
        v26 = 4;
      }
    }
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  v31 = *(unsigned int **)(v12 + 80);
  v29 = *v31;
  v30 = v31[1];
  if (!v16)
    goto LABEL_64;
LABEL_47:
  if (v29 != (_DWORD)v24 && v26 >= v23 && v26 != 4)
  {
    if (v23 != 1)
    {
      if (v23 != 2)
      {
        if (v23 == 3)
        {
          v56 = 0;
          v66 = __PAIR64__(v30, v29);
          v58 = v17 == 0;
          v60 = v17 != 0;
          v27 = 1;
          v28 = v26;
          goto LABEL_70;
        }
        goto LABEL_64;
      }
      goto LABEL_66;
    }
LABEL_68:
    v58 = 0;
    v56 = 0;
    goto LABEL_69;
  }
  if (v17)
  {
    v32 = !v22;
    if (v17 != 1)
      v32 = 1;
    if ((v32 & 1) == 0)
    {
      v60 = 0;
      LODWORD(v69) = 0x80000000;
      v58 = 1;
      goto LABEL_53;
    }
    if (v17 == 2 && v23 == 2)
    {
LABEL_64:
      v60 = 0;
      v56 = 0;
      v58 = 1;
      goto LABEL_70;
    }
    if (v23 != 2)
    {
      if (v21)
        goto LABEL_68;
      v58 = 0;
      LODWORD(v69) = 0x80000000;
      v60 = 1;
LABEL_53:
      v56 = 1;
      goto LABEL_70;
    }
  }
  else if (v23 != 2)
  {
    goto LABEL_64;
  }
LABEL_66:
  v58 = 0;
  v69 = -1;
  v56 = 2;
LABEL_69:
  v60 = 1;
LABEL_70:
  v65 = v3;
  v57 = v17;
  if (v9)
    v33 = 0;
  else
    v33 = 4 * (*(_BYTE *)(v12 + 88) != 2);
  v34 = v24;
  if (v26 != 4 && (_DWORD)v24 != v29 && v26 > v23 || (v35 = 0, v23 == 3) && v26 != 3)
  {
    v66 = __PAIR64__(v30, v29);
    v38 = v11 == 2 && v26 != 2 && v23 != 2 || v11 == 3;
    v35 = v38;
    if (v38)
      v33 = 4 * (v9 == 0);
    v27 = 1;
    v28 = v26;
  }
  v39 = *v5;
  if (*v5)
  {
    v39 = v11 == 2 && v23 != 2;
    if (v11 == 3 || v39)
    {
      if (v11 == 2 && v9)
      {
        v39 = 0x80000000;
        LODWORD(v70) = 0x80000000;
        v35 = 1;
        v33 = 1;
      }
      else
      {
        v39 = 0;
        if (v9)
          v33 = 0;
        v35 = 1;
      }
    }
    if (v23 == 3 && v26 == 3 && (_DWORD)v24 != v29)
    {
      v66 = __PAIR64__(v30, v29);
      v28 = 3;
      v27 = 1;
    }
    if (v11 || v9 != 1)
    {
      if (v11 == 1 && !v9)
      {
        v39 = 0;
        *(_WORD *)(a1 + 1322) |= 0x400u;
        v70 = 0;
        v33 = 4;
        v35 = 1;
      }
    }
    else
    {
      *(_WORD *)(a1 + 1322) |= 0x800u;
      v70 = 0x80000000;
      v35 = 1;
      v39 = 0x80000000;
      v33 = 1;
    }
  }
  else if (!v23 && (v28 - 3) <= 0xFDu && v9 == 1)
  {
    v39 = 0;
    *(_WORD *)(a1 + 1322) |= 0x800u;
    v27 = 1;
    v28 = 1;
  }
  if (*v5)
  {
    if (v35 || v33 == 4)
    {
      if (!v39 && (v71 & 0x80000000) != 0 && v9)
      {
        LODWORD(v70) = 0x80000000;
        v33 = 1;
      }
      v41 = (__int16)strlen((const char *)(v4 + 34));
      v42 = (unsigned __int8 *)(v4 + 34);
      v43 = v33;
      v44 = v33;
    }
    else
    {
      v41 = (__int16)strlen((const char *)(v4 + 34));
      v42 = (unsigned __int8 *)(v4 + 34);
      v43 = v33;
      v44 = v11;
    }
    SLrecap(v42, v41, v43, (uint64_t)&v70, v44, v65);
  }
  if (v27)
  {
    if (v34 <= -1 && v28 == 0)
      v46 = 1;
    else
      v46 = v28;
    v47 = v64;
    if ((v64 == 8 || v64 == 5) && (*(_BYTE *)(a1 + 24) & 0x40) != 0 && (*(_WORD *)(v63 + 3492) & 2) != 0 && *v59)
      __strcpy_chk();
    v48 = strlen(__s);
    v49 = v65;
    SLrecap((unsigned __int8 *)__s, v48, v46, (uint64_t)&v66, v23, v65);
  }
  else
  {
    v50 = strlen(__s);
    v49 = v65;
    SLrecap((unsigned __int8 *)__s, v50, v23, (uint64_t)&v67, v23, v65);
    v47 = v64;
  }
  if (*v62)
  {
    v51 = (__int16)strlen(v62);
    if (v58)
    {
      v52 = &v68;
      v53 = (unsigned __int8 *)(v4 + 44);
      v54 = v57;
    }
    else
    {
      v52 = &v69;
      v53 = (unsigned __int8 *)(v4 + 44);
      v54 = v56;
    }
    SLrecap(v53, v51, v54, (uint64_t)v52, v54, v49);
  }
  if ((((v35 | v27) == 0) & ~v60) != 0)
  {
    if ((*v61 & 4) != 0)
    {
      __strcpy_chk();
      *(_WORD *)(a1 + 1686) = 1;
    }
    else
    {
      __strcpy_chk();
    }
    return 10;
  }
  else
  {
    *(_QWORD *)(a1 + 1328) |= 0x400uLL;
    if ((v47 == 8 || v47 == 5) && (*(_BYTE *)(a1 + 24) & 0x40) != 0)
    {
      if (*(unsigned __int8 *)(v4 + 46) == 192)
        SFremacc(v62, v49, v47);
      __strcpy_chk();
      SFremacc(v59, v49, v47);
    }
    else
    {
      __strcpy_chk();
      *(_WORD *)(a1 + 1686) = 1;
    }
    *v61 |= 4u;
    return 2;
  }
}

uint64_t ICcltrp(char *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t result;
  unsigned int v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  char v44;
  int v45;
  uint64_t v46;
  int v47;
  char *v48;
  __int16 v49;
  char *v50;
  int v51;
  int v52;
  char v53;
  char v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;

  v5 = *(_QWORD *)(a3 + 3184);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 264) + 112);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 248) + 56);
  v8 = strlen(a1);
  v9 = (__int16)(v8 - 1);
  if ((((_DWORD)v8 - 1) & 0x8000) != 0)
  {
    v11 = 32;
    v10 = 32;
  }
  else
  {
    v10 = a1[(unsigned __int16)(v8 - 1)];
    if ((_WORD)v8 == 1)
    {
      v11 = 32;
    }
    else
    {
      v11 = a1[v9 - 1];
      if (v9 != 1)
      {
        v12 = a1[v9 - 2];
        goto LABEL_8;
      }
    }
  }
  v12 = 32;
LABEL_8:
  v13 = *(_WORD *)(v6 + 90) & 0x7F;
  result = 11;
  if (v13 > 7)
  {
    if (v13 != 8)
    {
      if (v13 != 16)
      {
        if (v13 != 32)
          return result;
        if ((*(_WORD *)(v6 + 60) & 0x200) == 0)
        {
          v15 = a1[(__int16)(v8 - 1)];
          if (v15 <= 0xE9)
          {
            v16 = a3;
            if (v15 != 105)
            {
              if (v15 != 225)
                goto LABEL_110;
              goto LABEL_79;
            }
          }
          else
          {
            v16 = a3;
            if (v15 == 234 || v15 == 244)
            {
LABEL_79:
              if (*(_BYTE *)(v6 + 45) != 108)
                goto LABEL_110;
              v32 = *(unsigned __int8 *)(v6 + 46);
              if (v32 != 111 && v32 != 97)
                goto LABEL_110;
              v33 = *(_DWORD *)(v7 + 4 * a1[(__int16)(v8 - 1) - 1]);
              v35 = (v33 & 0x10000000) == 0 || v10 != 105;
              if ((v33 & 0x10000000) != 0 && v10 == 237)
              {
                a1[(__int16)(v8 - 1)] = 105;
                v23 = a2;
              }
              else
              {
                v23 = a2;
                if (v15 - 225 <= 0x13 && ((1 << (v15 + 31)) & 0x80201) != 0)
                  icvowelchange(a1, v16);
              }
              *(_WORD *)&a1[(__int16)(v8 - 1) + 1] = 114;
              if (ICverify(a1, (__int16)(v8 + 1), v16) != 10)
              {
                if (v35)
                  return 11;
                goto LABEL_110;
              }
              if (v35)
              {
                *(_QWORD *)(v16 + 1328) &= ~4uLL;
                return 10;
              }
              a1[(__int16)(v8 - 1)] = -19;
              a1[(__int16)(v8 - 1) + 1] = 0;
              goto LABEL_157;
            }
            if (v15 != 237)
              goto LABEL_110;
          }
          v30 = a1[(__int16)(v8 - 1) - 1];
          v31 = (v30 - 97) > 0x14 || ((1 << (v30 - 97)) & 0x104011) == 0;
          if (v31 && v30 != 252 && v15 != 105)
            goto LABEL_110;
          goto LABEL_79;
        }
        v16 = a3;
        if (v10 != 114)
        {
LABEL_110:
          *(_QWORD *)(v16 + 1328) |= 2uLL;
          return 3;
        }
        v22 = (v9 - 3);
        v23 = a2;
        if (v9 >= 3)
        {
          v24 = &a1[v22];
          if (!SLstrcmp(&a1[v22], "quer"))
          {
            if (*(_BYTE *)(v6 + 45) == 108 && ((v42 = *(unsigned __int8 *)(v6 + 46), v42 == 111) || v42 == 97))
            {
              v43 = v8 << 48;
              v44 = -22;
            }
            else
            {
              a1[(__int16)v8] = 101;
              v43 = (v8 << 48) + 0x1000000000000;
              v44 = 114;
            }
            v50 = &a1[v43 >> 48];
            *v50 = v44;
            v50[1] = 0;
LABEL_174:
            v56 = *(_QWORD *)(v16 + 1328) | 0x2000000;
            goto LABEL_175;
          }
          v25 = v9 - 4;
          if (v9 >= 4 && v12 == 122 && v11 == 101)
          {
            v26 = *v24;
            if (v26 == 97)
            {
              v27 = a1[v25];
              if (v27 != 102 && (v9 < 5 || v27 != 114 || a1[v9 - 5] != 116))
                goto LABEL_143;
              goto LABEL_137;
            }
            if (v26 == 105 && a1[v25] == 100)
            {
LABEL_137:
              if (*(_BYTE *)(v6 + 45) == 108 && ((v51 = *(unsigned __int8 *)(v6 + 46), v51 == 111) || v51 == 97))
              {
                if (v26 == 97)
                  *v24 = -31;
                v52 = v9 - 2;
              }
              else
              {
                a1[v9 - 2] = 114;
                v52 = v9 - 1;
              }
              a1[v52] = 0;
              goto LABEL_174;
            }
          }
        }
LABEL_143:
        v53 = 1;
        v54 = 1;
        switch(((v11 - 97) >> 1) | (((_BYTE)v11 - 97) << 7))
        {
          case 0:
          case 2:
          case 7:
            goto LABEL_144;
          case 1:
          case 3:
          case 5:
          case 6:
            goto LABEL_146;
          case 4:
            v54 = 0;
            if ((v12 - 97) <= 0x14 && ((1 << (v12 - 97)) & 0x104011) != 0 || v12 == 252)
              goto LABEL_146;
LABEL_144:
            v53 = 0;
LABEL_145:
            v54 = 1;
LABEL_146:
            if (*(_BYTE *)(v6 + 45) != 108)
              return 10;
            v55 = *(unsigned __int8 *)(v6 + 46);
            if (v55 != 111 && v55 != 97)
              return 10;
            a1[(__int16)(v8 - 1)] = 0;
            if ((v54 & 1) != 0)
            {
              if ((v53 & 1) == 0)
                icvowelchange(a1, v16);
            }
            else
            {
              a1[(__int16)(v8 - 1) - 1] = -19;
              *(_QWORD *)(v16 + 1328) |= 4uLL;
            }
            break;
          default:
            goto LABEL_145;
        }
LABEL_157:
        v56 = *(_QWORD *)(v16 + 1328) | 0x1000;
LABEL_175:
        *(_QWORD *)(v16 + 1328) = v56;
        v28 = (uint64_t)a1;
        v29 = (uint64_t)v23;
        v40 = v16;
        goto LABEL_169;
      }
      if ((*(_WORD *)(v6 + 60) & 0x800) == 0)
      {
        if ((*(_WORD *)(v6 + 60) & 0x300) != 0)
        {
          icstem2(a1, a3);
          v20 = *(_QWORD *)(a3 + 1328);
          if ((v20 & 4) != 0)
          {
            altstem((uint64_t)a1, (uint64_t)a2, a3);
            v20 = *(_QWORD *)(a3 + 1328);
          }
          *(_QWORD *)(a3 + 1328) = v20 | 0x1000;
          if (SLstrcmp(a2, "-na"))
          {
            if (SLstrcmp(a2, "-nas"))
            {
              if (SLstrcmp(a2, "-no"))
                return 2;
              v21 = 7302189;
            }
            else
            {
              a2[4] = 0;
              v21 = 1935764525;
            }
          }
          else
          {
            v21 = 6384685;
          }
          *(_DWORD *)a2 = v21;
          icmodpost((uint64_t)a2, a3);
          v28 = (uint64_t)a1;
          v29 = (uint64_t)a2;
          v40 = a3;
LABEL_169:
          altstem(v28, v29, v40);
          return 2;
        }
        if ((*(_WORD *)(v6 + 60) & 0x400) != 0)
        {
          v17 = a2;
          if (!SLstrcmp(a2, "-na"))
          {
            a2[2] = 0;
            v49 = 24877;
LABEL_166:
            *(_WORD *)a2 = v49;
            goto LABEL_167;
          }
          if (SLstrcmp(a2, "-nas"))
          {
            if (SLstrcmp(a2, "-no"))
            {
              *(_QWORD *)(a3 + 1328) |= 2uLL;
              return 3;
            }
            a2[2] = 0;
            v49 = 28461;
            goto LABEL_166;
          }
          v19 = 7561517;
          goto LABEL_134;
        }
      }
      return 10;
    }
    if ((*(_WORD *)(v6 + 60) & 0x400) != 0)
      return 10;
    if ((*(_WORD *)(v6 + 60) & 0x100) != 0)
    {
      a1[(__int16)(v8 - 1)] = 0;
    }
    else
    {
      if ((*(_WORD *)(v6 + 60) & 0x200) == 0)
      {
        if ((*(_WORD *)(v6 + 60) & 0x800) == 0)
          return result;
        v17 = a2;
        if (SLstrcmp(a2, "-a"))
        {
          if (SLstrcmp(a2, "-as"))
          {
            if (SLstrcmp(a2, "-o"))
            {
              v18 = "-os";
              goto LABEL_35;
            }
            goto LABEL_132;
          }
          goto LABEL_122;
        }
        goto LABEL_101;
      }
      icstem2(a1, a3);
    }
    *(_QWORD *)(a3 + 1328) |= 0x1000uLL;
    return icpost3alt((uint64_t)a1, a2, a3);
  }
  if (v13 == 2)
  {
    if ((*(_WORD *)(v6 + 60) & 0x100) == 0)
      return 10;
    goto LABEL_60;
  }
  if (v13 != 4)
    return result;
  if ((*(_WORD *)(v6 + 60) & 0x100) != 0)
  {
    if (*(_DWORD *)a3 == 100)
      return result;
LABEL_60:
    a1[(__int16)(v8 - 1)] = 0;
LABEL_62:
    *(_QWORD *)(a3 + 1328) |= 0x1000uLL;
    v28 = (uint64_t)a1;
    v29 = (uint64_t)a2;
LABEL_168:
    v40 = a3;
    goto LABEL_169;
  }
  if ((*(_WORD *)(v6 + 60) & 0x200) != 0)
  {
    icstem2(a1, a3);
    goto LABEL_62;
  }
  if ((*(_WORD *)(v6 + 60) & 0x400) == 0)
  {
    v17 = a2;
    if (SLstrcmp(a2, "-la"))
    {
      if (SLstrcmp(a2, "-las"))
      {
        if (SLstrcmp(a2, "-lo"))
        {
          v18 = "-los";
LABEL_35:
          if (SLstrcmp(v17, (unsigned __int8 *)v18))
          {
LABEL_167:
            icmodpost((uint64_t)v17, a3);
            v28 = (uint64_t)a1;
            v29 = (uint64_t)v17;
            goto LABEL_168;
          }
          v17[4] = 0;
          v19 = 1936682541;
LABEL_134:
          *(_DWORD *)v17 = v19;
          goto LABEL_167;
        }
LABEL_132:
        v19 = 7302701;
        goto LABEL_134;
      }
LABEL_122:
      v17[4] = 0;
      v19 = 1935765037;
      goto LABEL_134;
    }
LABEL_101:
    v19 = 6385197;
    goto LABEL_134;
  }
  v36 = (__int16)(v8 - 1);
  v37 = a1[v36];
  if (v37 > 0xE9)
  {
    v38 = a2;
    v39 = a3;
    if (v37 != 234 && v37 != 244)
    {
      if (v37 != 237)
        goto LABEL_127;
LABEL_123:
      v45 = a1[v36 - 1];
      result = 10;
      if ((v45 - 97) <= 0x14 && ((1 << (v45 - 97)) & 0x104011) != 0 || v45 == 252)
        return result;
      v38 = a2;
      v39 = a3;
      goto LABEL_127;
    }
    goto LABEL_114;
  }
  v38 = a2;
  if (v37 == 105)
    goto LABEL_123;
  v39 = a3;
  if (v37 == 225)
  {
LABEL_114:
    switch(v10)
    {
      case 225:
        v41 = 97;
        break;
      case 234:
        v41 = 101;
        break;
      case 244:
        v41 = 111;
        break;
      default:
LABEL_161:
        v46 = v36 + 1;
        *(_WORD *)&a1[v36 + 1] = 114;
        v57 = v36 + 2;
        v58 = (__int16)(v8 + 1);
        result = ICverify(a1, (__int16)(v36 + 2), v39);
        if ((_DWORD)result == 10)
          return result;
        a1[v46] = 122;
        a1[v57] = 0;
        v48 = a1;
        v47 = v58;
        goto LABEL_163;
    }
    a1[v36] = v41;
    goto LABEL_161;
  }
LABEL_127:
  v46 = v36 + 1;
  *(_WORD *)&a1[v36 + 1] = 115;
  v47 = (__int16)(v8 + 1);
  v48 = a1;
LABEL_163:
  result = ICverify(v48, v47, v39);
  if ((_DWORD)result != 10)
  {
    a1[v46] = 0;
    return icpost2alt((uint64_t)a1, v38, v39);
  }
  return result;
}

uint64_t icstem2(const char *a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;

  v4 = strlen(a1);
  v5 = v4 - 1;
  if (v4 >= 1)
  {
    v6 = (v4 - 1);
    if (a1[v6] == 115)
    {
      a1[v6] = 0;
      return 0;
    }
  }
  a1[v5] = 0;
  v7 = v5;
  v8 = (v5 - 3);
  if (v7 < 3)
  {
    if (v7 != 2)
    {
LABEL_17:
      icvowelchange(a1, a2);
      return 0;
    }
  }
  else if (!SLstrcmp(&a1[v8], "que"))
  {
    a1[v7 - 1] = -23;
LABEL_16:
    *(_QWORD *)(a2 + 1328) |= 4uLL;
    return 0;
  }
  v9 = (v7 - 1);
  if (a1[v9] != 105)
    goto LABEL_17;
  v10 = a1[v7 - 2];
  v11 = (v10 - 97) > 0x14 || ((1 << (v10 - 97)) & 0x104011) == 0;
  if (!v11 || v10 == 252)
  {
    a1[v9] = -19;
    goto LABEL_16;
  }
  return 0;
}

uint64_t icmodpost(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264) + 112);
  __strcpy_chk();
  *(_WORD *)(v3 + 32) = *(_WORD *)(v3 + 90);
  *(_QWORD *)(a2 + 1328) |= 0x80000uLL;
  __strcpy_chk();
  return 0;
}

uint64_t icpost2alt(uint64_t a1, char *a2, uint64_t a3)
{
  __int16 v7;
  int v8;
  uint64_t v9;
  char __src[4];
  char v11;

  if (SLstrcmp(a2, "-la"))
  {
    if (!SLstrcmp(a2, "-las"))
    {
      v8 = 7561517;
LABEL_11:
      *(_DWORD *)a2 = v8;
      goto LABEL_12;
    }
    if (SLstrcmp(a2, "-lo"))
    {
      if (SLstrcmp(a2, "-los"))
      {
        *(_QWORD *)(a3 + 1328) |= 2uLL;
        return 3;
      }
      v8 = 7565101;
      goto LABEL_11;
    }
    a2[2] = 0;
    v7 = 28461;
  }
  else
  {
    a2[2] = 0;
    v7 = 24877;
  }
  *(_WORD *)a2 = v7;
LABEL_12:
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 3184) + 264) + 112);
  if ((*(_WORD *)(v9 + 90) & 4) != 0 && (*(_WORD *)(v9 + 60) & 0x800) != 0)
  {
    v11 = 0;
    *(_DWORD *)__src = 28205;
    __strcat_chk();
    strcpy(a2, __src);
  }
  icmodpost((uint64_t)a2, a3);
  altstem(a1, (uint64_t)a2, a3);
  return 2;
}

uint64_t icpost3alt(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  int v7;

  if (SLstrcmp(a2, "-a"))
  {
    if (SLstrcmp(a2, "-as"))
    {
      if (SLstrcmp(a2, "-o"))
      {
        if (SLstrcmp(a2, "-os"))
        {
          *(_QWORD *)(a3 + 1328) |= 2uLL;
          return 3;
        }
        a2[4] = 0;
        v7 = 1936682029;
      }
      else
      {
        v7 = 7302189;
      }
    }
    else
    {
      a2[4] = 0;
      v7 = 1935764525;
    }
  }
  else
  {
    v7 = 6384685;
  }
  *(_DWORD *)a2 = v7;
  icmodpost((uint64_t)a2, a3);
  altstem(a1, (uint64_t)a2, a3);
  return 2;
}

uint64_t icvowelchange(const char *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  char v6;

  v4 = (__int16)(strlen(a1) - 1);
  v5 = a1[v4];
  if (v5 > 0xE0)
  {
    switch(v5)
    {
      case 0xF4u:
        v6 = 111;
        goto LABEL_14;
      case 0xEAu:
        v6 = 101;
        goto LABEL_14;
      case 0xE1u:
        v6 = 97;
        goto LABEL_14;
    }
  }
  else
  {
    switch(v5)
    {
      case 'a':
        v6 = -31;
        goto LABEL_14;
      case 'e':
        v6 = -22;
        goto LABEL_14;
      case 'o':
        v6 = -12;
LABEL_14:
        a1[v4] = v6;
        *(_QWORD *)(a2 + 1328) |= 4uLL;
        break;
    }
  }
  return 0;
}

uint64_t ICcltstm(char *a1, char a2, _BYTE *a3, char *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  BOOL v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  BOOL v18;
  size_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  BOOL v26;
  char v28;
  char v29;
  size_t v30;
  unsigned int v31;
  unint64_t v32;
  size_t v33;
  size_t v34;

  v10 = *(_QWORD *)(a5 + 3184);
  v11 = *(_QWORD *)(v10 + 264);
  v12 = *(_QWORD *)(v11 + 112);
  v13 = strlen(a1);
  v14 = 0;
  v15 = *(char *)(v12 + 92);
  if ((__int16)v13 <= v15)
    v16 = 0;
  else
    v16 = v13 - v15;
  if ((*(_BYTE *)(a5 + 24) & 0x40) != 0)
  {
    if (*(_BYTE *)(v11 + 88))
    {
      if (*(_BYTE *)(v11 + 88) == 2)
      {
LABEL_7:
        v14 = 1;
        goto LABEL_9;
      }
      v21 = v11 + 92;
      v22 = *(__int16 *)(a5 + 1612);
      if ((*(_DWORD *)(v11 + 92) & 0x80000000) != 0)
      {
        LOWORD(v24) = 0;
        while (v22 > (__int16)v24)
        {
          LOWORD(v24) = v24 + 1;
          if (((*(_DWORD *)(v21 + 4 * ((unsigned __int16)v24 >> 5)) >> ~(_BYTE)v24) & 1) == 0)
            goto LABEL_73;
        }
        v24 = v22 & ~(v22 >> 31);
LABEL_73:
        v23 = (unsigned __int16)v24 == 1;
        if (!v16 && (unsigned __int16)v24 == 1)
          goto LABEL_7;
      }
      else
      {
        v23 = 0;
        LOWORD(v24) = 0;
      }
      v14 = (unsigned __int16)v24 == (unsigned __int16)v22;
      if (!v23 && (unsigned __int16)v24 != (unsigned __int16)v22)
      {
        v14 = 0;
        if (v16 >= (__int16)v24 && (unsigned __int16)v24 != 2)
        {
          v14 = 1;
          if (v22 > (__int16)v24)
          {
            do
            {
              v25 = (1 << ~(_BYTE)v24) & *(_DWORD *)(v21 + 4 * ((unsigned __int16)v24 >> 5));
              v14 = v25 == 0;
              v24 = (__int16)(v24 + 1);
              if (v25)
                v26 = 0;
              else
                v26 = v24 < v22;
            }
            while (v26);
          }
        }
      }
    }
    else
    {
      v14 = 0;
    }
  }
LABEL_9:
  if (!*(_WORD *)(v12 + 60))
  {
    *(_WORD *)(v11 + 3492) &= ~0x80u;
    *(_WORD *)(v12 + 64) &= ~0x200u;
    *(_WORD *)(v12 + 66) &= ~0x200u;
    *(_WORD *)(v12 + 68) &= ~0x200u;
    *(_WORD *)(v12 + 44) = 0;
    return 11;
  }
  if ((__int16)v13 >= 1)
  {
    v17 = 0;
    while ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 248) + 56) + 4 * a1[v17]) & 0x4000000) == 0)
    {
      if (v13 == ++v17)
        goto LABEL_14;
    }
    if (*a3)
    {
      a1[(__int16)(v13 - 1)] = 0;
      v20 = strlen(a1);
      memmove((void *)(a5 + 1690), a1, v20 + 1);
      __strcat_chk();
      if (!a3[1])
        *(_QWORD *)(a5 + 1328) |= 0x1000uLL;
      goto LABEL_53;
    }
    if (a3[2])
      v28 = v14;
    else
      v28 = 1;
    if ((v28 & 1) == 0)
    {
LABEL_53:
      if (a3[2])
        v29 = v14;
      else
        v29 = 1;
      if ((v29 & 1) == 0)
      {
        *(_QWORD *)(a5 + 1328) |= 4uLL;
        if (!*a3)
        {
          v30 = strlen(a1);
          memmove((void *)(a5 + 1690), a1, v30 + 1);
          __strcat_chk();
        }
      }
      goto LABEL_79;
    }
    return 10;
  }
LABEL_14:
  if (a3[2])
  {
    if ((a2 & 2) == 0 || (*(_WORD *)(v12 + 62) & 0x80) == 0)
    {
      if (a3[1])
        v18 = v14;
      else
        v18 = 0;
      if (!v18)
        return ICcltacc(a1, a3, a4, (_QWORD *)a5);
      return 10;
    }
    goto LABEL_77;
  }
  if ((a2 & 2) != 0)
  {
    if ((*(_WORD *)(v12 + 62) & 0x80) != 0)
      return 10;
    if (!*a3 && v14)
      return 10;
  }
  if (v14)
  {
    if (!*a3)
      return 10;
LABEL_68:
    a1[(__int16)(v13 - 1)] = 0;
    v33 = strlen(a1);
    memmove((void *)(a5 + 1690), a1, v33 + 1);
    __strcat_chk();
    if (!a3[1])
      *(_QWORD *)(a5 + 1328) |= 0x1000uLL;
    if (v14)
      goto LABEL_79;
    goto LABEL_78;
  }
  HIDWORD(v32) = a1[v16] - 97;
  LODWORD(v32) = HIDWORD(v32);
  v31 = v32 >> 1;
  if (v31 <= 0xA && ((0x495u >> v31) & 1) != 0)
    a1[v16] = byte_1DE2EC8C0[v31];
  if (*a3)
    goto LABEL_68;
  v34 = strlen(a1);
  memmove((void *)(a5 + 1690), a1, v34 + 1);
LABEL_77:
  __strcat_chk();
LABEL_78:
  *(_QWORD *)(a5 + 1328) |= 4uLL;
LABEL_79:
  *(_WORD *)v10 |= 4u;
  return 2;
}

uint64_t ICcltuna(char *__s, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t i;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  __int16 v39;
  unsigned int v40;
  int v41;
  char v42;
  char v43;
  char __src[65];
  _QWORD v45[2];

  v45[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 3184);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 56);
  v8 = *(_QWORD *)(v6 + 264);
  *(_WORD *)(v8 + 40) = 0;
  v9 = (__int16 *)(v8 + 40);
  *(_WORD *)(v8 + 44) = 0;
  if (*(_BYTE *)(a3 + 8) == 8 && *(_DWORD *)(a3 + 24) == 64)
  {
    LOWORD(v10) = *(unsigned __int8 *)(v8 + 88);
    if (!*(_BYTE *)(v8 + 88))
    {
LABEL_12:
      if (((*(_DWORD *)(v8 + 4 * ((unsigned __int16)v10 >> 5) + 92) >> ~(_BYTE)v10) & 1) != 0)
        *(_QWORD *)(a3 + 1328) |= 0x1000000uLL;
      return 11;
    }
    v11 = (unsigned __int16)strlen(__s);
    if (v11)
    {
      v10 = 0;
      while ((*(_DWORD *)(v7 + 4 * __s[v10]) & 0x4000000) == 0)
      {
        if (v11 == ++v10)
          goto LABEL_8;
      }
      goto LABEL_12;
    }
  }
LABEL_8:
  if (*(unsigned __int8 *)(v8 + 88) - 4 >= 0xFFFFFFFD
    && (*(_DWORD *)(v7 + 4 * *__s) & 0x10000000) != 0)
  {
    __strcpy_chk();
    v12 = -18;
    v13 = -19;
    v14 = 2;
    v15 = 1;
    switch(((__src[0] - 97) >> 1) | ((__src[0] - 97) << 7))
    {
      case 0:
        v43 = -32;
        v12 = -30;
        v13 = -31;
        goto LABEL_15;
      case 2:
        v43 = -24;
        v12 = -23;
        v13 = -22;
LABEL_15:
        v14 = 3;
        v15 = 2;
        goto LABEL_19;
      case 4:
        goto LABEL_19;
      case 7:
        v12 = -12;
        v13 = -13;
        goto LABEL_18;
      case 10:
        v12 = -5;
        v13 = -7;
LABEL_18:
        v14 = 2;
        v15 = 1;
LABEL_19:
        *(&v42 + v15) = v13;
        v16 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 232);
        *(_WORD *)(v16 + 2) = *(_WORD *)(v8 + 3204);
        *(_WORD *)v16 = 0;
        *(_BYTE *)(v16 + 42) = 0;
        *(_WORD *)(v16 + 50) = 0;
        __src[0] = v12;
        strcpy(*(char **)(v16 + 8), __src);
        v17 = &v43;
        break;
      default:
        goto LABEL_22;
    }
    while (1)
    {
      PDword(*(unsigned __int16 **)(*(_QWORD *)(a3 + 3184) + 232), 1u, 1);
      v18 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 232);
      v19 = *(unsigned __int16 *)(v18 + 50);
      if (*(_WORD *)(v18 + 50))
        break;
      *(_WORD *)v18 = 0;
      *(_BYTE *)(v18 + 42) = 0;
      *(_WORD *)(v18 + 50) = 0;
      v20 = *v17++;
      __src[0] = v20;
      strcpy(*(char **)(v18 + 8), __src);
      if (!--v14)
        goto LABEL_22;
    }
    for (i = *(_QWORD *)(v18 + 104);
          *(unsigned __int8 *)(*(_QWORD *)i + 71) > *(unsigned __int8 *)(v8 + 88)
       || *(_BYTE *)(*(_QWORD *)i + 70) != 1;
          i += 8)
    {
      if (!--v19)
      {
        *(_WORD *)(v8 + 102) = 1;
        *(_WORD *)(v8 + 3492) |= 2u;
        *(_WORD *)(a3 + 1322) |= 0x20u;
        return 10;
      }
    }
    return 11;
  }
LABEL_22:
  __src[0] = 0;
  if (!SFaccent((unsigned __int8 *)__s, a2, *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 248), (__int16 *)v8))
    return 11;
  if (*(_BYTE *)(v8 + 88) == 2)
  {
    *(_WORD *)(v8 + 102) = 1;
    goto LABEL_65;
  }
  v45[0] = 0;
  v21 = strlen((const char *)(*(_QWORD *)(v8 + 112) + 34));
  v22 = *(__int16 *)(a3 + 1612);
  if (v22 < 1)
  {
    LOBYTE(v23) = 0;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = v22 + v21;
    do
    {
      if (((*(_DWORD *)(v8 + 92 + 4 * ((unsigned __int16)(v21 + v24) >> 5)) >> ~(v21 + v24)) & 1) != 0)
      {
        *((_DWORD *)v45 + ((unsigned __int16)v24 >> 5)) |= 1 << ~(_BYTE)v24;
        ++v23;
      }
      ++v24;
    }
    while (v21 + v24 < v25);
    if (v23)
    {
      if (v23 == 1)
      {
        if (SLODWORD(v45[0]) < 0)
          LOBYTE(v23) = 1;
        else
          LOBYTE(v23) = 3;
      }
      else if (v24 == v23)
      {
        LOBYTE(v23) = 2;
      }
      else
      {
        LOBYTE(v23) = 3;
      }
    }
  }
  if (*v9 < 1)
    return 11;
  v27 = a2;
  v28 = 0;
  v40 = v23;
  v41 = v27;
  v29 = v27;
  while (1)
  {
    v30 = *(__int16 *)(a3 + 2 * v28 + 2890);
    LOBYTE(v31) = *(_BYTE *)(a3 + v30 + 1690);
    if ((_BYTE)v31)
    {
      v32 = 0;
      v33 = a3 + 1691 + v30;
      do
      {
        v34 = v32 + 1;
        __src[v32] = v31;
        v31 = *(unsigned __int8 *)(v33 + v32++);
      }
      while (v31);
    }
    else
    {
      v34 = 0;
    }
    __src[v34] = 0;
    v35 = strlen(__src);
    SLrecap((unsigned __int8 *)__src, v35, **(unsigned __int8 **)(v8 + 72), *(_QWORD *)(v8 + 80), v40, v7);
    SFremacc(__src, v7, *(unsigned __int8 *)(a3 + 8));
    if (v41 < 1)
    {
      LODWORD(v36) = 0;
    }
    else
    {
      v36 = 0;
      while (1)
      {
        if (((*((_DWORD *)v45 + ((unsigned __int16)v36 >> 5)) >> ~(_BYTE)v36) & 1) == 0)
        {
          v37 = __src[v36];
          if ((*(_DWORD *)(v7 + 4 * v37) & 0x40000000) != 0)
            LOBYTE(v37) = v37 + 32;
          if (__s[v36] != v37)
            break;
        }
        if (v29 == ++v36)
          goto LABEL_64;
      }
    }
    if ((_DWORD)v36 == (_DWORD)v29)
      break;
    ++v28;
    result = 11;
    if (v28 >= *v9)
      return result;
  }
LABEL_64:
  *(_WORD *)(v8 + 102) = 1;
  SFlstini(v9, (_WORD *)(v8 + 44), *(_BYTE **)(v8 + 48), *(_WORD **)(v8 + 64));
  v39 = strlen(__src);
  SFadd(__src, v39, v9, (__int16 *)(v8 + 44), *(__int16 *)(v8 + 42), *(__int16 *)(v8 + 56), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 64));
LABEL_65:
  *(_WORD *)(v8 + 3492) |= 2u;
  **(_WORD **)(a3 + 3184) |= 0x40u;
  return 10;
}

uint64_t ICcmp(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  _BYTE *v20;
  int v21;
  size_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  __int16 v36;
  int v37;
  char v38;
  int v39;
  int v40;
  int v41;
  signed int v42;
  int v43;
  char v44;
  int v45;
  __int16 v46;
  __int16 v47;
  __int16 v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  __int16 v54;
  __int16 v55;
  int v56;
  __int16 v57;
  char v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  uint64_t v65;
  unsigned int v66;
  __int16 v67;
  int v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int16 v74;
  __int16 v75;
  __int16 v76;
  const char *v77;
  int v78;
  char *v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  char v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  int v89;
  int v90;
  unsigned __int8 v91[5];
  char __s[5];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v90 = 0;
  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD *)(v2 + 280);
  v87 = v2;
  v4 = *(_QWORD *)(v2 + 264);
  *(_DWORD *)(v3 + 1500) = 0;
  *(_DWORD *)(v3 + 1738) = 0;
  *(_WORD *)(v3 + 1524) = 0;
  *(_WORD *)(v3 + 1604) = 0;
  *(_BYTE *)(v3 + 1607) = 0;
  *(_BYTE *)(v3 + 1527) = 0;
  *(_BYTE *)(v3 + 1672) = 0;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 3184) + 304) == 11 && (*(_WORD *)(v4 + 18) & 0x100) != 0)
  {
    v84 = 0;
    v5 = 1;
  }
  else
  {
    v5 = 0;
    v84 = 1;
  }
  v6 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 1414))
  {
    result = ICcmprmc(a1, 0, (__int16)(*(_WORD *)(a1 + 1612) - 1));
    if ((_DWORD)result == 10)
    {
      *(_WORD *)(v3 + 1742) |= 0x800u;
      return result;
    }
  }
  v8 = ICcmplmc(a1);
  if (!v8)
    return 11;
  v83 = v4;
  v9 = 0;
  v85 = 0;
  v79 = (char *)(v3 + 1672);
  if (v6 == 17)
    v10 = 5;
  else
    v10 = 4;
  v86 = v10;
  v77 = (const char *)(a1 + 1547);
  v80 = 11;
  v81 = v5;
  v78 = v8;
  v11 = v8;
  v82 = v6;
  while (1)
  {
    do
    {
      while (1)
      {
        if (!v11)
        {
          if (*(_BYTE *)(a1 + 1690))
          {
            if (!*(_WORD *)(v83 + 102))
              *(_WORD *)(v83 + 102) = 1;
            if (!*(_DWORD *)(v3 + 1516))
            {
              *(_DWORD *)(v3 + 1516) = v9;
              *(_DWORD *)(v3 + 1520) = v85;
            }
            return 2;
          }
          *(_WORD *)(v3 + 1742) = 0;
          *(_QWORD *)(v83 + 3480) = 0;
          return 11;
        }
        v12 = *(__int16 *)(v3 + 100 * --v11 + 68);
        if (*(_BYTE *)(*(_QWORD *)(a1 + 3184) + 304) == 11)
        {
          LOWORD(v90) = 3 * *(_WORD *)(v3 + 100 * v11 + 72);
          if ((v84 & 1) == 0)
            *(_WORD *)(v3 + 100 * v11 + 70) |= *(_WORD *)(v3 + 100 * v11 + 90);
        }
        v13 = v3 + 100 * v11;
        v15 = *(_WORD *)(v13 + 88);
        v14 = v13 + 88;
        v16 = *(unsigned __int16 *)(v14 - 18);
        v17 = *(__int16 *)(v14 - 22);
        *(_WORD *)(v3 + 1500) = v17;
        v18 = *(unsigned __int8 *)(v14 - 12);
        *(_BYTE *)(v3 + 1504) = v18;
        *(_QWORD *)(v3 + 1508) = *(_QWORD *)(v14 - 8);
        *(_WORD *)(v3 + 1524) = v15;
        v19 = *(_DWORD *)(v14 + 4);
        *(_DWORD *)(v3 + 1516) = v19;
        if (!v9)
          v9 = v19;
        v88 = v16;
        v89 = v9;
        *(_BYTE *)(v3 + 1526) = *(_BYTE *)(v14 - 23);
        v20 = (_BYTE *)(*(_QWORD *)(v87 + 96) + v86 * v12);
        v21 = *v20;
        if (*v20)
          __strcpy_chk();
        else
          __s[0] = 0;
        v22 = strlen(__s);
        HIWORD(v90) = v22;
        if (v18 == 2
          || *(_BYTE *)(a1 + 8) == 6
          && (*(_BYTE *)(a1 + 20) & 0x10) != 0
          && *(_BYTE *)(a1 + v17 + (__int16)v22 + 1547) == 45)
        {
          if (!v22)
            goto LABEL_28;
          v23 = 0;
          v24 = 0;
          do
          {
            if (__s[v23] == 45)
              break;
            v23 = (unsigned __int16)++v24;
          }
          while (v22 > (unsigned __int16)v24);
          if (v22 == v23)
          {
LABEL_28:
            __strcat_chk();
            v88 = 0;
            ++HIWORD(v90);
            v21 = 1;
          }
        }
        if (*(_DWORD *)(a1 + 1308) && (*(_WORD *)v14 & 0x40) != 0)
        {
          __strcpy_chk();
          v25 = *(_DWORD *)(v3 + 100 * v11 + 96);
          *(_DWORD *)(v3 + 1520) = v25;
          v26 = v85;
          if (!v85)
            v26 = v25;
          v85 = v26;
        }
        v27 = *(unsigned __int16 *)(a1 + 1612);
        v28 = v17;
        if (v27 != (unsigned __int16)v17)
          break;
        v9 = v89;
        if (*(_BYTE *)(a1 + 1413))
        {
          if ((v18 & 0xFE) != 2 && !v88 && __s[0] != 45)
          {
            if (v82 != 6 || *(_BYTE *)(v83 + 88))
            {
              *(_QWORD *)(a1 + 1328) |= 0x200uLL;
              *(_WORD *)(v3 + 1742) |= 0x401u;
              *(_WORD *)v87 |= 4u;
              v63 = *(_WORD *)(v3 + 1738) + HIWORD(v90);
              *(_WORD *)(v3 + 1738) = v63;
              *(_WORD *)(v3 + 1740) = v63;
              __strcpy_chk();
              v64 = ICcmpalt(v17, v91, SHIWORD(v90), 1, a1);
              SFadd(v79, *(__int16 *)(a1 + 1612), (__int16 *)(v83 + 40), (__int16 *)(v83 + 44), *(__int16 *)(v83 + 42), *(__int16 *)(v83 + 56), *(_QWORD *)(v83 + 48), *(_QWORD *)(v83 + 64));
              return v64;
            }
            *(_QWORD *)(a1 + 1328) |= 0x40uLL;
            return 11;
          }
          v65 = v83;
          if (!*(_WORD *)(v83 + 102))
            *(_WORD *)(v83 + 102) = 1;
          if (*(_BYTE *)(a1 + 8) != 6 || HIWORD(v90) || (v66 = *(unsigned __int8 *)(v83 + 88), v66 > 2))
          {
LABEL_150:
            *(_WORD *)(v3 + 1742) |= 0x400u;
            *(_WORD *)(a1 + 1322) &= 0xFFB9u;
            return 10;
          }
LABEL_149:
          **(_BYTE **)(v65 + 72) = v66;
          goto LABEL_150;
        }
      }
      if (!v21)
      {
        v37 = v81;
        v39 = v82;
        goto LABEL_63;
      }
      v29 = __s[0];
      if (__s[0])
      {
        v30 = 0;
        v31 = v17;
        do
        {
          v32 = v29;
          v33 = a1 + (__int16)v31++;
          v34 = *(unsigned __int8 *)(v33 + 1547);
          v29 = __s[(__int16)++v30];
          if (__s[(__int16)v30])
            v35 = v34 == v32;
          else
            v35 = 0;
        }
        while (v35);
        if (v34 != v32)
        {
          if (!HIWORD(v90) && *(_BYTE *)(a1 + 1413))
          {
            *(_QWORD *)(a1 + 1328) |= 0x200uLL;
            *(_WORD *)(v3 + 1742) |= 0x401u;
            *(_WORD *)v87 |= 4u;
            __strcpy_chk();
            v75 = ICcmpalt(v17, v91, SHIWORD(v90), 0, a1);
            v76 = strlen(v79);
            SFadd(v79, v76, (__int16 *)(v83 + 40), (__int16 *)(v83 + 44), *(__int16 *)(v83 + 42), *(__int16 *)(v83 + 56), *(_QWORD *)(v83 + 48), *(_QWORD *)(v83 + 64));
            return v75;
          }
          HIWORD(v90) = 0;
          v43 = ICcmpprm(a1, v17, 0, v88);
          v37 = v81;
          v44 = v81 ^ 1;
          if ((unsigned __int16)v43 != 11)
            v44 = 1;
          if ((v44 & 1) == 0)
          {
            v43 = ICcmpexc(a1, v11, 0, (_WORD *)&v90 + 1, &v90, v81);
            if ((unsigned __int16)v43 == 10)
              return 10;
          }
          v45 = v43 << 16;
          if (v43 << 16 == 655360)
          {
            v46 = *(_WORD *)(v83 + 102);
            v39 = v82;
            if ((unsigned __int16)ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v81) == 10)
              goto LABEL_182;
            *(_WORD *)(v83 + 102) = v46;
            v9 = v89;
            if (v88)
            {
LABEL_177:
              if (v39 == 11)
                LOWORD(v56) = ICcmpvow(a1, v11, 1, 0);
              else
                LOWORD(v56) = ICcmpdbl(a1, v11, 1, v81);
              *(_WORD *)(v3 + 1742) |= 0x200u;
              return (__int16)v56;
            }
          }
          else
          {
            v39 = v82;
            v9 = v89;
            if (v45 != 720896 && v88)
              goto LABEL_177;
            if (v45 == 720896)
            {
              if (v82 == 11)
              {
                v52 = ICcmpvow(a1, v11, 0, 0);
                v80 = (unsigned __int16)v52;
                v53 = v52 << 16;
                if (v52 << 16 == 0x20000)
                {
                  v54 = *(_WORD *)(v83 + 102);
                  __strcpy_chk();
                  __strcpy_chk();
                  if ((*(_WORD *)(v3 + 1742) & 0x10) != 0)
                    --*(_WORD *)(a1 + 1612);
                  v55 = ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v81);
                  *(_WORD *)(v83 + 102) = v54;
                  if (v55 == 10)
                  {
                    v74 = *(_WORD *)(v3 + 1742) | 0x110;
LABEL_183:
                    *(_WORD *)(v3 + 1742) = v74;
                    __strcpy_chk();
LABEL_184:
                    v67 = HIWORD(v90);
                    v68 = v28;
                    v69 = 0;
                    return ICcmpalt(v68, v91, v67, v69, a1);
                  }
                  __strcpy_chk();
                  __strcpy_chk();
                  *(_WORD *)(a1 + 1612) = strlen(v77);
                  if (v88 || v78 == 1)
                  {
                    if (v88)
                      return 2;
                    else
                      return 11;
                  }
                  *v79 = 0;
                  *(_WORD *)v87 &= ~4u;
                  v9 = v89;
                  goto LABEL_100;
                }
              }
              else
              {
                v56 = ICcmpdbl(a1, v11, 0, v81);
                if ((v56 & 0xFFF7) == 2)
                  return (__int16)v56;
                v80 = (unsigned __int16)v56;
                v53 = v56 << 16;
              }
              if (v53 == 655360)
                return 10;
            }
          }
LABEL_100:
          if (*(_BYTE *)(a1 + 8) != 6 || *(_BYTE *)(v83 + 88))
          {
            if (v78 == 1)
            {
              if (v45 == 655360)
                goto LABEL_186;
            }
            else if (v45 == 655360 && *(_BYTE *)(a1 + v28 + 1547) == 45)
            {
LABEL_186:
              *(_WORD *)(v3 + 1742) |= 8u;
              __strcpy_chk();
              HIWORD(v90) = strlen(__s);
              ICcmpalt(v28, v91, SHIWORD(v90), 1, a1);
              *(_WORD *)(v3 + 1742) |= 2u;
              *(_WORD *)(v83 + 102) = 1;
              return 2;
            }
          }
          continue;
        }
      }
      if (SHIWORD(v90) + (_DWORD)v17 == (__int16)v27 && *(_BYTE *)(a1 + 1413))
      {
        v65 = v83;
        if (*(_BYTE *)(a1 + 8) != 6 || (v66 = *(unsigned __int8 *)(v83 + 88), v66 >= 3))
          LOBYTE(v66) = v18;
        goto LABEL_149;
      }
      v36 = ICcmpprm(a1, v17, SHIWORD(v90), v88);
      v37 = v81;
      v38 = v81 ^ 1;
      if (v36 != 11)
        v38 = 1;
      if ((v38 & 1) == 0)
      {
        v36 = ICcmpexc(a1, v11, 0, (_WORD *)&v90 + 1, &v90, v81);
        if (v36 == 10)
          return 10;
      }
      if (v36 == 11)
      {
        v39 = v82;
        v9 = v89;
        if (v82 == 11)
        {
          if (v12 == 8 || (unsigned __int16)v12 == 2)
          {
            v40 = v11;
            v41 = ICcmpvow(a1, v11, 0, 1);
            if (v41 << 16 == 0x20000)
              goto LABEL_179;
            if (v41 << 16 == 655360)
              return 10;
            v80 = (unsigned __int16)v41;
          }
          continue;
        }
        if (v82 != 17 || *(_BYTE *)(a1 + v28 + 1547) != 115)
          continue;
        v47 = HIWORD(v90);
        v48 = HIWORD(v90) + v28;
        v49 = (__int16)(HIWORD(v90) + v28);
        LODWORD(v50) = (__int16)++*(_WORD *)(a1 + 1612);
        if ((int)v50 <= v48)
        {
          v51 = v49;
        }
        else
        {
          v50 = (int)v50;
          v51 = v49;
          do
          {
            *(_BYTE *)(a1 + v50 + 1547) = *(_BYTE *)(a1 + v50 + 1546);
            --v50;
          }
          while (v50 > v49);
        }
        *(_BYTE *)(a1 + v51 + 1547) = 115;
        v42 = ICcmpprm(a1, v28, v47, v88) << 16;
        if (v42 != 720896)
          return (v42 >> 16);
        LODWORD(v61) = *(__int16 *)(a1 + 1612);
        if (v49 < (int)v61)
        {
          do
          {
            *(_BYTE *)(a1 + v51 + 1547) = *(_BYTE *)(a1 + v51 + 1548);
            v61 = *(__int16 *)(a1 + 1612);
            ++v51;
          }
          while (v51 < v61);
        }
        v62 = v61 - 1;
        *(_WORD *)(a1 + 1612) = v62;
        *(_BYTE *)(a1 + v62 + 1547) = 0;
LABEL_63:
        v9 = v89;
        continue;
      }
      v39 = v82;
      v9 = v89;
      if ((unsigned __int16)ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v81) == 10)
      {
        *(_WORD *)(v3 + 1742) |= 0x100u;
        __strcpy_chk();
        if (*(_BYTE *)(a1 + 8) == 6
          && (*(_BYTE *)(a1 + 20) & 0x10) != 0
          && *(_BYTE *)(v28 + a1 + SHIWORD(v90) + 1546) == 45)
        {
          __strcat_chk();
        }
        goto LABEL_184;
      }
      if (v82 != 11)
      {
        if (v82 != 17 || *(_BYTE *)(a1 + v28 + 1547) != 115 || *(_BYTE *)(v28 + a1 + 1548) != 115)
          goto LABEL_190;
        __strcpy_chk();
        if ((int)v28 >= *(__int16 *)(a1 + 1612))
        {
          v73 = v28;
        }
        else
        {
          v71 = v28 << 48;
          v72 = v28;
          do
          {
            *(_BYTE *)(v3 + 1672 + v72) = *(_BYTE *)(a1 + 1548 + v72);
            v71 += 0x1000000000000;
            ++v72;
          }
          while (v72 < *(__int16 *)(a1 + 1612));
          v73 = v71 >> 48;
        }
        *(_BYTE *)(v3 + v73 + 1672) = 0;
        *(_WORD *)(v3 + 1740) = v28;
        SFadd(v79, (__int16)(*(_WORD *)(a1 + 1612) - 1), (__int16 *)(v83 + 40), (__int16 *)(v83 + 44), *(__int16 *)(v83 + 42), *(__int16 *)(v83 + 56), *(_QWORD *)(v83 + 48), *(_QWORD *)(v83 + 64));
        return 2;
      }
      if (v12 != 8 && (unsigned __int16)v12 != 2)
        goto LABEL_190;
      v42 = ICcmpvow(a1, v11, 1, 1) << 16;
      if (v42 != 720896)
        return (v42 >> 16);
    }
    while (!v88);
    HIWORD(v90) = 0;
    v57 = ICcmpprm(a1, v28, 0, v88);
    v58 = v37 ^ 1;
    if (v57 != 11)
      v58 = 1;
    if ((v58 & 1) == 0)
    {
      v57 = ICcmpexc(a1, v11, 0, (_WORD *)&v90 + 1, &v90, v37);
      if (v57 == 10)
        return 10;
    }
    if (v57 != 11)
      break;
    if (v39 == 11)
    {
      if (HIWORD(v90))
        goto LABEL_118;
      v40 = v11;
      v59 = ICcmpvow(a1, v11, 0, 0);
      if (v59 << 16 == 0x20000)
      {
LABEL_179:
        __strcpy_chk();
        __strcpy_chk();
        if ((*(_WORD *)(v3 + 1742) & 0x10) != 0)
          --*(_WORD *)(a1 + 1612);
        if ((unsigned __int16)ICcmpexc(a1, v40, 1, (_WORD *)&v90 + 1, &v90, v37) == 10)
        {
LABEL_182:
          v74 = *(_WORD *)(v3 + 1742) | 0x100;
          goto LABEL_183;
        }
        __strcpy_chk();
        __strcpy_chk();
        *(_WORD *)(a1 + 1612) = strlen(v77);
        return 2;
      }
      if (v59 << 16 == 655360)
        return 10;
      v80 = (unsigned __int16)v59;
LABEL_118:
      result = 2;
      if (v80 == 2)
        return result;
    }
    else
    {
      LODWORD(result) = ICcmpdbl(a1, v11, 0, v37);
      v80 = (unsigned __int16)result;
      v60 = (_DWORD)result << 16;
      if ((_DWORD)result << 16 == 0x20000)
      {
        if (v39 != 6)
          return 2;
        result = 2;
        if ((*(_BYTE *)(a1 + 20) & 0x20) != 0)
          return result;
      }
      else if (v60 == 196608 || v60 == 655360)
      {
        return (unsigned __int16)result;
      }
    }
  }
  HIWORD(v90) = 0;
  if ((unsigned __int16)ICcmpexc(a1, v11, 1, (_WORD *)&v90 + 1, &v90, v37) == 10)
  {
    *(_WORD *)(v3 + 1742) |= 0x100u;
    __strcpy_chk();
    v67 = HIWORD(v90);
    v68 = v28;
    v69 = 1;
    return ICcmpalt(v68, v91, v67, v69, a1);
  }
  if (v39 == 11)
  {
    v70 = ICcmpvow(a1, v11, 1, 0);
LABEL_188:
    v57 = v70;
  }
  else if (v39 != 6 || (*(_BYTE *)(a1 + 20) & 0x20) != 0)
  {
    v70 = ICcmpdbl(a1, v11, 1, v37);
    goto LABEL_188;
  }
  if (v57 != 10)
    return v57;
LABEL_190:
  *(_WORD *)(v3 + 1742) |= 0x200u;
  return 10;
}

uint64_t ICcmpalt(int a1, unsigned __int8 *a2, __int16 a3, int a4, uint64_t a5)
{
  __int16 v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  char *v15;
  char v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  __int16 v20;
  _DWORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  unsigned int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  __int16 v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int i;
  _QWORD v52[2];

  v7 = a3;
  v8 = a1;
  v52[1] = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD **)(a5 + 3184);
  v10 = v9[35];
  v11 = v9[33];
  v12 = *(_QWORD *)(v9[31] + 56);
  v13 = (_BYTE *)(v10 + 1672);
  *(_BYTE *)(v10 + 1736) = 0;
  *(_OWORD *)(v10 + 1704) = 0u;
  *(_OWORD *)(v10 + 1720) = 0u;
  *(_OWORD *)(v10 + 1672) = 0u;
  *(_OWORD *)(v10 + 1688) = 0u;
  if (a1 < 1)
  {
    LOWORD(v17) = 0;
  }
  else
  {
    v14 = (unsigned __int16)a1;
    v15 = (char *)(a5 + 1547);
    do
    {
      v16 = *v15++;
      *v13++ = v16;
      --v14;
    }
    while (v14);
    LOWORD(v17) = a1;
  }
  *(_WORD *)(v10 + 1738) = v17;
  v18 = *a2;
  if (*(_DWORD *)(a5 + 1308) && v18 == 45)
  {
    *(_DWORD *)(v11 + 4 * ((unsigned __int16)v17 >> 5) + 3480) &= ~(1 << ~(_BYTE)v17);
    v18 = *a2;
  }
  if (v18)
  {
    v19 = a2 + 1;
    v20 = v17;
    while (1)
    {
      if (v18 == 45 && *(_BYTE *)(a5 + 8) == 6)
      {
        if (*(unsigned __int8 *)(v10 + 1592) - 1 <= 2)
        {
          **(_BYTE **)(v11 + 72) = 3;
          if ((*(_DWORD *)(v12 + 4 * *(unsigned __int8 *)(a5 + 1547)) & 0x8000000) != 0)
          {
            **(_BYTE **)(v11 + 72) = *(_BYTE *)(v10 + 1592);
            v21 = *(_DWORD **)(v11 + 80);
          }
          else
          {
            v21 = *(_DWORD **)(v11 + 80);
            *v21 |= 0x80000000;
          }
          *(_DWORD *)((char *)v21 + (((unint64_t)*(unsigned __int16 *)(v10 + 1502) >> 3) & 0x1FFC)) |= 1 << ~*(_WORD *)(v10 + 1502);
        }
        if (*(_BYTE *)(a5 + (unsigned __int16)v17 + 1547) == 45)
        {
          v7 = a3 - 1;
          if (!a4)
            goto LABEL_26;
LABEL_24:
          *(_WORD *)(a5 + 1612) += v7;
          goto LABEL_27;
        }
        LOBYTE(v18) = *(v19 - 1);
      }
      *(_BYTE *)(v10 + v20++ + 1672) = v18;
      v22 = *v19++;
      v18 = v22;
      if (!v22)
        goto LABEL_23;
    }
  }
  v20 = v17;
LABEL_23:
  if (a4)
    goto LABEL_24;
LABEL_26:
  LOWORD(v17) = v7 + v17;
LABEL_27:
  *(_WORD *)(v10 + 1740) = v20;
  if (*(_BYTE *)(a5 + a1 + 1547) == 45)
    *(_WORD *)(v10 + 1740) = v20 + 1;
  if ((*(_WORD *)(v10 + 1604) & 0x40) != 0 && (*(_WORD *)(a5 + 1322) & 0x40) != 0)
  {
    strcat((char *)(v10 + v20 + 1672), (const char *)(v10 + 1607));
    if ((*(_WORD *)(a5 + 1322) & 0x10) != 0)
    {
      v33 = 0;
      do
      {
        v34 = v33;
        v35 = *(_DWORD *)(v10 + 1596 + 4 * ((unsigned __int16)v33 >> 5));
        v36 = ~(_BYTE)v33++;
      }
      while (((v35 >> v36) & 1) == 0);
      if (((*(_DWORD *)(v11 + 4 * ((unsigned __int16)(*(_WORD *)(v10 + 1502) + v34) >> 5) + 3472) >> ~(*(_WORD *)(v10 + 1502) + v34)) & 1) == 0)
        *(_QWORD *)(a5 + 1328) |= 8uLL;
    }
  }
  else
  {
    if (*(__int16 *)(a5 + 1612) > (__int16)v17)
    {
      v17 = (__int16)v17;
      do
        *(_BYTE *)(v10 + v20++ + 1672) = *(_BYTE *)(a5 + 1547 + v17++);
      while (v17 < *(__int16 *)(a5 + 1612));
    }
    *(_BYTE *)(v10 + v20 + 1672) = 0;
  }
  v52[0] = 0;
  if (*(_BYTE *)(v10 + 1504) == 2)
  {
    v23 = *(__int16 *)(v10 + 1740);
    if (v23 > v8)
    {
      v24 = *(_QWORD *)(v11 + 80);
      LOWORD(v25) = v8;
      do
      {
        *(_DWORD *)(v24 + 4 * ((unsigned __int16)v25 >> 5)) |= 1 << ~(_BYTE)v25;
        v25 = (__int16)(v25 + 1);
      }
      while (v25 < v23);
    }
  }
  else if (*(_BYTE *)(v10 + 1592) == 2)
  {
    v26 = *(__int16 *)(v10 + 1740);
    if (v26 > v8)
    {
      v27 = *(_QWORD *)(v11 + 80);
      LOWORD(v28) = v8;
      do
      {
        v29 = 1 << ~(_BYTE)v28;
        *(_DWORD *)(v27 + 4 * ((unsigned __int16)v28 >> 5)) &= ~v29;
        *(_DWORD *)(v11 + 92 + 4 * ((unsigned __int16)v28 >> 5)) &= ~v29;
        v28 = (__int16)(v28 + 1);
      }
      while (v28 < v26);
    }
    v30 = *(__int16 *)(a5 + 1612);
    if (v26 < v30)
    {
      v31 = *(_QWORD *)(v11 + 80);
      do
      {
        v32 = 1 << ~(_BYTE)v26;
        *(_DWORD *)(v31 + 4 * ((unsigned __int16)v26 >> 5)) |= v32;
        *(_DWORD *)(v11 + 92 + 4 * ((unsigned __int16)v26 >> 5)) |= v32;
        v26 = (__int16)(v26 + 1);
      }
      while (v26 < v30);
    }
  }
  else if (*(__int16 *)(v11 + 102) >= 1)
  {
    v37 = 0;
    v38 = *(unsigned __int16 *)(v11 + 102);
    v39 = *(_QWORD *)(v11 + 72);
    do
    {
      if (*(unsigned __int8 *)(v39 + v37) >= 2u)
      {
        v52[0] = 0;
        v40 = *(__int16 *)(v10 + 1502);
        v41 = *(_QWORD *)(v11 + 80);
        if (v40 >= 1)
        {
          LOWORD(v42) = 0;
          do
          {
            v43 = 1 << ~(_BYTE)v42;
            if ((*(_DWORD *)(v41 + 8 * v37 + 4 * ((unsigned __int16)v42 >> 5)) & v43) != 0)
              *((_DWORD *)v52 + ((unsigned __int16)v42 >> 5)) |= v43;
            v42 = (__int16)(v42 + 1);
          }
          while (v42 < v40);
        }
        v44 = (__int16)(*(_WORD *)(a5 + 1612) - v7);
        if (v44 > v8)
        {
          v45 = *(_WORD *)(v10 + 1740) - v40;
          v46 = v8;
          do
          {
            if (((*(_DWORD *)(v41 + 8 * v37 + 4 * ((unsigned __int16)v46 >> 5)) >> ~(_BYTE)v46) & 1) != 0)
              *((_DWORD *)v52 + ((unsigned __int16)(v45 + v46) >> 5)) |= 1 << ~(v45 + v46);
            ++v46;
          }
          while (v46 < v44);
        }
        *(_QWORD *)(v41 + 8 * v37) = v52[0];
      }
      ++v37;
    }
    while (v37 != v38);
  }
  if (a4 && *(_DWORD *)(a5 + 1308) && (*(_WORD *)(v10 + 1742) & 0x1000) == 0)
  {
    v52[0] = 0;
    v47 = *(__int16 *)(v10 + 1502);
    if (v47 >= 1)
    {
      LOWORD(v48) = 0;
      do
      {
        v49 = 1 << ~(_BYTE)v48;
        if ((*(_DWORD *)(v11 + 3472 + 4 * ((unsigned __int16)v48 >> 5)) & v49) != 0)
          *((_DWORD *)v52 + ((unsigned __int16)v48 >> 5)) |= v49;
        v48 = (__int16)(v48 + 1);
      }
      while (v48 < v47);
    }
    for (i = (__int16)(*(_WORD *)(a5 + 1612) - v7); v8 < i; ++v8)
    {
      if (((*(_DWORD *)(v11 + 3472 + 4 * ((unsigned __int16)v8 >> 5)) >> ~(_BYTE)v8) & 1) != 0)
        *((_DWORD *)v52 + ((unsigned __int16)(v7 + v8) >> 5)) |= 1 << ~(v7 + v8);
    }
    *(_QWORD *)(v11 + 3472) = v52[0];
  }
  return 2;
}

uint64_t ICcmpdbl(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  __int16 v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  _WORD *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  __int16 v33;
  unsigned __int8 v34[68];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a3 && *(_BYTE *)(a1 + 8) == 6 && (*(_BYTE *)(a1 + 20) & 0x10) != 0)
    return 10;
  v7 = *(_QWORD *)(a1 + 3184);
  v8 = *(_QWORD *)(v7 + 280);
  if (!*(_WORD *)(v8 + 100 * a2 + 70))
    return 11;
  v9 = *(_QWORD *)(v7 + 264);
  *(_WORD *)v34 = 0;
  v10 = v8 + 100 * a2;
  v11 = *(__int16 *)(v10 + 66);
  v12 = *(__int16 *)(v10 + 66);
  v13 = *(unsigned __int16 *)(v10 + 74);
  __strcpy_chk();
  v14 = *(unsigned __int8 *)(a1 + 8);
  if (v14 == 6 && *(_DWORD *)(a1 + 20) == 64 && v34[v12 + 2] == 115)
    v13 = 0;
  if (a3)
  {
    if (v13 != 1)
    {
      if (v13 == 2 && v34[v12 + 2] == v34[v12 + 3])
      {
        *(_WORD *)(v8 + 1742) |= 0x80u;
        v34[0] = 45;
        ICcmpalt(v12, v34, 1, 1, a1);
        *(_DWORD *)(*(_QWORD *)(v9 + 80) + (((unint64_t)*(unsigned __int16 *)(v8 + 1740) >> 3) & 0x1FFC)) |= 1 << ~*(_WORD *)(v8 + 1740);
        **(_BYTE **)(v9 + 72) = 3;
        return 2;
      }
      goto LABEL_26;
    }
    v17 = v12 - 1;
    if (v34[v12 + 2] != v34[v12 + 3] || v14 == 6 && ((v18 = v34[v12 + 4], v18 == 114) || v18 == 108))
    {
LABEL_26:
      *(_WORD *)(v8 + 1742) |= 0x200u;
      return 10;
    }
    *(_WORD *)(v8 + 1742) |= 0xA000u;
    *(_QWORD *)(v9 + 3480) = 0;
    *(_BYTE *)(v8 + 1526) = 0;
    *(_DWORD *)(v9 + 3480 + 4 * ((unsigned __int16)(v11 - 1) >> 5)) |= 1 << ~(_BYTE)v17;
    if ((v14 != 6 || (*(_BYTE *)(a1 + 20) & 0x20) != 0) && (~*(unsigned __int16 *)(a1 + 1322) & 0x42) == 0)
    {
      ICcmpalt(v11, "", 1, 0, a1);
      if (!a4)
      {
        v23 = strlen((const char *)(v8 + 1672));
        SFadd((char *)(v8 + 1672), v23, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 64));
      }
      **(_WORD **)(a1 + 3184) |= 4u;
      *(_WORD *)(a1 + 1322) |= 0x10u;
    }
    v24 = "";
    v25 = v17;
    v26 = 0;
    return ICcmpalt(v25, v24, 1, v26, a1);
  }
  if (v13 == 1)
  {
    v19 = v12 - 1;
    if ((unsigned __int16)ICcmprmc(a1, (__int16)(v12 - 1), (__int16)(*(_WORD *)(a1 + 1612) - 1)) != 10)
      return 11;
    v20 = *(unsigned __int8 *)(a1 + 8);
    if (v20 == 6)
    {
      v21 = *(_DWORD *)(a1 + 20);
      if ((v21 & 0x10) != 0)
      {
        *(_WORD *)v34 = v34[v19 + 3];
        if (*(_QWORD *)(a1 + 1672))
        {
          strcpy((char *)&v34[1], "-");
          v32 = 2;
        }
        else
        {
          v32 = 1;
        }
        ICcmpalt((__int16)(v12 - 1), v34, v32, 1, a1);
        v33 = strlen((const char *)(v8 + 1672));
        SFadd((char *)(v8 + 1672), v33, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 64));
        **(_WORD **)(a1 + 3184) |= 4u;
        return 2;
      }
      v22 = v34[v12 + 3];
      if (v22 == 114 || v22 == 108)
      {
        *(_WORD *)(v8 + 1742) |= 0x20u;
        v34[0] = v34[v19 + 3];
LABEL_52:
        v24 = v34;
        v25 = (__int16)(v12 - 1);
        v26 = 1;
        return ICcmpalt(v25, v24, 1, v26, a1);
      }
      v28 = *(_WORD *)(v8 + 1742) | 0x1000;
      *(_WORD *)(v8 + 1742) = v28;
      if ((v21 & 0x20) == 0)
        return 10;
      v27 = (_WORD *)(v8 + 1742);
    }
    else
    {
      v27 = (_WORD *)(v8 + 1742);
      v28 = *(_WORD *)(v8 + 1742) | 0x1000;
      *(_WORD *)(v8 + 1742) = v28;
    }
    *v27 = v28 | 0x8000;
    v34[0] = v34[v19 + 3];
    v29 = *(unsigned __int16 *)(a1 + 1322);
    if ((~v29 & 0x42) == 0)
    {
      ICcmpalt((__int16)(v12 - 1), "", 1, 0, a1);
      if (!a4)
      {
        v30 = strlen((const char *)(v8 + 1672));
        SFadd((char *)(v8 + 1672), v30, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 64));
      }
      **(_WORD **)(a1 + 3184) |= 4u;
      LOWORD(v29) = *(_WORD *)(a1 + 1322) & 0xFFED | 0x10;
      *(_WORD *)(a1 + 1322) = v29;
      v20 = *(unsigned __int8 *)(a1 + 8);
    }
    if (v20 != 6 || (v31 = v34[v12 + 3], v31 != 108) && v31 != 114)
      *(_WORD *)(a1 + 1322) = v29 | 4;
    *(_QWORD *)(a1 + 3156) = 0;
    *(_BYTE *)(v8 + 1526) = 0;
    *(_WORD *)(v8 + 1500) = *(_WORD *)(v8 + 1502);
    *(_DWORD *)(a1 + 3156 + 4 * ((unsigned __int16)(v12 - 1) >> 5)) |= 1 << ~(_BYTE)v19;
    goto LABEL_52;
  }
  if (v13 != 2 || v34[v12 + 3] != 45 || v34[v12 + 2] != v34[v12 + 4])
    return 11;
  v16 = ICcmprmc(a1, (__int16)(v12 + 1), (__int16)(*(_WORD *)(a1 + 1612) - 1));
  *(_WORD *)(v8 + 1742) |= 0x200u;
  if (v16 == 10)
    return 10;
  else
    return 11;
}

uint64_t ICcmpexc(uint64_t a1, int a2, int a3, _WORD *a4, _WORD *a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  signed int v10;
  __int16 v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  size_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  __int16 v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  __int16 v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t result;
  unsigned int v41;
  unsigned __int16 v42;
  int v43;
  const char *v44;
  int v45;
  int v46;
  __int16 v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  int v52;
  __int16 v55;
  size_t v56;
  int v57;
  const void *v58;
  uint64_t v59;
  uint64_t v60;
  int v62;
  char __dst[65];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 3184);
  v59 = *(_QWORD *)(v8 + 264);
  v60 = v8;
  v57 = *(unsigned __int16 *)(v8 + 92);
  v9 = *(_QWORD *)(v8 + 280) + 100 * a2;
  v10 = *(__int16 *)(v9 + 72);
  v11 = 3 * v10;
  v12 = *(__int16 *)(v9 + 66);
  v13 = *(unsigned __int16 *)(v9 + 90);
  v14 = (unsigned __int16)*a4;
  v15 = v14 + v12;
  v55 = *(_WORD *)(a1 + 1612);
  if (v12 < 1)
  {
    v16 = 0;
  }
  else
  {
    v16 = *(unsigned __int16 *)(v9 + 66);
    memcpy(__dst, (const void *)(a1 + 1547), v16);
  }
  v62 = (__int16)(v55 - (v14 + v12));
  __dst[v16] = 0;
  if (!a3)
  {
    if (v10 != 31 && v13 != 0)
    {
      v20 = 0;
      while (1)
      {
        v21 = *(_QWORD *)(a1 + 3184);
        v22 = *(_QWORD *)(v21 + 112);
        v23 = (const char *)(v22 + 4 * v11);
        if (!*v23)
          break;
        v24 = strlen(v23);
        LOWORD(v25) = v24;
        if (v24 < 1)
          goto LABEL_34;
        v26 = 0;
        do
        {
          v27 = *(unsigned __int8 *)(a1 + 1547 + v12 + v26);
          v28 = *(unsigned __int8 *)(v22 + 4 * v11 + v26++);
        }
        while (v26 < v24 && v27 == v28);
        if (v27 == v28)
        {
LABEL_34:
          if (a6 && *(_BYTE *)(v21 + 304) == 11)
          {
            v25 = (__int16)(v12 + v24);
            v29 = *(__int16 *)(a1 + 1612);
            if (v25 >= v29)
            {
              v30 = 0;
            }
            else
            {
              v30 = 0;
              v31 = (__int16)(v12 + v24);
              do
                __dst[v30++] = *(_BYTE *)(a1 + 1547 + v31++);
              while (v31 < v29);
            }
            __dst[v30] = 0;
            v34 = *(_QWORD *)(v60 + 280);
            *(_WORD *)(v34 + 1500) = v12;
            *(_WORD *)(v34 + 1502) = v25;
          }
          else
          {
            if (v62 - v24 < 1)
            {
              v32 = 0;
            }
            else
            {
              v32 = 0;
              v33 = 0;
              do
              {
                __dst[v12 + v32] = *(_BYTE *)(a1 + v24 + (int)v12 + (uint64_t)v32 + 1547);
                v32 = (__int16)++v33;
              }
              while (v62 - v24 > (__int16)v33);
            }
            __dst[v12 + v32] = 0;
            LOWORD(v29) = *(_WORD *)(a1 + 1612);
          }
          if ((unsigned __int16)ICverify(__dst, (__int16)(v29 - v25), a1) == 10)
          {
            if (*(_BYTE *)(a1 + 8) != 6 || *(_BYTE *)(a1 + 1414) || *(__int16 *)(v59 + 102) < 1)
              return 11;
            v50 = *(unsigned __int16 *)(v59 + 102);
            v51 = *(unsigned __int8 **)(v59 + 72);
            result = 11;
            while (1)
            {
              v52 = *v51++;
              if (v52 == 1)
                break;
              if (!--v50)
                return result;
            }
            *a4 = v25;
            goto LABEL_47;
          }
        }
        ++v11;
        v35 = v20++ >= 2;
        if (v35)
          return 11;
      }
    }
    return 11;
  }
  v17 = v59;
  if (!v14 || !v13)
    goto LABEL_50;
  if (v62 < 1)
  {
    v18 = 0;
  }
  else
  {
    memcpy(&__dst[v12], (const void *)(a1 + v15 + 1547), (unsigned __int16)(v55 + ~v15) + 1);
    v17 = v59;
    v18 = (unsigned __int16)(v55 + ~v15) + 1;
  }
  __dst[v12 + v18] = 0;
  v36 = v17;
  v37 = *(_WORD *)(v17 + 102);
  if ((unsigned __int16)ICverify(__dst, (__int16)(v55 - v14), a1) != 10)
  {
    *(_WORD *)(v36 + 102) = v37;
    v17 = v36;
LABEL_50:
    if (v10 <= (int)((43691 * v57) >> 19))
    {
      v41 = 0;
      v42 = v55 + ~v15;
      v56 = v42 + 1;
      v58 = (const void *)(a1 + v15 + 1547);
      v43 = v42 + 1;
      while (1)
      {
        v44 = (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 112) + 4 * v11);
        if (!*v44)
          break;
        strcpy(&__dst[v12], (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 112) + 4 * v11));
        v45 = v12 + (__int16)strlen(v44);
        if (v62 < 1)
        {
          v46 = 0;
        }
        else
        {
          memcpy(&__dst[v45], v58, v56);
          v46 = v43;
        }
        __dst[v46 + v45] = 0;
        v47 = *(_WORD *)(v17 + 102);
        if ((unsigned __int16)ICverify(__dst, (__int16)(v62 + v45), a1) == 10)
        {
          if (*(_BYTE *)(a1 + 8) == 6 && !*(_BYTE *)(a1 + 1414))
          {
            v48 = *(_BYTE **)(v59 + 72);
            if (*v48 != 1 && v48[1] != 1)
              return 11;
          }
          if (a6 && *(_BYTE *)(*(_QWORD *)(a1 + 3184) + 304) == 11)
          {
            v49 = *(_QWORD *)(v60 + 280);
            *(_WORD *)(v49 + 1500) = v12;
            *(_WORD *)(v49 + 1502) = v45;
          }
          *a5 = v11;
          if (*(_DWORD *)(a1 + 1308) && __dst[v12] == 45)
            *(_DWORD *)(a1 + 4 * ((unsigned __int16)v12 >> 5) + 3156) &= ~(1 << ~(_BYTE)v12);
          return 10;
        }
        *(_WORD *)(v17 + 102) = v47;
        ++v11;
        v35 = v41++ >= 2;
        if (v35)
          return 11;
      }
    }
    return 11;
  }
  if (*(_BYTE *)(a1 + 8) == 6 && !*(_BYTE *)(a1 + 1414))
  {
    v38 = *(_BYTE **)(v59 + 72);
    if (*v38 != 1 && v38[1] != 1)
      return 11;
  }
  if (a6)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3184) + 304) == 11)
    {
      v39 = *(_QWORD *)(v60 + 280);
      *(_WORD *)(v39 + 1500) = v12;
      *(_WORD *)(v39 + 1502) = v12;
    }
  }
LABEL_47:
  *a5 = 0;
  return 10;
}

uint64_t ICcmpfnd(uint64_t a1)
{
  __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  size_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __int16 v18;
  int v20;
  int v21;
  __int16 v22;
  __int16 v23;
  __int16 v24;
  char v25;
  char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v36;
  int v37;
  char __dst[3];
  char __src[65];
  char v40[16];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  char v45[16];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  char v49;
  _QWORD v50[3];
  char __s[65];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *(__int16 **)(a1 + 3184);
  v3 = *((_QWORD *)v2 + 35);
  v4 = *((_QWORD *)v2 + 33);
  v5 = *(_DWORD *)(a1 + 1308);
  if (*(__int16 *)(v4 + 102) >= 1)
  {
    v6 = *(unsigned __int16 *)(v4 + 102);
    v7 = *(uint64_t **)(v4 + 80);
    memcpy(__dst, *(const void **)(v4 + 72), v6);
    v8 = v50;
    do
    {
      v9 = *v7++;
      *v8++ = v9;
      --v6;
    }
    while (v6);
  }
  v10 = *(unsigned __int16 *)(v3 + 1524);
  v11 = *(unsigned __int16 *)(v3 + 1604);
  if (!(v5 | (v11 | v10) & 0x40))
    return 10;
  v12 = *v2;
  if (v5
    && (v12 & 8) != 0
    && ((v11 | v10) & 0x40) == 0
    && *(__int16 *)(v3 + 1742) < 0)
  {
    *(_DWORD *)(v3 + 1516) = 0;
    *(_DWORD *)(v3 + 1596) = 0;
    *(_DWORD *)(v4 + 3480) = 0;
    ICcmphyp((char *)(a1 + 1547), a1);
    return 10;
  }
  *(_OWORD *)v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  *(_OWORD *)v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0;
  if ((v12 & 4) != 0 && *(_BYTE *)(a1 + 1690))
  {
    __strcpy_chk();
    SFlstini((_WORD *)(v4 + 40), (_WORD *)(v4 + 44), *(_BYTE **)(v4 + 48), *(_WORD **)(v4 + 64));
    v37 = 1;
  }
  else
  {
    __strcpy_chk();
    v37 = 0;
  }
  v14 = *v2;
  *v2 |= 8u;
  v15 = *(_WORD *)(v3 + 1502);
  if (!v15)
  {
    v15 = *(_WORD *)(a1 + 1612);
    goto LABEL_23;
  }
  if ((v14 & 4) == 0)
  {
LABEL_23:
    v16 = *(unsigned __int16 *)(v3 + 1500);
    v17 = *(_WORD *)(v3 + 1500);
    goto LABEL_24;
  }
  if (*(__int16 *)(v3 + 1740) > 0)
    v15 = *(_WORD *)(v3 + 1740);
  v16 = *(unsigned __int16 *)(v3 + 1500);
  if (*(__int16 *)(v3 + 1738) <= 0)
    v17 = *(_WORD *)(v3 + 1500);
  else
    v17 = *(_WORD *)(v3 + 1738);
LABEL_24:
  if (v16)
    v18 = v16;
  else
    v18 = v15;
  if ((v10 & 0x40) != 0 && v5 && *(_BYTE *)(v3 + 1527))
    __strcpy_chk();
  else
    __strncpy_chk();
  if (v15 != v17 && (__int16)(v15 - v17) <= 5)
    __strncpy_chk();
  if (v5 && (v11 & 0x40) != 0)
  {
    __strcpy_chk();
    goto LABEL_44;
  }
  if (strlen(__s) > v15)
    __strcpy_chk();
  if (!v5)
  {
    if ((v10 & 0x40) != 0)
    {
      icsfthypchk(v18, v3 + 1516, (_DWORD *)(v4 + 3472), 0, a1);
      ICcmpsmh(v45, __src, v3 + 1516, 1, v18, a1);
      __strcpy_chk();
    }
    __strcat_chk();
    if ((v11 & 0x40) != 0)
    {
      icsfthypchk(0, v3 + 1596, (_DWORD *)(v4 + 3472), v15, a1);
      v24 = strlen(__s);
      ICcmpsmh(v40, __src, v3 + 1596, 1, (__int16)(v24 - v15), a1);
      __strcat_chk();
      v25 = v11 | v10;
      if ((*(_WORD *)(a1 + 1322) & 0x40) != 0)
      {
        if ((*(_WORD *)(v3 + 1742) & 0x1000) != 0)
        {
          v26 = (char *)(v15 + a1 + 3091);
LABEL_97:
          strcpy(v26, __src);
          if (((v11 | v10) & 0x40) == 0)
            goto LABEL_86;
          goto LABEL_85;
        }
        if ((*(_WORD *)(v3 + 1742) & 0x2000) != 0)
        {
          v26 = (char *)(v15 + a1 + 3089);
          goto LABEL_97;
        }
      }
    }
    else
    {
      __strcat_chk();
      v25 = v11 | v10;
    }
    if ((v25 & 0x40) == 0)
    {
LABEL_86:
      if (*(__int16 *)(v4 + 102) >= 1)
      {
        v33 = 0;
        do
        {
          *(_BYTE *)(*(_QWORD *)(v4 + 72) + v33) = __dst[v33];
          *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v33) = v50[v33];
          ++v33;
        }
        while (v33 < *(__int16 *)(v4 + 102));
      }
      v34 = strlen(v45);
      SFadd(v45, v34, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
      *v2 |= 4u;
      return 2;
    }
LABEL_85:
    *(_WORD *)(a1 + 1322) |= 0x10u;
    goto LABEL_86;
  }
LABEL_44:
  if (*(_BYTE *)(a1 + 8) == 6 && (v10 & 0x40) != 0 && (*(_DWORD *)(a1 + 20) & 0x20) != 0)
  {
    if (!*(_BYTE *)(v3 + 1527) && ((v36 = v18 - 2, v45[v18 - 1] == 107) || v45[v36] == 107))
    {
      v45[v36] = 99;
      v13 = ICverify(v45, v18, a1);
      if ((_DWORD)v13 != 10)
        v45[v36] = 107;
    }
    else
    {
      v13 = 10;
    }
  }
  else
  {
    v13 = 10;
    if ((v10 & 0x40) == 0)
      goto LABEL_68;
  }
  v20 = (__int16)strlen(v45);
  if (v20 >= v18)
  {
    if (v20 > v18)
    {
      ++v18;
      --v15;
      ++*(_WORD *)(v3 + 1502);
      ++*(_WORD *)(v3 + 1500);
      ++*(_WORD *)(a1 + 1612);
    }
  }
  else
  {
    --v18;
    --v15;
    --*(_WORD *)(v3 + 1500);
    --*(_WORD *)(a1 + 1612);
    if (*(_WORD *)(v3 + 1502))
      --*(_WORD *)(v3 + 1502);
  }
  icsfthypchk(v18, v3 + 1516, (_DWORD *)(v4 + 3472), 0, a1);
  *(_DWORD *)(v3 + 1516) = *(_DWORD *)(v3 + 1520);
  v21 = (*(unsigned __int16 *)(v4 + 18) >> 7) & 1;
  v22 = *(_WORD *)(v3 + 1524);
  if ((v22 & 0x80) == 0)
    v21 = 1;
  if (v21)
    v23 = *(_WORD *)(v3 + 1524);
  else
    v23 = v22 & 0xFF3F;
  *(_WORD *)(v3 + 1524) = v23 & 0xFFBF;
LABEL_68:
  __strcat_chk();
  if ((*(_WORD *)(v3 + 1742) & 1) != 0)
  {
    if (*(_BYTE *)(v3 + 1526))
      ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), v18);
  }
  else
  {
    *(_BYTE *)(v3 + 1526) = 0;
  }
  __strcat_chk();
  if ((v11 & 0x40) != 0)
  {
    v27 = strlen(__s);
    icsfthypchk(v27, v3 + 1596, (_DWORD *)(v4 + 3472), v15, a1);
    *(_DWORD *)(v3 + 1596) = *(_DWORD *)(v3 + 1600);
    v28 = (*(unsigned __int16 *)(v4 + 18) >> 7) & 1;
    v29 = *(_WORD *)(v3 + 1604);
    if ((v29 & 0x80) == 0)
      v28 = 1;
    if (v28)
      v30 = *(_WORD *)(v3 + 1604);
    else
      v30 = v29 & 0xFF3F;
    *(_WORD *)(v3 + 1604) = v30 & 0xFFBF;
  }
  __strcpy_chk();
  if (((v11 | v10) & 0x40) != 0)
  {
    *v2 |= 4u;
    v32 = strlen(__src);
    SFadd(__src, v32, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
    *(_WORD *)(a1 + 1322) = *(_WORD *)(a1 + 1322) & 0xFFA9 | 0x10;
    return 2;
  }
  *(_WORD *)(a1 + 1322) &= 0xFFB9u;
  if (v37)
  {
    v31 = strlen(__src);
    SFadd(__s, v31, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
  }
  return v13;
}

uint64_t icsfthypchk(int a1, uint64_t a2, _DWORD *a3, int a4, uint64_t a5)
{
  char v5;
  unsigned __int16 v6;

  if (!*a3)
    goto LABEL_8;
  if (a1 - a4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    while (((*(_DWORD *)(a2 + 4 * (v6 >> 5)) >> ~v5) & 1) == 0)
    {
      v5 = ++v6;
      if (a1 - a4 <= (__int16)v6)
        return 1;
    }
    if (((a3[(unsigned __int16)(v6 + a4) >> 5] >> ~(v5 + a4)) & 1) == 0)
LABEL_8:
      *(_QWORD *)(a5 + 1328) |= 8uLL;
  }
  return 1;
}

uint64_t uppercasedString(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (uppercasedString_onceToken != -1)
    dispatch_once(&uppercasedString_onceToken, &__block_literal_global_1);
  v4 = (void *)objc_msgSend(a1, "uppercaseStringWithLocale:", a2);
  objc_msgSend(v4, "rangeOfCharacterFromSet:", uppercasedString_greekUppercaseLetterCharacterSet);
  if (v5
    && (v6 = objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:", 0),
        v6 + v7 < (unint64_t)objc_msgSend(a1, "length")))
  {
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(v4, "stringByReplacingOccurrencesOfString:withString:", CFSTR("Ά"), CFSTR("Α")), "stringByReplacingOccurrencesOfString:withString:",
                                                                                     CFSTR("Έ"),
                                                                                     CFSTR("Ε")),
                                                                               "stringByReplacingOccurrencesOfString:withString:",
                                                                               CFSTR("Ή"),
                                                                               CFSTR("Η")),
                                                                         "stringByReplacingOccurrencesOfString:withString:",
                                                                         CFSTR("Ί"),
                                                                         CFSTR("Ι")),
                                                                   "stringByReplacingOccurrencesOfString:withString:",
                                                                   CFSTR("Ό"),
                                                                   CFSTR("Ο")),
                                                             "stringByReplacingOccurrencesOfString:withString:",
                                                             CFSTR("Ύ"),
                                                             CFSTR("Υ")),
                                                       "stringByReplacingOccurrencesOfString:withString:",
                                                       CFSTR("Ώ"),
                                                       CFSTR("Ω")),
                                                 "stringByReplacingOccurrencesOfString:withString:",
                                                 CFSTR("Ά"),
                                                 CFSTR("Α")),
                                           "stringByReplacingOccurrencesOfString:withString:",
                                           CFSTR("Έ"),
                                           CFSTR("Ε")),
                                     "stringByReplacingOccurrencesOfString:withString:",
                                     CFSTR("Ή"),
                                     CFSTR("Η")),
                               "stringByReplacingOccurrencesOfString:withString:",
                               CFSTR("Ί"),
                               CFSTR("Ι")),
                         "stringByReplacingOccurrencesOfString:withString:",
                         CFSTR("Ό"),
                         CFSTR("Ο")),
                   "stringByReplacingOccurrencesOfString:withString:",
                   CFSTR("Ύ"),
                   CFSTR("Υ")),
             "stringByReplacingOccurrencesOfString:withString:",
             CFSTR("Ώ"),
             CFSTR("Ω"));
  }
  else
  {
    return (uint64_t)v4;
  }
}

id __uppercasedString_block_invoke()
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithRange:", 902, 38);
  uppercasedString_greekUppercaseLetterCharacterSet = (uint64_t)result;
  return result;
}

uint64_t initialCapitalizedString(void *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = objc_msgSend(a1, "lowercaseStringWithLocale:", a2);
  v5 = objc_msgSend(a1, "length");
  if (initialCapitalizedString_onceToken != -1)
    dispatch_once(&initialCapitalizedString_onceToken, &__block_literal_global_42);
  if (!objc_msgSend(a1, "isEqualToString:", v4))
    return (uint64_t)a1;
  if ((objc_msgSend((id)initialCapitalizedString_prohibitedSet, "containsObject:", a1) & 1) != 0)
    return (uint64_t)a1;
  v6 = objc_msgSend(a1, "rangeOfCharacterFromSet:", initialCapitalizedString_internalCharacterSet);
  if (v7)
  {
    if (v7 != 1)
      return (uint64_t)a1;
    v8 = v6;
    if (v6 + 1 != objc_msgSend(a1, "length")
      || !objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v8, 1), "isEqualToString:", CFSTR(".")))
    {
      return (uint64_t)a1;
    }
  }
  v9 = objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:", 0);
  if (v9 + v10 >= v5)
    return objc_msgSend(a1, "capitalizedStringWithLocale:", a2);
  else
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v9, v10), "capitalizedStringWithLocale:", a2), "stringByAppendingString:", objc_msgSend(a1, "substringFromIndex:", v9 + v10));
}

uint64_t __initialCapitalizedString_block_invoke()
{
  uint64_t result;

  initialCapitalizedString_internalCharacterSet = (uint64_t)(id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR(".@_"));
  result = objc_msgSend(objc_alloc(MEMORY[0x1E0C99E60]), "initWithArray:", &unk_1EA8E7240);
  initialCapitalizedString_prohibitedSet = result;
  return result;
}

uint64_t secondCapitalizedString(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (objc_msgSend(a1, "length")
    && (v4 = objc_msgSend(a1, "rangeOfComposedCharacterSequenceAtIndex:", 0),
        v6 = v5,
        v7 = v4 + v5,
        v4 + v5 < (unint64_t)objc_msgSend(a1, "length")))
  {
    return objc_msgSend((id)objc_msgSend(a1, "substringWithRange:", v4, v6), "stringByAppendingString:", initialCapitalizedString((void *)objc_msgSend(a1, "substringFromIndex:", v7), a2));
  }
  else
  {
    return (uint64_t)a1;
  }
}

uint64_t stringWithoutHamza(void *a1)
{
  uint64_t v2;

  if (stringWithoutHamza_onceToken != -1)
    dispatch_once(&stringWithoutHamza_onceToken, &__block_literal_global_94);
  objc_msgSend(a1, "rangeOfCharacterFromSet:", stringWithoutHamza_hamzaContainingCharacterSet);
  if (v2)
    return objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend((id)objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("أ"), CFSTR("ا")), "stringByReplacingOccurrencesOfString:withString:", CFSTR("ؤ"), CFSTR("و")), "stringByReplacingOccurrencesOfString:withString:", CFSTR("إ"), CFSTR("ا")), "stringByReplacingOccurrencesOfString:withString:", CFSTR("ئ"),
                                     CFSTR("ي")),
                               "stringByReplacingOccurrencesOfString:withString:",
                               CFSTR("أ"),
                               CFSTR("ا")),
                         "stringByReplacingOccurrencesOfString:withString:",
                         CFSTR("ؤ"),
                         CFSTR("و")),
                   "stringByReplacingOccurrencesOfString:withString:",
                   CFSTR("إ"),
                   CFSTR("ا")),
             "stringByReplacingOccurrencesOfString:withString:",
             CFSTR("ئ"),
             CFSTR("ي"));
  else
    return (uint64_t)a1;
}

id __stringWithoutHamza_block_invoke()
{
  id result;

  result = (id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("أؤإئٕٔ"));
  stringWithoutHamza_hamzaContainingCharacterSet = (uint64_t)result;
  return result;
}

uint64_t acceptAsCompletion(void *a1, uint64_t a2, void *a3)
{
  uint64_t result;
  char v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  if ((objc_msgSend(a1, "hasPrefix:", a2) & 1) != 0)
    return 1;
  v7 = objc_msgSend(a3, "isHindi");
  v8 = objc_msgSend(a3, "isArabic");
  if ((v7 & 1) != 0)
  {
    v9 = a1;
    v10 = a2;
    v11 = 9;
LABEL_8:
    objc_msgSend(v9, "rangeOfString:options:", v10, v11);
    return v14 != 0;
  }
  v12 = v8;
  objc_msgSend(a1, "rangeOfString:options:", a2, 137);
  result = v13 != 0;
  if (!v13 && ((v12 ^ 1) & 1) == 0)
  {
    v9 = (void *)stringWithoutHamza(a1);
    v10 = a2;
    v11 = 137;
    goto LABEL_8;
  }
  return result;
}

uint64_t treatWordAsSentenceInitial(void *a1, unint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  unint64_t v22;
  int v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;

  v10 = objc_msgSend(a1, "length");
  if (treatWordAsSentenceInitial_onceToken != -1)
    dispatch_once(&treatWordAsSentenceInitial_onceToken, &__block_literal_global_119);
  if (a3 > a2)
  {
    v11 = objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_nonSentenceTrailingCharacterSet, 0, a2, a3 - a2);
    v13 = v12;
    v14 = objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_nonSentenceLeadingCharacterSet, 4, a2, a3 - a2);
    v16 = v14 + v15 - a2;
    if (v14 + v15 < a2)
      v16 = 0;
    if (!v15)
      v16 = 0;
    v17 = v16 + a2;
    if (!v13 || (v19 = v17 - v11, v18 = v17 == v11, v17 < v11) || (v17 = v11, v18))
    {
      if (v17 != a2)
        return 0;
    }
    else
    {
      objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_nonSpaceCharacterSet, 0, v11, v19);
      v27 = v26 == 0;
      if (v26)
        v28 = 0;
      else
        v28 = v11 == a2 + 2;
      if (v28)
      {
        objc_msgSend(a1, "rangeOfString:options:range:", CFSTR(".."), 0, a2, 2);
        v27 = v29 == 0;
      }
      if (v27 && v11 == a2 + 3)
      {
        objc_msgSend(a1, "rangeOfString:options:range:", CFSTR("..."), 0, a2, 3);
        if (v31)
          return 0;
      }
      else if (!v27)
      {
        return 0;
      }
    }
  }
  if (v10 <= a3 + a4)
  {
    v21 = 1;
  }
  else
  {
    objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_followingCharacterSet, 8, a3 + a4, v10 - (a3 + a4));
    v21 = v20 == 0;
    if (v20)
      goto LABEL_22;
  }
  if (a4 != 1 || (v22 = a3 + 1, v22 >= v10))
  {
LABEL_22:
    if (v21)
      goto LABEL_23;
    return 0;
  }
  if (objc_msgSend(a1, "characterAtIndex:", v22) == 46
    || objc_msgSend(a1, "characterAtIndex:", v22) == 41)
  {
    return 0;
  }
LABEL_23:
  v23 = objc_msgSend(a5, "usesOrdinalPeriod");
  result = 1;
  if (a2 && v23 && v10 > a2)
  {
    if (objc_msgSend(a1, "characterAtIndex:", a2) == 46)
    {
      objc_msgSend(a1, "rangeOfCharacterFromSet:options:range:", treatWordAsSentenceInitial_decimalDigitCharacterSet, 12, 0, a2);
      return !v25 && v21;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

id __treatWordAsSentenceInitial_block_invoke()
{
  id result;

  treatWordAsSentenceInitial_nonSentenceTrailingCharacterSet = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR(".!?։۔।።᙮‼‽⁈⁉。！．？｡'\"‘’“”»«")), "invertedSet");
  treatWordAsSentenceInitial_nonSentenceLeadingCharacterSet = (uint64_t)objc_retain((id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("¡¿'\"‘’“”„»«(")), "invertedSet"));
  treatWordAsSentenceInitial_nonSpaceCharacterSet = (uint64_t)(id)objc_msgSend((id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("  ")), "invertedSet");
  treatWordAsSentenceInitial_followingCharacterSet = (uint64_t)objc_retain((id)objc_msgSend(MEMORY[0x1E0CB3500], "characterSetWithCharactersInString:", CFSTR("@#$%^&*_=+([]\\|>")));
  result = (id)objc_msgSend(MEMORY[0x1E0CB3500], "decimalDigitCharacterSet");
  treatWordAsSentenceInitial_decimalDigitCharacterSet = (uint64_t)result;
  return result;
}

unint64_t minutesAgo(double a1, double a2)
{
  if (a1 >= a2)
    return 0;
  else
    return vcvtmd_u64_f64((a2 - a1) / 60.0);
}

uint64_t _matchingRangeForCompletion(void *a1, void *a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  BOOL v6;

  v3 = objc_msgSend(a1, "stringByReplacingOccurrencesOfString:withString:", CFSTR("<E2><80><99>"), CFSTR("'"));
  v4 = (void *)objc_msgSend(a2, "stringByReplacingOccurrencesOfString:withString:", CFSTR("<E2><80><99>"), CFSTR("'"));
  if (objc_msgSend(v4, "rangeOfString:options:", v3, 137))
    v6 = 1;
  else
    v6 = v5 == 0;
  if (v6 || v5 >= objc_msgSend(v4, "length"))
    return 0x7FFFFFFFFFFFFFFFLL;
  else
    return 0;
}

uint64_t _NSPathForSystemFramework(uint64_t a1)
{
  void *v2;
  NSArray *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 8uLL, 1);
  v4 = -[NSArray count](v3, "count");
  if (!v4)
    return 0;
  v5 = v4;
  v6 = 0;
  while (1)
  {
    v7 = -[NSArray objectAtIndex:](v3, "objectAtIndex:", v6);
    v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Frameworks")), "stringByAppendingPathComponent:", a1);
    if ((objc_msgSend(v2, "fileExistsAtPath:", v8) & 1) != 0)
      break;
    v8 = objc_msgSend((id)objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("PrivateFrameworks")), "stringByAppendingPathComponent:", a1);
    if (objc_msgSend(v2, "fileExistsAtPath:", v8))
      break;
    if (v5 == ++v6)
      return 0;
  }
  return v8;
}

void sub_1DE255B68(_Unwind_Exception *a1)
{
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x400], 8);
  _Block_object_dispose(&STACK[0x420], 8);
  _Block_object_dispose(&STACK[0x450], 8);
  _Block_object_dispose(&STACK[0x480], 8);
  _Block_object_dispose(&STACK[0x4B0], 8);
  _Block_object_dispose(&STACK[0x4E0], 8);
  _Block_object_dispose(&STACK[0x510], 8);
  _Unwind_Resume(a1);
}

void _addEmojiForStringToArray(uint64_t a1, void *a2, void *a3, char a4, int a5)
{
  _BOOL4 EmojiKit;
  const void *Value;
  const void *v12;
  uint64_t v13;
  __CFDictionary *v14;
  const void *v15;
  const void *v16;
  uint64_t v17;
  const void *v18;
  const __CFArray *EmojiTokensForString;
  CFIndex Count;
  CFIndex v21;
  CFIndex i;
  uint64_t (*v23)(const void *);
  const void *ValueAtIndex;
  uint64_t v25;
  uint64_t (*v26)(const void *, _QWORD);
  const void *v27;
  const __CFArray *v28;
  const __CFArray *v29;
  CFIndex v30;
  CFIndex v31;
  CFIndex j;
  uint64_t (*v33)(const void *);
  const void *v34;
  uint64_t v35;

  if (_addEmojiForStringToArray_onceToken == -1)
  {
    if (!a5)
      goto LABEL_4;
  }
  else
  {
    dispatch_once(&_addEmojiForStringToArray_onceToken, &__block_literal_global_357);
    if (!a5)
      goto LABEL_4;
  }
  if ((objc_msgSend(a2, "isPortuguese") & 1) != 0)
    return;
LABEL_4:
  EmojiKit = _loadEmojiKit();
  if (a2)
  {
    if (EmojiKit)
    {
      if (_addEmojiForStringToArray_emojiDatasByLanguage)
      {
        Value = CFDictionaryGetValue((CFDictionaryRef)_addEmojiForStringToArray_emojiDatasByLanguage, (const void *)objc_msgSend(a2, "identifier"));
        v12 = (const void *)*MEMORY[0x1E0C9B0D0];
        if (Value != (const void *)*MEMORY[0x1E0C9B0D0])
        {
          v13 = (uint64_t)Value;
          if (Value
            || ((v13 = ((uint64_t (*)(uint64_t))_CEMCreateEmojiLocaleData)(objc_msgSend(a2, "identifier")),
                 v14 = (__CFDictionary *)_addEmojiForStringToArray_emojiDatasByLanguage,
                 v15 = (const void *)objc_msgSend(a2, "identifier"),
                 v13)
              ? (v16 = (const void *)v13)
              : (v16 = v12),
                CFDictionarySetValue(v14, v15, v16),
                v13))
          {
            if (_CEMStringIsSingleEmoji(a1))
            {
              v17 = _CEMEmojiTokenCreateWithString(a1, v13);
              if (!v17)
                return;
              v18 = (const void *)v17;
              EmojiTokensForString = (const __CFArray *)_CEMEmojiTokenCopyRelatedEmoji(v17, 0);
              CFRelease(v18);
              if (!EmojiTokensForString)
                return;
            }
            else
            {
              if ((a4 & 1) != 0)
                return;
              EmojiTokensForString = (const __CFArray *)_CEMEmojiLocaleDataCreateEmojiTokensForString(v13, a1, 0, 17, 1, 0);
              if (!EmojiTokensForString)
                return;
            }
            Count = CFArrayGetCount(EmojiTokensForString);
            if (Count >= 1)
            {
              v21 = Count;
              for (i = 0; i != v21; ++i)
              {
                v23 = (uint64_t (*)(const void *))_CEMEmojiTokenGetString;
                ValueAtIndex = CFArrayGetValueAtIndex(EmojiTokensForString, i);
                v25 = v23(ValueAtIndex);
                if ((objc_msgSend(a3, "containsObject:", v25) & 1) == 0)
                  objc_msgSend(a3, "addObject:", v25);
              }
              if (v21 == 1)
              {
                v26 = (uint64_t (*)(const void *, _QWORD))_CEMEmojiTokenCopyRelatedEmoji;
                v27 = CFArrayGetValueAtIndex(EmojiTokensForString, 0);
                v28 = (const __CFArray *)v26(v27, 0);
                if (v28)
                {
                  v29 = v28;
                  v30 = CFArrayGetCount(v28);
                  if (v30 >= 1)
                  {
                    v31 = v30;
                    for (j = 0; j != v31; ++j)
                    {
                      v33 = (uint64_t (*)(const void *))_CEMEmojiTokenGetString;
                      v34 = CFArrayGetValueAtIndex(v29, j);
                      v35 = v33(v34);
                      if ((objc_msgSend(a3, "containsObject:", v35) & 1) == 0)
                        objc_msgSend(a3, "addObject:", v35);
                    }
                  }
                  CFRelease(v29);
                }
              }
            }
            CFRelease(EmojiTokensForString);
          }
        }
      }
    }
  }
}

BOOL _loadEmojiKit()
{
  BOOL v0;

  if (_loadEmojiKit_onceToken != -1)
    dispatch_once(&_loadEmojiKit_onceToken, &__block_literal_global_286);
  if (_CEMStringIsSingleEmoji)
    v0 = _CEMEmojiTokenCreateWithString == 0;
  else
    v0 = 1;
  return !v0
      && _CEMEmojiTokenGetString != 0
      && _CEMEmojiTokenCopyRelatedEmoji != 0
      && _CEMCreateEmojiLocaleData != 0
      && _CEMEmojiLocaleDataCreateEmojiTokensForString != 0
      && _CEMEmojiTokenGetSkinTone != 0;
}

void ___loadEmojiKit_block_invoke()
{
  void *v0;
  void *v1;
  void *v2;

  v0 = (void *)objc_msgSend((id)objc_msgSend((id)_NSPathForSystemFramework((uint64_t)CFSTR("CoreEmoji.framework")), "stringByAppendingString:", CFSTR("/Versions/A")), "stringByAppendingPathComponent:", CFSTR("CoreEmoji"));
  if (v0)
  {
    v1 = dlopen((const char *)objc_msgSend(v0, "fileSystemRepresentation"), 256);
    v2 = v1;
    if (v1)
    {
      _CEMStringIsSingleEmoji = (uint64_t (*)(_QWORD))dlsym(v1, "CEMStringIsSingleEmoji");
      _CEMEmojiTokenCreateWithString = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "CEMEmojiTokenCreateWithString");
      _CEMEmojiTokenGetString = dlsym(v2, "CEMEmojiTokenGetString");
      _CEMEmojiTokenCopyRelatedEmoji = (uint64_t (*)(_QWORD, _QWORD))dlsym(v2, "CEMEmojiTokenCopyRelatedEmoji");
      _CEMCreateEmojiLocaleData = dlsym(v2, "CEMCreateEmojiLocaleData");
      _CEMEmojiLocaleDataCreateEmojiTokensForString = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v2, "CEMEmojiLocaleDataCreateEmojiTokensForString");
      _CEMEmojiTokenGetSkinTone = (uint64_t (*)(void))dlsym(v2, "CEMEmojiTokenGetSkinTone");
    }
  }
  else
  {
    v2 = 0;
  }
  if (!_CEMStringIsSingleEmoji
    || !_CEMEmojiTokenCreateWithString
    || !_CEMEmojiTokenGetString
    || !_CEMEmojiTokenCopyRelatedEmoji
    || !_CEMCreateEmojiLocaleData
    || !_CEMEmojiLocaleDataCreateEmojiTokensForString
    || !_CEMEmojiTokenGetSkinTone)
  {
    NSLog((NSString *)CFSTR("Failed to load CoreEmoji, handle %p results %p %p %p %p %p %p %p"), v2, _CEMStringIsSingleEmoji, _CEMEmojiTokenCreateWithString, _CEMEmojiTokenGetString, _CEMEmojiTokenCopyRelatedEmoji, _CEMCreateEmojiLocaleData, _CEMEmojiLocaleDataCreateEmojiTokensForString, _CEMEmojiTokenGetSkinTone);
  }
}

CFMutableDictionaryRef ___addEmojiForStringToArray_block_invoke()
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9AEB8], MEMORY[0x1E0C9B3A0]);
  _addEmojiForStringToArray_emojiDatasByLanguage = (uint64_t)result;
  return result;
}

uint64_t ICcmphhy(uint64_t a1)
{
  __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  __int16 v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  _QWORD *v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  const char *v41;
  size_t v42;
  size_t v43;
  unsigned int v44;
  int v45;
  size_t v46;
  uint64_t v47;
  size_t v48;
  size_t v49;
  int v50;
  size_t v51;
  size_t v52;
  size_t v53;
  size_t v54;
  size_t v55;
  size_t v56;
  __int16 v57;
  __int16 v58;
  size_t v59;
  size_t v60;
  __int16 v61;
  __int16 v62;
  int v63;
  char *__dst;
  __int16 *v66;
  char *v67;
  __int16 v68;
  unsigned int v69;
  unsigned __int16 v70;
  uint64_t v71;
  int v72;
  _BYTE v73[6];
  uint64_t v74;
  _QWORD v75[6];
  int v76[3];
  unsigned __int8 v77[65];
  char __src[65];
  char __s[65];
  char v80[65];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v2 = *(__int16 **)(a1 + 3184);
  v3 = *((_QWORD *)v2 + 35);
  v4 = *((_QWORD *)v2 + 33);
  v5 = *(_QWORD *)(*((_QWORD *)v2 + 31) + 56);
  v75[0] = 0;
  v75[1] = 0;
  v6 = (char *)(a1 + 1547);
  v7 = *(unsigned __int8 *)(a1 + 1547);
  if (v7 == 45)
  {
    v8 = 0;
    v9 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      __src[v10] = v7;
      v9 = v10 + 1;
      if (v10 > 0x3E)
        break;
      v7 = *(unsigned __int8 *)(a1 + 1548 + v10++);
    }
    while (v7 != 45);
    v8 = v9;
  }
  v66 = v2;
  *(_QWORD *)v76 = 0;
  v74 = 0;
  __src[v9] = 0;
  v70 = v8 + 1;
  v11 = strlen((const char *)(a1 + (unsigned __int16)(v8 + 1) + 1547));
  if (v11 >= 0x40)
    v12 = 64;
  else
    v12 = v11;
  if (v12)
    __strncpy_chk();
  __s[v12] = 0;
  v13 = *(unsigned __int8 *)(v4 + 88);
  *(_QWORD *)v76 = *(_QWORD *)(v4 + 92);
  v14 = strlen(v6);
  if (v14 >= 0x40)
    v15 = 64;
  else
    v15 = v14;
  v69 = v13;
  v16 = v13;
  if (v15)
  {
    __strncpy_chk();
    v16 = *(unsigned __int8 *)(v4 + 88);
  }
  v77[v15] = 0;
  if (v16)
  {
    if (*(__int16 *)(a1 + 1612) >= 64)
      v17 = 64;
    else
      v17 = *(__int16 *)(a1 + 1612);
    SLrecap(v77, v17, v16, v4 + 92, v16, v5);
  }
  v68 = v8;
  *(_BYTE *)(v4 + 88) = SLcap((uint64_t)v77, 0, v8, (_QWORD *)(v4 + 92), v5);
  if ((*(_BYTE *)(a1 + 8) != 6 || (*(_BYTE *)(a1 + 20) & 0x10) != 0) && SLisint(__src, v5))
  {
    v72 = 1;
    *(_WORD *)(v4 + 102) = 1;
    **(_BYTE **)(v4 + 72) = 5;
    **(_QWORD **)(v4 + 80) = 0;
    v18 = v66;
LABEL_28:
    if (*(__int16 *)(v4 + 102) >= 1)
    {
      v20 = *(unsigned __int16 *)(v4 + 102);
      v21 = *(char **)(v4 + 72);
      v22 = *(uint64_t **)(v4 + 80);
      v23 = v75;
      v24 = v73;
      v71 = v20;
      do
      {
        v25 = *v21++;
        *v24++ = v25;
        v26 = *v22++;
        *v23++ = v26;
        --v20;
      }
      while (v20);
      v27 = 0;
      v28 = v70 >> 5;
      v29 = 1 << ~(_BYTE)v70;
      __dst = (char *)(v3 + 1607);
      LOWORD(v30) = -1;
      v67 = v6;
      while (1)
      {
        v31 = v73[v27];
        if (v31 != 2
          && (v31 != 3 || *(_BYTE *)(a1 + 8) != 11)
          && (((*(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * v27) & 0x400) == 0) & ~v72) != 0)
        {
          break;
        }
        *(_BYTE *)(v3 + 1504) = v31;
        v32 = strlen(__s);
        v33 = ICverify(__s, v32, a1);
        v34 = v72 ^ 1;
        if (v33 != 10)
          v34 = 1;
        if ((v34 & 1) != 0)
        {
          if (v33 != 10)
            break;
        }
        else
        {
          v35 = *(__int16 *)(v4 + 102);
          if ((int)v35 < 1)
          {
            LODWORD(v36) = 0;
          }
          else
          {
            v36 = 0;
            while ((*(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * v36) & 0x10) == 0)
            {
              if (v35 == ++v36)
                goto LABEL_64;
            }
            *(_WORD *)(v4 + 102) = 1;
            **(_BYTE **)(v4 + 72) = *(_BYTE *)(*(_QWORD *)(v4 + 72) + v36);
            **(_QWORD **)(v4 + 80) = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v36);
            **(_WORD **)(v4 + 3520) = *(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * v36);
          }
          if ((_DWORD)v36 == (_DWORD)v35)
            break;
        }
        v37 = *(__int16 *)(v4 + 102);
        *(_DWORD *)(v3 + 1596) = *(_DWORD *)(v4 + 3480);
        *(_DWORD *)(v4 + 3480) = 0;
        *(_WORD *)(v3 + 1500) = v68;
        *(_WORD *)(v3 + 1502) = v70;
        if (v37 < 1)
        {
          if ((_WORD)v30 == 0xFFFF)
          {
            v19 = 11;
            LOWORD(v30) = -1;
            goto LABEL_82;
          }
        }
        else
        {
          v38 = 0;
          while (1)
          {
            v39 = *(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * v38);
            if ((v39 & 0x18) != 0 && (*(_BYTE *)(a1 + 8) != 6 || (v76[v28] & v29) != 0))
              break;
            if ((v39 & 2) != 0 && (v76[v28] & v29) == 0)
              break;
            if ((unsigned __int16)v37 == ++v38)
              goto LABEL_59;
          }
          LOWORD(v30) = v38;
LABEL_59:
          if ((_WORD)v30 == 0xFFFF)
          {
            LOWORD(v30) = 0;
            while ((*(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * (unsigned __int16)v30) & 0x1A) == 0)
            {
              v30 = (__int16)(v30 + 1);
              if (v30 >= (__int16)v37)
              {
                LOWORD(v30) = -1;
                goto LABEL_64;
              }
            }
          }
        }
        *(_BYTE *)(v3 + 1592) = *(_BYTE *)(*(_QWORD *)(v4 + 72) + (__int16)v30);
        v74 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * (__int16)v30);
        if (*(_DWORD *)(a1 + 1308))
        {
          v40 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 216);
          if (*(_BYTE *)(v40 + 747))
          {
            v41 = (const char *)(v40 + 680);
            v42 = strlen((const char *)(v40 + 680));
            if (v42 >= 0x40)
              v43 = 64;
            else
              v43 = v42;
            if (v43)
              strncpy(__dst, v41, v43);
            __dst[v43] = 0;
            *(_DWORD *)(v3 + 1600) = *(_DWORD *)(a1 + 3156);
            v18 = v66;
          }
        }
        *(_BYTE *)(v3 + 1606) = *(_BYTE *)(*(_QWORD *)(v4 + 3496) + (__int16)v30);
        *(_WORD *)(v3 + 1604) = *(_WORD *)(*(_QWORD *)(v4 + 3520) + 2 * (__int16)v30);
        v44 = *(unsigned __int8 *)(v3 + 1504);
        if ((v44 | 4) == 4)
        {
          v44 = ICEndToken(a1);
          v6 = v67;
          if (v44 == 1)
          {
            *(_BYTE *)(v3 + 1504) = 1;
            *(_DWORD *)(v3 + 1508) |= 0x80000000;
            if ((v76[0] & 0x80000000) == 0)
            {
              *(_WORD *)(a1 + 1322) |= 0x800u;
              v44 = 1;
            }
          }
          else
          {
            v44 = *(unsigned __int8 *)(v3 + 1504);
          }
        }
        else
        {
          v6 = v67;
        }
        **(_BYTE **)(v4 + 72) = ICcomcap(v44, &v75[v27], (__int16)v70, *(unsigned __int8 *)(v3 + 1592), &v74, *(_QWORD *)(v4 + 80), 0);
        v45 = SLchk((unsigned __int8 *)v6, *(__int16 *)(a1 + 1612), v69, v76, **(unsigned __int8 **)(v4 + 72), *(_DWORD **)(v4 + 80));
        *(_WORD *)(v4 + 102) = 1;
        *(_WORD *)(v4 + 18) = 0;
        *v18 |= 8u;
        if (!v45)
          goto LABEL_100;
        v19 = 10;
LABEL_82:
        if (++v27 == v71)
          goto LABEL_85;
      }
LABEL_64:
      v19 = 11;
      goto LABEL_82;
    }
LABEL_100:
    *(_BYTE *)(v4 + 88) = v69;
    *(_QWORD *)(v4 + 92) = *(_QWORD *)v76;
    v19 = 10;
    goto LABEL_147;
  }
  v19 = ICverify(__src, v8, a1);
  v18 = v66;
  if ((_DWORD)v19 == 10)
  {
    v72 = 0;
    goto LABEL_28;
  }
LABEL_85:
  *(_BYTE *)(v4 + 88) = v69;
  *(_QWORD *)(v4 + 92) = *(_QWORD *)v76;
  if ((_DWORD)v19 == 11)
  {
    v46 = strlen(v6);
    if (v46 >= 0x40)
      v47 = 64;
    else
      v47 = v46;
    if (v47)
      __strncpy_chk();
    v80[v47] = 0;
    --*(_WORD *)(a1 + 1612);
    __strlcat_chk();
    v48 = strlen(__src);
    if (v48 >= 0x40)
      v49 = 64;
    else
      v49 = v48;
    if (v49)
      strncpy(v6, __src, v49);
    *(_BYTE *)(a1 + v49 + 1547) = 0;
    *(_QWORD *)(v3 + 1516) = 0;
    *(_QWORD *)(v4 + 3480) = 0;
    v50 = ICcmp(a1);
    if (v50 == 11)
    {
      if (*(_BYTE *)(a1 + 8) != 6 || (*(_BYTE *)(a1 + 20) & 0x20) == 0)
      {
        v50 = 11;
        goto LABEL_106;
      }
      v50 = ICcmpnum(v6, *(unsigned __int8 *)(a1 + 1612), a1);
      if (v50 == 10)
      {
        *(_QWORD *)(a1 + 1328) |= 0x400000uLL;
        *(_DWORD *)(v3 + 1738) = *(_DWORD *)(v3 + 1500);
        goto LABEL_106;
      }
    }
    if (v50 == 2)
    {
      if (*(__int16 *)(v3 + 1742) < 0)
      {
        SFadd(v6, *(__int16 *)(a1 + 1612), (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
        v55 = strlen(v80);
        if (v55 >= 0x40)
          v56 = 64;
        else
          v56 = v55;
        if (v56)
          strncpy(v6, v80, v56);
        *(_BYTE *)(a1 + v56 + 1547) = 0;
        v57 = *(_WORD *)(a1 + 1322);
        *(_WORD *)(a1 + 1322) = v57 | 0x40;
        if ((*(_BYTE *)(v3 + 1743) & 0x20) != 0)
          *(_WORD *)(a1 + 1322) = v57 | 0x42;
        *(_WORD *)(a1 + 1612) = strlen(v6);
        goto LABEL_132;
      }
      v50 = 2;
    }
LABEL_106:
    v51 = strlen(v80);
    if (v51 >= 0x40)
      v52 = 64;
    else
      v52 = v51;
    if (v52)
      strncpy(v6, v80, v52);
    *(_BYTE *)(a1 + v52 + 1547) = 0;
    *(_WORD *)(a1 + 1612) = strlen(v6);
    if (v50 == 10)
    {
      v53 = strlen(__src);
      if (v53 >= 0x40)
        v54 = 64;
      else
        v54 = v53;
      if (v54)
        strncpy((char *)(v3 + 1672), __src, v54);
      *(_BYTE *)(v3 + 1672 + v54) = 0;
      if ((*(_WORD *)(v4 + 3492) & 0x40) == 0
        && (*(_WORD *)(v3 + 1524) & 0x40) == 0
        && (*(_WORD *)(v3 + 1604) & 0x40) == 0)
      {
        SFadd((char *)(v3 + 1672), *(__int16 *)(a1 + 1612), (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
      }
      *v18 |= 8u;
      goto LABEL_143;
    }
    if (v50 == 11)
    {
      *(_QWORD *)(v4 + 3480) = 0;
      return 11;
    }
LABEL_132:
    if (*(_BYTE *)(a1 + 8) == 6 && (*(_WORD *)(v3 + 1742) & 2) != 0)
      return 11;
    if ((*(_WORD *)(a1 + 1322) & 0x40) != 0)
    {
      v59 = strlen((const char *)(v3 + 1672));
      if (v59 >= 0x40)
        v60 = 64;
      else
        v60 = v59;
      if (v60)
        strncpy((char *)(a1 + 3090), (const char *)(v3 + 1672), v60);
      *(_BYTE *)(a1 + 3090 + v60) = 0;
    }
    else
    {
      v58 = strlen((const char *)(v3 + 1672));
      SFadd((char *)(v3 + 1672), v58, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
    }
LABEL_143:
    v61 = *(_WORD *)(v3 + 1742);
    *(_QWORD *)(a1 + 1328) |= 0x200uLL;
    v62 = *v18;
    *v18 |= 4u;
    if (!*(_WORD *)(v3 + 1740))
      *(_DWORD *)(v3 + 1738) = *(_DWORD *)(v3 + 1500);
    *(_WORD *)(v3 + 1742) = v61 & 0xFDEF | 0x10;
    if ((v61 & 0x100) != 0)
    {
      *v18 = v62 | 0xC;
      return 2;
    }
    v19 = 2;
  }
LABEL_147:
  v63 = *(unsigned __int16 *)(v3 + 1738);
  if (v63 == *(unsigned __int16 *)(v3 + 1740) || !*(_BYTE *)(v3 + 1526))
    *(_BYTE *)(v3 + 1526) = 0;
  else
    ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), v63);
  return v19;
}

uint64_t ICcmphyp(char *__s, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned int v15;
  unsigned __int16 v16;
  uint64_t v17;
  _QWORD v19[2];

  v19[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 3184);
  if ((*(_WORD *)v2 & 0xC) != 0)
  {
    v5 = *(_QWORD *)(v2 + 280);
    v6 = *(_WORD *)(v5 + 1742);
    if ((v6 & 0x1000) != 0 || (v7 = *(unsigned __int16 *)(v5 + 1740), !*(_WORD *)(v5 + 1740)))
      v7 = *(unsigned __int16 *)(v5 + 1502);
    v8 = *(_QWORD *)(*(_QWORD *)(v2 + 248) + 56);
    v19[0] = 0;
    if (*(_DWORD *)(v5 + 1516))
    {
      if ((*(_WORD *)(v5 + 1524) & 0x40) == 0)
      {
        v9 = *(unsigned __int16 *)(v5 + 1500);
        if (*(_WORD *)(v5 + 1500))
        {
          v10 = 0;
          do
          {
            v11 = v10 >> 5;
            v12 = 1 << ~(_BYTE)v10;
            if ((*(_DWORD *)(v5 + 1516 + 4 * v11) & v12) != 0)
              *((_DWORD *)v19 + v11) |= v12;
            ++v10;
          }
          while (v9 != v10);
        }
      }
    }
    if (*(_DWORD *)(v5 + 1596))
    {
      if ((*(_WORD *)(v5 + 1604) & 0x40) == 0)
      {
        v13 = (unsigned __int16)strlen(__s);
        if (v13 > v7)
        {
          v14 = 0;
          v15 = v7;
          do
          {
            if (((*(_DWORD *)(v5 + 1596 + 4 * (v14 >> 5)) >> ~(_BYTE)v14) & 1) != 0)
              *((_DWORD *)v19 + (v15 >> 5)) |= 1 << ~(_BYTE)v15;
            ++v14;
            ++v15;
          }
          while (v13 > (unsigned __int16)v15);
        }
      }
    }
    v16 = 0;
    if ((v6 & 0x400) == 0)
    {
      if (v7)
      {
        v16 = *(_WORD *)(v5 + 1500);
        if (v16)
        {
          v16 = 0;
          if ((v6 & 0x7080) == 0)
          {
            v17 = (__int16)v7 - 1;
            if (__s[v17] != 45)
            {
              *((_DWORD *)v19 + ((unsigned __int16)v17 >> 5)) |= 1 << ~(_BYTE)v17;
              v16 = v7 - 1;
            }
          }
        }
      }
    }
    if (*(_BYTE *)(a2 + 8) == 6 && (*(_DWORD *)(v8 + 4 * __s[(__int16)v16]) & 0x8000000) != 0)
      *((_DWORD *)v19 + (v16 >> 5)) &= ~(1 << ~(_BYTE)v16);
    if ((~*(unsigned __int16 *)(a2 + 1322) & 0x42) != 0)
      *(_QWORD *)(*(_QWORD *)(v2 + 264) + 3480) = v19[0];
    else
      *(_QWORD *)(a2 + 3156) = v19[0];
  }
  return 0;
}

uint64_t ICcmplmc(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  unsigned __int16 v5;
  size_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _WORD *v34;
  _DWORD *v35;
  __int16 v36;
  uint64_t v37;
  size_t v38;
  size_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *__src;
  unint64_t v45;
  int v46;
  __int16 v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char __s[130];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 3184);
  v2 = *(_QWORD *)(v1 + 280);
  v42 = *(_QWORD *)(v1 + 264);
  v43 = v2;
  v49 = v1;
  v50 = *(_QWORD *)(v1 + 248);
  v3 = *(_WORD *)(v1 + 90);
  v4 = *(unsigned __int16 *)(v1 + 88);
  if (*(_WORD *)(v1 + 88))
    v5 = v4 - 1;
  else
    v5 = 0;
  *(_DWORD *)(v2 + 96) = 0;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  v6 = strlen((const char *)(a1 + 1547));
  if (v6 >= 0x40)
    v7 = 64;
  else
    v7 = v6;
  if (v7)
    __strncpy_chk();
  LOWORD(v8) = 0;
  LOWORD(v9) = 0;
  __s[v7 + 65] = 0;
  v10 = *(__int16 *)(a1 + 1612);
  if (v3 < v10)
    LOWORD(v10) = v3;
  if (v4 >= 2)
  {
    v11 = 0;
    LOWORD(v9) = 0;
    LOWORD(v8) = 0;
    do
    {
      if ((unsigned __int16)(((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v11 + 65]) <= 0x7FECu)
        LOWORD(v8) = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v11 + 65];
      else
        LOWORD(v8) = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v11 + 65] - 32749;
      LOWORD(v9) = v8 & 0x7FFF ^ v9;
      ++v11;
    }
    while (v11 < v5);
  }
  v12 = v42;
  v13 = 0;
  if (v5 < (unsigned __int16)v10)
  {
    v14 = v5;
    v41 = *(_BYTE *)(v42 + 88);
    v45 = (unsigned __int16)v10;
    v15 = v50;
    while (1)
    {
      if ((unsigned __int16)(((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v14 + 65]) <= 0x7FECu)
        v8 = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v14 + 65];
      else
        v8 = ((v8 & 0x7F) << 8) + 19 * ((unsigned __int16)v8 >> 7) + __s[v14 + 65] - 32749;
      v9 = ((unsigned __int16)v8 ^ (unsigned __int16)v9) & 0x7FFF;
      v16 = *(unsigned __int16 *)(v15 + 88);
      LOWORD(v17) = v9;
      if (v9 > (unsigned __int16)(v16 - 1))
        v17 = v9 % v16;
      v18 = 0;
      v19 = 3 - v8;
      while (*(unsigned __int8 *)(*(_QWORD *)(v15 + 96) + (unsigned __int16)v17) != v8)
      {
        if (*(_BYTE *)(*(_QWORD *)(v15 + 96) + (unsigned __int16)v17))
        {
          v19 += 2 * v8;
          LOWORD(v17) = v17 + v19;
          if ((unsigned __int16)v17 > (unsigned __int16)(v16 - 1))
            v17 = (unsigned __int16)v17 % v16;
          if (v18++ < 0x31)
            continue;
        }
        goto LABEL_60;
      }
      v21 = v13;
      v52 = v14;
      v22 = v14 + 1;
      __strncpy_chk();
      __s[v22] = 0;
      if (*(_BYTE *)(a1 + 8) == 6)
        *(_BYTE *)(v12 + 88) = 1;
      v48 = v22;
      v23 = ICverify(__s, (__int16)v22, a1);
      *(_BYTE *)(v12 + 88) = v41;
      if (v23 != 11)
        break;
      v15 = v50;
      v13 = v21;
      v14 = v52;
LABEL_60:
      if (++v14 >= v45)
      {
        if ((__int16)v13 >= 1 && !*(_WORD *)(v12 + 102))
          *(_WORD *)(v12 + 102) = 1;
        return (__int16)v13;
      }
    }
    v24 = a1;
    v25 = v43;
    v15 = v50;
    v13 = v21;
    v14 = v52;
    v26 = v22;
    if (*(_BYTE *)(a1 + 8) == 6 && (*(_WORD *)v49 & 0x20) != 0)
    {
      v27 = *(unsigned __int16 *)(v12 + 102);
      if (v27 != 1)
      {
LABEL_42:
        if ((__int16)v27 < 1)
          goto LABEL_60;
        v28 = 0;
        v29 = 0;
        while (1)
        {
          v30 = *(_QWORD *)(v12 + 3520);
          if ((*(_WORD *)(v30 + 2 * v29) & 0x1004) != 0)
            break;
LABEL_59:
          ++v29;
          v28 += 8;
          if (v29 >= (__int16)v27)
            goto LABEL_60;
        }
        v31 = v25 + 100 * (__int16)v13;
        *(_WORD *)(v31 + 66) = v26;
        *(_WORD *)(v31 + 68) = *(unsigned __int8 *)(*(_QWORD *)(v12 + 3528) + v29);
        v32 = *(_QWORD *)(v12 + 3536);
        v33 = (*(unsigned __int8 *)(v32 + v29) >> 7) ^ 1;
        *(_WORD *)(v31 + 70) = (*(unsigned __int8 *)(v32 + v29) >> 7) ^ 1;
        v34 = (_WORD *)(v31 + 70);
        *(_WORD *)(v31 + 72) = (*(_BYTE *)(v32 + v29) >> 2) & 0x1F;
        *(_WORD *)(v31 + 74) = *(_BYTE *)(v32 + v29) & 3;
        *(_BYTE *)(v31 + 76) = *(_BYTE *)(*(_QWORD *)(v12 + 72) + v29);
        v35 = (_DWORD *)(*(_QWORD *)(v12 + 80) + v28);
        *(_DWORD *)(v31 + 80) = *v35;
        *(_DWORD *)(v31 + 84) = v35[1];
        *(_WORD *)(v31 + 90) = 0;
        *(_BYTE *)(v31 + 65) = *(_BYTE *)(*(_QWORD *)(v12 + 3496) + v29);
        *(_DWORD *)(v31 + 92) = *(_DWORD *)(v12 + 3480);
        v36 = *(_WORD *)(v30 + 2 * v29);
        *(_WORD *)(v31 + 88) = v36;
        if (*(_DWORD *)(v24 + 1308))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v24 + 3184) + 216);
          if (!*(_BYTE *)(v37 + 747))
          {
            *(_WORD *)(v31 + 88) = v36 & 0xFFBF;
            if (v33)
            {
LABEL_54:
              if (!*(_BYTE *)(*(_QWORD *)(v49 + 104) + *(__int16 *)(v31 + 68)))
              {
                *v34 = 0;
                *(_WORD *)(v31 + 90) = 1;
              }
            }
LABEL_57:
            v13 = (__int16)(v13 + 1);
            if ((int)v13 > 15)
              return (__int16)v13;
            LOWORD(v27) = *(_WORD *)(v12 + 102);
            goto LABEL_59;
          }
          v46 = (__int16)v13;
          v47 = v13;
          __src = (char *)(v37 + 680);
          v38 = strlen((const char *)(v37 + 680));
          if (v38 >= 0x40)
            v39 = 64;
          else
            v39 = v38;
          if (v39)
          {
            strncpy((char *)v31, __src, v39);
            v33 = (unsigned __int16)*v34;
          }
          *(_BYTE *)(v31 + v39) = 0;
          v15 = v50;
          v24 = a1;
          v12 = v42;
          v25 = v43;
          LOWORD(v13) = v47;
          *(_DWORD *)(v43 + 100 * v46 + 96) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 216) + 16);
          v14 = v52;
          v26 = v48;
        }
        if (v33)
          goto LABEL_54;
        goto LABEL_57;
      }
      if ((**(_WORD **)(v12 + 3520) & 4) == 0)
      {
        ICget(__s, (__int16)v22, a1);
        v26 = v22;
        v24 = a1;
        v14 = v52;
        v13 = v21;
        v15 = v50;
        v25 = v43;
      }
    }
    LOWORD(v27) = *(_WORD *)(v12 + 102);
    goto LABEL_42;
  }
  return (__int16)v13;
}

uint64_t ICcmpmnd(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  uint64_t result;
  int v7;
  __int16 v8;
  __int16 v9;
  char __dst[65];
  char __src[65];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 264);
  if (*(_DWORD *)(a1 + 1308) && (*(_WORD *)(v2 + 3492) & 0x40) != 0)
    return 11;
  __strcpy_chk();
  v3 = **(_BYTE **)(v2 + 72);
  v4 = **(_QWORD **)(v2 + 80);
  v5 = *(_WORD *)(v2 + 18);
  result = ICcmpsmh(__src, __dst, v2 + 3480, v5 & 0x40, *(__int16 *)(a1 + 1612), a1);
  if ((_DWORD)result != 11)
  {
    v7 = result;
    __strcpy_chk();
    v8 = *(_WORD *)(a1 + 1322);
    if (v7 == 2)
    {
      v9 = v8 | 4;
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(v2 + 3480);
      *(_DWORD *)(a1 + 3160) = *(_DWORD *)(v2 + 3484);
      *(_QWORD *)(v2 + 3480) = 0;
    }
    else
    {
      v9 = v8 | 2;
    }
    *(_WORD *)(a1 + 1322) = v9 | 0x40;
    result = 10;
  }
  *(_WORD *)(v2 + 18) = v5;
  **(_BYTE **)(v2 + 72) = v3;
  **(_QWORD **)(v2 + 80) = v4;
  return result;
}

uint64_t isUpperCaseX(int a1, int a2)
{
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;

  if (a2 <= 1279)
  {
    if (a2 == 514)
    {
      v3 = a1 - 65;
      v4 = (0x3F80000000006F35uLL >> (a1 + 95)) & 1;
      if ((a1 - 161) >= 0x3E)
        LODWORD(v4) = 0;
      v5 = (a1 - 192) >= 0x17;
      goto LABEL_14;
    }
    if (a2 == 517)
    {
      v3 = a1 - 65;
      LODWORD(v4) = (a1 - 174) < 0x22;
      v5 = (a1 - 161) >= 0xC;
LABEL_14:
      if (!v5)
        LODWORD(v4) = 1;
      if (v3 >= 0x1A)
        return v4;
      else
        return 1;
    }
    return (a1 - 65) < 0x1A;
  }
  if (a2 != 1284 && a2 != 1280)
    return (a1 - 65) < 0x1A;
  v6 = a1 - 65;
  result = 1;
  if (v6 >= 0x1A && (a1 - 192) >= 0x17 && (a1 - 216) >= 7)
  {
    v8 = a1 - 138;
    if (v8 > 0x15 || ((1 << v8) & 0x200015) == 0)
      return 0;
  }
  return result;
}

uint64_t isAnyAlphaX(unsigned int a1, int a2)
{
  BOOL v3;
  char v4;
  BOOL v5;
  unsigned int v6;
  char v11;
  char v12;
  uint32x4_t v13;
  unsigned int v14;
  BOOL v16;
  char v17;
  BOOL v19;

  if (a2 > 1279)
  {
    if (a2 != 1284 && a2 != 1280)
      goto LABEL_45;
    v4 = 1;
    if (a1 - 216 >= 0x1F)
    {
      v5 = a1 == 138 || (a1 & 0xFFFFFFF8) == 248;
      v6 = a1 & 0xFFFFFFFD;
      v11 = v5 || v6 == 140 || a1 == 154 || v6 == 156 || a1 == 159;
      if ((a1 & 0xFFFFFFDF) - 65 >= 0x1A)
        v12 = v11;
      else
        v12 = 1;
      if (a1 - 192 >= 0x17)
        v4 = v12;
      else
        v4 = 1;
    }
  }
  else
  {
    if (a2 != 514)
    {
      if (a2 == 517)
      {
        v3 = a1 - 241 < 0xC || (a1 & 0xFFFFFFFE) == 254;
        v4 = (a1 & 0xFFFFFFDF) - 65 < 0x1A || v3;
        if (a1 - 161 < 0xC)
          v4 = 1;
        if (a1 - 174 < 0x42)
          v4 = 1;
        return v4 & 1;
      }
LABEL_45:
      v4 = (a1 & 0xFFFFFFDF) - 65 < 0x1A;
      return v4 & 1;
    }
    v4 = 1;
    if (a1 - 216 >= 0x1F && a1 - 192 >= 0x17 && (a1 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v13 = (uint32x4_t)vaddq_s32(vdupq_n_s32(a1), (int32x4_t)xmmword_1DE2EC990);
      v14 = a1 & 0xFFFFFFFE;
      v16 = (a1 & 0xFFFFFFF8) == 0xF8 || v14 == 174;
      v17 = vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vcgtq_u32((uint32x4_t)xmmword_1DE2EC9A0, v13))) | ((a1 & 0xFFFFFFFD) == 161);
      v19 = (a1 & 0xFFFFFFFD) == 0xB1 || v14 == 190;
      v4 = v17 | (v16 || v19);
    }
  }
  return v4 & 1;
}

uint64_t toLowerX(uint64_t result, int a2)
{
  if (a2 <= 1279)
  {
    if (a2 == 514)
    {
      if ((result - 65) >= 0x1A
        && (result - 192) >= 0x17
        && ((result - 161) > 0x3D || ((1 << (result + 95)) & 0x3F80000000006F35) == 0))
      {
        return result;
      }
      if ((result - 161) < 0xF && ((0x6F35u >> (result + 95)) & 1) != 0)
        return dword_1DE2EC9C8[(int)result - 161];
      return (result + 32);
    }
    if (a2 == 517)
    {
      if ((result - 65) >= 0x1A && (result - 176) > 0x1F)
      {
        if ((result & 0xFFFFFFFE) != 0xAE && (result - 161) >= 0xC)
          return result;
        else
          return (result + 80);
      }
      return (result + 32);
    }
LABEL_32:
    if ((result - 65) >= 0x1A)
      return result;
    else
      return (result + 32);
  }
  if (a2 != 1284)
  {
    if (a2 != 1280)
      goto LABEL_32;
    if ((result - 65) >= 0x1A && (result - 192) >= 0x17)
    {
      if ((result - 216) < 7)
        return (result + 32);
      goto LABEL_44;
    }
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
      return (result + 32);
LABEL_46:
    if ((_DWORD)result == 159)
      return 255;
    else
      return (result + 16);
  }
  if ((result - 65) < 0x1A || (result - 192) < 0x17)
  {
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
    {
      if ((_DWORD)result == 73)
        return 253;
      return (result + 32);
    }
    goto LABEL_46;
  }
  if ((int)result <= 215)
  {
LABEL_44:
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
      return result;
    goto LABEL_46;
  }
  if ((result - 216) < 5)
    return (result + 32);
  if ((_DWORD)result == 221)
    return 105;
  if ((_DWORD)result == 222)
    return (result + 32);
  return result;
}

uint64_t toUpperX(uint64_t result, int a2)
{
  unsigned int v3;

  if (a2 > 1279)
  {
    if (a2 == 1284)
    {
      if ((int)result > 247 || (result - 97) < 0x1A || (result - 223) < 0x18)
      {
        if ((int)result <= 157)
        {
          if ((_DWORD)result == 105)
            return 221;
          if ((_DWORD)result != 154 && (_DWORD)result != 156)
            return (result - 32);
        }
        else
        {
          if ((int)result > 252)
          {
            if ((_DWORD)result == 253)
              return 73;
            if ((_DWORD)result == 255)
              return 159;
            return (result - 32);
          }
          if ((_DWORD)result != 158)
          {
            if ((_DWORD)result == 223)
              return result;
            return (result - 32);
          }
        }
        return (result - 16);
      }
    }
    else
    {
      if (a2 != 1280)
        goto LABEL_39;
      if ((int)result > 247 || (result - 97) < 0x1A || (result - 223) < 0x18)
      {
        if ((result - 154) > 4 || ((1 << (result + 102)) & 0x15) == 0)
        {
          if ((_DWORD)result == 255)
            v3 = 159;
          else
            v3 = result - 32;
          if ((_DWORD)result == 223)
            return 223;
          else
            return v3;
        }
        return (result - 16);
      }
    }
    if ((result - 154) > 4 || ((1 << (result + 102)) & 0x15) == 0)
      return result;
    return (result - 16);
  }
  if (a2 != 514)
  {
    if (a2 == 517)
    {
      if ((result - 97) >= 0x1A && (result - 208) > 0x1F)
      {
        if ((result - 241) >= 0xC && (int)result <= 253)
          return result;
        else
          return (result - 80);
      }
      return (result - 32);
    }
LABEL_39:
    if ((result - 97) >= 0x1A)
      return result;
    else
      return (result - 32);
  }
  if ((result - 97) < 0x1A
    || (result - 223) < 0x18
    || (result - 177) <= 0xE && ((1 << (result + 79)) & 0x6F35) != 0
    || (result - 248) < 7)
  {
    if ((result - 177) < 0xF && ((0x6F35u >> (result + 79)) & 1) != 0)
      return dword_1DE2ECA04[(int)result - 177];
    return (result - 32);
  }
  return result;
}

void sub_1DE25A128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE25A73C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1DE25AAC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t correctionFlags(unsigned int a1, int a2, int a3, int a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 2;
  if (!a2)
    v5 = 0;
  v6 = v5 | a1;
  v7 = 4;
  if (!a3)
    v7 = 0;
  v8 = 8;
  if (!a4)
    v8 = 0;
  v9 = v6 | v7 | v8;
  v10 = 16;
  if (!a5)
    v10 = 0;
  return v9 | v10;
}

uint64_t removeDiacriticsX(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;

  if (a2 == 514)
  {
    if ((int)result < 161)
      return result;
    if ((result & 0xFFFFFFF8) == 0xF8
      || (result - 216) < 0x1F
      || (result - 192) < 0x17
      || (result & 0xFFFFFFDF) - 65 < 0x1A)
    {
      if ((_DWORD)result == 161)
        return 65;
    }
    else
    {
      if ((result - 161) > 0x1E)
        return result;
      if (((1 << (result + 95)) & 0x6F356F34) == 0)
      {
        if ((_DWORD)result == 161)
          return 65;
        return result;
      }
    }
    if (result < 0xA6)
      return 76;
    if (result < 0xAB)
      return 83;
    if ((_DWORD)result == 171)
      return 84;
    if (result < 0xB0)
      return 90;
    if ((_DWORD)result == 177)
      return 97;
    if (result < 0xB6)
      return 108;
    if (result < 0xBB)
      return 115;
    if ((_DWORD)result == 187)
      return 116;
    if (result < 0xC0)
      return 122;
    if ((_DWORD)result == 192)
      return 82;
    if (result < 0xC5)
      return 65;
    if ((_DWORD)result == 197)
      return 76;
    if (result >= 0xC9)
    {
      if (result < 0xCD)
        return 69;
      if (result < 0xCF)
        return 73;
      if ((_DWORD)result == 208)
        return 68;
      if (result < 0xD3)
        return 78;
      if (result < 0xD7)
        return 79;
      if ((_DWORD)result == 216)
        return 82;
      v3 = result - 221;
      if (result < 0xDD)
        return 85;
      if (v3 < 4)
        return dword_1DE2EC9B0[v3];
      if (result < 0xE5)
        return 65;
      if ((_DWORD)result == 229)
        return 76;
      if (result >= 0xE9)
      {
        if (result < 0xED)
          return 69;
        if (result < 0xEF)
          return 73;
        if ((_DWORD)result == 240)
          return 68;
        if (result < 0xF3)
          return 78;
        if (result >= 0xF7)
        {
          if ((_DWORD)result != 248)
          {
            if (result < 0xFD)
              return 85;
            if ((_DWORD)result == 254)
              v4 = 84;
            else
              v4 = 255;
            if ((_DWORD)result == 253)
              return 89;
            else
              return v4;
          }
          return 82;
        }
        return 79;
      }
    }
    return 67;
  }
  if (a2 != 1284 && a2 != 1280 || (int)result < 193)
    return result;
  if (result < 0xC6)
    return 65;
  if ((_DWORD)result == 199)
    return 67;
  v2 = result & 0x7FFFFFFC;
  if ((result & 0xFFFFFFFC) == 0xC8)
    return 69;
  if (v2 == 204)
    return 73;
  if ((result - 209) < 8 && ((0xBFu >> (result + 47)) & 1) != 0)
    return dword_1DE2ECA40[(int)result - 209];
  if ((result - 217) < 4)
    return 85;
  if ((_DWORD)result == 221)
    return 89;
  if ((result - 224) < 6)
    return 97;
  if ((_DWORD)result == 231)
    return 99;
  if (v2 == 232)
    return 101;
  if (v2 == 236)
    return 105;
  if ((result - 241) < 8 && ((0xBFu >> (result + 15)) & 1) != 0)
    return dword_1DE2ECA60[(int)result - 241];
  if ((result - 249) < 4)
    return 117;
  if ((result & 0xFFFFFFFD) == 0xFD)
    return 121;
  return result;
}

uint64_t ICcmpnum(char *__s, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  size_t v12;
  size_t v13;
  int v14;
  size_t v15;
  size_t v16;
  unsigned __int8 v17;
  int v18;
  _WORD *v19;
  uint64_t v20;
  char *v22;
  size_t v23;
  size_t v24;
  _QWORD *v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  _QWORD *v28;
  unsigned __int8 v29;
  __int16 v30;
  char __sa[65];
  _QWORD v32[2];

  v32[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 3184);
  v7 = *(_QWORD *)(v6 + 264);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 56);
  v30 = 45;
  if (__s)
  {
    v9 = strlen(__s);
    if (v9 >= 0x40)
      v10 = 64;
    else
      v10 = v9;
    if (v10)
      __strncpy_chk();
    __sa[v10] = 0;
  }
  if (!a2)
    return 11;
  v11 = 0;
  while ((*(_DWORD *)(v8 + 4 * __sa[v11]) & 0x8000000) != 0)
  {
    if (a2 <= ++v11)
    {
      v11 = a2;
      goto LABEL_14;
    }
  }
  if (!v11)
    return 11;
LABEL_14:
  if (__s)
  {
    v12 = strlen(&__sa[v11]);
    if (v12 >= 0x40)
      v13 = 64;
    else
      v13 = v12;
    if (v13)
      strncpy(__s, &__sa[v11], v13);
    __s[v13] = 0;
    v14 = ICverify(__s, (a2 - v11), a3);
    v15 = strlen(__sa);
    if (v15 >= 0x40)
      v16 = 64;
    else
      v16 = v15;
    if (v16)
      strncpy(__s, __sa, v16);
    __s[v16] = 0;
  }
  else
  {
    v14 = ICverify(0, (a2 - v11), a3);
  }
  if (!*(_BYTE *)(v7 + 102))
    goto LABEL_36;
  v17 = 0;
  v18 = v11;
  v19 = *(_WORD **)(v7 + 3520);
  while ((v19[v17] & 0x10) == 0)
  {
    if (*(unsigned __int8 *)(v7 + 102) <= ++v17)
      goto LABEL_36;
  }
  if (v14 != 10)
  {
LABEL_36:
    *(_QWORD *)(v7 + 3480) = 0;
    return 11;
  }
  *(_WORD *)v6 |= 8u;
  *(_WORD *)(v7 + 18) &= 0xFFEEu;
  *v19 &= 0xFFEEu;
  *(_QWORD *)(a3 + 1328) &= ~0x10uLL;
  v20 = *(_QWORD *)(v6 + 280);
  *(_WORD *)(v20 + 1500) = v11;
  *(_WORD *)(v20 + 1502) = v11;
  *(_WORD *)(v20 + 1604) = *(_WORD *)(v7 + 18);
  *(_DWORD *)(v20 + 1596) = *(_DWORD *)(v7 + 3480);
  if (*(_BYTE *)(a3 + 8) == 6 && (*(_BYTE *)(a3 + 20) & 0x20) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(v7 + 72) + v17) = 4;
    *(_WORD *)(v7 + 102) = 1;
  }
  else
  {
    *(_BYTE *)(v20 + 1592) = *(_BYTE *)(*(_QWORD *)(v7 + 72) + v17);
  }
  if ((*(_WORD *)(a3 + 1322) & 0x40) != 0)
  {
    v22 = (char *)(*(_QWORD *)(v6 + 280) + 1607);
    v23 = strlen((const char *)(a3 + 3090));
    if (v23 >= 0x40)
      v24 = 64;
    else
      v24 = v23;
    if (v24)
      strncpy(v22, (const char *)(a3 + 3090), v24);
    v22[v24] = 0;
  }
  if (*(_DWORD *)(a3 + 1308))
  {
    v25 = (_QWORD *)(v7 + 3480);
    v32[0] = 0;
    if (*(_DWORD *)(v7 + 3480))
    {
      v32[0] = 0;
      v26 = 0;
      v27 = v11;
      do
      {
        if (((*((_DWORD *)v25 + (v26 >> 5)) >> ~v26) & 1) != 0)
          *((_DWORD *)v32 + (v27 >> 5)) |= 1 << ~v27;
        ++v26;
        ++v27;
      }
      while (a2 > v26);
      *v25 = v32[0];
    }
    if (*(_DWORD *)(a3 + 3156))
    {
      v28 = (_QWORD *)(a3 + 3156);
      v32[0] = 0;
      v29 = 0;
      do
      {
        if (((*((_DWORD *)v28 + (v29 >> 5)) >> ~v29) & 1) != 0)
          *((_DWORD *)v32 + (v11 >> 5)) |= 1 << ~v11;
        ++v29;
        ++v11;
      }
      while (a2 > v29);
      *v28 = v32[0];
    }
  }
  if (*(_BYTE *)(a3 + 8) != 6 || (*(_BYTE *)(a3 + 20) & 0x10) != 0)
    return ICcmpalt(v18, (unsigned __int8 *)&v30, 1, 1, a3);
  else
    return 10;
}

uint64_t ICcmpprm(uint64_t a1, int a2, int a3, unsigned __int16 a4)
{
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int16 v14;
  uint64_t result;
  BOOL v16;
  __int16 v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  __int16 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  int v37;
  char v38;
  unsigned int v39;
  _QWORD *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45[65];
  char __s[65];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 3184);
  v42 = *(_QWORD *)(*(_QWORD *)(v7 + 248) + 56);
  v8 = (unsigned __int8 *)(a1 + 1547 + a3 + (uint64_t)a2);
  v9 = *v8;
  if (v9 == 45)
    v10 = a3 + 1;
  else
    v10 = a3;
  v11 = *(_QWORD *)(v7 + 280);
  v12 = *(_QWORD *)(v7 + 264);
  v41 = *(unsigned __int8 *)(v12 + 88);
  v40 = (_QWORD *)(v12 + 92);
  v43 = *(_QWORD *)(v12 + 92);
  v13 = *(v8 - 1);
  if (v9 == 45)
    v14 = v10 - 1;
  else
    v14 = a3;
  result = ICcmprmc(a1, (__int16)(v10 + a2), (__int16)(*(_WORD *)(a1 + 1612) - 1));
  if ((_DWORD)result != 2)
  {
    if (v9 != 45 || (_DWORD)result != 10)
      return result;
    v19 = *(unsigned __int8 *)(a1 + 8);
    if (!*(_BYTE *)(a1 + 8) || ((1 << (v19 - 1)) & 0x1240) != 0)
    {
      v20 = a2 + (uint64_t)(__int16)v14;
      if ((*(_DWORD *)(v42 + 4 * *(unsigned __int8 *)(v20 + a1 + 1546)) & 0x10000000) != 0
        && (*(_DWORD *)(v42 + 4 * *(unsigned __int8 *)(a1 + (int)v20 + 1548)) & 0x10000000) != 0)
      {
        return 10;
      }
    }
    if (v19 == 6 && v41 == 2)
    {
      v21 = a2 + a1;
      if (*(unsigned __int8 *)(v21 + 1546) == 223 && *(_BYTE *)(v21 + 1548) == 115 && (*(_BYTE *)(a1 + 20) & 0x80) != 0)
        return 10;
    }
    return 11;
  }
  if (*(_BYTE *)(a1 + 8) == 11)
    *(_WORD *)(v11 + 1604) &= ~0x40u;
  result = 10;
  if (v9 != 45 && v13 != 45)
  {
    if (v14 | a4)
      v16 = (*(_DWORD *)(a1 + 4 * ((unsigned __int16)(v14 + a2) >> 5) + 1672) & (1 << ~(a2 + v14))) == 0;
    else
      v16 = 0;
    if (v16)
    {
      *(_WORD *)(v11 + 1502) = a2 + v14;
      __strncpy_chk();
      __s[*(__int16 *)(a1 + 1612)] = 0;
      if ((*(_BYTE *)(v12 + 3492) & 0x40) != 0 && ReplaceSharf(__s, a1))
        v17 = *(_WORD *)(v11 + 1502) + 1;
      else
        v17 = *(_WORD *)(v11 + 1502);
      __strcpy_chk();
      SLrecap(v45, *(__int16 *)(a1 + 1612), v41, (uint64_t)&v43, v41, v42);
      v22 = SLcap((uint64_t)v45, *(__int16 *)(v11 + 1502), *(__int16 *)(a1 + 1612), &v43, v42);
      if (v22 >= 2 && (v22 != 3 || *(_BYTE *)(a1 + 8) != 6))
      {
        *(_WORD *)&__s[v17] = 45;
        __strcat_chk();
        __s[*(__int16 *)(a1 + 1612) + 2] = 0;
        if ((*(_BYTE *)(v12 + 3492) & 0x40) != 0)
          ReplaceSharf(__s, a1);
        v44 = 0;
        *(_QWORD *)(a1 + 1328) |= 0x200uLL;
        __strcpy_chk();
        ++*(_WORD *)(v11 + 1502);
        ++*(_WORD *)(a1 + 1612);
        v23 = strlen(__s);
        SFadd(__s, v23, (__int16 *)(v12 + 40), (__int16 *)(v12 + 44), *(__int16 *)(v12 + 42), *(__int16 *)(v12 + 56), *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 64));
        *(_WORD *)v7 |= 4u;
        v24 = v17;
        if (*(__int16 *)(v12 + 102) >= 1)
        {
          v25 = 0;
          v26 = *(unsigned __int16 *)(v12 + 102);
          v27 = *(_QWORD *)(v12 + 72);
          do
          {
            if (*(unsigned __int8 *)(v27 + v25) >= 2u)
            {
              v44 = 0;
              v28 = *(_QWORD *)(v12 + 80);
              if (v17 >= 1)
              {
                LOWORD(v29) = 0;
                do
                {
                  v30 = 1 << ~(_BYTE)v29;
                  if ((*(_DWORD *)(v28 + 8 * v25 + 4 * ((unsigned __int16)v29 >> 5)) & v30) != 0)
                    *(_DWORD *)&v45[4 * ((unsigned __int16)v29 >> 5) - 2] |= v30;
                  v29 = (__int16)(v29 + 1);
                }
                while (v29 < v17);
              }
              v31 = *(__int16 *)(a1 + 1612);
              if (v31 > v17)
              {
                v32 = v17;
                do
                {
                  v33 = ~(_BYTE)v32;
                  v34 = *(_DWORD *)(v28 + 8 * v25 + 4 * ((unsigned __int16)v32++ >> 5));
                  if (((v34 >> v33) & 1) != 0)
                    *(_DWORD *)&v45[4 * ((unsigned __int16)v32 >> 5) - 2] |= 1 << ~(_BYTE)v32;
                }
                while (v31 != v32);
              }
              *(_QWORD *)(v28 + 8 * v25) = v44;
            }
            ++v25;
          }
          while (v25 != v26);
        }
        v44 = 0;
        if (v17 >= 1)
        {
          LOWORD(v35) = 0;
          do
          {
            v36 = 1 << ~(_BYTE)v35;
            if ((*((_DWORD *)v40 + ((unsigned __int16)v35 >> 5)) & v36) != 0)
              *(_DWORD *)&v45[4 * ((unsigned __int16)v35 >> 5) - 2] |= v36;
            v35 = (__int16)(v35 + 1);
          }
          while (v35 < v17);
        }
        v37 = *(__int16 *)(a1 + 1612);
        if (v37 > v17)
        {
          do
          {
            v38 = ~(_BYTE)v24;
            v39 = *((_DWORD *)v40 + ((unsigned __int16)v24++ >> 5));
            if (((v39 >> v38) & 1) != 0)
              *(_DWORD *)&v45[4 * ((unsigned __int16)v24 >> 5) - 2] |= 1 << ~(_BYTE)v24;
          }
          while (v37 != v24);
        }
        *v40 = v44;
        return 2;
      }
    }
    return 11;
  }
  return result;
}

uint64_t ReplaceSharf(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v5;
  uint64_t v6;
  int v7;
  char *v8;
  char v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  char v19;
  unsigned int v20;
  uint64_t v22;
  char __src[65];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  LODWORD(v2) = *(__int16 *)(a2 + 1612);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
  v22 = 0;
  if ((int)v2 < 1)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v5 = 0;
    LODWORD(v6) = 0;
    v7 = 0;
    v2 = (unsigned __int16)v2;
    v8 = a1;
    do
    {
      v10 = *v8++;
      v9 = v10;
      v11 = v6 + 1;
      v6 = (__int16)v6;
      if (v10 == 223)
      {
        __src[v6] = 115;
        LODWORD(v6) = v6 + 2;
        __src[(__int16)v11] = 115;
        v7 = 1;
        v5 = v11;
      }
      else
      {
        __src[v6] = v9;
        LODWORD(v6) = v11;
      }
      --v2;
    }
    while (v2);
    __src[(__int16)v6] = 0;
    if (v7 == 1)
    {
      strcpy(a1, __src);
      v12 = *(__int16 *)(a2 + 1612);
      if (*(__int16 *)(v3 + 102) >= 1)
      {
        v13 = 0;
        v14 = *(unsigned __int16 *)(v3 + 102);
        v15 = *(_QWORD *)(v3 + 80);
        do
        {
          if (v5 >= 1)
          {
            LOWORD(v16) = 0;
            do
            {
              v17 = 1 << ~(_BYTE)v16;
              if ((*(_DWORD *)(v15 + 8 * v13 + 4 * ((unsigned __int16)v16 >> 5)) & v17) != 0)
                *(_DWORD *)&__src[4 * ((unsigned __int16)v16 >> 5) - 1] |= v17;
              v16 = (__int16)(v16 + 1);
            }
            while (v16 < v5);
          }
          if (v12 > v5)
          {
            v18 = v5;
            do
            {
              v19 = ~(_BYTE)v18;
              v20 = *(_DWORD *)(v15 + 8 * v13 + 4 * ((unsigned __int16)v18++ >> 5));
              if (((v20 >> v19) & 1) != 0)
                *(_DWORD *)&__src[4 * ((unsigned __int16)v18 >> 5) - 1] |= 1 << ~(_BYTE)v18;
            }
            while (v12 != v18);
          }
          *(_QWORD *)(v15 + 8 * v13++) = v22;
        }
        while (v13 != v14);
      }
      *(_WORD *)(a2 + 1612) = v12 + 1;
    }
  }
  return (char)v7;
}

uint64_t ICcmprmc(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  __int16 v4;
  _QWORD *v6;
  uint64_t v7;
  __int16 v8;
  unsigned int v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  char v18;
  char v19;
  __int16 v20;
  _BYTE *v21;
  __int16 v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  char __s[65];
  unsigned __int8 v34[65];
  uint64_t v35[3];

  v35[1] = *MEMORY[0x1E0C80C00];
  v3 = 11;
  if (a3 < a2)
    return v3;
  v4 = a3;
  if (a3 > 63)
    return v3;
  v6 = *(_QWORD **)(a1 + 3184);
  v29 = *(_QWORD *)(v6[31] + 56);
  v35[0] = 0;
  v7 = v6[33];
  v32 = v6[35];
  v8 = a3 - a2 + 1;
  v9 = *(unsigned __int8 *)(v7 + 88);
  v30 = *(_DWORD *)(v7 + 96);
  v31 = *(_DWORD *)(v7 + 92);
  __strncpy_chk();
  __s[v8] = 0;
  v11 = a1;
  v12 = v9;
  v13 = a2;
  __strlcpy_chk();
  if (v12 >= 3)
  {
    SLrecap(v34, *(__int16 *)(v11 + 1612), v12, v7 + 92, v12, v29);
    *(_BYTE *)(v7 + 88) = SLcap((uint64_t)v34, a2, (__int16)(v4 + 1), (_QWORD *)(v7 + 92), v29);
  }
  v14 = ICverify(__s, v8, v11);
  if (v14 == 2)
  {
    *(_WORD *)(v7 + 102) = 0;
    **(_WORD **)(v11 + 3184) &= ~4u;
    SFlstini((_WORD *)(v7 + 40), (_WORD *)(v7 + 44), *(_BYTE **)(v7 + 48), *(_WORD **)(v7 + 64));
    v20 = 0;
    v15 = v32;
    v16 = v31;
    goto LABEL_37;
  }
  v15 = v32;
  v16 = v31;
  if (v14 != 10 || *(__int16 *)(v7 + 102) < 1)
  {
    v20 = 0;
LABEL_37:
    v26 = 0;
    *(_BYTE *)(v7 + 88) = v12;
    v3 = 11;
    LOWORD(v17) = v20;
    *(_DWORD *)(v7 + 92) = v16;
    *(_DWORD *)(v7 + 96) = v30;
    goto LABEL_38;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = (_BYTE *)(v11 + (a2 - 1) + 1547);
  do
  {
    v22 = *(_WORD *)(*(_QWORD *)(v7 + 3520) + 2 * v17);
    if ((v22 & 0x10) != 0)
    {
      v23 = (*(unsigned __int16 *)(v32 + 1524) >> 12) & 1;
      if ((*(_WORD *)(*(_QWORD *)(v7 + 3520) + 2 * v17) & 0x400) != 0)
      {
LABEL_11:
        if (v13 < 1)
        {
          v19 = 1;
          v20 = v17;
          v18 = 1;
        }
        else
        {
          v19 = 1;
          v20 = v17;
          v18 = 1;
          if (*v21 == 45)
            goto LABEL_27;
        }
        goto LABEL_25;
      }
    }
    else
    {
      v23 = 0;
      if ((*(_WORD *)(*(_QWORD *)(v7 + 3520) + 2 * v17) & 0x400) != 0)
        goto LABEL_11;
    }
    if ((v22 & 0xA) != 0)
      v24 = 1;
    else
      v24 = v23;
    if (v24)
    {
      v20 = v17;
      v19 = 0;
      v18 = 1;
    }
    if (v13 >= 1 && v24)
    {
      v19 = 0;
      if (*v21 != 45)
        goto LABEL_27;
      v18 = 1;
      v20 = v17;
    }
LABEL_25:
    ++v17;
  }
  while (*(unsigned __int16 *)(v7 + 102) != v17);
  LOWORD(v17) = v20;
  if (!v18)
    goto LABEL_37;
LABEL_27:
  *(_BYTE *)(v32 + 1592) = *(_BYTE *)(*(_QWORD *)(v7 + 72) + (__int16)v17);
  if (*(_BYTE *)(v11 + 8) == 6 && (*(_WORD *)(*(_QWORD *)(v7 + 3520) + 2 * (__int16)v17) & 8) != 0)
  {
    *(_BYTE *)(v32 + 1592) = 1;
    *(_BYTE *)(v32 + 1504) = 1;
    *(_DWORD *)(v32 + 1508) |= 0x80000000;
  }
  *(_DWORD *)(v32 + 1596) = *(_DWORD *)(v7 + 3480);
  *(_DWORD *)(v7 + 3480) = 0;
  *(_WORD *)(v32 + 1502) = v13;
  if (*(_DWORD *)(v11 + 1308) && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 3184) + 216) + 747))
  {
    __strcpy_chk();
    *(_DWORD *)(v32 + 1600) = *(_DWORD *)(v11 + 3156);
  }
  *(_BYTE *)(v32 + 1606) = *(_BYTE *)(*(_QWORD *)(v7 + 3496) + (__int16)v17);
  *(_WORD *)(v32 + 1604) = *(_WORD *)(*(_QWORD *)(v7 + 3520) + 2 * (__int16)v17);
  *(_BYTE *)(v7 + 88) = v12;
  *(_DWORD *)(v7 + 92) = v31;
  *(_DWORD *)(v7 + 96) = v30;
  if (v19)
  {
    v25 = *(unsigned __int8 *)(v32 + 1504);
    v3 = 2;
    goto LABEL_39;
  }
  v26 = 1;
  v3 = 10;
LABEL_38:
  v25 = *(unsigned __int8 *)(v15 + 1504);
  if ((v25 & 0xFE) == 2
    || *(__int16 *)(v15 + 1502) >= 1
    && *(_BYTE *)(v11 + *(unsigned __int16 *)(v15 + 1502) - 1 + 1547) == 45
    && *(unsigned __int8 *)(v15 + 1592) - 1 <= 2)
  {
LABEL_39:
    v35[0] = *(_QWORD *)(*(_QWORD *)(v7 + 80) + 8 * (__int16)v17);
    if ((v25 | 4) == 4)
    {
      v25 = ICEndToken(v11);
      if (v25 == 1)
      {
        *(_BYTE *)(v15 + 1504) = 1;
        *(_DWORD *)(v15 + 1508) |= 0x80000000;
        if ((v16 & 0x80000000) == 0)
        {
          *(_WORD *)(v11 + 1322) |= 0x800u;
          v25 = 1;
        }
      }
      else
      {
        v25 = *(unsigned __int8 *)(v15 + 1504);
      }
    }
    **(_BYTE **)(v7 + 72) = ICcomcap(v25, (uint64_t *)(v15 + 1508), v13, *(unsigned __int8 *)(v15 + 1592), v35, *(_QWORD *)(v7 + 80), 0);
    goto LABEL_51;
  }
  if (v26)
  {
    **(_BYTE **)(v7 + 72) = *(_BYTE *)(v15 + 1592);
    if (*(_BYTE *)(v15 + 1592) == 1)
      **(_DWORD **)(v7 + 80) |= 0x80000000;
LABEL_51:
    *(_WORD *)(v7 + 102) = 1;
  }
  return v3;
}

uint64_t ICcmpsmh(char *__src, char *__dst, uint64_t a3, int a4, int a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  __int16 v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v26;
  char *v27;
  int v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  int v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  int v42;
  char *v43;
  int v44;
  int v45;
  unsigned int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v51;

  v11 = *(_QWORD *)(a6 + 3184);
  v12 = *(_QWORD *)(v11 + 264);
  v13 = *(_QWORD *)(*(_QWORD *)(v11 + 248) + 56);
  strcpy(__dst, __src);
  if (a5 >= 2)
  {
    v51 = (unsigned __int16)a5 - 1;
    v14 = 1;
    do
    {
      v15 = *(unsigned __int8 *)(a6 + 8);
      if (a4)
      {
        if (v15 == 6)
        {
          if (__dst[(__int16)v14] == 107 && (v31 = v14 - 1, __dst[v31] == 107))
          {
            __dst[v31] = 99;
            v19 = *(_WORD *)(v12 + 102);
            result = ICverify(__dst, a5, a6);
            if ((_DWORD)result == 10)
              return result;
            __dst[v31] = 107;
          }
          else
          {
LABEL_35:
            if (v51 <= v14)
              goto LABEL_67;
            v33 = __dst[(__int16)v14];
            if (v33 != __dst[v14 - 1] || v33 != __dst[v14 + 1])
              goto LABEL_67;
            v34 = v14;
            do
            {
              v35 = &__dst[(__int16)v34];
              v36 = v35[2];
              v35[1] = v36;
              ++v34;
            }
            while (v36);
            v19 = *(_WORD *)(v12 + 102);
            v20 = a5 - 1;
LABEL_41:
            v37 = v20;
            v38 = __dst;
LABEL_58:
            result = ICverify(v38, v37, a6);
            if ((_DWORD)result == 10)
              return result;
            strcpy(__dst, __src);
          }
          *(_WORD *)(v12 + 102) = v19;
          goto LABEL_67;
        }
        if (v15 != 11)
          goto LABEL_35;
        if (((*(_DWORD *)(a3 + 4 * ((unsigned __int16)v14 >> 5)) >> ~(_BYTE)v14) & 1) != 0)
        {
          v16 = v14 + 1;
          v17 = __dst[v16];
          if ((*(_DWORD *)(v13 + 4 * v17) & 0x10000000) != 0)
          {
            HIDWORD(v47) = v17 - 97;
            LODWORD(v47) = v17 - 97;
            v46 = v47 >> 1;
            if (v46 <= 0xA && ((0x495u >> v46) & 1) != 0)
              __dst[v16] = byte_1DE2ECA80[v46];
            v19 = *(_WORD *)(v12 + 102);
            v38 = __dst;
            v37 = a5;
            goto LABEL_58;
          }
          if ((*(_DWORD *)(v13 + 4 * __dst[(__int16)v14]) & 0x10000000) != 0)
          {
            if (a5 >= (__int16)v14)
            {
              LOWORD(v18) = a5;
              do
              {
                __dst[(__int16)v18 + 1] = __dst[(__int16)v18];
                v18 = (__int16)(v18 - 1);
              }
              while (v18 >= (__int16)v14);
            }
            v19 = *(_WORD *)(v12 + 102);
            v20 = a5 + 1;
            goto LABEL_41;
          }
        }
      }
      else
      {
        if (v15 == 11)
        {
          if ((*(_DWORD *)(v13 + 4 * __dst[(__int16)v14]) & 0x40000) != 0)
          {
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 3184) + 280) + 1502) = v14;
            ICremacc(__dst, 2, a6);
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 3184) + 280) + 1502) = 0;
            v21 = *(_WORD *)(v12 + 102);
            v22 = *(_QWORD *)(v12 + 3480);
            if (ICverify(__dst, a5, a6) == 10)
            {
              if ((*(_WORD *)(v12 + 18) & 0x40) != 0)
                return 2;
              *(_QWORD *)(v12 + 3480) = v22;
            }
            strcpy(__dst, __src);
            *(_WORD *)(v12 + 102) = v21;
          }
          if ((__int16)v14 >= 2)
          {
            v23 = v14 - 1;
            v24 = __dst[v14 - 1];
            if ((*(_DWORD *)(v13 + 4 * v24) & 0x10000000) != 0
              && (_DWORD)v24 == __dst[v14 - 2]
              && (*(_DWORD *)(v13 + 4 * __dst[v14 - 2]) & 0x10000000) != 0)
            {
              v26 = (unsigned __int16)(v14 - 1) - 1;
              if (__dst[v26] == 101)
                __dst[v26] = -23;
              do
              {
                v27 = &__dst[(__int16)v23];
                v28 = v27[1];
                *v27 = v28;
                ++v23;
              }
              while (v28);
              v29 = *(_WORD *)(v12 + 102);
              v30 = *(_QWORD *)(v12 + 3480);
              if (ICverify(__dst, (__int16)(a5 - 1), a6) == 10)
              {
                if ((*(_WORD *)(v12 + 18) & 0x40) != 0)
                  return 2;
                *(_QWORD *)(v12 + 3480) = v30;
              }
              goto LABEL_65;
            }
          }
          goto LABEL_66;
        }
        if ((**(_WORD **)(a6 + 3184) & 8) != 0)
          goto LABEL_66;
        if (v15 == 6 && __dst[(__int16)v14] == 107)
        {
          v39 = v14 - 1;
          if (__dst[v39] == 99)
          {
            v49 = a3;
            __dst[v39] = 107;
            v40 = *(_WORD *)(v12 + 102);
            if (ICverify(__dst, a5, a6) == 10)
              return 2;
            __dst[v39] = 99;
            *(_WORD *)(v12 + 102) = v40;
            a3 = v49;
          }
        }
        v41 = __dst[(__int16)v14];
        if (v41 != __dst[v14 - 1])
          goto LABEL_66;
        if (v51 <= v14 || v41 != __dst[v14 + 1])
        {
          if (a5 >= (__int16)v14)
          {
            LOWORD(v48) = a5;
            do
            {
              __dst[(__int16)v48 + 1] = __dst[(__int16)v48];
              v48 = (__int16)(v48 - 1);
            }
            while (v48 >= (__int16)v14);
          }
          v29 = *(_WORD *)(v12 + 102);
          if (ICverify(__dst, (__int16)(a5 + 1), a6) == 10)
            return 2;
LABEL_65:
          strcpy(__dst, __src);
          *(_WORD *)(v12 + 102) = v29;
LABEL_66:
          if ((**(_WORD **)(a6 + 3184) & 8) != 0)
            return 11;
          goto LABEL_67;
        }
        v42 = v14;
        do
        {
          v14 = v42;
          v43 = &__dst[(__int16)v42];
          v44 = *v43;
          v45 = v43[1];
          v42 = v14 + 1;
        }
        while (v44 == v45);
      }
LABEL_67:
      v14 = (__int16)(v14 + 1);
    }
    while (v14 < a5);
  }
  return 11;
}

uint64_t ICcmpspc(char *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned __int8 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  _WORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  unsigned __int8 v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  __int16 v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  _WORD *v52;
  unsigned __int8 v54;
  int v55;
  uint64_t v56;
  char v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char __src[16];
  __int128 v65;
  __int128 v66;
  __int128 v67;
  char v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 3184);
  v7 = *(_QWORD *)(v6 + 264);
  if (*(_BYTE *)(v7 + 88) == 2)
  {
    v62 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 56);
    v63 = *(_QWORD *)(v6 + 280);
    v8 = *(unsigned __int8 *)(a3 + 1612);
    __strcpy_chk();
    if (a2)
    {
      LOBYTE(v9) = 0;
      v10 = a2;
      while (1)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v14 = 1;
LABEL_5:
        v15 = v13;
        v13 = v12;
        do
        {
          v16 = __src[v13];
          if (v16 == 115 && __src[v13 + 1] == 115)
          {
            if ((_BYTE)v15)
              v17 = 0;
            else
              v17 = v13 > v9;
            v18 = v17;
            if ((v18 & v14 & 1) != 0)
            {
              v14 = 0;
              a1[v11] = -33;
              *(_WORD *)(v7 + 3492) |= 0x40u;
              ++v11;
              v12 = v13 + 2;
              if ((v13 + 2) < v10)
                goto LABEL_5;
              v19 = v11;
              a1[v11] = 0;
              v9 = v13;
              goto LABEL_21;
            }
            LOBYTE(v16) = 115;
          }
          a1[v11++] = v16;
          ++v13;
        }
        while (v13 < v10);
        v19 = v11;
        a1[v11] = 0;
        v9 = v15;
        if ((v14 & 1) != 0)
          goto LABEL_31;
LABEL_21:
        v20 = v11;
        if (ICverify(a1, v11, a3) == 10)
        {
          v34 = (_DWORD *)(v7 + 3480);
          if (*(_DWORD *)(v7 + 3480) && (*(_WORD *)(v7 + 3492) & 0x40) != 0 && v20 > v9)
          {
            v35 = v9;
            do
            {
              v36 = v34[v35 >> 5];
              v37 = 1 << ~(_BYTE)v35;
              if ((v37 & v36) != 0)
              {
                v34[v35 >> 5] = v36 & ~v37;
                v38 = ((v35 + 1) >> 3) & 0x3CLL;
                *(_DWORD *)((char *)v34 + v38) |= 1 << ~++v35;
              }
              ++v35;
            }
            while (v20 > v35);
          }
          strcpy(a1, __src);
          *(_WORD *)(a3 + 1612) = v8;
          if ((*(_BYTE *)(a3 + 1322) & 0x40) != 0)
          {
            v68 = 0;
            v66 = 0u;
            v67 = 0u;
            *(_OWORD *)__src = 0u;
            v65 = 0u;
            if ((_BYTE)v9)
            {
              v39 = v9;
              memcpy(__src, (const void *)(a3 + 3090), v9);
            }
            else
            {
              v39 = 0;
            }
            __src[v39] = 115;
            __src[(v9 + 1)] = 115;
            __strcat_chk();
            __strcpy_chk();
            if (*(_DWORD *)(a3 + 3156))
            {
              v54 = strlen((const char *)(a3 + 3090));
              v55 = v9 - 1;
              if (v54 > (v9 - 1))
              {
                v56 = a3 + 3156;
                v57 = v9 - 1;
                do
                {
                  v58 = *(_DWORD *)(v56 + 4 * (v55 >> 5));
                  v59 = 1 << ~v57;
                  if ((v59 & v58) != 0)
                  {
                    *(_DWORD *)(v56 + 4 * (v55 >> 5)) = v58 & ~v59;
                    v60 = ((v55 + 1) >> 3) & 0x3CLL;
                    *(_DWORD *)(v56 + v60) |= 1 << ~(v57 + 1);
                    ++v55;
                  }
                  v57 = ++v55;
                }
                while (v54 > v55);
              }
            }
          }
          if (*(_DWORD *)(a3 + 1308))
          {
            v61 = *(_DWORD *)(v7 + 3472);
            if (v61)
            {
              if (v61 != *v34)
                *(_QWORD *)(a3 + 1328) |= 8uLL;
            }
          }
          return 10;
        }
        v21 = *(_WORD **)(v7 + 3520);
        if ((*v21 & 0x20) != 0 || *(__int16 *)(v7 + 102) >= 2 && (v21[1] & 0x20) != 0)
        {
          *(_WORD *)(a3 + 1612) = v8;
          v24 = Split(__src, v20, a3);
          goto LABEL_83;
        }
        *(_WORD *)(a3 + 1612) = v20;
        v22 = ICcmp(a3);
        if ((_DWORD)v22 != 11)
        {
          v24 = v22;
          v25 = v63;
          if ((_DWORD)v22 != 10)
            goto LABEL_42;
          goto LABEL_36;
        }
        if (*(_DWORD *)(a3 + 1672) || *(_DWORD *)(a3 + 1676))
        {
          v23 = ICcmphhy(a3);
          if ((_DWORD)v23 != 11)
            break;
        }
        strcpy(a1, __src);
        *(_WORD *)(a3 + 1612) = v8;
        __strcpy_chk();
        v10 = v8;
        if (!v8)
          goto LABEL_30;
      }
      v24 = v23;
      v25 = v63;
      if ((_DWORD)v23 != 10)
        goto LABEL_42;
      **(_BYTE **)(v7 + 72) = 0;
LABEL_36:
      if (*(_BYTE *)(v7 + 88) == 2
        && *(__int16 *)(v25 + 1502) >= 1
        && a1[*(unsigned __int16 *)(v25 + 1502) - 1] == 223
        && a1[*(unsigned __int16 *)(v25 + 1502)] == 115)
      {
        *(_QWORD *)(a3 + 1328) |= 0x200uLL;
        v26 = v25 + 1672;
        __strncpy_chk();
        *(_BYTE *)(v26 + *(__int16 *)(v25 + 1502)) = 45;
        *(_BYTE *)(*(__int16 *)(v25 + 1502) + v26 + 1) = 0;
        v27 = *(_WORD *)(v25 + 1502);
        *(_WORD *)(v25 + 1738) = v27;
        *(_WORD *)(v25 + 1740) = v27 + 1;
        __strcat_chk();
        *(_BYTE *)(v19 + v26 + 1) = 0;
        v24 = 2;
      }
      else
      {
        v24 = 10;
      }
LABEL_42:
      *(_WORD *)v6 |= 8u;
      strcpy(a1, __src);
      if (*(unsigned __int8 *)(a3 + 1612) < v8)
        *(_WORD *)(a3 + 1612) = v8;
      if ((_DWORD)v24 == 2)
      {
        v28 = (char *)(v25 + 1672);
        if (strlen((const char *)(v25 + 1672)))
        {
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = v28[v29];
            v32 = v30 + 1;
            v33 = v30;
            if (v31 == 223)
            {
              v30 += 2;
              LOBYTE(v31) = 115;
              __src[v32] = 115;
            }
            else
            {
              ++v30;
            }
            __src[v33] = v31;
            ++v29;
          }
          while (v29 < strlen(v28));
        }
        else
        {
          v30 = 0;
        }
        __src[v30] = 0;
        __strcpy_chk();
        SLrecap((unsigned __int8 *)v28, v30, *(unsigned __int8 *)(v7 + 88), v7 + 92, *(unsigned __int8 *)(v7 + 88), v62);
        if ((*(_BYTE *)(a3 + 1329) & 2) != 0)
          SFadd(v28, v30, (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 64));
        v25 = v63;
        v40 = *(__int16 *)(v63 + 1738);
        if (v40 > v9)
        {
          *(_WORD *)(v63 + 1738) = v40 + 1;
          ++*(_WORD *)(v63 + 1740);
        }
      }
      if ((*(_WORD *)(v7 + 3492) & 0x40) != 0)
      {
        v41 = *(unsigned __int8 *)(v25 + 1500);
        v42 = *(_WORD *)(v25 + 1502);
        if (v41 <= v9)
        {
          if (v9 >= v42)
          {
            if (*(_DWORD *)(v25 + 1596))
            {
              v47 = *(unsigned __int8 *)(a3 + 1612);
              if (v47 > v9)
              {
                v48 = v25 + 1596;
                do
                {
                  v49 = *(_DWORD *)(v48 + 4 * (v9 >> 5));
                  v50 = 1 << ~(_BYTE)v9;
                  if ((v50 & v49) != 0)
                  {
                    *(_DWORD *)(v48 + 4 * (v9 >> 5)) = v49 & ~v50;
                    v51 = ((v9 + 1) >> 3) & 0x3CLL;
                    *(_DWORD *)(v48 + v51) |= 1 << ~++v9;
                  }
                  ++v9;
                }
                while (v47 > v9);
              }
            }
          }
        }
        else
        {
          *(_WORD *)(v25 + 1502) = v42 + 1;
          if (*(_DWORD *)(v25 + 1516))
          {
            v43 = v25 + 1516;
            do
            {
              v44 = *(_DWORD *)(v43 + 4 * (v9 >> 5));
              v45 = 1 << ~(_BYTE)v9;
              if ((v45 & v44) != 0)
              {
                *(_DWORD *)(v43 + 4 * (v9 >> 5)) = v44 & ~v45;
                v46 = ((v9 + 1) >> 3) & 0x3CLL;
                *(_DWORD *)(v43 + v46) |= 1 << ~++v9;
              }
              ++v9;
            }
            while (v41 > v9);
          }
        }
      }
LABEL_83:
      if ((_DWORD)v24 != 11)
        return v24;
    }
    else
    {
LABEL_30:
      *a1 = 0;
LABEL_31:
      strcpy(a1, __src);
      *(_WORD *)(a3 + 1612) = v8;
    }
  }
  v52 = *(_WORD **)(v7 + 3520);
  if ((*v52 & 0x20) != 0 || *(__int16 *)(v7 + 102) >= 2 && (v52[1] & 0x20) != 0)
    return Split(a1, a2, a3);
  else
    return 11;
}

uint64_t Split(const char *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;
  char v13;
  char *v14;
  unsigned int v15;
  __int16 v16;
  int v17;
  char v18;
  __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  char __s[16];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  char v26[65];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 3184);
  v7 = *(_QWORD *)(v6 + 264);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 56);
  __s[0] = 0;
  v9 = *(_QWORD *)(v7 + 3520);
  if ((*(_BYTE *)v9 & 0x20) == 0 && (*(__int16 *)(v7 + 102) < 2 || (*(_WORD *)(v9 + 2) & 0x20) == 0))
  {
    result = 11;
LABEL_35:
    *(_QWORD *)(v7 + 3480) = 0;
    return result;
  }
  if (!*(_DWORD *)(v7 + 3480))
    goto LABEL_34;
  v21 = 0;
  v11 = *(unsigned __int8 *)(v7 + 88);
  if (!*(_BYTE *)(v7 + 88) || v11 == 3 && (*(_DWORD *)(v7 + 92) & 0x80000000) == 0 || *(_WORD *)(v7 + 102) == 1)
  {
    __strcpy_chk();
    *(_OWORD *)__s = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    if (a2)
    {
      v12 = 0;
      while (((*(_DWORD *)(v7 + 3480 + 4 * (v12 >> 5)) >> ~(_BYTE)v12) & 1) == 0)
      {
        __s[v12] = v26[v12];
        if (a2 == ++v12)
          goto LABEL_16;
      }
      v13 = v26[v12];
      v14 = &__s[v12];
      *v14 = v13;
      v14[1] = 32;
      __strcat_chk();
    }
LABEL_16:
    *(_WORD *)(v7 + 44) = 0;
    *(_WORD *)(v7 + 40) = 0;
    if (v11 != 1)
    {
      if (v11 == 2)
      {
        v21 = *(_QWORD *)(v7 + 92);
        v15 = 2;
LABEL_23:
        v16 = strlen(__s);
        SLrecap((unsigned __int8 *)__s, (__int16)(v16 + 1), v15, (uint64_t)&v21, v15, v8);
        SFadd(__s, a2 + 1, (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 64));
        if (v11 == 3)
          *(_QWORD *)(a3 + 1328) |= 0x400uLL;
        if (*(__int16 *)(v7 + 102) <= 1)
        {
          v17 = __s[0];
        }
        else if (!v11 || (v17 = __s[0], v11 == 3) && __s[0])
        {
          v18 = v26[0];
          if ((*(_DWORD *)(v8 + 4 * v26[0]) & 0x20000000) != 0)
            v18 = v26[0] - 32;
          v26[0] = v18;
          SFadd(v26, a2, (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 64));
          goto LABEL_34;
        }
        if (v17)
        {
LABEL_34:
          *(_WORD *)(a3 + 1322) |= 1u;
          *(_WORD *)v6 |= 4u;
          result = 2;
          goto LABEL_35;
        }
        goto LABEL_36;
      }
      v15 = 0;
      if (v11 != 3)
        goto LABEL_23;
      if ((*(_DWORD *)(v7 + 92) & 0x80000000) == 0)
      {
        v15 = 0;
        goto LABEL_23;
      }
    }
    LODWORD(v21) = 0x80000000;
    v15 = 1;
    goto LABEL_23;
  }
LABEL_36:
  *(_WORD *)(a3 + 1322) &= ~1u;
  *(_WORD *)(v7 + 18) &= ~0x20u;
  *(_QWORD *)(v7 + 3480) = 0;
  if (*(_DWORD *)(a3 + 1308))
  {
    v19 = *(__int16 **)(*(_QWORD *)(a3 + 3184) + 216);
    *v19 = 1;
    IHhyp(a1, v19);
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 216);
    *(_DWORD *)(v7 + 3480) = *(_DWORD *)(v20 + 8);
    *(_DWORD *)(v7 + 3484) = *(_DWORD *)(v20 + 12);
  }
  return 10;
}

uint64_t ICcmpsup(uint64_t a1, int a2, __int16 a3)
{
  __int16 v3;
  char v4;

  switch(a2)
  {
    case 1:
      v3 = -1;
      v4 = 31;
      goto LABEL_7;
    case 4:
      v3 = -3;
      v4 = 29;
      goto LABEL_7;
    case 2:
      v3 = -2;
      v4 = 30;
LABEL_7:
      *(_DWORD *)(a1 + 4 * ((unsigned __int16)(v3 + a3) >> 5)) |= 1 << ~(v4 + a3);
      break;
  }
  return 0;
}

uint64_t ICcmpver(uint64_t a1)
{
  __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  char *v26;
  size_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  __int16 v31;
  __int16 v32;
  __int16 v33;
  char *v34;
  int v35;
  char *v37;
  char *v38;
  size_t v40;
  uint64_t v41;
  size_t v42;
  size_t v43;
  size_t v44;
  size_t v45;
  __int16 v46;
  _WORD *v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  unsigned __int8 *v51;
  char v52;
  int v53;
  uint64_t v54;
  int v56;
  int v57;
  unsigned int *v59;
  unsigned int v60;
  __int16 v61;
  char v62;
  __int16 v63;
  char *v64;
  __int16 v65;
  char __s[65];
  char __src[65];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v2 = *(__int16 **)(a1 + 3184);
  v3 = *((_QWORD *)v2 + 35);
  v4 = *((_QWORD *)v2 + 33);
  bzero((void *)v3, 0x6D0uLL);
  v5 = *(unsigned __int8 *)(a1 + 8);
  if (*(_BYTE *)(a1 + 1413))
  {
    v6 = ICcmp(a1);
    if (v6 == 11)
    {
      *(_WORD *)(v4 + 42) = 100;
      LODWORD(v7) = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
      if ((_DWORD)v7 == 10)
      {
        if ((*(_WORD *)(v3 + 1742) & 1) == 0 && (*(_WORD *)(v4 + 18) & 4) != 0)
          goto LABEL_46;
        v10 = *(unsigned __int16 *)(v4 + 102);
        if (*(__int16 *)(v4 + 102) < 1)
        {
          if (*(_WORD *)(v4 + 102))
            goto LABEL_46;
        }
        else
        {
          v11 = 0;
          while (*(_BYTE *)(*(_QWORD *)(v4 + 72) + v11) != 2)
          {
            if ((__int16)++v11 >= (__int16)v10)
              goto LABEL_85;
          }
          if (v11 != v10 && (!v11 || *(_BYTE *)(v4 + 88) == 2))
          {
LABEL_46:
            if ((*v2 & 8) != 0)
            {
              LODWORD(v7) = 10;
            }
            else
            {
              v7 = 10;
              if (*(_DWORD *)(a1 + 1308))
                return v7;
            }
            goto LABEL_121;
          }
        }
        goto LABEL_85;
      }
    }
    else
    {
      LODWORD(v7) = v6;
      if (v6 == 10)
      {
        if ((*(_WORD *)(v3 + 1742) & 0x7200) != 0 && *(_BYTE *)(a1 + 1413))
          *(_QWORD *)(a1 + 1328) |= 0x40uLL;
        *v2 |= 8u;
        goto LABEL_46;
      }
      if (v6 == 2 && *(_BYTE *)(a1 + 8) == 7)
      {
        if ((*(_WORD *)(v3 + 1742) & 0x100) != 0
          && !SLstrcmp((_BYTE *)(a1 + 1547), (unsigned __int8 *)(v3 + 1672)))
        {
          *(_WORD *)(v3 + 1742) = *(_WORD *)(v3 + 1742) & 0xFCFF | 0x200;
          *(_BYTE *)(a1 + 1690) = 0;
          if (!*(_BYTE *)(a1 + 1413))
            goto LABEL_46;
LABEL_85:
          *(_QWORD *)(a1 + 1328) |= 0x40uLL;
          LODWORD(v7) = 3;
          goto LABEL_121;
        }
        goto LABEL_88;
      }
    }
LABEL_44:
    if ((_DWORD)v7 == 11)
    {
      **(_DWORD **)(v4 + 3520) = 0;
      *(_WORD *)(v4 + 102) = 0;
      *(_WORD *)(v4 + 18) = 0;
      *(_WORD *)(v3 + 1742) = 0;
      if ((*(_DWORD *)(a1 + 1672) || *(_DWORD *)(a1 + 1676)) && (v21 = ICcmphhy(a1), v21 != 11))
      {
        LODWORD(v7) = v21;
        if (*(_BYTE *)(a1 + 1413))
          *v2 |= 8u;
        if ((*(_WORD *)(v3 + 1742) & 0x100) != 0)
          return 2;
        v24 = *v2;
        if ((*(_WORD *)(v3 + 1742) & 0x3000) != 0 || (*v2 & 8) == 0)
        {
          if (*(_DWORD *)(a1 + 1308))
          {
            if (*(_BYTE *)(v3 + 1526) && *(_WORD *)(v3 + 1500))
            {
              ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), *(_WORD *)(v3 + 1500));
              v24 = *v2;
            }
            if ((v24 & 4) != 0)
            {
              v26 = (char *)(a1 + 1690);
            }
            else if ((*(_WORD *)(v3 + 1742) & 0x1000) != 0)
            {
              v26 = (char *)(a1 + 3090);
            }
            else
            {
              v26 = (char *)(a1 + 1547);
            }
            ICcmphyp(v26, a1);
          }
          goto LABEL_227;
        }
      }
      else
      {
        v22 = a1 + 1547;
        v23 = ICcmpnum((char *)(a1 + 1547), *(unsigned __int8 *)(a1 + 1612), a1);
        v7 = v23;
        if ((_DWORD)v23 == 11 && v5 == 6)
        {
          LODWORD(v7) = ICcmpspc((char *)(a1 + 1547), *(unsigned __int8 *)(a1 + 1612), a1);
        }
        else
        {
          if ((_DWORD)v23 == 11 && v5 == 11)
          {
            v27 = strlen((const char *)(a1 + 1547));
            if (v27 >= 0x40)
              v28 = 64;
            else
              v28 = v27;
            if (v28)
              __strncpy_chk();
            __s[v28] = 0;
            ICremacc(__s, 3, a1);
            v29 = *(_WORD *)(v4 + 3492);
            if ((v29 & 0x10) == 0)
            {
              *(_WORD *)(v4 + 3492) = v29 & 0xFFEF;
              LODWORD(v7) = 11;
              goto LABEL_121;
            }
            v40 = strlen((const char *)(a1 + 1547));
            if (v40 >= 0x40)
              v41 = 64;
            else
              v41 = v40;
            if (v41)
              __strncpy_chk();
            __src[v41] = 0;
            v42 = strlen(__s);
            if (v42 >= 0x40)
              v43 = 64;
            else
              v43 = v42;
            if (v43)
              strncpy((char *)(a1 + 1547), __s, v43);
            *(_BYTE *)(v22 + v43) = 0;
            v7 = ICcmp(a1);
            v44 = strlen(__src);
            if (v44 >= 0x40)
              v45 = 64;
            else
              v45 = v44;
            if (v45)
              strncpy((char *)(a1 + 1547), __src, v45);
            *(_BYTE *)(v22 + v45) = 0;
            if ((_DWORD)v7 == 11)
            {
              *(_WORD *)(v4 + 3492) &= ~0x10u;
              return v7;
            }
            *v2 |= 0xCu;
            *(_WORD *)(v4 + 3492) |= 2u;
            if (*(_BYTE *)(v3 + 1672))
              checked_strcpy((unint64_t)__s, (char *)(v3 + 1672));
            v61 = strlen(__s);
            SFadd(__s, v61, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
            goto LABEL_88;
          }
          if ((_DWORD)v23 == 11)
            return v7;
        }
      }
    }
    else if ((_DWORD)v7 == 10)
    {
      goto LABEL_46;
    }
    if ((_DWORD)v7 != 2)
    {
LABEL_121:
      if ((*v2 & 8) != 0 || (*(_BYTE *)(a1 + 1329) & 2) != 0)
      {
        v35 = ICcmpfnd(a1);
      }
      else if (*(_BYTE *)(a1 + 8) != 6 || (*(_BYTE *)(a1 + 20) & 0x20) != 0)
      {
        v35 = 11;
        if ((_DWORD)v7 != 11 && (*(_WORD *)(v4 + 18) & 0x240) != 0 && !*(_DWORD *)(a1 + 1308))
          v35 = ICcmpmnd(a1);
      }
      else
      {
        v35 = 11;
      }
      if (v35 != 11 && (_DWORD)v7 != 3)
        LODWORD(v7) = v35;
      if ((_DWORD)v7 != 11)
      {
        if (*(_DWORD *)(a1 + 1308))
        {
          if (*(__int16 *)(v3 + 1742) < 0)
          {
            *(_DWORD *)(v3 + 1596) = 0;
            *(_DWORD *)(v3 + 1516) = 0;
            *(_WORD *)(a1 + 1322) |= 2u;
          }
          if ((*v2 & 4) != 0)
            v37 = (char *)(a1 + 1690);
          else
            v37 = (char *)(a1 + 1547);
          ICcmphyp(v37, a1);
          if ((*v2 & 8) != 0 && *(__int16 *)(v3 + 1742) < 0)
          {
            if ((*v2 & 4) != 0)
              v38 = (char *)(a1 + 1690);
            else
              v38 = (char *)(a1 + 1547);
            ICcmphyp(v38, a1);
            *(_WORD *)(a1 + 1322) |= 2u;
          }
        }
        else if (*(_DWORD *)(v4 + 3480) && (*(_WORD *)(a1 + 1322) & 0x41) != 0x40)
        {
          *(_QWORD *)(v4 + 3480) = 0;
        }
      }
      if ((*(_BYTE *)(a1 + 1329) & 2) != 0)
        return 2;
      else
        return v7;
    }
LABEL_88:
    if ((*(_BYTE *)(a1 + 1329) & 2) != 0)
      goto LABEL_120;
    if (!*(_BYTE *)(v3 + 1672))
    {
LABEL_105:
      v33 = *v2 | 8;
      *v2 = v33;
      if ((*(_WORD *)(v3 + 1742) & 0x100) == 0)
      {
        if (!*(_DWORD *)(a1 + 1308))
        {
LABEL_118:
          if ((*(_WORD *)(v3 + 1524) & 0x40) != 0 || (*(_WORD *)(v3 + 1604) & 0x40) != 0)
          {
LABEL_120:
            v7 = 2;
            if ((*(_WORD *)(v3 + 1742) & 0x100) != 0)
              return v7;
            goto LABEL_121;
          }
LABEL_227:
          if ((*v2 & 4) != 0)
            return 2;
          else
            return 10;
        }
        if (*(_BYTE *)(v3 + 1526) && *(_WORD *)(v3 + 1500))
        {
          ICcmpsup(v3 + 1516, *(char *)(v3 + 1526), *(_WORD *)(v3 + 1500));
          v33 = *v2;
        }
        if ((v33 & 4) != 0)
        {
          if ((*(_WORD *)(a1 + 1322) & 2) == 0)
          {
            v34 = (char *)(a1 + 1690);
            goto LABEL_116;
          }
        }
        else if ((*(_WORD *)(v3 + 1742) & 0x1000) == 0)
        {
          v34 = (char *)(a1 + 1547);
LABEL_116:
          ICcmphyp(v34, a1);
          if (*(_DWORD *)(a1 + 1308) && (*(_BYTE *)(a1 + 1329) & 2) == 0)
            goto LABEL_227;
          goto LABEL_118;
        }
        v34 = (char *)(a1 + 3090);
        goto LABEL_116;
      }
      return 2;
    }
    if (*(_BYTE *)(a1 + 8) == 6 && (*(_BYTE *)(a1 + 20) & 0x20) == 0)
    {
      v30 = *(_WORD *)(v3 + 1742);
      goto LABEL_98;
    }
    v30 = *(_WORD *)(v3 + 1742);
    if ((v30 & 0x2000) != 0)
    {
      v31 = *(_WORD *)(a1 + 1322) | 2;
    }
    else
    {
      if ((*(_WORD *)(v3 + 1742) & 0x1000) == 0)
        goto LABEL_98;
      v31 = *(_WORD *)(a1 + 1322) | 4;
    }
    *(_WORD *)(a1 + 1322) = v31;
LABEL_98:
    if (v30 < 0)
    {
      __strcpy_chk();
      *(_WORD *)(a1 + 1322) |= 0x40u;
    }
    else
    {
      v32 = strlen((const char *)(v3 + 1672));
      SFadd((char *)(v3 + 1672), v32, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
      *(_WORD *)(a1 + 1612) = strlen((const char *)(v3 + 1672));
      *(_QWORD *)(a1 + 1328) |= 0x200uLL;
      *v2 |= 4u;
    }
    if (*(_BYTE *)(a1 + 1413))
    {
      if (*(_WORD *)(v3 + 1502))
        *(_QWORD *)(a1 + 1328) |= 0x40uLL;
      else
        *(_WORD *)(v3 + 1742) |= 0x400u;
    }
    goto LABEL_105;
  }
  if (!*(_BYTE *)(a1 + 1415))
  {
    v12 = *(_BYTE *)(v4 + 88);
    if (v5 == 6 && *(_BYTE *)(a1 + 1414))
      *(_BYTE *)(v4 + 88) = 1;
    *(_WORD *)(v4 + 42) = 100;
    v64 = (char *)(a1 + 1547);
    v7 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
    v62 = **(_BYTE **)(v4 + 72);
    v13 = **(_QWORD **)(v4 + 80);
    v65 = *(_WORD *)(v4 + 18);
    v14 = *(_WORD *)(a1 + 1322);
    v15 = *(_QWORD *)(v4 + 3480);
    v16 = strlen((const char *)(a1 + 3090));
    if (v16 >= 0x40)
      v17 = 64;
    else
      v17 = v16;
    v63 = *(_WORD *)(a1 + 1322);
    if (v17)
    {
      __strncpy_chk();
      v14 = *(_WORD *)(a1 + 1322);
    }
    __src[v17] = 0;
    *(_BYTE *)(v4 + 88) = v12;
    if ((v14 & 0x220) != 0)
      return v7;
    if ((_DWORD)v7 != 11 && (*(_WORD *)(v4 + 18) & 1) == 0)
      goto LABEL_179;
    if (*(_BYTE *)(a1 + 1412))
    {
      v18 = *(__int16 *)(a1 + 1612);
      if (v18 <= 5)
      {
        v19 = a1 + 1547;
        *(_BYTE *)(v19 + v18) = 46;
        v20 = *(_WORD *)(a1 + 1612) + 1;
        *(_WORD *)(a1 + 1612) = v20;
        *(_BYTE *)(v19 + v20) = 0;
        ++v2[2];
        ICadjpost((char *)(a1 + 1482));
        v7 = ICverify(v64, *(__int16 *)(a1 + 1612), a1);
        if ((_DWORD)v7 == 10)
        {
          *(_BYTE *)(a1 + 1412) = 0;
          return v7;
        }
        ICreadjpo((char *)(a1 + 1482));
        v46 = *(_WORD *)(a1 + 1612) - 1;
        *(_WORD *)(a1 + 1612) = v46;
        --v2[2];
        *(_BYTE *)(a1 + v46 + 1547) = 0;
      }
    }
    if ((_DWORD)v7 == 11)
    {
      v47 = *(_WORD **)(v4 + 3520);
      if ((*v47 & 0x20) != 0 || *(__int16 *)(v4 + 102) >= 2 && (v47[1] & 0x20) != 0)
        return ICcmpspc(v64, *(unsigned __int8 *)(a1 + 1612), a1);
      LODWORD(v7) = 11;
      v48 = 1;
    }
    else
    {
LABEL_179:
      v48 = 0;
    }
    if (*(_BYTE *)(a1 + 8) == 6)
    {
      if ((v48 & ((*(_BYTE *)(a1 + 20) & 0x20) >> 5) & 1) == 0)
      {
LABEL_182:
        if ((_DWORD)v7 != 11
          && (*(_BYTE *)(*(_QWORD *)(a1 + 3184) + 304) != 11 || (*(_WORD *)(v4 + 18) & 0x100) == 0))
        {
          goto LABEL_44;
        }
        goto LABEL_200;
      }
    }
    else if (!v48)
    {
      goto LABEL_182;
    }
    if (*(_DWORD *)(a1 + 1672) || *(_DWORD *)(a1 + 1676))
    {
      if (*(__int16 *)(a1 + 1612) < 1)
      {
        v49 = 0;
      }
      else
      {
        v49 = 0;
        v50 = *(unsigned __int16 *)(a1 + 1612);
        v51 = (unsigned __int8 *)(a1 + 1547);
        do
        {
          v53 = *v51++;
          v52 = v53;
          if (v53 != 45 && v49 <= 63)
          {
            v54 = v49++;
            __src[v54] = v52;
          }
          --v50;
        }
        while (v50);
      }
      __src[v49] = 0;
      v56 = v49;
      if (ICverify(__src, v49, a1) != 11 && ((*(_WORD *)(v4 + 18) & 0x40) == 0 || *(_DWORD *)(a1 + 1308)))
      {
        SFadd(__src, v56, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
        **(_WORD **)(a1 + 3184) |= 4u;
        *(_QWORD *)(a1 + 1328) |= 0x800000uLL;
        return 2;
      }
    }
LABEL_200:
    v57 = ICcmp(a1);
    LODWORD(v7) = v57;
    if (v57 == 10)
    {
      *v2 |= 8u;
      if (v5 == 11)
        *(_WORD *)(v4 + 3492) &= ~0x10u;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 3184) + 304) != 11 || (v65 & 0x100) == 0)
    {
      if (*(_BYTE *)(a1 + 1414))
      {
        v59 = *(unsigned int **)(v4 + 80);
        v60 = *v59;
        *v59 &= ~0x80000000;
        if ((*(_BYTE *)(a1 + 20) & 0x10) != 0 && (*(_DWORD *)(v4 + 92) & 0x80000000) != 0)
          *v59 = v60 | 0x80000000;
      }
      goto LABEL_44;
    }
    if (v57 != 11)
      *v2 |= 8u;
    checked_strcpy(a1 + 3090, __src);
    **(_BYTE **)(v4 + 72) = v62;
    **(_QWORD **)(v4 + 80) = v13;
    *(_WORD *)(v4 + 18) = v65;
    *(_WORD *)(a1 + 1322) = v63;
    *(_QWORD *)(v4 + 3480) = v15;
    **(_WORD **)(a1 + 3184) &= ~4u;
    if ((v65 & 0x40) == 0 || *(_DWORD *)(a1 + 1308))
    {
      *(_WORD *)(v4 + 102) = 1;
      return 10;
    }
    return ICcmpmnd(a1);
  }
  *(_WORD *)(v4 + 42) = 100;
  v8 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
  if (v8 != 11)
  {
    LODWORD(v7) = v8;
    *(_BYTE *)(a1 + 1415) = 0;
    goto LABEL_44;
  }
  *(_BYTE *)(a1 + v2[2] + 1547) = 0;
  v9 = *(_WORD *)(a1 + 1612) - 1;
  *(_WORD *)(a1 + 1612) = v9;
  v7 = ICverify((char *)(a1 + 1547), v9, a1);
  if ((_DWORD)v7 == 11)
  {
    *(_BYTE *)(a1 + v2[2] + 1547) = 39;
    ++*(_WORD *)(a1 + 1612);
  }
  if ((*(_WORD *)(a1 + 1322) & 0x20) == 0)
    goto LABEL_44;
  return v7;
}

unint64_t checked_strcpy(unint64_t result, char *__s)
{
  char *v3;
  size_t v4;

  if (result && __s)
  {
    v3 = (char *)result;
    result = strlen(__s);
    if (result >= 0x40)
      v4 = 64;
    else
      v4 = result;
    if (v4)
      result = (unint64_t)strncpy(v3, __s, v4);
    v3[v4] = 0;
  }
  return result;
}

uint64_t ICcmpvow(uint64_t a1, int a2, int a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int16 v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  unsigned __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v31;
  char *v32;
  _BYTE *v33;
  char v34;
  unsigned __int16 v35;
  int v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  char *v41;
  _BYTE *v42;
  char v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[65];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD **)(a1 + 3184);
  v8 = v7[35];
  v9 = *(_QWORD *)(v7[31] + 56);
  v10 = *(unsigned __int16 *)(v8 + 100 * a2 + 68);
  v49 = v7[33];
  if (v10 == 2 || a4 && v10 == 8 || *(_BYTE *)(v8 + 1592))
    v11 = *(_WORD *)(v8 + 100 * a2 + 66) + 1;
  else
    v11 = *(_WORD *)(v8 + 100 * a2 + 66);
  v12 = a1 + 1547;
  v13 = strlen((const char *)(a1 + 1547));
  v14 = (__int16)v11;
  v15 = (const char *)(v12 + (__int16)v11);
  v16 = *(unsigned __int8 *)v15;
  if (a3)
  {
    if ((_DWORD)v16 == 45)
    {
LABEL_8:
      *(_WORD *)(v8 + 1742) |= 0x200u;
      return 10;
    }
    v25 = (__int16)v11 - 1;
    v26 = *(__int16 *)(v8 + 1502);
    if ((__int16)v11 - 1 != v26)
    {
      v27 = *(unsigned __int8 *)(a1 + v25 + 1547);
      if ((*(_DWORD *)(v9 + 4 * v27) & 0x10000000) == 0)
        goto LABEL_8;
      v28 = *(unsigned __int8 *)(a1 + *(__int16 *)(v8 + 1502) + 1547);
      if ((*(_DWORD *)(v9 + 4 * v28) & 0x10000000) == 0)
        goto LABEL_8;
      if (!isdiphthong(*(unsigned __int8 *)(a1 + v25 + 1547), *(unsigned __int8 *)(a1 + *(__int16 *)(v8 + 1502) + 1547)))
      {
        v29 = isdiphthong(v28, *(unsigned __int8 *)(v26 + a1 + 1548));
        if ((_DWORD)v27 != (_DWORD)v28 && v29 == 0)
          return 10;
      }
      *(_WORD *)(v8 + 1742) |= 0x8000u;
      if ((__int16)v11 < 1)
      {
        v35 = 0;
      }
      else
      {
        v31 = v11;
        v32 = (char *)(a1 + 1547);
        v33 = (_BYTE *)(v8 + 1672);
        do
        {
          v34 = *v32++;
          *v33++ = v34;
          --v31;
        }
        while (v31);
        v35 = v11;
      }
      v47 = v35 + 1;
      *(_BYTE *)(v8 + 1672 + (__int16)v35) = 45;
      strcpy((char *)(v8 + 1672 + (__int16)(v35 + 1)), v15);
      *(_WORD *)(v8 + 1740) = v47;
      *(_WORD *)(v8 + 1742) |= 0x80u;
      *(_WORD *)(a1 + 1322) |= 2u;
      v48 = v49 + 4 * ((unsigned __int16)(v11 - 1) >> 5);
      *(_DWORD *)(v48 + 3480) |= 1 << ~(_BYTE)v25;
      return 2;
    }
    return 11;
  }
  if ((_DWORD)v16 != 45)
  {
    if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)((__int16)v11 + a1 + 1546)) & 0x10000000) == 0
      || (*(_DWORD *)(v9 + 4 * v16) & 0x40000) == 0)
    {
      return 11;
    }
    __strcpy_chk();
    *(_WORD *)(v8 + 1502) = v11;
    ICremacc((char *)(a1 + 1547), 2, a1);
    if (ICcmprmc(a1, (__int16)v11, (__int16)(*(_WORD *)(a1 + 1612) - 1)) == 10)
    {
      v36 = *(unsigned __int8 *)((__int16)v11 + a1 + 1546);
      v37 = *(unsigned __int8 *)v15;
      if (!isdiphthong(v36, v37)
        && ((v38 = isdiphthong(v37, *(unsigned __int8 *)((__int16)v11 + a1 + 1548)), v36 != v37)
          ? (v39 = v38 == 0)
          : (v39 = 0),
            v39))
      {
        __strcpy_chk();
        __strcpy_chk();
        *(_WORD *)(v8 + 1740) = *(_WORD *)(v8 + 1502);
      }
      else
      {
        if ((__int16)v11 < 1)
        {
          v11 = 0;
        }
        else
        {
          v40 = v11;
          v41 = (char *)(a1 + 1547);
          v42 = (_BYTE *)(v8 + 1672);
          do
          {
            v43 = *v41++;
            *v42++ = v43;
            --v40;
          }
          while (v40);
        }
        *(_BYTE *)(v8 + 1672 + (__int16)v11) = 45;
        strcpy((char *)(v8 + 1672 + (__int16)(v11 + 1)), v15);
        *(_WORD *)(v8 + 1740) = v11 + 1;
        __strcpy_chk();
      }
      return 2;
    }
    goto LABEL_60;
  }
  v18 = v13;
  v19 = v13;
  v20 = (__int16)v11 + 1;
  if (ICcmprmc(a1, (__int16)(v14 + 1), (__int16)(*(_WORD *)(a1 + 1612) - 1)) == 10)
  {
    if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(v14 + a1 + 1546)) & 0x10000000) != 0
      && (*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(a1 + v20 + 1547)) & 0x10000000) != 0)
    {
      goto LABEL_8;
    }
    if (!a4
      && (strlen((const char *)(a1 + 1547)) - 19 < 0xFFFFFFEE
       || (*(_WORD *)(v8 + 1524) & 0x80) != 0
       || (*(_WORD *)(v8 + 1604) & 0x80) != 0))
    {
      return 10;
    }
    if (v19 < 1)
    {
      v22 = 0;
    }
    else
    {
      v21 = 0;
      v22 = 0;
      do
      {
        v23 = *(unsigned __int8 *)(a1 + 1547 + v21);
        if (v23 == 45)
        {
          *(_WORD *)(v8 + 1740) = v21;
        }
        else
        {
          v24 = v8 + v22++;
          *(_BYTE *)(v24 + 1672) = v23;
        }
        ++v21;
      }
      while (v18 != v21);
    }
    *(_BYTE *)(v8 + v22 + 1672) = 0;
    **(_WORD **)(a1 + 3184) = 4;
    *(_WORD *)(v8 + 1742) |= 0x10u;
    if (a4)
      return 2;
    goto LABEL_68;
  }
  if ((*(_DWORD *)(v9 + 4 * *(unsigned __int8 *)(a1 + (int)v20 + 1547)) & 0x40000) == 0)
    return 11;
  __strcpy_chk();
  *(_WORD *)(v8 + 1502) = v20;
  ICremacc((char *)(a1 + 1547), 2, a1);
  if (ICcmprmc(a1, (__int16)(v14 + 1), (__int16)(*(_WORD *)(a1 + 1612) - 1)) != 10)
  {
LABEL_60:
    __strcpy_chk();
    *(_WORD *)(v49 + 3492) &= ~0x10u;
    return 11;
  }
  __strcpy_chk();
  __strcpy_chk();
  *(_WORD *)(v8 + 1740) = *(_WORD *)(v8 + 1502);
  if ((*(_DWORD *)(v9 + 4 * v50[v14 - 1]) & 0x10000000) != 0
    || strlen((const char *)(a1 + 1547)) - 19 < 0xFFFFFFEE
    || (*(_WORD *)(v8 + 1524) & 0x80) != 0
    || (*(_WORD *)(v8 + 1604) & 0x80) != 0)
  {
    return 2;
  }
  __strcpy_chk();
  if (v19 < 1)
  {
    v45 = 0;
  }
  else
  {
    v44 = 0;
    v45 = 0;
    do
    {
      if (*(_BYTE *)(a1 + 1547 + v44) == 45)
      {
        *(_WORD *)(v8 + 1740) = v44;
      }
      else
      {
        v46 = v8 + v45++;
        *(_BYTE *)(v46 + 1672) = v50[v44];
      }
      ++v44;
    }
    while (v18 != v44);
  }
  *(_BYTE *)(v8 + v45 + 1672) = 0;
  **(_WORD **)(a1 + 3184) = 4;
  *(_WORD *)(v8 + 1742) |= 0x10u;
LABEL_68:
  *(_BYTE *)(v8 + 1526) = 0;
  return 2;
}

uint64_t isdiphthong(int a1, int a2)
{
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  int v7;
  char v8;

  v7 = 151520517;
  v8 = 4;
  HIDWORD(v3) = a1 - 97;
  LODWORD(v3) = a1 - 97;
  v2 = v3 >> 1;
  if (v2 <= 0xA
    && ((0x495u >> v2) & 1) != 0
    && (HIDWORD(v5) = a2 - 97, LODWORD(v5) = a2 - 97, v4 = v5 >> 1, v4 <= 0xA)
    && ((0x495u >> v4) & 1) != 0)
  {
    return (*((unsigned __int8 *)&v7 + qword_1DE2ECA98[v2]) >> asc_1DE2F4D85[v4]) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t ICcomcap(unsigned int a1, uint64_t *a2, int a3, unsigned int a4, uint64_t *a5, uint64_t a6, int a7)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  unsigned __int16 v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v15 = *a5;
  if (a1 == 5)
    v8 = a4;
  else
    v8 = 3;
  if (a4 == 5)
    v8 = a1;
  if (a4 & 0xFFFFFFFB | a1)
  {
    if (a1 != 4 || (a4 & 0xFB) != 0)
    {
      if (a1 != 1 || a4)
      {
        if (a4 == 2 && a1 == 2)
          result = 2;
        else
          result = v8;
      }
      else
      {
        result = 1;
      }
    }
    else
    {
      result = 4;
    }
  }
  else
  {
    result = 0;
  }
  v16[0] = v7;
  if (a3 <= 61)
  {
    v11 = 0;
    v12 = a3;
    do
    {
      v13 = 1 << ~(_BYTE)v12;
      if (((*((_DWORD *)&v16[-1] + (v11 >> 5)) >> ~(_BYTE)v11) & 1) != 0)
        v14 = *((_DWORD *)v16 + (v12 >> 5)) | v13;
      else
        v14 = *((_DWORD *)v16 + (v12 >> 5)) & ~v13;
      *((_DWORD *)v16 + (v12++ >> 5)) = v14;
      ++v11;
    }
    while (v12 != 62);
    v7 = v16[0];
  }
  *(_QWORD *)(a6 + 8 * a7) = v7;
  return result;
}

uint64_t ICcorspl(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned __int16 v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  unsigned __int16 v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  int v23;
  int v24;
  uint64_t result;
  int v26;
  unsigned __int16 v27;
  _BYTE v28[65];
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 3184) + 248) + 56);
  v6 = strlen(a1);
  v7 = v6;
  if (((v6 << 16) - 4128769) < 0xFFC3FFFF)
    return 11;
  v8 = (__int16)v6;
  __strcpy_chk();
  v9 = 0;
  v10 = 0;
  v11 = a2 + 92;
  v12 = *(_QWORD *)(a2 + 92);
  v13 = *(unsigned __int8 *)(a2 + 88);
  do
  {
    v14 = v10;
    *(&v29 + v9 + 1) = v28[(__int16)v10++];
    v9 = (__int16)v10;
  }
  while (v8 > (__int16)v10);
  *(&v29 + (__int16)(v14 + 2)) = 0;
  v29 = v30;
  if ((*(_DWORD *)(v5 + 4 * v28[0]) & 0x8000000) != 0)
  {
    v15 = v8 - 1;
    v16 = 1;
  }
  else
  {
    v15 = v7 - 2;
    v30 = v31;
    v16 = 3;
  }
  v17 = v15;
  if (v15 <= v16)
    return 11;
  v27 = v7;
  v18 = (__int16)(v7 - 1);
  v19 = v16;
  do
  {
    *(&v29 + (int)v19 - 1) = *(&v29 + (__int16)v16);
    *(&v29 + (__int16)v16) = 32;
    if (v13 && v18 >= (__int16)v16)
    {
      LOWORD(v20) = v18;
      v21 = v27;
      do
      {
        v22 = v20;
        v23 = *(_DWORD *)(v11 + 4 * ((unsigned __int16)v20 >> 5));
        v24 = 1 << ~(_BYTE)v20;
        if ((v23 & v24) != 0)
        {
          *(_DWORD *)(v11 + 4 * ((unsigned __int16)v20 >> 5)) = v23 & ~v24;
          *(_DWORD *)(v11 + 4 * (v21 >> 5)) |= 1 << ~(v20 + 1);
        }
        v20 = (__int16)(v20 - 1);
        v21 = v22;
      }
      while (v20 >= (__int16)v16);
    }
    result = ICcorucf(&v29, a3);
    *(_QWORD *)(a2 + 92) = v12;
    *(_BYTE *)(a2 + 88) = v13;
    if ((_DWORD)result == 11)
    {
      v26 = *(__int16 *)(a3 + 1686);
      if (*(__int16 *)(a2 + 40) < v26)
      {
        *(_WORD *)(a2 + 40) = v26;
        *(_WORD *)(a2 + 44) = *(_WORD *)(a3 + 1688);
      }
    }
    LOWORD(v16) = v16 + 1;
    v19 = (__int16)v16;
  }
  while (v17 > (__int16)v16);
  return result;
}

uint64_t ICcorucf(const char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  unsigned __int16 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int16 v16;
  __int16 *v17;
  int v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  _WORD *v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  unsigned int v28;
  uint64_t v30;
  int v31;
  __int16 v32;
  __int16 v33;
  uint64_t v34;
  unsigned __int16 v35;
  char v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  int v48;
  signed int v49;
  __int16 v50;
  _BOOL4 v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  void **v58;
  void *v59;
  unsigned int v60;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  __int16 v72;
  __int16 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  unsigned __int16 v81;
  uint64_t v82;
  _BYTE *v83;
  unsigned __int16 v84;
  char v85;
  int v86;
  const char *v87;
  int v88;
  __int16 *v89;
  _BYTE *v90;
  uint64_t v91;
  int v92;
  __int16 *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD __src[75];
  _OWORD v98[12];
  uint64_t v99;
  __int16 v100[8];
  __int16 __dst[600];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  __int16 v115;
  __int16 v116;
  char v117;
  char v118;
  char __s[65];
  char v120[65];
  uint64_t v121;
  _OWORD v122[3];
  uint64_t v123;
  uint64_t v124;

  v2 = a2;
  v124 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 3184);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = *(_QWORD *)(v4 + 248);
  v7 = *(_QWORD *)(v6 + 56);
  v123 = 0;
  memset(v122, 0, sizeof(v122));
  memset(__src, 0, 512);
  v121 = *(_QWORD *)(v5 + 92);
  v8 = (_BYTE *)(a2 + 1614);
  v85 = *(_BYTE *)(v5 + 88);
  v9 = strlen((const char *)(a2 + 1614));
  memcpy(__dst, (const void *)(v2 + 1690), sizeof(__dst));
  v10 = *(_OWORD *)(v2 + 3018);
  v111 = *(_OWORD *)(v2 + 3034);
  v11 = *(_OWORD *)(v2 + 3066);
  v112 = *(_OWORD *)(v2 + 3050);
  v113 = v11;
  v12 = *(_OWORD *)(v2 + 2954);
  v107 = *(_OWORD *)(v2 + 2970);
  v13 = *(_OWORD *)(v2 + 3002);
  v108 = *(_OWORD *)(v2 + 2986);
  v109 = v13;
  v110 = v10;
  v14 = *(_OWORD *)(v2 + 2890);
  v103 = *(_OWORD *)(v2 + 2906);
  v15 = *(_OWORD *)(v2 + 2938);
  v104 = *(_OWORD *)(v2 + 2922);
  v105 = v15;
  v106 = v12;
  v114 = *(_QWORD *)(v2 + 3082);
  v17 = (__int16 *)(v5 + 40);
  v16 = *(_WORD *)(v5 + 40);
  v102 = v14;
  v116 = v16;
  v115 = *(_WORD *)(v5 + 44);
  v93 = (__int16 *)(v5 + 44);
  v90 = (_BYTE *)(v2 + 1690);
  v91 = v2 + 2890;
  SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), (_BYTE *)(v2 + 1690), (_WORD *)(v2 + 2890));
  v87 = a1;
  v18 = strlen(a1);
  v95 = v5;
  if (v18 << 16 <= -65536)
  {
    v40 = 0;
    v51 = 0;
    v49 = 0;
    __s[0] = 0;
    goto LABEL_96;
  }
  v82 = v6;
  v83 = v8;
  v89 = (__int16 *)(v5 + 40);
  v19 = 0;
  v20 = 0;
  v92 = (__int16)v9;
  v21 = (__int16)v18;
  v86 = 0;
  v84 = 0;
  v81 = v9;
  v22 = -v9;
  v96 = v2;
  while (2)
  {
    v23 = v20;
    v24 = malloc_type_calloc(1uLL, 0x54uLL, 0x1000040B41CA856uLL);
    *((_QWORD *)v122 + v23) = v24;
    if (!v24)
      return 8;
    v25 = (uint64_t)v24;
    v24[38] = v19;
    if (v21 < (__int16)v19)
    {
      v26 = 0;
      goto LABEL_15;
    }
    v26 = 0;
    v27 = *(unsigned __int8 *)(v2 + 1338);
    while (1)
    {
      v28 = v87[(__int16)v19];
      if (v28 != v27)
        break;
LABEL_14:
      if (v21 < (__int16)++v19)
        goto LABEL_15;
    }
    if (v28 > 0x2F || ((1 << v28) & 0xA00100000000) == 0)
    {
      v30 = v26++;
      __s[v30] = v28;
      goto LABEL_14;
    }
    v24[40] = v28;
LABEL_15:
    __s[v26] = 0;
    v24[39] = v19;
    if (!__s[0] && v23 && !**((_BYTE **)v122 + (v23 - 1)) || !__s[0] && *(_DWORD *)v2 == 102)
    {
LABEL_108:
      v62 = (__int16)v23;
LABEL_109:
      cleanup(v62, v2, __dst, (void **)v122, 1);
      return 11;
    }
    __strcpy_chk();
    v31 = (__int16)(*(_WORD *)(v25 + 76) + v92);
    v32 = *(_WORD *)(v25 + 78) + v92;
    if (v31 < v32)
    {
      v33 = 0;
      do
      {
        if (((*((_DWORD *)&v121 + ((unsigned __int16)v31 >> 5)) >> ~(_BYTE)v31) & 1) != 0)
        {
          *(_DWORD *)(v25 + 68 + 4 * ((unsigned __int16)(v22 + v31 - *(_WORD *)(v25 + 76)) >> 5)) |= 1 << ~(v22 + v31 - *(_BYTE *)(v25 + 76));
          v34 = *(unsigned __int8 *)(v25 + v33);
          if ((*(_DWORD *)(v7 + 4 * v34) & 0x20000000) != 0)
            LOBYTE(v34) = v34 - 32;
          *(_BYTE *)(v25 + v33) = v34;
        }
        ++v31;
        ++v33;
      }
      while (v32 != v31);
    }
    v94 = v23;
    v35 = strlen((const char *)v25);
    v36 = SLcap(v25, 0, (__int16)v35, (_QWORD *)(v25 + 68), v7);
    *(_BYTE *)(v25 + 65) = v36;
    *(_BYTE *)(v5 + 88) = v36;
    if (icisint(*(unsigned __int8 *)(v96 + 8), __s, v7))
      goto LABEL_28;
    v42 = *(unsigned __int8 *)(v96 + 8);
    if ((v42 > 9 || ((1 << v42) & 0x228) == 0) && icisupperletter((const char *)v25, v7))
      goto LABEL_28;
    if (!v42 || ((1 << (v42 - 1)) & 0x20008) != 0)
      *(_DWORD *)v96 = 3;
    v43 = ICverify(__s, (__int16)v35, v96);
    *(_BYTE *)(v95 + 88) = v85;
    if ((**(_BYTE **)(v95 + 3520) & 0x40) != 0 || (*(_WORD *)(v95 + 18) & 0x4000) != 0)
      return 11;
    v44 = *(unsigned __int8 *)(v96 + 8);
    if (v44 != 8 && v44 != 5 || (*(_BYTE *)(v96 + 24) & 0x40) == 0 || (__int16)v35 < 1)
    {
LABEL_60:
      if (v43 != 10)
        goto LABEL_67;
LABEL_28:
      v5 = v95;
      v2 = v96;
      *(_BYTE *)(v95 + 88) = *(_BYTE *)(v25 + 65);
      *(_DWORD *)(v95 + 92) = *(_DWORD *)(v25 + 68);
      *(_DWORD *)(v95 + 96) = *(_DWORD *)(v25 + 72);
      *(_DWORD *)(v96 + 4) = 11;
      *(_BYTE *)(v96 + 1339) = 69;
      if (*(_DWORD *)v96 == 102)
      {
        LOWORD(v23) = v94;
        if (*(_BYTE *)(v96 + 8) == 16 && (**(_BYTE **)(v95 + 3496) & 0x20) != 0
          || !*(_BYTE *)(v95 + 88) && **(unsigned __int8 **)(v95 + 72) - 1 < 3)
        {
          goto LABEL_108;
        }
        *(_WORD *)v95 = 102;
        if ((int)(strlen((const char *)v25) << 16) >= 1)
        {
          v37 = 0;
          do
          {
            v38 = *(unsigned __int8 *)(v25 + v37);
            if ((*(_DWORD *)(v7 + 4 * v38) & 0x40000000) != 0)
              LOBYTE(v38) = v38 + 32;
            *(_BYTE *)(v25 + v37++) = v38;
          }
          while ((__int16)strlen((const char *)v25) > v37);
        }
        if (ICcapcod((char *)v25, v96) == 2)
        {
          __strcpy_chk();
          SFlstini(v89, v93, v90, (_WORD *)v91);
        }
        v39 = strlen((const char *)v25);
        v40 = SFchkwrd(*(_QWORD *)(*(_QWORD *)(v96 + 3184) + 248), v95, (char *)v25, v39, **(unsigned __int8 **)(v95 + 72), *(_QWORD *)(v95 + 80));
        __strcpy_chk();
        SFlstini(v89, v93, v90, (_WORD *)v91);
        v23 = v94;
        if (v40 == 11)
          goto LABEL_108;
      }
      else
      {
        v41 = ICcapcod(__s, v96);
        v23 = v94;
        if (v41 == 11)
        {
          ++v86;
        }
        else if (v41 == 2)
        {
          __strcpy_chk();
          v23 = v94;
          SFlstini(v89, v93, v90, (_WORD *)v91);
          *(_QWORD *)(v96 + 1328) = 0;
        }
        v40 = 10;
      }
LABEL_70:
      v20 = v23 + 1;
      if (v21 < (__int16)(v19 + 2) || (++v19, v23 >= 6))
      {
        v49 = (__int16)v20;
        v50 = v86;
        v51 = (unsigned __int16)v86 == 1;
        if ((unsigned __int16)v86 == 1)
        {
          v17 = v89;
          if (v23 <= 5)
          {
            *(_WORD *)v95 = 100;
            *(_WORD *)(v95 + 2156) = -1;
            if (!*(_BYTE *)(v2 + 8) || ((1 << (*(_BYTE *)(v2 + 8) - 1)) & 0x20008) != 0)
              *(_DWORD *)v2 = 100;
            SFlstini(v89, v93, *(_BYTE **)(v95 + 48), *(_WORD **)(v95 + 64));
            *(_BYTE *)(*(_QWORD *)(v95 + 112) + 34) = 0;
            *(_BYTE *)(*(_QWORD *)(v95 + 112) + 44) = 0;
            v52 = *((_QWORD *)v122 + (__int16)v84);
            *(_BYTE *)(v95 + 88) = *(_BYTE *)(v52 + 65);
            *(_DWORD *)(v95 + 92) = *(_DWORD *)(v52 + 68);
            *(_DWORD *)(v95 + 96) = *(_DWORD *)(v52 + 72);
            while (1)
            {
              if (*(_BYTE *)(v2 + 8))
                v53 = ((1 << (*(_BYTE *)(v2 + 8) - 1)) & 0x20008) == 0;
              else
                v53 = 0;
              if (v53)
                v54 = SFcorrec(v120, 0, v82, v95);
              else
                v54 = IChu(v2, v120);
              if (v54)
                v55 = 20;
              else
                v55 = 21;
              if (*v89 > 19)
                v55 = 22;
              if (v55 != 20)
                break;
              if (!*(_BYTE *)(v2 + 8) || ((1 << (*(_BYTE *)(v2 + 8) - 1)) & 0x20008) != 0)
                *(_DWORD *)v2 = 101;
              *(_WORD *)v95 = 101;
            }
            v88 = v55;
            v117 = 0;
            v118 = 0;
            if (*v83)
            {
              if (v92 >= 1)
              {
                v63 = 0;
                v64 = v2 + 1614;
                do
                {
                  if (((*((_DWORD *)&v121 + ((unsigned __int16)v63 >> 5)) >> ~(_BYTE)v63) & 1) != 0)
                  {
                    v65 = *(unsigned __int8 *)(v64 + v63);
                    if ((*(_DWORD *)(v7 + 4 * v65) & 0x20000000) != 0)
                      LOBYTE(v65) = v65 - 32;
                    *(_BYTE *)(v64 + v63) = v65;
                  }
                  ++v63;
                }
                while (v81 != v63);
              }
              __strcpy_chk();
            }
            if ((__int16)v84 >= 1)
            {
              v66 = v84;
              v67 = v122;
              do
              {
                v67 = (_OWORD *)((char *)v67 + 8);
                __strcat_chk();
                __strcat_chk();
                --v66;
              }
              while (v66);
            }
            if ((__int16)(v84 + 1) < v49)
            {
              v68 = (__int16)(v84 + 1);
              do
              {
                __strcat_chk();
                __strcat_chk();
                ++v68;
              }
              while ((unsigned __int16)v49 != (unsigned __int16)v68);
            }
            *(_DWORD *)v100 = 0;
            if (*(__int16 *)(v95 + 40) >= 1)
            {
              v69 = 0;
              v70 = *(__int16 *)(v95 + 42);
              v71 = *(__int16 *)(v95 + 56);
              while (1)
              {
                __s[0] = 0;
                __strcpy_chk();
                __strcat_chk();
                __strcat_chk();
                v72 = strlen(__s);
                if (SFadd(__s, v72, &v100[1], v100, v70, v71, (uint64_t)__src, (uint64_t)v98) == 8)
                  break;
                if (++v69 >= *v89)
                  goto LABEL_135;
              }
              *((_WORD *)&__src[75] + v69) = 0;
              v73 = v100[1];
              *(_WORD *)(v96 + 1686) = v100[1];
              *v89 = v73;
            }
LABEL_135:
            memcpy(v90, __src, 0x4B0uLL);
            v74 = v98[9];
            v75 = v98[11];
            *(_OWORD *)(v91 + 160) = v98[10];
            *(_OWORD *)(v91 + 176) = v75;
            *(_QWORD *)(v91 + 192) = v99;
            v76 = v98[5];
            v77 = v98[7];
            *(_OWORD *)(v91 + 96) = v98[6];
            *(_OWORD *)(v91 + 112) = v77;
            *(_OWORD *)(v91 + 128) = v98[8];
            *(_OWORD *)(v91 + 144) = v74;
            v78 = v98[1];
            v79 = v98[3];
            *(_OWORD *)(v91 + 32) = v98[2];
            *(_OWORD *)(v91 + 48) = v79;
            *(_OWORD *)(v91 + 64) = v98[4];
            *(_OWORD *)(v91 + 80) = v76;
            *(_OWORD *)v91 = v98[0];
            *(_OWORD *)(v91 + 16) = v78;
            v2 = v96;
            *(_WORD *)v95 = 104;
            if (!*(_BYTE *)(v96 + 8) || ((0x20008uLL >> (*(_BYTE *)(v96 + 8) - 1)) & 1) != 0)
              *(_DWORD *)v96 = 104;
            v23 = v94;
            v50 = v86;
            v40 = v88;
            v51 = (unsigned __int16)v86 == 1;
          }
        }
        else
        {
          v17 = v89;
        }
        if (v50)
          goto LABEL_140;
        __s[0] = 0;
        if (v49 >= 1)
        {
          v80 = 0;
          do
          {
            __strcat_chk();
            __strcat_chk();
            ++v80;
          }
          while (v23 + 1 != v80);
        }
LABEL_96:
        __s[strlen(__s)] = 0;
        SFlstini(v17, v93, *(_BYTE **)(v95 + 48), *(_WORD **)(v95 + 64));
        cleanup(v49, v2, __dst, (void **)v122, 0);
        v56 = strlen(__s);
        SFadd(__s, v56, v17, v93, *(__int16 *)(v95 + 42), *(__int16 *)(v95 + 56), *(_QWORD *)(v95 + 48), *(_QWORD *)(v95 + 64));
        *(_WORD *)(v2 + 1686) = *(_WORD *)(v95 + 40);
        *(_WORD *)v95 = 104;
        if (!*(_BYTE *)(v2 + 8) || ((1 << (*(_BYTE *)(v2 + 8) - 1)) & 0x20008) != 0)
        {
          *(_DWORD *)v2 = 104;
LABEL_99:
          if (v49 >= 1)
          {
            v57 = (unsigned __int16)v49;
            v58 = (void **)v122;
            do
            {
              v59 = *v58++;
              free(v59);
              --v57;
            }
            while (v57);
          }
          if (v51)
            v60 = v40;
          else
            v60 = 21;
          if (v49 <= 6)
            return v60;
          else
            return 21;
        }
LABEL_140:
        if (*(_DWORD *)v2 == 102)
          *(_WORD *)v95 = 102;
        goto LABEL_99;
      }
      continue;
    }
    break;
  }
  v45 = v35;
  v46 = (unsigned __int8 *)v25;
  while (1)
  {
    v47 = *v46++;
    v48 = *(_DWORD *)(v7 + 4 * v47);
    if ((v48 & 0x40000000) != 0 && (v48 & 0x4064000) != 0)
      break;
    if (!--v45)
      goto LABEL_60;
  }
  v43 = 11;
LABEL_67:
  v2 = v96;
  if (*(_DWORD *)v96 == 102)
  {
    v62 = (__int16)v94;
    goto LABEL_109;
  }
  v23 = v94;
  if ((unsigned __int16)(v86 + 1) < 2u)
  {
    ++v86;
    v40 = v43;
    __strcpy_chk();
    v84 = v94;
    v5 = v95;
    goto LABEL_70;
  }
  cleanup((__int16)v94, v96, __dst, (void **)v122, 1);
  return 21;
}

void cleanup(unsigned int a1, uint64_t a2, __int16 *__src, void **a4, int a5)
{
  _WORD *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int16 v20;
  uint64_t v21;
  void *v22;

  v9 = *(_WORD **)(*(_QWORD *)(a2 + 3184) + 264);
  if (__src[701] >= 1)
  {
    memcpy((void *)(a2 + 1690), __src, 0x4B0uLL);
    *(_OWORD *)(a2 + 2890) = *((_OWORD *)__src + 75);
    v11 = *((_OWORD *)__src + 76);
    v12 = *((_OWORD *)__src + 77);
    v13 = *((_OWORD *)__src + 79);
    *(_OWORD *)(a2 + 2938) = *((_OWORD *)__src + 78);
    *(_OWORD *)(a2 + 2954) = v13;
    *(_OWORD *)(a2 + 2906) = v11;
    *(_OWORD *)(a2 + 2922) = v12;
    v14 = *((_OWORD *)__src + 80);
    v15 = *((_OWORD *)__src + 81);
    v16 = *((_OWORD *)__src + 83);
    *(_OWORD *)(a2 + 3002) = *((_OWORD *)__src + 82);
    *(_OWORD *)(a2 + 3018) = v16;
    *(_OWORD *)(a2 + 2970) = v14;
    *(_OWORD *)(a2 + 2986) = v15;
    v17 = *((_OWORD *)__src + 84);
    v18 = *((_OWORD *)__src + 85);
    v19 = *((_OWORD *)__src + 86);
    *(_QWORD *)(a2 + 3082) = *((_QWORD *)__src + 174);
    *(_OWORD *)(a2 + 3050) = v18;
    *(_OWORD *)(a2 + 3066) = v19;
    *(_OWORD *)(a2 + 3034) = v17;
    v20 = __src[701];
    v9[20] = v20;
    v9[22] = __src[700];
    *(_WORD *)(a2 + 1686) = v20;
  }
  if (a5)
  {
    if (a1 <= 0x7FFE)
    {
      v21 = (unsigned __int16)(a1 + 1);
      do
      {
        v22 = *a4++;
        free(v22);
        --v21;
      }
      while (v21);
    }
    if (*(_DWORD *)a2 == 102)
      *v9 = 102;
  }
}

uint64_t icisint(int a1, char *__s, uint64_t a3)
{
  int v6;
  _BOOL4 v8;
  _BYTE v10[65];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v6 = strlen(__s);
  __strcpy_chk();
  v8 = ((1 << (a1 - 1)) & 0x11660) != 0 || a1 == 0;
  if (a1 != 11 && v8 && __s[v6 - 1] == 46)
    v10[v6 - 1] = 0;
  return SLisint(v10, a3);
}

BOOL icisupperletter(const char *a1, uint64_t a2)
{
  size_t v4;

  v4 = strlen(a1);
  if (v4 == 2)
  {
    if (a1[1] != 46)
      return 0;
  }
  else if (v4 != 1)
  {
    return 0;
  }
  return (*(_DWORD *)(a2 + 4 * *(unsigned __int8 *)a1) & 0x40000000) != 0;
}

uint64_t ICdblchk(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  char *v4;
  char *v5;
  size_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  char __dst[65];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 3184);
  buildfullword(__dst, a1, 0x41uLL);
  if (!*(_BYTE *)(a1 + 1417)
    && !*(_BYTE *)(*(_QWORD *)(v2 + 80) + 65)
    && !SLstrcmp((_BYTE *)(a1 + 1339), (unsigned __int8 *)__dst))
  {
    *(_QWORD *)(a1 + 1328) |= 0x8000uLL;
    v3 = *(_BYTE **)(v2 + 72);
    if (v3 && icwrdlist(__dst, v3))
      *(_QWORD *)(a1 + 1328) &= ~0x8000uLL;
    if (*(_BYTE *)(a1 + 8) == 6
      && *(unsigned __int8 *)(*(_QWORD *)(v2 + 80) + 130) != *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184)
                                                                                              + 264)
                                                                                  + 88))
    {
      *(_QWORD *)(a1 + 1328) &= ~0x8000uLL;
    }
  }
  v4 = (char *)(*(_QWORD *)(v2 + 80) + 65);
  if (*(_BYTE *)(a1 + 1482))
  {
    strncpy(v4, (const char *)(a1 + 1482), 0x40uLL);
    v4 = (char *)(*(_QWORD *)(v2 + 80) + 129);
  }
  *v4 = 0;
  buildfullword((char *)(a1 + 1339), a1, 0x41uLL);
  v5 = *(char **)(v2 + 80);
  v6 = strlen((const char *)(a1 + 1339));
  if (v6 >= 0x40)
    v7 = 64;
  else
    v7 = v6;
  if (v7)
    strncpy(v5, (const char *)(a1 + 1339), v7);
  v5[v7] = 0;
  v8 = *(_QWORD *)(v2 + 80);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 264);
  *(_WORD *)(v8 + 132) = *(_WORD *)(v9 + 18);
  *(_BYTE *)(v8 + 130) = *(_BYTE *)(v9 + 88);
  return 0;
}

size_t buildfullword(char *__dst, uint64_t a2, size_t __size)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  size_t result;
  uint64_t v12;
  const char *v13;
  int v14;
  uint64_t v15;

  v5 = __dst;
  v6 = *(_QWORD *)(a2 + 3184);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 56);
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 264) + 112);
  v10 = *(unsigned __int8 *)(v8 + 34);
  v9 = (const char *)(v8 + 34);
  if (v10)
    goto LABEL_2;
  if (*(_BYTE *)(a2 + 8) == 1 && *(_BYTE *)(a2 + 1614))
  {
    v9 = (const char *)(a2 + 1614);
LABEL_2:
    strlcpy(__dst, v9, __size);
    result = strlcat(v5, (const char *)(a2 + 1547), __size);
    goto LABEL_7;
  }
  result = strlcpy(__dst, (const char *)(a2 + 1547), __size);
LABEL_7:
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264) + 112);
  v14 = *(unsigned __int8 *)(v12 + 44);
  v13 = (const char *)(v12 + 44);
  if (!v14)
  {
    if (*(_BYTE *)(a2 + 8) != 1 || !*(_BYTE *)(a2 + 1624))
      goto LABEL_9;
    v13 = (const char *)(a2 + 1624);
  }
  result = strlcat(v5, v13, __size);
  do
  {
LABEL_9:
    v15 = *v5;
    if ((*(_DWORD *)(v7 + 4 * v15) & 0x40000000) != 0)
      LOBYTE(v15) = v15 + 32;
    *v5++ = v15;
  }
  while ((_BYTE)v15);
  return result;
}

uint64_t icwrdlist(_BYTE *a1, _BYTE *a2)
{
  unsigned int v4;
  __int16 v5;
  unsigned int v6;
  unsigned __int8 v8[65];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (*a1)
  {
    while (1)
    {
      v4 = *a2;
      if (!*a2)
        break;
      v5 = 0;
      while (v4 > 0x20 || ((1 << v4) & 0x100002401) == 0)
      {
        v8[v5] = v4;
        v6 = *++a2;
        v4 = v6;
        ++v5;
      }
      v8[v5] = 0;
      if (*a2)
        ++a2;
      if (!SLstrcmp(a1, v8))
        return 1;
    }
  }
  return 0;
}

uint64_t ICdblver(const char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  int v14;
  __int16 v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  int v20;
  _DWORD *v21;
  unsigned int v22;
  int v23;
  char v24;
  int v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  _DWORD *v32;
  __int16 *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  char v40;
  char v41;
  uint64_t v42;
  unsigned __int16 *v43;
  unsigned __int8 *v44;
  int v45;
  int v46;
  int v47;
  int v48;
  unint64_t v49;
  char v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  void *v55;
  uint64_t i;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  _DWORD *v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  unsigned __int8 *v64;
  int v65;
  uint64_t *v66;
  uint32x2_t v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  const char *v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  const char *v77;
  size_t v78;
  size_t v79;
  size_t v80;
  __int16 v81;
  const char *v82;
  unint64_t v83;
  const char *v84;
  size_t v85;
  unint64_t v86;
  size_t v87;
  size_t v88;
  uint64_t v89;
  void *v90;
  char v92;
  uint64_t v93;
  uint64_t *v94;
  __int16 *v95;
  __int16 *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  unint64_t v104;
  _OWORD v105[3];
  uint64_t v106;
  char __s[65];
  char v108[65];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 3184);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 56);
  v106 = 0;
  memset(v105, 0, sizeof(v105));
  v6 = *(_QWORD *)(v4 + 264);
  v96 = (__int16 *)(v6 + 40);
  v97 = v4;
  v95 = (__int16 *)(v6 + 44);
  SFlstini((_WORD *)(v6 + 40), (_WORD *)(v6 + 44), *(_BYTE **)(v6 + 48), *(_WORD **)(v6 + 64));
  v100 = (_QWORD *)(v6 + 92);
  v93 = *(_QWORD *)(v6 + 92);
  v92 = *(_BYTE *)(v6 + 88);
  v7 = strlen(a1);
  v8 = 0;
  v9 = 0;
  v99 = (char *)(a2 + 3090);
  *(_BYTE *)(a2 + 3090) = 0;
  v10 = v7;
  v103 = (uint64_t *)(v6 + 3480);
  v94 = (uint64_t *)(a2 + 3156);
  do
  {
    v11 = v8;
    v12 = malloc_type_calloc(1uLL, 0xFCuLL, 0x1000040D823820EuLL);
    *((_QWORD *)v105 + v11) = v12;
    if (!v12)
      return 8;
    v13 = v12;
    *(_OWORD *)((char *)v12 + 236) = 0u;
    v12[13] = 0u;
    v12[14] = 0u;
    v12[11] = 0u;
    v12[12] = 0u;
    v12[9] = 0u;
    v12[10] = 0u;
    v12[7] = 0u;
    v12[8] = 0u;
    v12[5] = 0u;
    v12[6] = 0u;
    v12[3] = 0u;
    v12[4] = 0u;
    v12[1] = 0u;
    v12[2] = 0u;
    v14 = (__int16)v9;
    *v12 = 0u;
    *((_DWORD *)v12 + 17) = 11;
    v15 = 0;
    if (v10 > (__int16)v9)
    {
      v16 = *(unsigned __int8 *)(a2 + 1338);
      v17 = (__int16)v9;
      while (1)
      {
        v18 = a1[(__int16)v9];
        if ((_DWORD)v18 == v16)
        {
          ++v9;
        }
        else
        {
          if ((v18 | 2) == 0x2F)
          {
            *((_WORD *)v12 + 125) = v18;
            goto LABEL_15;
          }
          if ((*(_DWORD *)(v5 + 4 * v18) & 0x40000000) != 0)
            LOBYTE(v18) = v18 + 32;
          __s[v15++] = v18;
        }
        v17 = (__int16)++v9;
        if (v10 <= (__int16)v9)
          goto LABEL_15;
      }
    }
    v17 = (__int16)v9;
LABEL_15:
    v104 = v11;
    __s[v15] = 0;
    v19 = SLcap((uint64_t)a1, v14, (__int16)v9, v100, v5);
    *(_BYTE *)(v6 + 88) = v19;
    *((_BYTE *)v13 + 213) = v19;
    *((_DWORD *)v13 + 54) = *(_DWORD *)(v6 + 92);
    *((_DWORD *)v13 + 55) = *(_DWORD *)(v6 + 96);
    *(_WORD *)(v6 + 42) = 100;
    if (!__s[0] && v11 && **((_BYTE **)v105 + (v11 - 1)))
      v20 = 10;
    else
      v20 = 11;
    if (v15 != 1)
    {
      if (v15 != 2 || __s[1] != 46)
        goto LABEL_32;
      goto LABEL_31;
    }
    if ((*(_DWORD *)(v5 + 4 * __s[0]) & 0x60000040) != 0)
    {
      *(_WORD *)(v6 + 102) = 1;
      **(_BYTE **)(v6 + 72) = v19;
      v21 = *(_DWORD **)(v6 + 80);
      *v21 = *(_DWORD *)(v6 + 92);
      v21[1] = *(_DWORD *)(v6 + 96);
      if (*(_BYTE *)(a2 + 8) == 16)
      {
        v22 = __s[0] - 97;
        if (v22 > 0x19)
          goto LABEL_122;
        v23 = 1 << v22;
        if ((v23 & 0x379864E) == 0)
        {
          if ((v23 & 0x8639B1) != 0)
          {
            v24 = 1;
LABEL_24:
            **(_BYTE **)(v6 + 3496) |= v24;
            goto LABEL_25;
          }
LABEL_122:
          v24 = 2;
          goto LABEL_24;
        }
      }
LABEL_25:
      v20 = 10;
    }
    if (v10 != v17 || !*(_BYTE *)(a2 + 1412))
      goto LABEL_32;
LABEL_31:
    if ((*(_DWORD *)v100 & 0x80000000) != 0)
    {
      **(_BYTE **)(v6 + 72) = 0;
      *(_WORD *)(v6 + 102) = 1;
      **(_QWORD **)(v6 + 80) = 0;
      *(_WORD *)(v6 + 18) |= 0x800u;
LABEL_44:
      v25 = 10;
      goto LABEL_45;
    }
LABEL_32:
    if (v20 != 11)
      goto LABEL_44;
    if (*(_BYTE *)(a2 + 8) == 3)
      period_to_puntvolat(a2, __s);
    v25 = ICverify(__s, v15, a2);
    if (v25 == 11)
    {
      if ((*(_DWORD *)(v5 + 4 * __s[0]) & 0x8000000) != 0)
      {
        v26 = (v15 - 1);
        if (v15 >= 1 && __s[v26] == 46)
        {
          __s[v26] = 0;
          v27 = 1;
        }
        else
        {
          v27 = 0;
        }
        if (SLisint(__s, v5))
        {
          *(_WORD *)(v6 + 102) = 1;
          **(_BYTE **)(v6 + 72) = 0;
          **(_QWORD **)(v6 + 80) = 0;
          if (*(_BYTE *)(a2 + 8) == 16)
          {
            if ((*(_DWORD *)(v5 + 4 * __s[2]) & 0x8000000) != 0)
            {
              v50 = 2;
LABEL_106:
              **(_BYTE **)(v6 + 3496) |= v50;
            }
            else if (__s[0] == 56 || !SLstrncmp(__s, "11", 2) || !SLstrncmp(__s, "18", 2))
            {
              v50 = 1;
              goto LABEL_106;
            }
          }
          if (!v27)
            goto LABEL_44;
          v51 = *(unsigned __int8 *)(a2 + 8);
          v52 = ((1 << (v51 - 1)) & 0x1260) != 0 || v51 == 0;
          v53 = !v52;
          if (!v52)
            *(_WORD *)(v6 + 102) = 0;
          if (v15 >= 1)
          {
            __s[v15 - 1] = 46;
            __s[v15] = 0;
          }
          if (!v53)
            goto LABEL_44;
        }
      }
      if (*(_BYTE *)(a2 + 8) == 6)
        v25 = ICcmpspc(__s, v15, a2);
      else
        v25 = 11;
    }
LABEL_45:
    if (!*(_BYTE *)(a2 + 8) || ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x11660) != 0)
    {
      v28 = **(_WORD **)(v6 + 3520);
      if ((v28 & 0x200) != 0)
      {
        *(_WORD *)(a2 + 1322) |= 4u;
      }
      else if ((v28 & 0x40) != 0)
      {
        v29 = *(_WORD *)(a2 + 1612);
        *(_WORD *)(a2 + 1322) |= 2u;
        if (v25 != 11 && !*(_DWORD *)(a2 + 1308))
        {
          __strcpy_chk();
          __strcpy_chk();
          *(_WORD *)(a2 + 1612) = strlen(__s);
          ICcmpmnd(a2);
          __strcpy_chk();
          *(_WORD *)(a2 + 1612) = v29;
        }
      }
    }
    if ((*(_BYTE *)(a2 + 1328) & 0x10) != 0
      || (*(_WORD *)(v6 + 18) & 1) != 0
      || (*(_WORD *)(v6 + 18) & 0x4000) != 0
      && v104
      && SLisint(*((_BYTE **)v105 + (v104 - 1)), v5)
      || v25 == 11)
    {
      *(_BYTE *)(v6 + 88) = v92;
      *(_QWORD *)(v6 + 92) = v93;
      if ((v104 & 0x8000) == 0)
      {
        v54 = 0;
        do
        {
          v55 = (void *)*((_QWORD *)v105 + v54);
          if (v55)
            free(v55);
          ++v54;
        }
        while (v104 + 1 != v54);
      }
      return 11;
    }
    if (*v99)
    {
      __strcpy_chk();
      *((_DWORD *)v13 + 35) = *(_DWORD *)(a2 + 3156);
      *((_DWORD *)v13 + 36) = *(_DWORD *)(a2 + 3160);
      *(_BYTE *)(a2 + 3090) = 0;
      *v94 = 0;
    }
    v30 = 1 << (*(_BYTE *)(a2 + 8) - 1);
    if (!*(_BYTE *)(a2 + 8))
      LODWORD(v30) = -1;
    v31 = *(_DWORD *)(a2 + 1308);
    if ((v30 & 0x31668) != 0)
    {
      if ((v30 & 0x20008) != 0 && v31)
      {
        *(_DWORD *)a2 = 7;
        if (IChu(a2, __s) == 8)
          *(_DWORD *)(a2 + 1308) = 0;
        *(_DWORD *)a2 = 3;
      }
      *((_DWORD *)v13 + 60) = *(_DWORD *)v103;
      v32 = (_DWORD *)(v6 + 3484);
    }
    else
    {
      if (!v31)
        goto LABEL_73;
      v33 = *(__int16 **)(v97 + 216);
      *v33 = 1;
      IHhyp(__s, v33);
      v34 = *(_QWORD *)(v97 + 216);
      *((_DWORD *)v13 + 60) = *(_DWORD *)(v34 + 8);
      v32 = (_DWORD *)(v34 + 12);
    }
    *((_DWORD *)v13 + 61) = *v32;
LABEL_73:
    *v103 = 0;
    __strcpy_chk();
    if (v25 == 2)
      strncpy(__s, *(const char **)(v6 + 48), 0x41uLL);
    v35 = *(__int16 *)(v6 + 102);
    if (v35 >= 1)
    {
      v36 = 0;
      do
      {
        v37 = *(_QWORD *)(v6 + 72);
        if (*(_BYTE *)(v37 + v36) == 4)
        {
          *(_BYTE *)(v37 + v36) = 0;
          LOWORD(v35) = *(_WORD *)(v6 + 102);
        }
        ++v36;
      }
      while (v36 < (__int16)v35);
    }
    v38 = ICcapcod(__s, a2);
    v39 = *(const char **)(v6 + 48);
    if (*v39)
      strncpy((char *)v13 + 148, v39, 0x41uLL);
    if (v38 == 10)
    {
      v40 = *((_BYTE *)v13 + 213);
      *(_QWORD *)((char *)v13 + 228) = *((_QWORD *)v13 + 27);
    }
    else
    {
      v40 = SLcap((uint64_t)v13 + 148, 0, v15, (_OWORD *)((char *)v13 + 228), v5);
    }
    *((_BYTE *)v13 + 226) = v40;
    if ((*(_DWORD *)(v5 + 4 * __s[0]) & 0x8000000) != 0)
      v41 = 5;
    else
      v41 = v40;
    *((_BYTE *)v13 + 226) = v41;
    if (v38 < v25)
      v25 = v38;
    *((_WORD *)v13 + 124) = v15;
    LODWORD(v42) = *(__int16 *)(v6 + 102);
    *((_WORD *)v13 + 112) = *(_WORD *)(v6 + 102);
    if ((int)v42 >= 1)
    {
      v42 = (unsigned __int16)v42;
      v43 = *(unsigned __int16 **)(v6 + 3520);
      v44 = *(unsigned __int8 **)(v6 + 3496);
      v45 = *((unsigned __int16 *)v13 + 118);
      v46 = *((unsigned __int8 *)v13 + 238);
      do
      {
        v47 = *v43++;
        v45 |= v47;
        *((_WORD *)v13 + 118) = v45;
        v48 = *v44++;
        v46 |= v48;
        *((_BYTE *)v13 + 238) = v46;
        --v42;
      }
      while (v42);
    }
    *((_DWORD *)v13 + 17) = v25;
    SFlstini(v96, v95, *(_BYTE **)(v6 + 48), *(_WORD **)(v6 + 64));
    *(_BYTE *)(*(_QWORD *)(v97 + 80) + 65) = 0;
    __strcpy_chk();
    *(_WORD *)(*(_QWORD *)(v97 + 80) + 132) = *((_WORD *)v13 + 118);
    v49 = v104;
    v8 = v104 + 1;
    if (v25 == 11)
      break;
    if (v10 < (__int16)(v9 + 2))
      break;
    ++v9;
  }
  while (v104 < 6);
  LODWORD(v8) = (__int16)v8;
  if ((__int16)v8 >= 7)
  {
    for (i = 0; i != 40; i += 8)
    {
      v57 = *(void **)((char *)v105 + i);
      if (v57)
        free(v57);
    }
    return 11;
  }
  *(_WORD *)(a2 + 1322) |= 0x100u;
  v59 = *(_QWORD *)&v105[0];
  **(_BYTE **)(v6 + 3496) = *(_BYTE *)(*(_QWORD *)&v105[0] + 238);
  **(_BYTE **)(v6 + 72) = *(_BYTE *)(v59 + 226);
  v60 = *(_DWORD **)(v6 + 80);
  *v60 = *(_DWORD *)(v59 + 228);
  v102 = (uint64_t)v60;
  v60[1] = *(_DWORD *)(v59 + 232);
  if (*(_DWORD *)(a2 + 1308) || !*(_BYTE *)(a2 + 8) || ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x11668) != 0)
  {
    *(_DWORD *)v103 = *(_DWORD *)(v59 + 240);
    *(_DWORD *)(v6 + 3484) = *(_DWORD *)(v59 + 244);
    v101 = v6 + 3480;
  }
  else
  {
    v101 = 0;
    *v103 = 0;
  }
  if ((*(_WORD *)(a2 + 1322) & 0x46) != 0)
  {
    *(_DWORD *)(a2 + 3156) = *(_DWORD *)(v59 + 140);
    *(_DWORD *)(a2 + 3160) = *(_DWORD *)(v59 + 144);
    v98 = a2 + 3156;
  }
  else
  {
    v98 = 0;
  }
  v58 = *(unsigned int *)(v59 + 68);
  if ((int)v8 >= 2)
  {
    v61 = 0;
    v62 = 0;
    v63 = *(_WORD *)(v59 + 248);
    do
    {
      v64 = (unsigned __int8 *)*((_QWORD *)v105 + v61 + 1);
      v65 = *((_DWORD *)v64 + 17);
      if (v65 >= (int)v58)
        v58 = v58;
      else
        v58 = v65;
      *(uint32x2_t *)(v64 + 228) = vshr_n_u32(*(uint32x2_t *)(v64 + 228), 1uLL);
      **(_BYTE **)(v6 + 72) = ICcomcap(**(unsigned __int8 **)(v6 + 72), *(uint64_t **)(v6 + 80), v63, v64[226], (uint64_t *)(v64 + 228), v102, 0);
      *(_WORD *)(v6 + 102) = 1;
      if (*(_DWORD *)(a2 + 1308) || !*(_BYTE *)(a2 + 8) || ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x11668) != 0)
      {
        v66 = (uint64_t *)(v64 + 240);
        v67 = vshr_n_u32(*(uint32x2_t *)(v64 + 240), 1uLL);
        *((uint32x2_t *)v64 + 30) = v67;
        if (*(_DWORD *)(a2 + 1308))
        {
          v68 = *(unsigned __int8 *)(*(__int16 *)(*((_QWORD *)v105 + v61) + 248) + *((_QWORD *)v105 + v61) - 1);
          if (v68 != 46
            && ((*(_DWORD *)(v5 + 4 * v68) & 0x8000000) == 0 || (*(_DWORD *)(v5 + 4 * *v64) & 0x8000000) == 0))
          {
            *(_DWORD *)v66 = v67.i32[0] | 0x80000000;
          }
        }
        ICcomcap(3u, v103, v63, 3u, v66, v101, 0);
      }
      v69 = *(_WORD *)(a2 + 1322);
      if ((v69 & 0x46) != 0)
      {
        *(uint32x2_t *)(v64 + 140) = vshr_n_u32(*(uint32x2_t *)(v64 + 140), 1uLL);
        if ((v69 & 6) != 0)
        {
          v70 = *((_QWORD *)v105 + v61);
          if (*(_BYTE *)(v70 + 72))
            v71 = strlen((const char *)(v70 + 72));
          else
            v71 = *(unsigned __int16 *)(v70 + 248);
          v62 += v71;
          ICcomcap(3u, v94, (__int16)v62, 3u, (uint64_t *)(v64 + 140), v98, 0);
        }
        v49 = v104;
      }
      v63 += *((_WORD *)v64 + 124) + 1;
      ++v61;
    }
    while (v49 != v61);
  }
  v72 = *(_QWORD *)(v6 + 112);
  v74 = *(unsigned __int8 *)(v72 + 34);
  v73 = (const char *)(v72 + 34);
  if (v74)
    *v103 = (uint64_t)vshl_u32(*(uint32x2_t *)v103, (uint32x2_t)vneg_s32(vdup_n_s32((__int16)strlen(v73))));
  v75 = (unsigned __int16)v49;
  v108[0] = 0;
  if ((_DWORD)v58 == 2)
  {
    if ((unsigned __int16)v49 <= 0x7FFEu)
    {
      v76 = 0;
      do
      {
        v77 = (const char *)*((_QWORD *)v105 + v76);
        if (v77[148] && (v78 = strlen(v108), strlen(v77 + 148) + v78 < 0x41)
          || (v79 = strlen(v108), strlen(v77) + v79 <= 0x40))
        {
          __strcat_chk();
        }
        if (v76 < (unsigned __int16)v104)
        {
          v80 = strlen(v108);
          if (strlen(v77 + 250) + v80 <= 0x40)
            __strcat_chk();
        }
        ++v76;
      }
      while (v104 + 1 != v76);
    }
    v81 = strlen(v108);
    SFadd(v108, v81, v96, v95, *(__int16 *)(v6 + 42), *(__int16 *)(v6 + 56), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 64));
  }
  v82 = (const char *)(a2 + 3090);
  if ((*(_WORD *)(a2 + 1322) & 0x46) != 0 && v75 <= 0x7FFE)
  {
    v83 = 0;
    do
    {
      v84 = (const char *)*((_QWORD *)v105 + v83);
      if (v84[72] && (v85 = strlen(v82), v86 = strlen(v84 + 72) + v85, v82 = v99, v86 < 0x41)
        || (v87 = strlen(v82), strlen(v84) + v87 <= 0x40))
      {
        __strcat_chk();
      }
      if (v83 < (unsigned __int16)v104)
      {
        v88 = strlen(v82);
        if (strlen(v84 + 250) + v88 <= 0x40)
          __strcat_chk();
      }
      ++v83;
    }
    while (v104 + 1 != v83);
  }
  *(_BYTE *)(v6 + 88) = v92;
  *(_QWORD *)(v6 + 92) = v93;
  if (v75 <= 0x7FFE)
  {
    v89 = 0;
    do
    {
      v90 = (void *)*((_QWORD *)v105 + v89);
      if (v90)
        free(v90);
      ++v89;
    }
    while (v104 + 1 != v89);
  }
  return v58;
}

uint64_t ICfndchk(uint64_t a1)
{
  __int16 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v18;
  __int16 v19;
  __int16 v20;
  _WORD *v21;
  int v22;
  char *v23;
  __int16 v24;
  uint64_t v26;
  __int16 v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  __int16 v32;
  uint64_t v33;
  _BYTE *v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  _BYTE *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  char *v44;
  unsigned int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  int v55;
  int v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  int v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  uint64_t v72;
  char v73[65];
  char __s[65];
  _QWORD v75[3];

  v75[1] = *MEMORY[0x1E0C80C00];
  v75[0] = 0;
  v2 = *(__int16 **)(a1 + 3184);
  v3 = *((_QWORD *)v2 + 33);
  v4 = *((_QWORD *)v2 + 31);
  if (*(__int16 *)(v3 + 102) < 2)
  {
LABEL_5:
    LOWORD(v5) = 0;
  }
  else
  {
    v5 = 0;
    while (*(unsigned __int8 *)(*(_QWORD *)(v3 + 72) + v5) != *(unsigned __int8 *)(v3 + 88))
    {
      if (*(unsigned __int16 *)(v3 + 102) == ++v5)
        goto LABEL_5;
    }
  }
  v6 = *(_QWORD *)(v4 + 56);
  v7 = *((_QWORD *)v2 + 35);
  v8 = **(unsigned __int16 **)(v3 + 112);
  v9 = *(unsigned __int16 *)(v4 + 88);
  v10 = *(unsigned __int8 *)(a1 + 8);
  if (v10 == 15)
  {
    v12 = ICgreek(a1, 1);
    goto LABEL_19;
  }
  if (v10 == 16 && *(_BYTE *)(a1 + 1339) == 97)
  {
    if (*(_BYTE *)(a1 + 1340) == 110)
    {
      if (*(_BYTE *)(a1 + 1341) || *(_BYTE *)(*(_QWORD *)(v3 + 3496) + (unsigned __int16)v5))
        goto LABEL_18;
      *(_QWORD *)(a1 + 1328) = 0x10000000;
      v11 = 30;
    }
    else
    {
      if (*(_BYTE *)(a1 + 1340) || (*(_BYTE *)(*(_QWORD *)(v3 + 3496) + (unsigned __int16)v5) & 1) == 0)
        goto LABEL_18;
      *(_QWORD *)(a1 + 1328) = 0x10000000;
      v11 = 29;
    }
    *(_WORD *)(a1 + 1404) = v11;
  }
LABEL_18:
  v12 = 10;
LABEL_19:
  if (!*(_DWORD *)(a1 + 1308))
    goto LABEL_33;
  if (*(_BYTE *)(a1 + 8)
    && ((1 << (*(_BYTE *)(a1 + 8) - 1)) & 0x11660) == 0
    && (*(_WORD *)(v3 + 18) & 0xC00) == 0
    && ((*(_WORD *)(a1 + 1322) & 0x20) == 0 || !*(_DWORD *)(v3 + 3480) && !*(_DWORD *)(v3 + 3484)))
  {
    v71 = v8;
    v72 = v7;
    v73[0] = 0;
    __strcpy_chk();
    v26 = *(_QWORD *)(v3 + 112);
    v70 = strlen((const char *)(v26 + 34));
    if ((*v2 & 4) != 0)
    {
      v27 = strlen((const char *)(v26 + 44));
      __s[strlen(__s) - v27] = 0;
    }
    v28 = strlen(__s);
    __strcpy_chk();
    if (*(_BYTE *)(a1 + 8) == 3)
    {
      if (*(_DWORD *)(v3 + 3472) && *(_DWORD *)(v3 + 3480))
      {
        v29 = (__int16)v28;
        if (v28 << 16 <= 0x20000)
        {
          v32 = 0;
          v30 = 1;
        }
        else
        {
          v30 = 1;
          v31 = 1;
          while (((*(_DWORD *)(v3 + 3480 + 4 * ((unsigned __int16)v31 >> 5)) >> ~(_BYTE)v30) & 1) == 0
               || __s[v31] != 108
               || __s[v30 + 1] != 108)
          {
            v30 = ++v31;
            if ((__int16)v28 - 1 <= v31)
            {
              v32 = 0;
              goto LABEL_177;
            }
          }
          v32 = v31 + v70;
        }
LABEL_177:
        __strncat_chk();
        if (!v32)
        {
          v53 = 0;
          goto LABEL_157;
        }
        if (v29 == v30)
        {
          v53 = 1;
          goto LABEL_157;
        }
        *(_WORD *)&v73[v32 + 1] = 183;
        v53 = 1;
      }
      else
      {
        v53 = 0;
      }
    }
    else
    {
      v53 = 0;
    }
    __strcat_chk();
LABEL_157:
    __strcat_chk();
    if ((*(_WORD *)(a1 + 1322) & 0x100) == 0)
    {
      if (!*(_BYTE *)(a1 + 8) || ((1 << (*(_BYTE *)(a1 + 8) - 1)) & 0x20008) != 0)
      {
        *(_DWORD *)a1 = 7;
        v55 = IChu(a1, v73);
        *(_DWORD *)a1 = 3;
        if (v55 == 8)
          *(_DWORD *)(a1 + 1308) = 0;
      }
      else
      {
        **((_WORD **)v2 + 27) = 1;
        period_to_puntvolat(a1, v73);
        IHhyp(v73, *((__int16 **)v2 + 27));
        v54 = *((_QWORD *)v2 + 27);
        *(_DWORD *)(v3 + 3480) = *(_DWORD *)(v54 + 8);
        *(_DWORD *)(v3 + 3484) = *(_DWORD *)(v54 + 12);
      }
    }
    v56 = *(unsigned __int8 *)(a1 + 8);
    if (v56 == 3)
      v57 = v53;
    else
      v57 = 1;
    if ((v57 & 1) == 0)
    {
      period_to_puntvolat(a1, (char *)(a1 + 1547));
      period_to_puntvolat(a1, v73);
      v58 = strlen(v73);
      if (v58 << 16 > 0x10000)
      {
        v59 = v3 + 3480;
        v60 = 1;
        v61 = 1;
        while (1)
        {
          v62 = v61;
          if (v73[v61] == 183)
          {
            v63 = (unsigned __int16)(v61 - 1) >> 5;
            v64 = *(_DWORD *)(v59 + 4 * ((unsigned __int16)(v62 - 1) >> 5));
            v65 = 1 << -v60;
            if ((v64 & v65) != 0)
              break;
          }
          v61 = v62 + 1;
          v60 = v62 + 1;
          if ((__int16)v58 <= (__int16)(v62 + 1))
            goto LABEL_181;
        }
        *(_DWORD *)(v59 + 4 * v63) = v64 & ~v65;
        v75[0] = 0;
        *((_DWORD *)v75 + v63) |= v65;
        v67 = *((_QWORD *)v2 + 27);
        *(_QWORD *)(v67 + 16) = v75[0];
        *(_BYTE *)(v67 + 747) = 1;
        __strncpy_chk();
        __strcat_chk();
      }
LABEL_181:
      v56 = *(unsigned __int8 *)(a1 + 8);
    }
    if (!v56
      || v56 == 14
      || ((1 << (v56 - 1)) & 0x20008) != 0
      || !*(_BYTE *)(*((_QWORD *)v2 + 27) + 747))
    {
      v7 = v72;
      v8 = v71;
      if ((*(_WORD *)(v3 + 18) & 0x40) != 0)
        *(_WORD *)(a1 + 1322) |= 2u;
    }
    else
    {
      if ((*(_WORD *)(v3 + 18) & 0x40) != 0)
        v68 = 2;
      else
        v68 = 4;
      *(_WORD *)(a1 + 1322) |= v68 | 0x40;
      __strcpy_chk();
      v69 = *((_QWORD *)v2 + 27);
      *(_DWORD *)(a1 + 3156) = *(_DWORD *)(v69 + 16);
      *(_DWORD *)(a1 + 3160) = *(_DWORD *)(v69 + 20);
      v7 = v72;
      v8 = v71;
    }
  }
  v13 = *(_DWORD *)(v3 + 3472);
  if (v13 && (*(_WORD *)(a1 + 1322) & 0x10) == 0)
  {
    if ((v13 & 0x80000000) == 0)
    {
      v14 = 1;
      while (1)
      {
        v15 = v14 >> 5;
        v16 = 1 << ~(_BYTE)v14;
        if ((*(_DWORD *)(v3 + 3472 + 4 * v15) & v16) != 0
          && (*(_DWORD *)(v3 + 3480 + 4 * v15) & v16) == 0)
        {
          break;
        }
        if (v14++ >= 0x3F)
          goto LABEL_33;
      }
    }
    *(_QWORD *)(a1 + 1328) |= 8uLL;
  }
LABEL_33:
  v18 = *(unsigned __int8 *)(a1 + 8);
  if (v18 != 3
    || (puntvolat_to_dot(a1, (char *)(a1 + 1547)),
        puntvolat_to_dot(a1, (char *)(a1 + 1690)),
        v18 = *(unsigned __int8 *)(a1 + 8),
        v18 != 3))
  {
    if ((*(_WORD *)(a1 + 1322) & 0x12) == 2 && *(_DWORD *)(v3 + 3472) != *(_DWORD *)(v3 + 3480))
      *(_QWORD *)(a1 + 1328) |= 8uLL;
    if (v18 == 16)
      goto LABEL_120;
  }
  if ((*(_WORD *)(*(_QWORD *)(v3 + 112) + 62) & 0x80) != 0 && (*(_WORD *)(v3 + 3492) & 0x100) != 0)
    *(_QWORD *)(a1 + 1328) |= 0x80uLL;
  if ((*(_WORD *)(v3 + 18) & 1) != 0)
  {
    v19 = *v2;
    if ((*v2 & 8) == 0 && (*(_WORD *)(v3 + 3492) & 0x180) == 0)
    {
      *(_QWORD *)(a1 + 1328) |= 0x10uLL;
      *v2 = v19 | 2;
      if ((v19 & 4) != 0)
        v12 = 2;
      else
        v12 = 3;
    }
  }
  if (*(_BYTE *)(a1 + 1414))
  {
    if (!v9)
    {
      *(_QWORD *)(a1 + 1328) |= 0x80uLL;
      if (*(_BYTE *)(a1 + 1413))
        goto LABEL_99;
      v12 = 3;
      goto LABEL_108;
    }
    v20 = *v2;
    if ((*v2 & 8) == 0)
    {
      v21 = *(_WORD **)(v3 + 3520);
      if ((*v21 & 0xA) == 0 && (*(__int16 *)(v3 + 102) < 1 || (v21[1] & 0xA) == 0))
      {
        v33 = *(_QWORD *)(a1 + 1328) | 0x80;
        *(_QWORD *)(a1 + 1328) = v33;
        v22 = *(unsigned __int8 *)(v3 + 88);
        v12 = 3;
LABEL_89:
        if (v22 == 2)
        {
          *(_QWORD *)(a1 + 1328) = v33 & 0xFFFFFFFFFFFFFF7FLL;
          v12 = 10;
        }
        goto LABEL_91;
      }
    }
    v22 = *(unsigned __int8 *)(v3 + 88);
    if (v22 == 3)
    {
      if (**(_BYTE **)(v3 + 72) != 3)
      {
LABEL_56:
        *(_QWORD *)(a1 + 1328) |= 0x400uLL;
        if ((v20 & 4) != 0)
          return 2;
        v23 = (char *)(a1 + 1547);
        v24 = strlen(v23);
        SFadd(v23, v24, (__int16 *)(v3 + 40), (__int16 *)(v3 + 44), *(__int16 *)(v3 + 42), *(__int16 *)(v3 + 56), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 64));
LABEL_58:
        *v2 |= 4u;
        return 2;
      }
    }
    else if (v22 == 1 && (v18 != 6 || (*(_BYTE *)(a1 + 20) & 0x20) != 0))
    {
      goto LABEL_56;
    }
    v33 = *(_QWORD *)(a1 + 1328);
    if ((v33 & 0x80) == 0)
    {
      v33 &= ~0x10uLL;
      *(_QWORD *)(a1 + 1328) = v33;
      if (v18 != 6 || !*(_DWORD *)(a1 + 1672) || (*(_BYTE *)(a1 + 20) & 0x20) != 0)
      {
        v34 = *(_BYTE **)(v3 + 72);
        if (*v34 == 1)
        {
          *v34 = 0;
          **(_DWORD **)(v3 + 80) = 0;
        }
        return ICcapcod((char *)(a1 + 1547), a1);
      }
    }
    goto LABEL_89;
  }
LABEL_91:
  if (*(_BYTE *)(a1 + 1413))
  {
    if (v9)
    {
      v35 = *v2;
      if ((*v2 & 8) != 0 && !v8)
      {
        v36 = *(_QWORD *)(a1 + 1328);
        if ((v35 & 4) != 0 && (v36 & 0x200) != 0 && *(__int16 *)(v7 + 1502) >= 1)
        {
          v36 |= 0x40uLL;
          *(_QWORD *)(a1 + 1328) = v36;
        }
        else if ((v36 & 0x40) != 0 && (v35 & 4) == 0)
        {
          v12 = 3;
        }
        goto LABEL_106;
      }
    }
LABEL_99:
    v36 = *(_QWORD *)(a1 + 1328);
    if (v8 || v18 == 2)
    {
      v36 |= 0x40uLL;
      *(_QWORD *)(a1 + 1328) = v36;
      v37 = 3;
    }
    else
    {
      v37 = 10;
    }
    if ((*v2 & 4) != 0)
      v12 = 2;
    else
      v12 = v37;
LABEL_106:
    if ((v36 & 0x40) == 0)
      *(_QWORD *)(a1 + 1328) = v36 & 0xFFFFFFFFFFFFFFEFLL;
  }
LABEL_108:
  if (v18 != 6)
  {
LABEL_113:
    if (v18 == 11 && *(_BYTE *)(a1 + 1547) == 105 && *(_BYTE *)(a1 + 1548) == 106)
    {
      v38 = *(unsigned __int8 *)(v3 + 88);
      if (v38 == 2
        || (v39 = *(_BYTE **)(v3 + 72), v38 == *v39)
        || (v40 = *(unsigned int **)(v3 + 80), v41 = *v40 | 0xC0000000, *v40 = v41, *(_DWORD *)(v3 + 92) == v41))
      {
        SLrecap((unsigned __int8 *)(a1 + 1547), *(__int16 *)(a1 + 1612), v38, v3 + 92, v38, v6);
        return 10;
      }
      if (v38 == 1)
        *v39 = 3;
      v66 = strlen((const char *)(a1 + 1547));
      SFadd((char *)(a1 + 1547), v66, (__int16 *)(v3 + 40), (__int16 *)(v3 + 44), *(__int16 *)(v3 + 42), *(__int16 *)(v3 + 56), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 64));
      SLrecap((unsigned __int8 *)(a1 + 1690), *(__int16 *)(a1 + 1612), **(unsigned __int8 **)(v3 + 72), *(_QWORD *)(v3 + 80), **(unsigned __int8 **)(v3 + 72), v6);
      *(_QWORD *)(a1 + 1328) |= 0x400uLL;
      goto LABEL_58;
    }
    goto LABEL_120;
  }
  if (*(_DWORD *)(a1 + 1672) && (*(_WORD *)(v7 + 1742) & 0x200) != 0 && *(_BYTE *)(v7 + 1592) == 1)
  {
    *(_DWORD *)(*(_QWORD *)(v3 + 80) + (((unint64_t)*(unsigned __int16 *)(v7 + 1502) >> 3) & 0x1FFC)) |= 1 << ~*(_WORD *)(v7 + 1502);
    **(_BYTE **)(v3 + 72) = 3;
    *(_WORD *)(v3 + 102) = 1;
    v18 = *(unsigned __int8 *)(a1 + 8);
    goto LABEL_113;
  }
LABEL_120:
  v42 = *(_QWORD *)(v3 + 112);
  if ((*(_BYTE *)(v42 + 34) || *(_BYTE *)(v42 + 44)) && (*(_BYTE *)(a1 + 1328) & 0x10) == 0)
  {
    v43 = ICcltcap(a1);
  }
  else
  {
    if ((*v2 & 4) != 0)
      v44 = (char *)(a1 + 1690);
    else
      v44 = (char *)(a1 + 1547);
    v43 = ICcapcod(v44, a1);
  }
  v45 = v43;
  if (*(_BYTE *)(a1 + 8) == 5 && (v12 & 0xFFFFFFF7) == 2 && (**(_BYTE **)(v3 + 3496) & 0x30) != 0)
  {
    if (*(_WORD *)(v3 + 40))
    {
      v12 = ligature(a1 + 1690, a1, v12);
      if ((int)(strlen((const char *)(a1 + 1690)) << 16) >= 1)
      {
        v46 = 0;
        do
        {
          v47 = a1 + v46;
          v48 = *(unsigned __int8 *)(v47 + 1690);
          if ((*(_DWORD *)(v6 + 4 * v48) & 0x40000000) != 0)
            LOBYTE(v48) = v48 + 32;
          *(_BYTE *)(v47 + 1690) = v48;
          ++v46;
        }
        while ((__int16)strlen((const char *)(a1 + 1690)) > v46);
      }
      if (*(_BYTE *)(*(_QWORD *)(v3 + 112) + 34))
        ICcltcap(a1);
      else
        ICcapcod((char *)(a1 + 1690), a1);
    }
    else
    {
      v12 = ligature(a1 + 1547, a1, v12);
      if (v12 == 2)
      {
        if (*(__int16 *)(a1 + 1612) >= 1)
        {
          v49 = 0;
          v50 = a1 + 1547;
          do
          {
            v51 = *(unsigned __int8 *)(v50 + v49);
            if ((*(_DWORD *)(v6 + 4 * v51) & 0x40000000) != 0)
              LOBYTE(v51) = v51 + 32;
            *(_BYTE *)(v50 + v49++) = v51;
          }
          while (v49 < *(__int16 *)(a1 + 1612));
        }
        ICcapcod((char *)(a1 + 1547), a1);
        v52 = strlen((const char *)(a1 + 1547));
        SFadd((char *)(a1 + 1547), v52, (__int16 *)(v3 + 40), (__int16 *)(v3 + 44), *(__int16 *)(v3 + 42), *(__int16 *)(v3 + 56), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 64));
        v12 = 2;
      }
    }
  }
  if (v45 == 10)
    return v12;
  else
    return v45;
}

size_t puntvolat_to_dot(uint64_t a1, char *__s)
{
  size_t result;
  int v5;
  __int16 v6;

  result = strlen(__s);
  if ((int)((_DWORD)result << 16) > 0x10000)
  {
    v5 = 1;
    v6 = 1;
    do
    {
      if (*(_DWORD *)(a1 + 24) == 64 && __s[v5 - 1] == 108 && __s[v5 + 1] == 108 && __s[v6] == 183)
        __s[v6] = 46;
      v5 = ++v6;
      result = strlen(__s);
    }
    while (v6 < (__int16)result);
  }
  return result;
}

uint64_t ligature(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  unsigned __int16 v22;
  uint64_t v23;
  char v24;
  int v25;
  __int32 v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  __int32 v30;
  uint64_t v31;
  unsigned int v32;
  char v33;
  char v34;
  unsigned __int16 v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v40;
  unsigned __int16 v41;
  uint32x2_t v42[2];

  v42[1] = *(uint32x2_t *)MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 3184);
  v7 = *(_QWORD *)(v6 + 264);
  v8 = *(unsigned __int16 *)(a2 + 1612);
  v9 = *(_QWORD *)(*(_QWORD *)(v6 + 248) + 56);
  v10 = *(_DWORD *)(a2 + 24);
  if ((v10 & 0x10) != 0 && (**(_BYTE **)(v7 + 3496) & 0x10) != 0)
    return a3;
  if ((v10 & 0x20) != 0 && (**(_BYTE **)(v7 + 3496) & 0x20) != 0)
    return a3;
  v41 = 0;
  v11 = lig_pos((const char *)(a2 + 1547), &v41, a2);
  v12 = v41;
  if (!(v41 | v11))
    return a3;
  v13 = v11;
  v15 = *(_DWORD *)(v7 + 92);
  v14 = *(_DWORD *)(v7 + 96);
  v42[0] = (uint32x2_t)__PAIR64__(v14, v15);
  v40 = v7;
  v16 = *(_QWORD *)(v7 + 112);
  v17 = strlen((const char *)(v16 + 34));
  if (*(_BYTE *)(v16 + 34))
  {
    v42[0].i32[0] = v15 << v17;
    v42[0].i32[1] = v14 << v17;
  }
  *(_QWORD *)(a2 + 1328) |= 0x1000000uLL;
  if (!v12)
  {
    v20 = v40;
    if (v13)
      goto LABEL_27;
LABEL_14:
    v22 = v8;
    goto LABEL_42;
  }
  v18 = (v12 - 1);
  v19 = *(unsigned __int8 *)(a1 + v18);
  v20 = v40;
  if (v19 > 0x60)
  {
    if (v19 == 97)
    {
      v21 = -26;
    }
    else
    {
      if (v19 != 111)
        goto LABEL_21;
      v21 = -9;
    }
  }
  else if (v19 == 65)
  {
    v21 = -58;
  }
  else
  {
    if (v19 != 79)
      goto LABEL_21;
    v21 = -41;
  }
  *(_BYTE *)(a1 + v18) = v21;
LABEL_21:
  if (v8 > (unsigned __int16)(v12 + 1))
  {
    v23 = (unsigned __int16)(v12 + 1);
    do
    {
      v24 = *(_BYTE *)(a1 + v23);
      v25 = 1 << -(char)v23;
      v26 = v42[0].i32[(unsigned __int16)(v23 - 1) >> 5];
      v42[0].i32[(unsigned __int16)(v23 - 1) >> 5] = v26 & ~v25;
      *(_BYTE *)(a1 - 1 + v23) = v24;
      if ((((unsigned __int32)v42[0].i32[v23 >> 5] >> ~(_BYTE)v23) & 1) != 0)
        v42[0].i32[(unsigned __int16)(v23 - 1) >> 5] = v26 | v25;
      ++v23;
    }
    while ((_DWORD)v8 != (unsigned __int16)v23);
  }
  *(_BYTE *)(v8 + a1 - 1) = 0;
  LOWORD(v8) = v8 - 1;
  v6 = *(_QWORD *)(a2 + 3184);
  --*(_WORD *)(v6 + 4);
  if (!v13)
    goto LABEL_14;
LABEL_27:
  v22 = v8 + 1;
  ++*(_WORD *)(v6 + 4);
  *(_BYTE *)(a1 + (unsigned __int16)(v8 + 1)) = 0;
  if (v13 < (unsigned __int16)v8)
  {
    v27 = (unsigned __int16)v8;
    do
    {
      *(_BYTE *)(a1 + v27) = *(_BYTE *)(a1 + (v27 - 1));
      v28 = 1 << ~(_BYTE)v27;
      v29 = v27 >> 5;
      v30 = v42[0].i32[v29];
      v42[0].i32[v29] = v30 & ~v28;
      if ((((unsigned __int32)v42[0].i32[(v27 - 1) >> 5] >> -(char)v27) & 1) != 0)
        v42[0].i32[v29] = v30 | v28;
      --v27;
    }
    while (v13 < (unsigned __int16)v27);
  }
  v31 = v13 - 1;
  v32 = *(unsigned __int8 *)(a1 + v31);
  if (v32 > 0xE5)
  {
    if (v32 == 230)
    {
      v33 = 101;
      v34 = 97;
      goto LABEL_41;
    }
    if (v32 == 247)
    {
      v33 = 101;
      v34 = 111;
      goto LABEL_41;
    }
  }
  else
  {
    if (v32 == 198)
    {
      v33 = 69;
      v34 = 65;
      goto LABEL_41;
    }
    if (v32 == 215)
    {
      v33 = 69;
      v34 = 79;
LABEL_41:
      *(_BYTE *)(a1 + v31) = v34;
      *(_BYTE *)(a1 + v13) = v33;
    }
  }
LABEL_42:
  v35 = v17;
  *(_WORD *)(a2 + 1612) = v22;
  if (v22)
  {
    v36 = 0;
    do
    {
      v37 = *(unsigned __int8 *)(a1 + v36);
      if ((*(_DWORD *)(v9 + 4 * v37) & 0x40000000) != 0)
        LOBYTE(v37) = v37 + 32;
      *(_BYTE *)(a1 + v36) = v37;
      if ((((unsigned __int32)v42[0].i32[v36 >> 5] >> ~(_BYTE)v36) & 1) != 0)
      {
        if ((*(_DWORD *)(v9 + 4 * v37) & 0x20000000) != 0)
          LOBYTE(v37) = v37 - 32;
        *(_BYTE *)(a1 + v36) = v37;
      }
      ++v36;
    }
    while (v22 != v36);
  }
  *(_BYTE *)(v20 + 88) = SLcap(a1, 0, (__int16)v22, v42, v9);
  if (*(_BYTE *)(*(_QWORD *)(v20 + 112) + 34))
    v38 = v35;
  else
    v38 = 0;
  *(uint32x2_t *)(v20 + 92) = vshl_u32(v42[0], (uint32x2_t)vneg_s32(vdup_n_s32(v38)));
  return 2;
}

uint64_t lig_pos(const char *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  uint64_t v11;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 3184) + 248) + 56);
  v6 = strlen(a1);
  *a2 = 0;
  if (v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = a1[v7];
      if ((v9 - 198) <= 0x31 && ((1 << (v9 + 58)) & 0x2000100020001) != 0)
        v8 = v7 + 1;
      if (v6 - 1 != v7)
      {
        v11 = a1[v7 + 1];
        if ((*(_DWORD *)(v5 + 4 * v11) & 0x40000000) != 0)
          LOBYTE(v11) = v11 + 32;
        if (v11 == 101)
        {
          if ((*(_DWORD *)(v5 + 4 * v9) & 0x40000000) != 0)
            LOBYTE(v9) = v9 + 32;
          if (v9 == 111 || v9 == 97)
            *a2 = v7 + 1;
        }
      }
      ++v7;
    }
    while (v6 != v7);
  }
  else
  {
    return 0;
  }
  return v8;
}

uint64_t ICfoldio(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  char v7;
  __int16 v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  char v12[65];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 3184) + 264);
  v6 = v12;
  __strcpy_chk();
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (*v6 == 161)
  {
    *v6 = -27;
    ++v8;
    v7 = v9;
LABEL_6:
    ++v9;
    ++v6;
  }
  if (*v6)
    goto LABEL_6;
  if (!v8)
    return 11;
  result = ICget(v12, a2, a3);
  if ((_DWORD)result != 10)
    return result;
  if (*(_DWORD *)(a3 + 24) != 128)
  {
    v11 = **(unsigned __int8 **)(v5 + 3496);
    if (v8 == 1 && (_DWORD)v11 == (a2 - v7))
      return 10;
    if (**(_BYTE **)(v5 + 3496))
      v12[a2 - v11] = -95;
  }
  SFadd(v12, a2, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
  *(_QWORD *)(a3 + 1328) |= 0x1000000uLL;
  return 2;
}

uint64_t io_countrep(_BYTE *a1, _BYTE *a2)
{
  __int16 v2;
  char v3;

  v2 = 0;
  v3 = 0;
  *a2 = 0;
  while (*a1 == 161)
  {
    *a2 = v3;
    *a1 = -27;
    ++v2;
LABEL_6:
    ++v3;
    ++a1;
  }
  if (*a1)
    goto LABEL_6;
  return v2;
}

uint64_t ICget(const char *a1, int a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  _BOOL4 v17;
  int v20;
  __int16 v21;
  uint64_t v22;
  __int16 *v23;
  uint64_t v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  char v33[65];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  v5 = *(_QWORD **)(a3 + 3184);
  v6 = v5[31];
  v7 = *(_QWORD *)(v6 + 56);
  if (a1)
  {
    v8 = strlen(a1);
    if (v8 >= 0x40)
      v9 = 64;
    else
      v9 = v8;
    if (v9)
    {
      __strncpy_chk();
      v6 = v5[31];
    }
    v33[v9] = 0;
  }
  if (*(__int16 *)(v6 + 68) < a2)
    return 11;
  v10 = v5[33];
  *(_WORD *)(v10 + 18) = 0;
  *(_WORD *)(v10 + 102) = 0;
  *(_WORD *)v10 = 3;
  v11 = SFbisrch((uint64_t)v33, 0, (__int16)(a2 - 1), &v32, v6);
  if (SFdecode((unsigned __int8 *)v33, a2, v11, v32, (_QWORD *)v5[31], (unsigned __int16 *)v10) != 10)
    return 11;
  v12 = *(unsigned __int16 *)(v10 + 102);
  if (*(__int16 *)(v10 + 102) < 1)
  {
    LOWORD(v13) = 0;
  }
  else
  {
    v13 = 0;
    v14 = *(unsigned __int8 *)(v10 + 88);
    do
    {
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 72) + v13);
      v17 = v15 == 4 && v14 == 0;
      if (v15 == v14 || v17)
      {
        *(_WORD *)(v10 + 18) = *(_WORD *)(*(_QWORD *)(v10 + 3520) + 2 * v13);
        goto LABEL_27;
      }
      ++v13;
    }
    while (v12 != v13);
    LOWORD(v13) = *(_WORD *)(v10 + 102);
  }
LABEL_27:
  v20 = *(unsigned __int8 *)(a3 + 8);
  if ((!*(_BYTE *)(a3 + 8) || ((1 << (v20 - 1)) & 0x11660) != 0) && *(_DWORD *)(a3 + 1308))
  {
    v21 = *(_WORD *)(v10 + 18);
    if ((v21 & 0xC00) != 0)
    {
      v22 = v5[27];
      *(_DWORD *)(v22 + 8) = 0;
      *(_DWORD *)(v10 + 3480) = 0;
      *(_DWORD *)(v22 + 12) = 0;
      *(_DWORD *)(v10 + 3484) = 0;
    }
    else if (v20 != 6
           || (v21 & 0x20) == 0
           || (__int16)v12 >= 2 && *(unsigned __int8 *)(v10 + 88) - 1 <= 1)
    {
      v33[a2] = 0;
      v23 = (__int16 *)v5[27];
      *v23 = 1;
      v24 = (unsigned __int16)v13;
      if (*(_BYTE *)(*(_QWORD *)(v10 + 72) + (unsigned __int16)v13) == 1 && *(_BYTE *)(v10 + 88) == 1)
      {
        v25 = v33[0];
        if ((*(_DWORD *)(v7 + 4 * v33[0]) & 0x20000000) != 0)
          v25 = v33[0] - 32;
        v33[0] = v25;
      }
      IHhyp(v33, v23);
      if (*(_BYTE *)(*(_QWORD *)(v10 + 72) + v24) == 1 && *(_BYTE *)(v10 + 88) == 1)
      {
        v26 = v33[0];
        if ((*(_DWORD *)(v7 + 4 * v33[0]) & 0x40000000) != 0)
          v26 = v33[0] + 32;
        v33[0] = v26;
        v27 = v5[27];
        v28 = *(unsigned __int8 *)(v27 + 680);
        if ((*(_DWORD *)(v7 + 4 * v28) & 0x40000000) != 0)
          LOBYTE(v28) = v28 + 32;
        *(_BYTE *)(v27 + 680) = v28;
      }
      v29 = v5[27];
      *(_DWORD *)(v10 + 3480) = *(_DWORD *)(v29 + 8);
      *(_DWORD *)(v10 + 3484) = *(_DWORD *)(v29 + 12);
      if (*(_BYTE *)(v29 + 747))
      {
        if ((*(_WORD *)(v10 + 18) & 0x40) != 0)
          v30 = 2;
        else
          v30 = 4;
        *(_WORD *)(a3 + 1322) |= v30 | 0x40;
        checked_strcpy(a3 + 3090, (char *)(v29 + 680));
        v31 = v5[27];
        *(_DWORD *)(a3 + 3156) = *(_DWORD *)(v31 + 16);
        *(_DWORD *)(a3 + 3160) = *(_DWORD *)(v31 + 20);
      }
    }
  }
  return 10;
}

uint64_t ICint(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _WORD *v5;
  _WORD *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t i;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  int v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int16 v36;
  unsigned int v37;
  char *v38;
  int v39;
  __int16 v40;
  unsigned int v41;
  int v42;
  int v43;
  __int16 v44;
  void *v45;
  int v46[2];
  _BYTE __dst[384];
  unsigned __int16 v48;
  unsigned __int8 v49;
  unsigned __int16 v50;
  char v51;
  char v52;
  char v53;
  unsigned __int16 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)v46 = 0;
  v2 = malloc_type_malloc(0x178uLL, 0x10B004067FBAE49uLL);
  if (!v2)
    goto LABEL_33;
  v3 = v2;
  v2[46] = 0;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)v2 = 0u;
  if (!*(_BYTE *)(a1 + 8) || ((1 << (*(_BYTE *)(a1 + 8) - 1)) & 0x20008) != 0)
  {
    v4 = malloc_type_malloc(0x30uLL, 0x10A0040625B7065uLL);
    v3[28] = v4;
    if (!v4)
      goto LABEL_33;
  }
  v5 = malloc_type_calloc(1uLL, 0x4B0uLL, 0x10900403E69C754uLL);
  if (!v5)
    goto LABEL_33;
  v6 = v5;
  v3[31] = v5;
  v7 = malloc_type_calloc(1uLL, 0xDE0uLL, 0x10B00401F3C9068uLL);
  if (!v7)
    goto LABEL_33;
  v8 = v7;
  v3[32] = 0;
  v3[33] = v7;
  v3[34] = 0;
  *v6 = 0;
  v9 = malloc_type_calloc(1uLL, 0x60uLL, 0x1010040370E3D57uLL);
  *((_QWORD *)v8 + 14) = v9;
  if (!v9)
    goto LABEL_33;
  v10 = malloc_type_malloc(0x6D0uLL, 0x1000040CFF03AD1uLL);
  v3[35] = v10;
  if (!v10)
    goto LABEL_33;
  bzero(v10, 0x6D0uLL);
  v11 = (char *)malloc_type_malloc(0x86uLL, 0x1000040CE674580uLL);
  v3[10] = v11;
  if (!v11)
    goto LABEL_33;
  *(_QWORD *)(v11 + 126) = 0;
  *((_OWORD *)v11 + 6) = 0u;
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v6[35] = 6;
  v12 = malloc_type_malloc(0x30uLL, 0x100004000313F17uLL);
  *((_QWORD *)v8 + 10) = v12;
  if (!v12)
    goto LABEL_33;
  v13 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((_QWORD *)v8 + 9) = v13;
  if (!v13)
    goto LABEL_33;
  v14 = malloc_type_malloc(0xCuLL, 0x1000040BDFB0063uLL);
  *((_QWORD *)v8 + 440) = v14;
  if (!v14)
    goto LABEL_33;
  v15 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((_QWORD *)v8 + 438) = v15;
  if (!v15)
    goto LABEL_33;
  v16 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((_QWORD *)v8 + 441) = v16;
  if (!v16)
    goto LABEL_33;
  v17 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((_QWORD *)v8 + 442) = v17;
  if (!v17)
    goto LABEL_33;
  v18 = malloc_type_malloc(6uLL, 0x100004077774924uLL);
  *((_QWORD *)v8 + 437) = v18;
  if (!v18)
    goto LABEL_33;
  v19 = malloc_type_malloc(0xCuLL, 0x1000040BDFB0063uLL);
  *((_QWORD *)v8 + 3) = v19;
  if (!v19)
    goto LABEL_33;
  *((_DWORD *)v6 + 3) = 1024;
  if (!SFmemory((void **)v8 + 4, 65, 1))
  {
    SFmemory((void **)v8 + 4, 64, 0);
    goto LABEL_33;
  }
  v20 = malloc_type_malloc(0x28uLL, 0x1000040BDFB0063uLL);
  *((_QWORD *)v8 + 397) = v20;
  if (!v20)
    goto LABEL_33;
  *((_WORD *)v8 + 1) = 0;
  *((_WORD *)v8 + 1744) = *(_DWORD *)(a1 + 20);
  *((_BYTE *)v6 + 55) = *(_BYTE *)(a1 + 8);
  bzero((void *)(a1 + 1690), 0x4B0uLL);
  *(_DWORD *)(a1 + 2986) = 0;
  *(_OWORD *)(a1 + 2954) = 0u;
  *(_OWORD *)(a1 + 2970) = 0u;
  *(_OWORD *)(a1 + 2922) = 0u;
  *(_OWORD *)(a1 + 2938) = 0u;
  *(_OWORD *)(a1 + 2890) = 0u;
  *(_OWORD *)(a1 + 2906) = 0u;
  *((_QWORD *)v8 + 8) = a1 + 2890;
  *((_WORD *)v8 + 28) = 1200;
  *((_QWORD *)v8 + 6) = a1 + 1690;
  v21 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00408E6C3DC5uLL);
  v3[29] = v21;
  if (!v21)
    goto LABEL_33;
  v22 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
  v23 = v3[29];
  *(_QWORD *)(v23 + 8) = v22;
  if (!v22)
    goto LABEL_33;
  *(_WORD *)(v23 + 48) = 100;
  v24 = malloc_type_calloc(0x64uLL, 8uLL, 0x10040436913F5uLL);
  *(_QWORD *)(v3[29] + 104) = v24;
  if (!v24)
    goto LABEL_33;
  for (i = 0; i != 800; i += 8)
  {
    v26 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
    *(_QWORD *)(*(_QWORD *)(v3[29] + 104) + i) = v26;
    if (!v26)
      goto LABEL_33;
  }
  v27 = malloc_type_calloc(1uLL, 0x40uLL, 0x1090040D37A3AC8uLL);
  v3[30] = v27;
  if (!v27)
    goto LABEL_33;
  v28 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)(v3[30] + 8) = v28;
  if (!v28)
    goto LABEL_33;
  v29 = v3[33];
  *(_QWORD *)(v29 + 3192) = v3[29];
  *(_BYTE *)(v29 + 3184) = 1;
  *v6 = 1;
  *(_WORD *)(a1 + 1320) |= 0x80u;
  v30 = malloc_type_malloc(0x5CuLL, 0x10000407E945382uLL);
  v3[36] = v30;
  if (!v30)
    goto LABEL_33;
  *(_QWORD *)(a1 + 3184) = v3;
  v31 = *(unsigned __int8 *)(a1 + 8);
  if (v31 == 18 || v31 == 4)
    return IChu(a1, (char *)(a1 + 1547));
  v33 = v3[31];
  v34 = v3[33];
  result = SLOpen(a1 + 28, a1 + 539, &v46[1], 0);
  if ((_DWORD)result == 8)
  {
    v35 = *(_WORD *)(a1 + 1320) | 4;
LABEL_37:
    *(_WORD *)(a1 + 1320) = v35;
    return result;
  }
  if (SLRead(v46[1], 0x400u, __dst, v46) == 8)
  {
    v36 = *(_WORD *)(a1 + 1320) | 0x20;
LABEL_50:
    *(_WORD *)(a1 + 1320) = v36;
LABEL_51:
    SLClose(v46[1]);
    return 8;
  }
  if (__dst[0] != 67 || __rev16(v48) != 6 || __rev16(v50) <= 4)
  {
    v36 = *(_WORD *)(a1 + 1320) | 0x10;
    goto LABEL_50;
  }
  if (v49)
    v37 = v49;
  else
    v37 = 19;
  if (*(_BYTE *)(a1 + 8))
  {
    if (v37 != *(unsigned __int8 *)(a1 + 8))
    {
      v36 = *(_WORD *)(a1 + 1320) | 1;
      goto LABEL_50;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 8) = v37;
    *(_BYTE *)(v33 + 55) = v37;
  }
  if (!*(_DWORD *)(a1 + 1308))
  {
    v3[27] = 0;
    goto LABEL_59;
  }
  v38 = (char *)malloc_type_calloc(1uLL, 0x300uLL, 0x1030040B89FAF2CuLL);
  v3[27] = v38;
  if (!v38)
  {
LABEL_33:
    *(_WORD *)(a1 + 1320) |= 8u;
    return 8;
  }
  *(_WORD *)v38 = 0;
  v38[745] = v37;
  *((_QWORD *)v38 + 95) = 0;
  memcpy(v38 + 40, (const void *)(a1 + 668), 0x1FFuLL);
  __strcpy_chk();
  v39 = IHhyp("", (__int16 *)v3[27]);
  v40 = *(_WORD *)(a1 + 1320);
  if (v39)
  {
    *(_WORD *)(a1 + 1320) = v40 | 0x2000;
    free((void *)v3[27]);
    v3[27] = 0;
    *(_DWORD *)(a1 + 1308) = 0;
  }
  else
  {
    *(_WORD *)(a1 + 1320) = v40 | 0x100;
  }
LABEL_59:
  v41 = v46[1];
  *(_DWORD *)(v33 + 64) = v46[1];
  *(_WORD *)(v33 + 6) = bswap32(v50) >> 16;
  v42 = ICintget(v41, (uint64_t)__dst, a1);
  *(_DWORD *)(a1 + 4) = v42;
  if (v42 == 8)
    goto LABEL_51;
  *(_DWORD *)(a1 + 12) = __rev16(v54);
  if (v37 > 0xF)
    goto LABEL_65;
  if (((1 << v37) & 0x810C) == 0)
  {
    if (v37 == 5)
    {
      v43 = 240;
      goto LABEL_66;
    }
LABEL_65:
    v43 = 128;
    goto LABEL_66;
  }
  v43 = 192;
LABEL_66:
  *(_DWORD *)(a1 + 16) = v43;
  *(_BYTE *)(a1 + 1338) = 61;
  if (v51 == 69 && v52 == 78)
  {
    if (v53 == 77)
    {
      v44 = *(_WORD *)(a1 + 1336) | 1;
      goto LABEL_72;
    }
    if (v53 == 67)
    {
      v44 = *(_WORD *)(a1 + 1336);
LABEL_72:
      *(_WORD *)(a1 + 1336) = v44 | 6;
    }
  }
  if (*(_WORD *)(v33 + 2))
  {
    v45 = malloc_type_malloc(*(unsigned __int16 *)(v33 + 2), 0x100004077774924uLL);
    *(_QWORD *)(v34 + 8) = v45;
    if (!v45)
      goto LABEL_33;
  }
  *(_WORD *)(v34 + 16) = -1;
  if (*(_DWORD *)(a1 + 1308))
  {
    result = 0;
    v35 = *(_WORD *)(a1 + 1320) | 0x100;
    goto LABEL_37;
  }
  return 0;
}

uint64_t ICintget(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  void *v20;
  void *v21;
  size_t v22;
  void *v23;
  size_t v24;
  void *v25;
  void *v26;
  size_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  unsigned __int16 v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  size_t v38;
  void *v39;
  size_t v40;
  void *v41;
  size_t v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t result;
  size_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  unsigned __int16 v53;
  unsigned __int16 v54;
  char *v55;
  void *v56;
  int v57;
  int v58;
  int v59;
  unsigned __int16 v60;
  int v61;
  int v62;
  unsigned __int16 v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  unsigned int v68;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  unsigned __int8 v74;
  __int16 v75;
  char v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  __int16 v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v90;
  unsigned int v91;
  unsigned __int16 *v92;
  unsigned int v93;
  unsigned int v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t i;
  void *v101;
  __int16 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  unint64_t v107;
  int v108[2];
  int v109;
  int v110;
  int v111;
  int v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  char *v116;
  unsigned int v117;
  int v118;
  unsigned int v119;
  int v120;
  _WORD *v122;
  unsigned int v123;
  _BYTE __dst[1024];
  uint64_t v125;

  v125 = *MEMORY[0x1E0C80C00];
  v123 = 0;
  v4 = *(_QWORD *)(a3 + 3184);
  v5 = *(_QWORD *)(v4 + 248);
  v6 = *(_QWORD *)(v4 + 264);
  v7 = *(_WORD **)(v6 + 112);
  *v7 = bswap32(*(unsigned __int16 *)(a2 + 494)) >> 16;
  v8 = *(unsigned __int16 *)(a2 + 714);
  v9 = bswap32(v8);
  *(_WORD *)(v4 + 88) = __rev16(v8);
  v10 = __rev16(*(unsigned __int16 *)(a2 + 712));
  if (v10 <= HIWORD(v9))
    LOWORD(v10) = 64;
  *(_WORD *)(v4 + 90) = v10;
  *(_WORD *)(v5 + 88) = bswap32(*(unsigned __int16 *)(a2 + 496)) >> 16;
  v11 = *(unsigned __int16 *)(a2 + 498);
  v12 = *(unsigned __int16 *)(a2 + 508);
  *(_WORD *)(v4 + 92) = bswap32(*(unsigned __int16 *)(a2 + 506)) >> 16;
  v13 = __rev16(*(unsigned __int16 *)(a2 + 700));
  *(_WORD *)(v4 + 12) = v13;
  if (v13 <= 0x131)
  {
    *(_WORD *)(a3 + 1320) |= 0x4000u;
    *(_QWORD *)(a3 + 1328) |= 0x800uLL;
    return 8;
  }
  *(_WORD *)(v5 + 2) = bswap32(*(unsigned __int16 *)(a2 + 392)) >> 16;
  v14 = __rev16(*(unsigned __int16 *)(a2 + 490));
  *(_BYTE *)(v5 + 54) = *(_BYTE *)(a2 + 501);
  v15 = (__int16)(*(unsigned __int8 *)(a2 + 502) << 8) | *(unsigned __int8 *)(a2 + 503);
  *(_WORD *)(v5 + 48) = _byteswap_ushort(*(_WORD *)(a2 + 502));
  v113 = *(unsigned __int16 *)(a2 + 394);
  *(_WORD *)(v5 + 68) = bswap32(*(unsigned __int16 *)(a2 + 504)) >> 16;
  *(_WORD *)(v5 + 4) = bswap32(*(unsigned __int16 *)(a2 + 512)) >> 16;
  *(_WORD *)(v5 + 50) = bswap32(*(unsigned __int16 *)(a2 + 524)) >> 16;
  *(_WORD *)(v5 + 104) = bswap32(*(unsigned __int16 *)(a2 + 510)) >> 16;
  *(_WORD *)(v5 + 138) = bswap32(*(unsigned __int16 *)(a2 + 514)) >> 16;
  *(_WORD *)(v5 + 120) = bswap32(*(unsigned __int16 *)(a2 + 516)) >> 16;
  v115 = *(unsigned __int16 *)(a2 + 488);
  v16 = *(unsigned __int16 *)(a2 + 518);
  v117 = *(unsigned __int16 *)(a2 + 522);
  v119 = *(unsigned __int16 *)(a2 + 520);
  *(_WORD *)(v5 + 74) = bswap32(*(unsigned __int16 *)(a2 + 492)) >> 16;
  *(_DWORD *)(v4 + 16) = bswap32(*(_DWORD *)(a2 + 526));
  v17 = *(_DWORD *)(a3 + 3168);
  v122 = (_WORD *)v6;
  if (v17 >= 2)
  {
    if ((v17 & 1) != 0 || (v17 >= 0x20000 ? (v18 = 0x20000) : (v18 = *(_DWORD *)(a3 + 3168)), (v17 & (v17 - 1)) != 0))
      v18 = 0x2000;
  }
  else
  {
    v18 = 0;
  }
  *(_QWORD *)(a3 + 3168) = v18;
  *(_DWORD *)(v4 + 24) = v18 >> 2;
  if ((_DWORD)v14)
  {
    v19 = malloc_type_calloc(1uLL, v14, 0x5685F96FuLL);
    *(_QWORD *)(v4 + 120) = v19;
    if (!v19)
      goto LABEL_161;
  }
  if (*v7)
  {
    v20 = malloc_type_calloc(1uLL, (unsigned __int16)*v7, 0xF9EEBE27uLL);
    *(_QWORD *)(v4 + 208) = v20;
    if (!v20)
      goto LABEL_161;
  }
  if (*(_WORD *)(v5 + 88))
  {
    v21 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 88), 0xA5DF4509uLL);
    *(_QWORD *)(v4 + 152) = v21;
    if (!v21)
      goto LABEL_161;
  }
  v22 = __rev16(v11);
  if ((_DWORD)v22)
  {
    v23 = malloc_type_calloc(1uLL, v22, 0x304D6DE5uLL);
    *(_QWORD *)(v4 + 96) = v23;
    if (!v23)
      goto LABEL_161;
  }
  v112 = v22;
  v24 = __rev16(v12);
  if ((_DWORD)v24)
  {
    v25 = malloc_type_calloc(1uLL, v24, 0xB7BF56B5uLL);
    *(_QWORD *)(v4 + 104) = v25;
    if (!v25)
      goto LABEL_161;
  }
  if (*(_WORD *)(v4 + 92))
  {
    v26 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v4 + 92), 0xEC4DDF20uLL);
    *(_QWORD *)(v4 + 112) = v26;
    if (!v26)
      goto LABEL_161;
  }
  v111 = v24;
  v27 = *(_QWORD *)(a3 + 3168);
  if (v27)
  {
    if (v27 >= 0x8000)
    {
      v29 = 0;
      while (1)
      {
        v30 = malloc_type_calloc(1uLL, 0x8000uLL, 0x4724078DuLL);
        *(_QWORD *)(v4 + 32 + 8 * v29) = v30;
        if (!v30)
          goto LABEL_161;
        if ((unint64_t)++v29 >= *(_QWORD *)(a3 + 3168) >> 15)
          goto LABEL_32;
      }
    }
    v28 = malloc_type_calloc(1uLL, v27, 0xB899FC9uLL);
    *(_QWORD *)(v4 + 32) = v28;
    if (!v28)
    {
LABEL_161:
      v102 = *(_WORD *)(a3 + 1320) | 8;
LABEL_162:
      *(_WORD *)(a3 + 1320) = v102;
      return 8;
    }
  }
LABEL_32:
  if (*(_WORD *)(v5 + 104))
  {
    v31 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 104), 0x1DD7B889uLL);
    *(_QWORD *)(v4 + 168) = v31;
    if (!v31)
      goto LABEL_161;
    v32 = *(_WORD *)(v5 + 104);
    v122[1085] = v32 >> 3;
    v33 = malloc_type_calloc(1uLL, v32 & 0xFFF8, 0x10040436913F5uLL);
    *(_QWORD *)(v4 + 192) = v33;
    if (!v33)
      goto LABEL_161;
    v34 = malloc_type_calloc(1uLL, 8 * (__int16)v122[1085], 0x10040436913F5uLL);
    *(_QWORD *)(v4 + 184) = v34;
    if (!v34)
      goto LABEL_161;
  }
  if (*(_WORD *)(v5 + 138))
  {
    v35 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 138), 0xF58A64D7uLL);
    *(_QWORD *)(v4 + 176) = v35;
    if (!v35)
      goto LABEL_161;
  }
  if (*(_WORD *)(v5 + 120))
  {
    v36 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 120), 0x7D03E86EuLL);
    *(_QWORD *)(v4 + 160) = v36;
    if (!v36)
      goto LABEL_161;
  }
  if (*(_WORD *)(v5 + 4))
  {
    v37 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 4), 0x30B0F8EFuLL);
    *(_QWORD *)(v4 + 200) = v37;
    if (!v37)
      goto LABEL_161;
  }
  v38 = __rev16(v16);
  if ((_DWORD)v38)
  {
    v39 = malloc_type_calloc(1uLL, v38, 0xB97A70B4uLL);
    *(_QWORD *)(v4 + 128) = v39;
    if (!v39)
      goto LABEL_161;
  }
  v40 = __rev16(v119);
  if ((_DWORD)v40)
  {
    v41 = malloc_type_calloc(1uLL, v40, 0x6FE72318uLL);
    *(_QWORD *)(v4 + 136) = v41;
    if (!v41)
      goto LABEL_161;
  }
  v42 = __rev16(v117);
  if ((_DWORD)v42)
  {
    v43 = malloc_type_calloc(1uLL, v42, 0x89B0BCC8uLL);
    *(_QWORD *)(v4 + 144) = v43;
    if (!v43)
      goto LABEL_161;
  }
  v110 = v38;
  v44 = __rev16(v115);
  if ((_DWORD)v44)
  {
    v45 = malloc_type_calloc(1uLL, v44 + 1, 0xF1606970uLL);
    *(_QWORD *)(v4 + 72) = v45;
    if (!v45)
      goto LABEL_161;
  }
  if (*(_WORD *)(v5 + 74))
  {
    v46 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v5 + 74), 0x79AB9A09uLL);
    *(_QWORD *)(v4 + 296) = v46;
    if (!v46)
      goto LABEL_161;
  }
  result = SLSeek(a1, (v15 + (bswap32(v113) >> 16)) * *(unsigned __int16 *)(v5 + 2), 0);
  if ((_DWORD)result == 8)
  {
LABEL_53:
    *(_WORD *)(a3 + 1320) |= 0x40u;
    return result;
  }
  v48 = *(_QWORD *)(a3 + 3168);
  v114 = v40;
  *(_QWORD *)v108 = v44;
  v109 = v42;
  if (v48)
  {
    if (v48 >= 0x8000)
    {
      v50 = 0;
      do
      {
        bzero(*(void **)(v4 + 32 + 8 * v50++), 0x8000uLL);
        v49 = *(_QWORD *)(a3 + 3168);
      }
      while (v50 < v49 >> 15);
    }
    else
    {
      bzero(*(void **)(v4 + 32), v48);
      v49 = *(_QWORD *)(a3 + 3168);
    }
  }
  else
  {
    v49 = 0;
  }
  *(_WORD *)(v4 + 20) = 10;
  v51 = *(_DWORD *)(v4 + 24);
  if (v49 <= *(unsigned int *)(v4 + 16))
    v52 = 6 * v51;
  else
    v52 = *(_DWORD *)(v4 + 16);
  if (v52 >= 65532)
    v53 = -4;
  else
    v53 = v52;
  v54 = v53;
  v55 = (char *)malloc_type_malloc(v53, 0xB295335DuLL);
  v56 = v55;
  v57 = 0;
  v58 = *(_DWORD *)(v4 + 16);
  if (v58 && v52 >= 1)
  {
    v59 = v52;
    v60 = v54;
    v61 = 0;
    v57 = 0;
    v62 = v51 >> 1;
    v118 = v59;
    v116 = v55;
    do
    {
      v120 = v57;
      v63 = v60;
      v64 = v60;
      if ((unsigned __int16)SLFRead(a1, v60, v56, &v123) == 8 || v123 != v64)
        goto LABEL_176;
      if (v64)
      {
        v65 = 0;
        v66 = (unsigned __int16)(v63 - 1) / 6u + 1;
        v56 = v116;
        v67 = v120;
        do
        {
          v68 = 0;
          v69 = (unsigned __int8 *)&v116[6 * v65];
          v70 = *v69;
          v71 = v69[1];
          v72 = v69[2];
          v73 = v69[3];
          v74 = v69[4];
          v75 = v69[5];
          v76 = v73 & 7;
          v77 = (v73 >> 4) | (v71 << 12) | (16 * v72);
          v78 = v71 >> 3;
          v79 = v78 | (32 * v70);
          v80 = *(_DWORD *)(v4 + 24) - 1;
          v81 = 3 - v75;
          while (v61 <= v62 || *(__int16 *)(v4 + 20) >= (__int16)v68)
          {
            v82 = v77 & v80;
            v83 = 4 * (v77 & v80 & 0x1FFFLL);
            v84 = v4 + ((uint64_t)((unint64_t)((__int16)(v77 & v80) >> 13) << 48) >> 45);
            v87 = *(_QWORD *)(v84 + 32);
            v85 = (_QWORD *)(v84 + 32);
            v86 = v87;
            if (!*(_BYTE *)(v87 + v83) && !*(_BYTE *)(v86 + (v83 | 1)))
            {
              v88 = v83 | 2;
              if ((*(_BYTE *)(v86 + v88) & 0xF) == 0)
              {
                if (*(__int16 *)(v4 + 20) < (__int16)v68)
                  *(_WORD *)(v4 + 20) = v68;
                *(_BYTE *)(v86 + v83) = v79 >> 4;
                *(_BYTE *)(*v85 + (v83 | 1)) = v76 | (16 * v78);
                *(_BYTE *)(*v85 + v88) = v74;
                *(_BYTE *)(*v85 + (v83 | 3)) = v75;
                ++v61;
                break;
              }
            }
            v81 += 2 * v75;
            v77 = v82 + v81;
            if (v68++ >= 9)
              break;
          }
          ++v65;
        }
        while (v65 != v66);
        v90 = v123;
      }
      else
      {
        v90 = 0;
        v56 = v116;
        v67 = v120;
      }
      v57 = v90 + v67;
      v91 = (unsigned __int16)(v118 - v57);
      if ((_WORD)v118 == (_WORD)v57)
      {
        v58 = *(_DWORD *)(v4 + 16);
        break;
      }
      if (v91 > 0xFFFB)
        v60 = -4;
      else
        v60 = v91 - (unsigned __int16)(v118 - v57) % 6u;
      v58 = *(_DWORD *)(v4 + 16);
    }
    while (v58 && v118 > v57);
  }
  if (v58 > v57)
  {
    result = SLSeek(a1, v58 - v57, 1u);
    if ((_DWORD)result == 8)
      goto LABEL_53;
  }
  free(v56);
  if (v110 && ((unsigned __int16)SLFRead(a1, v110, *(void **)(v4 + 128), &v123) == 8 || v123 != v110))
    goto LABEL_176;
  if (v114)
  {
    if ((unsigned __int16)SLFRead(a1, v114, *(void **)(v4 + 136), &v123) == 8 || v123 != v114)
      goto LABEL_176;
    *(_WORD *)(v5 + 52) = ~(-1 << *(_WORD *)(v5 + 50)) - _byteswap_ushort(**(_WORD **)(v4 + 136));
  }
  if (v109 && ((unsigned __int16)SLFRead(a1, v109, *(void **)(v4 + 144), &v123) == 8 || v123 != v109)
    || (_DWORD)v14 && ((unsigned __int16)SLFRead(a1, v14, *(void **)(v4 + 120), &v123) == 8 || v123 != (_DWORD)v14))
  {
    goto LABEL_176;
  }
  if (*(_WORD *)(v5 + 4))
  {
    if ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 4), *(void **)(v4 + 200), &v123) == 8
      || v123 != *(unsigned __int16 *)(v5 + 4))
    {
      goto LABEL_176;
    }
    v92 = *(unsigned __int16 **)(v4 + 200);
    v93 = (bswap32(*v92) >> 16) - 1;
    v122[1069] = v93;
    v94 = bswap32(v92[1]) >> 16;
    v122[1067] = v94;
    v122[1068] = v93 + 2 * v94;
    v122[1070] = (bswap32(v92[2]) >> 16) - 1;
  }
  if (*(_WORD *)(v5 + 74)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 74), *(void **)(v4 + 296), &v123) == 8
     || v123 != *(unsigned __int16 *)(v5 + 74))
    || *v7
    && ((unsigned __int16)SLFRead(a1, (unsigned __int16)*v7, *(void **)(v4 + 208), &v123) == 8
     || v123 != (unsigned __int16)*v7)
    || *(_WORD *)(v5 + 88)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 88), *(void **)(v4 + 152), &v123) == 8
     || v123 != *(unsigned __int16 *)(v5 + 88))
    || v112 && ((unsigned __int16)SLFRead(a1, v112, *(void **)(v4 + 96), &v123) == 8 || v123 != v112)
    || v111 && ((unsigned __int16)SLFRead(a1, v111, *(void **)(v4 + 104), &v123) == 8 || v123 != v111)
    || *(_WORD *)(v4 + 92)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v4 + 92), *(void **)(v4 + 112), &v123) == 8
     || v123 != *(unsigned __int16 *)(v4 + 92)))
  {
    goto LABEL_176;
  }
  if (*(_WORD *)(v5 + 104))
  {
    if ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 104), *(void **)(v4 + 168), &v123) == 8
      || v123 != *(unsigned __int16 *)(v5 + 104))
    {
      goto LABEL_176;
    }
    v95 = malloc_type_calloc(1uLL, 2 * (__int16)v122[1085], 0x1000040BDFB0063uLL);
    *(_QWORD *)(v5 + 168) = v95;
    if (!v95)
      goto LABEL_161;
    v96 = malloc_type_calloc(1uLL, 2 * (__int16)v122[1085], 0x1000040BDFB0063uLL);
    *(_QWORD *)(v5 + 176) = v96;
    if (!v96)
      goto LABEL_161;
    if ((__int16)v122[1085] >= 1)
    {
      v97 = 0;
      v98 = 0;
      do
      {
        v99 = 0;
        *(_QWORD *)(*(_QWORD *)(v4 + 184) + 8 * v98) = *(_QWORD *)(v4 + 168) + 8 * v98;
        *(_QWORD *)(*(_QWORD *)(v4 + 192) + 8 * v98) = *(_QWORD *)(v4 + 168) + 8 * v98 + 4;
        *(_BYTE *)(*(_QWORD *)(v5 + 168) + v98) = 0;
        *(_BYTE *)(*(_QWORD *)(v5 + 176) + v98) = 0;
        do
        {
          if (*(_BYTE *)(*(_QWORD *)(v4 + 168) + v97 + v99) == 32)
            break;
          ++*(_BYTE *)(*(_QWORD *)(v5 + 176) + v98);
          ++v99;
        }
        while (v99 != 4);
        for (i = 4; i != 8; ++i)
        {
          if (*(_BYTE *)(*(_QWORD *)(v4 + 168) + v97 + i) == 32)
            break;
          ++*(_BYTE *)(*(_QWORD *)(v5 + 168) + v98);
        }
        ++v98;
        v97 += 8;
      }
      while (v98 < (__int16)v122[1085]);
    }
  }
  if (*(_WORD *)(v5 + 138)
    && ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 138), *(void **)(v4 + 176), &v123) == 8
     || v123 != *(unsigned __int16 *)(v5 + 138)))
  {
LABEL_176:
    v102 = *(_WORD *)(a3 + 1320) | 0x20;
    goto LABEL_162;
  }
  if (*(_WORD *)(v5 + 120))
  {
    if ((unsigned __int16)SLFRead(a1, *(unsigned __int16 *)(v5 + 120), *(void **)(v4 + 160), &v123) == 8
      || v123 != *(unsigned __int16 *)(v5 + 120))
    {
      goto LABEL_176;
    }
    *(_BYTE *)(v5 + 136) = *(_WORD *)(v5 + 120) / 0xDu;
  }
  if (v108[0])
  {
    if ((unsigned __int16)SLFRead(a1, v108[0], *(void **)(v4 + 72), &v123) == 8 || v123 != v108[0])
      goto LABEL_176;
    *(_BYTE *)(*(_QWORD *)(v4 + 72) + *(_QWORD *)v108) = 0;
  }
  if (v13 < 0x134)
  {
    v103 = SLLngToA(*(unsigned __int8 *)(a3 + 8));
    *(_QWORD *)(v5 + 56) = v103;
    if (!v103)
    {
      v102 = *(_WORD *)(a3 + 1320) | 0x4000;
      goto LABEL_162;
    }
  }
  else
  {
    v101 = malloc_type_calloc(4uLL, 0x100uLL, 0x6B5F1621uLL);
    *(_QWORD *)(v5 + 56) = v101;
    if (!v101)
      goto LABEL_161;
    if (SLFRead(a1, 1024, __dst, &v123) == 8)
    {
      *(_WORD *)(a3 + 1320) |= 0x20u;
      SLClose(a1);
      return 8;
    }
    v104 = 0;
    v105 = *(_QWORD *)(v5 + 56);
    do
    {
      *(_DWORD *)(v105 + v104) = (__dst[v104] << 24) | (__dst[v104 + 1] << 16) | (__dst[v104 + 2] << 8) | __dst[v104 + 3];
      v104 += 4;
    }
    while (v104 != 1024);
  }
  v106 = (__int16)v122[1085];
  if (v13 > 0x132)
  {
    if ((unsigned __int16)SLFRead(a1, v106 - 1, (void *)(v5 + 184), &v123) != 8 && v123 == (__int16)v122[1085] - 1)
      return 0;
    goto LABEL_176;
  }
  if (v106 == 1)
    return 0;
  v107 = 0;
  do
  {
    result = 0;
    *(_BYTE *)(v5 + 184 + v107++) = 7;
  }
  while (v107 < (unsigned __int16)(v122[1085] - 1));
  return result;
}

uint64_t ICpd(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  char v5;
  unsigned int v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _WORD *v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  int v19;
  char *v20;
  char *v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  _WORD *v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  void *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  __int16 v43;
  int v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  __int16 v53;
  int v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;
  __int16 v59;
  int v60;
  int v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int16 v72;
  char __s[65];
  char __src[65];
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v72 = 0;
  v4 = SLLngToA(a2[2058]);
  v5 = a2[2059];
  if (!v5)
  {
    v5 = 61;
    a2[2059] = 61;
  }
  v6 = *a2;
  if (v6 > 0xA || ((1 << v6) & 0x5F6) == 0)
  {
    v10 = 0;
    v9 = 0;
    v11 = 0;
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 3184);
    v9 = v8[33];
    v10 = v8[29];
    *(_WORD *)(v9 + 3204) = *((_WORD *)a2 + 1);
    v11 = v8[30];
  }
  result = 0;
  switch(v6)
  {
    case 1u:
    case 2u:
      v20 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x109004069F7AFFDuLL);
      if (!v20)
        return 8;
      v21 = v20;
      *((_QWORD *)v20 + 1) = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
      *((_WORD *)v21 + 1) = *(_WORD *)(v9 + 3204);
      v22 = a2 + 2060;
      v23 = a2[2059];
      v21[16] = v23;
      if (*(_DWORD *)(a1 + 1408))
      {
        if (SLpar((const char *)a2 + 2060, (unsigned __int16 *)(*(_QWORD *)(a1 + 3184) + 2), (__int16 *)(*(_QWORD *)(a1 + 3184) + 4), &v72, v4) == 8)return 4;
        v48 = *(_QWORD *)(a1 + 3184);
        v49 = *(__int16 *)(v48 + 2);
        v50 = *(__int16 *)(v48 + 2);
        v51 = *(__int16 *)(v48 + 4);
        if (v49 <= v51)
        {
          v52 = v49;
          do
          {
            __s[v49 - v50] = v22[v52++];
            v49 = v52;
          }
          while (v52 <= v51);
        }
        __s[v49 - v50] = 0;
        HypStrip(__s, v21 + 28, v21[16]);
        v53 = strlen(__s);
        v21[18] = SLcap((uint64_t)__s, 0, (__int16)(v53 - 1), v21 + 20, v4);
        v54 = strlen(__s);
        if (v54 << 16 >= 1)
        {
          v47 = 0;
          do
          {
            v55 = __s[v47];
            if ((*(_DWORD *)(v4 + 4 * v55) & 0x40000000) != 0)
              LOBYTE(v55) = v55 + 32;
            __src[v47++] = v55;
          }
          while ((__int16)v54 > v47);
          goto LABEL_77;
        }
LABEL_76:
        v47 = 0;
        goto LABEL_77;
      }
      HypStrip(a2 + 2060, v21 + 28, v23);
      v43 = strlen((const char *)a2 + 2060);
      v21[18] = SLcap((uint64_t)(a2 + 2060), 0, (__int16)(v43 - 1), v21 + 20, v4);
      v44 = strlen((const char *)a2 + 2060);
      if (v44 << 16 < 1)
        goto LABEL_76;
      v45 = 0;
      do
      {
        v46 = v22[v45];
        if ((*(_DWORD *)(v4 + 4 * v46) & 0x40000000) != 0)
          LOBYTE(v46) = v46 + 32;
        __src[v45++] = v46;
        v47 = v45;
      }
      while ((__int16)v44 > v45);
LABEL_77:
      __src[v47] = 0;
      strcpy(*((char **)v21 + 1), __src);
      v58 = *((_WORD *)a2 + 2);
      *(_WORD *)v21 = v58;
      v21[17] = a2[2125];
      v59 = *((_WORD *)a2 + 1068);
      if (v59)
      {
        *((_QWORD *)v21 + 5) = *((_QWORD *)a2 + 266);
        *((_WORD *)v21 + 24) = v59;
      }
      v60 = *a2;
      if (v60 == 2)
      {
        v67 = 3;
        goto LABEL_93;
      }
      if (v60 != 1)
      {
        v67 = 0;
        goto LABEL_93;
      }
      *(_WORD *)(v10 + 48) = 100;
      *(_WORD *)v10 = v58;
      *(_WORD *)(v10 + 2) = *(_WORD *)(v9 + 3204);
      *(_BYTE *)(v10 + 42) = 0;
      *(_BYTE *)(v10 + 16) = a2[2059];
      *(_DWORD *)(v10 + 28) = *((_DWORD *)v21 + 7);
      *(_DWORD *)(v10 + 32) = *((_DWORD *)v21 + 8);
      *(_BYTE *)(v10 + 17) = v21[18];
      *(_DWORD *)(v10 + 20) = *((_DWORD *)v21 + 5);
      *(_DWORD *)(v10 + 24) = *((_DWORD *)v21 + 6);
      strcpy(*(char **)(v10 + 8), *((const char **)v21 + 1));
      *(_DWORD *)(v10 + 36) = 0xFFFF;
      v61 = PDword((unsigned __int16 *)v10, 1u, 1);
      v62 = *(_QWORD *)(v10 + 144);
      v63 = *(_OWORD *)(v10 + 128);
      *((_OWORD *)a2 + 134) = *(_OWORD *)(v10 + 112);
      *((_OWORD *)a2 + 135) = v63;
      *((_QWORD *)a2 + 272) = v62;
      if (v61 == 8)
        return 8;
      if (!*(_WORD *)(v10 + 50))
      {
LABEL_90:
        v67 = 2;
LABEL_93:
        if (PDedit((unsigned __int16 *)v21, v67) == 8)
        {
          v68 = *((_OWORD *)v21 + 4);
          v69 = *((_OWORD *)v21 + 5);
          *((_QWORD *)a2 + 272) = *((_QWORD *)v21 + 12);
          *((_OWORD *)a2 + 135) = v69;
          *((_OWORD *)a2 + 134) = v68;
          v34 = v21;
          goto LABEL_44;
        }
        *(_BYTE *)(v9 + 3206) = PDchknegs();
        v70 = *((_QWORD *)v21 + 12);
        v71 = *((_OWORD *)v21 + 5);
        *((_OWORD *)a2 + 134) = *((_OWORD *)v21 + 4);
        *((_QWORD *)a2 + 272) = v70;
        *((_OWORD *)a2 + 135) = v71;
        free(*((void **)v21 + 1));
        v35 = v21;
        goto LABEL_49;
      }
      v64 = 0;
      v65 = *(unsigned __int8 *)(v10 + 17);
      while (1)
      {
        if (v65 != 3)
        {
          if (v65 == *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v10 + 104) + v64) + 71))
            break;
          goto LABEL_89;
        }
        v66 = *(_QWORD *)(*(_QWORD *)(v10 + 104) + v64);
        if (*(_DWORD *)(v10 + 20) == *(_DWORD *)(v66 + 80) && *(_DWORD *)(v10 + 24) == *(_DWORD *)(v66 + 84))
          break;
LABEL_89:
        v64 += 8;
        if (8 * *(unsigned __int16 *)(v10 + 50) == v64)
          goto LABEL_90;
      }
      if (*((_WORD *)a2 + 1074) && *((int *)a2 + 536) > 7)
        return 8;
      result = 8;
      *((_DWORD *)a2 + 536) = 8;
      *((_WORD *)a2 + 1074) = 5151;
      return result;
    case 4u:
    case 5u:
      if (v6 == 5)
        v24 = 11;
      else
        v24 = 0;
      if (v6 == 4)
        v25 = 8;
      else
        v25 = v24;
      *(_WORD *)(v10 + 48) = a2[2138];
      *(_WORD *)v10 = *((_WORD *)a2 + 2);
      *(_WORD *)(v10 + 2) = *(_WORD *)(v9 + 3204);
      *(_BYTE *)(v10 + 42) = 0;
      *(_DWORD *)(v10 + 36) = 0xFFFF;
      v26 = PDword((unsigned __int16 *)v10, v25, 1);
      result = 0;
      if (v26 != 8)
        return result;
      goto LABEL_36;
    case 6u:
      *(_BYTE *)(v10 + 16) = v5;
      if (PDword((unsigned __int16 *)v10, 8u, 5) == 8)
        goto LABEL_36;
      *(_WORD *)(v9 + 40) = *(_WORD *)(a1 + 1686);
      *(_WORD *)(v9 + 42) = 100;
      *(_BYTE *)(v9 + 88) = 0;
      *(_QWORD *)(v9 + 48) = a1 + 1690;
      *(_QWORD *)(v9 + 64) = a1 + 2890;
      *(_WORD *)(v9 + 44) = *(_WORD *)(a1 + 1688);
      SFlstini((_WORD *)(v9 + 40), (_WORD *)(v9 + 44), (_BYTE *)(a1 + 1690), (_WORD *)(a1 + 2890));
      LOWORD(v36) = *(_WORD *)(v10 + 50);
      if (!(_WORD)v36)
        goto LABEL_58;
      v37 = 0;
      do
      {
        v38 = *(_QWORD *)(*(_QWORD *)(v10 + 104) + 8 * v37);
        v39 = strlen((const char *)v38);
        SLrecap((unsigned __int8 *)v38, v39, *(unsigned __int8 *)(v38 + 71), v38 + 80, *(unsigned __int8 *)(v9 + 88), v4);
        __strcpy_chk();
        v40 = *(_QWORD *)(*(_QWORD *)(v10 + 104) + 8 * v37);
        v41 = *(_QWORD *)(*((_QWORD *)a2 + 274) + 8 * v37);
        *(_WORD *)(v41 + 66) = *(_WORD *)(v40 + 66);
        *(_BYTE *)(v41 + 68) = *(_BYTE *)(v40 + 70);
        *(_DWORD *)(v41 + 72) = *(_DWORD *)(v40 + 88);
        *(_DWORD *)(v41 + 76) = *(_DWORD *)(v40 + 92);
        v42 = *(_WORD *)(v40 + 100);
        if (v42)
        {
          *(_DWORD *)v11 = *(_DWORD *)v10;
          *(_DWORD *)(v11 + 4) = *(_DWORD *)(v40 + 96);
          *(_WORD *)(v11 + 16) = v42;
          if (PDalt((unsigned __int16 *)v11) == 8)
            return 8;
          strncpy((char *)(*(_QWORD *)(*((_QWORD *)a2 + 274) + 8 * v37) + 80), *(const char **)(v11 + 8), *(unsigned __int16 *)(v11 + 16));
          *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a2 + 274) + 8 * v37) + *(unsigned __int16 *)(v11 + 16) + 80) = 0;
        }
        else
        {
          *(_BYTE *)(v41 + 80) = 0;
        }
        ++v37;
        v36 = *(unsigned __int16 *)(v10 + 50);
      }
      while (v37 < v36);
LABEL_58:
      result = 0;
      *((_WORD *)a2 + 1092) = v36;
      *(_WORD *)(a1 + 1686) = *(_WORD *)(v9 + 40);
      *(_WORD *)(a1 + 1688) = *(_WORD *)(v9 + 44);
      return result;
    case 7u:
    case 8u:
      *(_WORD *)v10 = *((_WORD *)a2 + 2);
      *(_WORD *)(v10 + 2) = *(_WORD *)(v9 + 3204);
      if (v6 == 7)
        v27 = 8;
      else
        v27 = 11;
      if (PDword((unsigned __int16 *)v10, v27, 2) != 8)
        return 0;
LABEL_36:
      v28 = *(_OWORD *)(v10 + 112);
      v29 = *(_OWORD *)(v10 + 128);
      *((_QWORD *)a2 + 272) = *(_QWORD *)(v10 + 144);
      *((_OWORD *)a2 + 135) = v29;
      *((_OWORD *)a2 + 134) = v28;
      return 8;
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
      v13 = malloc_type_calloc(1uLL, 0x850uLL, 0x1090040FF1BFF1AuLL);
      if (!v13)
        return 8;
      v14 = (uint64_t)v13;
      v13[1032] = *((_WORD *)a2 + 1);
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      __strcpy_chk();
      *(_WORD *)(v14 + 784) = *((_WORD *)a2 + 387);
      *(_DWORD *)(v14 + 2076) = *((_DWORD *)a2 + 514);
      *(_WORD *)(v14 + 2074) = *((_WORD *)a2 + 2);
      *(_DWORD *)(v14 + 772) = 0;
      if (*a2 - 10 >= 5)
        v15 = 0;
      else
        v15 = 0x403060502uLL >> (8 * (*a2 - 10));
      *(_QWORD *)(v14 + 776) = 0;
      *(_DWORD *)(v14 + 2069) = 0;
      *(_DWORD *)(v14 + 2066) = 0;
      v16 = PDdb(v14, v15 & 7);
      v17 = *(_QWORD *)(v14 + 2120);
      v18 = *(_OWORD *)(v14 + 2104);
      *((_OWORD *)a2 + 134) = *(_OWORD *)(v14 + 2088);
      *((_OWORD *)a2 + 135) = v18;
      *((_QWORD *)a2 + 272) = v17;
      if (v16 == 8)
        goto LABEL_43;
      v19 = *a2;
      if (v19 == 10)
      {
        *((_WORD *)a2 + 2) = *(_WORD *)(v14 + 2074);
        *(_BYTE *)(v9 + 3206) = PDchknegs();
      }
      else if (v19 == 13)
      {
        *((_WORD *)a2 + 2) = 0;
      }
      *((_WORD *)a2 + 387) = *(_WORD *)(v14 + 784);
      *((_WORD *)a2 + 1029) = *(_WORD *)(v14 + 2078);
      goto LABEL_48;
    case 0xFu:
      v30 = malloc_type_calloc(1uLL, 0x30uLL, 0x109004046003039uLL);
      if (!v30)
        goto LABEL_74;
      v14 = (uint64_t)v30;
      if (PDapp((uint64_t)v30, 1) == 8)
        goto LABEL_42;
      *((_WORD *)a2 + 1) = *(_WORD *)(v14 + 2);
      goto LABEL_48;
    case 0x10u:
      v31 = malloc_type_calloc(1uLL, 0x30uLL, 0x109004046003039uLL);
      if (!v31)
      {
LABEL_74:
        result = 8;
        v56 = MEMORY[8];
        v57 = MEMORY[0x18];
        *((_QWORD *)a2 + 272) = MEMORY[0x28];
        *((_OWORD *)a2 + 135) = v57;
        *((_OWORD *)a2 + 134) = v56;
        return result;
      }
      v14 = (uint64_t)v31;
      v31[1] = *((_WORD *)a2 + 1);
      if (PDapp((uint64_t)v31, 2) != 8)
      {
LABEL_48:
        v35 = (void *)v14;
LABEL_49:
        free(v35);
        return 0;
      }
LABEL_42:
      v32 = *(_OWORD *)(v14 + 8);
      v33 = *(_OWORD *)(v14 + 24);
      *((_QWORD *)a2 + 272) = *(_QWORD *)(v14 + 40);
      *((_OWORD *)a2 + 135) = v33;
      *((_OWORD *)a2 + 134) = v32;
LABEL_43:
      v34 = (void *)v14;
LABEL_44:
      free(v34);
      return 8;
    default:
      return result;
  }
}

_BYTE *HypStrip(_BYTE *result, _QWORD *a2, int a3)
{
  int v3;
  unint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v3 = *result;
  if (*result)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0x80000000;
    do
    {
      if (v3 == a3)
      {
        if (v6 == 32)
        {
          *(_DWORD *)a2 |= 1u;
          v6 = 32;
        }
        else
        {
          *((_DWORD *)a2 + v5) |= 2 * v7;
        }
      }
      else
      {
        v8 = v6++;
        result[v8] = v3;
        v7 >>= 1;
        if (v6 == 32)
        {
          ++v5;
          v7 = 0x80000000;
        }
      }
      if (v4 > 0x3E)
        break;
      v3 = result[++v4];
    }
    while (v3);
  }
  else
  {
    v6 = 0;
  }
  result[v6] = 0;
  return result;
}

uint64_t ICpre(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  uint64_t v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  unsigned int v58;
  int v59;
  _BOOL4 v60;
  int v61;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int16 *v69;
  int v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned __int16 v75;
  char __src[65];
  uint64_t v77;

  v4 = 0;
  v77 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 3184);
  v6 = *(_QWORD *)(v5 + 264);
  v75 = 0;
  v74 = 0;
  v69 = *(unsigned __int16 **)(v6 + 112);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 248) + 56);
  __src[0] = 0;
  *(_BYTE *)(a2 + 1547) = 0;
  *(_BYTE *)(a2 + 1417) = 0;
  *(_BYTE *)(a2 + 1482) = 0;
  *(_WORD *)(a2 + 1322) = 0;
  *(_WORD *)(v6 + 3492) = 0;
  *(_BYTE *)(v6 + 3512) = 0;
  do
  {
    *(_WORD *)(*(_QWORD *)(v6 + 3520) + 2 * v4) = 0;
    *(_WORD *)(*(_QWORD *)(v6 + 24) + 2 * v4) = 0;
    *(_BYTE *)(*(_QWORD *)(v6 + 3496) + v4) = 0;
    *(_BYTE *)(*(_QWORD *)(v6 + 3504) + v4++) = 0;
  }
  while (v4 != 6);
  v8 = *(unsigned __int8 *)(a2 + 8);
  v73 = a2 + 1547;
  if (!*(_DWORD *)(a2 + 1408))
  {
    v15 = 0;
    *(_WORD *)(v5 + 2) = 0;
    *(_WORD *)(v5 + 4) = *(_WORD *)(a2 + 1612) - 1;
    v10 = 11;
    goto LABEL_41;
  }
  LOWORD(v74) = 0;
  *(_WORD *)(a2 + 1413) = 0;
  v9 = (__int16 *)(v5 + 2);
  v10 = SLpar(a1, (unsigned __int16 *)(v5 + 2), (__int16 *)(v5 + 4), &v74, v7);
  if (v10 != 8)
  {
    v15 = 0;
    goto LABEL_27;
  }
  if (v8 == 16)
  {
    if (a1[*v9] == 105)
    {
      if ((v74 & 0x200) == 0)
      {
        v15 = 1;
        if (*v9 == *(_WORD *)(v5 + 4))
        {
          *(_QWORD *)(a2 + 1328) |= 0x400uLL;
          *(_WORD *)(a2 + 1547) = 105;
          strcpy(__src, "I");
          SFadd(__src, 1, (__int16 *)(v6 + 40), (__int16 *)(v6 + 44), 100, *(__int16 *)(v6 + 56), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 64));
          *(_WORD *)(v6 + 40) = 1;
          v10 = 4;
          v15 = 0;
        }
        else
        {
          v10 = 8;
        }
        goto LABEL_27;
      }
LABEL_20:
      v14 = 8;
      goto LABEL_21;
    }
  }
  else if (v8 == 17)
  {
    v11 = *v9;
    v12 = a1[v11];
    if (v12 == 84 || v12 == 78)
    {
      if ((v74 & 0x2000) != 0)
      {
        *(_QWORD *)(a2 + 1328) |= 0x400uLL;
        *(_WORD *)(a2 + 1547) = a1[v11];
        *(_WORD *)(a2 + 1612) = 1;
        __strcpy_chk();
        v13 = *(unsigned __int8 *)(a2 + 1547);
        if ((*(_DWORD *)(v7 + 4 * v13) & 0x40000000) != 0)
          LOBYTE(v13) = v13 + 32;
        __src[0] = v13;
        SFadd(__src, 1, (__int16 *)(v6 + 40), (__int16 *)(v6 + 44), 100, *(__int16 *)(v6 + 56), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 64));
        *(_WORD *)(v6 + 40) = 1;
        v14 = 4;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
  }
  v14 = 8;
LABEL_21:
  v15 = 0;
  if ((v74 & 0x200) != 0 || (unsigned __int16)v74 == 0)
    v10 = 4;
  else
    v10 = v14;
LABEL_27:
  v17 = v74;
  if (!(_WORD)v74)
  {
    *(_BYTE *)(a2 + 1416) = 0;
    *(_DWORD *)(a2 + 1412) = 0;
    goto LABEL_41;
  }
  *(_BYTE *)(a2 + 1412) = (v74 & 0x200) != 0;
  if ((v17 & 0x100) != 0)
    *(_QWORD *)(a2 + 1328) |= 0x40000uLL;
  if ((v17 & 0x400) != 0)
  {
    *(_BYTE *)(a2 + 1413) = 1;
    if ((v17 & 0x800) == 0)
      goto LABEL_36;
  }
  else
  {
    *(_BYTE *)(a2 + 1413) = 0;
    if ((v17 & 0x1000) == 0)
    {
      *(_BYTE *)(a2 + 1415) = 0;
      if ((v17 & 0x800) != 0)
        goto LABEL_39;
LABEL_36:
      *(_BYTE *)(a2 + 1414) = 0;
      *(_BYTE *)(a2 + 1416) = (v17 & 0x2000) != 0;
      goto LABEL_41;
    }
    *(_BYTE *)(a2 + 1415) = 1;
    if ((v17 & 0x800) == 0)
      goto LABEL_36;
  }
LABEL_39:
  *(_BYTE *)(a2 + 1414) = 1;
LABEL_41:
  if (v10 == 4)
    v18 = 4;
  else
    v18 = 11;
  v72 = v18;
  if (*(_BYTE *)(a2 + 1416))
  {
    if (*(_BYTE *)(a2 + 1415))
    {
      *(_WORD *)(a2 + 1415) = 0;
    }
    else if (*(_BYTE *)(a2 + 8) && ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0xC420) == 0)
    {
      *(_BYTE *)(a2 + 1416) = 0;
    }
  }
  else if (*(_BYTE *)(a2 + 1415) && v8 != 16 && v8 != 15)
  {
    if ((v8 - 5) < 2 || v8 == 9)
    {
      LOWORD(v19) = *(_WORD *)(v5 + 4);
    }
    else
    {
      if (v8 == 8 || !*(_WORD *)(*(_QWORD *)(v5 + 248) + 88))
        goto LABEL_66;
      v19 = *(__int16 *)(v5 + 4);
      v20 = a1[v19];
      if ((*(_DWORD *)(v7 + 4 * v20) & 0x40000000) != 0)
        LOBYTE(v20) = v20 + 32;
      v21 = v20 - 115;
      v22 = v21 > 7;
      v23 = (1 << v21) & 0xA1;
      if (v22 || v23 == 0)
      {
LABEL_66:
        *(_BYTE *)(a2 + 1415) = 0;
        goto LABEL_67;
      }
    }
    *(_WORD *)(v5 + 4) = v19 + 1;
  }
LABEL_67:
  v70 = v10;
  __strcpy_chk();
  v25 = *(__int16 *)(v5 + 2);
  v26 = &a1[v25];
  v27 = a1[v25];
  v28 = *(unsigned __int8 *)(a2 + 1338);
  if (v27 == v28)
  {
    if ((int)v25 < *(__int16 *)(a2 + 1612))
    {
      v29 = *(__int16 *)(a2 + 1612) - v25;
      do
      {
        v30 = *v26++;
        if (v30 != v27)
          break;
        LODWORD(v25) = v25 + 1;
        *(_WORD *)(v5 + 2) = v25;
        --v29;
      }
      while (v29);
    }
    if (*(_DWORD *)(a2 + 1308))
      *(_QWORD *)(a2 + 1328) |= 8uLL;
  }
  v31 = *(__int16 *)(v5 + 4);
  if ((v31 & 0x80000000) == 0)
  {
    do
    {
      if (a1[(unsigned __int16)v31] != v28)
        break;
      v32 = (__int16)v31;
      LOWORD(v31) = v31 - 1;
      *(_WORD *)(v5 + 4) = v31;
    }
    while (v32 > 0);
  }
  v71 = v15;
  __strncpy_chk();
  v33 = *(__int16 *)(v5 + 2);
  v34 = *(__int16 *)(a2 + 1612);
  if (v33 >= v34)
  {
    v35 = 0;
  }
  else
  {
    v35 = 0;
    v36 = 0;
    v37 = *(unsigned __int8 *)(a2 + 1338);
    v38 = *(__int16 *)(v5 + 2);
    do
    {
      v39 = a1[v38];
      if (v39 == v37 && v38 <= *(__int16 *)(v5 + 4))
      {
        v40 = 1 << -(char)v36--;
        *(_DWORD *)(v6 + 3472 + 4 * ((unsigned __int16)v36 >> 5)) |= v40;
        ++v35;
      }
      else
      {
        __src[v33++] = v39;
      }
      ++v38;
      ++v36;
    }
    while (v34 != v38);
  }
  __src[v33] = 0;
  strcpy(a1, __src);
  __strcpy_chk();
  if (*(__int16 *)(v5 + 2) < 1)
  {
    v41 = 0;
  }
  else
  {
    v41 = 0;
    do
    {
      v42 = v41;
      *(_BYTE *)(a2 + 1417 + v41) = __src[v41];
      ++v41;
    }
    while (v42 <= 0x3E && v41 < *(__int16 *)(v5 + 2));
  }
  *(_BYTE *)(a2 + v41 + 1417) = 0;
  v43 = *(__int16 *)(v5 + 4);
  if (v43 + 1 >= *(__int16 *)(a2 + 1612))
  {
    v45 = 0;
  }
  else
  {
    v44 = 0;
    do
    {
      *(_BYTE *)(a2 + 1482 + v44) = __src[v43 + 1 + v44];
      v45 = v44 + 1;
      if ((uint64_t)(v43 + 2 + v44) >= *(__int16 *)(a2 + 1612))
        break;
    }
    while (v44++ < 0x3F);
  }
  *(_BYTE *)(a2 + v45 + 1482) = 0;
  v47 = *(_WORD *)(v5 + 4) - v35;
  *(_WORD *)(v5 + 4) = v47;
  *(_BYTE *)(v6 + 88) = SLcap((uint64_t)a1, *(__int16 *)(v5 + 2), v47, (_QWORD *)(v6 + 92), v7);
  if (*(__int16 *)(v5 + 2) <= *(__int16 *)(v5 + 4))
  {
    v48 = 0;
    v51 = 0;
    v50 = 0;
    v49 = 0;
    v53 = *(__int16 *)(v5 + 2) - 1;
    v54 = &a1[v53];
    v52 = v72;
    while (1)
    {
      v55 = &v54[v48];
      v56 = v54[v48 + 1];
      v57 = *(_DWORD *)(v7 + 4 * v56);
      if ((v57 & 0x60000040) != 0)
      {
        ++v49;
      }
      else if ((_DWORD)v56 == 63 || (_DWORD)v56 == 42)
      {
        ++v50;
      }
      if ((v57 & 0x40000000) != 0)
        LOBYTE(v56) = v56 + 32;
      *(_BYTE *)(a2 + 1547 + v48) = v56;
      v58 = v55[1];
      if (v58 == 39)
      {
        *(_WORD *)(v6 + 3492) |= 0x400u;
        v58 = v55[1];
      }
      v59 = *(_DWORD *)(v7 + 4 * v58);
      v60 = (v59 & 0x4064000) == 0 || (~v59 & 0x50000000) != 0;
      if (v60)
        v61 = v51;
      else
        v61 = 1;
      if (v60 || v8 != 8)
      {
        if (v8 != 3 || (v54[v48] | 0x20) != 0x6C || (v54[v48 + 2] | 0x20) != 0x6C)
          goto LABEL_133;
        v63 = *(_DWORD *)(a2 + 24);
        if (v58 == 46 && (v63 & 0x80) != 0)
          goto LABEL_168;
        if (v58 == 183)
        {
          v51 = v61;
          if ((v63 & 0x40) != 0)
            goto LABEL_168;
        }
        else
        {
LABEL_133:
          v51 = v61;
        }
      }
      else if ((*(_BYTE *)(a2 + 24) & 0x40) == 0 || (*(_QWORD *)&v59 & 0x40000) == 0)
      {
        v51 = 1;
      }
      ++v48;
      if (v53 + v48 >= *(__int16 *)(v5 + 4))
        goto LABEL_135;
    }
  }
  LODWORD(v48) = 0;
  v49 = 0;
  v50 = 0;
  LOBYTE(v51) = 0;
  v52 = v72;
LABEL_135:
  *(_BYTE *)(a2 + v48 + 1547) = 0;
  if (v8 == 11)
  {
    LODWORD(v64) = *(__int16 *)(v5 + 4);
    if (*(__int16 *)(v5 + 2) > (int)v64)
      goto LABEL_155;
    v65 = *(__int16 *)(v5 + 2);
    do
    {
      if (*(unsigned __int8 *)(a2 + v65 + 1547) == 255)
      {
        v66 = v65 + 1;
        if (v65 <= (__int16)v64)
        {
          v64 = (__int16)v64;
          do
          {
            *(_BYTE *)(a2 + v64 + 1549) = *(_BYTE *)(a2 + v64 + 1548);
            v67 = v64-- + 1;
          }
          while (v67 > v66);
        }
        *(_BYTE *)(a2 + v65 + 1547) = 105;
        *(_BYTE *)(a2 + v66 + 1547) = 106;
        LOWORD(v48) = v48 + 1;
        if ((*(unsigned __int8 *)(v6 + 88) | 2) == 3)
        {
          *(_DWORD *)(v6 + 92) |= 0x40000000u;
          *(_BYTE *)(v6 + 88) = 3;
        }
      }
      else
      {
        v66 = v65 + 1;
      }
      LOWORD(v64) = *(_WORD *)(v5 + 4);
      v22 = v65 < (__int16)v64;
      v65 = v66;
    }
    while (v22);
  }
  if (v8 == 15)
  {
    if ((_BYTE)v51
      && (*(_BYTE *)(v6 + 88) == 2 || (*(_BYTE *)(a2 + 24) & 0x40) != 0 && (*(_DWORD *)(v6 + 92) & 0x80000000) != 0))
    {
      goto LABEL_168;
    }
  }
  else if (v8 == 8 && (*(_BYTE *)(a2 + 24) & 0x40) != 0 && (_BYTE)v51)
  {
    goto LABEL_168;
  }
LABEL_155:
  *(_WORD *)(a2 + 1612) = v48;
  ICchkprepos(a2);
  SLmap(v73, 0, *(__int16 *)(a2 + 1612), (_QWORD *)(a2 + 1672), (_QWORD *)(a2 + 1664), (_QWORD *)(a2 + 1648), (_QWORD *)(a2 + 1656));
  if (*(_DWORD *)a2 == 5 && v50)
    return 9;
  if (!v71
    && v70 != 4
    && v49 <= 1
    && !v50
    && (!*v69
     || SFcltchk(v73, 0, (__int16)(*(_WORD *)(a2 + 1612) - 1), &v75, (_WORD *)&v74 + 1, *v69, *((_QWORD *)v69 + 1)) != 10))
  {
    v52 = 4;
  }
  if (v8 == 5 && (*(_BYTE *)(a2 + 24) & 0x40) != 0 && (_BYTE)v51)
  {
LABEL_168:
    *(_QWORD *)(a2 + 1328) |= 0x1000000uLL;
    return 11;
  }
  return v52;
}

uint64_t ICprever(char *__src, size_t a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  int v18;
  size_t v19;
  uint64_t v20;
  __int16 v21;
  size_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  int v30;
  __int16 v31;
  _BYTE *v32;
  uint64_t v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  uint64_t v41;
  int v42;
  int v43;
  size_t v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  char v48;
  int v49;
  char v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  _BOOL4 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  uint64_t v58;
  int *v59;
  int v60;
  char *v61;
  __int16 v62;
  unsigned int v63;
  unsigned int v64;
  __int16 v65;
  uint64_t v66;
  char v67;
  size_t v68;
  __int16 v69;
  uint64_t v70;
  size_t v71;
  uint64_t v72;
  size_t v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;
  size_t v79;
  uint64_t v80;
  size_t v81;
  __int16 v82;
  __int16 v83;
  __int16 v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  int v88;
  unsigned int *v89;
  int v90;
  char v91;
  unsigned int v92;
  unint64_t v93;
  unsigned int v94;
  int v95;
  int v96;
  char v97;
  __int16 v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t v102;
  size_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __int16 v112;
  char *v113;
  char *v114;
  int v115;
  int v116;
  char v117;
  int v118;
  __int16 v119;
  int v120;
  __int16 v121;
  _BOOL4 v122;
  char *__s;
  char *__sa;
  int v125;
  int v126;
  char __dst[65];
  char __srca[65];
  char v129[64];
  char v130;
  char v131[65];
  _BYTE v132[65];
  char v133[65];
  uint64_t v134;

  v3 = __src;
  v134 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 3184);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = *(_QWORD *)(v4 + 248);
  v7 = *(_QWORD *)(v6 + 56);
  v8 = *(unsigned __int8 *)(a2 + 8);
  strncpy(__dst, __src, 0x40uLL);
  __dst[64] = 0;
  v9 = strlen(v3);
  v10 = *(__int16 *)(v4 + 2);
  v11 = v9;
  if (v9 <= v10)
  {
    v11 = *(__int16 *)(v4 + 2);
  }
  else
  {
    v12 = *(unsigned __int8 *)(a2 + 1338);
    v13 = &v3[*(__int16 *)(v4 + 2)];
    v14 = v9 - (uint64_t)*(__int16 *)(v4 + 2);
    do
    {
      v16 = *(unsigned __int8 *)v13++;
      v15 = v16;
      if (v16 != v12)
        __dst[v10++] = v15;
      --v14;
    }
    while (v14);
  }
  __dst[v10] = 0;
  v17 = *(_QWORD *)(v5 + 112);
  if (!*(_WORD *)v17)
  {
    *(_WORD *)(v5 + 18) = 0;
    *(_WORD *)v4 = 0;
    **(_DWORD **)(v5 + 3520) = 0;
    *(_WORD *)(v5 + 102) = 0;
    *(_BYTE *)(*(_QWORD *)(v5 + 3496) + 1) = 0;
    **(_BYTE **)(v5 + 3496) = 0;
  }
  *(_WORD *)(v5 + 42) = 100;
  if (v8 == 1)
  {
    if (*(_BYTE *)(a2 + 1547) == 110 && *(_BYTE *)(a2 + 1548) == 101 && (v18 = *(__int16 *)(a2 + 1612), v18 >= 3))
    {
      *(_WORD *)(a2 + 1612) = v18 - 2;
      v19 = strlen((const char *)(a2 + 1549));
      memmove((void *)(a2 + 1547), (const void *)(a2 + 1549), v19 + 1);
      *(_BYTE *)(v5 + 3512) = 1;
    }
    else
    {
      *(_BYTE *)(v5 + 3512) = 0;
      *(_BYTE *)(a2 + 1614) = 0;
    }
    v20 = *(__int16 *)(a2 + 1612);
    v21 = v20 - 3;
    if (*(_BYTE *)(a2 + v20 - 3 + 1547) == 45
      && (v22 = v20 + a2, *(_BYTE *)(v22 + 1545) == 108)
      && *(_BYTE *)(v22 + 1546) == 105)
    {
      *(_WORD *)(a2 + 1612) = v21;
      *(_WORD *)(a2 + 1624) = 27693;
      *(_BYTE *)(a2 + 1626) = 105;
      *(_BYTE *)(a2 + v21 + 1547) = 0;
    }
    else
    {
      *(_BYTE *)(a2 + 1624) = 0;
    }
  }
  if (!*(_WORD *)(v6 + 88))
  {
    if (!*(_WORD *)v17)
    {
      v23 = ICverify((char *)(a2 + 1547), *(__int16 *)(a2 + 1612), a2);
      goto LABEL_82;
    }
    if ((v8 == 8 || v8 == 3) && (*(_BYTE *)(a2 + 1331) & 1) != 0)
      return 11;
    v24 = *(unsigned __int16 *)(v4 + 2);
    v121 = *(_WORD *)(v4 + 4);
    *(_WORD *)(v4 + 2) = 0;
    *(_WORD *)(v4 + 4) = *(_WORD *)(a2 + 1612) - 1;
    v23 = ICclt((char *)(a2 + 1547), a2);
    if ((_DWORD)v23 == 3)
      *(_WORD *)v4 |= 2u;
    __s = (char *)v3;
    if (*(__int16 *)(v4 + 2) <= *(__int16 *)(v4 + 4))
    {
      v25 = 0;
      v26 = *(__int16 *)(v4 + 2);
      do
      {
        v27 = v26;
        *(_BYTE *)(a2 + 1547 + v25++) = *(_BYTE *)(a2 + 1547 + v26++);
      }
      while (v27 < *(__int16 *)(v4 + 4));
      v125 = v26;
    }
    else
    {
      v125 = *(__int16 *)(v4 + 2);
      LODWORD(v25) = 0;
    }
    *(_BYTE *)(a2 + v25 + 1547) = 0;
    *(_WORD *)(a2 + 1612) = v25;
    v28 = v17;
    v30 = *(unsigned __int8 *)(v17 + 34);
    v29 = (const char *)(v17 + 34);
    if (v30)
    {
      if ((*(_BYTE *)(a2 + 1328) & 0x10) != 0)
      {
        if (!v24)
        {
LABEL_44:
          if (*(_BYTE *)(a2 + 1414) && (*(_BYTE *)(a2 + 1328) & 0x10) != 0)
            *(_WORD *)(v4 + 2) = v24 - 1;
          v32 = (_BYTE *)(v28 + 44);
          if (!*(_BYTE *)(v28 + 44) || (v33 = *(_QWORD *)(a2 + 1328), (v33 & 0x10) != 0))
          {
            if (*(_BYTE *)(a2 + 1415))
              goto LABEL_56;
            v35 = v121;
          }
          else
          {
            if ((v33 & 0x80000) != 0)
              v34 = (const char *)(v28 + 18);
            else
              v34 = (const char *)(v28 + 44);
            v35 = v121 - (*(_BYTE *)(a2 + 1415) != 0) - strlen(v34);
          }
          *(_WORD *)(v4 + 4) = v35;
LABEL_56:
          v36 = *(_QWORD *)(a2 + 1328);
          if ((v36 & 0x10) != 0)
            *(_WORD *)(v5 + 102) = 1;
          if ((v36 & 0x2000) != 0)
            *(_WORD *)(a2 + 1612) = v25 + 1;
          if ((_DWORD)v23 == 10 && *(_DWORD *)(a2 + 1308))
          {
            if (!*v29)
              goto LABEL_67;
            if (__s[*(__int16 *)(v4 + 2)] == *(_BYTE *)(a2 + 1338))
              *(_QWORD *)(a2 + 1328) = v36 | 8;
          }
          if (*v29)
            *(_BYTE *)(v28 + 16) = SLcap((uint64_t)__dst, 0, (__int16)(*(_WORD *)(v4 + 2) - 1), (_QWORD *)(v28 + 80), v7);
LABEL_67:
          v116 = v8;
          v37 = *(_WORD *)(v4 + 4);
          if (*v32)
          {
            v38 = v7;
            v39 = v37 + 1;
            v40 = strlen(__s);
            v41 = v28;
            v42 = v39;
            v7 = v38;
            *(_BYTE *)(v28 + 17) = SLcap((uint64_t)__dst, v42, v40, (_QWORD *)(v28 + 80), v38);
            v37 = *(_WORD *)(v4 + 4);
          }
          else
          {
            v41 = v28;
          }
          v43 = SLcap((uint64_t)__dst, *(__int16 *)(v4 + 2), v37, (_QWORD *)(v41 + 80), v7);
          *(_BYTE *)(v41 + 76) = v43;
          if (v43 != 2)
          {
            v17 = v28;
            v8 = v116;
            v3 = __s;
            v11 = v125;
            goto LABEL_82;
          }
          *(_QWORD *)(v41 + 80) = -1;
          if (*v29 && *(_BYTE *)(v28 + 16) == 1 && strlen(v29) == 2)
            *(_BYTE *)(v28 + 16) = 2;
          v8 = v116;
          v11 = v125;
          if (*v32)
          {
            v17 = v28;
            if (*(_BYTE *)(v28 + 17) == 1)
            {
              v44 = strlen((const char *)(v28 + 44));
              v3 = __s;
              if (v44 == 2)
                *(_BYTE *)(v17 + 17) = 2;
              goto LABEL_82;
            }
          }
          else
          {
            v17 = v28;
          }
          v3 = __s;
          goto LABEL_82;
        }
        v31 = *(_WORD *)(v4 + 2) + v24;
      }
      else
      {
        v31 = v24 + strlen(v29);
      }
    }
    else
    {
      v31 = v24;
    }
    *(_WORD *)(v4 + 2) = v31;
    goto LABEL_44;
  }
  *(_WORD *)(*(_QWORD *)(v4 + 280) + 1742) = 0;
  v23 = ICcmpver(a2);
  if ((*(_WORD *)v4 & 8) != 0 && (*(_BYTE *)(a2 + 1328) & 0x20) != 0)
    return 11;
LABEL_82:
  if (*(_DWORD *)(v5 + 3472))
    *(_WORD *)(a2 + 1322) |= 8u;
  if (v8 == 5)
  {
    if ((*(_BYTE *)(a2 + 1331) & 1) != 0)
      return 11;
  }
  else if (v8 == 1 && *(_BYTE *)(v5 + 3512))
  {
    v46 = *(__int16 *)(a2 + 1612);
    if ((v46 & 0x80000000) == 0)
    {
      memmove((void *)(a2 + 1549), (const void *)(a2 + 1547), *(unsigned __int16 *)(a2 + 1612) + 1);
      LOWORD(v46) = *(_WORD *)(a2 + 1612);
    }
    *(_WORD *)(a2 + 1547) = 25966;
    v47 = v46 + 2;
    *(_WORD *)(a2 + 1612) = v47;
    *(_BYTE *)(v5 + 3512) = 0;
    if ((_DWORD)v23 != 11)
    {
      if ((_DWORD)v23 != 10)
        goto LABEL_104;
      if (**(_BYTE **)(v5 + 3496))
      {
        v23 = 10;
        goto LABEL_104;
      }
    }
    v23 = ICverify((char *)(a2 + 1547), v47, a2);
  }
  if ((_DWORD)v23 == 11)
  {
    __sa = (char *)v17;
    v126 = v11;
    v48 = 0;
    v122 = 0;
    v119 = 0;
    v120 = 0;
    v49 = 0;
    v118 = 0;
    v45 = 11;
    v50 = 1;
    goto LABEL_98;
  }
LABEL_104:
  __sa = (char *)v17;
  v53 = ICfndchk(a2);
  v45 = v53;
  v54 = v53 != 11;
  v55 = *(_QWORD *)(a2 + 1328);
  if ((v55 & 0x401) != 0 && *(_BYTE *)(a2 + 1412) && !*(_BYTE *)(a2 + 1624) && (*(_WORD *)(a2 + 1322) & 1) == 0)
  {
    v122 = v53 != 11;
    v126 = v11;
    v48 = 0;
    v119 = *(_WORD *)(v5 + 18);
    v120 = 1;
    v56 = -1026;
    v118 = *(_QWORD *)(a2 + 1328);
LABEL_132:
    strncpy(v129, (const char *)(a2 + 1690), 0x40uLL);
    v130 = 0;
    SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(_BYTE **)(v5 + 48), *(_WORD **)(v5 + 64));
    v49 = 0;
    *(_QWORD *)(a2 + 1328) &= v56;
    *(_WORD *)v4 &= ~4u;
    v50 = v48;
    goto LABEL_98;
  }
  if (v8 != 6 || (v55 & 0x10) == 0 || !*(_BYTE *)(a2 + 1412))
  {
    if ((v55 & 0x400) == 0 || !*(_BYTE *)(a2 + 1416) || v8 && ((1 << (v8 - 1)) & 0xC420) == 0)
    {
      if ((_DWORD)v23 == 2 || (_DWORD)v53 == 2)
        goto LABEL_126;
      if ((_DWORD)v53 == 10)
      {
LABEL_124:
        *(_DWORD *)(a2 + 4) = v23;
        return v23;
      }
LABEL_127:
      *(_DWORD *)(a2 + 4) = v45;
      return v45;
    }
    if ((*(_WORD *)(a2 + 1322) & 1) != 0)
    {
      if ((int)v53 >= (int)v23)
        v45 = v23;
      else
        v45 = v53;
      goto LABEL_127;
    }
    v122 = v53 != 11;
    v126 = v11;
    v119 = 0;
    v120 = 0;
    v118 = 0;
    v48 = 1;
    v56 = -1025;
    goto LABEL_132;
  }
  v57 = (unsigned __int8 *)(a2 + 1547);
  strncpy(v129, (const char *)(a2 + 1547), 0x40uLL);
  v130 = 0;
  v126 = v11;
  v122 = v54;
  if (!*(_BYTE *)(v5 + 88))
  {
    v119 = 0;
    v120 = 0;
    v118 = 0;
    v117 = 0;
    v49 = 1;
    v50 = 1;
    goto LABEL_134;
  }
  do
  {
    v58 = *v57;
    if ((*(_DWORD *)(v7 + 4 * v58) & 0x40000000) != 0)
      LOBYTE(v58) = v58 + 32;
    *v57++ = v58;
  }
  while ((_BYTE)v58);
  v48 = 0;
  v119 = 0;
  v120 = 0;
  v118 = 0;
  v50 = 1;
  v49 = 1;
LABEL_98:
  if ((_DWORD)v45 == 11 && v8 == 16)
  {
    v129[0] = 0;
    if (SLord((uint64_t)v3, v129, *(__int16 *)(v4 + 2), *(__int16 *)(v4 + 4), v7))
    {
      *(_WORD *)(v5 + 3492) |= 1u;
      if (!v129[0])
      {
        v45 = 10;
        goto LABEL_127;
      }
      v51 = strlen(v129);
      SFadd(v129, v51, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
      v52 = *(_QWORD *)(a2 + 1328) | 0x4000;
      goto LABEL_103;
    }
    v117 = v48;
    v45 = 11;
  }
  else
  {
    v117 = v48;
  }
LABEL_134:
  v59 = (int *)(v5 + 92);
  if (*(_BYTE *)(a2 + 1412) && !*(_BYTE *)(a2 + 1624))
  {
    v66 = *(_QWORD *)(a2 + 1328);
    if ((v66 & 0x200) != 0)
    {
      *(_QWORD *)(a2 + 1328) = v66 & 0xFFFFFFFFFFFFFDFFLL;
      v115 = 1;
    }
    else
    {
      v115 = 0;
    }
    v102 = *(__int16 *)(a2 + 1612);
    if (v102 <= 63)
    {
      v103 = a2 + 1547;
      *(_BYTE *)(v103 + v102) = 46;
      v104 = *(_WORD *)(a2 + 1612) + 1;
      *(_WORD *)(a2 + 1612) = v104;
      *(_BYTE *)(v103 + v104) = 0;
    }
    ++*(_WORD *)(v4 + 4);
    v114 = (char *)(a2 + 1482);
    ICadjpost((char *)(a2 + 1482));
    v113 = (char *)(a2 + 1547);
    v105 = ICverify((char *)(a2 + 1547), *(__int16 *)(a2 + 1612), a2);
    if ((_DWORD)v105 == 11)
    {
      if ((v66 & 0x200) != 0)
      {
        *(_QWORD *)(a2 + 1328) |= 0x200uLL;
        *(_WORD *)v4 |= 4u;
      }
      ICreadjpo(v114);
      v106 = *(_WORD *)(a2 + 1612) - 1;
      *(_WORD *)(a2 + 1612) = v106;
      --*(_WORD *)(v4 + 4);
      *(_BYTE *)(a2 + v106 + 1547) = 0;
      if ((v49 | v120) == 1)
      {
        if ((v50 & 1) == 0)
        {
          v112 = strlen(v129);
          SFadd(v129, v112, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
          *(_QWORD *)(a2 + 1328) = v118;
          *(_WORD *)(v5 + 18) = v119;
          v59 = (int *)(v5 + 92);
          if ((v118 & 0x400) != 0)
          {
            *(_WORD *)v4 |= 4u;
            v45 = 2;
          }
          else
          {
            v45 = 3;
          }
LABEL_233:
          v60 = v115;
          if (!v8)
            goto LABEL_138;
          goto LABEL_137;
        }
        strncpy(v113, v129, 0x40uLL);
        *(_BYTE *)(a2 + 1611) = 0;
        v45 = 10;
      }
      else
      {
        v45 = 11;
      }
      v59 = (int *)(v5 + 92);
      goto LABEL_233;
    }
    v23 = v105;
    if (!*(_BYTE *)(a2 + 8) || ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x20008) != 0 || (*(_WORD *)v4 & 0x10) != 0)
    {
      *(_WORD *)(v5 + 18) |= 0x800u;
      *(_QWORD *)(v5 + 3480) = 0;
    }
    v107 = ICfndchk(a2);
    v45 = v107;
    v108 = *(_QWORD *)(a2 + 1328);
    if ((v108 & 0x400) != 0 && *(_BYTE *)(a2 + 1412))
    {
      if (v122 && (_DWORD)v107 == 10)
      {
        *(_QWORD *)(a2 + 1328) = v108 & 0xFFFFFFFFFFFFFBFFLL;
        *(_WORD *)v4 &= ~4u;
        SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(_BYTE **)(v5 + 48), *(_WORD **)(v5 + 64));
        SLrecap((unsigned __int8 *)v113, *(__int16 *)(a2 + 1612), *(unsigned __int8 *)(*(_QWORD *)(v5 + 72) + v126), v5 + 92, *(unsigned __int8 *)(v5 + 88), v7);
      }
      goto LABEL_127;
    }
    if ((_DWORD)v107 == 10)
    {
      if (*v114)
        ICadjpost(v114);
      goto LABEL_124;
    }
    goto LABEL_127;
  }
  v60 = 0;
  if (!v8)
    goto LABEL_138;
LABEL_137:
  if (((1 << (v8 - 1)) & 0xC420) == 0)
    goto LABEL_153;
LABEL_138:
  if (!*(_BYTE *)(a2 + 1416))
    goto LABEL_153;
  strcpy(__srca, "'");
  strlen(__srca);
  __strncat_chk();
  v61 = strncpy((char *)(a2 + 1547), __srca, 0x40uLL);
  *(_BYTE *)(a2 + 1611) = 0;
  v62 = *(_WORD *)(a2 + 1612) + 1;
  *(_WORD *)(a2 + 1612) = v62;
  *(_BYTE *)(a2 + 1547 + v62) = 0;
  v63 = ICverify(v61, *(__int16 *)(a2 + 1612), a2);
  v64 = v63;
  if (v63 == 10)
  {
    if (*(_DWORD *)(a2 + 1408))
    {
      *(_QWORD *)(a2 + 1328) &= ~0x400uLL;
      *(_WORD *)v4 &= ~4u;
      SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(_BYTE **)(v5 + 48), *(_WORD **)(v5 + 64));
      *(_BYTE *)(a2 + 1416) = 0;
      v65 = *(_WORD *)(v4 + 2) - 1;
      *(_WORD *)(v4 + 2) = v65;
      *(_BYTE *)(v5 + 88) = SLcap((uint64_t)v3, v65, *(__int16 *)(v4 + 4), v59, v7);
      v45 = ICfndchk(a2);
      *(_BYTE *)(strlen((const char *)(a2 + 1417)) + a2 + 1417 - 1) = 0;
      goto LABEL_153;
    }
    goto LABEL_150;
  }
  v67 = v117 ^ 1;
  if (v63 != 11)
    v67 = 1;
  if ((v67 & 1) != 0)
  {
LABEL_150:
    v71 = strlen((const char *)(a2 + 1548));
    memmove((void *)(a2 + 1547), (const void *)(a2 + 1548), v71 + 1);
    --*(_WORD *)(a2 + 1612);
    if ((_DWORD)v45 == 11)
      v45 = v64;
    else
      v45 = v45;
    goto LABEL_153;
  }
  v68 = strlen((const char *)(a2 + 1548));
  memmove((void *)(a2 + 1547), (const void *)(a2 + 1548), v68 + 1);
  --*(_WORD *)(a2 + 1612);
  v69 = strlen(v129);
  SFadd(v129, v69, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
  v70 = *(_QWORD *)(a2 + 1328);
  *(_QWORD *)(a2 + 1328) = v70 | 0x400;
  *(_WORD *)v4 |= 4u;
  if (v60)
    *(_QWORD *)(a2 + 1328) = v70 | 0x600;
  v45 = 2;
LABEL_153:
  if ((v8 - 15) > 1 || !*(_BYTE *)(a2 + 1415))
  {
    v78 = v7;
    goto LABEL_161;
  }
  v72 = *(__int16 *)(a2 + 1612);
  if (v72 <= 63)
  {
    v73 = a2 + 1547;
    *(_BYTE *)(v73 + v72) = 39;
    v74 = *(_WORD *)(a2 + 1612) + 1;
    *(_WORD *)(a2 + 1612) = v74;
    *(_BYTE *)(v73 + v74) = 0;
    LOWORD(v72) = *(_WORD *)(a2 + 1612);
  }
  v75 = ICverify((char *)(a2 + 1547), (__int16)v72, a2);
  if (v75 != 10)
  {
    v97 = v117 ^ 1;
    if (v75 != 11)
      v97 = 1;
    if ((v97 & 1) == 0)
    {
      v98 = *(_WORD *)(a2 + 1612) - 1;
      *(_WORD *)(a2 + 1612) = v98;
      *(_BYTE *)(a2 + v98 + 1547) = 0;
      v99 = strlen(v129);
      SFadd(v129, v99, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
      v100 = *(_QWORD *)(a2 + 1328);
      *(_QWORD *)(a2 + 1328) = v100 | 0x400;
      *(_WORD *)v4 |= 4u;
      if (v60)
        *(_QWORD *)(a2 + 1328) = v100 | 0x600;
      return 2;
    }
    goto LABEL_204;
  }
  if (!*(_DWORD *)(a2 + 1408))
  {
LABEL_204:
    v78 = v7;
    v101 = *(_WORD *)(a2 + 1612) - 1;
    *(_WORD *)(a2 + 1612) = v101;
    *(_BYTE *)(a2 + v101 + 1547) = 0;
    if ((_DWORD)v45 == 11)
      v45 = v75;
    else
      v45 = v45;
    goto LABEL_161;
  }
  *(_QWORD *)(a2 + 1328) &= ~0x400uLL;
  *(_WORD *)v4 &= ~4u;
  SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(_BYTE **)(v5 + 48), *(_WORD **)(v5 + 64));
  *(_BYTE *)(a2 + 1415) = 0;
  v76 = *(_WORD *)(v4 + 4) + 1;
  *(_WORD *)(v4 + 4) = v76;
  v77 = (uint64_t)v3;
  v78 = v7;
  *(_BYTE *)(v5 + 88) = SLcap(v77, *(__int16 *)(v4 + 2), v76, v59, v7);
  v45 = ICfndchk(a2);
  v79 = strlen((const char *)(a2 + 1483));
  memmove((void *)(a2 + 1482), (const void *)(a2 + 1483), v79 + 1);
LABEL_161:
  if ((_DWORD)v45 == 11)
  {
    if (*(_BYTE *)(a2 + 1412) && !*(_BYTE *)(a2 + 1624))
    {
      v80 = *(__int16 *)(a2 + 1612);
      if (v80 <= 63)
      {
        v81 = a2 + 1547;
        *(_BYTE *)(v81 + v80) = 46;
        v82 = *(_WORD *)(a2 + 1612) + 1;
        *(_WORD *)(a2 + 1612) = v82;
        *(_BYTE *)(v81 + v82) = 0;
      }
      ++*(_WORD *)(v4 + 4);
      ICadjpost((char *)(a2 + 1482));
    }
    v45 = ICacrnym(a2 + 1547, *(_WORD *)(a2 + 1612), v59, a2);
    if ((_DWORD)v45 == 11)
    {
      if (*(_BYTE *)(a2 + 1412) && !*(_BYTE *)(a2 + 1624))
      {
        ICreadjpo((char *)(a2 + 1482));
        v83 = *(_WORD *)(a2 + 1612) - 1;
        *(_WORD *)(a2 + 1612) = v83;
        --*(_WORD *)(v4 + 4);
        *(_BYTE *)(a2 + v83 + 1547) = 0;
      }
      if (v8 != 15 || (v45 = ICgreek(a2, 0), (_DWORD)v45 == 11))
      {
        if (!*(_DWORD *)(a2 + 1672) && !*(_DWORD *)(a2 + 1664)
          || v8 == 12 && __sa[44]
          || (v45 = ichhchk((uint64_t)__dst, a2), (_DWORD)v45 == 11))
        {
          if ((*(_BYTE *)(a2 + 1328) & 3) == 0)
          {
            if (ICpar(v133, (uint64_t)v132, a2)
              || strlen((const char *)(a2 + 1547)) > 0x40
              || !SLstrcmp(v133, (unsigned __int8 *)(a2 + 1547)))
            {
              *(_DWORD *)(a2 + 4) = 11;
            }
            else
            {
              __strcpy_chk();
              __strcpy_chk();
              v84 = strlen((const char *)(a2 + 1547));
              *(_WORD *)(a2 + 1612) = v84;
              v85 = ICverify((char *)(a2 + 1547), v84, a2);
              if ((_DWORD)v85 == 10)
              {
                if ((int)(strlen(v131) << 16) >= 1)
                {
                  v86 = 0;
                  v87 = 0;
                  v88 = 0;
                  do
                  {
                    if (v131[v87] != v133[v88])
                    {
                      v89 = *(unsigned int **)(v5 + 80);
                      if (v87 <= 0x1F)
                      {
                        v92 = *v89;
                        HIDWORD(v93) = *v89;
                        LODWORD(v93) = v89[1];
                        v89[1] = v93 >> 1;
                        v91 = 32;
                        v90 = v87;
                      }
                      else
                      {
                        v90 = v87 - 32;
                        v91 = 64;
                        v92 = v89[1];
                        ++v89;
                      }
                      --v88;
                      v94 = v92 & (0xFFFFFFFF >> v90);
                      v95 = (-1 << (v86 + v91)) & v92;
                      if (!v90)
                        v95 = 0;
                      *v89 = v95 | (v94 >> 1);
                      if (*(_DWORD *)(a2 + 1308))
                      {
                        v96 = *(unsigned __int8 *)(a2 + 8);
                        if ((v96 | 0x10) != 0x10 && ((1 << (v96 - 1)) & 0x994) == 0)
                          ICaddbit((unsigned int *)(v5 + 3480), v87, 0);
                      }
                    }
                    ++v88;
                    ++v87;
                    --v86;
                  }
                  while ((uint64_t)v87 < (__int16)strlen(v131));
                }
                __strcpy_chk();
                *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
                v45 = ICfndchk(a2);
                if (SLstrcmp(v132, (unsigned __int8 *)v131))
                {
                  SFadd((char *)(a2 + 1547), *(__int16 *)(a2 + 1612), (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
                  v52 = *(_QWORD *)(a2 + 1328) | 0x20000000;
LABEL_103:
                  *(_QWORD *)(a2 + 1328) = v52;
                  *(_WORD *)v4 |= 4u;
LABEL_126:
                  v45 = 2;
                  goto LABEL_127;
                }
                *(_DWORD *)(a2 + 4) = 10;
              }
              else
              {
                v45 = v85;
                *(_DWORD *)(a2 + 4) = 11;
                __strcpy_chk();
                *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
              }
              if ((_DWORD)v45 != 11)
                return v45;
            }
          }
          v109 = *(__int16 *)(a2 + 1612);
          if ((int)v109 < 1)
          {
            LODWORD(v110) = 0;
          }
          else
          {
            v110 = 0;
            while ((*(_DWORD *)(v78 + 4 * *(unsigned __int8 *)(a2 + 1547 + v110)) & 0x80) != 0)
            {
              if (v109 == ++v110)
                goto LABEL_243;
            }
          }
          if ((_DWORD)v110 == (_DWORD)v109)
          {
LABEL_243:
            *(_WORD *)(v5 + 102) = 1;
            **(_BYTE **)(v5 + 72) = 0;
            **(_QWORD **)(v5 + 80) = 0;
            return ICfndchk(a2);
          }
          return 11;
        }
      }
    }
  }
  return v45;
}

uint64_t ICadjpost(char *a1)
{
  unsigned __int16 v2;
  uint64_t v3;

  v2 = strlen(a1) - 1;
  if ((v2 & 0x8000) == 0)
  {
    v3 = v2;
    strncpy(a1, a1 + 1, v2);
    a1[v3] = 0;
  }
  return 0;
}

uint64_t ICreadjpo(char *a1)
{
  unsigned __int8 v2;
  uint64_t v3;

  v2 = strlen(a1);
  if (v2)
  {
    v3 = v2;
    do
    {
      a1[v3] = a1[(v3 - 1)];
      --v3;
    }
    while ((_BYTE)v3);
  }
  *a1 = 46;
  a1[v2 + 1] = 0;
  return 0;
}

uint64_t ICacrnym(uint64_t a1, __int16 a2, int *a3, uint64_t a4)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  const char *v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  unsigned int v25;
  BOOL v27;
  uint64_t v28;
  char v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  __int16 v45;
  _BYTE *v46;
  BOOL v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  BOOL v53;
  char *__dst;
  uint64_t v56;
  _WORD *v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  char __src[65];
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v4 = (__int16)(a2 - 1);
  if (v4 > 32)
    return 11;
  v8 = *(_QWORD *)(a4 + 3184);
  v9 = *(_QWORD *)(v8 + 264);
  v57 = (_WORD *)v8;
  v10 = *(_QWORD *)(v8 + 248);
  v11 = *(_QWORD *)(v9 + 112);
  v12 = v4 > 0 && *(_BYTE *)(a1 + (__int16)(a2 - 1)) == 115;
  v13 = v12;
  v58 = v13;
  if (v12)
  {
    v61 = (unsigned __int16)(a2 - 2) != 0 && *(_BYTE *)(a1 + (unsigned __int16)(a2 - 2)) == 39;
    if (v61)
      LOWORD(v4) = a2 - 3;
    else
      LOWORD(v4) = a2 - 2;
  }
  else
  {
    v61 = 0;
  }
  v56 = *(_QWORD *)(v10 + 56);
  v16 = *(unsigned __int8 *)(v11 + 34);
  v14 = (const char *)(v11 + 34);
  v15 = v16;
  v17 = *a3;
  if (v16)
  {
    v18 = strlen(v14);
    v19 = a3[2];
    v20 = v17 << v18;
    *a3 = v17 << v18;
    v60 = v19;
    a3[2] = v19 << v18;
    v21 = 1;
  }
  else
  {
    v60 = 0;
    v21 = 0;
    v20 = *a3;
    v17 = 0;
  }
  v22 = (__int16)v4;
  do
  {
    v23 = v22 - 2;
    if (v22 < 1)
      break;
    v24 = *(unsigned __int8 *)(a1 + v22);
    v22 -= 2;
  }
  while (v24 == 46);
  v25 = (v20 ^ 0xAAAAAAAA) >> (32 - v4);
  v27 = (__int16)v4 > 0 && v25 != 0;
  if (v23 != -3 || v27)
  {
    if (v15)
    {
      *a3 = v17;
      a3[2] = v60;
    }
    return 11;
  }
  if ((v4 & 0x8000) != 0)
  {
    v30 = 0;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    LODWORD(v31) = (__int16)(v4 + 1);
    if ((int)v31 <= 1)
      v31 = 1;
    else
      v31 = v31;
    do
    {
      v32 = *(unsigned __int8 *)(a1 + v28);
      if (v32 == 46)
      {
        a3[(unsigned __int16)v28 >> 5] &= ~(1 << ~v29);
        v33 = a3[(unsigned __int16)v30 >> 5];
        v34 = 1 << ~(_BYTE)v30;
        a3[(unsigned __int16)v30 >> 5] = v33 & ~v34;
        v35 = (unsigned __int16)++v28 >> 5;
        v36 = a3[v35];
        v37 = 1 << ~(v29 + 1);
        if ((v36 & v37) != 0)
        {
          a3[(unsigned __int16)v30 >> 5] = v33 | v34;
          v36 = a3[v35];
        }
        a3[v35] = v36 & ~v37;
      }
      else
      {
        __src[(__int16)v30] = v32;
        ++v28;
        ++v30;
      }
      v29 = v28;
    }
    while (v28 != v31);
  }
  v59 = v17;
  v38 = v58 & *(_DWORD *)&v61 & (*(unsigned __int8 *)(a4 + 20) >> 7) ^ 1;
  __dst = (char *)(a4 + 3090);
  v39 = v30;
  do
  {
    while (1)
    {
      if (v61 && (unsigned __int16)v38 != 0)
      {
        v40 = v39 + 1;
        __src[(__int16)v39] = 39;
        v41 = 2;
      }
      else
      {
        if (!v58)
          goto LABEL_47;
        v41 = 1;
        v40 = v39;
      }
      v39 += v41;
      __src[v40] = 115;
LABEL_47:
      v42 = v39;
      __src[(__int16)v39] = 0;
      v43 = (__int16)v39;
      v44 = ICverify(__src, (__int16)v39--, a4);
      if (v61 && (unsigned __int16)v38 != 0)
        v45 = v39;
      else
        v45 = v42;
      if (v44 == 10
        && (!*(_BYTE *)(a4 + 8) || ((1 << (*(_BYTE *)(a4 + 8) - 1)) & 0x20008) != 0 || (*v57 & 0x10) != 0))
      {
        *(_QWORD *)(v9 + 3480) = 0;
      }
      if (v21)
      {
        *a3 = v59;
        a3[2] = v60;
      }
      if (*(__int16 *)(v9 + 102) < 1)
      {
        v47 = 0;
        v48 = 0;
      }
      else
      {
        v46 = *(_BYTE **)(v9 + 72);
        if (*v46 == 2)
        {
          v47 = 1;
          v48 = 1;
        }
        else
        {
          v49 = *(unsigned __int16 *)(v9 + 102);
          v50 = 1;
          while (1)
          {
            v51 = v50;
            if (v49 == v50)
              break;
            v52 = v46[v50++];
            if (v52 == 2)
            {
              v48 = 1;
              goto LABEL_66;
            }
          }
          v48 = 0;
LABEL_66:
          v47 = v51 < v49;
        }
      }
      if (v44 != 10)
        break;
      v12 = ~**(_DWORD **)(v9 + 80) >> -(__int16)(v45 + ((__int16)((_WORD)v58 << 15) >> 15)) == 0;
      v53 = !v47;
      if (v12)
        v53 = 0;
      if (!v53)
      {
        strncpy(__dst, __src, 0x40uLL);
        *(_BYTE *)(a4 + 3154) = 0;
        SLrecap((unsigned __int8 *)__src, v43, *(unsigned __int8 *)(*(_QWORD *)(v9 + 72) + v48), *(_QWORD *)(v9 + 80) + 8 * v48, *(unsigned __int8 *)(v9 + 88), v56);
        SFadd(__src, v43, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 64));
        strncpy(__src, __dst, 0x40uLL);
        __src[64] = 0;
        *(_BYTE *)(a4 + 3090) = 0;
        *v57 |= 4u;
        *(_WORD *)(a4 + 1322) |= 0x80u;
        *(_QWORD *)(a4 + 1328) &= ~0x400uLL;
        v44 = 2;
        break;
      }
      v21 = 0;
      v12 = (unsigned __int16)v38 == 0;
      LOWORD(v38) = 1;
      if (!v12)
        return 11;
    }
    v21 = 0;
    v12 = (unsigned __int16)v38 == 0;
    LOWORD(v38) = 1;
  }
  while (v12);
  if (v44 == 2)
  {
    ICfndchk(a4);
    return 2;
  }
  return 11;
}

uint64_t ichhchk(uint64_t a1, size_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t result;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  char __s[65];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
  v5 = *(_QWORD *)(v4 + 112);
  if (*(__int16 *)(a2 + 1612) < 1)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = *(unsigned __int16 *)(a2 + 1612);
    do
    {
      v10 = *(unsigned __int8 *)(a2 + 1547 + v6);
      if ((v10 | 2) == 0x2F)
      {
        v7 = v6;
      }
      else
      {
        v11 = v8++;
        __s[v11] = v10;
      }
      ++v6;
    }
    while (v9 != v6);
  }
  __s[v8] = 0;
  v12 = v8;
  v13 = ICverify(__s, v8, a2);
  if (*(_BYTE *)(v5 + 44) || *(_BYTE *)(v5 + 34))
    goto LABEL_11;
  if (v13 == 10)
  {
    SFadd(__s, v12, (__int16 *)(v4 + 40), (__int16 *)(v4 + 44), *(__int16 *)(v4 + 42), *(__int16 *)(v4 + 56), *(_QWORD *)(v4 + 48), *(_QWORD *)(v4 + 64));
  }
  else
  {
    if (v13 != 2)
    {
LABEL_11:
      v14 = *(_QWORD *)(a2 + 3184);
      v15 = *(__int16 *)(v14 + 2);
      if (*(__int16 *)(v14 + 4) >= v15)
      {
        v17 = 0;
        do
        {
          __s[v17] = *(_BYTE *)(a1 + (__int16)v15);
          LOWORD(v15) = v15 + 1;
          ++v17;
        }
        while (*(__int16 *)(v14 + 4) >= (__int16)v15);
        v16 = v17;
      }
      else
      {
        v16 = 0;
      }
      __s[v16] = 0;
      result = ICdblver(__s, a2);
      if ((_DWORD)result != 11)
        return ICfndchk(a2);
      return result;
    }
    if ((*(_WORD *)(a2 + 1322) & 0x200) != 0)
    {
      *(_WORD *)(a2 + 1322) &= ~0x200u;
      *(_QWORD *)(a2 + 1328) &= ~0x20uLL;
      goto LABEL_11;
    }
  }
  **(_WORD **)(a2 + 3184) |= 4u;
  *(_QWORD *)(a2 + 1328) |= 0x800000uLL;
  if (*(_BYTE *)(a2 + 8) == 3)
    puntvolat_to_period_list(a2);
  if (*(_BYTE *)(v4 + 88) == 3)
  {
    v19 = *(_BYTE **)(v4 + 72);
    if (*v19 == 3 || *(__int16 *)(v4 + 102) >= 2 && v19[1] == 3)
    {
      v20 = *(__int16 *)(a2 + 1612);
      if (v20 > v7)
      {
        v21 = v4 + 92;
        v22 = v7;
        do
        {
          v23 = 1 << ~(_BYTE)v22;
          if ((*(_DWORD *)(v21 + 4 * ((unsigned __int16)v22 >> 5)) & v23) != 0)
          {
            *(_DWORD *)(v21 + 4 * ((unsigned __int16)(v22 - 1) >> 5)) |= 1 << -(char)v22;
            *(_DWORD *)(v21 + 4 * ((unsigned __int16)v22 >> 5)) &= ~v23;
          }
          ++v22;
        }
        while (v20 != v22);
      }
    }
  }
  ICfndchk(a2);
  return 2;
}

unsigned int *ICaddbit(unsigned int *result, unsigned int a2, int a3)
{
  unsigned int v3;
  char v4;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  int v9;
  int v10;

  if (a2 <= 0x1F)
  {
    v6 = *result;
    HIDWORD(v7) = *result;
    LODWORD(v7) = result[1];
    result[1] = v7 >> 1;
    v4 = 31;
    v5 = 32;
    v3 = a2;
  }
  else
  {
    v3 = a2 - 32;
    v4 = 63;
    v5 = 64;
    v6 = result[1];
    ++result;
  }
  v8 = v6 & (0xFFFFFFFF >> v3);
  v9 = v6 & (-1 << (v5 - a2));
  if (v3)
    v10 = v9;
  else
    v10 = 0;
  *result = v10 | (a3 << (v4 - a2)) | (v8 >> 1);
  return result;
}

uint64_t ICremacc(char *__s, int a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = __s;
  v4 = *(_QWORD *)(a3 + 3184);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 56);
  if (a2 == 2)
  {
    v10 = *(__int16 *)(*(_QWORD *)(v4 + 280) + 1502);
    v11 = __s[v10];
    if ((*(_DWORD *)(v5 + 4 * v11) & 0x40000) == 0)
      return 0;
    result = 0;
    if ((*(_DWORD *)(v5 + 4 * v11) & 0x20000000) != 0)
      LOBYTE(v11) = v11 - 32;
    v3[v10] = v11;
    v13 = chkaccent[v11 - 192];
    v3[v10] = v13;
    if ((*(_DWORD *)(v5 + 4 * v13) & 0x40000000) != 0)
      LOBYTE(v13) = v13 + 32;
    v3[v10] = v13;
  }
  else
  {
    if (a2 == 3)
    {
      for (i = (unsigned __int16)strlen(__s); i; --i)
      {
        v8 = *v3;
        if ((*(_DWORD *)(v5 + 4 * v8) & 0x4020000) != 0)
        {
          if ((*(_DWORD *)(v5 + 4 * v8) & 0x20000000) != 0)
            LOBYTE(v8) = v8 - 32;
          *v3 = v8;
          v9 = chkaccent[v8 - 192];
          *v3 = v9;
          if ((*(_DWORD *)(v5 + 4 * v9) & 0x40000000) != 0)
            LOBYTE(v9) = v9 + 32;
          *v3 = v9;
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 3184) + 264) + 3492) |= 0x10u;
        }
        ++v3;
      }
      return 0;
    }
    return 8;
  }
  return result;
}

uint64_t ICspl(char *__s, size_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  int v19;
  int v20;
  _WORD *v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  __int16 v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  size_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  size_t v56;
  int v57;
  _WORD *v58;
  uint64_t v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  _WORD *v64;
  uint64_t v65;
  char *v66;
  size_t v67;
  size_t v68;
  _WORD *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  size_t v75;
  size_t v76;
  _WORD *v77;
  int v78;
  uint64_t v79;
  _BOOL4 v80;
  int v81;
  unsigned int v82;
  int v83;
  int v84;
  __int16 v85;
  _BOOL4 v86;
  char *v87;
  unsigned __int16 v88;
  uint64_t v89;
  _DWORD *v90;
  BOOL v91;
  int v92;
  __int16 v93;
  __int16 *v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  char v99;
  char __dst[65];
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v99 = 0;
  *(_QWORD *)(a2 + 1328) = 0;
  *(_WORD *)(a2 + 1404) = 0;
  *(_WORD *)(a2 + 1336) = 0;
  v3 = *(_DWORD *)a2;
  if (*(_DWORD *)a2 == 1)
  {
    *(_WORD *)(a2 + 1320) = 0;
    v4 = ICint(a2);
    if ((_DWORD)v4 == 8)
      ICtrm(a2);
    goto LABEL_7;
  }
  if ((*(_WORD *)(a2 + 1320) & 0x80) == 0)
  {
    *(_QWORD *)(a2 + 1328) = 2048;
LABEL_6:
    v4 = 8;
    goto LABEL_7;
  }
  v7 = *(unsigned __int8 *)(a2 + 8);
  if (v3 > 0x16 || ((1 << v3) & 0x600004) == 0)
  {
    v19 = *(unsigned __int16 *)(a2 + 24);
    v11 = *(_QWORD *)(a2 + 3184);
    v9 = *(_QWORD *)(v11 + 264);
    v10 = *(_QWORD *)(v11 + 248);
    *(_WORD *)v9 = v3;
    *(_QWORD *)(v9 + 48) = a2 + 1690;
    *(_QWORD *)(v9 + 64) = a2 + 2890;
    v20 = *(_DWORD *)(a2 + 20);
    v21 = (_WORD *)(v9 + 3488);
    if (v20 == 16)
    {
      *(_WORD *)(v9 + 3488) = 255;
    }
    else
    {
      *(_WORD *)(v9 + 3488) = v20;
      if (v7 == 6 && (v20 & 0x30) == 0)
      {
        v22 = v20 & 0xFFFFFFCF;
        if ((*(_DWORD *)(a2 + 12) & 0x10) != 0)
          v23 = 16;
        else
          v23 = 32;
        v24 = v23 | v22;
        *(_DWORD *)(a2 + 20) = v24;
        *v21 = v24;
      }
    }
    *(_WORD *)(v9 + 3490) = v19;
    v12 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)(v10 + 40) = *(_QWORD *)(v11 + 120);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)(v11 + 128);
    *(_QWORD *)(v10 + 32) = *(_QWORD *)(v11 + 144);
    *(_QWORD *)(v10 + 80) = *(_QWORD *)(v11 + 296);
    *(_QWORD *)(v10 + 96) = *(_QWORD *)(v11 + 152);
    *(_QWORD *)(v10 + 128) = *(_QWORD *)(v11 + 160);
    *(_QWORD *)(v10 + 112) = *(_QWORD *)(v11 + 168);
    *(_QWORD *)(v10 + 144) = *(_QWORD *)(v11 + 176);
    *(int8x16_t *)(v10 + 152) = vextq_s8(*(int8x16_t *)(v11 + 184), *(int8x16_t *)(v11 + 184), 8uLL);
    *(_QWORD *)(v10 + 1184) = *(_QWORD *)(v11 + 200);
    *(_QWORD *)(*(_QWORD *)(v9 + 112) + 8) = *(_QWORD *)(v11 + 208);
    if (!(v19 << 16) || (__int16)v19 == *(__int16 *)(v11 + 6))
    {
LABEL_38:
      v25 = *(_DWORD *)(a2 + 12);
      if (v25 == 128)
      {
        *(_DWORD *)(a2 + 20) = 128;
        *v21 = 128;
      }
      else
      {
        v26 = *(_DWORD *)(a2 + 20);
        if (((unsigned __int16)v25 & (unsigned __int16)v26 & 0xFFF0) == 0)
        {
          v4 = 8;
          *(_WORD *)(a2 + 1336) = 8;
          goto LABEL_7;
        }
        if ((~v26 & 0x30) == 0 || (*(_DWORD *)(a2 + 20) & 0xC0) == 0xC0)
          *(_WORD *)(a2 + 1336) = 16;
      }
      if (*__s)
      {
        v27 = strlen(__s);
        *(_WORD *)(a2 + 1612) = v27;
        if (v27 >= 65)
          goto LABEL_6;
      }
      else
      {
        *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
      }
      goto LABEL_14;
    }
    if (v7 == 5)
    {
      if ((*(_DWORD *)(a2 + 16) & (__int16)v19) != 0 && (v19 & 0xC0) != 0xC0 && (v19 & 0x30) != 0x30)
        goto LABEL_38;
    }
    else if (((__int16)v19 & (v19 - 1)) == 0 && (*(_DWORD *)(a2 + 16) & (__int16)v19) != 0)
    {
      goto LABEL_38;
    }
    *(_WORD *)(a2 + 1336) = 32;
    goto LABEL_6;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_14:
  v4 = 8;
  switch(v3)
  {
    case 2u:
      v13 = ICtrm(a2);
      goto LABEL_78;
    case 3u:
      if (!*__s)
        goto LABEL_7;
      v13 = ICsplini(__s, a2, &v99);
      if (v99)
        goto LABEL_78;
      v28 = ICprever(__s, a2);
      v4 = v28;
      v29 = *(_QWORD *)(a2 + 3184);
      if (*(_BYTE *)(v29 + 304) != 11 || (_DWORD)v28 == 11)
        goto LABEL_70;
      v30 = *(_QWORD *)(v29 + 288);
      *(_WORD *)(v30 + 12) = *(_WORD *)(*(_QWORD *)(v9 + 112) + 62);
      *(_WORD *)(v30 + 14) = *(_WORD *)(v9 + 18) & 0xC;
      if ((*(_BYTE *)v29 & 8) != 0)
      {
        v31 = *(_BYTE **)(v11 + 280);
        *(_BYTE *)(v30 + 16) = v31[1500];
        *(_BYTE *)(v30 + 17) = v31[1504];
        *(_BYTE *)(v30 + 18) = v31[1502];
      }
      checked_strcpy(v30 + 19, (char *)(a2 + 1547));
      v32 = *(__int16 *)(v9 + 102);
      *(_BYTE *)(v30 + 90) = *(_WORD *)(v9 + 102);
      if (v32 < 1)
        goto LABEL_70;
      v33 = 0;
      while (1)
      {
        *(_BYTE *)(v30 + v33 + 84) = *(_BYTE *)(*(_QWORD *)(v9 + 72) + v33);
        v34 = *(_QWORD *)(v9 + 3496);
        v35 = *(unsigned __int8 *)(v34 + v33);
        *(_WORD *)(v30 + 2 * v33) = (_WORD)v35 << 8;
        v36 = *(_QWORD *)(v9 + 3520);
        v37 = (4 * *(unsigned __int16 *)(v36 + 2 * v33)) & 0x4000 | (v35 << 8);
        *(_WORD *)(v30 + 2 * v33) = v37;
        v38 = v37 | (*(unsigned __int16 *)(v36 + 2 * v33) >> 13 << 15);
        *(_WORD *)(v30 + 2 * v33) = v38;
        v39 = (*(unsigned __int16 *)(v36 + 2 * v33) >> 4) & 0x80 | v38;
        *(_WORD *)(v30 + 2 * v33) = v39;
        if (!*(_BYTE *)(a2 + 8) || ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x994) != 0)
          break;
        if (v7 == 16)
        {
          v41 = *(_BYTE *)(v34 + v33) & 3;
          goto LABEL_67;
        }
        if (v7 == 6)
        {
          v40 = (*(_WORD *)(v36 + 2 * v33) >> 4) | v39;
LABEL_68:
          *(_WORD *)(v30 + 2 * v33) = v40;
        }
        if (++v33 >= *(__int16 *)(v9 + 102))
        {
LABEL_70:
          if (strlen((const char *)(a2 + 1547)) <= 0x40)
            ICdblchk(a2);
          goto LABEL_7;
        }
      }
      v41 = (8 * *(unsigned __int8 *)(*(_QWORD *)(v9 + 3504) + v33)) & 0xF0;
LABEL_67:
      v40 = v39 | v41;
      goto LABEL_68;
    case 4u:
    case 8u:
    case 9u:
      goto LABEL_7;
    case 5u:
      if (!v7 || ((1 << (v7 - 1)) & 0x20008) != 0)
        goto LABEL_122;
      ICsplini(__s, a2, &v99);
      SLwldpro((const char *)(a2 + 1547), (_WORD *)(v9 + 3466), (_WORD *)(v9 + 3468), 64);
      *(_WORD *)(v9 + 42) = 100;
      v42 = strlen((const char *)(a2 + 1547));
      v13 = SFwild((unsigned __int8 *)(a2 + 1547), v42, v10, v9);
      goto LABEL_78;
    case 6u:
      if (!v7 || ((1 << (v7 - 1)) & 0x20008) != 0)
        goto LABEL_122;
      ICsplini(__s, a2, &v99);
      *(_WORD *)(v9 + 3464) = *(_WORD *)(a2 + 1684);
      *(_WORD *)(v9 + 42) = 20;
      v13 = SFanagrm((unsigned __int8 *)(a2 + 1547), *(__int16 *)(a2 + 1612), v9, v10);
LABEL_78:
      v4 = v13;
      goto LABEL_7;
    case 7u:
      if (!*(_DWORD *)(a2 + 1308))
        goto LABEL_122;
      ICsplini(__s, a2, &v99);
      v43 = *(_QWORD *)(v11 + 232);
      v44 = *(char **)(v43 + 8);
      if (v44)
      {
        v45 = strlen((const char *)(a2 + 1547));
        if (v45 >= 0x40)
          v46 = 64;
        else
          v46 = v45;
        if (v46)
          strncpy(v44, (const char *)(a2 + 1547), v46);
        v44[v46] = 0;
        v43 = *(_QWORD *)(v11 + 232);
      }
      v47 = *(_DWORD *)(v9 + 92);
      *(_BYTE *)(v43 + 17) = *(_BYTE *)(v9 + 88);
      *(_DWORD *)(v43 + 20) = v47;
      *(_DWORD *)(v43 + 24) = *(_DWORD *)(v9 + 96);
      *(_WORD *)(v43 + 2) = *(_WORD *)(v9 + 3204);
      *(_WORD *)v43 = 0;
      if (*(_BYTE *)(a2 + 8))
        v48 = 1 << (*(_BYTE *)(a2 + 8) - 1);
      else
        v48 = -1;
      *(_DWORD *)(v43 + 36) = v48;
      *(_BYTE *)(v43 + 42) = 0;
      *(_WORD *)(v43 + 50) = 0;
      PDword((unsigned __int16 *)v43, 1u, 1);
      v49 = *(_QWORD *)(v11 + 232);
      v50 = *(unsigned __int16 *)(v49 + 50);
      if (!*(_WORD *)(v49 + 50))
        goto LABEL_205;
      *(_WORD *)(v9 + 102) = v50;
      if ((__int16)v50 < 1)
        goto LABEL_202;
      v51 = 0;
      while (1)
      {
        v52 = *(_QWORD *)(*(_QWORD *)(v49 + 104) + 8 * v51);
        if (*(_DWORD *)(v52 + 80) == *(_DWORD *)(v49 + 20) && *(_DWORD *)(v52 + 84) == *(_DWORD *)(v49 + 24))
          break;
        if (++v51 == v50)
          goto LABEL_202;
      }
      *(_BYTE *)(*(_QWORD *)(v9 + 72) + v51) = *(_BYTE *)(v52 + 71);
      v49 = *(_QWORD *)(v11 + 232);
      v89 = *(_QWORD *)(*(_QWORD *)(v49 + 104) + 8 * v51);
      v90 = (_DWORD *)(*(_QWORD *)(v9 + 80) + 8 * v51);
      *v90 = *(_DWORD *)(v89 + 80);
      v90[1] = *(_DWORD *)(v89 + 84);
      LODWORD(v90) = *(_DWORD *)(v89 + 88);
      *(_DWORD *)(v9 + 3480) = (_DWORD)v90;
      *(_DWORD *)(a2 + 1640) = (_DWORD)v90;
      LODWORD(v90) = *(_DWORD *)(v89 + 92);
      *(_DWORD *)(v9 + 3484) = (_DWORD)v90;
      *(_DWORD *)(a2 + 1644) = (_DWORD)v90;
      *(_WORD *)v49 = *(_WORD *)(v89 + 66);
      v91 = *(_WORD *)(v9 + 102) == 1 && **(_BYTE **)(v9 + 72) == 3 && *(_BYTE *)(v9 + 88) != 3;
      if (*(_BYTE *)(v89 + 70) || v91)
        goto LABEL_205;
LABEL_202:
      if (*(_DWORD *)(v9 + 3480) || *(_DWORD *)(v9 + 3484))
      {
        *(_WORD *)(a2 + 1322) |= 0x20u;
        *(_WORD *)(a2 + 3176) = *(_WORD *)v49;
        return 10;
      }
LABEL_205:
      if (*(_BYTE *)(a2 + 8) && ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x20008) == 0)
      {
        SLrecap((unsigned __int8 *)(a2 + 1547), *(__int16 *)(a2 + 1612), *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        v94 = *(__int16 **)(v11 + 216);
        *v94 = 1;
        if (IHhyp((const char *)(a2 + 1547), v94) == 8)
          goto LABEL_6;
        v95 = *(_QWORD *)(v11 + 216);
        *(_DWORD *)(v9 + 3480) = *(_DWORD *)(v95 + 8);
        *(_DWORD *)(v9 + 3484) = *(_DWORD *)(v95 + 12);
        if (*(_BYTE *)(v95 + 747))
        {
          if ((*(_WORD *)(v9 + 18) & 0x40) != 0)
            v96 = 2;
          else
            v96 = 4;
          *(_WORD *)(a2 + 1322) |= v96 | 0x40;
          checked_strcpy(a2 + 3090, (char *)(v95 + 680));
          v97 = *(_QWORD *)(v11 + 216);
          *(_DWORD *)(a2 + 3156) = *(_DWORD *)(v97 + 16);
          *(_DWORD *)(a2 + 3160) = *(_DWORD *)(v97 + 20);
          v98 = strlen((const char *)(a2 + 3090));
          SLrecap((unsigned __int8 *)(a2 + 3090), v98, *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        }
LABEL_121:
        v4 = 10;
      }
      else
      {
        *(_DWORD *)a2 = 7;
        v92 = IChu(a2, (char *)(a2 + 1547));
        SLrecap((unsigned __int8 *)(a2 + 1547), *(__int16 *)(a2 + 1612), *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        if (*(_BYTE *)(a2 + 3090))
        {
          v93 = strlen((const char *)(a2 + 3090));
          SLrecap((unsigned __int8 *)(a2 + 3090), v93, *(unsigned __int8 *)(v9 + 88), v9 + 92, *(unsigned __int8 *)(v9 + 88), v12);
        }
        if (v92 == 8)
          v4 = 8;
        else
          v4 = 10;
      }
      goto LABEL_7;
    case 0xAu:
      ICsplini(__s, a2, &v99);
      SFlstini((_WORD *)(v9 + 40), (_WORD *)(v9 + 44), *(_BYTE **)(v9 + 48), *(_WORD **)(v9 + 64));
      v53 = *(_QWORD *)(v11 + 232);
      *(_WORD *)(v53 + 2) = *(_WORD *)(v9 + 3204);
      *(_WORD *)v53 = 0;
      *(_WORD *)(v53 + 48) = 100;
      *(_BYTE *)(v53 + 17) = *(_BYTE *)(v9 + 88);
      *(_DWORD *)(v53 + 20) = *(_DWORD *)(v9 + 92);
      *(_DWORD *)(v53 + 24) = *(_DWORD *)(v9 + 96);
      v54 = *(char **)(v53 + 8);
      if (v54)
      {
        v55 = strlen((const char *)(a2 + 1547));
        if (v55 >= 0x40)
          v56 = 64;
        else
          v56 = v55;
        if (v56)
          strncpy(v54, (const char *)(a2 + 1547), v56);
        v54[v56] = 0;
        v53 = *(_QWORD *)(v11 + 232);
      }
      *(_QWORD *)(v53 + 72) = *(_QWORD *)(v10 + 112);
      *(_WORD *)(v53 + 80) = *(_WORD *)(v10 + 104);
      *(_QWORD *)(v53 + 88) = *(_QWORD *)(v10 + 128);
      *(_WORD *)(v53 + 96) = *(_WORD *)(v10 + 120);
      *(_WORD *)(a2 + 1322) |= 0x20u;
      *(_BYTE *)(v53 + 42) = 0;
      if (*(_BYTE *)(a2 + 8))
        v57 = 1 << (*(_BYTE *)(a2 + 8) - 1);
      else
        v57 = -1;
      *(_DWORD *)(v53 + 36) = v57;
      v58 = *(_WORD **)(v9 + 112);
      *(_QWORD *)(v53 + 64) = v58;
      *(_WORD *)(v53 + 56) = *v58;
      PDword((unsigned __int16 *)v53, 4u, 1);
      *(_WORD *)(v9 + 42) = 100;
      goto LABEL_119;
    case 0xBu:
      ICsplini(__s, a2, &v99);
      *(_WORD *)(v9 + 40) = 0;
      *(_DWORD *)(a2 + 1686) = 0;
      *(_WORD *)(v9 + 44) = 0;
      v59 = *(_QWORD *)(v11 + 232);
      *(_WORD *)(v59 + 2) = *(_WORD *)(v9 + 3204);
      *(_WORD *)v59 = 0;
      *(_WORD *)(v59 + 48) = 100;
      *(_BYTE *)(v59 + 17) = *(_BYTE *)(v9 + 88);
      *(_DWORD *)(v59 + 20) = *(_DWORD *)(v9 + 92);
      *(_DWORD *)(v59 + 24) = *(_DWORD *)(v9 + 96);
      v60 = *(char **)(v59 + 8);
      if (v60)
      {
        v61 = strlen((const char *)(a2 + 1547));
        if (v61 >= 0x40)
          v62 = 64;
        else
          v62 = v61;
        if (v62)
          strncpy(v60, (const char *)(a2 + 1547), v62);
        v60[v62] = 0;
        v59 = *(_QWORD *)(v11 + 232);
      }
      *(_WORD *)(v59 + 98) = *(_WORD *)(a2 + 1684);
      *(_QWORD *)(v59 + 72) = *(_QWORD *)(v10 + 112);
      *(_WORD *)(v59 + 80) = *(_WORD *)(v10 + 104);
      *(_QWORD *)(v59 + 88) = *(_QWORD *)(v10 + 128);
      *(_WORD *)(v59 + 96) = *(_WORD *)(v10 + 120);
      *(_WORD *)(a2 + 1322) |= 0x20u;
      *(_BYTE *)(v59 + 42) = 0;
      if (*(_BYTE *)(a2 + 8))
        v63 = 1 << (*(_BYTE *)(a2 + 8) - 1);
      else
        v63 = -1;
      *(_DWORD *)(v59 + 36) = v63;
      v64 = *(_WORD **)(v9 + 112);
      *(_QWORD *)(v59 + 64) = v64;
      *(_WORD *)(v59 + 56) = *v64;
      PDword((unsigned __int16 *)v59, 6u, 1);
      *(_WORD *)(v9 + 42) = 20;
LABEL_119:
      if (*(_WORD *)(*(_QWORD *)(v11 + 232) + 50))
      {
        ICPDadd(a2, 1);
        goto LABEL_121;
      }
LABEL_122:
      v4 = 11;
      goto LABEL_7;
    default:
      switch(v3)
      {
        case 'd':
          v14 = *(unsigned __int8 *)(v10 + 55);
          if (v14 != 3)
            goto LABEL_20;
          if (*(_WORD *)(v9 + 3490) != 64)
            goto LABEL_159;
          period_to_puntvolat(a2, __s);
          v14 = *(unsigned __int8 *)(v10 + 55);
LABEL_20:
          if (v14 == 2 && *(_WORD *)(v9 + 3490) == 64)
          {
            strncpy(__dst, __s, 0x41uLL);
            if (*(__int16 *)(a2 + 1612) >= 1)
            {
              v15 = *(unsigned __int16 *)(a2 + 1612);
              v16 = __dst;
              do
              {
                v17 = *v16;
                if ((v17 & 0xFFFFFFDF) == 0x81)
                  *v16 = v17 + 68;
                ++v16;
                --v15;
              }
              while (v15);
            }
            v18 = __dst;
          }
          else
          {
LABEL_159:
            v18 = __s;
          }
          ICsplini(v18, a2, &v99);
          *(_WORD *)(v9 + 2156) = -1;
          goto LABEL_161;
        case 'e':
LABEL_161:
          *(_WORD *)(v9 + 42) = 20;
          if (*(_BYTE *)(v10 + 55) == 3 && *(_WORD *)(v9 + 3490) == 64)
            period_to_puntvolat(a2, (char *)(v11 + 307));
          if (*(_BYTE *)(v11 + 306) != 103)
          {
            if (!*(_BYTE *)(a2 + 8) || ((1 << (*(_BYTE *)(a2 + 8) - 1)) & 0x20008) != 0)
            {
              v81 = IChu(a2, (char *)(v11 + 307));
LABEL_181:
              v80 = v81;
              goto LABEL_182;
            }
            v83 = *(unsigned __int16 *)(a2 + 1682);
            v84 = *(unsigned __int16 *)(a2 + 1680);
            v85 = strlen((const char *)(v11 + 307));
            v86 = JumpOver((unsigned __int8 *)(v11 + 307), v85);
            if (v83)
            {
              if (v84)
              {
                if (!v86)
                {
                  v87 = (char *)(v11 + 307);
                  v88 = 3;
LABEL_229:
                  v81 = SFcorrec(v87, v88, v10, v9);
                  goto LABEL_181;
                }
              }
              else if (!v86)
              {
                v87 = (char *)(v11 + 307);
                v88 = 1;
                goto LABEL_229;
              }
            }
            else if (v84)
            {
              if (!v86)
              {
                v87 = (char *)(v11 + 307);
                v88 = 2;
                goto LABEL_229;
              }
            }
            else if (!v86)
            {
              v87 = (char *)(v11 + 307);
              v88 = 0;
              goto LABEL_229;
            }
            *(_WORD *)(v9 + 40) = 0;
            *(_DWORD *)(a2 + 4) = 11;
            goto LABEL_222;
          }
          v73 = *(_QWORD *)(v11 + 232);
          *(_WORD *)(v73 + 2) = *(_WORD *)(v9 + 3204);
          *(_WORD *)v73 = 0;
          *(_WORD *)(v73 + 48) = 20 - *(_WORD *)(v9 + 40);
          *(_BYTE *)(v73 + 17) = *(_BYTE *)(v9 + 88);
          *(_DWORD *)(v73 + 20) = *(_DWORD *)(v9 + 92);
          *(_DWORD *)(v73 + 24) = *(_DWORD *)(v9 + 96);
          v74 = *(char **)(v73 + 8);
          if (v74)
          {
            v75 = strlen((const char *)(v11 + 307));
            if (v75 >= 0x40)
              v76 = 64;
            else
              v76 = v75;
            if (v76)
              strncpy(v74, (const char *)(v11 + 307), v76);
            v74[v76] = 0;
            v73 = *(_QWORD *)(v11 + 232);
          }
          *(_QWORD *)(v73 + 72) = *(_QWORD *)(v10 + 112);
          *(_WORD *)(v73 + 80) = *(_WORD *)(v10 + 104);
          *(_QWORD *)(v73 + 88) = *(_QWORD *)(v10 + 128);
          *(_WORD *)(v73 + 96) = *(_WORD *)(v10 + 120);
          v77 = *(_WORD **)(v9 + 112);
          *(_QWORD *)(v73 + 64) = v77;
          *(_WORD *)(v73 + 56) = *v77;
          *(_BYTE *)(v73 + 42) = 0;
          if (*(_BYTE *)(a2 + 8))
            v78 = 1 << (*(_BYTE *)(a2 + 8) - 1);
          else
            v78 = -1;
          *(_DWORD *)(v73 + 36) = v78;
          PDword((unsigned __int16 *)v73, 0xAu, 5);
          v79 = *(_QWORD *)(v11 + 232);
          v80 = *(unsigned __int16 *)(v79 + 116) != 5159;
          if (!*(_WORD *)(v79 + 50) || (*(_WORD *)(a2 + 1322) |= 0x20u, ICPDadd(a2, 1) != 8))
          {
LABEL_182:
            if (v80)
            {
              v82 = 20;
              goto LABEL_223;
            }
          }
LABEL_222:
          v82 = 21;
LABEL_223:
          if (*(__int16 *)(v9 + 40) <= 19)
            v4 = v82;
          else
            v4 = 22;
          if (*(_BYTE *)(v10 + 55) == 3)
            puntvolat_to_period_list(a2);
LABEL_7:
          *(_DWORD *)(a2 + 4) = v4;
          ICfree(a2);
          return v4;
        case 'f':
          ICsplini(__s, a2, &v99);
          *(_WORD *)(v9 + 42) = 20;
          if (*(__int16 *)(a2 + 1612) <= 5
            && (*(_DWORD *)(v12 + 4 * *(unsigned __int8 *)(a2 + 1547)) & 0x8000000) == 0)
          {
            goto LABEL_158;
          }
          v4 = 21;
          if (v7 <= 0x10 && ((1 << v7) & 0x1932E) != 0)
            ICcorspl((const char *)(v11 + 307), v9, a2);
          goto LABEL_7;
        case 'g':
          ICsplini(__s, a2, &v99);
          v65 = *(_QWORD *)(v11 + 232);
          *(_WORD *)(v65 + 2) = *(_WORD *)(v9 + 3204);
          *(_WORD *)v65 = 0;
          *(_WORD *)(v65 + 48) = 20 - *(_WORD *)(v9 + 40);
          *(_BYTE *)(v65 + 17) = *(_BYTE *)(v9 + 88);
          *(_DWORD *)(v65 + 20) = *(_DWORD *)(v9 + 92);
          *(_DWORD *)(v65 + 24) = *(_DWORD *)(v9 + 96);
          *(_WORD *)(v9 + 42) = 20;
          v66 = *(char **)(v65 + 8);
          if (v66)
          {
            v67 = strlen((const char *)(v11 + 307));
            if (v67 >= 0x40)
              v68 = 64;
            else
              v68 = v67;
            if (v68)
              strncpy(v66, (const char *)(v11 + 307), v68);
            v66[v68] = 0;
            v65 = *(_QWORD *)(v11 + 232);
          }
          *(_QWORD *)(v65 + 72) = *(_QWORD *)(v10 + 112);
          *(_WORD *)(v65 + 80) = *(_WORD *)(v10 + 104);
          *(_QWORD *)(v65 + 88) = *(_QWORD *)(v10 + 128);
          *(_WORD *)(v65 + 96) = *(_WORD *)(v10 + 120);
          v69 = *(_WORD **)(v9 + 112);
          *(_QWORD *)(v65 + 64) = v69;
          *(_WORD *)(v65 + 56) = *v69;
          *(_BYTE *)(v65 + 42) = 0;
          if (*(_BYTE *)(a2 + 8))
            v70 = 1 << (*(_BYTE *)(a2 + 8) - 1);
          else
            v70 = -1;
          *(_DWORD *)(v65 + 36) = v70;
          if (*(_WORD *)(a2 + 1682))
            v71 = 10;
          else
            v71 = 5;
          PDword((unsigned __int16 *)v65, v71, 1);
          v72 = *(_QWORD *)(v11 + 232);
          if (*(_WORD *)(v72 + 116) == 5159)
            v4 = 21;
          else
            v4 = 20;
          if (*(_WORD *)(v72 + 50))
          {
            *(_WORD *)(a2 + 1322) |= 0x20u;
            if (ICPDadd(a2, 1) == 8)
              v4 = 22;
            else
              v4 = v4;
          }
          goto LABEL_7;
        case 'h':
          if (*(_BYTE *)(v10 + 55) == 3 && *(_WORD *)(v9 + 3490) == 64)
            period_to_puntvolat(a2, __s);
          ICsplini(__s, a2, &v99);
          *(_WORD *)(v9 + 42) = 20;
          if ((*(_DWORD *)(a2 + 1672) || *(_DWORD *)(a2 + 1664)) && !*(_BYTE *)(a2 + 1624))
            ICcorucf((const char *)(a2 + 1547), a2);
          if (*(_BYTE *)(v10 + 55) == 3)
            puntvolat_to_period_list(a2);
LABEL_158:
          v4 = 21;
          goto LABEL_7;
        default:
          goto LABEL_7;
      }
  }
}

unint64_t ICfree(unint64_t result)
{
  unint64_t v1;
  _QWORD *v2;
  __int16 *v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    if ((*(_DWORD *)result - 1) >= 2)
    {
      v2 = *(_QWORD **)(result + 3184);
      if (v2)
      {
        v3 = (__int16 *)v2[33];
        if (v3)
        {
          if (!v2[32] && !v2[34])
          {
            *(_DWORD *)result = *v3;
            *(_DWORD *)(result + 1640) = *((_DWORD *)v3 + 870);
            *(_DWORD *)(result + 1644) = *((_DWORD *)v3 + 871);
            *(_WORD *)(result + 1686) = v3[20];
            *(_WORD *)(result + 1688) = v3[22];
            v4 = *((_QWORD *)v3 + 14);
            if (v4)
            {
              if (*(_WORD *)v4)
              {
                checked_strncpy(result + 1614, (char *)(v4 + 34), 9uLL);
                return checked_strncpy(v1 + 1624, (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 3184) + 264) + 112) + 44), 0xCuLL);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t ICsplini(char *__s, uint64_t a2, _BYTE *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unsigned __int8 *v25;
  char v26;
  unsigned int v27;
  char v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  size_t v32;
  char v34[65];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 3184);
  v6 = *(_QWORD *)(v5 + 264);
  v7 = *(_QWORD *)(v6 + 112);
  *a3 = 1;
  if (*(_BYTE *)(v5 + 304) == 11)
  {
    v8 = *(_OWORD **)(v5 + 288);
    *(_OWORD *)((char *)v8 + 76) = 0u;
    v8[3] = 0u;
    v8[4] = 0u;
    v8[1] = 0u;
    v8[2] = 0u;
    *v8 = 0u;
    v9 = *(_QWORD *)(v5 + 288);
    *(_WORD *)(v9 + 16) = 0;
    *(_BYTE *)(v9 + 18) = 0;
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 6) = 0;
    *(_OWORD *)(v9 + 19) = 0u;
    *(_OWORD *)(v9 + 35) = 0u;
    *(_OWORD *)(v9 + 51) = 0u;
    *(_OWORD *)(v9 + 67) = 0u;
    *(_BYTE *)(v9 + 83) = 0;
  }
  if (__s)
  {
    v10 = strlen(__s);
    if (v10 >= 0x40)
      v11 = 64;
    else
      v11 = v10;
    if (v11)
      __strncpy_chk();
    v34[v11] = 0;
  }
  SFlstini((_WORD *)(v6 + 40), (_WORD *)(v6 + 44), *(_BYTE **)(v6 + 48), *(_WORD **)(v6 + 64));
  *(_DWORD *)(a2 + 1686) = 0;
  *(_WORD *)(v6 + 102) = 0;
  *(_BYTE *)(*(_QWORD *)(v6 + 72) + 1) = 0;
  **(_BYTE **)(v6 + 72) = 0;
  *(_OWORD *)*(_QWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 3472) = 0u;
  *(_QWORD *)(a2 + 1640) = 0;
  *(_QWORD *)(a2 + 3156) = 0;
  *(_WORD *)v5 = 0;
  if (*(_WORD *)(v5 + 64) && *(unsigned __int16 *)(v6 + 3488) != *(unsigned __int16 *)(v5 + 64)
    || *(_WORD *)(v5 + 6) && *(unsigned __int16 *)(v6 + 3490) != *(unsigned __int16 *)(v5 + 6))
  {
    v12 = *(_QWORD *)(a2 + 3168);
    if (v12)
    {
      if (v12 >= 0x8000)
      {
        v13 = 0;
        v14 = 1;
        do
        {
          bzero(*(void **)(v5 + 8 * v13 + 32), 0x8000uLL);
          v13 = v14++;
        }
        while (v13 < *(_QWORD *)(a2 + 3168) >> 15);
      }
      else
      {
        bzero(*(void **)(v5 + 32), v12);
      }
    }
  }
  *(_WORD *)(v5 + 64) = *(_WORD *)(v6 + 3488);
  v15 = *(_QWORD *)(v5 + 280);
  *(_WORD *)(v15 + 1742) = 0;
  *(_BYTE *)(v15 + 1526) = 0;
  if (v34[0])
  {
    *(_DWORD *)(a2 + 4) = 11;
    *(_WORD *)(v7 + 16) = 0;
    *(_BYTE *)(v7 + 76) = 0;
    *(_QWORD *)(v7 + 80) = 0;
    *(_DWORD *)(v7 + 58) = 0;
    *(_BYTE *)(v7 + 34) = 0;
    *(_BYTE *)(v7 + 44) = 0;
    *(_BYTE *)(v7 + 92) = 0;
    *(_WORD *)(v5 + 6) = *(_WORD *)(v6 + 3490);
    v16 = ICpre(v34, a2);
    v17 = v16;
    if (*(_WORD *)v6 == 3)
    {
      if ((_DWORD)v16 != 2)
      {
        if ((_DWORD)v16 == 9)
          return 11;
        if ((_DWORD)v16 == 4)
        {
          if (strlen((const char *)(a2 + 1547)) <= 0x40)
            ICdblchk(a2);
          if ((*(_BYTE *)(a2 + 1329) & 4) != 0)
            return 2;
          else
            return 4;
        }
        goto LABEL_68;
      }
    }
    else if ((_DWORD)v16 != 2)
    {
LABEL_68:
      *a3 = 0;
      if ((_DWORD)v16 == 11)
        SFlstini((_WORD *)(v6 + 40), (_WORD *)(v6 + 44), *(_BYTE **)(v6 + 48), *(_WORD **)(v6 + 64));
      goto LABEL_33;
    }
    v17 = 2;
    if ((*(_WORD *)(v6 + 3492) & 1) != 0)
      return v17;
  }
  else
  {
    v17 = 8;
  }
  *a3 = 0;
LABEL_33:
  *(_BYTE *)(a2 + 3154) = 0;
  *(_OWORD *)(a2 + 3122) = 0u;
  *(_OWORD *)(a2 + 3138) = 0u;
  *(_OWORD *)(a2 + 3090) = 0u;
  *(_OWORD *)(a2 + 3106) = 0u;
  if ((*(_DWORD *)a2 - 100) <= 3 && *(_DWORD *)a2 != 101)
  {
    *(_BYTE *)(v5 + 306) = *(_DWORD *)a2;
    v18 = *(_QWORD *)(v6 + 112);
    v19 = *(unsigned __int8 *)(a2 + 8);
    if ((v19 - 8) >= 2)
    {
      if (v19 == 12 && *(_BYTE *)(v18 + 18))
      {
        v20 = strlen((const char *)(v18 + 18));
        if (v20 >= 0xC)
          v21 = 12;
        else
          v21 = v20;
        if (v21)
          strncpy((char *)(v18 + 44), (const char *)(v18 + 18), v21);
        *(_BYTE *)(v18 + 44 + v21) = 0;
        *(_WORD *)(v18 + 90) = *(_WORD *)(v18 + 32);
      }
    }
    else
    {
      __strcat_chk();
      *(_WORD *)(a2 + 1612) = strlen((const char *)(a2 + 1547));
      *(_WORD *)(v5 + 4) += strlen((const char *)(v18 + 44));
      *(_BYTE *)(v18 + 44) = 0;
    }
    if (*(_BYTE *)(a2 + 1414) && *(_BYTE *)(a2 + 1413) && !*(_WORD *)v18)
      *(_QWORD *)(a2 + 1328) |= 0xC0uLL;
    if (*(_DWORD *)(a2 + 4) == 11 || !*(_BYTE *)(v6 + 88))
    {
      v29 = strlen((const char *)(a2 + 1547));
      if (v29 >= 0x40)
        v30 = 64;
      else
        v30 = v29;
      if (v30)
        strncpy((char *)(v5 + 307), (const char *)(a2 + 1547), v30);
      *(_BYTE *)(v5 + 307 + v30) = 0;
    }
    else
    {
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 248) + 56);
      v23 = *(unsigned __int8 *)(a2 + 1547);
      if ((*(_DWORD *)(v22 + 4 * v23) & 0x40000000) != 0)
        LOBYTE(v23) = v23 + 32;
      *(_BYTE *)(v5 + 307) = v23;
      if ((_BYTE)v23)
      {
        v24 = (_BYTE *)(v5 + 308);
        v25 = (unsigned __int8 *)(a2 + 1548);
        do
        {
          v27 = *v25++;
          v26 = v27;
          v28 = v27 + 32;
          if ((*(_DWORD *)(v22 + 4 * v27) & 0x40000000) != 0)
            v26 = v28;
          *v24++ = v26;
        }
        while (v26);
      }
    }
    if (*(_BYTE *)(a2 + 1412))
    {
      v31 = v5 + 307;
      v32 = strlen((const char *)(v5 + 307));
      *(_BYTE *)(v31 + (__int16)v32) = 46;
      *(_BYTE *)(v31 + ((uint64_t)((v32 << 48) + 0x1000000000000) >> 48)) = 0;
    }
  }
  return v17;
}

uint64_t ICPDadd(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned __int16 v4;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  uint64_t v14;

  v2 = *(_QWORD **)(a1 + 3184);
  v3 = v2[29];
  v4 = *(_WORD *)(v3 + 50);
  if (v4)
  {
    v7 = 0;
    v14 = *(_QWORD *)(v2[31] + 56);
    v8 = *(_QWORD *)(v3 + 104);
    v9 = v2[33];
    do
    {
      v10 = v7;
      v11 = *(_QWORD *)(v8 + 8 * v7);
      if (!a2 || !*(_BYTE *)(v11 + 70))
      {
        v12 = strlen((const char *)v11);
        SLrecap((unsigned __int8 *)v11, v12, *(unsigned __int8 *)(v11 + 71), v11 + 80, *(unsigned __int8 *)(v9 + 88), v14);
        result = SFadd(*(char **)(v8 + 8 * v10), v12, (__int16 *)(v9 + 40), (__int16 *)(v9 + 44), *(__int16 *)(v9 + 42), *(__int16 *)(v9 + 56), *(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 64));
        if ((_DWORD)result == 8)
          return result;
        v11 = *(_QWORD *)(v8 + 8 * v10);
        v4 = *(_WORD *)(v3 + 50);
      }
      *(_WORD *)(a1 + 3176) = *(_WORD *)(v11 + 66);
      v7 = v10 + 1;
    }
    while (v4 > (v10 + 1));
  }
  return 0;
}

size_t period_to_puntvolat(uint64_t a1, char *__s)
{
  size_t result;
  int v5;
  __int16 v6;

  result = strlen(__s);
  if ((int)((_DWORD)result << 16) > 0x10000)
  {
    v5 = 1;
    v6 = 1;
    do
    {
      if ((__s[v5 - 1] | 0x20) == 0x6C
        && (__s[v5 + 1] | 0x20) == 0x6C
        && __s[v6] == 46
        && *(_DWORD *)(a1 + 24) == 64)
      {
        __s[v6] = -73;
      }
      v5 = ++v6;
      result = strlen(__s);
    }
    while (v6 < (__int16)result);
  }
  return result;
}

BOOL JumpOver(unsigned __int8 *a1, int a2)
{
  int v2;
  _BOOL8 result;

  result = 0;
  if (a2 >= 7)
  {
    v2 = *a1;
    if (v2 == a1[1] && v2 == a1[2] && v2 == a1[3] && v2 == a1[4] && v2 == a1[5])
      return 1;
  }
  return result;
}

size_t puntvolat_to_period_list(size_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  char __s[193];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(result + 3184) + 264);
  if (*(__int16 *)(v1 + 40) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD *)(v1 + 48);
      if (v3)
      {
        v4 = strlen((const char *)(v3 + *(__int16 *)(*(_QWORD *)(v1 + 64) + 2 * v2)));
        if (v4 >= 0x40)
          v5 = 64;
        else
          v5 = v4;
        if (v5)
          __strncpy_chk();
        __s[v5] = 0;
      }
      result = strlen(__s);
      if (((_DWORD)result << 16) - 0x10000 >= 0x10000)
      {
        v6 = 1;
        v7 = 1;
        do
        {
          if ((__s[v6 - 1] | 0x20) == 0x6C
            && (__s[v6 + 1] | 0x20) == 0x6C
            && __s[v7] == 183
            && *(_WORD *)(v1 + 3490) == 64)
          {
            __s[v7] = 46;
          }
          v6 = ++v7;
          result = strlen(__s);
        }
        while (v7 <= (__int16)(result - 1));
      }
      v8 = *(_QWORD *)(v1 + 48);
      if (v8)
      {
        v9 = *(__int16 *)(*(_QWORD *)(v1 + 64) + 2 * v2);
        v10 = v8 + v9;
        if (result >= 0x40)
          v11 = 64;
        else
          v11 = result;
        if (v11)
          result = (size_t)strncpy((char *)(v8 + v9), __s, v11);
        *(_BYTE *)(v10 + v11) = 0;
      }
      ++v2;
    }
    while (v2 < *(__int16 *)(v1 + 40));
  }
  return result;
}

unint64_t checked_strncpy(unint64_t result, char *__s, size_t a3)
{
  char *v5;

  if (result && __s)
  {
    v5 = (char *)result;
    result = strlen(__s);
    if (result < a3)
      a3 = result;
    if (a3)
      result = (unint64_t)strncpy(v5, __s, a3);
    v5[a3] = 0;
  }
  return result;
}

uint64_t ICtrm(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  _QWORD *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;

  v2 = *(_QWORD *)(a1 + 3184);
  if (v2)
  {
    v3 = *(unsigned __int8 **)(v2 + 248);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 264);
      if (v4)
      {
        *(_WORD *)v3 = 0;
        if (!*(_BYTE *)(a1 + 8) || ((1 << (*(_BYTE *)(a1 + 8) - 1)) & 0x20008) != 0)
        {
          IChu(a1, (char *)(a1 + 1547));
          v5 = *(void **)(v2 + 224);
          if (v5)
            free(v5);
        }
        v6 = *((_DWORD *)v3 + 16);
        if (v6)
          SLClose(v6);
        if (v3[54] * *((__int16 *)v3 + 24))
          free(*(void **)(v2 + 120));
        v7 = 0;
        *(_WORD *)(*(_QWORD *)(v2 + 232) + 2) = 0;
        do
        {
          free(*(void **)(*(_QWORD *)(*(_QWORD *)(v2 + 232) + 104) + v7));
          v7 += 8;
        }
        while (v7 != 800);
        free(*(void **)(*(_QWORD *)(v2 + 232) + 104));
        free(*(void **)(*(_QWORD *)(v2 + 232) + 8));
        free(*(void **)(v2 + 232));
        v8 = *(_QWORD *)(v2 + 240);
        if (v8)
        {
          free(*(void **)(v8 + 8));
          free(*(void **)(v2 + 240));
        }
        if (*(unsigned __int16 *)(v2 + 12) >= 0x134u)
          free(*((void **)v3 + 7));
        v9 = *(void **)(v2 + 208);
        if (v9)
          free(v9);
        v10 = *(void **)(v4 + 112);
        if (v10)
          free(v10);
        v11 = *(void **)(v2 + 152);
        if (v11)
          free(v11);
        v12 = *(void **)(v2 + 96);
        if (v12)
          free(v12);
        v13 = *(void **)(v2 + 104);
        if (v13)
          free(v13);
        v14 = *(void **)(v2 + 112);
        if (v14)
          free(v14);
        v15 = *(_QWORD *)(a1 + 3168);
        if (v15 && *(_BYTE *)(a1 + 8) != 4)
        {
          if (v15 >= 0x8000)
          {
            v16 = 0;
            v17 = 0;
            do
            {
              free(*(void **)(v2 + 8 * v16 + 32));
              v16 = ++v17;
            }
            while ((unint64_t)v17 < *(_QWORD *)(a1 + 3168) >> 15);
          }
          else
          {
            free(*(void **)(v2 + 32));
          }
        }
        v18 = *(void **)(v2 + 296);
        if (v18)
          free(v18);
        if (*((_WORD *)v3 + 52))
        {
          free(*(void **)(v2 + 168));
          free(*(void **)(v2 + 192));
          free(*(void **)(v2 + 184));
        }
        if (*((_WORD *)v3 + 69))
          free(*(void **)(v2 + 176));
        if (*((_WORD *)v3 + 60))
          free(*(void **)(v2 + 160));
        if (*((_WORD *)v3 + 2))
          free(*(void **)(v2 + 200));
        v19 = *(void **)(v2 + 128);
        if (v19)
          free(v19);
        v20 = *(void **)(v2 + 136);
        if (v20)
          free(v20);
        v21 = *(void **)(v2 + 144);
        if (v21)
          free(v21);
        v22 = *(void **)(v2 + 72);
        if (v22)
          free(v22);
        if (*(_QWORD *)(v2 + 168))
        {
          free(*((void **)v3 + 21));
          free(*((void **)v3 + 22));
        }
        v23 = *(void **)(v4 + 80);
        if (v23)
          free(v23);
        v24 = *(void **)(v4 + 72);
        if (v24)
          free(v24);
        v25 = *(void **)(v4 + 3520);
        if (v25)
          free(v25);
        v26 = *(void **)(v4 + 3504);
        if (v26)
          free(v26);
        v27 = *(void **)(v4 + 3528);
        if (v27)
          free(v27);
        v28 = *(void **)(v4 + 3536);
        if (v28)
          free(v28);
        v29 = *(void **)(v4 + 3496);
        if (v29)
          free(v29);
        v30 = *(void **)(v4 + 24);
        if (v30)
          free(v30);
        v31 = *(void **)(v4 + 8);
        if (v31)
          free(v31);
        v32 = *(void **)(v4 + 3176);
        if (v32)
          free(v32);
        if (*(_QWORD *)(v4 + 32))
          SFmemory((void **)(v4 + 32), 64, 0);
        free(v3);
        free((void *)v4);
        v33 = *(_QWORD **)(a1 + 3184);
        v34 = (void *)v33[35];
        if (v34)
        {
          free(v34);
          v33 = *(_QWORD **)(a1 + 3184);
        }
        v35 = (void *)v33[10];
        if (v35)
        {
          free(v35);
          v33 = *(_QWORD **)(a1 + 3184);
        }
        v36 = v33[27];
        if (v36)
        {
          IHterm(v36);
          free(*(void **)(*(_QWORD *)(a1 + 3184) + 216));
          *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 216) = 0;
        }
        v37 = *(void **)(v2 + 288);
        if (v37)
          free(v37);
        free((void *)v2);
      }
    }
  }
  *(_WORD *)(a1 + 1320) &= ~0x80u;
  return 0;
}

uint64_t ICverify(char *__s, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  size_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v25;
  int v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;
  _BOOL4 v34;
  __int16 *v36;
  __int16 v37;
  __int16 v38;
  int v39;
  uint64_t v40;
  int v41;
  _WORD *v42;
  BOOL v43;
  BOOL v44;
  __int16 *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unsigned __int16 v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  __int16 v61;
  uint64_t v62;
  char v63;
  char v64;
  __int16 v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  _WORD *v71;
  size_t v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  _DWORD *v78;
  __int16 v79;
  uint64_t v80;
  char v81;
  __int16 v82;
  char __sa[65];
  uint64_t v84;

  v6 = 0;
  v84 = *MEMORY[0x1E0C80C00];
  v81 = 0;
  v7 = *(_QWORD *)(a3 + 3184);
  v8 = *(_QWORD *)(v7 + 264);
  v80 = *(_QWORD *)(*(_QWORD *)(v7 + 248) + 56);
  v82 = 0;
  do
  {
    *(_WORD *)(*(_QWORD *)(v8 + 3520) + 2 * v6) = 0;
    *(_WORD *)(*(_QWORD *)(v8 + 24) + 2 * v6) = 0;
    *(_BYTE *)(*(_QWORD *)(v8 + 3496) + v6) = 0;
    *(_BYTE *)(*(_QWORD *)(v8 + 3504) + v6++) = 0;
  }
  while (v6 != 6);
  if ((*(_WORD *)(v8 + 18) & 0x40) == 0)
    *(_QWORD *)(v8 + 3480) = 0;
  v9 = *(_QWORD *)(v7 + 232);
  if (__s)
  {
    v10 = *(char **)(v9 + 8);
    if (v10)
    {
      v11 = strlen(__s);
      if (v11 >= 0x40)
        v12 = 64;
      else
        v12 = v11;
      if (v12)
        strncpy(v10, __s, v12);
      v10[v12] = 0;
    }
  }
  *(_BYTE *)(v9 + 17) = *(_BYTE *)(v8 + 88);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(v8 + 92);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 96);
  *(_WORD *)(v9 + 2) = *(_WORD *)(*(_QWORD *)(v7 + 264) + 3204);
  *(_WORD *)v9 = 0;
  if (*(_BYTE *)(a3 + 8))
    v13 = 1 << (*(_BYTE *)(a3 + 8) - 1);
  else
    v13 = -1;
  *(_DWORD *)(v9 + 36) = v13;
  *(_BYTE *)(v9 + 42) = 0;
  *(_WORD *)(v9 + 50) = 0;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(a3 + 1338);
  PDword((unsigned __int16 *)v9, 1u, 1);
  v14 = *(unsigned __int16 *)(v9 + 50);
  if (*(_WORD *)(v9 + 50))
  {
    v15 = 0;
    v16 = 0;
    *(_WORD *)(a3 + 1322) |= 0x20u;
    if (v14 >= 6)
      LOWORD(v14) = 6;
    *(_WORD *)(v8 + 102) = v14;
    v17 = 10;
    do
    {
      *(_BYTE *)(*(_QWORD *)(v8 + 72) + v15) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v9 + 104) + 8 * v15) + 71);
      v18 = *(_QWORD *)(*(_QWORD *)(v9 + 104) + 8 * v15);
      v19 = (_DWORD *)(*(_QWORD *)(v8 + 80) + 8 * v15);
      *v19 = *(_DWORD *)(v18 + 80);
      v19[1] = *(_DWORD *)(v18 + 84);
      *(_DWORD *)(v8 + 3480) = *(_DWORD *)(v18 + 88);
      *(_DWORD *)(v8 + 3484) = *(_DWORD *)(v18 + 92);
      *(_WORD *)v9 = *(_WORD *)(v18 + 66);
      v20 = *(unsigned __int16 *)(v8 + 102);
      if (v20 == 1 && **(_BYTE **)(v8 + 72) == 3 && *(_BYTE *)(v8 + 88) != 3)
      {
        v17 = 11;
        v16 = 1;
      }
      if (*(_BYTE *)(v18 + 70))
      {
        v21 = process_neg(a3, (__int16)v15, &v82);
        if ((_DWORD)v21 != 11)
        {
          v22 = v21;
          goto LABEL_196;
        }
        LOWORD(v20) = *(_WORD *)(v8 + 102);
        v17 = 11;
      }
      ++v15;
    }
    while (v15 < (__int16)v20);
    if (v17 == 11)
      goto LABEL_32;
    SFdc((uint64_t)__s, a2, *(_QWORD *)(v7 + 248), v8);
    if (*(_DWORD *)(v8 + 3480) || !*(_BYTE *)(a3 + 8) || ((1 << (*(_BYTE *)(a3 + 8) - 1)) & 0x995) != 0)
    {
      *(_WORD *)v7 |= v82;
      return 10;
    }
    goto LABEL_87;
  }
  v16 = 0;
  LOWORD(v15) = 0;
LABEL_32:
  LOWORD(v23) = v15;
  if (*(__int16 *)(*(_QWORD *)(v7 + 248) + 68) < a2)
    return 11;
  if (!*(_BYTE *)(a3 + 8) || ((1 << (*(_BYTE *)(a3 + 8) - 1)) & 0x20008) != 0)
    return IChu(a3, __s);
  if (*(_QWORD *)(a3 + 3168))
  {
    if (*(_DWORD *)(a3 + 1308))
    {
      if (a2 > 17 || *(_WORD *)(*(_QWORD *)(v7 + 248) + 88))
        goto LABEL_63;
    }
    else if (a2 > 17)
    {
      goto LABEL_63;
    }
    if (ICcchver((uint64_t)__s, a2, &v81, a3) == 10)
    {
      v82 |= 0x20u;
      if (v81)
      {
LABEL_66:
        v22 = 10;
        goto LABEL_90;
      }
      if (*(_BYTE *)(v7 + 304) != 11)
      {
        v25 = *(__int16 *)(v8 + 102);
        if (v25 >= 1)
        {
          LOWORD(v23) = 0;
          while (1)
          {
            v26 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 72) + (unsigned __int16)v23);
            v27 = !*(_BYTE *)(v8 + 88) && v26 == 4;
            v28 = v27;
            if (*(unsigned __int8 *)(v8 + 88) == v26 || v28)
              break;
            v23 = (__int16)(v23 + 1);
            if (v23 >= v25)
            {
              LOWORD(v23) = *(_WORD *)(v8 + 102);
              goto LABEL_63;
            }
          }
          *(_WORD *)(v8 + 18) = *(_WORD *)(*(_QWORD *)(v8 + 3520) + 2 * (unsigned __int16)v23);
          goto LABEL_66;
        }
        LOWORD(v23) = 0;
      }
    }
  }
LABEL_63:
  v29 = ICget(__s, a2, a3);
  if ((_DWORD)v29 != 10)
  {
    v22 = v29;
    goto LABEL_90;
  }
  v82 |= 0x40u;
  v30 = *(__int16 *)(v8 + 102);
  if (v30 == 1)
  {
    v81 = 1;
    goto LABEL_66;
  }
  LOWORD(v15) = 0;
  if (v30 >= 1)
  {
    v31 = *(unsigned __int8 *)(v8 + 88);
    while (1)
    {
      v32 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 72) + (unsigned __int16)v15);
      v33 = v32 == 4 && v31 == 0;
      v34 = v33;
      if (v32 == v31 || v34)
        break;
      LODWORD(v15) = (__int16)(v15 + 1);
      if ((int)v15 >= v30)
        goto LABEL_84;
    }
    *(_WORD *)(v8 + 18) = *(_WORD *)(*(_QWORD *)(v8 + 3520) + 2 * (unsigned __int16)v15);
  }
  if ((unsigned __int16)v15 != (unsigned __int16)v30)
  {
LABEL_87:
    v22 = 10;
    LOWORD(v23) = v15;
    goto LABEL_90;
  }
LABEL_84:
  v36 = *(__int16 **)(v8 + 3520);
  v37 = *v36;
  v38 = v36[1];
  if ((v37 & 1) != 0)
  {
    *(_WORD *)(v8 + 18) = v38;
  }
  else if ((v38 & 1) != 0)
  {
    *(_WORD *)(v8 + 18) = v37;
  }
  v22 = 10;
  LOWORD(v23) = v30;
LABEL_90:
  if ((_DWORD)v22 != 11 && v16 && (v82 & 0xE0) != 0)
  {
    *(_WORD *)(a3 + 1322) &= ~0x20u;
    *(_QWORD *)(a3 + 1328) &= ~0x20uLL;
  }
  if (*(_BYTE *)(a3 + 8) == 2)
  {
    if ((_DWORD)v22 == 10 && *(_DWORD *)(a3 + 24) == 64)
    {
      if (**(_BYTE **)(v8 + 3496))
      {
        __s[a2 - **(unsigned __int8 **)(v8 + 3496)] = -95;
        SFadd(__s, a2, (__int16 *)(v8 + 40), (__int16 *)(v8 + 44), *(__int16 *)(v8 + 42), *(__int16 *)(v8 + 56), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 64));
        *(_QWORD *)(a3 + 1328) |= 4uLL;
        v82 |= 4u;
        v22 = 2;
      }
      else
      {
        v22 = 10;
      }
    }
    else if ((_DWORD)v22 == 11)
    {
      v22 = ICfoldio((uint64_t)__s, a2, a3);
      if ((_DWORD)v22 == 10)
        v82 |= 0x40u;
    }
  }
  if (*(_QWORD *)(a3 + 3168) && a2 <= 17 && (_DWORD)v22 == 10 && (v82 & 0x40) != 0)
  {
    v79 = v82;
    v39 = *(unsigned __int8 *)(a3 + 8);
    if (!*(_BYTE *)(a3 + 8) || ((1 << (v39 - 1)) & 0x11660) != 0)
    {
      v42 = *(_WORD **)(v8 + 3520);
      if ((*v42 & 0x260) != 0 || (v42[1] & 0x260) != 0)
      {
        v22 = 10;
        goto LABEL_132;
      }
    }
    if (*(__int16 *)(v8 + 102) < 1)
    {
      LOWORD(v23) = 0;
    }
    else
    {
      LOWORD(v23) = 0;
      if (ICcchadd((uint64_t)__s, a2, **(unsigned __int8 **)(v8 + 72), 0, v81, a3) == 10)
      {
        v79 |= 1u;
        v40 = 1;
        while (v40 < *(__int16 *)(v8 + 102))
        {
          LOWORD(v23) = v40;
          v41 = ICcchadd((uint64_t)__s, a2, *(unsigned __int8 *)(*(_QWORD *)(v8 + 72) + v40), (__int16)v40, v81, a3);
          ++v40;
          if (v41 != 10)
            goto LABEL_120;
        }
        LOWORD(v23) = v40;
      }
    }
LABEL_120:
    v82 = v79;
  }
  v39 = *(unsigned __int8 *)(a3 + 8);
  if ((_DWORD)v22 != 10)
  {
    v43 = v39 == 8 || v39 == 5;
    if (v43 && (*(_BYTE *)(a3 + 24) & 0x40) != 0)
    {
      if (!*(_BYTE *)(v8 + 88)
        || *(_BYTE *)(v8 + 88) == 1 && (*(_DWORD *)(v80 + 4 * *__s) & 0x10000000) == 0)
      {
        return 11;
      }
      v22 = ICcltuna(__s, a2, a3);
      v39 = *(unsigned __int8 *)(a3 + 8);
    }
  }
LABEL_132:
  if (v39)
    v44 = ((1 << (v39 - 1)) & 0x11660) == 0;
  else
    v44 = 0;
  if (!v44
    && *(_DWORD *)(a3 + 1308)
    && (_DWORD)v22 != 11
    && (*(_WORD *)v7 & 8) == 0
    && (*(_WORD *)(v8 + 18) & 0xC0C) == 0
    && ((*(_WORD *)(a3 + 1322) & 0x20) != 0 || (v82 & 0xA0) != 0))
  {
    v45 = *(__int16 **)(v7 + 216);
    *v45 = 1;
    if (**(_BYTE **)(v8 + 72) == 1)
    {
      v46 = *__s;
      if ((*(_DWORD *)(v80 + 4 * v46) & 0x20000000) != 0)
        LOBYTE(v46) = v46 - 32;
      *__s = v46;
      v45 = *(__int16 **)(v7 + 216);
    }
    IHhyp(__s, v45);
    if (**(_BYTE **)(v8 + 72) == 1)
    {
      v47 = *__s;
      if ((*(_DWORD *)(v80 + 4 * v47) & 0x40000000) != 0)
        LOBYTE(v47) = v47 + 32;
      *__s = v47;
      v48 = *(_QWORD *)(v7 + 216);
      v49 = *(unsigned __int8 *)(v48 + 680);
      if ((*(_DWORD *)(v80 + 4 * v49) & 0x40000000) != 0)
        LOBYTE(v49) = v49 + 32;
      *(_BYTE *)(v48 + 680) = v49;
    }
    v50 = *(_QWORD *)(v7 + 216);
    *(_DWORD *)(v8 + 3480) = *(_DWORD *)(v50 + 8);
    *(_DWORD *)(v8 + 3484) = *(_DWORD *)(v50 + 12);
    if (*(_BYTE *)(v50 + 747))
    {
      if ((*(_WORD *)(v8 + 18) & 0x40) != 0)
        v51 = 2;
      else
        v51 = 4;
      *(_WORD *)(a3 + 1322) |= v51 | 0x40;
      checked_strcpy(a3 + 3090, (char *)(v50 + 680));
      v52 = *(_QWORD *)(v7 + 216);
      *(_DWORD *)(a3 + 3156) = *(_DWORD *)(v52 + 16);
      *(_DWORD *)(a3 + 3160) = *(_DWORD *)(v52 + 20);
    }
  }
  if ((_DWORD)v22 == 10)
  {
    LOWORD(v53) = *(_WORD *)(v8 + 102);
    goto LABEL_159;
  }
  if (*(_BYTE *)(a3 + 8) == 11)
  {
    if (__s)
    {
      v72 = strlen(__s);
      if (v72 >= 0x40)
        v73 = 64;
      else
        v73 = v72;
      if (v73)
        __strncpy_chk();
      __sa[v73] = 0;
    }
    ICremacc(__sa, 3, a3);
    v22 = ICget(__sa, a2, a3);
    if ((_DWORD)v22 == 10)
    {
      SFadd(__sa, a2, (__int16 *)(v8 + 40), (__int16 *)(v8 + 44), *(__int16 *)(v8 + 42), *(__int16 *)(v8 + 56), *(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 64));
      *(_WORD *)(v8 + 3492) |= 2u;
      v82 |= 4u;
      goto LABEL_195;
    }
  }
  if ((_DWORD)v22 != 11 || !v16)
    goto LABEL_196;
  v74 = *(_WORD *)(a3 + 1322);
  if ((v74 & 0x20) == 0)
    goto LABEL_187;
  if ((*(_BYTE *)(a3 + 1328) & 0x20) == 0
    || (process_neg(a3, (__int16)v23, &v82), *(_WORD *)v7 |= v82, v74 = *(_WORD *)(a3 + 1322), (v74 & 0x200) != 0))
  {
    LODWORD(v53) = *(__int16 *)(v9 + 50);
    *(_WORD *)(v8 + 102) = *(_WORD *)(v9 + 50);
    if ((int)v53 >= 1)
    {
      v75 = 0;
      v76 = *(_QWORD *)(v9 + 104);
      do
      {
        *(_BYTE *)(*(_QWORD *)(v8 + 72) + v75) = *(_BYTE *)(*(_QWORD *)(v76 + 8 * v75) + 71);
        v76 = *(_QWORD *)(v9 + 104);
        v77 = *(_DWORD **)(v76 + 8 * v75);
        v78 = (_DWORD *)(*(_QWORD *)(v8 + 80) + 8 * v75);
        *v78 = v77[20];
        v78[1] = v77[21];
        *(_DWORD *)(v8 + 3480) = v77[22];
        *(_DWORD *)(v8 + 3484) = v77[23];
        ++v75;
      }
      while (v75 < *(__int16 *)(v8 + 102));
      LOWORD(v53) = *(_WORD *)(v8 + 102);
      v74 = *(_WORD *)(a3 + 1322);
    }
    if ((v74 & 0x200) == 0)
    {
LABEL_159:
      if ((__int16)v53 >= 2)
      {
        v54 = 0;
        v55 = 1;
        do
        {
          v56 = v54 + 1;
          if (v54 + 1 >= (unint64_t)(unsigned __int16)v53)
          {
            v70 = (unsigned __int16)v53;
          }
          else
          {
            v57 = v53;
            v58 = v55;
            do
            {
              v59 = *(_QWORD *)(v8 + 72);
              v60 = *(unsigned __int8 *)(v59 + v58);
              if (v60 < *(unsigned __int8 *)(v59 + v54))
              {
                v53 = *(_QWORD *)(v8 + 3520);
                v61 = *(_WORD *)(v53 + 2 * v58);
                v62 = *(_QWORD *)(v8 + 3496);
                v63 = *(_BYTE *)(v62 + v58);
                v64 = *(_BYTE *)(*(_QWORD *)(v8 + 3504) + v58);
                v65 = *(_WORD *)(*(_QWORD *)(v8 + 24) + 2 * v58);
                v66 = *(_BYTE *)(*(_QWORD *)(v8 + 3528) + v58);
                v67 = *(_QWORD *)(v8 + 80);
                v68 = *(_BYTE *)(*(_QWORD *)(v8 + 3536) + v58);
                *(_WORD *)(v53 + 2 * v58) = *(_WORD *)(v53 + 2 * v54);
                v69 = *(_QWORD *)(v67 + 8 * v58);
                *(_BYTE *)(v62 + v58) = *(_BYTE *)(v62 + v54);
                *(_BYTE *)(*(_QWORD *)(v8 + 72) + v58) = *(_BYTE *)(*(_QWORD *)(v8 + 72) + v54);
                *(_BYTE *)(*(_QWORD *)(v8 + 3504) + v58) = *(_BYTE *)(*(_QWORD *)(v8 + 3504) + v54);
                *(_WORD *)(*(_QWORD *)(v8 + 24) + 2 * v58) = *(_WORD *)(*(_QWORD *)(v8 + 24) + 2 * v54);
                *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v58) = *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v54);
                *(_BYTE *)(*(_QWORD *)(v8 + 3528) + v58) = *(_BYTE *)(*(_QWORD *)(v8 + 3528) + v54);
                *(_BYTE *)(*(_QWORD *)(v8 + 3536) + v58) = *(_BYTE *)(*(_QWORD *)(v8 + 3536) + v54);
                *(_WORD *)(*(_QWORD *)(v8 + 3520) + 2 * v54) = v61;
                *(_BYTE *)(*(_QWORD *)(v8 + 3496) + v54) = v63;
                *(_BYTE *)(*(_QWORD *)(v8 + 72) + v54) = v60;
                *(_BYTE *)(*(_QWORD *)(v8 + 3504) + v54) = v64;
                *(_WORD *)(*(_QWORD *)(v8 + 24) + 2 * v54) = v65;
                *(_QWORD *)(*(_QWORD *)(v8 + 80) + 8 * v54) = v69;
                *(_BYTE *)(*(_QWORD *)(v8 + 3528) + v54) = v66;
                *(_BYTE *)(*(_QWORD *)(v8 + 3536) + v54) = v68;
                LOWORD(v53) = *(_WORD *)(v8 + 102);
                v57 = v53;
              }
              ++v58;
            }
            while (v58 < v57);
            v70 = (unsigned __int16)v53;
          }
          ++v55;
          ++v54;
        }
        while (v56 < v70);
      }
      if (*(_BYTE *)(a3 + 8) != 6)
        goto LABEL_173;
      v71 = *(_WORD **)(v8 + 3520);
      if ((*v71 & 0x20) == 0)
      {
        if (*(__int16 *)(v8 + 102) < 2 || (v71[1] & 0x20) == 0)
          goto LABEL_173;
        if ((*(_DWORD *)(v8 + 92) & 0x80000000) != 0)
        {
          if (*(_BYTE *)(v8 + 88) == 3)
          {
            *(_WORD *)(v8 + 102) = 1;
            **(_BYTE **)(v8 + 72) = 1;
          }
LABEL_173:
          v22 = 10;
LABEL_196:
          *(_WORD *)v7 |= v82;
          return v22;
        }
      }
LABEL_187:
      v22 = 11;
      goto LABEL_196;
    }
LABEL_195:
    v22 = 2;
    goto LABEL_196;
  }
  return 11;
}

uint64_t process_neg(uint64_t a1, int a2, _WORD *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  unsigned int v13;
  uint64_t v15;

  v3 = *(_QWORD **)(a1 + 3184);
  v4 = v3[30];
  v5 = *(_QWORD *)(v3[31] + 56);
  v6 = v3[29];
  v7 = v3[33];
  *(_QWORD *)(a1 + 1328) |= 0x20uLL;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 + 104) + 8 * a2);
  v9 = *(_WORD *)(v8 + 100);
  if (!v9)
    return 11;
  *(_DWORD *)v4 = *(_DWORD *)v6;
  *(_DWORD *)(v4 + 4) = *(_DWORD *)(v8 + 96);
  *(_WORD *)(v4 + 16) = v9;
  if (PDalt((unsigned __int16 *)v4) == 8)
    return 11;
  v13 = *(unsigned __int8 *)(v7 + 88);
  if (v13 < *(unsigned __int8 *)(*(_QWORD *)(v7 + 72) + a2))
    return 11;
  if (v13 == 3)
  {
    v15 = *(_QWORD *)(v7 + 80);
    if ((*(_DWORD *)(v7 + 92) != *(_DWORD *)(v15 + 8 * a2) || *(_DWORD *)(v7 + 96) != *(_DWORD *)(v15 + 8 * a2 + 4))
      && *(__int16 *)(v7 + 102) - 1 != a2)
    {
      return 11;
    }
  }
  else
  {
    v15 = *(_QWORD *)(v7 + 80);
  }
  *(_BYTE *)(*(_QWORD *)(v7 + 72) + a2) = SLcap(*(_QWORD *)(v4 + 8), 0, *(__int16 *)(v4 + 16), (_QWORD *)(v15 + 8 * a2), v5);
  *(_WORD *)(a1 + 1322) |= 0x200u;
  *a3 |= 4u;
  SFadd(*(char **)(v4 + 8), *(__int16 *)(v4 + 16), (__int16 *)(v7 + 40), (__int16 *)(v7 + 44), *(__int16 *)(v7 + 42), *(__int16 *)(v7 + 56), *(_QWORD *)(v7 + 48), *(_QWORD *)(v7 + 64));
  return 2;
}

uint64_t ICgreek(uint64_t a1, int a2)
{
  if (!a2)
    return ICgkver(a1);
  ICgkchk(a1);
  return 10;
}

uint64_t ICgkchk(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int16 v7;
  unsigned __int8 *v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v14[65];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 248) + 56);
  v5 = *(_QWORD *)(v2 + 264);
  v6 = strlen((const char *)(a1 + 1339));
  if (v6 << 16 >= 1
    && (*(_BYTE *)(a1 + (unsigned __int16)v6 - 1 + 1339) == 39
     || *(_BYTE *)(*(_QWORD *)(v2 + 80) + 65) == 39))
  {
    v3 = gk_elision(a1);
  }
  if (*(_BYTE *)(a1 + 1417) == 39)
    v3 = gk_aphaeresis_aux_chk(a1);
  if (v3 != 10)
    gk_nu_drop(a1);
  if ((*(_BYTE *)(a1 + 1331) & 1) != 0)
  {
    v7 = *(_WORD *)(a1 + 1612);
    if (v7)
    {
      v8 = (unsigned __int8 *)(a1 + 1547);
      v9 = v14;
      v10 = *(unsigned __int16 *)(a1 + 1612);
      do
      {
        v11 = *v8++;
        *v9++ = v11 - ((*(_DWORD *)(v4 + 4 * v11) & 0x4020000) != 0);
        --v10;
      }
      while (v10);
    }
    v12 = v7 - 1;
    if (v14[v12] == 253)
      v14[v12] = -49;
    SFlstini((_WORD *)(v5 + 40), (_WORD *)(v5 + 44), *(_BYTE **)(v5 + 48), *(_WORD **)(v5 + 64));
    SFadd(v14, *(__int16 *)(a1 + 1612), (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
    *(_WORD *)v2 |= 4u;
  }
  return 10;
}

uint64_t ICgkver(uint64_t a1)
{
  uint64_t v2;
  char v3;
  int v4;
  uint64_t result;

  v2 = *(__int16 *)(a1 + 1612) + a1;
  if (*(unsigned __int8 *)(v2 + 1546) == 207 && *(_BYTE *)(a1 + 1482) != 39)
  {
    v3 = 0;
    *(_BYTE *)(v2 + 1546) = -3;
  }
  else
  {
    v3 = 1;
  }
  v4 = gk_num(a1);
  if (gk_veruppercap(a1) == 10
    || gk_undouble_accent(a1) == 10
    || gk_apocope(a1) == 10
    || gk_aphaeresis(a1) == 10
    || v4 == 10)
  {
    result = ICfndchk(a1);
    if ((v3 & 1) != 0)
      return result;
    goto LABEL_13;
  }
  result = 11;
  if ((v3 & 1) == 0)
LABEL_13:
    *(_BYTE *)(*(__int16 *)(a1 + 1612) + a1 + 1546) = -49;
  return result;
}

uint64_t gk_apocope(uint64_t a1)
{
  unint64_t v2;
  __int16 v3;
  __int16 *v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v8;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char __s[16];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0;
  *(_OWORD *)__s = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  if (*(_BYTE *)(a1 + 1482) != 39)
    return 11;
  __strcpy_chk();
  __strcpy_chk();
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v11 = 0xB90000BF0000BE00;
  v12 = 0xCB0000BA0000;
  v14 = 0;
  v10 = -11829;
  v13 = 0xC4B90000C40000CCLL;
  __strcpy_chk();
  v2 = 0;
  v3 = *(_WORD *)(a1 + 1612);
  v4 = &v10;
  do
  {
    v19 = 0;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__s = 0u;
    v16 = 0u;
    __strcat_chk();
    __strcat_chk();
    __strcpy_chk();
    v5 = strlen(__s);
    *(_WORD *)(a1 + 1612) = v5;
    v6 = ICverify(__s, v5, a1);
    v4 = (__int16 *)((char *)v4 + 3);
  }
  while ((_DWORD)v6 == 11 && v2++ < 8);
  v8 = v6;
  __strcpy_chk();
  *(_WORD *)(a1 + 1612) = v3;
  return v8;
}

uint64_t gk_aphaeresis(uint64_t a1)
{
  unint64_t v2;
  __int16 *v3;
  __int16 v4;
  uint64_t result;
  __int16 v6;
  int v7;
  char v8;
  uint64_t v9;
  char __s[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0;
  if (*(_BYTE *)(a1 + 1417) != 39)
    return 11;
  __strcpy_chk();
  v2 = 0;
  v7 = 48896;
  v9 = 0xBA0000C20000;
  v6 = -14914;
  v8 = -66;
  v3 = &v6;
  do
  {
    v14 = 0;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)__s = 0u;
    v11 = 0u;
    __strcat_chk();
    __strcat_chk();
    v4 = strlen(__s);
    result = ICverify(__s, v4, a1);
    if (v2 > 3)
      break;
    ++v2;
    v3 = (__int16 *)((char *)v3 + 3);
  }
  while ((_DWORD)result == 11);
  return result;
}

uint64_t gk_nu_drop(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  int v5;
  char *i;
  int v7;
  unsigned int v8;
  unsigned int v9;
  size_t v10;
  char __s[2];
  char v13;
  __int128 v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v14 = 0uLL;
  v15 = 0;
  __strcpy_chk();
  v2 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 264);
  *(_WORD *)__s = -15920;
  v13 = 0;
  WORD1(v14) = -16707;
  *(_WORD *)((char *)&v14 + 7) = -15928;
  v4 = **(_BYTE **)(v3 + 3496);
  v5 = *(unsigned __int8 *)(a1 + 1339);
  for (i = __s; ; i += 5)
  {
    v7 = strlen(i);
    if (v5 && v7 << 16 >= 1)
    {
      v8 = (unsigned __int16)v7;
      v9 = (__int16)strlen((const char *)(a1 + 1339));
      v10 = (int)v8 <= (int)v9 ? v9 : v8;
      if (!memcmp((const void *)(a1 + 1339), i, v10))
        break;
    }
    if (++v2 == 4)
      return 10;
  }
  if ((v4 & 1) != 0)
    return 10;
  *(_QWORD *)(a1 + 1328) |= 0x10000000uLL;
  if ((unsigned __int16)v2 <= 2u)
    *(_WORD *)(a1 + 1404) = v2 + 3;
  return 3;
}

uint64_t gk_elision(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  int *v4;
  unsigned __int8 *v5;
  __int16 v6;
  int v7;
  _BOOL4 v13;
  int v14;
  unint64_t v15;
  int v16;
  _BYTE *v17;
  BOOL v18;
  int v19;
  int v20;
  uint64_t result;
  __int16 v22;
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  _WORD v39[11];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 3184);
  v3 = v2[33];
  v4 = *(int **)(v2[31] + 56);
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  memset(v30, 0, sizeof(v30));
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  memset(v36, 0, sizeof(v36));
  v37 = 0u;
  v38 = 0u;
  memset(v39, 0, sizeof(v39));
  v5 = (unsigned __int8 *)(a1 + 1339);
  v6 = strlen((const char *)(a1 + 1339));
  __strcpy_chk();
  v7 = *v4;
  LOWORD(v24) = 10191;
  BYTE2(v24) = 0;
  WORD5(v24) = 2;
  HIDWORD(v24) = 667418624;
  WORD4(v25) = 2;
  *(_DWORD *)((char *)&v25 + 10) = -843513856;
  HIWORD(v25) = 39;
  WORD3(v26) = 3;
  DWORD2(v26) = -742850559;
  WORD6(v26) = 39;
  WORD2(v27) = 3;
  *(_DWORD *)((char *)&v27 + 6) = -994311935;
  WORD5(v27) = 39;
  WORD1(v28) = 3;
  DWORD1(v28) = -1178206208;
  WORD4(v28) = 10192;
  LOWORD(v29) = 4;
  BYTE10(v28) = 0;
  *(_DWORD *)((char *)&v29 + 2) = -1178206207;
  WORD3(v29) = 10179;
  BYTE8(v29) = 0;
  HIWORD(v29) = 4;
  LODWORD(v30[0]) = -1094188799;
  WORD2(v30[0]) = 10192;
  BYTE6(v30[0]) = 0;
  WORD6(v30[0]) = 4;
  *(_DWORD *)((char *)v30 + 14) = -1094189055;
  WORD1(v30[1]) = 10179;
  BYTE4(v30[1]) = 0;
  WORD5(v30[1]) = 4;
  HIDWORD(v30[1]) = -1177747199;
  LOWORD(v31) = 10190;
  BYTE2(v31) = 0;
  WORD4(v31) = 4;
  *(_DWORD *)((char *)&v31 + 10) = -994246656;
  HIWORD(v31) = 39;
  WORD3(v32) = 3;
  DWORD2(v32) = -843186176;
  WORD6(v32) = 39;
  WORD2(v33) = 3;
  *(_DWORD *)((char *)&v33 + 6) = -742522879;
  WORD5(v33) = 39;
  WORD1(v34) = 3;
  *(_QWORD *)((char *)&v34 + 4) = 0x27CEBED0CFD20101;
  BYTE12(v34) = 0;
  LOWORD(v35) = 6;
  __asm { FMOV            V1.2S, #-1.5625 }
  *(_DWORD *)((char *)&v35 + 2) = _D1;
  WORD3(v35) = 10191;
  BYTE8(v35) = 0;
  HIWORD(v35) = 4;
  LODWORD(v36[0]) = -944177152;
  WORD2(v36[0]) = 10183;
  BYTE6(v36[0]) = 0;
  WORD6(v36[0]) = 4;
  *(_DWORD *)((char *)v36 + 14) = 667418624;
  BYTE2(v36[1]) = 0;
  WORD5(v36[1]) = 2;
  HIDWORD(v36[1]) = 667484160;
  WORD4(v37) = 2;
  *(_DWORD *)((char *)&v37 + 10) = 667090944;
  BYTE14(v37) = 0;
  WORD3(v38) = 2;
  DWORD2(v38) = 667942912;
  BYTE12(v38) = 0;
  v39[2] = 2;
  *(_DWORD *)&v39[3] = -977403904;
  v39[5] = 10185;
  LOBYTE(v39[6]) = 0;
  *(_DWORD *)&v39[9] = 4;
  if (SLstrcmp((_BYTE *)&v25 + 12, v5))
  {
    if (*v5 != 185 || *(unsigned __int8 *)(a1 + 1340) != 205 || *(_BYTE *)(v2[10] + 65) != 39)
    {
      v13 = 0;
      goto LABEL_13;
    }
    v13 = *(_BYTE *)(a1 + 1341) == 0;
    if (*(_BYTE *)(a1 + 1341) || (v7 & 0x10000000) != 0)
      goto LABEL_13;
  }
  else if ((v7 & 0x10000000) != 0)
  {
    v13 = 1;
    goto LABEL_13;
  }
  v14 = *(unsigned __int8 *)(a1 + 1547);
  v13 = 1;
  if (v14 != 176 && v14 != 208)
  {
    *(_QWORD *)(a1 + 1328) |= 0x10000000uLL;
    result = 3;
    v22 = 11;
    goto LABEL_47;
  }
LABEL_13:
  v15 = 0;
  if (SLstrcmp(&v24, v5))
  {
    v16 = v6;
    v17 = (_BYTE *)((unint64_t)&v24 | 0xE);
    v18 = 1;
    do
    {
      if (*(_BYTE *)(v2[10] + 65) == 39)
      {
        v19 = *((__int16 *)v17 - 2);
        if (v16 > v19)
          v19 = v16;
        if (!memcmp(v5, v17 - 14, v19 - 1))
          break;
      }
      v18 = v15 < 0x14;
      if (v15 == 20)
        goto LABEL_24;
      v20 = SLstrcmp(v17, v5);
      v17 += 14;
      ++v15;
    }
    while (v20);
  }
  else
  {
    v18 = 1;
  }
  if ((unsigned __int16)v15 == 21)
LABEL_24:
    LOWORD(v15) = 20;
  if ((**(_WORD **)(v3 + 3520) & 0x200) != 0 && *((_BYTE *)&v24 + 14 * (unsigned __int16)v15 + 12))
  {
    if (!*((_BYTE *)&v24 + 14 * (unsigned __int16)v15 + 13))
    {
      *(_QWORD *)(a1 + 1328) |= 0x10000000uLL;
      result = 11;
      switch((unsigned __int16)v15)
      {
        case 5u:
          v22 = 15;
          break;
        case 0xBu:
          v22 = 21;
          break;
        case 7u:
          v22 = 17;
          break;
        default:
          return result;
      }
      goto LABEL_47;
    }
  }
  else if (*((_BYTE *)&v24 + 14 * (unsigned __int16)v15 + 13))
  {
    *(_QWORD *)(a1 + 1328) |= 0x10000000uLL;
    v23 = v15 - 3;
    if ((unsigned __int16)(v15 - 3) >= 0xAu || ((0x229u >> v23) & 1) == 0)
      return 11;
    v22 = asc_1DE2ECBB0[v23];
    result = 11;
    goto LABEL_47;
  }
  if ((*(_DWORD *)&v18 & ((v7 & 0x10000000u) >> 28) & 1) != 0)
    return 10;
  if (((v13 | ((v7 & 0x10000000u) >> 28)) & 1) != 0)
    return 3;
  *(_QWORD *)(a1 + 1328) |= 0x10000000uLL;
  if ((unsigned __int16)v15 >= 0x15u || ((0x1EFFFBu >> v15) & 1) == 0)
    return 10;
  v22 = asc_1DE2ECBC4[(__int16)v15];
  result = 10;
LABEL_47:
  *(_WORD *)(a1 + 1404) = v22;
  return result;
}

uint64_t gk_undouble_accent(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 248) + 56);
  if (*(__int16 *)(a1 + 1612) >= 1)
  {
    v3 = *(unsigned __int16 *)(a1 + 1612);
    v4 = (unsigned __int8 *)(a1 + 1547);
    do
    {
      v6 = *v4++;
      v5 = v6;
      if (v6 == *(unsigned __int8 *)(a1 + 1338) || (v5 | 2) == 0x2F)
        return 11;
    }
    while (--v3);
  }
  __strcpy_chk();
  v7 = GREEKdoubly_accented((const char *)(a1 + 1547), v2);
  if (v7 < 1)
    return 11;
  *(_BYTE *)(a1 + (unsigned __int16)v7 + 1547) -= (*(_DWORD *)(v2
                                                             + 4
                                                             * *(unsigned __int8 *)(a1 + (unsigned __int16)v7 + 1547)) & 0x4020000) != 0;
  v8 = ICverify((char *)(a1 + 1547), *(__int16 *)(a1 + 1612), a1);
  __strcpy_chk();
  if (v8 == 10)
    return 10;
  else
    return 11;
}

uint64_t GREEKdoubly_accented(const char *a1, uint64_t a2)
{
  int v4;
  unsigned __int16 v5;
  __int16 v6;

  v4 = strlen(a1);
  if (v4 << 16 < 1)
  {
    return 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      if ((*(_DWORD *)(a2 + 4 * a1[v6]) & 0x4020000) != 0)
        ++v5;
      if (v5 > 1u)
        break;
      if ((__int16)v4 <= ++v6)
        return 0;
    }
  }
  return v6;
}

uint64_t gk_aphaeresis_aux_chk(uint64_t a1)
{
  int v2;

  v2 = strlen((const char *)(a1 + 1339));
  if (v2 << 16 < 1
    || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 248) + 56)
                  + 4 * *(unsigned __int8 *)(a1 + (unsigned __int16)v2 - 1 + 1339)) & 0x10000000) != 0)
  {
    return 10;
  }
  *(_QWORD *)(a1 + 1328) |= 0x10000000uLL;
  *(_WORD *)(a1 + 1404) = 1;
  return 3;
}

uint64_t gk_num(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  unsigned int v13;
  _BYTE v14[65];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD *)(*(_QWORD *)(v2 + 248) + 56);
  v4 = *(_QWORD *)(v2 + 264);
  v5 = (char *)(a1 + 1547);
  __strcpy_chk();
  v6 = *(__int16 *)(a1 + 1612);
  if (v6 < 1)
    return 11;
  LOWORD(v7) = 0;
  while ((*(_DWORD *)(v3 + 4 * v14[(unsigned __int16)v7]) & 0x8000000) != 0)
  {
    v7 = (__int16)(v7 + 1);
    if (v7 >= v6)
    {
      LOWORD(v7) = *(_WORD *)(a1 + 1612);
      break;
    }
  }
  if (!(_WORD)v7)
    return 11;
  __strcpy_chk();
  v8 = *(_WORD *)(a1 + 1612) - v7;
  *(_WORD *)(a1 + 1612) = v8;
  v9 = ICverify(v5, v8, a1);
  if ((_DWORD)v9 == 11)
  {
    v10 = gk_veruppercap(a1);
    __strcpy_chk();
    *(_WORD *)(a1 + 1612) = v6;
    if ((_DWORD)v10 == 11)
      return v10;
    v10 = 10;
  }
  else
  {
    v10 = v9;
    __strcpy_chk();
    *(_WORD *)(a1 + 1612) = v6;
  }
  v11 = *(_WORD **)(v4 + 3520);
  if ((*v11 & 0x10) == 0)
    return 11;
  *(_WORD *)(v4 + 18) &= ~1u;
  *v11 &= ~1u;
  if (*(_DWORD *)(a1 + 1308))
  {
    v13 = *(_DWORD *)(v4 + 3480);
    if (v13)
      *(_DWORD *)(v4 + 3480) = v13 >> v7;
  }
  return v10;
}

uint64_t gk_veruppercap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD *)(v2 + 264);
  v4 = *(unsigned __int8 *)(v3 + 88);
  if (v4 == 2 || (result = 11, v4 == 1) && *(_DWORD *)(a1 + 24) == 64)
  {
    if (SFaccent((unsigned __int8 *)(a1 + 1547), *(__int16 *)(a1 + 1612), *(_QWORD *)(v2 + 248), *(__int16 **)(v2 + 264)))
    {
      *(_WORD *)(v3 + 102) = 1;
      *(_WORD *)(v3 + 3492) |= 2u;
      **(_WORD **)(a1 + 3184) |= 0x40u;
      return 10;
    }
    else
    {
      return 11;
    }
  }
  return result;
}

uint64_t ICpar(const char *a1, uint64_t a2, uint64_t a3)
{
  const char *v3;
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char v13;
  int v14;
  unsigned int v17;
  unsigned int v18;
  char v19;
  char v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  const char *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  __int16 v65;
  int v66;
  char *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  __int16 v73;
  int v74;
  unsigned __int16 v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  int v79;
  __int16 v80;
  unsigned __int16 v81;
  __int16 v82;
  __int16 v83;
  int v84;
  __int16 v85;
  __int16 v86;
  unsigned __int16 v87;
  __int16 v88;
  __int16 v89;
  int v90;
  int v91;
  __int16 v92;
  unsigned __int16 v93;
  __int16 v94;
  int v95;
  int v96;
  unsigned int v97;
  unsigned __int16 v98;
  __int16 v99;
  __int16 v100;
  unsigned int v101;
  unsigned __int16 v102;
  __int16 v103;
  __int16 v104;
  int v105;
  int v106;
  unsigned int v107;
  int v108;
  __int16 v109;
  __int16 v110;
  int v111;
  int v112;
  int v113;
  unsigned int v114;
  int v115;
  unsigned __int16 v116;
  __int16 v117;
  __int16 v118;
  const char *v120;
  int v121;
  int v122;
  __int16 v123;
  unsigned __int16 v124;
  __int16 v125;
  int v126;
  unsigned __int16 v127;
  __int16 v128;
  __int16 v129;
  int v130;
  int v131;
  int v132;
  int v133;
  __int16 v134;
  __int16 v135;
  __int16 v136;
  unsigned __int16 v137;
  __int16 v138;
  unsigned __int8 v139;
  int v140;
  __int16 v141;
  unsigned __int16 v142;
  __int16 v143;
  __int16 v144;
  int v145;
  int v146;
  __int16 v147;
  __int16 v148;
  int v149;
  __int16 v150;
  __int16 v151;
  int v152;
  int v153;
  int v154;
  int v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  unsigned int v159;
  int v160;
  int v161;
  unsigned int v162;
  int v163;
  int v164;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v178;
  uint64_t v179;
  uint64_t v180;
  __int16 v181;
  int v182;
  int v183;
  unint64_t v185;
  unsigned int v186;
  int v187;
  char *v188;
  int v189;
  uint64_t v191;
  _DWORD v192[130];
  uint64_t v193;

  v191 = a2;
  v193 = *MEMORY[0x1E0C80C00];
  v3 = (const char *)(a3 + 1547);
  v179 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 3184) + 248) + 56);
  if ((int)(strlen((const char *)(a3 + 1547)) << 16) >= 1)
  {
    v4 = 0;
    v5 = 0;
    v180 = 0;
    v182 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v183 = 0;
    v178 = 0;
    v187 = 0;
    v189 = 0;
    v11 = 0;
    v185 = 0;
    while (2)
    {
      v12 = v3[v4];
      if (v12 != 34)
      {
        if (v12 == 39)
        {
          if (v7 != 39)
          {
            if ((unsigned __int16)v6 == 2)
            {
              switch(v7)
              {
                case 187:
                  --v8;
                  break;
                case 96:
                  --v5;
                  break;
                case 34:
                  --v9;
                  break;
              }
              v6 = 0;
              --v11;
            }
            else
            {
              if ((__int16)v6 >= 3)
              {
                switch(v7)
                {
                  case 187:
                    v8 -= v6;
                    break;
                  case 96:
                    v5 -= v6;
                    break;
                  case 34:
                    v9 -= v6;
                    break;
                }
              }
              v6 = 0;
            }
          }
          ++v6;
          ++v10;
          v7 = 39;
          v26 = v191;
          *(_BYTE *)(v191 + (__int16)v11) = 39;
          *(_BYTE *)(v26 + (__int16)++v11) = 0;
          goto LABEL_182;
        }
        v14 = *(unsigned __int8 *)(a3 + 8);
        if (v12 == 187 && v14 == 7)
        {
          if (v7 != 187)
          {
            if ((unsigned __int16)v6 == 2)
            {
              switch(v7)
              {
                case '"':
                  --v9;
                  break;
                  --v5;
                  break;
                case '\'':
                  --v10;
                  ++v187;
                  a1[(__int16)v189] = 39;
                  a1[(__int16)(v189 + 1)] = 0;
                  v19 = v3[v4];
                  ++v189;
                  goto LABEL_100;
              }
              v19 = -69;
LABEL_100:
              v6 = 0;
              --v11;
LABEL_172:
              ++v6;
              v27 = v11 + 1;
              v37 = v191;
              *(_BYTE *)(v191 + (__int16)v11) = v19;
              ++v8;
              *(_BYTE *)(v37 + (__int16)(v11 + 1)) = 0;
              v7 = 187;
LABEL_181:
              v11 = v27;
              goto LABEL_182;
            }
            if ((__int16)v6 >= 3)
            {
              switch(v7)
              {
                case '"':
                  v9 -= v6;
                  goto LABEL_171;
                  v5 -= v6;
                  goto LABEL_171;
                case '\'':
                  v10 -= v6;
LABEL_171:
                  v19 = -69;
                  v6 = 0;
                  goto LABEL_172;
              }
            }
            v6 = 0;
          }
          v19 = -69;
          goto LABEL_172;
        }
        if (v12 == 96 && v14 == 11)
        {
          if (v7 != 96)
          {
            if ((unsigned __int16)v6 == 2)
            {
              switch(v7)
              {
                case 34:
                  --v9;
                  break;
                case 187:
                  --v8;
                  break;
                case 39:
                  --v10;
                  ++v187;
                  a1[(__int16)v189] = 39;
                  a1[(__int16)(v189 + 1)] = 0;
                  v20 = v3[v4];
                  ++v189;
                  goto LABEL_168;
              }
              v20 = 96;
LABEL_168:
              v6 = 0;
              --v11;
LABEL_180:
              ++v6;
              v27 = v11 + 1;
              v38 = v191;
              *(_BYTE *)(v191 + (__int16)v11) = v20;
              ++v5;
              *(_BYTE *)(v38 + (__int16)(v11 + 1)) = 0;
              v7 = 96;
              goto LABEL_181;
            }
            if ((__int16)v6 >= 3)
            {
              switch(v7)
              {
                case 34:
                  v9 -= v6;
                  goto LABEL_179;
                case 187:
                  v8 -= v6;
                  goto LABEL_179;
                case 39:
                  v10 -= v6;
LABEL_179:
                  v20 = 96;
                  v6 = 0;
                  goto LABEL_180;
              }
            }
            v6 = 0;
          }
          v20 = 96;
          goto LABEL_180;
        }
        if ((unsigned __int16)v6 == 2)
        {
          if (v7 > 95)
          {
            v25 = v8 - 1;
            if (v7 != 187)
              v25 = v8;
            if (v7 == 96)
              --v5;
            else
              v8 = v25;
            v18 = v185;
            v17 = HIDWORD(v185);
          }
          else
          {
            v18 = v185;
            v17 = HIDWORD(v185);
            if (v7 == 34)
            {
              --v9;
            }
            else if (v7 == 39)
            {
              --v10;
              ++v187;
              a1[(__int16)v189] = 39;
              a1[(__int16)(v189 + 1)] = 0;
              v12 = v3[v4];
              ++v189;
            }
          }
          --v11;
        }
        else
        {
          v21 = v5 - v6;
          v22 = v8 - v6;
          if (v7 != 187)
            v22 = v8;
          if (v7 == 96)
            v22 = v8;
          else
            v21 = v5;
          v23 = v9 - v6;
          v24 = v10 - v6;
          if (v7 != 39)
            v24 = v10;
          if (v7 == 34)
            v24 = v10;
          else
            v23 = v9;
          if (v7 <= 95)
          {
            v22 = v8;
            v21 = v5;
          }
          else
          {
            v24 = v10;
            v23 = v9;
          }
          if ((__int16)v6 >= 3)
          {
            v10 = v24;
            v9 = v23;
            v8 = v22;
            v5 = v21;
          }
          v18 = v185;
          v17 = HIDWORD(v185);
        }
        v29 = *(_DWORD *)(v179 + 4 * v12);
        v30 = *(_QWORD *)&v29 & 0x400000;
        if ((*(_QWORD *)&v29 & 0xC00000) != 0x400000)
          v30 = 0;
        v31 = *(_QWORD *)&v29 & 0x200000;
        if ((*(_QWORD *)&v29 & 0xA00000) != 0x200000)
          v31 = 0;
        v32 = v30 | v31;
        v33 = *(_QWORD *)&v29 & 0xA00000;
        if ((v29 & 0x2000) != 0)
          v33 = *(_QWORD *)&v29 & 0xA00000;
        else
          v32 = 0;
        if (v33)
          v34 = (v29 & 0x1002400) == 16778240;
        else
          v34 = 0;
        v35 = v29 & 0x1000000;
        if (!v34)
          v35 = 0;
        switch(((v32 | v35) - 0x200000) >> 21)
        {
          case 0uLL:
            if ((v18 & 0x200000) != 0)
              goto LABEL_220;
            if ((__int16)v17 < 2)
              goto LABEL_187;
            if ((unsigned __int16)v17 == 2)
            {
              if ((v18 & 0x400000) != 0)
              {
                --v182;
              }
              else if ((v18 & 0x1000000) != 0)
              {
                --v189;
              }
              else if ((v18 & 0x2000) != 0)
              {
                if ((~v18 & 0x3C) != 0)
                {
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_1DE2ECBF0), (int32x4_t)xmmword_1DE2ECBF0))) & 1) != 0)--HIDWORD(v180);
                  else
                    LODWORD(v180) = v180 - 1;
                }
                else
                {
                  --v178;
                }
              }
              v17 = 0;
              --v11;
            }
            else
            {
              if ((v18 & 0x400000) != 0)
              {
                v182 -= v17;
LABEL_211:
                v18 = 0x200000;
                v17 = 0;
                goto LABEL_220;
              }
              if ((v18 & 0x2000) != 0)
              {
                if ((~v18 & 0x3C) != 0)
                {
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_1DE2ECBF0), (int32x4_t)xmmword_1DE2ECBF0))) & 1) != 0)HIDWORD(v180) -= v17;
                  else
                    LODWORD(v180) = v180 - v17;
                }
                else
                {
                  v178 -= v17;
                }
                goto LABEL_211;
              }
LABEL_187:
              v17 = 0;
            }
            v18 = 0x200000;
LABEL_220:
            if (v12 <= 160)
            {
              if (v12 > 92)
              {
                v186 = v17;
                switch(v12)
                {
                  case 139:
                    if ((~v18 & 0x8B) != 0)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097291;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097291;
                    }
                    break;
                  case 140:
                    if ((~v18 & 0x8C) != 0 && *(_BYTE *)(a3 + 8) == 15)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097292;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097292;
                    }
                    break;
                  case 141:
                  case 142:
                  case 143:
                  case 144:
                    goto LABEL_671;
                  case 145:
                    if ((~v18 & 0x91) != 0)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097297;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097297;
                    }
                    break;
                  case 146:
                    if ((~v18 & 0x92) != 0)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097298;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097298;
                    }
                    break;
                  case 147:
                    if ((~v18 & 0x93) != 0)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097299;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097299;
                    }
                    break;
                  case 148:
                    if ((~v18 & 0x94) != 0)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097300;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097300;
                    }
                    break;
                  default:
                    if (v12 == 93)
                    {
                      if ((~v18 & 0x5D) == 0)
                        goto LABEL_310;
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v183 -= v17;
                          v18 = 2097245;
                          goto LABEL_670;
                        }
                        v186 = 0;
                        --v183;
                        --v11;
                      }
                      v18 = 2097245;
                    }
                    else
                    {
                      if (v12 != 125 || (~v18 & 0x7D) == 0)
                        goto LABEL_310;
                      if ((__int16)v17 < 2)
                      {
                        v186 = 0;
                        v53 = 84;
                        goto LABEL_615;
                      }
                      if ((unsigned __int16)v17 != 2)
                      {
                        v183 -= v17;
                        v18 = 2097277;
                        goto LABEL_670;
                      }
                      v186 = 0;
                      --v183;
                      --v11;
                      v18 = 2097277;
                    }
                    break;
                }
                goto LABEL_671;
              }
              if (v12 == 41)
              {
                if ((~v18 & 0x29) != 0)
                {
                  v18 = 2097193;
                  if ((__int16)v17 < 2)
                    goto LABEL_670;
                  if ((unsigned __int16)v17 != 2)
                  {
                    v183 -= v17;
                    goto LABEL_670;
                  }
                  v186 = 0;
                  --v183;
                  --v11;
                  goto LABEL_671;
                }
              }
              else if (v12 == 60)
              {
                if ((~v18 & 0x3C) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v183 -= v17;
                      v18 = 2097212;
                      goto LABEL_670;
                    }
                    v186 = 0;
                    --v183;
                    --v11;
                  }
                  v18 = 2097212;
                  goto LABEL_671;
                }
              }
              else if (v12 == 62 && (~v18 & 0x3E) != 0)
              {
                if ((__int16)v17 < 2)
                {
                  v186 = 0;
LABEL_506:
                  v18 = 2097214;
                }
                else
                {
                  if ((unsigned __int16)v17 == 2)
                  {
                    v186 = 0;
                    --v183;
                    --v11;
                    goto LABEL_506;
                  }
                  v183 -= v17;
                  v18 = 2097214;
LABEL_670:
                  v186 = 0;
                }
                goto LABEL_671;
              }
              goto LABEL_310;
            }
            if (v12 <= 186)
            {
              if (v12 == 161)
              {
                if ((~v18 & 0xA1) != 0 && *(_BYTE *)(a3 + 8) == 1)
                {
                  if ((__int16)v17 < 2)
                  {
                    v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v183 -= v17;
                      v18 = 2097313;
                      goto LABEL_670;
                    }
                    v186 = 0;
                    --v183;
                    --v11;
                  }
                  v18 = 2097313;
                  goto LABEL_671;
                }
                goto LABEL_310;
              }
              if (v12 == 163)
              {
                if ((~v18 & 0xA3) != 0 && *(_BYTE *)(a3 + 8) == 1)
                {
                  if ((__int16)v17 < 2)
                  {
                    v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v183 -= v17;
                      v18 = 2097315;
                      goto LABEL_670;
                    }
                    v186 = 0;
                    --v183;
                    --v11;
                  }
                  v18 = 2097315;
LABEL_671:
                  v6 = 0;
                  v59 = v191;
                  *(_BYTE *)(v191 + (__int16)v11++) = v12;
                  *(_BYTE *)(v59 + (__int16)v11) = 0;
                  v185 = __PAIR64__(v186, v18) + 0x100000000;
                  v58 = &v192[(__int16)v183];
                  *(_BYTE *)v58 = v3[v4];
                  ++v183;
                  goto LABEL_672;
                }
LABEL_310:
                v186 = v17;
                goto LABEL_671;
              }
              if (v12 != 171 || (~v18 & 0xAB) == 0)
                goto LABEL_310;
              if ((__int16)v17 >= 2)
              {
                if ((unsigned __int16)v17 != 2)
                {
                  v183 -= v17;
                  v18 = 2097323;
                  goto LABEL_670;
                }
                v186 = 0;
                --v183;
                --v11;
                v18 = 2097323;
                goto LABEL_671;
              }
              v186 = 0;
              v53 = 130;
            }
            else
            {
              if (v12 > 221)
              {
                if (v12 == 222)
                {
                  if ((~v18 & 0xDE) != 0)
                  {
                    if ((__int16)v17 < 2)
                    {
                      v186 = 0;
                    }
                    else
                    {
                      if ((unsigned __int16)v17 != 2)
                      {
                        v183 -= v17;
                        v18 = 2097374;
                        goto LABEL_670;
                      }
                      v186 = 0;
                      --v183;
                      --v11;
                    }
                    v18 = 2097374;
                    goto LABEL_671;
                  }
                }
                else if (v12 == 224 && (~v18 & 0xE0) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v186 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v183 -= v17;
                      v18 = 2097376;
                      goto LABEL_670;
                    }
                    v186 = 0;
                    --v183;
                    --v11;
                  }
                  v18 = 2097376;
                  goto LABEL_671;
                }
                goto LABEL_310;
              }
              if (v12 == 187)
              {
                if ((~v18 & 0xBB) == 0)
                  goto LABEL_310;
                if ((__int16)v17 >= 2)
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v183 -= v17;
                    v18 = 2097339;
                    goto LABEL_670;
                  }
                  v186 = 0;
                  --v183;
                  --v11;
                  v18 = 2097339;
                  goto LABEL_671;
                }
                v186 = 0;
                v53 = 146;
              }
              else
              {
                if (v12 != 189 || (~v18 & 0xBD) == 0 || *(_BYTE *)(a3 + 8) != 2)
                  goto LABEL_310;
                if ((__int16)v17 >= 2)
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v183 -= v17;
                    v18 = 2097341;
                    goto LABEL_670;
                  }
                  v186 = 0;
                  --v183;
                  --v11;
                  v18 = 2097341;
                  goto LABEL_671;
                }
                v186 = 0;
                v53 = 148;
              }
            }
LABEL_615:
            v18 = v53 | 0x200029;
            goto LABEL_671;
          case 1uLL:
            if ((v18 & 0x400000) != 0)
              goto LABEL_314;
            if ((__int16)v17 < 2)
              goto LABEL_190;
            if ((unsigned __int16)v17 == 2)
            {
              if ((v18 & 0x200000) != 0)
              {
                --v183;
              }
              else if ((v18 & 0x1000000) != 0)
              {
                --v189;
              }
              else if ((v18 & 0x2000) != 0)
              {
                if ((~v18 & 0x3C) != 0)
                {
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_1DE2ECBF0), (int32x4_t)xmmword_1DE2ECBF0))) & 1) != 0)--HIDWORD(v180);
                  else
                    LODWORD(v180) = v180 - 1;
                }
                else
                {
                  --v178;
                }
              }
              v17 = 0;
              --v11;
            }
            else
            {
              if ((v18 & 0x200000) != 0)
              {
                v183 -= v17;
LABEL_213:
                v18 = 0x400000;
                v17 = 0;
                goto LABEL_314;
              }
              if ((v18 & 0x2000) != 0)
              {
                if ((~v18 & 0x3C) != 0)
                {
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_1DE2ECBF0), (int32x4_t)xmmword_1DE2ECBF0))) & 1) != 0)HIDWORD(v180) -= v17;
                  else
                    LODWORD(v180) = v180 - v17;
                }
                else
                {
                  v178 -= v17;
                }
                goto LABEL_213;
              }
LABEL_190:
              v17 = 0;
            }
            v18 = 0x400000;
LABEL_314:
            if (v12 > 146)
            {
              if (v12 <= 174)
              {
                if (v12 > 155)
                {
                  if (v12 == 156)
                  {
                    if ((~v18 & 0x9C) != 0 && *(_BYTE *)(a3 + 8) == 2)
                    {
                      if ((__int16)v17 < 2)
                      {
                        v17 = 0;
                      }
                      else
                      {
                        if ((unsigned __int16)v17 != 2)
                        {
                          v182 -= v17;
                          v55 = 4194460;
                          goto LABEL_663;
                        }
                        v17 = 0;
                        --v182;
                        --v11;
                      }
                      v42 = 4194460;
                      goto LABEL_642;
                    }
                  }
                  else if (v12 == 171 && (~v18 & 0xAB) != 0)
                  {
                    if ((__int16)v17 >= 2)
                    {
                      if ((unsigned __int16)v17 != 2)
                      {
                        v182 -= v17;
                        v55 = 4194475;
                        goto LABEL_663;
                      }
                      v17 = 0;
                      --v182;
                      --v11;
                      v42 = 4194475;
                      goto LABEL_642;
                    }
                    v17 = 0;
                    v54 = 131;
                    goto LABEL_641;
                  }
                }
                else if (v12 == 147)
                {
                  if ((~v18 & 0x93) != 0)
                  {
                    if ((__int16)v17 < 2)
                    {
                      v17 = 0;
                    }
                    else
                    {
                      if ((unsigned __int16)v17 != 2)
                      {
                        v182 -= v17;
                        v55 = 4194451;
                        goto LABEL_663;
                      }
                      v17 = 0;
                      --v182;
                      --v11;
                    }
                    v42 = 4194451;
                    goto LABEL_642;
                  }
                }
                else if (v12 == 155 && (~v18 & 0x9B) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194459;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                  }
                  v42 = 4194459;
                  goto LABEL_642;
                }
              }
              else if (v12 <= 186)
              {
                if (v12 == 175)
                {
                  if ((~v18 & 0xAF) != 0 && *(_BYTE *)(a3 + 8) == 1)
                  {
                    if ((__int16)v17 >= 2)
                    {
                      if ((unsigned __int16)v17 != 2)
                      {
                        v182 -= v17;
                        v55 = 4194479;
                        goto LABEL_663;
                      }
                      v17 = 0;
                      --v182;
                      --v11;
                      v42 = 4194479;
                      goto LABEL_642;
                    }
                    v17 = 0;
                    v54 = 135;
                    goto LABEL_641;
                  }
                }
                else if (v12 == 181 && (~v18 & 0xB5) != 0 && *(_BYTE *)(a3 + 8) == 2)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194485;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                  }
                  v42 = 4194485;
                  goto LABEL_642;
                }
              }
              else if (v12 == 187)
              {
                if ((~v18 & 0xBB) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    v42 = 4194491;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194491;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                    v42 = 4194491;
                  }
                  goto LABEL_642;
                }
              }
              else if (v12 == 221)
              {
                if ((~v18 & 0xDD) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194525;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                  }
                  v42 = 4194525;
                  goto LABEL_642;
                }
              }
              else if (v12 == 223 && (~v18 & 0xDF) != 0)
              {
                if ((__int16)v17 < 2)
                {
                  v17 = 0;
                }
                else
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v182 -= v17;
                    v55 = 4194527;
                    goto LABEL_663;
                  }
                  v17 = 0;
                  --v182;
                  --v11;
                }
                v42 = 4194527;
                goto LABEL_642;
              }
              goto LABEL_414;
            }
            if (v12 > 122)
            {
              if (v12 <= 131)
              {
                if (v12 == 123)
                {
                  if ((~v18 & 0x7B) != 0)
                  {
                    if ((__int16)v17 >= 2)
                    {
                      if ((unsigned __int16)v17 != 2)
                      {
                        v182 -= v17;
                        v55 = 4194427;
                        goto LABEL_663;
                      }
                      v17 = 0;
                      --v182;
                      --v11;
                      v42 = 4194427;
                      goto LABEL_642;
                    }
                    v17 = 0;
                    v54 = 83;
                    goto LABEL_641;
                  }
                }
                else if (v12 == 130 && (~v18 & 0x82) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194434;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                  }
                  v42 = 4194434;
                  goto LABEL_642;
                }
              }
              else if (v12 == 132)
              {
                if ((~v18 & 0x84) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194436;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                  }
                  v42 = 4194436;
                  goto LABEL_642;
                }
              }
              else if (v12 == 139)
              {
                if ((~v18 & 0x8B) != 0)
                {
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                  }
                  else
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194443;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                  }
                  v42 = 4194443;
                  goto LABEL_642;
                }
              }
              else if (v12 == 145 && (~v18 & 0x91) != 0)
              {
                if ((__int16)v17 < 2)
                {
                  v17 = 0;
                }
                else
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v182 -= v17;
                    v55 = 4194449;
LABEL_663:
                    LODWORD(v185) = v55;
                    goto LABEL_664;
                  }
                  v17 = 0;
                  --v182;
                  --v11;
                }
                v42 = 4194449;
                goto LABEL_642;
              }
              goto LABEL_414;
            }
            if (v12 > 61)
            {
              if (v12 == 62)
              {
                if ((~v18 & 0x3E) != 0)
                {
                  if ((__int16)v17 >= 2)
                  {
                    if ((unsigned __int16)v17 != 2)
                    {
                      v182 -= v17;
                      v55 = 4194366;
                      goto LABEL_663;
                    }
                    v17 = 0;
                    --v182;
                    --v11;
                    v42 = 4194366;
                    goto LABEL_642;
                  }
                  v17 = 0;
                  v54 = 22;
                  goto LABEL_641;
                }
              }
              else if (v12 == 91 && (~v18 & 0x5B) != 0)
              {
                if ((__int16)v17 < 2)
                {
                  v17 = 0;
                }
                else
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v182 -= v17;
                    v55 = 4194395;
                    goto LABEL_663;
                  }
                  v17 = 0;
                  --v182;
                  --v11;
                }
                v42 = 4194395;
                goto LABEL_642;
              }
LABEL_414:
              LODWORD(v185) = v18;
              goto LABEL_665;
            }
            if (v12 != 40)
            {
              if (v12 == 60 && (~v18 & 0x3C) != 0)
              {
                if ((__int16)v17 >= 2)
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v182 -= v17;
                    v55 = 4194364;
                    goto LABEL_663;
                  }
                  v17 = 0;
                  --v182;
                  --v11;
                  v42 = 4194364;
                  goto LABEL_642;
                }
                v17 = 0;
                v54 = 20;
LABEL_641:
                v42 = v54 | 0x400028;
LABEL_642:
                LODWORD(v185) = v42;
                goto LABEL_665;
              }
              goto LABEL_414;
            }
            if ((~v18 & 0x28) == 0)
              goto LABEL_414;
            if ((__int16)v17 < 2)
            {
              v55 = 4194344;
              goto LABEL_663;
            }
            if ((unsigned __int16)v17 != 2)
            {
              LODWORD(v185) = 4194344;
              v182 -= v17;
LABEL_664:
              v17 = 0;
              goto LABEL_665;
            }
            LODWORD(v185) = 4194344;
            v17 = 0;
            --v182;
            --v11;
LABEL_665:
            v6 = 0;
            v57 = v191;
            *(_BYTE *)(v191 + (__int16)v11++) = v12;
            *(_BYTE *)(v57 + (__int16)v11) = 0;
            HIDWORD(v185) = v17 + 1;
            v58 = &v192[(__int16)v182 + 65];
            *(_BYTE *)v58 = v3[v4];
            ++v182;
LABEL_672:
            *((_WORD *)v58 + 1) = v4;
LABEL_182:
            v39 = strlen(v3);
            if ((__int16)v11 > 63)
              goto LABEL_674;
            if (v39 <= ++v4)
              goto LABEL_674;
            continue;
          case 2uLL:
            if ((v18 & 0x2000) != 0)
              goto LABEL_418;
            if ((__int16)v17 < 2)
            {
              v17 = 0;
LABEL_417:
              v18 = 0x2000;
              goto LABEL_418;
            }
            if ((unsigned __int16)v17 == 2)
            {
              if ((v18 & 0x400000) != 0)
              {
                --v182;
              }
              else if ((v18 & 0x200000) != 0)
              {
                --v183;
              }
              else
              {
                v189 += (int)(v18 << 7) >> 31;
              }
              v17 = 0;
              --v11;
              goto LABEL_417;
            }
            if ((v18 & 0x200000) != 0)
            {
              v183 -= v17;
            }
            else
            {
              if ((v18 & 0x400000) != 0)
                v40 = v17;
              else
                v40 = 0;
              v182 -= v40;
            }
            v18 = 0x2000;
            v17 = 0;
LABEL_418:
            if (v12 > 144)
            {
              switch(v12)
              {
                case 145:
                  if ((~v18 & 0x91) == 0)
                    goto LABEL_602;
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    goto LABEL_520;
                  }
                  if ((unsigned __int16)v17 == 2)
                  {
                    v17 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_520:
                    v18 = 8337;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v17;
                  v18 = 8337;
LABEL_601:
                  v17 = 0;
LABEL_602:
                  ++HIDWORD(v180);
                  goto LABEL_613;
                case 146:
                  if ((~v18 & 0x92) == 0)
                    goto LABEL_602;
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    goto LABEL_522;
                  }
                  if ((unsigned __int16)v17 == 2)
                  {
                    v17 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_522:
                    v18 = 8338;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v17;
                  v18 = 8338;
                  goto LABEL_601;
                case 147:
                  if ((~v18 & 0x93) == 0)
                    goto LABEL_602;
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    goto LABEL_524;
                  }
                  if ((unsigned __int16)v17 == 2)
                  {
                    v17 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_524:
                    v18 = 8339;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v17;
                  v18 = 8339;
                  goto LABEL_601;
                case 148:
                  if ((~v18 & 0x94) == 0)
                    goto LABEL_602;
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    goto LABEL_526;
                  }
                  if ((unsigned __int16)v17 == 2)
                  {
                    v17 = 0;
                    --v11;
                    --HIDWORD(v180);
LABEL_526:
                    v18 = 8340;
                    goto LABEL_602;
                  }
                  HIDWORD(v180) -= v17;
                  v18 = 8340;
                  goto LABEL_601;
                case 149:
                case 150:
                case 151:
                case 152:
                case 153:
                case 154:
                  goto LABEL_613;
                case 155:
                  if ((~v18 & 0x9B) == 0)
                    goto LABEL_612;
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    goto LABEL_528;
                  }
                  if ((unsigned __int16)v17 == 2)
                  {
                    v17 = 0;
                    --v11;
                    LODWORD(v180) = v180 - 1;
LABEL_528:
                    v18 = 8347;
                    goto LABEL_612;
                  }
                  LODWORD(v180) = v180 - v17;
                  v18 = 8347;
                  break;
                default:
                  if (v12 != 171)
                  {
                    if (v12 != 187)
                      goto LABEL_613;
                    if ((~v18 & 0xBB) == 0)
                      goto LABEL_612;
                    if ((__int16)v17 < 2)
                    {
                      v17 = 0;
                      goto LABEL_536;
                    }
                    if ((unsigned __int16)v17 == 2)
                    {
                      v17 = 0;
                      --v11;
                      LODWORD(v180) = v180 - 1;
LABEL_536:
                      v18 = 8379;
                      goto LABEL_612;
                    }
                    LODWORD(v180) = v180 - v17;
                    v18 = 8379;
                    break;
                  }
                  if ((~v18 & 0xAB) == 0)
                    goto LABEL_612;
                  if ((__int16)v17 < 2)
                  {
                    v17 = 0;
                    goto LABEL_538;
                  }
                  if ((unsigned __int16)v17 == 2)
                  {
                    v17 = 0;
                    --v11;
                    LODWORD(v180) = v180 - 1;
LABEL_538:
                    v18 = 8363;
                    goto LABEL_612;
                  }
                  LODWORD(v180) = v180 - v17;
                  v18 = 8363;
                  break;
              }
LABEL_611:
              v17 = 0;
              goto LABEL_612;
            }
            if (v12 == 60)
            {
              if ((~v18 & 0x3C) != 0)
              {
                if ((__int16)v17 < 2)
                {
                  v17 = 0;
                }
                else
                {
                  if ((unsigned __int16)v17 != 2)
                  {
                    v178 -= v17;
                    v18 = 8252;
                    goto LABEL_607;
                  }
                  v17 = 0;
                  --v11;
                  --v178;
                }
                v18 = 8252;
              }
            }
            else
            {
              if (v12 != 62)
              {
                if (v12 == 139)
                {
                  if ((~v18 & 0x8B) != 0)
                  {
                    if ((__int16)v17 < 2)
                    {
                      v17 = 0;
                    }
                    else
                    {
                      if ((unsigned __int16)v17 != 2)
                      {
                        LODWORD(v180) = v180 - v17;
                        v18 = 8331;
                        goto LABEL_611;
                      }
                      v17 = 0;
                      --v11;
                      LODWORD(v180) = v180 - 1;
                    }
                    v18 = 8331;
                  }
LABEL_612:
                  LODWORD(v180) = v180 + 1;
                }
LABEL_613:
                v6 = 0;
                LODWORD(v185) = v18;
                HIDWORD(v185) = v17 + 1;
                v27 = v11 + 1;
                v56 = v191;
                *(_BYTE *)(v191 + (__int16)v11) = v12;
                *(_BYTE *)(v56 + (__int16)(v11 + 1)) = 0;
                goto LABEL_181;
              }
              if ((~v18 & 0x3E) != 0)
              {
                if ((__int16)v17 < 2)
                {
                  v17 = 0;
                  goto LABEL_534;
                }
                if ((unsigned __int16)v17 == 2)
                {
                  v17 = 0;
                  --v11;
                  --v178;
LABEL_534:
                  v18 = 8254;
                  goto LABEL_608;
                }
                v178 -= v17;
                v18 = 8254;
LABEL_607:
                v17 = 0;
              }
            }
LABEL_608:
            ++v178;
            goto LABEL_613;
          case 7uLL:
            if ((v18 & 0x1000000) != 0)
              goto LABEL_478;
            if ((__int16)v17 < 2)
              goto LABEL_202;
            if ((unsigned __int16)v17 == 2)
            {
              if ((v18 & 0x400000) != 0)
              {
                --v182;
              }
              else if ((v18 & 0x200000) != 0)
              {
                --v183;
              }
              else if ((v18 & 0x2000) != 0)
              {
                if ((~v18 & 0x3C) != 0)
                {
                  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_1DE2ECBF0), (int32x4_t)xmmword_1DE2ECBF0))) & 1) != 0)--HIDWORD(v180);
                  else
                    LODWORD(v180) = v180 - 1;
                }
                else
                {
                  --v178;
                }
              }
              v17 = 0;
              --v11;
              goto LABEL_469;
            }
            if ((v18 & 0x400000) != 0)
            {
              v182 -= v17;
            }
            else if ((v18 & 0x200000) != 0)
            {
              v183 -= v17;
            }
            else
            {
              if ((v18 & 0x2000) == 0)
              {
LABEL_202:
                v17 = 0;
LABEL_469:
                v18 = 0x1000000;
                goto LABEL_478;
              }
              if ((~v18 & 0x3C) != 0)
              {
                if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqq_s32((int32x4_t)vandq_s8((int8x16_t)vdupq_n_s32(v18), (int8x16_t)xmmword_1DE2ECBF0), (int32x4_t)xmmword_1DE2ECBF0))) & 1) != 0)HIDWORD(v180) -= v17;
                else
                  LODWORD(v180) = v180 - v17;
              }
              else
              {
                v178 -= v17;
              }
            }
            v18 = 0x1000000;
            v17 = 0;
LABEL_478:
            if (v12 <= 46)
            {
              if (v12 == 33)
              {
                if ((~v18 & 0x21) != 0)
                {
                  LODWORD(v185) = 16777249;
                  v49 = (unsigned __int16)v17 == 2;
                  v11 -= v49;
                  v44 = v189 - v49;
LABEL_503:
                  v17 = 0;
                  goto LABEL_504;
                }
              }
              else if (v12 == 44)
              {
                if ((~v18 & 0x2C) != 0)
                {
                  v50 = (unsigned __int16)v17 == 2;
                  v11 -= v50;
                  v44 = v189 - v50;
                  v45 = 16777260;
                  goto LABEL_502;
                }
              }
              else if (v12 == 46 && (~v18 & 0x2E) != 0)
              {
                v46 = (unsigned __int16)v17 == 2;
                v11 -= v46;
                v44 = v189 - v46;
                v45 = 16777262;
                goto LABEL_502;
              }
            }
            else if (v12 > 58)
            {
              if (v12 == 59)
              {
                if ((~v18 & 0x3B) != 0)
                {
                  v51 = (unsigned __int16)v17 == 2;
                  v11 -= v51;
                  v44 = v189 - v51;
                  v45 = 16777275;
                  goto LABEL_502;
                }
              }
              else if (v12 == 63 && (~v18 & 0x3F) != 0)
              {
                v47 = (unsigned __int16)v17 == 2;
                v11 -= v47;
                v44 = v189 - v47;
                v45 = 16777279;
                goto LABEL_502;
              }
            }
            else if (v12 == 47)
            {
              if ((~v18 & 0x2F) != 0)
              {
                v48 = (unsigned __int16)v17 == 2;
                v11 -= v48;
                v44 = v189 - v48;
                v45 = 16777263;
                goto LABEL_502;
              }
            }
            else if (v12 == 58 && (~v18 & 0x3A) != 0)
            {
              v43 = (unsigned __int16)v17 == 2;
              v11 -= v43;
              v44 = v189 - v43;
              v45 = 16777274;
LABEL_502:
              LODWORD(v185) = v45;
              goto LABEL_503;
            }
            LODWORD(v185) = v18;
            v44 = v189;
LABEL_504:
            v6 = 0;
            v52 = v191;
            *(_BYTE *)(v191 + (__int16)v11) = v12;
            *(_BYTE *)(v52 + (__int16)(v11 + 1)) = 0;
            HIDWORD(v185) = v17 + 1;
            a1[(__int16)v44] = v3[v4];
            a1[(__int16)(v44 + 1)] = 0;
            ++v11;
            v189 = v44 + 1;
            goto LABEL_182;
          default:
            if ((v18 & 0x400000) != 0)
            {
              if ((__int16)v17 < 2)
                goto LABEL_209;
              if ((unsigned __int16)v17 == 2)
              {
                --v182;
LABEL_198:
                --v11;
                goto LABEL_209;
              }
              v182 -= v17;
            }
            else if ((v18 & 0x200000) != 0)
            {
              if ((__int16)v17 < 2)
                goto LABEL_209;
              if ((unsigned __int16)v17 == 2)
              {
                --v183;
                goto LABEL_198;
              }
              v183 -= v17;
            }
            else
            {
              if ((v18 & 0x1000000) != 0)
              {
                if ((unsigned __int16)v17 != 2)
                  goto LABEL_209;
                --v189;
                goto LABEL_198;
              }
              if ((v18 & 0x2000) != 0 && (__int16)v17 >= 2)
              {
                v36 = v18 & 0x3C;
                if ((unsigned __int16)v17 == 2)
                {
                  if (v36 == 60)
                  {
                    --v178;
                  }
                  else if (v18 - 8337 > 3)
                  {
                    LODWORD(v180) = v180 - 1;
                  }
                  else
                  {
                    --HIDWORD(v180);
                  }
                  goto LABEL_198;
                }
                if (v36 == 60)
                {
                  v178 -= v17;
                }
                else if (v18 - 8337 > 3)
                {
                  LODWORD(v180) = v180 - v17;
                }
                else
                {
                  HIDWORD(v180) -= v17;
                }
              }
            }
LABEL_209:
            v185 = 0;
            v6 = 0;
            a1[(__int16)v189] = v12;
            a1[(__int16)(v189 + 1)] = 0;
            v41 = v191;
            *(_BYTE *)(v191 + (__int16)v11++) = v3[v4];
            *(_BYTE *)(v41 + (__int16)v11) = 0;
            ++v189;
            goto LABEL_182;
        }
      }
      break;
    }
    if (v7 != 34)
    {
      if ((unsigned __int16)v6 == 2)
      {
        switch(v7)
        {
          case 187:
            --v8;
            break;
          case 96:
            --v5;
            break;
          case 39:
            --v10;
            ++v187;
            a1[(__int16)v189] = 39;
            a1[(__int16)(v189 + 1)] = 0;
            v13 = v3[v4];
            ++v189;
LABEL_83:
            v6 = 0;
            --v11;
            goto LABEL_108;
        }
        v13 = 34;
        goto LABEL_83;
      }
      if ((__int16)v6 >= 3)
      {
        switch(v7)
        {
          case 187:
            v8 -= v6;
            goto LABEL_107;
          case 96:
            v5 -= v6;
            goto LABEL_107;
          case 39:
            v10 -= v6;
LABEL_107:
            v13 = 34;
            v6 = 0;
            goto LABEL_108;
        }
      }
      v6 = 0;
    }
    v13 = 34;
LABEL_108:
    ++v6;
    v27 = v11 + 1;
    v28 = v191;
    *(_BYTE *)(v191 + (__int16)v11) = v13;
    ++v9;
    *(_BYTE *)(v28 + (__int16)(v11 + 1)) = 0;
    v7 = 34;
    goto LABEL_181;
  }
  v185 = 0;
  LOWORD(v11) = 0;
  LOWORD(v189) = 0;
  v180 = 0;
  v182 = 0;
  v187 = 0;
  LOWORD(v178) = 0;
  v183 = 0;
  v10 = 0;
  LOWORD(v9) = 0;
  LOWORD(v8) = 0;
  v5 = 0;
LABEL_674:
  v60 = (const char *)(a3 + 1417);
  if (*(_BYTE *)(a3 + 8) == 11)
    v61 = v5;
  else
    v61 = 0;
  v62 = v61 + v10;
  if ((_WORD)v187 && (unsigned __int16)(v61 + v10) == 1)
  {
    v62 = 1 - v187;
  }
  else
  {
    v63 = strlen(a1);
    if (v63 << 16 >= 1)
    {
      v64 = 0;
      v65 = 0;
      v66 = (__int16)v63;
      do
      {
        v67 = (char *)&a1[v65];
        if (*v67 == 39)
        {
          strcpy(v67, &a1[v64 + 1]);
          LOWORD(v189) = v189 - 1;
        }
        v64 = ++v65;
      }
      while (v66 > v65);
    }
  }
  v188 = (char *)(a3 + 1482);
  if (!(_WORD)v62 && !(_WORD)v9 && !(_WORD)v8 && !(_WORD)v180 && !WORD2(v180) && !(_WORD)v178 && !(_WORD)v5)
  {
    v68 = 0;
    LOWORD(v69) = 0;
    LOWORD(v70) = 0;
    LOWORD(v71) = 0;
    v181 = 0;
    LOWORD(v72) = 0;
    v73 = v189;
    goto LABEL_853;
  }
  v74 = (__int16)v9;
  v70 = v62 - ((v62 + ((unsigned __int16)(v62 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v70)
  {
    v75 = strlen(v60);
    v76 = strlen(v188);
    v77 = 0;
    while (1)
    {
      if (v76 <= v77 || (v78 = v77, ++v77, v188[v78] != 39))
      {
        if ((v75 & 0x8000) != 0)
          goto LABEL_705;
        v79 = v60[v75 - 1];
        if (v79 != 39 && (*(_BYTE *)(a3 + 8) != 11 || v79 != 96))
          goto LABEL_705;
        --v75;
      }
      LOWORD(v70) = v70 - 1;
      if (!(_WORD)v70)
        goto LABEL_705;
    }
  }
  LOWORD(v70) = 0;
LABEL_705:
  if (v74 >= 0)
    v71 = v74 & 1;
  else
    v71 = -(v74 & 1);
  if (v71)
  {
    if ((_WORD)v71)
    {
      v80 = strlen(v188);
      v81 = strlen(v60);
      v82 = 0;
      while (1)
      {
        if (v80 <= v82 || (v83 = v82, ++v82, v188[v83] != 34))
        {
          if ((v81 & 0x8000) != 0 || v60[v81 - 1] != 34)
            goto LABEL_719;
          --v81;
        }
        LOWORD(v71) = v71 - 1;
        if (!(_WORD)v71)
          goto LABEL_719;
      }
    }
    LOWORD(v71) = 0;
  }
LABEL_719:
  if ((v8 & 0x8000u) == 0)
    v84 = v8 & 1;
  else
    v84 = -(v8 & 1);
  if (v84 && *(_BYTE *)(a3 + 8) == 7)
  {
    if ((_WORD)v84)
    {
      v85 = v84;
      v86 = strlen(v188);
      v87 = strlen(v60);
      LOWORD(v84) = v85;
      v88 = 0;
      while (1)
      {
        if (v86 <= v88 || (v89 = v88, ++v88, v188[v89] != 187))
        {
          if ((v87 & 0x8000) != 0 || v60[v87 - 1] != 187)
            goto LABEL_734;
          --v87;
        }
        LOWORD(v84) = v84 - 1;
        if (!(_WORD)v84)
          goto LABEL_734;
      }
    }
    LOWORD(v84) = 0;
  }
LABEL_734:
  if ((v180 & 0x800000000000) == 0)
    v90 = SBYTE4(v180) & 1;
  else
    v90 = -(SBYTE4(v180) & 1);
  v181 = v84;
  if (!v90)
    goto LABEL_799;
  v91 = *(unsigned __int8 *)(a3 + 8);
  if (v91 == 13)
  {
    if ((_WORD)v90)
    {
      v92 = strlen(v188);
      v93 = strlen(v60);
      v94 = 0;
      while (1)
      {
        if (v92 > v94 && ((v95 = v188[v94], v95 == 148) || v95 == 146))
        {
          ++v94;
        }
        else
        {
          if ((v93 & 0x8000) != 0)
            goto LABEL_750;
          v96 = v60[v93 - 1];
          if (v96 != 148 && v96 != 146)
            goto LABEL_750;
          --v93;
        }
        if (!(_WORD)--v90)
          goto LABEL_750;
      }
    }
    goto LABEL_799;
  }
LABEL_750:
  v97 = v90 - ((v90 + ((unsigned __int16)(v90 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v90 == (((_WORD)v90 + ((unsigned __int16)(v90 & 0x8000) >> 15)) & 0xFFFE))
    goto LABEL_799;
  if (v91 == 14)
  {
    v98 = strlen(v60);
    v99 = strlen(v188);
    v100 = 0;
    do
    {
      if (v99 <= v100 || (v188[v100] + 110) > 2u)
      {
        if ((v98 & 0x8000) != 0 || (v60[v98 - 1] + 110) > 2u)
          break;
        --v98;
      }
      else
      {
        ++v100;
      }
    }
    while ((_WORD)--v97);
  }
  v101 = v97 - ((v97 + ((unsigned __int16)(v97 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v97 == (((_WORD)v97 + ((unsigned __int16)(v97 & 0x8000) >> 15)) & 0xFFFE))
    goto LABEL_799;
  if (v91 == 7)
  {
    v102 = strlen(v60);
    v103 = strlen(v188);
    v104 = 0;
    do
    {
      if (v103 > v104 && ((v105 = v188[v104], v105 == 148) || v105 == 146))
      {
        ++v104;
      }
      else
      {
        if ((v102 & 0x8000) != 0)
          break;
        v106 = v60[v102 - 1];
        if (v106 != 148 && v106 != 146)
          break;
        --v102;
      }
    }
    while ((_WORD)--v101);
  }
  v107 = v101 - ((v101 + ((unsigned __int16)(v101 & 0x8000) >> 15)) & 0xFFFFFFFE);
  if ((_WORD)v101 == (((_WORD)v101 + ((unsigned __int16)(v101 & 0x8000) >> 15)) & 0xFFFE))
    goto LABEL_799;
  if (v91 == 11)
  {
    v108 = strlen(v60);
    v109 = strlen(v188);
    v110 = 0;
    v111 = v108;
    do
    {
      if (v109 > v110 && ((v112 = v188[v110], v112 == 148) || v112 == 146))
      {
        ++v110;
      }
      else
      {
        if ((v111 & 0x8000) != 0)
          break;
        v113 = v60[(unsigned __int16)v111 - 1];
        if ((v113 - 145) >= 4 && v113 != 132 && v113 != 130)
          break;
        --v111;
      }
    }
    while ((_WORD)--v107);
  }
  v114 = (v107 + ((unsigned __int16)(v107 & 0x8000) >> 15)) & 0xFFFFFFFE;
  v68 = v107 - v114;
  if ((_WORD)v107 == (((_WORD)v107 + ((unsigned __int16)(v107 & 0x8000) >> 15)) & 0xFFFE))
  {
LABEL_799:
    v68 = 0;
    goto LABEL_800;
  }
  if (v91 == 10)
  {
    v115 = v107 - v114;
    v116 = strlen(v60);
    v117 = strlen(v188);
    v68 = v115;
    v118 = 0;
    do
    {
      if (v117 <= v118 || (v188[v118] + 110) > 2u)
      {
        if ((v116 & 0x8000) != 0)
          break;
        if (v60[v116 - 1] - 132 > 0x10 || ((1 << (v60[v116 - 1] + 124)) & 0x14001) == 0)
          break;
        --v116;
      }
      else
      {
        ++v118;
      }
      --v68;
    }
    while ((_WORD)v68);
  }
LABEL_800:
  if ((v178 & 0x8000u) == 0)
    v69 = v178 & 1;
  else
    v69 = -(v178 & 1);
  v120 = (const char *)(a3 + 1417);
  if (v69)
  {
    v121 = *(unsigned __int8 *)(a3 + 8);
    if (v121 == 11)
    {
      if ((_WORD)v69)
      {
        v122 = v68;
        v123 = strlen(v188);
        v124 = strlen(v60);
        v68 = v122;
        v125 = 0;
        while (1)
        {
          if (v123 > v125 && (v188[v125] | 2) == 0x3E)
          {
            ++v125;
          }
          else
          {
            if ((v124 & 0x8000) != 0 || (v60[v124 - 1] | 2) != 0x3E)
              goto LABEL_814;
            --v124;
          }
          if (!(_WORD)--v69)
            goto LABEL_814;
        }
      }
    }
    else
    {
LABEL_814:
      v69 -= (v69 + ((unsigned __int16)(v69 & 0x8000) >> 15)) & 0xFFFFFFFE;
      if ((_WORD)v69)
      {
        v73 = v189;
        if (v121 == 14)
        {
          v126 = v68;
          v127 = strlen(v60);
          v128 = strlen(v188);
          v73 = v189;
          v68 = v126;
          v129 = 0;
          while (1)
          {
            if (v128 > v129 && v188[v129] == 62)
            {
              ++v129;
            }
            else
            {
              if ((v127 & 0x8000) != 0 || v60[v127 - 1] != 62)
                goto LABEL_827;
              --v127;
            }
            LOWORD(v69) = v69 - 1;
            if (!(_WORD)v69)
              goto LABEL_827;
          }
        }
        goto LABEL_827;
      }
    }
    LOWORD(v69) = 0;
  }
  v73 = v189;
LABEL_827:
  if ((v180 & 0x8000u) == 0)
    v130 = v180 & 1;
  else
    v130 = -(v180 & 1);
  if (v130)
  {
    v131 = *(unsigned __int8 *)(a3 + 8);
    v132 = v182;
    if (v131 == 11)
    {
      if ((_WORD)v130)
      {
        v133 = v68;
        v134 = v69;
        v135 = v73;
        v136 = strlen(v188);
        v137 = strlen(v120);
        v73 = v135;
        LOWORD(v69) = v134;
        v68 = v133;
        v138 = 0;
        v132 = v182;
        while (1)
        {
          if (v136 <= v138
            || (((v188[v138] + 117) >> 4) | (16 * (v188[v138] + 117))) > 3u)
          {
            if ((v137 & 0x8000) != 0)
              goto LABEL_841;
            v139 = v120[v137 - 1] + 117;
            if (((v139 >> 4) | (16 * v139)) > 3u)
              goto LABEL_841;
            --v137;
          }
          else
          {
            ++v138;
          }
          if (!(_WORD)--v130)
            goto LABEL_841;
        }
      }
    }
    else
    {
LABEL_841:
      v72 = v130 - ((v130 + ((unsigned __int16)(v130 & 0x8000) >> 15)) & 0xFFFFFFFE);
      if ((_WORD)v130 != (((_WORD)v130 + ((unsigned __int16)(v130 & 0x8000) >> 15)) & 0xFFFE))
      {
        v60 = (const char *)(a3 + 1417);
        if (v131 == 14)
        {
          v140 = v68;
          v141 = v73;
          v142 = strlen((const char *)(a3 + 1417));
          v143 = strlen(v188);
          v73 = v141;
          v68 = v140;
          v144 = 0;
          v146 = v185;
          v145 = HIDWORD(v185);
          while (1)
          {
            if (v143 > v144 && (v188[v144] | 0x20) == 0xBB)
            {
              ++v144;
            }
            else
            {
              if ((v142 & 0x8000) != 0 || (v60[v142 - 1] | 0x20) != 0xBB)
              {
LABEL_851:
                v132 = v182;
                goto LABEL_855;
              }
              --v142;
            }
            LOWORD(v72) = v72 - 1;
            if (!(_WORD)v72)
              goto LABEL_851;
          }
        }
        goto LABEL_854;
      }
    }
    LOWORD(v72) = 0;
    v146 = v185;
    v145 = HIDWORD(v185);
    v60 = (const char *)(a3 + 1417);
    goto LABEL_855;
  }
  LOWORD(v72) = 0;
LABEL_853:
  v132 = v182;
LABEL_854:
  v146 = v185;
  v145 = HIDWORD(v185);
LABEL_855:
  if (!((unsigned __int16)v132 | (unsigned __int16)v183))
  {
LABEL_1115:
    LOWORD(v155) = 0;
    LOWORD(v154) = 0;
    goto LABEL_1116;
  }
  if ((v146 & 0x400000) != 0 && (__int16)v145 >= 2)
  {
    v147 = v73;
    v148 = v69;
    v69 = v68;
    if ((unsigned __int16)v145 == 2)
    {
      LOWORD(v11) = v11 - 1;
      v149 = v132 - 1;
    }
    else
    {
      v149 = v132 - v145;
    }
  }
  else
  {
    if ((v146 & 0x200000) != 0 && (__int16)v145 >= 2)
    {
      v148 = v69;
      v147 = v73;
      v69 = v68;
      if ((unsigned __int16)v145 == 2)
      {
        --v183;
        LOWORD(v11) = v11 - 1;
      }
      else
      {
        v183 -= v145;
      }
    }
    else
    {
      v147 = v73;
      v148 = v69;
      v69 = v68;
    }
    v149 = v132;
  }
  v150 = strlen(v60);
  v151 = strlen(v188);
  v152 = 0;
  v153 = v151;
  v154 = v183;
  v155 = v149;
  v68 = v69;
  LOWORD(v69) = v148;
  v73 = v147;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        while ((_WORD)v155 && (_WORD)v154)
        {
          v156 = (__int16)v155 - 1;
          v157 = LOBYTE(v192[v156 + 65]);
          if (v157 > 0x92)
          {
            if (LOBYTE(v192[v156 + 65]) <= 0xAEu)
            {
              if (LOBYTE(v192[v156 + 65]) > 0x9Bu)
              {
                if (v157 == 156)
                {
                  if (*(_BYTE *)(a3 + 8) != 2)
                    goto LABEL_1116;
                  v158 = (__int16)v154 - 1;
                  v169 = LOBYTE(v192[v158]);
                  goto LABEL_1007;
                }
                if (v157 != 171)
                  goto LABEL_1116;
                v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 187)
                  goto LABEL_1116;
              }
              else if (v157 == 147)
              {
                v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 148)
                  goto LABEL_1116;
              }
              else
              {
                if (v157 != 155)
                  goto LABEL_1116;
                v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 139)
                  goto LABEL_1116;
              }
            }
            else if (LOBYTE(v192[v156 + 65]) <= 0xBAu)
            {
              if (v157 == 175)
              {
                if (*(_BYTE *)(a3 + 8) != 1)
                  goto LABEL_1116;
LABEL_1001:
                v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 171)
                  goto LABEL_1116;
                goto LABEL_1008;
              }
              if (v157 != 181)
                goto LABEL_1116;
              if (*(_BYTE *)(a3 + 8) != 2)
                goto LABEL_1116;
              v158 = (__int16)v154 - 1;
              if (LOBYTE(v192[v158]) != 189)
                goto LABEL_1116;
            }
            else
            {
              switch(v157)
              {
                case 0xBBu:
                  goto LABEL_1001;
                case 0xDDu:
                  if (*(_BYTE *)(a3 + 8) != 15)
                    goto LABEL_1116;
                  v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 222)
                    goto LABEL_1116;
                  break;
                case 0xDFu:
                  if (*(_BYTE *)(a3 + 8) != 15)
                    goto LABEL_1116;
                  v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 224)
                    goto LABEL_1116;
                  break;
                default:
                  goto LABEL_1116;
              }
            }
          }
          else if (LOBYTE(v192[v156 + 65]) <= 0x7Au)
          {
            if (LOBYTE(v192[v156 + 65]) > 0x3Du)
            {
              if (v157 == 62)
              {
                v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 60)
                  goto LABEL_1116;
              }
              else
              {
                if (v157 != 91)
                  goto LABEL_1116;
                v158 = (__int16)v154 - 1;
                if (LOBYTE(v192[v158]) != 93)
                  goto LABEL_1116;
              }
            }
            else if (v157 == 40)
            {
              v158 = (__int16)v154 - 1;
              if (LOBYTE(v192[v158]) != 41)
                goto LABEL_1116;
            }
            else
            {
              if (v157 != 60)
                goto LABEL_1116;
              v158 = (__int16)v154 - 1;
              if (LOBYTE(v192[v158]) != 62)
                goto LABEL_1116;
            }
          }
          else
          {
            if (LOBYTE(v192[v156 + 65]) > 0x83u)
            {
              if (v157 != 132)
              {
                if (v157 == 139)
                {
                  if (*(_BYTE *)(a3 + 8) != 15)
                    goto LABEL_1116;
                  v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 140)
                    goto LABEL_1116;
                }
                else
                {
                  if (v157 != 145)
                    goto LABEL_1116;
                  v158 = (__int16)v154 - 1;
                  if (LOBYTE(v192[v158]) != 146)
                    goto LABEL_1116;
                }
                goto LABEL_1008;
              }
              v158 = (__int16)v154 - 1;
              v169 = LOBYTE(v192[v158]);
              if (v169 == 163)
                goto LABEL_986;
LABEL_1007:
              if (v169 != 147)
                goto LABEL_1116;
              goto LABEL_1008;
            }
            if (v157 != 123)
            {
              if (v157 != 130)
                goto LABEL_1116;
              v158 = (__int16)v154 - 1;
              v168 = LOBYTE(v192[v158]);
              if (v168 != 161)
              {
                if (v168 != 145)
                  goto LABEL_1116;
                goto LABEL_1008;
              }
LABEL_986:
              if (*(_BYTE *)(a3 + 8) != 1)
                goto LABEL_1116;
              goto LABEL_1008;
            }
            v158 = (__int16)v154 - 1;
            if (LOBYTE(v192[v158]) != 125)
              goto LABEL_1116;
          }
LABEL_1008:
          if (SHIWORD(v192[v158]) - 1 <= SHIWORD(v192[v156 + 65]))
            goto LABEL_1116;
          --v155;
          --v154;
        }
        if (!(_WORD)v155)
          break;
        if (v153 <= (__int16)v152)
        {
          v163 = *(unsigned __int8 *)(a3 + 8);
          if (v163 != 10)
          {
            if (v163 != 11)
              goto LABEL_1116;
            v164 = LOBYTE(v192[(__int16)v155 + 64]);
            if ((v164 - 130) <= 0xF && ((1 << (v164 + 126)) & 0x8005) != 0)
            {
LABEL_912:
              if (!(_WORD)v68)
                goto LABEL_1118;
              goto LABEL_1012;
            }
            if (v164 != 147)
              goto LABEL_1116;
            goto LABEL_1011;
          }
          if (LOBYTE(v192[(__int16)v155 + 64]) != 132 || (unsigned __int16)v68 == 0)
            goto LABEL_1116;
LABEL_1012:
          --v155;
          --v68;
        }
        else
        {
          v159 = LOBYTE(v192[(__int16)v155 + 64]);
          if (v159 <= 0x92)
          {
            if (LOBYTE(v192[(__int16)v155 + 64]) <= 0x7Au)
            {
              if (LOBYTE(v192[(__int16)v155 + 64]) > 0x3Du)
              {
                if (v159 == 62)
                {
                  if (v188[(__int16)v152] != 60)
                    goto LABEL_1116;
                }
                else if (v159 != 91 || v188[(__int16)v152] != 93)
                {
                  goto LABEL_1116;
                }
              }
              else if (v159 == 40)
              {
                if (v188[(__int16)v152] != 41)
                  goto LABEL_1116;
              }
              else if (v159 != 60 || v188[(__int16)v152] != 62)
              {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            if (LOBYTE(v192[(__int16)v155 + 64]) <= 0x83u)
            {
              if (v159 == 123)
              {
                if (v188[(__int16)v152] != 125)
                  goto LABEL_1116;
                goto LABEL_1112;
              }
              if (v159 != 130)
                goto LABEL_1116;
              v171 = v188[(__int16)v152];
              if (v171 == 145)
                goto LABEL_1112;
              v172 = *(unsigned __int8 *)(a3 + 8);
              if (v172 == 1)
              {
                if (v171 != 161)
                  goto LABEL_1116;
                goto LABEL_1112;
              }
              if (v172 != 11)
                goto LABEL_1116;
LABEL_1053:
              if (v171 != 148 && v171 != 146)
                goto LABEL_912;
              goto LABEL_1112;
            }
            if (v159 == 132)
            {
              v171 = v188[(__int16)v152];
              if (v171 == 147)
                goto LABEL_1112;
              v173 = *(unsigned __int8 *)(a3 + 8);
              if ((v173 & 0xFE) != 0xA)
              {
                if (v171 != 163 || v173 != 1)
                  goto LABEL_1116;
                goto LABEL_1112;
              }
              goto LABEL_1053;
            }
            if (v159 == 139)
            {
              if (*(_BYTE *)(a3 + 8) != 15 || v188[(__int16)v152] != 140)
                goto LABEL_1116;
              goto LABEL_1112;
            }
            if (v159 != 145)
              goto LABEL_1116;
            v160 = v188[(__int16)v152];
            if (v160 == 146)
              goto LABEL_1112;
            v161 = *(unsigned __int8 *)(a3 + 8);
            if (v160 != 148)
              goto LABEL_1067;
            goto LABEL_1066;
          }
          if (LOBYTE(v192[(__int16)v155 + 64]) <= 0xAEu)
          {
            if (LOBYTE(v192[(__int16)v155 + 64]) > 0x9Bu)
            {
              if (v159 == 156)
              {
                if (*(_BYTE *)(a3 + 8) != 2 || v188[(__int16)v152] != 147)
                  goto LABEL_1116;
              }
              else if (v159 != 171 || v188[(__int16)v152] != 187)
              {
                goto LABEL_1116;
              }
              goto LABEL_1112;
            }
            if (v159 != 147)
            {
              if (v159 != 155 || v188[(__int16)v152] != 139)
                goto LABEL_1116;
              goto LABEL_1112;
            }
            v174 = v188[(__int16)v152];
            if (v174 == 148)
              goto LABEL_1112;
            v161 = *(unsigned __int8 *)(a3 + 8);
            if (v174 != 146)
              goto LABEL_1067;
LABEL_1066:
            if (v161 != 11)
            {
LABEL_1067:
              if (v161 != 11)
                goto LABEL_1116;
LABEL_1011:
              if (!(_WORD)v68)
                goto LABEL_1116;
              goto LABEL_1012;
            }
            goto LABEL_1112;
          }
          if (LOBYTE(v192[(__int16)v155 + 64]) <= 0xBAu)
          {
            if (v159 == 175)
            {
              if (*(_BYTE *)(a3 + 8) != 1)
                goto LABEL_1116;
LABEL_1072:
              if (v188[(__int16)v152] != 171)
                goto LABEL_1116;
              goto LABEL_1112;
            }
            if (v159 != 181 || *(_BYTE *)(a3 + 8) != 2 || v188[(__int16)v152] != 189)
              goto LABEL_1116;
          }
          else
          {
            if (v159 == 187)
              goto LABEL_1072;
            if (v159 == 221)
            {
              if (*(_BYTE *)(a3 + 8) != 15 || v188[(__int16)v152] != 222)
                goto LABEL_1116;
            }
            else if (v159 != 223 || *(_BYTE *)(a3 + 8) != 15 || v188[(__int16)v152] != 224)
            {
              goto LABEL_1116;
            }
          }
LABEL_1112:
          --v155;
          ++v152;
        }
      }
      if (!(_WORD)v154)
        goto LABEL_1115;
      if (v150)
        break;
      if (*(_BYTE *)(a3 + 8) != 10)
        goto LABEL_1117;
      if (LOBYTE(v192[(__int16)v154 - 1]) != 147 || (unsigned __int16)v68 == 0)
        goto LABEL_1117;
      v150 = 0;
LABEL_944:
      v155 = 0;
      --v154;
      --v68;
    }
    LOWORD(v155) = 0;
    v162 = LOBYTE(v192[(__int16)v154 - 1]);
    if (v162 <= 0xA0)
      break;
    if (LOBYTE(v192[(__int16)v154 - 1]) <= 0xBAu)
    {
      switch(v162)
      {
        case 0xA1u:
          if (*(_BYTE *)(a3 + 8) != 1)
            goto LABEL_1117;
LABEL_1082:
          if (v60[v150 - 1] != 130)
          {
LABEL_1117:
            LOWORD(v155) = 0;
            goto LABEL_1116;
          }
          break;
        case 0xA3u:
          if (*(_BYTE *)(a3 + 8) != 1 || v60[v150 - 1] != 132)
            goto LABEL_1117;
          break;
        case 0xABu:
          v170 = v60[v150 - 1];
          if (v170 == 175)
          {
            if (*(_BYTE *)(a3 + 8) != 1)
              goto LABEL_1117;
          }
          else if (v170 != 187)
          {
            goto LABEL_1117;
          }
          break;
        default:
          goto LABEL_1116;
      }
    }
    else if (LOBYTE(v192[(__int16)v154 - 1]) > 0xDDu)
    {
      if (v162 == 222)
      {
        if (*(_BYTE *)(a3 + 8) != 15 || v60[v150 - 1] != 221)
          goto LABEL_1117;
      }
      else
      {
        if (v162 != 224)
          goto LABEL_1116;
        if (*(_BYTE *)(a3 + 8) != 15 || v60[v150 - 1] != 223)
          goto LABEL_1117;
      }
    }
    else if (v162 == 187)
    {
      if (v60[v150 - 1] != 171)
        goto LABEL_1117;
    }
    else
    {
      if (v162 != 189)
        goto LABEL_1116;
      if (*(_BYTE *)(a3 + 8) != 2 || v60[v150 - 1] != 181)
        goto LABEL_1117;
    }
LABEL_1114:
    v155 = 0;
    --v154;
    --v150;
  }
  if (LOBYTE(v192[(__int16)v154 - 1]) <= 0x5Cu)
  {
    switch(v162)
    {
      case ')':
        if (v60[v150 - 1] != 40)
          goto LABEL_1117;
        break;
      case '<':
        if (v60[v150 - 1] != 62)
          goto LABEL_1117;
        break;
      case '>':
        if (v60[v150 - 1] != 60)
          goto LABEL_1117;
        break;
      default:
        goto LABEL_1116;
    }
    goto LABEL_1114;
  }
  switch(LOBYTE(v192[(__int16)v154 - 1]))
  {
    case 0x8B:
      if (v60[v150 - 1] != 155)
        goto LABEL_1117;
      goto LABEL_1114;
    case 0x8C:
      if (*(_BYTE *)(a3 + 8) != 15 || v60[v150 - 1] != 139)
        goto LABEL_1117;
      goto LABEL_1114;
    case 0x8D:
    case 0x8E:
    case 0x8F:
    case 0x90:
      goto LABEL_1116;
    case 0x91:
      goto LABEL_1082;
    case 0x92:
      if (v60[v150 - 1] != 145)
        goto LABEL_1117;
      goto LABEL_1114;
    case 0x93:
      v175 = v60[v150 - 1];
      if (v175 == 132)
        goto LABEL_1114;
      v176 = *(unsigned __int8 *)(a3 + 8);
      if (v176 == 2)
      {
        if (v175 != 156)
          goto LABEL_1117;
        goto LABEL_1114;
      }
      if (v176 != 10)
        goto LABEL_1117;
      if (v175 == 148 || v175 == 146)
        goto LABEL_1114;
      if ((_WORD)v68)
        goto LABEL_944;
      LOWORD(v155) = 0;
LABEL_1118:
      LOWORD(v68) = 0;
LABEL_1116:
      *(_BYTE *)(v191 + (__int16)v11) = 0;
      a1[v73] = 0;
      return ((unsigned __int16)(v70 | v69 | v71 | v181 | v72 | v155 | v68 | v154) != 0) << 29;
    case 0x94:
      if (v60[v150 - 1] != 147)
        goto LABEL_1117;
      goto LABEL_1114;
    default:
      if (v162 == 93)
      {
        if (v60[v150 - 1] != 91)
          goto LABEL_1117;
      }
      else
      {
        if (v162 != 125)
          goto LABEL_1116;
        if (v60[v150 - 1] != 123)
          goto LABEL_1117;
      }
      goto LABEL_1114;
  }
}

size_t ICchkprepos(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  size_t result;
  int v5;
  int v6;
  __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;

  v2 = a1 + 1482;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 248) + 56);
  LOWORD(result) = strlen((const char *)(a1 + 1482));
  if ((_WORD)result)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = result - 1;
      result = (__int16)(result - 1);
      if (v7 < 0)
        break;
      v8 = *(unsigned __int8 *)(v2 + (unsigned __int16)result);
      v9 = *(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v2 + (unsigned __int16)result));
      if ((v9 & 0x1002400) == 0x1000400
        && (v9 & 0x1000000) != 0
        && (*(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v2 + (unsigned __int16)result)) & 0xA00000) != 0)
      {
        if (*(unsigned __int8 *)(v2 + (unsigned __int16)result) > 0x39u)
        {
          if (v8 == 58)
          {
            v18 = ((unsigned __int16)v5 == 2) << 18;
            if (v6 == 58)
              ++v5;
            else
              v5 = 1;
            if (v6 == 58)
              v18 = 0;
            v6 = 58;
            if (v18)
              goto LABEL_81;
          }
          else if (v8 == 59)
          {
            v19 = ((unsigned __int16)v5 == 2) << 18;
            if (v6 == 59)
              ++v5;
            else
              v5 = 1;
            if (v6 == 59)
              v19 = 0;
            v6 = 59;
            if (v19)
              goto LABEL_81;
          }
          else
          {
            v13 = ((unsigned __int16)v5 == 2) << 18;
            if (v6 == 63)
              ++v5;
            else
              v5 = 1;
            if (v6 == 63)
              v13 = 0;
            if (v8 == 63)
            {
              v6 = 63;
            }
            else
            {
              v5 = 0;
              v6 = 0;
            }
            if (v8 == 63)
              v14 = v13;
            else
              v14 = 0;
            if (v14)
              goto LABEL_81;
          }
        }
        else if (v8 == 33)
        {
          v16 = ((unsigned __int16)v5 == 2) << 18;
          if (v6 == 33)
            ++v5;
          else
            v5 = 1;
          if (v6 == 33)
            v16 = 0;
          v6 = 33;
          if (v16)
            goto LABEL_81;
        }
        else if (v8 == 44)
        {
          v17 = ((unsigned __int16)v5 == 2) << 18;
          if (v6 == 44)
            ++v5;
          else
            v5 = 1;
          if (v6 == 44)
            v17 = 0;
          v6 = 44;
          if (v17)
            goto LABEL_81;
        }
        else
        {
          v10 = ((unsigned __int16)v5 == 2) << 18;
          if (v6 == 46)
            ++v5;
          else
            v5 = 1;
          if (v6 == 46)
            v10 = 0;
          if (v8 == 46)
          {
            v6 = 46;
          }
          else
          {
            v5 = 0;
            v6 = 0;
          }
          if (v8 == 46)
            v11 = v10;
          else
            v11 = 0;
          if (v11)
            goto LABEL_81;
        }
      }
      else if (*(_BYTE *)(a1 + 8) == 8 && (v8 == 63 || v8 == 33))
      {
        if (v8 != 63 || v6 == 63)
        {
          if (v8 == 33)
          {
            v12 = ((unsigned __int16)v5 == 2) << 18;
            v15 = v6 == 33;
            if (v6 != 33)
              v5 = 0;
            v6 = 33;
            if (v15)
              v12 = 0;
          }
          else
          {
            v12 = 0;
          }
        }
        else
        {
          v12 = ((unsigned __int16)v5 == 2) << 18;
          v6 = 63;
          v5 = 0;
        }
        ++v5;
        if (v12)
        {
LABEL_81:
          if ((unsigned __int16)v5 != 2)
            goto LABEL_137;
          goto LABEL_84;
        }
      }
      else
      {
        v5 = 0;
        v6 = 0;
      }
    }
    if ((unsigned __int16)v5 != 2)
      goto LABEL_86;
LABEL_84:
    if ((result & 0x80000000) == 0
      || *(unsigned __int8 *)(*(__int16 *)(a1 + 1612) + a1 + 1546) != *(unsigned __int8 *)(a1 + 1482))
    {
LABEL_137:
      *(_QWORD *)(a1 + 1328) |= 0x40000uLL;
      return result;
    }
  }
LABEL_86:
  v20 = a1 + 1417;
  result = strlen((const char *)(a1 + 1417));
  if ((int)((_DWORD)result << 16) < 1)
    return result;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = (__int16)result;
  do
  {
    v26 = *(unsigned __int8 *)(v20 + v23);
    v27 = v24;
    v28 = *(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v20 + v23));
    if ((v28 & 0x1002400) == 0x1000400
      && (v28 & 0x1000000) != 0
      && (*(_DWORD *)(v3 + 4 * *(unsigned __int8 *)(v20 + v23)) & 0xA00000) != 0)
    {
      v29 = 0;
      if (*(unsigned __int8 *)(v20 + v23) > 0x39u)
      {
        if (v26 == 58)
        {
          v30 = (unsigned __int16)v24 == 2;
          v29 = 58;
          if (v22 == 58)
            goto LABEL_96;
        }
        else if (v26 == 59)
        {
          v30 = (unsigned __int16)v24 == 2;
          v29 = 59;
          if (v22 == 59)
            goto LABEL_96;
        }
        else
        {
          v24 = 0;
          if (v26 != 63)
            goto LABEL_126;
          v30 = (unsigned __int16)v27 == 2;
          v29 = 63;
          if (v22 == 63)
            goto LABEL_96;
        }
      }
      else if (v26 == 33)
      {
        v30 = (unsigned __int16)v24 == 2;
        v29 = 33;
        if (v22 == 33)
          goto LABEL_96;
      }
      else if (v26 == 44)
      {
        v30 = (unsigned __int16)v24 == 2;
        v29 = 44;
        if (v22 == 44)
          goto LABEL_96;
      }
      else
      {
        v24 = 0;
        if (v26 != 46)
          goto LABEL_126;
        v30 = (unsigned __int16)v27 == 2;
        v29 = 46;
        if (v22 == 46)
        {
LABEL_96:
          v24 = v27 + 1;
          goto LABEL_126;
        }
      }
      v31 = v30 << 18;
      v24 = 1;
      if (v31)
        goto LABEL_132;
    }
    else if (*(_BYTE *)(a1 + 8) == 8 && (v26 == 63 || v26 == 33))
    {
      if (v26 != 63 || v22 == 63)
      {
        v32 = ((unsigned __int16)v24 == 2) << 18;
        if (v22 != 33)
          v24 = 0;
        result = 33;
        if (v22 == 33)
          v33 = 0;
        else
          v33 = v32;
        if (v26 == 33)
        {
          v29 = 33;
        }
        else
        {
          v24 = v27;
          v29 = v22;
        }
        if (v26 == 33)
          v31 = v33;
        else
          v31 = 0;
      }
      else
      {
        v24 = 0;
        v31 = ((unsigned __int16)v27 == 2) << 18;
        v29 = 63;
      }
      ++v24;
      if (v31)
        goto LABEL_132;
    }
    else
    {
      v29 = 0;
      v24 = 0;
    }
LABEL_126:
    v21 = ++v23;
    v22 = v29;
  }
  while (v25 > v23);
  v31 = 0;
LABEL_132:
  if ((unsigned __int16)v24 == 2)
  {
    if (v31 || *(unsigned __int8 *)(a1 + 1547) != *(unsigned __int8 *)(v20 + v21 - 1))
      goto LABEL_137;
  }
  else if (v31)
  {
    goto LABEL_137;
  }
  return result;
}

uint64_t ICcmpsft(const char *a1, int a2, uint64_t a3)
{
  if (ICget(a1, a2, a3) == 11)
    return 11;
  else
    return 2;
}

uint64_t IHbsearch(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int16 v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned __int16 v26;
  uint64_t v27;
  int v28;

  v2 = 0;
  v3 = *(_QWORD *)(a2 + 760);
  v4 = *(_QWORD *)(v3 + 104);
  v5 = *(unsigned __int16 *)(v3 + 96);
  v6 = v5 >> 1;
  v7 = *a1;
  v8 = *(unsigned __int16 *)(v3 + 96);
  while (1)
  {
    v9 = (unsigned __int8 *)(v4 + 8 * (unsigned __int16)v6);
    v10 = *v9;
    if (v7 >= v10)
      break;
LABEL_6:
    v8 = v6;
    v6 = (unsigned __int16)(v6 + v2) >> 1;
    if ((_DWORD)v6 == v2)
    {
      v22 = (unsigned __int8 *)(v4 + 8 * v2);
      if (v22[2] != a1[2] || v22[1] != a1[1] || *v22 != v7)
        return 0;
      v23 = v4 + 8 * v2;
      v24 = *(unsigned __int16 *)(v23 + 4);
      LOBYTE(v23) = *(_BYTE *)(v23 + 6);
      v25 = v24 & 0xFFFEFFFF | ((((v23 & 0x80) >> 7) & 1) << 16);
      *(_DWORD *)(v3 + 116) = v25;
      *(_BYTE *)(v3 + 120) = v23 & 0x7F;
      if (v5 != v2)
      {
        v26 = v2 + 1;
        if (v5 > v26)
        {
          v27 = v4 + 8 * v26;
          v28 = *(unsigned __int16 *)(v27 + 4);
          v20 = *(_BYTE *)(v27 + 6);
          v21 = v28 - v25 + ((v20 & 0x80) << 9);
LABEL_20:
          *(_DWORD *)(v3 + 124) = v21;
          *(_BYTE *)(v3 + 128) = (v20 & 0x7F) - 1;
          return 1;
        }
      }
      goto LABEL_22;
    }
  }
  if (v7 > v10)
    goto LABEL_4;
  v11 = a1[1];
  v12 = v9[1];
  if (v11 < v12)
    goto LABEL_6;
  if (v11 > v12)
    goto LABEL_4;
  v13 = a1[2];
  v14 = v9[2];
  if (v13 < v14)
    goto LABEL_6;
  if (v13 > v14)
  {
LABEL_4:
    v2 = v6;
    v6 = v8;
    goto LABEL_6;
  }
  v15 = v4 + 8 * (unsigned __int16)v6;
  v16 = *(unsigned __int16 *)(v15 + 4);
  LOBYTE(v15) = *(_BYTE *)(v15 + 6);
  v17 = v16 & 0xFFFEFFFF | ((((v15 & 0x80) >> 7) & 1) << 16);
  *(_DWORD *)(v3 + 116) = v17;
  *(_BYTE *)(v3 + 120) = v15 & 0x7F;
  if (v5 != (unsigned __int16)v6)
  {
    if (v5 <= (unsigned __int16)(v6 + 1))
      return 1;
    v18 = v4 + 8 * (unsigned __int16)(v6 + 1);
    v19 = *(unsigned __int16 *)(v18 + 4);
    v20 = *(_BYTE *)(v18 + 6);
    v21 = v19 - v17 + ((v20 & 0x80) << 9);
    goto LABEL_20;
  }
LABEL_22:
  *(_DWORD *)(v3 + 124) = 0xFFFF;
  return 1;
}

uint64_t IHcache(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;

  v7 = *(_QWORD *)(a4 + 760);
  v14 = 0;
  SLfun(a1, 0, (__int16)(a2 - 1), (unsigned __int16 *)&v14 + 1, &v14);
  v8 = HIWORD(v14) | ((_WORD)a2 << 15);
  HIWORD(v14) = v8;
  LOWORD(v14) = v14;
  if (a3 == 1)
  {
    v12 = *(_DWORD *)(a4 + 8);
    if ((v12 & 0x3FFFF) == 0 && !*(_BYTE *)(a4 + 747))
    {
      v13 = *(_QWORD *)(v7 + 16);
      *(_WORD *)(v13 + 2 * v14) = v8;
      *(_WORD *)(v13 + 2 * (unsigned __int16)v14 + 512) = (a2 >> 1) & 3 | HIWORD(v12);
      return 1;
    }
  }
  else
  {
    result = 0;
    if (a3 != 2)
      return result;
    v10 = *(_QWORD *)(v7 + 16);
    if (*(unsigned __int16 *)(v10 + 2 * v14) == v8)
    {
      v11 = *(unsigned __int16 *)(v10 + 2 * (v14 | 0x100u));
      if ((v11 & 3) == ((a2 >> 1) & 3))
      {
        *(_DWORD *)(a4 + 8) = (v11 << 16) & 0xFFFC0000;
        return 1;
      }
    }
  }
  return 0;
}

uint64_t IHclean(unsigned __int8 *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  int v8;
  __int16 v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;

  v3 = *(_QWORD *)(a3 + 752);
  v4 = *a1;
  v5 = v4 == 121;
  v6 = (*(_DWORD *)(v3 + 4 * v4) >> 28) & 1;
  if (v5)
    LOWORD(v6) = 1;
  if (a2 >= 2)
  {
    v8 = 0;
    v9 = 0;
    v10 = *(_DWORD *)(a3 + 8);
    v7 = 0x80000000;
    v11 = 0x80000000;
    do
    {
      if ((v10 & v11) != 0 || a1[v9] == 45)
      {
        if ((_WORD)v6)
        {
          LOWORD(v6) = 0;
        }
        else
        {
          LOWORD(v6) = 0;
          v10 &= ~(v7 | v11);
          *(_DWORD *)(a3 + 8) = v10;
        }
        v7 = v11;
      }
      v12 = a1[v8 + 1];
      v5 = v12 == 121;
      v13 = (*(_DWORD *)(v3 + 4 * v12) >> 28) & 1;
      if (v5)
        v13 = 1;
      if (v13)
        LOWORD(v6) = 1;
      ++v9;
      v11 >>= 1;
      v8 = v9;
    }
    while (a2 - 2 >= v9);
  }
  else
  {
    v7 = 0x80000000;
  }
  if (!(_WORD)v6)
    *(_DWORD *)(a3 + 8) &= ~v7;
  if (a2 > 31)
    *(_DWORD *)(a3 + 12) &= -1 << (65 - a2);
  else
    *(_DWORD *)(a3 + 8) &= -1 << (33 - a2);
  return 0;
}

uint64_t IHdecode(unsigned __int8 *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned __int16 *a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t result;
  int v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  uint64_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  char v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  int v91;
  unsigned __int16 *v92;
  unsigned __int16 *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  _BYTE v104[65];
  _BYTE v105[65];
  uint64_t v106;

  v106 = *MEMORY[0x1E0C80C00];
  if ((int)a2 >= 1)
  {
    v6 = *((_QWORD *)a6 + 95);
    v7 = *(unsigned int *)(v6 + 116);
    v8 = *(_DWORD *)(v6 + 112) - v7;
    v9 = v8 + 1;
    if (v8 != -1)
    {
      v12 = 0;
      v102 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v23 = *(_QWORD *)(v6 + 32);
      v22 = *(_QWORD *)(v6 + 40);
      v24 = *a6;
      v25 = *(_QWORD *)(v6 + 48);
      v26 = *(_QWORD *)(v6 + 56) + v7 - 1;
      v27 = *(unsigned __int8 *)(v6 + 120);
      v97 = -a3;
      v96 = a3 + 2;
      v98 = (unsigned __int16)a2;
      v99 = v26;
      v100 = v25;
LABEL_5:
      v28 = *(unsigned __int8 *)(v26 + (unsigned __int16)v20);
      if (*(_BYTE *)(v26 + (unsigned __int16)v20))
      {
        v29 = 0;
        v30 = v25 + *(unsigned __int16 *)(v23 + 2 * v28);
        v31 = *(unsigned __int8 *)(v22 + v28);
        v101 = v31;
        while (1)
        {
          if (*(_DWORD *)(v6 + 124) == v12 && *(unsigned __int8 *)(v6 + 128) == (unsigned __int16)v29)
            return 0;
          if ((char)v27 < 1)
          {
            v33 = *(unsigned __int8 *)(v30 + (unsigned __int16)v29);
          }
          else
          {
            v32 = v29 + v27;
            v27 = 0;
            v29 = v32 - 1;
            v33 = *(unsigned __int8 *)(v30 + (unsigned __int16)(v32 - 1));
            v18 = v33 & 0x3F;
          }
          if (v17 == 1)
          {
            if (v33 <= 0xE)
            {
              v105[v19] = 0;
              if (v24 != 4)
              {
                if (v24 == 3)
                {
                  LOWORD(v34) = v15;
                  if ((v33 & 0xFE) == 4)
                  {
                    v21 = v15;
                    do
                      --v21;
                    while (v105[v21] != 32);
                    v105[v21] = 0;
                    *(_WORD *)(v6 + 142) = v21;
                    LOWORD(v34) = v21;
                  }
                  if ((__int16)v34 >= 1)
                  {
                    v35 = v14;
                    v34 = (unsigned __int16)v34;
                    v36 = v105;
                    v37 = a1;
                    do
                    {
                      v39 = *v37++;
                      v38 = v39;
                      v41 = *v36++;
                      v40 = v41;
                      v13 = v38 > v41;
                      if (v38 > v41)
                        break;
                      if (v38 < v40)
                        return 0;
                      --v34;
                    }
                    while (v34);
                    goto LABEL_83;
                  }
LABEL_62:
                  v13 = 0;
                }
                else
                {
                  if ((v24 - 5) > 1)
                    return 0;
                  if (v15 < 1)
                    goto LABEL_62;
                  v35 = v14;
                  v51 = (unsigned __int16)v15;
                  v52 = v105;
                  v53 = a1;
                  do
                  {
                    v55 = *v53++;
                    v54 = v55;
                    v57 = *v52++;
                    v56 = v57;
                    v13 = v54 > v57;
                    if (v54 > v57)
                      break;
                    if (v54 < v56)
                      return 0;
                    --v51;
                  }
                  while (v51);
LABEL_83:
                  v14 = v35;
                  v31 = v101;
                }
LABEL_84:
                if (v33 != 8)
                {
                  if (v33 < 3)
                  {
                    if ((v13 & 1) == 0)
                    {
                      if (v33 == 1)
                        *(_WORD *)(v6 + 130) = 1;
                      else
                        *(_WORD *)(v6 + 132) = 1;
                    }
                    v17 = 0;
                    if (v15 >= 63)
                      v18 = 63;
                    else
                      v18 = v15;
                  }
                  else
                  {
                    v17 = 2;
                    if (v33 - 9 >= 2)
                      v16 = 4;
                    else
                      v16 = 2;
                    *(_DWORD *)(v6 + 136) = 0;
                    if ((v33 & 0xFE) == 4)
                    {
                      if ((v13 & 1) == 0)
                      {
                        v86 = a1;
                        v88 = a2;
                        v92 = a6;
                        v94 = a5;
                        v103 = a4;
                        v90 = a3;
                        v82 = v12;
                        v84 = v9;
                        v78 = v23;
                        v80 = v20;
                        v76 = v16;
                        v74 = v22;
                        v72 = v14;
                        strcpy((char *)(v6 + 144), &v105[v21 + 1]);
                        v31 = v101;
                        a4 = v103;
                        v14 = v72;
                        v22 = v74;
                        v16 = v76;
                        v23 = v78;
                        v20 = v80;
                        v12 = v82;
                        v9 = v84;
                        a1 = v86;
                        a2 = v88;
                        a3 = v90;
                        a6 = v92;
                        a5 = v94;
                      }
                      v105[*(__int16 *)(v6 + 142)] = 32;
                      v17 = 2;
                    }
                  }
                  v102 = v33;
                  goto LABEL_109;
                }
LABEL_85:
                if ((v13 & 1) == 0 && v24 == 4 && a1[v15] != 45)
                {
                  *(_DWORD *)(v6 + 76) = 1 << (29 - v15);
                  *(_BYTE *)(v6 + 72) = 1;
                  *(_WORD *)(v6 + 84) = v15;
                }
                v17 = 0;
                if (v15 >= 63)
                  v18 = 63;
                else
                  v18 = v15;
                v102 = 8;
                goto LABEL_109;
              }
              v13 = v33 != 8 && a3 != (unsigned __int16)v14;
              if (v33 == 8)
              {
                if (v15 <= 0)
                  goto LABEL_85;
                v35 = v14;
                v44 = (unsigned __int16)v15;
                v45 = v105;
                v46 = a1;
                while (1)
                {
                  v48 = *v46++;
                  v47 = v48;
                  v49 = *v45++;
                  v50 = v47 >= v49;
                  if (v47 > v49)
                    break;
                  if (!v50)
                    return 0;
                  if (!--v44)
                    goto LABEL_83;
                }
              }
              else
              {
                v35 = v14;
                v58 = v105;
                v59 = v98;
                v60 = a1;
                while (1)
                {
                  v62 = *v60++;
                  v61 = v62;
                  v63 = *v58++;
                  v64 = v61 >= v63;
                  if (v61 > v63)
                    break;
                  if (!v64)
                    return 0;
                  if (!--v59)
                  {
                    if ((unsigned __int16)v15 == (unsigned __int16)a2)
                      v65 = 1;
                    else
                      v65 = v13;
                    v31 = v101;
                    if ((v65 & 1) != 0)
                      goto LABEL_84;
                    return 0;
                  }
                }
              }
              v13 = 1;
              goto LABEL_83;
            }
            ++v15;
            v42 = v19++;
            v105[v42] = v33;
            v17 = 1;
          }
          else
          {
            if (!v17)
            {
              if (((v18 - (v33 & 0x3F)) & 0x8000) != 0)
                return 0;
              v19 = v18 - (v33 & 0x3F);
              v14 = v33 >> 7;
              v17 = 1;
              v15 = v19;
              goto LABEL_109;
            }
            if ((__int16)v16 < 2)
            {
              v43 = *(_DWORD *)(v6 + 136) | v33;
              *(_DWORD *)(v6 + 136) = v43;
              if (!v13 && v102 == 3)
              {
                *(_BYTE *)(v6 + 86) = 1;
                *(_DWORD *)(v6 + 88) = v43;
                goto LABEL_79;
              }
              if (v13 || v102 != 6)
              {
                if (v13 || v102 != 7)
                {
                  if (!v13 && v102 == 9 && v24 == 5 || !v13 && v102 == 10 && v24 == 6)
                  {
                    *(_WORD *)(v6 + 140) = v43;
                    *(_WORD *)(v6 + 142) = v15;
                  }
                  else if (v13 || v102 != 4)
                  {
                    if (!v13 && v102 == 5)
                    {
                      v67 = *(__int16 *)(v6 + 142);
                      v31 = v101;
                      if (~((v67 + 1) >> 1) != v97)
                      {
                        v31 = v101;
                        if (v96 + (v67 >> 1) != (_DWORD)a4)
                        {
                          *((_BYTE *)a6 + 747) = 1;
                          v68 = (__int16)(~(unsigned __int16)((v67 + 1) >> 1) + a3);
                          v69 = v68 & ~(v68 >> 31);
                          v71 = v43 >> (v68 & ~(v68 >> 31));
                          v73 = v14;
                          v87 = a1;
                          v89 = a2;
                          v91 = a3;
                          v70 = a4;
                          v93 = a6;
                          v95 = a5;
                          v83 = v12;
                          v85 = v9;
                          v79 = v23;
                          v81 = v20;
                          v77 = v16;
                          v75 = v22;
                          __strncpy_chk();
                          v104[v69] = 0;
                          __strcat_chk();
                          __strncat_chk();
                          __strcpy_chk();
                          v31 = v101;
                          v14 = v73;
                          v22 = v75;
                          v16 = v77;
                          v23 = v79;
                          v20 = v81;
                          v12 = v83;
                          v9 = v85;
                          a1 = v87;
                          a2 = v89;
                          a3 = v91;
                          a4 = v70;
                          a6 = v93;
                          a5 = v95;
                          *((_DWORD *)v93 + 4) = v71;
                        }
                      }
                    }
                  }
                  else
                  {
                    v66 = *(__int16 *)(v6 + 142);
                    if (~((v66 + 1) >> 1) != v97 && v96 + (v66 >> 1) != (_DWORD)a4)
                      return 2;
                  }
                  goto LABEL_79;
                }
                if (*(_BYTE *)(v6 + 24) != 104)
                {
LABEL_79:
                  v17 = 0;
                  *(_DWORD *)(v6 + 136) = 0;
                  if (v15 >= 63)
                    v18 = 63;
                  else
                    v18 = v15;
                  goto LABEL_109;
                }
              }
              else if (*(_BYTE *)(v6 + 24) != 105)
              {
                goto LABEL_79;
              }
              *((_DWORD *)a6 + 4) = v43;
              *(_BYTE *)(v6 + 92) = 1;
              goto LABEL_79;
            }
            *(_DWORD *)(v6 + 136) |= v33 << (8 * --v16);
          }
LABEL_109:
          if (v31 <= (unsigned __int16)++v29)
          {
            result = 0;
            v20 = (v20 + 1);
            v12 = (unsigned __int16)v20;
            v26 = v99;
            v25 = v100;
            if (v9 > (unsigned __int16)v20)
              goto LABEL_5;
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t ScrambleAndFind(uint64_t a1, uint64_t a2, int a3, int a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned __int16 v15;
  unsigned int v16;
  unsigned int v18;
  uint64_t v19;
  _BYTE v20[65];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a6 + 760);
  v9 = (*(unsigned __int16 *)(v8 + 4) >> 1) - 1 + a3;
  v10 = a1 - 2;
  v11 = 2;
  v12 = a5;
  do
  {
    if (a4)
    {
      *v12 = *(_BYTE *)(v9 + a1 - 1 + v11);
      v13 = v9 - v11;
    }
    else
    {
      *v12 = *(_BYTE *)(v10 + v9);
      v13 = v9 + v11;
    }
    v12[1] = *(_BYTE *)(a1 + v13);
    v14 = *(unsigned __int16 *)(v8 + 4);
    ++v11;
    --v10;
    v12 += 2;
  }
  while (v11 < (v14 >> 1) + 3);
  if ((unsigned __int16)IHdecode(a5, (__int16)v14, a3, a2, a1, (unsigned __int16 *)a6) != 2)
    return 0;
  v15 = ~(unsigned __int16)((*(__int16 *)(v8 + 142) + 1) >> 1) + a3;
  if (((~((*(__int16 *)(v8 + 142) + 1) >> 1) + a3) & 0x8000) != 0)
  {
    v16 = *(_DWORD *)(v8 + 136) << -(char)v15;
    *(_DWORD *)(v8 + 136) = v16;
    v15 = 0;
  }
  else
  {
    v16 = *(_DWORD *)(v8 + 136);
  }
  v18 = v16 >> v15;
  v19 = v15;
  __strncpy_chk();
  v20[v19] = 0;
  __strcat_chk();
  __strncat_chk();
  *(_WORD *)a6 = 1;
  IHhyp(v20, a6);
  *(_BYTE *)(a6 + 747) = 1;
  __strcpy_chk();
  *(_DWORD *)(a6 + 16) = *(_DWORD *)(a6 + 8);
  *(_DWORD *)(a6 + 8) = v18;
  return 2;
}

uint64_t IHgetmap(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  __int16 v12;
  char v13;

  v6 = *(_QWORD *)(a3 + 760);
  v7 = *(unsigned __int16 *)(v6 + 4);
  v8 = (unsigned __int8 *)malloc_type_calloc(1uLL, v7 + 3, 0x8E327490uLL);
  *(_WORD *)a3 = 3;
  v9 = *(unsigned __int16 *)(v6 + 6);
  if (v9 < (unsigned __int16)(a2 + 2 - *(_WORD *)(v6 + 8)))
  {
    v10 = a1 + (int)((v7 >> 1) - 1);
    do
    {
      *(_DWORD *)(v6 + 130) = 0;
      v12 = *(_WORD *)(v10 + v9 - 1);
      v13 = 0;
      if (IHbsearch((unsigned __int8 *)&v12, a3)
        && ScrambleAndFind(a1, a2, (__int16)v9, 1, v8, a3) == 2)
      {
        break;
      }
      v13 = *(_BYTE *)(v10 + v9 + 1);
      if (IHbsearch((unsigned __int8 *)&v12, a3))
      {
        if (ScrambleAndFind(a1, a2, (__int16)v9, 0, v8, a3) == 2)
          break;
      }
      if (*(unsigned __int16 *)(v6 + 130) != *(unsigned __int16 *)(v6 + 132))
        *(_DWORD *)(a3 + 8 + 4 * ((unsigned __int16)(v9 - 1) >> 5)) |= 1 << -(char)v9;
      ++v9;
    }
    while (v9 < (unsigned __int16)(a2 + 2 - *(_WORD *)(v6 + 8)));
  }
  free(v8);
  return 1;
}

uint64_t IHhyp(const char *a1, __int16 *a2)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  int *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned __int16 v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned int v15;
  char *v16;
  __int16 v17;
  unsigned __int16 v18;
  uint64_t v19;
  int v20;
  char v21;
  unsigned __int8 v22;
  int v23;
  __int16 v24;
  unsigned __int8 v25;
  int v26;
  __int16 v27;
  int v28;
  int v29;
  __int16 v30;
  char v31;
  int v32;
  unsigned __int8 v33;
  int v34;
  int v35;
  __int16 v36;
  int v37;
  unsigned int v38;
  int valid;
  unsigned __int8 v40;
  int v41;
  int v42;
  int v43;
  int v44;
  __int16 v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  size_t v50;
  int v51;
  int v52;
  int v53;
  int *v54;
  unsigned __int16 v55;
  __int16 v56;
  int v57;
  signed int v58;
  int v59;
  int v60;
  unsigned __int16 v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  signed int v65;
  signed int v66;
  signed int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unsigned __int8 v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  int v78;
  int v79;
  unsigned __int16 v80;
  int v81;
  int v82;
  unsigned int v83;
  unsigned __int16 v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unsigned __int16 v92;
  uint64_t v93;
  int v94;
  int v95;
  int v96;
  unsigned __int16 v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  int v107;
  char *v108;
  unsigned int v109;
  int v110;
  __int16 v111;
  __int16 v112;
  __int16 v113;
  char v114;
  unsigned int v115;
  __int16 v116;
  int v117;
  unsigned __int16 v118;
  char v119;
  unsigned __int8 v120;
  unsigned __int8 v121;
  uint64_t v122;
  char v123[65];
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  unsigned __int8 v127[62];
  char __b[71];
  char __s;
  unsigned __int8 v130;
  unsigned __int8 v131;
  unsigned __int8 v132[62];
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 95);
  a2[374] = 0;
  *((_BYTE *)a2 + 750) = 0;
  v4 = *a2;
  if (v4 == 2)
  {
    result = IHterm((uint64_t)a2);
    goto LABEL_10;
  }
  if (v4 != 1)
  {
    if (!*a2)
    {
      result = IHinit((uint64_t)a2);
      goto LABEL_10;
    }
LABEL_9:
    result = 8;
    goto LABEL_10;
  }
  *((_QWORD *)a2 + 2) = 0;
  v6 = (int *)(a2 + 8);
  *((_QWORD *)a2 + 1) = 0;
  v7 = *((_QWORD *)a2 + 94);
  *((_QWORD *)a2 + 3) = 0;
  v8 = a2 + 12;
  *(_BYTE *)(v3 + 92) = 0;
  *((_BYTE *)a2 + 747) = 0;
  *(_OWORD *)(a2 + 340) = 0u;
  *(_OWORD *)(a2 + 348) = 0u;
  *(_OWORD *)(a2 + 356) = 0u;
  *(_OWORD *)(a2 + 364) = 0u;
  *((_BYTE *)a2 + 744) = 0;
  memset(__b, 0, 67);
  v9 = strlen(a1);
  result = 0;
  if ((__int16)v9 < 3)
    goto LABEL_10;
  if ((__int16)v9 >= 0x41)
  {
    *((_BYTE *)a2 + 748) = 1;
    goto LABEL_9;
  }
  v113 = v9 - 3;
  __strcpy_chk();
  __strcpy_chk();
  v115 = (__int16)v9 - 1;
  v117 = (__int16)v9;
  v10 = SLcap((uint64_t)&v124, 0, (__int16)v9, &v122, v7);
  v11 = 0;
  *((_QWORD *)a2 + 4) = v122;
  v109 = v10;
  *((_BYTE *)a2 + 746) = v10;
  do
  {
    v12 = *(&v124 + v11);
    if (*(&v124 + v11) > 0x2Eu)
    {
      if ((_DWORD)v12 != 47)
      {
        if ((_DWORD)v12 == 58)
        {
LABEL_28:
          result = 0;
          *((_BYTE *)a2 + 749) |= 4u;
          goto LABEL_10;
        }
        goto LABEL_20;
      }
    }
    else if ((_DWORD)v12 != 45)
    {
      if ((_DWORD)v12 == 46)
        goto LABEL_28;
LABEL_20:
      v13 = v11 + 1;
      goto LABEL_21;
    }
    v13 = v11 + 1;
    if ((*(&v124 + v11 + 1) | 2) != 0x2F)
      v8[(unsigned __int16)v11 >> 5] |= 1 << ~(_BYTE)v11;
LABEL_21:
    if ((*(_DWORD *)(v7 + 4 * v12) & 0x40000000) != 0)
      LOBYTE(v12) = v12 + 32;
    *(&v124 + v11) = v12;
    v11 = v13;
  }
  while (v13 != v9);
  v14 = 0;
  v15 = *((unsigned __int8 *)a2 + 745);
  v16 = v123;
  if (v15 <= 8)
  {
    v17 = v9 - 1;
    if (v15 != 3)
    {
      v110 = 0;
      if (v15 != 5)
        goto LABEL_51;
    }
    goto LABEL_36;
  }
  v17 = v9 - 1;
  if (v15 == 9)
  {
LABEL_36:
    *a2 = 5;
    *(_QWORD *)(v3 + 136) = 0xFFFF000000000000;
    v21 = v124;
    if ((*(_DWORD *)(v7 + 4 * v124) & 0x40000000) != 0)
      v21 = v124 + 32;
    __s = v21;
    v22 = v125;
    if ((*(_DWORD *)(v7 + 4 * v125) & 0x40000000) != 0)
      v22 = v125 + 32;
    v130 = v22;
    v131 = 0;
    if (IHbsearch((unsigned __int8 *)&__s, (uint64_t)a2))
    {
      IHdecode(&v126, (__int16)(v117 - 2), 0, 0, 0, (unsigned __int16 *)a2);
      v23 = *(unsigned __int16 *)(v3 + 142);
      v16 = v123;
      if (v23 == 0xFFFF)
      {
        v14 = 0;
        v110 = 0;
      }
      else
      {
        v24 = v23 + 2;
        v16 = &v123[v24];
        v110 = *(unsigned __int16 *)(v3 + 140);
        v14 = v24;
      }
    }
    else
    {
      v14 = 0;
      v110 = 0;
      v16 = v123;
    }
    v25 = v126;
    if ((*(_DWORD *)(v7 + 4 * v126) & 0x40000000) != 0)
      v25 = v126 + 32;
    v131 = v25;
    *(_WORD *)(v3 + 142) = -1;
    if (IHbsearch((unsigned __int8 *)&__s, (uint64_t)a2))
    {
      IHdecode(v127, v113, 0, 0, 0, (unsigned __int16 *)a2);
      v26 = *(unsigned __int16 *)(v3 + 142);
      if (v26 != 0xFFFF)
      {
        v27 = v26 + 3;
        v16 += v27;
        v110 = *(unsigned __int16 *)(v3 + 140);
        v14 = v27;
      }
    }
    v15 = *((unsigned __int8 *)a2 + 745);
LABEL_51:
    v108 = v16;
    v20 = 0;
    if (v15 > 0xC)
      goto LABEL_140;
    v18 = v117;
    if (((1 << v15) & 0x1328) == 0)
    {
LABEL_94:
      if (v14 <= v17)
      {
        v44 = v14;
        v45 = v14;
        do
        {
          *(&__s + v44 - v14) = *(&v124 + v45++);
          v44 = v45;
        }
        while (v45 <= v17);
      }
      else
      {
        v44 = v14;
      }
      *(&__s + v44 - v14) = 0;
      if (*(_BYTE *)(v3 + 24) == 105)
      {
        v46 = *((_DWORD *)a2 + 6);
        v47 = *((_DWORD *)a2 + 7);
        if (*((_QWORD *)a2 + 3))
        {
          result = 0;
          *((_BYTE *)a2 + 749) |= 1u;
          *((_DWORD *)a2 + 4) = v46;
          *((_DWORD *)a2 + 5) = v47;
          *((_DWORD *)a2 + 2) = v46;
          *((_DWORD *)a2 + 3) = v47;
          goto LABEL_10;
        }
        if ((*((_BYTE *)a2 + 749) & 2) != 0)
        {
LABEL_239:
          result = 0;
          goto LABEL_10;
        }
      }
      v114 = v14;
      v107 = v20;
      v116 = v17;
      v118 = v18;
      v112 = v14;
      v48 = *(unsigned __int16 *)(v3 + 4);
      v49 = (v48 >> 1) - 1;
      if (v48 >= 4)
      {
        if (v49 <= 1)
          v50 = 1;
        else
          v50 = v49;
        memset(__b, 32, v50);
      }
      v51 = strlen(&__s);
      if ((int)((strlen(__b) + v51 + 2 * v49) << 16) > 4128768)
        goto LABEL_9;
      __strcat_chk();
      v52 = strlen(__b);
      if (v48 < 4)
      {
        v56 = v52;
        v54 = (int *)(a2 + 4);
        v55 = v118;
      }
      else
      {
        LOWORD(v53) = 0;
        v54 = (int *)(a2 + 4);
        v55 = v118;
        do
        {
          v56 = v52 + 1;
          __b[(__int16)v52] = 32;
          v53 = (__int16)(v53 + 1);
          ++v52;
        }
        while (v53 < v49);
      }
      __b[v56] = 0;
      v57 = v56 - 2 * v49;
      v58 = (__int16)v55;
      if (v57 <= 2)
      {
        v59 = v110 << 16;
        *v54 = v110 << 16;
        if ((__int16)v55 - 1 == v116)
        {
LABEL_149:
          result = 0;
          *v6 = v59;
          goto LABEL_10;
        }
        v60 = *((unsigned __int8 *)a2 + 745);
        if (v60 == 3)
        {
          v61 = v116;
          v64 = v116 + 1;
          v62 = v112;
          if (*(&v124 + v64) == 39)
            goto LABEL_146;
        }
        else
        {
          v61 = v116;
          v62 = v112;
          if (v60 == 5)
          {
            v63 = v127[v116 - 1];
            if (v63 == 121 || (*(_DWORD *)(v7 + 4 * v63) & 0x10000000) != 0)
            {
              LOBYTE(v64) = v116 + 1;
LABEL_146:
              v59 |= v107 << 16 >> v64;
              *v54 = v59;
              if (*(unsigned __int16 *)(v3 + 6) > 1u || !v62 && (v60 == 9 || v60 == 3))
              {
                v59 &= ~0x80000000;
                *v54 = v59;
              }
              goto LABEL_149;
            }
          }
        }
        v64 = (__int16)v61 + 1;
        if ((v61 & 0x8000) == 0 && *(&v124 + v64) != 45)
        {
          v54[v61 >> 5] |= 1 << ~(_BYTE)v116;
          v59 = *v54;
        }
        goto LABEL_146;
      }
      v105 = v57;
      v65 = (__int16)strlen(v108);
      if (v65 >= 11)
      {
        v66 = v58;
        v67 = v65;
        v68 = IHcache((uint64_t)v108, v65, 2, (uint64_t)a2);
        v65 = v67;
        v58 = v66;
        if (v68)
        {
          *(_BYTE *)(v3 + 72) = 0;
          *(_DWORD *)(v3 + 76) = 0;
          *(_DWORD *)(v3 + 136) = 0;
          goto LABEL_179;
        }
      }
      v104 = v65;
      v69 = IHgetmap((uint64_t)__b, v105, (uint64_t)a2);
      *(_BYTE *)(v3 + 86) = 0;
      *(_BYTE *)(v3 + 92) = 0;
      if (!v69)
        goto LABEL_179;
      *(_BYTE *)(v3 + 72) = 0;
      *a2 = 4;
      *(_DWORD *)(v3 + 136) = 0;
      v70 = *v108;
      if ((*(_DWORD *)(v7 + 4 * v70) & 0x40000000) != 0)
        LOBYTE(v70) = v70 + 32;
      v71 = v108[1];
      v72 = *(_DWORD *)(v7 + 4 * v71);
      v119 = v70;
      v73 = v71 + 32;
      if ((v72 & 0x40000000) == 0)
        v73 = v71;
      v120 = v73;
      v121 = 0;
      if (IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2))
      {
        IHdecode((unsigned __int8 *)v108 + 2, (__int16)(v104 - 2), (*(_DWORD *)(v7 + 4 * *v108) >> 30) & 1, 0, 0, (unsigned __int16 *)a2);
        if (*(_BYTE *)(v3 + 72))
          v74 = 2;
        else
          v74 = 3;
      }
      else
      {
        v74 = 3;
      }
      v75 = v108[2];
      if ((*(_DWORD *)(v7 + 4 * v75) & 0x40000000) != 0)
        LOBYTE(v75) = v75 + 32;
      v121 = v75;
      *(_BYTE *)(v3 + 72) = 0;
      if (IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2))
      {
        IHdecode((unsigned __int8 *)v108 + 3, (__int16)(v104 - 3), (*(_DWORD *)(v7 + 4 * *v108) >> 30) & 1, 0, 0, (unsigned __int16 *)a2);
        if (*(_BYTE *)(v3 + 86))
        {
          *(_BYTE *)(v3 + 72) = 0;
          v76 = 3;
          goto LABEL_162;
        }
        v76 = 3;
        if (*(_BYTE *)(v3 + 72) || v74 != 2)
          goto LABEL_162;
      }
      else if (v74 != 2)
      {
        v76 = 3;
        goto LABEL_162;
      }
      *(_BYTE *)(v3 + 72) = 1;
      *(_DWORD *)(v3 + 76) *= 2;
      v76 = 2;
LABEL_162:
      v77 = *((unsigned __int8 *)a2 + 745);
      if (v77 <= 0xD
        && ((1 << v77) & 0x2CC0) != 0
        && !*((_BYTE *)a2 + 747)
        && !*v8
        && (v77 != 6 || (*(_DWORD *)(v7 + 4 * *v108) & 0x40000000) != 0))
      {
        if (*(_BYTE *)(v3 + 72) && IsValidRMCC(&v108[v76 + *(unsigned __int16 *)(v3 + 84)], (uint64_t)a2))
        {
          v78 = *v54 & ~(2 * *(_DWORD *)(v3 + 76));
          *v54 = v78;
          v79 = v78 & ~(*(int *)(v3 + 76) >> 1);
          *v54 = v79;
          *v54 = v79 | *(_DWORD *)(v3 + 76);
        }
        else
        {
          *(_DWORD *)(v3 + 76) = 0;
        }
      }
      if (*(_BYTE *)(v3 + 86))
        *v54 ^= *(_DWORD *)(v3 + 88);
      if (v104 >= 11)
        IHcache((uint64_t)v108, v58, 1, (uint64_t)a2);
LABEL_179:
      v80 = v118;
      v81 = v116;
      if (*((_BYTE *)a2 + 745) != 1 && !*(_BYTE *)(v3 + 86))
      {
        IHclean((unsigned __int8 *)&__b[v49], v105, (uint64_t)a2);
        v81 = v116;
        v80 = v118;
        if (!*((_BYTE *)a2 + 747)
          && !*v8
          && ((*(_DWORD *)(v7 + 4 * *v108) & 0x40000000) != 0 || *((_BYTE *)a2 + 745) != 6))
        {
          *v54 |= *(_DWORD *)(v3 + 76);
        }
      }
      v82 = (*v54 >> v114) | (v110 << 16);
      *v54 = v82;
      if (v112)
      {
        v83 = v109;
        v84 = v116;
      }
      else
      {
        v85 = *((unsigned __int8 *)a2 + 745);
        v83 = v109;
        v84 = v116;
        if (v85 == 9 || v85 == 3)
        {
          v82 &= ~0x80000000;
          *v54 = v82;
        }
      }
      v86 = (__int16)v80 - 1;
      if ((_DWORD)v86 == v81)
      {
LABEL_201:
        if (!*((_BYTE *)a2 + 747) && !*(_BYTE *)(v3 + 92))
        {
          v90 = *((_DWORD *)a2 + 3);
          *((_DWORD *)a2 + 4) = v82;
          *((_DWORD *)a2 + 5) = v90;
          if ((*(_DWORD *)(v7 + 4 * __s) & 0x10000000) != 0)
            *v6 = v82 & 0x7FFFFFFF;
          if ((*(_DWORD *)(v7 + 4 * *(&__s + v86)) & 0x10000000) != 0)
            v6[(unsigned __int16)(v80 - 1) >> 5] &= ~(1 << ~(_BYTE)v86);
          if (v58 < 2)
            goto LABEL_230;
          v91 = v80;
          v92 = 1;
          v93 = 1;
          do
          {
            v94 = v6[v92 >> 5];
            v95 = 1 << ~(_BYTE)v93;
            if ((v94 & v95) != 0)
            {
              if (((v6[(unsigned __int16)(v92 + 1) >> 5] >> ~(_BYTE)++v93) & 1) != 0
                && (*(_DWORD *)(v7 + 4 * *(&__s + v93)) & 0x10000000) != 0)
              {
                v6[v92 >> 5] = v94 & ~v95;
              }
            }
            else
            {
              ++v93;
            }
            ++v92;
          }
          while (v93 != v91);
        }
        if (v58 >= 2)
        {
          v96 = 0;
          v97 = 0;
          do
          {
            v98 = *(&v124 + (__int16)v97);
            if (v98 == 47 || v98 == 45)
            {
              v99 = *(&v124 + v96 + 1);
              if ((v99 | 2) != 0x2F)
              {
                if ((int)v86 <= v81
                  || (__int16)v97 > (__int16)v84 && *((_BYTE *)a2 + 745) != 5
                  || (v100 = *((unsigned __int8 *)a2 + 745), (__int16)v97 < (__int16)v84) && v100 == 3
                  || v100 == 5 && v99 != 121 && (*(_DWORD *)(v7 + 4 * v99) & 0x10000000) == 0)
                {
                  v101 = 1 << ~(_BYTE)v96;
                  v54[v97 >> 5] |= v101;
                  v6[v97 >> 5] |= v101;
                }
              }
            }
            v96 = (__int16)++v97;
          }
          while ((int)v86 > (__int16)v97);
        }
LABEL_230:
        v102 = *((unsigned __int8 *)a2 + 745);
        if (v112 == 2 && v102 == 5)
        {
          *v54 &= ~0x20000000u;
          *v6 &= ~0x20000000u;
        }
        else if (v102 == 16 && (*v6 != *v54 || *((_DWORD *)a2 + 5) != *((_DWORD *)a2 + 3)))
        {
          *((_BYTE *)a2 + 747) = 1;
          if (!*((_BYTE *)a2 + 680))
            __strcpy_chk();
        }
        __strcpy_chk();
        v103 = strlen(&v124);
        SLrecap((unsigned __int8 *)&v124, v103, v83, (uint64_t)&v122, v83, v7);
        __strcpy_chk();
        goto LABEL_239;
      }
      v87 = *((unsigned __int8 *)a2 + 745);
      if (v87 == 3)
      {
        v89 = (__int16)v84 + 1;
        if (*(&v124 + v89) == 39)
          goto LABEL_200;
      }
      else if (v87 == 5)
      {
        v88 = v127[(__int16)v84 - 1];
        if (v88 == 121 || (*(_DWORD *)(v7 + 4 * v88) & 0x10000000) != 0)
        {
          LOBYTE(v89) = v81 + 1;
LABEL_200:
          v82 |= v107 << 16 >> v89;
          *v54 = v82;
          goto LABEL_201;
        }
      }
      v89 = (__int16)v84 + 1;
      if (*(&v124 + v89) != 45)
      {
        v54[v84 >> 5] |= 1 << ~(_BYTE)v81;
        v82 = *v54;
      }
      goto LABEL_200;
    }
    *a2 = 6;
    *(_QWORD *)(v3 + 136) = 0xFFFF000000000000;
    if (v117 >= 64)
      v28 = 64;
    else
      v28 = v117;
    if (v117 < 1)
    {
      v30 = 0;
    }
    else
    {
      v29 = 0;
      v30 = 0;
      do
      {
        *(&__s + v30++) = *(&v124 + v28 + ~v29);
        v29 = v30;
      }
      while (v28 > v30);
    }
    v111 = v14;
    v106 = v15 & 0xFE;
    *(&__s + v30) = 0;
    v31 = __s;
    if ((*(_DWORD *)(v7 + 4 * __s) & 0x40000000) != 0)
      v31 = __s + 32;
    v32 = *(_DWORD *)(v7 + 4 * v130);
    v119 = v31;
    v33 = v130 + 32;
    if ((v32 & 0x40000000) == 0)
      v33 = v130;
    v120 = v33;
    v121 = 0;
    if (!IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2))
    {
      v20 = 0;
      goto LABEL_83;
    }
    IHdecode(&v131, (__int16)(v117 - 2), 0, 0, 0, (unsigned __int16 *)a2);
    v34 = *(__int16 *)(v3 + 142);
    if (v34 == -1)
      goto LABEL_81;
    v35 = *((unsigned __int8 *)a2 + 745);
    v36 = v117;
    if (v117 >= 3 && v35 == 8)
    {
      v20 = 0;
      v37 = *(&v124 + v117 - *(__int16 *)(v3 + 142) - 3);
      if (v37 == 98)
      {
LABEL_82:
        v17 = v115;
LABEL_83:
        v40 = v131;
        if ((*(_DWORD *)(v7 + 4 * v131) & 0x40000000) != 0)
          v40 = v131 + 32;
        v121 = v40;
        *(_WORD *)(v3 + 142) = -1;
        if (!IHbsearch((unsigned __int8 *)&v119, (uint64_t)a2)
          || (IHdecode(v132, v113, 0, 0, 0, (unsigned __int16 *)a2),
              v41 = *(__int16 *)(v3 + 142),
              v41 == -1))
        {
          v18 = v117;
          goto LABEL_93;
        }
        v42 = *((unsigned __int8 *)a2 + 745);
        v18 = v117;
        if (v117 >= 4 && v42 == 8)
        {
          v43 = *(&v124 + v117 - *(__int16 *)(v3 + 142) - 4);
          if (v43 == 98 || v43 == 103)
            goto LABEL_93;
        }
        else
        {
          if (v117 < 4 || v42 != 9)
          {
LABEL_127:
            if (v106 != 8 || (v18 = v117, IsValidRMCC(&v124, (uint64_t)a2)))
            {
              v17 = v18 - v41 - 4;
              v20 = *(unsigned __int16 *)(v3 + 140);
              v123[v17 + 1] = 0;
            }
            goto LABEL_93;
          }
          if (*(&v124 + v117 - *(__int16 *)(v3 + 142) - 4) == 115)
          {
LABEL_93:
            v14 = v111;
            goto LABEL_94;
          }
        }
        if ((*(_DWORD *)(v7 + 4 * v123[v115]) & 0x40000000) == 0)
          goto LABEL_127;
        goto LABEL_93;
      }
      v17 = v115;
      if (v37 == 103)
        goto LABEL_83;
      v38 = v115;
      v36 = v117;
    }
    else
    {
      if (v117 < 3 || v35 != 9)
      {
LABEL_78:
        if (v106 != 8 || (valid = IsValidRMCC(v123, (uint64_t)a2), v36 = v117, valid))
        {
          v17 = v36 - v34 - 3;
          v20 = *(unsigned __int16 *)(v3 + 140);
          v123[v17 + 1] = 0;
          goto LABEL_83;
        }
        goto LABEL_81;
      }
      if (*(&v124 + v117 - *(__int16 *)(v3 + 142) - 3) == 115)
      {
LABEL_81:
        v20 = 0;
        goto LABEL_82;
      }
      v38 = v115;
    }
    if ((*(_DWORD *)(v7 + 4 * v123[v38]) & 0x40000000) == 0)
      goto LABEL_78;
    goto LABEL_81;
  }
  v110 = 0;
  if (v15 != 16)
    goto LABEL_51;
  if (*(_BYTE *)(v3 + 24) != 105)
  {
    v110 = 0;
    v14 = 0;
    v20 = 0;
    v108 = v123;
LABEL_140:
    v18 = v117;
    goto LABEL_94;
  }
  v18 = v117;
  v19 = (v117 - 2);
  if (*(&v124 + v19) != 39)
  {
    v110 = 0;
    v14 = 0;
    v20 = 0;
    v108 = v123;
    goto LABEL_94;
  }
  v108 = v123;
  if (*(&v124 + v115) != 115)
  {
    v110 = 0;
    v14 = 0;
    v20 = 0;
    goto LABEL_94;
  }
  result = 0;
  v123[v19] = 0;
  v18 = v117 - 2;
  *(&v124 + v19) = 0;
  if ((unsigned __int16)(v117 - 2) >= 3u)
  {
    v110 = 0;
    v14 = 0;
    v20 = 0;
    v17 = v113;
    goto LABEL_94;
  }
LABEL_10:
  *((_DWORD *)a2 + 1) = result;
  return result;
}

uint64_t IsValidRMCC(const char *a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  unsigned int v16;
  int v17;

  v2 = *(unsigned __int8 *)a1;
  if (v2 == 39)
    return 0;
  v4 = *(_QWORD *)(a2 + 760);
  v5 = *(_QWORD *)(a2 + 752);
  v6 = strlen(a1);
  if (v6 << 16 < 0x20000 || (*(_DWORD *)(v5 + 4 * a1[(unsigned __int16)v6 - 1]) & 0x40000000) != 0)
    return 0;
  v7 = *(unsigned __int16 *)(v4 + 94) - 1;
  v8 = a1[1];
  if (v8)
  {
    v9 = 1;
    v10 = v2;
    do
    {
      v11 = ((v2 & 0x7F) << 8)
          + ((unsigned __int16)v2 >> 7)
          + 2 * ((unsigned __int16)v2 >> 7)
          + 16 * ((unsigned __int16)v2 >> 7)
          + v8;
      if ((unsigned __int16)v11 <= 0x7FECu)
        v2 = v11;
      else
        v2 = v11 - 32749;
      v10 ^= v2;
      v8 = a1[++v9];
    }
    while (v8);
  }
  else
  {
    v10 = v2;
  }
  v12 = v10 & v7;
  if (((unsigned __int16)v10 & (unsigned __int16)v7) == 0)
    return 0;
  v13 = *(_QWORD *)(v4 + 64);
  v14 = *(unsigned __int8 *)(v13 + (unsigned __int16)(v10 & v7));
  if (v14 == v2)
    return 0;
  v16 = 0;
  v17 = 3 - (v2 & 0x7F);
  do
  {
    result = 1;
    if (!v14)
      break;
    if (v16 > 0x32)
      break;
    result = 0;
    ++v16;
    v17 += 2 * (v2 & 0x7F);
    v12 = (v17 + v12) & v7;
    v14 = *(unsigned __int8 *)(v13 + (unsigned __int16)v12);
  }
  while (v14 != v2);
  return result;
}

uint64_t IHinit(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 551))
    goto LABEL_7;
  if (*(_QWORD *)(a1 + 760))
    return 0;
  v3 = malloc_type_calloc(1uLL, 0xD8uLL, 0x10300403ED6EF0DuLL);
  *(_QWORD *)(a1 + 760) = v3;
  if (!v3)
  {
    *(_BYTE *)(a1 + 750) |= 4u;
    return 8;
  }
  v3[26] = 0;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *(_OWORD *)v3 = 0u;
  if (IHintget(a1))
  {
    IHterm(a1);
LABEL_7:
    *(_BYTE *)(a1 + 748) |= 2u;
    return 8;
  }
  v4 = SLLngToA(*(unsigned __int8 *)(a1 + 745));
  result = 0;
  *(_QWORD *)(a1 + 752) = v4;
  return result;
}

uint64_t IHintchk(uint64_t a1, int a2)
{
  unsigned int v2;
  BOOL v4;
  unsigned int v5;

  v2 = __rev16(*(unsigned __int16 *)(a1 + 384));
  v4 = *(_BYTE *)a1 == 67 && v2 == 7 && *(unsigned __int8 *)(a1 + 387) == a2;
  v5 = __rev16(*(unsigned __int16 *)(a1 + 388));
  if (v4 && v5 == 3)
    return 0;
  else
    return 8;
}

uint64_t CloseRamFile(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (SLClose(a1) == 8)
  {
    *(_BYTE *)(a2 + 750) |= 1u;
    return 8;
  }
  return a3;
}

uint64_t IHintget(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  char v4;
  void *v5;
  uint64_t v6;
  char v7;
  void *v8;
  __int16 v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  void *v16;
  unint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  size_t v21;
  void *v22;
  void *v23;
  char *v24;
  char *v25;
  BOOL v26;
  int Data;
  int v29;
  int v30[2];

  v2 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)v30 = 0;
  if (SLOpen(a1 + 40, a1 + 551, &v30[1], 0) == 8)
  {
    v3 = (_BYTE *)(a1 + 750);
    v4 = 2;
LABEL_31:
    *v3 |= v4;
    return 8;
  }
  v5 = malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v5)
    goto LABEL_25;
  v6 = (uint64_t)v5;
  if (SLFRead(v30[1], 1024, v5, (unsigned int *)v30))
  {
    free((void *)v6);
    v7 = *(_BYTE *)(a1 + 750) | 8;
LABEL_26:
    *(_BYTE *)(a1 + 750) = v7;
    goto LABEL_27;
  }
  if (__rev16(*(unsigned __int16 *)(v6 + 390)) - 1 >= 2
    || IHintchk(v6, *(unsigned __int8 *)(a1 + 745)) == 8)
  {
    *(_BYTE *)(a1 + 750) |= 0x10u;
    v8 = (void *)v6;
LABEL_9:
    free(v8);
LABEL_27:
    v26 = SLClose(v30[1]) == 8;
    goto LABEL_28;
  }
  *(_WORD *)(v2 + 96) = bswap32(*(unsigned __int16 *)(v6 + 732)) >> 16;
  *(_WORD *)(v2 + 6) = bswap32(*(unsigned __int16 *)(v6 + 714)) >> 16;
  *(_WORD *)(v2 + 8) = bswap32(*(unsigned __int16 *)(v6 + 716)) >> 16;
  *(_WORD *)(v2 + 4) = bswap32(*(unsigned __int16 *)(v6 + 718)) >> 16;
  *(_WORD *)(v2 + 94) = bswap32(*(unsigned __int16 *)(v6 + 736)) >> 16;
  *(_BYTE *)(v2 + 24) = *(_BYTE *)(v6 + 713);
  v9 = *(unsigned __int8 *)(v6 + 724);
  v10 = *(unsigned __int8 *)(v6 + 725);
  v11 = *(unsigned __int16 *)(v6 + 726);
  v12 = __rev16(v11);
  v13 = (bswap32(v11) >> 16) | 0x10000;
  v14 = __rev16(*(unsigned __int16 *)(v6 + 728)) == 1 ? v13 : v12;
  *(_DWORD *)(v2 + 112) = v14;
  free((void *)v6);
  v15 = malloc_type_calloc(1uLL, 0x202uLL, 0xBD772280uLL);
  *(_QWORD *)(v2 + 32) = v15;
  if (!v15)
    goto LABEL_25;
  v16 = malloc_type_calloc(1uLL, 0x101uLL, 0xA276D99EuLL);
  *(_QWORD *)(v2 + 40) = v16;
  if (!v16)
    goto LABEL_25;
  v17 = (__int16)(v9 << 8) | v10;
  v18 = malloc_type_calloc(1uLL, v17 + 1, 0x15EEBBC5uLL);
  *(_QWORD *)(v2 + 48) = v18;
  if (!v18)
    goto LABEL_25;
  if (*(_WORD *)(v2 + 94))
  {
    v19 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v2 + 94), 0x3DAFC599uLL);
    *(_QWORD *)(v2 + 64) = v19;
    if (!v19)
      goto LABEL_25;
  }
  v20 = malloc_type_calloc(1uLL, 8 * *(unsigned __int16 *)(v2 + 96), 0x1000040662E9A8EuLL);
  *(_QWORD *)(v2 + 104) = v20;
  if (!v20)
    goto LABEL_25;
  v21 = *(unsigned int *)(v2 + 112);
  if ((_DWORD)v21)
  {
    v22 = malloc_type_calloc(v21, 1uLL, 0x27C6D0B0uLL);
    *(_QWORD *)(v2 + 56) = v22;
    if (!v22)
      goto LABEL_25;
  }
  v23 = malloc_type_calloc(1uLL, 0x400uLL, 0x1000040BDFB0063uLL);
  *(_QWORD *)(v2 + 16) = v23;
  if (!v23 || (v24 = (char *)malloc_type_calloc(1uLL, 0x201uLL, 0x3D8B83A1uLL)) == 0)
  {
LABEL_25:
    v7 = *(_BYTE *)(a1 + 750) | 4;
    goto LABEL_26;
  }
  v25 = v24;
  if (ReadCodes(v30[1], (uint64_t *)(v2 + 32), v24, v17, a1))
  {
    v8 = v25;
    goto LABEL_9;
  }
  Data = ReadData(v30[1], v2 + 32, *(_DWORD *)(v2 + 112), v25, a1);
  free(v25);
  v29 = SLClose(v30[1]);
  v26 = v29 == 8;
  if (Data)
  {
LABEL_28:
    if (!v26)
      return 8;
    goto LABEL_30;
  }
  if (v29 == 8)
  {
LABEL_30:
    v3 = (_BYTE *)(a1 + 750);
    v4 = 1;
    goto LABEL_31;
  }
  return 0;
}

uint64_t ReadCodes(unsigned int a1, uint64_t *a2, char *a3, int a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  unsigned int v13;

  v13 = 0;
  v9 = *(_QWORD *)(a5 + 760);
  if (SLFRead(a1, a4, (void *)a2[2], &v13))
    goto LABEL_6;
  if (SLFRead(a1, 512, a3, &v13))
    goto LABEL_6;
  v10 = 0;
  v11 = *a2;
  do
  {
    *(_WORD *)(v11 + v10) = *(_WORD *)&a3[v10];
    v10 += 2;
  }
  while (v10 != 512);
  if (SLFRead(a1, 256, (void *)a2[1], &v13))
    goto LABEL_6;
  if (!*(_WORD *)(v9 + 94))
    return 0;
  result = SLFRead(a1, *(unsigned __int16 *)(v9 + 94), (void *)a2[4], &v13);
  if ((_DWORD)result)
  {
LABEL_6:
    *(_BYTE *)(a5 + 750) |= 8u;
    return 8;
  }
  return result;
}

uint64_t ReadData(unsigned int a1, uint64_t a2, int a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v17;

  v9 = *(_QWORD *)(a5 + 760);
  v17 = 0;
  if (*(_WORD *)(v9 + 96))
  {
    v11 = 0;
    v12 = 0;
    while (!SLFRead(a1, 3, (void *)(*(_QWORD *)(v9 + 104) + v11), &v17))
    {
      ++v12;
      v11 += 8;
      if (v12 >= *(unsigned __int16 *)(v9 + 96))
      {
        if (!*(_WORD *)(v9 + 96))
          goto LABEL_9;
        v13 = 0;
        v14 = 0;
        while (!SLFRead(a1, 3, a4, &v17))
        {
          v15 = *(_QWORD *)(v9 + 104) + v13;
          *(_WORD *)(v15 + 4) = bswap32(*(unsigned __int16 *)a4) >> 16;
          *(_BYTE *)(v15 + 6) = a4[2];
          ++v14;
          v13 += 8;
          if (v14 >= *(unsigned __int16 *)(v9 + 96))
            goto LABEL_9;
        }
        goto LABEL_11;
      }
    }
    goto LABEL_11;
  }
LABEL_9:
  if (a3 && (unsigned __int16)SLHRead(a1, a3, *(char **)(a2 + 24), &v17))
  {
LABEL_11:
    *(_BYTE *)(a5 + 750) |= 8u;
    return 8;
  }
  return 0;
}

uint64_t IHterm(uint64_t a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = *(_QWORD **)(a1 + 760);
  if (v1)
  {
    v3 = (void *)v1[2];
    if (v3)
    {
      free(v3);
      v1[2] = 0;
    }
    v4 = (void *)v1[4];
    if (v4)
    {
      free(v4);
      v1[4] = 0;
    }
    v5 = (void *)v1[5];
    if (v5)
    {
      free(v5);
      v1[5] = 0;
    }
    v6 = (void *)v1[6];
    if (v6)
    {
      free(v6);
      v1[6] = 0;
    }
    v7 = (void *)v1[8];
    if (v7)
    {
      free(v7);
      v1[8] = 0;
    }
    v8 = (void *)v1[7];
    if (v8)
    {
      free(v8);
      v1[7] = 0;
    }
    v9 = (void *)v1[13];
    if (v9)
    {
      free(v9);
      v1[13] = 0;
    }
    free(*(void **)(a1 + 760));
    *(_QWORD *)(a1 + 760) = 0;
  }
  return 0;
}

uint64_t PDadd(uint64_t a1, char *a2, int a3, int a4, char *a5, int a6, uint64_t *a7, uint64_t a8, unsigned __int8 a9, unsigned __int16 a10, uint64_t *a11)
{
  uint64_t result;
  uint64_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  unsigned __int16 v27;
  unsigned int v28;
  unsigned __int16 v29;
  unsigned __int16 v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  __int16 v48;
  unsigned int v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  unsigned __int16 v56;
  __int16 v57;
  __int16 v58;

  v58 = a6;
  if (*(unsigned __int16 *)(a1 + 2112) > 0xB41u)
    return 5107;
  v20 = *(_QWORD *)(a1 + 2168);
  v53 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
  v21 = strlen(a2);
  v22 = v21;
  v23 = 0;
  if (a4 && a6)
  {
    if (*a5)
    {
      v23 = 0;
    }
    else
    {
      LOBYTE(a4) = 0;
      v23 = 5158;
    }
  }
  if (!v21)
    return 0;
  v24 = *(unsigned __int16 *)(a1 + 2106);
  v52 = v23;
  if (v24 >= 0x3E8)
  {
    if (*(unsigned __int16 *)(a1 + 2104) >= 6u)
    {
      v50 = 1;
      v51 = 0;
      goto LABEL_18;
    }
  }
  else if (v24 >= 0x64 && *(unsigned __int16 *)(a1 + 2104) > 5u)
  {
    v50 = 0;
    v51 = 0;
    goto LABEL_18;
  }
  if (PDexpand(a1))
    return 5107;
  v50 = 1;
  v51 = 1;
LABEL_18:
  v57 = 0;
  v56 = 0;
  v55 = 0;
  PDsearch(a1, a2, &v57, (__int16 *)&v56, 2, 0, 0);
  v25 = v56;
  if (v56 == 0xFFFF)
  {
    while (!PDexpand(a1))
    {
      PDsearch(a1, a2, &v57, (__int16 *)&v56, 2, 0, 0);
      v25 = v56;
      if (v56 != 0xFFFF)
      {
        v51 = 1;
        goto LABEL_22;
      }
    }
    return 5107;
  }
LABEL_22:
  *(_WORD *)(*(_QWORD *)(v20 + 32) + 2 * v25) = *(_WORD *)(v20 + 24);
  v26 = *(_BYTE **)(v20 + 48);
  v27 = *(_WORD *)(v20 + 58);
  v28 = *(unsigned __int16 *)(v20 + 56);
  if (!v26[20 * v27 + 18])
  {
    v29 = *(_WORD *)(v20 + 56);
    LOWORD(v28) = *(_WORD *)(v20 + 58);
    goto LABEL_36;
  }
  if (*(_WORD *)(v20 + 56))
  {
    v27 = 0;
    while (v26[20 * v27 + 18])
    {
      if (v28 <= ++v27)
        goto LABEL_32;
    }
    *(_WORD *)(v20 + 58) = v27;
    v30 = v27;
  }
  else
  {
    v30 = 0;
  }
  if (v28 == v30)
  {
LABEL_32:
    if (v28 <= 0x8CC)
    {
      v31 = (char *)malloc_type_realloc(v26, 20 * v28 + 20480, 0x43130A21uLL);
      *(_QWORD *)(v20 + 48) = v31;
      if (v31)
      {
        bzero(&v31[20 * v28], 0x5000uLL);
        *(_WORD *)(v20 + 58) = v28;
        v29 = *(_WORD *)(v20 + 56) + 1024;
        *(_WORD *)(v20 + 56) = v29;
        v27 = v28;
        goto LABEL_36;
      }
    }
    return 5107;
  }
  v29 = v28;
  LOWORD(v28) = v27;
  v27 = v30;
LABEL_36:
  if ((unsigned __int16)(v28 + 1) < v29)
    *(_WORD *)(v20 + 58) = v28 + 1;
  v32 = *(_QWORD *)(v20 + 40);
  v33 = *(unsigned __int16 *)(v20 + 24);
  *(_WORD *)(v20 + 24) = v33 + 1;
  *(_BYTE *)(v32 + v33) = v27 / 0xFFu;
  *(_BYTE *)(*(_QWORD *)(v20 + 40) + *(unsigned __int16 *)(v20 + 24)) = v27 + v27 / 0xFFu;
  v34 = *(_QWORD *)(v20 + 48);
  v35 = v27;
  v36 = v34 + 20 * v27;
  *(_WORD *)(v36 + 18) = 1;
  v37 = (char *)(v36 + 19);
  if (a3)
  {
    *v37 = 1;
    v38 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a10);
    ++*(_WORD *)(v38 + 2094);
    v39 = 3;
  }
  else
  {
    v39 = 2;
  }
  v40 = v53;
  if ((_BYTE)a4)
    *v37 = v39;
  if (*(_BYTE *)(a1 + 2092))
  {
    v41 = v34 + 20 * v35;
    v42 = *a11;
    *(_DWORD *)(v41 + 8) = *((_DWORD *)a11 + 2);
    *(_QWORD *)v41 = v42;
  }
  v54 = v35;
  ++*(_WORD *)(v20 + 24);
  SLrecap((unsigned __int8 *)a2, v22, a9, a8, a9, v40);
  v43 = PDhypins(a2, a7, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a10) + 2068));
  if ((_BYTE)a4)
  {
    result = make_alt_entry(a5, &v55, &v58, a10);
    if ((_DWORD)result == 8)
      return result;
    v44 = *(_QWORD *)(v20 + 48) + 20 * v54;
    *(_DWORD *)(v44 + 12) = v55;
    *(_WORD *)(v44 + 16) = v58;
  }
  v45 = *(_QWORD *)(v20 + 40);
  v46 = *(unsigned __int16 *)(v20 + 24);
  *(_WORD *)(v20 + 24) = v46 + 1;
  *(_BYTE *)(v45 + v46) = v43;
  strncpy((char *)(*(_QWORD *)(v20 + 40) + *(unsigned __int16 *)(v20 + 24)), a2, v43);
  v47 = *(_WORD *)(v20 + 24) + v43;
  *(_WORD *)(v20 + 24) = v47;
  v48 = *(_WORD *)(v20 + 22) + 1;
  *(_WORD *)(v20 + 22) = v48;
  *(_WORD *)(v20 + 20) = v48;
  *(_WORD *)(a1 + 2104) = *(_WORD *)(v20 + 12) - v48;
  *(_WORD *)(a1 + 2106) = *(_WORD *)(v20 + 6) - v47;
  if (v50)
    v49 = v52;
  else
    v49 = 5152;
  if (v51)
    return 5156;
  else
    return v49;
}

uint64_t PDexpand(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  int v4;
  __int16 v5;
  unsigned __int16 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  void *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  _BYTE *v21;
  char *v22;
  char v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  unsigned __int16 v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t result;
  __int16 v47;
  __int16 v48;
  __int16 v49;
  unsigned __int16 v50;
  __int16 v51;
  char *v52;
  __int16 v53;
  int v54;
  _BYTE *v55;
  __int16 v56;
  int v57;
  int size;
  int size_4;

  v2 = *(char **)(a1 + 2152);
  v55 = *(_BYTE **)(a1 + 2144);
  v3 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
  v4 = *(unsigned __int16 *)(a1 + 2064);
  if ((v4 - 86) >= 9)
    v5 = v4 + 10;
  else
    v5 = 95;
  if (v5)
    v6 = v5;
  else
    v6 = 10;
  if (v6 > 0x5Fu)
    return 8;
  v7 = v3;
  v57 = 0;
  size = 0;
  v8 = v6 << 10;
  v56 = 0;
  CalculateSize((_WORD *)&size + 1, &size, &v56, (_WORD *)&v57 + 1, &v57, v8);
  v9 = *(_QWORD *)(a1 + 2168);
  v10 = (unsigned __int16)size;
  v11 = malloc_type_calloc(1uLL, HIWORD(size), 0x100004077774924uLL);
  *(_QWORD *)(v9 + 64) = v11;
  if (!v11)
    return 8;
  v12 = malloc_type_realloc(*(void **)(v9 + 40), v10, 0x100004077774924uLL);
  *(_QWORD *)(v9 + 40) = v12;
  if (!v12)
    return 8;
  v50 = v6;
  v51 = *(_WORD *)(v9 + 16);
  InitializeMask(v9);
  if (HIWORD(v57))
  {
    v13 = 0;
    v14 = *(_QWORD *)(v9 + 64);
    do
      *(_WORD *)(v14 + 2 * v13++) = -1;
    while (v13 < HIWORD(v57));
  }
  v15 = 0;
  v16 = 0;
  *(_BYTE *)v9 = 1;
  v52 = v2;
  while (1)
  {
    v17 = *(unsigned __int16 *)(*(_QWORD *)(v9 + 32) + 2 * (unsigned __int16)v15);
    if (v17 != 0xFFFF)
    {
      v53 = *(_WORD *)(*(_QWORD *)(v9 + 32) + 2 * (unsigned __int16)v15);
      v54 = v15;
      v18 = v17 + *(_QWORD *)(v9 + 40);
      v19 = *(unsigned __int8 *)(v18 + 2);
      strncpy(v2, (const char *)(v18 + 3), v19);
      if (v19)
      {
        v20 = v19;
        v21 = v55;
        v22 = v2;
        do
        {
          v24 = *v22++;
          v23 = v24;
          v25 = v24 + 32;
          if ((*(_DWORD *)(v7 + 4 * v24) & 0x40000000) != 0)
            v23 = v25;
          *v21++ = v23;
          --v20;
        }
        while (v20);
      }
      v55[v19] = 0;
      PDhypstrip(v55, (_QWORD *)(a1 + 2076), *(unsigned __int8 *)(a1 + 2068));
      v26 = v9;
      v27 = *(unsigned __int16 *)(v9 + 16);
      v28 = HIWORD(v57);
      v29 = *(_QWORD *)(a1 + 2168);
      v30 = *(unsigned __int16 *)(v29 + 14);
      size_4 = 0;
      v31 = strlen(v55);
      SLfun((uint64_t)v55, 0, (__int16)(v31 - 1), (unsigned __int16 *)&size_4 + 1, &size_4);
      v32 = (unsigned __int16)size_4;
      v33 = BYTE2(size_4);
      *(_WORD *)(a1 + 2110) = 0;
      *(_WORD *)(a1 + 2114) = -1;
      if (!v30)
        goto LABEL_47;
      v34 = v32 & v27;
      v35 = v34 >= v28 ? v28 : 0;
      v36 = v34 - v35;
      v37 = 3 - v33;
      v38 = 2 * v33;
      v39 = *(_QWORD *)(v29 + 64);
      v40 = -1;
      do
      {
        v41 = v36;
        while (1)
        {
          v37 += v38;
          v42 = (v41 + v37) & v27;
          if (v42 >= v28)
            v43 = v28;
          else
            v43 = 0;
          v36 = v42 - v43;
          LOWORD(size_4) = v42 - v43;
          if ((unsigned __int16)v41 == (unsigned __int16)(v42 - v43))
          {
            if (v42 == v43)
              v36 = 1;
            else
              v36 = v41 - 1;
            LOWORD(size_4) = v36;
          }
          LOWORD(v30) = v30 - 1;
          v44 = *(unsigned __int16 *)(v39 + 2 * (unsigned __int16)v41);
          if (v44 >= 0xFFFE)
            break;
          v41 = v36;
          if (!(_WORD)v30)
            goto LABEL_44;
        }
        if (v40 == 0xFFFF)
          v40 = v41;
      }
      while (v44 != 0xFFFF && (unsigned __int16)v30 != 0);
LABEL_44:
      if (v40 == 0xFFFF)
      {
LABEL_47:
        *(_WORD *)(v26 + 16) = v51;
        return 8;
      }
      v9 = v26;
      *(_WORD *)(*(_QWORD *)(v26 + 64) + 2 * v40) = v53;
      ++v16;
      v2 = v52;
      v15 = v54;
      if (*(unsigned __int16 *)(a1 + 2112) <= (unsigned __int16)v16)
        break;
    }
    ++v15;
  }
  free(*(void **)(v26 + 32));
  result = 0;
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v26 + 64);
  *(_QWORD *)(v26 + 64) = 0;
  *(_WORD *)(v26 + 2) = HIWORD(size);
  *(_WORD *)(v26 + 4) = HIWORD(v57);
  v47 = v57;
  *(_WORD *)(v26 + 12) = v57;
  *(_WORD *)(a1 + 2116) = v47;
  *(_WORD *)(v26 + 14) = v56;
  v48 = size;
  *(_WORD *)(v26 + 6) = size;
  *(_DWORD *)(v26 + 8) = v8;
  *(_WORD *)(a1 + 2064) = v50;
  *(_WORD *)(a1 + 2104) = v47 - *(_WORD *)(v26 + 22);
  v49 = v48 - *(_WORD *)(v26 + 24);
  *(_WORD *)(a1 + 2106) = v49;
  *(_WORD *)(a1 + 2108) = v49;
  return result;
}

uint64_t PDapp(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  _WORD *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;
  _WORD *v12;
  __int16 v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 *v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned int v20;
  unsigned __int16 v21;

  if (!a1)
    return 8;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  ++wPDMCPmtxCnt;
  if (bInitPDMtx)
  {
    if (bInitPDMtx != 1)
    {
      while (1)
        ;
    }
    bInitPDMtx = 2;
    if (SLInitMutex((int)"PD_MCP_MTX", &hPDMCPmtx))
      goto LABEL_7;
    bInitPDMtx = 0;
  }
  if (SLLockMutex(&hPDMCPmtx))
  {
LABEL_7:
    --wPDMCPmtxCnt;
    return 8;
  }
  if (a2 == 1 && !pdmcpsta)
  {
    if (PDinit())
      goto LABEL_37;
    LOWORD(v6) = 0;
    v7 = pMCPbuff;
    v8 = *(_WORD **)(pMCPbuff + 24);
    *v8 = 0;
    goto LABEL_15;
  }
  v7 = pMCPbuff;
  if (a2 == 2 && !pMCPbuff)
  {
    if (*(_WORD *)(a1 + 12) && *(int *)(a1 + 8) > 7)
      goto LABEL_64;
    v4 = 8;
    *(_DWORD *)(a1 + 8) = 8;
    v13 = 5051;
    goto LABEL_40;
  }
  if (a2 == 2)
  {
    v16 = *(unsigned __int16 *)(a1 + 2);
    v17 = *(unsigned __int16 **)(pMCPbuff + 24);
    if (v16 <= *v17)
    {
      v18 = *(_QWORD *)(pMCPbuff + 32);
      if (*(_WORD *)(v18 + 2 * v16) == 9090)
      {
        v19 = 1;
        while (1)
        {
          v20 = v19;
          if (*(_WORD *)(*(_QWORD *)(pMCPbuff + 16) + 2 * v19) == 9090
            && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v19) + 2160) == (_DWORD)v16)
          {
            break;
          }
          ++v19;
          if (v20 > **(unsigned __int16 **)(pMCPbuff + 8))
          {
            *(_WORD *)(v18 + 2 * v16) = 0;
            v21 = *v17;
            do
            {
              if (*(_WORD *)(v18 + 2 * v21))
                break;
              *v17 = --v21;
            }
            while (v21);
            free(*(void **)(*(_QWORD *)(v7 + 40) + 8 * *(unsigned __int16 *)(a1 + 2)));
            if (**(_WORD **)(pMCPbuff + 24))
            {
              v4 = 0;
              goto LABEL_65;
            }
            PDterm();
            --wPDMCPmtxCnt;
            SLUnlockMutex(&hPDMCPmtx);
            if (wPDMCPmtxCnt)
              return 0;
            SLTermMutex(&hPDMCPmtx);
            v4 = 0;
            bInitPDMtx = 1;
            return v4;
          }
        }
        if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
        {
          v4 = 8;
          *(_DWORD *)(a1 + 8) = 8;
          v13 = 5110;
          goto LABEL_40;
        }
      }
      else if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
      {
        v4 = 8;
        *(_DWORD *)(a1 + 8) = 8;
        v13 = 5104;
        goto LABEL_40;
      }
    }
    else if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
    {
      v4 = 8;
      *(_DWORD *)(a1 + 8) = 8;
      v13 = 5103;
      goto LABEL_40;
    }
    goto LABEL_64;
  }
  if (a2 == 1)
  {
    v8 = *(_WORD **)(pMCPbuff + 24);
    v6 = (unsigned __int16)*v8;
    if (v6 < 5)
    {
LABEL_15:
      v9 = v6 + 1;
      *v8 = v9;
      *(_WORD *)(a1 + 2) = v9;
      *(_WORD *)(*(_QWORD *)(v7 + 32) + 2 * (unsigned __int16)*v8) = 9090;
LABEL_16:
      if (!*(_BYTE *)a1)
        *(_WORD *)a1 = 0;
      v10 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
      v11 = *(unsigned __int16 *)(a1 + 2);
      *(_QWORD *)(*(_QWORD *)(pMCPbuff + 40) + 8 * v11) = v10;
      if (v10)
      {
        v4 = 0;
        v12 = *(_WORD **)(*(_QWORD *)(pMCPbuff + 40) + 8 * v11);
        *v12 = v11;
        v12[1] = *(_WORD *)a1;
LABEL_65:
        --wPDMCPmtxCnt;
        SLUnlockMutex(&hPDMCPmtx);
        return v4;
      }
      *(_WORD *)(*(_QWORD *)(pMCPbuff + 32) + 2 * v11) = 0;
LABEL_37:
      if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
      {
        v4 = 8;
        *(_DWORD *)(a1 + 8) = 8;
        v13 = 1030;
        goto LABEL_40;
      }
LABEL_64:
      v4 = 8;
      goto LABEL_65;
    }
    v14 = 0;
    while (v6 >= ++v14)
    {
      v15 = *(_QWORD *)(pMCPbuff + 32);
      if (!*(_WORD *)(v15 + 2 * v14))
      {
        *(_WORD *)(a1 + 2) = v14;
        *(_WORD *)(v15 + 2 * v14) = 9090;
        v6 = (unsigned __int16)*v8;
        break;
      }
    }
    if (v6 >= v14)
      goto LABEL_16;
    if (*(_WORD *)(a1 + 12) && *(int *)(a1 + 8) > 7)
      goto LABEL_64;
    v4 = 8;
    *(_DWORD *)(a1 + 8) = 8;
    v13 = 1012;
LABEL_40:
    *(_WORD *)(a1 + 12) = v13;
    goto LABEL_65;
  }
  if (!*(_WORD *)(a1 + 12) || *(int *)(a1 + 8) <= 7)
  {
    v4 = 8;
    *(_DWORD *)(a1 + 8) = 8;
    *(_WORD *)(a1 + 12) = 1100;
    return v4;
  }
  return 8;
}

uint64_t PDcorrec(char *__src, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v6;
  uint16x4_t v7;
  uint16x4_t v8;
  char v9;
  signed int v10;
  uint64_t v11;
  int8x8_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  signed int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  __int16 v24;
  char *v25;

  if (*(__int16 *)(a4 + 40) <= *(__int16 *)(a4 + 42))
  {
    v25 = strcpy(*(char **)(*(_QWORD *)(a4 + 32) + 16), __src);
    v6 = strlen(v25);
    v9 = v6;
    v24 = *(_WORD *)(a4 + 40);
    v10 = *(__int16 *)(a4 + 2162);
    if (v10 >= 1)
    {
      v11 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(a3 + 160) + v11) = *(_QWORD *)(a3 + 112) + v11;
        *(_QWORD *)(*(_QWORD *)(a3 + 152) + v11) = *(_QWORD *)(a3 + 112) + v11 + 4;
        v11 += 8;
      }
      while (8 * (unsigned __int16)v10 != v11);
    }
    *(_WORD *)(a4 + 2124) = 0;
    *(_DWORD *)(a4 + 2144) = 0x20000;
    if ((__int16)v6 > 5)
    {
      v7.i32[0] = 11;
      v8.i32[0] = (__int16)v6;
      v12 = vbsl_s8((int8x8_t)vdup_lane_s16((int16x4_t)vcgt_u16(v8, v7), 0), (int8x8_t)0x2000200040004, (int8x8_t)0x2000200030003);
      *(_WORD *)(a4 + 2142) = 3;
    }
    else
    {
      *(_WORD *)(a4 + 2142) = 2;
      v12 = (int8x8_t)0x1000200020002;
    }
    v13 = 0;
    *(int8x8_t *)(a4 + 2134) = v12;
    v23 = (__int16)v6;
    if (*(_WORD *)(a3 + 104) && (__int16)v6 >= 1)
    {
      v14 = 0;
      v13 = 0;
      v15 = v6;
      do
      {
        LOWORD(v16) = 0;
        v17 = (unsigned __int8 *)&v25[v14];
        do
        {
          if ((int)SLstrncmp(*(_BYTE **)(*(_QWORD *)(a3 + 160)+ 8 * (__int16)(((__int16)v10 + (__int16)v16) >> 1)), v17, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176)+ (__int16)(((__int16)v10 + (__int16)v16) >> 1))) >= 0)v10 = ((__int16)v10 + (__int16)v16) >> 1;
          else
            v16 = ((__int16)v10 + (__int16)v16) >> 1;
        }
        while ((__int16)v10 - (__int16)v16 > 1);
        LOWORD(v18) = v10 - (*(unsigned __int16 *)(a4 + 2162) == (unsigned __int16)v10);
        do
        {
          v19 = (__int16)v18;
          if (!SLstrncmp(*(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)v18), v17, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)v18)))
          {
            if (v13 <= 999)
            {
              v20 = a4 + v13;
              *(_BYTE *)(v20 + 2164) = v9 - v14;
              v13 += 2;
              *(_BYTE *)(v20 + 2165) = v19;
            }
            goto LABEL_23;
          }
          v10 = *(__int16 *)(a4 + 2162);
          if ((int)v19 >= v10 || **(unsigned __int8 **)(*(_QWORD *)(a3 + 160) + 8 * v19) > *v17)
            break;
LABEL_23:
          v18 = (__int16)(v19 + 1);
          v10 = *(__int16 *)(a4 + 2162);
        }
        while (v18 < v10);
        ++v14;
      }
      while (v14 != v15);
    }
    v21 = a4 + 2164;
    *(_BYTE *)(v21 + v13) = -1;
    *(_BYTE *)(v21 + (__int16)(v13 + 1)) = -1;
    PDdecode((unsigned __int8 *)v25, v23, a3, (unsigned __int16 *)a4);
    PDcorsrt(v25, v24, (__int16)(*(_WORD *)(a4 + 40) - 1), a3, (_QWORD *)a4);
  }
  return 0;
}

uint64_t PDcorsrt(char *__src, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int v16;
  int v17;
  int v18;
  __int16 v19;
  uint64_t v20;
  unsigned __int8 v21;
  int v22;
  int v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  __int16 v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  __int16 v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v53;
  uint64_t v54;
  _OWORD v55[16];
  _OWORD v56[16];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v8 = a5[398];
  v9 = a5[396];
  v10 = *(char **)(a5[4] + 24);
  strcpy(v10, __src);
  v53 = a2;
  if (a2 <= (int)a3)
  {
    v54 = *(_QWORD *)(v8 + 104);
    v11 = *(_QWORD *)(a4 + 56);
    LOWORD(v12) = a2;
    do
    {
      v13 = a3;
      v14 = (__int16)v12;
      v15 = *(const char **)(v54 + 8 * (__int16)v12);
      v16 = strlen(v10);
      v17 = strlen(v15);
      memset(v56, 0, sizeof(v56));
      memset(v55, 0, sizeof(v55));
      if (v16 << 16 >= 1)
      {
        v18 = 0;
        v19 = 0;
        do
        {
          v20 = v10[v19];
          if ((_DWORD)v20 != v10[v18 + 1])
          {
            if ((*(_DWORD *)(v11 + 4 * v20) & 0x40000000) != 0)
              v21 = v20 + 32;
            else
              v21 = v10[v19];
            ++*((_BYTE *)v56 + v21);
          }
          v18 = ++v19;
        }
        while ((__int16)v16 > v19);
      }
      v22 = v17 << 16;
      v23 = (__int16)v17;
      if (v17 << 16 >= 1)
      {
        v24 = 0;
        v25 = 0;
        do
        {
          v26 = v15[v25];
          if ((_DWORD)v26 != v15[v24 + 1])
          {
            if ((*(_DWORD *)(v11 + 4 * v26) & 0x40000000) != 0)
              v27 = v26 + 32;
            else
              v27 = v15[v25];
            ++*((_BYTE *)v55 + v27);
          }
          v24 = ++v25;
        }
        while ((__int16)v17 > v25);
      }
      v28 = 0;
      v29 = 0;
      do
      {
        v30 = *((unsigned __int8 *)v56 + v28) - *((unsigned __int8 *)v55 + v28);
        if (v30)
        {
          if (v30 < 0)
            v30 = *((unsigned __int8 *)v55 + v28) - *((unsigned __int8 *)v56 + v28);
          if ((*(_DWORD *)(v11 + 4 * v28) & 0x10000000) != 0)
            v29 += 2 * v30;
          else
            v29 += 3 * v30;
        }
        ++v28;
      }
      while (v28 != 256);
      if (v16 << 16 < 1)
      {
        v33 = 0;
      }
      else
      {
        v31 = 0;
        v32 = 0;
        v33 = 0;
        do
        {
          if (v22 >= 1)
          {
            v34 = 0;
            v35 = 0;
            do
            {
              v36 = 0;
              do
              {
                v37 = v36;
                v38 = v31 + (uint64_t)(__int16)v36;
                v39 = v34 + (uint64_t)(__int16)v36++;
              }
              while ((int)v39 < v23 && v10[v38] == v15[v39] && (int)v38 < (__int16)v16);
              if (v37 > v33)
                v33 = v37;
              v34 = (__int16)++v35;
            }
            while (v23 > (__int16)v35);
          }
          v31 = (__int16)++v32;
        }
        while ((__int16)v16 > (__int16)v32);
      }
      v42 = v16 - v23;
      if ((__int16)v16 - v23 < 0)
        v42 = v23 - v16;
      *(_WORD *)(v9 + 2 * v14) = 2 * v29 + 4 * v42 - v33 + 16 * (v10[(__int16)v16 - 1] != v15[v23 - 1]);
      v12 = (__int16)(v14 + 1);
      a3 = v13;
    }
    while (v12 <= (int)v13);
  }
  if (v53 < (int)a3)
  {
    v43 = a3 + v53;
    v44 = v53;
    do
    {
      if (v43 - v44 > v53)
      {
        v45 = v53;
        v46 = v53;
        do
        {
          v47 = *(__int16 *)(v9 + 2 * v46);
          v48 = v45 + 1;
          v49 = *(__int16 *)(v9 + 2 * (v45 + 1));
          if (v47 > v49)
          {
            v50 = *(_QWORD *)(v8 + 104);
            v51 = *(_QWORD *)(v50 + 8 * v46);
            *(_QWORD *)(v50 + 8 * v46) = *(_QWORD *)(v50 + 8 * v48);
            *(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * v48) = v51;
            *(_WORD *)(v9 + 2 * v46) = v49;
            *(_WORD *)(v9 + 2 * v48) = v47;
          }
          v45 = ++v46;
        }
        while (v43 - v44 > v46);
      }
      ++v44;
    }
    while (v44 != (_DWORD)a3);
  }
  return 10;
}

uint64_t PDdb(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v7;
  uint64_t result;
  __int16 v9;
  _WORD *v10;
  unsigned int v11;
  unsigned __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  int v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  int v42;

  if (!a1)
    return 8;
  v3 = pMCPbuff;
  if (!pMCPbuff
    || (v4 = *(unsigned __int16 *)(a1 + 2064), (v5 = *(unsigned __int16 **)(*(_QWORD *)(pMCPbuff + 40) + 8 * v4)) == 0)
    || *v5 != (_DWORD)v4
    || *(_WORD *)(*(_QWORD *)(pMCPbuff + 32) + 2 * v4) != 9090)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v9 = 5104;
      goto LABEL_16;
    }
    return 8;
  }
  if (*(_WORD *)(a1 + 768) == 1 && (*(_DWORD *)(a1 + 772) & 0x80000000) != 0)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v9 = 1012;
      goto LABEL_16;
    }
    return 8;
  }
  if ((a2 - 3) >= 4)
  {
    if ((a2 - 1) > 1)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v9 = 1100;
        goto LABEL_16;
      }
      return 8;
    }
    v10 = *(_WORD **)(pMCPbuff + 8);
    v11 = (unsigned __int16)*v10;
    if (v11 < 0x19)
    {
      v15 = v11 + 1;
      *v10 = v15;
      *(_WORD *)(a1 + 2074) = v15;
      *(_WORD *)(*(_QWORD *)(v3 + 16) + 2 * (unsigned __int16)*v10) = 9090;
    }
    else
    {
      v12 = 0;
      while (v11 >= ++v12)
      {
        v13 = *(_QWORD *)(pMCPbuff + 16);
        if (!*(_WORD *)(v13 + 2 * v12))
        {
          *(_WORD *)(a1 + 2074) = v12;
          *(_WORD *)(v13 + 2 * v12) = 9090;
          v11 = (unsigned __int16)*v10;
          break;
        }
      }
      if (v11 < v12)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          result = 8;
          *(_DWORD *)(a1 + 2088) = 8;
          v9 = 5108;
          goto LABEL_16;
        }
        return 8;
      }
    }
    if (PDdballoc(*(unsigned __int16 *)(a1 + 2074), *(_WORD *)(a1 + 2064)) == 8)
      goto LABEL_45;
    PDupibuf(a1);
    v16 = *(unsigned __int8 *)(a1 + 784);
    if (v16 == 1)
    {
      if (PDfiletype(a1) == 8)
      {
LABEL_61:
        LODWORD(v22) = *(unsigned __int16 *)(a1 + 2074);
LABEL_79:
        PDdbfree(0, v22);
        return 8;
      }
      LOBYTE(v16) = *(_BYTE *)(a1 + 784);
    }
    v17 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
    *(_BYTE *)v17 = v16;
    *(_BYTE *)(v17 + 782) = *(_BYTE *)(a1 + 785);
    *(_QWORD *)(v17 + 768) = *(_QWORD *)(a1 + 776);
    *(_BYTE *)(v17 + 781) = a2 == 1;
    if (*(_WORD *)(a1 + 768) == 1)
    {
      v18 = *(_DWORD *)(a1 + 772);
      v19 = 1;
    }
    else
    {
      v19 = 0;
      v18 = -2;
    }
    *(_BYTE *)(v17 + 780) = v19;
    *(_DWORD *)(v17 + 776) = v18;
    v16 = (char)v16;
    if (((char)v16 - 2) >= 3)
    {
      if (v16 != 5 && v16 != 7)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          result = 8;
          *(_DWORD *)(a1 + 2088) = 8;
          v9 = 1013;
          goto LABEL_16;
        }
        return 8;
      }
      v23 = malloc_type_calloc(1uLL, 0x78uLL, 0x10300405E0B4679uLL);
      v24 = *(_QWORD *)pMCPbuff;
      v25 = *(unsigned __int16 *)(a1 + 2074);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v25) + 2176) = v23;
      if (!v23)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 2088) = 8;
          *(_WORD *)(a1 + 2092) = 1030;
        }
        goto LABEL_132;
      }
      v26 = *(_QWORD *)(v24 + 8 * v25);
      *(_BYTE *)(v26 + 2118) = 0;
      if (PDSDinit(v26, *(__int16 *)(a1 + 768), *(_DWORD *)(a1 + 772)) == 8)
        goto LABEL_127;
      *(_BYTE *)(a1 + 2078) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                       + 2069);
      if (*(_BYTE *)(a1 + 784) != 7 && PDsdneg(a1) == 8)
      {
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7)
          goto LABEL_131;
        *(_DWORD *)(a1 + 2088) = 8;
        v27 = 1030;
        goto LABEL_130;
      }
    }
    else
    {
      v20 = malloc_type_calloc(1uLL, 0x150uLL, 0x10300400D6F4355uLL);
      v21 = *(_QWORD *)pMCPbuff;
      v22 = *(unsigned __int16 *)(a1 + 2074);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v22) + 2168) = v20;
      if (!v20)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 2088) = 8;
          *(_WORD *)(a1 + 2092) = 1030;
        }
        goto LABEL_79;
      }
      if (PDRDinit(*(_QWORD *)(v21 + 8 * v22)) == 8)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 2088) = 8;
          *(_WORD *)(a1 + 2092) = 1030;
        }
        free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168));
        goto LABEL_61;
      }
      if (*(_BYTE *)(a1 + 784) == 2 && *(_BYTE *)(a1 + 785) != 6)
      {
        v29 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
        if (SLOpen(v29 + 1, v29 + 512, (int *)(*(_QWORD *)(v29 + 2168) + 328), 0x20Au) == 8)
          goto LABEL_127;
        SLClose(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                      + 2168)
                          + 328));
      }
      v30 = (_QWORD *)pMCPbuff;
      v31 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
      *(_WORD *)(v31 + 2112) = 0;
      *(_BYTE *)(*(_QWORD *)(v31 + 2168) + 72) = 0;
      v32 = *(_QWORD *)(*v30 + 8 * *(unsigned __int16 *)(a1 + 2074));
      if (SLtmpnam((_BYTE *)(v32 + 1550), (char *)(*(_QWORD *)(v32 + 2168) + 72)) == 8)
      {
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7)
          goto LABEL_131;
        *(_DWORD *)(a1 + 2088) = 8;
        v27 = 1019;
LABEL_130:
        *(_WORD *)(a1 + 2092) = v27;
LABEL_131:
        LODWORD(v25) = *(unsigned __int16 *)(a1 + 2074);
LABEL_132:
        PDfreedid(v25);
        return 8;
      }
      v34 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
      v35 = *(_QWORD *)(v34 + 2168);
      *(_DWORD *)(v35 + 328) = -2;
      if (SLOpen(v34 + 1550, v35 + 72, (int *)(v35 + 328), 0x20Au) == 8
        || ((SLClose(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                           + 2168)
                               + 328)),
             v36 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)),
             v37 = v36 + 1550,
             v38 = *(_QWORD *)(v36 + 2168),
             !*(_WORD *)(a1 + 768))
          ? (v39 = 2)
          : a2 != 1
          ? (v39 = 8194)
          : (v39 = 4096),
            SLOpen(v37, v38 + 72, (int *)(v38 + 328), v39) == 8))
      {
LABEL_127:
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7)
          goto LABEL_131;
        *(_DWORD *)(a1 + 2088) = 8;
        v27 = 1012;
        goto LABEL_130;
      }
      if (*(_BYTE *)(a1 + 784) != 2)
      {
        if (PDreadas(a1) == 8 || *(_DWORD *)(a1 + 2088) == 8)
          goto LABEL_131;
        *(_BYTE *)(a1 + 2078) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                         + 2069);
      }
    }
    result = 0;
    *(_WORD *)(a1 + 2080) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2094);
    return result;
  }
  v7 = *(unsigned __int16 *)(a1 + 2074);
  if (v7 > **(unsigned __int16 **)(pMCPbuff + 8))
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v9 = 5103;
LABEL_16:
      *(_WORD *)(a1 + 2092) = v9;
      return result;
    }
    return 8;
  }
  v14 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v7);
  if ((_DWORD)v7 != *(unsigned __int16 *)(v14 + 2162) || *(_WORD *)(*(_QWORD *)(pMCPbuff + 16) + 2 * v7) != 9090)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v9 = 5105;
      goto LABEL_16;
    }
    return 8;
  }
  if (*(_BYTE *)(v14 + 2062) == 1)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v9 = 5155;
      goto LABEL_16;
    }
    return 8;
  }
  v28 = *(unsigned __int8 *)(v14 + 782);
  if ((v28 | 2) == 7)
  {
    if (!*(_BYTE *)(v14 + 780))
      SLClose(*(_DWORD *)(v14 + 776));
    if ((a2 - 5) < 2)
      return 0;
    goto LABEL_116;
  }
  if (a2 == 4 || v28 == 6)
    **(_BYTE **)(v14 + 2168) = 0;
  *(_BYTE *)(v14 + 2069) = *(_BYTE *)(a1 + 2078);
  if (a2 == 3)
  {
    v33 = *(_QWORD *)(v14 + 2168);
    if (*(_BYTE *)v33)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v9 = 5110;
        goto LABEL_16;
      }
      return 8;
    }
LABEL_114:
    v40 = *(_DWORD *)(v33 + 328);
    if ((v40 & 0x80000000) == 0)
    {
      SLClose(v40);
      SLremove();
    }
LABEL_116:
    PDfreedid(*(unsigned __int16 *)(a1 + 2074));
    return 0;
  }
  if ((a2 - 5) >= 2)
  {
    v33 = *(_QWORD *)(v14 + 2168);
    goto LABEL_114;
  }
  if (*(_BYTE *)(v14 + 781))
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v9 = 5117;
      goto LABEL_16;
    }
    return 8;
  }
  if (a2 == 5)
  {
    if (PDsavsort(v7, 1) == 8)
      goto LABEL_45;
    PDsort(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)));
  }
  v41 = PDwriteas(a1);
  result = 8 * (v41 == 8);
  if (a2 == 5 && v41 != 8)
  {
    v42 = PDsavsort(*(unsigned __int16 *)(a1 + 2074), 0);
    result = 0;
    if (v42 == 8)
    {
LABEL_45:
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v9 = 1030;
        goto LABEL_16;
      }
      return 8;
    }
  }
  return result;
}

uint64_t PDdballoc(unsigned int a1, __int16 a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _WORD *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  int v39;

  v4 = malloc_type_calloc(1uLL, 0x898uLL, 0x1030040D98B27C7uLL);
  *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1);
    *(_WORD *)(v5 + 2162) = a1;
    *(_WORD *)(v5 + 2160) = a2;
    v6 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2120) = v6;
    if (v6)
    {
      v7 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2136) = v7;
      if (v7)
      {
        v8 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2144) = v8;
        if (v8)
        {
          v9 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2152) = v9;
          if (v9)
          {
            v10 = malloc_type_calloc(1uLL, 0x81uLL, 0x100004077774924uLL);
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2128) = v10;
            if (v10)
            {
              v11 = malloc_type_calloc(1uLL, 0x4B0uLL, 0x10900403E69C754uLL);
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2184) = v11;
              if (v11)
              {
                v12 = malloc_type_calloc(1uLL, 0xDD0uLL, 0x10B0040A7C70F12uLL);
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) = v12;
                if (v12)
                {
                  v13 = malloc_type_malloc(0x50uLL, 0x1000040BDFB0063uLL);
                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 3512) = v13;
                  if (v13)
                  {
                    v14 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 3496) = v14;
                    if (v14)
                    {
                      v15 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 3520) = v15;
                      if (v15)
                      {
                        v16 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 3528) = v16;
                        if (v16)
                        {
                          v17 = malloc_type_malloc(0x28uLL, 0x100004077774924uLL);
                          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 3488) = v17;
                          if (v17)
                          {
                            v18 = malloc_type_calloc(1uLL, 0x60uLL, 0x1010040370E3D57uLL);
                            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 104) = v18;
                            if (v18)
                            {
                              v19 = malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
                              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2096) = v19;
                              if (v19)
                              {
                                v20 = malloc_type_calloc(0xF0uLL, 1uLL, 0x100004077774924uLL);
                                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 48) = v20;
                                if (v20)
                                {
                                  v21 = malloc_type_calloc(0x14uLL, 2uLL, 0x1000040BDFB0063uLL);
                                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 64) = v21;
                                  if (v21)
                                  {
                                    v22 = malloc_type_calloc(0x14uLL, 8uLL, 0x100004000313F17uLL);
                                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192) + 80) = v22;
                                    if (v22)
                                    {
                                      v23 = malloc_type_calloc(0x14uLL, 1uLL, 0x100004077774924uLL);
                                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192)
                                                + 72) = v23;
                                      if (v23)
                                      {
                                        v24 = malloc_type_calloc(0x28uLL, 2uLL, 0x1000040BDFB0063uLL);
                                        v25 = *(_QWORD *)pMCPbuff;
                                        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2192)
                                                  + 3168) = v24;
                                        if (v24)
                                        {
                                          if (PDSFmemory((void **)(*(_QWORD *)(*(_QWORD *)(v25 + 8 * a1) + 2192)+ 32), 65, 1))
                                          {
                                            v26 = malloc_type_calloc(0xBB8uLL, 1uLL, 0x100004077774924uLL);
                                            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2184)
                                                      + 112) = v26;
                                            if (v26)
                                            {
                                              v27 = malloc_type_calloc(0x113uLL, 1uLL, 0x100004077774924uLL);
                                              v28 = *(_QWORD *)pMCPbuff;
                                              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1)
                                                                    + 2184)
                                                        + 128) = v27;
                                              if (v27)
                                              {
                                                v29 = *(_QWORD *)(v28 + 8 * a1);
                                                v30 = *(_WORD **)(v29 + 2184);
                                                v30[35] = 20;
                                                v30[52] = 3000;
                                                v30[60] = 275;
                                                *(_WORD *)(*(_QWORD *)(v29 + 2192) + 2162) = 375;
                                                v31 = malloc_type_calloc(0xBB8uLL, 1uLL, 0x100004077774924uLL);
                                                v32 = *(_QWORD *)pMCPbuff;
                                                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1)
                                                                      + 2184)
                                                          + 152) = v31;
                                                if (v31)
                                                {
                                                  v33 = malloc_type_calloc(8* *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v32 + 8 * a1) + 2192)+ 2162), 1uLL, 0x100004077774924uLL);
                                                  v34 = *(_QWORD *)pMCPbuff;
                                                  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1)
                                                                        + 2184)
                                                            + 160) = v33;
                                                  if (v33)
                                                  {
                                                    v35 = malloc_type_calloc(1uLL, 2* *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v34 + 8 * a1) + 2192)+ 2162), 0x1000040BDFB0063uLL);
                                                    v36 = *(_QWORD *)pMCPbuff;
                                                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1)
                                                                          + 2184)
                                                              + 168) = v35;
                                                    if (v35)
                                                    {
                                                      v37 = malloc_type_calloc(1uLL, 2* *(__int16 *)(*(_QWORD *)(*(_QWORD *)(v36 + 8 * a1)+ 2192)+ 2162), 0x1000040BDFB0063uLL);
                                                      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1)
                                                                            + 2184)
                                                                + 176) = v37;
                                                      if (v37)
                                                        return 0;
                                                      v39 = 2;
                                                    }
                                                    else
                                                    {
                                                      v39 = 3;
                                                    }
                                                  }
                                                  else
                                                  {
                                                    v39 = 4;
                                                  }
                                                }
                                                else
                                                {
                                                  v39 = 5;
                                                }
                                              }
                                              else
                                              {
                                                v39 = 6;
                                              }
                                            }
                                            else
                                            {
                                              v39 = 7;
                                            }
                                          }
                                          else
                                          {
                                            v39 = 8;
                                          }
                                        }
                                        else
                                        {
                                          v39 = 9;
                                        }
                                      }
                                      else
                                      {
                                        v39 = 10;
                                      }
                                    }
                                    else
                                    {
                                      v39 = 11;
                                    }
                                  }
                                  else
                                  {
                                    v39 = 12;
                                  }
                                }
                                else
                                {
                                  v39 = 20;
                                }
                              }
                              else
                              {
                                v39 = 18;
                              }
                            }
                            else
                            {
                              v39 = 19;
                            }
                          }
                          else
                          {
                            v39 = 21;
                          }
                        }
                        else
                        {
                          v39 = 22;
                        }
                      }
                      else
                      {
                        v39 = 23;
                      }
                    }
                    else
                    {
                      v39 = 24;
                    }
                  }
                  else
                  {
                    v39 = 25;
                  }
                }
                else
                {
                  v39 = 26;
                }
              }
              else
              {
                v39 = 30;
              }
            }
            else
            {
              v39 = 31;
            }
          }
          else
          {
            v39 = 32;
          }
        }
        else
        {
          v39 = 33;
        }
      }
      else
      {
        v39 = 34;
      }
    }
    else
    {
      v39 = 62;
    }
    PDdbfree(v39, a1);
  }
  return 8;
}

uint64_t PDupibuf(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;

  __strcpy_chk();
  __strcpy_chk();
  __strcpy_chk();
  __strcpy_chk();
  result = __strcpy_chk();
  v3 = *(unsigned __int8 *)(a1 + 784);
  if ((v3 | 2) == 7)
  {
    *(_BYTE *)(a1 + 785) = v3;
    v4 = v3;
  }
  else
  {
    v4 = *(_BYTE *)(a1 + 785);
  }
  v5 = *(unsigned __int16 *)(a1 + 2074);
  v6 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v5);
  *(_BYTE *)v6 = v3;
  *(_BYTE *)(v6 + 782) = v4;
  *(_WORD *)(v6 + 2064) = *(_WORD *)(a1 + 2076);
  v7 = *(_BYTE *)(a1 + 2078);
  v8 = 1 << (v7 - 1);
  if (!v7)
    LODWORD(v8) = -1;
  *(_DWORD *)(v6 + 2072) = v8;
  *(_BYTE *)(v6 + 2069) = v7;
  *(_BYTE *)(v6 + 2068) = *(_BYTE *)(a1 + 2079);
  *(_WORD *)(v6 + 2160) = *(_WORD *)(a1 + 2064);
  *(_WORD *)(v6 + 2162) = v5;
  *(_WORD *)(v6 + 2061) = 0;
  *(_WORD *)(v6 + 2094) = 0;
  *(_BYTE *)(v6 + 2092) = *(_BYTE *)(a1 + 2072);
  *(_WORD *)(v6 + 2090) = *(_WORD *)(a1 + 2070);
  HIDWORD(v9) = *(_DWORD *)(a1 + 2066);
  LODWORD(v9) = HIDWORD(v9);
  *(_DWORD *)(v6 + 2086) = v9 >> 16;
  return result;
}

void PDdbfree(int a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int16 *v4;
  unsigned __int16 v5;

  switch(a1)
  {
    case 0:
    case 1:
      v2 = a2;
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a2) + 2184) + 176));
      goto LABEL_4;
    case 2:
      v2 = a2;
LABEL_4:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2184) + 168));
      goto LABEL_6;
    case 3:
      v2 = a2;
LABEL_6:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2184) + 160));
      goto LABEL_8;
    case 4:
      v2 = a2;
LABEL_8:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2184) + 152));
      goto LABEL_9;
    case 5:
      v2 = a2;
LABEL_9:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2184) + 128));
      goto LABEL_10;
    case 6:
      v2 = a2;
LABEL_10:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2184) + 112));
      goto LABEL_11;
    case 7:
      v2 = a2;
LABEL_11:
      PDSFmemory((void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 32), 65, 0);
      goto LABEL_12;
    case 8:
      v2 = a2;
LABEL_12:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 3168));
      goto LABEL_13;
    case 9:
      v2 = a2;
LABEL_13:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 72));
      goto LABEL_14;
    case 10:
      v2 = a2;
LABEL_14:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 80));
      goto LABEL_15;
    case 11:
      v2 = a2;
LABEL_15:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 64));
      goto LABEL_16;
    case 12:
      v2 = a2;
LABEL_16:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 48));
      goto LABEL_17;
    case 18:
      v2 = a2;
LABEL_17:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2096));
      goto LABEL_18;
    case 19:
      v2 = a2;
LABEL_18:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 104));
      goto LABEL_19;
    case 20:
      v2 = a2;
LABEL_19:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 3488));
      goto LABEL_20;
    case 21:
      v2 = a2;
LABEL_20:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 3528));
      goto LABEL_21;
    case 22:
      v2 = a2;
LABEL_21:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 3520));
      goto LABEL_22;
    case 23:
      v2 = a2;
LABEL_22:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 3496));
      goto LABEL_23;
    case 24:
      v2 = a2;
LABEL_23:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192) + 3512));
      goto LABEL_24;
    case 25:
      v2 = a2;
LABEL_24:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2192));
      goto LABEL_25;
    case 26:
      v2 = a2;
LABEL_25:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2184));
      goto LABEL_26;
    case 30:
      v2 = a2;
LABEL_26:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2128));
      goto LABEL_27;
    case 31:
      v2 = a2;
LABEL_27:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2152));
      goto LABEL_28;
    case 32:
      v2 = a2;
LABEL_28:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2144));
      goto LABEL_29;
    case 33:
      v2 = a2;
LABEL_29:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2136));
      goto LABEL_30;
    case 34:
      v2 = a2;
LABEL_30:
      free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2120));
      goto LABEL_31;
    case 62:
      v2 = a2;
LABEL_31:
      free(*(void **)(*(_QWORD *)pMCPbuff + 8 * v2));
      break;
    default:
      v2 = a2;
      break;
  }
  v4 = *(unsigned __int16 **)(pMCPbuff + 8);
  v3 = *(_QWORD *)(pMCPbuff + 16);
  *(_WORD *)(v3 + 2 * v2) = 0;
  v5 = *v4;
  do
  {
    if (*(_WORD *)(v3 + 2 * v5))
      break;
    *v4 = --v5;
  }
  while (v5);
}

void PDfreedid(unsigned int a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  unsigned __int16 v29;

  v1 = a1;
  v2 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * a1);
  if ((*v2 | 2) == 7)
  {
    free(*(void **)(*((_QWORD *)v2 + 272) + 48));
    v3 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2176) + 48) = 0;
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(v3 + 8 * v1) + 2176) + 88));
    v4 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2176) + 88) = 0;
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(v4 + 8 * v1) + 2176) + 96));
    v5 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 8 * v1) + 2176) + 96) = 0;
    v6 = *(_QWORD *)(v5 + 8 * v1);
    if (*(_BYTE *)v6 != 7 && *(_WORD *)(v6 + 2094))
    {
      free(*(void **)(*(_QWORD *)(v6 + 2176) + 104));
      v6 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1);
    }
    v7 = *(_QWORD **)(v6 + 2176);
    v8 = (void **)v7[9];
    if (v8)
    {
      if (*v8)
      {
        free(*v8);
        v8 = *(void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2176) + 72);
      }
      free(v8);
      v9 = *(_QWORD *)pMCPbuff;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2176) + 72) = 0;
      v7 = *(_QWORD **)(*(_QWORD *)(v9 + 8 * v1) + 2176);
    }
    free(v7);
    v10 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2176) = 0;
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(v10 + 8 * v1) + 2184) + 1184));
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 40));
    v11 = *(_QWORD *)pMCPbuff;
  }
  else
  {
    free(*(void **)(*((_QWORD *)v2 + 271) + 40));
    v12 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2168) + 40) = 0;
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(v12 + 8 * v1) + 2168) + 32));
    v13 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2168) + 32) = 0;
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(v13 + 8 * v1) + 2168) + 48));
    v14 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2168) + 48) = 0;
    free(*(void **)(*(_QWORD *)(v14 + 8 * v1) + 2168));
    v11 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2168) = 0;
  }
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(v11 + 8 * v1) + 2184) + 112));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 128));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 3168));
  v15 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 3168) = 0;
  PDSFmemory((void **)(*(_QWORD *)(*(_QWORD *)(v15 + 8 * v1) + 2192) + 32), 0, 0);
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 152));
  v16 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 152) = 0;
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(v16 + 8 * v1) + 2184) + 160));
  v17 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 160) = 0;
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(v17 + 8 * v1) + 2184) + 168));
  v18 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 168) = 0;
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(v18 + 8 * v1) + 2184) + 176));
  v19 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) + 176) = 0;
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(v19 + 8 * v1) + 2192) + 3488));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 3528));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 3520));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 3496));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 3512));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2096));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 104));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 48));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 64));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 80));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) + 72));
  free(*(void **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184));
  v20 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2184) = 0;
  free(*(void **)(*(_QWORD *)(v20 + 8 * v1) + 2192));
  v21 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2192) = 0;
  free(*(void **)(*(_QWORD *)(v21 + 8 * v1) + 2128));
  v22 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2128) = 0;
  free(*(void **)(*(_QWORD *)(v22 + 8 * v1) + 2152));
  v23 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2152) = 0;
  free(*(void **)(*(_QWORD *)(v23 + 8 * v1) + 2144));
  v24 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2144) = 0;
  free(*(void **)(*(_QWORD *)(v24 + 8 * v1) + 2136));
  v25 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2136) = 0;
  free(*(void **)(*(_QWORD *)(v25 + 8 * v1) + 2120));
  v26 = *(_QWORD *)pMCPbuff;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) + 2120) = 0;
  free(*(void **)(v26 + 8 * v1));
  *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v1) = 0;
  v28 = *(unsigned __int16 **)(pMCPbuff + 8);
  v27 = *(_QWORD *)(pMCPbuff + 16);
  *(_WORD *)(v27 + 2 * v1) = 0;
  v29 = *v28;
  do
  {
    if (*(_WORD *)(v27 + 2 * v29))
      break;
    *v28 = --v29;
  }
  while (v29);
}

uint64_t PDsdneg(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _WORD *v4;
  _WORD *v5;
  void *v6;
  void *v7;
  uint64_t i;
  void *v9;
  uint64_t v10;
  unsigned __int16 v12;
  unint64_t j;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  int v17;

  v1 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
  if (!*(_WORD *)(v1 + 2094))
    return 0;
  v3 = *(_QWORD *)(v1 + 2176);
  v4 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00408E6C3DC5uLL);
  if (!v4)
    return 8;
  v5 = v4;
  v6 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
  *((_QWORD *)v5 + 1) = v6;
  if (!v6)
  {
LABEL_12:
    free(v5);
    return 8;
  }
  v5[24] = 20;
  v7 = malloc_type_calloc(0x14uLL, 8uLL, 0x10040436913F5uLL);
  *((_QWORD *)v5 + 13) = v7;
  if (!v7)
  {
    free(*((void **)v5 + 1));
    goto LABEL_12;
  }
  for (i = 0; i != 160; i += 8)
  {
    v9 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
    *(_QWORD *)(*((_QWORD *)v5 + 13) + i) = v9;
    if (!v9)
      goto LABEL_9;
  }
  v5[24] = 20;
  *v5 = *(_WORD *)(a1 + 2074);
  v5[1] = *(_WORD *)(a1 + 2064);
  *((_BYTE *)v5 + 42) = 0;
  *((_DWORD *)v5 + 9) = 0xFFFF;
  if (PDword(v5, 8u, 1) == 8)
  {
LABEL_9:
    PDFullCleanSDNeg((void **)v5);
    return 8;
  }
  v17 = 0;
  v10 = 8;
  if (PDword(v5, 8u, 5) != 8)
  {
    while (1)
    {
      v12 = v5[25];
      if (!v12)
        break;
      for (j = 0; j < v12; ++j)
      {
        v14 = *(_QWORD *)(*((_QWORD *)v5 + 13) + 8 * j);
        if (*(_BYTE *)(v14 + 70))
        {
          v15 = strlen(*(const char **)(*((_QWORD *)v5 + 13) + 8 * j));
          SLfun(v14, 0, (__int16)(v15 - 1), (unsigned __int16 *)&v17 + 1, &v17);
          v16 = (*(unsigned __int16 *)(v3 + 112) - 1) & (unint64_t)(unsigned __int16)v17;
          LOWORD(v17) = (*(_WORD *)(v3 + 112) - 1) & v17;
          *(_BYTE *)(*(_QWORD *)(v3 + 104) + (v16 >> 3)) |= 1 << (v16 & 7);
          v12 = v5[25];
        }
      }
      v10 = 8;
      if (PDword(v5, 8u, 5) == 8)
        goto LABEL_24;
    }
    v10 = 0;
  }
LABEL_24:
  PDword(v5, 8u, 2);
  PDFullCleanSDNeg((void **)v5);
  return v10;
}

void PDFullCleanSDNeg(void **a1)
{
  uint64_t i;
  void *v3;

  for (i = 0; i != 160; i += 8)
  {
    v3 = *(void **)((char *)a1[13] + i);
    if (v3)
      free(v3);
  }
  free(a1[1]);
  free(a1[13]);
  free(a1);
}

uint64_t PDdecode(unsigned __int8 *a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int16 *v17;
  unsigned __int16 *v18;
  int v19;
  unint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  int v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  _WORD *v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v46;
  int v47;
  unsigned __int16 *v48;
  __int16 v49;
  __int16 v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[129];
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a4 + 398);
  v9 = a4[1596];
  v56 = 0;
  v10 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v9);
  v11 = *(char **)(v10 + 2144);
  v54 = *a4;
  v12 = SLLngToA(*(unsigned __int8 *)(v10 + 2069));
  v55 = a3;
  *(_QWORD *)(a3 + 56) = v12;
  v53 = v9;
  v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v9) + 2168);
  if (!*(_WORD *)(v13 + 4))
    return 0;
  v14 = v12;
  v47 = 0;
  v15 = 0;
  v17 = *(unsigned __int16 **)(v13 + 32);
  v16 = *(_QWORD *)(v13 + 40);
  v18 = &v17[*(unsigned __int16 *)(v13 + 4)];
  v46 = a2 - 1;
  v19 = v54;
  v51 = a2;
  v52 = v16;
  v48 = v18;
  do
  {
    v20 = *v17;
    if (v20 > 0xFFFD)
      goto LABEL_45;
    v21 = *(unsigned __int8 *)(v16 + v20 + 2);
    if (*a4 == 5 && (v21 < (__int16)a4[1729] || v21 > (__int16)a4[1730]))
      goto LABEL_45;
    if (v19 == 100)
    {
      v22 = v21 - a2;
      if (v21 - a2 < 0)
        v22 = a2 - v21;
      if (v22 > (__int16)a4[1067])
        goto LABEL_45;
    }
    else if (v19 == 6 && (v21 > a2 || v21 < (__int16)a4[1728]))
    {
      goto LABEL_45;
    }
    v49 = *(unsigned __int8 *)(v16 + v20 + 1);
    v50 = *(unsigned __int8 *)(v16 + v20);
    __strncpy_chk();
    v57[v21] = 0;
    *(_BYTE *)(v55 + 55) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v53) + 2069);
    v23 = PDhypstrip(v57, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50)) + 88), *(unsigned __int8 *)(v8 + 16));
    v24 = v23 - 1;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50)) + 71) = SLcap((uint64_t)v57, 0, v24, (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50)) + 80), v14);
    if (v23)
    {
      v25 = 0;
      do
      {
        v26 = v57[v25];
        if ((*(_DWORD *)(v14 + 4 * v26) & 0x40000000) != 0)
          LOBYTE(v26) = v26 + 32;
        v11[v25++] = v26;
      }
      while ((int)v23 > v25);
    }
    v11[v23] = 0;
    v27 = *(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50));
    v28 = *(unsigned __int8 *)(v27 + 71);
    v56 = *(_QWORD *)(v27 + 80);
    v19 = v54;
    switch(v54)
    {
      case 5:
        v29 = SLwldcmp((uint64_t)v11, v23, a1, v51);
LABEL_28:
        v15 = v29;
        break;
      case 6:
        v29 = SFanachk((uint64_t)v11, v23, (uint64_t)a4 + 3199);
        goto LABEL_28;
      case 100:
        if (*v11 != *a1 && v11[v24] != a1[v46])
        {
          a2 = v51;
          v16 = v52;
          goto LABEL_37;
        }
        v29 = PDSFcorbru((_QWORD *)v55, (uint64_t)a4, (uint64_t)v11, v23, (uint64_t)a1, v51, (__int16)a4[1068], (__int16)a4[1069], *((_DWORD *)a4 + 535), a4[1067]);
        goto LABEL_28;
    }
    v16 = v52;
    if (!v15)
    {
      a2 = v51;
      v19 = v54;
LABEL_37:
      v18 = v48;
      goto LABEL_45;
    }
    if (!*(_BYTE *)(v55 + 55))
    {
      v30 = 0;
      v31 = 1;
      while ((*(_DWORD *)(v8 + 36) & v31) == 0)
      {
        v31 *= 2;
        if (v30++ >= 0x1F)
          goto LABEL_39;
      }
      *(_BYTE *)(v55 + 55) = v30 + 1;
    }
LABEL_39:
    PDSFdc((uint64_t)v11, v23, v55, (uint64_t)a4);
    v15 = PDSFchkwrd(v55, (uint64_t)a4, v11, v23, v28, (uint64_t)&v56);
    v16 = v52;
    *(_BYTE *)(v55 + 55) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v53) + 2069);
    a2 = v51;
    v19 = v54;
    v18 = v48;
    if (v15 == 10)
    {
      __strcpy_chk();
      __strcpy_chk();
      v33 = (_QWORD *)pMCPbuff;
      v34 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v53);
      v35 = *(_QWORD *)(*(_QWORD *)(v34 + 2168) + 48);
      v36 = *(_BYTE *)(v35 + 20 * (unsigned __int16)(v49 - v50 + (v50 << 8)) + 19);
      v37 = *(_QWORD *)(*(_QWORD *)(v8 + 104) + 8 * *(unsigned __int16 *)(v8 + 50));
      *(_BYTE *)(v37 + 70) = v36 & 1;
      if ((v36 & 2) != 0)
      {
        v39 = v35 + 20 * (unsigned __int16)(v49 - v50 + (v50 << 8));
        *(_DWORD *)(v37 + 96) = *(_DWORD *)(v39 + 12);
        v38 = *(_WORD *)(v39 + 16);
      }
      else
      {
        v38 = 0;
        *(_DWORD *)(v37 + 96) = 0;
      }
      *(_WORD *)(v37 + 100) = v38;
      *(_WORD *)(v37 + 66) = v53;
      *(_BYTE *)(v37 + 72) = *(_BYTE *)(v34 + 2069);
      v40 = (uint64_t *)(v35 + 20 * (unsigned __int16)(v49 - v50 + (v50 << 8)));
      v41 = *v40;
      *(_DWORD *)(v37 + 110) = *((_DWORD *)v40 + 2);
      *(_QWORD *)(v37 + 102) = v41;
      v42 = *(_WORD **)(*v33 + 8 * v53);
      v43 = *(unsigned __int16 *)(v8 + 50);
      v44 = *(_WORD **)(*(_QWORD *)(v8 + 104) + 8 * v43);
      v44[34] = v42[1042];
      v44[37] = v42[1043];
      v44[38] = v42[1044];
      *(_WORD *)(v8 + 50) = v43 + 1;
      if (*(unsigned __int16 *)(v8 + 48) == (unsigned __int16)(v43 + 1))
        return 5113;
      v47 = 1;
      v15 = 10;
      v19 = v54;
      v16 = v52;
    }
LABEL_45:
    ++v17;
  }
  while (v17 < v18);
  if (!v47)
    return 0;
  return 304;
}

uint64_t PDdecod2(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5, unsigned __int16 *a6)
{
  unsigned __int16 *v6;
  int v9;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned __int16 *v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int16 v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int16 v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 *v33;
  __int16 *v34;
  __int16 *v35;
  BOOL v36;
  BOOL v37;
  int v38;
  unsigned int v39;
  unsigned __int8 *v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  __int16 v44;
  __int16 v45;
  unsigned __int8 v46;
  unsigned int *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned __int8 v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  signed __int16 v60;
  int v61;
  int v62;
  int v63;
  __int16 v64;
  int v65;
  int v66;
  unsigned int v67;
  char *v68;
  unsigned int v69;
  unsigned __int8 *v70;
  int v71;
  int v72;
  __int16 v73;
  unsigned int v74;
  unsigned int v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  BOOL v82;
  uint64_t v84;
  uint64_t v85;
  unsigned __int8 *v86;
  int v87;
  int v88;
  __int16 v89;
  int v90;
  int v91;
  int v92;
  int v93;
  __int16 v94;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  unsigned int v104;
  int v105;
  int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t __src;
  int v123;
  char __s[129];
  char v125[258];
  _QWORD v126[3];

  v126[1] = *MEMORY[0x1E0C80C00];
  v126[0] = 0;
  if (a2 < 1)
    return 11;
  v6 = a6;
  LOWORD(v9) = a3;
  v11 = *((_QWORD *)a6 + 398);
  v96 = a6[1596];
  v120 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v96);
  v12 = *(_QWORD *)(v120 + 2176);
  v102 = *(unsigned __int8 *)(v12 + 118);
  v13 = *(_WORD *)(v12 + 64);
  v14 = **(unsigned __int16 ***)(v12 + 72);
  v15 = *(_QWORD *)(v12 + 48);
  v121 = 0;
  v106 = *a6;
  v16 = *(__int16 *)(a5 + 2);
  v98 = v11;
  v99 = v12;
  v17 = *(unsigned __int8 **)(v12 + 88);
  v86 = (unsigned __int8 *)*((_QWORD *)a6 + 14);
  if (a6[8] == (unsigned __int16)a3)
  {
    v87 = *(__int16 *)(a5 + 2);
  }
  else
  {
    if (SLSeek(*(_DWORD *)(a5 + 64), *(_DWORD *)(a5 + 12) + v16 * a3, 0) == 8)
    {
LABEL_137:
      v6[8] = 0;
      return 11;
    }
    v87 = v16;
    if (SLFRead(*(_DWORD *)(a5 + 64), v16, v14, &v121))
      v82 = 0;
    else
      v82 = v121 == v16;
    if (!v82)
      return 11;
    v6[8] = v9;
  }
  v90 = 0;
  v94 = 0;
  v97 = a2;
  v84 = (unsigned __int16)a2;
  v85 = (uint64_t)v6 + 3199;
  v100 = a5;
  v101 = (uint64_t)v6;
  do
  {
    v88 = a4;
    v89 = v9;
    __s[0] = 0;
    v116 = __rev16(*v14);
    if (!v116)
      goto LABEL_130;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 128;
    v22 = 2;
    v23 = v120;
    do
    {
      v114 = v18;
      v24 = 0;
      v25 = 0;
      LOWORD(v26) = 0;
      v27 = 0;
      v28 = 0;
      do
      {
        v29 = v24;
        v30 = v28;
        do
        {
          v28 = v30;
          LOWORD(v31) = v13;
          do
          {
            if ((v21 & 0x80) != 0)
              v19 = *((unsigned __int8 *)v14 + (unsigned __int16)v22++);
            v32 = v15 + 8 * (__int16)v31;
            v33 = (__int16 *)(v32 + 6);
            v34 = (__int16 *)(v32 + 4);
            if ((v21 & v19) != 0)
              v35 = v33;
            else
              v35 = v34;
            v31 = *v35;
            if ((v21 & 0xFFFE) != 0)
              v21 >>= 1;
            else
              v21 = 128;
          }
          while (v31 > 255);
          v24 = v29 + 1;
          v17[(unsigned __int16)v29] = v31;
          ++v20;
          v30 = 1;
          if (v31)
            v36 = 0;
          else
            v36 = (_DWORD)v28 == 0;
          v37 = !v36 || v25 == 0;
          ++v29;
        }
        while (!v37);
        if (v25 && !(_WORD)v26 && (_DWORD)v28)
        {
          v26 = (v31 & 1 | (8 * ((v31 >> 1) & 1))) + 8;
          if ((v31 & 4) == 0)
            v26 = v31 & 1 | (8 * ((v31 >> 1) & 1));
          if ((v31 & 8) != 0)
            LOWORD(v26) = v26 | 6;
          v25 = 0;
          if ((v31 & 0x20) != 0)
            LOWORD(v26) = v26 + *(unsigned __int8 *)(v23 + 2092);
          v27 = 1;
        }
        v36 = (unsigned __int16)v26 == v25++;
      }
      while (!v36 || !v27);
      v38 = 0;
      v126[0] = 0;
      v117 = *v17;
      v39 = v17[1];
      v40 = v17 + 1;
      if (v39 >= 0x11)
      {
        v41 = 0;
        do
        {
          v125[v41 + 129] = v39;
          v42 = v41 + 1;
          LOBYTE(v39) = v17[v41 + 2];
          if (!(_BYTE)v39)
            break;
          v43 = v41++ >= 0x7F;
        }
        while (!v43);
        v38 = (unsigned __int16)v42;
        v125[v42 + 129] = 0;
        v40 = &v17[v42 + 1];
      }
      v110 = v38;
      v44 = strlen(__s);
      if (__s[0])
      {
        v45 = v44 - (v117 & 0x3F);
        if (v110)
        {
          if (v45 < 1)
          {
            v125[0] = 0;
          }
          else
          {
            v111 = v45;
            __strncpy_chk();
            v125[v111] = 0;
          }
          __strcat_chk();
        }
        else if (v45 < 1)
        {
          v125[0] = 0;
        }
        else
        {
          v112 = v45;
          __strncpy_chk();
          v125[v112] = 0;
        }
      }
      else
      {
        __strcpy_chk();
      }
      __strcpy_chk();
      if (v116 < v20)
        break;
      v46 = v40[1];
      if ((v46 & 2) != 0)
      {
        LODWORD(v126[0]) |= v40[2] << 24;
        v48 = HIDWORD(v126[0]) | (v40[6] << 24);
        LODWORD(v126[0]) |= (v40[4] << 8) | (v40[3] << 16) | v40[5];
        HIDWORD(v126[0]) = v48;
        v47 = (unsigned int *)(v40 + 10);
        HIDWORD(v126[0]) = (v40[8] << 8) | (v40[7] << 16) | v40[9] | v48;
      }
      else
      {
        v47 = (unsigned int *)(v40 + 2);
      }
      v23 = v120;
      if ((v46 & 4) != 0)
      {
        v49 = *v47;
        v50 = v47[1];
        v47 += 2;
        v109 = bswap32(v49);
        v113 = bswap32(v50);
        if ((v46 & 8) == 0)
        {
LABEL_64:
          LOWORD(v107) = 0;
          v108 = 0;
          if ((v46 & 0x20) == 0)
            goto LABEL_66;
LABEL_65:
          v51 = v46;
          __memcpy_chk();
          v46 = v51;
          v23 = v120;
          goto LABEL_66;
        }
      }
      else
      {
        v109 = 0;
        v113 = 0;
        if ((v46 & 8) == 0)
          goto LABEL_64;
      }
      v107 = bswap32(*((unsigned __int16 *)v47 + 2)) >> 16;
      v108 = bswap32(*v47);
      if ((v46 & 0x20) != 0)
        goto LABEL_65;
LABEL_66:
      v52 = v117 >> 6;
      v53 = v46 & 0x10;
      if (v106 != 3)
      {
        v104 = v46 & 0x10;
        v118 = v117 >> 6;
        v60 = strlen(v125);
        v61 = v60;
        if (v106 != 100)
        {
          if (v106 == 6)
          {
            v23 = v120;
            if (v60 > v97 || *(__int16 *)(v101 + 3456) > v60)
              goto LABEL_111;
            *(_BYTE *)(v100 + 55) = *(_BYTE *)(v120 + 2069);
            v62 = v60;
            v63 = SFanachk((uint64_t)v125, (unsigned __int16)v60, v85);
          }
          else
          {
            v23 = v120;
            if (v106 != 5)
            {
              *(_BYTE *)(v100 + 55) = *(_BYTE *)(v120 + 2069);
              if (!v90)
                goto LABEL_110;
LABEL_113:
              if (!*(_BYTE *)(v100 + 55))
              {
                v75 = 0;
                v76 = 1;
                while ((*(_DWORD *)(v98 + 36) & v76) == 0)
                {
                  v76 *= 2;
                  v43 = v75++ >= 0x1F;
                  if (v43)
                    goto LABEL_121;
                }
                *(_BYTE *)(v100 + 55) = v75 + 1;
              }
LABEL_121:
              v93 = v61;
              PDSFdc((uint64_t)v125, v61, v100, v101);
              *(_BYTE *)(v100 + 55) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v96) + 2069);
              v77 = PDSFchkwrd(v100, v101, v125, v93, v118, (uint64_t)v126);
              if (v77 == 10)
              {
                __strcpy_chk();
                v78 = *(_QWORD *)(*(_QWORD *)(v98 + 104) + 8 * *(unsigned __int16 *)(v98 + 50));
                *(_BYTE *)(v78 + 71) = v118;
                *(_QWORD *)(v78 + 80) = v126[0];
                *(_DWORD *)(v78 + 88) = v109;
                *(_DWORD *)(v78 + 92) = v113;
                *(_DWORD *)(v78 + 96) = v108;
                *(_WORD *)(v78 + 100) = v107;
                memcpy((void *)(v78 + 102), &__src, *(unsigned __int8 *)(v120 + 2092));
                v79 = *(unsigned __int16 *)(v98 + 50);
                v80 = *(_QWORD *)(*(_QWORD *)(v98 + 104) + 8 * v79);
                *(_BYTE *)(v80 + 70) = v104 >> 4;
                *(_WORD *)(v80 + 66) = v96;
                *(_BYTE *)(v80 + 72) = *(_BYTE *)(v120 + 2069);
                *(_WORD *)(v98 + 50) = v79 + 1;
                if (*(unsigned __int16 *)(v98 + 48) == (unsigned __int16)(v79 + 1))
                  return 5113;
                v90 = 10;
              }
              else
              {
                v90 = v77;
              }
LABEL_125:
              v54 = v114;
              v23 = v120;
              goto LABEL_126;
            }
            if (*(__int16 *)(v101 + 3458) > v60 || *(__int16 *)(v101 + 3460) < v60)
              goto LABEL_111;
            *(_BYTE *)(v100 + 55) = *(_BYTE *)(v120 + 2069);
            v62 = v60;
            v63 = SLwldcmp((uint64_t)v125, v60, a1, v97);
          }
LABEL_109:
          v61 = v62;
          v23 = v120;
          if (!v63)
          {
LABEL_110:
            v90 = 0;
LABEL_111:
            v54 = v114;
            goto LABEL_126;
          }
          goto LABEL_113;
        }
        v72 = v60 - v97;
        if (v72 < 0)
          v72 = v97 - v60;
        if (v72 > *(__int16 *)(v101 + 2134))
          goto LABEL_125;
        v73 = v60;
        v92 = v60;
        v74 = SLstrncmp(v125, v86, *(unsigned __int8 *)(v100 + 54)) << 24;
        if (v74 == -16777216)
          goto LABEL_125;
        if (v74 != 0x1000000)
        {
          *(_BYTE *)(v100 + 55) = *(_BYTE *)(v120 + 2069);
          if (v125[0] != *a1 && v125[v73] != a1[v84])
            goto LABEL_125;
          v62 = v92;
          *(_WORD *)(v101 + 2150) = v92;
          *(_WORD *)(v101 + 2152) = v97;
          v63 = PDSFcorbru((_QWORD *)v100, v101, (uint64_t)v125, v92, (uint64_t)a1, v97, *(__int16 *)(v101 + 2136), *(__int16 *)(v101 + 2138), *(_DWORD *)(v101 + 2140), *(_WORD *)(v101 + 2134));
          goto LABEL_109;
        }
        return 11;
      }
      if (v102)
      {
        v54 = v114 + 1;
        if (*(unsigned __int16 *)(v99 + 116) > (unsigned __int16)v114)
          goto LABEL_126;
LABEL_69:
        v103 = v54;
        v115 = v53 >> 4;
        v55 = *(_QWORD *)(*(_QWORD *)(v98 + 104) + 8 * *(unsigned __int16 *)(v98 + 50));
        *(_BYTE *)(v55 + 71) = v52;
        *(_QWORD *)(v55 + 80) = v126[0];
        *(_DWORD *)(v55 + 88) = v109;
        *(_DWORD *)(v55 + 92) = v113;
        *(_BYTE *)(v55 + 72) = *(_BYTE *)(v23 + 2069);
        __strcpy_chk();
        v56 = *(_QWORD *)(*(_QWORD *)(v98 + 104) + 8 * *(unsigned __int16 *)(v98 + 50));
        *(_DWORD *)(v56 + 96) = v108;
        *(_WORD *)(v56 + 100) = v107;
        *(_QWORD *)(v56 + 102) = __src;
        *(_DWORD *)(v56 + 110) = v123;
        v57 = *(unsigned __int16 *)(v98 + 50);
        v58 = *(_QWORD *)(*(_QWORD *)(v98 + 104) + 8 * v57);
        *(_BYTE *)(v58 + 70) = v115;
        *(_WORD *)(v58 + 66) = v96;
        v59 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v96);
        *(_WORD *)(v58 + 68) = *(_WORD *)(v59 + 2084);
        *(_DWORD *)(v58 + 74) = *(_DWORD *)(v59 + 2086);
        *(_WORD *)(v98 + 50) = v57 + 1;
        if (v102)
          ++*(_WORD *)(v99 + 116);
        if (*(unsigned __int16 *)(v98 + 48) != (unsigned __int16)(v57 + 1))
        {
          ++v94;
          v23 = v120;
          v54 = v103;
          goto LABEL_126;
        }
        return 5113;
      }
      v105 = v46 & 0x10;
      v119 = v117 >> 6;
      v64 = strlen(v125);
      v65 = v64;
      v91 = v64;
      if (v64 >= v97)
        v65 = v97;
      if (v65 >= 4)
        v66 = 4;
      else
        v66 = v65;
      if ((int)SLstrncmp(v125, a1, v66) > 0)
        return 11;
      if (v91 != v97)
        goto LABEL_125;
      v67 = *a1;
      v23 = v120;
      if (v67 != v125[0] || v105 && *(_BYTE *)(v98 + 42) == 2)
        goto LABEL_111;
      v68 = v125;
      v69 = *a1;
      v70 = a1;
      LOBYTE(v52) = v119;
      while (1)
      {
        if ((~(v69 >> 2) & 0x20 | v69) == (~(v67 >> 2) & 0x20 | v67))
        {
          if (!v69)
          {
            v54 = v114;
            v53 = v105;
            goto LABEL_69;
          }
          ++v70;
          goto LABEL_96;
        }
        v71 = *(unsigned __int8 *)(v120 + 2068);
        if (v69 == v71)
        {
          ++v70;
          goto LABEL_97;
        }
        if (v67 != v71)
          break;
LABEL_96:
        ++v68;
LABEL_97:
        v69 = *v70;
        v67 = *v68;
      }
      v54 = v114;
LABEL_126:
      v18 = v54;
    }
    while (v116 > v20);
LABEL_130:
    v9 = (__int16)(v89 + 1);
    v6 = (unsigned __int16 *)v101;
    *(_WORD *)(v101 + 16) = v89 + 1;
    *(_WORD *)(v99 + 116) = 0;
    if (v9 >= *(__int16 *)(v100 + 48))
    {
      v81 = v94 == 0;
      goto LABEL_146;
    }
    if (SLSeek(*(_DWORD *)(v100 + 64), *(_DWORD *)(v100 + 12) + v87 * v9, 0) == 8)
      return 11;
    if (SLFRead(*(_DWORD *)(v100 + 64), v87, v14, &v121) || v121 != v87)
      goto LABEL_137;
    a4 = v88 - 1;
  }
  while ((__int16)v88 > 0);
  v81 = *(unsigned __int16 *)(v98 + 50) == 0;
LABEL_146:
  if (v81)
    return 11;
  else
    return 10;
}

uint64_t PDget(unsigned __int8 *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  _WORD *v8;
  int v9;
  __int16 v10;

  v3 = *(_QWORD *)(a3 + 2184);
  if (*(__int16 *)(v3 + 68) < a2)
    return 5112;
  v10 = 0;
  v8 = *(_WORD **)(a3 + 2192);
  v8[9] = 0;
  v8[50] = 0;
  *v8 = 3;
  *(_BYTE *)(*(_QWORD *)(a3 + 2176) + 118) = 0;
  v9 = SFbisrch((uint64_t)a1, 0, (__int16)(a2 - 1), &v10, v3);
  return PDdecod2(a1, a2, v9, v10, *(_QWORD *)(a3 + 2184), *(unsigned __int16 **)(a3 + 2192));
}

uint64_t PDgetword(uint64_t a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v7;
  uint64_t result;
  uint64_t v9;
  unsigned __int8 v10;

  v1 = *(unsigned __int16 **)(a1 + 2192);
  v1[9] = 0;
  v1[50] = 0;
  *v1 = 3;
  v2 = *(_QWORD *)(a1 + 2176);
  v3 = *(unsigned __int16 *)(v2 + 114);
  *(_BYTE *)(v2 + 118) = 1;
  v4 = *(_QWORD *)(a1 + 2184);
  v5 = *(unsigned __int16 *)(v4 + 48);
  if (v3 >= v5)
    return 8;
  v10 = 0;
  while (1)
  {
    v7 = (__int16)v5 > (__int16)(v3 + 1);
    result = *(_BYTE *)a1 == 7
           ? PDdecodOldSD(&v10, 2, (__int16)v3, v7, v4, v1)
           : PDdecod2(&v10, 2, (__int16)v3, v7, v4, v1);
    v1 = *(unsigned __int16 **)(a1 + 2192);
    v3 = v1[8];
    v9 = *(_QWORD *)(a1 + 2176);
    if ((_DWORD)result == 5113)
      break;
    *(_WORD *)(v9 + 116) = 0;
    v4 = *(_QWORD *)(a1 + 2184);
    v5 = *(unsigned __int16 *)(v4 + 48);
    if (v3 >= v5)
      goto LABEL_11;
  }
  result = 0;
LABEL_11:
  *(_WORD *)(v9 + 114) = v3;
  return result;
}

uint64_t PDdecodOldSD(unsigned __int8 *a1, int a2, int a3, int a4, uint64_t a5, unsigned __int16 *a6)
{
  unsigned __int16 *v6;
  int v9;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  __int16 v15;
  unsigned __int16 *v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  int v20;
  unsigned __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  int v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  __int16 *v31;
  __int16 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned __int8 v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  signed __int16 v50;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  unsigned int v58;
  char *v59;
  unsigned int v60;
  unsigned __int8 *v61;
  int v62;
  int v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  BOOL v73;
  uint64_t v75;
  int v76;
  unsigned __int8 *v77;
  int v78;
  __int16 v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  int v90;
  __int16 v91;
  unsigned __int8 *v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unsigned __int8 *v96;
  int v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t __src;
  int v104;
  char __s[129];
  char v106[129];
  _BYTE v107[129];
  _QWORD v108[3];

  v108[1] = *MEMORY[0x1E0C80C00];
  v108[0] = 0;
  if (a2 < 1)
    return 11;
  v6 = a6;
  LOWORD(v9) = a3;
  v83 = a6[1596];
  v12 = *((_QWORD *)a6 + 398);
  v13 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * v83);
  v14 = *((_QWORD *)v13 + 272);
  v88 = *(unsigned __int8 *)(v14 + 118);
  v15 = *(_WORD *)(v14 + 64);
  v16 = **(unsigned __int16 ***)(v14 + 72);
  v17 = *(_QWORD *)(v14 + 48);
  v102 = 0;
  v90 = *a6;
  v91 = v15;
  v18 = *(__int16 *)(a5 + 2);
  v84 = v14;
  v85 = v12;
  v92 = *(unsigned __int8 **)(v14 + 88);
  v77 = (unsigned __int8 *)*((_QWORD *)a6 + 14);
  v96 = v13;
  if (a6[8] == (unsigned __int16)a3)
  {
    v82 = a1;
  }
  else
  {
    if (SLSeek(*(_DWORD *)(a5 + 64), *(_DWORD *)(a5 + 12) + v18 * a3, 0) == 8)
    {
LABEL_121:
      v6[8] = 0;
      return 11;
    }
    if (SLFRead(*(_DWORD *)(a5 + 64), v18, v16, &v102))
      v73 = 0;
    else
      v73 = v102 == v18;
    if (!v73)
      return 11;
    v82 = a1;
    v6[8] = v9;
    v13 = v96;
  }
  v19 = 0;
  v81 = 0;
  v75 = (uint64_t)v6 + 3199;
  v86 = (uint64_t)v6;
  v87 = a5;
  v76 = v18;
  do
  {
    v78 = a4;
    v79 = v9;
    __s[0] = 0;
    v93 = __rev16(*v16);
    if (!v93)
      goto LABEL_114;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 128;
    v24 = 2;
    do
    {
      v97 = v20;
      v25 = 0;
      v26 = 0;
      LOWORD(v27) = 0;
      v28 = 0;
      do
      {
        LOWORD(v29) = v91;
        do
        {
          if ((v23 & 0x80) != 0)
            v21 = *((unsigned __int8 *)v16 + (unsigned __int16)v24++);
          v30 = v17 + 8 * (__int16)v29;
          v31 = (__int16 *)(v30 + 6);
          v32 = (__int16 *)(v30 + 4);
          if ((v23 & v21) != 0)
            v32 = v31;
          v29 = *v32;
          if ((v23 & 0xFFFE) != 0)
            v23 >>= 1;
          else
            v23 = 128;
        }
        while (v29 > 255);
        v92[v25] = v29;
        if (v26 && !(_WORD)v27)
        {
          if ((v29 & 0xF0) != 0)
          {
            LOWORD(v27) = 0;
          }
          else
          {
            v27 = (v29 & 1 | (8 * ((v29 >> 1) & 1))) + 8;
            if ((v29 & 4) == 0)
              v27 = v29 & 1 | (8 * ((v29 >> 1) & 1));
            if ((v29 & 8) != 0)
              LOWORD(v27) = v27 | 6;
            v26 = 0;
            if ((v29 & 0x20) != 0)
              LOWORD(v27) = v27 + v13[2092];
            v28 = 1;
          }
        }
        ++v25;
        ++v22;
        v72 = (unsigned __int16)v27 == v26++;
      }
      while (!v72 || !v28);
      v108[0] = 0;
      v33 = *v92;
      v107[0] = 0;
      v34 = v92[1];
      if (v34 < 0x11)
      {
        v35 = v92 + 1;
      }
      else
      {
        v35 = v92 + 1;
        do
        {
          v107[v19] = v34;
          v36 = *++v35;
          LOBYTE(v34) = v36;
          ++v19;
        }
        while (v36 > 0xF);
        v107[v19] = 0;
      }
      v98 = v33;
      if (__s[0])
      {
        v37 = (__int16)(strlen(__s) - (v33 & 0x3F));
        __strncpy_chk();
        v106[v37] = 0;
        if (!v19)
          goto LABEL_41;
        __strcat_chk();
      }
      else
      {
        __strcpy_chk();
      }
      __strcpy_chk();
LABEL_41:
      v38 = (unsigned int *)(v35 + 1);
      v39 = *v35;
      if ((*v35 & 2) != 0)
      {
        LODWORD(v108[0]) |= v35[1] << 24;
        LODWORD(v108[0]) |= v35[2] << 16;
        v40 = HIDWORD(v108[0]) | (v35[5] << 24);
        LODWORD(v108[0]) |= bswap32(*(unsigned __int16 *)(v35 + 3)) >> 16;
        HIDWORD(v108[0]) = v40;
        HIDWORD(v108[0]) = v40 | (v35[6] << 16);
        v38 = (unsigned int *)(v35 + 9);
        HIDWORD(v108[0]) |= bswap32(*(unsigned __int16 *)(v35 + 7)) >> 16;
      }
      if ((v39 & 4) != 0)
      {
        v41 = *v38;
        v42 = v38[1];
        v38 += 2;
        v95 = _byteswap_uint64(__PAIR64__(v41, v42));
        if ((v39 & 8) == 0)
        {
LABEL_48:
          v94 = 0;
          if ((v39 & 0x20) == 0)
            goto LABEL_50;
LABEL_49:
          __memcpy_chk();
          goto LABEL_50;
        }
      }
      else
      {
        v95 = 0;
        if ((v39 & 8) == 0)
          goto LABEL_48;
      }
      LODWORD(v94) = bswap32(*((unsigned __int16 *)v38 + 2)) >> 16;
      HIDWORD(v94) = bswap32(*v38);
      if ((v39 & 0x20) != 0)
        goto LABEL_49;
LABEL_50:
      v43 = v98 >> 6;
      v44 = v39 & 0x10;
      if (v90 != 3)
      {
        v89 = v39 & 0x10;
        v100 = v98 >> 6;
        v50 = strlen(v106);
        v51 = v50;
        v52 = v50;
        if (v90 != 100)
        {
          v13 = v96;
          if (v90 == 6)
          {
            if (v50 > a2 || *(__int16 *)(v86 + 3456) > v50)
              goto LABEL_106;
            *(_BYTE *)(v87 + 55) = v96[2069];
            v53 = v50;
            v54 = SFanachk((uint64_t)v106, (unsigned __int16)v50, v75);
          }
          else
          {
            if (v90 != 5)
            {
              *(_BYTE *)(v87 + 55) = v96[2069];
              if (!(_DWORD)v81)
                goto LABEL_95;
LABEL_97:
              v65 = v87;
              if (*(_BYTE *)(v87 + 55))
                goto LABEL_103;
              v19 = 0;
              v66 = 1;
              while ((*(_DWORD *)(v85 + 36) & v66) == 0)
              {
                v67 = (unsigned __int16)v19;
                v66 *= 2;
                ++v19;
                if (v67 >= 0x1F)
                {
                  v19 = 32;
                  v65 = v87;
                  goto LABEL_103;
                }
              }
              v65 = v87;
              *(_BYTE *)(v87 + 55) = v19 + 1;
LABEL_103:
              v80 = v52;
              PDSFdc((uint64_t)v106, v52, v65, v86);
              *(_BYTE *)(v65 + 55) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v83) + 2069);
              v68 = PDSFchkwrd(v65, v86, v106, v80, v100, (uint64_t)v108);
              if (v68 == 10)
              {
                __strcpy_chk();
                v69 = *(_QWORD *)(*(_QWORD *)(v85 + 104) + 8 * *(unsigned __int16 *)(v85 + 50));
                *(_BYTE *)(v69 + 71) = v100;
                *(_QWORD *)(v69 + 80) = v108[0];
                *(_QWORD *)(v69 + 88) = v95;
                *(_DWORD *)(v69 + 96) = HIDWORD(v94);
                *(_WORD *)(v69 + 100) = v94;
                memcpy((void *)(v69 + 102), &__src, v96[2092]);
                v70 = *(unsigned __int16 *)(v85 + 50);
                v71 = *(_QWORD *)(*(_QWORD *)(v85 + 104) + 8 * v70);
                *(_BYTE *)(v71 + 70) = v89 >> 4;
                *(_WORD *)(v71 + 66) = v83;
                *(_BYTE *)(v71 + 72) = v96[2069];
                *(_WORD *)(v85 + 50) = v70 + 1;
                if (*(unsigned __int16 *)(v85 + 48) == (unsigned __int16)(v70 + 1))
                  return 5113;
                v13 = v96;
                LODWORD(v81) = 10;
LABEL_106:
                v20 = v97;
                continue;
              }
              LODWORD(v81) = v68;
LABEL_108:
              v20 = v97;
              goto LABEL_109;
            }
            if (*(__int16 *)(v86 + 3458) > v50 || *(__int16 *)(v86 + 3460) < v50)
              goto LABEL_106;
            *(_BYTE *)(v87 + 55) = v96[2069];
            v53 = v50;
            v54 = SLwldcmp((uint64_t)v106, v50, v82, a2);
          }
LABEL_94:
          v52 = v53;
          v13 = v96;
          if (!v54)
          {
LABEL_95:
            LODWORD(v81) = 0;
            goto LABEL_106;
          }
          goto LABEL_97;
        }
        v63 = v50 - a2;
        if (v63 < 0)
          v63 = a2 - v50;
        if (v63 > *(__int16 *)(v86 + 2134))
          goto LABEL_108;
        v53 = v50;
        v64 = SLstrncmp(v106, v77, *(unsigned __int8 *)(v87 + 54)) << 24;
        if (v64 == -16777216)
          goto LABEL_108;
        v13 = v96;
        if (v64 != 0x1000000)
        {
          *(_BYTE *)(v87 + 55) = v96[2069];
          if (v106[0] != *v82 && v106[v51] != v82[(unsigned __int16)a2])
            goto LABEL_106;
          *(_WORD *)(v86 + 2150) = v53;
          *(_WORD *)(v86 + 2152) = a2;
          v54 = PDSFcorbru((_QWORD *)v87, v86, (uint64_t)v106, v53, (uint64_t)v82, a2, *(__int16 *)(v86 + 2136), *(__int16 *)(v86 + 2138), *(_DWORD *)(v86 + 2140), *(_WORD *)(v86 + 2134));
          goto LABEL_94;
        }
        return 11;
      }
      if (v88)
      {
        v20 = v97 + 1;
        v13 = v96;
        if (*(unsigned __int16 *)(v84 + 116) > (unsigned __int16)v97)
          continue;
LABEL_53:
        v99 = v44 >> 4;
        v45 = *(_QWORD *)(*(_QWORD *)(v85 + 104) + 8 * *(unsigned __int16 *)(v85 + 50));
        *(_BYTE *)(v45 + 71) = v43;
        *(_QWORD *)(v45 + 80) = v108[0];
        *(_QWORD *)(v45 + 88) = v95;
        *(_BYTE *)(v45 + 72) = v13[2069];
        __strcpy_chk();
        v46 = *(_QWORD *)(*(_QWORD *)(v85 + 104) + 8 * *(unsigned __int16 *)(v85 + 50));
        *(_DWORD *)(v46 + 96) = HIDWORD(v94);
        *(_WORD *)(v46 + 100) = v94;
        *(_QWORD *)(v46 + 102) = __src;
        *(_DWORD *)(v46 + 110) = v104;
        v47 = *(unsigned __int16 *)(v85 + 50);
        v48 = *(_QWORD *)(*(_QWORD *)(v85 + 104) + 8 * v47);
        *(_BYTE *)(v48 + 70) = v99;
        *(_WORD *)(v48 + 66) = v83;
        v49 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v83);
        *(_WORD *)(v48 + 68) = *(_WORD *)(v49 + 2084);
        *(_DWORD *)(v48 + 74) = *(_DWORD *)(v49 + 2086);
        *(_WORD *)(v85 + 50) = v47 + 1;
        if (v88)
          ++*(_WORD *)(v84 + 116);
        if (*(unsigned __int16 *)(v85 + 48) != (unsigned __int16)(v47 + 1))
        {
          ++WORD2(v81);
LABEL_109:
          v13 = v96;
          continue;
        }
        return 5113;
      }
      v101 = v98 >> 6;
      v55 = (__int16)strlen(v106);
      if (v55 >= a2)
        v56 = a2;
      else
        v56 = v55;
      if (v56 >= 4)
        v57 = 4;
      else
        v57 = v56;
      if ((int)SLstrncmp(v106, v82, v57) > 0)
        return 11;
      if (v55 != a2)
        goto LABEL_108;
      v58 = *v82;
      v13 = v96;
      if (v58 != v106[0])
        goto LABEL_106;
      v44 = v39 & 0x10;
      if ((v39 & 0x10) != 0 && *(_BYTE *)(v85 + 42) == 2)
        goto LABEL_106;
      v59 = v106;
      v60 = *v82;
      v61 = v82;
      while (1)
      {
        if ((~(v60 >> 2) & 0x20 | v60) == (~(v58 >> 2) & 0x20 | v58))
        {
          if (!v60)
          {
            v20 = v97;
            LOBYTE(v43) = v101;
            goto LABEL_53;
          }
          ++v61;
          goto LABEL_81;
        }
        v62 = v96[2068];
        if (v60 == v62)
        {
          ++v61;
          goto LABEL_82;
        }
        if (v58 != v62)
          break;
LABEL_81:
        ++v59;
LABEL_82:
        v60 = *v61;
        v58 = *v59;
      }
      v20 = v97;
    }
    while (v93 > v22);
LABEL_114:
    v9 = (__int16)(v79 + 1);
    v6 = (unsigned __int16 *)v86;
    *(_WORD *)(v86 + 16) = v79 + 1;
    *(_WORD *)(v84 + 116) = 0;
    if (v9 >= *(__int16 *)(v87 + 48))
    {
      v72 = WORD2(v81) == 0;
      goto LABEL_130;
    }
    if (SLSeek(*(_DWORD *)(v87 + 64), *(_DWORD *)(v87 + 12) + v76 * v9, 0) == 8)
      return 11;
    if (SLFRead(*(_DWORD *)(v87 + 64), v76, v16, &v102) || v102 != v76)
      goto LABEL_121;
    a4 = v78 - 1;
    v13 = v96;
  }
  while ((_WORD)v78);
  v72 = *(unsigned __int16 *)(v85 + 50) == 0;
LABEL_130:
  if (v72)
    return 11;
  else
    return 10;
}

uint64_t PDdel(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;

  v2 = *(_QWORD *)(a1 + 2168);
  v3 = *(unsigned __int16 *)(*(_QWORD *)(v2 + 32) + 2 * a2);
  v4 = (unsigned __int8 *)(*(_QWORD *)(v2 + 40) + v3);
  v5 = v4[1] - *v4 + (*v4 << 8);
  v6 = v4[2];
  *(_BYTE *)(*(_QWORD *)(v2 + 48) + 20 * v5 + 18) = 0;
  v7 = v3 + v6;
  v8 = *(unsigned __int16 *)(v2 + 24);
  v9 = v8 - (v3 + v6);
  if ((_WORD)v8 != (_WORD)v3 + (_WORD)v6)
  {
    v10 = v3;
    do
    {
      --v9;
      *(_BYTE *)(*(_QWORD *)(v2 + 40) + (unsigned __int16)v10++) = *(_BYTE *)(*(_QWORD *)(v2 + 40)
                                                                            + (unsigned __int16)v7++);
    }
    while ((_WORD)v9);
    LOWORD(v8) = *(_WORD *)(v2 + 24);
  }
  *(_WORD *)(v2 + 24) = v8 - v6;
  v11 = *(unsigned __int16 *)(v2 + 4);
  if (*(_WORD *)(v2 + 4))
  {
    v12 = 0;
    v13 = *(_QWORD *)(v2 + 32);
    do
    {
      v14 = *(unsigned __int16 *)(v13 + 2 * v12);
      if (v14 <= 0xFFFD && v14 > v3)
      {
        *(_WORD *)(v13 + 2 * v12) = v14 - v6;
        v11 = *(unsigned __int16 *)(v2 + 4);
      }
      ++v12;
    }
    while (v12 < v11);
  }
  return 0;
}

uint64_t PDedit(unsigned __int16 *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  __int16 v9;
  char *v10;
  int v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  int v20;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  __int16 v28;
  __int16 v29;
  unsigned __int16 v30;

  v30 = 0;
  v29 = 0;
  v3 = pMCPbuff;
  v4 = *a1;
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v4) + 2168);
  *((_DWORD *)a1 + 16) = 0;
  a1[34] = 0;
  *((_DWORD *)a1 + 18) = 0;
  a1[44] = 0;
  *((_QWORD *)a1 + 12) = 0;
  v6 = a1[1];
  if (**(unsigned __int16 **)(*(_QWORD *)(v3 + 40) + 8 * v6) != (_DWORD)v6
    || *(_WORD *)(*(_QWORD *)(v3 + 32) + 2 * v6) != 9090)
  {
    result = 8;
    *((_DWORD *)a1 + 16) = 8;
    v9 = 5104;
    goto LABEL_8;
  }
  if (PDcheckDID(v4) != 8)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1) + 2062) == 1)
    {
      if (!a1[34] || *((int *)a1 + 16) <= 7)
      {
        result = 8;
        *((_DWORD *)a1 + 16) = 8;
        v9 = 5114;
        goto LABEL_8;
      }
      return 8;
    }
    if (strlen(*((const char **)a1 + 1)) - 129 <= 0xFFFFFF7F)
    {
      if (!a1[34] || *((int *)a1 + 16) <= 7)
      {
        result = 8;
        *((_DWORD *)a1 + 16) = 8;
        v9 = 5102;
        goto LABEL_8;
      }
      return 8;
    }
    v10 = (char *)malloc_type_malloc(0x81uLL, 0x5DF8F7FCuLL);
    __strcpy_chk();
    switch(a2)
    {
      case 9:
        if (PDdefragalt() == 8)
        {
          if (!a1[34] || *((int *)a1 + 16) <= 7)
          {
            result = 8;
            *((_DWORD *)a1 + 16) = 8;
            v9 = 5101;
            goto LABEL_8;
          }
          return 8;
        }
        break;
      case 3:
        v18 = SLLngToA(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1) + 2069));
        v19 = strlen(v10);
        SLrecap((unsigned __int8 *)v10, v19, *((unsigned __int8 *)a1 + 18), (uint64_t)(a1 + 10), *((unsigned __int8 *)a1 + 18), v18);
        v20 = PDsearch(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1), v10, &v30, &v29, 3, 0, a1 + 25);
        if (v20 == 5112 || v20 == 8)
        {
          if (a1[34] && *((int *)a1 + 16) > 7)
            goto LABEL_50;
          *((_DWORD *)a1 + 16) = 8;
          v22 = 5112;
LABEL_49:
          a1[34] = v22;
          goto LABEL_50;
        }
        v23 = PDdel(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1), v30);
        if (v23 == 8)
        {
          if (a1[34] && *((int *)a1 + 16) > 7)
            goto LABEL_50;
          *((_DWORD *)a1 + 16) = 8;
          v22 = 5101;
          goto LABEL_49;
        }
        v24 = *(_QWORD *)pMCPbuff;
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 8 * *a1) + 2168) + 32) + 2 * v30) = -2;
        v25 = *(_QWORD *)(v24 + 8 * *a1);
        v26 = *(_QWORD *)(v25 + 2168);
        v27 = *(_WORD *)(v26 + 22) - 1;
        *(_WORD *)(v26 + 22) = v27;
        --*(_WORD *)(v25 + 2112);
        *(_WORD *)(v26 + 20) = v27;
        *(_WORD *)(v25 + 2104) = *(_WORD *)(v26 + 12) - v27;
        v28 = *(_WORD *)(v26 + 6) - *(_WORD *)(v26 + 24);
        *(_WORD *)(v25 + 2106) = v28;
        *((_BYTE *)a1 + 62) = (unsigned __int16)(100 * v28) / *(_WORD *)(v5 + 6);
        *(_BYTE *)v26 = 1;
        break;
      case 2:
        v11 = (__int16)a1[24];
        v12 = a1[24] != 0;
        v13 = *a1;
        v14 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v13);
        **(_BYTE **)(v14 + 2168) = 1;
        v15 = PDadd(v14, v10, *((char *)a1 + 17), v12, *((char **)a1 + 5), v11, (uint64_t *)(a1 + 14), (uint64_t)(a1 + 10), *((_BYTE *)a1 + 18), v13, (uint64_t *)(a1 + 25));
        v16 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1);
        *((_BYTE *)a1 + 62) = (unsigned __int16)(100 * *(_WORD *)(v16 + 2106)) / *(_WORD *)(v5 + 6);
        switch(v15)
        {
          case 5152:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3)
              goto LABEL_67;
            *((_DWORD *)a1 + 16) = 4;
            v17 = 5152;
            goto LABEL_65;
          case 5153:
          case 5154:
          case 5155:
            goto LABEL_52;
          case 5156:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3)
              goto LABEL_67;
            *((_DWORD *)a1 + 16) = 4;
            v17 = 5156;
            goto LABEL_65;
          case 5157:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3)
              goto LABEL_67;
            *((_DWORD *)a1 + 16) = 4;
            v17 = 5157;
            goto LABEL_65;
          case 5158:
            ++*(_WORD *)(v16 + 2112);
            if (a1[34] && *((int *)a1 + 16) > 3)
              goto LABEL_67;
            *((_DWORD *)a1 + 16) = 4;
            v17 = 5158;
LABEL_65:
            a1[34] = v17;
            goto LABEL_67;
          default:
            if (!v15)
            {
              ++*(_WORD *)(v16 + 2112);
              goto LABEL_67;
            }
            if (v15 == 5107)
            {
              if (!a1[34] || *((int *)a1 + 16) <= 7)
              {
                *((_DWORD *)a1 + 16) = 8;
                v22 = 5107;
                goto LABEL_49;
              }
            }
            else
            {
LABEL_52:
              if (!a1[34] || *((int *)a1 + 16) <= 7)
              {
                *((_DWORD *)a1 + 16) = 8;
                a1[34] = v15;
              }
            }
            break;
        }
LABEL_50:
        free(v10);
        return 8;
      default:
        if (!a1[34] || *((int *)a1 + 16) <= 7)
        {
          result = 8;
          *((_DWORD *)a1 + 16) = 8;
          v9 = 1100;
          goto LABEL_8;
        }
        return 8;
    }
LABEL_67:
    free(v10);
    return 0;
  }
  if (a1[34] && *((int *)a1 + 16) > 7)
    return 8;
  result = 8;
  *((_DWORD *)a1 + 16) = 8;
  v9 = 5105;
LABEL_8:
  a1[34] = v9;
  return result;
}

unsigned __int8 *PDatoi(unsigned __int8 *result, _WORD *a2)
{
  int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v7;

  v2 = *result;
  if ((v2 - 48) > 9)
  {
    LOWORD(v4) = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = result + 1;
    do
    {
      if ((unsigned __int16)v3++ != 0)
        v4 *= 10;
      v4 = v4 + v2 - 48;
      v7 = *v5++;
      LOBYTE(v2) = v7;
    }
    while ((v7 - 48) < 0xA);
  }
  *a2 = v4;
  return result;
}

unsigned __int8 *PDatobyte(unsigned __int8 *result, _BYTE *a2)
{
  int v2;
  int v3;
  int v4;
  unsigned __int8 *v5;
  int v7;

  v2 = *result;
  if ((v2 - 48) > 9)
  {
    LOBYTE(v4) = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    v5 = result + 1;
    do
    {
      if ((unsigned __int16)v3++ != 0)
        v4 *= 10;
      v4 = v2 + v4 - 48;
      v7 = *v5++;
      v2 = v7;
    }
    while ((v7 - 48) < 0xA);
  }
  *a2 = v4;
  return result;
}

uint64_t PDreadas(uint64_t a1)
{
  int v1;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  __int16 v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void *v9;
  void *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t *v14;
  __int16 v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unsigned int v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v28;
  int v29;
  int v32;
  uint64_t v33;
  uint64_t i;
  int v35;
  char v36;
  char v37;
  int v38;
  unsigned int v39;
  char v40;
  char v41;
  unsigned int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  int v46;
  const char *v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  char *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned __int8 v54;
  uint64_t v55;
  char *v56;
  char v57;
  unsigned int v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  BOOL v65;
  int v66;
  uint64_t v67;
  int v68;
  int v69;
  int v71;
  __int16 v73;
  __int16 v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  unsigned __int8 *v80;
  int v81;
  void *v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  void *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  int v93;
  int v94;
  unsigned __int8 *v95;
  void *v96;
  uint64_t v97;
  int v98;
  uint64_t *v99;
  char *__dst;
  __int16 v101;
  __int16 v102;
  uint64_t v103;
  _QWORD v104[3];

  v104[1] = *MEMORY[0x1E0C80C00];
  v104[0] = 0;
  v102 = 0;
  v101 = 0;
  v1 = *(unsigned __int8 *)(a1 + 784);
  if ((v1 - 3) > 1)
    return 8;
  v3 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
  v103 = 0;
  v4 = v1 != 4;
  if (*(_WORD *)(a1 + 768))
  {
    LODWORD(v103) = *(_DWORD *)(a1 + 772);
  }
  else if (SLOpen(a1 + 256, a1, (int *)&v103, 0) == 8)
  {
    if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7)
      return 8;
    result = 8;
    *(_DWORD *)(a1 + 2088) = 8;
    v6 = 1012;
LABEL_8:
    *(_WORD *)(a1 + 2092) = v6;
    return result;
  }
  v7 = (unsigned __int8 *)malloc_type_calloc(0x7D3uLL, 1uLL, 0x100004077774924uLL);
  if (!v7)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    goto LABEL_142;
  }
  v8 = v7;
  v9 = malloc_type_malloc(0x43uLL, 0xC73EF833uLL);
  if (!v9)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    v82 = v8;
    goto LABEL_141;
  }
  v10 = v9;
  v95 = (unsigned __int8 *)malloc_type_malloc(0x43uLL, 0x74EA0309uLL);
  if (!v95 || (v11 = (unsigned __int8 *)malloc_type_malloc(0x400uLL, 0xFDC5279EuLL)) == 0)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v8);
    v82 = v10;
    goto LABEL_141;
  }
  v12 = v11;
  v96 = malloc_type_malloc(0x803uLL, 0xC0348252uLL);
  if (!v96)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v8);
    free(v10);
    free(v95);
    v82 = v12;
    goto LABEL_141;
  }
  v13 = (uint64_t *)malloc_type_calloc(0x19uLL, 1uLL, 0x100004077774924uLL);
  if (!v13)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v8);
    free(v10);
    free(v95);
    free(v12);
    v82 = v96;
LABEL_141:
    free(v82);
LABEL_142:
    v83 = (_QWORD *)pMCPbuff;
    goto LABEL_143;
  }
  v14 = v13;
  __dst = (char *)v10;
  v15 = 0;
  v88 = 0;
  v89 = 0;
  v98 = 0;
  v93 = 0;
  v87 = 0;
  v90 = 0;
  v91 = v8;
  v16 = 0;
  v17 = 0;
  v99 = (uint64_t *)(v3 + 2076);
  v97 = 1024;
  v18 = v12;
LABEL_16:
  v19 = *(_DWORD *)(a1 + 780);
  if (v19 >= 0x7D0)
    v20 = 2000;
  else
    v20 = *(_DWORD *)(a1 + 780);
  if (v19)
    v21 = v20;
  else
    v21 = 2000;
  if (SLFRead(v103, v21, v8, (unsigned int *)&v103 + 1) == 8)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      LOWORD(v64) = 1010;
LABEL_205:
      *(_WORD *)(a1 + 2092) = v64;
    }
    goto LABEL_206;
  }
  v22 = 0;
  v23 = v89;
  v24 = v93;
  v25 = v97;
LABEL_24:
  LODWORD(v89) = v23;
  v92 = v18;
  v97 = v25;
  while (1)
  {
    v26 = v8[v22];
    if (v26 == 10 || v26 == 13)
      break;
    v28 = HIDWORD(v103);
    v29 = SWORD2(v103);
    if (SHIDWORD(v103) <= 1999 && SWORD2(v103) == v22 && v15 > 0)
      goto LABEL_39;
LABEL_108:
    if (v29 <= v22)
    {
      v75 = v22;
    }
    else
    {
      v73 = v22++;
      v74 = v15++;
      v18[v74] = v8[v73];
      v28 = HIDWORD(v103);
      v75 = v22;
      v29 = SWORD2(v103);
    }
    if (v29 <= v75)
    {
      if (v28 <= 1999)
      {
        v23 = 1;
        if (!(_DWORD)v89)
          goto LABEL_24;
      }
      v93 = v24;
      if (v28 > 1999)
        goto LABEL_16;
      v81 = 0;
      goto LABEL_163;
    }
    if (v15 == 1 && ((v76 = *v18, v76 == 10) || v76 == 13))
    {
      v15 = 0;
      if (!(_WORD)v25)
      {
        v94 = v24;
        v15 = 0;
        v77 = 0;
        goto LABEL_123;
      }
    }
    else if ((unsigned __int16)v15 == (unsigned __int16)v25)
    {
      if ((unsigned __int16)v25 == 2177)
      {
        v18[2177] = 13;
        v8[v22] = 13;
        v87 = 1;
        v25 = 2177;
        v15 = 2177;
        v23 = v89;
        goto LABEL_24;
      }
      v94 = v24;
      v77 = (__int16)v25;
      v15 = v25;
LABEL_123:
      v78 = 2177 - v77;
      if (2177 - v77 >= 1024)
        v78 = 1024;
      v79 = (v78 + v77);
      v80 = (unsigned __int8 *)malloc_type_realloc(v18, (int)v79, 0x100004077774924uLL);
      if (v80)
      {
        v18 = v80;
        v23 = v89;
        v24 = v94;
        v25 = v79;
        goto LABEL_24;
      }
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v6 = 1030;
        goto LABEL_8;
      }
      return 8;
    }
  }
  if (v15 <= 0)
  {
    v28 = HIDWORD(v103);
    v29 = SWORD2(v103);
    goto LABEL_108;
  }
LABEL_39:
  v18[(unsigned __int16)v15] = 0;
  if (!v4)
  {
    v48 = PDashead((char *)v18, a1);
    if (v48)
    {
      if (v48 == 301)
      {
        LODWORD(v88) = 1;
      }
      else if (v48 == 8)
      {
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 2088) = 8;
          *(_WORD *)(a1 + 2092) = 5115;
        }
        free(v8);
        free(__dst);
        free(v95);
        free(v96);
        v86 = v18;
        goto LABEL_208;
      }
      v68 = HIDWORD(v89);
      if (v48 == 302)
        v68 = 1;
      HIDWORD(v89) = v68;
    }
LABEL_93:
    v69 = v8[v22];
    if (v69 == 13 || v69 == 10)
    {
      v71 = v8[v22 + 1];
      if (v71 == 10 || v71 == 13)
        v24 = 2;
      else
        v24 = 1;
    }
    else
    {
      v24 = 1;
    }
    v28 = HIDWORD(v103);
    v29 = SWORD2(v103);
    v15 = 0;
    if (v24 + v22 > SWORD2(v103))
      v22 = WORD2(v103) + v24;
    else
      v22 += v24;
    v4 = 1;
    v25 = v97;
    goto LABEL_108;
  }
  LOBYTE(v93) = v24;
  if (*(_BYTE *)(a1 + 784) != 4)
  {
    v45 = v17;
    v46 = v16;
    v47 = __dst;
    if ((unsigned __int16)strlen((const char *)v18) < 0x41uLL)
    {
      __strcpy_chk();
    }
    else
    {
      strncpy(__dst, (const char *)v18, 0x40uLL);
      __dst[64] = 0;
    }
    goto LABEL_61;
  }
  v32 = PDasparse(v18, (uint64_t)__dst, (_BYTE *)&v101 + 1, &v101, (uint64_t)v96, &v102, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092), (uint64_t)v14);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092))
  {
    v33 = 0;
    for (i = 0; i != 12; ++i)
    {
      v35 = *((unsigned __int8 *)v14 + v33);
      if ((v35 - 48) >= 0xA)
        v36 = -112;
      else
        v36 = 0;
      v37 = v36 + 16 * v35;
      v38 = *((unsigned __int8 *)v14 + v33 + 1);
      v39 = v38 - 48;
      v40 = v38 - 48 + v37;
      v41 = v38 + v37 - 55;
      if (v39 < 0xA)
        v41 = v40;
      *((_BYTE *)v14 + i) = v41;
      v33 += 2;
    }
  }
  v42 = v90;
  v43 = (char)v90 > 19;
  v44 = HIDWORD(v90);
  if (v32 == 5153)
  {
    v44 = 1;
    v42 = v90 + 1;
  }
  else
  {
    v43 = v32 == 5101;
  }
  if (!v43)
  {
    v90 = __PAIR64__(v44, v42);
    v45 = v17;
    v46 = v16;
    v47 = __dst;
LABEL_61:
    v49 = strlen(v47);
    v50 = SLLngToA(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))
                                      + 2069));
    v51 = (char *)v47;
    v52 = v95;
    if (SLchcnv(v51, v49, v95, 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))+ 2069)) == 8)
    {
      free(v91);
      free(__dst);
      free(v95);
      free(v92);
      free(v96);
      return 5111;
    }
    v53 = PDhypstrip(v95, v99, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2068));
    v54 = SLcap((uint64_t)v95, 0, v53 - 1, v104, v50);
    if (v53)
    {
      v55 = v53;
      v56 = __dst;
      do
      {
        v58 = *v52++;
        v57 = v58;
        v59 = v58 + 32;
        if ((*(_DWORD *)(v50 + 4 * v58) & 0x40000000) != 0)
          v57 = v59;
        *v56++ = v57;
        --v55;
      }
      while (v55);
    }
    __dst[v53] = 0;
    v60 = *(unsigned __int16 *)(a1 + 2074);
    v61 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v60);
    **(_BYTE **)(v61 + 2168) = 0;
    v62 = PDadd(v61, __dst, (char)v101, SHIBYTE(v101), (char *)v96, v102, v99, (uint64_t)v104, v54, v60, v14);
    v18 = v92;
    if (v62 == 5152)
    {
      v62 = 0;
      HIDWORD(v88) = 1;
      v16 = v46;
      v17 = v45;
    }
    else
    {
      v16 = v46;
      if (v62 == 5107)
      {
        LOBYTE(v17) = v45;
        if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
        {
          *(_DWORD *)(a1 + 2088) = 8;
          *(_WORD *)(a1 + 2092) = 5107;
        }
        v81 = 1;
        v8 = v91;
LABEL_163:
        v85 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
        *(_BYTE *)(v85 + 2066) = v93;
        if (!*(_BYTE *)(v85 + 780))
          SLClose(v103);
        if (v87 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5109;
        }
        if ((_DWORD)v88 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7))
        {
          *(_DWORD *)(a1 + 2088) = 8;
          *(_WORD *)(a1 + 2092) = 5115;
        }
        if (BYTE4(v89) && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5154;
        }
        if (BYTE4(v90) && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5153;
        }
        if (HIDWORD(v88) == 1 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5152;
        }
        if (v81 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5107;
        }
        if (v98 == 1 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5158;
        }
        if ((_BYTE)v17 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5157;
        }
        if ((_BYTE)v16 && (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 3))
        {
          *(_DWORD *)(a1 + 2088) = 4;
          *(_WORD *)(a1 + 2092) = 5156;
        }
        free(v8);
        free(__dst);
        free(v95);
        free(v18);
        free(v96);
        free(v14);
        return 0;
      }
      v17 = v45;
    }
    if (v62 == 5158)
      v63 = 0;
    else
      v63 = v62;
    if (v63 == 5156)
      v64 = 0;
    else
      v64 = v63;
    if (v64)
      v65 = v64 == 5157;
    else
      v65 = 1;
    v8 = v91;
    if (!v65)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        *(_DWORD *)(a1 + 2088) = 8;
        goto LABEL_205;
      }
LABEL_206:
      free(v8);
      free(__dst);
      free(v95);
      v84 = v18;
      goto LABEL_207;
    }
    if (v64 == 5157)
      v17 = 1;
    if (v63 == 5156)
      v16 = 1;
    v66 = v98;
    if (v62 == 5158)
      v66 = 1;
    v98 = v66;
    v67 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074));
    ++*(_WORD *)(v67 + 2112);
    goto LABEL_93;
  }
  if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
  {
    *(_DWORD *)(a1 + 2088) = 8;
    *(_WORD *)(a1 + 2092) = 5101;
  }
  free(v91);
  free(__dst);
  free(v95);
  v84 = v92;
LABEL_207:
  free(v84);
  v86 = v96;
LABEL_208:
  free(v86);
  v83 = (_QWORD *)pMCPbuff;
LABEL_143:
  if (!*(_BYTE *)(*(_QWORD *)(*v83 + 8 * *(unsigned __int16 *)(a1 + 2074)) + 780))
    SLClose(v103);
  return 8;
}

uint64_t PDashead(char *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  __int16 v11;
  int v12;
  int v13;
  __int16 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  BOOL v20;
  int v21;
  _QWORD *v22;
  int v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  unsigned __int8 *v52;
  int v53;
  int v54;

  v4 = (unsigned __int8 *)malloc_type_malloc(0x41uLL, 0xA5B6EE54uLL);
  if (!v4)
  {
    if (!*(_WORD *)(a2 + 2092) || *(int *)(a2 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a2 + 2088) = 8;
      *(_WORD *)(a2 + 2092) = 1030;
      return result;
    }
    return 8;
  }
  v5 = v4;
  v6 = strlen(a1);
  if (v6 << 16 <= -65537)
  {
LABEL_3:
    free(v5);
    return 8;
  }
  v8 = 0;
  v54 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = (__int16)v6;
  LOWORD(v13) = -1;
  while (2)
  {
    v14 = v13;
    v13 = v8;
    if ((char)v10 <= 0x18)
    {
      if (((1 << v10) & 0xAAAAAA) != 0)
      {
        if (a1[(__int16)v8] == 35)
        {
          ++v10;
          ++v9;
        }
      }
      else if (((1 << v10) & 0x1555554) != 0)
      {
        ++v10;
        v11 = v8;
      }
      else
      {
        if (a1[(__int16)v8] != 35)
          goto LABEL_3;
        ++v9;
        ++v10;
        v11 = v14 + 2;
      }
    }
    if ((char)v10 >= 24)
    {
      free(v5);
      return 303;
    }
    else
    {
      switch((char)v10)
      {
        case 2:
          if (SLstrncmp("#HEADER START", (unsigned __int8 *)a1, 13))
            goto LABEL_3;
          v10 = 2;
          goto LABEL_70;
        case 4:
          v15 = v54;
          if (a1[v11] < 0x32u)
            v15 = 1;
          v54 = v15;
          v10 = 4;
          goto LABEL_70;
        case 6:
          __strncpy_chk();
          LOBYTE(v16) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          v17 = *v5;
          if ((v17 - 48) <= 9)
          {
            v18 = 0;
            v16 = 0;
            v19 = v5 + 1;
            do
            {
              v20 = (unsigned __int16)v18++ == 0;
              if (!v20)
                v16 *= 10;
              v16 = v17 + v16 - 48;
              v21 = *v19++;
              v17 = v21;
            }
            while ((v21 - 48) < 0xA);
          }
          v22 = (_QWORD *)pMCPbuff;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2069) = v16;
          goto LABEL_39;
        case 8:
          __strncpy_chk();
          LOBYTE(v23) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          v24 = *v5;
          if ((v24 - 48) <= 9)
          {
            v25 = 0;
            v23 = 0;
            v26 = v5 + 1;
            do
            {
              v20 = (unsigned __int16)v25++ == 0;
              if (!v20)
                v23 *= 10;
              v23 = v24 + v23 - 48;
              v27 = *v26++;
              v24 = v27;
            }
            while ((v27 - 48) < 0xA);
          }
          v22 = (_QWORD *)pMCPbuff;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2084) = v23;
          goto LABEL_39;
        case 10:
          __strncpy_chk();
          LOBYTE(v28) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          v29 = *v5;
          if ((v29 - 48) <= 9)
          {
            v30 = 0;
            v28 = 0;
            v31 = v5 + 1;
            do
            {
              v20 = (unsigned __int16)v30++ == 0;
              if (!v20)
                v28 *= 10;
              v28 = v29 + v28 - 48;
              v32 = *v31++;
              v29 = v32;
            }
            while ((v32 - 48) < 0xA);
          }
          v22 = (_QWORD *)pMCPbuff;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2085) = v28;
LABEL_39:
          switch((char)v10)
          {
            case 12:
              goto LABEL_59;
            case 14:
              goto LABEL_40;
            case 16:
              goto LABEL_46;
            case 18:
              goto LABEL_52;
            case 22:
              goto LABEL_61;
            default:
              goto LABEL_70;
          }
          goto LABEL_70;
        case 12:
          v22 = (_QWORD *)pMCPbuff;
LABEL_59:
          v48 = *(_QWORD *)(*v22 + 8 * *(unsigned __int16 *)(a2 + 2074));
          *(_BYTE *)(v48 + 2068) = a1[v11];
          if ((_BYTE)v54)
          {
            *(_BYTE *)(v48 + 2092) = 0;
LABEL_61:
            __strncpy_chk();
            LOBYTE(v49) = 0;
            v5[(__int16)v13 - (uint64_t)v11] = 0;
            v50 = *v5;
            if ((v50 - 48) <= 9)
            {
              v51 = 0;
              v49 = 0;
              v52 = v5 + 1;
              do
              {
                v20 = (unsigned __int16)v51++ == 0;
                if (!v20)
                  v49 *= 10;
                v49 = v50 + v49 - 48;
                v53 = *v52++;
                v50 = v53;
              }
              while ((v53 - 48) < 0xA);
            }
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2092) = v49;
            v10 = 22;
          }
          else
          {
            v54 = 0;
            v10 = 12;
          }
LABEL_70:
          v8 = v13 + 1;
          if (v12 >= (__int16)v13)
            continue;
          free(v5);
          if ((char)v9 <= 23)
            return 8;
          result = 0;
          break;
        case 14:
LABEL_40:
          __strncpy_chk();
          LOWORD(v33) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          v34 = *v5;
          if ((v34 - 48) <= 9)
          {
            v35 = 0;
            v33 = 0;
            v36 = v5 + 1;
            do
            {
              v20 = (unsigned __int16)v35++ == 0;
              if (!v20)
                v33 *= 10;
              v33 = v33 + v34 - 48;
              v37 = *v36++;
              LOBYTE(v34) = v37;
            }
            while ((v37 - 48) < 0xA);
          }
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2086) = v33;
          goto LABEL_70;
        case 16:
LABEL_46:
          __strncpy_chk();
          LOBYTE(v38) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          v39 = *v5;
          if ((v39 - 48) <= 9)
          {
            v40 = 0;
            v38 = 0;
            v41 = v5 + 1;
            do
            {
              v20 = (unsigned __int16)v40++ == 0;
              if (!v20)
                v38 *= 10;
              v38 = v39 + v38 - 48;
              v42 = *v41++;
              v39 = v42;
            }
            while ((v42 - 48) < 0xA);
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2090) = v38;
          goto LABEL_70;
        case 18:
LABEL_52:
          __strncpy_chk();
          LOBYTE(v43) = 0;
          v5[(__int16)v13 - (uint64_t)v11] = 0;
          v44 = *v5;
          if ((v44 - 48) <= 9)
          {
            v45 = 0;
            v43 = 0;
            v46 = v5 + 1;
            do
            {
              v20 = (unsigned __int16)v45++ == 0;
              if (!v20)
                v43 *= 10;
              v43 = v44 + v43 - 48;
              v47 = *v46++;
              v44 = v47;
            }
            while ((v47 - 48) < 0xA);
          }
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a2 + 2074)) + 2091) = v43;
          goto LABEL_70;
        case 22:
          goto LABEL_61;
        case 23:
          if (SLstrncmp("HEADER END#", (unsigned __int8 *)&a1[v11], 11))
            goto LABEL_3;
          v10 = 23;
          goto LABEL_70;
        default:
          goto LABEL_70;
      }
    }
    return result;
  }
}

uint64_t PDwriteas(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  __int16 v4;
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  void *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  __int16 v15;
  unsigned __int16 v16;
  size_t v17;
  unsigned __int16 v18;
  unsigned __int16 v19;
  size_t v20;
  __int16 v21;
  unsigned __int16 v22;
  unsigned __int16 v23;
  size_t v24;
  unsigned __int16 v25;
  unsigned __int16 v26;
  size_t v27;
  unsigned __int16 v28;
  unsigned __int16 v29;
  size_t v30;
  unsigned __int16 v31;
  unsigned __int16 v32;
  size_t v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  unsigned int v36;
  size_t v37;
  unsigned __int16 v38;
  _BYTE *v39;
  char *v40;
  void *v41;
  char *v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _WORD *v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  void *v57;
  size_t __n;
  unsigned __int8 *v59;
  void *v60;
  char *v61;
  void *__src;
  char *__dst;
  char __str[2];
  char v65;
  __int16 v66;
  char v67;
  unsigned __int8 v68;
  __int16 v69;
  unsigned int v70;
  uint64_t v71;

  if (*(unsigned __int8 *)(a1 + 785) - 3 > 1)
    return 8;
  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168);
  v71 = 0;
  v70 = 0;
  v69 = 0;
  v68 = 0;
  v67 = 0;
  v66 = 0;
  if (*(_WORD *)(a1 + 768))
  {
    v70 = *(_DWORD *)(a1 + 772);
    if (SLSeek(v70, *(_DWORD *)(a1 + 776), 0) == 8)
    {
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v4 = 1015;
LABEL_11:
        *(_WORD *)(a1 + 2092) = v4;
        return result;
      }
      return 8;
    }
  }
  else if (SLOpen(a1 + 1042, a1 + 786, (int *)&v70, 0x602u) == 8)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v4 = 1012;
      goto LABEL_11;
    }
    return 8;
  }
  v5 = malloc_type_malloc(0x882uLL, 0x79DF9D7DuLL);
  if (!v5)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    goto LABEL_50;
  }
  v6 = v5;
  v7 = malloc_type_malloc(0x41uLL, 0x4585AA91uLL);
  if (!v7)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    v41 = v6;
    goto LABEL_49;
  }
  v8 = v7;
  v9 = (unsigned __int8 *)malloc_type_malloc(0x44uLL, 0xB0520871uLL);
  if (!v9)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    v41 = v8;
    goto LABEL_49;
  }
  v10 = v9;
  v11 = (char *)malloc_type_malloc(0x44uLL, 0x327353CCuLL);
  if (!v11)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    v41 = v10;
    goto LABEL_49;
  }
  v12 = v11;
  __dst = (char *)malloc_type_malloc(0x41uLL, 0x9D69AD1AuLL);
  if (!__dst)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    free(v10);
    v41 = v12;
    goto LABEL_49;
  }
  v13 = malloc_type_malloc(0x801uLL, 0xB6FA792AuLL);
  if (!v13)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    free(v10);
    free(v12);
    v41 = __dst;
    goto LABEL_49;
  }
  v14 = v13;
  __src = malloc_type_malloc(0x19uLL, 0x9B391059uLL);
  if (!__src)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1030;
    }
    free(v6);
    free(v8);
    free(v10);
    free(v12);
    free(__dst);
    v41 = v14;
LABEL_49:
    free(v41);
LABEL_50:
    if (!*(_WORD *)(a1 + 768))
      SLClose(v70);
    return 8;
  }
  v60 = v14;
  v61 = v12;
  v57 = v8;
  if (*(_BYTE *)(a1 + 785) == 4)
  {
    qmemcpy(v6, "#HEADER START#2#", 16);
    PDitoa(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2069), (uint64_t)v8);
    strlen((const char *)v8);
    __strncpy_chk();
    v15 = strlen((const char *)v8);
    v16 = v15 + 17;
    v6[(unsigned __int16)(v15 + 16)] = 35;
    PDitoa(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2084), (uint64_t)v8);
    v17 = strlen((const char *)v8);
    strncpy(&v6[v16], (const char *)v8, v17);
    v18 = v16 + strlen((const char *)v8);
    v19 = v18 + 1;
    v6[v18] = 35;
    PDitoa(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2085), (uint64_t)v8);
    v20 = strlen((const char *)v8);
    strncpy(&v6[v19], (const char *)v8, v20);
    v21 = strlen((const char *)v8);
    v6[(unsigned __int16)(v19 + v21)] = 35;
    v22 = v19 + v21 + 2;
    v6[(unsigned __int16)(v19 + v21 + 1)] = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff
                                                                 + 8 * *(unsigned __int16 *)(a1 + 2074))
                                                     + 2068);
    v23 = v19 + v21 + 3;
    v6[v22] = 35;
    PDitoa(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2086), (uint64_t)v8);
    v24 = strlen((const char *)v8);
    strncpy(&v6[v23], (const char *)v8, v24);
    v25 = v23 + strlen((const char *)v8);
    v26 = v25 + 1;
    v6[v25] = 35;
    PDitoa((unsigned __int16)*(char *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2090), (uint64_t)v8);
    v27 = strlen((const char *)v8);
    strncpy(&v6[v26], (const char *)v8, v27);
    v28 = v26 + strlen((const char *)v8);
    v29 = v28 + 1;
    v6[v28] = 35;
    PDitoa(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2091), (uint64_t)v8);
    v30 = strlen((const char *)v8);
    strncpy(&v6[v29], (const char *)v8, v30);
    v31 = v29 + strlen((const char *)v8);
    v32 = v31 + 1;
    v6[v31] = 35;
    PDitoa(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2094), (uint64_t)v8);
    v33 = strlen((const char *)v8);
    strncpy(&v6[v32], (const char *)v8, v33);
    v34 = v32 + strlen((const char *)v8);
    v35 = v34 + 1;
    v6[v34] = 35;
    v36 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092);
    PDitoa(v36, (uint64_t)v8);
    v37 = strlen((const char *)v8);
    strncpy(&v6[v35], (const char *)v8, v37);
    v38 = v35 + strlen((const char *)v8);
    v12 = v61;
    v6[v38] = 35;
    v39 = &v6[(unsigned __int16)(v38 + 1)];
    *(_DWORD *)(v39 + 7) = 591679045;
    *(_QWORD *)v39 = *(_QWORD *)"HEADER END#";
    v6[(unsigned __int16)(v38 + 12)] = 13;
    v6[(unsigned __int16)(v38 + 13)] = 10;
    if (SLFWrite(v70, (unsigned __int16)(v38 + 14), v6, (unsigned int *)&v71 + 1) == 8)
    {
      free(v6);
      free(v8);
      free(v10);
      free(v61);
      v40 = __dst;
LABEL_72:
      free(v40);
      free(__src);
      free(v60);
      if (!*(_WORD *)(a1 + 768))
        SLClose(v70);
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v4 = 1011;
        goto LABEL_11;
      }
      return 8;
    }
  }
  else
  {
    v36 = 0;
  }
  __n = 2 * v36;
  v59 = v10;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168) + 18) = 0;
  v42 = __dst;
  while (1)
  {
    v43 = *(unsigned __int8 *)(a1 + 785);
    if (v43 != 3)
      break;
    if (PDgetrdwrd(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)), v42, (_BYTE *)&v66 + 1, &v67, &v71, &v66, &v69, (uint64_t)__src) == 8)goto LABEL_77;
    v53 = v66;
    v54 = strlen(v42);
    if (SLchcnv(v42, v54, v6, 0, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))+ 2069)) == 8)
    {
LABEL_80:
      free(v6);
      free(v57);
      free(v10);
      free(v12);
      free(v42);
      free(__src);
      free(v60);
      if (!*(_WORD *)(a1 + 768))
        SLClose(v70);
      return 5111;
    }
    LOWORD(v45) = v53;
LABEL_70:
    v6[v53] = 13;
    v6[(unsigned __int16)(v45 + 1)] = 10;
    if (SLFWrite(v70, (unsigned __int16)(v45 + 2), v6, (unsigned int *)&v71 + 1) == 8)
    {
      free(v6);
      free(v57);
      free(v10);
      free(v12);
      v40 = v42;
      goto LABEL_72;
    }
  }
  if (v43 != 4)
    return 8;
  if (PDgetrdraw(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)), (uint64_t)v10, &v68) != 8)
  {
    *v6 = 35;
    __strncpy_chk();
    v12[v68 - 3] = 0;
    v44 = strlen(v12);
    if (SLchcnv(v12, v44, (unsigned __int8 *)v42, 0, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074))+ 2069)) == 8)goto LABEL_80;
    __strcpy_chk();
    v45 = v68;
    v46 = *v10;
    v47 = v10[1];
    v48 = v47 - v46 + (v46 << 8);
    v49 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + 20 * (int)v48 + 19);
    v6[(unsigned __int16)(v68 - 2)] = 35;
    v6[(unsigned __int16)(v45 - 1)] = v49 & 1 | 0x30;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2092))
    {
      v6[v45] = 35;
      if (v36)
      {
        v50 = 20 * v47 + 5100 * v46;
        v51 = v36;
        v52 = __src;
        do
        {
          snprintf(__str, 3uLL, "%02X", *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v50));
          v65 = 0;
          *v52++ = *(_WORD *)__str;
          ++v50;
          --v51;
        }
        while (v51);
      }
      memcpy(&v6[v45 + 1], __src, __n);
      LODWORD(v45) = v45 + 1 + __n;
      v10 = v59;
      v42 = __dst;
    }
    if ((*(_BYTE *)(*(_QWORD *)(v2 + 48) + 20 * (int)v48 + 19) & 2) != 0)
    {
      v55 = (v45 + 1);
      v6[v45] = 35;
      PDgetalt(v60, *(unsigned __int16 *)(*(_QWORD *)(v2 + 48) + 20 * v48 + 16), *(_DWORD *)(*(_QWORD *)(v2 + 48) + 20 * v48 + 12), *(unsigned __int16 *)(a1 + 2074));
      v42 = __dst;
      v56 = *(_WORD *)(*(_QWORD *)(v2 + 48) + 20 * v48 + 16);
      strncpy(&v6[v55], (const char *)v60, v56);
      LOWORD(v45) = v56 + v55;
    }
    v12 = v61;
    v53 = (unsigned __int16)v45;
    goto LABEL_70;
  }
LABEL_77:
  if (!*(_WORD *)(a1 + 768))
    SLClose(v70);
  free(v6);
  free(v57);
  free(v10);
  free(v12);
  free(v42);
  free(__src);
  free(v60);
  result = 0;
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(a1 + 2074)) + 2168) = 0;
  return result;
}

uint64_t PDfiletype(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unsigned int v4;
  uint64_t result;
  __int16 v6;
  __int16 v7;
  int v8;
  __int16 v9;
  char v10;
  int v11[2];

  v2 = malloc_type_malloc(0x7D1uLL, 0x1C7A8BD2uLL);
  if (!v2)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2088) = 8;
      v6 = 1030;
LABEL_26:
      *(_WORD *)(a1 + 2092) = v6;
      return result;
    }
    return 8;
  }
  v3 = v2;
  *(_QWORD *)v11 = 0;
  if (*(_WORD *)(a1 + 768))
  {
    v11[1] = *(_DWORD *)(a1 + 772);
    v4 = v11[1];
    if (SLSeek(v11[1], *(_DWORD *)(a1 + 776), 0) == 8)
      goto LABEL_23;
  }
  else
  {
    if (SLOpen(a1 + 256, a1, &v11[1], 0) == 8)
    {
      if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7)
        goto LABEL_13;
      *(_DWORD *)(a1 + 2088) = 8;
      v7 = 1012;
      goto LABEL_12;
    }
    v4 = v11[1];
  }
  if (SLFRead(v4, 2000, v3, (unsigned int *)v11) == 8)
  {
    if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
    {
      *(_DWORD *)(a1 + 2088) = 8;
      *(_WORD *)(a1 + 2092) = 1010;
    }
    free(v3);
    if (!*(_WORD *)(a1 + 768))
      SLClose(v11[1]);
    return 8;
  }
  if (*(_WORD *)(a1 + 768))
  {
    if (SLSeek(v11[1], *(_DWORD *)(a1 + 776), 0) == 8)
    {
LABEL_23:
      if (!*(_WORD *)(a1 + 2092) || *(int *)(a1 + 2088) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2088) = 8;
        v6 = 1015;
        goto LABEL_26;
      }
      return 8;
    }
  }
  else
  {
    SLClose(v11[1]);
  }
  if (SLstrncmp(v3, "#HEADER START", 13))
  {
    if (SLstrncmp(v3 + 414, "#HEADER COMP START", 18))
    {
      if (v11[0] < 1)
      {
        v8 = 0;
      }
      else
      {
        v8 = *v3;
        if (*v3)
        {
          v9 = 0;
          do
            v8 = ++v9;
          while (v11[0] > v9 && v3[v9]);
        }
      }
      if (v8 < SLOWORD(v11[0]))
      {
        if (*(_WORD *)(a1 + 2092) && *(int *)(a1 + 2088) > 7)
          goto LABEL_13;
        *(_DWORD *)(a1 + 2088) = 8;
        v7 = 5118;
LABEL_12:
        *(_WORD *)(a1 + 2092) = v7;
LABEL_13:
        free(v3);
        return 8;
      }
      v10 = 3;
    }
    else
    {
      v10 = 5;
    }
  }
  else
  {
    v10 = 4;
  }
  *(_BYTE *)(a1 + 784) = v10;
  *(_BYTE *)(a1 + 785) = v10;
  free(v3);
  return 0;
}

uint64_t PDinit()
{
  void *v0;
  _WORD *v1;
  void *v2;
  _WORD *v3;
  void *v4;
  _WORD *v5;
  void *v6;
  _WORD *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t result;
  void *v12;

  pMCPbuff = (uint64_t)malloc_type_calloc(1uLL, 0x30uLL, 0x90040FD959A3FuLL);
  if (pMCPbuff)
  {
    v0 = malloc_type_calloc(0x1AuLL, 8uLL, 0x10040436913F5uLL);
    *(_QWORD *)pMCPbuff = v0;
    if (v0)
    {
      v1 = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
      v2 = (void *)pMCPbuff;
      *(_QWORD *)(pMCPbuff + 8) = v1;
      if (v1)
      {
        *v1 = 0;
        v3 = malloc_type_calloc(0x1AuLL, 2uLL, 0x1000040BDFB0063uLL);
        v4 = (void *)pMCPbuff;
        *(_QWORD *)(pMCPbuff + 16) = v3;
        if (v3)
        {
          *v3 = 0;
          v5 = malloc_type_calloc(1uLL, 2uLL, 0x1000040BDFB0063uLL);
          v6 = (void *)pMCPbuff;
          *(_QWORD *)(pMCPbuff + 24) = v5;
          if (v5)
          {
            *v5 = 0;
            v7 = malloc_type_calloc(6uLL, 2uLL, 0x1000040BDFB0063uLL);
            v8 = (void *)pMCPbuff;
            *(_QWORD *)(pMCPbuff + 32) = v7;
            if (v7)
            {
              *v7 = 0;
              v9 = malloc_type_calloc(6uLL, 8uLL, 0x10040436913F5uLL);
              v10 = (void *)pMCPbuff;
              *(_QWORD *)(pMCPbuff + 40) = v9;
              if (v9)
              {
                result = 0;
                pdmcpsta = 1;
                return result;
              }
              free(v10);
              free(*(void **)pMCPbuff);
              free(*(void **)(pMCPbuff + 8));
              free(*(void **)(pMCPbuff + 16));
              free(*(void **)(pMCPbuff + 24));
              v12 = *(void **)(pMCPbuff + 40);
            }
            else
            {
              free(v8);
              free(*(void **)pMCPbuff);
              free(*(void **)(pMCPbuff + 8));
              free(*(void **)(pMCPbuff + 16));
              v12 = *(void **)(pMCPbuff + 24);
            }
          }
          else
          {
            free(v6);
            free(*(void **)pMCPbuff);
            free(*(void **)(pMCPbuff + 8));
            v12 = *(void **)(pMCPbuff + 16);
          }
        }
        else
        {
          free(v4);
          free(*(void **)pMCPbuff);
          v12 = *(void **)(pMCPbuff + 8);
        }
      }
      else
      {
        free(v2);
        v12 = *(void **)pMCPbuff;
      }
    }
    else
    {
      v12 = (void *)pMCPbuff;
    }
    free(v12);
  }
  return 1030;
}

void PDterm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  free(*(void **)pMCPbuff);
  *(_QWORD *)pMCPbuff = 0;
  free(*(void **)(pMCPbuff + 8));
  v0 = pMCPbuff;
  *(_QWORD *)(pMCPbuff + 8) = 0;
  free(*(void **)(v0 + 16));
  v1 = pMCPbuff;
  *(_QWORD *)(pMCPbuff + 16) = 0;
  free(*(void **)(v1 + 24));
  v2 = pMCPbuff;
  *(_QWORD *)(pMCPbuff + 24) = 0;
  free(*(void **)(v2 + 32));
  v3 = pMCPbuff;
  *(_QWORD *)(pMCPbuff + 32) = 0;
  free(*(void **)(v3 + 40));
  free((void *)pMCPbuff);
  pMCPbuff = 0;
  pdmcpsta = 0;
}

uint64_t baseLanguageForLanguage(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1;
  if (a1)
  {
    v2 = (void *)objc_msgSend(MEMORY[0x1E0C99DC8], "canonicalLanguageIdentifierFromString:", a1);
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(v2, "rangeOfString:", CFSTR("-"));
      if (v5)
        return objc_msgSend(v3, "substringToIndex:", v4);
      return (uint64_t)v3;
    }
  }
  return v1;
}

uint64_t PDRDinit(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  __int16 v6;
  size_t v7;
  size_t v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int16 v19;

  v2 = *(unsigned __int16 *)(a1 + 2064);
  if (*(_WORD *)(a1 + 2064))
  {
    if (v2 - 96 < 0xFFFFFFA1)
      return 8;
  }
  else
  {
    v2 = 10;
    *(_WORD *)(a1 + 2064) = 10;
  }
  v3 = *(_QWORD *)(a1 + 2168);
  *(_DWORD *)(v3 + 8) = v2 << 10;
  v4 = (1869917735 * (unint64_t)(v2 << 15)) >> 38;
  *(_WORD *)(v3 + 2) = v4;
  if (v2 <= 0x5E)
    v5 = 101376 * v2 / 0x93;
  else
    v5 = -36;
  *(_WORD *)(v3 + 6) = v5;
  v6 = ((unsigned __int16)v4 >> 6) + 10;
  if ((unsigned __int16)v4 > 0x5BFu)
    v6 = 32;
  *(_WORD *)(v3 + 14) = v6;
  *(_WORD *)(v3 + 4) = (unsigned __int16)v4 >> 1;
  v7 = 2 * ((unsigned __int16)v4 >> 3) + ((unsigned __int16)v4 >> 3);
  *(_WORD *)(a1 + 2116) = 3 * ((unsigned __int16)v4 >> 3);
  *(_WORD *)(v3 + 12) = 3 * ((unsigned __int16)v4 >> 3);
  v8 = *(unsigned __int16 *)(v3 + 6);
  v9 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v3 + 2), 0x6DEECAECuLL);
  *(_QWORD *)(v3 + 32) = v9;
  if (!v9)
  {
LABEL_21:
    free((void *)v3);
    return 8;
  }
  v10 = malloc_type_calloc(1uLL, v8, 0x100004077774924uLL);
  *(_QWORD *)(v3 + 40) = v10;
  if (!v10)
  {
LABEL_20:
    free(*(void **)(v3 + 32));
    goto LABEL_21;
  }
  v11 = malloc_type_calloc(v7, 0x14uLL, 0x1000040A86A77D5uLL);
  *(_QWORD *)(v3 + 48) = v11;
  if (!v11)
  {
    free(*(void **)(v3 + 40));
    *(_QWORD *)(v3 + 40) = 0;
    goto LABEL_20;
  }
  *(_WORD *)(v3 + 56) = *(_WORD *)(a1 + 2116);
  *(_WORD *)(v3 + 58) = 0;
  v12 = *(unsigned __int16 *)(v3 + 4);
  v13 = 0x8000;
  do
  {
    v14 = v13;
    v15 = v13;
    v13 >>= 1;
  }
  while ((v15 & v12) == 0);
  *(_WORD *)(v3 + 16) = 2 * v14 - 1;
  if (v12)
  {
    v16 = 0;
    v17 = *(_QWORD *)(v3 + 32);
    do
      *(_WORD *)(v17 + 2 * v16++) = -1;
    while (v16 < *(unsigned __int16 *)(v3 + 4));
  }
  result = 0;
  *(_DWORD *)(v3 + 22) = 0;
  *(_WORD *)(a1 + 2104) = *(_WORD *)(v3 + 12);
  v19 = *(_WORD *)(v3 + 6);
  *(_WORD *)(a1 + 2106) = v19;
  *(_WORD *)(a1 + 2108) = v19;
  return result;
}

_WORD *CalculateSize(_WORD *result, _WORD *a2, __int16 *a3, _WORD *a4, _WORD *a5, int a6)
{
  unsigned int v6;
  __int16 v7;
  unsigned int v8;

  *result = 32 * a6 / 0x93u;
  v6 = 99 * a6 / 0x93u;
  if ((unsigned __int16)v6 > 0xFFDCu)
    LOWORD(v6) = -36;
  *a2 = v6;
  if ((unsigned __int16)*result <= 0x5BFu)
    v7 = (*result >> 6) + 10;
  else
    v7 = 32;
  *a3 = v7;
  v8 = (unsigned __int16)*result;
  *a4 = *result >> 1;
  *a5 = 3 * (v8 >> 3);
  return result;
}

uint64_t InitializeMask(uint64_t result)
{
  unsigned __int16 v1;
  unsigned __int16 v2;
  unsigned __int16 v3;

  v1 = 0x8000;
  do
  {
    v2 = v1;
    v3 = v1;
    v1 >>= 1;
  }
  while ((v3 & *(_WORD *)(result + 4)) == 0);
  *(_WORD *)(result + 16) = 2 * v2 - 1;
  return result;
}

uint64_t PDgetrdwrd(uint64_t a1, char *__dst, _BYTE *a3, _BYTE *a4, _DWORD *a5, _BYTE *a6, _WORD *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  size_t v19;
  unint64_t v20;
  char v21;
  int v22;
  __int16 v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v8 = *(_QWORD *)(a1 + 2168);
  if (*(unsigned __int16 *)(v8 + 20) >= *(unsigned __int16 *)(a1 + 2112))
    return 8;
  v16 = *(_QWORD *)(v8 + 32);
  v17 = *(unsigned __int16 *)(v8 + 18);
  v18 = *(unsigned __int16 *)(v16 + 2 * v17);
  if (v18 >= 0xFFFE)
  {
    do
    {
      LODWORD(v17) = v17 + 1;
      *(_WORD *)(v8 + 18) = v17;
      v18 = *(unsigned __int16 *)(v16 + 2 * (unsigned __int16)v17);
    }
    while (v18 > 0xFFFD);
  }
  if (*(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + v18 + 2) >= 0x40u)
    v19 = 64;
  else
    v19 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + v18 + 2);
  *a6 = v19;
  strncpy(__dst, (const char *)(*(_QWORD *)(v8 + 40) + v18 + 3), v19);
  __dst[*a6] = 0;
  v20 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + v18 + 1)
      - (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + v18)
      + ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v8 + 40) + v18) << 8);
  *a3 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + 20 * v20 + 19) & 1;
  v21 = *(_BYTE *)(*(_QWORD *)(v8 + 48) + 20 * v20 + 19);
  *a4 = v21 & 2;
  if ((v21 & 2) != 0)
  {
    v25 = *(_QWORD *)(v8 + 48) + 20 * (int)v20;
    v22 = *(_DWORD *)(v25 + 12);
    v23 = *(_WORD *)(v25 + 16);
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  result = 0;
  *a5 = v22;
  *a7 = v23;
  v26 = *(_QWORD *)(v8 + 48) + 20 * (int)v20;
  v27 = *(_QWORD *)v26;
  *(_DWORD *)(a8 + 8) = *(_DWORD *)(v26 + 8);
  *(_QWORD *)a8 = v27;
  ++*(_WORD *)(v8 + 18);
  ++*(_WORD *)(v8 + 20);
  return result;
}

uint64_t PDgetrdraw(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 2168);
  if (*(unsigned __int16 *)(v3 + 20) >= *(unsigned __int16 *)(a1 + 2112))
    return 8;
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(unsigned __int16 *)(v3 + 18);
  v6 = *(unsigned __int16 *)(v4 + 2 * v5);
  if (v6 >= 0xFFFE)
  {
    do
    {
      LODWORD(v5) = v5 + 1;
      *(_WORD *)(v3 + 18) = v5;
      v6 = *(unsigned __int16 *)(v4 + 2 * (unsigned __int16)v5);
    }
    while (v6 > 0xFFFD);
  }
  v7 = 0;
  *a3 = *(_BYTE *)(*(_QWORD *)(v3 + 40) + v6 + 2) + 3;
  do
  {
    *(_BYTE *)(a2 + v7) = *(_BYTE *)(*(_QWORD *)(v3 + 40)
                                                    + *(unsigned __int16 *)(*(_QWORD *)(v3 + 32)
                                                                          + 2 * *(unsigned __int16 *)(v3 + 18))
                                                    + (unint64_t)v7);
    ++v7;
  }
  while (*a3 >= v7);
  result = 0;
  ++*(_WORD *)(v3 + 18);
  ++*(_WORD *)(v3 + 20);
  return result;
}

uint64_t PDcmp(_BYTE *a1, char *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int v8;
  int v9;

  while (2)
  {
    v4 = *a2;
    v5 = v4 + 32;
    if ((*(_DWORD *)(a4 + 4 * v4) & 0x40000000) == 0)
      v5 = *a2;
    v6 = ~(v4 >> 2) & 0x20;
    v7 = v5 | v6;
    while (1)
    {
      v8 = *a1;
      v9 = ~(v8 >> 2) & 0x20 | v8;
      if (v9 == v7)
        break;
      if (v8 != a3)
      {
        if ((_DWORD)v4 == a3)
          goto LABEL_10;
        return v9 - (v6 | v4);
      }
      ++a1;
    }
    if (*a1)
    {
      ++a1;
LABEL_10:
      ++a2;
      continue;
    }
    return 0;
  }
}

uint64_t PDcapcmp(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  int v3;
  int v4;
  uint64_t v5;

  while (2)
  {
    v3 = *a1;
    while (1)
    {
      v4 = *a2;
      v5 = (v3 - v4);
      if (v3 == v4)
        break;
      if (v3 == a3)
        goto LABEL_8;
      if (v4 != a3)
        return v5;
      ++a2;
    }
    if (*a1)
    {
      ++a2;
LABEL_8:
      ++a1;
      continue;
    }
    return 0;
  }
}

uint64_t PDsearch(uint64_t a1, char *__s, _WORD *a3, __int16 *a4, int a5, uint64_t a6, const void *a7)
{
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char v20;
  unsigned int v21;
  char v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43;
  char *v44;
  _BYTE *v45;
  char v46;
  unsigned int v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  unsigned int v59;
  unsigned __int16 v60;
  int v61;
  _WORD *v64;
  char *v65;
  int v67;
  uint64_t v68;
  char v69[129];
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a1 + 2168);
  v12 = *(_WORD *)(v11 + 14);
  v67 = 0;
  v68 = 0;
  v13 = *(_QWORD *)(a1 + 2128);
  v14 = strlen(__s);
  v15 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
  v16 = v15;
  if (v14)
  {
    v17 = v14;
    v18 = (_BYTE *)v13;
    v19 = __s;
    do
    {
      v21 = *v19++;
      v20 = v21;
      v22 = v21 + 32;
      if ((*(_DWORD *)(v15 + 4 * v21) & 0x40000000) != 0)
        v20 = v22;
      *v18++ = v20;
      --v17;
    }
    while (v17);
  }
  v65 = __s;
  *(_BYTE *)(v13 + v14) = 0;
  SLfun(v13, 0, (__int16)(v14 - 1), (unsigned __int16 *)&v67 + 1, &v67);
  v23 = 0;
  v24 = *(unsigned __int16 *)(v11 + 4);
  if (v24 > (unsigned __int16)(v67 & *(_WORD *)(v11 + 16)))
    v24 = 0;
  v25 = (unsigned __int16)(v67 & *(_WORD *)(v11 + 16)) - v24;
  v26 = BYTE2(v67);
  v27 = 3 - BYTE2(v67);
  *a4 = -1;
  v64 = a3;
  *a3 = -1;
  *(_WORD *)(a1 + 2110) = 0;
  *(_WORD *)(a1 + 2114) = -1;
  v28 = 2 * v26;
  while (v12)
  {
    v27 += v28;
    v29 = *(unsigned __int16 *)(v11 + 16) & (v25 + v27);
    LOWORD(v67) = v29;
    v30 = *(unsigned __int16 *)(v11 + 4);
    if (v30 <= (unsigned __int16)v29)
    {
      v29 -= v30;
      LOWORD(v67) = v29;
    }
    if ((unsigned __int16)v25 == (unsigned __int16)v29)
    {
      if ((_WORD)v25)
        v29 = v25 - 1;
      else
        v29 = 1;
      LOWORD(v67) = v29;
    }
    --v12;
    v31 = *(unsigned __int16 *)(*(_QWORD *)(v11 + 32) + 2 * (unsigned __int16)v25);
    if (v31 < 0xFFFE)
    {
      v61 = v23;
      v32 = *(_QWORD *)(v11 + 40);
      v33 = v32 + *(unsigned __int16 *)(*(_QWORD *)(v11 + 32) + 2 * (unsigned __int16)v25);
      v34 = *(unsigned __int8 *)(v33 + 2);
      v60 = *(unsigned __int8 *)(v33 + 1) - *(unsigned __int8 *)(v32 + v31) + (*(unsigned __int8 *)(v32 + v31) << 8);
      __strncpy_chk();
      v69[v34] = 0;
      v35 = PDhypstrip(v69, &v68, *(unsigned __int8 *)(a1 + 2068));
      v36 = *(unsigned __int8 *)(a1 + 2068);
      if (a5 == 3)
      {
        v37 = v69;
        v38 = v65;
        v23 = v61;
        while (2)
        {
          v39 = *v38;
          while (1)
          {
            v40 = *v37;
            if (v39 == v40)
              break;
            if (v39 == v36)
              goto LABEL_31;
            if (v40 != v36)
              goto LABEL_52;
            ++v37;
          }
          if (*v38)
          {
            ++v37;
LABEL_31:
            ++v38;
            continue;
          }
          break;
        }
        if (!*(_BYTE *)(a1 + 2092))
        {
          result = 0;
LABEL_57:
          *v64 = v25;
          return result;
        }
        result = memcmp((const void *)(*(_QWORD *)(v11 + 48) + 20 * v60), a7, *(unsigned __int8 *)(a1 + 2092));
        if (!(_DWORD)result)
          goto LABEL_57;
      }
      else
      {
        v59 = v35;
        v23 = v61;
        if (!PDcmp(v65, v69, v36, v16))
        {
          v23 = v61 + 1;
          *v64 = v25;
          if (a5 != 2)
          {
            if (a5 != 1)
              break;
            v41 = *(unsigned __int8 *)(a6 + 42);
            if (v41 == 1)
            {
              v42 = v59;
              if ((*(_BYTE *)(*(_QWORD *)(v11 + 48) + 20 * v60 + 19) & 1) == 0)
                goto LABEL_52;
            }
            else
            {
              v42 = v59;
              if (v41 == 2 && (*(_BYTE *)(*(_QWORD *)(v11 + 48) + 20 * v60 + 19) & 1) != 0)
                goto LABEL_52;
            }
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50)) + 71) = SLcap((uint64_t)v69, 0, (v42 - 1), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50)) + 80), v16);
            if (v59)
            {
              v43 = v59;
              v44 = v69;
              v45 = (_BYTE *)v13;
              do
              {
                v47 = *v44++;
                v46 = v47;
                v48 = v47 + 32;
                if ((*(_DWORD *)(v16 + 4 * v47) & 0x40000000) != 0)
                  v46 = v48;
                *v45++ = v46;
                --v43;
              }
              while (v43);
            }
            *(_BYTE *)(v13 + v59) = 0;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50)) + 88) = v68;
            __strcpy_chk();
            v49 = *(_QWORD *)(v11 + 48);
            v50 = *(_BYTE *)(v49 + 20 * v60 + 19);
            v51 = *(_QWORD *)(*(_QWORD *)(a6 + 104) + 8 * *(unsigned __int16 *)(a6 + 50));
            *(_BYTE *)(v51 + 70) = v50 & 1;
            if ((v50 & 2) != 0)
            {
              v53 = v49 + 20 * v60;
              *(_DWORD *)(v51 + 96) = *(_DWORD *)(v53 + 12);
              v52 = *(_WORD *)(v53 + 16);
            }
            else
            {
              v52 = 0;
              *(_DWORD *)(v51 + 96) = 0;
            }
            *(_WORD *)(v51 + 100) = v52;
            *(_WORD *)(v51 + 66) = *(_WORD *)(a1 + 2162);
            *(_BYTE *)(v51 + 72) = *(_BYTE *)(a1 + 2069);
            v54 = (uint64_t *)(v49 + 20 * v60);
            v55 = *v54;
            *(_DWORD *)(v51 + 110) = *((_DWORD *)v54 + 2);
            *(_QWORD *)(v51 + 102) = v55;
            v56 = *(unsigned __int16 *)(a6 + 50);
            v57 = *(_QWORD *)(*(_QWORD *)(a6 + 104) + 8 * v56);
            *(_WORD *)(v57 + 68) = *(_WORD *)(a1 + 2084);
            *(_DWORD *)(v57 + 74) = *(_DWORD *)(a1 + 2086);
            *(_WORD *)(a6 + 50) = v56 + 1;
            if (*(unsigned __int16 *)(a6 + 48) == (unsigned __int16)(v56 + 1))
              return 5113;
          }
        }
      }
LABEL_52:
      v25 = (unsigned __int16)v67;
    }
    else
    {
      if (*a4 == -1)
        *a4 = v25;
      v25 = v29;
      if ((_DWORD)v31 == 0xFFFF)
        break;
    }
  }
  if ((_WORD)v23)
    return 0;
  else
    return 5112;
}

uint64_t PDSFcorrec(char *__src, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v7;
  char *v8;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  BOOL v14;
  int v15;
  int v16;
  uint64_t result;
  int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  __int16 v31;
  signed int v32;
  __int16 v33;
  unsigned __int8 *v34;
  signed int v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  BOOL v41;
  unsigned int v42;
  int v43;
  BOOL v45;
  BOOL v46;
  BOOL v47;
  int v48;
  __int16 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 *v54;
  int v55;
  unsigned int v56;
  int v57;
  int v58;
  unsigned int v59;
  int v60;
  __int16 v61;
  char v62;
  int v63;
  char v64;
  int v65;
  char v66;
  void *__dst;
  uint64_t v69;
  size_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  __int16 v78;

  v4 = *(__int16 *)(a4 + 42);
  if (*(__int16 *)(a4 + 40) > v4)
    return 0;
  v7 = a2;
  v8 = *(char **)(*(_QWORD *)(a4 + 32) + 16);
  v9 = strcpy(v8, __src);
  v10 = strlen(v9);
  *(_WORD *)(a4 + 2152) = v10;
  v11 = *(__int16 *)(a4 + 40);
  v12 = *(unsigned __int8 *)(a3 + 136);
  if (*(unsigned __int8 *)(a4 + 2148) == 255)
  {
    *(_BYTE *)(a4 + 2149) = v12;
    *(_BYTE *)(a4 + 3164) = 0;
  }
  v78 = 0;
  v14 = v7 < 2 && v11 == 0;
  v15 = *(unsigned __int8 *)(a4 + 2148);
  if (v15 == (_DWORD)v12)
  {
    LOWORD(v16) = v11;
LABEL_12:
    if ((__int16)v11 < (__int16)v16)
      PDSFcorsrt(__src, (__int16)v11, (__int16)(v16 - 1), a3, a4);
    return 0;
  }
  v76 = 0;
  __dst = v8 + 2;
  v65 = v11;
  v66 = !v14;
  v18 = v11;
  LOWORD(v16) = v11;
  v71 = v12;
  v75 = v4;
  while (2)
  {
    if (*(unsigned __int8 *)(a4 + 2149) == v15)
    {
      LOWORD(v11) = v18;
      goto LABEL_12;
    }
    *(_BYTE *)(a4 + 2148) = v15 + 1;
    *(_WORD *)(a4 + 2124) = 0;
    v19 = (unsigned __int8 *)(*(_QWORD *)(a3 + 128) + (char)(v15 + 1));
    *(_WORD *)(a4 + 2144) = *v19;
    v20 = &v19[v12];
    v74 = *v20;
    *(_WORD *)(a4 + 2146) = v74;
    v21 = &v20[v12];
    *(_WORD *)(a4 + 2136) = *v21;
    v22 = &v21[v12];
    *(_WORD *)(a4 + 2138) = *v22;
    v23 = &v22[v12];
    *(_WORD *)(a4 + 2140) = *v23;
    v24 = &v23[v12];
    *(_WORD *)(a4 + 2142) = *v24;
    v25 = &v24[v12];
    *(_WORD *)(a4 + 2134) = *v25;
    v26 = &v25[v12];
    *(_WORD *)(a4 + 2154) = *v26;
    v27 = &v26[v12];
    *(_WORD *)(a4 + 2156) = *v27;
    v28 = &v27[v12];
    *(_WORD *)(a4 + 2158) = *v28;
    v29 = &v28[v12];
    *(_WORD *)(a4 + 2160) = *v29;
    v72 = v18;
    v73 = v29[v12];
    if ((v15 + 1) == 2)
    {
      v70 = v10;
      if (*(_WORD *)(a3 + 104) && (__int16)v10 >= 1)
      {
        v30 = 0;
        v31 = 0;
        v69 = (unsigned __int16)v10;
        LOWORD(v32) = *(_WORD *)(a4 + 2162);
        do
        {
          v33 = 0;
          v34 = (unsigned __int8 *)&v8[v30];
          do
          {
            if ((int)SLstrncmp(*(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)(((__int16)v32 + v33) >> 1)), v34, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)(((__int16)v32 + v33) >> 1))) >= 0)v32 = ((__int16)v32 + v33) >> 1;
            else
              v33 = ((__int16)v32 + v33) >> 1;
          }
          while ((__int16)v32 - v33 > 1);
          LOWORD(v35) = v32 - (*(unsigned __int16 *)(a4 + 2162) == (unsigned __int16)v32);
          v36 = *(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)v35);
          do
          {
            if (!SLstrncmp(v36, v34, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)v35))
              && v31 <= 999)
            {
              v37 = a4 + v31;
              *(_BYTE *)(v37 + 2164) = v70 - v30;
              v31 += 2;
              *(_BYTE *)(v37 + 2165) = v35;
            }
            v35 = (__int16)(v35 + 1);
            v32 = *(__int16 *)(a4 + 2162);
            if (v35 >= v32)
              break;
            v36 = *(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * v35);
          }
          while (*v36 <= *v34);
          ++v30;
        }
        while (v30 != v69);
      }
      else
      {
        v31 = 0;
      }
      v38 = a4 + 2164;
      *(_BYTE *)(v38 + v31) = -1;
      *(_BYTE *)(v38 + (__int16)(v31 + 1)) = -1;
      v10 = v70;
    }
    do
    {
      if (*(_BYTE *)(a3 + 55) != 1)
        goto LABEL_48;
      if (*(_BYTE *)(a4 + 3504))
      {
        if ((v10 & 0x8000) == 0)
          memmove(__dst, v8, (unsigned __int16)(v10 + 1));
        *(_WORD *)v8 = 25966;
        v10 = strlen(v8);
        v39 = 0;
        goto LABEL_41;
      }
      if (*v8 == 110 && v8[1] == 101 && (__int16)v10 >= 3)
      {
        v10 = (v10 - 2);
        strcpy(v8, (const char *)__dst);
        v39 = 1;
LABEL_41:
        *(_BYTE *)(a4 + 3504) = v39;
      }
LABEL_48:
      if (*(_WORD *)(a4 + 40))
        v41 = 1;
      else
        v41 = (__int16)v10 <= 8;
      if (v41 && *(_WORD *)(a4 + 2140) == 2)
        *(_WORD *)(a4 + 2140) = 1;
      v42 = *(unsigned __int8 *)(a4 + 2148);
      if (v42 == 14 && *(_WORD *)(a4 + 2140) == 1)
        *(_WORD *)(a4 + 2140) = 0;
      v43 = *(unsigned __int8 *)(a3 + 55);
      if (v43 != 5 && v43 != 16)
      {
        v48 = *(unsigned __int16 *)(a4 + 2146);
        if (v48 == 1)
        {
          v49 = 3;
          goto LABEL_81;
        }
        if (v48 != 8 && *(_WORD *)(a4 + 2134))
        {
          if ((char)v42 < 12)
          {
            v49 = 1;
LABEL_81:
            *(_WORD *)(a4 + 2134) = v49;
            goto LABEL_63;
          }
          if (v42 <= 0xD)
          {
            v49 = 2;
            goto LABEL_81;
          }
        }
      }
LABEL_63:
      v45 = v73 == 0;
      v46 = v74 == 8;
      if ((__int16)v10 <= 4)
        v46 = 0;
      if ((__int16)v10 >= 4)
        v45 = 0;
      v47 = (unsigned __int16)(v10 - 7) < 0xFFFBu && v74 == 7;
      if (!v47 && !v46 && !v45)
      {
        *(_QWORD *)(a4 + 112) = "";
        switch(v74)
        {
          case 1:
            PDSFcor1qd(v8, (_QWORD *)a3, a4);
            goto LABEL_89;
          case 2:
          case 7:
            PDSFcor2qd(v8, (_QWORD *)a3, a4);
            goto LABEL_89;
          case 3:
            PDSFcor3qd(v8, (_QWORD *)a3, a4);
            goto LABEL_89;
          case 4:
            goto LABEL_85;
          case 5:
            if (*(_BYTE *)(a4 + 3194) == 1)
            {
LABEL_85:
              if ((v43 - 1) >= 2)
                PDSFaccent((unsigned __int8 *)v8, (__int16)v10, a3, (__int16 *)a4);
            }
            else if (PDSFcorrig(v8, a3, a4) == 10)
            {
              goto LABEL_130;
            }
            break;
          case 6:
            PDSFcor6qd(v8, (_QWORD *)a3, a4);
            goto LABEL_89;
          case 8:
            PDSFcor8qd(v8, (_QWORD *)a3, a4);
            goto LABEL_89;
          default:
LABEL_89:
            *(_BYTE *)(a4 + 4 * *(__int16 *)(a4 + 2124) + 120) = 0;
            if (*(__int16 *)(a4 + 2124) < 1)
              break;
            v50 = 0;
            v51 = *(unsigned __int16 *)(a4 + 2124);
LABEL_91:
            v52 = a4 + 4 * v50;
            v55 = *(_DWORD *)(v52 + 120);
            v54 = (unsigned __int8 *)(v52 + 120);
            v53 = v55;
            if ((int)SLstrncmp(*(_BYTE **)(a4 + 112), v54, 4) > 0)
              goto LABEL_103;
            *(_QWORD *)(a4 + 112) = v54;
            v77 = v53;
            v56 = *(unsigned __int8 *)(a3 + 54);
            if (v56 >= 5)
            {
              v57 = 4;
              do
                *((_BYTE *)&v77 + (__int16)v57++) = 0;
              while ((int)v56 > (__int16)v57);
            }
            v58 = SFbisrch((uint64_t)&v77, 0, v56 - 1, &v78, a3);
            v59 = *(unsigned __int8 *)(a3 + 54);
            if (v59 >= 5)
            {
              v60 = 4;
              do
                *((_BYTE *)&v77 + (__int16)v60++) = -1;
              while ((int)v59 > (__int16)v60);
              v61 = SFbisrch((uint64_t)&v77, 0, v59 - 1, &v78, a3);
              v78 += v61 - v58;
            }
            if (*(_BYTE *)(a4 + 3194) == 1)
              v76 = PDdecod2((unsigned __int8 *)v8, (__int16)v10, v58, v78, a3, (unsigned __int16 *)a4);
            if (v76 != 8)
            {
              if (*(unsigned __int16 *)(a4 + 40) == (unsigned __int16)v75)
                break;
LABEL_103:
              if (++v50 == v51)
                break;
              goto LABEL_91;
            }
            return 0;
        }
      }
      v12 = v71;
    }
    while (*(_BYTE *)(a4 + 3504));
    v16 = *(__int16 *)(a4 + 40);
    if (v7 != 2 || v16 == v75)
    {
      v11 = *(__int16 *)(a4 + 40);
      if (v16 > (__int16)v72)
      {
        PDSFcorsrt(__src, (__int16)v72, (__int16)(v16 - 1), a3, a4);
        LOWORD(v16) = *(_WORD *)(a4 + 40);
        v11 = (unsigned __int16)v16;
      }
    }
    else
    {
      v11 = v72;
    }
    if ((unsigned __int16)v16 == (unsigned __int16)v75)
      return 0;
    v62 = v66;
    if ((__int16)v16 < 1)
      v62 = 1;
    if ((v62 & 1) != 0)
    {
      if (v7 != 2)
        goto LABEL_124;
      goto LABEL_126;
    }
    v63 = *(char *)(a4 + 2148);
    if (v63 <= 4)
      v64 = 8;
    else
      v64 = v63 + 4;
    *(_BYTE *)(a4 + 2149) = v64;
LABEL_124:
    if (*(_BYTE *)(a4 + 3164) || v65 >= (__int16)v16)
    {
LABEL_126:
      if ((v7 & 0xFFFFFFFD) != 1)
      {
        v15 = *(unsigned __int8 *)(a4 + 2148);
        v18 = v11;
        if (v15 == (_DWORD)v71)
          goto LABEL_12;
        continue;
      }
      return 1;
    }
    else
    {
LABEL_130:
      result = 1;
      *(_BYTE *)(a4 + 3164) = 1;
    }
    return result;
  }
}

uint64_t PDSFchkwrd(uint64_t a1, uint64_t a2, char *__src, int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v6;
  char *v7;
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  __int16 v30;
  char *v31;
  uint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  unsigned __int16 v36;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  int v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int16 v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  __int16 v53;
  unsigned int v54;
  unsigned int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *__dst;
  __int16 v60;

  v6 = a5;
  v7 = __src;
  v10 = *(_QWORD *)(a2 + 104);
  v11 = *(_QWORD **)(a2 + 32);
  v12 = (char *)v11[6];
  v13 = *(_QWORD *)(a1 + 56);
  __dst = (char *)v11[5];
  v14 = (char *)v11[4];
  v15 = *(_QWORD *)(a2 + 3184);
  if (!*(_WORD *)(a2 + 2))
  {
    if (*(_BYTE *)(a1 + 55) == 2 && *(_WORD *)(a2 + 3482) == 64 && **(_BYTE **)(a2 + 3488))
      __src[a4 - **(unsigned __int8 **)(a2 + 3488)] = -95;
    v24 = *(_WORD *)(a2 + 18);
    if ((v24 & 0x40) != 0 && !*(_DWORD *)(a2 + 3464))
      return 11;
    v25 = *(unsigned __int8 *)(a1 + 55);
    if (v25 == 5 && (**(_BYTE **)(a2 + 3488) & 0x30) != 0)
    {
      v26 = *(_WORD *)(a2 + 3482);
      if ((v26 & 0x30) != 0
        && ((**(_BYTE **)(a2 + 3488) & 0x10) == 0 && (v26 & 0x10) != 0
         || (**(_BYTE **)(a2 + 3488) & 0x20) == 0 && (v26 & 0x20) != 0))
      {
        return 11;
      }
    }
    if ((v24 & 1) != 0 || (a5 & 0xFFFFFFFB) == 0 && (v24 & 0x20) != 0)
      return 11;
    if (v25 == 1 && *(_BYTE *)(a2 + 3504))
    {
      if (!**(_BYTE **)(a2 + 3488))
        return 11;
      v57 = v13;
      v27 = *(char **)(*(_QWORD *)(a2 + 32) + 24);
      strcpy(v27, "ne");
      v28 = v12;
      v29 = a6;
      v30 = a4;
      strcpy(v27 + 2, __src);
      a6 = v29;
      v12 = v28;
      LOWORD(a4) = v30 + 2;
      v7 = v27;
      v13 = v57;
    }
  }
  v60 = a4;
  if (*(_BYTE *)(a2 + 3176) && *(_BYTE *)(a2 + 3198))
  {
    v16 = v12;
    v17 = a6;
    strcpy(*(char **)(v15 + 8), v7);
    *(_BYTE *)(v15 + 17) = *(_BYTE *)(a2 + 88);
    *(_DWORD *)(v15 + 20) = *(_DWORD *)(a2 + 92);
    *(_DWORD *)(v15 + 24) = *(_DWORD *)(a2 + 96);
    *(_WORD *)(v15 + 2) = *(_WORD *)(a2 + 3196);
    *(_WORD *)v15 = 0;
    *(_BYTE *)(v15 + 42) = 1;
    v18 = 1 << (*(_BYTE *)(a1 + 55) - 1);
    if (!*(_BYTE *)(a1 + 55))
      LODWORD(v18) = -1;
    *(_DWORD *)(v15 + 36) = v18;
    PDword(v15, 1, 1);
    LOWORD(a4) = v60;
    a6 = v17;
    v12 = v16;
    v19 = *(unsigned __int16 *)(v15 + 50);
    if (*(_WORD *)(v15 + 50))
    {
      *(_WORD *)(a2 + 100) = v19;
      if ((__int16)v19 >= 1)
      {
        v20 = *(_QWORD *)(v15 + 104);
        while (*(unsigned __int8 *)(*(_QWORD *)v20 + 71) != v6 || !*(_BYTE *)(*(_QWORD *)v20 + 70))
        {
          v20 += 8;
          if (!--v19)
            goto LABEL_12;
        }
        return 11;
      }
    }
  }
LABEL_12:
  if (!*(_WORD *)(a2 + 2))
  {
    if (!v10)
    {
      v56 = v12;
      v58 = v13;
      v34 = (_BYTE *)(a2 + 88);
      if (v6 || *(_BYTE *)(a2 + 88) != 3)
      {
        v41 = a6;
        strcpy(v14, v7);
        v39 = v60;
        v40 = v41;
        goto LABEL_63;
      }
      v35 = a6;
      v36 = 0;
      goto LABEL_49;
    }
    if (!*(_BYTE *)(v10 + 34) && !*(_BYTE *)(v10 + 44)
      || (*(_WORD *)(a2 + 3484) & 0x200) != 0
      || (v31 = v12, v32 = a6, PDSFcltcmp(a1, a2) == 10)
      && (v33 = PDSFcltscr((unsigned __int8 *)v7, v60, a1, v10), a6 = v32, v12 = v31, v33 == 10))
    {
      v56 = v12;
      v58 = v13;
      v34 = (_BYTE *)(a2 + 88);
      if (v6 || *(_BYTE *)(a2 + 88) != 3)
      {
        v38 = a6;
        strcpy(v14, v7);
        v39 = v60;
        v40 = v38;
LABEL_56:
        if (*(_WORD *)v10 && (*(_BYTE *)(v10 + 34) || *(_BYTE *)(v10 + 44)))
        {
          if (v6 == 4)
            v42 = 0;
          else
            v42 = v6;
          v40 = v10 + 80;
          v43 = *(unsigned __int8 *)(v10 + 76);
LABEL_67:
          SLrecap((unsigned __int8 *)v14, v39, v42, v40, v43, v58);
          v44 = *(unsigned __int8 *)(a1 + 55);
          switch(v44)
          {
            case 5:
              goto LABEL_70;
            case 15:
              if (*v34 == 2 || (*(_WORD *)(a2 + 3482) & 0x40) != 0 && (*(_DWORD *)(a2 + 92) & 0x80000000) != 0)
                PDSFremacc(v14, v58, 15);
              v45 = v60 - 1;
              if (v7[v45] == 253 && *v34 == 2)
                v14[v45] = -81;
              break;
            case 8:
LABEL_70:
              if ((*(_WORD *)(a2 + 3482) & 0x40) != 0)
                PDSFremacc(v14, v58, v44);
              break;
          }
          if (v10 && (*(_WORD *)(a2 + 3484) & 0x200) == 0)
          {
            if (*(_BYTE *)(v10 + 34))
            {
              v46 = __dst;
              v47 = strcpy(__dst, (const char *)(v10 + 34));
              v48 = strlen(v47);
              v49 = *(unsigned __int8 *)(v10 + 16);
              if (v49 == 4)
                v50 = 0;
              else
                v50 = *(unsigned __int8 *)(v10 + 16);
              v51 = v58;
              SLrecap((unsigned __int8 *)__dst, v48, v50, 0, v49, v58);
              strcat(__dst, v14);
            }
            else
            {
              v46 = __dst;
              strcpy(__dst, v14);
              v51 = v58;
            }
            if (*(_BYTE *)(v10 + 44))
            {
              v52 = strcpy(v56, (const char *)(v10 + 44));
              v53 = strlen(v52);
              v54 = *(unsigned __int8 *)(v10 + 17);
              if (v54 == 4)
                v55 = 0;
              else
                v55 = *(unsigned __int8 *)(v10 + 17);
              SLrecap((unsigned __int8 *)v56, v53, v55, 0, v54, v51);
              strcat(v46, v56);
            }
            strcpy(v14, v46);
          }
          v23 = (__int16)strlen(v14);
          v22 = v14;
          return SFadd1(v22, v23, a2, 1);
        }
LABEL_63:
        if (v6 == 4)
          v42 = 0;
        else
          v42 = v6;
        v43 = *v34;
        goto LABEL_67;
      }
      v35 = a6;
      v36 = strlen((const char *)(v10 + 34));
LABEL_49:
      if (((*(_DWORD *)(a2 + 92 + 4 * (v36 >> 5)) >> ~(_BYTE)v36) & 1) != 0)
      {
        if (((*(_DWORD *)(a2 + 92 + 4 * ((unsigned __int16)(v36 + 1) >> 5)) >> ~(v36 + 1)) & 1) != 0)
          v6 = 1;
      }
      else
      {
        v6 = 0;
      }
      strcpy(v14, v7);
      v40 = v35;
      v39 = v60;
      if (!v10)
        goto LABEL_63;
      goto LABEL_56;
    }
    return 11;
  }
  v21 = (__int16)a4;
  if (v6)
    SLrecap((unsigned __int8 *)v7, (__int16)a4, v6, a6, v6, v13);
  v22 = v7;
  v23 = v21;
  return SFadd1(v22, v23, a2, 1);
}

uint64_t PDSFwild(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  uint64_t v19;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  __int16 v39;
  __int16 v40;

  if (*(__int16 *)(a3 + 68) < a2)
    return 8;
  v9 = *(unsigned __int8 *)(a3 + 54);
  v10 = *(unsigned __int16 *)(a3 + 1192);
  if (*(_WORD *)a4 != 5)
    *(_WORD *)a4 = 5;
  v40 = 0;
  if ((_DWORD)v9)
  {
    v11 = 0;
    v12 = 0;
    v13 = a1;
    while (1)
    {
      v14 = *v13;
      if ((_DWORD)v9 - 1 == v11 && v10 == 2)
        break;
      if (v10 == 2)
      {
        if ((v14 + 127) >= 0x1Fu)
          goto LABEL_18;
        if (v14 != 129)
          goto LABEL_39;
        v16 = v13[1];
        if (v16 == 72)
        {
          v22 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
          v23 = (__int16)v12;
          v20 = 1;
LABEL_50:
          *(_BYTE *)(v22 + v23) = v20;
LABEL_51:
          v24 = v12 + 1;
          v12 += 2;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + v24) = v20;
LABEL_30:
          if ((*v13 & 0xF0) != 0xE0 && (*v13 + 127) >= 0x1Fu)
            v19 = 1;
          else
            v19 = 2;
          goto LABEL_37;
        }
        if (v16 != 150)
        {
          LOBYTE(v14) = -127;
LABEL_39:
          if (a2 <= (__int16)v12)
          {
            if (v10 == 2)
            {
              v20 = 32;
              if ((v14 + 127) < 0x1Fu || (v21 = v14 & 0xF0, LOBYTE(v14) = 32, v21 == 224))
              {
                v22 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
                v23 = (__int16)v12;
                goto LABEL_50;
              }
            }
            else
            {
              LOBYTE(v14) = 32;
            }
          }
          else if (v10 == 2 && ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0))
          {
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v12) = v14;
            v20 = v13[1];
            goto LABEL_51;
          }
          goto LABEL_26;
        }
      }
      else if (v14 != 42)
      {
        if (v14 != 63)
          goto LABEL_39;
LABEL_25:
        LOBYTE(v14) = 1;
LABEL_26:
        v17 = v12++;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + v17) = v14;
        goto LABEL_29;
      }
LABEL_28:
      while ((int)v9 > (__int16)v12)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v12++) = 1;
LABEL_29:
      if (v10 == 2)
        goto LABEL_30;
      v19 = 1;
LABEL_37:
      v13 += v19;
      v11 = (__int16)v12;
      if ((__int16)v12 >= (int)v9)
        goto LABEL_52;
    }
    v15 = -1;
    if ((v14 + 127) < 0x1Fu || (v14 & 0xF0) == 0xE0)
      goto LABEL_53;
LABEL_18:
    if ((v14 & 0xF0) != 0xE0 && v14 == 63)
      goto LABEL_25;
    if ((v14 & 0xF0) == 0xE0 || v14 != 42)
      goto LABEL_39;
    goto LABEL_28;
  }
LABEL_52:
  v15 = 0;
LABEL_53:
  v25 = SFbisrch(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16), 0, v15 + (int)v9 - 1, &v40, a3);
  if (v9 <= a2)
    v26 = v9;
  else
    v26 = a2;
  if (v26 >= 1)
  {
    v27 = 0;
    v28 = a1;
    while (1)
    {
      v29 = *v28;
      if ((unsigned __int16)v26 - 1 == (__int16)v27 && v10 == 2)
        break;
      if (v10 == 2)
      {
        if ((v29 + 127) < 0x1Fu)
        {
          if (v29 != 129)
            goto LABEL_73;
          v30 = v28[1];
          if (v30 == 72)
          {
            v31 = -1;
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27) = -1;
            goto LABEL_76;
          }
          if (v30 != 150)
          {
            LOBYTE(v29) = -127;
LABEL_75:
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27) = v29;
            v31 = v28[1];
LABEL_76:
            v32 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27;
            v27 += 2;
            *(_BYTE *)(v32 + 1) = v31;
LABEL_82:
            if ((*v28 & 0xF0) != 0xE0 && (*v28 + 127) >= 0x1Fu)
              v35 = 1;
            else
              v35 = 2;
            goto LABEL_89;
          }
          goto LABEL_91;
        }
        goto LABEL_69;
      }
      if (v29 != 42)
      {
        if (v29 == 63)
LABEL_79:
          LOBYTE(v29) = -1;
LABEL_80:
        v33 = v27++;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + v33) = v29;
        goto LABEL_81;
      }
LABEL_91:
      while ((int)v9 > (__int16)v27)
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27++) = -1;
LABEL_81:
      if (v10 == 2)
        goto LABEL_82;
      v35 = 1;
LABEL_89:
      v28 += v35;
      if ((__int16)v27 >= (__int16)v26)
        goto LABEL_96;
    }
    if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0)
      goto LABEL_96;
LABEL_69:
    if ((v29 & 0xF0) != 0xE0 && v29 == 63)
      goto LABEL_79;
    if ((v29 & 0xF0) == 0xE0 || v29 != 42)
    {
LABEL_73:
      if ((v29 + 127) < 0x1Fu || (v29 & 0xF0) == 0xE0)
        goto LABEL_75;
      goto LABEL_80;
    }
    goto LABEL_91;
  }
  v27 = 0;
LABEL_96:
  while ((int)v9 > (__int16)v27)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 16) + (__int16)v27++) = 32;
  v36 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
  v37 = v9 - 1;
  if (*(unsigned __int8 *)(v36 + v9 - 1) == 255)
  {
    *(_BYTE *)(v36 + v37) = -2;
    v36 = *(_QWORD *)(*(_QWORD *)(a4 + 32) + 16);
  }
  v38 = SFbisrch(v36, 0, v37, &v40, a3);
  v39 = v38 - v25 + v40;
  v40 = v39;
  *(_WORD *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 44) = 0;
  if (*(_BYTE *)(a4 + 3194) != 1)
    return 11;
  PDdecod2(a1, a2, v25, v39, a3, (unsigned __int16 *)a4);
  if (*(_WORD *)(a4 + 40))
    return 10;
  else
    return 11;
}

uint64_t PDSFanagrm(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  if (*(unsigned __int16 *)(a4 + 68) < (unsigned __int16)a2)
    return 8;
  *(_OWORD *)(a3 + 3423) = 0u;
  *(_OWORD *)(a3 + 3439) = 0u;
  *(_OWORD *)(a3 + 3391) = 0u;
  *(_OWORD *)(a3 + 3407) = 0u;
  *(_OWORD *)(a3 + 3359) = 0u;
  *(_OWORD *)(a3 + 3375) = 0u;
  *(_OWORD *)(a3 + 3327) = 0u;
  *(_OWORD *)(a3 + 3343) = 0u;
  *(_OWORD *)(a3 + 3295) = 0u;
  *(_OWORD *)(a3 + 3311) = 0u;
  *(_OWORD *)(a3 + 3263) = 0u;
  *(_OWORD *)(a3 + 3279) = 0u;
  *(_OWORD *)(a3 + 3231) = 0u;
  *(_OWORD *)(a3 + 3247) = 0u;
  *(_OWORD *)(a3 + 3199) = 0u;
  *(_OWORD *)(a3 + 3215) = 0u;
  if (a2 < 1)
    goto LABEL_11;
  v9 = 0;
  v10 = *a1;
  v11 = *a1;
  do
  {
    v12 = a1[v9];
    if (v12 < v11)
      v11 = a1[v9];
    if (v12 > v10)
      v10 = a1[v9];
    ++*(_BYTE *)(a3 + v12 + 3199);
    ++v9;
  }
  while ((unsigned __int16)a2 != v9);
  if (a2 > 24)
  {
    v20 = 0;
    **(_BYTE **)(*(_QWORD *)(a3 + 32) + 16) = v11;
    v13 = *(unsigned __int8 *)(a4 + 54);
    if (v13 >= 2)
    {
      v14 = 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16) + (__int16)v14++) = 0;
        v13 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v13 > (__int16)v14);
    }
    v15 = SFbisrch(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16), 0, v13 - 1, &v20, a4);
    **(_BYTE **)(*(_QWORD *)(a3 + 32) + 16) = v10;
    v16 = *(unsigned __int8 *)(a4 + 54);
    if (v16 >= 2)
    {
      v17 = 1;
      do
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16) + (__int16)v17++) = -1;
        v16 = *(unsigned __int8 *)(a4 + 54);
      }
      while ((int)v16 > (__int16)v17);
    }
    v18 = SFbisrch(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 16), 0, v16 - 1, &v20, a4);
    v19 = v18 - v15 + v20;
    v20 = v19;
    *(_WORD *)(a3 + 40) = 0;
    *(_WORD *)(a3 + 44) = 0;
    if (*(_BYTE *)(a3 + 3194) == 1)
      PDdecod2(a1, a2, v15, v19, a4, (unsigned __int16 *)a3);
  }
  else
  {
LABEL_11:
    PDSFanaqua((uint64_t)a1, a2, (_WORD *)a3, a4);
  }
  if (*(_WORD *)(a3 + 40))
    return 10;
  else
    return 11;
}

uint64_t PDSFmemory(void **a1, int a2, int a3)
{
  uint64_t result;
  _QWORD *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;

  if (a3)
  {
    result = (uint64_t)malloc_type_calloc(1uLL, 0x38uLL, 0x1004092C2EC0CuLL);
    *a1 = (void *)result;
    if (!result)
      return result;
    v6 = (_QWORD *)result;
    v7 = (char *)malloc_type_calloc(7uLL, a2, 0xEA45D015uLL);
    if (v7)
    {
      v8 = &v7[a2 + a2];
      v6[4] = v8;
      v6[5] = &v8[a2];
      v9 = &v8[a2 + a2];
      v6[6] = v9;
      v10 = &v9[a2];
      v6[2] = v10;
      v6[3] = &v7[a2];
      *v6 = v7;
      v6[1] = &v10[a2];
      return 1;
    }
    free(*a1);
    result = 0;
    *a1 = 0;
  }
  else
  {
    v11 = (void **)*a1;
    if (*a1)
    {
      if (*v11)
        free(*v11);
      free(v11);
      *a1 = 0;
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t PDSFdc(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  char v17[2];
  char v18;
  unsigned __int8 v19[65];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned __int8 *)(a3 + 55);
  v8 = SLLngToA(*(unsigned __int8 *)(a3 + 55));
  if (a2 > 64)
    return 0;
  v9 = v8;
  v10 = **(unsigned __int8 **)(a4 + 72);
  __strcpy_chk();
  if (v10)
    SLrecap(v19, a2, v10, *(_QWORD *)(a4 + 80), v10, v9);
  v18 = 0;
  *(_WORD *)v17 = 0;
  *(_WORD *)(a4 + 18) = 0;
  if ((_DWORD)v7)
    v11 = 1 << (v7 - 1);
  else
    LODWORD(v11) = -1;
  if ((v11 & 0x8000) != 0)
  {
    PDDCengan(v19, v10, v9, v17);
    v17[1] = 0;
    **(_BYTE **)(a4 + 3488) = atoi(v17);
    return 0;
  }
  if ((v11 & 0x994) != 0)
  {
    PDDCposclt(v7, (uint64_t)v19, a2, v17);
    if ((v11 & 0x814) == 0 || v17[0] != 49)
      goto LABEL_26;
    PDDCposcls(v7, (uint64_t)v19, a2, v9, v17);
    v17[1] = 0;
    v12 = atoi(v17);
    if ((v11 & 0x94) != 0)
    {
      v13 = *(_QWORD *)(a4 + 104);
      v14 = 16 * (*(_WORD *)(v13 + 62) | v12 & 7);
    }
    else
    {
      if ((v11 & 0x800) == 0)
      {
LABEL_26:
        if ((v11 & 0x114) != 0)
        {
          PDDCpreclt(v19, v9, v17);
          PDDCprecls(v7, (uint64_t)v17);
          *(_WORD *)(*(_QWORD *)(a4 + 104) + 62) |= atoi(v17) & 0xF;
        }
        if ((v11 & 0x80) != 0)
        {
          PDDCposacc((uint64_t)v19, a2, v9, v17);
          *(_WORD *)(*(_QWORD *)(a4 + 104) + 62) |= atoi(v17) & 0xF;
        }
        PDSFcltdb(a3, a4);
        return 0;
      }
      v13 = *(_QWORD *)(a4 + 104);
      v14 = *(_WORD *)(v13 + 62) | v12 & 7;
    }
    *(_WORD *)(v13 + 62) = v14;
    goto LABEL_26;
  }
  if ((v11 & 0x11660) != 0 && *(__int16 *)(a4 + 100) >= 1)
  {
    v15 = 0;
    do
    {
      PDDCrmcc(v7, *(unsigned __int8 *)(*(_QWORD *)(a4 + 72) + v15), v17);
      if (v17[0] == 49)
        *(_WORD *)(*(_QWORD *)(a4 + 3512) + 2 * v15) |= 8u;
      *(_BYTE *)(*(_QWORD *)(a4 + 3520) + v15) = 0;
      *(_BYTE *)(*(_QWORD *)(a4 + 3528) + v15) = 0;
      if ((v11 & 0x1060) != 0)
        *(_BYTE *)(*(_QWORD *)(a4 + 3528) + v15) |= PDDCdblend(v7, (uint64_t)v19, v9, a2) & 3;
      ++v15;
    }
    while (v15 < *(__int16 *)(a4 + 100));
  }
  return 0;
}

uint64_t PDSFcorqbr(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, __int16 a10)
{
  _QWORD *v14;
  int v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  int v54;
  int v55;
  _BOOL4 v56;
  unsigned __int8 *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  _BOOL4 v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  uint64_t v81;
  unsigned __int8 *v82;
  int v83;
  int v84;
  uint64_t v85;
  char v86;
  BOOL v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  unsigned int v100;
  _QWORD *v101;
  _QWORD *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  unsigned int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  int v125;
  int v126;
  int v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  unsigned __int8 *v130;
  unsigned __int8 *v131;
  __int16 v132;

  if (a4 < 1)
    return 10;
  v14 = a1;
  if (a6 < 1)
  {
    LOWORD(v15) = 0;
    v16 = 0;
    v17 = 1;
  }
  else
  {
    LOWORD(v15) = 0;
    while (*(unsigned __int8 *)(a3 + (unsigned __int16)v15) == *(unsigned __int8 *)(a5 + (unsigned __int16)v15))
    {
      v15 = (__int16)(v15 + 1);
      v16 = v15 < a6;
      v17 = v15 < a4;
      if (v15 >= a4 || v15 >= a6)
        goto LABEL_11;
    }
    v17 = 1;
    v16 = 1;
  }
LABEL_11:
  v19 = a1[7];
  v20 = (__int16)v15;
  v21 = (unsigned __int8 *)(a3 + (__int16)v15);
  v22 = *v21;
  if ((_DWORD)v22 == 32)
  {
    if (a6 == (__int16)v15)
      return 10;
  }
  else if (!v17)
  {
    return 10;
  }
  if (!(_DWORD)a7)
    return 11;
  v23 = a10;
  v24 = a9;
  v25 = (__int16)v15;
  if (v17 && v16)
  {
    if ((_DWORD)a8
      && (*(_DWORD *)(v19 + 4 * v22) & 0x10000000) != 0
      && (*(_DWORD *)(v19 + 4 * *(unsigned __int8 *)(a5 + (__int16)v15)) & 0x10000000) != 0)
    {
      v128 = v21;
      HIWORD(v93) = a10;
      LOWORD(v93) = 0;
      v115 = v19;
      v120 = (__int16)v15;
      v103 = a7;
      v106 = a8;
      v31 = a2;
      v32 = v14;
      v33 = (__int16)v15;
      v34 = *v21;
      v35 = PDSFcorqbr(v14, a2, v21 + 1, (__int16)(~(_WORD)v15 + a4), a5 + (__int16)v15 + 1, (__int16)(~(_WORD)v15 + a6), (__int16)(a7 - 1), (__int16)(a8 - 1), v93);
      v24 = a9;
      v22 = v34;
      v21 = v128;
      a7 = v103;
      v23 = a10;
      v25 = v33;
      v14 = v32;
      a2 = v31;
      a8 = v106;
      v87 = v35 == 10;
      v19 = v115;
      v20 = v120;
      if (v87)
        return 10;
    }
    else if (a9)
    {
      v26 = (__int16)(~(_WORD)v15 + a4);
      if (v26 < 1)
        return 10;
      v27 = v21 + 1;
      v28 = (__int16)(~(_WORD)v15 + a6);
      if (v28 < 1)
      {
        LOWORD(v29) = 0;
      }
      else
      {
        LOWORD(v29) = 0;
        while (v27[(unsigned __int16)v29] == *(unsigned __int8 *)(a5 + v20 + 1 + (unsigned __int16)v29))
        {
          v29 = (__int16)(v29 + 1);
          v30 = v29 < v26;
          if (v29 >= v26 || v29 >= v28)
            goto LABEL_33;
        }
      }
      v30 = 1;
LABEL_33:
      if (v27[(__int16)v29] == 32)
      {
        if ((unsigned __int16)v29 == (unsigned __int16)v28)
          return 10;
      }
      else if (!v30)
      {
        return 10;
      }
    }
  }
  v36 = v20 + 1;
  v37 = *(unsigned __int8 *)(a5 + v20 + 1);
  if ((_DWORD)v22 == v37 && *(unsigned __int8 *)(a3 + v36) == *(unsigned __int8 *)(a5 + v20))
  {
    v129 = v21;
    HIWORD(v94) = v23;
    LOWORD(v94) = v24;
    v111 = v24;
    v116 = v19;
    v121 = v20;
    v101 = v14;
    v104 = a2;
    v124 = v23;
    v38 = a7;
    v39 = a8;
    v100 = v25;
    v107 = v22;
    v40 = PDSFcorqbr(v14, a2, v21 + 2, (__int16)(a4 - v20 - 2), a5 + v20 + 2, (__int16)(a6 - v25 - 2), a7, a8, v94);
    v24 = v111;
    a2 = v104;
    v22 = v107;
    v21 = v129;
    a7 = v38;
    v23 = v124;
    v25 = v100;
    v14 = v101;
    a8 = v39;
    v87 = v40 == 10;
    v19 = v116;
    v20 = v121;
    if (v87)
      return 10;
  }
  if ((_DWORD)v22 == *(unsigned __int8 *)(a5 + v20 + 2)
    && *(unsigned __int8 *)(a3 + v36) == v37
    && a6 >= 3
    && a4 >= 3
    && *(unsigned __int8 *)(a3 + v20 + 2) == *(unsigned __int8 *)(a5 + v20))
  {
    v130 = v21;
    HIWORD(v95) = v23;
    LOWORD(v95) = v24;
    v112 = v24;
    v117 = v19;
    v122 = v20;
    v41 = a2;
    v125 = v23;
    v42 = a7;
    v43 = a8;
    v102 = v14;
    v44 = v25;
    v108 = v22;
    v45 = PDSFcorqbr(v14, a2, v21 + 3, (__int16)(a4 - v20 - 3), a5 + v20 + 3, (__int16)(a6 - v25 - 3), a7, a8, v95);
    v24 = v112;
    v22 = v108;
    v21 = v130;
    a7 = v42;
    v23 = v125;
    v25 = v44;
    v14 = v102;
    a2 = v41;
    a8 = v43;
    v87 = v45 == 10;
    v19 = v117;
    v20 = v122;
    if (v87)
      return 10;
  }
  if (v17)
  {
    if (((_DWORD)v25 || *(__int16 *)(a2 + 2150) > a4) && (_DWORD)v22 == *(v21 - 1))
    {
      v131 = v21;
      HIWORD(v96) = v23;
      LOWORD(v96) = 0;
      v113 = v24;
      v118 = v19;
      v123 = v20;
      v46 = a2;
      v126 = v23;
      v47 = a7;
      v48 = a8;
      v49 = v14;
      v50 = v25;
      v109 = v22;
      v51 = PDSFcorqbr(v14, a2, v21 + 1, (__int16)(~(_WORD)v20 + a4), a5 + v20, (__int16)(a6 - v25), a7, a8, v96);
      v24 = v113;
      v19 = v118;
      LODWORD(v22) = v109;
      v21 = v131;
      a7 = v47;
      v23 = v126;
      v25 = v50;
      v14 = v49;
      a2 = v46;
      a8 = v48;
    }
    else
    {
      if (!(_DWORD)a8 || (*(_DWORD *)(v19 + 4 * v22) & 0x10000000) == 0)
      {
        if (v24)
        {
          v52 = (__int16)(~(_WORD)v20 + a4);
          if (v52 < 1)
            return 10;
          v53 = v21 + 1;
          v54 = (__int16)(a6 - v25);
          if (v54 < 1)
          {
            LOWORD(v55) = 0;
          }
          else
          {
            LOWORD(v55) = 0;
            while (v53[(unsigned __int16)v55] == *(unsigned __int8 *)(a5 + v20 + (unsigned __int16)v55))
            {
              v55 = (__int16)(v55 + 1);
              v56 = v55 < v52;
              if (v55 >= v52 || v55 >= v54)
                goto LABEL_111;
            }
          }
          v56 = 1;
LABEL_111:
          if (v53[(__int16)v55] == 32)
          {
            if ((unsigned __int16)v55 == (unsigned __int16)v54)
              return 10;
          }
          else if (!v56)
          {
            return 10;
          }
        }
        goto LABEL_63;
      }
      v57 = v21;
      HIWORD(v97) = v23;
      LOWORD(v97) = 0;
      v114 = v24;
      v119 = v19;
      v123 = v20;
      v127 = v23;
      v105 = a7;
      v110 = a8;
      v58 = a2;
      v59 = v14;
      v60 = v25;
      v61 = v22;
      v51 = PDSFcorqbr(v14, a2, v21 + 1, (__int16)(~(_WORD)v20 + a4), a5 + v20, (__int16)(a6 - v25), (__int16)(a7 - 1), (__int16)(a8 - 1), v97);
      v24 = v114;
      v19 = v119;
      LODWORD(v22) = v61;
      v21 = v57;
      a7 = v105;
      v23 = v127;
      v25 = v60;
      v14 = v59;
      a2 = v58;
      a8 = v110;
    }
    v87 = v51 == 10;
    v20 = v123;
    if (v87)
      return 10;
  }
LABEL_63:
  if (!v16)
    goto LABEL_80;
  if (((_DWORD)v20 || *(__int16 *)(a2 + 2152) > a6)
    && *(unsigned __int8 *)(a5 + v20) == *(unsigned __int8 *)(a5 + v20 - 1))
  {
    v62 = a5 + v20 + 1;
    HIWORD(v98) = v23;
    LOWORD(v98) = 0;
    v63 = (__int16)(a4 - v25);
    v64 = (__int16)(~(_WORD)v20 + a6);
    v65 = a8;
    v66 = (__int16)(a8 - 1);
    v67 = v14;
    v68 = a2;
    v69 = a7;
    goto LABEL_79;
  }
  if ((_DWORD)a8 && (*(_DWORD *)(v19 + 4 * *(unsigned __int8 *)(a5 + v20)) & 0x10000000) != 0)
  {
    v62 = a5 + v20 + 1;
    HIWORD(v98) = v23;
    LOWORD(v98) = 0;
    v63 = (__int16)(a4 - v25);
    v64 = (__int16)(~(_WORD)v20 + a6);
    v69 = a7;
    a7 = (__int16)(a7 - 1);
    v65 = a8;
    v66 = (__int16)(a8 - 1);
    v67 = v14;
    v68 = a2;
LABEL_79:
    v75 = v14;
    v76 = v25;
    result = PDSFcorqbr(v67, a2, v21, v63, v62, v64, a7, v66, v98);
    LOWORD(a7) = v69;
    v25 = v76;
    v14 = v75;
    a2 = v68;
    a8 = v65;
    if ((_DWORD)result == 10)
      return result;
    goto LABEL_80;
  }
  if (!v24)
    goto LABEL_80;
  v70 = (__int16)(a4 - v25);
  if (v70 >= 1)
  {
    v71 = (__int16)(~(_WORD)v20 + a6);
    if (v71 < 1)
    {
      LOWORD(v72) = 0;
    }
    else
    {
      LOWORD(v72) = 0;
      while (1)
      {
        LODWORD(v22) = v21[(unsigned __int16)v72];
        if ((_DWORD)v22 != *(unsigned __int8 *)(a5 + v20 + 1 + (unsigned __int16)v72))
          break;
        v73 = (unsigned __int16)v72 + 1;
        v72 = (__int16)(v72 + 1);
        v74 = v72 < v70;
        if (v72 >= v70 || v72 >= v71)
        {
          LODWORD(v22) = v21[v73];
          goto LABEL_118;
        }
      }
    }
    v74 = 1;
LABEL_118:
    if ((_DWORD)v22 == 32)
    {
      if ((unsigned __int16)v72 == (unsigned __int16)v71)
        return 10;
      goto LABEL_80;
    }
    if (v74)
    {
LABEL_80:
      if (!v23)
        return 11;
      v77 = *(unsigned __int8 *)(a2 + 2164);
      if (v77 == 255)
        return 11;
      v78 = 0;
      v132 = v23 - 1;
      v79 = (__int16)(a7 - 1);
      while (1)
      {
        v80 = a6 - v77;
        if (v80 < 0)
          goto LABEL_107;
        if (v80 > (int)v25)
          goto LABEL_107;
        v81 = *(unsigned __int8 *)(a2 + (v78 | 1) + 2164);
        v82 = *(unsigned __int8 **)(v14[19] + 8 * v81);
        if (*v82 != *(unsigned __int8 *)(a3 + (unsigned __int16)(a6 - v77)))
          goto LABEL_107;
        v83 = *(unsigned __int8 *)(v14[21] + v81);
        v84 = a4 - v80;
        if (v84 >= v83)
          v84 = *(unsigned __int8 *)(v14[21] + v81);
        if (v84 == 2)
          goto LABEL_94;
        if (v84 == 3)
          goto LABEL_93;
        if (v84 == 4)
          break;
LABEL_95:
        v85 = *(unsigned __int8 *)(v14[22] + v81);
        if (*(_WORD *)(a2 + 2)
          || ((_DWORD)v85 + v80 == a6 ? (v86 = 1) : (v86 = 2),
              *(unsigned __int16 *)(a2 + 2152) == (unsigned __int16)a6 ? (v87 = a6 == v77) : (v87 = 0),
              !v87 ? (v88 = v86) : (v88 = 4),
              (v88 & *((_BYTE *)v14 + v81 + 183)) != 0))
        {
          HIWORD(v99) = v132;
          LOWORD(v99) = 0;
          v89 = a2;
          v90 = a8;
          v91 = v14;
          v92 = v25;
          result = PDSFcorqbr(v14, a2, a3 + v80 + *(unsigned __int8 *)(v14[21] + v81), (__int16)(a4 - v80 - v83), a5 + v80 + v85, v77 - v85, v79, a8, v99);
          v25 = v92;
          v14 = v91;
          a2 = v89;
          a8 = v90;
          if ((_DWORD)result == 10)
            return result;
        }
LABEL_107:
        v78 += 2;
        v77 = *(unsigned __int8 *)(a2 + v78 + 2164);
        result = 11;
        if (v77 == 255)
          return result;
      }
      if (v82[3] != *(unsigned __int8 *)(a3 + v80 + 3))
        goto LABEL_107;
LABEL_93:
      if (v82[2] != *(unsigned __int8 *)(a3 + v80 + 2))
        goto LABEL_107;
LABEL_94:
      if (v82[1] != *(unsigned __int8 *)(a3 + v80 + 1))
        goto LABEL_107;
      goto LABEL_95;
    }
  }
  return 10;
}

uint64_t PDSFcorrig(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  size_t v10;
  int v11;
  int v12;
  char *v14;
  int v15;

  if (!*(_WORD *)(a2 + 138))
    return 11;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 144);
  while (1)
  {
    v8 = (unsigned __int8 *)(v7 + (unsigned __int16)v6);
    v9 = SLstrcmp(a1, v8);
    v10 = strlen((const char *)v8);
    if (!v9)
      break;
    v11 = v6 + v10 + 1;
    v7 = *(_QWORD *)(a2 + 144);
    v12 = strlen((const char *)(v7 + (unsigned __int16)(v6 + v10 + 1)));
    v6 = v12 + v11 + 1;
    if (*(unsigned __int16 *)(a2 + 138) <= (unsigned __int16)(v12 + v11 + 1))
      return 11;
  }
  v14 = (char *)&v8[v10 + 1];
  v15 = (__int16)strlen(v14);
  return SFadd1(v14, v15, a3, 1);
}

unsigned __int8 *PDDCengan(unsigned __int8 *result, unsigned int a2, uint64_t a3, _WORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t i;
  uint64_t j;
  uint64_t v10;
  char v11;
  _DWORD v12[2];

  v4 = *result;
  v5 = result[1];
  qmemcpy(v12, "AEIOaeio", sizeof(v12));
  *a4 = 12336;
  if (a2 <= 3 && a2 != 2)
  {
    if ((*(_DWORD *)(a3 + 4 * v4) & 0x40000000) != 0)
      LOBYTE(v4) = v4 + 32;
    if ((*(_DWORD *)(a3 + 4 * v4) & 0x10000000) != 0)
    {
      if ((*(_DWORD *)(a3 + 4 * v5) & 0x40000000) != 0)
        LOBYTE(v5) = v5 + 32;
      if (v4 != 101 || v5 != 117)
      {
        v6 = 0;
        while (*((unsigned __int8 *)&v12[1] + v6) != v4)
        {
          if (++v6 == 4)
          {
            v7 = 50;
            goto LABEL_16;
          }
        }
        v7 = 49;
LABEL_16:
        *(_BYTE *)a4 = v7;
      }
    }
  }
  if (a2 == 2)
  {
    for (i = 0; i != 13; ++i)
    {
      if (aBcdgjkpqtvwyzf[i] == v4)
      {
        v11 = 48;
        goto LABEL_31;
      }
    }
    for (j = 0; j != 4; ++j)
    {
      if (*((unsigned __int8 *)v12 + j) == v4)
      {
        v11 = 49;
        goto LABEL_31;
      }
    }
    v10 = 0;
    while (aBcdgjkpqtvwyzf[v10 + 13] != v4)
    {
      if (++v10 == 9)
        return result;
    }
    v11 = 50;
LABEL_31:
    *(_BYTE *)a4 = v11;
  }
  return result;
}

uint64_t PDDCposclt(int a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  uint64_t result;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE __dst[352];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  result = (uint64_t)memcpy(__dst, "arei", sizeof(__dst));
  v15 = 0x72646E736F696561;
  v9 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a4 = 12336;
  if (a1 == 8)
  {
    v14 = 0;
    while (__dst[v14 - 8] != v9)
    {
      if (++v14 == 8)
        return result;
    }
    goto LABEL_15;
  }
  if (a1 != 12)
  {
LABEL_15:
    *(_BYTE *)a4 = 49;
    return result;
  }
  v10 = 0;
  v11 = __dst;
  while (1)
  {
    v12 = byte_1DE2EFB2E[v10];
    if (a3 >= v12)
    {
      result = SLstrncmp((_BYTE *)(a2 + (a3 - v12)), v11, v12);
      if (!(_DWORD)result)
        return result;
    }
    ++v10;
    v11 += 8;
    if (v10 == 44)
    {
      v13 = 0;
      while (byte_1DE2EFB5A[v13] != v9)
      {
        if (++v13 == 13)
          return result;
      }
      goto LABEL_15;
    }
  }
}

uint64_t PDDCposcls(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t i;
  char v11;
  char v13;
  _WORD v14[2];

  qmemcpy(v14, "mos", 3);
  v7 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a5 = 12336;
  if (a3 < 2)
    v8 = 0;
  else
    v8 = *(unsigned __int8 *)(a2 + a3 - 2);
  if ((_DWORD)result == 12)
  {
    result = SLstrncmp((_BYTE *)(a2 + (a3 - 3)), (unsigned __int8 *)v14, 3);
    if ((_DWORD)result)
    {
      for (i = 0; i != 5; ++i)
      {
        if (byte_1DE2EFB72[i] == (_DWORD)v7)
          goto LABEL_16;
      }
      if ((v7 & 0xFFFFFFF7) == 0x72)
      {
LABEL_16:
        v11 = 50;
        goto LABEL_19;
      }
      if ((_DWORD)v7 == 109)
      {
        v11 = 52;
      }
      else
      {
        if (v8 == 210 || v8 == 245)
          v13 = 52;
        else
          v13 = 51;
        if ((*(_DWORD *)(a4 + 4 * v7) & 0x10000000) != 0)
          v11 = v13;
        else
          v11 = 51;
      }
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if ((_DWORD)result != 5)
  {
    if ((_DWORD)result != 3)
      return result;
    v9 = 0;
    while (byte_1DE2EFB67[v9] != (_DWORD)v7)
    {
      if (++v9 == 11)
        goto LABEL_16;
    }
LABEL_18:
    v11 = 49;
    goto LABEL_19;
  }
  v11 = 53;
LABEL_19:
  *(_BYTE *)a5 = v11;
  return result;
}

unsigned __int8 *PDDCpreclt(unsigned __int8 *result, uint64_t a2, _WORD *a3)
{
  uint64_t v3;

  v3 = *result;
  if ((*(_DWORD *)(a2 + 4 * v3) & 0x40000000) != 0)
    LOBYTE(v3) = v3 + 32;
  *a3 = 12336;
  if (v3 == 104 || (*(_DWORD *)(a2 + 4 * v3) & 0x10000000) != 0)
    *(_BYTE *)a3 = 49;
  return result;
}

uint64_t PDDCprecls(uint64_t result, uint64_t a2)
{
  char v2;

  *(_WORD *)a2 = 12336;
  switch((_DWORD)result)
  {
    case 3:
      v2 = 51;
      break;
    case 5:
      v2 = 56;
      break;
    case 9:
      v2 = 54;
      break;
    default:
      return result;
  }
  *(_BYTE *)(a2 + 1) = v2;
  return result;
}

uint64_t PDDCposacc(uint64_t result, unsigned int a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  _WORD v13[2];
  _WORD v14[2];
  uint64_t v15;
  char v16;
  _QWORD v17[2];

  v7 = result;
  v17[1] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(result + a2 - 1);
  qmemcpy(v14, "mos", 3);
  qmemcpy(v13, "ndo", 3);
  v17[0] = 0x656F616F65656165;
  v15 = *(_QWORD *)"eaneenoenua";
  v16 = 110;
  *(_WORD *)a4 = 12336;
  if (!a2)
  {
    if (v8 == 114 || v8 == 100)
      goto LABEL_7;
LABEL_5:
    result = SLstrncmp((_BYTE *)(result + (a2 - 3)), (unsigned __int8 *)v13, 3);
    if (!(_DWORD)result
      || (result = SLstrncmp((_BYTE *)(v7 + (a2 - 3)), (unsigned __int8 *)v14, 3), !(_DWORD)result))
    {
      v12 = 52;
      goto LABEL_20;
    }
    result = SLstrncmp((_BYTE *)(v7 + (a2 - 2)), (unsigned __int8 *)v17, 2);
    if ((_DWORD)result
      && (result = SLstrncmp((_BYTE *)(v7 + (a2 - 2)), (unsigned __int8 *)v17 + 2, 2), (_DWORD)result)
      && (result = SLstrncmp((_BYTE *)(v7 + (a2 - 2)), (unsigned __int8 *)v17 + 4, 2), (_DWORD)result)
      && (result = SLstrncmp((_BYTE *)(v7 + (a2 - 2)), (unsigned __int8 *)v17 + 6, 2), (_DWORD)result))
    {
      result = SLstrncmp((_BYTE *)(v7 + (a2 - 3)), (unsigned __int8 *)&v15, 3);
      if ((_DWORD)result)
      {
        result = SLstrncmp((_BYTE *)(v7 + (a2 - 3)), (unsigned __int8 *)&v15 + 3, 3);
        if ((_DWORD)result)
        {
          result = SLstrncmp((_BYTE *)(v7 + (a2 - 3)), (unsigned __int8 *)&v15 + 6, 3);
          if ((_DWORD)result)
          {
            if (a2 >= 3)
              return PDDCcalacc(v7, a2, a3, a4);
            return result;
          }
        }
      }
      v12 = 51;
    }
    else
    {
LABEL_7:
      v12 = 50;
    }
LABEL_20:
    a4[1] = v12;
    return result;
  }
  v9 = a2;
  v10 = (unsigned __int8 *)result;
  while (1)
  {
    v11 = *v10++;
    if ((*(_DWORD *)(a3 + 4 * v11) & 0x4000000) != 0)
      return result;
    if (!--v9)
      goto LABEL_5;
  }
}

uint64_t PDDCcalacc(uint64_t a1, unsigned int a2, uint64_t a3, char *__str)
{
  unsigned __int8 v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  char v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  _BYTE v17[3];
  _OWORD v18[3];
  _OWORD v19[8];
  uint64_t v20;

  v5 = a2;
  v6 = 0;
  v20 = *MEMORY[0x1E0C80C00];
  v18[0] = *(_OWORD *)"ua";
  v18[1] = *(_OWORD *)"o";
  v18[2] = xmmword_1DE2EFBA6;
  memset(v19, 0, sizeof(v19));
  v7 = (int64x2_t)xmmword_1DE2EC820;
  v8 = vdupq_n_s64((unint64_t)v18);
  v9 = vdupq_n_s64(2uLL);
  do
  {
    v10.i64[0] = 3 * v7.i64[0];
    v10.i64[1] = 3 * v7.i64[1];
    v19[v6] = vaddq_s64(v8, v10);
    v7 = vaddq_s64(v7, v9);
    ++v6;
  }
  while (v6 != 8);
  v17[2] = 0;
  *(_WORD *)__str = 12336;
  if (!a2)
    return snprintf(__str, 3uLL, "%02d", v5);
  v11 = 0;
  v12 = 0;
  v13 = a2 - 1;
  while (1)
  {
    if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13)) & 0x10000000) == 0)
    {
      if (v12)
        v11 = v13;
      goto LABEL_13;
    }
    if (!v12)
    {
      v12 = v13;
      goto LABEL_13;
    }
    if (!v13)
      return snprintf(__str, 3uLL, "%02d", v5);
    if (v11)
      break;
    v11 = 0;
LABEL_13:
    v14 = v13-- + 1;
    if (v14 <= 1)
      goto LABEL_14;
  }
  if (!(_BYTE)v13)
  {
LABEL_14:
    v5 = 0;
    return snprintf(__str, 3uLL, "%02d", v5);
  }
  if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13 - 1)) & 0x10000000) != 0)
  {
    v16 = 0;
    v17[0] = *(_BYTE *)(a1 + v13 - 1);
    v17[1] = *(_BYTE *)(a1 + v13);
    while (SLstrncmp(v17, *(unsigned __int8 **)((char *)v19 + v16), 2))
    {
      v16 += 8;
      if (v16 == 128)
      {
        v5 = v5 - v13 + 1;
        return snprintf(__str, 3uLL, "%02d", v5);
      }
    }
  }
  v5 -= v13;
  return snprintf(__str, 3uLL, "%02d", v5);
}

uint64_t PDDCrmcc(uint64_t result, int a2, char *a3)
{
  char v4;

  a3[1] = 48;
  if (a2 != 1 && (_DWORD)result == 6)
    v4 = 48;
  else
    v4 = 49;
  *a3 = v4;
  return result;
}

uint64_t DCSFlnkcod(uint64_t result, uint64_t a2)
{
  char v2;

  *(_WORD *)a2 = 12336;
  v2 = 51;
  switch((int)result)
  {
    case 6:
    case 7:
      goto LABEL_4;
    case 10:
    case 13:
      v2 = 50;
      goto LABEL_4;
    case 11:
      v2 = 49;
      *(_BYTE *)a2 = 49;
LABEL_4:
      *(_BYTE *)(a2 + 1) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PDDCdblend(int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  int v4;
  unsigned __int8 v5;
  int v6;
  BOOL v7;
  unsigned __int8 v8;

  if (a4 < 2)
    v4 = 0;
  else
    v4 = *(unsigned __int8 *)(a2 + a4 - 2);
  v5 = 48;
  if (v4 == *(unsigned __int8 *)(a2 + a4 - 1))
  {
    v6 = *(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a2 + a4 - 1));
    v7 = (v6 & 0x10000000) == 0;
    if ((v6 & 0x10000000) != 0)
      v8 = 48;
    else
      v8 = 49;
    if (v7)
      v5 = 49;
    else
      v5 = 50;
    if (a1 != 6)
      return v8;
  }
  return v5;
}

uint64_t PDSFcltdb(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  __int16 v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  __int16 v14;
  int v15;

  v2 = *(unsigned __int8 *)(a1 + 55);
  v3 = *(_QWORD *)(a2 + 104);
  if ((*(_WORD *)(a2 + 3484) & 0x200) == 0 || *(__int16 *)(a2 + 40) <= 0)
    *(_DWORD *)(v3 + 58) = 0;
  switch(v2)
  {
    case 3:
      v4 = *(unsigned __int16 *)(v3 + 62);
      v5 = (v4 & 0xF) - 1;
      if (v5 <= 3)
        *(_WORD *)(v3 + 58) |= 0x400020000020001uLL >> (16 * v5);
      v6 = (v4 >> 4) & 7;
      if (v6 == 2)
      {
        v7 = *(_WORD *)(v3 + 60) | 2;
        goto LABEL_30;
      }
      if (v6 == 1)
      {
        v7 = *(_WORD *)(v3 + 60) | 1;
        goto LABEL_30;
      }
      break;
    case 5:
      v8 = *(unsigned __int16 *)(v3 + 62);
      v9 = (v8 & 0xF) - 1;
      if (v9 <= 7 && ((0xEFu >> v9) & 1) != 0)
        *(_WORD *)(v3 + 58) |= word_1DE2EC7C0[v9];
      switch((v8 >> 4) & 7)
      {
        case 1u:
          goto LABEL_24;
        case 2u:
          goto LABEL_26;
        case 3u:
          goto LABEL_27;
        case 4u:
          goto LABEL_28;
        case 5u:
          goto LABEL_29;
        case 6u:
          v7 = *(_WORD *)(v3 + 60) | 0x1000;
          goto LABEL_30;
        default:
          return 1;
      }
    case 8:
      v10 = *(unsigned __int16 *)(v3 + 62);
      *(_BYTE *)(v3 + 92) = v10 & 0xF;
      v11 = (32 * v10) & 0xE00;
      *(_WORD *)(v3 + 60) = (32 * v10) & 0xE00;
      v12 = *(unsigned __int16 *)(a2 + 40);
      if (v12 <= 2)
      {
        if ((v10 & 0xF) != 0)
        {
          *(_WORD *)(v3 + 2 * v12 + 64) |= (_WORD)v10 << 12;
          v11 = *(unsigned __int16 *)(v3 + 60);
        }
        if (v11)
        {
          v13 = v3 + 2 * *(__int16 *)(a2 + 40);
          *(_WORD *)(v13 + 64) |= (__int16)v11 >> 8;
        }
      }
      break;
    case 9:
      v14 = *(_WORD *)(v3 + 62);
      v15 = (v14 & 0xF) - 1;
      if (v15 <= 0xA)
        *(_WORD *)(v3 + 58) |= word_1DE2EFBCC[v15];
      v7 = *(_WORD *)(v3 + 60) | (16 * v14) & 0x100;
LABEL_30:
      *(_WORD *)(v3 + 60) = v7;
      break;
    case 12:
      switch(*(_WORD *)(v3 + 62) & 7)
      {
        case 0:
LABEL_24:
          v7 = *(_WORD *)(v3 + 60) | 0x80;
          goto LABEL_30;
        case 1:
LABEL_26:
          v7 = *(_WORD *)(v3 + 60) | 0x100;
          goto LABEL_30;
        case 2:
LABEL_27:
          v7 = *(_WORD *)(v3 + 60) | 0x200;
          goto LABEL_30;
        case 3:
LABEL_28:
          v7 = *(_WORD *)(v3 + 60) | 0x400;
          goto LABEL_30;
        case 4:
LABEL_29:
          v7 = *(_WORD *)(v3 + 60) | 0x800;
          goto LABEL_30;
        default:
          return 1;
      }
    default:
      return 1;
  }
  return 1;
}

uint64_t PDSFremacc(const char *a1, uint64_t a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;

  v5 = a1;
  v6 = (unsigned __int16)strlen(a1);
  if (v6)
  {
    while (a3 != 8)
    {
      if (a3 != 15)
      {
        v8 = *v5;
        v9 = *(_DWORD *)(a2 + 4 * v8);
LABEL_8:
        if ((~v9 & 0x50000000) != 0 || (v9 & 0x4064000) == 0)
          goto LABEL_14;
        v7 = PDSFchkaccent[v8 - 192];
        goto LABEL_13;
      }
      v7 = *v5 - ((*(_DWORD *)(a2 + 4 * *v5) & 0x4020000) != 0);
LABEL_13:
      *v5 = v7;
LABEL_14:
      ++v5;
      if (!--v6)
        return 0;
    }
    v8 = *v5;
    v9 = *(_DWORD *)(a2 + 4 * v8);
    if ((v9 & 0x40000) != 0)
      goto LABEL_14;
    goto LABEL_8;
  }
  return 0;
}

uint64_t PDSFanaqua(uint64_t a1, int a2, _WORD *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  __int128 v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _OWORD v52[16];
  _BYTE v53[264];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  memset(v53, 0, 256);
  if (a2 >= 1)
  {
    v8 = (unsigned __int16)a2;
    v9 = (unsigned __int8 *)a1;
    do
    {
      v10 = *v9++;
      ++v53[v10];
      --v8;
    }
    while (v8);
  }
  a3[1062] = 0;
  v51 = 0;
  v11 = *(_QWORD *)(a4 + 1184);
  v12 = (__int16)a3[1064];
  v13 = (__int16)a3[1063];
  v14 = (unsigned __int8 *)(v11 + v13 + v12);
  v15 = *v14;
  v16 = v11 + v12;
  v17 = *(unsigned __int8 *)(v11 + v12);
  v18 = v14[1];
  v19 = *(unsigned __int8 *)(v16 + 1);
  v20 = (__int16)a3[1065];
  v21 = *(unsigned __int8 *)(v11 + v20);
  v22 = *(unsigned __int8 *)(v11 + v20 + v13);
  v47 = *(_BYTE *)(v11 + v20);
  v48 = v22;
  if (v13 >= 1)
  {
    v23 = (v18 | (v19 << 8)) - 1;
    v24 = (v15 | (v17 << 8)) - 1;
    v25 = 32;
    v26 = 1;
    v27 = 0uLL;
    v28 = 32;
    while (1)
    {
      v29 = v24 + 1;
      v30 = *(_QWORD *)(a4 + 1184);
      v31 = *(unsigned __int8 *)(v30 + (__int16)(v24 + 1) - 1);
      if (v31 == 255)
      {
        v29 = v24 + 3;
        v34 = (__int16)(v24 + 3);
        v33 = v34 - 2;
      }
      else
      {
        v32 = (__int16)a3[1066] + v31;
        v33 = v32 - 1;
        v34 = v32 + 256;
      }
      if (!v53[v21] || !v53[v22])
        goto LABEL_39;
      v35 = *(unsigned __int8 *)(v30 + v34 - 1);
      v36 = *(unsigned __int8 *)(v30 + v33);
      if (v36)
        v25 = v36;
      v49 = v25;
      if (v35)
        v28 = v35;
      v50 = v28;
      if ((v25 == 32 || v53[v25]) && (v28 == 32 || v53[v28]))
      {
        v37 = 0;
        v52[14] = v27;
        v52[15] = v27;
        v52[12] = v27;
        v52[13] = v27;
        v52[10] = v27;
        v52[11] = v27;
        v52[8] = v27;
        v52[9] = v27;
        v52[6] = v27;
        v52[7] = v27;
        v52[4] = v27;
        v52[5] = v27;
        v52[2] = v27;
        v52[3] = v27;
        v52[0] = v27;
        v52[1] = v27;
        while (1)
        {
          v38 = *(&v47 + v37);
          if (v38 == 32)
            break;
          ++*((_BYTE *)v52 + v38);
          if (++v37 == 4)
            goto LABEL_28;
        }
        if ((unsigned __int16)v37 == 4 || (unsigned __int16)v37 == (unsigned __int16)a2)
        {
LABEL_28:
          v37 = 0;
          while (*((unsigned __int8 *)v52 + v37) <= v53[v37])
          {
            if (++v37 == 256)
              goto LABEL_31;
          }
          goto LABEL_26;
        }
        if ((unsigned __int16)v37 == 256)
          goto LABEL_31;
LABEL_26:
        if (*(&v47 + (__int16)v37) != 32)
          goto LABEL_36;
LABEL_31:
        if ((__int16)a3[1062] > 498)
        {
          v43 = v22;
          v46 = v25;
          v45 = v21;
          v44 = v28;
          icgetana_0(a1, a2, (uint64_t)a3, a4);
          v22 = v43;
          v28 = v44;
          v21 = v45;
          v27 = 0uLL;
          v25 = v46;
        }
        else
        {
          for (i = 0; i != 4; ++i)
            *((_BYTE *)&a3[2 * (__int16)a3[1062] + 60] + i) = *(&v47 + i);
          ++a3[1062];
        }
      }
LABEL_36:
      LOWORD(v13) = a3[1063];
      if ((__int16)v29 >= (__int16)v23)
        break;
      v40 = v23;
      LODWORD(v23) = v29;
LABEL_40:
      v24 = v23;
      v23 = v40;
      if (v26 > (__int16)v13)
        goto LABEL_41;
    }
    v30 = *(_QWORD *)(a4 + 1184);
LABEL_39:
    v41 = (__int16)a3[1065] + (uint64_t)++v26 - 1;
    v21 = *(unsigned __int8 *)(v30 + v41);
    v22 = *(unsigned __int8 *)(v30 + (int)v41 + (__int16)v13);
    v47 = *(_BYTE *)(v30 + v41);
    v48 = v22;
    v40 = (*(unsigned __int8 *)(v30 + (__int16)v13 + v26 + (__int16)a3[1064]) | (*(unsigned __int8 *)(v30 + (__int16)a3[1064] + v26) << 8))
        - 1;
    goto LABEL_40;
  }
LABEL_41:
  icgetana_0(a1, a2, (uint64_t)a3, a4);
  return 10;
}

uint64_t icgetana_0(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  int v5;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  int v16;
  __int16 v17;
  __int16 v18;
  _DWORD v19[3];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124)) = 0;
  v5 = *(__int16 *)(a3 + 2124);
  *(_QWORD *)(a3 + 112) = a3 + 120;
  if (v5 >= 1)
  {
    v8 = (unsigned __int8 *)result;
    v9 = 0;
    v10 = (unsigned __int16)v5;
    v18 = 0;
    do
    {
      v11 = a3 + 4 * v9;
      result = SLstrncmp(*(_BYTE **)(a3 + 112), (unsigned __int8 *)(v11 + 120), 4);
      if ((int)result <= 0)
      {
        *(_QWORD *)(a3 + 112) = v11 + 120;
        v19[0] = *(_DWORD *)(v11 + 120);
        v12 = *(unsigned __int8 *)(a4 + 54);
        if (v12 >= 5)
        {
          v13 = 4;
          do
            *((_BYTE *)v19 + (__int16)v13++) = 0;
          while ((int)v12 > (__int16)v13);
        }
        v14 = SFbisrch((uint64_t)v19, 0, v12 - 1, &v18, a4);
        v15 = *(unsigned __int8 *)(a4 + 54);
        if (v15 >= 5)
        {
          v16 = 4;
          do
            *((_BYTE *)v19 + (__int16)v16++) = -1;
          while ((int)v15 > (__int16)v16);
        }
        result = SFbisrch((uint64_t)v19, 0, v15 - 1, &v18, a4);
        v17 = result - v14 + v18;
        v18 = v17;
        if (*(_BYTE *)(a3 + 3194) == 1)
          result = PDdecod2(v8, a2, v14, v17, a4, (unsigned __int16 *)a3);
      }
      ++v9;
    }
    while (v9 != v10);
  }
  *(_WORD *)(a3 + 2124) = 0;
  return result;
}

void sub_1DE285230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1DE2855EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1DE285ABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE285E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1DE2860B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE2865E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v28 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1DE286DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a26, 8);
  _Block_object_dispose(&a30, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 200), 8);
  _Block_object_dispose((const void *)(v34 - 168), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1DE2870F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE2878C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1DE287BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE288228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE288378(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DE288570(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DE288D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1DE288EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DE289028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1DE289744(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose((const void *)(v1 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t heapCorrectionCursorCompare(void *a1, void *a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;

  objc_msgSend(a1, "prefixProbability");
  v5 = v4;
  objc_msgSend(a2, "prefixProbability");
  v7 = 1;
  v8 = -1;
  if (a1 <= a2)
    v8 = a2 > a1;
  if (v6 <= v5)
    v7 = v8;
  if (v5 <= v6)
    return v7;
  else
    return -1;
}

uint64_t PDSFcltcmp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  _BOOL4 v6;
  int v8;
  BOOL v9;
  _BYTE v11[13];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 104);
  __strcpy_chk();
  v5 = *(unsigned __int8 *)(a1 + 55);
  v6 = 1;
  if (v5 > 0xC || ((1 << v5) & 0x1228) == 0)
    goto LABEL_13;
  if (*(_BYTE *)(v4 + 34))
    v6 = (unsigned __int16)(*(_WORD *)(v4 + 88) & *(_WORD *)(v4 + 58)) != 0;
  if (!*(_BYTE *)(v4 + 44))
  {
LABEL_13:
    v9 = 1;
  }
  else
  {
    v8 = (unsigned __int16)(*(_WORD *)(v4 + 90) & *(_WORD *)(v4 + 60));
    v9 = v8 != 0;
    if (v5 == 5
      && (*(_WORD *)(a2 + 3482) & 0x40) != 0
      && *(_BYTE *)(a2 + 88) == 2
      && !SLstrcmp(v11, "-la"))
    {
      v9 = (*(_WORD *)(v4 + 60) & 0x1A00 | v8) != 0;
    }
  }
  if (v6 && v9)
    return 10;
  else
    return 11;
}

uint64_t PDSFcltscr(unsigned __int8 *a1, int a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  _BYTE *v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  _BOOL4 v15;
  char *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  int v22;
  unsigned __int8 v24;
  unsigned __int8 v25;
  int v26;
  int v27;

  v6 = (_BYTE *)(a4 + 34);
  v7 = *(_QWORD *)(a3 + 56);
  if (*(_BYTE *)(a4 + 34)
    && ((v8 = *a1, v8 != 104) ? (v9 = (*(_DWORD *)(v7 + 4 * v8) & 0x10000000) == 0) : (v9 = 0), v9))
  {
    if (*(_BYTE *)(a3 + 55) == 5 && !SLstrcmp(v6, "d'"))
    {
      v17 = "yeux";
      v18 = a1;
LABEL_28:
      if (!SLstrcmp(v18, (unsigned __int8 *)v17))
        return 10;
    }
  }
  else
  {
    v10 = (_BYTE *)(a4 + 44);
    switch(*(_BYTE *)(a3 + 55))
    {
      case 3:
        if (*v10)
        {
          v11 = *(unsigned __int16 *)(a4 + 60);
          if (v11 != 3)
          {
            v12 = a1[a2 - 1];
            v13 = (*(_DWORD *)(v7 + 4 * v12) & 0x10000000) == 0 || v12 == 117;
            v14 = v13 || v12 == 249;
            v15 = v14;
            if ((v11 & 1) == 0 && !v15)
              return 11;
            if ((v11 & 2) == 0 && v15)
              return 11;
          }
        }
        return 10;
      case 5:
        if (!*v10 || (*(__int16 *)(a4 + 90) & 0x80000000) == 0)
          return 10;
        v19 = a2 - 1;
        result = 11;
        switch(a1[v19])
        {
          case 'a':
          case 'c':
          case 'e':
            if (!SLstrcmp(v10, "-t-il") || !SLstrcmp(v10, "-t-elle"))
              return 10;
            v17 = "-t-on";
LABEL_64:
            v18 = v10;
            goto LABEL_28;
          case 'b':
          case 'f':
          case 'g':
          case 'h':
            return result;
          case 'd':
LABEL_65:
            if (!SLstrcmp(v10, "-il")
              || !SLstrcmp(v10, "-elle")
              || !SLstrcmp(v10, "-on"))
            {
              return 10;
            }
            if (SLstrcmp(v10, "-ils"))
            {
              v26 = SLstrcmp(v10, "-elles");
              result = 11;
              if (a2 < 2 || v26)
                return result;
            }
            else if (a2 < 2)
            {
              return 11;
            }
            if (a1[a2 - 2] == 110)
              return 10;
            break;
          case 'i':
            v27 = SLstrcmp(v10, "-je");
            result = 11;
            if (a2 < 2 || v27 || a1[a2 - 2] != 97)
              return result;
            return 10;
          default:
            switch(a1[v19])
            {
              case 's':
                if (!SLstrcmp(v10, "-je") || !SLstrcmp(v10, "-tu"))
                  return 10;
                goto LABEL_36;
              case 't':
                goto LABEL_65;
              case 'u':
              case 'v':
              case 'w':
              case 'y':
                return result;
              case 'x':
                goto LABEL_73;
              case 'z':
LABEL_36:
                if (!SLstrcmp(v10, "-y") || !SLstrcmp(v10, "-en"))
                  return 10;
                v17 = "-y-en";
                goto LABEL_64;
              default:
                if (a1[v19] != 233)
                  return result;
LABEL_73:
                if (SLstrcmp(v10, "-je") && (SLstrcmp(v10, "-tu") || a1[v19] != 120))
                  return 11;
                return 10;
            }
        }
        return 11;
      case 9:
        if (*(_BYTE *)(a4 + 34)
          && (*(_WORD *)(a4 + 88) & 0x40) != 0
          && *a1 != 105
          && (*(_DWORD *)(v7 + 4 * a1[1]) & 0x10000000) != 0
          || !SLstrcmp(v6, "c'") && (*(_DWORD *)(v7 + 4 * *a1) & 0x800) == 0)
        {
          return 11;
        }
        return 10;
      case 0xC:
        v21 = *(__int16 *)(a4 + 90);
        if ((v21 & 0x80000000) == 0)
          return 10;
        if ((v21 & 0x20) == 0)
        {
          v22 = a1[a2 - 1];
          result = 10;
          if ((v22 - 224) > 0x14 || ((1 << (v22 + 32)) & 0x101401) == 0)
          {
            if (v22 == 105)
              return 10;
            else
              return 11;
          }
          return result;
        }
        if (a1[a2 - 1] == 114)
        {
          v24 = a1[a2 - 2] - 97;
          v25 = (v24 >> 1) | (v24 << 7);
          if (v25 < 8u)
            return dword_1DE2EFC00[(char)v25];
        }
        break;
      default:
        return 10;
    }
  }
  return 11;
}

uint64_t PDSFcor1qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  __int16 v46;
  BOOL v47;
  int v48;
  _BOOL4 v50;
  int v52;
  uint64_t v55;
  int v56;
  uint64_t i;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 v67;
  unsigned __int8 v68;
  char v69;
  char v70;
  char v71;

  v5 = a2[148];
  v6 = *(__int16 *)(a3 + 2126);
  v7 = *(__int16 *)(a3 + 2128);
  v8 = *(_WORD *)(a3 + 2130) - 1;
  v9 = *(_WORD *)(a3 + 2132);
  v10 = strlen(a1);
  v71 = 0;
  v11 = (unsigned __int8 *)(v5 + (__int16)(v7 + v6));
  v12 = *v11;
  v13 = *(unsigned __int8 *)(v5 + v7);
  v14 = v11[1];
  v15 = *(unsigned __int8 *)(v5 + v7 + 1);
  v16 = *(unsigned __int8 *)(v5 + v8 + 1);
  v17 = *(unsigned __int8 *)(v5 + (__int16)(v8 + v6) + 1);
  v67 = *(_BYTE *)(v5 + v8 + 1);
  v68 = v17;
  if (v6 >= 2)
  {
    v18 = v12 | (v13 << 8);
    v19 = (__int16)(v9 - 1);
    v20 = v9 + 255;
    v21 = (__int16)(v7 + v6);
    v22 = (v14 | (v15 << 8)) - 1;
    v23 = v18 - 1;
    v24 = a3 + 120;
    v25 = v8;
    v26 = (__int16)(v8 + v6);
    v27 = v20;
    LOWORD(v28) = 1;
    v29 = v10;
    v30 = 32;
    v31 = 32;
    do
    {
      v32 = *((unsigned __int8 *)a1 + 1);
      v33 = *(unsigned __int8 *)a1;
      v34 = v22;
      while (1)
      {
        if ((__int16)v23 >= (__int16)v34)
        {
          v28 = (__int16)v28 + 1;
          v16 = *(unsigned __int8 *)(v5 + v28 + v25);
          v17 = *(unsigned __int8 *)(v5 + v26 + (__int16)v28);
          v67 = *(_BYTE *)(v5 + v28 + v25);
          v68 = v17;
          v22 = (*(unsigned __int8 *)(v5 + v21 + (__int16)v28) | (*(unsigned __int8 *)(v5 + v7 + (__int16)v28) << 8))
              - 1;
        }
        else
        {
          v22 = v34;
          LODWORD(v34) = v23;
        }
        v35 = *(unsigned __int8 *)(v5 + (__int16)(v34 + 1) - 1);
        v36 = (__int16)(v34 + 3);
        v37 = v36 - 2;
        v38 = v36 - 1;
        v39 = v35 + v27;
        v40 = v35 == 255;
        if (v35 == 255)
          v41 = v37;
        else
          v41 = v35 + v19;
        if (v40)
        {
          v23 = v34 + 3;
        }
        else
        {
          v38 = v39;
          v23 = v34 + 1;
        }
        v42 = *(unsigned __int8 *)(v5 + v38);
        v43 = *(unsigned __int8 *)(v5 + v41);
        if (v16 == v32 && v17 == v33)
        {
          v44 = v16;
          goto LABEL_23;
        }
        if (v16 == v33 && (v17 == v32 || v17 == *((unsigned __int8 *)a1 + 2) || v17 == v16))
          break;
        v23 = v22;
        v34 = v22;
        if (v6 <= (__int16)v28)
          return 10;
      }
      v44 = v32;
LABEL_23:
      if (v43)
        v30 = v43;
      v69 = v30;
      if (v42)
        v31 = v42;
      v70 = v31;
      if (v31 == 32)
      {
        if (v30 == 32)
        {
          v45 = v17 != 32;
          if (v17 == 32)
            v46 = 1;
          else
            v46 = 2;
        }
        else
        {
          v45 = 0;
          v46 = 3;
        }
      }
      else
      {
        v45 = 0;
        v46 = 4;
      }
      if (v16 == v33)
      {
        v47 = v17 == v16 && v30 == v44;
        v48 = *((unsigned __int8 *)a1 + 2);
        v50 = v47 && v31 == v48;
        if (v17 == v44)
        {
          if (v31 == v48 && v30 == v17)
            v50 = 1;
          if (v30 == v48 && (v31 == v30 || v31 == *((unsigned __int8 *)a1 + 4) || v31 == *((unsigned __int8 *)a1 + 3)))
            v50 = 1;
          if (v30 == *((unsigned __int8 *)a1 + 3) && (v31 == v48 || v31 == *((unsigned __int8 *)a1 + 4)))
            v50 = 1;
        }
        if (v17 == v48)
        {
          v52 = *((unsigned __int8 *)a1 + 3);
          if ((v31 == v52 || v31 == 32) && v30 == v44)
            v50 = 1;
LABEL_80:
          if (v30 == v52 && v31 == *((unsigned __int8 *)a1 + 4))
          {
LABEL_83:
            v59 = v31;
            v60 = v30;
            v63 = v25;
            v64 = v24;
            v65 = v7;
            v61 = v26;
            v62 = v21;
            v55 = v29;
            v56 = PDSFcorqbr(a2, a3, (uint64_t)&v67, v46, (uint64_t)a1, v29, *(__int16 *)(a3 + 2154), *(__int16 *)(a3 + 2156), *(_DWORD *)(a3 + 2158), HIWORD(*(_DWORD *)(a3 + 2158)));
            v31 = v59;
            v30 = v60;
            v29 = v55;
            v26 = v61;
            v21 = v62;
            v25 = v63;
            v24 = v64;
            v7 = v65;
            if (v56 == 10)
            {
              if (*(__int16 *)(a3 + 2124) > 499)
                return 10;
              for (i = 0; i != 4; ++i)
                *(_BYTE *)(v64 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v67 + i);
              ++*(_WORD *)(a3 + 2124);
            }
            goto LABEL_88;
          }
        }
      }
      else
      {
        if (v16 != v32)
          goto LABEL_88;
        v50 = v17 == v33
           && (v45 || v30 == *((unsigned __int8 *)a1 + 2) && (v31 == 32 || v31 == *((unsigned __int8 *)a1 + 3)));
        if (v17 == *((unsigned __int8 *)a1 + 2))
        {
          v52 = *((unsigned __int8 *)a1 + 3);
          goto LABEL_80;
        }
      }
      if (v50)
        goto LABEL_83;
LABEL_88:
      v16 = v67;
      v17 = v68;
    }
    while (v6 > (__int16)v28);
  }
  return 10;
}

uint64_t PDSFcor2qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  unsigned __int8 *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned __int8 v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  int v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  char v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t i;
  int v51;
  int v52;
  int v53;
  _BOOL4 v54;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  int v64;
  int v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  char v68;
  char v69;
  char v70;

  v5 = a2[148];
  v6 = *(__int16 *)(a3 + 2126);
  v7 = *(__int16 *)(a3 + 2128);
  v8 = *(_WORD *)(a3 + 2130) - 1;
  v9 = *(_WORD *)(a3 + 2132);
  v10 = v7 + *(_WORD *)(a3 + 2126);
  v11 = v8 + *(_WORD *)(a3 + 2126);
  v12 = strlen(a1);
  v70 = 0;
  v13 = (unsigned __int8 *)(v5 + v10);
  v14 = *v13;
  v15 = *(unsigned __int8 *)(v5 + v7);
  v16 = v13[1];
  v17 = *(unsigned __int8 *)(v5 + v7 + 1);
  v18 = *(_BYTE *)(v5 + v11 + 1);
  v66 = *(_BYTE *)(v5 + v8 + 1);
  v67 = v18;
  if ((int)v6 >= 2)
  {
    v19 = a1;
    v20 = v6;
    v21 = (__int16)(v9 - 1);
    v22 = v10;
    v23 = (v16 | (v17 << 8)) - 1;
    v24 = (v14 | (v15 << 8)) - 1;
    v25 = 32;
    v26 = v8;
    v27 = v11;
    v28 = (__int16)(v9 + 255);
    v29 = 1;
    v58 = v12;
    v59 = v28;
    v30 = 32;
    v60 = v11;
    v61 = v26;
    do
    {
      if ((__int16)v24 >= (__int16)v23)
      {
        v29 = (__int16)v29 + 1;
        v31 = *(_BYTE *)(v5 + v27 + (__int16)v29);
        v66 = *(_BYTE *)(v5 + v29 + v26);
        v67 = v31;
        v24 = v23;
        v23 = (*(unsigned __int8 *)(v5 + v22 + (__int16)v29) | (*(unsigned __int8 *)(v5 + v7 + (__int16)v29) << 8)) - 1;
      }
      v32 = *(unsigned __int8 *)(v5 + (__int16)(v24 + 1) - 1);
      v33 = (__int16)(v24 + 3);
      v34 = v33 - 2;
      v35 = v33 - 1;
      v36 = v32 == 255;
      if (v32 == 255)
      {
        v37 = v35;
      }
      else
      {
        v34 = v32 + v21;
        v37 = v32 + v28;
      }
      v38 = *(unsigned __int8 *)(v5 + v37);
      if (v36)
        v24 += 3;
      else
        ++v24;
      v39 = *(unsigned __int16 *)(a3 + 2144);
      if (*(__int16 *)(a3 + 2144) >= 1)
      {
        v40 = *(unsigned __int8 *)v19;
        if (v66 < v40)
          goto LABEL_13;
        if (v66 > v40)
          return 10;
        v41 = *((unsigned __int8 *)v19 + 1);
        if (v39 < 2)
        {
          if (v67 == v41)
            goto LABEL_13;
        }
        else
        {
          if (v67 < v41)
            goto LABEL_13;
          if (v67 > v41)
            return 10;
        }
      }
      if (*(_BYTE *)(v5 + v34))
        v25 = *(unsigned __int8 *)(v5 + v34);
      v68 = v25;
      if (v38)
        v30 = v38;
      v69 = v30;
      if (!v39
        && v66 == *(unsigned __int8 *)v19
        && v67 == *((unsigned __int8 *)v19 + 1)
        && v25 == *((unsigned __int8 *)v19 + 2))
      {
        continue;
      }
      if (v30 == 32)
      {
        if (v25 == 32)
        {
          v42 = 0;
          if (v67 == 32)
            v43 = 1;
          else
            v43 = 2;
        }
        else
        {
          v43 = 3;
          v42 = 1;
        }
      }
      else
      {
        v42 = 0;
        v43 = 4;
      }
      if ((__int16)v39 >= 3)
      {
        if (v25 == *((unsigned __int8 *)v19 + 2) && (v39 < 4 || v30 == *((unsigned __int8 *)v19 + 3)))
          goto LABEL_44;
      }
      else if (v39 == 2)
      {
        if (v25 != *((unsigned __int8 *)v19 + 2))
          goto LABEL_44;
      }
      else
      {
        if (v39)
          goto LABEL_44;
        v51 = *(unsigned __int8 *)v19;
        if (v66 == v51)
        {
LABEL_13:
          v24 = v23;
          continue;
        }
        v52 = *((unsigned __int8 *)v19 + 1);
        if (v67 == v51)
        {
          v53 = *((unsigned __int8 *)v19 + 2);
          v54 = v30 == v53;
          if (v25 != v52)
            v54 = 0;
        }
        else
        {
          v54 = 0;
          v53 = *((unsigned __int8 *)v19 + 2);
        }
        if (v67 == v52 && v25 == v53 && ((v42 & 1) != 0 || v30 == *((unsigned __int8 *)v19 + 3)))
          v54 = 1;
        if (v66 == v52 && v67 == v53 && v25 == *((unsigned __int8 *)v19 + 3) && v30 == *((unsigned __int8 *)v19 + 4)
          || v54)
        {
LABEL_44:
          v63 = v29;
          v64 = v30;
          v65 = v25;
          v44 = v23;
          v45 = v22;
          v46 = v21;
          v47 = v7;
          v48 = v20;
          v49 = v19;
          if (PDSFcorqbr(a2, a3, (uint64_t)&v66, v43, (uint64_t)v19, v58, *(__int16 *)(a3 + 2154), *(__int16 *)(a3 + 2156), *(_DWORD *)(a3 + 2158), HIWORD(*(_DWORD *)(a3 + 2158))) == 10)
          {
            v22 = v45;
            v23 = v44;
            v30 = v64;
            v25 = v65;
            v27 = v60;
            v26 = v61;
            v28 = v59;
            v29 = v63;
            if (*(__int16 *)(a3 + 2124) > 499)
              return 10;
            v20 = v48;
            v7 = v47;
            v19 = v49;
            v21 = v46;
            for (i = 0; i != 4; ++i)
              *(_BYTE *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v66 + i);
            ++*(_WORD *)(a3 + 2124);
          }
          else
          {
            v20 = v48;
            v7 = v47;
            v19 = v49;
            v21 = v46;
            v22 = v45;
            v23 = v44;
            v30 = v64;
            v25 = v65;
            v27 = v60;
            v26 = v61;
            v28 = v59;
            v29 = v63;
          }
          continue;
        }
        if (v67 != v53 && v67 != v52 && v67 != v51)
          v24 = v23;
      }
    }
    while ((int)v20 > (__int16)v29);
  }
  return 10;
}

uint64_t PDSFcor3qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned __int8 *v24;
  const char *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  unsigned __int8 v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  unsigned __int8 v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  int v51;
  unsigned __int16 v52;
  __int16 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t i;
  uint64_t v70;
  int v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  unsigned __int8 v79;
  unsigned __int8 v80;
  char v81;
  char v82;
  char v83;
  _OWORD v84[16];
  _BYTE v85[264];
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v6 = a2[148];
  v7 = *(__int16 *)(a3 + 2126);
  v8 = *(__int16 *)(a3 + 2128);
  v9 = *(_WORD *)(a3 + 2130);
  v10 = *(_WORD *)(a3 + 2132);
  v11 = strlen(a1);
  v12 = v11;
  v13 = v11;
  v14 = *(unsigned __int8 *)(a3 + 2164);
  if ((int)v13 - v14 > 1)
    return 10;
  v15 = v7;
  v16 = v8;
  v17 = v9 - 1;
  v18 = v8 + v7;
  v19 = v9 - 1 + v7;
  memset(v85, 0, 256);
  memset(v84, 0, sizeof(v84));
  if (v14 != 255)
  {
    v20 = 0;
    do
    {
      if (v14 == v11)
      {
        v21 = *(unsigned __int8 *)(a3 + (v20 | 1) + 2164);
        v22 = *(unsigned __int8 *)(a2[21] + v21);
        v23 = *(unsigned __int8 *)(a2[22] + v21);
        v24 = *(unsigned __int8 **)(a2[19] + 8 * v21);
        v85[*v24] = 1;
        if (v22 == 1)
          v25 = &a1[v23];
        else
          v25 = (const char *)(v24 + 1);
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1)
          break;
        v85[*(unsigned __int8 *)a1] = 1;
        v25 = *(const char **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v20 | 1) + 2164));
      }
      *((_BYTE *)v84 + *(unsigned __int8 *)v25) = 1;
      v20 += 2;
      v14 = *(unsigned __int8 *)(a3 + v20 + 2164);
    }
    while (v14 != 255);
  }
  v83 = 0;
  v26 = (unsigned __int8 *)(v6 + v18);
  v27 = *v26;
  v28 = *(unsigned __int8 *)(v6 + v8);
  v29 = v26[1];
  v30 = *(unsigned __int8 *)(v8 + v6 + 1);
  v31 = *(_BYTE *)(v6 + v19 + 1);
  v79 = *(_BYTE *)(v6 + v17 + 1);
  v80 = v31;
  if (v7 < 2)
    return 10;
  v32 = (__int16)(v10 - 1);
  v33 = v18;
  v34 = (v29 | (v30 << 8)) - 1;
  v35 = (v27 | (v28 << 8)) - 1;
  v36 = 32;
  v75 = v19;
  v76 = v17;
  v77 = (__int16)(v10 + 255);
  v37 = 1;
  v38 = 32;
  v72 = v16;
  v73 = v11;
  v71 = v32;
  v70 = v33;
  do
  {
    if ((__int16)v35 >= (__int16)v34)
    {
      v37 = (__int16)v37 + 1;
      v39 = *(_BYTE *)(v6 + v75 + (__int16)v37);
      v79 = *(_BYTE *)(v6 + v37 + v76);
      v80 = v39;
      v35 = v34;
      v34 = (*(unsigned __int8 *)(v6 + v33 + (__int16)v37) | (*(unsigned __int8 *)(v6 + v16 + (__int16)v37) << 8)) - 1;
    }
    v40 = *(unsigned __int8 *)(v6 + (__int16)(v35 + 1) - 1);
    v41 = (__int16)(v35 + 3);
    v42 = v41 - 2;
    v43 = v41 - 1;
    v44 = v40 + v77;
    v45 = v40 == 255;
    if (v40 == 255)
      v46 = v42;
    else
      v46 = v40 + v32;
    if (v45)
    {
      v47 = v35 + 3;
    }
    else
    {
      v43 = v44;
      v47 = v35 + 1;
    }
    v48 = *(unsigned __int8 *)(v6 + v43);
    v49 = *(unsigned __int8 *)(v6 + v46);
    if (v49)
      v36 = v49;
    v81 = v36;
    if (v48)
      v38 = v48;
    v82 = v38;
    v78 = v47;
    if (v38 == 32)
    {
      if (v36 == 32)
      {
        if (v80 == 32)
          v50 = 1;
        else
          v50 = 2;
      }
      else
      {
        v50 = 3;
      }
    }
    else
    {
      v50 = 4;
    }
    v35 = v34;
    if (!v85[v79])
      continue;
    v35 = v34;
    if (!*((_BYTE *)v84 + v80))
      continue;
    v51 = *(unsigned __int8 *)(a3 + 2164);
    v35 = v34;
    if (v51 == 255)
      continue;
    v52 = 0;
    v53 = 0;
    do
    {
      v54 = (__int16)(v12 - v51);
      if (v54 > 1)
        break;
      if (v54 == 1 && *(unsigned __int8 *)a1 != v79)
        goto LABEL_65;
      v55 = *(unsigned __int8 *)(a3 + (v53 | 1) + 2164);
      v56 = a2[21];
      v57 = *(unsigned __int8 *)(v56 + v55);
      v58 = *(unsigned __int8 *)(a2[22] + v55);
      if (!*(_BYTE *)(v56 + v55))
      {
        if ((unsigned __int16)v54 == v50)
          goto LABEL_59;
        v59 = 0;
LABEL_51:
        v63 = v54 + (__int16)v59;
        if (v63 < v50)
        {
          v64 = v58 - v57;
          do
          {
            if (*(&v79 + v63) != a1[v64 + v63])
              break;
            v63 = v54 + (__int16)++v59;
          }
          while (v63 < v50);
        }
        if (v63 == v50)
          goto LABEL_59;
        goto LABEL_56;
      }
      if (v54 >= (__int16)v50)
      {
        v59 = 0;
        v60 = 0;
      }
      else
      {
        v59 = 0;
        v60 = 0;
        v61 = *(_QWORD *)(a2[19] + 8 * v55);
        v62 = v54;
        do
        {
          if (*(&v79 + v62) != *(unsigned __int8 *)(v61 + (__int16)v59))
            break;
          v60 = (__int16)++v59;
          v52 = 1;
          if ((__int16)v59 >= (int)v57)
            break;
          v62 = v54 + (__int16)v59;
        }
        while (v62 < v50);
      }
      if (v60 + v54 == v50)
        goto LABEL_59;
      if (v60 == v57)
        goto LABEL_51;
LABEL_56:
      v53 += 2;
      v51 = *(unsigned __int8 *)(a3 + v53 + 2164);
    }
    while (v51 != 255);
    v65 = v52;
    if (v52 == 1)
      goto LABEL_65;
    v35 = v34;
    if (!v65)
      continue;
LABEL_59:
    if (v38 != 32)
      goto LABEL_61;
    v74 = v37;
    v66 = v13;
    v67 = PDSFcorqbr(a2, a3, (uint64_t)&v79, (__int16)v50, (uint64_t)a1, v13, *(__int16 *)(a3 + 2154), *(__int16 *)(a3 + 2156), *(_DWORD *)(a3 + 2158), HIWORD(*(_DWORD *)(a3 + 2158)));
    v33 = v70;
    v32 = v71;
    v16 = v72;
    v12 = v73;
    v13 = v66;
    v37 = v74;
    v15 = v7;
    if (v67 == 10)
    {
LABEL_61:
      if (*(__int16 *)(a3 + 2124) > 499)
        return 10;
      for (i = 0; i != 4; ++i)
        *(_BYTE *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v79 + i);
      ++*(_WORD *)(a3 + 2124);
    }
LABEL_65:
    v35 = v78;
  }
  while (v15 > (__int16)v37);
  return 10;
}

uint64_t PDSFcor6qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int16 v8;
  __int16 v9;
  int v10;
  int v11;
  unint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  char *v20;
  int8x16_t v21;
  int64x2_t v22;
  int16x4_t v23;
  __int16 v24;
  __int16 v25;
  __int16 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  int8x16_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  uint64_t v38;
  int64x2_t v39;
  char *v40;
  int64x2_t v41;
  int64x2_t v42;
  int16x4_t v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  unsigned __int8 v64;
  int v65;
  int v66;
  int v67;
  int v68;
  BOOL v69;
  int v70;
  int v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  __int16 v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  int v86;
  uint64_t i;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v96;
  unsigned __int8 v97;
  unsigned __int8 v98;
  char v99;
  char v100;
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v5 = a2[7];
  v6 = a2[148];
  v94 = *(__int16 *)(a3 + 2126);
  v7 = *(__int16 *)(a3 + 2128);
  v8 = *(_WORD *)(a3 + 2130);
  v9 = *(_WORD *)(a3 + 2132);
  v10 = (__int16)strlen(a1);
  v11 = *(unsigned __int8 *)(a3 + 2164);
  v12 = *(unsigned __int8 *)a1;
  v13 = *(_DWORD *)(v5 + 4 * v12);
  if (v10 <= v11)
  {
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
    v14 = a2;
    v15 = v94;
    if ((v13 & 0x10000000) == 0)
      goto LABEL_16;
  }
  else
  {
    v14 = a2;
    v15 = v94;
    if ((v13 & 0x10000000) == 0)
      return 10;
    v132 = 0u;
    v133 = 0u;
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    v110 = 0u;
    v111 = 0u;
    v112 = 0u;
    v113 = 0u;
    v114 = 0u;
    v115 = 0u;
    v116 = 0u;
    v117 = 0u;
  }
  v16 = 0;
  v17 = vdupq_n_s64(v12);
  v18 = (int64x2_t)xmmword_1DE2EC810;
  v19 = (int64x2_t)xmmword_1DE2EC820;
  v20 = (char *)&v118 + 1;
  v21.i64[0] = 0x1000000010000000;
  v21.i64[1] = 0x1000000010000000;
  v22 = vdupq_n_s64(4uLL);
  do
  {
    v23 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v19, v17), (int32x4_t)vceqq_s64(v18, v17))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v16), v21))));
    if ((v23.i8[0] & 1) != 0)
      *(v20 - 1) = 1;
    if ((v23.i8[2] & 1) != 0)
      *v20 = 1;
    if ((v23.i8[4] & 1) != 0)
      v20[1] = 1;
    if ((v23.i8[6] & 1) != 0)
      v20[2] = 1;
    v18 = vaddq_s64(v18, v22);
    v19 = vaddq_s64(v19, v22);
    v20 += 4;
    v16 += 16;
  }
  while (v16 != 1024);
  *((_BYTE *)&v102 + *((unsigned __int8 *)a1 + 1)) = 1;
LABEL_16:
  v93 = v7;
  v24 = v8 - 1;
  v25 = v7 + v15;
  v26 = v8 - 1 + v15;
  if (v11 != 255 && v10 == v11)
  {
    v27 = 0;
    v28 = v14[21];
    v29 = v14[22];
    v30.i64[0] = 0x1000000010000000;
    v30.i64[1] = 0x1000000010000000;
    v31 = vdupq_n_s64(4uLL);
    v32 = v14[19];
    do
    {
      v33 = *(unsigned __int8 *)(a3 + (v27 | 1) + 2164);
      v34 = *(unsigned __int8 *)(v28 + v33);
      v35 = *(unsigned __int8 *)(v29 + v33);
      v36 = *(unsigned __int8 **)(v32 + 8 * v33);
      *((_BYTE *)&v118 + *v36) = 1;
      if (v35 == 1)
      {
        v37 = *((unsigned __int8 *)a1 + 1);
        if ((*(_DWORD *)(v5 + 4 * v37) & 0x10000000) != 0)
        {
          v38 = 0;
          v39 = vdupq_n_s64(v37);
          v40 = (char *)&v102 + 1;
          v41 = (int64x2_t)xmmword_1DE2EC820;
          v42 = (int64x2_t)xmmword_1DE2EC810;
          do
          {
            v43 = vmovn_s32((int32x4_t)vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v41, v39), (int32x4_t)vceqq_s64(v42, v39))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(*(int8x16_t *)(v5 + v38), v30))));
            if ((v43.i8[0] & 1) != 0)
              *(v40 - 1) = 1;
            if ((v43.i8[2] & 1) != 0)
              *v40 = 1;
            if ((v43.i8[4] & 1) != 0)
              v40[1] = 1;
            if ((v43.i8[6] & 1) != 0)
              v40[2] = 1;
            v42 = vaddq_s64(v42, v31);
            v41 = vaddq_s64(v41, v31);
            v40 += 4;
            v38 += 16;
          }
          while (v38 != 1024);
        }
      }
      v44 = (unsigned __int8 *)&a1[v35];
      if (v34 == 1)
        v45 = v44;
      else
        v45 = v36 + 1;
      *((_BYTE *)&v102 + *v45) = 1;
      v27 += 2;
      v46 = *(unsigned __int8 *)(a3 + v27 + 2164);
    }
    while (v46 != 255 && v10 == v46);
  }
  v101 = 0;
  v48 = (unsigned __int8 *)(v6 + v25);
  v49 = *v48;
  v50 = v7;
  v51 = *(unsigned __int8 *)(v6 + v7);
  v52 = v48[1];
  v53 = *(unsigned __int8 *)(v7 + v6 + 1);
  v54 = *(_BYTE *)(v6 + v26 + 1);
  v97 = *(_BYTE *)(v6 + v24 + 1);
  v98 = v54;
  if (v15 >= 2)
  {
    v55 = (__int16)(v9 - 1);
    v56 = v25;
    v57 = (v52 | (v53 << 8)) - 1;
    v58 = (v49 | (v51 << 8)) - 1;
    v59 = 32;
    v60 = v24;
    v61 = v26;
    v96 = (__int16)(v9 + 255);
    LOWORD(v62) = 1;
    v63 = 32;
    v91 = v55;
    v89 = v24;
    v90 = v25;
    v92 = v26;
    do
    {
      if ((__int16)v58 >= (__int16)v57)
      {
        v62 = (__int16)v62 + 1;
        v64 = *(_BYTE *)(v6 + v61 + (__int16)v62);
        v97 = *(_BYTE *)(v6 + v62 + v60);
        v98 = v64;
        v58 = v57;
        v57 = (*(unsigned __int8 *)(v6 + v56 + (__int16)v62) | (*(unsigned __int8 *)(v6 + v50 + (__int16)v62) << 8)) - 1;
      }
      v65 = *(unsigned __int8 *)(v6 + (__int16)(v58 + 1) - 1);
      v66 = (__int16)(v58 + 3);
      v67 = v66 - 2;
      v68 = v66 - 1;
      v69 = v65 == 255;
      if (v65 == 255)
      {
        v70 = v68;
      }
      else
      {
        v67 = v65 + v55;
        v70 = v65 + v96;
      }
      v71 = *(unsigned __int8 *)(v6 + v70);
      if (v69)
        v58 += 3;
      else
        ++v58;
      v72 = *(unsigned __int16 *)(a3 + 2144);
      if (*(__int16 *)(a3 + 2144) >= 1)
      {
        v73 = *(unsigned __int8 *)a1;
        if (v97 < v73)
          goto LABEL_77;
        if (v97 > v73)
          return 10;
        v74 = *((unsigned __int8 *)a1 + 1);
        if (v72 < 2)
        {
          if (v98 == v74)
            goto LABEL_77;
        }
        else
        {
          if (v98 < v74)
            goto LABEL_77;
          if (v98 > v74)
            return 10;
        }
      }
      if (*(_BYTE *)(v6 + v67))
        v59 = *(unsigned __int8 *)(v6 + v67);
      v99 = v59;
      if (v71)
        v63 = v71;
      v100 = v63;
      if (!v72
        && v97 == *(unsigned __int8 *)a1
        && v98 == *((unsigned __int8 *)a1 + 1)
        && v59 == *((unsigned __int8 *)a1 + 2))
      {
        continue;
      }
      if (v63 == 32)
      {
        if (v59 == 32)
        {
          if (v98 == 32)
            v75 = 1;
          else
            v75 = 2;
        }
        else
        {
          v75 = 3;
        }
      }
      else
      {
        v75 = 4;
      }
      if (!*((_BYTE *)&v118 + v97) || !*((_BYTE *)&v102 + v98))
      {
LABEL_77:
        v58 = v57;
        continue;
      }
      if ((*(_DWORD *)(v5 + 4 * v97) & 0x10000000) == 0
        || (*(_DWORD *)(v5 + 4 * *(unsigned __int8 *)a1) & 0x10000000) == 0)
      {
        v76 = *(unsigned __int8 *)(a3 + 2164);
        if (v76 == 255)
          goto LABEL_76;
        v77 = 0;
        v78 = 0;
        do
        {
          v79 = (__int16)(v10 - v76);
          if (v79 > 1)
            break;
          if (v79 == 1 && *(unsigned __int8 *)a1 != v97)
            goto LABEL_101;
          v80 = 0;
          v81 = v14[21];
          v82 = *(unsigned __int8 *)(a3 + (v78 | 1) + 2164);
          v83 = *(unsigned __int8 *)(v81 + v82);
          if (*(_BYTE *)(v81 + v82) && v79 < v75)
          {
            v84 = 0;
            v80 = 0;
            v85 = *(_QWORD *)(v14[19] + 8 * v82);
            v86 = v79;
            do
            {
              if (*(&v97 + v86) != *(unsigned __int8 *)(v85 + v84))
                break;
              v80 = ++v84;
              v77 = 1;
              if (v84 >= v83)
                break;
              v86 = v79 + v84;
            }
            while (v86 < (unsigned __int16)v75);
          }
          if (v80 == v83 || v80 + v79 == (unsigned __int16)v75)
            goto LABEL_95;
          v78 += 2;
          v76 = *(unsigned __int8 *)(a3 + v78 + 2164);
        }
        while (v76 != 255);
        if (v77 == 1)
          goto LABEL_101;
        if (!v77)
        {
LABEL_76:
          v58 = v57;
LABEL_101:
          v61 = v92;
          continue;
        }
      }
LABEL_95:
      if (PDSFcorqbr(v14, a3, (uint64_t)&v97, v75, (uint64_t)a1, v10, *(__int16 *)(a3 + 2136), *(__int16 *)(a3 + 2138), *(_DWORD *)(a3 + 2140), HIWORD(*(_DWORD *)(a3 + 2140))) != 10)
      {
        v14 = a2;
        v15 = v94;
        v50 = v93;
        v55 = v91;
        v60 = v89;
        v56 = v90;
        goto LABEL_101;
      }
      v14 = a2;
      v15 = v94;
      v61 = v92;
      v50 = v93;
      v55 = v91;
      v60 = v89;
      v56 = v90;
      if (*(__int16 *)(a3 + 2124) > 499)
        return 10;
      for (i = 0; i != 4; ++i)
        *(_BYTE *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v97 + i);
      ++*(_WORD *)(a3 + 2124);
    }
    while (v15 > (__int16)v62);
  }
  return 10;
}

uint64_t PDSFcor8qd(const char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  __int16 v55;
  __int16 v56;
  __int16 v57;
  int v58;
  int v59;
  int v60;
  uint64_t i;
  __int16 v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  int v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  char v78;
  char v79;
  char v80;
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[264];
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v6 = a2[148];
  v7 = *(__int16 *)(a3 + 2126);
  v75 = *(__int16 *)(a3 + 2128);
  v8 = *(_WORD *)(a3 + 2130) - 1;
  v73 = *(_WORD *)(a3 + 2132);
  v9 = v75 + v7;
  v10 = v8 + v7;
  v11 = strlen(a1);
  memset(v96, 0, 256);
  memset(v81, 0, sizeof(v81));
  v82 = 0u;
  v83 = 0u;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v87 = 0u;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v12 = *((unsigned __int8 *)a1 + 1);
  *((_BYTE *)v81 + v12) = 1;
  v13 = *(unsigned __int8 *)a1;
  v96[v13] = 1;
  *((_BYTE *)v81 + *((unsigned __int8 *)a1 + 2)) = 1;
  v96[v12] = 1;
  BYTE14(v82) = 1;
  v14 = *(unsigned __int8 *)(a3 + 2164);
  if (v14 != 255)
  {
    v15 = 0;
    do
    {
      if (v14 == v11)
      {
        v16 = *(unsigned __int8 *)(a3 + (v15 | 1) + 2164);
        v17 = *(unsigned __int8 *)(a2[21] + v16);
        v18 = *(unsigned __int8 *)(a2[22] + v16);
        v19 = *(unsigned __int8 **)(a2[19] + 8 * v16);
        v96[*v19] = 1;
        if (v17 == 1)
          v20 = (unsigned __int8 *)&a1[v18];
        else
          v20 = v19 + 1;
      }
      else
      {
        if ((unsigned __int16)(v11 - v14) != 1)
          break;
        v96[v13] = 1;
        v20 = *(unsigned __int8 **)(a2[19] + 8 * *(unsigned __int8 *)(a3 + (v15 | 1) + 2164));
      }
      *((_BYTE *)v81 + *v20) = 1;
      v15 += 2;
      v14 = *(unsigned __int8 *)(a3 + v15 + 2164);
    }
    while (v14 != 255);
  }
  v80 = 0;
  v21 = (unsigned __int8 *)(v6 + v9);
  v22 = *v21;
  v23 = *(unsigned __int8 *)(v6 + (int)v75);
  v24 = v21[1];
  v25 = *(unsigned __int8 *)(v75 + v6 + 1);
  v26 = *(unsigned __int8 *)(v6 + v8 + 1);
  v27 = *(unsigned __int8 *)(v6 + v10 + 1);
  v76 = *(_BYTE *)(v6 + v8 + 1);
  v77 = v27;
  if (v7 < 2)
    return 10;
  v28 = v24 | (v25 << 8);
  v29 = v22 | (v23 << 8);
  v30 = (__int16)(v73 - 1);
  v31 = v73 + 255;
  v74 = v9;
  v32 = v28 - 1;
  v33 = v29 - 1;
  v34 = 32;
  v72 = v8;
  v35 = v10;
  v36 = v31;
  LOWORD(v37) = 1;
  v38 = 32;
  while (1)
  {
    if ((__int16)v33 >= (__int16)v32)
    {
      v37 = (__int16)v37 + 1;
      v26 = *(unsigned __int8 *)(v6 + v37 + v72);
      v27 = *(unsigned __int8 *)(v6 + v35 + (__int16)v37);
      v76 = *(_BYTE *)(v6 + v37 + v72);
      v39 = *(unsigned __int8 *)(v6 + v74 + (__int16)v37);
      v40 = *(unsigned __int8 *)(v6 + v75 + (__int16)v37);
      v77 = v27;
      v41 = v39 | (v40 << 8);
      v33 = v32;
      v32 = v41 - 1;
    }
    v42 = *(unsigned __int8 *)(v6 + (__int16)(v33 + 1) - 1);
    v43 = (__int16)(v33 + 3);
    v44 = v43 - 2;
    v45 = v43 - 1;
    v46 = v42 + v36;
    v47 = v42 == 255;
    if (v42 == 255)
      v48 = v44;
    else
      v48 = v42 + v30;
    if (v47)
    {
      v49 = v33 + 3;
    }
    else
    {
      v45 = v46;
      v49 = v33 + 1;
    }
    v50 = *(unsigned __int8 *)(v6 + v45);
    v51 = *(unsigned __int8 *)(v6 + v48);
    if (v51)
      v34 = v51;
    v78 = v34;
    if (v50)
      v38 = v50;
    v79 = v38;
    if (v38 == 32)
    {
      v52 = v27 == 32 ? 1 : 2;
      v53 = v34 == 32 ? v52 : 3;
    }
    else
    {
      v53 = 4;
    }
    v33 = v32;
    if (v96[v26])
    {
      v33 = v32;
      if (*((_BYTE *)v81 + v27))
        break;
    }
LABEL_55:
    if (v7 <= (__int16)v37)
      return 10;
  }
  v54 = *(unsigned __int8 *)(a3 + 2164);
  if (v54 == 255)
  {
LABEL_35:
    if (v53 + 1 == v11)
    {
      v55 = 0;
      v56 = 0;
      while (1)
      {
        if (a1[v55] == *(&v76 + v56))
        {
          ++v56;
        }
        else
        {
          if (v53 == v56)
            goto LABEL_51;
          v47 = v55 == v56;
          v56 = v55;
          if (!v47)
            break;
        }
        ++v55;
      }
    }
    v57 = 0;
    v58 = 0;
    while (1)
    {
      v59 = a1[(__int16)v58];
      v60 = *(&v76 + v57);
      if (v59 == v60)
        break;
      if (v59 != 46)
      {
        if (v60 != 46)
        {
          v33 = v49;
          goto LABEL_55;
        }
        goto LABEL_49;
      }
      ++v58;
LABEL_50:
      if (v53 == v57)
        goto LABEL_51;
    }
    ++v58;
LABEL_49:
    ++v57;
    goto LABEL_50;
  }
  v62 = 0;
  while (1)
  {
    v63 = (__int16)(v11 - v54);
    if (v63 > 1 || v63 == 1 && *(unsigned __int8 *)a1 != v26)
      goto LABEL_35;
    v64 = *(unsigned __int8 *)(a3 + (v62 | 1) + 2164);
    v65 = a2[21];
    v66 = *(unsigned __int8 *)(v65 + v64);
    if (!*(_BYTE *)(v65 + v64))
      break;
    v67 = 0;
    v68 = 0;
    do
    {
      if (v67 + v63 >= v53)
        break;
      if (*(&v76 + v67 + v63) != *(_BYTE *)(*(_QWORD *)(a2[19] + 8 * v64) + (__int16)v68))
        break;
      v67 = (__int16)++v68;
    }
    while ((__int16)v68 < (int)v66);
    if (v67 + v63 == v53)
      goto LABEL_51;
    if (v67 == v66)
      goto LABEL_71;
LABEL_76:
    v62 += 2;
    v54 = *(unsigned __int8 *)(a3 + v62 + 2164);
    if (v54 == 255)
      goto LABEL_35;
  }
  if (v53 == v63)
    goto LABEL_51;
  v68 = 0;
LABEL_71:
  v69 = v63 + (__int16)v68;
  if (v69 < v53)
  {
    v70 = *(unsigned __int8 *)(a2[22] + v64) - (unint64_t)v66;
    do
    {
      if (*(&v76 + v69) != a1[v70 + v69])
        break;
      v69 = v63 + (__int16)++v68;
    }
    while (v69 < v53);
  }
  if (v69 != v53)
    goto LABEL_76;
LABEL_51:
  if (*(__int16 *)(a3 + 2124) <= 499)
  {
    for (i = 0; i != 4; ++i)
      *(_BYTE *)(a3 + 120 + 4 * *(__int16 *)(a3 + 2124) + i) = *(&v76 + i);
    ++*(_WORD *)(a3 + 2124);
    v33 = v49;
    goto LABEL_55;
  }
  return 10;
}

uint64_t PDSFcorsrt(char *__src, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  int v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  int v25;
  int v26;
  int v27;
  __int16 v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  int v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  __int16 v42;
  int v43;
  int v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v51;
  int v52;
  int v53;
  int v54;
  __int16 v55;
  int v56;
  uint64_t v57;
  __int16 v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[16];
  _OWORD v63[16];
  uint64_t v64;

  v7 = a3;
  v64 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a5 + 3194) == 1)
    return PDcorsrt(__src, a2, a3, a4, (_QWORD *)a5);
  v11 = *(_QWORD *)(a5 + 3168);
  v12 = *(char **)(*(_QWORD *)(a5 + 32) + 24);
  v13 = *(_QWORD *)(a5 + 104);
  if (v13 && (v15 = *(unsigned __int8 *)(v13 + 34), v14 = (const char *)(v13 + 34), v15))
  {
    v16 = strcpy(v12, v14);
    strcat(v16, __src);
  }
  else
  {
    strcpy(v12, __src);
  }
  v17 = *(_QWORD *)(a5 + 104);
  if (v17)
  {
    v19 = *(unsigned __int8 *)(v17 + 44);
    v18 = (const char *)(v17 + 44);
    if (v19)
      strcat(v12, v18);
  }
  v59 = a2;
  if (a2 <= (int)v7)
  {
    v60 = *(_QWORD *)(a5 + 48);
    v61 = *(_QWORD *)(a5 + 64);
    LOWORD(v20) = a2;
    v21 = *(_QWORD *)(a4 + 56);
    do
    {
      v22 = v7;
      v23 = (__int16)v20;
      v24 = (const char *)(v60 + *(__int16 *)(v61 + 2 * (__int16)v20));
      v25 = strlen(v12);
      v26 = strlen(v24);
      memset(v63, 0, sizeof(v63));
      memset(v62, 0, sizeof(v62));
      if (v25 << 16 >= 1)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          v29 = v12[v28];
          if ((_DWORD)v29 != v12[v27 + 1])
          {
            if ((*(_DWORD *)(v21 + 4 * v29) & 0x40000000) != 0)
              v30 = v29 + 32;
            else
              v30 = v12[v28];
            ++*((_BYTE *)v63 + v30);
          }
          v27 = ++v28;
        }
        while ((__int16)v25 > v28);
      }
      v31 = v26 << 16;
      v32 = (__int16)v26;
      if (v26 << 16 >= 1)
      {
        v33 = 0;
        v34 = 0;
        do
        {
          v35 = v24[v34];
          if ((_DWORD)v35 != v24[v33 + 1])
          {
            if ((*(_DWORD *)(v21 + 4 * v35) & 0x40000000) != 0)
              v36 = v35 + 32;
            else
              v36 = v24[v34];
            ++*((_BYTE *)v62 + v36);
          }
          v33 = ++v34;
        }
        while ((__int16)v26 > v34);
      }
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = *((unsigned __int8 *)v63 + v37) - *((unsigned __int8 *)v62 + v37);
        if (v39)
        {
          if (v39 < 0)
            v39 = *((unsigned __int8 *)v62 + v37) - *((unsigned __int8 *)v63 + v37);
          if ((*(_DWORD *)(v21 + 4 * v37) & 0x10000000) != 0)
            v38 += 2 * v39;
          else
            v38 += 3 * v39;
        }
        ++v37;
      }
      while (v37 != 256);
      if (v25 << 16 < 1)
      {
        v42 = 0;
      }
      else
      {
        v40 = 0;
        v41 = 0;
        v42 = 0;
        do
        {
          if (v31 >= 1)
          {
            v43 = 0;
            v44 = 0;
            do
            {
              v45 = 0;
              do
              {
                v46 = v45;
                v47 = v40 + (uint64_t)(__int16)v45;
                v48 = v43 + (uint64_t)(__int16)v45++;
              }
              while ((int)v48 < v32 && v12[v47] == v24[v48] && (int)v47 < (__int16)v25);
              if (v46 > v42)
                v42 = v46;
              v43 = (__int16)++v44;
            }
            while (v32 > (__int16)v44);
          }
          v40 = (__int16)++v41;
        }
        while ((__int16)v25 > (__int16)v41);
      }
      v51 = v25 - v32;
      if ((__int16)v25 - v32 < 0)
        v51 = v32 - v25;
      *(_WORD *)(v11 + 2 * v23) = 2 * v38 + 4 * v51 - v42 + 16 * (v12[(__int16)v25 - 1] != v24[v32 - 1]);
      v20 = (__int16)(v23 + 1);
      v7 = v22;
    }
    while (v20 <= (int)v22);
  }
  if (v59 < (int)v7)
  {
    v52 = v7 + v59;
    v53 = v59;
    do
    {
      if (v52 - v53 > v59)
      {
        v54 = v59;
        v55 = v59;
        do
        {
          v56 = v54 + 1;
          if (*(__int16 *)(v11 + 2 * v55) > *(__int16 *)(v11 + 2 * v56))
          {
            v57 = *(_QWORD *)(a5 + 64);
            v58 = *(_WORD *)(v57 + 2 * v55);
            *(_WORD *)(v57 + 2 * v55) = *(_WORD *)(v57 + 2 * v56);
            *(_WORD *)(v57 + 2 * v56) = v58;
            LOWORD(v57) = *(_WORD *)(v11 + 2 * v55);
            *(_WORD *)(v11 + 2 * v55) = *(_WORD *)(v11 + 2 * v56);
            *(_WORD *)(v11 + 2 * v56) = v57;
          }
          v54 = ++v55;
        }
        while (v52 - v53 > v55);
      }
      ++v53;
    }
    while (v53 != (_DWORD)v7);
  }
  return 10;
}

uint64_t PDhypins(char *a1, uint64_t *a2, int a3)
{
  int v3;
  unint64_t v4;
  unsigned __int16 v5;
  int v6;
  int v7;
  int v8;
  uint64_t v10;
  char __src[65];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  v3 = *a1;
  if (*a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      if (v3 != a3)
      {
        v7 = v6 + 1;
        __src[(unsigned __int16)v6] = v3;
        v8 = *(_DWORD *)&__src[4 * v5 - 1];
        if (v8 < 0)
        {
          __src[(unsigned __int16)(v6 + 1)] = a3;
          v7 = v6 + 2;
        }
        *(_DWORD *)&__src[4 * v5 - 1] = 2 * v8;
        if (v4 == 31)
          ++v5;
        v6 = v7;
      }
      if (v4 > 0x3E)
        break;
      v3 = a1[++v4];
    }
    while (v3);
  }
  else
  {
    LOWORD(v6) = 0;
  }
  __src[(unsigned __int16)v6] = 0;
  strcpy(a1, __src);
  return v6;
}

uint64_t PDhypstrip(_BYTE *a1, _QWORD *a2, int a3)
{
  int v3;
  unint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v3 = *a1;
  if (*a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0x80000000;
    do
    {
      if (v3 == a3)
      {
        if (v6 == 32)
        {
          *(_DWORD *)a2 |= 1u;
          v6 = 32;
        }
        else
        {
          *((_DWORD *)a2 + v5) |= 2 * v7;
        }
      }
      else
      {
        v8 = v6++;
        a1[v8] = v3;
        v7 >>= 1;
        if (v6 == 32)
        {
          ++v5;
          v7 = 0x80000000;
        }
      }
      if (v4 > 0x3E)
        break;
      v3 = a1[++v4];
    }
    while (v3);
  }
  else
  {
    v6 = 0;
  }
  a1[v6] = 0;
  return v6;
}

_WORD *OpenOutputBuffer(unsigned int a1)
{
  _WORD *v2;

  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x10100401D138D4BuLL);
  if (v2)
  {
    *(_QWORD *)v2 = malloc_type_calloc(a1 + 64, 1uLL, 0x100004077774924uLL);
    v2[4] = 0;
    v2[6] = 0;
    *((_BYTE *)v2 + 10) = 0x80;
  }
  return v2;
}

uint64_t build_tree(unsigned __int16 *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  __int16 v12;
  __int16 v14;

  a1[2052] = -1;
  v1 = 257;
  while (2)
  {
    v2 = 0;
    v3 = 513;
    v4 = a1;
    v5 = 513;
    do
    {
      v6 = v5;
      v8 = *v4;
      v4 += 4;
      v7 = v8;
      if (v8)
      {
        if (v7 < a1[4 * (__int16)v6])
        {
          v5 = v2;
          v3 = v6;
          goto LABEL_9;
        }
        if (v7 < a1[4 * v3])
          v3 = v2;
      }
      v5 = v6;
LABEL_9:
      ++v2;
    }
    while (v1 != v2);
    if (v3 != 513)
    {
      v9 = &a1[4 * (__int16)v5];
      v10 = &a1[4 * v3];
      v11 = &a1[4 * (__int16)v1];
      *v11 = *v10 + *v9;
      v9[1] = *v9;
      *v9 = 0;
      v10[1] = *v10;
      *v10 = 0;
      v11[2] = v5;
      v11[3] = v3;
      v12 = v1 + 1;
      if ((unsigned __int16)v1++ >= 0x7FFFu)
      {
        LOWORD(v1) = v12;
        break;
      }
      continue;
    }
    break;
  }
  v14 = v1 - 1;
  a1[4 * v14 + 1] = a1[4 * v14];
  return v14;
}

uint64_t PDreverse(uint64_t result, __int16 a2)
{
  unint64_t v2;
  uint64_t v3;
  char v4;

  if (a2 != 1)
  {
    v2 = 0;
    v3 = (unsigned __int16)(a2 - 1);
    do
    {
      v4 = *(_BYTE *)(result + v2);
      *(_BYTE *)(result + v2) = *(_BYTE *)(result + v3);
      *(_BYTE *)(result + v3) = v4;
      ++v2;
      --v3;
    }
    while (v2 < (unsigned __int16)v3);
  }
  return result;
}

uint64_t PDitoa(unsigned int a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  unsigned __int16 v4;
  BOOL v5;
  uint64_t result;
  unint64_t v7;
  char v8;

  v2 = 0;
  do
  {
    v3 = (unsigned __int16)v2;
    *(_BYTE *)(a2 + (unsigned __int16)v2) = ((unsigned __int16)a1 % 0xAu) | 0x30;
    v4 = ++v2;
    v5 = a1 > 9;
    a1 /= 0xAu;
  }
  while (v5);
  result = v4;
  *(_BYTE *)(a2 + v4) = 0;
  if (v4 >= 2u)
  {
    v7 = 0;
    do
    {
      v8 = *(_BYTE *)(a2 + v7);
      *(_BYTE *)(a2 + v7) = *(_BYTE *)(a2 + v3);
      *(_BYTE *)(a2 + v3) = v8;
      ++v7;
      --v3;
    }
    while (v7 < (unsigned __int16)v3);
  }
  return result;
}

uint64_t PDasparse(_BYTE *a1, uint64_t a2, _BYTE *a3, _BYTE *a4, uint64_t a5, _WORD *a6, unsigned int a7, uint64_t a8)
{
  unint64_t v8;
  unsigned __int16 i;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v23;
  unint64_t v24;
  unsigned int v25;
  BOOL v26;
  BOOL v27;

  *a3 = 0;
  *a4 = 0;
  if (*a1 != 35)
    return 8;
  v8 = 0;
  for (i = 1; ; ++i)
  {
    v10 = a1[i];
    v11 = v10 > 0x23 || ((1 << v10) & 0x800002001) == 0;
    v12 = !v11 || v10 == 10;
    if (v12 || v8 > 0x3F)
      break;
    *(_BYTE *)(a2 + v8++) = v10;
  }
  v13 = 0;
  *(_BYTE *)(a2 + v8) = 0;
  v14 = a1[i];
  v15 = v14 > 0xD;
  v16 = (1 << v14) & 0x2401;
  if (v15 || v16 == 0)
  {
    if (a1[(__int16)(i + 1)] == 49)
      *a4 = 1;
    if (a1[(__int16)(i + 2)] != 35)
      return 0;
    if (a7)
    {
      v19 = 0;
      v20 = 2 * a7;
      while (1)
      {
        v21 = a1[v19 + 4 + v8];
        if (v21 <= 0x23 && ((1 << v21) & 0x800002401) != 0)
          break;
        if (v20 == v19)
          goto LABEL_31;
        *(_BYTE *)(a8 + v19++) = v21;
      }
      LOWORD(v20) = v19;
LABEL_31:
      v13 = 0;
      *(_BYTE *)(a8 + (unsigned __int16)v20) = 0;
      if (a1[v19 + 4 + v8] != 35)
        return v13;
      v23 = v8 + v19 + 5;
    }
    else
    {
      v23 = i + 3;
    }
    v24 = 0;
    *a3 = 1;
    while (1)
    {
      v25 = a1[v23];
      v26 = v25 > 0x23 || ((1 << v25) & 0x800002001) == 0;
      v27 = !v26 || v25 == 10;
      if (v27 || v24 > 0x7FF)
        break;
      *(_BYTE *)(a5 + v24++) = v25;
      ++v23;
    }
    v13 = 0;
    *(_BYTE *)(a5 + v24) = 0;
    *a6 = v24;
  }
  return v13;
}

uint64_t PDword(unsigned __int16 *a1, unsigned int a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  void *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  __int16 v48;
  __int16 v49;
  int v50;
  char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned __int16 *v54;
  uint64_t v55;
  __int16 v56;
  unsigned __int16 v57;
  unsigned __int8 *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  _QWORD *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  char *v75;
  int v76;
  __int16 v77;
  int v78;
  unsigned __int16 v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  uint64_t v95;
  unint64_t v96;
  int v97;
  int v99;
  uint64_t v100;
  size_t v101;
  unsigned __int8 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned __int16 v107;
  unsigned __int16 v108;
  char v109;
  int v110;
  __int16 v111;
  char v112;
  __int16 v113;
  __int16 v114;
  unsigned __int8 v115;

  v115 = 0;
  v114 = 0;
  v113 = 0;
  v112 = 0;
  v111 = 0;
  v110 = 0;
  v109 = 0;
  v108 = 0;
  v107 = 0;
  if (!a1)
    return 8;
  *((_DWORD *)a1 + 28) = 0;
  a1[58] = 0;
  *((_DWORD *)a1 + 30) = 0;
  a1[68] = 0;
  *((_QWORD *)a1 + 18) = 0;
  v4 = pMCPbuff;
  if (!pMCPbuff)
    goto LABEL_98;
  v5 = a1[1];
  if (**(unsigned __int16 **)(pMCPbuff + 24) <= (unsigned __int16)(v5 - 1))
    goto LABEL_211;
  if (**(unsigned __int16 **)(*(_QWORD *)(pMCPbuff + 40) + 8 * v5) != (_DWORD)v5
    || *(_WORD *)(*(_QWORD *)(pMCPbuff + 32) + 2 * v5) != 9090)
  {
LABEL_98:
    result = 8;
    *((_DWORD *)a1 + 28) = 8;
    v56 = 5104;
    goto LABEL_212;
  }
  v6 = *(_WORD **)(pMCPbuff + 8);
  if (!*v6)
    goto LABEL_211;
  v7 = *a1;
  if (a3 == 5)
  {
    if (a2 != 8)
    {
      if (a2 == 10)
      {
        a1[25] = 0;
        v57 = v7;
        if ((_DWORD)v7)
          goto LABEL_104;
        LODWORD(v7) = (unsigned __int16)*v6;
        if (*v6)
        {
          v57 = 1;
          while (1)
          {
LABEL_104:
            if (a1[25] >= a1[24])
              return 0;
            v58 = *(unsigned __int8 **)(*(_QWORD *)v4 + 8 * v57);
            if (v58
              && a1[1] == *((unsigned __int16 *)v58 + 1080)
              && *(_WORD *)(*(_QWORD *)(v4 + 16) + 2 * v57) == 9090
              && v58[2062] != 1)
            {
              if (**(unsigned __int16 **)(v4 + 8) < v57 || *((unsigned __int16 *)v58 + 1081) != v57)
              {
LABEL_209:
                if (!a1[58] || *((int *)a1 + 28) <= 7)
                {
LABEL_211:
                  result = 8;
                  *((_DWORD *)a1 + 28) = 8;
                  v56 = 5105;
                  goto LABEL_212;
                }
                return 8;
              }
              v59 = *((unsigned int *)a1 + 9);
              if ((_DWORD)v59 == 0xFFFF
                || (v58[2069] ? (v60 = 1 << (v58[2069] - 1)) : (v60 = 0xFFFFFFFFLL), (v60 & v59) != 0))
              {
                if ((*((_BYTE *)a1 + 42) != 1 || *((_WORD *)v58 + 1047))
                  && (v58[2084] & (_BYTE)a1[20]) == 0
                  && (v58[2085] & *((_BYTE *)a1 + 41)) == 0
                  && (*v58 | 2) == 7)
                {
                  if (!v58[2063])
                  {
                    if (!a1[58] || *((int *)a1 + 28) <= 7)
                    {
                      result = 8;
                      *((_DWORD *)a1 + 28) = 8;
                      v56 = 5051;
                      goto LABEL_212;
                    }
                    return 8;
                  }
                  v61 = strcpy(*((char **)v58 + 267), *((const char **)a1 + 1));
                  v62 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v57);
                  v63 = *(_QWORD *)(v62 + 2192);
                  *(_WORD *)(v63 + 40) = 0;
                  *(_BYTE *)(v63 + 3194) = 1;
                  v64 = PDSFcorrec(v61, 3u, *(_QWORD *)(v62 + 2184), v63);
                  v4 = pMCPbuff;
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v57) + 2192) + 3194) = 0;
                  if (!v64 && (!a1[58] || *((int *)a1 + 28) <= 3))
                  {
                    *((_DWORD *)a1 + 28) = 4;
                    a1[58] = 5159;
                  }
                }
              }
            }
            result = 0;
            if (v7 < ++v57)
              return result;
          }
        }
      }
      return 0;
    }
    v70 = malloc_type_malloc(0xDuLL, 0x7632727BuLL);
    if (!v70)
      goto LABEL_202;
    v71 = v70;
    v72 = (_QWORD *)pMCPbuff;
    v73 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * *a1);
    if (v73[2062] != 1)
    {
      if (!a1[58] || *((int *)a1 + 28) <= 7)
      {
        *((_DWORD *)a1 + 28) = 8;
        a1[58] = 5114;
      }
      free(v71);
      return 8;
    }
    v74 = *((_QWORD *)v73 + 269);
    v75 = (char *)*((_QWORD *)v73 + 267);
    a1[25] = 0;
    if ((*v73 | 2) == 7)
    {
      v76 = PDgetword((uint64_t)v73);
      if (v76 == 11)
      {
        if (a1[58] && *((int *)a1 + 28) > 7)
          goto LABEL_235;
        *((_DWORD *)a1 + 28) = 8;
        v77 = 5112;
LABEL_226:
        a1[58] = v77;
        goto LABEL_235;
      }
      if (v76 == 8)
      {
        if (a1[58] && *((int *)a1 + 28) > 7)
          goto LABEL_235;
        *((_DWORD *)a1 + 28) = 8;
        v77 = 5113;
        goto LABEL_226;
      }
    }
    else if (a1[24])
    {
      v99 = 0;
      while (PDgetrdwrd(*(_QWORD *)(*v72 + 8 * *a1), v75, &v112, &v109, &v110, &v115, &v111, (uint64_t)v71) != 8)
      {
        v100 = SLLngToA(*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1) + 2069));
        PDhypstrip(v75, (_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8 * a1[25]) + 88), *((unsigned __int8 *)a1 + 16));
        v115 = strlen(v75);
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8 * a1[25]) + 71) = SLcap((uint64_t)v75, 0, v115, (_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 13) + 8 * a1[25])+ 80), v100);
        v101 = strlen(v75);
        if ((_WORD)v101)
        {
          v102 = 0;
          do
          {
            v103 = v75[v102];
            if ((*(_DWORD *)(v100 + 4 * v103) & 0x40000000) != 0)
              LOBYTE(v103) = v103 + 32;
            *(_BYTE *)(v74 + v102++) = v103;
            v101 = strlen(v75);
          }
          while ((unsigned __int16)v101 > v102);
        }
        *(_BYTE *)(v74 + v101) = 0;
        __strcpy_chk();
        v104 = *(_QWORD *)(*((_QWORD *)a1 + 13) + 8 * a1[25]);
        *(_BYTE *)(v104 + 70) = v112 == 1;
        *(_DWORD *)(v104 + 96) = v110;
        *(_WORD *)(v104 + 100) = v111;
        v72 = (_QWORD *)pMCPbuff;
        *(_WORD *)(v104 + 66) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1) + 2162);
        v105 = *(_QWORD *)v71;
        *(_DWORD *)(v104 + 110) = v71[2];
        *(_QWORD *)(v104 + 102) = v105;
        ++a1[25];
        if (++v99 >= a1[24])
          goto LABEL_234;
      }
      if (!a1[58] || *((int *)a1 + 28) <= 7)
      {
        *((_DWORD *)a1 + 28) = 8;
        a1[58] = 5113;
      }
      free(v71);
    }
LABEL_234:
    if (*((_DWORD *)a1 + 28) == 8)
      return 0;
LABEL_235:
    free(v71);
    return 0;
  }
  if (a3 == 2)
  {
    v65 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * v7);
    if (a2 == 10)
    {
      result = 0;
      v65[2063] = 0;
      return result;
    }
    if (v65[2062] == 1)
    {
      if (a2 == 8 && (*v65 | 2) != 7)
      {
        if (PDsavsort(*a1, 0) == 8)
          goto LABEL_202;
        v65 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * *a1);
      }
      result = 0;
      v65[2062] = 0;
      return result;
    }
LABEL_137:
    result = 8;
    *((_DWORD *)a1 + 28) = 8;
    v56 = 5114;
    goto LABEL_212;
  }
  if (a3 != 1)
  {
    result = 8;
    *((_DWORD *)a1 + 28) = 8;
    v56 = 1101;
    goto LABEL_212;
  }
  if (*a1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v7);
    if (v8)
    {
      if (*(_BYTE *)(v8 + 2062) == 1)
        goto LABEL_137;
    }
  }
  if (a2 > 0xB)
    goto LABEL_199;
  if (((1 << a2) & 0x470) != 0)
  {
    result = 0;
    if ((_DWORD)v7)
      v10 = v7;
    else
      v10 = (unsigned __int16)*v6;
    a1[25] = 0;
    if (v7 <= 1)
      v11 = 1;
    else
      v11 = v7;
    if (v11 > v10)
      return result;
    while (a1[25] < a1[24])
    {
      v12 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
      if (v12
        && a1[1] == *(unsigned __int16 *)(v12 + 2160)
        && *(_WORD *)(*(_QWORD *)(pMCPbuff + 16) + 2 * (unsigned __int16)v11) == 9090
        && *(_BYTE *)(v12 + 2062) != 1)
      {
        if (**(unsigned __int16 **)(pMCPbuff + 8) < (unsigned __int16)v11
          || *(unsigned __int16 *)(v12 + 2162) != (unsigned __int16)v11)
        {
          goto LABEL_209;
        }
        v13 = *((unsigned int *)a1 + 9);
        if ((_DWORD)v13 == 0xFFFF
          || (*(_BYTE *)(v12 + 2069) ? (v14 = 1 << (*(_BYTE *)(v12 + 2069) - 1)) : (v14 = 0xFFFFFFFFLL),
              (v14 & v13) != 0))
        {
          if ((*((_BYTE *)a1 + 42) != 1 || *(_WORD *)(v12 + 2094))
            && (!*((_BYTE *)a1 + 43) || *((unsigned __int8 *)a1 + 43) == *(unsigned __int8 *)(v12 + 2091))
            && (!a1[22] || a1[22] == *(unsigned __int16 *)(v12 + 2086))
            && (!a1[23] || *(unsigned __int16 *)(v12 + 2086) >= a1[23])
            && (*(_BYTE *)(v12 + 2084) & (_BYTE)a1[20]) == 0
            && (*(_BYTE *)(v12 + 2085) & *((_BYTE *)a1 + 41)) == 0)
          {
            v106 = a2;
            v15 = *(char **)(v12 + 2136);
            strcpy(v15, *((const char **)a1 + 1));
            v16 = *(_QWORD *)pMCPbuff;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 8 * (unsigned __int16)v11) + 2192) + 3184) = a1;
            v17 = *(_QWORD *)(v16 + 8 * (unsigned __int16)v11);
            v18 = *(_QWORD *)(v17 + 2192);
            *(_WORD *)(v18 + 3192) = v11;
            *(_WORD *)(v18 + 40) = 0;
            if (a1[28])
            {
              v19 = *(_OWORD **)(v18 + 104);
              v20 = (_OWORD *)*((_QWORD *)a1 + 8);
              v21 = v20[5];
              v23 = v20[2];
              v22 = v20[3];
              v19[4] = v20[4];
              v19[5] = v21;
              v19[2] = v23;
              v19[3] = v22;
              v24 = v20[1];
              *v19 = *v20;
              v19[1] = v24;
              if (a1[28])
              {
                v25 = 0;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2096) + v25) = *(_BYTE *)(*(_QWORD *)(*((_QWORD *)a1 + 8) + 8) + v25);
                  ++v25;
                }
                while (v25 < a1[28]);
              }
              v16 = *(_QWORD *)pMCPbuff;
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                                    + 104)
                        + 8) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2096);
              v17 = *(_QWORD *)(v16 + 8 * (unsigned __int16)v11);
            }
            v26 = *(_QWORD *)(v17 + 2184);
            v27 = *(unsigned __int16 *)(v26 + 104);
            v28 = a1[40];
            if (v27 != v28)
            {
              if (v27 < v28)
              {
                free(*(void **)(v26 + 112));
                v29 = malloc_type_calloc(a1[40], 1uLL, 0x100004077774924uLL);
                v16 = *(_QWORD *)pMCPbuff;
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184) + 112) = v29;
                if (!v29)
                  goto LABEL_202;
                v28 = a1[40];
                v17 = *(_QWORD *)(v16 + 8 * (unsigned __int16)v11);
                v26 = *(_QWORD *)(v17 + 2184);
              }
              *(_WORD *)(v26 + 104) = v28;
              *(_WORD *)(*(_QWORD *)(v17 + 2192) + 2162) = v28 >> 3;
              if (v28)
              {
                v30 = 0;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                   + 2184)
                                       + 112)
                           + v30) = *(_BYTE *)(*((_QWORD *)a1 + 9) + v30);
                  ++v30;
                }
                while (v30 < a1[40]);
                v16 = *(_QWORD *)pMCPbuff;
                v17 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
                if (*(_WORD *)(*(_QWORD *)(v17 + 2192) + 2162))
                {
                  LOWORD(v31) = 0;
                  v32 = 0;
                  do
                  {
                    v33 = 0;
                    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 2184) + 160) + 8 * v32) = *(_QWORD *)(*(_QWORD *)(v17 + 2184) + 112) + 8 * (v32 & 0x1F);
                    v31 = (__int16)v31;
                    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184);
                    *(_QWORD *)(*(_QWORD *)(v34 + 152) + 8 * v32) = *(_QWORD *)(v34 + 112)
                                                                                     + ((8 * (v32 & 0x1F)) | 4);
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                     + 2184)
                                         + 168)
                             + v32) = 0;
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                     + 2184)
                                         + 176)
                             + v32) = 0;
                    do
                    {
                      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184);
                      if (*(_BYTE *)(*(_QWORD *)(v35 + 112) + v31 + v33) == 32)
                        break;
                      ++*(_BYTE *)(*(_QWORD *)(v35 + 176) + v32);
                      ++v33;
                    }
                    while (v33 != 4);
                    v36 = 0;
                    while (1)
                    {
                      v16 = *(_QWORD *)pMCPbuff;
                      v17 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
                      v37 = *(_QWORD *)(v17 + 2184);
                      if (*(_BYTE *)(*(_QWORD *)(v37 + 112) + (__int16)v31 + 4 + v36) == 32)
                        break;
                      ++v36;
                      ++*(_BYTE *)(*(_QWORD *)(v37 + 168) + v32);
                      if (v36 == 4)
                      {
                        v16 = *(_QWORD *)pMCPbuff;
                        v17 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
                        break;
                      }
                    }
                    ++v32;
                    LOWORD(v31) = v31 + 8;
                  }
                  while (v32 < *(unsigned __int16 *)(*(_QWORD *)(v17 + 2192) + 2162));
                }
              }
            }
            v38 = *(_QWORD *)(v17 + 2184);
            LODWORD(v39) = *(unsigned __int16 *)(v38 + 120);
            v40 = a1[48];
            if ((_DWORD)v39 != v40)
            {
              if (v39 < v40)
              {
                free(*(void **)(v38 + 128));
                v41 = malloc_type_calloc(a1[48], 1uLL, 0x100004077774924uLL);
                v16 = *(_QWORD *)pMCPbuff;
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2184) + 128) = v41;
                if (!v41)
                  goto LABEL_202;
                v40 = a1[48];
                v17 = *(_QWORD *)(v16 + 8 * (unsigned __int16)v11);
                v38 = *(_QWORD *)(v17 + 2184);
              }
              *(_WORD *)(v38 + 120) = v40;
              if (v40)
              {
                v42 = 0;
                do
                {
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11)
                                                   + 2184)
                                       + 128)
                           + v42) = *(_BYTE *)(*((_QWORD *)a1 + 11) + v42);
                  ++v42;
                  v39 = a1[48];
                }
                while (v42 < v39);
                v16 = *(_QWORD *)pMCPbuff;
                v17 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
                v38 = *(_QWORD *)(v17 + 2184);
              }
              else
              {
                LODWORD(v39) = 0;
              }
            }
            *(_WORD *)(v38 + 68) = 64;
            *(_QWORD *)(*(_QWORD *)(v17 + 2192) + 3184) = a1;
            v43 = *(unsigned __int8 **)(v16 + 8 * (unsigned __int16)v11);
            v44 = *((_QWORD *)v43 + 274);
            *(_WORD *)(v44 + 3192) = v11;
            *(_WORD *)(v44 + 42) = a1[24];
            *(_WORD *)(v44 + 44) = 0;
            *(_WORD *)(v44 + 56) = 240;
            *(_BYTE *)(v44 + 88) = *((_BYTE *)a1 + 17);
            *(_DWORD *)(v44 + 92) = *((_DWORD *)a1 + 5);
            *(_DWORD *)(v44 + 96) = *((_DWORD *)a1 + 6);
            *(_WORD *)(v44 + 40) = 0;
            a2 = v106;
            switch(v106)
            {
              case 4u:
                *(_WORD *)v44 = 5;
                SLwldpro(v15, (_WORD *)(v44 + 3458), (_WORD *)(v44 + 3460), 64);
                v46 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
                if ((*v46 | 2) == 7)
                {
                  v47 = *((_QWORD *)v46 + 274);
                  *(_BYTE *)(v47 + 3194) = 1;
                  v48 = strlen(v15);
                  PDSFwild((unsigned __int8 *)v15, v48, *((_QWORD *)v46 + 273), v47);
                  goto LABEL_86;
                }
                v51 = (char *)*((_QWORD *)a1 + 1);
                v52 = strlen(v51);
                v53 = *((_QWORD *)v46 + 273);
                v54 = (unsigned __int16 *)*((_QWORD *)v46 + 274);
                goto LABEL_96;
              case 5u:
              case 0xAu:
                v43[2063] = 0;
                v45 = *((_QWORD *)v43 + 273);
                *(_WORD *)(v45 + 6) = 0;
                *(_BYTE *)(v45 + 136) = (330382100 * (unint64_t)v39) >> 32;
                *(_WORD *)v44 = 100;
                *(_BYTE *)(v44 + 2148) = -1;
                if ((*v43 | 2) == 7)
                {
                  if (v106 == 10)
                  {
                    v43[2063] = 1;
                    *(_BYTE *)(v44 + 3194) = 1;
                    v50 = PDSFcorrec(v15, 3u, v45, v44);
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                             + 3194) = 0;
                    a2 = 10;
                    if (v50)
                      break;
                  }
                  else
                  {
                    a2 = v106;
                    if (v106 != 5)
                      break;
                    *(_BYTE *)(v44 + 3194) = 1;
                    PDSFcorrec(v15, 2u, v45, v44);
                    a2 = 5;
                    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                             + 3194) = 0;
                  }
                  if (!a1[58])
                    goto LABEL_93;
                }
                else
                {
                  result = PDcorrec(*((char **)a1 + 1), 0, v45, v44);
                  if ((_DWORD)result == 8)
                    return result;
                  a2 = v106;
                  if (!a1[58])
                    goto LABEL_93;
                }
                if (*((int *)a1 + 28) > 3)
                  break;
LABEL_93:
                *((_DWORD *)a1 + 28) = 4;
                a1[58] = 5159;
                break;
              case 6u:
                *(_WORD *)v44 = 6;
                *(_WORD *)(v44 + 3456) = a1[49];
                if ((*v43 | 2) == 7)
                {
                  *(_BYTE *)(v44 + 3194) = 1;
                  v49 = strlen(*((const char **)a1 + 1));
                  PDSFanagrm(*((unsigned __int8 **)a1 + 1), v49, v44, *((_QWORD *)v43 + 273));
LABEL_86:
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11) + 2192)
                           + 3194) = 0;
                  a2 = v106;
                }
                else
                {
                  PDanagrm(*((const char **)a1 + 1), v44);
                  v51 = (char *)*((_QWORD *)a1 + 1);
                  v52 = strlen(v51);
                  v55 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * (unsigned __int16)v11);
                  v53 = *(_QWORD *)(v55 + 2184);
                  v54 = *(unsigned __int16 **)(v55 + 2192);
LABEL_96:
                  result = PDdecode((unsigned __int8 *)v51, v52, v53, v54);
                  a2 = v106;
                  if ((_DWORD)result == 8)
                    return result;
                }
                break;
              default:
                break;
            }
          }
        }
      }
      result = 0;
      LOWORD(v11) = v11 + 1;
      if (v10 < (unsigned __int16)v11)
        return result;
    }
    return 0;
  }
  if (((1 << a2) & 0x900) != 0)
  {
    v66 = *(_QWORD *)pMCPbuff;
    v67 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * v7);
    v67[2062] = 1;
    if ((*v67 | 2) == 7)
    {
      result = 0;
      *(_QWORD *)(*((_QWORD *)v67 + 274) + 3184) = a1;
      v68 = *(_QWORD *)(v66 + 8 * v7);
      v69 = *(_QWORD *)(v68 + 2192);
      *(_WORD *)(v69 + 3192) = v7;
      *(_WORD *)(v69 + 40) = 0;
      *(_DWORD *)(*(_QWORD *)(v68 + 2176) + 114) = 0;
      return result;
    }
    if (a2 != 11)
    {
      if (PDsavsort(v7, 1) == 8)
      {
LABEL_202:
        if (a1[58] && *((int *)a1 + 28) > 7)
          return 8;
        result = 8;
        *((_DWORD *)a1 + 28) = 8;
        v56 = 1030;
LABEL_212:
        a1[58] = v56;
        return result;
      }
      PDsort(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *a1));
      v67 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * *a1);
    }
    result = 0;
    *(_DWORD *)(*((_QWORD *)v67 + 271) + 18) = 0;
    return result;
  }
  if (a2 != 1)
  {
LABEL_199:
    result = 8;
    *((_DWORD *)a1 + 28) = 8;
    v56 = 1100;
    goto LABEL_212;
  }
  a1[25] = 0;
  if (!*v6)
    goto LABEL_206;
  v78 = 0;
  v79 = 1;
  while (a1[25] < a1[24])
  {
    if ((_DWORD)v7 && (_DWORD)v7 != v79)
      goto LABEL_191;
    v80 = *(_QWORD *)(*(_QWORD *)v4 + 8 * v79);
    if (!v80
      || a1[1] != *(unsigned __int16 *)(v80 + 2160)
      || *(_WORD *)(*(_QWORD *)(v4 + 16) + 2 * v79) != 9090
      || *(_BYTE *)(v80 + 2062) == 1)
    {
      goto LABEL_191;
    }
    if (*(unsigned __int16 *)(v80 + 2162) != v79)
      goto LABEL_209;
    if (*((_BYTE *)a1 + 42) == 1 && !*(_WORD *)(v80 + 2094))
      goto LABEL_191;
    v81 = *((unsigned int *)a1 + 9);
    if ((_DWORD)v81 != 0xFFFF)
    {
      v82 = *(unsigned __int8 *)(v80 + 2069);
      v83 = v82 == 0;
      v84 = 1 << (v82 - 1);
      if (v83)
        v84 = 0xFFFFFFFFLL;
      v85 = v84 & v81;
      v86 = !v83 || v81 >= 3;
      if (!v86 || v85 == 0)
        goto LABEL_191;
    }
    if (*((_BYTE *)a1 + 43) && *((unsigned __int8 *)a1 + 43) != *(unsigned __int8 *)(v80 + 2091)
      || a1[22] && a1[22] != *(unsigned __int16 *)(v80 + 2086)
      || a1[23] && *(unsigned __int16 *)(v80 + 2088) < a1[23]
      || (*(_BYTE *)(v80 + 2084) & (_BYTE)a1[20]) != 0
      || (*(_BYTE *)(v80 + 2085) & *((_BYTE *)a1 + 41)) != 0)
    {
      goto LABEL_191;
    }
    v88 = *(char **)(v80 + 2136);
    strcpy(v88, *((const char **)a1 + 1));
    v89 = *(_QWORD *)pMCPbuff;
    v90 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v79);
    *(_WORD *)(*(_QWORD *)(v90 + 2184) + 6) = 0;
    *(_QWORD *)(*(_QWORD *)(v90 + 2192) + 3184) = a1;
    v91 = *(unsigned __int8 **)(v89 + 8 * v79);
    v92 = *((_QWORD *)v91 + 274);
    *(_WORD *)(v92 + 3192) = v79;
    *(_WORD *)(v92 + 40) = 0;
    v91[2118] = 1;
    if ((*v91 | 2) == 7)
    {
      v93 = strlen(v88);
      v94 = v93;
      if (*((_BYTE *)a1 + 42) == 1)
      {
        SLfun((uint64_t)v88, 0, v93 - 1, &v108, &v107);
        v91 = *(unsigned __int8 **)(*(_QWORD *)pMCPbuff + 8 * v79);
        v95 = *((_QWORD *)v91 + 272);
        v96 = (*(unsigned __int16 *)(v95 + 112) - 1) & v107;
        v107 &= *(_WORD *)(v95 + 112) - 1;
        if (((*(unsigned __int8 *)(*(_QWORD *)(v95 + 104) + (v96 >> 3)) >> (v96 & 7)) & 1) == 0)
          goto LABEL_191;
      }
      v97 = PDget((unsigned __int8 *)v88, v94, (uint64_t)v91);
    }
    else
    {
      v97 = PDsearch((uint64_t)v91, v88, &v114, &v113, 1, (uint64_t)a1, 0);
    }
    if (v97 != 11 && v97 != 5112)
    {
      if (v97 == 5113)
        break;
      v78 = 1;
    }
LABEL_191:
    ++v79;
    v4 = pMCPbuff;
    if (**(unsigned __int16 **)(pMCPbuff + 8) < v79)
      break;
  }
  if (v78)
    return 0;
LABEL_206:
  if (a1[58] && *((int *)a1 + 28) > 7)
    return 5112;
  *((_DWORD *)a1 + 28) = 8;
  result = 5112;
  a1[58] = 5112;
  return result;
}

uint64_t PDcheckDID(unsigned int a1)
{
  if (**(unsigned __int16 **)(pMCPbuff + 8) >= a1
    && *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2162) == a1)
  {
    return 8 * (*(_WORD *)(*(_QWORD *)(pMCPbuff + 16) + 2 * a1) != 9090);
  }
  else
  {
    return 8;
  }
}

size_t PDanagrm(const char *a1, uint64_t a2)
{
  size_t result;
  int v5;
  uint64_t v6;

  result = strlen(a1);
  *(_OWORD *)(a2 + 3199) = 0u;
  *(_OWORD *)(a2 + 3215) = 0u;
  *(_OWORD *)(a2 + 3231) = 0u;
  *(_OWORD *)(a2 + 3247) = 0u;
  *(_OWORD *)(a2 + 3263) = 0u;
  *(_OWORD *)(a2 + 3279) = 0u;
  *(_OWORD *)(a2 + 3295) = 0u;
  *(_OWORD *)(a2 + 3311) = 0u;
  *(_OWORD *)(a2 + 3327) = 0u;
  *(_OWORD *)(a2 + 3343) = 0u;
  *(_OWORD *)(a2 + 3359) = 0u;
  *(_OWORD *)(a2 + 3375) = 0u;
  *(_OWORD *)(a2 + 3391) = 0u;
  *(_OWORD *)(a2 + 3407) = 0u;
  *(_OWORD *)(a2 + 3423) = 0u;
  *(_OWORD *)(a2 + 3439) = 0u;
  if ((int)((_DWORD)result << 16) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = a2 + a1[(__int16)v5];
      ++*(_BYTE *)(v6 + 3199);
      ++v5;
    }
    while ((__int16)result > (__int16)v5);
  }
  return result;
}

uint64_t PDalt(unsigned __int16 *a1)
{
  uint64_t v2;
  __int16 v3;
  uint64_t result;

  if (!a1)
    return 8;
  *((_DWORD *)a1 + 6) = 0;
  a1[14] = 0;
  *((_DWORD *)a1 + 8) = 0;
  a1[24] = 0;
  *((_QWORD *)a1 + 7) = 0;
  if (!pMCPbuff
    || (v2 = a1[1], **(unsigned __int16 **)(*(_QWORD *)(pMCPbuff + 40) + 8 * v2) != (_DWORD)v2)
    || *(_WORD *)(*(_QWORD *)(pMCPbuff + 32) + 2 * v2) != 9090)
  {
    v3 = 5104;
    goto LABEL_10;
  }
  if (PDgetalt(*((void **)a1 + 1), a1[8], *((_DWORD *)a1 + 1), *a1) != 8)
    return 0;
  if (!a1[14] || *((int *)a1 + 6) <= 7)
  {
    v3 = 5112;
LABEL_10:
    result = 8;
    *((_DWORD *)a1 + 6) = 8;
    a1[14] = v3;
    return result;
  }
  return 8;
}

uint64_t PDgetalt(void *a1, int a2, int a3, unsigned int a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  int v9;
  uint64_t result;
  unsigned int v11;

  v6 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a4);
  if (*(_BYTE *)(v6 + 782) == 5)
  {
    v7 = (unsigned int *)(v6 + 776);
    a3 += *(_DWORD *)(v6 + 768) + *(_DWORD *)(*(_QWORD *)(v6 + 2176) + 40);
    if (a1)
      goto LABEL_3;
    return 8;
  }
  v7 = (unsigned int *)(*(_QWORD *)(v6 + 2168) + 328);
  if (!a1)
    return 8;
LABEL_3:
  if (a3 == -1)
    return 0;
  v8 = *v7;
  if (SLSeek(*v7, a3, 0) != 8)
  {
    v11 = 0;
    v9 = SLFRead(v8, a2, a1, &v11);
    result = 0;
    if (v9 != 8)
      return result;
    SLClose(v8);
  }
  return 1010;
}

uint64_t PDdefragalt()
{
  return 0;
}

uint64_t make_alt_entry(char *a1, _DWORD *a2, _WORD *a3, unsigned int a4)
{
  unsigned int v7;
  uint64_t result;
  __int16 v9;
  uint64_t v10;

  v7 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a4) + 2168) + 328);
  if (SLSeek(v7, 0, 2u) == 8)
    return 1010;
  v10 = 0;
  if (SLFpos(v7, &v10) == 8)
    return 1010;
  v9 = strlen(a1);
  *a3 = v9;
  if (SLFWrite(v7, v9, a1, (unsigned int *)&v10 + 1) == 8)
  {
    SLClose(v7);
    return 1011;
  }
  else
  {
    result = 0;
    *a2 = v10;
  }
  return result;
}

_WORD *alt_conv(_WORD *result, _BYTE *a2, _BYTE *a3)
{
  int v3;
  int v4;
  unsigned int v5;

  v3 = *a2;
  if (v3 == 255)
  {
    if (*a3 == 255)
      return result;
    v4 = (unsigned __int16)*result;
    if (!*result)
      goto LABEL_9;
  }
  else
  {
    v4 = (unsigned __int16)*result;
    if (!*result)
    {
      if (!*a2)
      {
LABEL_10:
        *result = v3 + *a3;
        return result;
      }
LABEL_9:
      LOWORD(v3) = 255 * v3;
      *result = v3;
      goto LABEL_10;
    }
  }
  v5 = ((__int16)((32897 * (__int16)v4) >> 16) >> 7)
     + (((v4 + ((-32639 * (__int16)v4) >> 16)) & 0x8000) >> 15);
  *a2 = v5;
  *a3 = *(_BYTE *)result + v5;
  return result;
}

uint64_t PDchknegs()
{
  unsigned __int16 v0;

  if (!**(_WORD **)(pMCPbuff + 8))
    return 0;
  v0 = 1;
  while (*(_WORD *)(*(_QWORD *)(pMCPbuff + 16) + 2 * v0) != 9090
       || !*(_WORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v0) + 2094))
  {
    if (**(unsigned __int16 **)(pMCPbuff + 8) < ++v0)
      return 0;
  }
  return 1;
}

uint64_t PDFileExists(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  unsigned int v4;

  v4 = 0;
  v2 = SLOpen(a1, a2, (int *)&v4, 0);
  result = 0;
  if (v2 != 8)
  {
    SLClose(v4);
    return 1;
  }
  return result;
}

uint64_t PDcomp(uint64_t a1)
{
  const void *v2;
  uint64_t result;
  __int16 v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  int v9;
  int v10;
  int v11;
  void *v12;
  unsigned int v13;
  void *v14;
  int v15;
  void *v16;
  void *v17;
  void *v18;
  _OWORD v19[9];
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36[511];
  char v37[257];
  char v38[257];
  _BYTE v39[24];
  _BYTE v40[55];
  char v41[257];
  char v42[257];
  _BYTE __dst[511];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = (const void *)(a1 + 1809);
  memcpy(__dst, (const void *)(a1 + 1809), sizeof(__dst));
  v34 = -2;
  v35 = -2;
  v32 = -2;
  v33 = -2;
  v31 = -2;
  v26 = 0;
  v25 = 0;
  *(_DWORD *)(a1 + 2584) = 0;
  *(_WORD *)(a1 + 2588) = 0;
  *(_DWORD *)(a1 + 2592) = 0;
  *(_WORD *)(a1 + 2608) = 0;
  *(_QWORD *)(a1 + 2616) = 0;
  if (*(unsigned __int8 *)(a1 + 2320) >= 7u)
  {
    result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    v4 = 5116;
LABEL_19:
    *(_WORD *)(a1 + 2588) = v4;
    return result;
  }
  v30 = 0;
  v29 = 0;
  v27 = 0;
  v28 = 0;
  memset(v19, 0, sizeof(v19));
  v20 = 0;
  memcpy(v36, v2, sizeof(v36));
  if (PDFileExists((uint64_t)v36, a1 + 1553))
    goto LABEL_4;
  v5 = SLLngToA(*(unsigned __int8 *)(a1 + 2577));
  v36[0] = 0;
  if (SLtmpnam(__dst, v36) == 8)
    goto LABEL_12;
  if (SLOpen((uint64_t)__dst, (uint64_t)v36, &v33, 0x602u) == 8)
    goto LABEL_16;
  v42[0] = 0;
  if (SLtmpnam(__dst, v42) == 8)
  {
LABEL_12:
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      v4 = 1019;
      goto LABEL_19;
    }
    return 8;
  }
  if (SLOpen((uint64_t)__dst, (uint64_t)v42, &v32, 0x602u) == 8)
    goto LABEL_16;
  v41[0] = 0;
  if (SLtmpnam(__dst, v41) == 8)
    goto LABEL_12;
  if (SLOpen((uint64_t)__dst, (uint64_t)v41, &v31, 0x602u) == 8)
  {
LABEL_16:
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      v4 = 1012;
      goto LABEL_19;
    }
    return 8;
  }
  v24 = 0;
  v38[0] = 0;
  if (*(_BYTE *)(a1 + 776) != 7)
  {
    v35 = -2;
    v24 = 0;
    goto LABEL_27;
  }
  if (SLtmpnam(__dst, v38) == 8)
    goto LABEL_12;
  if (SLOpen((uint64_t)__dst, (uint64_t)v38, &v35, 0x602u) == 8)
    goto LABEL_16;
  result = DecompOldSD(a1, (uint64_t)v19, v35, 1, &v24, (uint64_t)&v29);
  if ((_DWORD)result != 8)
  {
LABEL_27:
    v23 = 0;
    v37[0] = 0;
    if (*(_BYTE *)(a1 + 1552) == 7)
    {
      if (SLtmpnam(__dst, v37) == 8)
        goto LABEL_12;
      if (SLOpen((uint64_t)__dst, (uint64_t)v37, &v34, 0x602u) == 8)
        goto LABEL_16;
      result = DecompOldSD(a1, (uint64_t)v19, v34, 2, &v23, (uint64_t)&v27);
      if ((_DWORD)result == 8)
        return result;
    }
    else
    {
      v34 = -2;
      v23 = 0;
    }
    v6 = *(unsigned __int8 *)(a1 + 776) - 3;
    if (v6 <= 4 && ((0x17u >> v6) & 1) != 0)
      v7 = 0x404030201uLL >> (8 * v6);
    else
      LODWORD(v7) = 0;
    v8 = 0;
    v9 = 8;
    switch(*(_BYTE *)(a1 + 1552))
    {
      case 0:
        goto LABEL_43;
      case 3:
        goto LABEL_41;
      case 4:
        v9 = 16;
        goto LABEL_41;
      case 5:
        v9 = 24;
        goto LABEL_41;
      case 7:
        v9 = 32;
LABEL_41:
        v8 = v9;
        break;
      default:
        break;
    }
    LODWORD(v7) = v8 | v7;
LABEL_43:
    v10 = 0;
    v11 = 64;
    switch(*(_BYTE *)(a1 + 2320))
    {
      case 0:
        goto LABEL_49;
      case 3:
        goto LABEL_47;
      case 4:
        v11 = 128;
        goto LABEL_47;
      case 5:
        v11 = 192;
        goto LABEL_47;
      case 7:
        v11 = 0;
LABEL_47:
        v10 = v11;
        break;
      default:
        break;
    }
    LODWORD(v7) = v10 | v7;
LABEL_49:
    v21 = 0;
    v22 = 0;
    if ((v7 & 7) != 4
      && PDOpenFile(a1, v7 & 7, 1, a1 + 256, a1, &v24, (uint64_t)&v29, &v35, (uint64_t *)&v22) == 8)
    {
      v12 = v22;
      if (!v22)
        goto LABEL_16;
      goto LABEL_65;
    }
    v13 = (v7 >> 3) & 7;
    if (((v7 >> 3) & 3 | 4) != 4
      && PDOpenFile(a1, (v7 >> 3) & 7, 2, a1 + 1033, a1 + 777, &v23, (uint64_t)&v27, &v34, (uint64_t *)&v21) == 8)
    {
      v12 = v21;
      if (!v21)
        goto LABEL_16;
      goto LABEL_65;
    }
    if ((v7 & 7) == 3)
    {
      v14 = v22;
      if (PDDecompress(a1, (uint64_t)v22, (uint64_t)v40, (uint64_t)v39, v32, v5, (uint64_t)&v29) == 8)
      {
        v12 = v14;
LABEL_65:
        free(v12);
        goto LABEL_16;
      }
    }
    else if (CreateFormattedRD(a1, (unsigned int *)&v35, v32, v24, (uint64_t)&v29) == 8)
    {
      goto LABEL_76;
    }
    v15 = v7 >> 6;
    if (v13)
    {
      if (v13 == 3)
      {
        v16 = v21;
        if (PDDecompress(a1, (uint64_t)v21, (uint64_t)v40, (uint64_t)v39, v31, v5, (uint64_t)&v27) == 8)
        {
          v12 = v16;
          goto LABEL_65;
        }
      }
      else if (CreateFormattedRD(a1, (unsigned int *)&v34, v31, v23, (uint64_t)&v27) == 8)
      {
        goto LABEL_76;
      }
      if (MergeAndCompare(a1, v32, v31, v33, (uint64_t)&v25) == 8)
        goto LABEL_72;
      if ((v15 - 1) > 1)
      {
        SLClose(v33);
        v33 = -2;
        if (SLOpen((uint64_t)__dst, (uint64_t)v36, &v33, 2u) == 8)
          return 1012;
        if (PDCompress(a1, 0, v5, (unsigned int *)&v33, &v25))
        {
LABEL_72:
          if (v22)
            free(v22);
          v18 = v21;
          if (v21)
LABEL_75:
            free(v18);
LABEL_76:
          if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
          {
            result = 8;
            *(_DWORD *)(a1 + 2584) = 8;
            v4 = 5119;
            goto LABEL_19;
          }
          return 8;
        }
      }
      else if (PDSwitchToOut((uint64_t)v36, v7 >> 6, v33, a1) == 8)
      {
        if (v22)
          free(v22);
        v17 = v21;
        if (!v21)
        {
LABEL_4:
          if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
          {
            result = 8;
            *(_DWORD *)(a1 + 2584) = 8;
            v4 = 5120;
            goto LABEL_19;
          }
          return 8;
        }
LABEL_88:
        free(v17);
        goto LABEL_4;
      }
    }
    else if ((v15 - 1) > 1)
    {
      if (PDCompress(a1, 0, v5, (unsigned int *)&v32, &v29))
      {
        v18 = v22;
        if (!v22)
          goto LABEL_76;
        goto LABEL_75;
      }
    }
    else if (PDSwitchToOut((uint64_t)v42, v7 >> 6, v32, a1) == 8)
    {
      v17 = v22;
      if (!v22)
        goto LABEL_4;
      goto LABEL_88;
    }
    if ((v33 & 0x80000000) == 0)
      SLClose(v33);
    if (v36[0])
      SLremove();
    if ((v32 & 0x80000000) == 0)
      SLClose(v32);
    if (v42[0])
      SLremove();
    if ((v31 & 0x80000000) == 0)
      SLClose(v31);
    if (v41[0])
      SLremove();
    if ((v35 & 0x80000000) == 0)
      SLClose(v35);
    if (v38[0])
      SLremove();
    if (v37[0])
      SLremove();
    if (v22)
      free(v22);
    result = (uint64_t)v21;
    if (v21)
    {
      free(v21);
      return 0;
    }
  }
  return result;
}

uint64_t DecompOldSD(uint64_t a1, uint64_t a2, int a3, int a4, _BYTE *a5, uint64_t a6)
{
  uint64_t started;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  char v33;
  unsigned int v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = a2;
  v33 = 1;
  started = StartDb(a1, a4);
  if (started)
  {
    v11 = started;
    v34 = 0;
    if (StartWord(&v41, started) == 8)
    {
      v12 = *(_OWORD *)(v11 + 2088);
      v13 = *(_OWORD *)(v11 + 2104);
      *(_QWORD *)(a1 + 2616) = *(_QWORD *)(v11 + 2120);
      *(_OWORD *)(a1 + 2584) = v12;
      *(_OWORD *)(a1 + 2600) = v13;
      v14 = (void *)v11;
LABEL_4:
      free(v14);
      return 8;
    }
    v36 = 0;
    v16 = v41;
    *(_WORD *)(v41 + 48) = 1;
    LOBYTE(v36) = *(_BYTE *)(v11 + 2078);
    v17 = *(_BYTE *)(v11 + 2079);
    if (!v17)
      v17 = 61;
    *(_WORD *)((char *)&v36 + 1) = v17;
    v37 = 0;
    v40 = a3;
    v38 = 0;
    v39 = 0;
    if (PDWriteOldRDHead((unsigned __int8 *)&v36, a5) == 8)
    {
      free((void *)v11);
      PDFullCleanSDNeg((void **)v16);
      if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2584) = 8;
        v18 = 5119;
LABEL_30:
        *(_WORD *)(a1 + 2588) = v18;
        return result;
      }
    }
    else
    {
      *(_BYTE *)(a6 + 1) = *(_BYTE *)(v11 + 2078);
      v19 = BYTE1(v36);
      *(_BYTE *)a6 = BYTE1(v36);
      *(_WORD *)(a6 + 10) = 0;
      *(_DWORD *)(a6 + 2) = 0;
      *(_DWORD *)(a6 + 5) = 0;
      v20 = (char *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
      if (v20)
      {
        v21 = v20;
        while (1)
        {
          if (GetOldSDWord(a1, v16, &v33) == 8)
            goto LABEL_26;
          if (!v33)
            break;
          v22 = **(_QWORD **)(v16 + 104);
          v23 = *(unsigned __int8 *)(v22 + 71);
          v24 = (__int16)strlen((const char *)v22);
          if (*(_BYTE *)(v22 + 71))
          {
            v25 = SLLngToA(*(unsigned __int8 *)(v22 + 72));
            SLrecap((unsigned __int8 *)v22, v24, v23, v22 + 80, v23, v25);
          }
          SLchcnv((char *)v22, v24, (unsigned __int8 *)v22, 0, *(unsigned __int8 *)(v22 + 72));
          if (*(_DWORD *)(v22 + 88) || *(_DWORD *)(v22 + 92))
            PDhypins((char *)v22, (uint64_t *)(v22 + 88), v19);
          *(_WORD *)v21 = 35;
          __strcat_chk();
          __strcat_chk();
          v26 = strlen(v21);
          if (SLFWrite(a3, v26, v21, &v34) == 8)
          {
            if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
            {
              *(_DWORD *)(a1 + 2584) = 8;
              *(_WORD *)(a1 + 2588) = 1011;
            }
LABEL_26:
            free((void *)v11);
            PDFullCleanSDNeg((void **)v16);
            v14 = v21;
            goto LABEL_4;
          }
        }
        v27 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(v11 + 2074));
        v28 = *(_DWORD *)(*(_QWORD *)(v27 + 2176) + 40);
        v35 = v28;
        if (v28)
        {
          v29 = *(_DWORD *)(*(_QWORD *)(v27 + 2184) + 64);
          SLSeek(v29, v28, 0);
          while (PDGets((unsigned __int8 *)v21, 2177, &v35, v29) != 8)
          {
            v30 = strlen(v21);
            if (SLFWrite(a3, v30, v21, &v34) == 8)
            {
              free(v21);
              free((void *)v11);
              PDFullCleanSDNeg((void **)v16);
              if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
              {
                result = 8;
                *(_DWORD *)(a1 + 2584) = 8;
                v18 = 1011;
                goto LABEL_30;
              }
              return 8;
            }
          }
        }
        free(v21);
        if (PDdb(v11, 3) != 8)
        {
          free((void *)v11);
          PDFullCleanSDNeg((void **)v16);
          return 0;
        }
        v31 = *(_OWORD *)(v11 + 2088);
        v32 = *(_OWORD *)(v11 + 2104);
        *(_QWORD *)(a1 + 2616) = *(_QWORD *)(v11 + 2120);
        *(_OWORD *)(a1 + 2584) = v31;
        *(_OWORD *)(a1 + 2600) = v32;
        free((void *)v11);
        PDFullCleanSDNeg((void **)v16);
      }
      else
      {
        free((void *)v11);
        PDFullCleanSDNeg((void **)v16);
        if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
        {
          result = 8;
          *(_DWORD *)(a1 + 2584) = 8;
          v18 = 1030;
          goto LABEL_30;
        }
      }
    }
  }
  return 8;
}

uint64_t SetTypes(uint64_t result, _BYTE *a2)
{
  char v2;

  *a2 = 0;
  v2 = result - 3;
  if ((result - 3) <= 4 && ((0x17u >> v2) & 1) != 0)
    *a2 = 0x401030201uLL >> (8 * v2);
  return result;
}

uint64_t PDOpenFile(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, _BYTE *a6, uint64_t a7, int *a8, uint64_t *a9)
{
  uint64_t v15;
  int v16;
  uint64_t result;
  __int16 v18;
  uint64_t started;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  int v24;

  if ((a2 - 1) > 1)
  {
    started = StartDb(a1, a3);
    *a9 = started;
    if (started)
    {
      v20 = started;
      result = 0;
      v21 = *(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * *(unsigned __int16 *)(v20 + 2074));
      *(_WORD *)(a7 + 10) = *(_WORD *)(v21 + 2094);
      *(_WORD *)a7 = *(_WORD *)(v21 + 2068);
      *(_BYTE *)(a7 + 8) = *(_BYTE *)(v21 + 2092);
      *(_DWORD *)(a7 + 2) = *(_DWORD *)(v21 + 2084);
      *(_WORD *)(a7 + 6) = *(_WORD *)(v21 + 2090);
      return result;
    }
    return 8;
  }
  if (SLOpen(a4, a5, a8, 0) == 8)
    goto LABEL_8;
  v15 = 1544;
  if (a3 == 1)
    v15 = 768;
  v16 = *(_DWORD *)(a1 + v15);
  if (v16)
  {
    if (SLSeek(*a8, v16, 0) == 8)
    {
LABEL_8:
      if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
      {
        result = 8;
        *(_DWORD *)(a1 + 2584) = 8;
        v18 = 1012;
LABEL_10:
        *(_WORD *)(a1 + 2588) = v18;
        return result;
      }
      return 8;
    }
  }
  if (a2 != 2)
  {
    result = 0;
    *(_BYTE *)(a7 + 1) = *(_BYTE *)(a1 + 2577);
    *(_BYTE *)a7 = 61;
    *(_WORD *)(a7 + 10) = 0;
    *(_DWORD *)(a7 + 2) = 0;
    *(_DWORD *)(a7 + 5) = 0;
    return result;
  }
  v22 = malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  v24 = 0;
  if (PDGets((unsigned __int8 *)v22, 2177, &v24, *a8) == 8)
  {
    free(v22);
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      v18 = 1010;
      goto LABEL_10;
    }
    return 8;
  }
  *a6 = v24;
  v23 = PDreadHead((char *)v22, a7);
  free(v22);
  if (v23 == 8)
  {
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      v18 = 5115;
      goto LABEL_10;
    }
    return 8;
  }
  return 0;
}

uint64_t CreateFormattedRD(uint64_t a1, unsigned int *a2, unsigned int a3, int a4, uint64_t a5)
{
  char *v10;
  char *v11;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;
  void *v15;
  uint64_t result;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  _BYTE *v21;
  int v22;
  __int16 v23;
  int v24;
  unsigned __int16 v25;
  int v26;
  int v27;
  size_t v28;
  int v29;
  int v30;
  int v31;
  char v32;
  void *v33;
  void *v34;
  unsigned __int16 v35;
  unsigned __int8 v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42[2];
  int v43;
  char v44[257];
  char v45[257];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v38 = -2;
  v39 = -2;
  v37 = -2;
  v36 = 0;
  v35 = 0;
  v10 = (char *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  if (!v10)
    return 8;
  v11 = v10;
  v12 = malloc_type_malloc(0x881uLL, 0x100004077774924uLL);
  if (!v12)
    return 8;
  v13 = v12;
  v14 = malloc_type_malloc(0x881uLL, 0x100004077774924uLL);
  if (!v14)
    return 8;
  v15 = v14;
  *(_QWORD *)v42 = 0;
  v44[0] = 0;
  result = SLtmpnam((_BYTE *)(a1 + 1809), v44);
  if ((_DWORD)result == 8)
    return result;
  result = SLOpen(a1 + 1809, (uint64_t)v44, &v38, 0x602u);
  if ((_DWORD)result == 8)
    return result;
  v43 = 0;
  SLSeek(*a2, 0, 0);
  v17 = *a2;
  v18 = v38;
  v19 = SLLngToA(0);
  v20 = v17;
  v21 = (_BYTE *)(a1 + 1809);
  v22 = PDExtSort(v20, a4, 0, 0, v18, (_BYTE *)(a1 + 1809), 1, v19, *(_BYTE *)(a1 + 2577), 0x92u);
  if (v22)
  {
    v23 = v22;
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
      return 8;
    result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
LABEL_10:
    *(_WORD *)(a1 + 2588) = v23;
    return result;
  }
  SLClose(*a2);
  SLClose(v38);
  *a2 = -2;
  v38 = -2;
  result = SLOpen((uint64_t)v21, (uint64_t)v44, &v38, 2u);
  if ((_DWORD)result == 8)
    return result;
  v45[0] = 0;
  result = SLtmpnam(v21, v45);
  if ((_DWORD)result == 8)
    return result;
  result = SLOpen((uint64_t)v21, (uint64_t)v45, &v39, 0x602u);
  if ((_DWORD)result == 8)
    return result;
  if (*(_BYTE *)(a1 + 2321) && SLOpen((uint64_t)v21, a1 + 2321, &v37, 0x602u) == 8)
  {
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
      return 8;
    result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    v23 = 1012;
    goto LABEL_10;
  }
  SLSeek(v39, 0, 0);
  v24 = 0;
  v25 = 0;
  while (PDGets((unsigned __int8 *)v11, 2177, &v43, v38) != 8)
  {
    result = BuildForm(v11, v13, *(unsigned __int8 *)(a5 + 8), &v35, &v36);
    if ((_DWORD)result == 8)
      return result;
    v26 = v36;
    if (v36)
      v27 = v24 + 1;
    else
      v27 = v24;
    if (*(_BYTE *)(a1 + 2321) && v25)
    {
      if (v25 <= v35)
        v28 = v35;
      else
        v28 = v25;
      if (memcmp(v13, v15, v28))
      {
        __strcpy_chk();
        goto LABEL_36;
      }
      if (v26)
        v24 = v27 - 1;
      v29 = strlen(v13);
      v30 = SLFWrite(v37, v29, v13, (unsigned int *)v42);
      result = 8;
      if (v30 == 8)
        return result;
    }
    else
    {
LABEL_36:
      v31 = strlen(v13);
      result = SLFWrite(v39, v31, v13, (unsigned int *)v42);
      if ((_DWORD)result == 8)
        return result;
      v25 = v35;
      v24 = v27;
    }
  }
  v40 = 0;
  v41 = 0;
  WORD2(v40) = v24;
  if ((v37 & 0x80000000) == 0)
  {
    SLClose(v37);
    v37 = -2;
  }
  SLClose(v38);
  v38 = -2;
  SLremove();
  free(v11);
  free(v13);
  free(v15);
  SLSeek(a3, 0, 0);
  LOBYTE(v40) = *(_BYTE *)(a1 + 2577);
  *(_BYTE *)(a5 + 1) = v40;
  v32 = *(_BYTE *)(a1 + 2578);
  if (!v32)
    v32 = 61;
  BYTE1(v40) = v32;
  *(_BYTE *)a5 = v32;
  BYTE2(v40) = *(_BYTE *)(a5 + 8);
  BYTE6(v40) = *(_BYTE *)(a5 + 7);
  LODWORD(v41) = *(_DWORD *)(a5 + 2);
  HIDWORD(v41) = a3;
  HIBYTE(v40) = *(_BYTE *)(a5 + 6);
  result = PDWriteRDHead((unsigned __int8 *)&v40);
  if ((_DWORD)result != 8)
  {
    v33 = malloc_type_malloc(0x400uLL, 0x100004077774924uLL);
    if (v33)
    {
      v34 = v33;
      SLSeek(v39, 0, 0);
      while (!SLFRead(v39, 1024, v34, (unsigned int *)&v42[1]))
      {
        if (v42[1] >= 1)
        {
          result = SLFWrite(a3, v42[1], v34, (unsigned int *)v42);
          if ((_DWORD)result == 8)
            return result;
          if (v42[0] != v42[1])
            return 8;
          if (v42[0] == 1024)
            continue;
        }
        SLSeek(a3, 0, 0);
        SLClose(v39);
        v39 = -2;
        SLremove();
        free(v34);
        return 0;
      }
    }
    return 8;
  }
  return result;
}

uint64_t PDDecompress(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  void **v14;
  void **v15;
  void *v16;
  char v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  void **v21;
  __int16 v22;
  void *v23;
  void **v24;
  __int128 v25;
  __int128 v26;
  unsigned __int16 *v27;
  int v28;
  __int16 v29;
  char v30;
  char v31;
  int v32;
  unsigned int v33;
  char v34;

  v27 = *(unsigned __int16 **)a3;
  v14 = (void **)malloc_type_calloc(1uLL, 0x40uLL, 0x1090040D37A3AC8uLL);
  if (!v14 || (v15 = v14, v16 = malloc_type_calloc(0x801uLL, 1uLL, 0x100004077774924uLL), (v15[1] = v16) == 0))
  {
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      result = 8;
      *(_DWORD *)(a1 + 2584) = 8;
      *(_WORD *)(a1 + 2588) = 1030;
      return result;
    }
    return 8;
  }
  v28 = 0;
  v29 = *(_WORD *)(a7 + 10);
  LOBYTE(v28) = *(_BYTE *)(a1 + 2577);
  v17 = *(_BYTE *)(a1 + 2578);
  if (!v17)
    v17 = 61;
  BYTE1(v28) = v17;
  BYTE2(v28) = *(_BYTE *)(a7 + 8);
  v30 = *(_BYTE *)(a7 + 7);
  v32 = *(_DWORD *)(a7 + 2);
  v33 = a5;
  v31 = *(_BYTE *)(a7 + 6);
  if (PDWriteRDHead((unsigned __int8 *)&v28))
    return 8;
  result = StartWord(&v27, a2);
  if ((_DWORD)result == 8)
  {
    v19 = *(_OWORD *)(a2 + 2088);
    v20 = *(_OWORD *)(a2 + 2104);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a2 + 2120);
    *(_OWORD *)(a1 + 2584) = v19;
    *(_OWORD *)(a1 + 2600) = v20;
    return result;
  }
  v21 = (void **)v27;
  v27[24] = 1;
  v34 = 1;
  *(_QWORD *)a3 = v21;
  v22 = *(unsigned __int8 *)(a7 + 8);
  *(_WORD *)(a4 + 20) = v22;
  *(_WORD *)(a3 + 20) = v22;
  *(_BYTE *)(a3 + 22) = BYTE1(v28);
  v23 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)(a3 + 8) = v23;
  if (!v23)
  {
    if (!*(_WORD *)(a1 + 2588) || *(int *)(a1 + 2584) <= 7)
    {
      *(_DWORD *)(a1 + 2584) = 8;
      *(_WORD *)(a1 + 2588) = 1030;
    }
    PDFullCleanSDNeg(v21);
    free(v15[1]);
    v24 = v15;
LABEL_24:
    free(v24);
    return 8;
  }
  while (1)
  {
    if (GetBuildWord(a1, (unsigned __int16 **)a3, &v34, a5, a6) == 8)
    {
      PDFullCleanSDNeg(v21);
      return 8;
    }
    if (!v34)
      break;
    if (AltAndWrite(a1, a3, (uint64_t)v15, a5) == 8)
      goto LABEL_23;
  }
  if (PDdb(a2, 3) == 8)
  {
    v25 = *(_OWORD *)(a2 + 2088);
    v26 = *(_OWORD *)(a2 + 2104);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a2 + 2120);
    *(_OWORD *)(a1 + 2584) = v25;
    *(_OWORD *)(a1 + 2600) = v26;
LABEL_23:
    PDFullCleanSDNeg(v21);
    v24 = *(void ***)(a3 + 8);
    goto LABEL_24;
  }
  free(v15[1]);
  free(v15);
  free(*(void **)(a3 + 8));
  PDFullCleanSDNeg(v21);
  return 0;
}

uint64_t PDSwitchToOut(uint64_t a1, int a2, unsigned int a3, uint64_t a4)
{
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  char *v10;
  char *v11;
  __int16 v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  int v17;
  __int16 v18;
  __int16 v19;
  unsigned int v20;
  __int16 v22;
  int v23;
  int v24;
  uint64_t v25;

  v25 = 0;
  v23 = -2;
  v24 = 0;
  if (SLOpen(a4 + 1809, a4 + 1553, &v23, 0x602u) == 8)
  {
    if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
    {
      result = 8;
      *(_DWORD *)(a4 + 2584) = 8;
      *(_WORD *)(a4 + 2588) = 1030;
      return result;
    }
    return 8;
  }
  if (a2 == 1)
  {
    v8 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0xE9B0C981uLL);
    if (v8)
    {
      v9 = v8;
      v10 = (char *)malloc_type_malloc(0x881uLL, 0xDD7CC1F4uLL);
      if (v10)
      {
        v11 = v10;
        SLSeek(a3, 0, 0);
        if (PDGets(v9, 64, (int *)&v25 + 1, a3) == 8)
        {
          if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
          {
            *(_DWORD *)(a4 + 2584) = 8;
            v12 = 1010;
LABEL_43:
            *(_WORD *)(a4 + 2588) = v12;
          }
        }
        else
        {
          do
          {
            if (PDGets(v9, 64, (int *)&v25 + 1, a3) == 8)
            {
              free(v9);
              free(v11);
              goto LABEL_50;
            }
            v16 = *v9;
            v17 = (__int16)strlen((const char *)v9);
            if (v17 <= (v16 == 35))
            {
              v22 = 0;
            }
            else
            {
              v18 = 0;
              v19 = v16 == 35;
              while (1)
              {
                v20 = v9[v19];
                if (v20 <= 0x23 && ((1 << v20) & 0x800002401) != 0)
                  break;
                v22 = v18 + 1;
                v11[v18] = v20;
                ++v19;
                ++v18;
                if (v17 <= v19)
                  goto LABEL_39;
              }
              v22 = v18;
            }
LABEL_39:
            v11[v22] = 13;
            *(_WORD *)&v11[(__int16)(v22 + 1)] = 10;
          }
          while (SLFWrite(v23, (__int16)(v22 + 2), v11, (unsigned int *)&v25) != 8);
          if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
          {
            *(_DWORD *)(a4 + 2584) = 8;
            v12 = 1011;
            goto LABEL_43;
          }
        }
        free(v9);
        v15 = v11;
      }
      else
      {
        if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
        {
          *(_DWORD *)(a4 + 2584) = 8;
          *(_WORD *)(a4 + 2588) = 1030;
        }
        v15 = v9;
      }
      free(v15);
      goto LABEL_46;
    }
LABEL_20:
    if (!*(_WORD *)(a4 + 2588) || *(int *)(a4 + 2584) <= 7)
    {
      *(_DWORD *)(a4 + 2584) = 8;
      *(_WORD *)(a4 + 2588) = 1030;
    }
LABEL_46:
    SLClose(v23);
    return 8;
  }
  v13 = malloc_type_malloc(0x400uLL, 0x15A50B7CuLL);
  if (!v13)
    goto LABEL_20;
  v14 = v13;
  SLSeek(a3, 0, 0);
  do
  {
    if (!SLFRead(a3, 1024, v14, (unsigned int *)&v24))
    {
      if (v24 < 1)
        break;
      if (SLFWrite(v23, v24, v14, (unsigned int *)&v25) != 8 && (_DWORD)v25 == v24)
        continue;
    }
    free(v14);
    return 8;
  }
  while ((_DWORD)v25 == 1024);
  free(v14);
  SLClose(a3);
  SLremove();
LABEL_50:
  SLClose(v23);
  return 0;
}

uint64_t PDCompress(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, _BYTE *a5)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int *v13;
  __int16 v14;
  uint64_t result;
  _BYTE *v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t n;
  int v29;
  char v30;
  char v31;
  int v32;
  unsigned int v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  int v36;
  unsigned __int16 v37;
  unsigned __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BYTE *v43;
  int v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  BOOL v50;
  unsigned __int16 v51;
  int v52;
  int v53;
  char v54;
  unsigned __int16 v55;
  unsigned __int16 v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned __int16 v63;
  int v64;
  unsigned __int16 v65;
  __int16 v66;
  _BYTE **v67;
  _BYTE **v68;
  uint64_t i;
  _BYTE *v70;
  uint64_t j;
  uint64_t k;
  _DWORD *v73;
  _DWORD *v74;
  _BYTE *v75;
  _BYTE *v76;
  unsigned int v78;
  int v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  unsigned __int16 v86;
  unsigned __int16 v87;
  unsigned __int16 v88;
  unsigned __int8 *v89;
  uint64_t v90;
  int v91;
  uint64_t m;
  unsigned __int16 *v93;
  unsigned __int16 *v94;
  FILE **v95;
  int v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  unsigned __int8 v101;
  unsigned __int8 *v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  char v108;
  unsigned __int16 v109;
  _OWORD *v110;
  char v111;
  unsigned __int16 v112;
  uint64_t v113;
  char *v114;
  int v115;
  void *v116;
  void *v117;
  char *v118;
  _BYTE *v119;
  _BYTE *v120;
  char *v121;
  unsigned __int8 *v122;
  unsigned __int8 *__src;
  void *__srca;
  __int16 v125;
  int v126;
  _WORD v127[3];
  char v128;
  char v129[4];
  char __buf[4];
  __int16 v131;
  int v132;
  int v133;
  int v134;
  uint64_t v135;
  _QWORD v136[32];
  char v137[257];
  _BYTE v138[257];
  _BYTE v139[257];
  _BYTE v140[257];
  _BYTE v141[257];
  _BYTE v142[257];
  _BYTE v143[257];
  char v144[257];
  char v145[257];
  char __s[257];
  uint64_t __dst;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x1E0C80C00];
  v125 = 0;
  __strcpy_chk();
  v9 = (__int16)strlen(__s);
  do
  {
    v10 = v9 - 1;
    if (v9 < 1)
      break;
    v11 = __s[v9--];
  }
  while (v11 != 46);
  __strcpy_chk();
  if ((_WORD)v10 == 0xFFFF)
    __strcat_chk();
  else
    __s[v10 + 1] = 0;
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  __strcpy_chk();
  __strcat_chk();
  v12 = *a4;
  v13 = (int *)(a1 + 2584);
  v135 = 0;
  v136[0] = 0;
  v133 = -2;
  v134 = -2;
  v132 = -2;
  v131 = 0;
  __dst = 0;
  v127[0] = 0;
  v126 = 0;
  __buf[0] = 0;
  if (SLOpen(a1 + 1809, (uint64_t)v138, &v133, 0x602u) == 8)
    goto LABEL_14;
  v137[0] = 0;
  if (SLtmpnam((_BYTE *)(a1 + 1809), v137) == 8)
    goto LABEL_9;
  if (SLOpen(a1 + 1809, (uint64_t)v137, &v134, 0x602u) == 8
    || SLOpen(a1 + 1809, (uint64_t)v143, &v132, 0x602u) == 8)
  {
LABEL_14:
    if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
    {
      *(_DWORD *)(a1 + 2584) = 8;
      v14 = 1012;
      goto LABEL_17;
    }
    return 8;
  }
  v16 = malloc_type_malloc(0xC1uLL, 0xBB55773AuLL);
  if (v16)
  {
    v17 = v16;
    v18 = (unsigned __int8 *)malloc_type_calloc(0x19uLL, 1uLL, 0x100004077774924uLL);
    if (v18)
    {
      __src = v18;
      v19 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0xC3F17DF3uLL);
      if (v19)
      {
        v20 = v19;
        v21 = malloc_type_malloc(0xC1uLL, 0xB5E4973EuLL);
        if (v21)
        {
          v119 = v21;
          v22 = (char *)malloc_type_malloc(0x81uLL, 0xD954544BuLL);
          if (v22)
          {
            v121 = v22;
            v23 = (char *)malloc_type_malloc(0x41uLL, 0x9A9700A8uLL);
            if (v23)
            {
              v118 = v23;
              v24 = malloc_type_malloc(0xC1uLL, 0xF2F19824uLL);
              if (v24)
              {
                v116 = v24;
                v25 = (char *)malloc_type_malloc(0x801uLL, 0xC2CC0429uLL);
                if (v25)
                {
                  v114 = v25;
                  *v119 = 0;
                  if (PDGets(v20, 64, &v126, v12) == 8)
                  {
LABEL_29:
                    if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                    {
                      *(_DWORD *)(a1 + 2584) = 8;
                      v14 = 1010;
                      goto LABEL_17;
                    }
                    return 8;
                  }
                  v106 = 0;
                  v101 = 0;
                  v105 = 0;
                  v103 = 0;
                  v102 = v20;
                  while (1)
                  {
                    do
                    {
                      if (PDGets(v20, 2177, &v126, v12) == 8)
                      {
                        free(__src);
                        free(v20);
                        free(v121);
                        free(v118);
                        free(v114);
                        free(v119);
                        free(v116);
                        SLClose(v132);
                        SLClose(v134);
                        free(v17);
                        SLClose(v133);
                        if (SLClose(*a4) == 8)
                        {
                          if (*(_WORD *)(a1 + 2588) && *v13 > 7)
                            return 8;
                          result = 8;
                          *(_DWORD *)(a1 + 2584) = 8;
                          v66 = 1013;
LABEL_101:
                          *(_WORD *)(a1 + 2588) = v66;
                          return result;
                        }
                        *a4 = -2;
                        v67 = (_BYTE **)malloc_type_calloc(0x100uLL, 8uLL, 0x10040436913F5uLL);
                        if (!v67)
                          return 1030;
                        v68 = v67;
                        for (i = 0; i != 256; ++i)
                        {
                          v70 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
                          v68[i] = v70;
                          if (!v70)
                            return 1030;
                        }
                        __srca = malloc_type_calloc(0x3E8uLL, 1uLL, 0x100004077774924uLL);
                        if (!__srca)
                          return 1030;
                        for (j = 0; j != 200; ++j)
                        {
                          for (k = 0; k != 20; ++k)
                            v68[j][k] = 0;
                        }
                        v73 = malloc_type_calloc(0x100uLL, 4uLL, 0x100004052888210uLL);
                        if (!v73)
                        {
LABEL_157:
                          if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                          {
                            result = 8;
                            *(_DWORD *)(a1 + 2584) = 8;
                            v66 = 1030;
                            goto LABEL_101;
                          }
                          return 8;
                        }
                        v74 = v73;
                        memset_pattern16(v73, &unk_1DE2EFC50, 0x400uLL);
                        *(_DWORD *)v129 = -2;
                        *(_DWORD *)&v127[1] = -2;
                        v122 = (unsigned __int8 *)malloc_type_malloc(0xC1uLL, 0xBEA374E5uLL);
                        if (!v122)
                          goto LABEL_144;
                        v120 = malloc_type_malloc(0xC1uLL, 0xD502B8CEuLL);
                        if (!v120)
                          goto LABEL_144;
                        v117 = malloc_type_malloc(0x41uLL, 0x8AD6E95EuLL);
                        if (!v117)
                          goto LABEL_144;
                        *(_DWORD *)__buf = 0;
                        if (SLOpen(a1 + 1809, (uint64_t)v137, (int *)v129, 0) == 8)
                          goto LABEL_14;
                        LOBYTE(v136[0]) = 0;
                        if (SLtmpnam((_BYTE *)(a1 + 1809), (char *)v136) != 8)
                        {
                          if (SLOpen(a1 + 1809, (uint64_t)v136, (int *)&v127[1], 0x602u) == 8)
                            goto LABEL_14;
                          BYTE4(__dst) = 0;
                          v75 = malloc_type_malloc(0x81uLL, 0x966AD880uLL);
                          if (!v75)
                            goto LABEL_144;
                          v76 = v75;
                          v110 = malloc_type_malloc(0x41uLL, 0x3799EAA5uLL);
                          if (!v110)
                            goto LABEL_144;
                          while (!SLFRead(*(unsigned int *)v129, 4, &__dst, (unsigned int *)__buf)
                               && *(_DWORD *)__buf == 4)
                          {
                            v78 = __dst;
                            v79 = BYTE1(__dst);
                            v80 = BYTE3(__dst) | BYTE2(__dst);
                            *v110 = 0u;
                            v110[1] = 0u;
                            v110[2] = 0u;
                            v110[3] = 0u;
                            *((_BYTE *)v110 + 64) = 0;
                            v115 = v80;
                            if (SLFRead(*(unsigned int *)v129, v80, v110, (unsigned int *)__buf))
                              break;
                            v113 = v79 | v78;
                            if (SLFRead(*(unsigned int *)v129, v79 | v78, v122, (unsigned int *)__buf))
                              break;
                            v81 = *v122;
                            *v120 = v81;
                            ++v74[v81];
                            v76[128] = 0;
                            *((_OWORD *)v76 + 6) = 0u;
                            *((_OWORD *)v76 + 7) = 0u;
                            *((_OWORD *)v76 + 4) = 0u;
                            *((_OWORD *)v76 + 5) = 0u;
                            *((_OWORD *)v76 + 2) = 0u;
                            *((_OWORD *)v76 + 3) = 0u;
                            *(_OWORD *)v76 = 0u;
                            *((_OWORD *)v76 + 1) = 0u;
                            v82 = v122[1];
                            if (v82 >= 0xB)
                            {
                              v83 = 1;
                              v84 = 1;
                              do
                              {
                                v76[v83 - 1] = v82;
                                v83 = (unsigned __int16)++v84;
                                v82 = v122[(unsigned __int16)v84];
                              }
                              while (v82 > 0xA);
                            }
                            **v68 = 0;
                            if ((unsigned __int16)strlen(v76))
                            {
                              v85 = 0;
                              v86 = 2;
                              do
                              {
                                v120[v85 + 1] = v76[v85];
                                ++v74[v76[v85++]];
                                ++v86;
                              }
                              while (v85 < (unsigned __int16)strlen(v76));
                              v87 = v85 + 1;
                            }
                            else
                            {
                              LOBYTE(v85) = 0;
                              v86 = 2;
                              v87 = 1;
                            }
                            v120[v87] = v82;
                            ++v74[v82];
                            v88 = v87 + 1;
                            if (v113 > v86)
                            {
                              v89 = &v122[v86];
                              v90 = v113 - v86;
                              do
                              {
                                v91 = *v89++;
                                v120[v88] = v91;
                                ++v74[v91];
                                ++v88;
                                --v90;
                              }
                              while (v90);
                            }
                            v148 = 0;
                            LOBYTE(__dst) = 0;
                            *(_WORD *)((char *)&__dst + 1) = v88;
                            BYTE3(__dst) = v115;
                            WORD2(__dst) = 0;
                            BYTE6(__dst) = 0;
                            HIBYTE(__dst) = v85;
                            if (SLFWrite(*(int *)&v127[1], 8, &__dst, (unsigned int *)__buf) == 8
                              || SLFWrite(*(int *)&v127[1], v115, v110, (unsigned int *)__buf) == 8
                              || SLFWrite(*(int *)&v127[1], v88, v120, (unsigned int *)__buf) == 8)
                            {
                              goto LABEL_141;
                            }
                          }
                          free(v117);
                          free(v76);
                          free(v110);
                          SLClose(*(unsigned int *)v129);
                          SLClose(*(unsigned int *)&v127[1]);
                          free(v122);
                          free(v120);
                          SLremove();
                          for (m = 0; m != 256; ++m)
                            free(v68[m]);
                          free(v68);
                          free(__srca);
                          v93 = (unsigned __int16 *)malloc_type_calloc(0x202uLL, 8uLL, 0x100004000313F17uLL);
                          if (v93)
                          {
                            v94 = v93;
                            scale_counts(v74, (uint64_t)v93);
                            free(v74);
                            v95 = (FILE **)OpenOutputBitFile();
                            output_counts(v95, v94);
                            CloseOutputBitFile((uint64_t)v95);
                            v96 = build_tree(v94);
                            v97 = malloc_type_calloc(0x101uLL, 4uLL, 0x100004052888210uLL);
                            if (v97)
                            {
                              v98 = v97;
                              convert_tree_to_code((uint64_t)v94, (uint64_t)v97, 0, 0, v96);
                              free(v94);
                              result = Huffman_Comp(a1 + 1809, (uint64_t)v136, (uint64_t)v142, (uint64_t)v140, v98, *(unsigned __int16 *)(a1 + 2580), &v125, a1 + 2584);
                              if ((_DWORD)result == 8)
                                return result;
                              SLremove();
                              PDngrams(a1 + 1809, (uint64_t)v143, a1 + 1809, (uint64_t)v141);
                              v99 = malloc_type_malloc(0x400uLL, 0xE10EE3DCuLL);
                              if (v99)
                              {
                                v100 = v99;
                                bzero(v99, 0x400uLL);
                                result = Add_Tables(v101, a1 + 1809, (uint64_t)v139, (uint64_t)v140, (uint64_t)v141, (uint64_t)v142, v144, (uint64_t)v145, (uint64_t)v138, v100, a1 + 2584);
                                if ((_DWORD)result != 8)
                                {
                                  result = Update_Header(v106, *(_BYTE *)(a1 + 2577), v125, *(_WORD *)(a1 + 2580), a1 + 1809, (uint64_t)v139, (uint64_t)v100, a1 + 2584, a5);
                                  if ((_DWORD)result != 8)
                                  {
                                    free(v100);
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    SLremove();
                                    return 0;
                                  }
                                }
                                return result;
                              }
                            }
                          }
                          goto LABEL_157;
                        }
LABEL_9:
                        if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                        {
                          *(_DWORD *)(a1 + 2584) = 8;
                          v14 = 1019;
                          goto LABEL_17;
                        }
                        return 8;
                      }
                    }
                    while (*v20 == 35 && v20[1] == 35);
                    v26 = strlen((const char *)v20);
                    SLchcnv((char *)v20, v26, v20, 1, *(unsigned __int8 *)(a1 + 2577));
                    v131 = 0;
                    *v114 = 0;
                    PDasparse(v20, (uint64_t)v121, (_BYTE *)&v131 + 1, &v131, (uint64_t)v114, v127, a5[8], (uint64_t)__src);
                    v27 = 0;
                    for (n = 0; n != 12; ++n)
                    {
                      v29 = __src[v27];
                      if ((v29 - 48) >= 0xA)
                        v30 = -112;
                      else
                        v30 = 0;
                      v31 = v30 + 16 * v29;
                      v32 = __src[v27 + 1];
                      v33 = v32 - 48;
                      v34 = v32 - 48 + v31;
                      v35 = v32 + v31 - 55;
                      if (v33 < 0xA)
                        v35 = v34;
                      __src[n] = v35;
                      v27 += 2;
                    }
                    v36 = v106;
                    if ((_BYTE)v131)
                      v36 = v106 + 1;
                    v111 = 16 * ((_BYTE)v131 != 0);
                    v106 = v36;
                    if (HIBYTE(v131))
                    {
                      v127[0] = strlen(v114);
                      if (SLFpos(v133, &v135) == 8)
                        goto LABEL_29;
                      if (SLFWrite(v133, v127[0], v114, (unsigned int *)&v135 + 1) == 8)
                      {
LABEL_141:
                        if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
                        {
                          *(_DWORD *)(a1 + 2584) = 8;
                          v14 = 1011;
                          goto LABEL_17;
                        }
                        return 8;
                      }
                      v111 |= 8u;
                      v101 = 1;
                    }
                    v37 = strlen(v121);
                    v107 = PDhypstrip(v121, &__dst, 61);
                    v104 = SLcap((uint64_t)v121, 0, (__int16)(v37 - 1), v136, a3);
                    v38 = strlen(v121);
                    v39 = 0;
                    if (((v38 + 1) & 0xFFFE) != 0)
                      v40 = (unsigned __int16)(v38 + 1);
                    else
                      v40 = 1;
                    do
                    {
                      v41 = v121[v39];
                      if ((*(_DWORD *)(a3 + 4 * v41) & 0x40000000) != 0)
                        LOBYTE(v41) = v41 + 32;
                      v118[v39++] = v41;
                    }
                    while (v40 != v39);
                    v42 = v111 | 4;
                    if (v37 == v107)
                      v42 = v111;
                    if (a5[8])
                      v42 |= 0x20u;
                    v108 = v42;
                    if (v118[v38 - 1] == 10)
                    {
                      v118[(unsigned __int16)(v38 - 1)] = 0;
                      v112 = v38 - 1;
                    }
                    else
                    {
                      v112 = v38;
                    }
                    __strcpy_chk();
                    v43 = v119;
                    switch(v104)
                    {
                      case 0:
                        v44 = 0;
                        goto LABEL_68;
                      case 1:
                        v44 = 64;
                        goto LABEL_68;
                      case 2:
                        v44 = 128;
                        goto LABEL_68;
                      case 3:
                        v108 |= 2u;
                        v44 = 192;
LABEL_68:
                        v45 = v121;
                        break;
                      default:
                        v43 = v119;
                        v45 = v121;
                        v44 = v103;
                        break;
                    }
                    v46 = 0;
                    do
                    {
                      v47 = v46;
                      v48 = v43[(__int16)v46];
                      v49 = v45[(__int16)v46++];
                      if (v48)
                        v50 = v48 == v49;
                      else
                        v50 = 0;
                    }
                    while (v50);
                    v103 = (v105 - v47) | v44;
                    *v17 = v103;
                    __strcpy_chk();
                    __strcpy_chk();
                    v51 = strlen((const char *)v116);
                    *((_BYTE *)v116 + v51) = 0;
                    if (v51)
                    {
                      v52 = 0;
                      v53 = 1;
                      v54 = v108;
                      do
                      {
                        v55 = v53 + 1;
                        v17[(unsigned __int16)v53++] = *((_BYTE *)v116 + v52++);
                      }
                      while (v51 > v52);
                    }
                    else
                    {
                      v55 = 1;
                      v54 = v108;
                    }
                    v17[v55] = 0;
                    v56 = v55 + 2;
                    v17[(unsigned __int16)(v55 + 1)] = v54;
                    if ((v54 & 2) != 0)
                    {
                      v59 = v136[0];
                      v17[(unsigned __int16)(v55 + 2)] = BYTE3(v136[0]);
                      v17[(unsigned __int16)(v55 + 3)] = BYTE2(v59);
                      v17[(unsigned __int16)(v55 + 4)] = BYTE1(v59);
                      v17[(unsigned __int16)(v55 + 5)] = v59;
                      v60 = HIDWORD(v136[0]);
                      v17[(unsigned __int16)(v55 + 6)] = HIBYTE(v136[0]);
                      v17[(unsigned __int16)(v55 + 7)] = BYTE2(v60);
                      v17[(unsigned __int16)(v55 + 8)] = BYTE1(v60);
                      v56 = v55 + 10;
                      v17[(unsigned __int16)(v55 + 9)] = v60;
                      if ((v54 & 4) == 0)
                      {
LABEL_81:
                        if ((v54 & 8) != 0)
                          goto LABEL_95;
                        goto LABEL_82;
                      }
                    }
                    else if ((v54 & 4) == 0)
                    {
                      goto LABEL_81;
                    }
                    v61 = __dst;
                    v62 = HIDWORD(__dst);
                    v17[v56] = BYTE3(__dst);
                    v17[(unsigned __int16)(v56 + 1)] = BYTE2(v61);
                    v17[(unsigned __int16)(v56 + 2)] = BYTE1(v61);
                    v17[(unsigned __int16)(v56 + 3)] = v61;
                    v17[(unsigned __int16)(v56 + 4)] = HIBYTE(v62);
                    v17[(unsigned __int16)(v56 + 5)] = BYTE2(v62);
                    v63 = v56 + 7;
                    v17[(unsigned __int16)(v56 + 6)] = BYTE1(v62);
                    v56 += 8;
                    v17[v63] = v62;
                    if ((v54 & 8) != 0)
                    {
LABEL_95:
                      v64 = v135;
                      v17[v56] = BYTE3(v135);
                      v17[(unsigned __int16)(v56 + 1)] = BYTE2(v64);
                      v17[(unsigned __int16)(v56 + 2)] = BYTE1(v64);
                      v17[(unsigned __int16)(v56 + 3)] = v64;
                      LOBYTE(v64) = v127[0];
                      v65 = v56 + 5;
                      v17[(unsigned __int16)(v56 + 4)] = HIBYTE(v127[0]);
                      v56 += 6;
                      v17[v65] = v64;
                      if ((v54 & 0x20) == 0)
                        goto LABEL_84;
LABEL_83:
                      memcpy(&v17[v56], __src, a5[8]);
                      v56 += a5[8];
                      goto LABEL_84;
                    }
LABEL_82:
                    if ((v54 & 0x20) != 0)
                      goto LABEL_83;
LABEL_84:
                    v109 = v56;
                    if (v112 >= 4u)
                      v57 = 4;
                    else
                      v57 = v112;
                    __strncpy_chk();
                    v129[v57] = 0;
                    strlen(v129);
                    __strncat_chk();
                    if (!SLstrcmp(v129, (unsigned __int8 *)__buf)
                      || (__strcpy_chk(),
                          v58 = strlen(__buf),
                          SLFWrite(v132, v58, __buf, (unsigned int *)&v135 + 1) != 8))
                    {
                      *v121 = 0;
                      __strcpy_chk();
                      v119[strlen(v119)] = 0;
                      v105 = strlen(v119);
                      v128 = 0;
                      LOBYTE(v127[1]) = 0;
                      *(_WORD *)((char *)&v127[1] + 1) = v109;
                      HIBYTE(v127[2]) = v112;
                      if (SLFWrite(v134, 4, &v127[1], (unsigned int *)&v135 + 1) != 8)
                      {
                        v20 = v102;
                        if (SLFWrite(v134, v112, v118, (unsigned int *)&v135 + 1) != 8
                          && SLFWrite(v134, v109, v17, (unsigned int *)&v135 + 1) != 8)
                        {
                          continue;
                        }
                      }
                    }
                    goto LABEL_141;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_144:
  if (!*(_WORD *)(a1 + 2588) || *v13 <= 7)
  {
    *(_DWORD *)(a1 + 2584) = 8;
    v14 = 1030;
LABEL_17:
    *(_WORD *)(a1 + 2588) = v14;
  }
  return 8;
}

uint64_t MergeAndCompare(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5)
{
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  __int16 v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  _BYTE *v21;
  char *v22;
  BOOL v23;
  BOOL v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  int v28;
  int v29;
  char *v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  _BYTE *v34;
  int v35;
  char *v36;
  int v37;
  size_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  int v45;
  int v46;
  BOOL v47;
  int v48;
  char v49;
  void *v50;
  void *v51;
  void *v52;
  int v53;
  unsigned __int16 v54;
  int v55;
  _BYTE *__s2;
  _BYTE *__s1;
  int v58;
  int v59;
  int v60;
  unsigned __int8 *__s;
  unsigned __int8 *v62;
  int v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  __int16 v71;
  int v72;
  int v73;
  char v74[257];
  _BYTE v75[128];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v71 = 0;
  v10 = (_BYTE *)(a1 + 1809);
  v70 = 0;
  v68 = 0;
  v69 = 0;
  v64 = -2;
  v65 = -2;
  v63 = 0;
  v11 = SLLngToA(*(unsigned __int8 *)(a1 + 2577));
  v74[0] = 0;
  result = SLtmpnam(v10, v74);
  if ((_DWORD)result == 8)
    return result;
  result = SLOpen((uint64_t)v10, (uint64_t)v74, &v65, 0x602u);
  if ((_DWORD)result == 8)
    return result;
  if (*(_BYTE *)(a1 + 2321) && SLOpen((uint64_t)v10, a1 + 2321, &v64, 2u) == 8)
  {
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
      return 8;
    result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    v13 = 1012;
LABEL_8:
    *(_WORD *)(a1 + 2588) = v13;
    return result;
  }
  v14 = malloc_type_calloc(0x19uLL, 1uLL, 0x100004077774924uLL);
  if (!v14)
    return 8;
  v15 = v14;
  v16 = malloc_type_malloc(0x801uLL, 0xA262FB22uLL);
  if (!v16)
    return 8;
  v17 = v16;
  v72 = 0;
  v73 = 0;
  v18 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  if (!v18)
    return 8;
  v62 = v18;
  v19 = (unsigned __int8 *)malloc_type_malloc(0x882uLL, 0x100004077774924uLL);
  if (!v19)
    return 8;
  __s = v19;
  v20 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v20)
    return 8;
  __s1 = v20;
  v21 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v21)
    return 8;
  __s2 = v21;
  SLSeek(a2, 0, 0);
  if (PDGets(v62, 2177, &v73, a2) == 8)
    goto LABEL_20;
  if (PDreadHead((char *)v62, (uint64_t)&v68) == 8)
    return 5115;
  *v62 = 0;
  SLSeek(a3, 0, 0);
  if (PDGets(__s, 2177, &v72, a3) == 8)
  {
LABEL_20:
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
      return 8;
    result = 8;
    *(_DWORD *)(a1 + 2584) = 8;
    v13 = 1010;
    goto LABEL_8;
  }
  v52 = v17;
  v55 = 0;
  *__s = 0;
  v22 = (char *)__s;
  v23 = 1;
  v24 = 1;
  v25 = 1;
  v60 = 1;
  v26 = v62;
  do
  {
    if (v24)
    {
      if (!*v26)
      {
        v58 = v25;
        v27 = v26;
        if (PDGets(v26, 2177, &v73, a2) == 8)
        {
          *v27 = 0;
          v22 = (char *)__s;
          if (*__s)
          {
            v28 = strlen((const char *)__s);
            result = SLFWrite(v65, v28, __s, (unsigned int *)&v69 + 1);
            if ((_DWORD)result == 8)
              return result;
            v60 = 0;
            *__s = 0;
            v26 = v62;
            v22 = (char *)__s;
          }
          else
          {
            v26 = v27;
            v60 = 0;
          }
        }
        else
        {
          PDasparse(v27, (uint64_t)v75, (_BYTE *)&v71 + 1, &v71, (uint64_t)v52, &v70, 0xCu, (uint64_t)v15);
          v29 = v55;
          if ((_BYTE)v71)
            v29 = v55 + 1;
          v55 = v29;
          v26 = v27;
          v22 = (char *)__s;
        }
        v25 = v58;
      }
    }
    else
    {
      v60 = 0;
    }
    if (!v23)
      goto LABEL_41;
    v59 = v25;
    if (!*v22)
    {
      v30 = v22;
      if (PDGets((unsigned __int8 *)v22, 2177, &v72, a3) == 8)
      {
        *v30 = 0;
        v26 = v62;
        v22 = v30;
        if (*v62)
        {
          v31 = strlen((const char *)v62);
          result = SLFWrite(v65, v31, v62, (unsigned int *)&v69 + 1);
          if ((_DWORD)result == 8)
            return result;
          *v62 = 0;
          v26 = v62;
          v22 = (char *)__s;
        }
LABEL_41:
        if (v60)
        {
          v32 = v26;
          v33 = strlen((const char *)v26);
          result = SLFWrite(v65, v33, v32, (unsigned int *)&v69 + 1);
          if ((_DWORD)result == 8)
            return result;
          v25 = 0;
          v34 = v32;
          v26 = v32;
          v22 = (char *)__s;
          goto LABEL_71;
        }
        v59 = 0;
LABEL_68:
        v46 = strlen(v22);
        result = SLFWrite(v65, v46, __s, (unsigned int *)&v69 + 1);
        v22 = (char *)__s;
        v34 = __s;
LABEL_69:
        v47 = (_DWORD)result == 8;
        v26 = v62;
        goto LABEL_70;
      }
      PDasparse(v30, (uint64_t)v75, (_BYTE *)&v71 + 1, &v71, (uint64_t)v52, &v70, 0xCu, (uint64_t)v15);
      v35 = v55;
      if ((_BYTE)v71)
        v35 = v55 + 1;
      v55 = v35;
      v26 = v62;
      v22 = v30;
    }
    if (!v60)
      goto LABEL_68;
    v36 = v22;
    v54 = strlen((const char *)v26);
    v37 = strlen(v36);
    v53 = v37;
    if (v54 <= (unsigned __int16)v37)
      v38 = (unsigned __int16)v37;
    else
      v38 = v54;
    if (!(unsigned __int16)memcmp(v62, v36, v38))
    {
      if (v64 >= 0)
        v48 = v64;
      else
        v48 = v65;
      result = SLFWrite(v48, v53, v36, (unsigned int *)&v69 + 1);
      v34 = v36;
      v47 = (_DWORD)result == 8;
      v26 = v62;
      v22 = v36;
    }
    else
    {
      if ((v54 & 0x8000) == 0)
      {
        v39 = 0;
        do
        {
          v40 = v62[v39];
          if ((*(_DWORD *)(v11 + 4 * v40) & 0x40000000) != 0)
            LOBYTE(v40) = v40 + 32;
          __s1[v39++] = v40;
        }
        while ((__int16)v54 >= v39);
      }
      v41 = strlen((const char *)__s);
      v42 = v41;
      if ((v41 & 0x8000) == 0)
      {
        v43 = 0;
        do
        {
          v44 = __s[v43];
          if ((*(_DWORD *)(v11 + 4 * v44) & 0x40000000) != 0)
            LOBYTE(v44) = v44 + 32;
          __s2[v43++] = v44;
        }
        while (v41 >= v43);
      }
      if ((__int16)v54 <= v41)
        v45 = v41;
      else
        v45 = (__int16)v54;
      if ((memcmp(__s1, __s2, v45) & 0x8000) == 0)
      {
        result = SLFWrite(v65, v42, __s, (unsigned int *)&v69 + 1);
        v22 = (char *)__s;
        v34 = __s;
        goto LABEL_69;
      }
      result = SLFWrite(v65, (__int16)v54, v62, (unsigned int *)&v69 + 1);
      v26 = v62;
      v34 = v62;
      v47 = (_DWORD)result == 8;
      v22 = (char *)__s;
    }
LABEL_70:
    v25 = v59;
    if (v47)
      return result;
LABEL_71:
    *v34 = 0;
    v24 = v60 != 0;
    v23 = v25 != 0;
  }
  while (v60 | v25);
  v66 = 0;
  v67 = 0;
  v49 = *(_BYTE *)(a1 + 2578);
  if (!v49)
    v49 = 61;
  BYTE1(v66) = v49;
  *(_BYTE *)a5 = v49;
  BYTE2(v66) = 12;
  *(_BYTE *)(a5 + 8) = 12;
  BYTE6(v66) = HIBYTE(v68);
  *(_BYTE *)(a5 + 7) = HIBYTE(v68);
  LOBYTE(v67) = BYTE2(v68);
  *(_BYTE *)(a5 + 2) = BYTE2(v68);
  BYTE1(v67) = BYTE3(v68);
  *(_BYTE *)(a5 + 3) = BYTE3(v68);
  WORD1(v67) = WORD2(v68);
  *(_WORD *)(a5 + 4) = WORD2(v68);
  HIBYTE(v66) = BYTE6(v68);
  *(_BYTE *)(a5 + 6) = BYTE6(v68);
  LOBYTE(v66) = BYTE1(v68);
  *(_BYTE *)(a5 + 1) = BYTE1(v68);
  WORD2(v66) = v55;
  *(_WORD *)(a5 + 10) = v55;
  HIDWORD(v67) = a4;
  SLSeek(a4, 0, 0);
  if (!PDWriteRDHead((unsigned __int8 *)&v66))
  {
    v50 = malloc_type_malloc(0x400uLL, 0x100004077774924uLL);
    if (v50)
    {
      v51 = v50;
      SLSeek(v65, 0, 0);
      while (!SLFRead(v65, 1024, v51, (unsigned int *)&v63))
      {
        if (v63 >= 1)
        {
          result = SLFWrite(a4, v63, v51, (unsigned int *)&v69 + 1);
          if ((_DWORD)result == 8)
            return result;
          if (HIDWORD(v69) != v63)
            return 8;
          if (HIDWORD(v69) == 1024)
            continue;
        }
        if ((v64 & 0x80000000) == 0)
        {
          SLClose(v64);
          v64 = -2;
        }
        SLClose(v65);
        v65 = -2;
        SLremove();
        free(v51);
        free(v62);
        free(__s);
        free(__s1);
        free(__s2);
        free(v52);
        free(v15);
        return 0;
      }
    }
  }
  return 8;
}

uint64_t output_counts(FILE **a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unsigned __int16 *v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  __int16 v14;
  int v15;
  unsigned __int16 *v16;
  int v17;

  v4 = 0;
  v5 = a2;
  while (1)
  {
    v6 = *v5;
    v5 += 4;
    if (v6)
      break;
    if (++v4 == 256)
      return 8 * (putc(0, *a1) != 0);
  }
  LODWORD(v7) = (__int16)v4;
  if ((__int16)v4 > 255)
    return 8 * (putc(0, *a1) != 0);
  while (1)
  {
    LOWORD(v8) = v7;
    v9 = (__int16)v7;
    v7 = (v7 + 1);
    while (1)
    {
      if ((__int16)v7 > 255)
      {
LABEL_19:
        v14 = v7 - 1;
        v15 = (unsigned __int16)(v7 - 1);
        goto LABEL_20;
      }
      v10 = (__int16)v7;
      v11 = v7 << 48;
      v12 = &a2[4 * (__int16)v7];
      while (1)
      {
        v13 = *v12;
        v12 += 4;
        if (!v13)
          break;
        ++v10;
        v11 += 0x1000000000000;
        LOWORD(v7) = v7 + 1;
        if (v10 == 256)
        {
          LODWORD(v7) = 256;
          goto LABEL_19;
        }
      }
      v14 = v10 - 1;
      v15 = (__int16)(v10 - 1);
      if ((__int16)v10 > 255)
        break;
      v16 = &a2[4 * (__int16)v7];
      v7 = v11 >> 48;
      while (1)
      {
        v17 = *v16;
        v16 += 4;
        if (v17)
          break;
        if (++v7 == 256)
          goto LABEL_20;
      }
      if ((__int16)v7 - v15 >= 4)
        goto LABEL_20;
    }
    LODWORD(v7) = (__int16)v10;
LABEL_20:
    if (putc(v9, *a1) != v9 || putc(v15, *a1) != v15)
      return 8;
    if (v9 <= v14)
    {
      while (putc(a2[4 * (__int16)v8], *a1) == (__int16)a2[4 * (__int16)v8])
      {
        v8 = (__int16)(v8 + 1);
        if (v8 > v14)
          goto LABEL_25;
      }
      return 8;
    }
LABEL_25:
    if ((__int16)v7 > 255)
      return 8 * (putc(0, *a1) != 0);
  }
}

_DWORD *scale_counts(_DWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint32x4_t v3;
  unsigned int v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  BOOL v8;
  __int16 v9;

  v2 = 0;
  v3 = 0uLL;
  do
  {
    v3 = vmaxq_u32(*(uint32x4_t *)&result[v2], v3);
    v2 += 4;
  }
  while (v2 != 256);
  v4 = vmaxvq_u32(v3);
  if (!v4)
  {
    v4 = 1;
    *result = 1;
  }
  v5 = 0;
  v6 = v4 / 0xFF + 1;
  do
  {
    v7 = result[v5 / 4];
    if ((unsigned __int16)(v7 / v6))
      v8 = 1;
    else
      v8 = v7 == 0;
    if (v8)
      v9 = v7 / v6;
    else
      v9 = 1;
    *(_WORD *)(a2 + 2 * v5) = v9;
    v5 += 4;
  }
  while (v5 != 1024);
  *(_WORD *)(a2 + 2048) = 1;
  return result;
}

uint64_t convert_tree_to_code(uint64_t result, uint64_t a2, int a3, __int16 a4, int a5)
{
  int v6;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;

  v6 = a3;
  if (a5 >= 257)
  {
    v9 = result;
    do
    {
      ++a4;
      v10 = v9 + 8 * (unsigned __int16)a5;
      result = convert_tree_to_code(v9, a2, 2 * (v6 & 0x7FFFu), a4, *(__int16 *)(v10 + 4));
      v8 = (2 * v6) | 1;
      a5 = *(__int16 *)(v10 + 6);
      v6 = (2 * v6) | 1;
    }
    while (a5 >= 257);
  }
  else
  {
    v8 = a3;
  }
  v11 = (_WORD *)(a2 + 4 * a5);
  *v11 = v8;
  v11[1] = a4;
  return result;
}

uint64_t compress_buffer(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  int v8;
  unsigned __int16 *v9;

  v8 = 0;
  *(_WORD *)(a3 + 8) = 2;
  *(_WORD *)(a3 + 12) = 0;
  *(_BYTE *)(a3 + 10) = 0x80;
  **(_BYTE **)a3 = BYTE1(a2);
  *(_BYTE *)(*(_QWORD *)a3 + 1) = a2;
  do
  {
    v9 = (unsigned __int16 *)(a4 + 4 * *(unsigned __int8 *)(a1 + (unsigned __int16)v8));
    OutputsBuffer((uint64_t *)a3, *v9, (__int16)v9[1]);
    ++v8;
  }
  while (a2 >= (unsigned __int16)v8);
  OutputsBuffer((uint64_t *)a3, *(unsigned __int16 *)(a4 + 1024), *(__int16 *)(a4 + 1026));
  return *(unsigned __int16 *)(a3 + 8);
}

uint64_t *OutputsBuffer(uint64_t *result, int a2, int a3)
{
  uint64_t v3;
  unsigned __int16 v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  if ((a3 - 1) <= 0x1F)
  {
    v3 = 1 << (a3 - 1);
    v4 = *((unsigned __int8 *)result + 10);
    do
    {
      if ((v3 & a2) != 0)
        *((_WORD *)result + 6) |= v4;
      v5 = v4;
      v4 >>= 1;
      *((_BYTE *)result + 10) = v4;
      if (v5 <= 1)
      {
        v6 = *((_BYTE *)result + 12);
        v7 = *result;
        v8 = *((unsigned __int16 *)result + 4);
        *((_WORD *)result + 4) = v8 + 1;
        *(_BYTE *)(v7 + v8) = v6;
        *((_WORD *)result + 6) = 0;
        v4 = 128;
        *((_BYTE *)result + 10) = 0x80;
      }
      v9 = v3 > 1;
      LODWORD(v3) = v3 >> 1;
    }
    while (v9);
  }
  return result;
}

_WORD *OpenOutputBitFile()
{
  _WORD *v0;
  char *v1;
  char *v2;

  v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405AD1273CuLL);
  if (v0)
  {
    v1 = (char *)malloc_type_malloc(0x101uLL, 0x100004077774924uLL);
    if (v1)
    {
      v2 = v1;
      __strcpy_chk();
      __strcat_chk();
      *(_QWORD *)v0 = fopen(v2, "wb");
      free(v2);
      v0[5] = 0;
      *((_BYTE *)v0 + 8) = 0x80;
    }
    else
    {
      return 0;
    }
  }
  return v0;
}

void CloseOutputBuffer(uint64_t a1)
{
  char v2;
  _BYTE *v3;
  uint64_t v4;

  if (*(unsigned __int8 *)(a1 + 10) != 128)
  {
    v2 = *(_BYTE *)(a1 + 12);
    v3 = *(_BYTE **)a1;
    v4 = *(unsigned __int16 *)(a1 + 8);
    *(_WORD *)(a1 + 8) = v4 + 1;
    v3[v4] = v2;
  }
  free(*(void **)a1);
  free((void *)a1);
}

uint64_t CloseOutputBitFile(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) != 128 && putc(*(__int16 *)(a1 + 10), *(FILE **)a1) != *(__int16 *)(a1 + 10))
    return 8;
  fclose(*(FILE **)a1);
  free((void *)a1);
  return 0;
}

uint64_t OutputBit(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(a1 + 8);
  if (a2)
    *(_WORD *)(a1 + 10) |= v3;
  *(_BYTE *)(a1 + 8) = v3 >> 1;
  if (v3 > 1)
    return 0;
  if (putc(*(__int16 *)(a1 + 10), *(FILE **)a1) != *(__int16 *)(a1 + 10))
    return 8;
  result = 0;
  *(_WORD *)(a1 + 10) = 0;
  *(_BYTE *)(a1 + 8) = 0x80;
  return result;
}

uint64_t OutputBits(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  unsigned __int16 v7;
  unsigned int v8;
  BOOL v9;

  if ((a3 - 1) > 0x1F)
    return 0;
  v6 = 1 << (a3 - 1);
  v7 = *(unsigned __int8 *)(a1 + 8);
  while (1)
  {
    if ((v6 & a2) != 0)
      *(_WORD *)(a1 + 10) |= v7;
    v8 = v7;
    v7 >>= 1;
    *(_BYTE *)(a1 + 8) = v7;
    if (v8 > 1)
      goto LABEL_9;
    if (putc(*(__int16 *)(a1 + 10), *(FILE **)a1) != *(__int16 *)(a1 + 10))
      return 8;
    *(_WORD *)(a1 + 10) = 0;
    v7 = 128;
    *(_BYTE *)(a1 + 8) = 0x80;
LABEL_9:
    v9 = v6 > 1;
    LODWORD(v6) = v6 >> 1;
    if (!v9)
      return 0;
  }
}

uint64_t input_counts(FILE **a1, uint64_t a2)
{
  uint64_t i;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  uint64_t result;
  __int16 v9;
  int v10;
  __int16 v11;
  int v12;

  for (i = 0; i != 2048; i += 8)
    *(_WORD *)(a2 + i) = 0;
  v5 = getc(*a1);
  if (v5 != -1)
  {
    v6 = v5;
    v7 = getc(*a1);
    if (v7 != -1)
    {
      v9 = v7;
      while (1)
      {
        v10 = v9;
        while (v10 >= v6)
        {
          v11 = getc(*a1);
          if (v11 == -1)
            return 8;
          *(_WORD *)(a2 + 8 * v6++) = v11;
        }
        v12 = getc(*a1);
        if (v12 << 16 == -65536)
          break;
        if (!(v12 << 16))
        {
          result = 0;
          *(_WORD *)(a2 + 2048) = 1;
          return result;
        }
        v6 = v12;
        v9 = getc(*a1);
        result = 8;
        if (v9 == -1)
          return result;
      }
    }
  }
  return 8;
}

_WORD *OpenInputBitFile(const char *a1)
{
  _WORD *v2;
  FILE *v3;

  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0x10200405AD1273CuLL);
  if (v2)
  {
    v3 = fopen(a1, "rb");
    *(_QWORD *)v2 = v3;
    if (v3)
    {
      v2[5] = 0;
      *((_BYTE *)v2 + 8) = 0x80;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

void CloseInputBitFile(FILE **a1)
{
  fclose(*a1);
  free(a1);
}

uint64_t expand_data(unsigned __int16 **a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  __int16 *v15;
  __int16 *v16;

  v9 = 0;
  *((_WORD *)a1 + 4) = 2;
  *((_WORD *)a1 + 6) = 0;
  *((_BYTE *)a1 + 10) = 0x80;
  v10 = bswap32(**a1) >> 16;
  do
  {
    v11 = v9;
    LOWORD(v12) = a5;
    do
    {
      v13 = InputBit((uint64_t *)a1);
      v14 = a4 + 8 * (__int16)v12;
      v15 = (__int16 *)(v14 + 6);
      v16 = (__int16 *)(v14 + 4);
      if (v13)
        v16 = v15;
      v12 = *v16;
    }
    while (v12 > 255);
    v9 = v11 + 1;
    *(_BYTE *)(a3 + (unsigned __int16)v11) = v12;
  }
  while (v10 >= (unsigned __int16)(v11 + 1));
  return (unsigned __int16)v11;
}

BOOL InputBit(uint64_t *a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;

  v1 = *((unsigned __int8 *)a1 + 10);
  if (v1 == 128)
  {
    v2 = *a1;
    v3 = *((unsigned __int16 *)a1 + 4);
    *((_WORD *)a1 + 4) = v3 + 1;
    v4 = *(unsigned __int8 *)(v2 + v3);
    *((_WORD *)a1 + 6) = v4;
  }
  else
  {
    v4 = *((unsigned __int16 *)a1 + 6);
  }
  v5 = v1 >> 1;
  if (v1 < 2)
    LOBYTE(v5) = 0x80;
  *((_BYTE *)a1 + 10) = v5;
  return (v4 & v1) != 0;
}

char *PDstrrev(char *a1)
{
  unsigned __int8 v2;
  char *v3;
  uint64_t v4;
  char __src[65];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = strlen(a1);
  if (v2)
  {
    v3 = __src;
    v4 = v2;
    do
      *v3++ = a1[--v4];
    while (v4);
  }
  __src[v2] = 0;
  return strcpy(a1, __src);
}

uint64_t sddiff(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  BOOL v6;

  v2 = 0;
  do
  {
    v3 = v2;
    v4 = *(unsigned __int8 *)(a1 + (__int16)v2);
    v5 = *(unsigned __int8 *)(a2 + (__int16)v2++);
    if (v4)
      v6 = v4 == v5;
    else
      v6 = 0;
  }
  while (v6);
  return v3;
}

uint64_t StartDb(uint64_t a1, int a2)
{
  _WORD *v4;
  uint64_t v5;
  char v6;
  _DWORD *v7;
  char v8;
  int v9;
  uint64_t v10;
  __int128 v11;

  v4 = malloc_type_calloc(1uLL, 0x850uLL, 0x1090040FF1BFF1AuLL);
  if (!v4)
  {
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
      return 0;
    v5 = 0;
    *(_DWORD *)(a1 + 2584) = 8;
    *(_WORD *)(a1 + 2588) = 1030;
    return v5;
  }
  v5 = (uint64_t)v4;
  v4[1032] = *(_WORD *)(a1 + 2582);
  if (a2 == 2)
  {
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    v8 = *(_BYTE *)(a1 + 1552);
    *(_BYTE *)(v5 + 784) = v8;
    *(_BYTE *)(v5 + 785) = v8;
    *(_DWORD *)(v5 + 776) = *(_DWORD *)(a1 + 1544);
    v7 = (_DWORD *)(a1 + 1548);
  }
  else
  {
    if (a2 != 1)
      goto LABEL_10;
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    __strcpy_chk();
    v6 = *(_BYTE *)(a1 + 776);
    *(_BYTE *)(v5 + 784) = v6;
    *(_BYTE *)(v5 + 785) = v6;
    *(_DWORD *)(v5 + 776) = *(_DWORD *)(a1 + 768);
    v7 = (_DWORD *)(a1 + 772);
  }
  *(_DWORD *)(v5 + 780) = *v7;
LABEL_10:
  *(_WORD *)(v5 + 2078) = *(_WORD *)(a1 + 2577);
  *(_DWORD *)(v5 + 772) = -2;
  *(_WORD *)(v5 + 768) = 0;
  *(_WORD *)(v5 + 2076) = 0;
  v9 = PDdb(v5, 1);
  v10 = *(_QWORD *)(v5 + 2120);
  v11 = *(_OWORD *)(v5 + 2104);
  *(_OWORD *)(a1 + 2584) = *(_OWORD *)(v5 + 2088);
  *(_OWORD *)(a1 + 2600) = v11;
  *(_QWORD *)(a1 + 2616) = v10;
  if (v9 == 8)
  {
    free((void *)v5);
    return 0;
  }
  return v5;
}

uint64_t StartWord(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t result;
  __int128 v11;
  __int128 v12;

  v4 = malloc_type_calloc(1uLL, 0x98uLL, 0x10B00408E6C3DC5uLL);
  if (v4)
  {
    v5 = v4;
    v6 = malloc_type_calloc(0x41uLL, 1uLL, 0x100004077774924uLL);
    v5[1] = v6;
    if (v6)
    {
      v7 = malloc_type_calloc(0x14uLL, 8uLL, 0x10040436913F5uLL);
      v5[13] = v7;
      if (v7)
      {
        v8 = 0;
        while (1)
        {
          v9 = malloc_type_calloc(1uLL, 0x74uLL, 0x10000404AB42077uLL);
          *(_QWORD *)(v5[13] + v8) = v9;
          if (!v9)
            break;
          v8 += 8;
          if (v8 == 160)
          {
            *((_WORD *)v5 + 1) = *(_WORD *)(a2 + 2064);
            *(_WORD *)v5 = *(_WORD *)(a2 + 2074);
            *((_BYTE *)v5 + 42) = 0;
            *((_DWORD *)v5 + 9) = 0xFFFF;
            result = PDword((unsigned __int16 *)v5, 8u, 1);
            if ((_DWORD)result == 8)
            {
              v11 = *((_OWORD *)v5 + 7);
              v12 = *((_OWORD *)v5 + 8);
              *(_QWORD *)(a2 + 2120) = v5[18];
              *(_OWORD *)(a2 + 2088) = v11;
              *(_OWORD *)(a2 + 2104) = v12;
            }
            else
            {
              result = 0;
              *a1 = v5;
            }
            return result;
          }
        }
      }
    }
  }
  if (*(_WORD *)(a2 + 2092) && *(int *)(a2 + 2088) > 7)
    return 8;
  result = 8;
  *(_DWORD *)(a2 + 2088) = 8;
  *(_WORD *)(a2 + 2092) = 1030;
  return result;
}

uint64_t PDWriteRDHead(unsigned __int8 *a1)
{
  __int16 v2;
  unsigned __int16 v3;
  unsigned int v4;
  unsigned __int16 v5;
  unsigned __int16 v6;
  unsigned int v7;
  unsigned __int16 v8;
  unsigned __int16 v9;
  unsigned int v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned int v16;
  unsigned __int16 v17;
  unsigned __int16 v18;
  unsigned int v19;
  unsigned __int16 v20;
  unsigned __int16 v21;
  unsigned int v22;
  char *v23;
  int v24;
  uint64_t result;
  unsigned int v26;
  _QWORD __buf[13];
  char __src[40];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v26 = 0;
  qmemcpy(__buf, "#HEADER START#2#", 16);
  v2 = PDitoa(*a1, (uint64_t)__src);
  __strncpy_chk();
  v3 = v2 + 17;
  *((_BYTE *)__buf + (unsigned __int16)(v2 + 16)) = 35;
  v4 = PDitoa(a1[8], (uint64_t)__src);
  strncpy((char *)__buf + v3, __src, v4);
  v5 = v4 + v3;
  v6 = v4 + v3 + 1;
  *((_BYTE *)__buf + v5) = 35;
  v7 = PDitoa(a1[9], (uint64_t)__src);
  strncpy((char *)__buf + v6, __src, v7);
  *((_BYTE *)__buf + (unsigned __int16)(v7 + v6)) = 35;
  *((_BYTE *)__buf + (unsigned __int16)(v7 + v6 + 1)) = a1[1];
  v8 = v7 + v6 + 2;
  v9 = v7 + v6 + 3;
  *((_BYTE *)__buf + v8) = 35;
  v10 = PDitoa(*((unsigned __int16 *)a1 + 5), (uint64_t)__src);
  strncpy((char *)__buf + v9, __src, v10);
  v11 = v10 + v9;
  v12 = v10 + v9 + 1;
  *((_BYTE *)__buf + v11) = 35;
  v13 = PDitoa((unsigned __int16)(char)a1[7], (uint64_t)__src);
  strncpy((char *)__buf + v12, __src, v13);
  v14 = v13 + v12;
  v15 = v13 + v12 + 1;
  *((_BYTE *)__buf + v14) = 35;
  v16 = PDitoa(a1[6], (uint64_t)__src);
  strncpy((char *)__buf + v15, __src, v16);
  v17 = v16 + v15;
  v18 = v16 + v15 + 1;
  *((_BYTE *)__buf + v17) = 35;
  v19 = PDitoa(*((unsigned __int16 *)a1 + 2), (uint64_t)__src);
  strncpy((char *)__buf + v18, __src, v19);
  v20 = v19 + v18;
  v21 = v19 + v18 + 1;
  *((_BYTE *)__buf + v20) = 35;
  v22 = PDitoa(a1[2], (uint64_t)__src);
  LOWORD(v19) = v22;
  strncpy((char *)__buf + v21, __src, v22);
  *((_BYTE *)__buf + (unsigned __int16)(v19 + v21)) = 35;
  v23 = (char *)__buf + (unsigned __int16)(v19 + v21 + 1);
  *(_DWORD *)(v23 + 7) = 591679045;
  *(_QWORD *)v23 = *(_QWORD *)"HEADER END#";
  *((_BYTE *)__buf + (unsigned __int16)(v19 + v21 + 12)) = 13;
  *((_BYTE *)__buf + (unsigned __int16)(v19 + v21 + 13)) = 10;
  v24 = SLFWrite(*((_DWORD *)a1 + 3), (unsigned __int16)(v19 + v21 + 14), __buf, &v26);
  result = 0;
  if (v24 == 8)
  {
    SLClose(*((_DWORD *)a1 + 3));
    *((_DWORD *)a1 + 3) = -2;
    return 8;
  }
  return result;
}

char *FillHeadStr(unsigned int a1, uint64_t a2, _WORD *a3)
{
  unsigned int v5;
  __int16 v6;
  char *result;
  unsigned __int16 v8;
  char v9[40];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = PDitoa(a1, (uint64_t)v9);
  v6 = v5;
  result = strncpy((char *)(a2 + (unsigned __int16)*a3), v9, v5);
  v8 = *a3 + v6;
  *a3 = v8 + 1;
  *(_BYTE *)(a2 + v8) = 35;
  return result;
}

uint64_t PDWriteOldRDHead(unsigned __int8 *a1, _BYTE *a2)
{
  __int16 v4;
  unsigned __int16 v5;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned __int16 v8;
  unsigned int v9;
  char *v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  uint64_t result;
  unsigned int v14;
  _QWORD __buf[13];
  char __src[40];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  qmemcpy(__buf, "#HEADER START#1#", 16);
  v4 = PDitoa(*a1, (uint64_t)__src);
  __strncpy_chk();
  v5 = v4 + 17;
  *((_BYTE *)__buf + (unsigned __int16)(v4 + 16)) = 35;
  v6 = PDitoa(0, (uint64_t)__src);
  strncpy((char *)__buf + v5, __src, v6);
  v7 = v6 + v5;
  v8 = v6 + v5 + 1;
  *((_BYTE *)__buf + v7) = 35;
  v9 = PDitoa(0, (uint64_t)__src);
  strncpy((char *)__buf + v8, __src, v9);
  *((_BYTE *)__buf + (unsigned __int16)(v9 + v8)) = 35;
  *((_BYTE *)__buf + (unsigned __int16)(v9 + v8 + 1)) = a1[1];
  *((_BYTE *)__buf + (unsigned __int16)(v9 + v8 + 2)) = 35;
  v10 = (char *)__buf + (unsigned __int16)(v9 + v8 + 3);
  *(_QWORD *)v10 = *(_QWORD *)"HEADER END#";
  *(_DWORD *)(v10 + 7) = 591679045;
  v11 = v9 + v8 + 15;
  *((_BYTE *)__buf + (unsigned __int16)(v9 + v8 + 14)) = 13;
  v12 = v9 + v8 + 16;
  *((_BYTE *)__buf + v11) = 10;
  if (SLFWrite(*((_DWORD *)a1 + 3), v12, __buf, &v14) == 8)
  {
    SLClose(*((_DWORD *)a1 + 3));
    *((_DWORD *)a1 + 3) = -2;
    return 8;
  }
  else
  {
    result = 0;
    *a2 = v12;
  }
  return result;
}

uint64_t BuildEntry(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t result;
  char v11;
  unsigned __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 v15;
  char __str[3];

  v7 = *a1;
  v6 = (char *)a1[1];
  v8 = **(_QWORD **)(*a1 + 104);
  *v6 = 35;
  v9 = strlen((const char *)v8);
  *((_WORD *)a1 + 9) = v9;
  if (*(_BYTE *)(v8 + 71))
    SLrecap((unsigned __int8 *)v8, v9, *(unsigned __int8 *)(v8 + 71), v8 + 80, *(unsigned __int8 *)(v8 + 71), a3);
  if (SLchcnv((char *)v8, v9, (unsigned __int8 *)v8, 0, *(unsigned __int8 *)(v8 + 72)) == 8)
  {
    if (!*(_WORD *)(v7 + 116) || *(int *)(v7 + 112) <= 7)
    {
      *(_DWORD *)(v7 + 112) = 8;
      *(_WORD *)(v7 + 116) = 1120;
    }
    SLClose(a2);
    free(v6);
    return 8;
  }
  else
  {
    if (*(_DWORD *)(v8 + 88))
      v9 = PDhypins((char *)v8, (uint64_t *)(v8 + 88), *((unsigned __int8 *)a1 + 22));
    strcpy(v6 + 1, (const char *)v8);
    v6[(unsigned __int16)(v9 + 1)] = 35;
    if (*(_BYTE *)(v8 + 70))
      v11 = 49;
    else
      v11 = 48;
    v12 = v9 + 3;
    v6[(unsigned __int16)(v9 + 2)] = v11;
    if (*((_WORD *)a1 + 10))
    {
      v13 = 0;
      v14 = v9 + 4;
      v6[v12] = 35;
      do
      {
        snprintf(__str, 3uLL, "%02X", *(unsigned __int8 *)(v8 + 102 + v13));
        v15 = v14 + 1;
        v6[v14] = __str[0];
        v14 += 2;
        v6[v15] = __str[1];
        ++v13;
      }
      while (v13 != 12);
    }
    else
    {
      v14 = v9 + 3;
    }
    result = 0;
    *((_WORD *)a1 + 8) = v14;
  }
  return result;
}

uint64_t AltAndWrite(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  _DWORD *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  int v13;
  char *v14;
  __int16 v15;
  unsigned __int16 v16;
  int v17;
  uint64_t result;
  unsigned int v19;

  v19 = 0;
  v6 = *(unsigned __int16 *)(a2 + 16);
  v7 = *(_DWORD **)a2;
  v8 = *(_BYTE **)(a2 + 8);
  v9 = **(_QWORD **)(*(_QWORD *)a2 + 104);
  if (!*(_BYTE *)v9 || !*(_WORD *)(v9 + 100))
    goto LABEL_10;
  v8[v6] = 35;
  *(_DWORD *)a3 = *v7;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(v9 + 96);
  *(_WORD *)(a3 + 16) = *(_WORD *)(v9 + 100);
  if (PDalt((unsigned __int16 *)a3) != 8)
  {
    v13 = *(__int16 *)(a3 + 16);
    v14 = *(char **)(a3 + 8);
    if (SLchcnv(v14, v13, (unsigned __int8 *)v14, 0, *(unsigned __int8 *)(v9 + 72)) == 8)
    {
      if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
        goto LABEL_15;
      *(_DWORD *)(a1 + 2584) = 8;
      v15 = 1120;
LABEL_14:
      *(_WORD *)(a1 + 2588) = v15;
LABEL_15:
      SLClose(a4);
      return 8;
    }
    v16 = v6 + 1;
    strncpy(&v8[v16], v14, v13);
    LOWORD(v6) = v13 + v16;
LABEL_10:
    v8[(unsigned __int16)v6] = 13;
    v8[(unsigned __int16)(v6 + 1)] = 10;
    v8[(unsigned __int16)(v6 + 2)] = 0;
    v17 = SLFWrite(a4, (unsigned __int16)(v6 + 2), v8, &v19);
    result = 0;
    if (v17 != 8)
      return result;
    if (*(_WORD *)(a1 + 2588) && *(int *)(a1 + 2584) > 7)
      goto LABEL_15;
    *(_DWORD *)(a1 + 2584) = 8;
    v15 = 1011;
    goto LABEL_14;
  }
  SLClose(a4);
  v11 = *(_QWORD *)(a3 + 56);
  v12 = *(_OWORD *)(a3 + 40);
  *(_OWORD *)(a1 + 2584) = *(_OWORD *)(a3 + 24);
  *(_OWORD *)(a1 + 2600) = v12;
  *(_QWORD *)(a1 + 2616) = v11;
  return 8;
}

uint64_t GetBuildWord(uint64_t a1, unsigned __int16 **a2, _BYTE *a3, unsigned int a4, uint64_t a5)
{
  unsigned __int16 *v10;
  uint64_t result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v10 = *a2;
  result = PDword(*a2, 8u, 5);
  if ((_DWORD)result == 8)
  {
    v12 = *((_OWORD *)v10 + 7);
    v13 = *((_OWORD *)v10 + 8);
    *(_QWORD *)(a1 + 2616) = *((_QWORD *)v10 + 18);
    *(_OWORD *)(a1 + 2584) = v12;
    *(_OWORD *)(a1 + 2600) = v13;
  }
  else if ((v10[58] & 0xFFFE) == 0x13F8)
  {
    result = PDword(v10, 8u, 2);
    if ((_DWORD)result == 8)
    {
      v14 = *((_OWORD *)v10 + 7);
      v15 = *((_OWORD *)v10 + 8);
      *(_QWORD *)(a1 + 2616) = *((_QWORD *)v10 + 18);
      *(_OWORD *)(a1 + 2584) = v14;
      *(_OWORD *)(a1 + 2600) = v15;
    }
    else
    {
      *a3 = 0;
      BuildEntry((uint64_t *)a2, a4, a5);
      return 5113;
    }
  }
  else
  {
    result = BuildEntry((uint64_t *)a2, a4, a5);
    if ((_DWORD)result != 8)
    {
      result = 0;
      *a3 = 1;
    }
  }
  return result;
}

uint64_t PDGets(unsigned __int8 *__dst, int a2, int *a3, unsigned int a4)
{
  uint64_t result;
  uint64_t v10;
  int v11;
  signed int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v19;

  v19 = 0;
  if (SLFRead(a4, a2, __dst, (unsigned int *)&v19) == 8 || v19 == 0)
    return 8;
  if (v19 < 1)
  {
    v13 = 0;
    LOWORD(v10) = -1;
  }
  else
  {
    v10 = 0;
    while (1)
    {
      v11 = __dst[v10];
      if (v11 == 13 || v11 == 10)
        break;
      if (v19 == ++v10)
      {
        LOWORD(v10) = -1;
        v13 = v19;
        goto LABEL_28;
      }
    }
    if (v19 <= (int)v10)
      v13 = v10;
    else
      v13 = v19;
    if (v19 <= (int)v10)
      v14 = v10;
    else
      v14 = v19;
    v15 = v10;
    while (v11 <= 0xDu && ((1 << v11) & 0x2401) != 0)
    {
      if (v14 == v15)
        goto LABEL_28;
      LOBYTE(v11) = __dst[++v15];
    }
    v13 = v15;
  }
LABEL_28:
  v16 = *a3 + v13;
  *a3 = v16;
  SLSeek(a4, v16, 0);
  if ((_WORD)v10 == 0xFFFF)
  {
    v18 = &__dst[v13];
  }
  else
  {
    v17 = (__int16)v10 + 2;
    v18 = &__dst[(__int16)v10];
    if ((int)v17 <= a2)
    {
      *v18 = 13;
      __dst[(__int16)v10 + 1] = 10;
      v18 = &__dst[v17];
    }
  }
  result = 0;
  *v18 = 0;
  return result;
}

uint64_t GetOldSDWord(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  result = PDword((unsigned __int16 *)a2, 8u, 5);
  if ((_DWORD)result == 8)
  {
    v7 = *(_OWORD *)(a2 + 112);
    v8 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 2584) = v7;
    *(_OWORD *)(a1 + 2600) = v8;
  }
  else if ((*(_WORD *)(a2 + 116) & 0xFFFE) == 0x13F8)
  {
    result = PDword((unsigned __int16 *)a2, 8u, 2);
    if ((_DWORD)result == 8)
    {
      v9 = *(_OWORD *)(a2 + 112);
      v10 = *(_OWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 2616) = *(_QWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 2584) = v9;
      *(_OWORD *)(a1 + 2600) = v10;
    }
    else
    {
      *a3 = 0;
      return 5113;
    }
  }
  else
  {
    result = 0;
    *a3 = 1;
  }
  return result;
}

uint64_t BuildForm(char *a1, _BYTE *a2, unsigned int a3, unsigned __int16 *a4, _BYTE *a5)
{
  char *v10;
  char *v11;
  void *v12;
  void *v13;
  char *v14;
  char *v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int16 v26;
  unsigned __int16 v27;
  char v28;
  uint64_t v29;
  __int16 v30;
  __int16 v31;
  char v32;

  v10 = (char *)malloc_type_malloc(0x881uLL, 0x8BD3820uLL);
  if (!v10)
    return 8;
  v11 = v10;
  v12 = malloc_type_malloc(0x19uLL, 0x98D6A96EuLL);
  if (!v12)
    return 8;
  v13 = v12;
  v14 = (char *)malloc_type_malloc(0x801uLL, 0x5F778A4FuLL);
  if (!v14)
    return 8;
  v15 = v14;
  if (*a1 != 35)
  {
    __strcpy_chk();
    *(_WORD *)a1 = 35;
    strcat(a1, v11);
  }
  v32 = 0;
  v31 = 0;
  memset(v13, 48, 24);
  PDasparse(a1, (uint64_t)v11, &v32, a5, (uint64_t)v15, &v31, a3, (uint64_t)v13);
  *a2 = 35;
  v16 = *v11;
  if (*v11)
  {
    v17 = 0;
    LOWORD(v18) = 0;
    do
    {
      a2[v17 + 1] = v16;
      LOWORD(v18) = v18 + 1;
      v17 = (__int16)v18;
      v16 = v11[(__int16)v18];
    }
    while (v16);
    v18 = v18;
  }
  else
  {
    v18 = 0;
  }
  v20 = v18;
  v21 = &a2[v18];
  v21[1] = 35;
  if (*a5)
    v22 = 49;
  else
    v22 = 48;
  v23 = v18 + 3;
  v21[2] = v22;
  if (a3)
  {
    v24 = 0;
    a2[v23] = 35;
    v25 = v20 + 4;
    do
    {
      a2[v25 + v24] = *((_BYTE *)v13 + v24);
      ++v24;
    }
    while (v24 != 24);
    v26 = v25 + 24;
  }
  else
  {
    v26 = v20 + 3;
  }
  *a4 = v26;
  if (v32)
  {
    v27 = v26 + 1;
    a2[v26] = 35;
    v28 = *v15;
    if (*v15)
    {
      v29 = 0;
      v30 = 0;
      do
      {
        a2[v29 + v27] = v28;
        v29 = ++v30;
        v28 = v15[v30];
      }
      while (v28);
    }
    else
    {
      v30 = 0;
    }
    v26 = v30 + v27;
  }
  a2[v26] = 13;
  a2[(unsigned __int16)(v26 + 1)] = 10;
  a2[(unsigned __int16)(v26 + 2)] = 0;
  free(v13);
  free(v11);
  free(v15);
  return 0;
}

uint64_t Huffman_Comp(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, unsigned int a6, _WORD *a7, uint64_t a8)
{
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t result;
  __int16 v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  __int16 v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _WORD *v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  char *v40;
  unsigned int v41;
  char v42;
  int v43;
  uint64_t v44;
  char *v45;
  char v46;
  unint64_t v47;
  unint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  uint64_t v53;
  char v54;
  char *v55;
  char v56;
  __int16 v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  _WORD *v64;
  unsigned __int16 v65;
  unsigned int v66;
  uint64_t i;
  _OWORD *v68;
  void *v69;
  char __s[5];
  int v71;
  int v72;
  unsigned int v73;
  unsigned int v74;
  _BYTE __dst[9];
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v73 = -2;
  v71 = -2;
  v72 = -2;
  v16 = malloc_type_malloc(0xC1uLL, 0xE199C62DuLL);
  if (!v16
    || (v17 = v16, (v18 = malloc_type_malloc(0xFD00uLL, 0x2F1477D5uLL)) == 0)
    || (v19 = v18, (v69 = malloc_type_calloc(0xFD00uLL, 1uLL, 0x100004077774924uLL)) == 0)
    || (v68 = malloc_type_malloc(0x81uLL, 0x4A9FAB10uLL)) == 0)
  {
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      result = 8;
      *(_DWORD *)a8 = 8;
      v21 = 1030;
      goto LABEL_14;
    }
    return 8;
  }
  v74 = 0;
  if (SLOpen(a1, a2, &v72, 0) == 8
    || SLOpen(a1, a3, &v71, 0x602u) == 8
    || SLOpen(a1, a4, (int *)&v73, 0x602u) == 8)
  {
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      result = 8;
      *(_DWORD *)a8 = 8;
      v21 = 1012;
LABEL_14:
      *(_WORD *)(a8 + 4) = v21;
      return result;
    }
    return 8;
  }
  *a7 = 0;
  v22 = OpenOutputBuffer(a6);
  v23 = OpenOutputBuffer(a6);
  LOWORD(v24) = 0;
  if (!SLFRead(v72, 8, __dst, &v74) && v74 == 8)
  {
    v25 = 0;
    v24 = 0;
    v65 = 0;
    v26 = 0uLL;
    v64 = v23;
    while (1)
    {
      v66 = __dst[0];
      v62 = __dst[1];
      v27 = __dst[3] | __dst[2];
      v58 = __dst[5];
      v60 = __dst[4];
      v56 = __dst[6];
      v54 = __dst[7];
      *v68 = v26;
      v68[1] = v26;
      v68[2] = v26;
      v68[3] = v26;
      v68[4] = v26;
      v68[5] = v26;
      v68[6] = v26;
      v68[7] = v26;
      *((_BYTE *)v68 + 128) = 0;
      if (SLFRead(v72, v27, v68, &v74))
        break;
      v52 = v27;
      v28 = v62 | v66;
      if (SLFRead(v72, v62 | v66, v17, &v74))
        break;
      v29 = (v54 | v56);
      v30 = (v54 | v56);
      if (v52 >= 4)
        v31 = 4;
      else
        v31 = v52;
      v61 = (unsigned __int16)(v52 - (v58 | v60));
      v63 = v31;
      v57 = v28 + 2;
      v59 = v30 + 1;
      v55 = &v17[v29 + 1];
      v53 = ~v29 + v28;
      v32 = v64;
      v33 = v28;
      for (i = v28; ; v33 = i)
      {
        if (v25)
        {
          if ((_DWORD)v33)
          {
            v34 = v17;
            v23 = v32;
            do
            {
              v35 = *v34++;
              v36 = (unsigned __int16)v24++;
              v19[v36] = v35;
              --v33;
            }
            while (v33);
          }
          else
          {
            v23 = v32;
          }
        }
        else
        {
          bzero(v19, 0xFD00uLL);
          __strncpy_chk();
          __s[v63] = 0;
          strlen(__s);
          __strncat_chk();
          v37 = strlen(__s);
          if (SLFWrite(v71, v37, __s, &v74) == 8)
            goto LABEL_64;
          v38 = v24 + 1;
          v19[(unsigned __int16)v24] = *v17 & 0xC0;
          v39 = v61;
          if ((_DWORD)v61)
          {
            v41 = i;
            v40 = (char *)v68;
            v23 = v64;
            do
            {
              v42 = *v40++;
              v43 = v38 + 1;
              v19[(unsigned __int16)v38++] = v42;
              --v39;
            }
            while (v39);
          }
          else
          {
            v43 = v24 + 1;
            v23 = v64;
            v41 = i;
          }
          if (v59 >= v41)
          {
            v24 = v43;
          }
          else
          {
            v44 = v53;
            v45 = v55;
            do
            {
              v46 = *v45++;
              v24 = v43 + 1;
              v19[(unsigned __int16)v43++] = v46;
              --v44;
            }
            while (v44);
          }
          ++*a7;
          v25 = v57;
        }
        if (a6 >= (unsigned __int16)v24)
          break;
        compress_buffer((uint64_t)v19, (unsigned __int16)v24, (uint64_t)v23, (uint64_t)a5);
        if ((unsigned __int16)v23[4] < (unsigned __int16)(a6 - 2))
        {
          __memcpy_chk();
          v65 = v24;
          break;
        }
        v22[4] = 0;
        compress_buffer((uint64_t)v69, v65, (uint64_t)v22, (uint64_t)a5);
        LODWORD(v47) = (unsigned __int16)v22[4];
        if (v22[4])
        {
          v48 = 0;
          do
          {
            v19[v48] = *(_BYTE *)(*(_QWORD *)v22 + v48);
            ++v48;
            v47 = (unsigned __int16)v22[4];
          }
          while (v48 < v47);
        }
        if (v47 < a6)
          memset(&v19[v47], 255, (unsigned __int16)(~(_WORD)v47 + a6) + 1);
        if (SLFWrite(v73, a6, v19, &v74) == 8)
          goto LABEL_64;
        v32 = v23;
        v24 = 0;
        v25 = 0;
        v22[4] = 0;
      }
      *(_BYTE *)v68 = 0;
      if (SLFRead(v72, 8, __dst, &v74))
        v49 = 0;
      else
        v49 = v74 == 8;
      v26 = 0uLL;
      if (!v49)
        goto LABEL_58;
    }
    v23 = v64;
  }
LABEL_58:
  free(v68);
  free(v69);
  free(v17);
  SLClose(v72);
  v22[4] = 0;
  compress_buffer((uint64_t)v19, (unsigned __int16)v24, (uint64_t)v22, (uint64_t)a5);
  free(a5);
  LODWORD(v50) = (unsigned __int16)v22[4];
  if (v22[4])
  {
    v51 = 0;
    do
    {
      v19[v51] = *(_BYTE *)(*(_QWORD *)v22 + v51);
      ++v51;
      v50 = (unsigned __int16)v22[4];
    }
    while (v51 < v50);
  }
  if (v50 < a6)
    memset(&v19[v50], 255, (unsigned __int16)(~(_WORD)v50 + a6) + 1);
  if (SLFWrite(v73, a6, v19, &v74) == 8)
  {
LABEL_64:
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      result = 8;
      *(_DWORD *)a8 = 8;
      v21 = 1011;
      goto LABEL_14;
    }
    return 8;
  }
  free(v19);
  CloseOutputBuffer((uint64_t)v23);
  CloseOutputBuffer((uint64_t)v22);
  SLClose(v71);
  SLClose(v73);
  return 0;
}

uint64_t Add_Tables(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7, uint64_t a8, uint64_t a9, void *__buf, uint64_t a11)
{
  uint64_t result;
  __int16 v19;
  unsigned int v20;
  void *v21;
  void *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int v28;

  v27 = -2;
  v28 = -2;
  v26 = 0;
  if (SLOpen(a2, a3, &v27, 0x602u) != 8)
  {
    if (SLFWrite(v27, 1024, __buf, &v26) == 8)
    {
LABEL_3:
      if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
      {
        result = 8;
        *(_DWORD *)a11 = 8;
        v19 = 1011;
LABEL_10:
        *(_WORD *)(a11 + 4) = v19;
        return result;
      }
      return 8;
    }
    v20 = v26;
    *((_DWORD *)__buf + 175) = bswap32(v26);
    if (SLOpen(a2, a4, &v28, 0) != 8)
    {
      v21 = malloc_type_malloc(0xFD00uLL, 0x1A7ADCE8uLL);
      if (v21)
      {
        v22 = v21;
        while (SLFRead(v28, 64768, v22, &v26) != 8)
        {
          if (SLFWrite(v27, v26, v22, &v26) == 8)
            goto LABEL_3;
          v20 += v26;
          if (v26 != 64768)
          {
            SLClose(v28);
            v28 = -2;
            *((_BYTE *)__buf + 708) = HIBYTE(v20);
            *((_BYTE *)__buf + 709) = BYTE2(v20);
            *((_BYTE *)__buf + 710) = BYTE1(v20);
            *((_BYTE *)__buf + 711) = v20;
            if (SLOpen(a2, a5, &v28, 0) == 8)
              goto LABEL_7;
            v23 = v20;
            while (1)
            {
              if (SLFRead(v28, 64768, v22, &v26) == 8)
                goto LABEL_40;
              if (SLFWrite(v27, v26, v22, &v26) == 8)
                break;
              v23 += v26;
              if (v26 != 64768)
              {
                SLClose(v28);
                v28 = -2;
                *((_BYTE *)__buf + 716) = HIBYTE(v23);
                *((_BYTE *)__buf + 717) = BYTE2(v23);
                *((_BYTE *)__buf + 718) = BYTE1(v23);
                *((_BYTE *)__buf + 719) = v23;
                *((_BYTE *)__buf + 512) = (unsigned __int16)(v23 - v20) >> 8;
                *((_BYTE *)__buf + 513) = v23 - v20;
                if (SLOpen(a2, a6, &v28, 0) == 8)
                  goto LABEL_7;
                v24 = v23;
                while (SLFRead(v28, 64768, v22, &v26) != 8)
                {
                  if (SLFWrite(v27, v26, v22, &v26) == 8)
                  {
                    v25 = v27;
                    goto LABEL_46;
                  }
                  v24 += v26;
                  if (v26 != 64768)
                  {
                    SLClose(v28);
                    v28 = -2;
                    *((_BYTE *)__buf + 724) = HIBYTE(v24);
                    *((_BYTE *)__buf + 725) = BYTE2(v24);
                    *((_BYTE *)__buf + 726) = BYTE1(v24);
                    *((_BYTE *)__buf + 727) = v24;
                    *((_BYTE *)__buf + 490) = (unsigned __int16)(v24 - v23) >> 8;
                    *((_BYTE *)__buf + 491) = v24 - v23;
                    *a7 = 0;
                    *((_BYTE *)__buf + 732) = HIBYTE(v24);
                    *((_BYTE *)__buf + 733) = BYTE2(v24);
                    *((_BYTE *)__buf + 734) = BYTE1(v24);
                    *((_BYTE *)__buf + 735) = v24;
                    if (SLOpen(a2, a8, &v28, 0) == 8)
                      goto LABEL_7;
                    while (SLFRead(v28, 64768, v22, &v26) != 8)
                    {
                      if (SLFWrite(v27, v26, v22, &v26) == 8)
                        goto LABEL_45;
                      v24 += v26;
                      if (v26 != 64768)
                      {
                        SLClose(v28);
                        v28 = -2;
                        *((_BYTE *)__buf + 740) = HIBYTE(v24);
                        *((_BYTE *)__buf + 741) = BYTE2(v24);
                        *((_BYTE *)__buf + 742) = BYTE1(v24);
                        *((_BYTE *)__buf + 743) = v24;
                        if (a1 != 1)
                        {
LABEL_36:
                          free(v22);
                          SLClose(v27);
                          return 0;
                        }
                        if (SLOpen(a2, a9, &v28, 0) == 8)
                          goto LABEL_7;
                        while (SLFRead(v28, 64768, v22, &v26) != 8)
                        {
                          if (SLFWrite(v27, v26, v22, &v26) == 8)
                            goto LABEL_3;
                          if (v26 != 64768)
                          {
                            SLClose(v28);
                            v28 = -2;
                            goto LABEL_36;
                          }
                        }
                        goto LABEL_41;
                      }
                    }
                    goto LABEL_41;
                  }
                }
LABEL_40:
                SLClose(v28);
                goto LABEL_41;
              }
            }
LABEL_45:
            v25 = v28;
LABEL_46:
            SLClose(v25);
            goto LABEL_3;
          }
        }
LABEL_41:
        if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
        {
          result = 8;
          *(_DWORD *)a11 = 8;
          v19 = 1010;
          goto LABEL_10;
        }
      }
      else if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
      {
        result = 8;
        *(_DWORD *)a11 = 8;
        v19 = 1030;
        goto LABEL_10;
      }
      return 8;
    }
  }
LABEL_7:
  if (!*(_WORD *)(a11 + 4) || *(int *)a11 <= 7)
  {
    result = 8;
    *(_DWORD *)a11 = 8;
    v19 = 1012;
    goto LABEL_10;
  }
  return 8;
}

uint64_t Update_Header(char a1, char a2, __int16 a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  uint64_t result;
  __int16 v16;
  int v17;
  int v18;
  unsigned int v19;

  v18 = -2;
  v19 = 0;
  if (SLOpen(a5, a6, &v18, 2u) == 8)
  {
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      result = 8;
      *(_DWORD *)a8 = 8;
      v16 = 1012;
LABEL_9:
      *(_WORD *)(a8 + 4) = v16;
      return result;
    }
  }
  else
  {
    strcpy((char *)a7, "Copyright [c] 1998  L & H Inc.      \x1A");
    *(_BYTE *)(a7 + 37) = 26;
    strcpy((char *)(a7 + 414), "#HEADER COMP START");
    *(_WORD *)(a7 + 384) = 3072;
    *(_BYTE *)(a7 + 386) = 0;
    *(_BYTE *)(a7 + 387) = a2;
    *(_DWORD *)(a7 + 388) = 0;
    *(_BYTE *)(a7 + 392) = HIBYTE(a4);
    *(_BYTE *)(a7 + 393) = a4;
    *(_DWORD *)(a7 + 394) = 512;
    *(_WORD *)(a7 + 404) = 0;
    *(_WORD *)(a7 + 446) = 0;
    *(_WORD *)(a7 + 488) = 0;
    *(_DWORD *)(a7 + 478) = 0;
    *(_QWORD *)(a7 + 492) = 0;
    *(_WORD *)(a7 + 500) = 1024;
    *(_BYTE *)(a7 + 502) = HIBYTE(a3);
    *(_BYTE *)(a7 + 503) = a3;
    *(_WORD *)(a7 + 504) = 0x8000;
    *(_BYTE *)(a7 + 748) = 0;
    *(_DWORD *)(a7 + 506) = 0;
    *(_WORD *)(a7 + 510) = 0;
    *(_QWORD *)(a7 + 514) = 0;
    *(_DWORD *)(a7 + 522) = 0;
    *(_BYTE *)(a7 + 749) = a1;
    *(_BYTE *)(a7 + 756) = a9[5];
    *(_BYTE *)(a7 + 757) = a9[4];
    *(_BYTE *)(a7 + 768) = (char)a9[6] >> 7;
    *(_BYTE *)(a7 + 769) = a9[6];
    *(_BYTE *)(a7 + 760) = 0;
    *(_WORD *)(a7 + 761) = a9[7];
    *(_BYTE *)(a7 + 763) = a9[8];
    v17 = SLFWrite(v18, 1024, (void *)a7, &v19);
    result = 0;
    if (v17 != 8)
      return result;
    if (!*(_WORD *)(a8 + 4) || *(int *)a8 <= 7)
    {
      result = 8;
      *(_DWORD *)a8 = 8;
      v16 = 1011;
      goto LABEL_9;
    }
  }
  return 8;
}

uint64_t isLowerCaseX(int a1, int a2)
{
  uint64_t v5;
  _BOOL4 v6;
  int v7;

  if (a2 > 1279)
  {
    if (a2 != 1284 && a2 != 1280)
      return (a1 - 97) < 0x1A;
    v6 = (a1 - 154) < 5 && (a1 & 1) == 0;
    v7 = (a1 - 223) < 0x18 || v6;
    if ((a1 - 97) >= 0x1A)
      LODWORD(v5) = v7;
    else
      LODWORD(v5) = 1;
    if (a1 <= 247)
      return v5;
    else
      return 1;
  }
  else
  {
    if (a2 != 514)
    {
      if (a2 == 517)
        return (a1 - 97) < 0x1A
            || (a1 - 208) < 0x20
            || (a1 - 241) < 0xC
            || a1 > 253;
      return (a1 - 97) < 0x1A;
    }
    v5 = 1;
    if ((a1 - 97) >= 0x1A
      && (a1 - 223) >= 0x18
      && ((a1 - 177) > 0xE || ((1 << (a1 + 79)) & 0x6F35) == 0))
    {
      return (a1 - 248) < 7;
    }
  }
  return v5;
}

uint64_t isAnyAlphaX_0(int a1, int a2)
{
  _BOOL4 v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  unsigned int v13;

  if (a2 > 1279)
  {
    if (a2 != 1284 && a2 != 1280)
      return (a1 & 0xFFFFFFDF) - 65 < 0x1A;
    v6 = (a1 & 0xFFFFFFDF) - 65;
    v7 = a1 - 192;
    v8 = a1 - 216;
    v9 = a1 + 118;
    v10 = (a1 - 138) >= 0x16;
    v11 = 3473429;
  }
  else
  {
    if (a2 != 514)
    {
      if (a2 == 517)
      {
        v3 = (a1 - 241) < 0xC || (a1 & 0xFFFFFFFE) == 254;
        v4 = (a1 & 0xFFFFFFDF) - 65 < 0x1A || v3;
        if ((a1 - 161) < 0xC)
          v4 = 1;
        if ((a1 - 174) >= 0x42)
          return v4;
        else
          return 1;
      }
      return (a1 & 0xFFFFFFDF) - 65 < 0x1A;
    }
    v6 = (a1 & 0xFFFFFFDF) - 65;
    v7 = a1 - 192;
    v8 = a1 - 216;
    v9 = a1 + 95;
    v10 = (a1 - 161) >= 0x1F;
    v11 = 1865772853;
  }
  v12 = (v11 >> v9) & 1;
  if (v10)
    v12 = 0;
  if (v6 >= 0x1A)
    v13 = v12;
  else
    v13 = 1;
  if (v7 < 0x17)
    v13 = 1;
  if (v8 < 0x1F)
    v13 = 1;
  if (a1 <= 247)
    return v13;
  else
    return 1;
}

uint64_t toLowerX_0(uint64_t result, int a2)
{
  if (a2 <= 1279)
  {
    if (a2 == 514)
    {
      if ((result - 65) >= 0x1A
        && (result - 192) >= 0x17
        && ((result - 161) > 0x3D || ((1 << (result + 95)) & 0x3F80000000006F35) == 0))
      {
        return result;
      }
      if ((result - 161) < 0xF && ((0x6F35u >> (result + 95)) & 1) != 0)
        return dword_1DE2EFC8C[(int)result - 161];
      return (result + 32);
    }
    if (a2 == 517)
    {
      if ((result - 65) >= 0x1A && (result - 176) > 0x1F)
      {
        if ((result & 0xFFFFFFFE) != 0xAE && (result - 161) >= 0xC)
          return result;
        else
          return (result + 80);
      }
      return (result + 32);
    }
LABEL_32:
    if ((result - 65) >= 0x1A)
      return result;
    else
      return (result + 32);
  }
  if (a2 != 1284)
  {
    if (a2 != 1280)
      goto LABEL_32;
    if ((result - 65) >= 0x1A && (result - 192) >= 0x17)
    {
      if ((result - 216) < 7)
        return (result + 32);
      goto LABEL_44;
    }
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
      return (result + 32);
LABEL_46:
    if ((_DWORD)result == 159)
      return 255;
    else
      return (result + 16);
  }
  if ((result - 65) < 0x1A || (result - 192) < 0x17)
  {
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
    {
      if ((_DWORD)result == 73)
        return 253;
      return (result + 32);
    }
    goto LABEL_46;
  }
  if ((int)result <= 215)
  {
LABEL_44:
    if ((result - 138) > 0x15 || ((1 << (result + 118)) & 0x200015) == 0)
      return result;
    goto LABEL_46;
  }
  if ((result - 216) < 5)
    return (result + 32);
  if ((_DWORD)result == 221)
    return 105;
  if ((_DWORD)result == 222)
    return (result + 32);
  return result;
}

void sub_1DE2943E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void sub_1DE2954D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 256), 8);
  _Block_object_dispose(&STACK[0x230], 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

uint64_t PDExtSort(unsigned int a1, int a2, unsigned int a3, int a4, int a5, _BYTE *a6, int a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char *v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _DWORD *v26;
  _BYTE *v27;
  _BYTE *v28;
  unsigned __int16 *v29;
  _WORD *v30;
  uint64_t result;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned __int16 v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v41;
  char *v42;
  char v43;
  int v44;
  uint64_t v45;
  __int16 *v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  _WORD *v50;
  unint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int16 v56;
  uint64_t v57;
  _WORD *v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v66;
  __int16 *v67;
  _WORD *v68;
  int v69;
  unsigned __int16 *__b;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  __int16 v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned __int16 v79;
  int v80;
  _DWORD *v81;
  _BYTE *v82;
  char *__src;
  __int16 *v84;
  int v85;
  uint64_t v86;
  unsigned __int8 __buf;
  unsigned __int8 v88;
  char v89;
  __int16 v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  char v95[257];
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v90 = 0;
  v18 = (char *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v18)
    return 1030;
  v19 = v18;
  v20 = (unsigned __int8 *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v20)
    return 1030;
  v21 = v20;
  v86 = a8;
  v22 = (char *)malloc_type_calloc(0x882uLL, 1uLL, 0x100004077774924uLL);
  if (!v22)
    return 1030;
  v23 = v22;
  v24 = (char *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v24)
    return 1030;
  __src = v24;
  v25 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
  if (!v25)
    return 1030;
  v82 = v25;
  v26 = malloc_type_calloc(0x3F40uLL, 1uLL, 0x100004077774924uLL);
  if (!v26)
    return 1030;
  v81 = v26;
  v80 = a5;
  v27 = malloc_type_malloc(0xFD00uLL, 0x5800E593uLL);
  if (!v27)
    return 1030;
  v28 = v27;
  v84 = (__int16 *)malloc_type_calloc(0x7E80uLL, 2uLL, 0x1000040BDFB0063uLL);
  if (!v84)
    return 1030;
  v29 = (unsigned __int16 *)malloc_type_calloc(0x7E80uLL, 2uLL, 0x1000040BDFB0063uLL);
  if (!v29)
    return 1030;
  __b = v29;
  v30 = malloc_type_calloc(0x3F40uLL, 2uLL, 0x1000040BDFB0063uLL);
  if (!v30)
    return 1030;
  v71 = (uint64_t)a6;
  v72 = a10 & 7;
  v68 = v30;
  if (v72 == 2)
  {
    result = SLSeek(a1, a2, 0);
    if ((_DWORD)result == 8)
      return result;
  }
  else
  {
    a2 = 0;
  }
  if (a3)
  {
    v74 = 0;
    if ((a10 & 0x38) == 0x10)
    {
      v32 = a4;
    }
    else
    {
      a2 = 0;
      v32 = 0;
    }
    v69 = v32;
    v33 = 1;
  }
  else
  {
    v69 = 0;
    v33 = 0;
    v74 = 1;
  }
  v93 = a2;
  v94 = 0;
  v91 = 0;
  v92 = 0;
  *v21 = 0;
  v95[0] = 0;
  if (SLtmpnam(a6, v95) == 8)
    return 1019;
  if (SLOpen((uint64_t)a6, (uint64_t)v95, &v94, 0x602u) == 8)
    return 1012;
  v78 = v33;
  v85 = 0;
  v34 = 0;
  v35 = 0;
LABEL_26:
  v36 = 0;
  v37 = 0;
  v66 = v34;
  v73 = (unsigned __int16)v34;
LABEL_27:
  if (SLFpos(v94, &v92) == 8)
    return 1010;
  v81[v73] = v92;
  if (!v85)
  {
    v85 = 0;
    v76 = v78;
    goto LABEL_34;
  }
  if (!v74)
  {
    if (v78 == 1)
    {
      v85 = 0;
      v93 = v69;
      v74 = 1;
      v76 = 0;
      a1 = a3;
      LOBYTE(v72) = (a10 >> 3) & 7;
    }
    else
    {
      v74 = 0;
      v76 = 0;
      v85 = 1;
    }
    while (1)
    {
LABEL_34:
      while (v35)
      {
        v35 = 0;
        LOWORD(v38) = strlen(v23);
        if ((_WORD)v38)
          goto LABEL_45;
      }
      if (PDGets((unsigned __int8 *)v23, 2177, &v93, a1) == 8)
      {
        v35 = 0;
        v85 = 1;
        goto LABEL_55;
      }
      v35 = 0;
      v38 = (unsigned __int16)strlen(v23);
      if (v38)
      {
        while (1)
        {
          v39 = v23[(v38 - 1)];
          if (v39 != 13 && v39 != 10)
            break;
          LODWORD(v38) = v38 - 1;
          if (!(_WORD)v38)
          {
            v35 = 0;
            goto LABEL_34;
          }
        }
LABEL_45:
        v41 = (unsigned __int16)v38;
        v23[(unsigned __int16)v38] = 0;
        if (((unsigned __int16)(v38 + v37) >> 8) > 0xFCu)
        {
          v35 = 1;
LABEL_55:
          v78 = 1;
          if (!v76)
          {
            if (PDsdsort((uint64_t)v28, v84, v36, v72, v86))
              return 1030;
            if (v36)
            {
              v45 = v36;
              v46 = v84;
              do
              {
                v77 = v45;
                v67 = v46 + 1;
                __strcpy_chk();
                v47 = strlen(__src);
                v79 = v47;
                if (a7)
                {
                  SLchcnv(__src, v47, (unsigned __int8 *)__src, 0, a9);
                  v47 = v79;
                }
                v89 = 0;
                __buf = HIBYTE(v47);
                v88 = v47;
                if (SLFWrite(v94, 2, &__buf, (unsigned int *)&v91 + 1) == 8
                  || SLFWrite(v94, v79, __src, (unsigned int *)&v91 + 1) == 8)
                {
                  return 1011;
                }
                v45 = v77 - 1;
                v46 = v67;
              }
              while (v77 != 1);
            }
            v78 = 0;
            v34 = v66 + 1;
            v68[v73] = v36;
            goto LABEL_26;
          }
          goto LABEL_27;
        }
        v84[v36] = v37;
        __strcpy_chk();
        if ((_DWORD)v41)
        {
          v42 = v19;
          do
          {
            v43 = *v42++;
            v44 = v37 + 1;
            v28[(unsigned __int16)v37++] = v43;
            --v41;
          }
          while (v41);
        }
        else
        {
          v44 = v37;
        }
        v35 = 0;
        ++v36;
        v37 = v44 + 1;
        v28[(unsigned __int16)v44] = 0;
        if ((((unsigned __int16)(v36 >> 7) < 0xFDu) & ~v85) == 0)
          goto LABEL_55;
      }
    }
  }
  *v82 = 0;
  SLClose(v94);
  if (SLOpen(v71, (uint64_t)v95, &v94, 2u) == 8)
    return 1012;
  *v21 = 0;
  if ((_WORD)v66)
  {
    memset(__b, 255, 2 * v73);
    bzero(v28, 0xFD00uLL);
    v48 = 0;
    *v21 = 0;
    v49 = v66;
    v50 = v68;
    while (1)
    {
      if (v50[v48])
      {
        if (SLSeek(v94, v81[v48], 0) == 8
          || SLFRead(v94, 2177, __src, (unsigned int *)&v91 + 1) == 8)
        {
          return 1010;
        }
        __buf = *__src;
        v88 = __src[1];
        v89 = 0;
        v51 = v88 | ((unint64_t)__buf << 8);
        __memcpy_chk();
        __src[v51] = 0;
        v52 = v68[v48] - 1;
        if (v68[v48] == 1)
          --v49;
        else
          v81[v48] += v51 + 2;
        v68[v48] = v52;
        if (v51 > 0x881)
          return 5109;
        strcpy(&v28[(unsigned __int16)(2177 * v48)], __src);
        __b[v48] = v48;
        v50 = v68;
      }
      if (++v48 == v73)
        goto LABEL_79;
    }
  }
  bzero(v28, 0xFD00uLL);
  v49 = 0;
  v50 = v68;
LABEL_79:
  v75 = v49;
  v53 = 0;
  *v21 = 0;
  v54 = *__b;
  do
  {
    if (!v50[v54])
    {
      *v21 = 0;
      if ((_WORD)v66)
      {
        v60 = 0;
        while (1)
        {
          if (v68[v60])
          {
            if (SLSeek(v94, v81[v60], 0) == 8
              || SLFRead(v94, 129, __src, (unsigned int *)&v91 + 1) == 8)
            {
              return 1010;
            }
            __buf = *__src;
            v88 = __src[1];
            v89 = 0;
            v61 = v88 | ((unint64_t)__buf << 8);
            __memcpy_chk();
            __src[v61] = 0;
            if (!*v21)
              goto LABEL_104;
            if (PDsdcmp(__src, v21, v72, v86, &v90))
              return 1030;
            if (v90 <= 0)
            {
LABEL_104:
              v53 = (unsigned __int16)v60;
              __strcpy_chk();
            }
          }
          ++v60;
          v54 = v53;
          if ((unsigned __int16)v66 == v60)
            goto LABEL_81;
        }
      }
      v54 = v53;
    }
LABEL_81:
    if (SLSeek(v94, v81[v54], 0) == 8
      || SLFRead(v94, 2177, v23, (unsigned int *)&v91 + 1) == 8)
    {
      return 1010;
    }
    __buf = *v23;
    v88 = v23[1];
    v89 = 0;
    v55 = v88 | ((unint64_t)__buf << 8);
    __memcpy_chk();
    v23[v55] = 0;
    v56 = v68[v54] - 1;
    if (v68[v54] == 1)
      --v75;
    else
      v81[v54] += v55 + 2;
    v68[v54] = v56;
    if ((_WORD)v66)
    {
      v57 = 0;
      v58 = __b;
      while (!PDsdcmp(&v28[(unsigned __int16)v57], (unsigned __int8 *)v23, v72, v86, &v90))
      {
        if (v90 <= 0)
        {
          v53 = (unsigned __int16)*v58;
          __strcpy_chk();
          if (v55 > 0x881)
            return 5109;
          strcpy(&v28[(unsigned __int16)v57], v23);
          *v58 = v54;
          __strcpy_chk();
          v54 = v53;
        }
        v57 += 2177;
        ++v58;
        if (2177 * (unsigned __int16)v66 == v57)
          goto LABEL_93;
      }
      return 1030;
    }
LABEL_93:
    __strcat_chk();
    v59 = strlen(v23);
    if (SLFWrite(v80, v59, v23, (unsigned int *)&v91) == 8)
      return 1011;
    v50 = v68;
  }
  while (v75);
  if ((_WORD)v66)
  {
    v62 = 2177 * (unsigned __int16)v66 + 63359;
    v63 = (unsigned __int16)v66 - 1;
    do
    {
      __strcpy_chk();
      __strcat_chk();
      v64 = strlen(__src);
      if (SLFWrite(v80, v64, __src, (unsigned int *)&v91) == 8)
        return 1011;
      v62 -= 2177;
    }
    while ((unint64_t)(unsigned __int16)v63--);
  }
  result = SLSeek(v80, 0, 0);
  if ((_DWORD)result != 8)
  {
    SLClose(v94);
    SLremove();
    free(v19);
    free(v21);
    free(v23);
    free(__src);
    free(v82);
    free(v28);
    free(v84);
    free(__b);
    free(v68);
    free(v81);
    return 0;
  }
  return result;
}

uint64_t PDsdsort(uint64_t a1, __int16 *a2, unsigned int a3, int a4, uint64_t a5)
{
  unsigned __int16 v10;
  unsigned __int16 v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  int v16;

  if (a3 < 2)
    return 0;
  v10 = a3 - 1;
  if ((((_WORD)a3 - 2) & 0x8000) != 0)
  {
LABEL_7:
    v13 = v10;
    while (v13)
    {
      v14 = *a2;
      *a2 = a2[v13];
      v15 = v13 - 1;
      a2[v13] = v14;
      v16 = DownHeap(0, (unsigned __int16)(v13 - 1), a4, (uint64_t)a2, a1, a5);
      v13 = v15;
      if (v16)
        return 1030;
    }
    return 0;
  }
  else
  {
    v11 = (unsigned __int16)(a3 - 2) >> 1;
    while (!DownHeap(v11, v10, a4, (uint64_t)a2, a1, a5))
    {
      v12 = (__int16)v11--;
      if (v12 <= 0)
        goto LABEL_7;
    }
    return 1030;
  }
}

uint64_t PDsdcmp(char *__s, unsigned __int8 *a2, int a3, uint64_t a4, _WORD *a5)
{
  char *v7;
  uint64_t result;
  unsigned __int16 v10;
  _BYTE *v11;
  _BYTE *v12;
  unsigned __int16 v13;
  unsigned __int8 *v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;
  unsigned int v24;
  char v25;
  unsigned __int16 v26;
  int v27;
  int v28;
  int v29;
  int v30;

  v7 = __s;
  v30 = 0;
  if (a3 == 3)
  {
    PDatoi((unsigned __int8 *)__s, (_WORD *)&v30 + 1);
    PDatoi(a2, &v30);
    result = 0;
    *a5 = v30 - HIWORD(v30);
  }
  else
  {
    v10 = strlen(__s);
    v11 = malloc_type_calloc(v10 + 1, 1uLL, 0x100004077774924uLL);
    if (v11
      && (v12 = v11,
          v13 = strlen((const char *)a2),
          (v14 = (unsigned __int8 *)malloc_type_calloc(v13 + 1, 1uLL, 0x100004077774924uLL)) != 0))
    {
      v15 = v14;
      if (v10)
      {
        v16 = v10;
        v17 = v12;
        do
        {
          v19 = *v7++;
          v18 = v19;
          v20 = v19 + 32;
          if ((*(_DWORD *)(a4 + 4 * v19) & 0x40000000) != 0)
            v18 = v20;
          *v17++ = v18;
          --v16;
        }
        while (v16);
      }
      if (v13)
      {
        v21 = v13;
        v22 = v14;
        do
        {
          v24 = *a2++;
          v23 = v24;
          v25 = v24 + 32;
          if ((*(_DWORD *)(a4 + 4 * v24) & 0x40000000) != 0)
            v23 = v25;
          *v22++ = v23;
          --v21;
        }
        while (v21);
      }
      v26 = 0;
      v27 = 0;
      while (2)
      {
        v28 = v12[v26];
        while (1)
        {
          v29 = v14[(unsigned __int16)v27];
          if (v28 == v29)
            break;
          if (v28 == 61)
            goto LABEL_23;
          if (v29 != 61)
            goto LABEL_26;
          ++v27;
        }
        if (v12[v26])
        {
          ++v27;
LABEL_23:
          ++v26;
          continue;
        }
        break;
      }
      LOWORD(v29) = 0;
LABEL_26:
      *a5 = v28 - v29;
      free(v12);
      free(v15);
      return 0;
    }
    else
    {
      return 1030;
    }
  }
  return result;
}

uint64_t PDreadHead(char *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  char v9;
  __int16 v10;
  int v11;
  int v12;
  __int16 v13;
  int v14;
  _WORD *v16;
  int v17;

  v4 = malloc_type_malloc(0x41uLL, 0xC9090E67uLL);
  if (!v4)
    return 8;
  v5 = v4;
  v6 = strlen(a1);
  if (v6 << 16 <= -65537)
  {
LABEL_3:
    free(v5);
    return 8;
  }
  v7 = 0;
  v17 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = (__int16)v6;
  v16 = (_WORD *)(a2 + 4);
  LOWORD(v12) = -1;
  do
  {
    v13 = v12;
    v12 = v7;
    if (v9 > 0x17)
      goto LABEL_13;
    if (((1 << v9) & 0xAAAAAA) != 0)
    {
      if (a1[(__int16)v7] != 35)
        goto LABEL_13;
      ++v8;
    }
    else if (((1 << v9) & 0x555554) != 0)
    {
      v10 = v7;
    }
    else
    {
      if (a1[(__int16)v7] != 35)
        goto LABEL_3;
      ++v8;
      v10 = v13 + 2;
    }
    if (v9 >= 23)
    {
      free(v5);
      return 303;
    }
    ++v9;
LABEL_13:
    switch(v9)
    {
      case 2:
        if (SLstrncmp("#HEADER START", (unsigned __int8 *)a1, 13))
          goto LABEL_3;
        v9 = 2;
        break;
      case 4:
        v14 = v17;
        if (a1[v10] < 0x32u)
          v14 = 1;
        v17 = v14;
        v9 = 4;
        break;
      case 6:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (_BYTE *)(a2 + 1));
        v9 = 6;
        break;
      case 8:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (_BYTE *)(a2 + 2));
        v9 = 8;
        break;
      case 10:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (_BYTE *)(a2 + 3));
        v9 = 10;
        break;
      case 12:
        *(_BYTE *)a2 = a1[v10];
        if ((_BYTE)v17)
        {
          *(_BYTE *)(a2 + 8) = 0;
          *(_DWORD *)v16 = 0;
          goto LABEL_24;
        }
        v9 = 12;
        break;
      case 14:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatoi((unsigned __int8 *)v5, v16);
        v9 = 14;
        break;
      case 16:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (_BYTE *)(a2 + 6));
        v9 = 16;
        break;
      case 18:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (_BYTE *)(a2 + 7));
        v9 = 18;
        break;
      case 20:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatoi((unsigned __int8 *)v5, (_WORD *)(a2 + 10));
        v9 = 20;
        break;
      case 22:
LABEL_24:
        __strncpy_chk();
        *((_BYTE *)v5 + (__int16)v12 - (uint64_t)v10) = 0;
        PDatobyte((unsigned __int8 *)v5, (_BYTE *)(a2 + 8));
        v9 = 22;
        break;
      case 23:
        if (SLstrncmp("HEADER END#", (unsigned __int8 *)&a1[v10], 11))
          goto LABEL_3;
        v9 = 23;
        break;
      default:
        break;
    }
    v7 = v12 + 1;
  }
  while (v11 >= (__int16)v12);
  free(v5);
  if ((char)v8 <= 23)
    return 8;
  return 0;
}

uint64_t DownHeap(unsigned int a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  __int16 v18;
  int v19;
  uint64_t v20;
  uint64_t result;
  __int16 v22;
  unsigned __int8 *v25;
  unsigned int v26;
  __int16 v27;

  v7 = a1;
  v27 = 0;
  v8 = *(unsigned __int16 *)(a4 + 2 * a1);
  v9 = (__int16)(a2 - 1) >> 1;
  if (a1 > (unsigned __int16)((__int16)(a2 - 1) >> 1))
  {
    v10 = a1;
    goto LABEL_34;
  }
  v13 = 0;
  v22 = *(_WORD *)(a4 + 2 * a1);
  v25 = (unsigned __int8 *)(a5 + v8);
  v26 = a3 - 1;
  while (1)
  {
    v14 = a2 >= ((unsigned __int16)(2 * v7) | 1u)
        ? (unsigned __int8 *)(a5 + *(unsigned __int16 *)(a4 + 2 * ((unsigned __int16)(2 * v7) | 1u)))
        : 0;
    v15 = a2 >= (unsigned __int16)(2 * v7 + 2)
        ? (unsigned __int8 *)(a5 + *(unsigned __int16 *)(a4 + 2 * (unsigned __int16)(2 * v7 + 2)))
        : 0;
    if (v26 < 2)
      break;
    if (a3 == 3)
    {
      v19 = IntCmp((uint64_t)v14, (uint64_t)v15);
      if (v19 <= 0)
        v13 = 2 * v7 + 2;
      else
        v13 = (2 * v7) | 1;
      if (v19 <= 0)
        v20 = (uint64_t)v15;
      else
        v20 = (uint64_t)v14;
      v18 = IntCmp((uint64_t)v25, v20);
      v27 = v18;
      goto LABEL_28;
    }
LABEL_29:
    v10 = (unsigned __int16)v13;
    *(_WORD *)(a4 + 2 * (unsigned __int16)v7) = *(_WORD *)(a4 + 2 * (unsigned __int16)v13);
    v7 = v13;
    if ((unsigned __int16)v13 > (unsigned __int16)v9)
      goto LABEL_33;
  }
  if (AsciiCmp(v14, v15, a6, &v27))
    return 1030;
  v16 = v27;
  v17 = v27 <= 0 ? v15 : v14;
  if (AsciiCmp(v25, v17, a6, &v27))
    return 1030;
  if (v16 <= 0)
    v13 = 2 * v7 + 2;
  else
    v13 = (2 * v7) | 1;
  v18 = v27;
LABEL_28:
  if (v18 < 1)
    goto LABEL_29;
  v10 = (unsigned __int16)v7;
LABEL_33:
  LOWORD(v8) = v22;
LABEL_34:
  result = 0;
  *(_WORD *)(a4 + 2 * v10) = v8;
  return result;
}

uint64_t AsciiCmp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, _WORD *a4)
{
  _BYTE *v8;
  _BYTE *v9;
  unsigned __int8 *v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  int v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  int v20;
  int v21;
  uint64_t result;

  if (a1 && a2)
  {
    v8 = malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL);
    if (v8 && (v9 = v8, (v10 = (unsigned __int8 *)malloc_type_calloc(0x881uLL, 1uLL, 0x100004077774924uLL)) != 0))
    {
      v11 = v10;
      v12 = *a1;
      if (*a1)
      {
        v13 = 0;
        v14 = 0;
        do
        {
          if ((*(_DWORD *)(a3 + 4 * v12) & 0x40000000) != 0)
            v12 += 32;
          v9[v13] = v12;
          v13 = (unsigned __int16)++v14;
          v12 = a1[(unsigned __int16)v14];
        }
        while (v12);
      }
      v15 = *a2;
      if (*a2)
      {
        v16 = 0;
        v17 = 0;
        do
        {
          if ((*(_DWORD *)(a3 + 4 * v15) & 0x40000000) != 0)
            v15 += 32;
          v10[v16] = v15;
          v16 = (unsigned __int16)++v17;
          v15 = a2[(unsigned __int16)v17];
        }
        while (v15);
      }
      v18 = *v9;
      if (*v9)
      {
        v19 = 0;
        v20 = 0;
        while (1)
        {
          v21 = v10[v19];
          if (!v10[v19])
            goto LABEL_29;
          if (v18 == v21)
            break;
          if (v18 != 61)
          {
            if (v21 != 61)
              goto LABEL_29;
            goto LABEL_23;
          }
          ++v20;
LABEL_24:
          v18 = v9[(unsigned __int16)v20];
          if (!v9[(unsigned __int16)v20])
            goto LABEL_29;
        }
        ++v20;
LABEL_23:
        ++v19;
        goto LABEL_24;
      }
      v19 = 0;
LABEL_29:
      *a4 = v18 - v10[v19];
      free(v9);
      free(v11);
      return 0;
    }
    else
    {
      return 1030;
    }
  }
  else
  {
    result = 0;
    *a4 = 1;
  }
  return result;
}

uint64_t IntCmp(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  __int16 v4;
  __int16 v5;
  unsigned __int8 v6[65];
  unsigned __int8 v7[65];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v2 = 1;
  if (a1 && a2)
  {
    v5 = 0;
    v4 = 0;
    __strcpy_chk();
    __strcpy_chk();
    PDatoi(v7, &v5);
    PDatoi(v6, &v4);
    return (__int16)(v4 - v5);
  }
  return v2;
}

uint64_t PDngrams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  char *v16;
  void *v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  unsigned __int16 v25;
  BOOL v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  char *v36;
  int v37;
  _BYTE *v38;
  uint64_t v39;
  _WORD *v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  char v56;
  unsigned __int8 *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char v68;
  uint64_t v69;
  int v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char v74;
  _WORD *v76;
  int v77;
  int v78[2];
  unsigned int v79;
  _BYTE __dst[4];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  void *v85;

  v79 = 0;
  *(_QWORD *)v78 = 0;
  v77 = 0;
  if (SLOpen(a1, a2, v78, 0) == 8 || SLOpen(a3, a4, &v77, 0x602u) == 8)
    return 1012;
  v85 = 0;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v7 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *(_QWORD *)&v82 = v7;
  if (!v7)
    goto LABEL_45;
  v8 = v7;
  v9 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *((_QWORD *)&v82 + 1) = v9;
  if (!v9)
    goto LABEL_45;
  v10 = v9;
  v11 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *(_QWORD *)&v83 = v11;
  if (!v11)
    goto LABEL_45;
  v12 = v11;
  v13 = malloc_type_calloc(1uLL, 0x7530uLL, 0x100004077774924uLL);
  *((_QWORD *)&v83 + 1) = v13;
  if (!v13)
    goto LABEL_45;
  v14 = v13;
  v15 = (char *)malloc_type_calloc(1uLL, 0x8000uLL, 0x40F47596uLL);
  v85 = v15;
  if (!v15)
    goto LABEL_45;
  v16 = v15;
  v17 = malloc_type_calloc(1uLL, 0x4000uLL, 0x1000040BDFB0063uLL);
  *(_QWORD *)&v81 = v17;
  if (!v17
    || (v18 = (uint64_t)v17,
        v19 = malloc_type_calloc(1uLL, 0x4000uLL, 0x1000040BDFB0063uLL),
        (*(_QWORD *)&v84 = v19) == 0)
    || (v20 = v19,
        v21 = (char *)malloc_type_calloc(1uLL, 0x4000uLL, 0x100004077774924uLL),
        (*((_QWORD *)&v84 + 1) = v21) == 0))
  {
LABEL_45:
    v42 = v77;
    v41 = v78[0];
    v6 = 1030;
LABEL_46:
    clean_up(1030, (uint64_t)&v81, v41, v42);
    return v6;
  }
  v22 = v21;
  v23 = malloc_type_calloc(1uLL, 0x4000uLL, 0x100004077774924uLL);
  *((_QWORD *)&v81 + 1) = v23;
  if (!v23)
  {
    v42 = v77;
    v6 = 1030;
    v41 = v78[0];
    goto LABEL_46;
  }
  v24 = (uint64_t)v23;
  v76 = v20;
  v25 = 0;
  if (SLFRead(v78[0], 4, __dst, &v79) != 8 && v79 == 4)
  {
    v25 = 0;
    do
    {
      v8[(__int16)++v25] = __dst[0];
      v10[(__int16)v25] = __dst[1];
      v12[(__int16)v25] = __dst[2];
      v14[(__int16)v25] = __dst[3];
      v26 = SLFRead(v78[0], 4, __dst, &v79) != 8 && v79 == 4;
    }
    while (v26);
  }
  v27 = (__int16)(v25 + 1);
  v8[v27] = -1;
  v10[v27] = -1;
  v12[v27] = -1;
  v14[v27] = -1;
  v22[1] = v8[1];
  v22[2] = v10[1];
  *(_BYTE *)(v24 + 1) = v12[1];
  *(_BYTE *)(v24 + 2) = v14[1];
  v28 = 1;
  LOWORD(v29) = 1;
  if ((__int16)(v25 + 1) >= 2)
  {
    v30 = 0;
    LODWORD(v31) = (__int16)(v25 + 2);
    if ((int)v31 <= 3)
      v31 = 3;
    else
      v31 = v31;
    v32 = 2;
    LOWORD(v29) = 1;
    v28 = 1;
    do
    {
      v33 = v12[v32];
      v34 = v14[v32];
      v35 = v8[v32];
      if (v35 == v22[2 * (__int16)v28 - 1] && v10[v32] == v22[2 * (__int16)v28])
      {
        if (v12[v32 - 1] == v33)
          v33 = 0;
        if (v14[v32 - 1] == v34)
          v34 = 0;
      }
      else
      {
        v36 = &v22[2 * (__int16)++v28];
        *(v36 - 1) = v35;
        *v36 = v10[v32];
      }
      if ((__int16)v29 < 1)
      {
        if (!v30)
        {
LABEL_40:
          v30 = 0;
          v29 = (__int16)v29 + 1;
          v38 = (_BYTE *)(v24 + 2 * v29);
          *(v38 - 1) = v33;
          *v38 = v34;
          *(_WORD *)(v18 + 2 * (__int16)v29) = 1;
        }
      }
      else
      {
        LOWORD(v37) = 1;
        while (*(unsigned __int8 *)(v24 + 2 * (__int16)v37 - 1) != v33
             || *(unsigned __int8 *)(v24 + 2 * (__int16)v37) != v34)
        {
          v37 = (__int16)(v37 + 1);
          if (v37 > (__int16)v29)
            goto LABEL_40;
        }
        ++*(_WORD *)(v18 + 2 * (__int16)v37);
        v30 = 1;
      }
      ++v32;
    }
    while (v32 != v31);
  }
  sort_fr((__int16)v29, v18, v24);
  if (v25 <= 0x7FFEu)
  {
    v44 = 0;
    v45 = 0;
    LODWORD(v46) = (__int16)(v25 + 2);
    if ((int)v46 <= 2)
      v46 = 2;
    else
      v46 = v46;
    v47 = 32;
    v39 = 16;
    v48 = 1;
    v49 = 32;
    v40 = v76;
    while (1)
    {
      v50 = v12[v48];
      v51 = v14[v48];
      v52 = v8[v48];
      if (v52 == v49 && v10[v48] == v47)
        break;
      v54 = &v22[2 * ++v45];
      v49 = *(v54 - 1);
      v47 = *v54;
      if (v52 == v49)
      {
        if (v10[v48] == v47)
        {
          v53 = 1;
          v49 = v8[v48];
LABEL_63:
          v55 = 1;
          v56 = 1;
LABEL_64:
          v57 = (unsigned __int8 *)(v24 + 2 * v55);
          do
          {
            if (v50 == *(v57 - 1) && v51 == *v57)
            {
              v56 = 0;
              v44 = (v39 + 1);
              v16[(__int16)(v39 + 1)] = v55;
              v39 = v44;
              v58 = v44;
              v26 = v55++ == 254;
              if (!v26)
                goto LABEL_64;
              goto LABEL_76;
            }
            ++v55;
            v57 += 2;
          }
          while (v55 != 255);
          if ((v56 & 1) != 0)
          {
            v59 = (v39 + 1);
            v16[(__int16)(v39 + 1)] = -1;
            v16[(__int16)(v39 + 2)] = v50;
            v39 = (v39 + 3);
            v16[(__int16)v39] = v51;
            v44 = v59;
            if ((v53 & 1) != 0)
              goto LABEL_79;
            goto LABEL_80;
          }
          v58 = v39;
LABEL_76:
          v39 = v58;
          v59 = v44;
          if (v53)
            goto LABEL_79;
          goto LABEL_80;
        }
        v49 = v8[v48];
      }
LABEL_79:
      v76[v45] = v44;
      v59 = v44;
LABEL_80:
      ++v48;
      v44 = v59;
      if (v48 == v46)
        goto LABEL_81;
    }
    v53 = 0;
    if (v12[v48 - 1] == v50)
      v50 = 0;
    if (v14[v48 - 1] == v51)
      v51 = 0;
    goto LABEL_63;
  }
  LOWORD(v39) = 16;
  v40 = v76;
LABEL_81:
  v60 = (__int16)v39;
  v16[1] = (unsigned __int16)(v39 + 1) >> 8;
  v16[2] = v39 + 1;
  v16[4] = v28;
  v16[3] = BYTE1(v28);
  if ((__int16)v28 >= 1)
  {
    v61 = 0;
    v62 = (__int16)v39 + (unsigned __int16)v28;
    v63 = (__int16)v39 + 2 * (unsigned __int16)v28;
    v64 = (__int16)(v28 + 1);
    if (v64 <= 2)
      v65 = 2;
    else
      v65 = v64;
    v66 = v65 - 1;
    v67 = v22 + 2;
    do
    {
      v16[v60 + 1 + v61] = *(v67 - 1);
      v68 = *v67;
      v67 += 2;
      v16[v62 + 1 + v61] = v68;
      v69 = (uint64_t)&v40[v61 + 1];
      v16[v63 + 1 + v61] = *(_BYTE *)(v69 + 1);
      v16[v63 + 1 + (unsigned __int16)v28 + v61++] = *(_WORD *)v69;
    }
    while (v66 != v61);
  }
  v70 = v60 + 4 * v28;
  *(_WORD *)(v16 + 5) = bswap32(v70 + 1) >> 16;
  v71 = (char *)(v24 + 2);
  v72 = -256;
  do
  {
    v73 = &v16[(__int16)v70 + 257 + v72];
    *v73 = *(v71 - 1);
    v74 = *v71;
    v71 += 2;
    v73[256] = v74;
  }
  while (!__CFADD__(v72++, 1));
  v16[8] = v70;
  v16[7] = (unsigned __int16)(v70 + 512) >> 8;
  SLFWrite(v77, (__int16)(v70 + 512) - 1, v16 + 1, (unsigned int *)&v78[1]);
  clean_up(0, (uint64_t)&v81, v78[0], v77);
  return 0;
}

uint64_t clean_up(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v8 = *(void **)(a2 + 16);
  if (v8)
    free(v8);
  v9 = *(void **)(a2 + 24);
  if (v9)
    free(v9);
  v10 = *(void **)(a2 + 32);
  if (v10)
    free(v10);
  v11 = *(void **)(a2 + 40);
  if (v11)
    free(v11);
  v12 = *(void **)(a2 + 64);
  if (v12)
    free(v12);
  if (*(_QWORD *)a2)
    free(*(void **)a2);
  v13 = *(void **)(a2 + 48);
  if (v13)
    free(v13);
  v14 = *(void **)(a2 + 56);
  if (v14)
    free(v14);
  v15 = *(void **)(a2 + 8);
  if (v15)
    free(v15);
  SLClose(a3);
  SLClose(a4);
  return a1;
}

uint64_t sort_fr(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  unsigned int v13;

  if (result >= 2)
  {
    LOWORD(v3) = result;
    do
    {
      v4 = (__int16)v3 >> 1;
      LOWORD(v5) = 1;
      do
      {
        LOWORD(v6) = v5;
        do
        {
          v6 = (__int16)v6;
          v7 = *(__int16 *)(a2 + 2 * (__int16)v6);
          v8 = (__int16)(v6 + v4);
          v9 = *(__int16 *)(a2 + 2 * v8);
          if (v7 >= v9)
            break;
          v10 = a3 + 2 * v6;
          v11 = *(_WORD *)(v10 - 1);
          *(_WORD *)(a2 + 2 * v6) = v9;
          v12 = a3 + 2 * v8;
          *(_WORD *)(v10 - 1) = *(_WORD *)(v12 - 1);
          *(_WORD *)(a2 + 2 * v8) = v7;
          *(_WORD *)(v12 - 1) = v11;
          LODWORD(v6) = (__int16)(v6 - v4);
        }
        while ((int)v6 > 0);
        v5 = (__int16)(v5 + 1);
      }
      while (v5 <= (__int16)(result - ((__int16)v3 >> 1)));
      v13 = (unsigned __int16)v3;
      v3 = (__int16)v3 >> 1;
    }
    while (v13 >= 4);
  }
  return result;
}

uint64_t PDSDinit(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  char *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  unsigned __int16 v28;
  size_t v29;
  void *v30;
  void *v31;
  unsigned __int16 *v32;
  unsigned int v33;
  _WORD *v34;
  unsigned int v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  int v41[2];

  v6 = *(_QWORD *)(a1 + 2176);
  v7 = (unsigned __int8 *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v7)
    return 8;
  v8 = v7;
  v9 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v9)
    return 8;
  v10 = v9;
  v11 = (char *)malloc_type_calloc(0x400uLL, 1uLL, 0x100004077774924uLL);
  if (!v11)
    return 8;
  v12 = v11;
  v13 = 8;
  v14 = malloc_type_calloc(0x202uLL, 8uLL, 0x100004000313F17uLL);
  *(_QWORD *)(v6 + 48) = v14;
  if (v14)
  {
    v15 = malloc_type_calloc(1uLL, 0x100uLL, 0x100004077774924uLL);
    *(_QWORD *)(v6 + 96) = v15;
    if (!v15)
      return 8;
    *(_QWORD *)v41 = 0;
    if (a2)
    {
      v41[0] = a3;
      SLSeek(a3, *(_DWORD *)(a1 + 768), 0);
    }
    else
    {
      if (SLOpen(a1 + 1, a1 + 512, v41, 0) == 8)
        return 8;
      a3 = v41[0];
    }
    *(_DWORD *)(a1 + 776) = a3;
    *(_DWORD *)(*(_QWORD *)(a1 + 2184) + 64) = a3;
    if (SLFRead(a3, 1024, v8, (unsigned int *)&v41[1]) == 8)
      return 8;
    strcpy(v10, "#HEADER COMP START");
    v17 = strncpy(v12, (const char *)v8 + 38, 0x11uLL);
    v18 = SLstrncmp(v17, (unsigned __int8 *)v10, 17);
    free(v10);
    free(v12);
    if (v18)
    {
      v19 = bswap32(*((_DWORD *)v8 + 175));
      *(_DWORD *)v6 = v19;
      v20 = *(_QWORD *)(a1 + 2184);
      *(_DWORD *)(v20 + 12) = bswap32(*((_DWORD *)v8 + 175)) + *(_DWORD *)(a1 + 768);
      v21 = bswap32(*((_DWORD *)v8 + 177));
      *(_DWORD *)(v6 + 8) = v21;
      v22 = bswap32(*((_DWORD *)v8 + 179));
      *(_DWORD *)(v6 + 16) = v22;
      *(_DWORD *)(v6 + 24) = bswap32(*((_DWORD *)v8 + 181));
      v23 = bswap32(*((_DWORD *)v8 + 183));
      *(_DWORD *)(v6 + 32) = v23;
      v24 = bswap32(*((_DWORD *)v8 + 185));
      *(_DWORD *)(v6 + 40) = v24;
      if (*(_BYTE *)a1 == 7)
      {
        *(_DWORD *)(v6 + 80) = bswap32(*((_DWORD *)v8 + 187));
        *(_WORD *)(a1 + 2094) = v8[757];
      }
      else
      {
        *(_WORD *)(a1 + 2094) = v8[749];
        *(_BYTE *)(a1 + 2090) = v8[769];
        *(_BYTE *)(a1 + 2091) = v8[761];
        *(_BYTE *)(a1 + 2092) = v8[763];
      }
      v25 = v8[387];
      if (v25 > 0x25)
        LOBYTE(v25) = 0;
      *(_BYTE *)(a1 + 2069) = v25;
      *(_BYTE *)(v20 + 55) = v25;
      *(_WORD *)(v20 + 68) = bswap32(*((unsigned __int16 *)v8 + 252)) >> 16;
      v26 = bswap32(*((unsigned __int16 *)v8 + 196)) >> 16;
      *(_WORD *)(v20 + 2) = v26;
      *(_DWORD *)(v6 + 4) = v21 - v19;
      *(_WORD *)(v20 + 4) = bswap32(*((unsigned __int16 *)v8 + 256)) >> 16;
      *(_WORD *)(v6 + 12) = v22 - v21;
      *(_WORD *)(v6 + 20) = bswap32(*((unsigned __int16 *)v8 + 245)) >> 16;
      *(_WORD *)(v6 + 28) = 256;
      *(_WORD *)(v20 + 48) = bswap32(*((unsigned __int16 *)v8 + 251)) >> 16;
      *(_BYTE *)(v20 + 54) = v8[501];
      *(_WORD *)(v6 + 36) = v24 - v23;
      v27 = malloc_type_calloc(1uLL, 8 * v26, 0x100004077774924uLL);
      *(_QWORD *)(v6 + 88) = v27;
      if (!v27)
        return 8;
      if (*(_BYTE *)a1 != 7 && *(_WORD *)(a1 + 2094))
      {
        v28 = 3 * *(_WORD *)(a1 + 2094);
        if ((v28 & 7) != 0)
          v29 = (v28 >> 3) + 1;
        else
          v29 = v28 >> 3;
        *(_WORD *)(v6 + 112) = v29;
        v30 = malloc_type_calloc(v29, 1uLL, 0x100004077774924uLL);
        *(_QWORD *)(v6 + 104) = v30;
        if (!v30)
          return 8;
        *(_WORD *)(v6 + 112) *= 8;
      }
      v31 = malloc_type_calloc(*(unsigned __int16 *)(v6 + 12), 1uLL, 0x100004077774924uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 2184) + 1184) = v31;
      if (!v31)
        return 8;
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 8), 0);
      if (SLFRead(v41[0], *(unsigned __int16 *)(v6 + 12), *(void **)(*(_QWORD *)(a1 + 2184) + 1184), (unsigned int *)&v41[1]) == 8)return 8;
      v32 = *(unsigned __int16 **)(*(_QWORD *)(a1 + 2184) + 1184);
      v33 = (bswap32(*v32) >> 16) - 1;
      v34 = *(_WORD **)(a1 + 2192);
      v34[1065] = v33;
      v35 = bswap32(v32[1]) >> 16;
      v34[1063] = v35;
      v34[1064] = v33 + 2 * v35;
      v34[1066] = (bswap32(v32[2]) >> 16) - 1;
      v36 = malloc_type_calloc(*(unsigned __int16 *)(v6 + 20), 1uLL, 0x100004077774924uLL);
      *(_QWORD *)(*(_QWORD *)(a1 + 2184) + 40) = v36;
      if (!v36)
        return 8;
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 16), 0);
      if (SLFRead(v41[0], *(unsigned __int16 *)(v6 + 20), *(void **)(*(_QWORD *)(a1 + 2184) + 40), (unsigned int *)&v41[1]) == 8)return 8;
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 24), 0);
      if (SLFRead(v41[0], *(unsigned __int16 *)(v6 + 28), *(void **)(v6 + 96), (unsigned int *)&v41[1]) == 8)
        return 8;
      v37 = malloc_type_calloc(*(unsigned __int16 *)(v6 + 36), 1uLL, 0x100004077774924uLL);
      if (!v37)
        return 8;
      v38 = v37;
      SLSeek(v41[0], *(_DWORD *)(a1 + 768) + *(_DWORD *)(v6 + 32), 0);
      if (SLRead(v41[0], *(unsigned __int16 *)(v6 + 36), v38, &v41[1]) == 8)
        return 8;
      *(_QWORD *)(v6 + 72) = OpenOutputBuffer(*(unsigned __int16 *)(*(_QWORD *)(a1 + 2184) + 2));
      get_counts((unsigned __int8 *)v38, *(_QWORD *)(v6 + 48));
      free(v38);
      *(_WORD *)(v6 + 64) = build_tree(*(unsigned __int16 **)(v6 + 48));
      **(_WORD **)(a1 + 2184) = 0;
      v39 = *(_QWORD *)(a1 + 2192);
      *(_WORD *)(v39 + 16) = -1;
      *(_WORD *)(v39 + 2) = 0;
      v40 = SLLngToA(*(unsigned __int8 *)(a1 + 2069));
      v13 = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 2184) + 56) = v40;
      if (!v40)
        return 8;
    }
    else
    {
      v13 = 8;
    }
    free(v8);
  }
  return v13;
}

unsigned __int8 *get_counts(unsigned __int8 *result, uint64_t a2)
{
  uint64_t i;
  unsigned int v3;
  int v4;
  uint64_t j;
  unsigned int v6;
  int v7;

  for (i = 0; i != 2048; i += 8)
    *(_WORD *)(a2 + i) = 0;
  v3 = *result;
  v4 = 2;
  for (j = 1; ; j = (__int16)(v7 + 1))
  {
    v6 = result[j];
    if (v3 <= v6)
    {
      v3 = v3;
      do
      {
        v7 = v4 + 1;
        *(_WORD *)(a2 + 8 * (__int16)v3++) = result[(__int16)v4++];
      }
      while ((int)v6 >= (__int16)v3);
    }
    else
    {
      v7 = v4;
    }
    v3 = result[(__int16)v7];
    if (!result[(__int16)v7])
      break;
    v4 = v7 + 2;
  }
  *(_WORD *)(a2 + 2048) = 1;
  return result;
}

uint64_t PDsort(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 v5;
  unsigned __int16 *v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 2168);
  v2 = *(_QWORD *)(v1 + 32);
  v3 = *(_QWORD *)(v1 + 40);
  vpHash_index_tab = v2;
  vpRam_buff = v3;
  v4 = *(unsigned __int16 *)(v1 + 4);
  if (*(_WORD *)(v1 + 4))
  {
    v5 = 0;
    v6 = (unsigned __int16 *)v2;
    v7 = v2 + 2 * v4;
    do
    {
      v8 = *v6;
      if (v8 <= 0xFFFD)
      {
        v9 = v5++;
        *(_WORD *)(v2 + 2 * v9) = v8;
      }
      ++v6;
    }
    while ((unint64_t)v6 < v7);
  }
  else
  {
    v5 = 0;
  }
  return HeapSort(v5);
}

uint64_t HeapSort(uint64_t result)
{
  int v1;
  int v2;
  unsigned __int16 i;
  uint64_t v4;
  __int16 v5;

  if (result >= 2)
  {
    viHeapLast = result - 1;
    v1 = (unsigned __int16)(result - 2) >> 1;
    do
    {
      v2 = (unsigned __int16)v1;
      result = DownHeap_0((unsigned __int16)v1--);
    }
    while (v2);
    for (i = viHeapLast; viHeapLast; i = viHeapLast)
    {
      v4 = vpHash_index_tab;
      v5 = *(_WORD *)vpHash_index_tab;
      *(_WORD *)vpHash_index_tab = *(_WORD *)(vpHash_index_tab + 2 * i);
      viHeapLast = i - 1;
      *(_WORD *)(v4 + 2 * i) = v5;
      result = DownHeap_0(0);
    }
  }
  return result;
}

uint64_t DownHeap_0(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned __int16 v19;
  uint64_t v20;
  unsigned int v21;

  v1 = result;
  v2 = vpHash_index_tab;
  v3 = *(unsigned __int16 *)(vpHash_index_tab + 2 * result);
  v4 = (unsigned __int16)viHeapLast;
  v21 = (unsigned __int16)(viHeapLast - 1) >> 1;
  if (v21 >= result)
  {
    v16 = *(_WORD *)(vpHash_index_tab + 2 * result);
    v20 = vpRam_buff;
    v19 = *(unsigned __int8 *)(vpRam_buff + v3 + 2);
    v18 = (unsigned __int8 *)(vpRam_buff + v3 + 3);
    v17 = (unsigned __int16)viHeapLast;
    while (1)
    {
      if (v4 >= ((unsigned __int16)(2 * v1) | 1u))
      {
        v7 = v20 + *(unsigned __int16 *)(v2 + 2 * ((unsigned __int16)(2 * v1) | 1u));
        v8 = *(unsigned __int8 *)(v7 + 2);
        v6 = 3;
      }
      else
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
      }
      if (v4 >= (unsigned __int16)(2 * v1 + 2))
      {
        v9 = v20 + *(unsigned __int16 *)(v2 + 2 * (unsigned __int16)(2 * v1 + 2));
        v10 = *(unsigned __int8 *)(v9 + 2);
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v11 = AsciiStrCmp((unsigned __int8 *)(v7 + v6), v8, (unsigned __int8 *)(v9 + v6), v10);
      v12 = v11;
      v13 = v11 < 0 ? v9 : v7;
      v14 = v11 < 0 ? v10 : v8;
      result = AsciiStrCmp(v18, v19, (unsigned __int8 *)(v13 + v6), v14);
      if ((result & 0x80000000) == 0)
        break;
      v15 = (unsigned __int16)v1;
      if (v12 < 0)
        v1 = 2 * v1 + 2;
      else
        v1 = (2 * v1) | 1;
      v5 = (unsigned __int16)v1;
      *(_WORD *)(v2 + 2 * v15) = *(_WORD *)(v2 + 2 * (unsigned __int16)v1);
      v4 = v17;
      if (v21 < (unsigned __int16)v1)
        goto LABEL_23;
    }
    v5 = (unsigned __int16)v1;
LABEL_23:
    LOWORD(v3) = v16;
  }
  else
  {
    v5 = result;
  }
  *(_WORD *)(v2 + 2 * v5) = v3;
  return result;
}

uint64_t AsciiStrCmp(unsigned __int8 *a1, unsigned __int16 a2, unsigned __int8 *a3, int a4)
{
  int v4;
  int v5;
  int v6;

  if (a4 < 1)
  {
    return 0;
  }
  else if ((__int16)a2 < 1)
  {
    return -1;
  }
  else
  {
    v4 = 0;
    while (1)
    {
      v5 = *a1;
      v6 = *a3;
      if (((v6 ^ v5) & 0xFFFFFFDF) != 0)
        break;
      ++a1;
      ++a3;
      if ((__int16)++v4 >= (__int16)a2)
      {
        v4 = a2;
        goto LABEL_11;
      }
    }
    if (a4 > (__int16)v4)
      return (__int16)((v5 | 0x20) - (v6 | 0x20));
LABEL_11:
    if (v4 == a2)
      return -1;
    else
      return 0;
  }
}

uint64_t PDsavsort(unsigned int a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = a1;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * a1) + 2168);
  if (a2)
  {
    v4 = malloc_type_calloc(1uLL, 2 * *(unsigned __int16 *)(v3 + 2), 0x1000040BDFB0063uLL);
    v5 = *(_QWORD *)pMCPbuff;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2168) + 64) = v4;
    if (v4)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v2) + 2168);
      memcpy(*(void **)(v6 + 64), *(const void **)(v6 + 32), *(unsigned __int16 *)(v6 + 2));
      return 0;
    }
    else
    {
      return 8;
    }
  }
  else
  {
    memcpy(*(void **)(v3 + 32), *(const void **)(v3 + 64), *(unsigned __int16 *)(v3 + 2));
    free(*(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2168) + 64));
    result = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)pMCPbuff + 8 * v2) + 2168) + 64) = 0;
  }
  return result;
}

uint64_t PDSFcorbru(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, uint64_t a5, unsigned __int16 a6, unsigned int a7, unsigned int a8, int a9, __int16 a10)
{
  __int16 v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  int v18;
  char v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  _BOOL4 v24;
  int v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  __int16 v59;
  unsigned int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  BOOL v66;
  char v67;
  unsigned int v68;
  unint64_t v69;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  int v76;
  unsigned int v79;
  char v81;

  v13 = 0;
  v14 = a10;
  v79 = (unsigned __int16)a7 + 0xFFFF;
  v73 = a1[7];
  v72 = (unsigned __int16)a8 + 0xFFFF;
  v74 = HIWORD(v79) & HIWORD(v72);
  v75 = HIWORD(v79) & (((unsigned __int16)a9 + 0xFFFF) >> 16);
LABEL_2:
  v15 = 0;
  v16 = -(uint64_t)v13;
  v17 = (__int16)(a4 - a6);
  if (v17 >= 0)
    v18 = (__int16)(a4 - a6);
  else
    v18 = -v17;
  v19 = 1;
  v76 = v18;
  while (1)
  {
    v20 = (__int16)a6;
    v21 = (__int16)a4;
    if ((a6 & 0x8000) != 0 || (a4 & 0x8000) != 0)
    {
      if ((v19 & (v13 != 0)) != 1)
        return 0;
      goto LABEL_108;
    }
    if (v18 > v14)
    {
      if ((v19 & (v13 != 0)) == 0)
        return 0;
      goto LABEL_108;
    }
    LOWORD(v22) = 0;
    v23 = a4 != 0;
    v24 = a6 != 0;
    if (a4 && a6)
    {
      LOWORD(v22) = 0;
      while (*(unsigned __int8 *)(a3 + (unsigned __int16)v22) == *(unsigned __int8 *)(a5 + (unsigned __int16)v22))
      {
        v22 = (__int16)(v22 + 1);
        v24 = v22 < (__int16)a6;
        v23 = v22 < (__int16)a4;
        if (v22 >= (__int16)a4 || v22 >= (__int16)a6)
          goto LABEL_21;
      }
      v23 = 1;
      v24 = 1;
    }
LABEL_21:
    if (a4 == (unsigned __int16)v22 && a6 == (unsigned __int16)v22)
      return 1;
    v25 = (__int16)v22;
    v81 = v19;
    if (a7)
    {
      if (v23 && v24)
      {
        if (a8)
        {
          v26 = (unsigned __int8 *)(a3 + (__int16)v22);
          if ((*(_DWORD *)(v73 + 4 * *v26) & 0x10000000) != 0)
          {
            v27 = (unsigned __int8 *)(a5 + v25);
            if ((*(_DWORD *)(v73 + 4 * *v27) & 0x10000000) != 0)
            {
              v28 = (uint64_t)(v26 + 1);
              v29 = (uint64_t)(v27 + 1);
              WORD2(v71) = a10;
              v30 = (__int16)(a4 + ~(_WORD)v25);
              v31 = (__int16)(a6 + ~(_WORD)v25);
              LODWORD(v71) = a9;
              v33 = (__int16)v79;
              v32 = (__int16)v72;
              goto LABEL_42;
            }
          }
        }
        if ((_WORD)a9)
        {
          v28 = a3 + v25 + 1;
          v29 = a5 + v25 + 1;
          WORD2(v71) = a10;
          WORD1(v71) = HIWORD(a9);
          v30 = (__int16)(a4 + ~(_WORD)v25);
          v31 = (__int16)(a6 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          v32 = a8;
          v33 = (__int16)v79;
LABEL_42:
          if (PDSFcorbru(a1, a2, v28, v30, v29, v31, v33, v32, v71))
            return 1;
        }
      }
LABEL_43:
      if ((v15 & 1) == 0)
      {
        v42 = v25 + 1;
        if ((int)v42 < v21
          && (int)v42 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2146) != 4)
        {
          v68 = 2;
          goto LABEL_110;
        }
        v43 = v25 + 2;
        if (v25 + 2 < v21
          && (int)v43 < v20
          && *(unsigned __int8 *)(a3 + v25) == *(unsigned __int8 *)(a5 + v43)
          && *(unsigned __int8 *)(a3 + v42) == *(unsigned __int8 *)(a5 + v42)
          && *(unsigned __int8 *)(a3 + v43) == *(unsigned __int8 *)(a5 + v25)
          && *(_WORD *)(a2 + 2146) != 4)
        {
          v68 = 3;
LABEL_110:
          v14 = a10;
          v69 = v25 + (unint64_t)v68;
          a3 += v69;
          a4 = v21 - v69;
          a5 += v69;
          a6 = v20 - v69;
          v13 += v69;
          goto LABEL_2;
        }
      }
      if (v23)
      {
        if (v25 || *(__int16 *)(a2 + 2150) > v21)
        {
          v36 = (unsigned __int8 *)(a3 + v25);
          if (*v36 == *(v36 - 1))
          {
            v37 = (uint64_t)(v36 + 1);
            v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            v39 = (__int16)(v20 - v25);
            v40 = (__int16)(v21 + ~(_WORD)v25);
            v41 = a7;
            LODWORD(v71) = a9;
            goto LABEL_65;
          }
        }
        if (v74)
        {
          v44 = (unsigned __int8 *)(a3 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v44) & 0x10000000) != 0)
          {
            v37 = (uint64_t)(v44 + 1);
            v38 = a5 + v25;
            WORD2(v71) = a10 - 1;
            v39 = (__int16)(v20 - v25);
            v40 = (__int16)(v21 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            v41 = (__int16)v79;
            v47 = (__int16)v72;
            v45 = a1;
            v46 = a2;
            goto LABEL_67;
          }
        }
        if (v75)
        {
          v37 = a3 + v25 + 1;
          v38 = a5 + v25;
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          v39 = (__int16)(v20 - v25);
          v40 = (__int16)(v21 + ~(_WORD)v25);
          LOWORD(v71) = a9 - 1;
          v41 = (__int16)v79;
LABEL_65:
          v45 = a1;
          v46 = a2;
          v47 = a8;
LABEL_67:
          if (PDSFcorbru(v45, v46, v37, v40, v38, v39, v41, v47, v71))
            return 1;
        }
      }
      v14 = a10;
      if (v24)
      {
        if ((v25 || *(__int16 *)(a2 + 2152) > v20) && (v48 = (unsigned __int8 *)(a5 + v25), *v48 == *(v48 - 1)))
        {
          v49 = a3 + v25;
          v50 = v48 + 1;
          WORD2(v71) = a10 - 1;
          v51 = (__int16)(v21 - v25);
          v52 = (__int16)(v20 + ~(_WORD)v25);
          v53 = a7;
          LODWORD(v71) = a9;
          v54 = a1;
          v55 = a2;
          v56 = a8;
LABEL_76:
          if (PDSFcorbru(v54, v55, v49, v51, v50, v52, v53, v56, v71))
            return 1;
        }
        else if (v74)
        {
          v57 = (unsigned __int8 *)(a5 + v25);
          if ((*(_DWORD *)(v73 + 4 * *v57) & 0x10000000) != 0)
          {
            v49 = a3 + v25;
            v50 = v57 + 1;
            WORD2(v71) = a10 - 1;
            v51 = (__int16)(v21 - v25);
            v52 = (__int16)(v20 + ~(_WORD)v25);
            LODWORD(v71) = a9;
            v53 = (__int16)v79;
            v56 = (__int16)v72;
            v54 = a1;
            v55 = a2;
            goto LABEL_76;
          }
        }
        if (v75)
        {
          WORD2(v71) = a10 - 1;
          WORD1(v71) = HIWORD(a9);
          LOWORD(v71) = a9 - 1;
          if (PDSFcorbru(a1, a2, a3 + v25, (__int16)(v21 - v25), a5 + v25 + 1, (__int16)(v20 + ~(_WORD)v25), (__int16)v79, a8, v71))return 1;
        }
      }
      if ((HIWORD(v79) & ((HIWORD(a9) + 0xFFFF) >> 16)) != 0)
      {
        v58 = *(unsigned __int8 *)(a2 + 2164);
        if (v58 != 255)
        {
          v59 = 0;
          while (1)
          {
            v60 = (__int16)(v20 - v58);
            if (((v20 - v58) & 0x8000) != 0 || (int)v60 > v25)
            {
              if ((int)v60 > v25)
                goto LABEL_106;
              goto LABEL_105;
            }
            v61 = *(unsigned __int8 *)(a2 + (v59 | 1) + 2164);
            v62 = *(unsigned __int8 **)(a1[19] + 8 * v61);
            if (*v62 == *(unsigned __int8 *)(a3 + (unsigned __int16)(v20 - v58)))
              break;
LABEL_105:
            v59 += 2;
            v58 = *(unsigned __int8 *)(a2 + v59 + 2164);
            if (v58 == 255)
              goto LABEL_106;
          }
          v63 = *(unsigned __int8 *)(a1[21] + v61);
          if (v63 != 2)
          {
            if (v63 != 3)
            {
              if (v63 != 4)
              {
LABEL_91:
                v64 = *(unsigned __int8 *)(a1[22] + v61);
                if (*(_WORD *)(a2 + 2)
                  || ((_DWORD)v64 + v60 == v20 ? (v65 = 1) : (v65 = 2),
                      *(unsigned __int16 *)(a2 + 2152) == (unsigned __int16)v20
                    ? (v66 = v20 == v58)
                    : (v66 = 0),
                      !v66 ? (v67 = v65) : (v67 = 4),
                      (v67 & *((_BYTE *)a1 + v61 + 183)) != 0))
                {
                  WORD2(v71) = a10;
                  LODWORD(v71) = a9 - 0x10000;
                  if (PDSFcorbru(a1, a2, a3 + v60 + v63, (__int16)(v21 - v60 - v63), a5 + v60 + v64, v58 - v64, (__int16)v79, a8, v71))return 1;
                }
                goto LABEL_105;
              }
              if (v62[3] != *(unsigned __int8 *)(a3 + v60 + 3))
                goto LABEL_105;
            }
            if (v62[2] != *(unsigned __int8 *)(a3 + v60 + 2))
              goto LABEL_105;
          }
          if (v62[1] != *(unsigned __int8 *)(a3 + v60 + 1))
            goto LABEL_105;
          goto LABEL_91;
        }
      }
LABEL_106:
      v35 = v81 & (v13 != 0);
      goto LABEL_107;
    }
    if ((!v24 || *(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a5 + (__int16)v22 + 1))
      && (!v23 || *(unsigned __int8 *)(a3 + (__int16)v22 + 1) == *(unsigned __int8 *)(a5 + (__int16)v22)))
    {
      goto LABEL_43;
    }
    if (!(_WORD)v22 && *(__int16 *)(a2 + 2150) <= (__int16)a4)
      goto LABEL_43;
    v34 = (__int16)v22 - 1;
    if (*(unsigned __int8 *)(a3 + (__int16)v22) == *(unsigned __int8 *)(a3 + v34)
      || !(_WORD)v22 && *(__int16 *)(a2 + 2152) <= (__int16)a6)
    {
      goto LABEL_43;
    }
    if (*(unsigned __int8 *)(a5 + (__int16)v22) == *(unsigned __int8 *)(a5 + v34))
      goto LABEL_43;
    v35 = v19 & (v13 != 0);
    v14 = a10;
LABEL_107:
    v16 = -(uint64_t)v13;
    v18 = v76;
    if ((v35 & 1) == 0)
      return 0;
LABEL_108:
    v19 = 0;
    a3 += v16;
    a5 += v16;
    a4 = v13 + v21;
    a6 = v13 + v20;
    v15 = 1;
  }
}

uint64_t PDSFaccent(unsigned __int8 *a1, int a2, uint64_t a3, __int16 *a4)
{
  BOOL v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  __int16 *v25;
  __int16 v26;
  _OWORD *v27;
  __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  BOOL v60;
  int v61;
  __int16 v62;
  __int16 v63;
  unsigned __int16 v64;
  uint64_t i;
  int v66;
  uint64_t v67;
  int v68;
  unsigned __int8 *v69;
  __int16 v70;
  unsigned __int8 *v71;
  int v72;
  unsigned __int8 *v73;
  __int16 v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  __int16 v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  __int16 v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  __int16 v83;
  unsigned __int8 *v84;
  uint64_t v85;
  __int16 *v86;
  unsigned int v87;
  int v88;
  int v89;
  unsigned int v90;
  int v91;
  __int16 v92;
  __int16 v93;
  uint64_t v95;
  BOOL v96;
  unsigned __int8 *v97;
  _DWORD v99[2];
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  __int16 v105;
  _OWORD v106[16];
  _OWORD v107[16];
  uint64_t v108;

  v108 = *MEMORY[0x1E0C80C00];
  v6 = *(_BYTE *)(a3 + 55) == 8 && (a4[1741] & 0x40) != 0 && *a4 == 3;
  v105 = 0;
  v7 = *(_QWORD *)(a3 + 56);
  v8 = *(unsigned __int8 **)(*((_QWORD *)a4 + 4) + 24);
  v9 = *(unsigned __int8 *)(a3 + 136);
  a4[1062] = 0;
  if (a2 < 1)
  {
    v10 = 0;
  }
  else
  {
    v10 = (unsigned __int16)a2;
    v11 = (unsigned __int16)a2;
    v12 = v8;
    do
    {
      v14 = *a1++;
      v13 = v14;
      v15 = *(_DWORD *)(v7 + 4 * v14);
      if ((v15 & 0x4064000) != 0 && (!v6 || (*(_QWORD *)&v15 & 0x40000) == 0))
      {
        if (*(_BYTE *)(a3 + 55) == 15)
        {
          if ((_BYTE)v13 == 1)
          {
            LOBYTE(v13) = 1;
          }
          else if ((v15 & 0x4020000) != 0)
          {
            LOBYTE(v13) = v13 - 1;
          }
        }
        else if ((_BYTE)v13 != 0xE0 && ((0x61A300E8uLL >> (v13 + 32)) & 1) == 0)
        {
          LOBYTE(v13) = Lat_1_acc[v13 - 224];
        }
      }
      *v12++ = v13;
      --v11;
    }
    while (v11);
  }
  v16 = 0;
  v8[v10] = 0;
  memset(v107, 0, 224);
  memset(v106, 0, sizeof(v106));
  *((_BYTE *)v106 + v8[1]) = 1;
  memset(&v107[14], 0, 32);
  *((_BYTE *)v107 + *v8) = 1;
  if (!*(_WORD *)(a3 + 104) || a2 < 1)
    return v16;
  v96 = v6;
  v95 = v9;
  v97 = v8;
  v17 = 0;
  v18 = 0;
  v19 = (unsigned __int16)a2;
  LOWORD(v20) = a4[1081];
  do
  {
    v21 = 0;
    v22 = &v97[v17];
    do
    {
      if ((int)SLstrncmp(*(_BYTE **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)((v21 + (__int16)v20) >> 1)), v22, *(unsigned __int8 *)(*(_QWORD *)(a3 + 176) + (__int16)((v21 + (__int16)v20) >> 1))) < 0)v21 = (v21 + (__int16)v20) >> 1;
      else
        LOWORD(v20) = (v21 + (__int16)v20) >> 1;
    }
    while ((__int16)v20 - v21 > 1);
    do
    {
      v23 = (__int16)v20;
      if (*(_BYTE *)(*(_QWORD *)(a3 + 176) + (__int16)v20) == 1
        && *(_BYTE *)(*(_QWORD *)(a3 + 168) + (__int16)v20) == 1
        && (v24 = **(unsigned __int8 **)(*(_QWORD *)(a3 + 160) + 8 * (__int16)v20), (_DWORD)v24 == *v22)
        && (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(_QWORD *)(a3 + 152) + 8 * (__int16)v20)) & 0x4064000) != (unint64_t)(*(_DWORD *)(v7 + 4 * v24) & 0x4064000)
        && (*(_DWORD *)&v96 & (*(_DWORD *)(v7 + 4 * **(unsigned __int8 **)(*(_QWORD *)(a3 + 152) + 8 * (__int16)v20)) >> 18) & 1) == 0)
      {
        v25 = a4 + 1082;
        LOBYTE(v25[v18]) = a2 - v17;
        v26 = v18 * 2 + 1;
        ++v18;
        *((_BYTE *)v25 + v26) = v20;
        if ((_WORD)v17)
        {
          if ((unsigned __int16)v17 != 1)
            goto LABEL_35;
          v27 = v106;
        }
        else
        {
          v27 = v107;
        }
        *((_BYTE *)v27 + **(unsigned __int8 **)(*(_QWORD *)(a3 + 152) + 8 * (__int16)v20)) = 1;
      }
      else
      {
        v20 = a4[1081];
        if ((int)v23 >= v20 || **(unsigned __int8 **)(*(_QWORD *)(a3 + 160) + 8 * v23) > *v22)
          goto LABEL_42;
      }
LABEL_35:
      v20 = (__int16)(v23 + 1);
    }
    while (v20 < a4[1081]);
    LOWORD(v20) = a4[1081];
LABEL_42:
    ++v17;
  }
  while (v17 != v19);
  if (v18 * 2)
  {
    v28 = a4 + 1082;
    LOBYTE(v28[v18]) = -1;
    *((_BYTE *)v28 + (__int16)(v18 * 2 + 1)) = -1;
    v104 = 0;
    v29 = *(_QWORD *)(a3 + 1184);
    v30 = a4[1064];
    v31 = a4[1063];
    v32 = (unsigned __int8 *)(v29 + v31 + v30);
    v33 = *v32;
    v34 = (unsigned __int8 *)(v29 + v30);
    v35 = *v34;
    v36 = v32[1];
    v37 = v34[1];
    v38 = a4[1065];
    v39 = *(unsigned __int8 *)(v29 + v38);
    v40 = *(unsigned __int8 *)(v29 + v38 + v31);
    v100 = *(_BYTE *)(v29 + v38);
    v101 = v40;
    if (v31 >= 2)
    {
      v41 = 0;
      v42 = 0;
      v43 = (v36 | (v37 << 8)) - 1;
      v44 = (v33 | (v35 << 8)) - 1;
      LOWORD(v45) = 1;
      do
      {
        v46 = *(_QWORD *)(a3 + 1184);
        if ((unsigned __int16)v44 >= (unsigned __int16)v43)
        {
          v45 = (__int16)v45 + 1;
          v47 = a4[1065];
          v48 = (__int16)v45 - 1;
          v39 = *(unsigned __int8 *)(v46 + v48 + v47);
          v40 = *(unsigned __int8 *)(v46 + v47 + (int)v48 + (__int16)v31);
          v100 = v39;
          v49 = a4[1064];
          v50 = *(unsigned __int8 *)(v46 + v49 + (__int16)v31 + (__int16)v45);
          LODWORD(v49) = *(unsigned __int8 *)(v46 + v49 + v45);
          v101 = v40;
          LODWORD(v49) = v50 | ((_DWORD)v49 << 8);
          v44 = v43;
          v43 = v49 - 1;
        }
        v51 = v44 + 1;
        v52 = *(unsigned __int8 *)(v46 + (unsigned __int16)(v44 + 1) - 1);
        if (v52 == 255)
        {
          v44 += 3;
          v55 = (unsigned __int16)v44;
          v54 = (unsigned __int16)v44 - 2;
        }
        else
        {
          v53 = a4[1066] + v52;
          v54 = v53 - 1;
          v55 = v53 + 256;
          v44 = v51;
        }
        v56 = *(unsigned __int8 *)(v46 + v55 - 1);
        v57 = *(unsigned __int8 *)(v46 + v54);
        if (v57)
          v41 = v57;
        v102 = v41;
        if (v56)
          v42 = v56;
        v103 = v42;
        v60 = v42 == 32 && v41 == 32 && v40 != 32;
        if (*((_BYTE *)v107 + v39) && *((_BYTE *)v106 + v40))
        {
          if (v60)
            goto LABEL_82;
          v61 = *((unsigned __int8 *)a4 + 2164);
          if (v61 == 255)
            goto LABEL_80;
          v62 = 0;
          v63 = 0;
          do
          {
            v64 = a2 - v61;
            if ((v64 & 0xFFFE) == 2
              && *(&v100 + v64) == **(_BYTE **)(*(_QWORD *)(a3 + 152)
                                              + 8 * *((unsigned __int8 *)a4 + ((v63 * 2) | 1) + 2164)))
            {
              ++v62;
            }
            v61 = LOBYTE(a4[++v63 + 1082]);
          }
          while (v61 != 255);
          if (!v62)
          {
LABEL_80:
            if (v42 != 32 && v42 != v97[3])
              continue;
          }
          else if (v42 == 32 || v62 != 1 || v42 == v97[3])
          {
LABEL_82:
            if (a4[1062] > 499)
              break;
            for (i = 0; i != 4; ++i)
              *((_BYTE *)&a4[2 * a4[1062] + 60] + i) = *(&v100 + i);
            ++a4[1062];
            LOWORD(v31) = a4[1063];
            continue;
          }
          if (v41 == v97[2])
            goto LABEL_82;
        }
        else
        {
          v44 = v43;
        }
      }
      while ((__int16)v45 < (__int16)v31);
    }
    v66 = *a4;
    if (v66 <= 99)
    {
      *a4 = 101;
      a4[1742] |= 0x200u;
      v67 = *(_QWORD *)(a3 + 128);
      v68 = 255;
      do
      {
        *((_BYTE *)a4 + 2148) = ++v68;
        v69 = (unsigned __int8 *)(v67 + (char)v68);
        v70 = *v69;
        v71 = &v69[v95];
        a4[1072] = v70;
        v72 = *v71;
        a4[1073] = v72;
        v73 = &v71[v95];
        v74 = *v73;
        v75 = &v73[v95];
        a4[1068] = v74;
        a4[1069] = *v75;
        v76 = &v75[v95];
        v77 = *v76;
        v78 = &v76[v95];
        a4[1070] = v77;
        a4[1071] = *v78;
        v79 = &v78[v95];
        v80 = *v79;
        v81 = &v79[v95];
        a4[1067] = v80;
        a4[1077] = *v81;
        v82 = &v81[v95];
        v83 = *v82;
        v84 = &v82[v95];
        a4[1078] = v83;
        a4[1079] = *v84;
        a4[1080] = v84[v95];
      }
      while (v72 != 4);
    }
    *((_QWORD *)a4 + 14) = a4 + 60;
    if (a4[1062] >= 1)
    {
      v85 = 0;
      do
      {
        v86 = &a4[2 * v85];
        if ((int)SLstrncmp(*((_BYTE **)a4 + 14), (unsigned __int8 *)v86 + 120, 4) <= 0)
        {
          *((_QWORD *)a4 + 14) = v86 + 60;
          v99[0] = *((_DWORD *)v86 + 30);
          v87 = *(unsigned __int8 *)(a3 + 54);
          if (v87 >= 5)
          {
            v88 = 4;
            do
              *((_BYTE *)v99 + (__int16)v88++) = 0;
            while ((int)v87 > (__int16)v88);
          }
          v89 = SFbisrch((uint64_t)v99, 0, v87 - 1, &v105, a3);
          v90 = *(unsigned __int8 *)(a3 + 54);
          if (v90 >= 5)
          {
            v91 = 4;
            do
              *((_BYTE *)v99 + (__int16)v91++) = -1;
            while ((int)v90 > (__int16)v91);
          }
          v92 = SFbisrch((uint64_t)v99, 0, v90 - 1, &v105, a3);
          v93 = v92 - v89 + v105;
          v105 = v93;
          if (*((_BYTE *)a4 + 3194) == 1)
            PDdecod2(v97, a2, v89, v93, a3, (unsigned __int16 *)a4);
        }
        ++v85;
      }
      while (v85 < a4[1062]);
    }
    *a4 = v66;
    if (v66 == 3)
      a4[1742] &= ~0x200u;
    return a4[20];
  }
  else
  {
    return 0;
  }
}

uint64_t LMargin(unsigned __int8 *a1, int a2, int a3)
{
  unsigned __int8 *v3;

  if (!a3)
  {
    v3 = a1 + 1;
    return *v3;
  }
  if (a2)
  {
    v3 = a1 + 2;
    return *v3;
  }
  if (a1[4] <= a3 && (!a1[5] || a1[5] >= a3))
  {
    v3 = a1 + 6;
    return *v3;
  }
  return 0;
}

uint64_t RMargin(unsigned __int8 *a1, int a2, int a3)
{
  if (a2)
    return *a1;
  if (!a3)
  {
    a1 += 3;
    return *a1;
  }
  if (a1[4] <= a3 && (!a1[5] || a1[5] >= a3))
  {
    a1 += 7;
    return *a1;
  }
  return 0;
}

uint64_t inithyphen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  unsigned __int8 *v6;
  __int16 v7;
  __int16 v8;
  unsigned __int8 *v9;
  char v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  __int16 v16;
  _WORD *v17;
  uint64_t v18;
  int v19[2];

  if (!*(_BYTE *)(a3 + 1116))
  {
    *(_BYTE *)(a3 + 1116) = 1;
    *(_BYTE *)(a3 + 1112) = 45;
    *(_WORD *)(a3 + 1114) = 11520;
  }
  *(_QWORD *)v19 = 0;
  v4 = SLOpen(a1, a2, &v19[1], 0);
  result = 0;
  if (v4 == 8)
    return result;
  result = (uint64_t)malloc_type_malloc(0x400uLL, 0x7CDF28DFuLL);
  if (!result)
    return result;
  v6 = (unsigned __int8 *)result;
  result = (uint64_t)malloc_type_calloc(2uLL, 0x2454uLL, 0x5E610005uLL);
  brtable = result;
  if (!result)
    return result;
  result = (uint64_t)malloc_type_malloc(0x2454uLL, 0x71E655DEuLL);
  keytable = result;
  if (!result)
    return result;
  if (SLFRead(v19[1], 1024, v6, (unsigned int *)v19) == 8)
  {
LABEL_8:
    SLClose(v19[1]);
    free(v6);
    return 0;
  }
  v7 = v19[0];
  if (!LOWORD(v19[0]))
  {
    v7 = -1;
    v9 = v6;
LABEL_62:
    v12 = 0;
LABEL_63:
    v13 = 0;
    while (1)
    {
      if (!v7)
      {
        if (SLFRead(v19[1], 1024, v6, (unsigned int *)v19) == 8)
          goto LABEL_8;
        v7 = v19[0];
        v9 = v6;
      }
      v15 = *v9++;
      v14 = v15;
      if (v15 == 36)
        break;
      --v7;
      if (v14 == 32)
      {
        *(_WORD *)(brtable + 2 * (__int16)v12++) = v13;
        goto LABEL_63;
      }
      v13 *= 16;
      switch(v14)
      {
        case '0':
          continue;
        case '1':
          v13 |= 1u;
          break;
        case '2':
          v13 |= 2u;
          break;
        case '3':
          v13 |= 3u;
          break;
        case '4':
          v13 |= 4u;
          break;
        case '5':
          v13 |= 5u;
          break;
        case '6':
          v13 |= 6u;
          break;
        case '7':
          v13 |= 7u;
          break;
        case '8':
          v13 |= 8u;
          break;
        case '9':
          v13 |= 9u;
          break;
        default:
          switch(v14)
          {
            case 'a':
              v13 |= 0xAu;
              continue;
            case 'b':
              v13 |= 0xBu;
              continue;
            case 'c':
              v13 |= 0xCu;
              continue;
            case 'd':
              v13 |= 0xDu;
              continue;
            case 'e':
              v13 |= 0xEu;
              continue;
            case 'f':
              v13 |= 0xFu;
              continue;
            default:
              return 0;
          }
      }
    }
    free(v6);
    SLClose(v19[1]);
    v16 = -1;
    do
      ++v16;
    while (*(_BYTE *)(keytable + v16) != 32);
    *(_WORD *)(a3 + 1110) = v16;
    v17 = (_WORD *)brtable;
    v18 = 9300;
    do
    {
      if (!*v17)
        *v17 = *(_WORD *)(a3 + 1110);
      ++v17;
      --v18;
    }
    while (v18);
    return 1;
  }
  v8 = 0;
  v9 = v6;
  while (1)
  {
    --v7;
    v11 = *v9++;
    v10 = v11;
    switch(v11)
    {
      case ' ':
        v10 = 115;
        break;
      case '$':
        goto LABEL_62;
      case '+':
        v10 = 55;
        break;
      case '-':
        v10 = 56;
        break;
      case '0':
        v10 = 32;
        break;
      case '1':
        v10 = 105;
        break;
      case '2':
        v10 = 104;
        break;
      case '3':
        v10 = 103;
        break;
      case '4':
        v10 = 102;
        break;
      case '5':
        v10 = 101;
        break;
      case '6':
        v10 = 100;
        break;
      case '7':
        v10 = 99;
        break;
      case '8':
        v10 = 98;
        break;
      case '9':
        v10 = 97;
        break;
      case '?':
        v10 = 57;
        break;
      case 'a':
        v10 = 106;
        break;
      case 'b':
        v10 = 116;
        break;
      case 'c':
        v10 = 117;
        break;
      case 'd':
        v10 = 118;
        break;
      case 'e':
        v10 = 107;
        break;
      case 'f':
        v10 = 119;
        break;
      case 'g':
        v10 = 120;
        break;
      case 'h':
        v10 = 121;
        break;
      case 'i':
        v10 = 108;
        break;
      case 'j':
        v10 = 122;
        break;
      case 'k':
        v10 = 125;
        break;
      case 'l':
        v10 = 123;
        break;
      case 'm':
        v10 = 124;
        break;
      case 'n':
        v10 = 43;
        break;
      case 'o':
        v10 = 109;
        break;
      case 'p':
        v10 = 45;
        break;
      case 'q':
        v10 = 63;
        break;
      case 'r':
        v10 = 48;
        break;
      case 's':
        v10 = 49;
        break;
      case 't':
        v10 = 50;
        break;
      case 'u':
        v10 = 110;
        break;
      case 'v':
        v10 = 51;
        break;
      case 'w':
        v10 = 52;
        break;
      case 'x':
        v10 = 53;
        break;
      case 'y':
        v10 = 111;
        break;
      case 'z':
        v10 = 54;
        break;
      case '{':
        v10 = 113;
        break;
      case '|':
        v10 = 114;
        break;
      case '}':
        v10 = 112;
        break;
      default:
        break;
    }
    *(_BYTE *)(keytable + v8) = v10;
    if (v7)
      goto LABEL_59;
    if (SLFRead(v19[1], 1024, v6, (unsigned int *)v19) == 8)
      break;
    v7 = v19[0];
    v9 = v6;
LABEL_59:
    ++v8;
    if (!v7)
    {
      v7 = -1;
      goto LABEL_62;
    }
  }
  free(v6);
  SLClose(v19[1]);
  return 0;
}

uint64_t Hyphenate(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  int v10;
  const char *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  __int16 i;
  __darwin_ct_rune_t v21;
  int v22;
  __int16 v23;
  char v24;
  int v25;
  unint64_t v26;
  unsigned __int16 v27;
  unsigned __int16 v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  int v43;
  __int16 v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  __int16 v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  _WORD *v79;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  __int16 v85;
  __int16 v86;
  __int16 v87;
  __int16 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;

  v10 = a4;
  v14 = (const char *)(a1 + a4);
  v15 = strlen(v14);
  if (v15 << 16 >= 1)
  {
    v16 = 0;
    v17 = v10;
    do
    {
      *(_DWORD *)(a3 + 4 * ((unsigned __int16)v17 >> 5)) &= ~(1 << ~(_BYTE)v17);
      ++v17;
      ++v16;
    }
    while ((__int16)v15 > (__int16)v16);
  }
  if (!a7 || !a6 || v15 << 16 > 7864320 || (__int16)v15 < (int)(a7 + a6))
  {
    if (a2)
      strcpy(a2, v14);
LABEL_10:
    LOWORD(v18) = 0;
    return (__int16)v18;
  }
  bzero((void *)(a5 + 370), 0x2E4uLL);
  *(_BYTE *)a5 = 46;
  *(_WORD *)(a5 + 124) = 30;
  for (i = 1; ; ++i)
  {
    v22 = *(unsigned __int8 *)v14++;
    v21 = v22;
    v23 = 6;
    v24 = 125;
    if (v22 > 195)
    {
      switch(v21)
      {
        case 196:
          goto LABEL_23;
        case 197:
          goto LABEL_24;
        case 214:
LABEL_21:
          v23 = 9;
          v24 = 124;
          goto LABEL_24;
      }
      goto LABEL_26;
    }
    if (v21 > 91)
    {
      if (v21 == 92)
        goto LABEL_21;
      if (v21 == 93)
        goto LABEL_24;
      goto LABEL_26;
    }
    if (v21 == 91)
    {
LABEL_23:
      v23 = 8;
      v24 = 123;
      goto LABEL_24;
    }
    if (!v21)
      break;
LABEL_26:
    if (v21 > 0x7E)
      goto LABEL_10;
    v24 = __tolower(v21);
    if ((v24 - 97) >= 0x1Du)
      v23 = 0;
    else
      v23 = word_1DE2EFD9C[(char)(v24 - 97)];
LABEL_24:
    *(_BYTE *)(a5 + i) = v24;
    *(_WORD *)(a5 + 2 * i + 124) = v23;
  }
  *(_BYTE *)(a5 + i) = 46;
  *(_WORD *)(a5 + 2 * i + 124) = 30;
  v25 = (__int16)(i + 1);
  if ((unsigned __int16)i < 0x7FFFu)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = (unsigned __int8 *)keytable;
    v31 = brtable;
    v32 = v25 - 3;
    v33 = (unsigned __int16)(i + 1);
    v104 = (__int16)(i + 1);
    while (1)
    {
      if (v26 >= 4)
        v29 = *(unsigned __int8 *)(a5 + (v26 - 1));
      if (v26 <= v33)
        break;
LABEL_35:
      if (++v26 >= v33)
      {
        v60 = v25 - 1;
        if (v25 >= 2)
        {
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = v64;
            v67 = v64 + 1;
            v68 = a5 + 2 * v67;
            v69 = *(unsigned __int16 *)(v68 + 618);
            v70 = v65;
            v71 = *(unsigned __int16 *)(a5 + 2 * v65 + 864);
            if (v69 == 1 || v71 == 1)
            {
              v73 = a5 + 2 * v70;
              if (*(__int16 *)(v73 + 370) <= 7)
                *(_WORD *)(v73 + 370) = 8;
              v74 = a5 + 2 * v67;
              if (*(__int16 *)(v74 + 370) < 7)
                *(_WORD *)(v74 + 370) = 7;
              v75 = a5 + 2 * v66;
              if (*(__int16 *)(v75 + 374) <= 7)
                *(_WORD *)(v75 + 374) = 8;
              goto LABEL_141;
            }
            if (v69 != 4 && v71 != 4)
            {
              if (v69 == 2)
              {
                v77 = a5 + 2 * v66;
                if (*(__int16 *)(v77 + 374) <= 1)
                  *(_WORD *)(v77 + 374) = 2;
                v78 = a5 + 2 * v70;
                if (*(__int16 *)(v78 + 370) > 1)
                  goto LABEL_141;
                v79 = (_WORD *)(v78 + 370);
              }
              else
              {
                if (v69 != 3 && v71 != 2)
                  goto LABEL_141;
                v81 = a5 + 2 * v70;
                if (*(__int16 *)(v81 + 370) <= 1)
                  *(_WORD *)(v81 + 370) = 2;
                if (v69 != 3)
                  goto LABEL_141;
                v82 = a5 + 2 * v66;
                if (*(__int16 *)(v82 + 374) > 1)
                  goto LABEL_141;
                if (!*(_BYTE *)(a5 + 1114))
                {
                  *(_WORD *)(v68 + 618) = 6;
                  goto LABEL_141;
                }
                v79 = (_WORD *)(v82 + 374);
              }
              *v79 = 2;
            }
LABEL_141:
            v65 = v70 + 1;
            v64 = (__int16)(v70 + 1);
          }
          while (v60 > v65);
        }
        v83 = 0;
        v84 = 0;
        v85 = 0;
        v86 = 0;
        v87 = 0;
        v88 = 0;
        v89 = 0;
        v90 = 0;
        v91 = 0;
        v92 = 0;
        while (2)
        {
          v93 = a5 + 2 * v83;
          v94 = *(unsigned __int16 *)(v93 + 124);
          v95 = *(__int16 *)(v93 + 370);
          if ((unsigned __int16)v92 == 2)
          {
            if ((__int16)v94 <= 9)
            {
              if (v86 || v88 && v87 != 1)
              {
                v88 = 0;
                v86 = 0;
                v92 = 1;
              }
              else
              {
                v92 = 1;
                v103 = ((__int16)(v95 + ((unsigned __int16)(v95 & 0x8000) >> 15)) & 0xFFFFFFFE) != v95 || v85 == 0;
                v88 = 0;
                v86 = 0;
                if (!v103)
                  *(_WORD *)(a5 + 2 * v83 + 368) = 1;
              }
              v90 = v89;
              v84 = 1;
              goto LABEL_197;
            }
            if (v94 <= 0x1D)
            {
              if (v94 > 0x18)
                v88 = 1;
              ++v87;
              if (((__int16)(v95 + ((unsigned __int16)(v95 & 0x8000) >> 15)) & 0xFFFFFFFE) != v95)
                v86 = 1;
              v85 = v95 == 0;
            }
          }
          else
          {
            v96 = (__int16)v92;
            if ((__int16)v92 != 1)
            {
              if ((__int16)v94 <= 9)
                v97 = 1;
              else
                v97 = v92;
              if ((__int16)v94 <= 9)
              {
                v98 = 1;
              }
              else
              {
                LODWORD(v94) = v90;
                v98 = v84;
              }
              if (!(_WORD)v92)
                v92 = v97;
              if (v96)
                v94 = v90;
              else
                v94 = v94;
              if (!v96)
                v84 = v98;
LABEL_196:
              v90 = v89;
LABEL_197:
              ++v83;
              v89 = v90;
              v90 = v94;
              if (v83 >= v33)
                goto LABEL_92;
              continue;
            }
            if ((__int16)v94 <= 9)
            {
              ++v84;
              if ((_DWORD)v94 == (_DWORD)v90)
              {
                if ((__int16)v89 < 1)
                {
                  v91 = 1;
                }
                else
                {
                  v99 = a5 + 2 * v83;
                  v91 = 1;
                  if (!*(_WORD *)(v99 + 368))
                    *(_WORD *)(v99 + 368) = 1;
                }
                v94 = v90;
              }
              else if (((__int16)v90 > 3 || (__int16)v94 <= 6) && ((__int16)v90 < 7 || (__int16)v94 > 3))
              {
                if (v91)
                {
                  v91 = 0;
                  if (!*(_WORD *)(v93 + 370))
                    *(_WORD *)(v93 + 370) = 1;
                }
              }
              else
              {
                v91 = 0;
                v101 = a5 + 2 * v83;
                *(_WORD *)(v101 + 368) = 8;
                *(_WORD *)(v93 + 370) = 9;
                *(_WORD *)(v101 + 372) = 8;
              }
              goto LABEL_197;
            }
            if (v94 <= 0x1D)
            {
              if ((unsigned __int16)v84 == 2)
              {
                if (*(_BYTE *)(a5 + 1113))
                {
                  v100 = a5 + 2 * v83;
                  if (*(_WORD *)(v100 + 368) == 1)
                    *(_WORD *)(v100 + 368) = 0;
                }
              }
              v91 = 0;
              v90 = 0;
              if (v94 > 0x18)
                v88 = 1;
              if (((__int16)(v95 + ((unsigned __int16)(v95 & 0x8000) >> 15)) & 0xFFFFFFFE) != v95)
                v86 = 1;
              v85 = v95 == 0;
              v87 = 1;
              v92 = 2;
              v94 = 0;
              goto LABEL_197;
            }
            if ((unsigned __int16)v84 == 2)
            {
              if (*(_BYTE *)(a5 + 1113))
              {
                v102 = a5 + 2 * v83;
                if (*(_WORD *)(v102 + 368) == 1)
                  *(_WORD *)(v102 + 368) = 0;
              }
              v84 = 2;
            }
          }
          break;
        }
        v94 = v90;
        goto LABEL_196;
      }
    }
    v34 = 0;
    v35 = *(unsigned __int8 *)(a5 + v26);
    v36 = *v30;
    LOWORD(v37) = v26;
    while (1)
    {
      v38 = *(unsigned __int8 *)(a5 + (__int16)v37);
      if (v36 != 43)
        goto LABEL_60;
      if (v26 >= 4)
      {
        v39 = *(__int16 *)(a5 + 124 + 2 * (v26 - 1));
        v40 = v39 > 9 || v35 == v29;
        if (!v40
          || v26 >= 5 && v39 <= 11 && *(__int16 *)(a5 + 124 + 2 * (v26 - 2)) < 10
          || *(_WORD *)(a5 + 2 * (v26 - 1) + 864) == 5)
        {
          v41 = v30[(__int16)(v34 + 1)];
          if (v41 == 49)
          {
            v42 = v34 + 2;
            v43 = v30[(__int16)(v34 + 2)];
            if (v43 == 32)
            {
              v44 = 1;
LABEL_58:
              *(_WORD *)(a5 + 2 * v26 + 618) = v44;
              goto LABEL_59;
            }
            LOBYTE(v41) = 49;
            do
            {
              if (v43 == v29)
                LOBYTE(v41) = 50;
              v43 = v30[(__int16)++v42];
            }
            while (v43 != 32);
          }
          v45 = (v41 - 49);
          if (v45 <= 4)
          {
            v44 = v45 + 1;
            goto LABEL_58;
          }
        }
      }
LABEL_59:
      v46 = *(__int16 *)(v31 + 2 * (__int16)v34);
      v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
      v36 = v30[v46];
LABEL_60:
      if (v36 != 45)
        goto LABEL_75;
      if (v32 > (__int16)v37
        && *(__int16 *)(a5 + 2 * (__int16)v37 + 124) <= 9
        && *(unsigned __int8 *)(a5 + (__int16)v37 - 1) != v38)
      {
        v47 = v30[(__int16)(v34 + 1)];
        if (v47 == 49)
        {
          v48 = v34 + 2;
          v49 = v30[(__int16)(v34 + 2)];
          if (v49 == 32)
          {
            v50 = 1;
            v25 = v104;
LABEL_73:
            *(_WORD *)(a5 + 2 * ((__int16)v37 - 1) + 864) = v50;
            goto LABEL_74;
          }
          LOBYTE(v47) = 49;
          do
          {
            if (v49 == v38)
              LOBYTE(v47) = 53;
            v49 = v30[(__int16)++v48];
          }
          while (v49 != 32);
        }
        v51 = (v47 - 49);
        v25 = v104;
        if (v51 <= 4)
        {
          v50 = v51 + 1;
          goto LABEL_73;
        }
      }
LABEL_74:
      v52 = *(__int16 *)(v31 + 2 * (__int16)v34);
      v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
      v36 = v30[v52];
LABEL_75:
      if (v36 == 63)
      {
        LOWORD(v53) = v34 + 1;
        v54 = *(unsigned __int16 *)(a5 + 1110);
        if (v54 != (unsigned __int16)(v34 + 1))
        {
          do
          {
            v55 = &v30[(__int16)v53];
            if (((char)*v55 - 48) < 0xA)
              v28 = (char)*v55 - 48;
            v56 = (char)v55[1] - 48;
            if (v56 < 0xA)
              v27 = v56;
            v57 = a5 + 2 * (int)(v26 + v28);
            if (*(__int16 *)(v57 + 370) < (int)v27)
            {
              *(_WORD *)(v57 + 370) = v27;
              LOWORD(v54) = *(_WORD *)(a5 + 1110);
            }
            v53 = *(unsigned __int16 *)(v31 + 2 * (__int16)v53);
          }
          while (v53 != (unsigned __int16)v54);
        }
        v58 = *(__int16 *)(v31 + 2 * (__int16)v34);
        v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
        v36 = v30[v58];
      }
      if ((__int16)v37 != v25)
      {
        while (1)
        {
          if (v36 == 32)
            goto LABEL_35;
          if (v36 == v38)
            break;
          v59 = *(__int16 *)(v31 + 2 * (__int16)v34);
          v34 = *(unsigned __int16 *)(v31 + 2 * (__int16)v34);
          v36 = v30[v59];
        }
        v36 = v30[(__int16)++v34];
        v37 = (__int16)(v37 + 1);
        if (v37 <= v25)
          continue;
      }
      goto LABEL_35;
    }
  }
  v60 = v25 - 1;
LABEL_92:
  LOWORD(v61) = 2;
  if (a6 >= 2 && v60 << 16 > 0x20000)
  {
    LOWORD(v61) = 2;
    do
    {
      LOWORD(v61) = v61 + 1;
      LOWORD(v10) = v10 + 1;
    }
    while ((int)a6 >= (__int16)v61 && (__int16)v60 > (__int16)v61);
  }
  v62 = (__int16)(v25 - a7);
  if (v62 <= (__int16)v61)
    goto LABEL_10;
  v18 = 0;
  v61 = (__int16)v61;
  do
  {
    v63 = *(__int16 *)(a5 + 370 + 2 * v61);
    if (((__int16)(v63 + ((unsigned __int16)(v63 & 0x8000) >> 15)) & 0xFFFFFFFE) != v63
      && *(unsigned __int8 *)(a1 + (__int16)v10 + 1) - 65 <= 0x1C
      && *(unsigned __int8 *)(a1 + (__int16)v10) - 65 <= 0x1C)
    {
      *(_DWORD *)(a3 + 4 * ((unsigned __int16)v10 >> 5)) |= 1 << ~(_BYTE)v10;
      if (!v18)
        v18 = (unsigned __int16)v61;
    }
    ++v61;
    LOWORD(v10) = v10 + 1;
  }
  while (v61 < v62);
  return (__int16)v18;
}

void EndHyphen()
{
  free((void *)brtable);
  free((void *)keytable);
}

uint64_t DCengan(uint64_t result, unsigned int a2, uint64_t a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[3];
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 *)result;
  v7 = *(unsigned __int8 *)(result + 1);
  qmemcpy(v11, "BCDGJKPQTVWYZ", 13);
  qmemcpy(v10, "AEIOaeioFHLMNRSXU", 17);
  *a4 = 12336;
  if (a2 <= 3 && a2 != 2)
  {
    if ((*(_DWORD *)(a3 + 4 * v6) & 0x40000000) != 0)
      LOBYTE(v6) = v6 + 32;
    if ((*(_DWORD *)(a3 + 4 * v6) & 0x10000000) != 0)
    {
      if ((*(_DWORD *)(a3 + 4 * v7) & 0x40000000) != 0)
        LOBYTE(v7) = v7 + 32;
      result = v6;
      if (v6 != 101 || v7 != 117)
      {
        result = char_in(v6, (uint64_t)v10 + 4, 4);
        if ((_DWORD)result)
          v8 = 49;
        else
          v8 = 50;
        *(_BYTE *)a4 = v8;
      }
    }
  }
  if (a2 == 2)
  {
    result = char_in(v6, (uint64_t)v11, 13);
    if ((_DWORD)result)
    {
      v9 = 48;
    }
    else
    {
      result = char_in(v6, (uint64_t)v10, 4);
      if ((_DWORD)result)
      {
        v9 = 49;
      }
      else
      {
        result = char_in(v6, (uint64_t)&v10[1], 9);
        if (!(_DWORD)result)
          return result;
        v9 = 50;
      }
    }
    *(_BYTE *)a4 = v9;
  }
  return result;
}

uint64_t DCposclt(int a1, uint64_t a2, unsigned int a3, _WORD *a4)
{
  uint64_t result;
  int v9;
  uint64_t i;
  unsigned int v11;
  uint64_t *v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD v16[2];
  _QWORD __dst[45];

  __dst[44] = *MEMORY[0x1E0C80C00];
  result = (uint64_t)memcpy(__dst, "arei", 0x160uLL);
  v16[0] = 0x75F46F69EA65E161;
  *(_QWORD *)((char *)v16 + 5) = 0xED6D7A727375F46FLL;
  v15 = 0x72646E736F696561;
  v9 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a4 = 12336;
  if (a1 == 8)
  {
    v12 = &v15;
    v13 = v9;
    v14 = 8;
    goto LABEL_12;
  }
  if (a1 == 12)
  {
    for (i = 0; i != 44; ++i)
    {
      while (1)
      {
        v11 = byte_1DE2EFF54[i];
        if (v11 <= a3)
          break;
        if (++i == 44)
          goto LABEL_10;
      }
      result = cmp_end_char(a2, a3, (unsigned __int8 *)&__dst[i], v11);
      if ((_DWORD)result == 1)
        return result;
    }
    if ((_DWORD)result)
      return result;
LABEL_10:
    v12 = v16;
    v13 = v9;
    v14 = 13;
LABEL_12:
    result = char_in(v13, (uint64_t)v12, v14);
    if (!(_DWORD)result)
      return result;
  }
  *(_BYTE *)a4 = 49;
  return result;
}

uint64_t DCposcls(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, _WORD *a5)
{
  uint64_t v7;
  int v8;
  char v9;
  BOOL v10;
  int v11;
  char v12;
  _WORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  v14[0] = 0xEFED69E8E965E061;
  *(_DWORD *)((char *)v14 + 7) = -218927121;
  qmemcpy(v13, "mos", 3);
  v12 = -19;
  v11 = -185933453;
  v7 = *(unsigned __int8 *)(a2 + a3 - 1);
  *a5 = 12336;
  if (a3 < 2)
    v8 = 0;
  else
    v8 = *(unsigned __int8 *)(a2 + a3 - 2);
  if ((_DWORD)result == 3)
  {
    result = char_in(v7, (uint64_t)v14, 11);
    v10 = (_DWORD)result == 0;
    v9 = 49;
    goto LABEL_10;
  }
  if ((_DWORD)result == 5)
  {
    v9 = 53;
    goto LABEL_14;
  }
  if ((_DWORD)result != 12)
    return result;
  result = cmp_end_char(a2, a3, (unsigned __int8 *)v13, 3);
  if (!(_DWORD)result)
  {
    result = char_in(v7, (uint64_t)&v11, 5);
    v9 = 50;
    if ((_DWORD)result || (v7 & 0xFFFFFFF7) == 0x72)
      goto LABEL_14;
    if ((_DWORD)v7 == 109)
    {
      v9 = 52;
      goto LABEL_14;
    }
    v9 = 51;
    if ((*(_DWORD *)(a4 + 4 * v7) & 0x10000000) == 0)
      goto LABEL_14;
    v10 = v8 == 210 || v8 == 245;
LABEL_10:
    if (v10)
      ++v9;
    goto LABEL_14;
  }
  v9 = 49;
LABEL_14:
  *(_BYTE *)a5 = v9;
  return result;
}

uint64_t DCposacc(uint64_t result, unsigned int a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned int v11;
  char v12;
  _WORD v13[2];
  _WORD v14[2];
  uint64_t v15;
  char v16;
  _QWORD v17[2];

  v7 = result;
  v17[1] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int8 *)(result + a2 - 1);
  qmemcpy(v14, "mos", 3);
  qmemcpy(v13, "ndo", 3);
  v17[0] = 0x656F616F65656165;
  v15 = *(_QWORD *)"eaneenoenua";
  v16 = 110;
  *(_WORD *)a4 = 12336;
  if (!a2)
  {
LABEL_5:
    if (v8 == 114 || v8 == 100)
      goto LABEL_7;
    result = cmp_end_char(result, a2, (unsigned __int8 *)v13, 3);
    if ((_DWORD)result || (result = cmp_end_char(v7, a2, (unsigned __int8 *)v14, 3), (_DWORD)result))
    {
      v12 = 52;
      goto LABEL_11;
    }
    result = cmp_end_char(v7, a2, (unsigned __int8 *)v17, 2);
    if ((_DWORD)result
      || (result = cmp_end_char(v7, a2, (unsigned __int8 *)v17 + 2, 2), (_DWORD)result)
      || (result = cmp_end_char(v7, a2, (unsigned __int8 *)v17 + 4, 2), (_DWORD)result)
      || (result = cmp_end_char(v7, a2, (unsigned __int8 *)v17 + 6, 2), (_DWORD)result))
    {
LABEL_7:
      v12 = 50;
    }
    else
    {
      result = cmp_end_char(v7, a2, (unsigned __int8 *)&v15, 3);
      if (!(_DWORD)result)
      {
        result = cmp_end_char(v7, a2, (unsigned __int8 *)&v15 + 3, 3);
        if (!(_DWORD)result)
        {
          result = cmp_end_char(v7, a2, (unsigned __int8 *)&v15 + 6, 3);
          if (!(_DWORD)result)
          {
            if (a2 >= 3)
              return DCcalacc(v7, a2, a3, a4);
            return result;
          }
        }
      }
      v12 = 51;
    }
LABEL_11:
    a4[1] = v12;
    return result;
  }
  v9 = a2;
  v10 = (unsigned __int8 *)result;
  while (1)
  {
    v11 = *v10++;
    if ((*(_DWORD *)(a3 + 4 * v11) & 0x4000000) != 0)
      return result;
    if (!--v9)
      goto LABEL_5;
  }
}

uint64_t DCcalacc(uint64_t a1, unsigned int a2, uint64_t a3, char *__str)
{
  unsigned __int8 v5;
  uint64_t v6;
  int64x2_t v7;
  int64x2_t v8;
  int64x2_t v9;
  int64x2_t v10;
  char v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE v16[3];
  _OWORD v17[3];
  _OWORD v18[8];
  uint64_t v19;

  v5 = a2;
  v6 = 0;
  v19 = *MEMORY[0x1E0C80C00];
  v17[0] = *(_OWORD *)"ua";
  v17[1] = *(_OWORD *)"o";
  v17[2] = xmmword_1DE2EFFCC;
  memset(v18, 0, sizeof(v18));
  v7 = (int64x2_t)xmmword_1DE2EC820;
  v8 = vdupq_n_s64((unint64_t)v17);
  v9 = vdupq_n_s64(2uLL);
  do
  {
    v10.i64[0] = 3 * v7.i64[0];
    v10.i64[1] = 3 * v7.i64[1];
    v18[v6] = vaddq_s64(v8, v10);
    v7 = vaddq_s64(v7, v9);
    ++v6;
  }
  while (v6 != 8);
  v16[2] = 0;
  *(_WORD *)__str = 12336;
  if (!a2)
    return snprintf(__str, 3uLL, "%02d", v5);
  v11 = 0;
  v12 = 0;
  v13 = a2 - 1;
  while (1)
  {
    if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13)) & 0x10000000) == 0)
    {
      if (v12)
        v11 = v13;
      goto LABEL_13;
    }
    if (!v12)
    {
      v12 = v13;
      goto LABEL_13;
    }
    if (!v13)
      return snprintf(__str, 3uLL, "%02d", v5);
    if (v11)
      break;
    v11 = 0;
LABEL_13:
    v14 = v13-- + 1;
    if (v14 <= 1)
      goto LABEL_14;
  }
  if (!(_BYTE)v13)
  {
LABEL_14:
    v5 = 0;
    return snprintf(__str, 3uLL, "%02d", v5);
  }
  if ((*(_DWORD *)(a3 + 4 * *(unsigned __int8 *)(a1 + v13 - 1)) & 0x10000000) != 0
    && (v16[0] = *(_BYTE *)(a1 + v13 - 1),
        v16[1] = *(_BYTE *)(a1 + v13),
        !cmp_strings(v16, 2, (unsigned __int8 **)v18, 0x10u)))
  {
    v5 = v5 - v13 + 1;
  }
  else
  {
    v5 -= v13;
  }
  return snprintf(__str, 3uLL, "%02d", v5);
}

uint64_t DClnkcod(uint64_t result, uint64_t a2)
{
  char v2;

  *(_WORD *)a2 = 12336;
  v2 = 51;
  switch((int)result)
  {
    case 6:
    case 7:
      goto LABEL_4;
    case 10:
    case 13:
      v2 = 50;
      goto LABEL_4;
    case 11:
      v2 = 49;
      *(_BYTE *)a2 = 49;
LABEL_4:
      *(_BYTE *)(a2 + 1) = v2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t char_in(int a1, uint64_t a2, int a3)
{
  uint64_t v3;

  if (a3)
  {
    v3 = 0;
    while (*(unsigned __int8 *)(a2 + v3) != a1)
    {
      if (a3 == ++v3)
        return 0;
    }
    return (v3 + 1);
  }
  else
  {
    return 0;
  }
}

BOOL cmp_end_char(uint64_t a1, char a2, unsigned __int8 *a3, int a4)
{
  return SLstrncmp((_BYTE *)(a1 + (a2 - a4)), a3, a4) == 0;
}

uint64_t cmp_strings(_BYTE *a1, int a2, unsigned __int8 **a3, unsigned int a4)
{
  uint64_t v7;

  if (!a4)
    return 0;
  v7 = a4;
  while (SLstrncmp(a1, *a3, a2))
  {
    ++a3;
    if (!--v7)
      return 0;
  }
  return 1;
}

uint64_t an_init(_QWORD *a1, const char *a2, int *a3, int a4)
{
  _DWORD *v8;
  _DWORD *v9;
  BOOL (*v10)(int);
  BOOL (*v11)(int);
  BOOL (*v12)(int);
  uint64_t (*v13)(uint64_t);
  uint64_t (*v14)(uint64_t);
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int embmax;
  int infosize;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  void *v32;
  int v33;
  int v34;
  void *v35;
  int v36;
  int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  _BYTE *v44;
  int v45;
  int v46;
  uint64_t v47;

  v8 = malloc_type_calloc(0x1C8uLL, 1uLL, 0x3469DuLL);
  *a1 = v8;
  if (!v8)
    return 4294966895;
  v9 = v8;
  *v8 = a4;
  v8[1] = has_lang_nont(a4);
  if (a4 == 14)
  {
    v10 = is_hun_unsuff_word;
    v11 = is_hun_antiword;
    v12 = is_hun_prefix;
    v13 = prefix_stem_suffix_check_hun;
    v14 = stem_suffix_check_hun;
  }
  else
  {
    if (a4 != 21)
      goto LABEL_7;
    v10 = is_pol_unsuff_word;
    v11 = is_pol_antiword;
    v12 = is_pol_prefix;
    v13 = prefix_stem_suffix_check_pol;
    v14 = stem_suffix_check_pol;
  }
  *((_QWORD *)v9 + 1) = v14;
  *((_QWORD *)v9 + 2) = v13;
  *((_QWORD *)v9 + 3) = v12;
  *((_QWORD *)v9 + 4) = v11;
  *((_QWORD *)v9 + 5) = v10;
LABEL_7:
  *((_QWORD *)v9 + 6) = 0;
  v15 = (uint64_t *)(v9 + 12);
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + 8) = 0u;
  *((_QWORD *)v9 + 7) = 0;
  *((_QWORD *)v9 + 8) = 0;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  result = hdr_init((uint64_t **)v9 + 6, a2);
  if ((result & 0x80000000) != 0)
    return result;
  v17 = hdr_find(*((_QWORD *)v9 + 6), 769);
  result = mt_init((_QWORD *)v9 + 17, (_QWORD *)v9 + 18, a2, v17);
  if ((result & 0x80000000) != 0)
    return result;
  v18 = hdr_find(*v15, 259);
  v19 = hdr_find(*v15, 515);
  result = db_init((_QWORD *)v9 + 16, a2, v18, v19, a3[2], a3[5]);
  if ((result & 0x80000000) != 0)
    return result;
  embmax = db_get_embmax(*((_QWORD *)v9 + 16));
  infosize = db_get_infosize(*((_QWORD *)v9 + 16));
  v22 = malloc_type_calloc(embmax + embmax * infosize, 1uLL, 0x9314D655uLL);
  *((_QWORD *)v9 + 23) = v22;
  if (!v22)
    return 4294966895;
  if (v9[1])
  {
    v23 = hdr_find(*v15, 258);
    v24 = hdr_find(*v15, 514);
    result = db_init((_QWORD *)v9 + 15, a2, v23, v24, a3[1], a3[4]);
    if ((result & 0x80000000) != 0)
      return result;
    v25 = db_get_embmax(*((_QWORD *)v9 + 15));
    v26 = db_get_infosize(*((_QWORD *)v9 + 15));
    v27 = malloc_type_calloc(v25 + v25 * v26, 1uLL, 0x2B4D785DuLL);
    *((_QWORD *)v9 + 22) = v27;
    if (!v27)
      return 4294966895;
  }
  v28 = hdr_find(*v15, 257);
  v29 = hdr_find(*v15, 513);
  result = db_init((_QWORD *)v9 + 14, a2, v28, v29, *a3, a3[3]);
  if ((result & 0x80000000) != 0)
    return result;
  v30 = db_get_embmax(*((_QWORD *)v9 + 14));
  v31 = db_get_infosize(*((_QWORD *)v9 + 14));
  v32 = malloc_type_calloc(v30 + v30 * v31, 1uLL, 0x5223811BuLL);
  *((_QWORD *)v9 + 19) = v32;
  if (!v32)
    return 4294966895;
  v33 = db_get_embmax(*((_QWORD *)v9 + 14));
  v34 = db_get_infosize(*((_QWORD *)v9 + 14));
  v35 = malloc_type_calloc(v33 + v33 * v34, 1uLL, 0x2A7BE5B0uLL);
  *((_QWORD *)v9 + 20) = v35;
  if (!v35)
    return 4294966895;
  v36 = db_get_embmax(*((_QWORD *)v9 + 14));
  v37 = db_get_infosize(*((_QWORD *)v9 + 14));
  v38 = malloc_type_calloc(v36 + v36 * v37, 1uLL, 0xB7DCBC31uLL);
  *((_QWORD *)v9 + 21) = v38;
  if (!v38)
    return 4294966895;
  v39 = f_open(a2, 1);
  if (!v39)
    return 4294967094;
  v40 = v39;
  v47 = 0;
  v41 = hdr_find(*v15, 1281);
  f_seek(v40, v41, 0);
  if (fgetl_lsb1st(v40, &v47) == -1
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 11) == -1
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 9) == -1)
  {
    goto LABEL_33;
  }
  v42 = malloc_type_calloc(*((_QWORD *)v9 + 9) * *((_QWORD *)v9 + 11), 1uLL, 0x7187B8CuLL);
  *((_QWORD *)v9 + 7) = v42;
  if (!v42)
  {
LABEL_36:
    f_close(v40);
    return 4294966895;
  }
  if (f_read(v42, v9[22] * v9[18], 1, v40) != 1
    || (v43 = hdr_find(*v15, 1282), f_seek(v40, v43, 0), fgetl_lsb1st(v40, &v47) == -1)
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 12) == -1
    || fgetl_lsb1st(v40, (uint64_t *)v9 + 10) == -1)
  {
LABEL_33:
    f_close(v40);
    return 4294967092;
  }
  v44 = malloc_type_calloc(*((_QWORD *)v9 + 10) * *((_QWORD *)v9 + 12), 1uLL, 0x73C8F76uLL);
  *((_QWORD *)v9 + 8) = v44;
  if (!v44)
    goto LABEL_36;
  v45 = f_read(v44, v9[24] * v9[20], 1, v40);
  f_close(v40);
  if (v45 != 1)
    return 4294967092;
  v46 = open(a2, 0, 511, v47);
  v9[26] = v46;
  if (v46 == -1)
    return 4294967094;
  db_set_file(*((_DWORD **)v9 + 14), v46);
  if (v9[1])
    db_set_file(*((_DWORD **)v9 + 15), v9[26]);
  db_set_file(*((_DWORD **)v9 + 16), v9[26]);
  return 0;
}

uint64_t stem_suffix_check_hun(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(a1 + 328))
    v1 = (*(_QWORD *)(a1 + 336) != 0) | 2u;
  else
    v1 = *(_QWORD *)(a1 + 336) != 0;
  return ((uint64_t (*)(void))((char *)sub_1DE29B028 + 4 * byte_1DE2EFFDC[v1]))();
}

BOOL sub_1DE29B028(uint64_t a1)
{
  return (*(_WORD *)(a1 + 350) & 0x9000) != 4096;
}

uint64_t prefix_stem_suffix_check_hun(uint64_t a1)
{
  uint64_t v1;

  if (*(_QWORD *)(a1 + 328))
    v1 = (*(_QWORD *)(a1 + 336) != 0) | 2u;
  else
    v1 = *(_QWORD *)(a1 + 336) != 0;
  return ((uint64_t (*)(void))((char *)sub_1DE29B0B8 + 4 * byte_1DE2EFFE0[v1]))();
}

BOOL sub_1DE29B0B8(uint64_t a1)
{
  return (*(_WORD *)(a1 + 350) & 0x9000) == 0;
}

BOOL sub_1DE29B0CC(uint64_t a1)
{
  return *(__int16 *)(a1 + 350) >= 0;
}

uint64_t sub_1DE29B0DC(uint64_t a1)
{
  int v1;
  _BOOL4 v3;

  v1 = *(__int16 *)(a1 + 350);
  if ((v1 & 0x80000000) == 0)
    return 1;
  v3 = (v1 & 0x800F) != 0x8000;
  return (*(_WORD *)(a1 + 360) & 0x9000) == 0 && v3;
}

BOOL is_hun_prefix(int a1)
{
  return (a1 & 0xFFFF800F) == 32769;
}

BOOL is_hun_antiword(int a1)
{
  return (~a1 & 0x800E) == 0;
}

BOOL is_hun_unsuff_word(int a1)
{
  return (a1 & 0xFFFF800F) == 0x8000;
}

uint64_t stem_suffix_check_pol(uint64_t a1)
{
  int v1;
  int v2;
  int v4;
  int v5;

  v1 = *(_QWORD *)(a1 + 336) != 0;
  if (*(_QWORD *)(a1 + 328))
    v1 |= 2u;
  if (v1 != 1)
  {
    if (!v1)
    {
      v2 = *(_DWORD *)(a1 + 272);
      if ((v2 & 0x4000) == 0 && ((v2 & 0x1000) == 0 || *(__int16 *)(a1 + 350) < 0 && *(_BYTE *)(a1 + 348) != 54))
        return 1;
    }
    return 0;
  }
  v4 = *(_DWORD *)(a1 + 272);
  v5 = *(unsigned __int16 *)(a1 + 350);
  if ((v4 & 0x4000) == 0 || (v5 & 0x8000) == 0 && (*(_BYTE *)(a1 + 368) & 0xFC) == 0x68)
  {
    if ((v5 & 0xFFFF8003) == 0x8000)
    {
      if ((v4 & 0x2000) != 0 || *(_BYTE *)(a1 + 368) != 102)
        return (v5 & 0xFFFF800F) != 32773;
    }
    else if ((v4 & 0x1000) == 0 || (__int16)v5 < 0 || *(unsigned __int8 *)(a1 + 368) - 114 <= 3)
    {
      return (v5 & 0xFFFF800F) != 32773;
    }
  }
  return 0;
}

uint64_t prefix_stem_suffix_check_pol(uint64_t a1)
{
  BOOL v1;
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;

  if (*(_QWORD *)(a1 + 328))
    v1 = 1;
  else
    v1 = *(_QWORD *)(a1 + 336) == 0;
  if (v1)
    return 0;
  v2 = *(_DWORD *)(a1 + 272);
  if ((v2 & 0x4000) != 0
    || (v2 & 0x1000) != 0
    && (*(__int16 *)(a1 + 350) & 0x80000000) == 0
    && *(unsigned __int8 *)(a1 + 368) - 114 > 3)
  {
    return 0;
  }
  v3 = *(unsigned __int16 *)(a1 + 350);
  if ((v3 & 0xFFFF8003) != 0x8000)
  {
    if ((v3 & 0x8000) == 0 && (*(__int16 *)(a1 + 370) & 0x80000000) == 0)
    {
      v6 = *(unsigned __int8 *)(a1 + 368);
      v7 = v6 - 114;
      LODWORD(v4) = v6 == 117;
      if (v7 >= 3)
        return v4;
      else
        return 1;
    }
    return 0;
  }
  if ((v2 & 0x2000) == 0 && *(_BYTE *)(a1 + 368) == 102)
    return 0;
  v4 = 1;
  switch(((unsigned __int16)((*(_WORD *)(a1 + 346) & 0x80FF) + 32731) >> 6) | (unsigned __int16)(((*(_WORD *)(a1 + 346) & 0x80FF)
                                                                                                  + 32731) << 10))
  {
    case 0:
      v5 = *(unsigned __int16 *)(a1 + 370);
      if ((v5 & 0xFFFF8003) != 0x8000 || (v5 & 0x1300) == 0)
        return 0;
      goto LABEL_24;
    case 1:
      if ((*(_WORD *)(a1 + 370) & 0x9303) != 0x8000)
        return 0;
      v8 = *(char *)(*(_QWORD *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304));
      if ((v8 - 97) >= 0x1A && !strchr(is_cwi_lower_pol_lower8, v8))
        return 0;
      goto LABEL_24;
    case 2:
      if ((*(_WORD *)(a1 + 370) & 0x9303) != 0x8000)
        return 0;
LABEL_24:
      v4 = 1;
      break;
    case 3:
      return v4;
    default:
      return 0;
  }
  return v4;
}

BOOL is_pol_prefix(int a1)
{
  return (a1 & 0xFFFF803F) == 32805;
}

BOOL is_pol_antiword(int a1)
{
  return (a1 & 0xFFFF80FF) == 33013;
}

BOOL is_pol_unsuff_word(int a1)
{
  return (a1 & 0xFFFF800F) == 32773;
}

void an_finish(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  if (a1)
  {
    close(*(_DWORD *)(a1 + 104));
    v2 = *(void **)(a1 + 64);
    if (v2)
      free(v2);
    v3 = *(void **)(a1 + 56);
    if (v3)
      free(v3);
    db_finish(*(int **)(a1 + 112));
    v4 = *(void **)(a1 + 152);
    if (v4)
      free(v4);
    v5 = *(void **)(a1 + 160);
    if (v5)
      free(v5);
    v6 = *(void **)(a1 + 168);
    if (v6)
      free(v6);
    if (*(_DWORD *)(a1 + 4))
    {
      db_finish(*(int **)(a1 + 120));
      v7 = *(void **)(a1 + 176);
      if (v7)
        free(v7);
    }
    db_finish(*(int **)(a1 + 128));
    v8 = *(void **)(a1 + 184);
    if (v8)
      free(v8);
    mt_finish(*(void **)(a1 + 136), *(void **)(a1 + 144));
    hdr_finish(*(_QWORD **)(a1 + 48));
    free((void *)a1);
  }
}

uint64_t an_analyze(uint64_t a1, _BYTE *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  int infosize;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  char v23;
  __int16 v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  int v58;
  uint64_t v59;
  unsigned __int8 *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  int v74;
  int v75;
  int v76;
  BOOL v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  char v82;
  unsigned int v83;
  int v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;

  result = 4294966886;
  if (a3 > 64 || !a3)
    return result;
  infosize = db_get_infosize(*(_QWORD *)(a1 + 112));
  if (a3 >= 1)
    bzero((void *)(a1 + 392), a3);
  *(_DWORD *)(a1 + 108) = 0;
  *(_QWORD *)(a1 + 192) = a2;
  *(_DWORD *)(a1 + 200) = a3;
  *(_BYTE *)(a1 + 204) = 0;
  *(_DWORD *)(a1 + 272) = a4;
  *(_OWORD *)(a1 + 376) = xmmword_1DE2EFFF0;
  v14 = a2[a3];
  a2[a3] = 0;
  v93 = *(_QWORD *)(a1 + 152);
  v94 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 168);
  v16 = db_search(*(_QWORD *)(a1 + 112), a2, v93);
  *(_DWORD *)(a1 + 276) = v16;
  if (v16 < 0)
  {
    a2[a3] = v14;
    return *(unsigned int *)(a1 + 276);
  }
  v89 = v15;
  v90 = v14;
  v91 = a3;
  v87 = a5;
  v84 = infosize;
  if (v16)
  {
    v92 = 0;
    v17 = infosize + 1;
    v18 = -v17;
    v88 = v17;
    while (1)
    {
      v19 = v16 + 1;
      v20 = (unsigned __int8 *)(v93 + v17 * (v16 - 1));
      v21 = v16;
      while (1)
      {
        *(_QWORD *)(a1 + 312) = 0;
        *(_QWORD *)(a1 + 320) = 0;
        *(_QWORD *)(a1 + 304) = v20;
        v22 = *v20;
        if (stem_check(a1, (uint64_t)v20, *v20))
          break;
        if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
        {
          if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
            v23 = 1;
          else
            v23 = 2;
        }
        else
        {
          v23 = 0;
        }
        *(_BYTE *)(v22 + a1 + 391) |= v23;
        --v21;
        --v19;
        v20 += v18;
        if (v19 <= 1)
          goto LABEL_101;
      }
      *(_BYTE *)(a1 + 344) = *(_BYTE *)(a1 + 348);
      v24 = *(_WORD *)(a1 + 350);
      *(_WORD *)(a1 + 352) = v24;
      *(_WORD *)(a1 + 346) = v24;
      if ((*(unsigned int (**)(void))(a1 + 24))())
      {
        v25 = **(unsigned __int8 **)(a1 + 304);
        if ((_DWORD)v25 != a3 || (*(_BYTE *)(a1 + 273) & 2) != 0)
        {
          v26 = db_search(*(_QWORD *)(a1 + 112), &a2[v25], v94);
          *(_DWORD *)(a1 + 280) = v26;
          if (v26 < 0)
            goto LABEL_172;
          v83 = a6;
          if (v26)
          {
            do
            {
              v27 = v26 + 1;
              v28 = (unsigned __int8 *)(v94 + v88 * (v26 - 1));
              v29 = v26;
              while (1)
              {
                *(_QWORD *)(a1 + 312) = v28;
                v30 = **(unsigned __int8 **)(a1 + 304);
                v31 = *v28;
                v32 = v31 + v30;
                if (stem_check(a1, (uint64_t)v28, (int)v31 + (int)v30))
                  break;
                if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                {
                  if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
                    v33 = 1;
                  else
                    v33 = 2;
                }
                else
                {
                  v33 = 0;
                }
                *(_BYTE *)(v32 + a1 + 391) |= v33;
                --v29;
                --v27;
                v28 += v18;
                if (v27 <= 1)
                  goto LABEL_96;
              }
              *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 350);
              if ((*(unsigned int (**)(void))(a1 + 24))())
              {
                a6 = v83;
              }
              else
              {
                *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 312);
                a6 = v83;
                result = scan(a1, *(unsigned int (**)(uint64_t))(a1 + 16), v87, v92, v83);
                if ((_DWORD)result == v83 || (result & 0x80000000) != 0 || (*(_BYTE *)(a1 + 108) & 4) != 0)
                  goto LABEL_173;
                v92 = result;
              }
              v26 = v29 - 1;
            }
            while (v29 >= 2);
          }
        }
        else if (*(_DWORD *)a1 == 14)
        {
          *(_QWORD *)(a1 + 328) = 0;
          *(_QWORD *)(a1 + 336) = 0;
          v92 = process_result(a1, v87, v92);
          if (v92 == (_DWORD)a6)
          {
            a2[a3] = v90;
            return a6;
          }
        }
      }
      else
      {
        if (*(_DWORD *)a1 == 14 && *(__int16 *)(a1 + 350) == -32768)
        {
          if (**(_BYTE **)(a1 + 304) != 3)
            goto LABEL_50;
          if (!SLstrncmp(a2, "leg", 3))
            goto LABEL_56;
          if (*(__int16 *)(a1 + 350) == -32768)
          {
LABEL_50:
            if (**(_BYTE **)(a1 + 304) == 8 && !SLstrncmp(a2, "legesleg", 8))
            {
LABEL_56:
              v34 = db_search(*(_QWORD *)(a1 + 112), &a2[**(unsigned __int8 **)(a1 + 304)], v94);
              *(_DWORD *)(a1 + 280) = v34;
              if (v34 < 0)
              {
LABEL_172:
                a2[v91] = v90;
                return *(unsigned int *)(a1 + 280);
              }
              v83 = a6;
              if (v34)
              {
                while (1)
                {
                  v35 = v34 + 1;
                  v36 = (unsigned __int8 *)(v94 + v88 * (v34 - 1));
                  v37 = v34;
                  while (1)
                  {
                    *(_QWORD *)(a1 + 312) = v36;
                    v38 = **(unsigned __int8 **)(a1 + 304);
                    v39 = *v36;
                    v40 = v39 + v38;
                    if (stem_check(a1, (uint64_t)v36, (int)v39 + (int)v38))
                      break;
                    if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                    {
                      if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
                        v41 = 1;
                      else
                        v41 = 2;
                    }
                    else
                    {
                      v41 = 0;
                    }
                    *(_BYTE *)(v40 + a1 + 391) |= v41;
                    --v37;
                    --v35;
                    v36 += v18;
                    if (v35 <= 1)
                    {
LABEL_96:
                      a6 = v83;
                      goto LABEL_97;
                    }
                  }
                  *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 350);
                  if ((*(unsigned int (**)(void))(a1 + 24))())
                  {
                    v42 = db_search(*(_QWORD *)(a1 + 112), &a2[**(unsigned __int8 **)(a1 + 304) + **(unsigned __int8 **)(a1 + 312)], v89);
                    *(_DWORD *)(a1 + 284) = v42;
                    if (v42 < 0)
                    {
                      a2[a3] = v90;
                      return *(unsigned int *)(a1 + 284);
                    }
                    v85 = a2;
                    if (v42)
                    {
                      do
                      {
                        v43 = v42 + 1;
                        v44 = (unsigned __int8 *)(v89 + v88 * (v42 - 1));
                        v45 = v42;
                        while (1)
                        {
                          *(_QWORD *)(a1 + 320) = v44;
                          v46 = **(unsigned __int8 **)(a1 + 312) + (unint64_t)**(unsigned __int8 **)(a1 + 304);
                          v47 = *v44;
                          v48 = v46 + v47;
                          if (stem_check(a1, (uint64_t)v44, (int)v46 + (int)v47))
                            break;
                          if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                          {
                            if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
                              v49 = 1;
                            else
                              v49 = 2;
                          }
                          else
                          {
                            v49 = 0;
                          }
                          *(_BYTE *)(v48 + a1 + 391) |= v49;
                          --v45;
                          --v43;
                          v44 += v18;
                          if (v43 <= 1)
                          {
                            a2 = v85;
                            goto LABEL_93;
                          }
                        }
                        *(_WORD *)(a1 + 356) = *(_WORD *)(a1 + 350);
                        if ((*(unsigned int (**)(void))(a1 + 24))())
                        {
                          a2 = v85;
                        }
                        else
                        {
                          *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 320);
                          result = scan(a1, (unsigned int (*)(uint64_t))supl_prefix_stem_suffix_check_hun, v87, v92, v83);
                          a2 = v85;
                          if ((_DWORD)result == v83 || (result & 0x80000000) != 0 || (*(_BYTE *)(a1 + 108) & 4) != 0)
                            goto LABEL_173;
                          v92 = result;
                        }
                        v42 = v45 - 1;
                      }
                      while (v45 >= 2);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 312);
                    result = scan(a1, (unsigned int (*)(uint64_t))supl_stem_suffix_check_hun, v87, v92, v83);
                    if ((_DWORD)result == v83 || (result & 0x80000000) != 0 || (*(_BYTE *)(a1 + 108) & 4) != 0)
                      goto LABEL_173;
                    v92 = result;
                  }
LABEL_93:
                  v34 = v37 - 1;
                  v50 = v37 < 2;
                  a6 = v83;
                  if (v50)
                    goto LABEL_97;
                }
              }
              goto LABEL_97;
            }
          }
        }
        if ((*(_BYTE *)(a1 + 273) & 2) == 0)
        {
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 304);
          result = scan(a1, *(unsigned int (**)(uint64_t))(a1 + 8), v87, v92, a6);
          if ((_DWORD)result == (_DWORD)a6 || (result & 0x80000000) != 0 || (*(_BYTE *)(a1 + 108) & 4) != 0)
          {
LABEL_173:
            a2[a3] = v90;
            return result;
          }
          v92 = result;
        }
      }
LABEL_97:
      v16 = v21 - 1;
      v17 = v88;
      if (v21 < 2)
        goto LABEL_101;
    }
  }
  v92 = 0;
LABEL_101:
  if (*(_DWORD *)a1 == 14 && (*(_BYTE *)(a1 + 273) & 4) == 0)
  {
    v51 = *(unsigned int *)(a1 + 276);
    if ((int)v51 >= 1)
    {
      v52 = v84 + 1;
      v53 = v93;
      v86 = a2;
      do
      {
        v54 = (unsigned __int8 *)(v53 + (v51 - 1) * v52);
        *(_QWORD *)(a1 + 312) = 0;
        *(_QWORD *)(a1 + 320) = 0;
        *(_QWORD *)(a1 + 304) = v54;
        v55 = *v54;
        if (stem_check(a1, (uint64_t)v54, *v54))
        {
          *(_BYTE *)(a1 + 344) = *(_BYTE *)(a1 + 348);
          v56 = *(_WORD *)(a1 + 350);
          *(_WORD *)(a1 + 352) = v56;
          *(_WORD *)(a1 + 346) = v56;
          *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 304);
          if (!(*(unsigned int (**)(void))(a1 + 24))())
          {
            if (match_stem_null((int *)a1))
            {
              v57 = *(unsigned __int16 *)(a1 + 350);
              if ((~v57 & 0x8010) != 0 || (v57 & 0xE) == 6 || (*(_BYTE *)(a1 + 273) & 1) != 0)
              {
                v58 = db_search(*(_QWORD *)(a1 + 112), &a2[**(unsigned __int8 **)(a1 + 304)], v94);
                *(_DWORD *)(a1 + 280) = v58;
                if (v58 < 0)
                  goto LABEL_172;
                if (v58)
                {
                  do
                  {
                    v59 = v58 + 1;
                    v60 = (unsigned __int8 *)(v94 + v52 * (v58 - 1));
                    v61 = v58;
                    while (1)
                    {
                      *(_QWORD *)(a1 + 312) = v60;
                      *(_QWORD *)(a1 + 320) = 0;
                      v62 = **(unsigned __int8 **)(a1 + 304);
                      v63 = *v60;
                      v64 = v63 + v62;
                      if (stem_check(a1, (uint64_t)v60, (int)v63 + (int)v62))
                        break;
                      if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                      {
                        if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
                          v65 = 1;
                        else
                          v65 = 2;
                      }
                      else
                      {
                        v65 = 0;
                      }
                      *(_BYTE *)(v64 + a1 + 391) |= v65;
                      --v61;
                      --v59;
                      v60 += -v84 - 1;
                      if (v59 <= 1)
                      {
                        a2 = v86;
                        v52 = v84 + 1;
                        goto LABEL_168;
                      }
                    }
                    *(_WORD *)(a1 + 354) = *(_WORD *)(a1 + 350);
                    if ((*(unsigned int (**)(void))(a1 + 24))())
                    {
                      v66 = db_search(*(_QWORD *)(a1 + 112), &v86[**(unsigned __int8 **)(a1 + 304) + **(unsigned __int8 **)(a1 + 312)], v89);
                      *(_DWORD *)(a1 + 284) = v66;
                      v52 = v84 + 1;
                      if (v66 < 0)
                      {
                        v86[v91] = v90;
                        return *(unsigned int *)(a1 + 284);
                      }
                      if (v66)
                      {
                        do
                        {
                          v67 = v66 + 1;
                          v68 = (unsigned __int8 *)(v89 + v52 * (v66 - 1));
                          v69 = v66;
                          while (1)
                          {
                            *(_QWORD *)(a1 + 320) = v68;
                            v70 = **(unsigned __int8 **)(a1 + 312) + (unint64_t)**(unsigned __int8 **)(a1 + 304);
                            v71 = *v68;
                            v72 = v70 + v71;
                            if (stem_check(a1, (uint64_t)v68, (int)v70 + (int)v71))
                              break;
                            if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
                            {
                              if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
                                v73 = 1;
                              else
                                v73 = 2;
                            }
                            else
                            {
                              v73 = 0;
                            }
                            *(_BYTE *)(v72 + a1 + 391) |= v73;
                            --v69;
                            --v67;
                            v68 += -v84 - 1;
                            if (v67 <= 1)
                            {
                              v53 = v93;
                              v52 = v84 + 1;
                              goto LABEL_158;
                            }
                          }
                          *(_WORD *)(a1 + 356) = *(_WORD *)(a1 + 350);
                          if ((*(unsigned int (**)(void))(a1 + 24))())
                          {
                            v53 = v93;
                            v52 = v84 + 1;
                          }
                          else
                          {
                            v74 = *(unsigned __int16 *)(a1 + 350);
                            v75 = ~v74 & 0x8010;
                            v76 = v74 & 0xE;
                            if (v75)
                              v77 = 1;
                            else
                              v77 = v76 == 6;
                            v53 = v93;
                            v52 = v84 + 1;
                            if (v77 || (*(_BYTE *)(a1 + 273) & 1) != 0)
                            {
                              *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 320);
                              result = scan(a1, (unsigned int (*)(uint64_t))stem_prefix_stem_suffix_check_hun, v87, v92, a6);
                              if ((_DWORD)result == (_DWORD)a6
                                || (result & 0x80000000) != 0
                                || (*(_BYTE *)(a1 + 108) & 4) != 0)
                              {
                                goto LABEL_174;
                              }
                              v92 = result;
                            }
                          }
                          v66 = v69 - 1;
                        }
                        while (v69 >= 2);
                      }
                    }
                    else
                    {
                      v78 = *(unsigned __int16 *)(a1 + 350);
                      v79 = ~v78 & 0x8010;
                      v80 = v78 & 0xE;
                      if (v79)
                        v81 = 1;
                      else
                        v81 = v80 == 6;
                      v52 = v84 + 1;
                      if (v81 || (*(_BYTE *)(a1 + 273) & 1) != 0)
                      {
                        *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 312);
                        result = scan(a1, (unsigned int (*)(uint64_t))stem_stem_suffix_check_hun, v87, v92, a6);
                        if ((_DWORD)result == (_DWORD)a6
                          || (result & 0x80000000) != 0
                          || (*(_BYTE *)(a1 + 108) & 4) != 0)
                        {
LABEL_174:
                          v86[v91] = v90;
                          return result;
                        }
                        v92 = result;
                      }
                    }
LABEL_158:
                    v58 = v61 - 1;
                    v50 = v61 < 2;
                    a2 = v86;
                  }
                  while (!v50);
                }
              }
            }
          }
        }
        else
        {
          if ((*(unsigned int (**)(_QWORD))(a1 + 32))(*(unsigned __int16 *)(a1 + 350)))
          {
            if (*(_DWORD *)a1 == 14 && (*(_WORD *)(a1 + 350) & 1) != 0)
              v82 = 1;
            else
              v82 = 2;
          }
          else
          {
            v82 = 0;
          }
          *(_BYTE *)(v55 + a1 + 391) |= v82;
        }
LABEL_168:
        v50 = v51-- < 2;
      }
      while (!v50);
    }
  }
  a2[v91] = v90;
  return v92;
}

uint64_t stem_check(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  int v11;

  v5 = *(unsigned __int8 **)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 88);
  if ((int)v6 >= 1)
  {
    v7 = (__int16)(*(unsigned __int8 *)(a2 + 2) << 8) | (unint64_t)*(unsigned __int8 *)(a2 + 1);
    v5 += v7 + v7 * (v6 - 1);
  }
  v8 = *v5;
  v9 = *(unsigned __int16 *)(v5 + 1);
  *(_BYTE *)(a1 + 348) = v8;
  *(_WORD *)(a1 + 350) = v9;
  if ((*(unsigned int (**)(uint64_t))(a1 + 32))(v9))
    return 0;
  v11 = *(char *)(a1 + a3 + 391);
  if (!*(_BYTE *)(a1 + a3 + 391) || (v11 & 1) != 0 && (*(_DWORD *)(a1 + 272) & 0x100) != 0)
  {
    if (*(_DWORD *)a1 == 14)
    {
      if (v8 == 67 && (_DWORD)v9 == 32784)
        return 0;
      if ((v9 & 0x800E) != 0x8006 && (*(_DWORD *)(a1 + 272) & 0x800) != 0)
        return 0;
    }
    return 1;
  }
  else
  {
    result = 0;
    *(_DWORD *)(a1 + 108) |= v11;
  }
  return result;
}

uint64_t process_result(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  _DWORD *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[28];

  v12[27] = 0;
  v3 = *(_QWORD *)(a1 + 304);
  if (v3)
  {
    *(_DWORD *)v12 = *(_DWORD *)v3;
    v12[4] = *(_BYTE *)(v3 + 4);
    LOWORD(v3) = *(_WORD *)(a1 + 352);
  }
  else
  {
    v12[4] = 0;
    *(_DWORD *)v12 = 0;
  }
  v4 = *(_QWORD *)(a1 + 312);
  if (v4)
  {
    *(_DWORD *)&v12[5] = *(_DWORD *)v4;
    v12[9] = *(_BYTE *)(v4 + 4);
    LOWORD(v4) = *(_WORD *)(a1 + 354);
  }
  else
  {
    v12[9] = 0;
    *(_DWORD *)&v12[5] = 0;
  }
  v5 = *(_QWORD *)(a1 + 320);
  if (v5)
  {
    *(_DWORD *)&v12[10] = *(_DWORD *)v5;
    v12[14] = *(_BYTE *)(v5 + 4);
    LOWORD(v5) = *(_WORD *)(a1 + 356);
  }
  else
  {
    v12[14] = 0;
    *(_DWORD *)&v12[10] = 0;
  }
  v6 = *(_WORD *)(a1 + 350);
  if (*(_DWORD *)(a1 + 4))
  {
    v7 = *(_DWORD **)(a1 + 328);
    if (v7)
    {
      *(_DWORD *)&v12[15] = *v7;
      *(_DWORD *)&v12[18] = *(_DWORD *)((char *)v7 + 3);
      v8 = *(_WORD *)(a1 + 360);
      goto LABEL_16;
    }
    *(_DWORD *)&v12[18] = 0;
    *(_DWORD *)&v12[15] = 0;
  }
  else
  {
    *(_DWORD *)&v12[18] = 0;
    *(_DWORD *)&v12[15] = 0;
  }
  v8 = *(_WORD *)(a1 + 350);
LABEL_16:
  v9 = *(_QWORD *)(a1 + 336);
  if (v9)
  {
    *(_DWORD *)&v12[22] = *(_DWORD *)v9;
    v12[26] = *(_BYTE *)(v9 + 4);
    if (*(_DWORD *)a1 == 21)
      LOBYTE(v9) = *(_BYTE *)(a1 + 368);
    else
      LOBYTE(v9) = 0;
  }
  else
  {
    v12[26] = 0;
    *(_DWORD *)&v12[22] = 0;
  }
  v10 = a2 + 40 * a3;
  *(_OWORD *)v10 = *(_OWORD *)v12;
  *(_OWORD *)(v10 + 12) = *(_OWORD *)&v12[12];
  *(_WORD *)(v10 + 28) = v3;
  *(_WORD *)(v10 + 30) = v4;
  *(_WORD *)(v10 + 32) = v5;
  *(_WORD *)(v10 + 34) = v8;
  *(_WORD *)(v10 + 36) = v6;
  *(_BYTE *)(v10 + 38) = v9;
  *(_BYTE *)(v10 + 39) = 0;
  return (a3 + 1);
}

uint64_t scan(uint64_t a1, unsigned int (*a2)(uint64_t), uint64_t a3, uint64_t a4, unsigned int a5)
{
  int v10;
  int infosize;
  int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  _BYTE *v24;
  unsigned int v25;
  char v26;
  uint64_t i;
  int v28;
  int v29;
  int v30;
  char *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  int v55;
  char *v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  uint64_t v59;
  unsigned int (*v60)(uint64_t);
  uint64_t v61;

  v10 = *(char *)(*(int *)(a1 + 200) + a1 + 391);
  if (*(_BYTE *)(*(int *)(a1 + 200) + a1 + 391) && ((v10 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0))
  {
    v12 = *(_DWORD *)(a1 + 108) | v10;
    goto LABEL_7;
  }
  if (*(_DWORD *)(a1 + 4))
    infosize = db_get_infosize(*(_QWORD *)(a1 + 120));
  else
    infosize = 0;
  v13 = db_get_infosize(*(_QWORD *)(a1 + 128));
  v14 = *(unsigned __int8 **)(a1 + 296);
  v15 = *(unsigned __int8 **)(a1 + 304);
  v16 = *v15;
  if (v14 != v15)
  {
    v17 = *(unsigned __int8 **)(a1 + 312);
    v16 += *v17;
    if (v14 != v17)
      v16 += **(unsigned __int8 **)(a1 + 320);
  }
  if (*(_DWORD *)(a1 + 4))
    v61 = *(_QWORD *)(a1 + 176);
  else
    v61 = 0;
  v18 = *(unsigned __int8 **)(a1 + 184);
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  v19 = *(int *)(a1 + 200);
  if (v16 == (_DWORD)v19)
  {
    if (!match_stem_null((int *)a1) || !a2(a1))
      return a4;
    return process_result(a1, a3, a4);
  }
  if (*(_DWORD *)a1 == 21 && *(_BYTE *)(a1 + 348) == 65)
    return a4;
  if (*(_DWORD *)(a1 + 388))
  {
    LODWORD(v21) = *(_DWORD *)(a1 + 292);
  }
  else
  {
    v22 = (_BYTE *)(a1 + 204);
    if (!*(_BYTE *)(a1 + 204))
    {
      v23 = *(char **)(a1 + 192);
      v22[v19] = 0;
      if ((int)v19 >= 1)
      {
        v24 = (_BYTE *)(v19 + a1 + 203);
        v25 = v19 + 1;
        do
        {
          v26 = *v23++;
          *v24-- = v26;
          --v25;
        }
        while (v25 > 1);
      }
    }
    v21 = db_search(*(_QWORD *)(a1 + 128), v22, (uint64_t)v18);
    *(_DWORD *)(a1 + 292) = v21;
    if ((v21 & 0x80000000) != 0)
      return v21;
    *(_DWORD *)(a1 + 388) = 1;
  }
  v58 = v18;
  v59 = a3;
  v60 = a2;
  if ((int)v21 >= 1)
  {
    for (i = 0; i < *(int *)(a1 + 292); ++i)
    {
      *(_QWORD *)(a1 + 336) = v18;
      if ((signed int)(v16 + *v18) > *(_DWORD *)(a1 + 200))
        break;
      fill_term(a1);
      v28 = *(_DWORD *)(a1 + 200);
      v29 = **(unsigned __int8 **)(a1 + 336);
      v30 = *(char *)(a1 + v28 + ~v29 + 392);
      if (*(_BYTE *)(a1 + v28 + ~v29 + 392) && ((v30 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0))
      {
        *(_DWORD *)(a1 + 108) |= v30;
        break;
      }
      if (v16 + v29 == v28)
      {
        v31 = *(__int16 *)(a1 + 350) < 0 ? *(char **)(a1 + 144) : *(char **)(a1 + 136);
        if (mt_match(v31, *(char *)(a1 + 348), *(char *)(a1 + 368))
          && ((*(unsigned __int16 *)(a1 + 370) ^ *(unsigned __int16 *)(a1 + 350)) & *(unsigned __int16 *)(a1 + 372)) == 0
          && a2(a1)
          && (*(_DWORD *)a1 != 14
           || (*(__int16 *)(a1 + 350) & 0x80000000) == 0
           || *(_BYTE *)(a1 + 368) != 110
           || *(unsigned __int8 *)(*(_QWORD *)(a1 + 192) + v16 - 1) == *(unsigned __int8 *)(*(_QWORD *)(a1 + 192) + v16)))
        {
          a4 = process_result(a1, v59, a4);
          if ((_DWORD)a4 == a5)
            return a5;
        }
      }
      v18 += v13 + 1;
    }
  }
  if (!*(_DWORD *)(a1 + 4))
    return a4;
  if (*(_DWORD *)(a1 + 384) != v16)
  {
    v21 = db_search(*(_QWORD *)(a1 + 120), (_BYTE *)(*(_QWORD *)(a1 + 192) + v16), v61);
    *(_DWORD *)(a1 + 288) = v21;
    if ((v21 & 0x80000000) == 0)
    {
      *(_DWORD *)(a1 + 384) = v16;
      goto LABEL_55;
    }
    return v21;
  }
  LODWORD(v21) = *(_DWORD *)(a1 + 288);
LABEL_55:
  if ((int)v21 < 1)
    return a4;
  v32 = 0;
  v33 = infosize + 1;
  v34 = v13 + 1;
  v35 = v33;
  v36 = a1 + v16 - 1;
  while (1)
  {
    v37 = (unsigned __int8 *)(v61 + v32 * v35);
    *(_QWORD *)(a1 + 328) = v37;
    *(_QWORD *)(a1 + 336) = 0;
    v38 = *(_QWORD *)(a1 + 56);
    v39 = *(_QWORD *)(a1 + 88);
    if ((int)v39 >= 1)
    {
      v40 = (__int16)(v37[2] << 8) | (unint64_t)v37[1];
      v38 += v40 + v40 * (v39 - 1);
    }
    *(_BYTE *)(a1 + 358) = *(_BYTE *)v38;
    *(_WORD *)(a1 + 360) = *(_WORD *)(v38 + 1);
    v41 = *(_QWORD *)(a1 + 64);
    v42 = *(_QWORD *)(a1 + 96);
    if ((int)v42 >= 1)
    {
      v43 = (__int16)(v37[4] << 8) | (unint64_t)v37[3];
      v41 += v43 + v43 * (v42 - 1);
    }
    *(_BYTE *)(a1 + 362) = *(_BYTE *)v41;
    *(_WORD *)(a1 + 364) = *(_WORD *)(v41 + 1);
    *(_WORD *)(a1 + 366) = *(_WORD *)(v41 + 3);
    v44 = *v37;
    v45 = *(char *)(v36 + v44 + 392);
    if (*(_BYTE *)(v36 + v44 + 392))
    {
      if ((v45 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0)
        break;
    }
    v46 = v16 + v44;
    v47 = *(_DWORD *)(a1 + 200);
    if (v46 != v47)
    {
      if (v46 <= v47 && match_stem_nont(a1) && *(int *)(a1 + 292) >= 1)
      {
        v51 = 0;
        v52 = v58;
        while (1)
        {
          *(_QWORD *)(a1 + 336) = v52;
          if ((signed int)(v16 + *v52 + **(unsigned __int8 **)(a1 + 328)) > *(_DWORD *)(a1 + 200))
            break;
          fill_term(a1);
          v53 = *(_DWORD *)(a1 + 200);
          v54 = **(unsigned __int8 **)(a1 + 336);
          v55 = *(char *)(a1 + v53 + ~v54 + 392);
          if (*(_BYTE *)(a1 + v53 + ~v54 + 392) && ((v55 & 1) == 0 || (*(_DWORD *)(a1 + 272) & 0x100) == 0))
          {
            *(_DWORD *)(a1 + 108) |= v55;
            goto LABEL_96;
          }
          if (v16 + v54 + **(unsigned __int8 **)(a1 + 328) == v53)
          {
            v56 = *(__int16 *)(a1 + 360) < 0 ? *(char **)(a1 + 144) : *(char **)(a1 + 136);
            if (mt_match(v56, *(char *)(a1 + 358), *(char *)(a1 + 368)))
            {
              if (((*(unsigned __int16 *)(a1 + 370) ^ *(unsigned __int16 *)(a1 + 360)) & *(unsigned __int16 *)(a1 + 372)) == 0)
              {
                if (v60(a1))
                {
                  if (*(_DWORD *)a1 != 14
                    || (*(__int16 *)(a1 + 360) & 0x80000000) == 0
                    || *(_BYTE *)(a1 + 368) != 110
                    || (v57 = (unsigned __int8 *)(*(_QWORD *)(a1 + 192)
                                                + **(unsigned __int8 **)(a1 + 328)
                                                + (unint64_t)v16),
                        *(v57 - 1) == *v57))
                  {
                    a4 = process_result(a1, v59, a4);
                    if ((_DWORD)a4 == a5)
                      return a5;
                  }
                }
              }
            }
          }
          v52 += v34;
          if (++v51 >= *(int *)(a1 + 292))
            goto LABEL_96;
        }
      }
      goto LABEL_96;
    }
    if (match_stem_nont(a1))
    {
      if (*(__int16 *)(a1 + 360) < 0)
      {
        v48 = *(char **)(a1 + 144);
        v49 = *(char *)(a1 + 358);
      }
      else
      {
        v48 = *(char **)(a1 + 136);
        v49 = *(char *)(a1 + 358);
        if (*(_DWORD *)a1 == 14)
        {
          v50 = 100;
LABEL_93:
          if (mt_match(v48, v49, v50))
          {
            if (v60(a1))
            {
              a4 = process_result(a1, v59, a4);
              if ((_DWORD)a4 == a5)
                return a5;
            }
          }
          goto LABEL_96;
        }
      }
      v50 = 97;
      goto LABEL_93;
    }
LABEL_96:
    if (++v32 >= *(int *)(a1 + 288))
      return a4;
  }
  v12 = *(_DWORD *)(a1 + 108) | v45;
LABEL_7:
  *(_DWORD *)(a1 + 108) = v12;
  return a4;
}

BOOL supl_stem_suffix_check_hun(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_QWORD *)(a1 + 336) != 0;
  if (*(_QWORD *)(a1 + 328))
    v1 |= 2u;
  return v1 >= 2
      && (v1 == 2 || (*(_WORD *)(a1 + 360) & 0x800F) != 0x8000)
      && (*(_WORD *)(a1 + 350) & 0x800F) != 0x8000
      && strstr((char *)(*(_QWORD *)(a1 + 192) + **(unsigned __int8 **)(a1 + 304) + **(unsigned __int8 **)(a1 + 312)), "bb") != 0;
}

BOOL supl_prefix_stem_suffix_check_hun(uint64_t a1)
{
  unsigned int v1;

  v1 = *(_QWORD *)(a1 + 336) != 0;
  if (*(_QWORD *)(a1 + 328))
    v1 |= 2u;
  return v1 >= 2
      && (v1 == 2 || (*(_WORD *)(a1 + 360) & 0x800F) != 0x8000)
      && (*(_WORD *)(a1 + 350) & 0x800F) != 0x8000
      && strstr((char *)(*(_QWORD *)(a1 + 192)+ **(unsigned __int8 **)(a1 + 304)+ **(unsigned __int8 **)(a1 + 312)+ (unint64_t)**(unsigned __int8 **)(a1 + 320)), "bb") != 0;
}

uint64_t match_stem_null(int *a1)
{
  int v2;
  char *v3;
  int v4;
  int v5;

  if (*((__int16 *)a1 + 175) < 0)
  {
    v3 = (char *)*((_QWORD *)a1 + 18);
    v4 = *((char *)a1 + 348);
    goto LABEL_6;
  }
  v2 = *a1;
  v3 = (char *)*((_QWORD *)a1 + 17);
  v4 = *((char *)a1 + 348);
  if (v2 != 14)
  {
LABEL_6:
    v5 = 97;
    return mt_match(v3, v4, v5);
  }
  v5 = 100;
  return mt_match(v3, v4, v5);
}

uint64_t stem_prefix_stem_suffix_check_hun(uint64_t a1)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  _BOOL4 v21;

  v2 = **(unsigned __int8 **)(a1 + 304);
  if ((*(_BYTE *)(a1 + 273) & 1) == 0)
  {
    v3 = **(unsigned __int8 **)(a1 + 312);
    v4 = v3 + v2;
    if (**(_BYTE **)(a1 + 312))
    {
      v5 = 0;
      v6 = *(_QWORD *)(a1 + 192);
      v7 = (v3 + v2);
      do
      {
        v8 = v7 - 1;
        v5 += is_cwi_vowel_hun(*(char *)(v6 + v7 - 1), *(char *)(v6 + v7 - 2));
        v7 = v8;
      }
      while (v8 > v2);
      if (v5 > 1)
        goto LABEL_8;
    }
    if ((~*(unsigned __int16 *)(a1 + 346) & 0x8003) == 0 || (~*(unsigned __int16 *)(a1 + 350) & 0x8003) == 0)
    {
LABEL_8:
      v9 = *(unsigned __int8 **)(a1 + 328);
      LODWORD(v10) = v4 + **(unsigned __int8 **)(a1 + 320);
      if (v9)
        LODWORD(v10) = v10 + *v9;
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = *(_QWORD *)(a1 + 192);
        v10 = v10;
        do
        {
          if (v10 < 2)
            v13 = 32;
          else
            v13 = *(_BYTE *)(v12 + (v10 - 2));
          v14 = v10 - 1;
          v11 += is_cwi_vowel_hun(*(char *)(v12 - 1 + v10), v13);
          v10 = v14;
        }
        while (v14);
        if (v11 >= 7)
        {
          result = 0;
          *(_DWORD *)(a1 + 108) |= 4u;
          return result;
        }
      }
    }
  }
  if (v2 >= 2)
  {
    v16 = *(_QWORD *)(a1 + 192);
    v17 = *(unsigned __int8 *)(v16 + v2);
    if (v17 == *(unsigned __int8 *)(v16 + (v2 - 1))
      && v17 == *(unsigned __int8 *)(v16 + (v2 - 2)))
    {
      return 0;
    }
  }
  if ((_DWORD)v2 != **(unsigned __int8 **)(a1 + 320)
    || (result = SLstrncmp(*(_BYTE **)(a1 + 192), (unsigned __int8 *)(*(_QWORD *)(a1 + 192) + v2 + **(unsigned __int8 **)(a1 + 312)), v2), (_DWORD)result))
  {
    v18 = *(_QWORD *)(a1 + 336) != 0;
    if (*(_QWORD *)(a1 + 328))
      v18 |= 2u;
    if (v18 >= 2 && (v18 == 2 || (*(_WORD *)(a1 + 360) & 0x800F) != 0x8000))
    {
      v19 = *(unsigned __int16 *)(a1 + 350);
      if ((v19 & 0xFFFF800F) != 0x8000)
      {
        v20 = *(unsigned __int16 *)(a1 + 360);
        if (((~v20 & 0x8010) != 0 || (v20 & 0xE) == 6) && (v19 & 0x8000) == 0)
        {
          v21 = (v20 & 0x8006) == 32770;
          return (*(_WORD *)(a1 + 346) & 0x8006) == 0x8002 && v21;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t stem_stem_suffix_check_hun(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  void *v19;
  void *v21;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  if ((*(_BYTE *)(a1 + 273) & 1) != 0)
    goto LABEL_19;
  v2 = *(unsigned __int16 *)(a1 + 346);
  v3 = ~v2 & 0x8003;
  v4 = v2 & 0x800E;
  if (v3 || v4 == 32774)
  {
    v6 = *(unsigned __int16 *)(a1 + 350);
    if ((~v6 & 0x8003) != 0 || (v6 & 0x800E) == 0x8006)
      goto LABEL_19;
  }
  LODWORD(v7) = **(unsigned __int8 **)(a1 + 312) + **(unsigned __int8 **)(a1 + 304);
  v8 = *(unsigned __int8 **)(a1 + 328);
  if (v8)
    LODWORD(v7) = v7 + *v8;
  if (!(_DWORD)v7)
    goto LABEL_19;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 192);
  v7 = v7;
  do
  {
    if (v7 < 2)
      v11 = 32;
    else
      v11 = *(_BYTE *)(v10 + (v7 - 2));
    v12 = v7 - 1;
    v9 += is_cwi_vowel_hun(*(char *)(v10 - 1 + v7), v11);
    v7 = v12;
  }
  while (v12);
  if (v9 < 7)
  {
LABEL_19:
    v13 = **(unsigned __int8 **)(a1 + 304);
    v14 = v13 - 2;
    if (v13 < 2)
      goto LABEL_54;
    v15 = *(_QWORD *)(a1 + 192);
    v16 = *(unsigned __int8 *)(v15 + v13);
    v17 = (char)v16;
    v18 = *(unsigned __int8 *)(v15 + (v13 - 1));
    if (v16 != v18 || *(unsigned __int8 *)(v15 + v14) != v16)
    {
      if (v13 < 3
        || **(unsigned __int8 **)(a1 + 312) < 2u
        || *(unsigned __int8 *)(v13 + v15 + 1) != v18
        || *(unsigned __int8 *)(v15 + v14) != v16
        || *(unsigned __int8 *)(v15 + (v13 - 3)) != v16)
      {
        goto LABEL_54;
      }
      v19 = memchr("glnt", (char)v16, 5uLL);
      if (v18 != 121 || v19 == 0)
      {
        v21 = memchr("ds", v17, 3uLL);
        if (v18 != 122 || v21 == 0)
        {
          v23 = memchr("cz", v17, 3uLL);
          if (v18 != 115 || !v23)
          {
            v24 = memchr("GLNT", v17, 5uLL);
            if (v18 != 89 || !v24)
            {
              v25 = memchr("DS", v17, 3uLL);
              if (v18 != 90 || !v25)
              {
                v26 = memchr("CZ", v17, 3uLL);
                if (v18 != 83 || !v26)
                {
LABEL_54:
                  if ((_DWORD)v13 != **(unsigned __int8 **)(a1 + 312)
                    || SLstrncmp(*(_BYTE **)(a1 + 192), (unsigned __int8 *)(*(_QWORD *)(a1 + 192) + v13), v13))
                  {
                    if (*(_QWORD *)(a1 + 328))
                      v27 = (*(_QWORD *)(a1 + 336) != 0) | 2u;
                    else
                      v27 = *(_QWORD *)(a1 + 336) != 0;
                    __asm { BR              X10 }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    *(_DWORD *)(a1 + 108) |= 4u;
  }
  return 0;
}

uint64_t an_get_status(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t is_nominal_result(uint64_t a1, int a2)
{
  int v2;

  v2 = *(__int16 *)(a1 + 34);
  if (a2 == 21 && (v2 & 0x80000000) == 0 && *(_BYTE *)(a1 + 22) && memchr("defrstu", *(char *)(a1 + 38), 8uLL))
    return 1;
  else
    return (unsigned __int16)v2 >> 15;
}

BOOL is_special_result_hun(uint64_t a1)
{
  return *(__int16 *)(a1 + 36) == -32768;
}

uint64_t fill_term(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(result + 64);
  v2 = *(_QWORD *)(result + 96);
  if ((int)v2 >= 1)
  {
    v3 = (__int16)(*(unsigned __int8 *)(*(_QWORD *)(result + 336) + 2) << 8) | (unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result + 336) + 1);
    v1 += v3 + v3 * (v2 - 1);
  }
  *(_BYTE *)(result + 368) = *(_BYTE *)v1;
  *(_WORD *)(result + 370) = *(_WORD *)(v1 + 1);
  *(_WORD *)(result + 372) = *(_WORD *)(v1 + 3);
  return result;
}

uint64_t match_stem_nont(uint64_t a1)
{
  char v2;
  char v3;
  char *v4;
  uint64_t result;

  v2 = *(_BYTE *)(a1 + 348);
  v3 = *(_BYTE *)(a1 + 362);
  if (*(__int16 *)(a1 + 350) < 0)
    v4 = *(char **)(a1 + 144);
  else
    v4 = *(char **)(a1 + 136);
  result = mt_match(v4, v2, v3);
  if ((_DWORD)result)
    return ((*(unsigned __int16 *)(a1 + 364) ^ *(unsigned __int16 *)(a1 + 350)) & *(unsigned __int16 *)(a1 + 366)) == 0;
  return result;
}

unint64_t is_cwi_vowel_hun(int __c, int a2)
{
  unint64_t result;

  result = (unint64_t)memchr("a\xA0e\x82i\xA1o\xA2\x94\x93u\xA3\x81\x96A\x8FE\x90I\x8DO\x95\x99\xA7U\x97\x9A\x98", __c, 0x1DuLL);
  if (result)
    return (__c & 0xFFFFFFDF) != 0x59 || memchr("glntGLNT", a2, 9uLL) == 0;
  return result;
}

double cdict_init(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  double result;

  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = -1;
  *(_DWORD *)(a1 + 16) = a5;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 28) = a4;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  return result;
}

void cdict_finish(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    do
    {
      v3 = dlk_next((uint64_t)v2);
      free(v2);
      v2 = (void *)v3;
    }
    while (v3);
  }
  v4 = *(void **)(a1 + 48);
  if (v4)
  {
    do
    {
      v5 = dlk_next((uint64_t)v4);
      free(v4);
      v4 = (void *)v5;
    }
    while (v5);
  }
}

uint64_t cdict_size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t cdict_access(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t result;
  int v5;
  uint64_t v7;
  int v8;
  uint64_t v9;

  result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    v5 = a2;
    if (*(_DWORD *)(a1 + 20) > a2)
    {
      v7 = *(_QWORD *)(a1 + 48);
      v8 = *(_DWORD *)(v7 + 20);
      if (v8 <= a2)
      {
        do
        {
          v5 -= v8;
          v7 = dlk_next(v7);
          v8 = *(_DWORD *)(v7 + 20);
        }
        while (v5 >= v8);
      }
      v9 = v7 + 16 * ((*(_DWORD *)(v7 + 16) + v5) % *(_DWORD *)(a1 + 28));
      *(_QWORD *)a3 = *(_QWORD *)(v9 + 24);
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v9 + 32);
      *(_QWORD *)(a3 + 16) = v7;
      *(_DWORD *)(a3 + 24) = v5;
      return 1;
    }
  }
  return result;
}

uint64_t cdict_find_first(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  int v7;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  BOOL v15;
  _OWORD v16[2];

  v4 = a3;
  v5 = a2[a3];
  a2[a3] = 0;
  v6 = *(_DWORD *)(a1 + 20);
  v7 = v6 - 1;
  if (v6 < 1)
  {
LABEL_10:
    v13 = 0xFFFFFFFFLL;
    goto LABEL_11;
  }
  v9 = 0;
  memset(v16, 0, sizeof(v16));
  while (1)
  {
    v10 = v7 + v9;
    if (v7 + v9 < 0 != __OFADD__(v7, v9))
      ++v10;
    v11 = (v10 >> 1);
    cdict_access(a1, v10 >> 1, (uint64_t)v16);
    v12 = _strcomp(a2, (unsigned __int8 *)(*(_QWORD *)&v16[0] + SDWORD2(v16[0]) + 20), a1);
    if (v12 < 0)
    {
      v7 = v11 - 1;
      goto LABEL_9;
    }
    if (!v12)
      break;
    v9 = v11 + 1;
LABEL_9:
    if (v7 < v9)
      goto LABEL_10;
  }
  do
  {
    v13 = v11;
    v15 = __OFSUB__((_DWORD)v11, 1);
    v11 = (v11 - 1);
    if ((int)v11 < 0 != v15)
      break;
    cdict_access(a1, v11, (uint64_t)v16);
  }
  while (!_strcomp(a2, (unsigned __int8 *)(*(_QWORD *)&v16[0] + SDWORD2(v16[0]) + 20), a1));
LABEL_11:
  a2[v4] = v5;
  return v13;
}

uint64_t _strcomp(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  unsigned int v10;

  v3 = *(_QWORD *)a3 + 256;
  do
  {
    v5 = *a1++;
    v4 = v5;
    v7 = *a2++;
    v6 = v7;
    if ((_DWORD)v4)
      v8 = (_DWORD)v6 == 0;
    else
      v8 = 1;
    if (v8)
      break;
    if ((*(_BYTE *)(a3 + 16) & 2) != 0)
    {
      LODWORD(v4) = *(unsigned __int8 *)(v3 + v4);
      LODWORD(v6) = *(unsigned __int8 *)(v3 + v6);
    }
  }
  while ((_DWORD)v4 == (_DWORD)v6);
  v9 = v4 > v6;
  if (v4 >= v6)
    v10 = 0;
  else
    v10 = -1;
  if (v9)
    return 1;
  else
    return v10;
}

uint64_t cdict_locate_first(uint64_t a1, unsigned __int8 *a2, int a3)
{
  uint64_t v4;
  unsigned __int8 v5;
  int v6;
  uint64_t v7;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  int v14;
  int v15;
  BOOL v16;
  BOOL v17;
  _OWORD v19[2];

  v4 = a3;
  v5 = a2[a3];
  a2[a3] = 0;
  v6 = *(_DWORD *)(a1 + 20);
  v7 = (v6 - 1);
  if (v6 >= 1)
  {
    v9 = 0;
    memset(v19, 0, sizeof(v19));
    do
    {
      v10 = v7 + v9;
      if ((int)v7 + v9 < 0 != __OFADD__((_DWORD)v7, v9))
        ++v10;
      v11 = (v10 >> 1);
      cdict_access(a1, v10 >> 1, (uint64_t)v19);
      v12 = _strcomp(a2, (unsigned __int8 *)(*(_QWORD *)&v19[0] + SDWORD2(v19[0]) + 20), a1);
      if (v12 < 0)
      {
        v7 = (v11 - 1);
      }
      else
      {
        if (!v12)
        {
          do
          {
            v7 = v11;
            v17 = __OFSUB__((_DWORD)v11, 1);
            v11 = (v11 - 1);
            if ((int)v11 < 0 != v17)
              break;
            cdict_access(a1, v11, (uint64_t)v19);
          }
          while (!_strcomp(a2, (unsigned __int8 *)(*(_QWORD *)&v19[0] + SDWORD2(v19[0]) + 20), a1));
          goto LABEL_25;
        }
        v9 = v11 + 1;
      }
    }
    while ((int)v7 >= v9);
    if ((v7 & 0x80000000) == 0)
    {
      while (1)
      {
        cdict_access(a1, v7, (uint64_t)v19);
        v13 = (const char *)(*(_QWORD *)&v19[0] + SDWORD2(v19[0]) + 20);
        v14 = _strcommon((uint64_t)a2, (uint64_t)v13, a1);
        if (!v14)
        {
LABEL_15:
          v7 = 0xFFFFFFFFLL;
          goto LABEL_25;
        }
        v15 = v14;
        if (v14 == strlen(v13))
          break;
        v16 = (int)v7 <= 0;
        LODWORD(v7) = v7 - 1;
        if (v16)
          goto LABEL_15;
      }
      do
      {
        v17 = __OFSUB__((_DWORD)v7, 1);
        LODWORD(v7) = v7 - 1;
        if ((int)v7 < 0 != v17)
        {
          v7 = 0;
          goto LABEL_25;
        }
        cdict_access(a1, v7, (uint64_t)v19);
      }
      while ((int)_strcommon((uint64_t)a2, *(_QWORD *)&v19[0] + SDWORD2(v19[0]) + 20, a1) >= v15);
      v7 = (v7 + 1);
    }
  }
LABEL_25:
  a2[v4] = v5;
  return v7;
}

uint64_t _strcommon(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  for (result = 0; ; ++result)
  {
    v5 = *(unsigned __int8 *)(a1 + result);
    v6 = *(unsigned __int8 *)(a2 + result);
    if ((_DWORD)v5 != (_DWORD)v6)
      break;
    if (!*(_BYTE *)(a1 + result))
      return result;
LABEL_14:
    ;
  }
  if ((*(_BYTE *)(a3 + 16) & 2) != 0)
  {
    v7 = !*(_BYTE *)(a2 + result) || (_DWORD)v5 == 0;
    if (!v7 && *(unsigned __int8 *)(*(_QWORD *)a3 + 256 + v5) == *(unsigned __int8 *)(*(_QWORD *)a3 + 256 + v6))
      goto LABEL_14;
  }
  return result;
}

uint64_t cdict_delete(uint64_t a1, int a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int i;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    v4 = a2;
    if (*(_DWORD *)(a1 + 20) > a2)
    {
      v5 = *(_QWORD *)(a1 + 48);
      for (i = *(_DWORD *)(v5 + 20); v4 >= i; i = *(_DWORD *)(v5 + 20))
      {
        v4 -= i;
        v5 = dlk_next(v5);
      }
      v7 = i - 1;
      if (v4 < i - 1)
      {
        v8 = *(_DWORD *)(a1 + 28);
        v9 = v4 + *(_DWORD *)(v5 + 16);
        v10 = ~v4 + i;
        do
        {
          v11 = v9 % v8;
          v12 = v5 + 24 + 16 * (++v9 % v8);
          v13 = v5 + 24 + 16 * v11;
          *(_QWORD *)v13 = *(_QWORD *)v12;
          *(_DWORD *)(v13 + 8) = *(_DWORD *)(v12 + 8);
          --v10;
        }
        while (v10);
      }
      *(_DWORD *)(v5 + 20) = v7;
      *(_DWORD *)(a1 + 8) = 1;
      if (!v7)
        dlk_unlink((_QWORD *)(a1 + 48), (_QWORD *)v5);
      --*(_DWORD *)(a1 + 20);
      return 1;
    }
  }
  return result;
}

uint64_t cdict_add(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v3;
  uint64_t result;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;

  v3 = *(_DWORD *)(a1 + 20);
  if (v3 < -1)
    return 4294967285;
  if (*(_DWORD *)(a1 + 24) < a3)
    return 4294967286;
  v39 = 0u;
  v40 = 0u;
  if (!v3)
  {
    v10 = 0;
    goto LABEL_28;
  }
  v8 = v3 - 1;
  cdict_access(a1, v3 - 1, (uint64_t)&v39);
  v9 = _strcomp(a2, (unsigned __int8 *)(v39 + SDWORD2(v39) + 20), a1);
  if ((v9 & 0x80000000) == 0)
  {
    v10 = (v9 == 0) & *(_BYTE *)(a1 + 16);
    if (((v9 == 0) & *(_BYTE *)(a1 + 16)) != 0)
      --v3;
    goto LABEL_28;
  }
  if (v3 < 1)
  {
    v3 = 0;
    v10 = 0;
    goto LABEL_27;
  }
  v11 = 0;
  while (1)
  {
    v12 = v8 + v11;
    if (v8 + v11 < 0 != __OFADD__(v8, v11))
      ++v12;
    v3 = v12 >> 1;
    cdict_access(a1, v12 >> 1, (uint64_t)&v39);
    v13 = _strcomp(a2, (unsigned __int8 *)(v39 + SDWORD2(v39) + 20), a1);
    if (v13 < 0)
    {
      v8 = v3 - 1;
      goto LABEL_19;
    }
    if (!v13)
      break;
    v11 = v3 + 1;
LABEL_19:
    if (v8 < v11)
    {
      v10 = 0;
      v3 = v11;
      goto LABEL_27;
    }
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v10 = 1;
  }
  else
  {
    do
    {
      v14 = v3 + 1;
      if (v3 >= *(_DWORD *)(a1 + 20) - 1)
        break;
      cdict_access(a1, ++v3, (uint64_t)&v39);
    }
    while (!_strcomp(a2, (unsigned __int8 *)(v39 + SDWORD2(v39) + 20), a1));
    v10 = 0;
    v3 = v14;
  }
LABEL_27:
  *(_DWORD *)(a1 + 12) = 0;
LABEL_28:
  v15 = *(_QWORD *)(a1 + 32);
  if (!v15)
  {
LABEL_31:
    v16 = malloc_type_calloc(*(int *)(a1 + 24) + 23, 1uLL, 0xC49A6D2uLL);
    if (v16)
    {
      v15 = (uint64_t)v16;
      v16[4] = 0;
      dlk_link((_QWORD *)(a1 + 32), v16, 0);
      goto LABEL_33;
    }
    return 0xFFFFFFFFLL;
  }
  while (*(_DWORD *)(v15 + 16) + a3 > *(_DWORD *)(a1 + 24))
  {
    v15 = dlk_next(v15);
    if (!v15)
      goto LABEL_31;
  }
LABEL_33:
  v17 = *(int *)(v15 + 16);
  memcpy((void *)(v15 + v17 + 20), a2, a3);
  *(_DWORD *)(v15 + 16) += a3;
  if (v3 != *(_DWORD *)(a1 + 20))
  {
    cdict_access(a1, v3, (uint64_t)&v39);
    if (!v10)
      goto LABEL_41;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)&v40 = v18;
  if (!v18)
  {
    v20 = malloc_type_calloc(16 * *(int *)(a1 + 28) + 24, 1uLL, 0x37889A18uLL);
    *(_QWORD *)&v40 = v20;
    if (v20)
    {
      v20[2] = 0;
      dlk_link((_QWORD *)(a1 + 48), v20, 0);
      DWORD2(v40) = 0;
      if (!v10)
        goto LABEL_41;
LABEL_38:
      v19 = v40 + 16 * ((*(_DWORD *)(v40 + 16) + DWORD2(v40)) % *(_DWORD *)(a1 + 28));
      *(_QWORD *)(v19 + 24) = v15;
      *(_DWORD *)(v19 + 32) = v17;
      --*(_DWORD *)(a1 + 20);
      goto LABEL_60;
    }
    return 0xFFFFFFFFLL;
  }
  DWORD2(v40) = *(_DWORD *)(v18 + 20);
  if (v10)
    goto LABEL_38;
LABEL_41:
  v21 = v40;
  v22 = DWORD2(v40);
  while (1)
  {
    v23 = *(_DWORD *)(v21 + 20);
    if (v22)
    {
      v24 = *(_DWORD *)(a1 + 28);
      goto LABEL_44;
    }
    v24 = *(_DWORD *)(a1 + 28);
    if (v23)
      break;
LABEL_44:
    v25 = v23 - v22;
    if (v23 > v22)
    {
      v26 = v22 + *(_DWORD *)(v21 + 16);
      do
      {
        v27 = v15;
        v28 = v17;
        v29 = v21 + 16 * (v26 % v24);
        v15 = *(_QWORD *)(v29 + 24);
        LODWORD(v17) = *(_DWORD *)(v29 + 32);
        *(_QWORD *)(v29 + 24) = v27;
        *(_DWORD *)(v29 + 32) = v28;
        ++v26;
        --v25;
      }
      while (v25);
      v22 = v23;
    }
    if (v22 != v24)
    {
      v36 = v21 + 16 * ((*(_DWORD *)(v21 + 16) + v22) % v24);
      *(_QWORD *)(v36 + 24) = v15;
      *(_DWORD *)(v36 + 32) = v17;
      goto LABEL_59;
    }
LABEL_53:
    if (dlk_next(v21))
    {
      v21 = dlk_next(v21);
      v22 = 0;
    }
    else
    {
      v35 = malloc_type_calloc(16 * *(int *)(a1 + 28) + 24, 1uLL, 0xA2406394uLL);
      if (!v35)
        return 0xFFFFFFFFLL;
      v21 = (uint64_t)v35;
      v35[2] = 0;
      dlk_link((_QWORD *)(a1 + 48), v35, 0);
      v22 = 0;
    }
  }
  v30 = *(_DWORD *)(v21 + 16);
  if (v23 == v24)
  {
    v31 = (v23 + v30 - 1) % v23;
    v32 = v21 + 16 * v31;
    v33 = *(_QWORD *)(v32 + 24);
    v34 = *(_DWORD *)(v32 + 32);
    *(_QWORD *)(v32 + 24) = v15;
    *(_DWORD *)(v32 + 32) = v17;
    *(_DWORD *)(v21 + 16) = v31;
    v15 = v33;
    LODWORD(v17) = v34;
    goto LABEL_53;
  }
  v37 = (v24 + v30 - 1) % v24;
  v38 = v21 + 16 * v37;
  *(_QWORD *)(v38 + 24) = v15;
  *(_DWORD *)(v38 + 32) = v17;
  *(_DWORD *)(v21 + 16) = v37;
LABEL_59:
  *(_DWORD *)(v21 + 20) = v23 + 1;
LABEL_60:
  result = 0;
  *(_DWORD *)(a1 + 8) = 1;
  ++*(_DWORD *)(a1 + 20);
  return result;
}

uint64_t letter_stat(uint64_t result, _BYTE *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  *a5 = 0;
  *a4 = 0;
  *a3 = 0;
  v5 = *a2;
  if (*a2)
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(result + 8 * v5 + 1024);
      v8 = a5;
      if ((v7 & 4) != 0)
        goto LABEL_7;
      if ((v7 & 2) != 0)
        break;
LABEL_8:
      v5 = a2[++v6];
      if (!v5)
        return result;
    }
    v8 = a4;
    if (!v6)
    {
      ++*a3;
      v8 = a4;
    }
LABEL_7:
    ++*v8;
    goto LABEL_8;
  }
  return result;
}

uint64_t dlk_prev(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t dlk_next(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *dlk_link(_QWORD *result, _QWORD *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = result + 1;
  if (a3)
    v3 = a3;
  v4 = *v3;
  *v3 = (uint64_t)a2;
  if ((uint64_t *)*result == a3)
    v5 = result;
  else
    v5 = (_QWORD *)(v4 + 8);
  *v5 = a2;
  *a2 = v4;
  a2[1] = a3;
  return result;
}

_QWORD *dlk_unlink(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *result;
  _QWORD *v6;

  v2 = *a2;
  v3 = (_QWORD *)a2[1];
  if ((_QWORD *)*a1 == a2)
    v4 = a1;
  else
    v4 = (_QWORD *)(*a2 + 8);
  *v4 = v3;
  v6 = (_QWORD *)a1[1];
  result = a1 + 1;
  if (v6 == a2)
    v3 = result;
  *v3 = v2;
  return result;
}

uint64_t stpcopy(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  int v3;

  result = a1 - 1;
  do
  {
    v3 = *a2++;
    *(_BYTE *)++result = v3;
  }
  while (v3);
  return result;
}

_BYTE *stpncopy(_BYTE *result, char *a2, int a3)
{
  char v3;

  for (; a3; --a3)
  {
    v3 = *a2;
    if (!*a2)
      break;
    ++a2;
    *result++ = v3;
  }
  *result = 0;
  return result;
}

uint64_t stricomp(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 v3;
  int v4;
  int v5;
  int v6;

  while (1)
  {
    v2 = *a1;
    v3 = (v2 - 65) >= 0x1A ? *a1 : v2 + 32;
    v4 = (char)v3;
    v5 = v3;
    v6 = *a2;
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    if (v5 != v6)
      break;
    ++a2;
    ++a1;
    if (!v4)
      return 0;
  }
  if (v4 < (char)v6)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t strnicomp(unsigned __int8 *a1, unsigned __int8 *a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  if (!a3)
    return 0;
  while (1)
  {
    v3 = *a1;
    if ((v3 - 65) < 0x1A)
      LOBYTE(v3) = v3 + 32;
    v4 = (char)v3;
    v5 = v3;
    v6 = *a2;
    if ((v6 - 65) < 0x1A)
      LOBYTE(v6) = v6 + 32;
    if (v5 != v6)
      break;
    v7 = 0;
    if (a3 == 1)
    {
      ++a2;
      ++a1;
      a3 = 0;
      if (v4)
        continue;
    }
    return v7;
  }
  if (v4 < (char)v6)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t freq_init(_QWORD *a1, uint64_t a2)
{
  int he_language;
  char **v5;
  uint64_t v6;
  int v7;
  char **v8;
  int v9;
  uint64_t v10;
  const char **v11;
  const char *v12;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;

  he_language = get_he_language(a2);
  if (he_language == 14)
    v5 = frequents_hun;
  else
    v5 = 0;
  if (he_language == 14)
    LODWORD(v6) = 22;
  else
    LODWORD(v6) = 0;
  v7 = get_he_language(a2);
  if (v7 == 21)
    v8 = frequents_pol;
  else
    v8 = v5;
  if (v7 == 21)
    v6 = 127;
  else
    v6 = v6;
  if (!v8)
    return 4294966682;
  v9 = 0;
  if ((_DWORD)v6)
  {
    v10 = v6;
    v11 = (const char **)v8;
    do
    {
      v12 = *v11++;
      v9 += strlen(v12) + 1;
      --v10;
    }
    while (v10);
  }
  v13 = malloc_type_calloc(v9 + 8 * (int)v6 + 7, 1uLL, 0xE7047332uLL);
  *a1 = v13;
  if (!v13)
    return 4294966695;
  v14 = v13;
  *v13 = 0;
  v15 = v13 + 1;
  if ((_DWORD)v6)
  {
    v16 = 0;
    v17 = (unsigned __int8 *)&v15[2 * v6];
    do
    {
      v18 = 0;
      v19 = v8[v16];
      do
      {
        v20 = *(unsigned __int8 *)(a2 + v19[v18] + 768);
        v17[v18++] = v20;
      }
      while (v20);
      v21 = 0;
      if (v16)
      {
        while ((int)SLstrcmp(*(_BYTE **)&v15[2 * v21], v17) < 1)
        {
          if (v16 == ++v21)
          {
            LODWORD(v21) = v16;
            goto LABEL_28;
          }
        }
        v22 = v16;
        do
        {
          *(_QWORD *)&v14[2 * v22 + 1] = *(_QWORD *)&v14[2 * v22 - 1];
          --v22;
        }
        while (v22 > v21);
      }
LABEL_28:
      *(_QWORD *)&v15[2 * v21] = v17;
      v17 += v18;
      ++v16;
    }
    while (v16 != v6);
  }
  result = 0;
  *v14 = v6;
  return result;
}

void freq_finish(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t is_frequent_word(int *a1, _BYTE *a2)
{
  _DWORD *v2;
  int v3;
  int v5;
  int v6;
  int v7;
  int v8;

  v2 = a1 + 1;
  v3 = *a1 - 1;
  if (*a1 < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    v6 = v3 + v5;
    if (v3 + v5 < 0 != __OFADD__(v3, v5))
      ++v6;
    v7 = v6 >> 1;
    v8 = SLstrcmp(a2, *(unsigned __int8 **)&v2[2 * (v6 >> 1)]);
    if (v8 < 0)
    {
      v3 = v7 - 1;
      goto LABEL_9;
    }
    if (!v8)
      return 1;
    v5 = v7 + 1;
LABEL_9:
    if (v3 < v5)
      return 0;
  }
}

BOOL _isTurkishVowel(int a1, _BYTE *a2, BOOL *a3, _BYTE *a4)
{
  uint64_t v5;
  _BOOL8 result;
  int v7;

  if ((a1 - 65) < 0x1A || (a1 - 192) < 0x17)
  {
    if ((a1 - 138) > 0x15 || ((1 << (a1 + 118)) & 0x200015) == 0)
    {
      if (a1 == 73)
      {
        LOBYTE(a1) = -3;
        goto LABEL_17;
      }
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  if (a1 <= 215)
  {
    if ((a1 - 138) <= 0x15 && ((1 << (a1 + 118)) & 0x200015) != 0)
    {
LABEL_14:
      if (a1 == 159)
        LOBYTE(a1) = -1;
      else
        LOBYTE(a1) = a1 + 16;
    }
  }
  else
  {
    if ((a1 - 216) < 5)
      goto LABEL_11;
    if (a1 == 221)
    {
      LOBYTE(a1) = 105;
      goto LABEL_17;
    }
    if (a1 == 222)
LABEL_11:
      LOBYTE(a1) = a1 + 32;
  }
LABEL_17:
  if (a1 == 97)
  {
    LOBYTE(v5) = 0;
    result = 1;
    if (a2)
LABEL_19:
      *a2 = v5 >> 2;
  }
  else
  {
    v5 = 0;
    do
    {
      if (v5 == 7)
        return 0;
      v7 = byte_1DE2F0008[++v5];
    }
    while (v7 != a1);
    result = (unint64_t)(v5 - 1) < 7;
    if (a2)
      goto LABEL_19;
  }
  if (a3)
    *a3 = (v5 & 2) != 0;
  if (a4)
    *a4 = v5 & 1;
  return result;
}

void sub_1DE2A11C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_1DE2A1508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t hdr_init(uint64_t **a1, const char *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  *a1 = 0;
  v4 = (uint64_t *)malloc_type_calloc(0x20uLL, 1uLL, 0x188EE72EuLL);
  *a1 = v4;
  if (!v4)
    return 4294965195;
  v5 = v4;
  v4[3] = 0;
  v6 = f_open(a2, 1);
  if (v6)
  {
    v7 = v6;
    if (fgetl_lsb1st(v6, v5) == -1)
      return 4294965192;
    if (fgetl_lsb1st(v7, v5 + 1) == -1)
      return 4294965192;
    v8 = (int *)(v5 + 2);
    if (fgetl_lsb1st(v7, v5 + 2) == -1)
      return 4294965192;
    v9 = (uint64_t *)malloc_type_calloc(24 * v5[2], 1uLL, 0xD1EE33F9uLL);
    v5[3] = (uint64_t)v9;
    if (v9)
    {
      if (*v8 < 1)
      {
LABEL_13:
        f_close(v7);
        return 0;
      }
      v10 = v9;
      v11 = 0;
      while (fgetl_lsb1st(v7, v10) != -1
           && fgetl_lsb1st(v7, v10 + 1) != -1
           && fgetl_lsb1st(v7, v10 + 2) != -1)
      {
        ++v11;
        v10 += 3;
        if (v11 >= *v8)
          goto LABEL_13;
      }
      return 4294965192;
    }
    return 4294965195;
  }
  return 4294965194;
}

uint64_t fgetl_lsb1st(uint64_t a1, uint64_t *a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 8) & 0x10) != 0)
    v4 = f_getc_txt(a1);
  else
    v4 = f_getc_bin(a1);
  v5 = v4;
  if (v4 == -1)
    return 0xFFFFFFFFLL;
  v6 = (*(_BYTE *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  v7 = v6;
  if (v6 == -1)
    return 0xFFFFFFFFLL;
  v8 = (*(_BYTE *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  v9 = v8;
  if (v8 == -1)
    return 0xFFFFFFFFLL;
  v10 = (*(_BYTE *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  v11 = v10;
  if (v10 == -1)
    return 0xFFFFFFFFLL;
  result = 0;
  *a2 = ((uint64_t)v9 << 16) | ((uint64_t)v7 << 8) | ((uint64_t)v11 << 24) | v5;
  return result;
}

void hdr_finish(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    v2 = (void *)a1[3];
    if (v2)
      free(v2);
    free(a1);
  }
}

uint64_t hdr_find(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;

  if ((int)*(_QWORD *)(a1 + 16) < 1)
    return -1;
  v2 = *(_QWORD *)(a1 + 16);
  for (i = *(_QWORD *)(a1 + 24) + 8; *(_QWORD *)(i - 8) != a2; i += 24)
  {
    if (!--v2)
      return -1;
  }
  return *(_QWORD *)i;
}

uint64_t fgetw_lsb1st(uint64_t a1, _WORD *a2)
{
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;
  uint64_t result;

  if ((*(_BYTE *)(a1 + 8) & 0x10) != 0)
    v4 = f_getc_txt(a1);
  else
    v4 = f_getc_bin(a1);
  v5 = v4;
  if (v4 == -1)
    return 0xFFFFFFFFLL;
  v6 = (*(_BYTE *)(a1 + 8) & 0x10) != 0 ? f_getc_txt(a1) : f_getc_bin(a1);
  v7 = v6;
  if (v6 == -1)
    return 0xFFFFFFFFLL;
  result = 0;
  *a2 = v5 | (v7 << 8);
  return result;
}

uint64_t f_open(const char *a1, int a2)
{
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  int v7;
  int v8;
  off_t v9;

  v4 = malloc_type_calloc(0x50uLL, 1uLL, 0xE34D9D92uLL);
  v5 = (uint64_t)v4;
  if (v4)
  {
    *(_QWORD *)v4 = v4;
    v4[12] = -1;
    *((_QWORD *)v4 + 3) = 2048;
    *((_QWORD *)v4 + 4) = 0;
    v6 = malloc_type_calloc(0x800uLL, 1uLL, 0xBBFDBD3DuLL);
    *(_QWORD *)(v5 + 32) = v6;
    if (!v6)
      goto LABEL_15;
    *(_QWORD *)(v5 + 40) = v6;
    if ((a2 & 8) != 0)
    {
      if ((a2 & 3) == 0)
        a2 |= 3u;
      v8 = open(a1, 1538, 511);
    }
    else
    {
      v7 = (a2 & 3) == 3 ? 2 : (a2 << 30 >> 31) & 0x202;
      v8 = open(a1, v7, 511);
    }
    *(_DWORD *)(v5 + 48) = v8;
    if (v8 == -1)
    {
LABEL_15:
      f_close(v5);
      return 0;
    }
    else
    {
      v9 = 0;
      *(_QWORD *)(v5 + 16) = 0;
      *(_DWORD *)(v5 + 8) = a2;
      *(_DWORD *)(v5 + 12) = 0;
      *(_QWORD *)(v5 + 72) = 0;
      if ((a2 & 4) != 0)
        v9 = lseek(v8, 0, 2);
      *(_QWORD *)(v5 + 56) = v9;
      *(_QWORD *)(v5 + 64) = v9;
    }
  }
  return v5;
}

ssize_t f_close(uint64_t a1)
{
  ssize_t v2;
  void *v3;
  int v4;

  if (!a1)
    return 0;
  v2 = f_update(a1);
  v3 = *(void **)(a1 + 32);
  if (v3)
    free(v3);
  v4 = *(_DWORD *)(a1 + 48);
  if (v4 != -1)
    close(v4);
  free(*(void **)a1);
  return v2;
}

ssize_t f_update(uint64_t a1)
{
  ssize_t result;

  if ((*(_BYTE *)(a1 + 12) & 2) == 0 || *(uint64_t *)(a1 + 72) < 1)
  {
LABEL_6:
    result = 0;
    *(_DWORD *)(a1 + 12) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    return result;
  }
  if (lseek(*(_DWORD *)(a1 + 48), *(int *)(a1 + 64), 0) != -1)
  {
    result = write(*(_DWORD *)(a1 + 48), *(const void **)(a1 + 40), *(unsigned int *)(a1 + 72));
    if ((_DWORD)result == -1)
    {
      *(_DWORD *)(a1 + 20) = 1;
      return result;
    }
    goto LABEL_6;
  }
  *(_DWORD *)(a1 + 20) = 1;
  return 0xFFFFFFFFLL;
}

uint64_t f_seek(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (f_update(a1) == -1)
    return -1;
  if (a3 == 2)
  {
    result = lseek(*(_DWORD *)(a1 + 48), 0, 2) + a2;
  }
  else if (a3 == 1)
  {
    result = *(_QWORD *)(a1 + 56) + a2;
  }
  else if (a3)
  {
    result = 0;
  }
  else
  {
    result = a2;
  }
  *(_QWORD *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 64) = result;
  return result;
}

ssize_t f_getc_bin(uint64_t a1)
{
  int v2;
  ssize_t result;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 12);
  if (v2)
  {
    if (v2 != 2)
      goto LABEL_6;
    result = f_update(a1);
    if ((_DWORD)result == -1)
      return result;
  }
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    goto LABEL_12;
  *(_DWORD *)(a1 + 12) = 1;
LABEL_6:
  v4 = *(_QWORD *)(a1 + 56);
  v5 = v4 - *(_QWORD *)(a1 + 64);
  if (v5 < *(_QWORD *)(a1 + 72))
  {
LABEL_7:
    *(_QWORD *)(a1 + 56) = v4 + 1;
    return *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + (int)v5);
  }
  if (lseek(*(_DWORD *)(a1 + 48), (int)v4, 0) != -1)
  {
    result = read(*(_DWORD *)(a1 + 48), *(void **)(a1 + 40), *(unsigned int *)(a1 + 24));
    if ((_DWORD)result == -1)
    {
      *(_DWORD *)(a1 + 20) = 1;
      return result;
    }
    if ((_DWORD)result)
    {
      LODWORD(v5) = 0;
      v4 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 64) = v4;
      *(_QWORD *)(a1 + 72) = (int)result;
      goto LABEL_7;
    }
    *(_DWORD *)(a1 + 16) = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  *(_DWORD *)(a1 + 20) = 1;
  return 0xFFFFFFFFLL;
}

ssize_t f_putc_bin(char a1, uint64_t a2)
{
  int v4;
  ssize_t result;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a2 + 12);
  if (v4)
  {
    if (v4 != 1)
      goto LABEL_6;
    result = f_update(a2);
    if ((_DWORD)result == -1)
      return result;
  }
  if ((*(_BYTE *)(a2 + 8) & 2) == 0)
    goto LABEL_10;
  *(_DWORD *)(a2 + 12) = 2;
LABEL_6:
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 56) - v6;
  if (v7 >= *(_QWORD *)(a2 + 24))
  {
    if (lseek(*(_DWORD *)(a2 + 48), (int)v6, 0) != -1)
    {
      result = write(*(_DWORD *)(a2 + 48), *(const void **)(a2 + 40), *(unsigned int *)(a2 + 72));
      if ((_DWORD)result == -1)
      {
        *(_DWORD *)(a2 + 20) = 1;
        return result;
      }
      LODWORD(v7) = 0;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a2 + 72) = 0;
      goto LABEL_12;
    }
LABEL_10:
    *(_DWORD *)(a2 + 20) = 1;
    return 0xFFFFFFFFLL;
  }
LABEL_12:
  result = 0;
  *(_BYTE *)(*(_QWORD *)(a2 + 40) + (int)v7) = a1;
  ++*(_QWORD *)(a2 + 56);
  ++*(_QWORD *)(a2 + 72);
  return result;
}

uint64_t f_gets(uint64_t a1, int a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;

  if (a2 <= 1)
    v5 = 1;
  else
    v5 = a2;
  v6 = (v5 - 1);
  if ((*(_BYTE *)(a3 + 8) & 0x10) != 0)
  {
    v7 = 0;
    while (v6 != v7)
    {
      v10 = f_getc_bin(a3);
      if (v10 == -1)
      {
LABEL_15:
        result = 0;
        if ((_DWORD)v7 && *(_DWORD *)(a3 + 16))
        {
          LODWORD(v6) = v7;
          break;
        }
        return result;
      }
      v9 = v7 + 1;
      *(_BYTE *)(a1 + v7++) = v10;
      if (v10 == 10)
      {
LABEL_14:
        LODWORD(v6) = v9;
        break;
      }
    }
  }
  else
  {
    v7 = 0;
    while (v6 != v7)
    {
      v8 = f_getc_bin(a3);
      if (v8 == -1)
        goto LABEL_15;
      v9 = v7 + 1;
      *(_BYTE *)(a1 + v7++) = v8;
      if (v8 == 10)
        goto LABEL_14;
    }
  }
  *(_BYTE *)(a1 + (int)v6) = 0;
  return a1;
}

ssize_t f_puts(_BYTE *a1, uint64_t a2)
{
  ssize_t result;

  if ((*(_BYTE *)(a2 + 8) & 0x10) != 0)
  {
    do
    {
      result = (char)*a1;
      if (!*a1)
        break;
      ++a1;
      result = f_putc_bin(result, a2);
    }
    while ((_DWORD)result != -1);
  }
  else
  {
    do
    {
      result = (char)*a1;
      if (!*a1)
        break;
      ++a1;
      result = f_putc_bin(result, a2);
    }
    while ((_DWORD)result != -1);
  }
  return result;
}

uint64_t f_read(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;

  if ((*(_BYTE *)(a4 + 8) & 0x10) == 0)
  {
    if (a3)
    {
      v8 = 0;
      while (!a2)
      {
LABEL_8:
        if (++v8 == a3)
          return a3;
      }
      v9 = a2;
      while (1)
      {
        v10 = f_getc_bin(a4);
        if (v10 == -1)
          return v8;
        *a1++ = v10;
        if (!--v9)
          goto LABEL_8;
      }
    }
    return 0;
  }
  if (!a3)
    return 0;
  v8 = 0;
  while (!a2)
  {
LABEL_16:
    if (++v8 == a3)
      return a3;
  }
  v11 = a2;
  while (1)
  {
    v12 = f_getc_bin(a4);
    if (v12 == -1)
      return v8;
    *a1++ = v12;
    if (!--v11)
      goto LABEL_16;
  }
}

uint64_t f_write(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((*(_BYTE *)(a4 + 8) & 0x10) == 0)
  {
    if (a3)
    {
      v8 = 0;
      while (!a2)
      {
LABEL_8:
        if (++v8 == a3)
          return a3;
      }
      v9 = a2;
      while (f_putc_bin(*a1, a4) != -1)
      {
        ++a1;
        if (!--v9)
          goto LABEL_8;
      }
      return v8;
    }
    return 0;
  }
  if (!a3)
    return 0;
  v8 = 0;
  while (!a2)
  {
LABEL_16:
    if (++v8 == a3)
      return a3;
  }
  v10 = a2;
  while (f_putc_bin(*a1, a4) != -1)
  {
    ++a1;
    if (!--v10)
      goto LABEL_16;
  }
  return v8;
}

uint64_t hyphen_init(_QWORD *a1, uint64_t a2, const char *a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  char v26;
  char *p_s;
  int v28;
  int v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  size_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t result;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  int v51;
  int v52;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  char v60;
  char __s;
  _BYTE v62[129];
  char v63[130];
  char __src[130];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v10 = malloc_type_calloc(0x558uLL, 1uLL, 0xE8D5F337uLL);
  *a1 = v10;
  if (!v10)
    return 4294966395;
  v11 = v10;
  v10[2] = a2;
  *((_DWORD *)v10 + 2) = a5;
  v12 = (char *)(v10 + 131);
  cdict_init((uint64_t)(v10 + 131), a2, 1024, 256, 3);
  cdict_init((uint64_t)(v11 + 155), a2, 1024, 256, 3);
  cdict_init((uint64_t)(v11 + 139), a2, 1024, 256, 3);
  cdict_init((uint64_t)(v11 + 147), a2, 1024, 256, 3);
  if (a4)
    cdict_init((uint64_t)(v11 + 163), a2, 1024, 256, 1);
  v13 = (char *)v11 + 535;
  if (!a3)
  {
    *v13 = 0;
    goto LABEL_58;
  }
  __strcpy_chk();
  if (!*v13)
    goto LABEL_58;
  *((_DWORD *)v11 + 313) = 1;
  *((_DWORD *)v11 + 297) = 1;
  *((_DWORD *)v11 + 281) = 1;
  *((_DWORD *)v11 + 265) = 1;
  *(_DWORD *)v11 = 0;
  v14 = f_open(a3, 1);
  if (!v14)
  {
    v56 = -2;
    return (v56 - 1600);
  }
  v15 = v14;
  v60 = a5;
  v16 = 0;
  while (1)
  {
    v17 = f_getc_bin(v15);
    if (v17 == -1)
      break;
    if (v17 != 10)
    {
      v62[v16++ - 1] = v17;
      if (v16 != 129)
        continue;
    }
    v62[v16 - 1] = 0;
    if (v17 != 10)
    {
      v56 = -7;
LABEL_80:
      f_close(v15);
      return (v56 - 1600);
    }
LABEL_16:
    v18 = __s;
    if (!__s)
    {
      v23 = 0;
LABEL_26:
      switch(*(_DWORD *)v11)
      {
        case 1:
          if (!v23)
            goto LABEL_45;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          p_s = &__s;
          break;
        case 2:
          v37 = strlen(&__s);
          if (!(_DWORD)v37)
            goto LABEL_45;
          if ((int)v37 >= 1)
          {
            v38 = v37;
            v39 = (v37 << 32) - 0x100000000;
            v40 = &__s;
            do
            {
              v41 = *v40++;
              __src[v39 >> 32] = v41;
              v39 -= 0x100000000;
              --v38;
            }
            while (v38);
          }
          __src[(int)v37] = 0;
          v34 = v37 + 1;
          v35 = (unsigned __int8 *)__src;
          v36 = (uint64_t)(v11 + 155);
LABEL_44:
          v42 = cdict_add(v36, v35, v34);
          v56 = v42 & (v42 >> 31);
          goto LABEL_54;
        case 3:
          v43 = (uint64_t)(v11 + 139);
          goto LABEL_48;
        case 4:
          v43 = (uint64_t)(v11 + 147);
LABEL_48:
          v56 = add_hypdict(v43, &__s);
          goto LABEL_54;
        default:
LABEL_45:
          v56 = 0;
          goto LABEL_54;
      }
      while (1)
      {
        v29 = *p_s++;
        v28 = v29;
        if (!v29)
        {
LABEL_38:
          v63[v24] = 0;
          v33 = v25 + v24 + 1;
          __src[v25] = 0;
          strcpy(&v63[v24 + 1], __src);
          v34 = v33 + 1;
          v35 = (unsigned __int8 *)v63;
          v36 = (uint64_t)v12;
          goto LABEL_44;
        }
        v30 = v28;
        if (v28 != 42)
        {
          if (v28 == 43)
          {
            v32 = &__src[v25];
            *v32 = v26 + 48;
            v25 += 2;
            v32[1] = 43;
          }
          else
          {
            if (v28 != 124)
            {
              v63[v24++] = v28;
              ++v26;
              goto LABEL_37;
            }
            v31 = &__src[v25];
            *v31 = v26 + 48;
            v25 += 2;
            v31[1] = 124;
          }
          v26 = 0;
        }
LABEL_37:
        if (v30 == 42)
          goto LABEL_38;
      }
    }
    v19 = v11[2];
    v20 = &__s;
    do
    {
      v21 = v18 ^ 7u;
      *v20 = v21;
      *v20 = *(_BYTE *)(v19 + v21 + 768);
      v22 = *++v20;
      v18 = v22;
    }
    while (v22);
    v23 = __s;
    if (__s != 35)
      goto LABEL_26;
    if (!stricomp(v62, "SEG"))
    {
      v56 = 0;
      v44 = 1;
LABEL_53:
      *(_DWORD *)v11 = v44;
      goto LABEL_54;
    }
    if (!stricomp(v62, "FIN"))
    {
      v56 = 0;
      v44 = 2;
      goto LABEL_53;
    }
    if (!stricomp(v62, "HYP"))
    {
      v56 = 0;
      v44 = 3;
      goto LABEL_53;
    }
    v56 = 0;
    if (!stricomp(v62, "AMB"))
    {
      v44 = 4;
      goto LABEL_53;
    }
    *(_DWORD *)v11 = 0;
LABEL_54:
    v16 = 0;
    if (v56 < 0)
      goto LABEL_80;
  }
  if ((_DWORD)v16 && *(_DWORD *)(v15 + 16))
  {
    v62[v16 - 1] = 0;
    goto LABEL_16;
  }
  v57 = *(_DWORD *)(v15 + 20);
  f_close(v15);
  LOBYTE(a5) = v60;
  if (v57)
  {
    v56 = -4;
    return (v56 - 1600);
  }
  *((_DWORD *)v11 + 312) = 0;
  *((_DWORD *)v11 + 296) = 0;
  *((_DWORD *)v11 + 280) = 0;
  *((_DWORD *)v11 + 264) = 0;
LABEL_58:
  v46 = v11 + 3;
  if (a4)
  {
    __strcpy_chk();
    if ((a5 & 1) == 0)
      return 0;
  }
  else
  {
    *v46 = 0;
    if ((a5 & 1) == 0)
      return 0;
  }
  if (!*v46)
    return 0;
  v47 = f_open((const char *)v11 + 24, 17);
  if (v47)
  {
    v48 = v47;
    while (f_gets((uint64_t)__src, 130, v48))
    {
      v49 = strchr(__src, 10);
      if (!v49)
      {
        v50 = strlen(__src);
        if (v50 != 129)
        {
          v49 = &__src[v50];
          goto LABEL_70;
        }
        v55 = -7;
        goto LABEL_89;
      }
      do
      {
        *v49 = 0;
LABEL_70:
        if (v49 <= __src)
          break;
        v52 = *--v49;
        v51 = v52;
      }
      while (v52 == 32 || v51 == 9);
      v54 = add_userhypdict((uint64_t)(v11 + 163), (unsigned __int8 *)__src);
      if (v54 < 0)
      {
        v55 = v54;
LABEL_89:
        f_close(v48);
        goto LABEL_90;
      }
    }
    v58 = *(_DWORD *)(v48 + 20);
    f_close(v48);
    if (v58)
    {
      v55 = -4;
      goto LABEL_90;
    }
    result = 0;
    *((_DWORD *)v11 + 328) = 0;
  }
  else
  {
    v55 = -2;
LABEL_90:
    if (v55 != -2 || (a5 & 4) == 0)
      return (v55 - 1500);
    else
      return 0;
  }
  return result;
}

uint64_t hyphen_finish(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  std::error_code *v12;
  std::error_code *v13;
  int v14;
  int v15;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __s;
  _BYTE v18[65];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  if ((*(_BYTE *)(a1 + 8) & 2) != 0 && *(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 1312) == 1)
  {
    __strcpy_chk();
    __s.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__s) - 1] = 125;
    __strcpy_chk();
    __to.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__to) - 1] = 123;
    v2 = f_open((const char *)&__s, 26);
    if (v2)
    {
      v3 = v2;
      if (get_userhypdict(a1 + 1304, 0, v18))
      {
        v4 = 1;
        do
        {
          if (f_puts(v18, v3) == -1)
            break;
          v5 = (*(_BYTE *)(v3 + 8) & 0x10) != 0 ? f_putc_txt(10, v3) : f_putc_bin(10, v3);
          if (v5 == -1)
            break;
        }
        while (get_userhypdict(a1 + 1304, v4++, v18));
      }
      v7 = *(_DWORD *)(v3 + 20);
      f_close(v3);
      if (v7)
      {
        v8 = 4294965791;
      }
      else
      {
        v10 = f_open((const char *)&__to, 1);
        if (v10 && (f_close(v10), unlink((const char *)&__to) == -1))
        {
          v8 = 4294965784;
        }
        else
        {
          v11 = f_open((const char *)(a1 + 24), 1);
          if (v11 && (f_close(v11), rename((const std::__fs::filesystem::path *)(a1 + 24), &__to, v13), v14 == -1)
            || (rename(&__s, (const std::__fs::filesystem::path *)(a1 + 24), v12), v15 == -1))
          {
            v8 = 4294965783;
          }
          else
          {
            unlink((const char *)&__to);
            v8 = 0;
            *(_DWORD *)(a1 + 1312) = 0;
          }
        }
      }
    }
    else
    {
      v8 = 4294965793;
    }
  }
  else
  {
    v8 = 1;
  }
  cdict_finish(a1 + 1048);
  cdict_finish(a1 + 1240);
  cdict_finish(a1 + 1112);
  cdict_finish(a1 + 1176);
  if (*(_BYTE *)(a1 + 24))
    cdict_finish(a1 + 1304);
  free((void *)a1);
  return v8;
}

BOOL hyphen_usr(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int first;
  int v11;
  int v12;
  _BOOL8 result;
  int v14;
  int v15;
  unsigned __int8 *v16;
  const char *v17;
  size_t v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _OWORD v27[6];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  memset(v27, 0, 32);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  __strncpy_chk();
  v6 = *(int *)(a2 + 24);
  *((_BYTE *)&v27[2] + v6 + 7) = 0;
  if ((int)v6 >= 1 && v5 != 0)
  {
    v8 = 0;
    do
      *(_BYTE *)(v5 + v8++) = 32;
    while (v8 < *(int *)(a2 + 24));
  }
  v9 = a1 + 1304;
  first = cdict_find_first(v9, (unsigned __int8 *)&v27[2] + *(int *)(a2 + 32) + 7, *(_DWORD *)(a2 + 36) - *(_DWORD *)(a2 + 32));
  if (first < 0)
  {
    v11 = *(_DWORD *)(a2 + 44);
    v12 = *(_DWORD *)(a2 + 48);
    if (v12 <= v11 || *(_DWORD *)(a2 + 52))
    {
      result = 0;
      if (v12 != 1 || v11 != 1)
        return result;
      goto LABEL_12;
    }
    v23 = *(int *)(a2 + 32);
    v24 = *(int *)(a2 + 36);
    if ((int)v24 > (int)v23)
    {
      v25 = *(int *)(a2 + 32);
      do
      {
        if (v25 > v23)
          *((_BYTE *)&v27[2] + v25 + 7) = *(_BYTE *)(v4 + *((unsigned __int8 *)&v27[2] + v25 + 7) + 256);
        ++v25;
      }
      while (v24 != v25);
    }
    v26 = cdict_find_first(v9, (unsigned __int8 *)&v27[2] + v23 + 7, (int)v24 - (int)v23);
    first = v26;
    if (*(_DWORD *)(a2 + 44) && v26 < 0)
    {
LABEL_12:
      v14 = *(_DWORD *)(a2 + 36);
      v15 = *(_DWORD *)(a2 + 32);
      v16 = (unsigned __int8 *)&v27[2] + v15 + 7;
      *v16 = *(_BYTE *)(v4 + *v16 + 256);
      first = cdict_find_first(v9, v16, v14 - v15);
    }
  }
  result = first >= 0;
  if (v5 && (first & 0x80000000) == 0)
  {
    cdict_access(v9, first, (uint64_t)v27);
    v17 = (const char *)(*(_QWORD *)&v27[0] + SDWORD2(v27[0]) + 20);
    v18 = strlen(v17);
    v19 = v17[v18 + 1];
    if (v17[v18 + 1])
    {
      if (v19 == 42)
        return 0;
      v20 = *(_DWORD *)(a2 + 32);
      v21 = (unsigned __int8 *)(v18 + SDWORD2(v27[0]) + *(_QWORD *)&v27[0] + 23);
      do
      {
        v20 = v20 + (char)v19 - 48;
        if ((*(_QWORD *)(v4 + 8 * *((unsigned __int8 *)&v27[2] + v20 + 7) + 1024) & 0x1000) == 0)
          *(_BYTE *)(v5 + v20) = *(v21 - 1);
        v22 = *v21;
        v21 += 2;
        LOBYTE(v19) = v22;
      }
      while (v22);
    }
    return 1;
  }
  return result;
}

uint64_t hyphen_ate(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int first;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  size_t v45;
  int v46;
  uint64_t v47;
  unsigned __int8 *v48;
  _BOOL8 v49;
  int v50;
  unsigned __int8 *v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  _BOOL4 v76;
  int v77;
  _BOOL4 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _BOOL4 v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  char v87;
  uint64_t v88;
  char v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  int v96;
  int v97;
  int v98;
  _BOOL4 v99;
  BOOL v100;
  _BOOL4 v101;
  uint64_t v102;
  unsigned __int8 *v103;
  int v104;
  int v105;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  _BOOL4 v110;
  char v111;
  unsigned int v112;
  uint64_t v113;
  int v114;
  unsigned __int8 v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BOOL4 v128;
  signed __int8 v129;
  _BOOL4 v130;
  _BOOL4 v131;
  _BOOL4 v132;
  int v134;
  uint64_t v135;
  int v136;
  unsigned __int8 v137;
  uint64_t v138;
  int v139;
  int v140;
  char v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  uint64_t v150;
  _OWORD v151[2];
  unsigned __int8 v152[130];
  uint64_t v153;

  v2 = (_DWORD *)a2;
  v3 = a1;
  v153 = *MEMORY[0x1E0C80C00];
  memset(v151, 0, sizeof(v151));
  v4 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v6 + *(int *)(a2 + 36)) = 124;
  *(_BYTE *)(v6 + *(int *)(a2 + 32)) = 124;
  __strncpy_chk();
  v7 = v5;
  v8 = (int)v2[6];
  v152[v8 + 65] = 0;
  if ((int)v8 >= 1)
  {
    v9 = 0;
    do
      *(_BYTE *)(v5 + v9++) = 32;
    while (v9 < (int)v2[6]);
  }
  v10 = v4 + 1024;
  v12 = v2[8];
  v11 = v2[9];
  v148 = v4;
  v149 = v2;
  v150 = v5;
  v146 = v3;
  if ((int)v12 < v11)
  {
    v13 = v3 + 1048;
    LODWORD(v14) = v2[8];
    do
    {
      v15 = v14;
      if ((_DWORD)v14 == (_DWORD)v12)
      {
        first = cdict_locate_first(v13, &v152[(int)v12 + 65], v11 - (int)v12);
        v7 = v5;
        v15 = v12;
        if ((first & 0x80000000) == 0)
        {
          cdict_access(v13, first, (uint64_t)v151);
          v17 = *(_QWORD *)&v151[0];
          v18 = SDWORD2(v151[0]);
          v19 = (const char *)(*(_QWORD *)&v151[0] + SDWORD2(v151[0]) + 20);
          v20 = strlen(v19);
          if (v20 >= 2)
            memset((void *)((int)v12 + v6 + 1), 32, (v20 - 2) + 1);
          v21 = v20 + 1;
          v22 = v19[v21];
          if (v22)
          {
            v23 = (unsigned __int8 *)(v17 + v21 + v18 + 22);
            v24 = v12;
            do
            {
              v24 = v24 + v22 - 48;
              *(_BYTE *)(v6 + v24) = *(v23 - 1);
              v25 = *v23;
              v23 += 2;
              v22 = v25;
            }
            while (v25);
          }
          v15 = v12 + v20 - 1;
          v2 = v149;
          v7 = v5;
        }
      }
      v14 = v15 + 1;
      if ((*(_QWORD *)(v10 + 8 * v152[v15 + 65]) & 1) != 0)
      {
        if (*(_BYTE *)(v6 + v14) == 124)
          LODWORD(v12) = v15 + 1;
      }
      else
      {
        *(_BYTE *)(v6 + v14) = 124;
        *(_BYTE *)(v6 + v15) = 124;
        LODWORD(v12) = v15 + 1;
      }
      v11 = v2[9];
    }
    while ((int)v14 < v11);
    v12 = v2[8];
    v3 = v146;
  }
  if (v11 > (int)v12)
  {
    v26 = 0;
    v27 = v3 + 1240;
    v28 = v11;
    while (1)
    {
      v152[v26] = v152[v28 + 64];
      v29 = *(unsigned __int8 *)(v6 - 1 + v28);
      if (v29 == 43)
        break;
      v30 = v26 + 1;
      if (v29 == 124)
      {
        v152[v30] = 0;
        v31 = cdict_locate_first(v27, v152, v30);
        if (v31 < 0)
          break;
        cdict_access(v27, v31, (uint64_t)v151);
        v32 = strlen((const char *)(*(_QWORD *)&v151[0] + SDWORD2(v151[0]) + 20));
        LODWORD(v30) = 0;
        *(_BYTE *)(v6 + (int)v28 + v26 - v32) = 124;
      }
LABEL_27:
      --v28;
      v26 = v30;
      if (v28 <= (int)v2[8])
      {
        v11 = v2[9];
        v33 = (int)v2[8];
        v7 = v5;
        v3 = v146;
        goto LABEL_30;
      }
    }
    LODWORD(v30) = 0;
    goto LABEL_27;
  }
  v33 = v12;
LABEL_30:
  if ((int)v33 < v11)
  {
    v34 = 0;
    v145 = v3 + 1112;
    v144 = v7 - 1;
    v147 = v3 + 1176;
    v35 = v33;
    LODWORD(v36) = v33;
    do
    {
      LODWORD(v37) = v36;
      v38 = v33;
      if ((_DWORD)v36 != v35)
        goto LABEL_82;
      v37 = *(_QWORD *)(v10 + 8 * v152[v35 + 65]);
      v39 = v2[8];
      v40 = v35 <= v39 || (*(_QWORD *)(v10 + 8 * v152[v35 + 65]) & 1) == 0;
      if (!v40 && (*(_QWORD *)(v10 + 8 * v152[v35 + 64]) & 1) != 0 && v35 > v39 + 1 && v35 < v11 - 1)
      {
        *(_BYTE *)(v7 + v35) = 45;
        v11 = v2[9];
      }
      v41 = v147;
      v42 = cdict_find_first(v147, &v152[v35 + 65], v11 - v35);
      if (v42 < 0)
      {
        v41 = v145;
        v42 = cdict_locate_first(v145, &v152[v35 + 65], v2[9] - v35);
        if (v42 < 0)
        {
          v34 = (v37 >> 3) & 1;
          v33 = v35 + v34;
          LODWORD(v37) = v35;
          v4 = v148;
          v7 = v150;
          goto LABEL_138;
        }
      }
      cdict_access(v41, v42, (uint64_t)v151);
      v43 = *(_QWORD *)&v151[0];
      v44 = SDWORD2(v151[0]);
      v45 = strlen((const char *)(*(_QWORD *)&v151[0] + SDWORD2(v151[0]) + 20));
      v46 = v45;
      v47 = (v45 << 32) + 0x100000000;
      v48 = (unsigned __int8 *)(*(_QWORD *)&v151[0] + SDWORD2(v151[0]) + 20 + (v47 >> 32));
      v49 = *v48 == 42;
      if ((int)v45 >= 2)
        memset((void *)(v35 + v150 + 1), 32, (v45 - 2) + 1);
      v50 = v48[v49];
      v4 = v148;
      v7 = v150;
      if (v50)
      {
        v51 = (unsigned __int8 *)(v43 + (v47 >> 32) + v44 + v49 + 22);
        v52 = v35;
        do
        {
          v52 = v52 + (char)v50 - 48;
          if ((*(_QWORD *)(v10 + 8 * v152[v52 + 65]) & 0x1000) == 0)
            *(_BYTE *)(v150 + v52) = *(v51 - 1);
          v53 = *v51;
          v51 += 2;
          LOBYTE(v50) = v53;
        }
        while (v53);
      }
      v54 = v35 + v46;
      v2 = v149;
      if (*(_DWORD *)(v148 + 3524) == 21)
      {
        v55 = v54 - 1;
        v56 = (v55 << 32) - 0x100000000;
        v57 = 1;
        v58 = v35 + v46 - 2;
        v59 = v55;
        do
        {
          v60 = v57;
          v61 = *(unsigned __int8 *)(v6 + 1 + v59++);
          ++v58;
          v56 += 0x100000000;
          ++v57;
        }
        while (v61 != 124);
        v62 = v56 >> 32;
        if ((*(_QWORD *)(v10 + 8 * v152[v62 + 65]) & 0x10) != 0)
        {
          if (v35 < v58)
            v58 = v35;
          while (v55 + v60 - 1 > v35)
          {
            if (*(_BYTE *)(v6 - 1 + v55 + v60) == 124 || *(_BYTE *)(v144 + v55 + v60) != 32)
            {
              v58 = v35 + v46 - 2 + v60;
              break;
            }
            v63 = *(_QWORD *)(v10 + 8 * v152[v55 + 63 + v60--]);
            if ((v63 & 0x10) == 0)
            {
              v58 = v55 + v60;
              break;
            }
          }
          v62 = v58;
        }
        if (*(_BYTE *)(v150 + v62) != 32 && *(_BYTE *)(v6 + v62) != 124)
          *(_BYTE *)(v150 + v62) = 32;
      }
      v64 = 0;
      v65 = v35 + (uint64_t)v46;
      if (v35 >= v54)
        v37 = v54;
      else
        v37 = v35;
      while (v65 + v64 > v35)
      {
        if (*(_BYTE *)(v6 + v65 + v64) == 124 || *(_BYTE *)(v150 + v65 + v64) != 32)
        {
          v37 = (v35 + v46 + v64);
          break;
        }
        v66 = *(_QWORD *)(v10 + 8 * v152[v65 + 64 + v64--]);
        if ((v66 & 0x10) == 0)
        {
          v37 = (v35 + v46 + v64 + 1);
          break;
        }
      }
      if (*(_BYTE *)(v6 + (int)v37) == 124)
      {
        if ((int)v37 < v149[9])
          *(_BYTE *)(v150 + (int)v37) = 45;
      }
      else if (*(_BYTE *)(v150 + (int)v37) == 32)
      {
        v34 = 1;
        v38 = v37;
        goto LABEL_82;
      }
      v34 = 0;
      v38 = ((*(_QWORD *)(v10 + 8 * v152[(int)v37 + 65]) >> 3) & 1) + v37;
LABEL_82:
      if ((int)v37 <= v35)
        goto LABEL_137;
      v67 = *(_DWORD *)(v4 + 3524);
      if (v67 == 14)
      {
        v68 = (int)v37;
        v69 = v152[(int)v37 + 65];
        v70 = *(_QWORD *)(v10 + 8 * v69);
        if ((v70 & 8) == 0)
          goto LABEL_296;
        v71 = (int)v37 - 1;
        if ((*(_QWORD *)(v10 + 8 * v152[v71 + 65]) & 8) == 0)
          goto LABEL_296;
        v72 = v2[7];
        if ((v72 & 0x10) != 0)
          goto LABEL_296;
        if ((v72 & 0x20) == 0)
          goto LABEL_88;
        if (*(_BYTE *)(v6 + (int)v37 + 1) == 124)
          goto LABEL_296;
        v74 = v152[(int)v37 + 66];
        if ((*(_QWORD *)(v10 + 8 * v74) & 0x10) == 0)
          goto LABEL_296;
        v75 = (int)v37 + 2;
        if (*(_BYTE *)(v6 + v75) == 124)
          goto LABEL_296;
        v138 = v152[v75 + 65];
        v136 = (char)v74;
        v140 = v2[7];
        v76 = is_hun_digraph((char)v74, (char)v152[v75 + 65]);
        LOBYTE(v72) = v140;
        v71 = (int)v37 - 1;
        v68 = (int)v37;
        v7 = v150;
        if (v76 && *(_BYTE *)(v6 + (int)v37 + 3) != 124)
        {
          v77 = v136;
          v137 = v152[(int)v37 + 68];
          v78 = is_hun_trigraph(v77, (char)v138, (char)v137);
          LOBYTE(v72) = v140;
          v71 = (int)v37 - 1;
          v68 = (int)v37;
          v7 = v150;
          if (v78 && (*(_QWORD *)(v10 + 8 * v152[(int)v37 + 69]) & 0x10) != 0)
            goto LABEL_88;
          if ((*(_QWORD *)(v10 + 8 * v137) & 0x10) != 0)
            goto LABEL_88;
        }
        if ((*(_QWORD *)(v10 + 8 * v138) & 0x10) != 0)
        {
LABEL_88:
          if ((v72 & 0x40) != 0)
          {
            if (*(_BYTE *)(v6 + v71) == 124)
              goto LABEL_132;
            v73 = *(unsigned __int8 *)(v68 + v6 + 1);
LABEL_127:
            if (v73 == 124)
              goto LABEL_132;
          }
        }
        else
        {
LABEL_296:
          if (!v34)
            goto LABEL_132;
          if ((v70 & 0x10) == 0)
            goto LABEL_132;
          v79 = v68 + 1;
          v80 = *(unsigned __int8 *)(v6 + v68 + 1);
          if (v80 == 124)
            goto LABEL_132;
          v81 = v152[v79 + 65];
          if ((*(_QWORD *)(v10 + 8 * v81) & 8) == 0)
          {
            if (v80 != 43)
            {
              v142 = v68;
              v82 = is_hun_digraph((char)v69, (char)v81);
              v68 = v142;
              if (v82 && *(_BYTE *)(v6 + v142 + 2) != 124 && (*(_QWORD *)(v10 + 8 * v152[v142 + 67]) & 8) != 0)
              {
                LODWORD(v83) = v79;
                v113 = v142 - 1;
                v7 = v150;
                if ((v2[7] & 0x40) == 0 || *(_BYTE *)(v6 + v113) != 124)
                {
                  v114 = v152[v113 + 65];
                  if ((v69 - 65) >= 0x1A)
                    v115 = v69;
                  else
                    v115 = v69 + 32;
                  if ((v114 - 65) < 0x1A)
                    LOBYTE(v114) = v114 + 32;
                  if (v115 != v114
                    || (v116 = *(unsigned __int8 *)(v6 + v142), v116 == 124)
                    || v116 == 43)
                  {
                    v89 = 45;
                  }
                  else
                  {
                    v89 = 61;
                  }
                  goto LABEL_129;
                }
LABEL_130:
                v68 = v79;
LABEL_131:
                LODWORD(v37) = v83;
              }
              else
              {
                v83 = v142 + 2;
                v84 = *(unsigned __int8 *)(v6 + v142 + 2);
                v7 = v150;
                if (v84 != 43 && v84 != 124)
                {
                  v85 = v152[v79 + 65];
                  v86 = v152[v83 + 65];
                  if ((v69 - 65) >= 0x1A)
                    v87 = v69;
                  else
                    v87 = v69 + 32;
                  if ((v85 - 65) < 0x1A)
                    LOBYTE(v85) = v85 + 32;
                  if ((v86 - 65) < 0x1A)
                    LOBYTE(v86) = v86 + 32;
                  if (v87 == 100
                    && v85 == 122
                    && v86 == 115
                    && *(_BYTE *)(v6 + v142 + 3) != 124
                    && (*(_QWORD *)(v10 + 8 * v152[v142 + 68]) & 8) != 0)
                  {
                    v88 = v142 - 1;
                    if ((v2[7] & 0x40) != 0 && *(_BYTE *)(v6 + v88) == 124)
                    {
                      v68 = v142 + 2;
                      goto LABEL_131;
                    }
                    v117 = v152[v88 + 65];
                    if ((v117 - 65) < 0x1A)
                      LOBYTE(v117) = v117 + 32;
                    if (v117 != 100
                      || (v118 = *(unsigned __int8 *)(v6 + v142), v118 == 124)
                      || v118 == 43)
                    {
                      v89 = 45;
                    }
                    else
                    {
                      v89 = 35;
                    }
                    v79 = v142 + 2;
LABEL_129:
                    *(_BYTE *)(v7 + v68) = v89;
                    goto LABEL_130;
                  }
                }
              }
            }
LABEL_132:
            if ((*(_QWORD *)(v10 + 8 * v152[v68 + 65]) & 8) != 0)
              v34 = 1;
            v67 = *(_DWORD *)(v4 + 3524);
            goto LABEL_135;
          }
          if ((v2[7] & 0x40) != 0)
          {
            v73 = *(unsigned __int8 *)(v68 + v6 - 1);
            goto LABEL_127;
          }
        }
        v89 = 45;
        v79 = v68;
        LODWORD(v83) = v37;
        goto LABEL_129;
      }
LABEL_135:
      if (v67 != 21 || (v90 = v152[(int)v37 + 65], (*(_QWORD *)(v10 + 8 * v152[(int)v37 + 65]) & 8) == 0))
      {
LABEL_137:
        v33 = v38;
        goto LABEL_138;
      }
      v91 = (int)v37;
      v92 = (int)v37 - 1;
      v93 = v152[v92 + 65];
      v33 = (int)v37 + 1;
      if ((v90 | 0x20) == 0x69)
      {
        v94 = *(_QWORD *)(v10 + 8 * v93);
        if ((v94 & 0x10) != 0 && (*(_QWORD *)(v10 + 8 * v152[v33 + 65]) & 8) != 0)
          goto LABEL_137;
        if ((v94 & 8) == 0)
          goto LABEL_159;
      }
      else if ((*(_QWORD *)(v10 + 8 * v93) & 8) == 0)
      {
        goto LABEL_159;
      }
      v95 = *(unsigned __int8 *)(v6 + v92);
      v96 = v93 & 0xFFFFFFDF;
      if (v95 == 124 || v96 != 73 || (*(_QWORD *)(v10 + 8 * v152[(int)v37 + 63]) & 0x10) == 0)
      {
        if ((v90 & 0xFFFFFFDF) == 0x59
          || (v90 & 0xFFFFFFDF) == 0x55 && v96 == 65
          || (v2[7] & 0x40) != 0 && (v95 == 124 || *(_BYTE *)(v6 + v33) == 124))
        {
          goto LABEL_201;
        }
        goto LABEL_200;
      }
LABEL_159:
      if (v34)
      {
        v97 = v2[9] - 1;
        if (v90 == 101 && (_DWORD)v37 == v97 && (_DWORD)v93 == 105)
        {
          if ((int)v37 > v2[8] + 3 && v152[(int)v37 + 63] == 99)
          {
            v91 = (int)v37 - 3;
            if (v152[v91 + 65] == 152)
            {
LABEL_200:
              *(_BYTE *)(v7 + v91) = 45;
              goto LABEL_201;
            }
          }
LABEL_174:
          LODWORD(v92) = v37 - 2;
          v141 = 1;
        }
        else
        {
          if (v90 == 105 && (_DWORD)v37 == v97 && (_DWORD)v93 == 99)
          {
            if ((int)v37 > v2[8] + 2)
            {
              v91 = (int)v37 - 2;
              if (v152[v91 + 65] == 152)
                goto LABEL_200;
            }
          }
          else if ((v93 | 0x20) == 0x69)
          {
            goto LABEL_174;
          }
          v141 = 0;
        }
        if ((int)v92 < (int)v38)
          goto LABEL_196;
        v139 = v92;
        v98 = 2;
        v143 = v92;
        do
        {
          if ((int)v92 > (int)v38)
          {
            v99 = is_pol_digraph((char)v152[(int)v92 + 64], (char)v152[(int)v92 + 65], (unsigned __int8 *)v4);
            v7 = v150;
            if (v99)
              LODWORD(v92) = v92 - 1;
          }
          --v98;
          v100 = (int)v92 <= (int)v38;
          LODWORD(v92) = v92 - 1;
        }
        while (!v100);
        if (v98 == 1)
        {
          v33 = (int)v37 + 1;
          if (v143 <= (int)v38)
            goto LABEL_186;
          v92 = v143 - 1;
          v101 = is_pol_digraph((char)v152[v92 + 65], (char)v152[v143 + 65], (unsigned __int8 *)v4);
          v7 = v150;
          if (!v101)
            goto LABEL_186;
          goto LABEL_196;
        }
        v102 = 0;
        v103 = &v152[v143 + 65];
        while (1)
        {
          v104 = v102;
          if (v143 + v102 <= (int)v38)
            break;
          v105 = v103[v102];
          v106 = v103[v102 - 1];
          if (v105 != v106 && (v105 != 108 || v106 != 136))
          {
            --v102;
            if (v105 != 136 || v106 != 108)
              continue;
          }
          LODWORD(v92) = v143 + v104;
          goto LABEL_195;
        }
        v135 = v143 - 1;
        v134 = v38 + 1;
        if (v143 - 1 > (int)v38 + 1)
        {
          v92 = (int)v135;
          do
          {
            v107 = v152[v92 + 65];
            if (v107 == v152[v92 + 63])
            {
              v108 = v152[v92 + 66];
              v109 = v92 - 1;
              if (v108 == v152[v92 + 64])
              {
                v110 = is_pol_digraph((char)v107, (char)v108, (unsigned __int8 *)v4);
                v7 = v150;
                if (v110)
                {
                  v2 = v149;
                  goto LABEL_195;
                }
              }
            }
            else
            {
              v109 = v92 - 1;
            }
            v92 = v109;
          }
          while (v109 > v134);
        }
        v111 = v141 ^ 1;
        if (v143 <= (int)v38)
          v111 = 1;
        v2 = v149;
        if ((v111 & 1) != 0)
          goto LABEL_254;
        v112 = v152[v143 + 65];
        if (v112 > 0x62)
        {
          if (v152[v143 + 65] <= 0x72u)
          {
            if (v112 == 99)
            {
LABEL_245:
              v119 = v152[v135 + 65];
              if (v119 != 143 && v119 != 134)
                goto LABEL_247;
              goto LABEL_265;
            }
            if (v112 == 110)
              goto LABEL_248;
            goto LABEL_254;
          }
          if (v112 == 115)
            goto LABEL_250;
          if (v112 != 122)
            goto LABEL_254;
        }
        else
        {
          if (v152[v143 + 65] <= 0x52u)
          {
            if (v112 == 67)
              goto LABEL_245;
LABEL_247:
            if (v112 == 78)
            {
LABEL_248:
              if ((v152[v135 + 65] + 29) > 1u)
                goto LABEL_254;
LABEL_265:
              LODWORD(v92) = v139;
LABEL_195:
              v33 = (int)v37 + 1;
              goto LABEL_196;
            }
LABEL_254:
            if (v143 > v134)
            {
              v121 = v152[v143 + 65];
              switch(((v121 - 67) >> 4) | (16 * (v121 - 67)))
              {
                case 0:
                case 2:
                  if ((v152[v135 + 65] | 0x20) == 0x7A && (v152[v143 + 63] | 0x20) == 0x63)
                    goto LABEL_265;
                  if ((v121 | 0x20) != 0x73)
                    goto LABEL_262;
                  break;
                case 1:
                case 3:
                  break;
                default:
LABEL_262:
                  if ((v121 + 67) <= 1u
                    && (v152[v135 + 65] | 0x20) == 0x7A
                    && (v152[v143 + 63] | 0x20) == 0x72)
                  {
                    goto LABEL_265;
                  }
                  goto LABEL_267;
              }
              if ((v152[v135 + 65] | 0x20) == 0x7A && (v152[v143 + 63] | 0x20) == 0x73)
                goto LABEL_265;
            }
LABEL_267:
            v122 = 0;
            while (1)
            {
              v123 = (&conshyp_pol_consdef)[2 * v122];
              v124 = *v123;
              v125 = v143;
              if (!*v123)
                break;
              v126 = 1;
              while (v125 >= (int)v38
                   && v124 == *(unsigned __int8 *)(v4 + *(unsigned __int8 *)(v4 + v152[v125 + 65] + 256) + 512))
              {
                v124 = v123[v126++];
                --v125;
                if (!v124)
                  goto LABEL_276;
              }
              if (++v122 == 276)
                goto LABEL_279;
            }
LABEL_276:
            v127 = v143 - (uint64_t)SLODWORD((&conshyp_pol_consdef)[2 * v122 + 1]);
            if ((int)v127 < (int)v38)
            {
              LODWORD(v92) = v127 + 1;
              goto LABEL_195;
            }
            v92 = (int)v127 + 1;
            v128 = is_pol_digraph((char)v152[v127 + 65], (char)v152[v92 + 65], (unsigned __int8 *)v4);
            v7 = v150;
            if (v128)
            {
LABEL_279:
              if (v98)
              {
                LODWORD(v92) = v143 - 1;
                v129 = v152[v135 + 65];
                if (is_pol_digraph(v129, (char)v152[v143 + 65], (unsigned __int8 *)v4))
                {
                  v33 = (int)v37 + 1;
                  if (v143 <= (int)v38 + 2)
                  {
                    LODWORD(v92) = v143 - 2;
LABEL_292:
                    v7 = v150;
                    goto LABEL_196;
                  }
                  LODWORD(v92) = v143 - 3;
                  v130 = is_pol_digraph((char)v152[v143 + 62], (char)v152[v143 + 63], (unsigned __int8 *)v4);
                  v7 = v150;
                  if (!v130)
                    LODWORD(v92) = v143 - 2;
                }
                else
                {
                  v33 = (int)v37 + 1;
                  if (v143 <= v134)
                    goto LABEL_292;
                  LODWORD(v92) = v143 - 2;
                  v132 = is_pol_digraph((char)v152[v143 + 63], v129, (unsigned __int8 *)v4);
                  v7 = v150;
                  if (!v132)
                    LODWORD(v92) = v143 - 1;
                }
              }
              else
              {
                v33 = (int)v37 + 1;
                if (v143 <= (int)v38
                  || (LODWORD(v92) = v143 - 1,
                      v131 = is_pol_digraph((char)v152[v135 + 65], (char)v152[v143 + 65], (unsigned __int8 *)v4),
                      v7 = v150,
                      !v131))
                {
LABEL_186:
                  LODWORD(v92) = v139;
                }
              }
LABEL_196:
              if ((v2[7] & 0x40) != 0 && (*(_BYTE *)(v6 + (int)v92 - 1) == 124 || *(_BYTE *)((int)v92 + v6 + 1) == 124))
                goto LABEL_201;
              v91 = (int)v92;
              goto LABEL_200;
            }
            goto LABEL_195;
          }
          if (v112 == 83)
          {
LABEL_250:
            if ((v152[v135 + 65] + 105) <= 1u)
              goto LABEL_265;
          }
          if (v112 != 90)
            goto LABEL_254;
        }
        v120 = v152[v135 + 65];
        if (v120 != 171 && v120 != 141)
          goto LABEL_254;
        goto LABEL_265;
      }
LABEL_201:
      v34 = 1;
LABEL_138:
      v36 = (int)v37 + 1;
      if ((*(_QWORD *)(v10 + 8 * v152[(int)v37 + 65]) & 0x1800) != 0 || *(_BYTE *)(v6 + v36) == 124)
        v35 = v37 + 1;
      v11 = v2[9];
    }
    while ((int)v36 < v11);
  }
  return 0;
}

BOOL is_hun_digraph(int a1, int a2)
{
  char v2;
  char v3;
  BOOL v6;
  BOOL v7;

  v2 = a1 + 32;
  if ((a1 - 65) >= 0x1A)
    v2 = a1;
  if ((a2 - 65) >= 0x1A)
    v3 = a2;
  else
    v3 = a2 + 32;
  v6 = v2 == 103 || (v2 & 0xFD) == 108 || v2 == 116;
  if (v3 == 121 && v6)
    return 1;
  v7 = v2 == 122 || v2 == 99;
  if (v7 && v3 == 115)
    return 1;
  if (v2 == 115 || v2 == 100)
    return v3 == 122;
  return 0;
}

BOOL is_hun_trigraph(int a1, int a2, int a3)
{
  char v3;
  char v4;
  char v5;

  if ((a1 - 65) >= 0x1A)
    v3 = a1;
  else
    v3 = a1 + 32;
  if ((a2 - 65) >= 0x1A)
    v4 = a2;
  else
    v4 = a2 + 32;
  if ((a3 - 65) >= 0x1A)
    v5 = a3;
  else
    v5 = a3 + 32;
  return v3 == 100 && v4 == 122 && v5 == 115;
}

uint64_t hyphen_delete(uint64_t a1, char *__s)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  int first;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  _DWORD v11[3];
  unsigned __int8 v12[65];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = strlen(__s);
  if (v4 > 64)
    return 0;
  memset(v11, 0, sizeof(v11));
  __strcpy_chk();
  letter_stat(v3, v12, &v11[2], &v11[1], v11);
  v6 = a1 + 1304;
  first = cdict_find_first(v6, v12, v4);
  if ((first & 0x80000000) == 0)
    goto LABEL_17;
  if (v11[1] <= v11[2] || v11[0])
  {
    result = 0;
    if (*(_QWORD *)&v11[1] != 0x100000001)
      return result;
    goto LABEL_15;
  }
  v8 = v12[0];
  if (v12[0])
  {
    v9 = v12;
    do
    {
      if (v9 > v12)
        *v9 = *(_BYTE *)(v3 + v8 + 256);
      v10 = *++v9;
      v8 = v10;
    }
    while (v10);
  }
  first = cdict_find_first(v6, v12, v4);
  if (first < 0 && v11[2])
  {
LABEL_15:
    v12[0] = *(_BYTE *)(v3 + v12[0] + 256);
    first = cdict_find_first(v6, v12, v4);
  }
  if (first < 0)
    return 0;
LABEL_17:
  cdict_delete(v6, first);
  return 1;
}

BOOL hyphen_find(uint64_t a1, char *__s)
{
  uint64_t v3;
  int v4;
  uint64_t v6;
  int first;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  _DWORD v11[3];
  unsigned __int8 v12[65];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 16);
  v4 = strlen(__s);
  if (v4 > 64)
    return 0;
  memset(v11, 0, sizeof(v11));
  __strcpy_chk();
  letter_stat(v3, v12, &v11[2], &v11[1], v11);
  v6 = a1 + 1304;
  first = cdict_find_first(v6, v12, v4);
  if (first < 0)
  {
    if (v11[1] > v11[2] && !v11[0])
    {
      v8 = v12[0];
      if (v12[0])
      {
        v9 = v12;
        do
        {
          if (v9 > v12)
            *v9 = *(_BYTE *)(v3 + v8 + 256);
          v10 = *++v9;
          v8 = v10;
        }
        while (v10);
      }
      first = cdict_find_first(v6, v12, v4);
      if ((first & 0x80000000) == 0 || !v11[2])
        return first >= 0;
      goto LABEL_15;
    }
    if (*(_QWORD *)&v11[1] == 0x100000001)
    {
LABEL_15:
      v12[0] = *(_BYTE *)(v3 + v12[0] + 256);
      first = cdict_find_first(v6, v12, v4);
    }
  }
  return first >= 0;
}

uint64_t hyphen_add(uint64_t a1, unsigned __int8 *a2)
{
  return add_userhypdict(a1 + 1304, a2);
}

uint64_t add_userhypdict(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v4;
  char v5;
  int v6;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 v17[130];
  char __src[130];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  if (*a2)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = a2 + 1;
    while (1)
    {
      v9 = v4;
      v4 = v2;
      if (v2 == 61)
        break;
      if (v2 == 45 && v9 != 45)
      {
        v11 = &__src[v6];
        *v11 = v5 + 48;
        v6 += 2;
        v11[1] = 45;
        goto LABEL_9;
      }
      v17[v7++] = v2;
      ++v5;
LABEL_10:
      v12 = *v8++;
      v2 = v12;
      if (!v12)
      {
        v17[v7] = 0;
        v13 = v7 + 1;
        v14 = v6 + v13;
        __src[v6] = 0;
        strcpy((char *)&v17[v13], __src);
        v15 = cdict_add(a1, v17, v14 + 1);
        return v15 & (v15 >> 31);
      }
    }
    v10 = &__src[v6];
    *v10 = v5 + 48;
    v6 += 2;
    v10[1] = 61;
LABEL_9:
    v5 = 0;
    goto LABEL_10;
  }
  return 0;
}

uint64_t hyphen_get(uint64_t a1, int a2, _BYTE *a3)
{
  return get_userhypdict(a1 + 1304, a2, a3);
}

uint64_t get_userhypdict(uint64_t a1, int a2, _BYTE *a3)
{
  uint64_t result;
  char *v5;
  char *v6;
  int v8;
  char v9;
  int v10;
  char v11;
  int v12;
  _OWORD v13[2];

  memset(v13, 0, sizeof(v13));
  result = cdict_access(a1, a2, (uint64_t)v13);
  if ((_DWORD)result)
  {
    v5 = (char *)(*(_QWORD *)&v13[0] + SDWORD2(v13[0]) + 20);
    v6 = v5;
    while (*v6++)
      ;
    while (1)
    {
      v11 = *v6;
      if (!*v6)
        break;
      if (v11 >= 49)
      {
        v8 = v11 - 48;
        do
        {
          v9 = *v5++;
          *a3++ = v9;
          --v8;
        }
        while (v8);
      }
      v10 = v6[1];
      if (v10 == 45 || v10 == 61)
        *a3++ = v10;
      v6 += 2;
    }
    do
    {
      v12 = *v5++;
      *a3++ = v12;
    }
    while (v12);
    return 1;
  }
  return result;
}

uint64_t hyphen_dsize(uint64_t a1)
{
  return cdict_size(a1 + 1304);
}

BOOL is_pol_digraph(int a1, int a2, unsigned __int8 *a3)
{
  char v3;
  unsigned __int8 v4;
  BOOL v6;
  _BOOL8 result;

  v3 = a1 + 32;
  if ((a1 - 65) >= 0x1A)
    v3 = a1;
  if ((a2 - 65) >= 0x1A)
    v4 = a2;
  else
    v4 = a2 + 32;
  v6 = (v3 - 99) < 2u || (v3 & 0xFE) == 114;
  if (v4 == 122 && v6)
    return 1;
  result = v3 == 99 && v4 == 104;
  if (v3 == 100)
  {
    if (a3[939] != v4 && a3[958] != v4 && a3[909] != v4)
      return a3[957] == v4;
    return 1;
  }
  return result;
}

uint64_t add_hypdict(uint64_t a1, _BYTE *a2)
{
  int v3;
  int v4;
  char v5;
  int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 v16[130];
  char __src[130];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!*a2)
    return 0;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  do
  {
    v8 = (char)*a2++;
    v7 = v8;
    if (!v8)
      break;
    v9 = v7;
    if (v7 == 42)
    {
      v6 = 1;
    }
    else
    {
      if (v7 == 61)
      {
        v11 = &__src[v4];
        *v11 = v5 + 48;
        v4 += 2;
        v11[1] = 61;
      }
      else
      {
        if (v7 != 45)
        {
          v16[v3++] = v7;
          ++v5;
          continue;
        }
        v10 = &__src[v4];
        *v10 = v5 + 48;
        v4 += 2;
        v10[1] = 45;
      }
      v5 = 0;
    }
  }
  while (v9 != 42);
  v12 = v3 + 1;
  v16[v3] = 0;
  v13 = v4 + 1;
  __src[v4] = 0;
  if (v6)
  {
    v16[v12] = 42;
    LODWORD(v12) = v3 + 2;
  }
  strcpy((char *)&v16[(int)v12], __src);
  v14 = cdict_add(a1, v16, v13 + (int)v12);
  return v14 & (v14 >> 31);
}

uint64_t IChu(uint64_t a1, char *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_DWORD *)a1;
  v5 = 11;
  switch(*(_DWORD *)a1)
  {
    case 1:
      HUinit(a1);
      return v6;
    case 2:
      HUterm(a1);
      return 0;
    case 3:
      return HUfullver(a2, a1);
    case 4:
    case 5:
    case 6:
      return v5;
    case 7:
      if (*(_DWORD *)(a1 + 1308))
      {
        if (*(_DWORD *)(a1 + 4) == 11 && (*(_WORD *)(a1 + 1322) & 0x20) == 0
          || SLstrcmp((_BYTE *)(a1 + 1547), **(unsigned __int8 ***)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 224) + 16))&& (*(_WORD *)(a1 + 1322) & 2) == 0)
        {
          v5 = HUfullver(a2, a1);
        }
        if (*(_DWORD *)(a1 + 4) != 11 && (*(_WORD *)(a1 + 1322) & 2) == 0 && HUhyphenate(a1) == 8)
          return 8;
      }
      return v5;
    default:
      if (v4 == 100)
        return HUcorrect(a1, a2);
      if (v4 != 101)
        return v5;
      return HUcormore(a1, a2);
  }
}

double HUinit(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int v4;
  int v5;
  int v6;
  void *v7;
  double result;
  _BYTE *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  uint64_t v15;
  _DWORD *v16;
  void *v17;
  int v18;
  unsigned int v19;
  int v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  char __dst[511];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD **)(v2 + 224);
  memset(v25, 0, sizeof(v25));
  v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 == 4)
    v5 = 14;
  else
    v5 = 0;
  if (v4 == 18)
    v6 = 21;
  else
    v6 = v5;
  v7 = malloc_type_calloc(1uLL, 0x40uLL, 0x101004065F4E4D2uLL);
  v3[2] = v7;
  if (!v7)
    goto LABEL_17;
  v9 = malloc_type_malloc(0x41uLL, 0x100004077774924uLL);
  *(_QWORD *)(v3[2] + 8) = v9;
  if (!v9)
    goto LABEL_17;
  v9[64] = 32;
  *(_QWORD *)&v10 = 0x2020202020202020;
  *((_QWORD *)&v10 + 1) = 0x2020202020202020;
  *((_OWORD *)v9 + 2) = v10;
  *((_OWORD *)v9 + 3) = v10;
  *(_OWORD *)v9 = v10;
  *((_OWORD *)v9 + 1) = v10;
  v11 = malloc_type_malloc(0x41uLL, 0x100004077774924uLL);
  *(_QWORD *)v3[2] = v11;
  if (!v11)
    goto LABEL_17;
  v11[64] = 32;
  *(_QWORD *)&v12 = 0x2020202020202020;
  *((_QWORD *)&v12 + 1) = 0x2020202020202020;
  *((_OWORD *)v11 + 2) = v12;
  *((_OWORD *)v11 + 3) = v12;
  *(_OWORD *)v11 = v12;
  *((_OWORD *)v11 + 1) = v12;
  v13 = malloc_type_malloc(0x41uLL, 0x100004077774924uLL);
  *(_QWORD *)(v3[2] + 16) = v13;
  if (!v13)
  {
LABEL_17:
    v21 = *(_WORD *)(a1 + 1320) | 8;
LABEL_18:
    *(_WORD *)(a1 + 1320) = v21;
    return result;
  }
  v13[64] = 32;
  *(_QWORD *)&v14 = 0x2020202020202020;
  *((_QWORD *)&v14 + 1) = 0x2020202020202020;
  *((_OWORD *)v13 + 2) = v14;
  *((_OWORD *)v13 + 3) = v14;
  *(_OWORD *)v13 = v14;
  *((_OWORD *)v13 + 1) = v14;
  v15 = SLLngToA(*(unsigned __int8 *)(a1 + 8));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 248) + 56) = v15;
  if (!v15)
  {
    v21 = *(_WORD *)(a1 + 1320) | 0x4000;
    goto LABEL_18;
  }
  v16 = malloc_type_calloc(1uLL, 0x10uLL, 0x1000040A517B1A3uLL);
  if (!v16)
    return result;
  v17 = v16;
  *v16 = 757935150;
  *((_BYTE *)v16 + 4) = 45;
  v16[2] = v6;
  v16[3] = 4250;
  v18 = charset_init(v3 + 1, (unsigned __int8 *)v16);
  free(v17);
  if (v18 < 0)
    goto LABEL_29;
  SLfulfspec((char *)(a1 + 28), (const char *)(a1 + 539), __dst);
  v19 = *(_DWORD *)(a1 + 3168);
  if (v19 <= 0x3FF)
  {
    *(_DWORD *)&v25[20] = 0;
    *(_OWORD *)&v25[4] = xmmword_1DE2F04C0;
LABEL_16:
    v20 = 1;
LABEL_23:
    *(_DWORD *)v25 = v20;
    goto LABEL_24;
  }
  *(_DWORD *)&v25[20] = 1;
  *(_OWORD *)&v25[4] = xmmword_1DE2F04B0;
  v22 = (v19 << 6) - 0x20000;
  *(_DWORD *)v25 = v22 >> 16;
  if (v22 > 134283263)
  {
    v20 = 0;
    goto LABEL_23;
  }
  if (v22 < 0x10000)
  {
    *(_DWORD *)&v25[12] = 0;
    goto LABEL_16;
  }
LABEL_24:
  if ((spell_init(v3, v3[1], __dst, (__int128 *)v25) & 0x80000000) != 0)
  {
LABEL_29:
    v21 = *(_WORD *)(a1 + 1320) | 4;
    goto LABEL_18;
  }
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 224);
  *(_DWORD *)(v23 + 32) = 1;
  if ((suggest_init((_QWORD *)(v23 + 24), *(_QWORD *)(v23 + 8), 0, -1) & 0x80000000) == 0)
  {
    if (*(_DWORD *)(a1 + 1308))
      HUhyphinit(a1);
    *(_WORD *)(a1 + 1320) |= 0x80u;
    v24 = *(_QWORD *)(v2 + 248);
    *(_WORD *)(v24 + 68) = 64;
    *(_BYTE *)(v24 + 55) = *(_BYTE *)(a1 + 8);
    *(_QWORD *)&result = 0x8000000080;
    *(_QWORD *)(a1 + 12) = 0x8000000080;
    *(_WORD *)(v2 + 12) = 307;
  }
  return result;
}

uint64_t HUterm(uint64_t a1)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(a1 + 3184);
  if (*(_DWORD *)(a1 + 1308))
    hyphen_finish(*(_QWORD *)(*(_QWORD *)(v1 + 224) + 40));
  suggest_finish(*(_QWORD *)(*(_QWORD *)(v1 + 224) + 24));
  spell_finish(**(_QWORD ***)(v1 + 224));
  freq_finish(*(void **)(*(_QWORD *)(v1 + 224) + 8));
  v2 = *(void ***)(*(_QWORD *)(v1 + 224) + 16);
  if (v2[2])
  {
    free(v2[2]);
    v2 = *(void ***)(*(_QWORD *)(v1 + 224) + 16);
  }
  if (v2[1])
  {
    free(v2[1]);
    v2 = *(void ***)(*(_QWORD *)(v1 + 224) + 16);
  }
  if (!*v2 || (free(*v2), (v2 = *(void ***)(*(_QWORD *)(v1 + 224) + 16)) != 0))
    free(v2);
  return 0;
}

uint64_t HUfullver(char *a1, uint64_t a2)
{
  uint64_t result;
  BOOL v4;
  uint64_t v5;

  result = HUver(a1, a2);
  if (*(_DWORD *)(a2 + 1308))
    v4 = (_DWORD)result == 11;
  else
    v4 = 0;
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3184) + 264);
    if (*(_DWORD *)(v5 + 3472) || *(_DWORD *)(v5 + 3476))
      return HUmandin(a2);
    else
      return 11;
  }
  return result;
}

uint64_t HUcorrect(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  int v8;
  unint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 224);
  v5 = *(int *)(v4 + 32);
  if ((_DWORD)v5 == 1)
  {
    v6 = 8;
    *(_DWORD *)(*(_QWORD *)(v4 + 16) + 56) = 8;
    if (!*(_WORD *)(a1 + 1682))
      goto LABEL_13;
  }
  else
  {
    if (!*(_WORD *)(a1 + 1682))
    {
LABEL_13:
      if (*(_WORD *)(a1 + 1680))
      {
        suggest_words(*(_QWORD *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, *(_DWORD *)(*(_QWORD *)(v4 + 16) + 56), -1);
        return 0;
      }
      v9 = 1;
      do
      {
        suggest_words(*(_QWORD *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, *(_DWORD *)(*(_QWORD *)(v4 + 16) + 56), v9);
        v10 = v9 >= 0x80;
        v9 *= 2;
      }
      while (!v10);
      if (*(_BYTE *)(a1 + 1690))
        return 20;
      return HUcormore(a1, a2);
    }
    if ((int)v5 < 1)
      return 0;
    v6 = *(_DWORD *)(*(_QWORD *)(v4 + 16) + 56);
  }
  LODWORD(result) = suggest_words(*(_QWORD *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, v6, v5);
  v8 = 2 * *(_DWORD *)(v4 + 32);
  *(_DWORD *)(v4 + 32) = v8;
  if (v8 < 1)
    return 0;
  if (!*(_BYTE *)(a1 + 1690) || *(_WORD *)(a1 + 1680))
    return 20;
  if ((int)result >= 0)
    return result;
  else
    return 8;
}

uint64_t HUcormore(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 224);
  v5 = 256;
  do
  {
    v6 = suggest_words(*(_QWORD *)(v4 + 24), a1, v4, (uint64_t)spell_f, (uint64_t)result_f, a2, *(_DWORD *)(*(_QWORD *)(v4 + 16) + 56), v5);
    v5 *= 2;
  }
  while ((int)v5 > 255);
  return (v6 >> 28) & 8;
}

uint64_t HUhyphenate(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 3184);
  v3 = *(_QWORD *)(v2 + 264);
  v4 = *(_QWORD *)(v2 + 224);
  *(_QWORD *)(v3 + 3480) = 0;
  if ((hyphen_ate(*(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 16)) & 0x80000000) != 0)
    return 8;
  if (*(__int16 *)(a1 + 1612) >= 1)
  {
    v5 = 0;
    v6 = v3 + 3480;
    while (1)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16);
      if (*(_BYTE *)(v7 + v5) != 32)
      {
        v8 = 1;
        *(_DWORD *)(v6 + 4 * ((unsigned __int16)(v5 - 1) >> 5)) |= 1 << -(char)v5;
        v9 = *(unsigned __int8 *)(v7 + v5);
        if (v9 == 61)
          goto LABEL_8;
        if (v9 == 35)
          break;
      }
LABEL_9:
      if (++v5 >= *(__int16 *)(a1 + 1612))
        return 0;
    }
    v8 = 2;
LABEL_8:
    HUmand(a1, (__int16)v5, v8);
    goto LABEL_9;
  }
  return 0;
}

uint64_t HUver(char *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t result;
  _DWORD *v13;
  _DWORD *v14;
  unsigned __int8 *v15;
  _QWORD *v16;
  unsigned __int8 *v17;

  v4 = *(_QWORD *)(a2 + 3184);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 248) + 56);
  v7 = *(_QWORD *)(*(_QWORD *)(v4 + 224) + 16);
  strcpy(*(char **)v7, __src);
  v8 = *(_QWORD *)(v7 + 8);
  *(_BYTE *)(v8 + 64) = 32;
  *(_QWORD *)&v9 = 0x2020202020202020;
  *((_QWORD *)&v9 + 1) = 0x2020202020202020;
  *(_OWORD *)(v8 + 32) = v9;
  *(_OWORD *)(v8 + 48) = v9;
  *(_OWORD *)v8 = v9;
  *(_OWORD *)(v8 + 16) = v9;
  *(_DWORD *)(v7 + 24) = strlen(__src);
  *(_DWORD *)(v7 + 28) = 1;
  if (*(_DWORD *)(a2 + 1308))
  {
    v10 = *(_QWORD *)(v7 + 16);
    *(_BYTE *)(v10 + 64) = 32;
    *(_QWORD *)&v11 = 0x2020202020202020;
    *((_QWORD *)&v11 + 1) = 0x2020202020202020;
    *(_OWORD *)(v10 + 32) = v11;
    *(_OWORD *)(v10 + 48) = v11;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v11;
    *(_DWORD *)(v7 + 28) |= 0x44u;
  }
  if ((spell_check(**(_QWORD **)(v4 + 224), (uint64_t *)v7) & 0x80000000) != 0)
    return 8;
  result = HUres(v7, a2);
  if ((_DWORD)result != 11)
  {
    if ((_DWORD)result == 10)
      **(_BYTE **)(v5 + 72) = 0;
    goto LABEL_7;
  }
  if (*(_BYTE *)(v5 + 88))
  {
    SLrecap(*(unsigned __int8 **)v7, *(__int16 *)(v7 + 24), *(unsigned __int8 *)(v5 + 88), v5 + 92, *(unsigned __int8 *)(v5 + 88), v6);
    if ((spell_check(**(_QWORD **)(v4 + 224), (uint64_t *)v7) & 0x80000000) != 0)
      return 8;
    result = HUres(v7, a2);
    if ((_DWORD)result != 11)
    {
      if ((_DWORD)result == 10)
      {
        **(_BYTE **)(v5 + 72) = *(_BYTE *)(v5 + 88);
        v13 = *(_DWORD **)(v5 + 80);
        *v13 = *(_DWORD *)(v5 + 92);
        v13[1] = *(_DWORD *)(v5 + 96);
      }
      goto LABEL_7;
    }
  }
  strcpy(*(char **)v7, __src);
  **(_BYTE **)(v5 + 72) = 1;
  v15 = *(unsigned __int8 **)(v5 + 72);
  v14 = *(_DWORD **)(v5 + 80);
  *v14 |= 0x80000000;
  SLrecap(*(unsigned __int8 **)v7, *(__int16 *)(v7 + 24), *v15, (uint64_t)v14, *v15, v6);
  if ((spell_check(**(_QWORD **)(v4 + 224), (uint64_t *)v7) & 0x80000000) == 0)
  {
    result = HUres(v7, a2);
    if ((_DWORD)result != 11)
      goto LABEL_7;
    **(_BYTE **)(v5 + 72) = 2;
    v17 = *(unsigned __int8 **)(v5 + 72);
    v16 = *(_QWORD **)(v5 + 80);
    *v16 = -1;
    SLrecap(*(unsigned __int8 **)v7, *(__int16 *)(v7 + 24), *v17, (uint64_t)v16, *(unsigned __int8 *)(v5 + 88), v6);
    if ((spell_check(**(_QWORD **)(v4 + 224), (uint64_t *)v7) & 0x80000000) == 0)
    {
      result = HUres(v7, a2);
      if ((_DWORD)result == 11)
      {
        *(_BYTE *)(*(_QWORD *)(v5 + 72) + 1) = 0;
        **(_BYTE **)(v5 + 72) = 0;
        **(_QWORD **)(v5 + 80) = 0;
        goto LABEL_8;
      }
LABEL_7:
      *(_WORD *)(v5 + 102) = 1;
LABEL_8:
      *(_DWORD *)(a2 + 4) = result;
      return result;
    }
  }
  return 8;
}

uint64_t HUres(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;

  v2 = *(_DWORD *)(a1 + 56);
  if ((v2 & 0x10) != 0)
    *(_QWORD *)(a2 + 1328) |= 0x1000000uLL;
  if ((v2 & 0x20) != 0)
  {
    *(_QWORD *)(a2 + 1328) |= 0x8000000uLL;
    if ((v2 & 0x80) == 0)
    {
LABEL_9:
      result = 3;
      goto LABEL_10;
    }
LABEL_8:
    *(_QWORD *)(a2 + 1328) |= 0x4000000uLL;
    goto LABEL_9;
  }
  if ((v2 & 0x80) != 0)
    goto LABEL_8;
  if (v2)
    return 11;
  result = 10;
LABEL_10:
  **(_WORD **)(a2 + 3184) |= 0x100u;
  return result;
}

uint64_t getcache(uint64_t a1, unsigned int a2)
{
  int v2;
  int v3;

  if (a2 <= 0x3FF)
  {
    *(_DWORD *)(a1 + 20) = 0;
    *(_OWORD *)(a1 + 4) = xmmword_1DE2F04C0;
LABEL_7:
    v3 = 1;
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 20) = 1;
  *(_OWORD *)(a1 + 4) = xmmword_1DE2F04B0;
  v2 = (a2 << 6) - 0x20000;
  *(_DWORD *)a1 = v2 >> 16;
  if (v2 > 134283263)
  {
    v3 = 0;
LABEL_8:
    *(_DWORD *)a1 = v3;
    return 0;
  }
  if (v2 < 0x10000)
  {
    *(_DWORD *)(a1 + 12) = 0;
    goto LABEL_7;
  }
  return 0;
}

uint64_t HUcorinit(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 224);
  *(_DWORD *)(v1 + 32) = 1;
  return (suggest_init((_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 8), 0, -1) >> 28) & 8;
}

uint64_t HUhyphinit(uint64_t a1)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  uint64_t result;
  char __dst[511];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 224);
  SLfulfspec((char *)(a1 + 668), (const char *)(a1 + 1179), __dst);
  v3 = hyphen_init((_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 8), __dst, 0, 0);
  v4 = *(_WORD *)(a1 + 1320);
  if (v3 < 0)
  {
    *(_WORD *)(a1 + 1320) = v4 | 0x2000;
    *(_DWORD *)(a1 + 1308) = 0;
    return 8;
  }
  else
  {
    result = 0;
    *(_WORD *)(a1 + 1320) = v4 | 0x100;
  }
  return result;
}

uint64_t spell_f(uint64_t *a1, char *__s, int a3)
{
  uint64_t result;
  uint64_t v7[3];
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  v7[1] = 0;
  v7[2] = 0;
  v7[0] = (uint64_t)__s;
  v8 = strlen(__s);
  v9 = a3 + 1;
  result = spell_check(*a1, v7);
  if ((_DWORD)result)
  {
    if (DWORD2(v11) != 1 || (int)result <= 0)
      return result;
    else
      return 0;
  }
  return result;
}

uint64_t result_f(uint64_t a1, char *__src)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  __int16 v13;
  __int16 v14;
  char __s[65];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!__src)
    return 10;
  v4 = *(_QWORD *)(a1 + 3184);
  v5 = *(_QWORD *)(v4 + 264);
  v6 = **(unsigned __int8 **)(v5 + 72);
  if (!*(_BYTE *)(v5 + 3184) || !*(_BYTE *)(v5 + 3206))
    goto LABEL_12;
  v7 = *(_QWORD *)(v5 + 3192);
  strcpy(*(char **)(v7 + 8), __src);
  *(_BYTE *)(v7 + 17) = *(_BYTE *)(v5 + 88);
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v5 + 92);
  *(_DWORD *)(v7 + 24) = *(_DWORD *)(v5 + 96);
  *(_BYTE *)(v7 + 42) = 1;
  v8 = 1 << (*(_BYTE *)(*(_QWORD *)(v4 + 248) + 55) - 1);
  if (!*(_BYTE *)(*(_QWORD *)(v4 + 248) + 55))
    LODWORD(v8) = -1;
  *(_DWORD *)(v7 + 36) = v8;
  PDword((unsigned __int16 *)v7, 1u, 1);
  v9 = *(unsigned __int16 *)(v7 + 50);
  if (!*(_WORD *)(v7 + 50) || (*(_WORD *)(v5 + 102) = v9, (__int16)v9 < 1))
  {
LABEL_12:
    if (*(_BYTE *)(v5 + 88) == 3 && v6 == 0)
    {
      v6 = *(_DWORD *)(v5 + 92) >> 31;
      v12 = strchr(__src, 46);
      if (v12)
      {
        if (v12[1] == 32)
        {
          *(_DWORD *)(*(_QWORD *)(v5 + 80) + 4 * ((unsigned __int16)((_WORD)v12 - (_WORD)__src + 2) >> 5)) |= 1 << ~((_BYTE)v12 - (_BYTE)__src + 2);
          v6 = 3;
        }
      }
    }
    __strcpy_chk();
    v13 = strlen(__s);
    SLrecap((unsigned __int8 *)__s, v13, v6, *(_QWORD *)(v5 + 80), *(unsigned __int8 *)(v5 + 88), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 3184) + 248) + 56));
    v14 = strlen(__s);
    SFadd(__s, v14, (__int16 *)(v5 + 40), (__int16 *)(v5 + 44), *(__int16 *)(v5 + 42), *(__int16 *)(v5 + 56), *(_QWORD *)(v5 + 48), *(_QWORD *)(v5 + 64));
    return 10;
  }
  v10 = *(_QWORD *)(v7 + 104);
  while (v6 != *(unsigned __int8 *)(*(_QWORD *)v10 + 71) || !*(_BYTE *)(*(_QWORD *)v10 + 70))
  {
    v10 += 8;
    if (!--v9)
      goto LABEL_12;
  }
  return 11;
}

uint64_t HUmand(uint64_t result, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;

  v3 = a3 + (uint64_t)a2;
  v4 = *(_QWORD *)(*(_QWORD *)(result + 3184) + 264) + 4 * ((unsigned __int16)(a2 - 1) >> 5);
  *(_DWORD *)(v4 + 3480) &= ~(1 << -(char)a2);
  v5 = result + 4 * ((unsigned __int16)(v3 - 1) >> 5);
  *(_DWORD *)(v5 + 3156) |= 1 << -(char)v3;
  v6 = *(_WORD *)(result + 1322);
  if ((v6 & 2) == 0)
  {
    v7 = a2;
    if (a2 < 1)
    {
      a2 = 0;
    }
    else
    {
      v8 = (unsigned __int16)a2;
      v9 = (_BYTE *)(result + 1547);
      do
      {
        v9[1543] = *v9;
        ++v9;
        --v8;
      }
      while (v8);
    }
    v10 = result + v7 + 1;
    *(_BYTE *)(result + v7 + 3090) = *(_BYTE *)(v10 + 1547);
    if (a3 == 2)
      *(_BYTE *)(v10 + 3090) = *(_BYTE *)(result + v3 + 1547);
    v11 = v3;
    if (a2 < *(__int16 *)(result + 1612))
    {
      v12 = (unsigned __int16)a2 + 1547;
      v11 = v3;
      do
      {
        *(_BYTE *)(result + v11++ + 3090) = *(_BYTE *)(result + v12);
        v13 = v12++ - 1546;
      }
      while (*(__int16 *)(result + 1612) > v13);
    }
    *(_BYTE *)(result + v11 + 3090) = 0;
    v6 = *(_WORD *)(result + 1322);
  }
  *(_WORD *)(result + 1322) = v6 | 0x44;
  return result;
}

uint64_t HUmandin(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  __int16 v15;
  __int16 v16;
  __int16 v17;
  uint64_t v19;
  char __s[65];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 3184) + 264);
  __strcpy_chk();
  v3 = *(__int16 *)(a1 + 1612);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 11;
    while (1)
    {
      if (((*(_DWORD *)(v2 + 3472 + 4 * ((unsigned __int16)v4 >> 5)) >> ~(_BYTE)v4) & 1) != 0)
      {
        v6 = *(unsigned __int8 *)(a1 + v4 + 1547) - 115;
        v7 = v6 > 7;
        v8 = (1 << v6) & 0xC1;
        if (!v7 && v8 != 0)
        {
          v10 = *(unsigned __int8 *)(v4 + a1 + 1549) - 115;
          v7 = v10 > 7;
          v11 = (1 << v10) & 0xC1;
          v12 = v7 || v11 == 0;
          if (!v12 && *(unsigned __int8 *)(a1 + v4 + 1546) == *(unsigned __int8 *)(a1 + v4 + 1548))
          {
            v13 = (__int16)v3 - 1;
            if (v13 <= (int)v4)
            {
              v15 = v4;
            }
            else
            {
              v14 = v4;
              v15 = v4;
              do
              {
                __s[v15++] = *(_BYTE *)(a1 + v14 + 1548);
                v14 = v15;
              }
              while (v13 > v15);
            }
            __s[v15] = 0;
            *(_WORD *)(a1 + 1612) = v3 - 1;
            v5 = HUver(__s, a1);
            if ((_DWORD)v5 != 11)
            {
              *(_WORD *)(a1 + 1322) |= 2u;
              if (HUhyphenate(a1) == 8)
                return 8;
              v16 = *(_WORD *)(a1 + 1322);
              if ((v16 & 4) != 0)
              {
                *(_WORD *)(a1 + 1322) = v16 & 0xFFFB;
                __strcpy_chk();
                ++*(_WORD *)(a1 + 1612);
                v19 = *(_QWORD *)(a1 + 3156);
                *(_DWORD *)(a1 + 3156) = *(_DWORD *)(v2 + 3480);
                *(_DWORD *)(a1 + 3160) = *(_DWORD *)(v2 + 3484);
                *(_QWORD *)(v2 + 3480) = v19;
                return v5;
              }
              v17 = strlen(__s);
              SFadd(__s, v17, (__int16 *)(v2 + 40), (__int16 *)(v2 + 44), *(__int16 *)(v2 + 42), *(__int16 *)(v2 + 56), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 64));
              *(_WORD *)(a1 + 1322) &= ~2u;
              **(_WORD **)(a1 + 3184) |= 4u;
              v5 = 2;
            }
          }
        }
      }
      ++v4;
      LOWORD(v3) = *(_WORD *)(a1 + 1612);
      if (v4 >= (__int16)v3)
        return v5;
    }
  }
  return 11;
}

uint64_t charset_init(_QWORD *a1, unsigned __int8 *a2)
{
  void *v4;

  v4 = malloc_type_calloc(0xDD0uLL, 1uLL, 0x98363E6DuLL);
  *a1 = v4;
  if (v4)
    return charset_reinit((uint64_t)v4, a2);
  else
    return 4294965395;
}

uint64_t charset_alloc(_QWORD *a1)
{
  void *v2;

  v2 = malloc_type_calloc(0xDD0uLL, 1uLL, 0x98363E6DuLL);
  *a1 = v2;
  if (v2)
    return 0;
  else
    return 4294967293;
}

uint64_t charset_reinit(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  unsigned __int8 *v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  _DWORD *v6;
  int v8;
  unsigned __int8 *v9;
  int *v10;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  char v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  unsigned int v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t result;
  unsigned __int8 *v55;
  int *v56;
  uint64_t v57;

  v2 = *((_DWORD *)a2 + 2);
  v3 = (unsigned __int8 *)&lexchar_hun;
  if (v2 != 14)
    v3 = 0;
  v4 = &hun_symbols;
  if (v2 != 14)
    v4 = 0;
  if (v2 == 21)
    v5 = (unsigned __int8 *)&lexchar_pol;
  else
    v5 = v3;
  if (v2 == 21)
    v6 = &pol_symbols;
  else
    v6 = v4;
  if (!v5)
    return 4294965382;
  v8 = *((_DWORD *)a2 + 3);
  if (v8 == 4250)
    v9 = (unsigned __int8 *)&oemchar_icsl2;
  else
    v9 = 0;
  if (v8 == 4250)
    v10 = (int *)&oemsym_icsl2;
  else
    v10 = 0;
  if (v8 != 4250)
    return 4294965381;
  v12 = (unsigned __int8 *)malloc_type_calloc(0xA00uLL, 1uLL, 0x71254EB2uLL);
  if (!v12)
    return 4294965395;
  v13 = v12;
  v14 = (unsigned __int8 *)malloc_type_calloc(0xA00uLL, 1uLL, 0xA63864AEuLL);
  if (!v14)
  {
    free(v13);
    return 4294965395;
  }
  v15 = v14;
  v55 = a2;
  v57 = a1 + 3076;
  bzero(v13, 0xA00uLL);
  bzero(v15, 0xA00uLL);
  v16 = *v5;
  if (*v5)
  {
    v17 = v5 + 3;
    do
    {
      v13[20 * *(v17 - 2) + *(v17 - 1)] = v16;
      v18 = *v17;
      v17 += 3;
      v16 = v18;
    }
    while (v18);
  }
  v19 = 0;
  v20 = a1 + 768;
  v21 = a1 + 1024;
  v22 = v9 + 1;
  do
  {
    if (*(v22 - 1))
      v15[20 * *(v22 - 1) + *v22] = v19 ^ 0x80;
    v22 += 16;
    if ((v19 - 97) >= 0x1A)
      v23 = v19;
    else
      v23 = v19 - 32;
    v24 = (_BYTE *)(a1 + v19);
    *(_BYTE *)(a1 + v19) = v23;
    if ((v19 - 65) >= 0x1A)
      v25 = v19;
    else
      v25 = v19 + 32;
    v24[256] = v25;
    v24[512] = v19;
    v24[768] = v19;
    v24[640] = 0;
    v24[896] = 0;
    *(_QWORD *)(v21 + 8 * v19) = ascii_table[v19];
    ++v19;
  }
  while (v19 != 128);
  v26 = 0;
  v27 = 128;
  do
  {
    v28 = a1 + v26;
    *(_BYTE *)(v28 + 128) = v26 + 0x80;
    *(_BYTE *)(v28 + 384) = v26 + 0x80;
    v29 = *v9;
    v30 = v9[1];
    if ((v29 - 65) > 0x19)
    {
      v34 = v29 - 97;
      v32 = 20 * v29;
      if (v34 > 0x19)
        goto LABEL_43;
      v31 = (_BYTE *)(a1 + v27);
      v33 = v32 - 640;
    }
    else
    {
      v31 = (_BYTE *)(v28 + 384);
      v32 = 20 * v29;
      v33 = v32 + 640;
    }
    v35 = v15[v30 + v33];
    if (!v35)
      LOBYTE(v35) = v26 + 0x80;
    *v31 = v35;
LABEL_43:
    v36 = v13[v30 + v32];
    if (v36)
    {
      *(_BYTE *)(a1 + v26 + 640) = v36;
      *(_BYTE *)(v20 + v36) = v26 + 0x80;
    }
    *(_QWORD *)(a1 + 2048 + 8 * v26) = *((_QWORD *)v9 + 1);
    ++v27;
    ++v26;
    v9 += 16;
  }
  while (v26 != 128);
  *(_DWORD *)(a1 + 3072) = 0;
  v37 = *v6;
  if (*v6 != -1)
  {
    v38 = 0;
    v56 = v10;
    do
    {
      v39 = v10[v37];
      if ((_DWORD)v39)
      {
        *(_BYTE *)(v57 + 28 * v38) = v39;
        v40 = 0x1000000;
        if (!v6[1])
          v40 = 0x800000;
        *(_QWORD *)(v21 + 8 * v39) |= v40;
        v41 = (_BYTE *)*((_QWORD *)v6 + 1);
        v42 = *v41;
        if (*v41)
        {
          v43 = 0;
          do
          {
            *(_BYTE *)(a1 + 3084 + 28 * *(int *)(a1 + 3072) + v43) = *(_BYTE *)(v20 + v42);
            v44 = v43 + 1;
            if (v43 > 0xD)
              break;
            v42 = *(unsigned __int8 *)(*((_QWORD *)v6 + 1) + v43++ + 1);
          }
          while (v42);
          v38 = *(_DWORD *)(a1 + 3072);
        }
        else
        {
          v44 = 0;
        }
        *(_BYTE *)(v57 + 28 * v38 + v44 + 8) = 0;
        v45 = *(_DWORD *)(a1 + 3072);
        *(_DWORD *)(v57 + 28 * v45 + 4) = strlen((const char *)(v57 + 28 * v45 + 8));
        v38 = v45 + 1;
        *(_DWORD *)(a1 + 3072) = v45 + 1;
        v10 = v56;
        if (v45 == 15)
          break;
      }
      v46 = v6[4];
      v6 += 4;
      v37 = v46;
    }
    while (v46 != -1);
  }
  free(v13);
  free(v15);
  if (*v55)
    *(_QWORD *)(a1 + 8 * *v55 + 1024) |= 0x400uLL;
  v47 = *(_QWORD *)(a1 + 1376);
  *(_QWORD *)(a1 + 1376) = v47 | 0x200;
  v48 = *(_QWORD *)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = v48 | 0x200;
  v49 = v55[1];
  if (v55[1])
  {
    *(_QWORD *)(a1 + 1376) = v47 & 0xFFFFFFFFFFFFFDFFLL;
    *(_QWORD *)(a1 + 1392) = v48 & 0xFFFFFFFFFFFFFDFFLL;
    *(_QWORD *)(a1 + 8 * v49 + 1024) |= 0x200uLL;
  }
  v50 = v55[2];
  if (v55[2] && (_DWORD)v50 != 45)
  {
    *(_QWORD *)(a1 + 1024 + 8 * *(unsigned __int8 *)(a1 + 813)) &= ~0x2000uLL;
    *(_QWORD *)(a1 + 1024 + 8 * v50) |= 0x2000uLL;
    *(_BYTE *)(a1 + v50 + 512) = 16;
    *(_BYTE *)(a1 + 784) = v50;
  }
  v51 = v55[4];
  if (v55[4] && (_DWORD)v51 != 45)
  {
    *(_QWORD *)(a1 + 8 * v51 + 1024) |= 0x1000uLL;
    *(_BYTE *)(a1 + v51 + 512) = 18;
    *(_BYTE *)(a1 + 786) = v51;
  }
  v52 = v55[3];
  if (v55[3] && (_DWORD)v52 != 45)
  {
    *(_QWORD *)(a1 + 1024 + 8 * *(unsigned __int8 *)(a1 + 813)) &= ~0x1000uLL;
    *(_QWORD *)(a1 + 1024 + 8 * v52) |= 0x1000uLL;
    *(_BYTE *)(a1 + v52 + 512) = 45;
    *(_BYTE *)(a1 + 813) = v52;
  }
  v53 = *((_DWORD *)v55 + 2);
  *(_DWORD *)(a1 + 3524) = v53 & 0x1FF;
  if (v53 == 14)
  {
    *(_QWORD *)(a1 + 1736) = 19;
    *(_QWORD *)(a1 + 1992) = 21;
  }
  result = 0;
  *(_DWORD *)(a1 + 3528) = *((_DWORD *)v55 + 3);
  return result;
}

uint64_t get_he_language(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3524);
}

uint64_t get_he_codepage(uint64_t a1)
{
  return *(unsigned int *)(a1 + 3528);
}

BOOL has_lang_nont(int a1)
{
  return a1 == 14;
}

_DWORD *db_set_file(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t db_init(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  _DWORD *v19;
  void *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  size_t v34;
  void *v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned __int8 **v40;
  int *v41;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  BOOL v54;
  BOOL v55;
  int v56;
  int v57;
  void *v58;
  int v59;
  int v60;
  uint64_t v61;
  int *v62;
  int v63;
  void *v64;
  int v66;
  unsigned int *v67;
  _QWORD *v68;
  char v69;
  __int16 *v70;
  unsigned int v71;
  void *v72;
  char *v73;
  _DWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  _QWORD *v79;
  char *v80;

  v12 = malloc_type_calloc(0x48uLL, 1uLL, 0xA704E4DFuLL);
  *a1 = v12;
  if (!v12)
    return 4294966795;
  v13 = v12;
  *((_OWORD *)v12 + 1) = 0u;
  v14 = v12 + 2;
  *((_OWORD *)v12 + 2) = 0u;
  v15 = v12 + 4;
  *((_DWORD *)v12 + 16) = a5;
  *((_DWORD *)v12 + 17) = a6;
  v12[1] = a3;
  v16 = f_open(a2, 1);
  if (!v16)
    return 4294967094;
  v17 = v16;
  v78 = a2;
  v79 = v14;
  f_seek(v16, a4, 0);
  if (fgetl_lsb1st(v17, v15) == -1
    || fgetl_lsb1st(v17, v13 + 7) == -1
    || (v18 = (unsigned int *)(v14 + 3), fgetl_lsb1st(v17, v79 + 3) == -1)
    || (v19 = v13 + 6, fgetl_lsb1st(v17, v13 + 6) == -1))
  {
    f_close(v17);
    return 4294967092;
  }
  v20 = malloc_type_calloc(*((_DWORD *)v13 + 14) + *((_DWORD *)v13 + 14) * *v19 + 33, 1uLL, 0x7F0EFB4BuLL);
  if (!v20)
    goto LABEL_38;
  v21 = v20;
  v22 = (char *)malloc_type_calloc(32 * (int)v13[4], 1uLL, 0x71F23F2uLL);
  v13[3] = v22;
  v80 = v22;
  if (!v22)
  {
    free(v21);
LABEL_38:
    f_close(v17);
    return 4294966795;
  }
  v72 = v21;
  if (*(int *)v15 < 1)
  {
    v36 = 0;
    v71 = 0;
  }
  else
  {
    v23 = 0;
    while (2)
    {
      v73 = &v80[32 * v23];
      *(_QWORD *)v73 = 0;
      v24 = v21;
      do
      {
        if ((*(_BYTE *)(v17 + 8) & 0x10) != 0)
          v25 = f_getc_txt(v17);
        else
          v25 = f_getc_bin(v17);
        if (v25 == -1)
          goto LABEL_35;
        *v24++ = (16 * (v25 ^ 0x5C)) | ((v25 ^ 0x5Cu) >> 4);
      }
      while (__PAIR16__((16 * (v25 ^ 0x5Cu)) >> 24, 16 * (v25 ^ 0x5C)));
      v76 = v23;
      v26 = &v80[32 * v23];
      if (fgetl_lsb1st(v17, (uint64_t *)v26 + 1) == -1)
        goto LABEL_35;
      v70 = (__int16 *)(v26 + 16);
      if (fgetw_lsb1st(v17, (_WORD *)v26 + 8) == -1)
        goto LABEL_35;
      v27 = v76;
      if (fgetw_lsb1st(v17, &v80[32 * v76 + 18]) == -1)
        goto LABEL_35;
      v28 = *v70;
      if (v28 >= 1)
      {
        v29 = 0;
        v30 = *(_QWORD *)v19;
        while ((v30 & 0x80000000) != 0)
        {
LABEL_30:
          if (++v29 >= (__int16)v28)
            goto LABEL_31;
        }
        v31 = -1;
        while (1)
        {
          v32 = (*(_BYTE *)(v17 + 8) & 0x10) != 0 ? f_getc_txt(v17) : f_getc_bin(v17);
          if (v32 == -1)
            break;
          *v24++ = v32;
          v30 = *(_QWORD *)v19;
          if (++v31 >= (int)*(_QWORD *)v19)
          {
            LOWORD(v28) = *v70;
            v27 = v76;
            goto LABEL_30;
          }
        }
LABEL_35:
        v38 = -204;
LABEL_36:
        v71 = v38;
        v36 = 1;
        break;
      }
LABEL_31:
      v21 = v72;
      v33 = (_DWORD)v24 - (_DWORD)v72;
      v34 = (int)v24 - (int)v72;
      v35 = malloc_type_calloc(v33, 1uLL, 0xDB3F85FCuLL);
      *(_QWORD *)v73 = v35;
      if (!v35)
      {
        v38 = -501;
        goto LABEL_36;
      }
      memcpy(v35, v72, v34);
      v36 = 0;
      v71 = 0;
      v23 = v27 + 1;
      if (v23 < *(int *)v15)
        continue;
      break;
    }
  }
  v68 = v13;
  v69 = v36;
  v66 = a3;
  v67 = v18;
  *(_QWORD *)(v80 + 20) = -1;
  if ((int)*v15 > 1)
  {
    v75 = v17;
    v77 = *v15;
    v39 = 1;
    do
    {
      v40 = (unsigned __int8 **)&v80[32 * v39];
      if (*((unsigned __int16 *)v40 + 8) == *((unsigned __int16 *)v40 + 9))
      {
        *(unsigned __int8 **)((char *)v40 + 20) = (unsigned __int8 *)-1;
      }
      else
      {
        v74 = (_DWORD *)v40 + 5;
        v42 = *v40;
        v41 = (int *)(v40 + 3);
        v44 = v42 + 1;
        v43 = *v42;
        v45 = v39;
        do
        {
          LODWORD(v46) = 0;
          v47 = (v45 - 1);
          v48 = *(unsigned __int8 **)&v80[32 * v47];
          if (v43 && v43 == *v48)
          {
            v46 = 0;
            do
            {
              v49 = v44[v46];
              v50 = v48[++v46];
              if (v49)
                v51 = v49 == v50;
              else
                v51 = 0;
            }
            while (v51);
          }
          v52 = strlen(*(const char **)&v80[32 * v47]);
          v53 = *(__int16 *)&v80[32 * v47 + 16];
          while (1)
          {
            v54 = __OFSUB__(v53--, 1);
            if (v53 < 0 != v54)
              break;
            if ((int)v46 >= v48[v52 + 1 + v53 + v53 * *v19])
            {
              *v74 = v45 - 1;
              *v41 = v53;
              v17 = v75;
              goto LABEL_59;
            }
          }
          v55 = v45-- <= 1;
          v17 = v75;
        }
        while (!v55);
      }
LABEL_59:
      ++v39;
    }
    while (v39 != v77);
  }
  free(v72);
  f_close(v17);
  v37 = v71;
  if ((v69 & 1) == 0)
  {
    v56 = *((_DWORD *)v68 + 16);
    v57 = *((_DWORD *)v68 + 8);
    if (!v56 || v56 > v57)
    {
      *((_DWORD *)v68 + 16) = v57;
      v56 = v57;
    }
    v58 = malloc_type_calloc(16 * v56, 1uLL, 0xD2563ABCuLL);
    *v79 = v58;
    if (v58)
    {
      v59 = open(v78, 0, 511);
      if (v59 != -1)
      {
        v60 = v59;
        if (lseek(v59, v66, 0) == -1)
          return 4294967090;
        if (*((int *)v68 + 16) < 1)
        {
LABEL_76:
          v37 = 0;
        }
        else
        {
          v61 = 0;
          v62 = (int *)(v68[2] + 8);
          while (1)
          {
            if (*((_DWORD *)v68 + 17))
              v63 = v61;
            else
              v63 = -1;
            *v62 = v63;
            v64 = malloc_type_calloc(*((int *)v68 + 10), 1uLL, 0x89D1548BuLL);
            *((_QWORD *)v62 - 1) = v64;
            if (!v64)
            {
              v37 = 4294966795;
              goto LABEL_82;
            }
            if (*((_DWORD *)v68 + 17) && read(v60, v64, *v67) == -1)
              break;
            ++v61;
            v62 += 4;
            if (v61 >= *((int *)v68 + 16))
              goto LABEL_76;
          }
          v37 = 4294967092;
        }
LABEL_82:
        close(v60);
        return v37;
      }
      return 4294967094;
    }
    return 4294966795;
  }
  return v37;
}

void db_finish(int *a1)
{
  void **v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;

  if (a1)
  {
    v2 = (void **)*((_QWORD *)a1 + 2);
    if (v2 && a1[16] >= 1)
    {
      v3 = 0;
      do
      {
        if (!*v2)
          break;
        free(*v2);
        ++v3;
        v2 += 2;
      }
      while (v3 < a1[16]);
    }
    v4 = (void **)*((_QWORD *)a1 + 3);
    if (v4)
    {
      if (a1[8] >= 1)
      {
        v5 = 0;
        do
        {
          if (!*v4)
            break;
          free(*v4);
          ++v5;
          v4 += 4;
        }
        while (v5 < a1[8]);
        v4 = (void **)*((_QWORD *)a1 + 3);
      }
      free(v4);
    }
    v6 = (void *)*((_QWORD *)a1 + 2);
    if (v6)
      free(v6);
    free(a1);
  }
}

uint64_t db_search(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  int v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  int v24;
  size_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int *v40;
  int v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  int v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v59;
  uint64_t v60;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 32);
  v7 = v6 - 1;
  if (v6 >= 1)
  {
    v8 = 0;
    do
    {
      if (v7 + v8 < 0 != __OFADD__(v7, v8))
        v9 = v7 + v8 + 1;
      else
        v9 = v7 + v8;
      v10 = v9 >> 1;
      v11 = SLstrcmp(a2, *(unsigned __int8 **)(v5 + 32 * (v9 >> 1)));
      if (v11 < 0)
      {
        v7 = v10 - 1;
      }
      else
      {
        if (!v11)
        {
          v12 = (uint64_t)v9 >> 1;
          v7 = v9 >> 1;
          goto LABEL_15;
        }
        v8 = v10 + 1;
      }
    }
    while (v7 >= v8);
  }
  if (v7 == -1)
    return 0;
  v12 = v7;
LABEL_15:
  LODWORD(v14) = 0;
  v15 = v5 + 32 * v12;
  v16 = *(_QWORD *)(a1 + 48);
  v17 = *(const char **)v15;
  if (*a2 && *a2 == *v17)
  {
    v14 = 0;
    do
    {
      v18 = a2[v14 + 1];
      v19 = v17[++v14];
      if (v18)
        v20 = v18 == v19;
      else
        v20 = 0;
    }
    while (v20);
  }
  v55 = a2;
  v56 = a1;
  v53 = *(_QWORD *)(v15 + 8);
  v54 = v7 % *(_DWORD *)(a1 + 64);
  v21 = *(__int16 *)(v15 + 18);
  v52 = *(_QWORD *)(a1 + 48);
  if (v21 < 1)
  {
    v60 = 0;
  }
  else
  {
    v22 = (unsigned __int16)v21 - 1;
    v23 = *(__int16 *)(v5 + 32 * v12 + 16);
    v24 = strlen(v17);
    v59 = v17;
    v60 = 0;
    v25 = (size_t)&v17[v24 + 1];
    v57 = (int)v16 + 1;
    v26 = v16 + 1;
    v27 = v17 + 1;
    LODWORD(v16) = v24;
    LODWORD(v28) = v7;
    do
    {
      if (v23 <= 0)
      {
        v29 = v5 + 32 * (int)v28;
        v28 = *(int *)(v29 + 20);
        v30 = *(_BYTE **)(v5 + 32 * v28);
        if (*v30)
          v31 = *v30 == *v59;
        else
          v31 = 0;
        if (v31)
        {
          v16 = 0;
          do
          {
            v32 = v30[v16 + 1];
            v33 = v27[v16++];
            if (v32)
              v34 = v32 == v33;
            else
              v34 = 0;
          }
          while (v34);
        }
        else
        {
          LODWORD(v16) = 0;
        }
        v23 = *(_DWORD *)(v29 + 24);
        v25 = (size_t)&v30[strlen(*(const char **)(v5 + 32 * v28)) + 1];
      }
      else
      {
        --v23;
      }
      v35 = (char *)(v25 + v23 * v26);
      v36 = (unsigned __int16)*v35;
      if (v36 <= (int)v16)
      {
        if (v36 <= (int)v14)
        {
          if (v22 >= (int)v60)
            v37 = (v22 + 1);
          else
            v37 = v60;
          v60 = v37;
          memcpy((void *)(a3 + v22 * v57), v35, (int)v57);
        }
        --v22;
      }
    }
    while ((v22 & 0x80000000) == 0);
  }
  v38 = *(_QWORD *)(v56 + 16) + 16 * v54;
  v39 = *(unsigned __int8 **)v38;
  v41 = *(_DWORD *)(v38 + 8);
  v40 = (int *)(v38 + 8);
  if (v7 != v41)
  {
    *v40 = -1;
    if (lseek(*(_DWORD *)v56, *(int *)(v56 + 8) + v53, 0) == -1)
      return 4294967090;
    if (read(*(_DWORD *)v56, v39, *(unsigned int *)(v56 + 40)) == -1)
      return 4294967092;
    *v40 = v7;
  }
  v42 = *(_QWORD *)(v56 + 40);
  if (v42 << 32 >= 1)
  {
    v43 = &v39[(int)v42];
    if ((int)v14 >= v39[1])
      LODWORD(v14) = v39[1];
    v44 = v14;
    v13 = v60;
    while (1)
    {
      v45 = *v39;
      if ((_DWORD)v45 == 255)
        return v13;
      v46 = v39[1];
      if ((int)v14 > (int)v46)
        return v13;
      v47 = v39 + 2;
      if (v44 >= (int)v46)
        break;
      v39 = &v47[(int)v45 + (int)v52 - (int)v46];
LABEL_73:
      if (v39 >= v43)
        return v13;
    }
    if (v46 >= v45)
    {
LABEL_67:
      if ((int)v46 > (int)v14)
        LODWORD(v14) = v46;
      if ((_DWORD)v46 != (_DWORD)v45)
      {
LABEL_72:
        v39 = &v47[(int)v52];
        v44 = v46;
        goto LABEL_73;
      }
    }
    else
    {
      v48 = 0;
      v49 = v39[1];
      do
      {
        if (v55[v46 + v48] != (((v47[v48] ^ 0x5C) >> 4) | (16 * (v47[v48] ^ 0x5C))))
        {
          LODWORD(v46) = v46 + v48;
          v47 = &v39[v45 - v49 + 2 + v48];
          goto LABEL_67;
        }
        ++v48;
        ++v49;
      }
      while (v46 - v45 + v48);
      if ((int)v45 > (int)v14)
        LODWORD(v14) = *v39;
      v47 += v48;
      LODWORD(v46) = *v39;
    }
    if ((_DWORD)v13 == *(_DWORD *)(v56 + 56))
      return 4294966776;
    v50 = (int)v13 * ((int)v52 + 1);
    *(_BYTE *)(a3 + v50) = v45;
    memcpy((void *)(a3 + (int)v50 + 1), v47, (int)v52);
    v13 = (v13 + 1);
    goto LABEL_72;
  }
  return v60;
}

uint64_t db_get_embmax(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t db_get_infosize(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t mt_init(_QWORD *a1, _QWORD *a2, const char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  int v19;
  BOOL v20;
  int v21;
  int v22;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  char v26;
  uint64_t v27;

  *a1 = 0;
  *a2 = 0;
  v7 = f_open(a3, 1);
  if (!v7)
    return 4294966994;
  v8 = v7;
  if (f_seek(v7, a4, 0) == -1)
  {
    v27 = 4294966990;
  }
  else
  {
    v9 = 1;
    do
    {
      if ((v9 & 1) != 0)
        v10 = a1;
      else
        v10 = a2;
      if ((*(_BYTE *)(v8 + 8) & 0x10) != 0)
        v11 = f_getc_txt(v8);
      else
        v11 = f_getc_bin(v8);
      v12 = v11;
      if (v11 == -1
        || ((*(_BYTE *)(v8 + 8) & 0x10) != 0 ? (v13 = f_getc_txt(v8)) : (v13 = f_getc_bin(v8)),
            (v14 = v13, v13 == -1)
         || ((*(_BYTE *)(v8 + 8) & 0x10) != 0 ? (v15 = f_getc_txt(v8)) : (v15 = f_getc_bin(v8)),
             (v16 = v15, v15 == -1)
          || ((*(_BYTE *)(v8 + 8) & 0x10) != 0 ? (v17 = f_getc_txt(v8)) : (v17 = f_getc_bin(v8)), v18 = v17, v17 == -1))))
      {
        v27 = 4294966992;
        goto LABEL_34;
      }
      v19 = v14 - v12 + 1 + (v14 - v12 + 1) * (v17 - v16);
      v21 = v19 + 7;
      v20 = v19 < -7;
      v22 = v19 + 14;
      if (!v20)
        v22 = v21;
      v23 = (uint64_t)v22 >> 3;
      v24 = malloc_type_calloc(v23 + 4, 1uLL, 0xFCCACF08uLL);
      *v10 = v24;
      if (!v24)
      {
        v27 = 4294965495;
        goto LABEL_34;
      }
      *v24 = v12;
      v24[1] = v14;
      v24[2] = v16;
      v24[3] = v18;
      v25 = f_read(v24 + 4, v23, 1, v8);
      v26 = (v25 == 1) & v9;
      v9 = 0;
    }
    while ((v26 & 1) != 0);
    if (v25 == 1)
      v27 = 0;
    else
      v27 = 4294966992;
  }
LABEL_34:
  f_close(v8);
  return v27;
}

void mt_finish(void *a1, void *a2)
{
  if (a1)
    free(a1);
  if (a2)
    free(a2);
}

uint64_t mt_match(char *a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;

  v3 = *a1;
  if (v3 > a2)
    return 0;
  v4 = a1[1];
  if (v4 < a2)
    return 0;
  v5 = a1[2];
  if (v5 > a3 || a1[3] < a3)
    return 0;
  v7 = a2 - v3;
  v8 = a3 - v5 + (a3 - v5) * (v4 - v3);
  v9 = __OFADD__(v8, v7);
  v10 = v8 + v7;
  v11 = v10 + 7;
  if (v10 < 0 == v9)
    v11 = v10;
  return (a1[(v11 >> 3) + 4] >> (v10 & 7)) & 1;
}

uint64_t roman2int(unsigned __int8 *a1)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;

  v1 = 0;
  v2 = 0;
  do
  {
    v2 += fsa[10 * v1 + 9];
    if (v2 > 10999)
      return 0xFFFFFFFFLL;
    v3 = *a1;
    if (v3 == 46)
    {
      LOBYTE(v3) = a1[1] ? 46 : 0;
      if (!a1[1])
        ++a1;
    }
    if ((char)v3 > 85)
    {
      if ((char)v3 == 86)
      {
        v5 = 5;
      }
      else if ((char)v3 == 88)
      {
        v5 = 4;
      }
      else
      {
LABEL_16:
        v5 = 8;
      }
    }
    else
    {
      v4 = (char)v3 - 67;
      v5 = 0;
      switch(v4)
      {
        case 0:
          v5 = 2;
          break;
        case 1:
          v5 = 1;
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
        case 8:
          goto LABEL_16;
        case 6:
          v5 = 6;
          break;
        case 9:
          v5 = 3;
          break;
        case 10:
          break;
        default:
          v5 = 7;
          break;
      }
    }
    ++a1;
    v1 = fsa[10 * v1 + v5];
  }
  while ((int)v1 > 0);
  if (v1 == 0xFFFFFFFFLL)
    return 0xFFFFFFFFLL;
  else
    return v2;
}

uint64_t spell_init(_QWORD *a1, uint64_t a2, const char *a3, __int128 *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  int he_language;
  uint64_t result;
  int v12;
  __int128 v13;
  uint64_t v14;

  v13 = *a4;
  v14 = *((_QWORD *)a4 + 2);
  v7 = malloc_type_calloc(0x18uLL, 1uLL, 0x40CCC7CDuLL);
  *a1 = v7;
  if (!v7)
    return 4294966495;
  v8 = v7;
  *v7 = a2;
  v7[2] = 0;
  v7[1] = 0;
  v9 = v7 + 1;
  he_language = get_he_language(a2);
  result = an_init(v9, a3, (int *)&v13, he_language);
  if ((result & 0x80000000) == 0)
  {
    v12 = freq_init(v8 + 2, a2);
    return v12 & (v12 >> 31);
  }
  return result;
}

uint64_t spell_finish(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  if (a1)
  {
    v2 = a1[1];
    if (v2)
      an_finish(v2);
    v3 = (void *)a1[2];
    if (v3)
      freq_finish(v3);
    free(a1);
  }
  return 0;
}

uint64_t spell_check(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  BOOL v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  BOOL v41;
  char v42;
  int v43;
  char v44;
  int v45;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char status;
  int v58;
  int v59;
  int v60;
  uint64_t *v61;
  unsigned __int8 *v62;
  int v63;
  char *v64;
  int *v65;
  char v66;
  char v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  _BYTE *v71;
  int *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int *v76;
  char *v77;
  char v78;
  char v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _BYTE __b[65];
  char v86;
  _BYTE v87[65];
  _DWORD __src[65];
  _BYTE __dst[260];
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  LODWORD(v2) = *((_DWORD *)a2 + 6);
  if ((int)v2 > 64)
    return 4294966486;
  v5 = (uint64_t *)a1;
  v6 = *(_QWORD *)a1;
  v7 = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 8) = 0;
  *((_DWORD *)a2 + 9) = v2;
  v8 = *a2;
  if (a2[1])
    v9 = v7;
  else
    v9 = v7 & 0xFFFFFFFB;
  if ((v9 & 4) != 0 && (int)v2 >= 1)
  {
    v10 = 0;
    do
    {
      *(_BYTE *)(a2[1] + v10++) = 32;
      v2 = *((int *)a2 + 9);
    }
    while (v10 < v2);
    v7 = *((_DWORD *)a2 + 7);
  }
  *((_DWORD *)a2 + 14) = 0;
  if ((v7 & 1) != 0)
  {
    v11 = *(_BYTE *)(v8 + (int)v2);
    *(_BYTE *)(v8 + (int)v2) = 0;
    v12 = is_frequent_word(*(int **)(a1 + 16), (_BYTE *)(v8 + *((int *)a2 + 8)));
    *(_BYTE *)(v8 + *((int *)a2 + 9)) = v11;
    if (v12 > 0)
      return 1;
    LODWORD(v2) = *((_DWORD *)a2 + 9);
  }
  v13 = *((_DWORD *)a2 + 8);
  if (v13 >= (int)v2)
  {
LABEL_136:
    v45 = 1;
    v3 = 1;
    goto LABEL_137;
  }
  v83 = v9;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (unsigned __int8 *)&v86;
  v20 = v6 + 1024;
  v84 = v6;
  v21 = v6 + 512;
  v22 = (unsigned __int8 *)(v8 + v13);
  v23 = (int)v2 - (uint64_t)v13;
  v24 = 1;
  while (2)
  {
    v25 = *v22++;
    v26 = *(_QWORD *)(v20 + 8 * v25);
    __src[v14] = v13;
    switch(v24)
    {
      case 0u:
        goto LABEL_82;
      case 1u:
        if ((v26 & 1) != 0)
          goto LABEL_108;
        if ((v26 & 0x1000) != 0)
        {
          if ((*(_QWORD *)(v20 + 8 * *(unsigned __int8 *)(v84 + 813)) & 0x2000) != 0)
            v24 = 7;
          else
            v24 = 4;
          goto LABEL_109;
        }
        if ((v26 & 0x6000) != 0)
        {
          v24 = 8;
          goto LABEL_109;
        }
        if ((v26 & 0x20) != 0)
          goto LABEL_55;
        if ((v26 & 0x400000) != 0)
          goto LABEL_67;
        if ((v26 & 0x1800000) != 0)
          goto LABEL_112;
        if ((v26 & 0x200) != 0)
          goto LABEL_90;
        if ((v26 & 0xE00) != 0)
          v24 = 7;
        else
          v24 = 0;
        goto LABEL_109;
      case 2u:
        if ((v26 & 1) != 0)
          goto LABEL_108;
        if ((v26 & 0x20) != 0)
          goto LABEL_55;
        if ((v26 & 0x100) != 0)
          goto LABEL_90;
        if ((v26 & 0x2000000) != 0)
        {
LABEL_57:
          v24 = 12;
          goto LABEL_109;
        }
        if ((v26 & 0x40) != 0)
          goto LABEL_65;
        if ((v26 & 0x1000) != 0)
        {
LABEL_66:
          v17 = 1;
LABEL_67:
          v24 = 4;
          goto LABEL_109;
        }
        if ((v26 & 0x428800) != 0)
          goto LABEL_67;
        if ((v26 & 0x80000) == 0 || (v26 & 0x600000) == 0)
          v24 = 0;
        else
          v24 = 10;
LABEL_109:
        ++v14;
LABEL_110:
        ++v13;
        if (--v23)
          continue;
        if (!v18)
          goto LABEL_136;
        if (v24 == 9 || !v24)
        {
          *((_DWORD *)a2 + 14) = 2;
          goto LABEL_117;
        }
        a2[5] = 0;
        a2[6] = 0;
        if (v14 < 1)
        {
          v86 = 0;
          v53 = v84;
          v60 = v83;
          goto LABEL_171;
        }
        v47 = 0;
        v48 = 0;
        v49 = 0;
        v50 = 0;
        v51 = 0;
        v52 = v14;
        v53 = v84;
        break;
      case 3u:
        if ((v26 & 0x1000) != 0)
          goto LABEL_66;
        goto LABEL_59;
      case 4u:
        if ((v26 & 1) == 0)
        {
          if ((v26 & 0x40) != 0)
            goto LABEL_65;
          if ((v26 & 0x20) != 0)
            v24 = 5;
          else
            v24 = 0;
          goto LABEL_109;
        }
        v24 = 2;
        if (!(_DWORD)v17 || v15 || v18)
        {
          v18 = 1;
          goto LABEL_109;
        }
        if (v14 < 1)
        {
          v14 = 0;
        }
        else
        {
          v81 = v5;
          v82 = v8;
          v29 = v19;
          v30 = v21;
          v31 = v17;
          v32 = v16;
          memcpy(__dst, __src, 4 * v14);
          v16 = v32;
          v17 = v31;
          v21 = v30;
          v19 = v29;
          v5 = v81;
          v8 = v82;
        }
        __src[0] = v13;
        v18 = 1;
        v24 = 2;
        v15 = v14;
        v14 = 1;
        goto LABEL_110;
      case 5u:
        if ((v26 & 0x20) != 0)
          goto LABEL_55;
        if ((v26 & 0x1000) != 0)
          goto LABEL_66;
        if ((v26 & 0x100) != 0)
        {
          v16 = 1;
LABEL_90:
          v24 = 6;
          goto LABEL_109;
        }
        if ((v26 & 0xE00) != 0)
        {
          v24 = 7;
          goto LABEL_109;
        }
        if ((v26 & 0x40) != 0)
          goto LABEL_65;
        if ((v26 & 0x1000000) != 0)
        {
LABEL_112:
          v24 = 3;
        }
        else
        {
          if ((v26 & 1) != 0)
            goto LABEL_108;
          v24 = (v26 >> 20) & 4;
        }
        goto LABEL_109;
      case 6u:
        if ((v26 & 0x100) != 0)
        {
          v24 = 9;
          goto LABEL_109;
        }
        if ((v26 & 0x40) != 0)
          goto LABEL_65;
        if ((v26 & 0x1000) != 0)
        {
          if ((_DWORD)v16)
            v17 = 1;
          else
            v17 = v17;
          v24 = 4;
          ++v14;
          v16 = 0;
          goto LABEL_110;
        }
        if ((v26 & 1) != 0)
        {
LABEL_108:
          v18 = 1;
          v24 = 2;
        }
        else
        {
          if ((*(_QWORD *)(v20 + 8 * *(unsigned __int8 *)(v84 + 814)) & 0x600) == 0)
            goto LABEL_76;
LABEL_52:
          if ((v26 & 0x20) == 0)
          {
            v28 = (v26 & 1) == 0;
            v24 = 2 * (v26 & 1);
            goto LABEL_83;
          }
LABEL_55:
          v24 = 5;
        }
        goto LABEL_109;
      case 7u:
        goto LABEL_52;
      case 8u:
        if ((v26 & 0x20) != 0)
          goto LABEL_55;
        goto LABEL_82;
      case 9u:
        if ((v26 & 0x100) != 0)
          goto LABEL_57;
        goto LABEL_82;
      case 0xAu:
        if ((v26 & 0x1000) != 0)
        {
          --v14;
          v24 = 4;
          goto LABEL_110;
        }
LABEL_59:
        if ((v26 & 0x40) != 0)
          goto LABEL_65;
LABEL_82:
        v24 = 0;
        v28 = (v26 & 1) == 0;
LABEL_83:
        if (!v28)
          v18 = 1;
        goto LABEL_109;
      case 0xBu:
        if ((v26 & 1) != 0)
        {
          v18 = 1;
        }
        else if ((v26 & 0x180) == 0x80)
        {
LABEL_65:
          v24 = 11;
          goto LABEL_109;
        }
LABEL_76:
        v24 = 0;
        goto LABEL_109;
      case 0xCu:
        if ((v26 & 0x140) == 0x40)
          goto LABEL_65;
        if ((v26 & 0x600000) == 0 || (v26 & 0x80000) == 0)
          goto LABEL_82;
        v24 = 10;
        goto LABEL_109;
      default:
        goto LABEL_109;
    }
    break;
  }
  do
  {
    v54 = *(unsigned __int8 *)(v8 + (int)__src[v51]);
    v55 = *(_QWORD *)(v20 + 8 * v54);
    v56 = *(unsigned __int8 *)(v21 + v54);
    v19[v51] = v56;
    if (v56 == 18 || v56 == 17)
    {
      v19[v51] = 45;
      if ((v55 & 2) == 0)
        goto LABEL_146;
    }
    else
    {
      if (!v56)
        *((_DWORD *)a2 + 10) = ++v50;
      if ((v55 & 2) == 0)
      {
LABEL_146:
        if ((v55 & 4) != 0)
          *((_DWORD *)a2 + 13) = ++v47;
        goto LABEL_152;
      }
    }
    if (!v51)
      *((_DWORD *)a2 + 11) = ++v49;
    *((_DWORD *)a2 + 12) = ++v48;
LABEL_152:
    ++v51;
  }
  while (v14 != v51);
  v19[v14] = 0;
  if (v50 > 0)
  {
    v3 = 0;
    v45 = 16;
    goto LABEL_137;
  }
  v60 = v83;
  if ((v83 & 4) == 0)
  {
LABEL_171:
    if (!v15)
    {
      v3 = check_word(v5, v53, v19, (uint64_t)__b, v14, v60);
      goto LABEL_184;
    }
    goto LABEL_172;
  }
  v61 = v5;
  v62 = v19;
  v63 = v15;
  memset(__b, 32, v14);
  v15 = v63;
  v19 = v62;
  v5 = v61;
  if (!v63)
  {
    v64 = __b;
    v3 = check_word(v5, v84, v19, (uint64_t)__b, v14, v83);
    v65 = __src;
    do
    {
      v67 = *v64++;
      v66 = v67;
      v68 = *v65++;
      *(_BYTE *)(a2[1] + v68) = v66;
      --v52;
    }
    while (v52);
    goto LABEL_184;
  }
LABEL_172:
  v69 = *(_DWORD *)(v53 + 3524);
  if (v69 != 21 && v69 != 14)
    goto LABEL_117;
  if (v15 < 1)
  {
    v74 = 0;
  }
  else
  {
    v70 = v15;
    v71 = v87;
    v72 = (int *)__dst;
    do
    {
      v73 = *v72++;
      *v71++ = *(_BYTE *)(v8 + v73);
      --v70;
    }
    while (v70);
    v74 = v15;
  }
  v87[v74] = 0;
  v3 = check_mac((uint64_t)v5, v53, v19, (uint64_t)__b, v14, (uint64_t)v87, v15, v60);
  if ((v60 & 4) != 0 && v14 >= 1)
  {
    v75 = v14;
    v76 = __src;
    v77 = __b;
    do
    {
      v79 = *v77++;
      v78 = v79;
      v80 = *v76++;
      *(_BYTE *)(a2[1] + v80) = v78;
      --v75;
    }
    while (v75);
  }
LABEL_184:
  if (!(_DWORD)v3)
  {
LABEL_117:
    if ((*((_BYTE *)a2 + 28) & 2) == 0)
      goto LABEL_188;
    v34 = *((int *)a2 + 9);
    v35 = *(_BYTE *)(v8 + v34);
    *(_BYTE *)(v8 + v34) = 0;
    v36 = roman2int((unsigned __int8 *)(v8 + *((int *)a2 + 8)));
    v3 = v36 > 0;
    if (v36 <= 0)
    {
      *(_BYTE *)(v8 + *((int *)a2 + 9)) = v35;
      v37 = *((_DWORD *)a2 + 9);
      v38 = *((int *)a2 + 8);
      if ((int)v38 + 1 < v37 - 1)
      {
        v39 = v38 + 1;
        do
        {
          v40 = *(unsigned __int8 *)(*a2 + v39);
          v41 = v40 > 0x2D || ((1 << v40) & 0x200000060000) == 0;
          if (!v41 || v40 == 196)
          {
            v42 = *(_BYTE *)(v8 + v39);
            *(_BYTE *)(v8 + v39) = 0;
            v43 = roman2int((unsigned __int8 *)(v8 + *((int *)a2 + 8)));
            *(_BYTE *)(v8 + v39) = v42;
            v37 = *((_DWORD *)a2 + 9);
            if (v43)
            {
              v44 = *(_BYTE *)(v8 + v37);
              *(_BYTE *)(v8 + v37) = 0;
              if ((int)roman2int((unsigned __int8 *)(v8 + v39 + 1)) <= 0)
                v3 = v3;
              else
                v3 = (v3 + 1);
              *(_BYTE *)(v8 + *((int *)a2 + 9)) = v44;
              v37 = *((_DWORD *)a2 + 9);
            }
          }
          ++v39;
        }
        while (v39 < v37 - 1);
      }
    }
    if (!(_DWORD)v3)
    {
LABEL_188:
      if (*((_DWORD *)a2 + 14))
      {
        return 0;
      }
      else
      {
        status = an_get_status(v5[1]);
        if ((status & 4) != 0)
          v58 = 128;
        else
          v58 = 8;
        if ((status & 2) != 0)
          v59 = 64;
        else
          v59 = v58;
        if ((status & 1) != 0)
          v45 = 32;
        else
          v45 = v59;
        v3 = 0;
LABEL_137:
        *((_DWORD *)a2 + 14) = v45;
      }
    }
  }
  return v3;
}

uint64_t check_word(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  char v17;
  unsigned int v18;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;

  v12 = (a5 - 2);
  if (a5 >= 2 && *(_DWORD *)(a2 + 3524) == 14)
  {
    v13 = (a5 - 1);
    v14 = a3[v13];
    v15 = v14 > 0x2D || ((1 << v14) & 0x200000060000) == 0;
    if (!v15 || v14 == 196)
    {
      v16 = check__words((uint64_t)a1, a2, a3, a4, a5 - 1, a6);
      if ((_DWORD)v16)
      {
        v17 = 32;
        goto LABEL_11;
      }
    }
    if (a5 >= 3)
    {
      if ((v18 = a3[v12], v18 <= 0x2D) && ((1 << v18) & 0x200000060000) != 0 || v18 == 196)
      {
        if (a3[v13] == 101)
        {
          v16 = check__words((uint64_t)a1, a2, a3, a4, v12, a6);
          if ((_DWORD)v16)
          {
            v17 = 32;
            *(_BYTE *)(a4 + v13) = 32;
            v13 = v12;
            goto LABEL_11;
          }
        }
      }
    }
  }
  v13 = check__words((uint64_t)a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a2 + 3524) == 21 && (a6 & 0x400 | v13) == 0)
  {
    v21 = *a1;
    v22 = a5 - 3;
    if (a5 < 3)
    {
      v13 = 0;
      if (a5 != 2)
        return v13;
      v23 = 1;
      v16 = 0;
    }
    else
    {
      v23 = (a5 - 1);
      if (a3[v23] == 105 && a3[v12] == 108)
      {
        v16 = check__words((uint64_t)a1, *a1, a3, a4, v12, a6 + 0x4000);
        v22 = a5 - 3;
        LODWORD(v13) = v12;
      }
      else
      {
        LODWORD(v13) = 0;
        v16 = 0;
      }
    }
    v24 = a3[v23];
    if (v24 == 152)
    {
      if ((*(_QWORD *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[v12] + 768) + 1024) & 8) == 0)
      {
LABEL_38:
        v27 = a5 - 4;
        if (a5 >= 4)
        {
          if (a3[v23] == 121
            && a3[v12] == 109
            && a3[v22] == 152
            && (*(_QWORD *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[v27] + 768) + 1024) & 8) != 0)
          {
            v28 = v22;
            v16 = check__words((uint64_t)a1, v21, a3, a4, v22, a6 + 4096);
            v22 = v28;
          }
          if (a5 >= 5
            && a3[v23] == 101
            && a3[v12] == 105
            && a3[v22] == 99
            && a3[v27] == 152
            && (*(_QWORD *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[a5 - 5] + 768) + 1024) & 8) != 0)
          {
            v16 = check__words((uint64_t)a1, v21, a3, a4, a5 - 4, a6 + 4096);
          }
        }
        if (!(_DWORD)v16)
          return 0;
        if (!(_DWORD)v13)
          return v16;
        v13 = v13;
        v17 = 124;
LABEL_11:
        *(_BYTE *)(a4 + v13) = v17;
        return v16;
      }
      v25 = v22;
      v16 = check__words((uint64_t)a1, v21, a3, a4, v23, a6 + 4096);
      v22 = v25;
      v24 = a3[v23];
    }
    if (v24 == 109
      && (*(_QWORD *)(v21 + 8 * *(unsigned __int8 *)(v21 + a3[v12] + 768) + 1024) & 8) != 0)
    {
      v26 = v22;
      v16 = check__words((uint64_t)a1, v21, a3, a4, v23, a6 + 4096);
      v22 = v26;
    }
    goto LABEL_38;
  }
  return v13;
}

uint64_t check_mac(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  BOOL v27;
  BOOL v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  const char *v53;
  const char *v54;
  int v55;
  BOOL v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  uint64_t v78;
  int v79;
  const char *v80;
  void *v81;
  BOOL v82;
  char v83;
  const char *v84;
  int v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  char v93;
  const char *v94;
  char v95;
  char v96;
  const char *v97;
  const char *v98;
  const char *v99;
  char v100;
  int v101;
  int v102;
  unsigned __int8 *v103;
  char *__sa;
  char *__sb;
  unsigned __int8 v110[40];
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v11 = a7 - 2;
  v12 = *(unsigned __int8 *)(a6 + v11);
  v13 = *(_QWORD *)(a2 + 8 * *(unsigned __int8 *)(a6 + v11) + 1024);
  if ((v13 & 0x1800000) != 0)
  {
    v14 = 0;
    v15 = 0;
    v16 = (unsigned __int8 *)(a2 + 3084);
    while (v14 < *(int *)(a2 + 3072))
    {
      if (*(unsigned __int8 *)(a2 + 28 * v14 + 3076) == v12)
      {
        v17 = *(int *)(a2 + 28 * v14 + 3080);
        v18 = *(unsigned int *)(a2 + 28 * v14 + 3080);
        v19 = v17;
        if ((int)v17 > 0)
        {
          v20 = -v18;
          v21 = v16;
          do
          {
            v22 = *v21++;
            a3[v20] = *(_BYTE *)(a2 + v22 + 512);
          }
          while (!__CFADD__(v20++, 1));
          v19 = v18;
        }
        v24 = a3;
        v25 = &a3[-v19];
        v26 = an_analyze(*(_QWORD *)(a1 + 8), v25, (int)v18 + a5, a8, (uint64_t)v110, 1);
        v27 = v26 == 0;
        if (v26)
          v15 = 1;
        else
          v15 = v15;
        if (v26)
          v28 = (a8 & 4) == 0;
        else
          v28 = 1;
        if (!v28)
        {
          v38 = a4 - v19;
          v39 = a1;
          v40 = a2;
          v41 = v25;
          v42 = v17;
          goto LABEL_37;
        }
        a3 = v24;
      }
      else
      {
        v27 = 1;
      }
      ++v14;
      v16 += 28;
      if (!v27)
        return v15;
    }
    return v15;
  }
  v29 = *(_DWORD *)(a2 + 3524);
  if (v29 == 14)
  {
    v30 = a7 - 1;
    v31 = *(_QWORD *)(a2 + 8 * *(unsigned __int8 *)(a6 + v11) + 1024) & 0x100;
    if ((v13 & 0x100) != 0)
      v11 = v11;
    else
      v11 = v30;
    v32 = v31 >> 8;
    v103 = a3;
    if ((int)v11 < 1)
    {
      v37 = 0;
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = "nulladik";
      v48 = "null\xA0";
      v49 = 1;
      v50 = 1;
LABEL_89:
      v52 = 1;
      v53 = "nulla";
LABEL_90:
      if ((_DWORD)v32 == 1)
      {
        v15 = 0;
        v64 = 0;
        LODWORD(v32) = 1;
        goto LABEL_116;
      }
      v93 = v52;
      v94 = v46;
      v95 = v50;
      v97 = v47;
      v98 = v45;
      v100 = v49;
      __sa = (char *)v37;
      v101 = v32;
      v65 = strlen(v53);
      v66 = (v65 - is_small_digraph_hun((uint64_t)v53, v65, v103, a5));
      memcpy(&v103[-(int)v66], v53, (int)v66);
      v67 = an_analyze(*(_QWORD *)(a1 + 8), &v103[-(int)v66], (int)v66 + a5, 2048, (uint64_t)v110, 1);
      if (!v67)
      {
        if ((v44 & 1) != 0)
        {
          v15 = 0;
          v64 = 0;
          v56 = 1;
        }
        else
        {
          v68 = strlen(v48);
          v69 = (v68 - is_small_digraph_hun((uint64_t)v48, v68, v103, a5));
          memcpy(&v103[-(int)v69], v48, (int)v69);
          v56 = 1;
          if (an_analyze(*(_QWORD *)(a1 + 8), &v103[-(int)v69], (int)v69 + a5, 2048, (uint64_t)v110, 1))
          {
            if ((a8 & 4) != 0)
            {
              v43 = segm_word(a1, a2, &v103[-(int)v69], a4 - (int)v69, v110, 0, v69);
              v49 = v100;
              a3 = v103;
              if ((v43 & 0x80000000) != 0)
                return v43;
              v15 = 1;
              v64 = 1;
              LODWORD(v32) = v101;
              v37 = __sa;
              goto LABEL_160;
            }
            v15 = 1;
            v64 = 1;
            LODWORD(v32) = v101;
            v37 = __sa;
            v49 = v100;
LABEL_159:
            a3 = v103;
LABEL_160:
            if ((v49 & 1) != 0 || (_DWORD)v32 != 2 || v64)
              goto LABEL_168;
            v84 = v37;
            v85 = strlen(v37);
            v86 = (uint64_t)v84;
            v87 = v85;
            goto LABEL_164;
          }
          v15 = 0;
          v64 = 0;
        }
        LODWORD(v32) = v101;
        v37 = __sa;
        v47 = v97;
        v45 = v98;
        v50 = v95;
        v54 = v94;
        v57 = v93;
LABEL_106:
        v70 = v56 && v64 == 0;
        if (v70)
          v64 = 0;
        if ((v57 & 1) != 0 || !v70)
        {
          v49 = v100;
        }
        else
        {
          v102 = v32;
          v96 = v50;
          v99 = v45;
          __sb = (char *)v37;
          v71 = strlen(v54);
          v72 = (v71 - is_small_digraph_hun((uint64_t)v54, v71, v103, a5));
          memcpy(&v103[-(int)v72], v54, (int)v72);
          v73 = an_analyze(*(_QWORD *)(a1 + 8), &v103[-(int)v72], (int)v72 + a5, 2048, (uint64_t)v110, 1);
          if (v73)
          {
            v74 = v73;
            if ((a8 & 4) != 0)
            {
              v43 = segm_word(a1, a2, &v103[-(int)v72], a4 - (int)v72, v110, 0, v72);
              v37 = __sb;
              if ((v43 & 0x80000000) != 0)
                return v43;
              v15 = 1;
              v49 = v100;
              goto LABEL_152;
            }
            goto LABEL_150;
          }
          v64 = 0;
          v49 = v100;
          v45 = v99;
          v37 = __sb;
          v50 = v96;
          v15 = v15;
          LODWORD(v32) = v102;
        }
LABEL_116:
        if (v32 > 1 || v64)
        {
          v82 = (_DWORD)v32 == 3 && v64 == 0;
          if (v82)
            v83 = v50;
          else
            v83 = 1;
          if (v82)
            v64 = 0;
          if ((v83 & 1) == 0)
          {
            v84 = v45;
            v85 = strlen(v45);
            v86 = (uint64_t)v84;
            v87 = v85;
            a3 = v103;
LABEL_164:
            v91 = (v85 - is_small_digraph_hun(v86, v87, a3, a5));
            memcpy(&a3[-(int)v91], v84, (int)v91);
            if (!an_analyze(*(_QWORD *)(a1 + 8), &a3[-(int)v91], (int)v91 + a5, 2048, (uint64_t)v110, 1))
            {
LABEL_168:
              v29 = *(_DWORD *)(a2 + 3524);
              goto LABEL_169;
            }
            if ((a8 & 4) == 0
              || (v43 = segm_word(a1, a2, &a3[-(int)v91], a4 - (int)v91, v110, 0, v91), (v43 & 0x80000000) == 0))
            {
              v15 = 1;
              goto LABEL_168;
            }
            return v43;
          }
          goto LABEL_159;
        }
        if (v47)
        {
          if ((_DWORD)v32 == 1)
            goto LABEL_147;
          v76 = v103 + 1;
          v75 = *v103;
          if (v75 != 106)
            v76 = v103;
          v77 = *v76;
          if (*v76)
          {
            v28 = v75 == 106;
            v78 = 1;
            if (v28)
              v78 = 2;
            if (v103[v78]
              && (v79 = v32,
                  v80 = v37,
                  v81 = memchr("aeiou\xA0\x82\xA1\xA2\x94\x93\xA3\x81\x96", (char)v103[v78], 0xFuLL),
                  LODWORD(v32) = v79,
                  v37 = v80,
                  !v81))
            {
              v74 = 0;
              if ((v77 - 105) > 0x37 || ((1 << (v77 - 105)) & 0x80000002000001) == 0)
                goto LABEL_177;
            }
            else
            {
              v74 = 0;
              if ((v77 - 97) > 8 || ((1 << (v77 - 97)) & 0x111) == 0)
              {
LABEL_177:
                LODWORD(v32) = 0;
                goto LABEL_153;
              }
            }
LABEL_147:
            v102 = v32;
            __sb = (char *)v37;
            v100 = v49;
            v88 = strlen(v47);
            v89 = (v88 - is_small_digraph_hun((uint64_t)v47, v88, v103, a5));
            memcpy(&v103[-(int)v89], v47, (int)v89);
            v74 = an_analyze(*(_QWORD *)(a1 + 8), &v103[-(int)v89], (int)v89 + a5, 2048, (uint64_t)v110, 1);
            if (!v74)
            {
LABEL_151:
              v49 = v100;
              v37 = __sb;
LABEL_152:
              LODWORD(v32) = v102;
              goto LABEL_153;
            }
            if ((a8 & 4) != 0)
            {
              v43 = segm_word(a1, a2, &v103[-(int)v89], a4 - (int)v89, v110, 0, v89);
              if ((v43 & 0x80000000) != 0)
                return v43;
            }
LABEL_150:
            v15 = 1;
            goto LABEL_151;
          }
          LODWORD(v32) = 0;
        }
        v74 = 0;
LABEL_153:
        if (v74)
          v90 = 0;
        else
          v90 = (_DWORD)v32 == 3;
        if (v90)
          v64 = 0;
        else
          v64 = v74;
        goto LABEL_159;
      }
      v55 = v67;
      if ((a8 & 4) != 0)
      {
        v43 = segm_word(a1, a2, &v103[-(int)v66], a4 - (int)v66, v110, 0, v66);
        if ((v43 & 0x80000000) != 0)
          return v43;
      }
      v56 = 1;
      v15 = 1;
      LODWORD(v32) = v101;
      v37 = __sa;
      v47 = v97;
      v45 = v98;
      v50 = v95;
      v54 = v94;
      v57 = v93;
    }
    else
    {
      v33 = 0;
      v34 = v11;
      while (1)
      {
        v35 = v34 - 1;
        v36 = *(unsigned __int8 *)(a6 + (v34 - 1));
        v13 = *(_QWORD *)(a2 + 8 * v36 + 1024);
        if ((v13 & 0x800) != 0)
        {
          v37 = 0;
          v49 = 1;
          LODWORD(v32) = 3;
          if (v33)
            goto LABEL_47;
          goto LABEL_88;
        }
        if ((v13 & 0x200) != 0)
          break;
        if ((v13 & 0x20) == 0)
          goto LABEL_35;
        if (*(_BYTE *)(a2 + v36 + 512) != 48)
          v33 = 1;
        --v34;
        if ((unint64_t)(v35 + 1) <= 1)
        {
          LODWORD(v34) = 0;
LABEL_35:
          v37 = 0;
LABEL_46:
          v49 = 1;
          if (v33)
            goto LABEL_47;
LABEL_88:
          v44 = 0;
          v45 = 0;
          v46 = 0;
          v47 = "nulladik";
          v50 = 1;
          v48 = "null\xA0";
          goto LABEL_89;
        }
      }
      if (v31)
      {
        v37 = 0;
        LODWORD(v32) = 1;
        goto LABEL_46;
      }
      switch(~(_DWORD)v34 + v30)
      {
        case 0u:
          v49 = 0;
          v37 = "tized";
          break;
        case 1u:
          v49 = 0;
          v37 = "sz\xA0zad";
          break;
        case 2u:
        case 3u:
        case 4u:
          v49 = 0;
          v37 = "ezred";
          break;
        case 5u:
        case 6u:
        case 7u:
          v49 = 0;
          v37 = "milliomod";
          break;
        default:
          v37 = 0;
          v49 = 1;
          break;
      }
      LODWORD(v32) = 2;
      if (!v33)
        goto LABEL_88;
LABEL_47:
      v51 = (int)v11 - 1;
      v44 = 0;
      v50 = 0;
      v46 = 0;
      v45 = "harmad";
      v47 = "harmadik";
      v48 = "h\xA0rm";
      v52 = 1;
      v53 = "h\xA0rom";
      switch(*(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v51) + 512))
      {
        case '0':
          if ((_DWORD)v51 != (_DWORD)v34)
          {
            v44 = 0;
            v50 = 0;
            v46 = 0;
            v45 = "tized";
            v47 = "tizedik";
            v48 = "tiz";
            v53 = "t\xA1z";
            switch(*(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + (int)v11 - 2) + 512))
            {
              case '0':
                v58 = (int)v11 - 3;
                if ((_DWORD)v11 - 2 == (_DWORD)v34 || *(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v58) + 512) == 48)
                {
                  v59 = (int)v11 - 4;
                  if (((_DWORD)v58 == (_DWORD)v34 || *(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v59) + 512) == 48)
                    && ((v60 = (int)v11 - 5, (_DWORD)v59 == (_DWORD)v34)
                     || *(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v60) + 512) == 48)
                    && ((v61 = (int)v11 - 6, (_DWORD)v60 == (_DWORD)v34)
                     || *(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v61) + 512) == 48))
                  {
                    v62 = (int)v11 - 7;
                    if (((_DWORD)v61 == (_DWORD)v34 || *(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v62) + 512) == 48)
                      && ((v63 = (int)v11 - 8, (_DWORD)v62 == (_DWORD)v34)
                       || *(_BYTE *)(a2 + *(unsigned __int8 *)(a6 + v63) + 512) == 48)
                      && ((_DWORD)v63 == (_DWORD)v34
                       || *(_BYTE *)(a2 + *(unsigned __int8 *)((int)v11 + a6 - 9) + 512) == 48))
                    {
                      v48 = 0;
                      v45 = 0;
                      v46 = 0;
                      v47 = "milli\xA0rdadik";
                      v44 = 1;
                      v50 = 1;
                      v53 = "milli\xA0rd";
                    }
                    else
                    {
                      v48 = 0;
                      v50 = 0;
                      v46 = 0;
                      v45 = "milliomod";
                      v47 = "milliomodik";
                      v44 = 1;
                      v53 = "milli\xA2";
                    }
                  }
                  else
                  {
                    v44 = 0;
                    v50 = 0;
                    v46 = 0;
                    v45 = "ezred";
                    v47 = "ezredik";
                    v48 = "ezr";
                    v53 = "ezer";
                  }
                }
                else
                {
                  v48 = 0;
                  v50 = 0;
                  v46 = 0;
                  v45 = "sz\xA0zad";
                  v47 = "sz\xA0zadik";
                  v44 = 1;
                  v53 = "sz\xA0z";
                }
                goto LABEL_90;
              case '1':
                goto LABEL_90;
              case '2':
                v44 = 0;
                v50 = 0;
                v52 = 0;
                v46 = "h\xA3s";
                v45 = "huszad";
                v47 = "huszadik";
                v48 = "husz";
                v53 = "h\xA3sz";
                goto LABEL_90;
              case '3':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "harmincad";
                v47 = "harmincadik";
                v44 = 1;
                v53 = "harminc";
                goto LABEL_90;
              case '4':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "negyvened";
                v47 = "negyvenedik";
                v44 = 1;
                v53 = "negyven";
                goto LABEL_90;
              case '5':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "\x94tvened";
                v47 = "\x94tvenedik";
                v44 = 1;
                v53 = "\x94tven";
                goto LABEL_90;
              case '6':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "hatvanad";
                v47 = "hatvanadik";
                v44 = 1;
                v53 = "hatvan";
                goto LABEL_90;
              case '7':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "hetvened";
                v47 = "hetvenedik";
                v44 = 1;
                v53 = "hetven";
                goto LABEL_90;
              case '8':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "nyolcvanad";
                v47 = "nyolcvanadik";
                v44 = 1;
                v53 = "nyolcvan";
                goto LABEL_90;
              case '9':
                v48 = 0;
                v50 = 0;
                v46 = 0;
                v45 = "kilencvened";
                v47 = "kilencvenedik";
                v44 = 1;
                v53 = "kilencven";
                goto LABEL_90;
              default:
                goto LABEL_49;
            }
          }
          break;
        case '1':
          if ((_DWORD)v51 == (_DWORD)v34)
          {
            v48 = 0;
            v45 = 0;
            v46 = 0;
            if ((_DWORD)v32)
              v47 = "els\x93";
            else
              v47 = "else";
            v44 = 1;
            v50 = 1;
          }
          else
          {
            v48 = 0;
            v50 = 0;
            v46 = 0;
            v45 = "tizenegyed";
            v47 = "tizenegyedik";
            v44 = 1;
          }
          v53 = "egy";
          goto LABEL_90;
        case '2':
          v44 = 0;
          v50 = 0;
          v52 = 0;
          if ((_DWORD)v51 == (_DWORD)v34)
            v47 = "m\xA0sodik";
          else
            v47 = "tizenkettedik";
          v46 = "k\x82t";
          v45 = "ketted";
          v48 = "kett";
          v53 = "kett\x93";
          goto LABEL_90;
        case '3':
          goto LABEL_90;
        case '4':
          v48 = 0;
          v50 = 0;
          v46 = 0;
          v45 = "negyed";
          v47 = "negyedik";
          v44 = 1;
          v53 = "n\x82gy";
          goto LABEL_90;
        case '5':
          v48 = 0;
          v50 = 0;
          v46 = 0;
          v45 = "\x94t\x94d";
          v47 = "\x94t\x94dik";
          v44 = 1;
          v53 = "\x94t";
          goto LABEL_90;
        case '6':
          v48 = 0;
          v50 = 0;
          v46 = 0;
          v45 = "hatod";
          v47 = "hatodik";
          v44 = 1;
          v53 = "hat";
          goto LABEL_90;
        case '7':
          v44 = 0;
          v50 = 0;
          v46 = 0;
          v45 = "heted";
          v47 = "hetedik";
          v48 = "het";
          v53 = "h\x82t";
          goto LABEL_90;
        case '8':
          v48 = 0;
          v50 = 0;
          v46 = 0;
          v45 = "nyolcad";
          v47 = "nyolcadik";
          v44 = 1;
          v53 = "nyolc";
          goto LABEL_90;
        case '9':
          v48 = 0;
          v50 = 0;
          v46 = 0;
          v45 = "kilenced";
          v47 = "kilencedik";
          v44 = 1;
          v53 = "kilenc";
          goto LABEL_90;
        default:
          break;
      }
LABEL_49:
      v100 = v49;
      v54 = 0;
      v45 = 0;
      v47 = 0;
      v15 = 0;
      v55 = 0;
      v56 = (_DWORD)v32 != 1;
      v57 = 1;
      v50 = 1;
    }
    if (v56 && v55 == 0)
      v64 = 0;
    else
      v64 = v55;
    goto LABEL_106;
  }
  v15 = 0;
LABEL_169:
  if (v29 == 21)
  {
    if ((v13 & 0x100) != 0)
      return 0;
    if (an_analyze(*(_QWORD *)(a1 + 8), a3, a5, 0, (uint64_t)v110, 1))
    {
      if ((a8 & 4) == 0)
        return 1;
      v39 = a1;
      v40 = a2;
      v41 = a3;
      v38 = a4;
      v42 = 0;
LABEL_37:
      v43 = segm_word(v39, v40, v41, v38, v110, 0, v42);
      if ((v43 & 0x80000000) == 0)
        return 1;
      return v43;
    }
  }
  return v15;
}

uint64_t segm_word(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned __int8 *a5, int a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t result;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  int v56;
  int v57;
  _OWORD v60[2];
  uint64_t v61;

  v7 = a7;
  v9 = a2;
  v10 = *a5;
  v11 = a5[5];
  v12 = v11 + v10;
  v13 = a5[10];
  v14 = v11 + v10 + v13;
  v15 = a5[15];
  v16 = v14 + v15;
  v57 = a5[22];
  v17 = v14 + v15 + v57;
  v18 = v17;
  if (a5[5])
  {
    v18 = *a5;
    if ((int)a7 <= (int)v10)
    {
      *(_BYTE *)(a4 + *a5) = 124;
      v18 = v10;
    }
  }
  if ((_DWORD)v13)
  {
    v17 = v11 + v10;
    if ((int)a7 <= (int)v12)
    {
      *(_BYTE *)(a4 + v12) = 124;
      v17 = v11 + v10;
    }
  }
  if (*(_DWORD *)(a2 + 3524) != 14)
    return 0;
  v52 = v13;
  v53 = v11;
  v51 = v14 + v15 + v57;
  v61 = 0;
  memset(v60, 0, sizeof(v60));
  v50 = v15;
  if ((_DWORD)v15)
  {
    if ((int)v14 >= (int)a7)
    {
      v19 = &a3[v14];
      if (!SLstrncmp(&a3[v14], "szor", 4)
        || !SLstrncmp(v19, "szer", 4)
        || !SLstrncmp(v19, "sz\x94r", 4)
        || !SLstrncmp(v19, "s\xA0g", 3)
        || !SLstrncmp(v19, "s\x82g", 3))
      {
        *(_BYTE *)(a4 + v14) = 43;
      }
    }
  }
  if (v57)
  {
    if ((int)v16 >= (int)v7)
    {
      v20 = &a3[v16];
      if (!SLstrncmp(&a3[v16], "szor", 4)
        || !SLstrncmp(v20, "szer", 4)
        || !SLstrncmp(v20, "sz\x94r", 4))
      {
        *(_BYTE *)(a4 + v16) = 43;
      }
    }
  }
  v56 = v7;
  if ((~*((unsigned __int16 *)a5 + 14) & 0x8003) == 0)
  {
    result = an_analyze(*(_QWORD *)(a1 + 8), a3, v18, 768, (uint64_t)v60, 1);
    if ((result & 0x80000000) != 0)
      return result;
    if ((_DWORD)result)
    {
      v22 = a1;
      v23 = a3;
      v24 = v9;
      v25 = a4;
      v26 = v7;
      goto LABEL_26;
    }
    if (!a6 && v18)
    {
      v37 = 0;
      v38 = 0;
      do
      {
        v39 = a3[v37];
        v40 = v39 > 0x2F || ((1 << v39) & 0xA00000060000) == 0;
        if (!v40 || v39 == 196)
        {
          if (v37 > v38)
          {
            result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v38], (int)v37 - v38, 256, (uint64_t)v60, 1);
            if ((result & 0x80000000) != 0)
              return result;
            if ((_DWORD)result)
            {
              result = segm_word(a1, v9, &a3[v38], a4 + v38, v60, 1, (v56 - v38));
              if ((result & 0x80000000) != 0)
                return result;
            }
          }
          v38 = ++v37;
          LODWORD(v7) = v56;
        }
        else
        {
          ++v37;
        }
      }
      while (v37 != v18);
      if (v38 >= 1 && v18 > v38)
      {
        result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v38], v18 - v38, 256, (uint64_t)v60, 1);
        if ((result & 0x80000000) != 0)
          return result;
        if ((_DWORD)result)
        {
          v25 = a4 + v38;
          v26 = (v7 - v38);
          v22 = a1;
          v24 = v9;
          v23 = &a3[v38];
LABEL_26:
          result = segm_word(v22, v24, v23, v25, v60, 1, v26);
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
    }
  }
  if (!v53 || (~*((unsigned __int16 *)a5 + 15) & 0x8003) != 0)
    goto LABEL_33;
  v27 = &a3[v10];
  result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v10], v17 - (int)v10, 768, (uint64_t)v60, 1);
  if ((result & 0x80000000) != 0)
    return result;
  if ((_DWORD)result)
  {
    v28 = a4 + v10;
    v29 = (v7 - v10);
    goto LABEL_32;
  }
  if (!a6 && v17 > (int)v10)
  {
    v49 = v9;
    v41 = v10;
    v42 = v10;
    do
    {
      v43 = a3[v41];
      v44 = v43 > 0x2F || ((1 << v43) & 0xA00000060000) == 0;
      if (v44 && v43 != 196)
      {
        ++v41;
      }
      else
      {
        if (v41 > v42)
        {
          result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v42], (int)v41 - v42, 256, (uint64_t)v60, 1);
          if ((result & 0x80000000) != 0)
            return result;
          if ((_DWORD)result)
          {
            result = segm_word(a1, v49, &a3[v42], a4 + v42, v60, 1, (v56 - v42));
            if ((result & 0x80000000) != 0)
              return result;
          }
        }
        v42 = ++v41;
        LODWORD(v7) = v56;
      }
    }
    while (v41 != v17);
    v9 = v49;
    if (v42 > (int)v10 && v17 > v42)
    {
      v27 = &a3[v42];
      result = an_analyze(*(_QWORD *)(a1 + 8), v27, v17 - v42, 256, (uint64_t)v60, 1);
      if ((result & 0x80000000) != 0)
        return result;
      if ((_DWORD)result)
      {
        v28 = a4 + v42;
        v29 = (v7 - v42);
LABEL_32:
        result = segm_word(a1, v9, v27, v28, v60, 1, v29);
        if ((result & 0x80000000) != 0)
          return result;
      }
    }
  }
LABEL_33:
  if (!v52 || (~*((unsigned __int16 *)a5 + 16) & 0x8003) != 0)
    return 0;
  v30 = v9;
  result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v12], v51 - v12, 768, (uint64_t)v60, 1);
  if ((result & 0x80000000) != 0)
    return result;
  v31 = v12;
  if ((_DWORD)result)
  {
    v32 = a4 + v12;
    v33 = (v56 - v12);
    v34 = a1;
    v35 = v9;
    v36 = &a3[v12];
    goto LABEL_38;
  }
  if (a6 || v51 <= v12)
    return 0;
  v45 = (v52 + v50 + v57 + v53 + v10);
  v46 = v10;
  do
  {
    v47 = a3[v31];
    v48 = v47 > 0x2F || ((1 << v47) & 0xA00000060000) == 0;
    if (v48 && v47 != 196)
    {
      ++v31;
    }
    else
    {
      if (v31 > v46)
      {
        result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v46], (int)v31 - v46, 256, (uint64_t)v60, 1);
        if ((result & 0x80000000) != 0)
          return result;
        if ((_DWORD)result)
        {
          result = segm_word(a1, v30, &a3[v46], a4 + v46, v60, 1, (v56 - v46));
          if ((result & 0x80000000) != 0)
            return result;
        }
      }
      v46 = ++v31;
    }
  }
  while (v31 != v45);
  if (v46 <= (int)v12 || v46 >= (int)v51)
    return 0;
  result = an_analyze(*(_QWORD *)(a1 + 8), &a3[v46], (int)v45 - v46, 256, (uint64_t)v60, 1);
  if ((result & 0x80000000) == 0)
  {
    if ((_DWORD)result)
    {
      v32 = a4 + v46;
      v33 = (v56 - v46);
      v34 = a1;
      v35 = v30;
      v36 = &a3[v46];
LABEL_38:
      result = segm_word(v34, v35, v36, v32, v60, 1, v33);
      if ((result & 0x80000000) != 0)
        return result;
      return 0;
    }
    return 0;
  }
  return result;
}

BOOL is_small_digraph_hun(uint64_t a1, int a2, unsigned __int8 *a3, int a4)
{
  int v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  _BOOL8 result;

  result = 0;
  if (a2 >= 2 && a4 >= 2)
  {
    v4 = *(unsigned __int8 *)(a1 + (a2 - 2));
    if (v4 == *a3)
    {
      v5 = *(unsigned __int8 *)(a1 + (a2 - 1));
      if (v5 == a3[1])
      {
        v6 = (v4 & 0xFFFFFFFD) == 0x6C || v4 == 103;
        v7 = v6 || v4 == 116;
        if (v7 && v5 == 121)
          return 1;
        v8 = v4 == 122 || v4 == 99;
        if (v8 && v5 == 115)
          return 1;
        v9 = v4 == 100 || v4 == 115;
        if (v9 && v5 == 122)
          return 1;
      }
    }
  }
  return result;
}

uint64_t check__words(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v7;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  _QWORD *v30;
  int v31;
  int v32;
  unsigned __int8 v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  int v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  unsigned __int8 v55[320];
  _QWORD v56[42];

  v7 = a5;
  v56[40] = *MEMORY[0x1E0C80C00];
  v12 = an_analyze(*(_QWORD *)(a1 + 8), a3, a5, a6, (uint64_t)v56, 1);
  v13 = v12;
  if ((v12 & 0x80000000) != 0)
    return v13;
  if ((_DWORD)v12)
  {
    if ((a6 & 4) != 0)
    {
      v14 = segm_word(a1, a2, a3, a4, (unsigned __int8 *)v56, 0, 0);
      if (v14 >= 0)
        return v13;
      else
        return v14;
    }
    return v13;
  }
  v15 = *(_DWORD *)(a2 + 3524);
  v16 = v15 > 0x15 || ((1 << v15) & 0x204001) == 0;
  if (v16 || v7 < 3)
  {
    v17 = 0;
LABEL_55:
    v35 = v15 == 14 || v15 == 0;
    if (v35 && (v15 != 14 || v17 >= 2))
    {
      v54 = (v7 - 1);
      v52 = v7;
      if (v7 >= 3)
      {
        v36 = 0;
        v37 = 0;
        v38 = 1;
        while (1)
        {
          v39 = a3[v38];
          v40 = v39 > 0x2F || ((1 << v39) & 0xA00000060000) == 0;
          if (v40 && v39 != 196)
          {
            ++v38;
          }
          else
          {
            if (v38 == v36 || v37 > 2)
              goto LABEL_85;
            v41 = an_analyze(*(_QWORD *)(a1 + 8), &a3[v36], (int)v38 - v36, (*(_DWORD *)(a2 + 3524) == 14) << 11, (uint64_t)v56, 1);
            v13 = v41;
            if ((v41 & 0x80000000) != 0)
              return v13;
            if (!(_DWORD)v41)
              goto LABEL_85;
            if ((a6 & 4) != 0)
            {
              v23 = segm_word(a1, a2, &a3[v36], a4 + v36, (unsigned __int8 *)v56, 0, 0);
              if ((v23 & 0x80000000) != 0)
                return v23;
            }
            ++v37;
            v36 = ++v38;
          }
          if (v38 == v54)
            goto LABEL_86;
        }
      }
      v36 = 0;
      LODWORD(v38) = 1;
LABEL_85:
      if ((_DWORD)v38 == (_DWORD)v54)
      {
LABEL_86:
        if (v52 != v36)
        {
          v43 = &a3[v36];
          v44 = an_analyze(*(_QWORD *)(a1 + 8), v43, v52 - v36, (*(_DWORD *)(a2 + 3524) == 14) << 11, (uint64_t)v56, 1);
          v13 = v44;
          if ((v44 & 0x80000000) == 0 && (a6 & 4) != 0)
          {
            if ((_DWORD)v44)
            {
              v23 = segm_word(a1, a2, v43, a4 + v36, (unsigned __int8 *)v56, 0, 0);
              if ((v23 & 0x80000000) != 0)
                return v23;
            }
          }
          return v13;
        }
      }
    }
    return 0;
  }
  v17 = 0;
  v50 = (v7 - 1);
  v49 = a6 + 256;
  v51 = v7;
  v18 = 1;
  while (1)
  {
    v19 = a3[v18];
    v20 = v19 > 0x2F || ((1 << v19) & 0xA00000060000) == 0;
    if (v20 && v19 != 196)
      goto LABEL_52;
    v21 = an_analyze(*(_QWORD *)(a1 + 8), a3, v18, a6 + 8448, (uint64_t)v56, 8);
    v13 = v21;
    if ((v21 & 0x80000000) != 0)
      return v13;
    v53 = v17;
    if ((_DWORD)v21)
    {
      v22 = &a3[v18 + 1];
      v23 = an_analyze(*(_QWORD *)(a1 + 8), v22, ~(_DWORD)v18 + v51, v49, (uint64_t)v55, 8);
      if ((v23 & 0x80000000) != 0)
        return v23;
      v48 = &a3[v18 + 1];
      if ((_DWORD)v23 || *(_DWORD *)(a2 + 3524) != 21)
        goto LABEL_25;
      v24 = *v22;
      v25 = lexchr2lower((char)*v22, 21);
      if (v24 != v25)
        break;
    }
LABEL_32:
    v17 = v53 + 1;
    if (*(_DWORD *)(a2 + 3524) == 21)
    {
      v33 = a3[v18];
      a3[v18] = 0;
      v34 = roman2int(a3);
      a3[v18] = v33;
      if ((v34 - 1) <= 0x26
        && (!SLstrcmp(&a3[v18 + 1], "lecie")
         || !SLstrcmp(&a3[v18 + 1], "lecia")
         || !SLstrcmp(&a3[v18 + 1], "leciu")
         || !SLstrcmp(&a3[v18 + 1], "leciem")
         || !SLstrcmp(&a3[v18 + 1], "wieczny")
         || !SLstrcmp(&a3[v18 + 1], "wiecznego")
         || !SLstrcmp(&a3[v18 + 1], "wiecznemu")
         || !SLstrcmp(&a3[v18 + 1], "wiecznym")
         || !SLstrcmp(&a3[v18 + 1], "wieczne")
         || !SLstrcmp(&a3[v18 + 1], "wieczna")
         || !SLstrcmp(&a3[v18 + 1], "wiecznej")
         || !SLstrcmp(&a3[v18 + 1], "wieczn\xA5")
         || !SLstrcmp(&a3[v18 + 1], "wieczni")
         || !SLstrcmp(&a3[v18 + 1], "wiecznych")
         || !SLstrcmp(&a3[v18 + 1], "wiecznym")))
      {
        return 1;
      }
    }
LABEL_52:
    if (++v18 == v50)
    {
      v15 = *(_DWORD *)(a2 + 3524);
      v7 = v51;
      goto LABEL_55;
    }
  }
  *v48 = v25;
  v23 = an_analyze(*(_QWORD *)(a1 + 8), v48, ~(_DWORD)v18 + v51, v49, (uint64_t)v55, 8);
  if ((v23 & 0x80000000) != 0)
    return v23;
  *v48 = v24;
LABEL_25:
  if (!(_DWORD)v23)
    goto LABEL_32;
  v26 = 0;
  v45 = v23;
  v46 = a4;
  v27 = v13;
LABEL_27:
  v28 = 0;
  v47 = v26;
  v29 = &v55[40 * v26];
  v30 = v56;
  while (1)
  {
    v31 = *(_DWORD *)(a2 + 3524);
    if (v31 == 21)
      break;
    v32 = is_nominal_result((uint64_t)v30, v31);
    if (v32 == is_nominal_result((uint64_t)v29, *(_DWORD *)(a2 + 3524)))
      break;
    ++v28;
    v30 += 5;
    if (v27 == v28)
    {
      a4 = v46;
      v26 = v47 + 1;
      if (v47 + 1 != v45)
        goto LABEL_27;
      goto LABEL_32;
    }
  }
  if ((a6 & 4) != 0)
  {
    v23 = segm_word(a1, a2, a3, v46, (unsigned __int8 *)&v56[5 * v28], 0, 0);
    if ((v23 & 0x80000000) != 0)
      return v23;
    v23 = segm_word(a1, a2, v48, v46 + v18 + 1, &v55[40 * v47], 0, 0);
    if ((v23 & 0x80000000) != 0)
      return v23;
  }
  return 1;
}

uint64_t lexchr2lower(int a1, int a2)
{
  char v2;

  if ((a1 - 65) <= 0x19)
    return (char)(a1 + 32);
  if (a2 != 21)
  {
    if (a2 == 14)
    {
      v2 = -96;
      switch(a1)
      {
        case -115:
          v2 = -95;
          break;
        case -114:
        case -111:
        case -110:
        case -109:
        case -108:
        case -106:
          return (char)a1;
        case -113:
          return v2;
        case -112:
          goto LABEL_19;
        case -107:
          return -94;
        case -105:
          v2 = -93;
          break;
        case -104:
          v2 = -106;
          break;
        case -103:
          goto LABEL_20;
        case -102:
          goto LABEL_21;
        default:
          if (a1 != -89)
            return (char)a1;
          v2 = -109;
          break;
      }
      return v2;
    }
    return (char)a1;
  }
  if (a1 > -93)
  {
    if (a1 > -68)
    {
      switch(a1)
      {
        case -67:
          return -66;
        case -32:
          return -94;
        case -29:
          return -28;
      }
    }
    else
    {
      switch(a1)
      {
        case -92:
          return -91;
        case -88:
          return -87;
        case -75:
          return -96;
      }
    }
    return (char)a1;
  }
  switch(a1)
  {
    case -115:
      v2 = -85;
      break;
    case -113:
      v2 = -122;
      break;
    case -112:
LABEL_19:
      v2 = -126;
      break;
    case -105:
      v2 = -104;
      break;
    case -103:
LABEL_20:
      v2 = -108;
      break;
    case -102:
LABEL_21:
      v2 = -127;
      break;
    case -99:
      v2 = -120;
      break;
    default:
      return (char)a1;
  }
  return v2;
}

uint64_t suggest_init(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  int v16;
  int v17;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  const char *v24;
  int v25;
  int v26;
  int v27;
  char __s[130];
  char v30[130];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v8 = malloc_type_calloc(0x290uLL, 1uLL, 0x9A447B63uLL);
  *a1 = v8;
  if (!v8)
    return 4294966295;
  v9 = v8;
  *v8 = a2;
  v8[80] = a4;
  v10 = (const char *)(v8 + 11);
  if (a3)
    __strcpy_chk();
  else
    *v10 = 0;
  cdict_init((uint64_t)(v9 + 3), a2, 256, 32, 0);
  result = 0;
  if ((a4 & 0x20000) != 0)
  {
    if (*v10)
    {
      v12 = f_open(v10, 17);
      if (v12)
      {
        v13 = v12;
        while (1)
        {
          if (!f_gets((uint64_t)__s, 130, v13))
          {
            v27 = *(_DWORD *)(v13 + 20);
            f_close(v13);
            if (v27)
            {
              v26 = -4;
            }
            else
            {
              v26 = 0;
              *((_DWORD *)v9 + 8) = 0;
            }
            goto LABEL_43;
          }
          v14 = strchr(__s, 10);
          if (!v14)
            break;
          do
          {
            *v14 = 0;
LABEL_15:
            if (v14 <= __s)
              break;
            v17 = *--v14;
            v16 = v17;
          }
          while (v17 == 32 || v16 == 9);
          if (__s[0])
          {
            v19 = stpcopy((uint64_t)v30, (unsigned __int8 *)__s);
            v20 = strchr(v30, 32);
            v21 = v20;
            if (v20)
              v22 = v20;
            else
              v22 = (char *)(v19 + 1);
            if (v20)
              v23 = v19;
            else
              v23 = v19 + 1;
            *v22 = 0;
            if ((int)strlen(v30) > 16
              || (v21 ? (v24 = v21 + 1) : (v24 = (const char *)(v19 + 1)), (int)strlen(v24) > 16))
            {
              v26 = -10;
LABEL_38:
              f_close(v13);
              goto LABEL_43;
            }
            v25 = cdict_add((uint64_t)(v9 + 3), (unsigned __int8 *)v30, v23 - v30 + 1);
            v26 = v25 & (v25 >> 31);
            if (v26 < 0)
              goto LABEL_38;
          }
        }
        v15 = strlen(__s);
        if (v15 != 129)
        {
          v14 = &__s[v15];
          goto LABEL_15;
        }
        f_close(v13);
        v26 = -7;
      }
      else
      {
        v26 = -2;
      }
LABEL_43:
      if (v26 != -2 && v26 < 0)
        return (v26 - 1200);
      else
        return 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t suggest_finish(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v9;
  int v10;
  _BYTE *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  std::error_code *v18;
  std::error_code *v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  std::__fs::filesystem::path __to;
  std::__fs::filesystem::path __s;
  _BYTE v26[65];
  _QWORD v27[9];

  v27[8] = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v1 = result;
    v2 = result + 24;
    if (*(_DWORD *)(result + 32) == 1)
    {
      __strcpy_chk();
      __s.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__s) - 1] = 125;
      __strcpy_chk();
      __to.__pn_.__r_.__value_.__s.__data_[strlen((const char *)&__to) - 1] = 123;
      v3 = f_open((const char *)&__s, 26);
      if (v3)
      {
        v4 = v3;
        v22 = 0u;
        v23 = 0u;
        if (cdict_access(v2, 0, (uint64_t)&v22))
        {
          v5 = 0;
          do
          {
            v6 = 0;
            v7 = v22 + SDWORD2(v22) + 20;
            v8 = v27;
            do
            {
              v9 = v8;
              v10 = *(unsigned __int8 *)(v7 + v6);
              v26[v6++] = v10;
              v8 = (_QWORD *)((char *)v8 + 1);
            }
            while (v10);
            v11 = (_BYTE *)(v7 + v6);
            if (*v11)
            {
              v26[v6 - 1] = 32;
              do
              {
                v12 = *v11++;
                *v9++ = v12;
              }
              while (v12);
            }
            if (f_puts(v26, v4) == -1)
              break;
            v13 = (*(_BYTE *)(v4 + 8) & 0x10) != 0 ? f_putc_txt(10, v4) : f_putc_bin(10, v4);
            if (v13 == -1)
              break;
            ++v5;
            v22 = 0u;
            v23 = 0u;
          }
          while (cdict_access(v2, v5, (uint64_t)&v22));
        }
        v14 = *(_DWORD *)(v4 + 20);
        f_close(v4);
        if (v14)
        {
          v15 = -5;
        }
        else
        {
          v16 = f_open((const char *)&__to, 1);
          if (v16 && (f_close(v16), unlink((const char *)&__to) == -1))
          {
            v15 = -12;
          }
          else
          {
            v17 = f_open((const char *)(v1 + 88), 1);
            if (v17 && (f_close(v17), rename((const std::__fs::filesystem::path *)(v1 + 88), &__to, v19), v20 == -1)
              || (rename(&__s, (const std::__fs::filesystem::path *)(v1 + 88), v18), v21 == -1))
            {
              v15 = -13;
            }
            else
            {
              unlink((const char *)&__to);
              v15 = 0;
              *(_DWORD *)(v1 + 32) = 0;
            }
          }
        }
      }
      else
      {
        v15 = -3;
      }
    }
    else
    {
      v15 = 0;
    }
    cdict_finish(v2);
    free((void *)v1);
    if (v15)
      return (v15 - 1200);
    else
      return 0;
  }
  return result;
}

uint64_t suggest_words(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *__s, int a7, uint64_t a8)
{
  int v16;
  uint64_t result;
  int he_language;
  int v19;
  char **v20;
  uint64_t v21;
  char **v22;
  int v23;
  char **v24;
  uint64_t v25;
  char **v26;
  int v27;

  v16 = strlen(__s);
  if (v16 > 64)
    return 4294966286;
  *(_QWORD *)(a1 + 8) = a8;
  if (a8 == 1 || a8 == -1)
  {
    *(_DWORD *)(a1 + 632) = a7;
    *(_DWORD *)(a1 + 652) = 0;
    *(_DWORD *)(a1 + 16) = 1;
  }
  else if (!*(_DWORD *)(a1 + 16))
  {
    return *(unsigned int *)(a1 + 652);
  }
  he_language = get_he_language(*(_QWORD *)a1);
  v19 = he_language;
  if (he_language == 14)
  {
    v23 = 3;
    v25 = 0xA00000004;
    v27 = 2;
    v22 = corr_typewriter_hun;
    v24 = corr_more_accents_hun;
    v26 = corr_accents_hun;
    v20 = corr_y_z_hun;
  }
  else if (he_language == 21)
  {
    v23 = 3;
    v22 = corr_typewriter_pol;
    v24 = corr_more_accents_pol;
    v27 = 2;
    v26 = corr_accents_pol;
    v25 = 0x200000014;
    v20 = corr_y_z_pol;
  }
  else
  {
    v20 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v22 = 0;
    v27 = 0;
    v23 = 0;
  }
  *(_QWORD *)(a1 + 608) = a2;
  *(_QWORD *)(a1 + 600) = a3;
  *(_QWORD *)(a1 + 616) = a4;
  *(_QWORD *)(a1 + 624) = a5;
  *(_DWORD *)(a1 + 648) = 1024;
  result = suggest_1_corr(a1, __s, 0);
  *(_DWORD *)(a1 + 16) = result;
  if ((result & 0x80000000) == 0)
  {
    v21 = *(_QWORD *)(a1 + 640);
    if ((v21 & 0x8000) == 0 || (v21 & 0x10000) != 0 && *(_DWORD *)(a1 + 652))
      goto LABEL_17;
    *(_QWORD *)(a1 + 8) = -1;
    if ((a8 & 0x10000) == 0
      || !(_DWORD)result
      || (v21 & 0x40) == 0
      || (result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v20, v27),
          *(_DWORD *)(a1 + 16) = result,
          (result & 0x80000000) == 0))
    {
      if ((a8 & 0x20000) == 0
        || !(_DWORD)result
        || (*(_BYTE *)(a1 + 641) & 1) == 0
        || (result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v26, SHIDWORD(v25)),
            *(_DWORD *)(a1 + 16) = result,
            (result & 0x80000000) == 0))
      {
        if ((a8 & 0x40000) == 0
          || !(_DWORD)result
          || (*(_BYTE *)(a1 + 641) & 2) == 0
          || (result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v24, v25),
              *(_DWORD *)(a1 + 16) = result,
              (result & 0x80000000) == 0))
        {
          if ((a8 & 0x80000) == 0
            || !(_DWORD)result
            || (*(_BYTE *)(a1 + 641) & 0x40) == 0
            || (result = sugg_prepared(a1, __s, v16, 0, 4, (uint64_t)v22, v23),
                *(_DWORD *)(a1 + 16) = result,
                (result & 0x80000000) == 0))
          {
            if ((a8 & 0x100000) == 0
              || !(_DWORD)result
              || (*(_BYTE *)(a1 + 640) & 0x20) == 0
              || *(_DWORD *)(a1 + 652)
              || (result = sugg_capitalize1((uint64_t *)a1, (unsigned __int8 *)__s, v16, 0, 3),
                  *(_DWORD *)(a1 + 16) = result,
                  (result & 0x80000000) == 0))
            {
LABEL_17:
              if (v19 == 14 && (a8 & 0x200000) != 0 && !*(_DWORD *)(a1 + 652))
              {
                *(_DWORD *)(a1 + 648) = 0;
                *(_QWORD *)(a1 + 8) = -1;
                result = suggest_1_corr(a1, __s, 0);
                *(_DWORD *)(a1 + 16) = result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t suggest_1_corr(uint64_t a1, char *a2, int a3)
{
  uint64_t v3;
  int he_language;
  int v7;
  int v8;
  int v9;
  int v10;
  char **v11;
  char **v12;
  char **v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t i;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  int *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  uint64_t v71;
  char *v72;
  char v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t j;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int k;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  char *v105;
  int v106;
  unsigned int v107;
  char v108;
  unsigned __int8 *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  char *v115;
  size_t v116;
  int v117;
  char *v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _BYTE *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  int v128;
  int v129;
  char *v130;
  int v131;
  unsigned int v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  char *v138;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  char **v147;
  char **v148;
  uint64_t v149;
  int v150;
  char **v151;
  char **v152;
  uint64_t v153;
  char **v154;
  char **v155;
  uint64_t v156;
  char **v157;
  int v158;
  uint64_t v159;
  char **__n;
  int __na;
  int v162;
  char *v163;
  size_t v164;
  size_t v165;
  int v166;
  int v167;
  _OWORD v168[2];
  char __dst[65];
  uint64_t v170;

  LODWORD(v3) = a3;
  v170 = *MEMORY[0x1E0C80C00];
  he_language = get_he_language(*(_QWORD *)a1);
  v7 = he_language;
  if (he_language == 14)
  {
    v8 = 3;
    v9 = 41;
    v10 = 14;
    v153 = 0xD00000009;
    v156 = 0xA00000004;
    v162 = 5;
    v166 = 2;
    v11 = corr_typewriter_hun;
    v12 = corr_keyboard_hun;
    v151 = corr_proper_names_hun;
    v152 = corr_voiced_unvoiced_hun;
    v154 = corr_assimilation_hun;
    v155 = corr_more_accents_hun;
    v157 = corr_accents_hun;
    __n = corr_j_ly_hun;
    v13 = corr_y_z_hun;
LABEL_5:
    v164 = (size_t)v13;
    goto LABEL_7;
  }
  if (he_language == 21)
  {
    v8 = 3;
    v9 = 35;
    v10 = 5;
    v153 = 0x1A00000006;
    v156 = 0x200000014;
    v162 = 26;
    v166 = 2;
    v11 = corr_typewriter_pol;
    v12 = corr_keyboard_pol;
    v151 = (char **)&corr_proper_names_pol;
    v152 = corr_voiced_unvoiced_pol;
    v154 = corr_assimilation_pol;
    v155 = corr_more_accents_pol;
    v157 = corr_accents_pol;
    __n = corr_j_ly_pol;
    v13 = corr_y_z_pol;
    goto LABEL_5;
  }
  v164 = 0;
  v157 = 0;
  __n = 0;
  v154 = 0;
  v155 = 0;
  v151 = 0;
  v152 = 0;
  v12 = 0;
  v11 = 0;
  v166 = 0;
  v162 = 0;
  v156 = 0;
  v153 = 0;
  v10 = 0;
  v9 = 0;
  v8 = 0;
LABEL_7:
  v14 = strlen(a2);
  if (v14 > 64)
    return 4294966286;
  v150 = v10;
  v149 = (uint64_t)v12;
  v15 = *(unsigned int *)(a1 + 16);
  if ((int)v15 < 1)
    return v15;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 1) != 0 && (*(_BYTE *)(a1 + 640) & 8) != 0)
  {
    v145 = v9;
    if (v7 == 14 && (*(_BYTE *)(a1 + 632) & 0x20) != 0)
    {
LABEL_17:
      if (v14 >= 3)
      {
        v19 = 1;
        while (1)
        {
          v20 = 0;
          v21 = 0;
          do
          {
            if (v19 == v20)
              __dst[v21++] = 32;
            v22 = v21 + 1;
            __dst[v21++] = a2[v20++];
          }
          while (v14 != v20);
          __dst[v22] = 0;
          v23 = try_f(a1, __dst, 0, 0, 2);
          if ((int)v23 <= 0)
            goto LABEL_278;
          if (++v19 == v14 - 1)
          {
            v16 = *(_QWORD *)(a1 + 8);
            break;
          }
        }
      }
      v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      v17 = &a2[(int)v3];
      while (1)
      {
        v18 = *v17;
        if (!*v17)
          break;
        ++v17;
        if (strchr(punct_inside_punctu, v18))
          goto LABEL_17;
      }
    }
    v9 = v145;
  }
  if ((v16 & 2) != 0 && v7 == 14 && (*(_QWORD *)(a1 + 640) & 0x10) != 0 && (*(_BYTE *)(a1 + 632) & 0x80) != 0)
  {
    if (v14 >= 3)
    {
      v141 = v3;
      v25 = *(_QWORD *)a1;
      v26 = 1;
      while (1)
      {
        v27 = 0;
        v28 = 0;
        do
        {
          if (v26 == v27)
            __dst[v28++] = *(_BYTE *)(v25 + 813);
          v29 = v28 + 1;
          __dst[v28++] = a2[v27++];
        }
        while (v14 != v27);
        __dst[v29] = 0;
        v30 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, 0);
        v15 = v30;
        if ((v30 & 0x80000000) != 0)
          goto LABEL_279;
        if ((_DWORD)v30)
        {
          *(_DWORD *)(a1 + 652) = 1;
          v31 = __dst;
        }
        else
        {
          v31 = 0;
        }
        v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v31);
        if ((int)v23 <= 0)
          goto LABEL_278;
        if (++v26 == v14 - 1)
        {
          v16 = *(_QWORD *)(a1 + 8);
          LODWORD(v3) = v141;
          break;
        }
      }
    }
    v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    if ((v16 & 4) == 0)
      goto LABEL_52;
  }
  else if ((v16 & 4) == 0)
  {
    goto LABEL_52;
  }
  if (*(_DWORD *)(a1 + 632) && (*(_BYTE *)(a1 + 640) & 0x20) != 0)
  {
    v24 = sugg_capitalize1((uint64_t *)a1, (unsigned __int8 *)a2, v14, v3, 1);
    v15 = v24;
    *(_DWORD *)(a1 + 16) = v24;
    if ((v24 & 0x80000000) != 0 || !(_DWORD)v24)
      return v15;
    v15 = 1;
  }
LABEL_52:
  if ((*(_BYTE *)(a1 + 8) & 8) != 0 && (*(_BYTE *)(a1 + 640) & 1) != 0)
  {
    v146 = v9;
    if (v14 > (int)v3)
    {
      v32 = *(_QWORD *)a1;
      for (i = (int)v3; i != v14; ++i)
      {
        if ((*(_QWORD *)(v32 + 8 * a2[i] + 1024) & 1) != 0
          && (i != (int)v3 && (*(_QWORD *)(v32 + 8 * a2[i - 1] + 1024) & 1) != 0
           || i != v14 - 1 && (*(_QWORD *)(v32 + 8 * a2[i + 1] + 1024) & 1) != 0))
        {
          if (v14 < 1)
          {
            v34 = 0;
          }
          else
          {
            v34 = 0;
            v35 = i;
            v36 = v14;
            v37 = a2;
            do
            {
              if (v35)
                __dst[v34++] = *v37;
              --v35;
              ++v37;
              --v36;
            }
            while (v36);
          }
          __dst[v34] = 0;
          v38 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
          v15 = v38;
          if ((v38 & 0x80000000) != 0)
            goto LABEL_279;
          if ((_DWORD)v38)
          {
            *(_DWORD *)(a1 + 652) = 1;
            v39 = __dst;
          }
          else
          {
            v39 = 0;
          }
          v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v39);
          if ((int)v23 < 1)
            goto LABEL_278;
        }
      }
    }
    v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    v9 = v146;
  }
  v40 = *(_QWORD *)(a1 + 8);
  if ((v40 & 0x10) != 0 && (*(_BYTE *)(a1 + 640) & 2) != 0)
  {
    if (v14 - 1 > (int)v3)
    {
      v143 = v8;
      v41 = *(_QWORD *)a1;
      v42 = (int)v3;
      do
      {
        v43 = v42;
        v44 = a2[v42++];
        if ((*(_QWORD *)(v41 + 8 * v44 + 1024) & 1) != 0
          && (_DWORD)v44 != a2[v42]
          && (*(_QWORD *)(v41 + 8 * a2[v42] + 1024) & 1) != 0)
        {
          if (v14 < 1)
          {
            v46 = 0;
          }
          else
          {
            v46 = 0;
            v47 = 0;
            do
            {
              if (v47 == v43)
              {
                v48 = v47 + 1;
                __dst[v46++] = a2[v48];
              }
              else
              {
                LODWORD(v48) = v47;
              }
              __dst[v46++] = a2[v47];
              v47 = v48 + 1;
            }
            while ((int)v48 + 1 < v14);
          }
          __dst[v46] = 0;
          v49 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
          v15 = v49;
          if ((v49 & 0x80000000) != 0)
            goto LABEL_279;
          if ((_DWORD)v49)
          {
            *(_DWORD *)(a1 + 652) = 1;
            v50 = __dst;
          }
          else
          {
            v50 = 0;
          }
          v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v50);
          if ((int)v23 < 1)
            goto LABEL_278;
        }
      }
      while (v42 != v14 - 1);
      v40 = *(_QWORD *)(a1 + 8);
      v8 = v143;
    }
    v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
  }
  if ((v40 & 0x20) == 0)
    goto LABEL_161;
  if ((*(_BYTE *)(a1 + 640) & 4) != 0)
  {
    if (v14 <= (int)v3)
    {
      v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
    }
    else
    {
      v144 = v8;
      v147 = v11;
      v51 = (int)v3;
      v52 = v14;
      v53 = *(_QWORD *)a1;
      v142 = v3;
      do
      {
        v54 = a2[v51];
        v55 = v51 + 1;
        if ((_DWORD)v54 != a2[v51 + 1]
          && (v51 < 1 || (_DWORD)v54 != a2[(v51 - 1)]))
        {
          v56 = v51;
          v57 = *(_QWORD *)(v53 + 8 * v54 + 1024);
          if ((v57 & 1) != 0)
          {
            if (v14 < 1)
            {
              v74 = 0;
            }
            else
            {
              v70 = 0;
              v71 = v14;
              v72 = a2;
              do
              {
                if (!v56)
                  __dst[v70++] = a2[v51];
                v73 = *v72++;
                v74 = v70 + 1;
                __dst[v70] = v73;
                --v56;
                ++v70;
                --v71;
              }
              while (v71);
            }
            __dst[v74] = 0;
            v75 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
            v15 = v75;
            if ((v75 & 0x80000000) != 0)
              goto LABEL_279;
            if ((_DWORD)v75)
            {
              *(_DWORD *)(a1 + 652) = 1;
              v76 = __dst;
            }
            else
            {
              v76 = 0;
            }
            v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v76);
            v52 = v14;
            if ((int)v23 < 1)
              goto LABEL_278;
          }
          else if (v51 >= 1 && (v57 & 0x1000) != 0)
          {
            v58 = (v51 - 1);
            if ((*(_QWORD *)(v53 + 8 * a2[v58] + 1024) & 0x1800000) != 0)
            {
              v59 = *(_DWORD *)(v53 + 3072);
              if (v59 >= 1)
              {
                v60 = 0;
                v61 = v51;
                v140 = (v51 - 1);
                do
                {
                  if (*(unsigned __int8 *)(v53 + 28 * v60 + 3076) == a2[v58])
                  {
                    v62 = v53 + 28 * v60;
                    if ((*(_QWORD *)(v53 + 8 * *(unsigned __int8 *)(v62 + *(int *)(v62 + 3080) + 3083) + 1024) & 0x10) != 0)
                    {
                      if (v14 < 1)
                      {
                        v63 = 0;
                      }
                      else
                      {
                        v63 = 0;
                        v64 = (int *)(v62 + 3080);
                        v65 = v14;
                        v66 = a2;
                        v67 = v56;
                        do
                        {
                          if (v67)
                          {
                            __dst[v63] = *v66;
                          }
                          else
                          {
                            __dst[v63] = a2[v61];
                            __dst[++v63] = *(_BYTE *)(v53 + 28 * v60 + *v64 + 3083);
                          }
                          ++v63;
                          --v67;
                          ++v66;
                          --v65;
                        }
                        while (v65);
                      }
                      __dst[v63] = 0;
                      v68 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
                      v15 = v68;
                      if ((v68 & 0x80000000) != 0)
                        goto LABEL_279;
                      if ((_DWORD)v68)
                      {
                        *(_DWORD *)(a1 + 652) = 1;
                        v69 = __dst;
                      }
                      else
                      {
                        v69 = 0;
                      }
                      v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v69);
                      if ((int)v23 < 1)
                        goto LABEL_278;
                      v59 = *(_DWORD *)(v53 + 3072);
                      v52 = v14;
                      v58 = v140;
                    }
                  }
                  ++v60;
                }
                while (v60 < v59);
              }
            }
          }
        }
        v51 = v55;
      }
      while (v55 != v52);
      v40 = *(_QWORD *)(a1 + 8);
      v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      LODWORD(v3) = v142;
      v8 = v144;
      v11 = v147;
      if ((v40 & 0x20) == 0)
        goto LABEL_161;
    }
  }
  if (*(_DWORD *)(a1 + 632) && (*(_BYTE *)(a1 + 642) & 4) != 0)
  {
    if (v14 == 64)
    {
LABEL_160:
      v15 = 1;
      *(_DWORD *)(a1 + 16) = 1;
      goto LABEL_161;
    }
    if (v14 >= 1)
    {
      v77 = v14;
      v78 = a2;
      do
      {
        v79 = *v78++;
        if ((*(_QWORD *)(*(_QWORD *)a1 + 8 * v79 + 1024) & 0x19000) != 0)
          goto LABEL_160;
      }
      while (--v77);
    }
    __strcpy_chk();
    __dst[v14] = 46;
    __dst[v14 + 1] = 0;
    v80 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
    v15 = v80;
    if ((v80 & 0x80000000) != 0)
    {
LABEL_279:
      *(_DWORD *)(a1 + 16) = v15;
      return v15;
    }
    if ((_DWORD)v80)
    {
      *(_DWORD *)(a1 + 652) = 1;
      v81 = __dst;
    }
    else
    {
      v81 = 0;
    }
    v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v81);
    if ((int)v23 >= 1)
    {
      v40 = *(_QWORD *)(a1 + 8);
      goto LABEL_160;
    }
LABEL_278:
    v15 = v23;
    goto LABEL_279;
  }
LABEL_161:
  if ((v40 & 0x40) != 0 && (*(_BYTE *)(a1 + 640) & 0x40) != 0)
  {
    v82 = sugg_prepared(a1, a2, v14, v3, 1, v164, v166);
    v15 = v82;
    *(_DWORD *)(a1 + 16) = v82;
    if ((v82 & 0x80000000) != 0 || !(_DWORD)v82)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 8) & 0x80) != 0 && (*(_BYTE *)(a1 + 640) & 0x80) != 0)
  {
    v83 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)__n, v162);
    v15 = v83;
    *(_DWORD *)(a1 + 16) = v83;
    if ((v83 & 0x80000000) != 0 || !(_DWORD)v83)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 1) != 0 && (*(_BYTE *)(a1 + 641) & 1) != 0)
  {
    v84 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v157, SHIDWORD(v156));
    v15 = v84;
    *(_DWORD *)(a1 + 16) = v84;
    if ((v84 & 0x80000000) != 0 || !(_DWORD)v84)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 2) != 0 && (*(_BYTE *)(a1 + 641) & 2) != 0)
  {
    v85 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v155, v156);
    v15 = v85;
    *(_DWORD *)(a1 + 16) = v85;
    if ((v85 & 0x80000000) != 0 || !(_DWORD)v85)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 4) != 0 && (*(_BYTE *)(a1 + 641) & 4) != 0)
  {
    v86 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v154, SHIDWORD(v153));
    v15 = v86;
    *(_DWORD *)(a1 + 16) = v86;
    if ((v86 & 0x80000000) != 0 || !(_DWORD)v86)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 8) != 0 && (*(_BYTE *)(a1 + 641) & 8) != 0)
  {
    v87 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v152, v153);
    v15 = v87;
    *(_DWORD *)(a1 + 16) = v87;
    if ((v87 & 0x80000000) != 0 || !(_DWORD)v87)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 0x10) != 0 && (*(_BYTE *)(a1 + 641) & 0x10) != 0)
  {
    v88 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v151, v150);
    v15 = v88;
    *(_DWORD *)(a1 + 16) = v88;
    if ((v88 & 0x80000000) != 0 || !(_DWORD)v88)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 8) & 4) != 0 && *(_DWORD *)(a1 + 632) && (*(_BYTE *)(a1 + 640) & 0x20) != 0)
  {
    v148 = v11;
    v89 = *(_QWORD *)a1;
    __strncpy_chk();
    __dst[v14] = 0;
    if (v14 >= 1)
    {
      for (j = 0; v14 != j; ++j)
      {
        if (!(_DWORD)v3)
        {
          v91 = a2[j];
          v92 = *(_QWORD *)(v89 + 8 * v91 + 1024);
          if ((v92 & 4) != 0)
          {
            __dst[j] = *(_BYTE *)(v89 + v91);
            v93 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, 0);
            v15 = v93;
            if ((v93 & 0x80000000) != 0)
              goto LABEL_279;
            if ((_DWORD)v93)
            {
              *(_DWORD *)(a1 + 652) = 1;
              v94 = __dst;
            }
            else
            {
              v94 = 0;
            }
            v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v94);
            if ((int)v23 < 1)
              goto LABEL_278;
            v91 = a2[j];
            __dst[j] = v91;
            v92 = *(_QWORD *)(v89 + 8 * v91 + 1024);
          }
          if ((v92 & 2) != 0)
          {
            __dst[j] = *(_BYTE *)(v89 + v91 + 256);
            v95 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, 0);
            v15 = v95;
            if ((v95 & 0x80000000) != 0)
              goto LABEL_279;
            if ((_DWORD)v95)
            {
              *(_DWORD *)(a1 + 652) = 1;
              v96 = __dst;
            }
            else
            {
              v96 = 0;
            }
            v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v96);
            if ((int)v23 < 1)
              goto LABEL_278;
            __dst[j] = a2[j];
          }
        }
      }
    }
    v15 = 1;
    *(_DWORD *)(a1 + 16) = 1;
    v11 = v148;
  }
  if ((*(_BYTE *)(a1 + 9) & 0x20) != 0 && (*(_BYTE *)(a1 + 641) & 0x20) != 0)
  {
    v97 = sugg_prepared(a1, a2, v14, v3, 1, v149, v9);
    v15 = v97;
    *(_DWORD *)(a1 + 16) = v97;
    if ((v97 & 0x80000000) != 0 || !(_DWORD)v97)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 0x40) != 0 && (*(_BYTE *)(a1 + 641) & 0x40) != 0)
  {
    v98 = sugg_prepared(a1, a2, v14, v3, 1, (uint64_t)v11, v8);
    v15 = v98;
    *(_DWORD *)(a1 + 16) = v98;
    if ((v98 & 0x80000000) != 0 || !(_DWORD)v98)
      return v15;
    v15 = 1;
  }
  if ((*(_BYTE *)(a1 + 9) & 0x80) != 0 && (*(_BYTE *)(a1 + 642) & 2) != 0)
  {
    memset(v168, 0, sizeof(v168));
    v99 = a1 + 24;
    v167 = cdict_size(a1 + 24);
    if (v14 > (int)v3)
    {
      v158 = v3 - 1;
      v3 = (int)v3;
      do
      {
        if (v167 >= 1)
        {
          for (k = 0; k != v167; ++k)
          {
            cdict_access(a1 + 24, k, (uint64_t)v168);
            v101 = *(_QWORD *)&v168[0] + SDWORD2(v168[0]);
            v104 = *(unsigned __int8 *)(v101 + 20);
            v103 = v101 + 20;
            v102 = v104;
            v105 = &a2[v3];
            if (v104)
            {
              while (v102 == *v105)
              {
                v106 = *(unsigned __int8 *)++v103;
                v102 = v106;
                ++v105;
                if (!v106)
                  goto LABEL_237;
              }
            }
            else
            {
LABEL_237:
              if (v3 < 1)
              {
                v107 = 0;
              }
              else
              {
                memcpy(__dst, a2, v3);
                v107 = v158 + 1;
              }
              v108 = *(_BYTE *)(v103 + 1);
              if (v108)
              {
                v109 = (unsigned __int8 *)(v103 + 2);
                v110 = v3 & ~((int)v3 >> 31);
                do
                {
                  v107 = v110 + 1;
                  __dst[v110] = v108;
                  v111 = *v109++;
                  v108 = v111;
                  ++v110;
                }
                while (v111);
              }
              v112 = v107;
              do
              {
                v113 = *v105++;
                __dst[v112++] = v113;
              }
              while (v113);
              v114 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
              v15 = v114;
              if ((v114 & 0x80000000) != 0)
                goto LABEL_279;
              if ((_DWORD)v114)
              {
                *(_DWORD *)(a1 + 652) = 1;
                v115 = __dst;
              }
              else
              {
                v115 = 0;
              }
              v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v115);
              if ((int)v23 < 1)
                goto LABEL_278;
            }
          }
        }
        ++v3;
        ++v158;
      }
      while ((_DWORD)v3 != v14);
    }
    if (v14 >= 1)
    {
      v116 = 0;
      v159 = v14;
      v117 = -1;
      v118 = __dst;
      do
      {
        v165 = v116;
        __na = v117 + 1;
        if (v167 >= 1)
        {
          v119 = 0;
          v163 = &a2[v116];
          do
          {
            v120 = v99;
            cdict_access(v99, v119, (uint64_t)v168);
            v121 = *(_QWORD *)&v168[0];
            v122 = SDWORD2(v168[0]);
            v123 = *(_QWORD *)&v168[0] + SDWORD2(v168[0]);
            v124 = (_BYTE *)(v123 + 20);
            v125 = (unsigned __int8 *)(v123 + 22);
            v126 = (unsigned __int8 *)(v123 + 20);
            do
            {
              v127 = v125;
              v128 = *v126++;
              ++v125;
            }
            while (v128);
            v129 = *v126;
            v130 = v163;
            if (v129)
            {
              while (v129 == *v130)
              {
                ++v130;
                v131 = *v127++;
                v129 = v131;
                if (!v131)
                  goto LABEL_261;
              }
            }
            else
            {
LABEL_261:
              if (v165)
              {
                memcpy(__dst, a2, v165);
                v132 = __na;
              }
              else
              {
                v132 = 0;
              }
              LOBYTE(v133) = *v124;
              if (*v124)
              {
                v134 = 0;
                do
                {
                  v118[v134] = v133;
                  v133 = *(unsigned __int8 *)(v121 + v122 + 21 + v134++);
                }
                while (v133);
                v132 = v165 + v134;
              }
              v135 = v132;
              do
              {
                v136 = *v130++;
                __dst[v135++] = v136;
              }
              while (v136);
              v137 = (*(uint64_t (**)(_QWORD, char *, _QWORD))(a1 + 616))(*(_QWORD *)(a1 + 600), __dst, *(unsigned int *)(a1 + 648));
              v15 = v137;
              if ((v137 & 0x80000000) != 0)
                goto LABEL_279;
              if ((_DWORD)v137)
              {
                *(_DWORD *)(a1 + 652) = 1;
                v138 = __dst;
              }
              else
              {
                v138 = 0;
              }
              v23 = (*(uint64_t (**)(_QWORD, char *))(a1 + 624))(*(_QWORD *)(a1 + 608), v138);
              if ((int)v23 < 1)
                goto LABEL_278;
            }
            ++v119;
            v99 = v120;
          }
          while (v119 != v167);
        }
        v116 = v165 + 1;
        ++v118;
        v117 = __na;
      }
      while (v165 + 1 != v159);
    }
    v15 = 1;
    goto LABEL_279;
  }
  return v15;
}

uint64_t sugg_prepared(uint64_t a1, char *a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  char *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  unsigned __int8 **v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char *v30;
  unsigned __int8 *v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v41;
  char __dst[65];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (a4 < a3)
  {
    v9 = *(_QWORD *)a1;
    v41 = a4 - 1;
    v10 = a4;
    v11 = a7;
    v39 = a7;
    do
    {
      if (a7 >= 1)
      {
        v12 = 0;
        while (1)
        {
          v13 = *(_BYTE **)(a6 + 16 * v12);
          v14 = *v13;
          v15 = &a2[v10];
          if (*v13)
          {
            v16 = v13 + 1;
            v15 = &a2[v10];
            while (*(unsigned __int8 *)(v9 + v14 + 768) == *v15)
            {
              ++v15;
              v17 = *v16++;
              v14 = v17;
              if (!v17)
                goto LABEL_9;
            }
          }
          else
          {
LABEL_9:
            if (v10 < 1)
            {
              LODWORD(v18) = 0;
            }
            else
            {
              memcpy(__dst, a2, v10);
              LODWORD(v18) = v41 + 1;
            }
            v19 = *(_BYTE **)(a6 + 16 * v12 + 8);
            v20 = *v19;
            if (*v19)
            {
              v21 = v19 + 1;
              v18 = v10 & ~((int)v10 >> 31);
              do
              {
                __dst[v18++] = *(_BYTE *)(v9 + v20 + 768);
                v22 = *v21++;
                v20 = v22;
              }
              while (v22);
            }
            v23 = v18;
            v18 = v18;
            do
            {
              v24 = *v15++;
              __dst[v18++] = v24;
            }
            while (v24);
            result = try_f(a1, __dst, v23, *(unsigned int *)(a1 + 648), a5);
            if ((int)result < 1)
              return result;
          }
          if (++v12 == v11)
          {
            v26 = 0;
            while (1)
            {
              v27 = (unsigned __int8 **)(a6 + 16 * v26);
              v28 = v27[1];
              v29 = *v28;
              v30 = &a2[v10];
              if (*v28)
              {
                v31 = v28 + 1;
                v30 = &a2[v10];
                while (*(unsigned __int8 *)(v9 + v29 + 768) == *v30)
                {
                  ++v30;
                  v32 = *v31++;
                  v29 = v32;
                  if (!v32)
                    goto LABEL_24;
                }
              }
              else
              {
LABEL_24:
                if (v10 < 1)
                {
                  LODWORD(v33) = 0;
                }
                else
                {
                  memcpy(__dst, a2, v10);
                  LODWORD(v33) = v41 + 1;
                }
                v34 = **v27;
                if (**v27)
                {
                  v35 = *v27 + 1;
                  v33 = v10 & ~((int)v10 >> 31);
                  do
                  {
                    __dst[v33++] = *(_BYTE *)(v9 + v34 + 768);
                    v36 = *v35++;
                    v34 = v36;
                  }
                  while (v36);
                }
                v37 = v33;
                v33 = v33;
                do
                {
                  v38 = *v30++;
                  __dst[v33++] = v38;
                }
                while (v38);
                result = try_f(a1, __dst, v37, *(unsigned int *)(a1 + 648), a5);
                if ((int)result < 1)
                  return result;
              }
              if (++v26 == v11)
                goto LABEL_34;
            }
          }
        }
      }
LABEL_34:
      ++v10;
      ++v41;
      a7 = v39;
    }
    while ((_DWORD)v10 != a3);
  }
  return 1;
}

uint64_t sugg_capitalize1(uint64_t *a1, unsigned __int8 *a2, int a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char __s[65];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v10 = *a1;
  __strncpy_chk();
  __s[a3] = 0;
  if (a4)
    return 1;
  v12 = *a2;
  v13 = *(_QWORD *)(v10 + 8 * v12 + 1024);
  if ((v13 & 4) != 0)
  {
    __s[0] = *(_BYTE *)(v10 + v12);
    result = try_f((uint64_t)a1, __s, 0, 0, a5);
    if ((int)result < 1)
      return result;
    v12 = *a2;
    v13 = *(_QWORD *)(v10 + 8 * v12 + 1024);
  }
  if ((v13 & 2) == 0)
    return 1;
  __s[0] = *(_BYTE *)(v10 + v12 + 256);
  LODWORD(result) = try_f((uint64_t)a1, __s, 0, 0, a5);
  if ((int)result >= 1)
    return 1;
  else
    return result;
}

uint64_t try_f(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, int a5)
{
  const char *v6;
  int he_language;
  int v10;
  uint64_t v11;
  char **v12;
  uint64_t v13;
  char **v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  const char *v23;
  uint64_t (*v24)(uint64_t, const char *);
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  char **v33;
  char **v34;
  unsigned int v35;

  v6 = __s;
  if (a5 == 2)
  {
    v15 = strchr(__s, 32);
    if (!v15)
      return 1;
    v16 = v15;
    if (v15 > v6 && (LOBYTE(v17) = *(v15 - 1), strchr(try_2_words_punctu, (char)v17)))
    {
      v17 = v17;
      *(v16 - 1) = 0;
    }
    else
    {
      v17 = 0;
    }
    v21 = *v16;
    *v16 = 0;
    v20 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(a1 + 616))(*(_QWORD *)(a1 + 600), v6, a4);
    if ((v20 & 0x80000000) != 0)
      return v20;
    v22 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(a1 + 616))(*(_QWORD *)(a1 + 600), &v6[(int)v16 - (int)v6 + 1], a4);
    if ((v22 & 0x80000000) != 0)
      return v22;
    *v16 = v21;
    if (v17)
      *(v16 - 1) = v17;
    v23 = 0;
    if ((_DWORD)v20 && (_DWORD)v22)
    {
      *(_DWORD *)(a1 + 652) = 1;
      v23 = v6;
    }
    v24 = *(uint64_t (**)(uint64_t, const char *))(a1 + 624);
    v25 = *(_QWORD *)(a1 + 608);
    return v24(v25, v23);
  }
  if (a5 == 3)
    return suggest_1_corr(a1, __s, a3);
  if (a5 != 4)
  {
    v19 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(a1 + 616))(*(_QWORD *)(a1 + 600), __s, a4);
    v20 = v19;
    if ((v19 & 0x80000000) != 0)
      return v20;
    if ((_DWORD)v19)
      *(_DWORD *)(a1 + 652) = 1;
    else
      v6 = 0;
    v24 = *(uint64_t (**)(uint64_t, const char *))(a1 + 624);
    v25 = *(_QWORD *)(a1 + 608);
    v23 = v6;
    return v24(v25, v23);
  }
  he_language = get_he_language(*(_QWORD *)a1);
  if (he_language == 14)
  {
    v10 = 3;
    v35 = 4;
    v13 = 10;
    v11 = 2;
    v33 = corr_typewriter_hun;
    v34 = corr_more_accents_hun;
    v12 = corr_accents_hun;
    v14 = corr_y_z_hun;
  }
  else if (he_language == 21)
  {
    v10 = 3;
    v35 = 20;
    v33 = corr_typewriter_pol;
    v34 = corr_more_accents_pol;
    v11 = 2;
    v12 = corr_accents_pol;
    v13 = 2;
    v14 = corr_y_z_pol;
  }
  else
  {
    v14 = 0;
    v12 = 0;
    v33 = 0;
    v34 = 0;
    v11 = 0;
    v13 = 0;
    v35 = 0;
    v10 = 0;
  }
  v26 = strlen(v6);
  if ((int)v26 > 64)
    return 4294966286;
  v32 = v10;
  v27 = (*(uint64_t (**)(_QWORD, const char *, uint64_t))(a1 + 616))(*(_QWORD *)(a1 + 600), v6, a4);
  v20 = v27;
  if ((v27 & 0x80000000) == 0)
  {
    v28 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v27 || (int)v28 < 1)
    {
      return *(unsigned int *)(a1 + 16);
    }
    else
    {
      if ((*(_BYTE *)(a1 + 640) & 0x40) != 0)
      {
        v29 = sugg_prepared(a1, v6, v26, a3, 1, v14, v11);
        v20 = v29;
        *(_DWORD *)(a1 + 16) = v29;
        if ((v29 & 0x80000000) != 0 || !(_DWORD)v29)
          return v20;
        v28 = 1;
      }
      if ((*(_BYTE *)(a1 + 641) & 1) != 0)
      {
        v30 = sugg_prepared(a1, v6, v26, a3, 1, v12, v13);
        v20 = v30;
        *(_DWORD *)(a1 + 16) = v30;
        if ((v30 & 0x80000000) != 0 || !(_DWORD)v30)
          return v20;
        v28 = 1;
      }
      if ((*(_BYTE *)(a1 + 641) & 2) != 0)
      {
        v31 = sugg_prepared(a1, v6, v26, a3, 1, v34, v35);
        v20 = v31;
        *(_DWORD *)(a1 + 16) = v31;
        if ((v31 & 0x80000000) != 0 || !(_DWORD)v31)
          return v20;
        v28 = 1;
      }
      v20 = v28;
      if ((*(_BYTE *)(a1 + 641) & 0x40) != 0)
      {
        v20 = sugg_prepared(a1, v6, v26, a3, 1, v33, v32);
        *(_DWORD *)(a1 + 16) = v20;
      }
    }
  }
  return v20;
}

uint64_t PRAltMod(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  unsigned __int8 *v23;
  char v24;
  unsigned __int8 *v25;
  unsigned int v26;
  int v27;
  int v28;
  size_t v29;
  int v30;
  int v31;
  unsigned __int16 *v32;
  unsigned int v33;
  int v34;
  int v35;
  char v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned __int16 v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  _BOOL4 v51;
  _BOOL4 v52;
  int v53;
  BOOL v54;
  BOOL v55;
  char v56;
  char v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char v64;
  unsigned int v65;
  char v66;
  int v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char v71;
  unsigned int v72;
  char v73;
  uint64_t result;
  const char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  const char *v83;
  unsigned int v84;
  int v85;
  __int16 v86;
  uint64_t v87;
  unsigned int v88;
  int v89;
  int v90;
  char v91;
  BOOL v92;
  BOOL v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char v98;
  unsigned int v99;
  char v100;
  int v101;
  int v102;
  int v103;
  unsigned __int8 *v104;
  unsigned int v105;
  int v106;
  __int16 v107;
  const char *v108;
  int v109;
  int v110;
  int v112;
  int v113;
  BOOL v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  char v120;
  int v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unsigned int v126;
  int v127;
  int v128;
  unsigned int v129;
  int v130;
  unsigned __int8 *v131;
  int v132;
  int v133;
  unsigned int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  unsigned int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  uint64_t v150;
  unsigned __int16 v151;
  int v152;
  int v153;
  __int16 v154;
  unsigned int v155;
  int v156;
  int v157;
  uint64_t v158;
  unsigned int v159;
  unsigned int v160;
  unsigned __int16 v161;
  uint64_t *v162;
  uint64_t v163;
  int v164[2];
  int v165;
  int v166;
  int v167;
  char *__s;
  uint64_t v169;
  unsigned __int16 v170;
  uint64_t v171;
  unsigned __int16 v172;
  int v173;
  char v174;
  uint64_t v176;
  int v177;
  int v178;
  unsigned __int16 v179;
  int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184[2];
  int v185;
  char *v186[3];
  char v187[128];
  char v188[128];
  char v189[65];
  uint64_t v190;

  v190 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 8);
  v185 = 0;
  *(_QWORD *)v184 = 0;
  v8 = *(_QWORD *)(a1 + 16);
  v179 = 0;
  v178 = 14707757;
  if (*(_BYTE *)(a2 + 20) == 5)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = *(unsigned __int16 *)(v9 + 32);
    if (v10 >= 4
      && (!SLstrcmp((_BYTE *)(*(_QWORD *)(v9 + 16) + (v10 - 3)), "-ci")
       || !SLstrcmp((_BYTE *)(*(unsigned __int16 *)(*(_QWORD *)(a4 + 24) + 32)+ *(_QWORD *)(*(_QWORD *)(a4 + 24) + 16)- 3), (unsigned __int8 *)&v178)))
    {
      *(_WORD *)(a3 + 2) -= 3;
      if (*(_WORD *)(a3 + 6))
        *(_WORD *)(a3 + 6) -= 3;
    }
  }
  v11 = *(uint64_t **)(a3 + 24);
  if (!v11)
    return 0;
  v163 = *((unsigned __int16 *)v11 + 9);
  if (!*((_WORD *)v11 + 9) || !*(_QWORD *)(a2 + 120))
    return 0;
  v12 = *(_QWORD *)(a4 + 16);
  v13 = *(_QWORD *)(v8 + 64);
  if (v12 == v13)
    goto LABEL_17;
  v14 = *(_QWORD *)(v12 + 72);
  if (!v14)
  {
LABEL_18:
    v174 = 1;
    goto LABEL_19;
  }
  if ((*(_WORD *)(v14 + 4) & 0x7080) == 0)
  {
LABEL_17:
    v14 = 0;
    goto LABEL_18;
  }
  if (v14 == v13)
  {
    v174 = 0;
    v14 = *(_QWORD *)(v8 + 64);
  }
  else
  {
    v15 = *(_QWORD *)(v14 + 72);
    if (v15)
    {
      v174 = 0;
      if ((*(_WORD *)(v15 + 4) & 0x7080) != 0)
        goto LABEL_20;
    }
    else
    {
      v174 = 0;
    }
  }
LABEL_19:
  v15 = 0;
LABEL_20:
  v158 = v15;
  v171 = v14;
  v141 = a3;
  v150 = a4;
  v16 = *(_QWORD *)(*(_QWORD *)(a4 + 24) + 80);
  if (!v16 || (*(_WORD *)(v16 + 4) & 0x7080) == 0)
    v16 = 0;
  v142 = v16;
  v17 = 0;
  v166 = 0;
  v18 = 0;
  memset(v186, 0, sizeof(v186));
  v182 = 0;
  v183 = 0;
  v180 = 0;
  v181 = 0;
  v162 = v11;
LABEL_24:
  while (1)
  {
    v176 = *v11;
    v169 = *(__int16 *)(v11[1] + 2 * v17);
    v19 = (char *)(*v11 + v169);
    v20 = *(_QWORD *)(a2 + 8);
    v21 = *v19;
    if ((*(_DWORD *)(v20 + 4 * v21) & 0x60000040) != 0)
    {
      v22 = 0;
      v23 = (unsigned __int8 *)(v19 - 1);
      v24 = 1;
      v25 = (unsigned __int8 *)(*v11 + v169);
      while (v21 >= 45)
      {
        if (v21 > 45)
        {
          if (v21 == 46)
          {
            v24 = 0;
            ++v22;
            goto LABEL_50;
          }
          if (v21 == 133 || v21 == 151)
          {
LABEL_42:
            v24 = 0;
            goto LABEL_50;
          }
        }
        else if (*(v25 - 1) == 45)
        {
          --v22;
          goto LABEL_50;
        }
LABEL_29:
        if ((*(_DWORD *)(v20 + 4 * v21) & 0x60000040) == 0)
          v24 = 0;
        v26 = *++v25;
        v21 = v26;
        ++v22;
        ++v23;
      }
      if (v21 <= 31)
      {
        if (!v21)
        {
          v25 = 0;
          goto LABEL_50;
        }
        if (v21 == 9)
          goto LABEL_42;
        goto LABEL_29;
      }
      if (v21 != 32)
      {
        if (v21 == 44)
          goto LABEL_42;
        goto LABEL_29;
      }
      do
      {
        v28 = *++v23;
        v27 = v28;
      }
      while (v28 == 32);
      v25 = v27 ? v23 : 0;
LABEL_50:
      v29 = *(_QWORD *)(a2 + 128);
      *(_DWORD *)(v29 + 1308) = 0;
      *(_DWORD *)(v29 + 1408) = 1;
      *(_BYTE *)(v29 + 1339) = 0;
      v30 = (v22 & 0xFFC0) != 0 ? 64 : v22;
      __strncpy_chk();
      v189[v30] = 0;
      v31 = PRIcs(a1, a2, 0, 0, 0, v189, 0, v29, 3, 0);
      if (v31 != 11)
        break;
    }
LABEL_250:
    ++v17;
    v11 = v162;
    if (v17 == v163)
    {
      if ((_BYTE)v166)
        goto LABEL_369;
      return 0;
    }
  }
  __s = v19;
  if (v31 == 8)
    goto LABEL_372;
  v32 = *(unsigned __int16 **)(*(_QWORD *)(v29 + 3184) + 288);
  v33 = *v32;
  v34 = v32[6] & 0xF | (((v33 >> 8) & 3) << 6) | (v33 >> 6) & 0x30;
  v35 = *(unsigned __int8 *)(a2 + 20);
  if (v35 != 9)
  {
    if (v35 == 8)
    {
      v36 = 0;
      if ((v33 & 0x10) != 0)
      {
        v37 = 15;
        goto LABEL_85;
      }
    }
    else
    {
      v36 = 0;
    }
    goto LABEL_86;
  }
  v38 = *(unsigned __int8 *)(v29 + 1547);
  v36 = 1;
  if (v38 <= 0x66)
  {
    if (*(unsigned __int8 *)(v29 + 1547) > 0x52u)
    {
      if (v38 != 83)
      {
        if (v38 != 88 && v38 != 90)
          goto LABEL_86;
        goto LABEL_79;
      }
LABEL_81:
      v36 = 1;
      if ((*(_DWORD *)(v20 + 4 * *(unsigned __int8 *)(v29 + 1548)) & 0x60000040) == 0
        || (*(_DWORD *)(v20 + 4 * *(unsigned __int8 *)(v29 + 1548)) & 0x10000000) != 0)
      {
        goto LABEL_86;
      }
      goto LABEL_83;
    }
    if (v38 != 71)
    {
      if (v38 != 80)
        goto LABEL_86;
      goto LABEL_76;
    }
LABEL_78:
    if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) == 0x6E)
      goto LABEL_79;
    goto LABEL_80;
  }
  if (*(unsigned __int8 *)(v29 + 1547) <= 0x72u)
  {
    if (v38 == 103)
      goto LABEL_78;
    if (v38 != 112)
      goto LABEL_86;
LABEL_76:
    if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) == 0x73)
      goto LABEL_79;
LABEL_80:
    v36 = 1;
    goto LABEL_86;
  }
  if (v38 == 115)
    goto LABEL_81;
  if (v38 != 120 && v38 != 122)
    goto LABEL_86;
LABEL_79:
  v36 = 1;
LABEL_83:
  if ((v33 & 0x400) != 0)
  {
    v37 = 256;
LABEL_85:
    v34 |= v37;
  }
LABEL_86:
  v39 = *(unsigned __int8 *)(v29 + 1547) | 0x20;
  if (v39 == 101)
    v34 |= 0x200u;
  if (v39 == 105)
    v40 = v34 | 0x400;
  else
    v40 = v34;
  v167 = *(unsigned __int8 *)(v29 + 1614);
  if (*(_BYTE *)(v29 + 1614))
  {
    v41 = v40;
    v42 = strlen((const char *)(v29 + 1614));
    v43 = v41;
    LODWORD(v44) = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v24 = 1;
LABEL_93:
    v49 = *(unsigned __int8 *)(v29 + 1614);
    goto LABEL_94;
  }
  v42 = *(_WORD *)(v29 + 1612);
  if (!v24)
  {
    LODWORD(v44) = 0;
    v152 = 0;
    v121 = 0;
    v49 = 0;
    goto LABEL_271;
  }
  if (!v25)
  {
    if (!v142)
    {
      LODWORD(v44) = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v24 = 1;
      v48 = v40;
      v43 = 0;
      goto LABEL_93;
    }
    v49 = 0;
    if ((*(_BYTE *)(v142 + 94) & 2) != 0)
    {
      LODWORD(v44) = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      v24 = 1;
      v48 = v40;
      v43 = 0;
      goto LABEL_94;
    }
    v129 = *(unsigned __int16 *)(v142 + 98);
    v130 = (v129 >> 2) & 0xC0 | (v129 >> 6) & 0x30;
    v131 = *(unsigned __int8 **)(v142 + 16);
    if ((v36 & 1) == 0)
    {
      v132 = *v131;
      goto LABEL_348;
    }
    v132 = *v131;
    if (!*(_WORD *)(v142 + 32))
    {
LABEL_348:
      v137 = v132 | 0x20;
      if (v137 == 101)
        v130 |= 0x200u;
      LODWORD(v44) = 0;
      v45 = 0;
      v46 = 0;
      v47 = 0;
      if (v137 == 105)
      {
        v48 = v40;
        v43 = v130 | 0x400;
        v24 = 1;
      }
      else
      {
        v24 = 1;
        v48 = v40;
        v43 = v130;
      }
      goto LABEL_94;
    }
    if (*v131 > 0x66u)
    {
      if (*v131 > 0x72u)
      {
        if (v132 != 115)
        {
          if (v132 != 120 && v132 != 122)
            goto LABEL_348;
          goto LABEL_346;
        }
        goto LABEL_344;
      }
      if (v132 != 103)
      {
        if (v132 != 112)
          goto LABEL_348;
LABEL_342:
        if ((v131[1] | 0x20) == 0x73)
          goto LABEL_346;
        goto LABEL_348;
      }
    }
    else
    {
      if (*v131 > 0x52u)
      {
        if (v132 != 83)
        {
          if (v132 != 88 && v132 != 90)
            goto LABEL_348;
LABEL_346:
          if ((v129 & 0x400) != 0)
            v130 |= 0x100u;
          goto LABEL_348;
        }
LABEL_344:
        if ((*(_DWORD *)(v20 + 4 * v131[1]) & 0x60000040) == 0
          || (*(_DWORD *)(v20 + 4 * v131[1]) & 0x10000000) != 0)
        {
          goto LABEL_348;
        }
        goto LABEL_346;
      }
      if (v132 != 71)
      {
LABEL_341:
        if (v132 != 80)
          goto LABEL_348;
        goto LABEL_342;
      }
    }
    if ((v131[1] | 0x20) == 0x6E)
      goto LABEL_346;
    goto LABEL_341;
  }
  v118 = *v25;
  if ((*(_DWORD *)(v20 + 4 * v118) & 0x60000040) == 0)
  {
    LODWORD(v44) = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v24 = 0;
    v48 = v40;
    v43 = 0;
    goto LABEL_93;
  }
  v119 = 0;
  v173 = (_DWORD)v25 - (_DWORD)__s;
  v161 = *(_WORD *)(v29 + 1612);
  v165 = v40;
  while (2)
  {
    if (v118 > 0x2Eu)
      goto LABEL_263;
    if (v118 == 45)
    {
      if (*(v25 - 1) == 45)
      {
        v136 = v119 - 1;
        goto LABEL_299;
      }
LABEL_264:
      v189[(unsigned __int16)v119] = v118;
      v120 = *++v25;
      LOBYTE(v118) = v120;
      ++v119;
      continue;
    }
    break;
  }
  if (((1 << v118) & 0x100100000201) != 0)
    goto LABEL_298;
  if (v118 != 46)
  {
LABEL_263:
    if (v118 == 133 || v118 == 151)
    {
LABEL_298:
      v136 = v119;
      goto LABEL_299;
    }
    goto LABEL_264;
  }
  v189[(unsigned __int16)v119] = 46;
  v136 = v119 + 1;
LABEL_299:
  v152 = v136;
  v189[(unsigned __int16)v136] = 0;
  v133 = PRIcs(a1, a2, 0, 0, 0, v189, 0, v29, 3, 0);
  if (v133 == 11)
  {
    LODWORD(v44) = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v24 = 0;
    v48 = v165;
    v43 = 0;
    v49 = 0;
    v42 = v161;
  }
  else
  {
    v40 = v165;
    if (v133 == 8)
    {
LABEL_372:
      v140 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)v140 = 0xDC000000A0;
      *(_WORD *)(v140 + 8) = 900;
      return 220;
    }
    if (*(_BYTE *)(v29 + 1614))
    {
      LODWORD(v44) = 0;
      v152 = 0;
      v121 = 0;
      v35 = *(unsigned __int8 *)(a2 + 20);
      v49 = 0;
      v42 = v161;
      goto LABEL_271;
    }
    v134 = *v32;
    v121 = v32[6] & 0xF | (((v134 >> 8) & 3) << 6) | (v134 >> 6) & 0x30;
    v35 = *(unsigned __int8 *)(a2 + 20);
    v135 = *(unsigned __int8 *)(v29 + 1547);
    if (v35 != 9)
    {
      v49 = 0;
      LODWORD(v44) = v173;
      v42 = v161;
      goto LABEL_363;
    }
    LODWORD(v44) = v173;
    if (*(unsigned __int8 *)(v29 + 1547) > 0x66u)
    {
      v42 = v161;
      if (*(unsigned __int8 *)(v29 + 1547) > 0x72u)
      {
        if (v135 != 115)
        {
          if (v135 == 120 || v135 == 122)
            goto LABEL_356;
LABEL_362:
          v49 = 0;
          goto LABEL_363;
        }
LABEL_358:
        v138 = *(_DWORD *)(v20 + 4 * *(unsigned __int8 *)(v29 + 1548));
        if ((v138 & 0x60000040) == 0)
          goto LABEL_362;
        v49 = 0;
        if ((v138 & 0x10000000) == 0)
          goto LABEL_360;
        goto LABEL_363;
      }
      if (v135 != 103)
      {
        if (v135 != 112)
          goto LABEL_362;
LABEL_355:
        if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) != 0x73)
          goto LABEL_362;
        goto LABEL_356;
      }
LABEL_353:
      if ((*(unsigned __int8 *)(v29 + 1548) | 0x20) == 0x6E)
        goto LABEL_356;
LABEL_354:
      if (v135 != 80)
        goto LABEL_362;
      goto LABEL_355;
    }
    v42 = v161;
    if (*(unsigned __int8 *)(v29 + 1547) <= 0x52u)
    {
      if (v135 == 71)
        goto LABEL_353;
      goto LABEL_354;
    }
    if (v135 == 83)
      goto LABEL_358;
    if (v135 != 88 && v135 != 90)
      goto LABEL_362;
LABEL_356:
    v49 = 0;
LABEL_360:
    if ((v134 & 0x400) != 0)
      v121 |= 0x100u;
LABEL_363:
    v139 = v135 | 0x20;
    if (v139 == 101)
      v121 |= 0x200u;
    if (v139 == 105)
      v121 |= 0x400u;
LABEL_271:
    v46 = 0;
    if (v35 == 12 && v25)
    {
      v122 = v25 - 1;
      v46 = (_DWORD)v25 - 1 - (v176 + v169);
      v123 = v25 + 1;
      do
      {
        v124 = v123;
        v126 = *++v122;
        v125 = v126;
        ++v46;
        ++v123;
      }
      while (v126 == 32);
      if ((*(_DWORD *)(v20 + 4 * v125) & 0x60000040) != 0)
      {
        v127 = 0;
        while (1)
        {
          if (v125 <= 0x2E)
          {
            if (v125 == 45)
            {
              if (*(v124 - 2) == 45)
                goto LABEL_303;
              goto LABEL_284;
            }
            if (((1 << v125) & 0x500100000201) != 0)
              goto LABEL_303;
          }
          if ((_DWORD)v125 == 133 || (_DWORD)v125 == 151)
          {
LABEL_303:
            v48 = v40;
            v43 = v121;
            v45 = v152;
            v47 = v127;
            goto LABEL_94;
          }
LABEL_284:
          v189[(unsigned __int16)v127++] = v125;
          v128 = *v124++;
          LODWORD(v125) = v128;
        }
      }
      v46 = 0;
      v47 = 0;
      v48 = v40;
      v43 = v121;
    }
    else
    {
      v47 = 0;
      v48 = v40;
      v43 = v121;
    }
    v45 = v152;
  }
LABEL_94:
  v154 = v48;
  LOBYTE(v50) = 0;
  v51 = (v43 & 0xF) != 0;
  v156 = (2 * v51) | (v43 >> 8) & 1 | (v43 >> 2) & 0x3C;
  v146 = (2 * v51) & 0xF | (v43 >> 8) & 1 | (v43 >> 2) & 0xC;
  v147 = (v43 >> 2) & 0x30;
  v52 = (v48 & 0xF) != 0;
  v149 = (v48 >> 2) & 0x30;
  v157 = (2 * v52) | (v48 >> 8) & 1 | (v48 >> 2) & 0x3C;
  v145 = v43 & 0xC0;
  v143 = (2 * v52) & 0xF | (v48 >> 8) & 1 | (v48 >> 2) & 0xC;
  v155 = v43 & 0x30;
  v153 = v48 & 0xF;
  v177 = 1;
  v148 = 1 << ((v48 & 0xF) - 1);
  v144 = v48 & 0x600;
  v170 = v47;
  v160 = v47 + v46;
  v151 = v45;
  v159 = v45 + v44;
  *(_QWORD *)v164 = v42;
  v172 = v44;
  while (2)
  {
    v53 = *(unsigned __int8 *)(a2 + 20);
    if (v53 == 12)
    {
      if (!(_BYTE)v50 && !v170)
      {
        LOBYTE(v50) = 1;
LABEL_106:
        v55 = v50 == 1 && (unsigned __int16)v44 == 0;
        if (!v55
          || ((v54 = v53 == 12, v56 = v174, v54) ? (LOBYTE(v50) = 1) : (v56 = 1, LOBYTE(v50) = 2), (v56 & 1) != 0))
        {
          if (v49)
            goto LABEL_116;
          goto LABEL_124;
        }
        goto LABEL_123;
      }
      if (v50 == 2)
        goto LABEL_121;
      if (v50 != 3)
        goto LABEL_106;
    }
    else
    {
      if ((v50 & 0xFE) != 0)
        v50 = v50;
      else
        v50 = 1;
      v54 = v50 == 3 && v53 == 8;
      if (!v54)
        goto LABEL_106;
    }
    if ((v174 & 1) != 0)
    {
LABEL_121:
      LOBYTE(v50) = 6;
      if (v49)
        goto LABEL_116;
      goto LABEL_124;
    }
LABEL_123:
    v44 = *(unsigned __int16 *)(v171 + 32);
    __strncpy_chk();
    v18 = v44;
    v188[v44] = 0;
    SLfun((uint64_t)v188, 0, (__int16)(v44 - 1), (unsigned __int16 *)&v185 + 1, &v185);
    LOBYTE(v50) = 6;
    LOWORD(v44) = v172;
    if (v49)
    {
LABEL_116:
      if ((v50 & 0xF8) == 0)
        LOBYTE(v50) = 7;
      goto LABEL_128;
    }
LABEL_124:
    v57 = v174;
    if (v50 <= 1u)
      v57 = 0;
    if (v50 > 6u || (v57 & 1) != 0)
      goto LABEL_250;
LABEL_128:
    v58 = 0;
    switch((char)v50)
    {
      case 0:
      case 1:
        if ((_BYTE)v50)
          v59 = v159;
        else
          v59 = v160;
        if ((_WORD)v59)
        {
          v60 = (unsigned __int16)v59;
          v61 = v188;
          v62 = (unsigned __int16)v59;
          v63 = __s;
          do
          {
            v65 = *v63++;
            v64 = v65;
            v66 = v65 + 32;
            if ((*(_DWORD *)(v7 + 4 * v65) & 0x40000000) != 0)
              v64 = v66;
            *v61++ = v64;
            --v62;
          }
          while (v62);
        }
        else
        {
          v60 = 0;
        }
        v188[v60] = 0;
        SLfun((uint64_t)v188, 0, (__int16)(v59 - 1), (unsigned __int16 *)&v185 + 1, &v185);
        result = PRAltHsh(HIWORD(v185), (unsigned __int16)v185, v59, 2 * (v50 != 0), a1, a2, (char **)v184, v187);
        if (!(_DWORD)result)
        {
          v108 = *(const char **)v184;
          if (!*(_QWORD *)v184)
          {
            v18 = v59;
            v49 = v167;
            goto LABEL_240;
          }
          if (v50 <= 1u
            && !SLstrcmp(*(_BYTE **)v184, *(unsigned __int8 **)(*(_QWORD *)(v150 + 16) + 16)))
          {
            v18 = v59;
            v49 = v167;
            goto LABEL_214;
          }
          result = PRSetTmpAlt(v164[0], v172, v151, (unsigned __int16)v46, v170, __s, v108, v50, v17, v158, v171, (uint64_t)v186, (uint64_t)&v182, (uint64_t)&v180, &v179, a1, a2);
          if (!(_DWORD)result)
            goto LABEL_268;
        }
        return result;
      case 2:
        v44 = *(unsigned __int16 *)(v171 + 32);
        __strncpy_chk();
        v188[v44] = 32;
        v67 = v44 + 1;
        if (v164[0])
        {
          v68 = &v188[(unsigned __int16)v67];
          v69 = *(_QWORD *)v164;
          v70 = __s;
          do
          {
            v72 = *v70++;
            v71 = v72;
            v73 = v72 + 32;
            if ((*(_DWORD *)(v7 + 4 * v72) & 0x40000000) != 0)
              v71 = v73;
            *v68++ = v71;
            --v69;
          }
          while (v69);
        }
        v18 = (v67 + v164[0]);
        SLfun((uint64_t)v188, 0, (__int16)(v44 + LOWORD(v164[0])), (unsigned __int16 *)&v185 + 1, &v185);
        LOWORD(v44) = v172;
        goto LABEL_144;
      case 3:
        if (!v24 || !v155 || v155 == 48)
          goto LABEL_240;
LABEL_144:
        result = PRAltHsh(HIWORD(v185), (unsigned __int16)v185, v18, v50, a1, a2, (char **)v184, v187);
        if ((_DWORD)result)
          return result;
        v75 = *(const char **)v184;
        if (*(_QWORD *)v184)
          goto LABEL_266;
        goto LABEL_240;
      case 4:
        if (!v158)
          goto LABEL_240;
        v76 = *(unsigned __int16 *)(v158 + 32);
        __strncpy_chk();
        v188[v76] = 32;
        strncpy(&v188[(unsigned __int16)(v76 + 1)], *(const char **)(v171 + 16), *(unsigned __int16 *)(v171 + 32));
        v77 = *(unsigned __int16 *)(v171 + 32);
        LOWORD(v44) = v172;
        v78 = (v77 + v76 + 1);
        v188[(unsigned __int16)(v77 + v76 + 1)] = 0;
        SLfun((uint64_t)v188, 0, (__int16)(v77 + v76), (unsigned __int16 *)&v185 + 1, &v185);
        v18 = v78;
        v49 = v167;
LABEL_153:
        result = PRAltHsh(HIWORD(v185), (unsigned __int16)v185, v18, v50, a1, a2, (char **)v184, v187);
        if ((_DWORD)result)
          return result;
        v79 = *(unsigned __int8 *)(a2 + 20);
        if (!*(_QWORD *)v184)
          goto LABEL_234;
        v80 = **(_BYTE **)v184;
        v81 = *(unsigned __int8 *)(*(_QWORD *)v184 + 1);
        if (v79 == 9)
        {
          v82 = *(unsigned __int8 *)(*(_QWORD *)v184 + 2);
          v83 = (const char *)(*(_QWORD *)v184 + 3);
          *(_QWORD *)v184 += 3;
          v84 = v157;
          if ((v149 & v80) == 0x30)
          {
            if (v145 == 192 || (v84 = v143 | (v145 >> 2), !v145))
              v84 = v81 & 0x30 | v143;
          }
          if ((~(v80 & v84) & 0xC) == 0)
          {
            if (v155 && v155 != 48)
            {
              v84 = v84 & 0xFFFFFFF3 | (v155 >> 2);
            }
            else
            {
              v85 = v81 & 0xC;
              if ((v81 & 0xC) != 0 && v85 != 12)
              {
                v84 = v84 & 0xFFFFFFF3 | v85;
              }
              else if (v158
                     && v50 == 6
                     && (v86 = *(_WORD *)(v158 + 98), (v86 & 0x20) == 0)
                     && ((v81 & 1) == 0 || (v86 & 0x40) != 0)
                     && (v86 & 0x30) != 0
                     && (v86 & 0x30) != 0x30)
              {
                v84 &= 0xFFFFFFF3;
              }
              else
              {
                v84 &= ~8u;
              }
            }
          }
        }
        else
        {
          v83 = (const char *)(*(_QWORD *)v184 + 2);
          *(_QWORD *)v184 += 2;
          v82 = v81;
          v84 = v157;
        }
        if (!v82)
          goto LABEL_223;
        v109 = v84 & v80;
        while (1)
        {
          v110 = *(unsigned __int8 *)v83;
          if (v109 == v110)
            break;
          ++v83;
          if (v110)
          {
            while (*(unsigned __int8 *)v83++)
              ;
          }
          if (!(_WORD)--v82)
          {
LABEL_223:
            *(_QWORD *)v184 = v83;
            goto LABEL_234;
          }
        }
        *(_QWORD *)v184 = v83 + 1;
        result = PRSetTmpAlt(v164[0], 0, 0, 0, 0, __s, v83 + 1, v50, v17, v158, v171, (uint64_t)v186, (uint64_t)&v182, (uint64_t)&v180, &v179, a1, a2);
        if ((_DWORD)result)
          return result;
        v177 = 0;
        v79 = *(unsigned __int8 *)(a2 + 20);
        v166 = 1;
LABEL_234:
        v115 = v79 == 12;
        v116 = v166;
        if (v115)
          v116 = 1;
        v166 = v116;
        v117 = v177;
        if (v115)
          v117 = 0;
        v177 = v117;
        goto LABEL_240;
      case 5:
        v87 = *(unsigned __int16 *)(v171 + 32);
        v18 = v87;
        __strncpy_chk();
        v188[v87] = 0;
        SLfun((uint64_t)v188, 0, (__int16)(v87 - 1), (unsigned __int16 *)&v185 + 1, &v185);
        result = PRAltHsh(HIWORD(v185), (unsigned __int16)v185, v87, 5, a1, a2, (char **)v184, v187);
        if ((_DWORD)result)
          return result;
        if (!*(_QWORD *)v184)
        {
LABEL_214:
          LOWORD(v44) = v172;
LABEL_240:
          LOBYTE(v50) = v50 + 1;
          if (v50 > 8u || !(_BYTE)v177)
            goto LABEL_250;
          continue;
        }
        LOWORD(v44) = v172;
        if (!v153)
          goto LABEL_240;
        v88 = **(_BYTE **)v184;
        if (((*(unsigned __int8 *)(*(_QWORD *)v184 + 1) | (v88 << 8)) & v148) == 0)
          goto LABEL_240;
        v89 = (char)v88;
        v90 = (v88 >> 6) & 1;
        v91 = v144 ? 0 : v90;
        v92 = (v154 & 0x200) == 0 && v89 < 0;
        v93 = v92;
        if ((v91 & 1) != 0 || v93)
          goto LABEL_240;
        *(_QWORD *)v184 += 2;
        result = PRSetTmpAlt(v164[0], 0, 0, 0, 0, __s, *(const char **)v184, 5u, v17, v158, v171, (uint64_t)v186, (uint64_t)&v182, (uint64_t)&v180, &v179, a1, a2);
LABEL_267:
        v59 = v18;
        if ((_DWORD)result)
          return result;
LABEL_268:
        ++v17;
        v166 = 1;
        v18 = v59;
        v11 = v162;
        if (v17 != v163)
          goto LABEL_24;
LABEL_369:
        result = PRProcTmpAlts(v158, v171, v186, (uint64_t)&v182, (uint64_t)&v180, v179, v141, a1);
        if (!(_DWORD)result)
          return 0;
        return result;
      case 6:
        goto LABEL_153;
      case 7:
        if ((v174 & 1) != 0)
          goto LABEL_240;
        v94 = *(unsigned __int16 *)(v171 + 32);
        __strncpy_chk();
        v188[v94] = 32;
        v58 = v94 + 1;
LABEL_191:
        if (v164[0])
        {
          v95 = &v188[(unsigned __int16)v58];
          v96 = *(_QWORD *)v164;
          v97 = __s;
          do
          {
            v99 = *v97++;
            v98 = v99;
            v100 = v99 + 32;
            if ((*(_DWORD *)(v7 + 4 * v99) & 0x40000000) != 0)
              v98 = v100;
            *v95++ = v98;
            --v96;
          }
          while (v96);
        }
        v18 = (v58 + v164[0]);
        v188[(unsigned __int16)(v58 + LOWORD(v164[0]))] = 0;
        SLfun((uint64_t)v188, 0, (__int16)(v58 + LOWORD(v164[0]) - 1), (unsigned __int16 *)&v185 + 1, &v185);
        result = PRAltHsh(HIWORD(v185), (unsigned __int16)v185, v18, v50, a1, a2, (char **)v184, v187);
        if ((_DWORD)result)
          return result;
        if (!*(_QWORD *)v184)
          goto LABEL_240;
        v101 = **(_BYTE **)v184;
        v102 = *(unsigned __int8 *)(*(_QWORD *)v184 + 1);
        if (*(_BYTE *)(a2 + 20) == 9)
        {
          v103 = *(unsigned __int8 *)(*(_QWORD *)v184 + 2);
          v104 = (unsigned __int8 *)(*(_QWORD *)v184 + 3);
          *(_QWORD *)v184 += 3;
          v105 = v156;
          if ((v147 & v101) == 0x30)
            v105 = v102 & 0x30 | v146;
          if ((~(v101 & v105) & 0xC) == 0)
          {
            v106 = v102 & 0xC;
            if ((v102 & 0xC) != 0 && v106 != 12)
            {
              v105 = v105 & 0xFFFFFFF3 | v106;
            }
            else if (v171
                   && v50 == 6
                   && (v107 = *(_WORD *)(v171 + 98), !(v107 & 0x20 | v102 & 1))
                   && (v107 & 0x30) != 0
                   && (v107 & 0x30) != 0x30)
            {
              v105 &= 0xFFFFFFF3;
            }
            else
            {
              v105 &= ~8u;
            }
          }
        }
        else
        {
          v104 = (unsigned __int8 *)(*(_QWORD *)v184 + 2);
          *(_QWORD *)v184 += 2;
          v103 = v102;
          v105 = v156;
        }
        if (!v103)
          goto LABEL_231;
        v112 = v105 & v101;
        while (1)
        {
          v113 = *v104;
          if (v112 == v113)
            break;
          ++v104;
          if (v113)
          {
            while (*v104++)
              ;
          }
          if (!(_WORD)--v103)
          {
LABEL_231:
            *(_QWORD *)v184 = v104;
            goto LABEL_240;
          }
        }
        v75 = (const char *)(v104 + 1);
        *(_QWORD *)v184 = v104 + 1;
LABEL_266:
        result = PRSetTmpAlt(v164[0], 0, 0, 0, 0, __s, v75, v50, v17, v158, v171, (uint64_t)v186, (uint64_t)&v182, (uint64_t)&v180, &v179, a1, a2);
        goto LABEL_267;
      case 8:
        goto LABEL_191;
      default:
        goto LABEL_240;
    }
  }
}

uint64_t PRAltHsh(int a1, int a2, unsigned __int8 a3, int a4, uint64_t a5, uint64_t a6, char **a7, char *a8)
{
  __int16 *v8;
  int v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned int v24;
  char *v25;
  BOOL v26;
  char *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  int v40;

  *a7 = 0;
  v8 = *(__int16 **)(a6 + 120);
  if (!v8)
    return 0;
  v10 = 0;
  v40 = 0;
  v11 = *((_QWORD *)v8 + 2);
  v38 = (char *)*((_QWORD *)v8 + 3);
  v12 = *(_DWORD *)(a6 + 40);
  v13 = *v8;
  v14 = *((_DWORD *)v8 + 1);
  v15 = (unsigned __int16)v8[1];
  v16 = (unsigned __int16)v8[4];
  v17 = a2 % v13;
  v36 = a3;
  v37 = *((_DWORD *)v8 + 3);
  v18 = 2 * (v14 & a1);
  v19 = (v14 & a1) + (v14 >> 1) + v13;
  v35 = a4;
  v33 = a2;
  v34 = v18;
  while (1)
  {
    v20 = 4 * v17;
    v21 = *(unsigned __int8 *)(v11 + v20);
    v22 = (unsigned __int8 *)(v11 + (int)v20);
    v23 = v22[1] | (v21 << 8);
    if (!v23)
    {
LABEL_17:
      v27 = 0;
LABEL_18:
      result = 0;
      *a7 = v27;
      return result;
    }
    if (v23 == a1)
      break;
LABEL_14:
    v17 += v19;
    do
      v17 -= v13;
    while (v17 >= v13);
    v26 = v15 >= (unsigned __int16)v10++;
    v19 += v18;
    if (!v26)
      goto LABEL_17;
  }
  v24 = v22[3] | (v22[2] << 8);
  if (v24 < v16)
  {
    v25 = v38;
    goto LABEL_11;
  }
  if (SLSeek(v12, v37 + v24, 0) != 8)
  {
    if (SLFRead(v12, 128, a8, (unsigned int *)&v40) == 8 || v40 <= 2)
    {
      v29 = *(_QWORD *)(a5 + 32);
      v30 = 0xDC00000070;
      goto LABEL_22;
    }
    v24 = 0;
    v25 = a8;
    v18 = v34;
    a4 = v35;
LABEL_11:
    if (v25[v24] == a4
      && v25[v24 + 1] == v36
      && v25[(unsigned __int16)(v24 + 2)] == v33)
    {
      v27 = &v25[(unsigned __int16)(v24 + 3)];
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  v29 = *(_QWORD *)(a5 + 32);
  v30 = 0xDC0000006FLL;
LABEL_22:
  *(_QWORD *)v29 = v30;
  *(_WORD *)(v29 + 8) = 920;
  return 220;
}

uint64_t PRSetTmpAlt(int a1, int a2, int a3, int a4, int a5, char *__s, const char *a7, unsigned int a8, unsigned __int16 a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _WORD *a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21;
  __int16 v22;
  unsigned __int16 v23;
  __int16 v24;
  char *v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  __int16 v29;
  unsigned __int8 *v30;
  int v31;
  unsigned int v32;
  BOOL v33;
  _BOOL4 v34;
  int v35;
  char *v36;
  int v37;
  char *v38;
  int v39;
  char *v40;
  int v41;
  _BOOL4 v42;
  unsigned __int16 v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  __int16 v47;
  int v48;
  _BYTE *v49;
  unsigned int v50;
  BOOL v51;
  unsigned __int8 *v52;
  int v53;
  unsigned int v54;
  BOOL v55;
  unsigned __int16 v56;
  char *v57;
  int v58;
  uint64_t v59;
  int v60;
  char v61;
  char *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;

  v21 = *(_QWORD *)(a17 + 8);
  v22 = strlen(__s);
  v23 = strlen(a7);
  v24 = 0;
  if (a8 != 4 && a10)
    v24 = *(_WORD *)(a10 + 48) + *(_WORD *)(a10 + 32);
  if (a11 && a8 <= 8 && ((1 << a8) & 0x103) != 0)
    v24 += *(_WORD *)(a11 + 32) + *(_WORD *)(a11 + 48);
  v25 = __s;
  if (a8 < 2)
    goto LABEL_25;
  v25 = __s;
  if (a8 == 8)
    goto LABEL_25;
  if (a8 != 4)
  {
    *(_WORD *)(a14 + 2 * a9) = 1;
    if (!*a15)
      *a15 = 1;
    v25 = *(char **)(a11 + 24);
LABEL_25:
    v29 = 0;
    v28 = *(_DWORD *)(v21 + 4 * *v25);
    v34 = 1;
    goto LABEL_26;
  }
  *(_WORD *)(a14 + 2 * a9) = 2;
  if ((unsigned __int16)*a15 <= 1u)
    *a15 = 2;
  v26 = *(_BYTE **)(a10 + 24);
  v27 = *v26;
  v28 = *(_DWORD *)(v21 + 4 * *v26);
  v29 = 0;
  if (*v26)
  {
    v30 = v26 + 1;
    do
    {
      v31 = *(_DWORD *)(v21 + 4 * v27);
      if ((v31 & 0x60000040) != 0)
        ++v29;
      v32 = *v30++;
      v27 = v32;
      if (v32)
        v33 = (v31 & 0x20000000) == 0;
      else
        v33 = 0;
    }
    while (v33);
    v34 = (v31 & 0x20000000) == 0;
LABEL_26:
    v35 = (v28 >> 30) & 1;
    if (a8 <= 8 && ((1 << a8) & 0x103) != 0)
      goto LABEL_28;
    goto LABEL_73;
  }
  v35 = (v28 >> 30) & 1;
  v34 = 1;
LABEL_73:
  v49 = *(_BYTE **)(a11 + 24);
  v50 = *v49;
  if (*v49)
    v51 = !v34;
  else
    v51 = 1;
  if (!v51)
  {
    v52 = v49 + 1;
    do
    {
      v53 = *(_DWORD *)(v21 + 4 * v50);
      if ((v53 & 0x60000040) != 0)
        ++v29;
      v54 = *v52++;
      v50 = v54;
      if (v54)
        v55 = (v53 & 0x20000000) == 0;
      else
        v55 = 0;
    }
    while (v55);
    if ((v53 & 0x20000000) != 0)
      v34 = 0;
  }
LABEL_28:
  if (a8 - 7 <= 0xFFFFFFFC)
  {
    if (a1 && v34)
    {
      v36 = __s + 1;
      do
      {
        v37 = *(_DWORD *)(v21 + 4 * *(v36 - 1));
        if ((v37 & 0x60000040) != 0)
          ++v29;
        if (v36 >= &__s[a1])
          break;
        ++v36;
      }
      while ((v37 & 0x20000000) == 0);
      if ((v37 & 0x20000000) != 0)
        v34 = 0;
    }
    if (a8 <= 1)
    {
      if (a3 && v34)
      {
        v38 = &__s[a2 + 1];
        do
        {
          v39 = *(_DWORD *)(v21 + 4 * *(v38 - 1));
          if ((v39 & 0x60000040) != 0)
            ++v29;
          if (v38 >= &__s[a2 + a3])
            break;
          ++v38;
        }
        while ((v39 & 0x20000000) == 0);
        if ((v39 & 0x20000000) != 0)
          v34 = 0;
      }
      if (!a8)
      {
        if (!a5 || !v34)
        {
          v44 = v22;
          v45 = a12;
          v42 = (v29 & 0xFFFE) != 0 && v34;
          goto LABEL_90;
        }
        v40 = &__s[a4 + 1];
        do
        {
          v41 = *(_DWORD *)(v21 + 4 * *(v40 - 1));
          if ((v41 & 0x60000040) != 0)
            ++v29;
          if (v40 >= &__s[a4 + a5])
            break;
          ++v40;
        }
        while ((v41 & 0x20000000) == 0);
        if ((v41 & 0x20000000) != 0)
          v34 = 0;
      }
    }
    v42 = (v29 & 0xFFFE) != 0 && v34;
    if (a8 - 4 < 3)
    {
      v43 = 0;
      v44 = v22;
      v45 = a12;
      goto LABEL_92;
    }
    v44 = v22;
    if (a8 == 1)
    {
      v45 = a12;
      v47 = a2;
      v46 = a3;
LABEL_91:
      v43 = v46 + v47;
      goto LABEL_92;
    }
    if (a8)
    {
      v45 = a12;
      if (a7[v23 - 1] == 39)
      {
        do
        {
          v43 = a1;
          v48 = __s[(unsigned __int16)a1++];
        }
        while (v48 == 32);
      }
      else
      {
        v43 = a1;
      }
      goto LABEL_92;
    }
    v45 = a12;
LABEL_90:
    v47 = a4;
    v46 = a5;
    goto LABEL_91;
  }
  v44 = v22;
  v45 = a12;
  v43 = 0;
  v42 = (v29 & 0xFFFE) != 0 && v34;
LABEL_92:
  v56 = v23;
  v57 = (char *)malloc_type_malloc((unsigned __int16)(v44 + v23 + v24 - v43 + 2), 0xAE0600A2uLL);
  *(_QWORD *)(v45 + 8 * a9) = v57;
  if (v57)
  {
    LOBYTE(v58) = *a7;
    if (*a7)
    {
      v59 = 0;
      do
      {
        if (v59)
          v60 = 0;
        else
          v60 = v35;
        if ((v42 || v60) && (*(_DWORD *)(v21 + 4 * v58) & 0x20000000) != 0)
          LOBYTE(v58) = v58 - 32;
        v57[v59] = v58;
        v58 = a7[++v59];
      }
      while (v58);
      v57 += v59;
    }
    if (a7[v56 - 1] != 39 && (a8 - 9 > 0xFFFFFFFD || !v43))
      *v57++ = 32;
    v61 = __s[v43];
    if (v61)
    {
      v62 = &__s[v43 + 1];
      do
      {
        *v57++ = v61;
        v63 = *v62++;
        v61 = v63;
      }
      while (v63);
    }
    v64 = 0;
    *v57 = 0;
    *(_WORD *)(a13 + 2 * a9) = (_WORD)v57 - *(_WORD *)(v45 + 8 * a9);
  }
  else
  {
    v65 = *(_QWORD *)(a16 + 32);
    *(_QWORD *)v65 = 0xDC00000078;
    *(_WORD *)(v65 + 8) = 880;
    return 220;
  }
  return v64;
}

uint64_t PRProcTmpAlts(uint64_t a1, uint64_t a2, char **a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  unsigned __int16 v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  unsigned __int16 v22;
  char *v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t j;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  char *v32;
  uint64_t v33;

  v11 = *(_QWORD *)(a7 + 24);
  v12 = *(unsigned __int16 *)(v11 + 18);
  if (!a6)
  {
    if (*(_WORD *)(v11 + 18))
    {
      v15 = 0;
      v13 = 0;
      goto LABEL_10;
    }
LABEL_36:
    v28 = 1;
LABEL_37:
    *(_DWORD *)(v11 + 18) = 0;
    *(_WORD *)(v11 + 24) = 0;
    if (*(_WORD *)(v11 + 16))
    {
      v29 = 0;
      v30 = *(_QWORD *)(v11 + 8);
      do
        *(_WORD *)(v30 + 2 * v29++) = -1;
      while (v29 < *(unsigned __int16 *)(v11 + 16));
    }
    if ((v28 & 1) == 0)
      goto LABEL_41;
    return 0;
  }
  if (a6 == 2)
  {
    v13 = *(_WORD *)(a1 + 48) + *(_WORD *)(a1 + 32);
    v14 = a1;
  }
  else
  {
    v13 = 0;
    v14 = a2;
  }
  v15 = *(_WORD *)(a2 + 48) + *(_WORD *)(a2 + 32);
  v16 = *(_WORD *)(v14 + 8);
  *(_WORD *)(a7 + 2) += *(_WORD *)a7 - v16;
  *(_WORD *)a7 = v16;
  if (*(_WORD *)(a7 + 6))
  {
    *(_WORD *)(a7 + 6) = *(_WORD *)(a7 + 6) - v16 + *(_WORD *)(a7 + 4);
    *(_WORD *)(a7 + 4) = v16;
  }
  if (!(_DWORD)v12)
    goto LABEL_36;
LABEL_10:
  v17 = 0;
  v18 = v13;
  v19 = v15;
  v20 = v13 + (unint64_t)v15 + 1;
  do
  {
    if (!a3[v17])
    {
      v21 = (const char *)(*(_QWORD *)v11 + *(__int16 *)(*(_QWORD *)(v11 + 8) + 2 * v17));
      v22 = strlen(v21);
      *(_WORD *)(a4 + 2 * v17) = v22;
      v23 = (char *)malloc_type_malloc(v20 + v22, 0x199C60CAuLL);
      a3[v17] = v23;
      if (!v23)
      {
        v33 = *(_QWORD *)(a8 + 32);
        *(_QWORD *)v33 = 0xDC00000078;
        *(_WORD *)(v33 + 8) = 860;
        return 220;
      }
      strcpy(v23, v21);
    }
    ++v17;
  }
  while (v12 != v17);
  if (a6)
  {
    v24 = 0;
    do
    {
      if (!*(_WORD *)(a5 + 2 * v24))
      {
        if ((*(__int16 *)(a4 + 2 * v24) & 0x80000000) == 0)
        {
          for (i = *(unsigned __int16 *)(a4 + 2 * v24); i != -1; --i)
            a3[v24][i + v19] = a3[v24][i];
        }
        strncpy(a3[v24], *(const char **)(a2 + 24), *(unsigned __int16 *)(a2 + 32));
        if (*(_WORD *)(a2 + 48))
          strncpy(&a3[v24][*(unsigned __int16 *)(a2 + 32)], *(const char **)(a2 + 40), *(unsigned __int16 *)(a2 + 48));
        *(_WORD *)(a4 + 2 * v24) += v19;
      }
      ++v24;
    }
    while (v24 != v12);
    if (a6 >= 2)
    {
      v26 = 0;
      do
      {
        if (*(unsigned __int16 *)(a5 + 2 * v26) <= 1u)
        {
          if ((*(__int16 *)(a4 + 2 * v26) & 0x80000000) == 0)
          {
            for (j = *(unsigned __int16 *)(a4 + 2 * v26); j != -1; --j)
              a3[v26][j + v18] = a3[v26][j];
          }
          strncpy(a3[v26], *(const char **)(a1 + 24), *(unsigned __int16 *)(a1 + 32));
          if (*(_WORD *)(a1 + 48))
            strncpy(&a3[v26][*(unsigned __int16 *)(a1 + 32)], *(const char **)(a1 + 40), *(unsigned __int16 *)(a1 + 48));
        }
        ++v26;
      }
      while (v26 != v12);
    }
  }
  if (v11)
  {
    v28 = 0;
    goto LABEL_37;
  }
LABEL_41:
  while (1)
  {
    result = PRaddList((char **)v11, *a3, 1, 0);
    if ((_DWORD)result)
      break;
    v32 = *a3++;
    free(v32);
    if (!--v12)
      return 0;
  }
  return result;
}

uint64_t PRapp(unsigned __int8 *a1, int a2, int a3)
{
  __int16 v3;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  void *v22;
  void *v23;
  void *v24;

  v3 = sXXMutex++;
  if (!a1)
  {
    sXXMutex = v3;
    return 230;
  }
  *((_DWORD *)a1 + 3) = 0;
  *((_DWORD *)a1 + 4) = 0;
  *((_WORD *)a1 + 10) = 0;
  if (bInitXXMtx)
  {
    byte_1ED0A57F2 = 0;
    bInitXXMtx = 0;
    SLInitMutex((int)"XXAPPMUTEX", &stru_1ED0A5800);
  }
  if (SLLockMutex(&stru_1ED0A5800))
  {
    --sXXMutex;
    return 220;
  }
  if (a2 == 4)
  {
    v11 = PRGetAppElem(*a1);
    if (v11)
    {
      if (a3 == 2048)
      {
        *(_BYTE *)(v11 + 28) = (*((_DWORD *)a1 + 1) & 1) == 0;
LABEL_18:
        --sXXMutex;
        SLUnlockMutex(&stru_1ED0A5800);
        return 0;
      }
      --sXXMutex;
      SLUnlockMutex(&stru_1ED0A5800);
      v13 = 0xE6FFFFFF94;
    }
    else
    {
      --sXXMutex;
      SLUnlockMutex(&stru_1ED0A5800);
      v13 = 0xE6FFFFFF93;
    }
LABEL_32:
    *(_QWORD *)(a1 + 12) = v13;
    *((_WORD *)a1 + 10) = 400;
    return 230;
  }
  if (a2 != 2)
  {
    if (a2 == 1)
    {
      v8 = (_QWORD *)pSystem;
      if (pSystem)
      {
        v9 = *(unsigned __int8 *)pSystem;
        if (*(unsigned __int8 *)(pSystem + 1) >= v9)
        {
          v10 = ExpandSystem((uint64_t)a1, (unsigned __int8 *)pSystem);
          if ((_DWORD)v10)
          {
            v7 = v10;
LABEL_55:
            --sXXMutex;
            SLUnlockMutex(&stru_1ED0A5800);
            return v7;
          }
          v8 = (_QWORD *)pSystem;
          v9 = *(unsigned __int8 *)pSystem;
          if (!*(_BYTE *)pSystem)
          {
LABEL_41:
            *a1 = v9;
            v17 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A00404A9DB07BuLL);
            *(_QWORD *)(v8[1] + 8 * v9) = v17;
            if (v17)
            {
              ++*((_BYTE *)v8 + 1);
              v18 = *(_QWORD *)(v8[1] + 8 * v9);
              v19 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x898uLL, 0x1090040C1876833uLL);
              if (v19)
              {
                v20 = v19;
                *v19 = 15;
                if (ICpd(0, v19) == 8)
                {
                  FreeAppElem((uint64_t)v8, a1);
                  v21 = 713;
                  v7 = 230;
LABEL_54:
                  *((_DWORD *)a1 + 3) = v21;
                  *((_DWORD *)a1 + 4) = v7;
                  *((_WORD *)a1 + 10) = 400;
                  goto LABEL_55;
                }
                *(_WORD *)(v18 + 88) = *((_WORD *)v20 + 1);
                free(v20);
                v22 = malloc_type_calloc(4uLL, 8uLL, 0x2004093837F09uLL);
                *(_QWORD *)v18 = v22;
                if (v22)
                {
                  *(_BYTE *)(v18 + 8) = 4;
                  *(_BYTE *)(v18 + 28) = (*((_DWORD *)a1 + 1) & 1) == 0;
                  v23 = malloc_type_calloc(1uLL, 0x58uLL, 0x103004048D29B9DuLL);
                  *(_QWORD *)(v18 + 16) = v23;
                  if (v23)
                  {
                    v24 = malloc_type_calloc(0x10uLL, 6uLL, 0x1000040274DC3F3uLL);
                    *(_QWORD *)(v18 + 40) = v24;
                    if (v24)
                    {
                      *(_BYTE *)(v18 + 48) = 0;
                      *((_DWORD *)a1 + 2) &= 0x10u;
                      goto LABEL_18;
                    }
                  }
                }
                FreeAppElem((uint64_t)v8, a1);
              }
            }
            else
            {
              CheckSystem();
            }
            v21 = 120;
            v7 = 220;
            goto LABEL_54;
          }
        }
LABEL_36:
        v16 = 0;
        while (*(_QWORD *)(v8[1] + 8 * v16))
        {
          if (v9 == ++v16)
            goto LABEL_41;
        }
        v9 = v16;
        goto LABEL_41;
      }
      pSystem = (uint64_t)malloc_type_calloc(1uLL, 0x10uLL, 0x1080040EF48E34EuLL);
      if (pSystem)
      {
        v9 = 4;
        v14 = malloc_type_calloc(4uLL, 8uLL, 0x2004093837F09uLL);
        v8 = (_QWORD *)pSystem;
        *(_QWORD *)(pSystem + 8) = v14;
        if (v14)
        {
          *(_BYTE *)v8 = 4;
          goto LABEL_36;
        }
        free(v8);
        pSystem = 0;
      }
      *(_QWORD *)(a1 + 12) = 0xDC00000078;
      *((_WORD *)a1 + 10) = 400;
      --sXXMutex;
      SLUnlockMutex(&stru_1ED0A5800);
      return 220;
    }
    --sXXMutex;
    SLUnlockMutex(&stru_1ED0A5800);
    v13 = 0xE6FFFFFF95;
    goto LABEL_32;
  }
  if (!pSystem
    || (v12 = *a1, v12 >= *(unsigned __int8 *)pSystem)
    || !*(_QWORD *)(*(_QWORD *)(pSystem + 8) + 8 * v12))
  {
    --sXXMutex;
    SLUnlockMutex(&stru_1ED0A5800);
    *(_QWORD *)(a1 + 12) = 0xE6FFFFFF93;
    *((_WORD *)a1 + 10) = 400;
    return 220;
  }
  v7 = FreeAppElem(pSystem, a1);
  --sXXMutex;
  SLUnlockMutex(&stru_1ED0A5800);
  if (!pSystem && !sXXMutex)
  {
    SLTermMutex(&stru_1ED0A5800);
    byte_1ED0A57F2 = 1;
    bInitXXMtx = 1;
  }
  return v7;
}

uint64_t ExpandSystem(uint64_t a1, unsigned __int8 *a2)
{
  void *v4;
  void *v5;
  uint64_t result;

  v4 = malloc_type_calloc(*a2 + 4, 8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    v5 = v4;
    memcpy(v4, *((const void **)a2 + 1), 8 * *a2);
    free(*((void **)a2 + 1));
    result = 0;
    *((_QWORD *)a2 + 1) = v5;
    *a2 += 4;
  }
  else
  {
    *(_QWORD *)(a1 + 12) = 0xDC00000078;
    *(_WORD *)(a1 + 20) = 400;
    return 220;
  }
  return result;
}

uint64_t FreeAppElem(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  void **v8;
  _BYTE *v10;
  void *v11;
  uint64_t v13;
  char v14;
  unint64_t v15;
  void *v16;
  void *v17;

  v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4);
  v6 = *(_BYTE *)(v5 + 90);
  if (v6)
  {
    v7 = 0;
    do
    {
      v8 = *(void ***)(v5 + 56 + 8 * v7);
      if (v8)
      {
        free(v8[97]);
        free(v8);
        v6 = *(_BYTE *)(v5 + 90) - 1;
        *(_BYTE *)(v5 + 90) = v6;
      }
      if (!v6)
        break;
    }
    while (v7++ < 3);
  }
  if (*(_WORD *)(v5 + 88))
  {
    v10 = malloc_type_calloc(1uLL, 0x898uLL, 0x1090040C1876833uLL);
    if (!v10)
    {
      *(_QWORD *)(a2 + 12) = 0xDC00000078;
      *((_WORD *)a2 + 10) = 400;
      return 220;
    }
    v11 = v10;
    *v10 = 16;
    *((_WORD *)v10 + 1) = *(_WORD *)(v5 + 88);
    if (ICpd(0, v10) == 8)
    {
      *(_QWORD *)(a2 + 12) = 0xE6000002C9;
      *((_WORD *)a2 + 10) = 400;
      return 230;
    }
    free(v11);
  }
  v13 = *(_QWORD *)(v5 + 16);
  if (v13)
  {
    PRssClr(v13);
    free(*(void **)(v5 + 16));
  }
  v14 = *(_BYTE *)(v5 + 9);
  if (v14)
  {
    v15 = 0;
    do
    {
      if (v15 >= *(unsigned __int8 *)(v5 + 8))
        break;
      v16 = *(void **)(*(_QWORD *)v5 + 8 * v15);
      if (v16)
      {
        PRDbTerm(v5, *(_QWORD *)(*(_QWORD *)v5 + 8 * v15));
        free(v16);
        v14 = *(_BYTE *)(v5 + 9) - 1;
        *(_BYTE *)(v5 + 9) = v14;
      }
      ++v15;
    }
    while (v14);
  }
  if (*(_QWORD *)v5)
    free(*(void **)v5);
  v17 = *(void **)(v5 + 40);
  if (v17)
    free(v17);
  free((void *)v5);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v4) = 0;
  --*(_BYTE *)(a1 + 1);
  CheckSystem();
  return 0;
}

void CheckSystem()
{
  if (!*(_BYTE *)(pSystem + 1))
  {
    free(*(void **)(pSystem + 8));
    free((void *)pSystem);
    pSystem = 0;
  }
}

uint64_t PRGetAppElem(unsigned int a1)
{
  uint64_t v2;

  ++sXXMutex;
  if (SLLockMutex(&stru_1ED0A5800))
  {
    v2 = 0;
  }
  else
  {
    if (pSystem && *(unsigned __int8 *)pSystem > a1)
      v2 = *(_QWORD *)(*(_QWORD *)(pSystem + 8) + 8 * a1);
    else
      v2 = 0;
    SLUnlockMutex(&stru_1ED0A5800);
  }
  --sXXMutex;
  return v2;
}

uint64_t PRbuf(uint64_t a1, unsigned __int16 a2, unsigned __int16 a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint8x8_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  unsigned __int8 v33;
  unsigned int v34;
  unsigned int v35;
  char v36;
  char v37;
  _BYTE *v38;
  _WORD *v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  _BYTE *v45;
  unsigned int v46;
  unsigned __int8 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v54;
  int v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BOOL4 v64;
  _WORD v65[49];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 230;
  v4 = a2;
  *(_DWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  v5 = a1 + 64;
  *(_WORD *)(a1 + 72) = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (a2 == 17)
  {
    if (v6)
    {
      do
      {
        v7 = *(_QWORD *)(v6 + 40);
        PRfreeErr((_QWORD *)v6);
        v6 = v7;
      }
      while (v7);
    }
    v8 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    return v8;
  }
  v10 = PRGetAppElem(*(unsigned __int8 *)(a1 + 8));
  if (!v10)
  {
    v14 = 0xE6FFFFFF93;
LABEL_83:
    *(_QWORD *)(a1 + 64) = v14;
    *(_WORD *)(a1 + 72) = 480;
    return 230;
  }
  v11 = v10;
  *(_QWORD *)(v10 + 32) = v5;
  *(_WORD *)(v10 + 24) = 0;
  v12 = *(_QWORD *)(v10 + 16);
  switch(v4)
  {
    case 12:
      v13 = 50;
      break;
    case 13:
      v13 = -106;
      break;
    case 14:
      v13 = -1;
      break;
    default:
      v14 = 0xE6FFFFFF95;
      goto LABEL_83;
  }
  *(_BYTE *)(v10 + 26) = v13;
  if (v4 == 12)
    v15 = (a3 >> 3) & 1;
  else
    v15 = 0;
  *(_BYTE *)(v10 + 27) = *(_BYTE *)(a1 + 60);
  v16 = PRGetDbElem(*(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9));
  if (!v16)
  {
    v14 = 0xE6FFFFFF92;
    goto LABEL_83;
  }
  v17 = v16;
  v65[0] = 0;
  if ((v15 & 1) == 0 && (*(_WORD *)v16 & 0x20) != 0)
  {
    v14 = 0xE6FFFFFF84;
    goto LABEL_83;
  }
  v18 = *(_BYTE *)(v16 + 23) || *(_BYTE *)(v16 + 24) || *(_BYTE *)(v16 + 25) || *(_BYTE *)(v16 + 26) != 0;
  v64 = v18;
  if ((*(_WORD *)(a1 + 10) & 1) != 0)
    v19 = v15;
  else
    v19 = 1;
  if ((v19 & 1) != 0)
  {
    if (v6)
    {
      do
      {
        v20 = *(_QWORD *)(v6 + 40);
        PRfreeErr((_QWORD *)v6);
        v6 = v20;
      }
      while (v20);
    }
    v21 = 0;
    v22 = 0;
    *(_BYTE *)(v11 + 48) = 0;
    goto LABEL_77;
  }
  v23 = 0;
  if (v6)
  {
    v24 = *(_QWORD *)(v16 + 48);
    while (*(_BYTE *)(v6 + 64))
    {
      if (*(_BYTE *)(v6 + 64) != 1)
      {
        if (!BinarySearch(*(_QWORD *)(v24 + 328), *(unsigned __int8 *)(v24 + 336), 1, *(unsigned __int8 *)(v6 + 12), 1, v65))break;
        *(_BYTE *)(v6 + 13) = 0;
      }
      v25 = *(_QWORD *)(v6 + 40);
      if (!v23)
      {
        *(_QWORD *)(v6 + 40) = 0;
LABEL_47:
        v23 = v6;
        goto LABEL_48;
      }
      v26 = *(unsigned __int8 *)(v23 + 12);
      v27 = v23;
      v28 = v23;
      while (*(unsigned __int8 *)(v6 + 12) >= v26)
      {
        v28 = v27;
        v27 = *(_QWORD *)(v27 + 40);
        if (!v27)
          break;
        v26 = *(unsigned __int8 *)(v27 + 12);
      }
      *(_QWORD *)(v6 + 40) = v27;
      if (v27 == v23)
        goto LABEL_47;
      *(_QWORD *)(v28 + 40) = v6;
LABEL_48:
      v6 = v25;
      if (!v25)
        goto LABEL_49;
    }
    v25 = *(_QWORD *)(v6 + 40);
    PRfreeErr((_QWORD *)v6);
    goto LABEL_48;
  }
LABEL_49:
  v29 = *(unsigned __int8 *)(v11 + 48);
  v22 = *(_QWORD *)(v11 + 40);
  __memcpy_chk();
  v31 = 0;
  v32 = v23;
  v33 = 0;
  if (v23 && v29)
  {
    v33 = 0;
    v31 = 0;
    v32 = v23;
    do
    {
      v34 = *(unsigned __int8 *)(v32 + 12);
      v35 = LOBYTE(v65[((3 * v31) & 0x7F) + 2]);
      if (v34 >= v35)
      {
        if (v33 <= 0xFu)
        {
          v39 = &v65[((3 * v31) & 0x7F) + 1];
          v40 = *((_BYTE *)v39 + 5);
          LOWORD(v39) = *(_WORD *)((char *)v39 + 3);
          v41 = v22 + 6 * v33;
          *(_BYTE *)(v41 + 2) = v35;
          *(_BYTE *)v41 = v35;
          *(_WORD *)(v41 + 3) = (_WORD)v39;
          *(_BYTE *)(v41 + 1) = 0;
          *(_BYTE *)(v41 + 5) = v40;
        }
        ++v31;
      }
      else
      {
        if (v33 <= 0xFu)
        {
          v36 = *(_BYTE *)(v32 + 13);
          v37 = *(_BYTE *)(v32 + 66);
          v38 = (_BYTE *)(v22 + 6 * v33);
          v38[2] = v34;
          *v38 = v34;
          v38[4] = v37;
          v38[3] = v36;
          v38[1] = 0;
          v38[5] = -1;
        }
        v32 = *(_QWORD *)(v32 + 40);
      }
      ++v33;
    }
    while (v32 && v29 > v31);
  }
  for (; v32; ++v33)
  {
    if (v33 <= 0xFu)
    {
      v42 = *(_BYTE *)(v32 + 13);
      v43 = *(_BYTE *)(v32 + 66);
      v44 = *(_BYTE *)(v32 + 12);
      v45 = (_BYTE *)(v22 + 6 * v33);
      v45[2] = v44;
      *v45 = v44;
      v45[4] = v43;
      v45[3] = v42;
      v45[1] = 0;
      v45[5] = -1;
    }
    v32 = *(_QWORD *)(v32 + 40);
  }
  v46 = v29 - v31;
  if (v29 <= v31)
  {
    v21 = v33;
  }
  else
  {
    v47 = 6 * v31;
    v21 = v33;
    do
    {
      if (v21 <= 0xFu)
      {
        v30.i32[0] = *(_DWORD *)((char *)&v65[2] + (v47 & 0xFE));
        v48 = v22 + 6 * v21;
        *(_BYTE *)v48 = vmovl_u8(v30).u8[0];
        *(_BYTE *)(v48 + 1) = 0;
        *(_DWORD *)(v48 + 2) = v30.i32[0];
      }
      ++v21;
      v47 += 6;
      --v46;
    }
    while (v46);
  }
  if (v23)
  {
    do
    {
      v49 = *(_QWORD *)(v23 + 40);
      PRfreeErr((_QWORD *)v23);
      v23 = v49;
    }
    while (v49);
  }
LABEL_77:
  *(_QWORD *)(a1 + 40) = 0;
  if (!*(_BYTE *)(v17 + 26))
    *(_BYTE *)(v17 + 26) = 61;
  if (v15)
    return PRfastSpell(v11, v17, a1);
  v50 = *(unsigned __int16 *)(v12 + 18);
  PRssClr(v12);
  v51 = *(unsigned __int16 *)(a1 + 14);
  v52 = *(unsigned __int16 *)(a1 + 12);
  if (v51 > v52)
  {
    v14 = 0xE6FFFFFF85;
    goto LABEL_83;
  }
  if (v51 == v52)
  {
    *(_WORD *)(a1 + 16) = 0;
    return 200;
  }
  v54 = PRss(*(_BYTE **)a1, v51, v11, v17, *(_QWORD *)(a1 + 32), *(_WORD *)(a1 + 10) & 1, (*(_WORD *)(a1 + 10) & 0x20) != 0);
  if (!(_DWORD)v54)
  {
    if ((*(_WORD *)(a1 + 10) & 1) != 0 && v21)
    {
      v55 = *(unsigned __int16 *)(v12 + 18) - v50;
      if (!v55)
        LOBYTE(v55) = 0;
      if ((v21 & 0xF0) != 0)
        v56 = 16;
      else
        v56 = v21;
      v57 = (_BYTE *)(v22 + 5);
      do
      {
        *v57 = v55 - (*v57 == 255);
        v57 += 6;
        --v56;
      }
      while (v56);
    }
    if (v21)
      *(_BYTE *)(v11 + 48) = v21;
    *(_WORD *)(a1 + 16) = *(_WORD *)(v12 + 20);
    v58 = *(_QWORD *)(v12 + 56);
    if (v58)
    {
      v59 = PRIcsTokWalk(v58, v11, v17, *(char *)(a1 + 61));
      if ((_DWORD)v59)
      {
LABEL_106:
        v8 = v59;
LABEL_107:
        PRssClr(v12);
        return v8;
      }
      if ((v4 - 12) <= 2)
      {
        if ((v4 - 13) <= 1)
        {
          if (*(_BYTE *)(v12 + 2) == 2)
          {
            v60 = *(unsigned __int8 *)(v17 + 20);
            if (v60 <= 0xC && ((1 << v60) & 0x1320) != 0)
            {
              v59 = PRNpBuilder(v11, v17, v12);
              if ((_DWORD)v59)
                goto LABEL_106;
            }
          }
          if (*(_QWORD *)(v17 + 80))
          {
            v59 = PRPunct(v11, v17);
            if ((_DWORD)v59)
              goto LABEL_106;
          }
          if (*(_QWORD *)(v17 + 96))
          {
            v59 = PRExprMatch(v12, v11, v17);
            if ((_DWORD)v59)
              goto LABEL_106;
          }
        }
        if (*(_QWORD *)(v17 + 112))
        {
          PRPostAgree(v12, v11, v17);
          if ((_DWORD)v59)
            goto LABEL_106;
        }
        if (*(_QWORD *)(v17 + 48))
        {
          v61 = PRmatchr(v11, v17);
          v8 = v61;
          if ((_DWORD)v61 == 230 || (_DWORD)v61 == 220)
            goto LABEL_107;
        }
        if ((v4 - 13) <= 1)
        {
          v62 = PRmisrul(v11, v17, a1);
          v8 = v62;
          if ((_DWORD)v62 == 230 || (_DWORD)v62 == 220)
            goto LABEL_107;
        }
        v8 = PRspace(a1, v11, v17);
        if ((_DWORD)v8)
          return v8;
        PRprune(a1, v12);
        if (v64)
        {
          v63 = *(_WORD *)(v11 + 24) ? *(_QWORD *)(a1 + 40) : 0;
          v8 = PRfixSpan(v11, v17, v63, a1);
          if ((_DWORD)v8)
            return v8;
          v8 = PRfixPars(v11, v17, a1);
          if ((_DWORD)v8)
            return v8;
        }
      }
    }
    return 0;
  }
  v8 = v54;
  if ((_DWORD)v54 == 200)
    *(_WORD *)(a1 + 16) = 0;
  return v8;
}

_QWORD *PRfreeErrList(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    do
    {
      v1 = (_QWORD *)result[5];
      PRfreeErr(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

uint64_t PRCtGet(char *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int16 *a7)
{
  unint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  int v11;
  int v12;
  __int16 v13;
  unsigned __int16 v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  unsigned int v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  __int16 v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t result;
  __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  char **v41;
  uint64_t v42;
  unsigned __int16 v43;
  char *v44;
  int v45;
  int v49;
  unsigned int v50;
  char *v51;
  int v52;
  unsigned int v53;
  unsigned int v57;
  signed int v58;
  unsigned __int16 v59;
  unsigned __int16 v60;
  char __dst[128];
  char v62[129];
  unsigned __int8 v63[129];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v60 = 0;
  v59 = 0;
  v58 = 0;
  if (a5)
  {
    *(_DWORD *)(a5 + 18) = 0;
    *(_WORD *)(a5 + 24) = 0;
    if (*(_WORD *)(a5 + 16))
    {
      v7 = 0;
      v8 = *(_QWORD *)(a5 + 8);
      do
        *(_WORD *)(v8 + 2 * v7++) = -1;
      while (v7 < *(unsigned __int16 *)(a5 + 16));
    }
  }
  *a7 = 0;
  v9 = *(__int16 **)(a4 + 72);
  if (!v9)
    return 0;
  v10 = *((_QWORD *)v9 + 2);
  v51 = (char *)*((_QWORD *)v9 + 3);
  v11 = *v9;
  v12 = *((_DWORD *)v9 + 1);
  v57 = (unsigned __int16)v9[1];
  v49 = *((_DWORD *)v9 + 3);
  v50 = *(_DWORD *)(a4 + 40);
  v53 = (unsigned __int16)v9[4];
  v13 = strlen(a1);
  SLfun((uint64_t)a1, 0, (__int16)(v13 - 1), &v60, &v59);
  v14 = 0;
  v60 &= ~0x8000u;
  v15 = (unsigned __int16)(v12 & v60);
  v16 = v59 % v11;
  v17 = 2 * v15;
  v18 = v15 + (v12 >> 1) + v11;
  v52 = 2 * v15;
  while (1)
  {
    v19 = 4 * v16;
    v20 = *(unsigned __int8 *)(v10 + v19);
    v21 = (unsigned __int8 *)(v10 + (int)v19);
    v22 = v21[1] | (v20 << 8);
    if (!v22)
      return 0;
    if ((v22 & 0x7FFF) != v60)
      goto LABEL_22;
    v23 = v21[3] | (v21[2] << 8);
    if (v23 < v53)
    {
      v24 = v51;
      goto LABEL_15;
    }
    if (SLSeek(v50, v49 + v23, 0) == 8)
    {
      v35 = *(_QWORD *)(a3 + 32);
      v36 = 0xDC0000006FLL;
      goto LABEL_46;
    }
    if (SLFRead(v50, 128, __dst, (unsigned int *)&v58) == 8 || v58 <= 2)
    {
      v35 = *(_QWORD *)(a3 + 32);
      v36 = 0xDC00000070;
LABEL_46:
      *(_QWORD *)v35 = v36;
      *(_WORD *)(v35 + 8) = 100;
      return 220;
    }
    v23 = 0;
    v24 = __dst;
LABEL_15:
    v25 = &v24[v23];
    v26 = *v25;
    v27 = v25[1];
    v28 = v23 + 3;
    v29 = v24[(unsigned __int16)(v23 + 2)];
    *a7 = v29;
    if (v26)
    {
      v30 = 0;
      do
      {
        v31 = v28 + 1;
        v63[(__int16)v30++] = v24[(unsigned __int16)v28++];
      }
      while (v26 > (__int16)v30);
    }
    else
    {
      v31 = v28;
    }
    v63[v26] = 0;
    if (a2 != 2)
    {
      v34 = a7;
      goto LABEL_30;
    }
    v32 = SLstrcmp(a1, v63);
    v17 = v52;
    if (!v32)
      break;
LABEL_22:
    v16 += v18;
    do
      v16 -= v11;
    while (v16 >= v11);
    result = 0;
    if (v57 >= v14)
    {
      ++v14;
      v18 += v17;
      if ((char)v20 < 0)
        continue;
    }
    return result;
  }
  v34 = a7;
  v29 = *a7;
LABEL_30:
  if (v29 < 1)
  {
    v38 = v31;
    if ((_DWORD)v27)
      goto LABEL_34;
LABEL_43:
    v62[v27] = 0;
    if (a2 != 1)
    {
      v43 = 1;
      v41 = (char **)a5;
      goto LABEL_48;
    }
    goto LABEL_44;
  }
  v37 = 0;
  do
  {
    v38 = v31 + 1;
    *(_BYTE *)(a6 + v37++) = v24[(unsigned __int16)v31++];
  }
  while (v37 < *v34);
  if (!(_DWORD)v27)
    goto LABEL_43;
LABEL_34:
  v39 = 0;
  do
  {
    v40 = (unsigned __int16)v38++;
    v62[(__int16)v39++] = v24[v40];
  }
  while ((int)v27 > (__int16)v39);
  v62[v27] = 0;
  if (a2 == 1)
  {
LABEL_44:
    v44 = (char *)v63;
    v41 = (char **)a5;
    v45 = 0;
    goto LABEL_49;
  }
  v41 = (char **)a5;
  LOWORD(v42) = 0;
  v43 = 1;
  do
  {
    v42 = (__int16)v42;
    if (v62[(__int16)v42] == 36)
    {
      ++v43;
      v62[v42] = 0;
    }
    LOWORD(v42) = v42 + 1;
  }
  while ((int)v27 > (__int16)v42);
LABEL_48:
  v45 = v43;
  v44 = v62;
LABEL_49:
  PRaddList(v41, v44, v45, 0);
  return 0;
}

uint64_t PRdb(unsigned __int8 *a1, int a2, int a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8x8_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  _QWORD *v27;
  __int16 v28;
  unsigned int v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v42;
  int v43;
  int v44;
  _BYTE *v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  const char *v52;
  void *v53;
  void *v54;
  int v55;
  _BYTE __dst[3];
  unsigned int v57;
  unsigned __int8 v58;

  v58 = 0;
  if (!a1)
    return 230;
  *((_DWORD *)a1 + 22) = 0;
  v6 = a1 + 88;
  *((_DWORD *)a1 + 23) = 0;
  *((_WORD *)a1 + 48) = 0;
  v7 = PRGetAppElem(*a1);
  if (!v7)
  {
    v11 = 0xE6FFFFFF93;
LABEL_62:
    *((_QWORD *)a1 + 11) = v11;
    *((_WORD *)a1 + 48) = 420;
    return 230;
  }
  v8 = v7;
  *(_QWORD *)(v7 + 32) = v6;
  if (a2 == 4)
  {
    v12 = PRGetDbElem(*a1, a1[1]);
    if (!v12)
      goto LABEL_33;
    v14 = v12;
    v15 = *(_QWORD *)(v12 + 128);
    if (!v15)
    {
      v11 = 0xE6FFFFFF88;
      goto LABEL_62;
    }
    if (a3 <= 511)
    {
      if (a3 == 128)
      {
        v37 = *((__int16 *)a1 + 13);
        v38 = *((unsigned __int16 *)a1 + 13);
        if ((v38 & ~*((unsigned __int16 *)a1 + 15)) != 0)
        {
          *((_WORD *)a1 + 13) = *(_WORD *)(v12 + 16);
          v25 = 0x4FFFFFF97;
        }
        else
        {
          *(_WORD *)(v12 + 16) = v38;
          *(_DWORD *)(v15 + 20) = v37;
          PRPunTerm(v12);
          PRPunLoad(v8, v14);
          PRExprTerm(v14);
          PRExprLoad(v8, v14, *((unsigned __int16 *)a1 + 5), 0);
          v39 = *(_QWORD *)(v14 + 48);
          v40 = *(unsigned __int8 *)(v14 + 20);
          if ((a1[26] & 0xF0) == 0x20 && v40 == 16)
            v42 = 64;
          else
            v42 = a1[26] & 0xF0;
          PRLangDialPos(*(_QWORD *)(v14 + 48), &v58, 0, v40, v42);
          LoadDialTable(v8, v39, v58);
          v43 = *((__int16 *)a1 + 14);
          v44 = *((unsigned __int16 *)a1 + 14);
          if ((v44 & ~*((unsigned __int16 *)a1 + 16)) == 0)
          {
            *(_WORD *)(v14 + 18) = v44;
            *(_DWORD *)(v15 + 24) = v43;
            goto LABEL_88;
          }
          v25 = 0x4FFFFFF96;
        }
      }
      else
      {
        if (a3 != 256)
          goto LABEL_21;
        if (*(_QWORD *)(*(_QWORD *)(v15 + 3184) + 216))
        {
          v25 = 0x4000001FALL;
        }
        else
        {
          v46 = malloc_type_calloc(1uLL, 0x300uLL, 0x1030040B89FAF2CuLL);
          if (!v46)
          {
            v11 = 0xE6FFFFFF87;
            goto LABEL_62;
          }
          *(_WORD *)v46 = 0;
          v46[745] = a1[24];
          v47 = *(_QWORD *)(v15 + 3184);
          *(_QWORD *)(v47 + 216) = v46;
          if (*((_QWORD *)a1 + 6))
          {
            __strcpy_chk();
            __strcpy_chk();
          }
          __strcpy_chk();
          __strcat_chk();
          if (!IHhyp("", *(__int16 **)(v47 + 216)))
          {
            *(_WORD *)v14 |= 2u;
            *(_WORD *)(v15 + 1320) |= 0x100u;
            goto LABEL_88;
          }
          *(_WORD *)(v15 + 1320) |= 0x2000u;
          free(*(void **)(v47 + 216));
          *(_QWORD *)(v47 + 216) = 0;
          *(_DWORD *)(v15 + 1308) = 0;
          *(_WORD *)v14 &= ~2u;
          v25 = 0x4000001F9;
        }
      }
    }
    else
    {
      if (a3 != 512)
      {
        if (a3 != 1024)
        {
          if (a3 != 4096)
          {
LABEL_21:
            v11 = 0xE6FFFFFF94;
            goto LABEL_62;
          }
          UpdateDocFormat((uint64_t)a1, v8, v12, v13);
LABEL_88:
          v24 = 0;
          *((_WORD *)a1 + 7) = *(_WORD *)v14;
          return v24;
        }
        v57 = 0;
        if (SLSeek(*(_DWORD *)(v12 + 40), 1000, 0) == 8)
        {
LABEL_51:
          v35 = *(_QWORD *)(v8 + 32);
          v36 = 0xDC0000006FLL;
LABEL_67:
          *(_QWORD *)v35 = v36;
          *(_WORD *)(v35 + 8) = 420;
          return 220;
        }
        if (SLFRead(*(_DWORD *)(v14 + 40), 2, __dst, &v57) != 8)
        {
          if (SLSeek(*(_DWORD *)(v14 + 40), (__dst[0] << 17) | (__dst[1] << 9), 0) == 8)
            goto LABEL_51;
          v53 = malloc_type_calloc(1uLL, 0x400uLL, 0xBB137A29uLL);
          if (!v53)
            goto LABEL_66;
          v54 = v53;
          if (SLRead(*(_DWORD *)(v14 + 40), 0x400u, v53, &v57) != 8)
          {
            v55 = PRExprInit(v8, v14, (uint64_t)v54, *((unsigned __int16 *)a1 + 5), 1);
            free(v54);
            if (v55)
            {
              v11 = 0xE6FFFFFF83;
              goto LABEL_62;
            }
            goto LABEL_88;
          }
          free(v54);
        }
        v35 = *(_QWORD *)(v8 + 32);
        v36 = 0xDC00000070;
        goto LABEL_67;
      }
      v34 = *(_QWORD *)(*(_QWORD *)(v15 + 3184) + 216);
      if (v34)
      {
        IHterm(v34);
        free(*(void **)(*(_QWORD *)(v15 + 3184) + 216));
        *(_QWORD *)(*(_QWORD *)(v15 + 3184) + 216) = 0;
        *(_WORD *)v14 &= ~2u;
        goto LABEL_88;
      }
      v25 = 0x4000001FBLL;
    }
    *((_QWORD *)a1 + 11) = v25;
    *((_WORD *)a1 + 48) = 420;
    return 4;
  }
  if (a2 == 2)
  {
    if (a3)
      goto LABEL_21;
    v16 = (_QWORD *)*((_QWORD *)a1 + 10);
    if (v16)
    {
      v17 = (_QWORD *)v16[2];
      if (v17)
      {
        do
        {
          if (v17 == (_QWORD *)v16[2])
          {
            v18 = *(unsigned __int8 *)v17;
            v19 = (unsigned __int8 *)(v17[1] - 1);
            do
            {
              v17[1] = v19;
              v20 = *v19--;
            }
            while (v20 != v18);
            free(v19 + 1);
          }
          v21 = (_QWORD *)v17[3];
          free(v17);
          v17 = v21;
        }
        while (v21);
      }
    }
    free(v16);
    v22 = a1[1];
    if (v22 < *(unsigned __int8 *)(v8 + 8))
    {
      v23 = *(void **)(*(_QWORD *)v8 + 8 * v22);
      if (v23)
      {
        PRDbTerm(v8, *(_QWORD *)(*(_QWORD *)v8 + 8 * v22));
        free(v23);
        v24 = 0;
        *(_QWORD *)(*(_QWORD *)v8 + 8 * v22) = 0;
        --*(_BYTE *)(v8 + 9);
        return v24;
      }
    }
LABEL_33:
    v11 = 0xE6FFFFFF92;
    goto LABEL_62;
  }
  if (a2 != 1)
  {
    v11 = 0xE6FFFFFF95;
    goto LABEL_62;
  }
  if (a3)
    goto LABEL_21;
  v9 = *(unsigned __int8 *)(v7 + 8);
  if (*(unsigned __int8 *)(v7 + 9) < v9)
    goto LABEL_8;
  v24 = ExpandDbElemArray(v7);
  if ((_DWORD)v24)
    return v24;
  v9 = *(unsigned __int8 *)(v8 + 8);
  if (*(_BYTE *)(v8 + 8))
  {
LABEL_8:
    v10 = 0;
    while (*(_QWORD *)(*(_QWORD *)v8 + 8 * v10))
    {
      if (v9 == ++v10)
        goto LABEL_43;
    }
    v9 = v10;
  }
LABEL_43:
  v26 = malloc_type_calloc(1uLL, 0x98uLL, 0x1030040A87721C6uLL);
  if (!v26)
    goto LABEL_66;
  v27 = v26;
  v28 = *((_WORD *)a1 + 6);
  *((_WORD *)a1 + 7) = v28;
  *v26 = v28;
  v29 = a1[24];
  v30 = SLLngToA(v29);
  v27[1] = v30;
  if (!v30)
  {
    free(v27);
    v11 = 0xE6FFFFFF9CLL;
    goto LABEL_62;
  }
  v31 = malloc_type_calloc(1uLL, 0xC78uLL, 0x1020040DC1EA3C0uLL);
  v27[16] = v31;
  if (!v31)
  {
    free(v27);
LABEL_66:
    v35 = *(_QWORD *)(v8 + 32);
    v36 = 0xDC00000078;
    goto LABEL_67;
  }
  v32 = PRDbInit(v29, *((__int16 *)a1 + 13), *((__int16 *)a1 + 14), v8, (uint64_t)v27, (uint64_t)a1);
  if ((_DWORD)v32)
    goto LABEL_47;
  *(_BYTE *)(v8 + 90) = 0;
  v48 = *(_WORD *)(v8 + 88);
  v49 = v27[16];
  *(_WORD *)(v49 + 3178) = v48;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(v49 + 3184) + 264) + 3204) = v48;
  if ((a1[12] & 1) == 0)
    goto LABEL_91;
  v50 = (const char *)*((_QWORD *)a1 + 7);
  if (v50)
  {
    v52 = *(const char **)v50;
    v50 += 8;
    v51 = v52;
  }
  else
  {
    v51 = 0;
  }
  v32 = PRinitProfile(v8, (uint64_t)v27, 0, v50, v51);
  if ((_DWORD)v32)
  {
LABEL_47:
    v24 = v32;
    PRDbTerm(v8, (uint64_t)v27);
    free(v27);
  }
  else
  {
LABEL_91:
    UpdateDocFormat((uint64_t)a1, v8, (uint64_t)v27, v33);
    v24 = 0;
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = v27;
    ++*(_BYTE *)(v8 + 9);
    *((_WORD *)a1 + 7) = *(_WORD *)v27;
    a1[1] = v9;
  }
  return v24;
}

uint64_t ExpandDbElemArray(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t result;
  uint64_t v5;

  v2 = malloc_type_calloc(*(unsigned __int8 *)(a1 + 8) + 4, 8uLL, 0x2004093837F09uLL);
  if (v2)
  {
    v3 = v2;
    memcpy(v2, *(const void **)a1, 8 * *(unsigned __int8 *)(a1 + 8));
    free(*(void **)a1);
    result = 0;
    *(_QWORD *)a1 = v3;
    *(_BYTE *)(a1 + 8) += 4;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v5 = 0xDC00000078;
    *(_WORD *)(v5 + 8) = 420;
    return 220;
  }
  return result;
}

uint64_t LoadDialTable(uint64_t a1, uint64_t a2, int a3)
{
  void *v4;
  unsigned int v5;
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;

  v12 = 0;
  v4 = *(void **)(a2 + 288);
  v5 = *(_DWORD *)a2;
  v6 = *(unsigned __int16 *)(a2 + 296);
  v7 = v6 * a3;
  if (!a3)
    v7 = 0;
  result = SLSeek(v5, *(_DWORD *)(a2 + 4) + *(_DWORD *)(a2 + 300) + v7, 0);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 0xDC0000006FLL;
LABEL_10:
    *(_QWORD *)v9 = v10;
    *(_WORD *)(v9 + 8) = 722;
    return result;
  }
  result = SLFRead(v5, v6, v4, &v12);
  if ((_DWORD)result)
    v11 = 0;
  else
    v11 = v12 == v6;
  if (!v11)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 0xDC00000070;
    goto LABEL_10;
  }
  return result;
}

uint64_t UpdateDocFormat(uint64_t result, uint64_t a2, uint64_t a3, uint8x8_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15[2];

  v5 = *(_QWORD *)(a3 + 64);
  if (v5)
  {
    v6 = v5 + 16;
    if (*(_BYTE *)(a3 + 23))
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 23)) = *(_DWORD *)(v5 + 1044);
    if (*(_BYTE *)(a3 + 24))
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 24)) = *(_DWORD *)(v5 + 1048);
    if (*(_BYTE *)(a3 + 25))
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 25)) = *(_DWORD *)(v5 + 1052);
    if (*(_BYTE *)(a3 + 26))
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 26)) = *(_DWORD *)(v5 + 1056);
    if (*(_BYTE *)(a3 + 22))
      *(_DWORD *)(v6 + 4 * *(unsigned __int8 *)(a3 + 22)) = *(_DWORD *)(v5 + 1060);
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_WORD *)(result + 10);
  v8 = *(_QWORD *)(result + 2);
  *(_QWORD *)(a3 + 22) = v8;
  v9 = (_BYTE *)(a3 + 22);
  *(_WORD *)(a3 + 30) = v7;
  a4.i32[0] = *(_DWORD *)(a3 + 23);
  *(_DWORD *)(a3 + 32) = a4.i32[0];
  *(_BYTE *)(a3 + 36) = v8;
  if (*(_BYTE *)(a2 + 28))
  {
    v15[0] = v8;
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(_BYTE *)(a3 + 22) = v15[0];
    v15[0] = *(_BYTE *)(a3 + 23);
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(_BYTE *)(a3 + 23) = v15[0];
    v15[0] = *(_BYTE *)(a3 + 24);
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(_BYTE *)(a3 + 24) = v15[0];
    v15[0] = *(_BYTE *)(a3 + 25);
    SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    *(_BYTE *)(a3 + 25) = v15[0];
    v15[0] = *(_BYTE *)(a3 + 26);
    result = SLchcnv((char *)v15, 1, v15, 1, *(unsigned __int8 *)(a3 + 20));
    v10 = v15[0];
    *(_BYTE *)(a3 + 26) = v15[0];
    if (!v5)
      return result;
  }
  else
  {
    v10 = vmovl_u8(a4).u8[6];
    if (!v5)
      return result;
  }
  v11 = *(unsigned __int8 *)(a3 + 23);
  if (*(_BYTE *)(a3 + 23))
  {
    *(_DWORD *)(v5 + 1044) = *(_DWORD *)(v6 + 4 * v11);
    *(_DWORD *)(v6 + 4 * v11) = 2048;
  }
  v12 = *(unsigned __int8 *)(a3 + 24);
  if (*(_BYTE *)(a3 + 24))
  {
    *(_DWORD *)(v5 + 1048) = *(_DWORD *)(v6 + 4 * v12);
    *(_DWORD *)(v6 + 4 * v12) = 2048;
  }
  v13 = *(unsigned __int8 *)(a3 + 25);
  if (*(_BYTE *)(a3 + 25))
  {
    *(_DWORD *)(v5 + 1052) = *(_DWORD *)(v6 + 4 * v13);
    *(_DWORD *)(v6 + 4 * v13) = 2048;
  }
  if (v10)
  {
    *(_DWORD *)(v5 + 1056) = *(_DWORD *)(v6 + 4 * v10);
    *(_DWORD *)(v6 + 4 * v10) = 268436480;
  }
  v14 = *v9;
  if (*v9)
  {
    *(_DWORD *)(v5 + 1060) = *(_DWORD *)(v6 + 4 * v14);
    *(_DWORD *)(v6 + 4 * v14) = 8;
  }
  *(_BYTE *)(v5 + 1040) = (v11 | v13 | v10 | v12) != 0;
  return result;
}

uint64_t PRDbInit(int a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  size_t v7;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  unsigned int v22;
  unint64_t v23;
  int v24;
  uint64_t *v25;
  _DWORD *v26;
  _DWORD *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned __int8 *v32;
  int v33;
  char v34;
  int v35;
  unsigned int v36;
  __int16 v37;
  char v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  unsigned int v47;
  void *v48;
  char *v49;
  char *v50;
  int v51;
  int v52;
  _BYTE *v53;
  _BYTE *v54;
  _BYTE *v55;
  int v56;
  uint64_t v57;
  const char *v58;
  _BYTE *v59;
  char v60;
  unsigned __int16 v61;
  uint64_t v62;
  size_t v63;
  size_t v64;
  unsigned int v65;
  size_t v66;
  unsigned int v67;
  size_t v68;
  unsigned int v69;
  size_t v70;
  size_t v71;
  unsigned int v72;
  unsigned int v73;
  __int16 v74;
  int v75;
  size_t v76;
  _WORD *v77;
  _WORD *v78;
  unsigned int v79;
  int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  __int16 v84;
  void *v85;
  unsigned int v86;
  size_t v87;
  uint64_t v88;
  void *v89;
  void *v91;
  unsigned int v92;
  int8x16_t v93;
  uint64_t v94;
  unsigned int v95;
  size_t v96;
  unsigned int v97;
  size_t v98;
  __int16 v99;
  unsigned int v100;
  unsigned int v101;
  size_t v102;
  unsigned int v103;
  unsigned int v104;
  size_t v105;
  unsigned int v106;
  size_t v107;
  unsigned int v108;
  size_t v109;
  size_t v110;
  unsigned int v111;
  size_t v112;
  char v113;
  unsigned int v114;
  _BYTE __dst[3];
  unsigned int v116;
  int v117[2];

  v7 = *(_QWORD *)(a5 + 128);
  v114 = 0;
  if (*(_QWORD *)(a6 + 40))
  {
    v13 = *(unsigned __int8 *)(a6 + 24);
    v14 = v13 == 18 || v13 == 4;
    if (!v14 || *(_QWORD *)(a6 + 72))
    {
      __strcpy_chk();
      __strcpy_chk();
      if (*(_QWORD *)(a6 + 48))
      {
        __strcpy_chk();
        __strcpy_chk();
      }
      *(_QWORD *)(v7 + 3168) = *(unsigned __int16 *)(a6 + 34);
      if (PRIcs(a4, a5, a1, a2, a3, "", 0, v7, 1, 0))
      {
        v15 = *(_QWORD *)(a4 + 32);
        *(_QWORD *)v15 = 0xDC000000A0;
        *(_WORD *)(v15 + 8) = 440;
        *(_WORD *)(v7 + 1320) &= ~0x80u;
        return 220;
      }
      if (*(_QWORD *)(a6 + 48))
      {
        v18 = *(_WORD *)a5;
        if ((*(_WORD *)(v7 + 1320) & 0x2000) != 0)
        {
          *(_WORD *)a5 = v18 & 0xFFFD;
          v19 = *(_QWORD *)(a4 + 32);
          *(_QWORD *)v19 = 0x4000001F9;
          *(_WORD *)(v19 + 8) = 440;
        }
        else
        {
          *(_WORD *)a5 = v18 | 2;
        }
      }
      v20 = 0;
      v21 = 0;
      *(_WORD *)(a6 + 30) = *(_DWORD *)(v7 + 12);
      *(_WORD *)(a6 + 32) = *(_DWORD *)(v7 + 16);
      v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 3184) + 248) + 64);
      *(_DWORD *)(a5 + 40) = v22;
      *(_BYTE *)(a5 + 20) = a1;
      *(_DWORD *)(a5 + 16) = *(_DWORD *)(a6 + 26);
      v113 = 0;
      if (a1 != 4 && a1 != 18)
      {
        if (SLSeek(v22, 1000, 0) == 8)
          goto LABEL_27;
        if (SLFRead(*(_DWORD *)(a5 + 40), 2, __dst, &v114) == 8)
        {
LABEL_89:
          v29 = *(_QWORD *)(a4 + 32);
          v30 = 0xDC00000070;
          goto LABEL_126;
        }
        v31 = (__dst[0] << 17) | (__dst[1] << 9);
        if (!v31)
        {
          v29 = *(_QWORD *)(a4 + 32);
          v30 = 0xDC0000008CLL;
          goto LABEL_126;
        }
        if (SLSeek(*(_DWORD *)(a5 + 40), v31, 0) == 8)
        {
LABEL_27:
          v29 = *(_QWORD *)(a4 + 32);
          v30 = 0xDC0000006FLL;
LABEL_126:
          *(_QWORD *)v29 = v30;
          *(_WORD *)(v29 + 8) = 440;
          return 220;
        }
        v32 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x400uLL, 0x6F39C0F3uLL);
        if (!v32)
        {
LABEL_125:
          v29 = *(_QWORD *)(a4 + 32);
          v30 = 0xDC00000078;
          goto LABEL_126;
        }
        v21 = v32;
        if (SLRead(*(_DWORD *)(a5 + 40), 0x400u, v32, &v114) == 8)
        {
LABEL_88:
          free(v21);
          goto LABEL_89;
        }
        v20 = (v21[754] << 17) | (v21[755] << 9);
      }
      HIDWORD(v23) = a1;
      LODWORD(v23) = (a1 << 24) - 0x4000000;
      v24 = 0;
      switch((v23 >> 25))
      {
        case 0u:
        case 7u:
          goto LABEL_20;
        case 4u:
          v33 = v20 | 0x9C;
          goto LABEL_40;
        case 6u:
          v33 = v20 | 0x9C;
          SLSeek(*(_DWORD *)(a5 + 40), v20 | 0x9C, 0);
          if (SLFRead(*(_DWORD *)(a5 + 40), 1, &v113, &v114) == 8 || v114 != 1)
            goto LABEL_89;
          v34 = v113;
          v35 = *(unsigned __int16 *)(a6 + 30);
          if (v113 < 0)
          {
            v36 = *(unsigned __int16 *)(a6 + 30);
          }
          else
          {
            v36 = v35 & 0xFFFFFF7F;
            *(_WORD *)(a6 + 30) = v35 & 0xFF7F;
            v37 = *(_WORD *)(a6 + 26);
            *(_WORD *)(a6 + 26) = v37 & 0xFF7F;
            if ((v35 & v37 & 0x70) == 0)
            {
              *(_WORD *)(a6 + 26) = v37 & 0xFF0F | 0x40;
              *(_QWORD *)(a6 + 88) = 0x4FFFFFF97;
              *(_WORD *)(a6 + 96) = 440;
            }
          }
          if ((v34 & 0x40) != 0)
          {
            v73 = v36;
          }
          else
          {
            v73 = v36 & 0xFFFFFF9F;
            *(_WORD *)(a6 + 30) = v36 & 0xFF9F;
            v74 = *(_WORD *)(a6 + 26);
            *(_WORD *)(a6 + 26) = v74 & 0xFF9F;
            if ((v36 & 0x90 & v74) == 0)
            {
              *(_WORD *)(a6 + 26) = v74 & 0xFF0F | 0x80;
              *(_QWORD *)(a6 + 88) = 0x4FFFFFF97;
              *(_WORD *)(a6 + 96) = 440;
            }
          }
          if ((~v73 & 3) != 0)
          {
            v73 &= 0xFFFFFFFC;
            *(_WORD *)(a6 + 30) = v73;
          }
          v75 = *(unsigned __int16 *)(a6 + 26);
          if ((v75 & ~v73 & 0xFFFFFF0F) != 0)
          {
            *(_QWORD *)(a6 + 88) = 0x4FFFFFF97;
            *(_WORD *)(a6 + 96) = 440;
            LOWORD(v75) = v73 & v75;
            *(_WORD *)(a6 + 26) = v75;
          }
          v24 = 0;
          *(_WORD *)(a5 + 16) = v75;
          *(_DWORD *)(v7 + 20) = (__int16)v75;
          if (a1 == 4 || a1 == 18)
            goto LABEL_20;
          if (a1 != 12)
            goto LABEL_103;
LABEL_40:
          SLSeek(*(_DWORD *)(a5 + 40), v33, 0);
          if (SLFRead(*(_DWORD *)(a5 + 40), 1, &v113, &v114) == 8 || v114 != 1)
            goto LABEL_89;
          v38 = v113;
          v39 = *(unsigned __int16 *)(a6 + 26);
          if ((v113 & 0x80000000) == 0)
          {
            v40 = *(_WORD *)(a6 + 30) & 0xFF7F;
            *(_WORD *)(a6 + 30) &= ~0x80u;
            if ((v39 & v40) == 0)
            {
              v39 = 64;
              *(_WORD *)(a6 + 26) = 64;
            }
          }
          if ((v38 & 0x40) == 0)
          {
            v41 = *(_WORD *)(a6 + 30) & 0xFFBF;
            *(_WORD *)(a6 + 30) &= ~0x40u;
            if ((v39 & v41) == 0)
            {
              LOWORD(v39) = 128;
              *(_WORD *)(a6 + 26) = 128;
            }
          }
          v24 = 0;
          *(_WORD *)(a5 + 16) = v39;
          *(_DWORD *)(v7 + 20) = (__int16)v39;
          if (a1 == 4 || a1 == 18)
            goto LABEL_20;
LABEL_103:
          v76 = __rev16(*((unsigned __int16 *)v21 + 353));
          if (!(_DWORD)v76)
            goto LABEL_138;
          v117[1] = 0;
          v77 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040CF817D87uLL);
          *(_QWORD *)(a5 + 72) = v77;
          if (!v77)
          {
            v82 = *(_QWORD *)(a4 + 32);
            v83 = 0xDC00000078;
            goto LABEL_108;
          }
          v78 = v77;
          v79 = *(_DWORD *)(a5 + 40);
          *v77 = bswap32(*((unsigned __int16 *)v21 + 350)) >> 16;
          v77[1] = bswap32(*((unsigned __int16 *)v21 + 351)) >> 16;
          *((_DWORD *)v77 + 1) = __rev16(*((unsigned __int16 *)v21 + 352));
          v80 = bswap32(*((_DWORD *)v21 + 177));
          v81 = *((unsigned __int16 *)v21 + 356);
          *((_DWORD *)v77 + 3) = bswap32(*(_DWORD *)(v21 + 714));
          if (SLSeek(v79, v80, 0) == 8)
          {
            v82 = *(_QWORD *)(a4 + 32);
            v83 = 0xDC0000006FLL;
LABEL_108:
            *(_QWORD *)v82 = v83;
            v84 = 120;
LABEL_120:
            *(_WORD *)(v82 + 8) = v84;
            free(v21);
            return 220;
          }
          v85 = malloc_type_calloc(1uLL, v76, 0x100004077774924uLL);
          *((_QWORD *)v78 + 2) = v85;
          if (v85)
          {
            if (SLFRead(v79, v76, v85, (unsigned int *)&v117[1]) != 8 && v117[1] == (_DWORD)v76)
            {
              v86 = __rev16(v81);
              if (v86 >= 0x200)
                v87 = 512;
              else
                v87 = v86;
              if (SLSeek(v79, *((_DWORD *)v78 + 3), 0) == 8)
              {
                v82 = *(_QWORD *)(a4 + 32);
                *(_QWORD *)v82 = 0xDC0000006FLL;
                v84 = 121;
                goto LABEL_120;
              }
              v91 = malloc_type_calloc(1uLL, v87, 0x27096CA4uLL);
              *((_QWORD *)v78 + 3) = v91;
              if (v91)
              {
                if (SLFRead(v79, v87, v91, (unsigned int *)&v117[1]) != 8 && v117[1] == (_DWORD)v87)
                {
                  if (v86 >= 0x200)
                  {
                    LOWORD(v87) = 512;
                    while (1)
                    {
                      v92 = (unsigned __int16)v87;
                      if (*(_BYTE *)(*((_QWORD *)v78 + 3) + (unsigned __int16)v87 - 1) == 33)
                        break;
                      LOWORD(v87) = v87 - 1;
                      if (v92 <= 1)
                      {
                        LOWORD(v87) = 0;
                        break;
                      }
                    }
                  }
                  v78[4] = v87;
LABEL_138:
                  v62 = PRSfxInit(a4, a5, (uint64_t)v21);
                  if ((_DWORD)v62)
                    goto LABEL_143;
                  PRSSInit(a4, a5, (uint64_t)v21, v93);
                  if ((_DWORD)v62)
                    goto LABEL_143;
                  v62 = PRPunInit(a4, a5, (uint64_t)v21);
                  if ((_DWORD)v62)
                    goto LABEL_143;
                  v62 = PRExprInit(a4, a5, (uint64_t)v21, *(unsigned __int16 *)(a6 + 10), 0);
                  if ((_DWORD)v62)
                    goto LABEL_143;
                  v62 = PRPostInit(a4, a5, (uint64_t)v21);
                  if ((_DWORD)v62)
                    goto LABEL_143;
                  v17 = PRAmInit(a4, a5, (uint64_t)v21);
                  free(v21);
                  v24 = v20;
                  if ((_DWORD)v17)
                    return v17;
LABEL_20:
                  v25 = *(uint64_t **)(a6 + 40);
                  if (!v25)
                    return 0;
                  *(_QWORD *)(a6 + 80) = 0;
                  *(_QWORD *)v117 = 0;
                  v26 = malloc_type_calloc(1uLL, 0x158uLL, 0x1030040924E0C2EuLL);
                  *(_QWORD *)(a5 + 48) = v26;
                  if (!v26)
                    goto LABEL_125;
                  v27 = v26;
                  *v26 = -1;
                  v28 = *(unsigned __int8 *)(a5 + 20);
                  if (v28 == 18 || v28 == 4)
                  {
                    if (SLOpen((uint64_t)(v25 + 1), *v25, &v117[1], 0) == 8)
                    {
                      v29 = *(_QWORD *)(a4 + 32);
                      v30 = 0xDC0000006ELL;
                      goto LABEL_126;
                    }
                    *v27 = v117[1];
                  }
                  else
                  {
                    v42 = *(_DWORD *)(a5 + 40);
                    *v26 = v42;
                    v117[1] = v42;
                  }
                  v27[1] = v24;
                  v43 = (unsigned __int8 *)malloc_type_calloc(1uLL, 0x200uLL, 0x61824AE7uLL);
                  if (!v43)
                    goto LABEL_125;
                  v21 = v43;
                  SLSeek(v117[1], v24, 0);
                  if (SLFRead(v117[1], 512, v21, (unsigned int *)v117) != 8 && v117[0] == 512)
                  {
                    v44 = *v21;
                    *((_BYTE *)v27 + 8) = v44;
                    if (v44)
                    {
                      v45 = (char *)malloc_type_calloc(v44 + 1, 1uLL, 0x100004077774924uLL);
                      *((_QWORD *)v27 + 2) = v45;
                      if (!v45)
                      {
LABEL_123:
                        v89 = v21;
LABEL_124:
                        free(v89);
                        goto LABEL_125;
                      }
                      strcpy(v45, (const char *)v21 + 1);
                    }
                    *((_BYTE *)v27 + 24) = v21[33];
                    *((_BYTE *)v27 + 25) = v21[34];
                    *((_BYTE *)v27 + 337) = v21[163];
                    *((_BYTE *)v27 + 26) = v21[35];
                    v46 = __rev16(*((unsigned __int16 *)v21 + 38));
                    v47 = bswap32(*((_DWORD *)v21 + 18));
                    v116 = v47;
                    if (!(_DWORD)v46)
                    {
LABEL_75:
                      v116 = 0;
                      v62 = SetFarTable((_QWORD *)v27 + 4, *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x24u, &v116, a4, v24);
                      if ((_DWORD)v62)
                        goto LABEL_143;
                      v62 = SetFarTable((_QWORD *)v27 + 5, 2 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x28u, &v116, a4, v24);
                      if ((_DWORD)v62)
                        goto LABEL_143;
                      v63 = bswap32(*((_DWORD *)v21 + 12));
                      v27[14] = v63;
                      v62 = SetHugeTable((char **)v27 + 6, v63, v117[1], (uint64_t)v21, 0x2Cu, a4, v24);
                      if ((_DWORD)v62)
                        goto LABEL_143;
                      v64 = bswap32(*((_DWORD *)v21 + 14));
                      v27[18] = v64;
                      v62 = SetHugeTable((char **)v27 + 8, v64, v117[1], (uint64_t)v21, 0x34u, a4, v24);
                      if ((_DWORD)v62)
                        goto LABEL_143;
                      v65 = bswap32(*((unsigned __int16 *)v21 + 32));
                      v66 = HIWORD(v65);
                      *((_WORD *)v27 + 44) = HIWORD(v65);
                      if ((_DWORD)v66)
                      {
                        v62 = SetFarTable((_QWORD *)v27 + 10, v66, v117[1], (uint64_t)v21, 0x3Cu, &v116, a4, v24);
                        if ((_DWORD)v62)
                          goto LABEL_143;
                      }
                      v67 = bswap32(*((unsigned __int16 *)v21 + 35));
                      v68 = HIWORD(v67);
                      *((_WORD *)v27 + 52) = HIWORD(v67);
                      if ((_DWORD)v68)
                      {
                        v62 = SetFarTable((_QWORD *)v27 + 12, v68, v117[1], (uint64_t)v21, 0x42u, &v116, a4, v24);
                        if ((_DWORD)v62)
                          goto LABEL_143;
                      }
                      v69 = bswap32(*((unsigned __int16 *)v21 + 38));
                      v70 = HIWORD(v69);
                      *((_WORD *)v27 + 60) = HIWORD(v69);
                      if ((_DWORD)v70)
                      {
                        v62 = SetFarTable((_QWORD *)v27 + 14, v70, v117[1], (uint64_t)v21, 0x48u, &v116, a4, v24);
                        if ((_DWORD)v62)
                          goto LABEL_143;
                      }
                      v71 = bswap32(*((_DWORD *)v21 + 22));
                      v27[34] = v71;
                      if ((_DWORD)v71)
                      {
                        v62 = SetHugeTable((char **)v27 + 16, v71, v117[1], (uint64_t)v21, 0x54u, a4, v24);
                        if ((_DWORD)v62)
                          goto LABEL_143;
                        v72 = v27[34];
                      }
                      else
                      {
                        v72 = 0;
                      }
                      *((_WORD *)v27 + 70) = v72 / 7;
                      v95 = bswap32(*((unsigned __int16 *)v21 + 48));
                      v96 = HIWORD(v95);
                      *((_WORD *)v27 + 76) = HIWORD(v95);
                      if (!(_DWORD)v96
                        || (v62 = SetFarTable((_QWORD *)v27 + 18, v96, v117[1], (uint64_t)v21, 0x5Cu, &v116, a4, v24),
                            !(_DWORD)v62)
                        && (*((_WORD *)v27 + 77) = *((_WORD *)v27 + 76) >> 2,
                            v97 = bswap32(*((unsigned __int16 *)v21 + 51)),
                            *((_WORD *)v27 + 84) = HIWORD(v97),
                            v62 = SetFarTable((_QWORD *)v27 + 20, HIWORD(v97), v117[1], (uint64_t)v21, 0x62u, &v116, a4, v24), !(_DWORD)v62))
                      {
                        v62 = SetFarTable((_QWORD *)v27 + 22, 4 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x68u, &v116, a4, v24);
                        if (!(_DWORD)v62)
                        {
                          v27[48] = bswap32(*((_DWORD *)v21 + 28));
                          v98 = bswap32(*((_DWORD *)v21 + 28));
                          v27[48] = v98;
                          if (!(_DWORD)v98
                            || (v62 = SetHugeTable((char **)v27 + 23, v98, v117[1], (uint64_t)v21, 0x6Cu, a4, v24),
                                !(_DWORD)v62))
                          {
                            v99 = v27[34] || *((_WORD *)v27 + 84) ? 28 : 32;
                            *(_WORD *)a5 |= v99;
                            v62 = SetFarTable((_QWORD *)v27 + 25, 2 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x74u, &v116, a4, v24);
                            if (!(_DWORD)v62)
                            {
                              v100 = *((unsigned __int16 *)v21 + 41);
                              v101 = bswap32(v100);
                              v102 = __rev16(v100);
                              *((_WORD *)v27 + 61) = v102;
                              v103 = bswap32(*(_DWORD *)(v21 + 78));
                              v27[80] = v103;
                              v116 = v103 + HIWORD(v101);
                              v62 = SetFarTable((_QWORD *)v27 + 38, v102, v117[1], (uint64_t)v21, 0x201u, &v116, a4, v24);
                              if (!(_DWORD)v62)
                              {
                                *((_BYTE *)v27 + 324) = 2;
                                v62 = SetFarTable((_QWORD *)v27 + 26, 4 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x78u, &v116, a4, v24);
                                if (!(_DWORD)v62)
                                {
                                  v62 = SetHugeTable((char **)v27 + 27, v27[14], v117[1], (uint64_t)v21, 0x7Cu, a4, v24);
                                  if (!(_DWORD)v62)
                                  {
                                    if (!bswap32(*((_DWORD *)v21 + 32))
                                      || (v62 = SetFarTable((_QWORD *)v27 + 28, 4 * *((unsigned __int8 *)v27 + 26), v117[1], (uint64_t)v21, 0x80u, &v116, a4, v24), !(_DWORD)v62))
                                    {
                                      v104 = bswap32(*((unsigned __int16 *)v21 + 68));
                                      v105 = HIWORD(v104);
                                      *((_WORD *)v27 + 120) = HIWORD(v104);
                                      if (!(_DWORD)v105
                                        || (v62 = SetFarTable((_QWORD *)v27 + 29, v105, v117[1], (uint64_t)v21, 0x84u, &v116, a4, v24), !(_DWORD)v62))
                                      {
                                        v116 = 499;
                                        v62 = SetFarTable((_QWORD *)v27 + 31, 0xDuLL, v117[1], (uint64_t)v21, 0x201u, &v116, a4, v24);
                                        if (!(_DWORD)v62)
                                        {
                                          v106 = bswap32(*((unsigned __int16 *)v21 + 71));
                                          v107 = HIWORD(v106);
                                          *((_WORD *)v27 + 132) = HIWORD(v106);
                                          if (!(_DWORD)v107
                                            || (v62 = SetFarTable((_QWORD *)v27 + 32, v107, v117[1], (uint64_t)v21, 0x8Au, &v116, a4, v24), !(_DWORD)v62))
                                          {
                                            v108 = bswap32(*((unsigned __int16 *)v21 + 74));
                                            v109 = HIWORD(v108);
                                            *((_WORD *)v27 + 140) = HIWORD(v108);
                                            if (!(_DWORD)v109
                                              || (v62 = SetFarTable((_QWORD *)v27 + 34, v109, v117[1], (uint64_t)v21, 0x90u, &v116, a4, v24), !(_DWORD)v62))
                                            {
                                              v110 = v21[154];
                                              *((_BYTE *)v27 + 336) = v110;
                                              if (!(_DWORD)v110
                                                || (v62 = SetFarTable((_QWORD *)v27 + 41, v110, v117[1], (uint64_t)v21, 0x96u, &v116, a4, v24), !(_DWORD)v62))
                                              {
                                                v111 = bswap32(*(unsigned __int16 *)(v21 + 161));
                                                v112 = HIWORD(v111);
                                                *((_WORD *)v27 + 148) = HIWORD(v111);
                                                v27[75] = bswap32(*(_DWORD *)(v21 + 157));
                                                if (!(_DWORD)v112
                                                  || (v62 = SetFarTable((_QWORD *)v27 + 36, v112, v117[1], (uint64_t)v21, 0x9Du, &v116, a4, v24), !(_DWORD)v62))
                                                {
                                                  free(v21);
                                                  return 0;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
LABEL_143:
                      v17 = v62;
                      free(v21);
                      return v17;
                    }
                    v48 = malloc_type_calloc(1uLL, 0x18uLL, 0x1030040F514C710uLL);
                    *(_QWORD *)(a6 + 80) = v48;
                    if (!v48 || (v49 = (char *)malloc_type_calloc(1uLL, v46, 0xB5958046uLL)) == 0)
                    {
                      free(v21);
                      v89 = *(void **)(a6 + 80);
                      if (!v89)
                        goto LABEL_125;
                      goto LABEL_124;
                    }
                    v50 = v49;
                    SLSeek(v117[1], v47 + v24, 0);
                    if (SLFRead(v117[1], v46, v50, (unsigned int *)v117) != 8 && v117[0] == (_DWORD)v46)
                    {
                      v51 = *((unsigned __int8 *)v27 + 25);
                      **(_BYTE **)(a6 + 80) = v51;
                      if (v51)
                      {
                        v52 = 0;
                        v53 = 0;
                        while (1)
                        {
                          v54 = malloc_type_calloc(1uLL, 0x20uLL, 0x1030040BEB8C10EuLL);
                          if (!v54)
                            goto LABEL_123;
                          v55 = v54;
                          *v54 = *v50;
                          v56 = v50[1];
                          v57 = *(_QWORD *)(a6 + 80);
                          if (!*(_QWORD *)(v57 + 16))
                            *(_QWORD *)(v57 + 16) = v54;
                          v58 = v50 + 2;
                          if (v56)
                          {
                            v59 = v54 + 16;
                            do
                            {
                              --v56;
                              v60 = *v58++;
                              *v59++ = v60;
                            }
                            while ((_BYTE)v56);
                          }
                          v61 = strlen(v58);
                          *((_QWORD *)v55 + 1) = v58;
                          *((_QWORD *)v55 + 3) = 0;
                          if (v53)
                            *((_QWORD *)v53 + 3) = v55;
                          v50 = (char *)&v58[v61 + 1];
                          ++v52;
                          v53 = v55;
                          if (*((unsigned __int8 *)v27 + 25) <= (__int16)v52)
                            goto LABEL_75;
                        }
                      }
                      goto LABEL_75;
                    }
                    goto LABEL_89;
                  }
                  goto LABEL_88;
                }
                v82 = *(_QWORD *)(a4 + 32);
                v94 = 0xDC00000070;
              }
              else
              {
                v82 = *(_QWORD *)(a4 + 32);
                v94 = 0xDC00000078;
              }
              *(_QWORD *)v82 = v94;
              v84 = 123;
              goto LABEL_120;
            }
            v82 = *(_QWORD *)(a4 + 32);
            v88 = 0xDC00000070;
          }
          else
          {
            v82 = *(_QWORD *)(a4 + 32);
            v88 = 0xDC00000078;
          }
          *(_QWORD *)v82 = v88;
          v84 = 122;
          goto LABEL_120;
        default:
          goto LABEL_103;
      }
    }
  }
  v16 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)v16 = 0xE6FFFFFF90;
  *(_WORD *)(v16 + 8) = 440;
  return 230;
}

uint64_t PRSfxInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  _WORD *v7;
  _WORD *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  uint64_t v15;
  unsigned int v17;

  v3 = __rev16(*(unsigned __int16 *)(a3 + 724));
  if (!(_DWORD)v3)
    return 0;
  v17 = 0;
  v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x1010040466105CCuLL);
  *(_QWORD *)(a2 + 56) = v7;
  if (!v7)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = 0xDC00000078;
    goto LABEL_6;
  }
  v8 = v7;
  v9 = *(_DWORD *)(a2 + 40);
  *v7 = bswap32(*(unsigned __int16 *)(a3 + 718)) >> 16;
  v7[1] = bswap32(*(unsigned __int16 *)(a3 + 720)) >> 16;
  *((_DWORD *)v7 + 1) = __rev16(*(unsigned __int16 *)(a3 + 722));
  if (SLSeek(v9, bswap32(*(_DWORD *)(a3 + 726)), 0) != 8)
  {
    v13 = malloc_type_calloc(1uLL, v3, 0x2302F56BuLL);
    *((_QWORD *)v8 + 1) = v13;
    if (!v13)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v15 = 0xDC00000078;
      goto LABEL_15;
    }
    if (SLFRead(v9, v3, v13, &v17) == 8 || v17 != (_DWORD)v3)
    {
      v10 = *(_QWORD *)(a1 + 32);
      v15 = 0xDC00000070;
LABEL_15:
      *(_QWORD *)v10 = v15;
      v12 = 41;
      goto LABEL_16;
    }
    return 0;
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = 0xDC0000006FLL;
LABEL_6:
  *(_QWORD *)v10 = v11;
  v12 = 40;
LABEL_16:
  *(_WORD *)(v10 + 8) = v12;
  return 220;
}

int8x16_t PRSSInit(uint64_t a1, uint64_t a2, uint64_t a3, int8x16_t result)
{
  size_t v4;
  _WORD *v8;
  _WORD *v9;
  unsigned int v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  uint64_t i;
  const char *v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v26;
  uint16x8_t v27;
  int8x16_t v28;
  uint16x8_t v29;
  int8x16_t *v30;
  unsigned int v31;
  _BYTE __dst[1024];
  uint64_t v33;
  int8x16x4_t v34;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = __rev16(*(unsigned __int16 *)(a3 + 736));
  if ((_DWORD)v4)
  {
    v31 = 0;
    v8 = malloc_type_calloc(1uLL, 0x428uLL, 0x101004032A3AAA5uLL);
    *(_QWORD *)(a2 + 64) = v8;
    if (!v8)
    {
      v11 = *(_QWORD *)(a1 + 32);
      result.i64[0] = 0xDC00000078;
      goto LABEL_7;
    }
    v9 = v8;
    v10 = *(_DWORD *)(a2 + 40);
    *v8 = bswap32(*(unsigned __int16 *)(a3 + 730)) >> 16;
    v8[1] = bswap32(*(unsigned __int16 *)(a3 + 732)) >> 16;
    *((_DWORD *)v8 + 1) = __rev16(*(unsigned __int16 *)(a3 + 734));
    if (SLSeek(v10, bswap32(*(_DWORD *)(a3 + 738)), 0) == 8)
    {
      v11 = *(_QWORD *)(a1 + 32);
      result.i64[0] = 0xDC0000006FLL;
LABEL_7:
      *(_QWORD *)v11 = result.i64[0];
      v12 = 320;
LABEL_16:
      *(_WORD *)(v11 + 8) = v12;
      return result;
    }
    v13 = malloc_type_calloc(1uLL, v4, 0x54FBAF74uLL);
    *((_QWORD *)v9 + 1) = v13;
    if (v13)
    {
      _ZF = SLFRead(v10, v4, v13, &v31) != 8 && v31 == (_DWORD)v4;
      if (_ZF && SLFRead(v10, 1024, __dst, &v31) != 8 && v31 == 1024)
      {
        for (i = 0; i != 512; i += 32)
        {
          v16 = &__dst[i * 2];
          v34 = vld4q_s8(v16);
          v17 = vmovl_u8(*(uint8x8_t *)v34.val[0].i8);
          v18 = vmovl_high_u8((uint8x16_t)v34.val[0]);
          _Q16 = vmovl_u8(*(uint8x8_t *)v34.val[1].i8);
          _Q17 = vmovl_high_u8((uint8x16_t)v34.val[1]);
          __asm
          {
            SHLL2           V18.4S, V17.8H, #0x10
            SHLL2           V19.4S, V16.8H, #0x10
          }
          v26 = vmovl_high_u8((uint8x16_t)v34.val[2]);
          v27 = vmovl_u8(*(uint8x8_t *)v34.val[2].i8);
          v28 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v27.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v17.i8), 0x18uLL));
          v29 = vmovl_high_u8((uint8x16_t)v34.val[3]);
          v34.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v34.val[3].i8);
          v34.val[1] = (int8x16_t)vmovl_high_u16((uint16x8_t)v34.val[0]);
          result = vorrq_s8(v28, (int8x16_t)vmovl_u16(*(uint16x4_t *)v34.val[0].i8));
          v30 = (int8x16_t *)&v9[i + 8];
          v30[2] = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v26.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v18.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v29.i8));
          v30[3] = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v26, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v18), 0x18uLL)), (int8x16_t)vmovl_high_u16(v29));
          *v30 = result;
          v30[1] = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v27, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v17), 0x18uLL)), v34.val[1]);
        }
        return result;
      }
      v11 = *(_QWORD *)(a1 + 32);
      result.i64[0] = 0xDC00000070;
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 32);
      result.i64[0] = 0xDC00000078;
    }
    *(_QWORD *)v11 = result.i64[0];
    v12 = 321;
    goto LABEL_16;
  }
  return result;
}

uint64_t PRPunInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)(a2 + 88) = bswap32(*(unsigned __int16 *)(a3 + 742)) >> 16;
  *(_DWORD *)(a2 + 92) = bswap32(*(_DWORD *)(a3 + 744));
  return PRPunLoad(a1, a2);
}

uint64_t PRExprInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  *(_WORD *)(a2 + 104) = bswap32(*(unsigned __int16 *)(a3 + 748)) >> 16;
  *(_DWORD *)(a2 + 108) = bswap32(*(_DWORD *)(a3 + 750));
  return PRExprLoad(a1, a2, a4, a5);
}

uint64_t PRPostInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  BOOL v19;
  unsigned int v20;

  v3 = __rev16(*(unsigned __int16 *)(a3 + 762));
  if (!v3)
    return 0;
  v20 = 0;
  v7 = malloc_type_calloc(1uLL, 0x18uLL, 0x10100408797764BuLL);
  *(_QWORD *)(a2 + 112) = v7;
  if (!v7)
    goto LABEL_7;
  v8 = v7;
  v9 = *(_DWORD *)(a2 + 40);
  v10 = bswap32(*(unsigned __int16 *)(a3 + 768));
  v11 = v3 + HIWORD(v10);
  v12 = *(_DWORD *)(a3 + 764);
  v13 = malloc_type_calloc(1uLL, (unsigned __int16)(v3 + HIWORD(v10)), 0xF65C0E8AuLL);
  v8[1] = v13;
  if (!v13 || (v14 = v13, v15 = malloc_type_calloc(1uLL, 0x80uLL, 0xB6BEA805uLL), (v8[2] = v15) == 0))
  {
LABEL_7:
    v16 = *(_QWORD *)(a1 + 32);
    v17 = 0xDC00000078;
    goto LABEL_8;
  }
  if (SLSeek(v9, bswap32(v12), 0))
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = 0xDC0000006FLL;
LABEL_8:
    *(_QWORD *)v16 = v17;
    *(_WORD *)(v16 + 8) = 0;
    return 220;
  }
  if (SLFRead(v9, v11, v14, &v20))
    v19 = 0;
  else
    v19 = v20 == v11;
  if (!v19)
  {
    v16 = *(_QWORD *)(a1 + 32);
    v17 = 0xDC00000070;
    goto LABEL_8;
  }
  result = 0;
  *(_WORD *)v8 = bswap32(*(unsigned __int16 *)(a3 + 756)) >> 16;
  *((_WORD *)v8 + 1) = bswap32(*(unsigned __int16 *)(a3 + 758)) >> 16;
  *((_WORD *)v8 + 2) = bswap32(*(unsigned __int16 *)(a3 + 760)) >> 16;
  *((_WORD *)v8 + 3) = v3;
  return result;
}

uint64_t PRAmInit(uint64_t a1, uint64_t a2, uint64_t a3)
{
  size_t v3;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void *v15;
  unsigned int v17;
  size_t v18;
  void *v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v27;
  unsigned int v28;

  v3 = __rev16(*(unsigned __int16 *)(a3 + 780));
  if (!(_DWORD)v3)
    return 0;
  v28 = 0;
  v7 = (unsigned __int16 *)malloc_type_calloc(1uLL, 0x20uLL, 0x1010040CF817D87uLL);
  *(_QWORD *)(a2 + 120) = v7;
  if (!v7)
    goto LABEL_29;
  v8 = v7;
  v9 = *(_DWORD *)(a2 + 40);
  *v7 = bswap32(*(unsigned __int16 *)(a3 + 774)) >> 16;
  v7[1] = bswap32(*(unsigned __int16 *)(a3 + 776)) >> 16;
  *((_DWORD *)v7 + 1) = __rev16(*(unsigned __int16 *)(a3 + 778));
  v10 = bswap32(*(_DWORD *)(a3 + 782));
  v11 = *(unsigned __int16 *)(a3 + 786);
  *((_DWORD *)v7 + 3) = bswap32(*(_DWORD *)(a3 + 788));
  if (SLSeek(v9, v10, 0) == 8)
  {
LABEL_4:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = 0xDC0000006FLL;
LABEL_30:
    *(_QWORD *)v12 = v13;
    *(_WORD *)(v12 + 8) = 760;
    return 220;
  }
  v15 = malloc_type_calloc(1uLL, v3, 0x100004077774924uLL);
  *((_QWORD *)v8 + 2) = v15;
  if (!v15)
    goto LABEL_29;
  if (SLFRead(v9, v3, v15, &v28) == 8 || v28 != (_DWORD)v3)
    goto LABEL_11;
  v17 = __rev16(v11);
  if (v17 >= 0x200)
    v18 = 512;
  else
    v18 = v17;
  if (SLSeek(v9, *((_DWORD *)v8 + 3), 0) == 8)
    goto LABEL_4;
  v19 = malloc_type_calloc(1uLL, v18, 0x552BE1F5uLL);
  *((_QWORD *)v8 + 3) = v19;
  if (!v19)
  {
LABEL_29:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = 0xDC00000078;
    goto LABEL_30;
  }
  if (SLFRead(v9, v18, v19, &v28) == 8 || v28 != (_DWORD)v18)
  {
LABEL_11:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = 0xDC00000070;
    goto LABEL_30;
  }
  if (v17 < 0x200)
  {
    result = 0;
    v8[4] = v18;
  }
  else
  {
    v20 = *v8;
    if (*v8)
    {
      v21 = 0;
      v22 = *((_QWORD *)v8 + 2) + 3;
      do
      {
        v23 = bswap32(*(unsigned __int16 *)(v22 - 1));
        v24 = HIWORD(v23);
        v25 = v23 >> 16;
        if (v25 < 513 && v25 > v21)
          v21 = v24;
        v22 += 4;
        --v20;
      }
      while (v20);
      v27 = (unsigned __int16)(v21 - 1);
    }
    else
    {
      LOWORD(v27) = -1;
    }
    result = 0;
    v8[4] = v27;
  }
  return result;
}

uint64_t PRPunLoad(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v5;
  _WORD *v6;
  _WORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t result;
  unsigned __int16 v13;
  __int16 v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  size_t v21;
  size_t v22;
  size_t v23;
  _WORD *v24;
  uint64_t i;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  _DWORD *v39;
  char *v40;
  size_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  size_t count;
  unsigned int v54;
  unsigned __int16 __dst;
  unsigned int v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  unsigned __int16 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(a2 + 92);
  if (!v2)
    return 0;
  v54 = 0;
  v5 = *(unsigned __int16 *)(a2 + 88);
  v6 = malloc_type_calloc(1uLL, 0x468uLL, 0x1090040F2BAB4E8uLL);
  *(_QWORD *)(a2 + 80) = v6;
  if (!v6)
  {
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 0xDC00000078;
    goto LABEL_6;
  }
  v7 = v6;
  v8 = *(_DWORD *)(a2 + 40);
  if (SLSeek(v8, v2, 0) == 8)
  {
LABEL_4:
    v9 = *(_QWORD *)(a1 + 32);
    v10 = 0xDC0000006FLL;
LABEL_6:
    *(_QWORD *)v9 = v10;
    v11 = 180;
    goto LABEL_7;
  }
  v13 = 0;
  if (v5 <= 1)
    v14 = 1;
  else
    v14 = v5;
  while (1)
  {
    if (SLFRead(v8, 6, &__dst, &v54) == 8)
      goto LABEL_26;
    v15 = __rev16(__dst);
    v16 = *(_WORD *)(a2 + 16) & 0xF0;
    if (v16 == 32 && *(_BYTE *)(a2 + 20) == 16)
      v16 = 64;
    if (v15 == v16)
      break;
    if (v5 <= ++v13)
    {
      v13 = v14;
      break;
    }
    v2 += bswap32(v56) + 6;
    if (SLSeek(v8, v2, 0) == 8)
      goto LABEL_4;
  }
  if (v15 && v5 <= v13)
    return 8;
  if (SLFRead(v8, 12, &__dst, &v54) == 8)
    goto LABEL_26;
  v19 = 0;
  v20 = __rev16((unsigned __int16)v56);
  v21 = __rev16(HIWORD(v56));
  v22 = __rev16(v57);
  v23 = __rev16(v58);
  v7[548] = v23;
  count = __rev16(v59);
  v24 = v7;
  do
  {
    if (SLFRead(v8, 46, &__dst, &v54) == 8 || v54 != 46)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v50 = 0xDC00000070;
LABEL_83:
      *(_QWORD *)v9 = v50;
      v11 = 181;
      goto LABEL_7;
    }
    for (i = 0; i != 23; ++i)
      v24[i] = bswap32(*(unsigned __int16 *)((char *)&__dst + i * 2)) >> 16;
    ++v19;
    v24 += 23;
  }
  while (v19 != 23);
  v26 = malloc_type_calloc(v20, 0x30uLL, 0x1000040EED21634uLL);
  *((_QWORD *)v7 + 133) = v26;
  if (!v26)
  {
LABEL_82:
    v9 = *(_QWORD *)(a1 + 32);
    v50 = 0xDC00000078;
    goto LABEL_83;
  }
  if (!(_DWORD)v20)
  {
LABEL_42:
    v31 = malloc_type_calloc(v21, 6uLL, 0x1000040274DC3F3uLL);
    *((_QWORD *)v7 + 134) = v31;
    if (!v31)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v18 = 0xDC00000078;
      goto LABEL_27;
    }
    if ((_DWORD)v21)
    {
      v32 = 0;
      v33 = 0;
      while (SLFRead(v8, 6, &__dst, &v54) != 8 && v54 == 6)
      {
        v35 = 0;
        v36 = *((_QWORD *)v7 + 134) + v32;
        do
        {
          *(_WORD *)(v36 + v35) = bswap32(*(unsigned __int16 *)((char *)&__dst + v35)) >> 16;
          v35 += 2;
        }
        while (v35 != 6);
        ++v33;
        v32 += 6;
        if (v33 == v21)
          goto LABEL_53;
      }
      v9 = *(_QWORD *)(a1 + 32);
      v51 = 0xDC00000070;
      goto LABEL_86;
    }
LABEL_53:
    v37 = malloc_type_calloc(v22, 1uLL, 0x100004077774924uLL);
    *((_QWORD *)v7 + 135) = v37;
    if (!v37)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v51 = 0xDC00000078;
LABEL_86:
      *(_QWORD *)v9 = v51;
      v11 = 183;
      goto LABEL_7;
    }
    if (SLFRead(v8, v22, v37, &v54) == 8 || v54 != (_DWORD)v22)
    {
      v9 = *(_QWORD *)(a1 + 32);
      v52 = 0xDC00000070;
    }
    else
    {
      if (!(_DWORD)v23)
        goto LABEL_68;
      v38 = malloc_type_calloc(v23, 4uLL, 0x100004052888210uLL);
      *((_QWORD *)v7 + 138) = v38;
      if (v38)
      {
        if (SLFRead(v8, 4 * (int)v23, &__dst, &v54) == 8 || v54 != 4 * (_DWORD)v23)
          goto LABEL_26;
        v39 = (_DWORD *)*((_QWORD *)v7 + 138);
        v40 = (char *)&v56 + 1;
        v41 = v23;
        do
        {
          *v39++ = bswap32(*(_DWORD *)(v40 - 3));
          v40 += 4;
          --v41;
        }
        while (v41);
        v42 = malloc_type_calloc(v23, 1uLL, 0x100004077774924uLL);
        *((_QWORD *)v7 + 139) = v42;
        if (v42)
        {
          if (SLFRead(v8, v23, v42, &v54) == 8 || v54 != (_DWORD)v23)
            goto LABEL_26;
          v43 = malloc_type_calloc(v23, 1uLL, 0x100004077774924uLL);
          *((_QWORD *)v7 + 140) = v43;
          if (v43)
          {
            if (SLFRead(v8, v23, v43, &v54) == 8 || v54 != (_DWORD)v23)
              goto LABEL_26;
LABEL_68:
            if (!(_DWORD)count)
              return 0;
            v44 = malloc_type_calloc(count, 0x14uLL, 0x1000040A86A77D5uLL);
            *((_QWORD *)v7 + 136) = v44;
            if (v44)
            {
              v45 = 0;
              v46 = 0;
              while (SLFRead(v8, 20, &__dst, &v54) != 8 && v54 == 20)
              {
                v48 = 0;
                v49 = *((_QWORD *)v7 + 136) + v45;
                do
                {
                  *(_WORD *)(v49 + v48) = bswap32(*(unsigned __int16 *)((char *)&__dst + v48)) >> 16;
                  v48 += 2;
                }
                while (v48 != 20);
                result = 0;
                ++v46;
                v45 += 20;
                if (v46 == count)
                  return result;
              }
              goto LABEL_26;
            }
            goto LABEL_82;
          }
        }
      }
      v9 = *(_QWORD *)(a1 + 32);
      v52 = 0xDC00000078;
    }
    *(_QWORD *)v9 = v52;
    v11 = 184;
    goto LABEL_7;
  }
  v27 = 0;
  v28 = 0;
  while (SLFRead(v8, 48, &__dst, &v54) != 8 && v54 == 48)
  {
    v29 = 0;
    v30 = *((_QWORD *)v7 + 133) + v27;
    do
    {
      *(_WORD *)(v30 + v29) = bswap32(*(unsigned __int16 *)((char *)&__dst + v29)) >> 16;
      v29 += 2;
    }
    while (v29 != 48);
    ++v28;
    v27 += 48;
    if (v28 == v20)
      goto LABEL_42;
  }
LABEL_26:
  v9 = *(_QWORD *)(a1 + 32);
  v18 = 0xDC00000070;
LABEL_27:
  *(_QWORD *)v9 = v18;
  v11 = 182;
LABEL_7:
  *(_WORD *)(v9 + 8) = v11;
  return 220;
}

uint64_t PRExprLoad(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  unsigned int v9;
  void **v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unsigned int v17;
  int v18;
  int v19;
  int v21;
  uint64_t v22;
  uint64_t result;
  void **v24;
  unsigned __int8 *v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  __int16 v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  void *v37;
  void *v38;
  unsigned __int16 v39;
  void **v40;
  uint64_t v41;
  unsigned int v42;
  unsigned __int16 __dst[2];
  unsigned __int8 v44;
  unsigned __int8 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 108);
  if (!v4)
    return 0;
  v42 = 0;
  v9 = *(unsigned __int16 *)(a2 + 104);
  if (a4)
  {
    v10 = *(void ***)(a2 + 96);
  }
  else
  {
    v10 = (void **)malloc_type_calloc(1uLL, 0x18uLL, 0x30040D3A788E3uLL);
    *(_QWORD *)(a2 + 96) = v10;
    if (!v10)
    {
      v12 = *(_QWORD *)(a1 + 32);
      v22 = 0xDC00000078;
LABEL_35:
      *(_QWORD *)v12 = v22;
      v14 = 240;
      goto LABEL_36;
    }
  }
  v40 = v10;
  v11 = *(_DWORD *)(a2 + 40);
  if (SLSeek(v11, v4, 0))
  {
LABEL_6:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = 0xDC0000006FLL;
LABEL_7:
    *(_QWORD *)v12 = v13;
    v14 = 241;
LABEL_36:
    *(_WORD *)(v12 + 8) = v14;
    return 220;
  }
  v15 = 0;
  v16 = v9 <= 1 ? 1 : v9;
  v39 = v16;
  while (1)
  {
    if (SLFRead(v11, 6, __dst, &v42) == 8)
      goto LABEL_34;
    v17 = __rev16(__dst[0]);
    v18 = (__int16)(v44 << 8) | v45;
    v19 = *(_WORD *)(a2 + 16) & 0xF0;
    if (v19 == 32 && *(_BYTE *)(a2 + 20) == 16)
      v19 = 64;
    if (v17 == v19)
      goto LABEL_24;
    if (v9 <= ++v15)
      break;
    v21 = v4 + v18;
    v4 += v18 + 6;
    if (SLSeek(v11, v21 + 6, 0))
      goto LABEL_6;
  }
  v15 = v39;
LABEL_24:
  if (v17 && v9 <= v15)
    return 8;
  if (a4)
  {
    v24 = v40;
    v25 = (unsigned __int8 *)*v40;
  }
  else
  {
    v25 = (unsigned __int8 *)malloc_type_calloc(1uLL, (__int16)(v44 << 8) | (unint64_t)v45, 0xE90A188FuLL);
    v24 = v40;
    *v40 = v25;
    if (!v25)
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = 0xDC00000078;
      goto LABEL_7;
    }
  }
  if (SLFRead(v11, v18, v25, &v42))
    v26 = 0;
  else
    v26 = v42 == v18;
  if (!v26)
  {
LABEL_34:
    v12 = *(_QWORD *)(a1 + 32);
    v22 = 0xDC00000070;
    goto LABEL_35;
  }
  if (!a4)
  {
    v37 = malloc_type_calloc(1uLL, 0x180uLL, 0x1030040CE42941AuLL);
    v24[2] = v37;
    if (!v37)
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)v12 = 0xDC00000078;
      v14 = 242;
      goto LABEL_36;
    }
    v38 = malloc_type_calloc(1uLL, 32 * v25[7] + 32, 0x102004038FAAB91uLL);
    v24[1] = v38;
    if (!v38)
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)v12 = 0xDC00000078;
      v14 = 243;
      goto LABEL_36;
    }
  }
  if (*(_BYTE *)(a2 + 20) != 8)
    return 0;
  v27 = __rev16(*((unsigned __int16 *)v25 + 5));
  v28 = v25[12];
  v41 = v25[13];
  v29 = __rev16(*((unsigned __int16 *)v25 + 7));
  if (v27)
  {
    v30 = 0;
    v31 = 0;
    v32 = &v25[__rev16(*((unsigned __int16 *)v25 + 4))];
    do
    {
      v34 = *v32++;
      v33 = v34;
      if (v34)
      {
        v35 = 0;
        do
        {
          switch(*v32)
          {
            case 0x17u:
            case 0x18u:
              v31 = 3;
              break;
            case 0x19u:
            case 0x1Au:
            case 0x1Bu:
              v31 = 4;
              break;
            case 0x1Cu:
            case 0x1Du:
            case 0x1Eu:
            case 0x1Fu:
            case 0x20u:
            case 0x21u:
            case 0x22u:
            case 0x23u:
            case 0x24u:
            case 0x25u:
            case 0x26u:
            case 0x27u:
              v31 = ActionStringLength(v32 + 1, a3) + 1;
              break;
            case 0x2Au:
              v31 = 6;
              break;
            case 0x2Bu:
              v31 = 1;
              break;
            default:
              break;
          }
          ++v35;
          v32 += v31;
        }
        while (v35 < v33);
      }
      ++v30;
    }
    while (v30 < v27);
  }
  if (!(_DWORD)v29)
    return 0;
  v36 = (uint64_t)&v25[256 * v28 + 1 + v41];
  do
  {
    AssignSeparator((char *)&v25[__rev16(*(unsigned __int16 *)(v36 - 1))], a3);
    result = 0;
    v36 += 2;
    --v29;
  }
  while (v29);
  return result;
}

char *AssignSeparator(char *result, int a2)
{
  BOOL v2;
  char v3;
  char v4;
  BOOL v5;
  char v6;

  switch(*result)
  {
    case 14:
    case 17:
      v2 = a2 == 0;
      v3 = 44;
      v4 = 46;
      goto LABEL_4;
    case 15:
    case 16:
      v2 = a2 == 0;
      v3 = 46;
      v4 = 44;
LABEL_4:
      if (v2)
        v3 = v4;
      goto LABEL_13;
    case 18:
      v3 = 58;
      v5 = (a2 & 4) == 0;
      v6 = 46;
      goto LABEL_9;
    case 19:
      v3 = 46;
      v5 = (a2 & 4) == 0;
      v6 = 58;
LABEL_9:
      if (v5)
        v6 = v3;
      if ((a2 & 2) != 0)
        v3 = v6;
LABEL_13:
      *result = v3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ActionStringLength(_BYTE *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  unsigned __int8 *v5;
  __int16 v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unint64_t v17;

  v2 = *a1;
  if (*a1)
  {
    v4 = 0;
    v5 = a1 + 1;
    v6 = 1;
    do
    {
      v7 = *v5;
      if (v7 > 0x27)
      {
        if (v7 == 40)
        {
          v10 = v5 + 1;
          if (v5[1])
          {
            v11 = 0;
            do
            {
              AssignSeparator((char *)&v5[v11++ + 2], a2);
              v12 = *v10;
            }
            while (v11 < v12);
          }
          else
          {
            v12 = 0;
          }
          v13 = &v10[v12];
          v16 = v13[1];
          v15 = v13 + 1;
          LODWORD(v14) = v16;
          if (v16)
          {
            v17 = 0;
            do
            {
              AssignSeparator((char *)&v15[++v17], a2);
              v14 = *v15;
            }
            while (v17 < v14);
          }
          LODWORD(v8) = ActionStringLength(&v15[(v14 + 1)], a2) + v12 + 2 + v14;
        }
        else if (v7 == 41)
        {
          LOWORD(v8) = 3;
        }
        else
        {
          LOWORD(v8) = 0;
        }
      }
      else if (*v5)
      {
        if (v7 == 5)
          LOWORD(v8) = 2;
        else
          LOWORD(v8) = 0;
      }
      else
      {
        LOWORD(v8) = v5[1];
        if (v5[1])
        {
          v9 = 0;
          do
          {
            AssignSeparator((char *)&v5[v9++ + 2], a2);
            v8 = v5[1];
          }
          while (v9 < v8);
        }
        LOWORD(v8) = v8 + 2;
      }
      v6 += v8;
      ++v4;
      v5 += (__int16)v8;
    }
    while (v4 < v2);
  }
  else
  {
    return 1;
  }
  return v6;
}

uint64_t SetFarTable(_QWORD *a1, size_t size, unsigned int a3, uint64_t a4, unsigned int a5, unsigned int *a6, uint64_t a7, int a8)
{
  int v14;
  void *v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unsigned int v22;

  v14 = size;
  v22 = 0;
  v16 = malloc_type_calloc(1uLL, size, 0x100004077774924uLL);
  *a1 = v16;
  if (!v16)
  {
    v19 = *(_QWORD *)(a7 + 32);
    v20 = 0xDC00000078;
LABEL_9:
    *(_QWORD *)v19 = v20;
    *(_WORD *)(v19 + 8) = 440;
    return 220;
  }
  v17 = v16;
  if (a5 == 513)
  {
    v18 = *a6;
  }
  else
  {
    v18 = bswap32(*(_DWORD *)(a4 + a5));
    *a6 = v18;
  }
  SLSeek(a3, v18 + a8, 0);
  if (SLFRead(a3, v14, v17, &v22) == 8 || (result = 0, v22 != v14))
  {
    v19 = *(_QWORD *)(a7 + 32);
    v20 = 0xDC00000070;
    goto LABEL_9;
  }
  return result;
}

uint64_t SetHugeTable(char **a1, size_t count, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7)
{
  int v12;
  char *v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v12 = count;
  v19 = 0;
  v14 = (char *)malloc_type_calloc(count, 1uLL, 0x17BCF5BCuLL);
  *a1 = v14;
  if (v14)
  {
    v15 = v14;
    SLSeek(a3, bswap32(*(_DWORD *)(a4 + a5)) + a7, 0);
    result = SLHRead(a3, v12, v15, &v19);
    if (!(_DWORD)result)
      return result;
    v17 = *(_QWORD *)(a6 + 32);
    v18 = 0xDC00000070;
  }
  else
  {
    v17 = *(_QWORD *)(a6 + 32);
    v18 = 0xDC00000078;
  }
  *(_QWORD *)v17 = v18;
  *(_WORD *)(v17 + 8) = 440;
  return 220;
}

uint64_t PRGetDbElem(unsigned int a1, unsigned int a2)
{
  uint64_t result;

  result = PRGetAppElem(a1);
  if (result)
  {
    if (*(unsigned __int8 *)(result + 8) <= a2)
      return 0;
    else
      return *(_QWORD *)(*(_QWORD *)result + 8 * a2);
  }
  return result;
}

uint64_t PRDbTerm(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void **v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;

  v4 = *(_DWORD **)(a2 + 128);
  *v4 = 2;
  ICspl("", (size_t)v4);
  free(*(void **)(a2 + 128));
  PRloadProfile(a1, a2, 0, 0, 0);
  v5 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    v6 = *(void **)(v5 + 16);
    if (v6)
      free(v6);
    v7 = *(void **)(v5 + 32);
    if (v7)
      free(v7);
    v8 = *(void **)(v5 + 40);
    if (v8)
      free(v8);
    v9 = *(void **)(v5 + 48);
    if (v9)
      free(v9);
    v10 = *(void **)(v5 + 64);
    if (v10)
      free(v10);
    v11 = *(void **)(v5 + 80);
    if (v11)
      free(v11);
    v12 = *(void **)(v5 + 96);
    if (v12)
      free(v12);
    v13 = *(void **)(v5 + 112);
    if (v13)
      free(v13);
    v14 = *(void **)(v5 + 128);
    if (v14)
      free(v14);
    v15 = *(void **)(v5 + 144);
    if (v15)
      free(v15);
    v16 = *(void **)(v5 + 160);
    if (v16)
      free(v16);
    v17 = *(void **)(v5 + 176);
    if (v17)
      free(v17);
    v18 = *(void **)(v5 + 184);
    if (v18)
      free(v18);
    v19 = *(void **)(v5 + 200);
    if (v19)
      free(v19);
    v20 = *(void **)(v5 + 208);
    if (v20)
      free(v20);
    v21 = *(void **)(v5 + 216);
    if (v21)
      free(v21);
    v22 = *(void **)(v5 + 224);
    if (v22)
      free(v22);
    v23 = *(void **)(v5 + 232);
    if (v23)
      free(v23);
    v24 = *(void **)(v5 + 248);
    if (v24)
      free(v24);
    v25 = *(void **)(v5 + 304);
    if (v25)
      free(v25);
    v26 = *(_QWORD *)(v5 + 312);
    if (v26)
    {
      if (*(_QWORD *)v26)
        free(*(void **)v26);
      v27 = *(void **)(v26 + 8);
      if (v27)
      {
        free(v27);
        *(_QWORD *)(v26 + 8) = 0;
      }
      free(*(void **)(v5 + 312));
    }
    v28 = *(void **)(v5 + 256);
    if (v28)
      free(v28);
    v29 = *(void **)(v5 + 272);
    if (v29)
      free(v29);
    v30 = *(void **)(v5 + 328);
    if (v30)
      free(v30);
    v31 = *(void **)(v5 + 288);
    if (v31)
      free(v31);
    v32 = *(unsigned __int8 *)(a2 + 20);
    if (v32 == 18 || v32 == 4)
      SLClose(*(_DWORD *)v5);
    free(*(void **)(a2 + 48));
  }
  v33 = *(_QWORD *)(a2 + 72);
  if (v33)
  {
    v34 = *(void **)(v33 + 16);
    if (v34)
      free(v34);
    v35 = *(void **)(v33 + 24);
    if (v35)
      free(v35);
    free(*(void **)(a2 + 72));
  }
  v36 = *(void ***)(a2 + 56);
  if (v36)
  {
    if (v36[1])
    {
      free(v36[1]);
      v36 = *(void ***)(a2 + 56);
    }
    free(v36);
  }
  v37 = *(void ***)(a2 + 64);
  if (v37)
  {
    if (v37[1])
    {
      free(v37[1]);
      v37 = *(void ***)(a2 + 64);
    }
    free(v37);
  }
  PRPunTerm(a2);
  PRExprTerm(a2);
  v38 = *(_QWORD *)(a2 + 112);
  if (v38)
  {
    free(*(void **)(v38 + 8));
    free(*(void **)(v38 + 16));
    free(*(void **)(a2 + 112));
  }
  v39 = *(_QWORD *)(a2 + 120);
  if (v39)
  {
    v40 = *(void **)(v39 + 16);
    if (v40)
      free(v40);
    v41 = *(void **)(v39 + 24);
    if (v41)
      free(v41);
    free(*(void **)(a2 + 120));
  }
  return 0;
}

uint64_t PRPunTerm(uint64_t a1)
{
  _QWORD *v1;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v1 = *(_QWORD **)(a1 + 80);
  if (v1)
  {
    v3 = (void *)v1[133];
    if (v3)
      free(v3);
    v4 = (void *)v1[134];
    if (v4)
      free(v4);
    v5 = (void *)v1[135];
    if (v5)
      free(v5);
    v6 = (void *)v1[136];
    if (v6)
      free(v6);
    v7 = (void *)v1[138];
    if (v7)
      free(v7);
    v8 = (void *)v1[139];
    if (v8)
      free(v8);
    v9 = (void *)v1[140];
    if (v9)
      free(v9);
    free(*(void **)(a1 + 80));
  }
  return 0;
}

uint64_t PRExprTerm(uint64_t a1)
{
  void **v1;

  v1 = *(void ***)(a1 + 96);
  if (v1)
  {
    free(*v1);
    free(v1[1]);
    free(v1[2]);
    free(*(void **)(a1 + 96));
  }
  return 0;
}

uint64_t PRdecomp(char *a1, int a2, _BYTE *a3)
{
  const char *v6;
  char *v7;
  int v8;
  _BYTE *v9;
  char *v10;
  char *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;

  v6 = (const char *)malloc_type_malloc((a2 + 1), 0x7FC840A4uLL);
  if (!v6)
    return 120;
  v7 = (char *)v6;
  if (a2)
  {
    v8 = 0;
    v9 = a3;
    v10 = a1;
    v11 = (char *)v6;
    while (2)
    {
      v12 = *v10;
      v13 = 8;
      do
      {
        v14 = __rev16(*(unsigned __int16 *)&v9[(v12 >> 6) & 2 ^ 2]);
        v15 = &a3[4 * v14 + v14];
        v9 = v15 - 5;
        if (!*(v15 - 4) && !*v9)
        {
          v16 = *(v15 - 1);
          if (v16 == 10)
            *v11++ = 13;
          *v11++ = v16;
          if (++v8 == a2)
          {
            *v11 = 0;
            strcpy(a1, v6);
            v17 = 0;
            goto LABEL_16;
          }
          v9 = a3;
        }
        v12 *= 2;
        --v13;
      }
      while ((_BYTE)v13);
      if (++v10 < &a1[a2])
        continue;
      break;
    }
  }
  v17 = 115;
LABEL_16:
  free(v7);
  return v17;
}

uint64_t PRDerive(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _WORD *a11)
{
  int v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  unsigned __int16 *v34;
  _WORD *v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t result;
  __int16 v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  unsigned __int16 *v45;
  int v46;
  unsigned __int16 v47;
  unsigned __int16 v48;
  __int16 v49;
  uint64_t v50;
  unsigned __int16 v51;
  unsigned __int16 v52;
  __int16 v53;
  unsigned int j;
  unsigned int v55;
  int v56;
  unsigned __int16 v57;
  unsigned __int16 v58;
  uint64_t v59;
  unsigned __int16 v60;
  const char *v61;
  unsigned __int16 v62;
  unsigned __int16 v63;
  unsigned int v64;
  uint64_t v65;
  int v66;
  unsigned int v67;
  __int16 v68;
  uint64_t v69;
  unsigned int v70;
  unsigned __int8 *v71;
  unint64_t v72;
  unsigned __int16 v73;
  __int16 v74;
  __int16 v75;
  unsigned __int16 v76;
  const char *v77;
  unsigned int v78;
  char v79;
  int v80;
  __int16 v81;
  unint64_t v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  char v87;
  __int16 v88;
  unsigned __int16 *v89;
  int v90;
  unsigned __int16 v91;
  unsigned __int16 v92;
  unsigned __int8 *v93;
  char v94;
  unsigned __int16 v95;
  unsigned __int16 v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned __int16 v101;
  unsigned __int16 v102;
  uint64_t v103;
  unsigned __int16 v104;
  unsigned __int16 v105;
  __int16 v106;
  unsigned int i;
  unsigned int v108;
  int v109;
  unsigned __int16 v110;
  unsigned __int16 v111;
  int v112;
  uint64_t v114;
  uint64_t v115;
  uint64_t v117;
  __int16 v118;
  const char *v119;
  uint64_t v120;
  int v121;
  char v122;
  uint64_t v123;
  uint64_t v125;
  _BYTE v126[6];
  _BYTE v127[6];
  unsigned __int16 v128;

  v13 = a4;
  v15 = a2;
  v16 = *(unsigned __int16 *)(a3 + 136);
  v17 = ((*(_DWORD *)(a3 + 92) >> 17) & 1) + v16;
  if (((*(_DWORD *)(a3 + 92) >> 17) & 1) + (_WORD)v16)
  {
    v18 = *(_QWORD *)(a3 + 144);
    v19 = v17;
  }
  else
  {
    if (*(_QWORD *)(a3 + 128))
      v18 = a3 + 128;
    else
      v18 = a3 + 16;
    v19 = 1;
  }
  v128 = 0;
  v123 = a5;
  v125 = v18;
  v118 = v17;
  if (a4 > 69)
  {
    if (a4 <= 119)
    {
      if (a4 != 70)
      {
        v20 = 0;
        LOWORD(v21) = 0;
        if (a4 != 100)
          goto LABEL_30;
LABEL_82:
        if (!v118)
        {
          v77 = *(const char **)(a3 + 112);
          if (v77)
          {
            v78 = *(unsigned __int8 *)(v15 + 20);
            if (v78 <= 0xB && ((1 << v78) & 0x8C0) != 0)
            {
              v79 = v20;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = 0;
              *(_WORD *)(a5 + 2 * (unsigned __int16)v21) = 0;
              *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = strlen(v77) + 1;
              v80 = ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8)
                  + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7);
              v81 = v80 + 64;
              if ((unsigned __int16)(v80 + 64) > 0x7FECu)
                v81 = v80 - 32685;
              *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v81;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v81 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
              if (*(_WORD *)(a8 + 2 * (unsigned __int16)v21) != 1)
              {
                v82 = 0;
                do
                {
                  v83 = v77[v82]
                      + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7)
                      + ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8);
                  if (v83 > 0x7FEC)
                    LOWORD(v83) = v83 - 32749;
                  *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v83;
                  *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v83 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
                  ++v82;
                }
                while (v82 < (unsigned __int16)(*(_WORD *)(a8 + 2 * (unsigned __int16)v21) - 1));
              }
              *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = -1;
              *(_BYTE *)(a7 + (unsigned __int16)v21) = 0;
              *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 100;
              LOWORD(v21) = v21 + 1;
              v20 = v79;
            }
          }
        }
        LOWORD(v22) = v21;
        if (v13 == 100)
          goto LABEL_125;
        goto LABEL_95;
      }
      LOBYTE(v38) = 0;
      LOWORD(v21) = 0;
LABEL_57:
      v117 = v15;
      v122 = v38;
      if ((*(_BYTE *)(v15 + 20) & 0xFE) == 6)
      {
        v59 = 0;
        v120 = (unsigned __int16)v19;
        v60 = v21;
        do
        {
          v61 = *(const char **)(v18 + 8 * v59);
          v62 = strlen(v61);
          v63 = v62;
          v21 = v60;
          *(_WORD *)(a8 + 2 * v60) = v62 + 1;
          *(_WORD *)(a6 + 2 * v60) = 0;
          *(_WORD *)(v123 + 2 * v60) = 42;
          *(_WORD *)(a6 + 2 * v60) = *(_WORD *)(a6 + 2 * v60) & 0x7FFF ^ 0x2A;
          v64 = v62;
          if (v62)
          {
            v65 = v62;
            do
            {
              v66 = *(unsigned __int8 *)v61++;
              v67 = v66 + 19 * (*(unsigned __int16 *)(v123 + 2 * v21) >> 7) + ((*(_WORD *)(v123 + 2 * v21) & 0x7F) << 8);
              if (v67 > 0x7FEC)
                LOWORD(v67) = v67 - 32749;
              *(_WORD *)(v123 + 2 * v21) = v67;
              *(_WORD *)(a6 + 2 * v21) = (v67 ^ *(_WORD *)(a6 + 2 * v21)) & 0x7FFF;
              --v65;
            }
            while (v65);
          }
          v68 = v118 ? v59 : -1;
          *(_WORD *)(a9 + 2 * v21) = v68;
          *(_BYTE *)(a7 + v21) = 0;
          *(_WORD *)(a10 + 2 * v21) = 70;
          result = PRSfxGet(*(const char **)(v125 + 8 * v59), 0, v127, v126, &v128, v117);
          if ((_DWORD)result)
            return result;
          v69 = v128;
          LOWORD(v21) = v21 + 1;
          if (v128)
          {
            a5 = v123;
            v18 = v125;
            do
            {
              v70 = v127[--v69];
              if (v64 <= v70)
              {
                v74 = 42;
                v73 = 42;
                v76 = v127[v69];
              }
              else
              {
                v71 = (unsigned __int8 *)(*(_QWORD *)(v125 + 8 * v59) + v127[v69]);
                v72 = v63 - (unint64_t)v127[v69];
                v73 = 42;
                v74 = 42;
                do
                {
                  v75 = *v71++;
                  v73 = ((v73 & 0x7F) << 8) + 19 * (v73 >> 7) + v75;
                  if (v73 > 0x7FECu)
                    v73 -= 32749;
                  v74 ^= v73 & 0x7FFF;
                  --v72;
                }
                while (v72);
                v76 = v63;
              }
              *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v76 - v70 + 1;
              *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v73;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = v74;
              *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = v68;
              *(_BYTE *)(a7 + (unsigned __int16)v21) = v126[v69];
              *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 70;
              v128 = v69;
              LOWORD(v21) = v21 + 1;
            }
            while ((_WORD)v69);
          }
          else
          {
            a5 = v123;
            v18 = v125;
          }
          ++v59;
          v60 = v21;
        }
        while (v59 != v120);
      }
      LOWORD(v22) = v21;
      v15 = v117;
      v20 = v122;
      if (v13 != 70)
        goto LABEL_82;
LABEL_125:
      result = 0;
      *a11 = v22;
      return result;
    }
    v20 = 0;
    LOWORD(v21) = 0;
    if (a4 == 120)
    {
LABEL_95:
      if (v118)
      {
LABEL_124:
        LOWORD(v22) = v21;
        goto LABEL_125;
      }
      v84 = v15;
      v85 = *(_QWORD *)(a3 + 104);
      if (v85)
      {
        v86 = *(unsigned __int8 *)(v84 + 20);
        if (v86 <= 0xB && ((1 << v86) & 0x8C0) != 0)
        {
          v87 = v20;
          v88 = strlen(*(const char **)(a3 + 104));
          *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v88 + 1;
          v89 = (unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21);
          SLfun(v85, 0, (__int16)(v88 - 1), v89, (_WORD *)(a6 + 2 * (unsigned __int16)v21));
          v20 = v87;
          v90 = ((*v89 & 0x7F) << 8) + 19 * (*v89 >> 7);
          v91 = v90 + 64;
          v92 = v90 - 32685;
          if (v91 <= 0x7FECu)
            v92 = v91;
          *v89 = v92;
          *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v92 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
          *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = -1;
          *(_BYTE *)(a7 + (unsigned __int16)v21) = 0;
          *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 120;
          LOWORD(v21) = v21 + 1;
        }
      }
      v15 = v84;
LABEL_103:
      v93 = *(unsigned __int8 **)(a3 + 112);
      if (v93 && (*(_BYTE *)(v15 + 20) & 0xFE) == 6)
      {
        v94 = v20;
        v95 = strlen(*(const char **)(a3 + 112));
        v96 = v95;
        *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v95 + 2;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = 0;
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = 64;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = *(_WORD *)(a6 + 2 * (unsigned __int16)v21) & 0x7FFF ^ 0x40;
        if (v95)
        {
          v97 = v95;
          do
          {
            v98 = *v93++;
            v99 = v98
                + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7)
                + ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8);
            if (v99 > 0x7FEC)
              LOWORD(v99) = v99 - 32749;
            *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v99;
            *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v99 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
            --v97;
          }
          while (v97);
        }
        v100 = ((*(_WORD *)(v123 + 2 * (unsigned __int16)v21) & 0x7F) << 8)
             + 19 * (*(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21) >> 7);
        v101 = v100 + 42;
        v102 = v100 - 32707;
        if (v101 <= 0x7FECu)
          v102 = v101;
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v102;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v102 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
        *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = -1;
        *(_BYTE *)(a7 + (unsigned __int16)v21) = 0;
        *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 140;
        LOWORD(v22) = v21 + 1;
        if (!v94)
        {
          result = PRSfxGet(*(const char **)(a3 + 112), 1, v127, v126, &v128, v15);
          if ((_DWORD)result)
            return result;
          v103 = v128;
          if (v128)
          {
            v104 = 0;
            v105 = 64;
            v106 = 64;
            do
            {
              for (i = (unsigned __int16)(v96 - v127[--v103]); i > v104; ++v104)
              {
                v105 = ((v105 & 0x7F) << 8) + 19 * (v105 >> 7) + *(unsigned __int8 *)(*(_QWORD *)(a3 + 112) + v104);
                if (v105 > 0x7FECu)
                  v105 -= 32749;
                v106 = (v105 ^ v106) & 0x7FFF;
              }
              *(_WORD *)(a8 + 2 * (unsigned __int16)v22) = v104 + 2;
              *(_WORD *)(v123 + 2 * (unsigned __int16)v22) = v105;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v22) = v106;
              v108 = *(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v22);
              v109 = ((v108 & 0x7F) << 8) + 19 * (v108 >> 7);
              v110 = v109 + 42;
              v111 = v109 - 32707;
              if (v110 <= 0x7FECu)
                v111 = v110;
              *(_WORD *)(v123 + 2 * (unsigned __int16)v22) = v111;
              *(_WORD *)(a6 + 2 * (unsigned __int16)v22) = (v111 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v22)) & 0x7FFF;
              *(_WORD *)(a9 + 2 * (unsigned __int16)v22) = -1;
              *(_BYTE *)(a7 + (unsigned __int16)v22) = v126[v103];
              *(_WORD *)(a10 + 2 * (unsigned __int16)v22) = 140;
              LOWORD(v22) = v22 + 1;
              v128 = v103;
            }
            while ((_WORD)v103);
          }
        }
        goto LABEL_125;
      }
      goto LABEL_124;
    }
    if (a4 == 140)
    {
      if (!v118)
      {
        v20 = 0;
        LOWORD(v21) = 0;
        goto LABEL_103;
      }
      LOWORD(v22) = 0;
      goto LABEL_125;
    }
LABEL_30:
    v39 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v39 = 0xDC00000068;
    *(_WORD *)(v39 + 8) = 60;
    return 230;
  }
  v112 = v19;
  if (a4 == 10 || a4 == 20)
  {
    v24 = 0;
    v23 = (unsigned __int16)v19;
    do
    {
      while (1)
      {
        v25 = v23;
        v26 = *(const char **)(v18 + 8 * v24);
        v27 = strlen(v26);
        *(_WORD *)(a8 + 2 * v24) = v27;
        SLfun((uint64_t)v26, 0, (__int16)(v27 - 1), (unsigned __int16 *)(v123 + 2 * v24), (_WORD *)(a6 + 2 * v24));
        if ((_WORD)v17)
          break;
        *(_WORD *)(a9 + 2 * v24) = -1;
        *(_BYTE *)(a7 + v24) = 0;
        v18 = v125;
        *(_WORD *)(a10 + 2 * v24++) = 20;
        v23 = v25;
        if (v24 == v25)
        {
          v22 = v112;
          a5 = v123;
          v29 = a4;
          goto LABEL_34;
        }
      }
      v28 = v24;
      *(_WORD *)(a9 + 2 * v24) = v24;
      *(_BYTE *)(a7 + v24) = 0;
      v18 = v125;
      *(_WORD *)(a10 + 2 * v24++) = 20;
      v23 = v25;
    }
    while (v24 != v25);
    v22 = v112;
    a5 = v123;
    v29 = a4;
    if ((*(_BYTE *)(*(_QWORD *)(a3 + 152) + 94) & 2) == 0)
    {
      *(_WORD *)(a9 + 2 * v25) = -1;
      *(_BYTE *)(a7 + v25) = 0;
      v30 = *(_QWORD *)(a3 + 152);
      v31 = *(_QWORD *)(v30 + 128);
      if (v31)
      {
        v32 = v25;
        v33 = strlen(*(const char **)(v30 + 128));
        *(_WORD *)(a8 + 2 * v25) = v33;
        v34 = (unsigned __int16 *)(v123 + 2 * v25);
        v35 = (_WORD *)(a6 + 2 * v25);
        v36 = (__int16)(v33 - 1);
        v37 = v31;
      }
      else
      {
        v41 = *(_WORD *)(v30 + 32);
        *(_WORD *)(a8 + 2 * v25) = v41;
        v37 = *(_QWORD *)(v30 + 16);
        v34 = (unsigned __int16 *)(v123 + 2 * v25);
        v35 = (_WORD *)(a6 + 2 * v25);
        v36 = (__int16)(v41 - 1);
        v32 = v25;
      }
      SLfun(v37, 0, v36, v34, v35);
      v18 = v125;
      *(_WORD *)(a10 + 2 * v32) = 30;
      v22 = v28 + 2;
      a5 = v123;
      v23 = v32;
    }
LABEL_34:
    if (v29 == 20)
      goto LABEL_125;
  }
  else
  {
    if (a4 != 50)
      goto LABEL_30;
    v22 = 0;
    v23 = (unsigned __int16)v19;
  }
  v42 = 0;
  v38 = 0;
  LODWORD(v21) = v22;
  v114 = v23;
  v115 = a8;
  while (1)
  {
    v121 = v38;
    v119 = *(const char **)(v18 + 8 * v42);
    v43 = a5;
    v44 = strlen(v119);
    *(_WORD *)(a8 + 2 * (unsigned __int16)v21) = v44 + 1;
    v45 = (unsigned __int16 *)(v43 + 2 * (unsigned __int16)v21);
    SLfun((uint64_t)v119, 0, (__int16)(v44 - 1), v45, (_WORD *)(a6 + 2 * (unsigned __int16)v21));
    v46 = ((*v45 & 0x7F) << 8) + 19 * (*v45 >> 7);
    v47 = v46 + 42;
    v48 = v46 - 32707;
    if (v47 <= 0x7FECu)
      v48 = v47;
    *v45 = v48;
    *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v48 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
    v49 = v118 ? v42 : -1;
    *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = v49;
    *(_BYTE *)(a7 + (unsigned __int16)v21) = 0;
    *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 50;
    result = PRSfxGet(*(const char **)(v125 + 8 * v42), 1, v127, v126, &v128, a2);
    if ((_DWORD)result)
      return result;
    v50 = v128;
    v38 = v121;
    if (!v128)
      v38 = 1;
    LODWORD(v21) = v21 + 1;
    if (v128)
    {
      v51 = 0;
      v52 = 0;
      v53 = 0;
      a8 = v115;
      a5 = v123;
      v18 = v125;
      do
      {
        for (j = (unsigned __int16)(v44 - v127[--v50]); j > v51; ++v51)
        {
          v52 = ((v52 & 0x7F) << 8) + 19 * (v52 >> 7) + *(unsigned __int8 *)(*(_QWORD *)(v125 + 8 * v42) + v51);
          if (v52 > 0x7FECu)
            v52 -= 32749;
          v53 = (v52 ^ v53) & 0x7FFF;
        }
        *(_WORD *)(v115 + 2 * (unsigned __int16)v21) = v51 + 1;
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v52;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = v53;
        v55 = *(unsigned __int16 *)(v123 + 2 * (unsigned __int16)v21);
        v56 = ((v55 & 0x7F) << 8) + 19 * (v55 >> 7);
        v57 = v56 + 42;
        v58 = v56 - 32707;
        if (v57 <= 0x7FECu)
          v58 = v57;
        *(_WORD *)(v123 + 2 * (unsigned __int16)v21) = v58;
        *(_WORD *)(a6 + 2 * (unsigned __int16)v21) = (v58 ^ *(_WORD *)(a6 + 2 * (unsigned __int16)v21)) & 0x7FFF;
        *(_WORD *)(a9 + 2 * (unsigned __int16)v21) = v49;
        *(_BYTE *)(a7 + (unsigned __int16)v21) = v126[v50];
        *(_WORD *)(a10 + 2 * (unsigned __int16)v21) = 50;
        v128 = v50;
        LODWORD(v21) = v21 + 1;
      }
      while ((_WORD)v50);
    }
    else
    {
      a8 = v115;
      a5 = v123;
      v18 = v125;
    }
    if (++v42 == v114)
    {
      LOWORD(v22) = v21;
      v13 = a4;
      LOWORD(v19) = v112;
      v15 = a2;
      if (a4 == 50)
        goto LABEL_125;
      goto LABEL_57;
    }
  }
}

uint64_t PRerr(unsigned __int8 *a1, int a2, int a3)
{
  unsigned __int8 *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  int inserted;
  int v24;
  uint64_t result;
  uint64_t v26;
  __int16 v27;
  int AltEmOff;
  void *v29;
  unsigned __int8 v30;
  char v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  const char **v48;
  int v49;
  __int16 v50;
  __int16 v51;
  __int16 v52;
  __int16 v53;
  void *v54;
  unsigned __int8 v55;
  _BYTE v56[4];
  int v57;
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v54 = 0;
  *((_DWORD *)a1 + 21) = 0;
  *((_DWORD *)a1 + 22) = 0;
  v4 = a1 + 84;
  *((_WORD *)a1 + 46) = 0;
  if (!*((_QWORD *)a1 + 1))
  {
    v26 = 0xE6FFFFFF8ALL;
    goto LABEL_64;
  }
  v7 = PRGetAppElem(*a1);
  if (!v7)
  {
    *(_QWORD *)(a1 + 84) = 0xE6FFFFFF93;
    v27 = 480;
LABEL_65:
    *((_WORD *)a1 + 46) = v27;
    return 230;
  }
  v8 = v7;
  *(_QWORD *)(v7 + 32) = v4;
  v9 = PRGetDbElem(*a1, a1[1]);
  if (!v9)
  {
    v26 = 0xE6FFFFFF92;
    goto LABEL_64;
  }
  v10 = v9;
  v55 = 0;
  v53 = 0;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 48);
  v13 = a1[80];
  v14 = a1[96] & 0xF0;
  if (v14 == 32 && v13 == 16)
    v14 = 64;
  if (v13 == 13 && v14 == 32)
    LOBYTE(v14) = 0x80;
  if (v13 == 13 && (v14 & 0xF0) == 16)
    v16 = 64;
  else
    v16 = v14;
  PRLangDialPos(*(_QWORD *)(v9 + 48), &v55, 1, a1[80], v16 & 0xF0);
  v17 = (unsigned __int8 *)*((_QWORD *)a1 + 1);
  v18 = v17[12];
  v19 = v17[13];
  v20 = a1[16];
  if (a2 == 18)
  {
    if (!a3)
    {
      AltEmOff = GetAltEmOff(v12, (uint64_t)v56, v18, v19, v55);
      if (AltEmOff)
      {
        v21 = AltEmOff;
        goto LABEL_51;
      }
      if (((v57 != 0) & (v20 >> 4)) != 0)
        v31 = 16;
      else
        v31 = 0;
      a1[16] = v31;
      if ((v20 & 4) != 0 && v58)
      {
        v31 |= 4u;
        a1[16] = v31;
      }
      result = 0;
      if ((v20 & 1) != 0 && v59)
      {
        result = 0;
        a1[16] = v31 | 1;
      }
      return result;
    }
    v26 = 0xE6FFFFFF94;
LABEL_64:
    *(_QWORD *)(a1 + 84) = v26;
    v27 = 540;
    goto LABEL_65;
  }
  if (a2 != 17)
  {
    if (a2 != 16)
    {
      v26 = 0xE6FFFFFF95;
      goto LABEL_64;
    }
    if (a3 == 2)
    {
      v30 = a1[48];
      if ((v30 & 0x15) != 0)
      {
        if (((a1[48] & 0x10) == 0 || !*((_QWORD *)a1 + 7))
          && ((a1[48] & 4) == 0 || !*((_QWORD *)a1 + 8))
          && ((a1[48] & 1) == 0 || !*((_QWORD *)a1 + 9)))
        {
          if (v17[32])
          {
            v40 = *(_QWORD *)(v12 + 96);
            v39 = v17[32];
            v41 = (*(unsigned __int8 *)(v40 + (4 * v39 - 4)) << 24) | (*(unsigned __int8 *)(v40 + (4 * v39 - 3)) << 16) | (*(unsigned __int8 *)(v40 + (4 * v39 - 2)) << 8) | *(unsigned __int8 *)(v40 + (4 * v39 - 1));
          }
          else
          {
            v41 = 0;
          }
          if (v17[33])
          {
            v43 = *(_QWORD *)(v12 + 96);
            v42 = v17[33];
            v44 = (*(unsigned __int8 *)(v43 + (4 * v42 - 4)) << 24) | (*(unsigned __int8 *)(v43 + (4 * v42 - 3)) << 16) | (*(unsigned __int8 *)(v43 + (4 * v42 - 2)) << 8) | *(unsigned __int8 *)(v43 + (4 * v42 - 1));
          }
          else
          {
            v44 = 0;
          }
          v45 = v17[34];
          if (v45)
          {
            v46 = *(_QWORD *)(v12 + 96);
            v47 = (*(unsigned __int8 *)(v46 + (4 * v45 - 4)) << 24) | (*(unsigned __int8 *)(v46 + (4 * v45 - 3)) << 16) | (*(unsigned __int8 *)(v46 + (4 * v45 - 2)) << 8) | *(unsigned __int8 *)(v46 + (4 * v45 - 1));
          }
          else
          {
            v47 = 0;
          }
          v21 = 0;
          if ((a1[48] & 0x10) != 0 && v41)
          {
            v22 = PRgetWarn((char **)a1 + 7, v41, (unsigned int *)v12, v13, v16, v11, v8, v10);
            if (v22)
              goto LABEL_122;
            v21 = 1;
          }
          if ((v30 & 4) != 0 && v44)
          {
            v22 = PRgetWarn((char **)a1 + 8, v44, (unsigned int *)v12, v13, v16, v11, v8, v10);
            if (v22)
              goto LABEL_122;
            v21 = 1;
          }
          if ((v30 & 1) != 0 && v47)
          {
            v22 = PRgetWarn((char **)a1 + 9, v47, (unsigned int *)v12, v13, v16, v11, v8, v10);
            if (v22)
              goto LABEL_122;
            v21 = 1;
          }
          if (((v30 & 0x10) == 0 || *((_QWORD *)a1 + 7))
            && ((v30 & 4) == 0 || *((_QWORD *)a1 + 8))
            && ((v30 & 1) == 0 || *((_QWORD *)a1 + 9)))
          {
LABEL_145:
            if (v21)
              return 0;
            goto LABEL_47;
          }
LABEL_147:
          *(_QWORD *)(a1 + 84) = 0x4000001F8;
          *((_WORD *)a1 + 46) = 540;
          return 4;
        }
        goto LABEL_63;
      }
    }
    else if (a3 == 1 && (v20 & 0x15) != 0)
    {
      if (((v20 & 0x10) == 0 || !*((_QWORD *)a1 + 3))
        && ((v20 & 4) == 0 || !*((_QWORD *)a1 + 4))
        && ((v20 & 1) == 0 || !*((_QWORD *)a1 + 5)))
      {
        v21 = GetAltEmOff(v12, (uint64_t)v56, v18, v19, v55);
        if (!v21)
        {
          if ((v20 & 0x10) != 0 && v57)
          {
            v22 = PRgetmsg((char **)&v54, v57, v12);
            if (v22)
              goto LABEL_122;
            inserted = InsertString((const char **)a1 + 3, *((_QWORD *)a1 + 1), (const char **)&v54, 1, v13, v11, v8, v10);
            if (inserted)
            {
LABEL_38:
              v24 = inserted;
              if (v54)
                free(v54);
              result = 220;
              *((_DWORD *)a1 + 21) = v24;
              *((_DWORD *)a1 + 22) = 220;
              goto LABEL_53;
            }
            if (v13 == 16)
              ConvertString(*((char **)a1 + 3), v10);
            v21 = 1;
          }
          if ((v20 & 4) == 0 || !v58)
            goto LABEL_119;
          v22 = PRgetmsg((char **)&v54, v58, v12);
          if (!v22)
          {
            inserted = InsertString((const char **)a1 + 4, *((_QWORD *)a1 + 1), (const char **)&v54, 2, v13, v11, v8, v10);
            if (inserted)
              goto LABEL_38;
            if (v13 == 16)
              ConvertString(*((char **)a1 + 4), v10);
            v21 = 1;
LABEL_119:
            if ((v20 & 1) == 0 || !v59)
              goto LABEL_139;
            v48 = (const char **)(a1 + 40);
            v22 = PRgetmsg((char **)a1 + 5, v59, v12);
            if (v22)
              goto LABEL_122;
            v53 = strlen(*v48);
            v49 = *(unsigned __int8 *)(v10 + 20);
            if (v49 == 6)
            {
              if (*(_WORD *)(v10 + 16) != 64)
              {
LABEL_131:
                if (*(_BYTE *)(v10 + 20) == 8 && (*(_WORD *)(v10 + 18) & 0x40) != 0)
                {
                  v52 = strlen(*v48);
                  ToUpUnaccentedCnv(*v48, v52, 8, v11);
                }
                if (*(_BYTE *)(v8 + 28))
                  SLchcnv((char *)*v48, v53, (unsigned __int8 *)*v48, 0, v13);
                if (v13 == 16)
                  ConvertString((char *)*v48, v10);
                v21 = 1;
LABEL_139:
                if (((v20 & 0x10) == 0 || *((_QWORD *)a1 + 3))
                  && ((v20 & 4) == 0 || *((_QWORD *)a1 + 4))
                  && ((v20 & 1) == 0 || *((_QWORD *)a1 + 5)))
                {
                  goto LABEL_145;
                }
                goto LABEL_147;
              }
              OneToMultiChrCnv((const char **)a1 + 5, (unsigned __int16 *)&v53, 223, v8);
              v49 = *(unsigned __int8 *)(v10 + 20);
            }
            if (v49 == 5)
            {
              v50 = *(_WORD *)(v10 + 18);
              if ((v50 & 0x10) != 0)
              {
                OneToMultiChrCnv((const char **)a1 + 5, (unsigned __int16 *)&v53, 247, v8);
                OneToMultiChrCnv((const char **)a1 + 5, (unsigned __int16 *)&v53, 230, v8);
                v50 = *(_WORD *)(v10 + 18);
              }
              if ((v50 & 0x40) != 0)
              {
                v51 = strlen(*v48);
                ToUpUnaccentedCnv(*v48, v51, 5, v11);
              }
            }
            goto LABEL_131;
          }
LABEL_122:
          v21 = v22;
          result = 220;
          goto LABEL_52;
        }
LABEL_51:
        result = 230;
LABEL_52:
        *((_DWORD *)a1 + 21) = v21;
        *((_DWORD *)a1 + 22) = result;
LABEL_53:
        *((_WORD *)a1 + 46) = 540;
        return result;
      }
LABEL_63:
      v26 = 0xE6FFFFFF8CLL;
      goto LABEL_64;
    }
LABEL_47:
    v26 = 0xE6FFFFFF8BLL;
    goto LABEL_64;
  }
  if (a3)
    goto LABEL_47;
  v29 = (void *)*((_QWORD *)a1 + 3);
  if (v29)
  {
    free(v29);
    *((_QWORD *)a1 + 3) = 0;
    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  v32 = (void *)*((_QWORD *)a1 + 4);
  if (v32)
  {
    free(v32);
    *((_QWORD *)a1 + 4) = 0;
    v21 = 1;
  }
  v33 = (void *)*((_QWORD *)a1 + 5);
  if (v33)
  {
    free(v33);
    *((_QWORD *)a1 + 5) = 0;
    v21 = 1;
  }
  v34 = (void *)*((_QWORD *)a1 + 7);
  if (v34)
  {
    free(v34);
    *((_QWORD *)a1 + 7) = 0;
    v21 = 1;
  }
  v35 = (void *)*((_QWORD *)a1 + 8);
  if (!v35)
  {
    v38 = a1 + 72;
    result = *((_QWORD *)a1 + 9);
    if (!result)
      goto LABEL_145;
LABEL_87:
    free((void *)result);
    result = 0;
    *(_QWORD *)v38 = 0;
    return result;
  }
  free(v35);
  v37 = *((_QWORD *)a1 + 9);
  v36 = a1 + 72;
  result = v37;
  *((_QWORD *)v36 - 1) = 0;
  if (v37)
  {
    v38 = v36;
    goto LABEL_87;
  }
  return result;
}

uint64_t PRLangDialPos(uint64_t a1, _BYTE *a2, int a3, int a4, int a5)
{
  const char *v5;
  unsigned int v6;
  int v11;
  int v12;
  int v13;
  const char *v14;
  int v15;
  uint64_t v16;

  v5 = *(const char **)(a1 + 112);
  *a2 = 0;
  v6 = *(unsigned __int8 *)(a1 + 25);
  if (*(_BYTE *)(a1 + 25))
  {
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = *(unsigned __int8 *)v5;
      v14 = v5 + 2;
      v15 = *((unsigned __int8 *)v5 + 1);
      if (v5[1])
        break;
      if (v13 != a4)
      {
        if (a3)
          *a2 = ++v11;
LABEL_12:
        v5 = &v14[strlen(v14) + 1];
        if (v6 > v12++)
          continue;
      }
      return 0;
    }
    v16 = (uint64_t)&v5[(v15 - 1) + 3];
    while (v13 != a4 || *(unsigned __int8 *)v14 != a5)
    {
      --v15;
      ++v14;
      *a2 = ++v11;
      if (!(_BYTE)v15)
      {
        v14 = (const char *)v16;
        goto LABEL_12;
      }
    }
  }
  return 0;
}

uint64_t GetAltEmOff(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5)
{
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned __int8 v20;
  int v21;
  unsigned __int16 v23;
  _BYTE v24[4];

  v23 = 0;
  if (!BinarySearch(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 26), 1, a3, 1, &v23))
    return 115;
  v9 = bswap32(*(_DWORD *)(*(_QWORD *)(a1 + 48)
                         + 4
                         * (int)(a4 + (bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 40) + 2 * v23)) >> 16) - 1)));
  if ((_DWORD)v9 == -1)
    return 115;
  v10 = 0;
  v11 = (_BYTE *)(*(_QWORD *)(a1 + 64) + v9);
  v12 = *v11;
  v13 = v12 >> 6;
  v24[0] = *v11 >> 6;
  do
  {
    v24[1] = (v12 >> 4) & 3;
    v24[2] = (v12 >> 2) & 3;
    v24[3] = v12 & 3;
    if (v10 != a5)
    {
      v24[0] = 0;
      v13 += (v12 & 3) + ((v12 >> 4) & 3) + ((v12 >> 2) & 3) + 1;
      v11 += v13;
      v12 = *v11;
    }
  }
  while (v10++ < a5);
  v15 = 0;
  v16 = v11 + 1;
  do
  {
    *(_DWORD *)(a2 + 4 * v15) = 0;
    v17 = v24[v15];
    if (v24[v15])
    {
      v18 = 0;
      v19 = 0;
      do
      {
        *(_DWORD *)(a2 + 4 * v15) = v19 << 8;
        v20 = *v16++;
        v21 = v20 | (v19 << 8);
        *(_DWORD *)(a2 + 4 * v15) = v21;
        ++v18;
        v19 = v21;
      }
      while (v18 < v17);
      *(_DWORD *)(a2 + 4 * v15) = 4 * v21;
    }
    ++v15;
  }
  while (v15 != 4);
  return 0;
}

uint64_t InsertString(const char **a1, uint64_t a2, const char **a3, int a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  uint64_t v16;
  uint64_t v17;
  __int16 *v18;
  uint64_t v19;
  char *v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  const char *v32;
  uint64_t v33;
  int v34;
  BOOL v35;
  int v37;
  unint64_t v38;
  BOOL v39;
  int v40;
  BOOL v42;
  BOOL v43;
  char v44;
  _QWORD *v45;
  char *v46;
  BOOL v47;
  int v48;
  int v49;
  int v50;
  char v51;
  int v52;
  int v53;
  const char *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  int v59;
  int v60;
  const char *v61;
  const char **v62;
  char *v63;
  int v64;
  __int16 v65;
  uint64_t v67;
  uint64_t v68;
  const char **v70;
  uint64_t v72;
  size_t __n;

  v10 = a5;
  LOWORD(__n) = 0;
  if (a4 == 1)
  {
    v72 = *(_QWORD *)(a2 + 24);
    if (a5 == 16)
    {
      if (v72)
      {
        v16 = *(unsigned __int16 *)(v72 + 18);
        if (*(_WORD *)(v72 + 18))
        {
          v17 = *(_QWORD *)v72;
          v18 = *(__int16 **)(v72 + 8);
          do
          {
            v19 = *v18++;
            v20 = (char *)(v17 + v19);
            if (*(_BYTE *)(v17 + v19))
              ConvertString(v20, a8);
            --v16;
          }
          while (v16);
        }
      }
    }
    LOWORD(__n) = strlen(*a3);
    if (*(_BYTE *)(a8 + 20) == 5)
    {
      v21 = *(_WORD *)(a8 + 18);
      if ((v21 & 0x10) != 0)
      {
        OneToMultiChrCnv(a3, (unsigned __int16 *)&__n, 247, a7);
        OneToMultiChrCnv(a3, (unsigned __int16 *)&__n, 230, a7);
        v21 = *(_WORD *)(a8 + 18);
      }
      if ((v21 & 0x40) != 0)
        ToUpUnaccentedCnv(*a3, (__int16)__n, 5, a6);
    }
    v22 = *(_QWORD *)(a2 + 72);
    if (v22)
      v23 = *(_QWORD *)(v22 + 8);
    else
      v23 = 0;
    v10 = a5;
    if (*(_BYTE *)(a7 + 28))
      ConvertAlts(v72, 1, a5);
  }
  else
  {
    v72 = 0;
    v23 = 0;
  }
  v24 = *(uint64_t **)(a2 + 72);
  v70 = a1;
  if (v24)
    v25 = *v24;
  else
    v25 = 0;
  if ((!v72 || !*(_WORD *)(v72 + 18)) && (!v25 || !*(_WORD *)(v25 + 18)) && (!v23 || !*(_WORD *)(v23 + 18)))
  {
    v61 = *a3;
    v62 = v70;
    *v70 = *a3;
    LOWORD(__n) = strlen(v61);
    goto LABEL_94;
  }
  v26 = (char *)malloc_type_calloc(1uLL, 0x281uLL, 0xA1C651E4uLL);
  if (!v26)
    return 120;
  v27 = v26;
  LOWORD(__n) = strlen(*a3);
  v67 = a8;
  v68 = a7;
  if (a4 == 1)
  {
    v28 = 0;
    v29 = 0;
    v30 = Alt_Str[0];
    v31 = Fil_Str[0];
    while (1)
    {
      v32 = *a3;
      v33 = (unsigned __int16)v29;
      v34 = (*a3)[(unsigned __int16)v29];
      v35 = v34 == v30;
      if (v34 != v30 && v34 != v31)
      {
        v37 = Ref_Str[0];
        v38 = (unsigned __int16)v28;
        if ((*a3)[(unsigned __int16)v29])
          v39 = v34 == Ref_Str[0];
        else
          v39 = 1;
        if (v39)
        {
          v40 = (unsigned __int16)v28;
LABEL_53:
          v35 = 0;
          v28 = v40;
          goto LABEL_54;
        }
        v40 = (unsigned __int16)v28;
        if ((unsigned __int16)v28 > 0x27Fu)
          goto LABEL_53;
        while (1)
        {
          ++v28;
          v27[v38] = v34;
          ++v29;
          v32 = *a3;
          v33 = (unsigned __int16)v29;
          v34 = (*a3)[(unsigned __int16)v29];
          v35 = v34 == v30;
          if (v34 == v30 || v34 == v31)
            break;
          v40 = v38 + 1;
          if ((*a3)[(unsigned __int16)v29])
            v42 = v34 == v37;
          else
            v42 = 1;
          if (!v42)
          {
            v43 = v38++ > 0x27E;
            if (!v43)
              continue;
          }
          goto LABEL_53;
        }
      }
LABEL_54:
      if ((unsigned __int16)v28 > 0x27Fu || !v34)
      {
        LOWORD(v50) = v28;
        goto LABEL_92;
      }
      v44 = !v35;
      if (!v72)
        v44 = 1;
      if ((v44 & 1) != 0 || (v45 = (_QWORD *)v72, v46 = Alt_Str, !*(_QWORD *)v72))
      {
        v47 = v34 != Ref_Str[0] || v23 == 0;
        if (v47 || (v45 = (_QWORD *)v23, v46 = Ref_Str, !*(_QWORD *)v23))
        {
          if (!v25)
            goto LABEL_70;
          v45 = (_QWORD *)v25;
          v46 = Fil_Str;
          if (!*(_QWORD *)v25)
            goto LABEL_70;
        }
      }
      v48 = CompString(v45, (unsigned __int8 *)v46, &v32[v33], (uint64_t)v27, (unsigned __int16)v28);
      v30 = Alt_Str[0];
      v31 = Fil_Str[0];
      if (!v48)
      {
        v32 = *a3;
LABEL_70:
        v51 = v32[v33];
        v50 = v28 + 1;
        v27[(unsigned __int16)v28] = v51;
        v49 = 1;
        goto LABEL_71;
      }
      v49 = v48;
      v50 = strlen(v27);
LABEL_71:
      v29 += v49;
      v28 = v50;
      if ((unsigned __int16)__n < (unsigned __int16)v29)
        goto LABEL_92;
    }
  }
  v50 = 0;
  v52 = 0;
  do
  {
    v53 = Fil_Str[0];
    v54 = *a3;
    v55 = (unsigned __int16)v52;
    v56 = (*a3)[(unsigned __int16)v52];
    if (v56 != Fil_Str[0])
    {
      v57 = (unsigned __int16)v50;
      if (!(*a3)[(unsigned __int16)v52])
      {
        v58 = (unsigned __int16)v50;
LABEL_83:
        v50 = v58;
        goto LABEL_84;
      }
      v58 = (unsigned __int16)v50;
      if ((unsigned __int16)v50 > 0x27Fu)
        goto LABEL_83;
      while (1)
      {
        ++v50;
        v27[v57] = v56;
        ++v52;
        v54 = *a3;
        v55 = (unsigned __int16)v52;
        v56 = (*a3)[(unsigned __int16)v52];
        if (v56 == v53)
          break;
        v58 = v57 + 1;
        if ((*a3)[(unsigned __int16)v52])
        {
          v43 = v57++ > 0x27E;
          if (!v43)
            continue;
        }
        goto LABEL_83;
      }
    }
LABEL_84:
    if ((unsigned __int16)v50 > 0x27Fu)
      break;
    v59 = CompString((_QWORD *)v25, (unsigned __int8 *)Fil_Str, &v54[v55], (uint64_t)v27, (unsigned __int16)v50);
    if (v59)
    {
      v60 = v59;
      v50 = strlen(v27);
    }
    else
    {
      v27[(unsigned __int16)v50] = (*a3)[v55];
      v60 = 1;
      ++v50;
    }
    v52 += v60;
  }
  while ((unsigned __int16)__n >= (unsigned __int16)v52);
LABEL_92:
  v27[(unsigned __int16)v50] = 0;
  LOWORD(__n) = strlen(v27);
  v63 = (char *)malloc_type_malloc((unsigned __int16)__n + 1, 0xC9CBE997uLL);
  v62 = v70;
  *v70 = v63;
  if (!v63)
  {
    free(v27);
    return 120;
  }
  strncpy(v63, v27, (unsigned __int16)__n);
  (*v70)[(unsigned __int16)__n] = 0;
  free(v27);
  free((void *)*a3);
  *a3 = 0;
  v10 = a5;
  a8 = v67;
  a7 = v68;
LABEL_94:
  v64 = *(unsigned __int8 *)(a8 + 20);
  if (v64 == 6)
  {
    if (*(_WORD *)(a8 + 16) == 64)
    {
      OneToMultiChrCnv(v62, (unsigned __int16 *)&__n, 223, a7);
      v64 = *(unsigned __int8 *)(a8 + 20);
      goto LABEL_97;
    }
  }
  else
  {
LABEL_97:
    if (v64 == 8 && (*(_WORD *)(a8 + 18) & 0x40) != 0)
    {
      v65 = strlen(*v62);
      ToUpUnaccentedCnv(*v62, v65, 8, a6);
    }
  }
  if (*(_BYTE *)(a7 + 28))
  {
    SLchcnv((char *)*v62, (__int16)__n, (unsigned __int8 *)*v62, 0, v10);
    if (*(_BYTE *)(a7 + 28))
      ConvertAlts(v72, 0, v10);
  }
  return 0;
}

char *ConvertString(char *result, uint64_t a2)
{
  int v2;
  char v3;
  int v4;

  v2 = *(_WORD *)(a2 + 16) & 0xF0;
  if (v2 == 64)
    v3 = 115;
  else
    v3 = 122;
  while (1)
  {
    v4 = *result;
    if (v4 == 31)
      break;
    if (v4 == 127)
    {
      *result = v3;
    }
    else if (!*result)
    {
      return result;
    }
LABEL_13:
    ++result;
  }
  if (v2 != 128)
  {
    *result++ = 39;
    goto LABEL_13;
  }
  if (result[1])
  {
    *result = result[1];
    *++result = 39;
    goto LABEL_13;
  }
  return result;
}

uint64_t PRgetWarn(char **a1, int a2, unsigned int *a3, unsigned int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v14;
  char v16;
  char v17;
  int v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  int v28;
  uint64_t v29;
  size_t v30;
  char *v31;
  char *v32;
  int v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  unsigned __int16 v37;
  unsigned int v38;
  char *__s;
  _BYTE __dst[322];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v14 = *a3;
  if (SLSeek(*a3, a3[1] + a2, 0))
    return 111;
  __s = 0;
  v38 = 0;
  v37 = 0;
  if (SLFRead(v14, 162, __dst, &v38))
    return 112;
  v16 = __dst[0];
  if (__dst[0])
  {
    v17 = 0;
    v18 = 0;
    v19 = __dst;
    v20 = 1;
    do
    {
      v21 = (char)v19[1];
      if (v21 < 0)
      {
        v18 = v19[2];
        v19 += 3;
        v22 = 3;
      }
      else
      {
        v19 += 2;
        v22 = 2;
      }
      --v16;
      v23 = v21 & 0x7F;
      v24 = v18 != a5 && v21 <= -1;
      v25 = *v19;
      v26 = v22 + v20;
      if (!v24 && v23 == a4)
        v17 = 1;
      if (v17)
        v28 = 0;
      else
        v28 = *v19;
      v20 = v26 + v28;
    }
    while (v16);
    v29 = v20;
  }
  else
  {
    v25 = 0;
    v29 = 1;
  }
  v30 = v25;
  v31 = (char *)malloc_type_malloc(v25 + 1, 0xA5C0EAA2uLL);
  *a1 = v31;
  if (!v31)
    return 120;
  v32 = v31;
  __s = v31;
  memcpy(v31, &__dst[v29], v30);
  v32[v30] = 0;
  SLcrypt(v32, v30, (uint64_t)&SLWkey, 7);
  v33 = *(unsigned __int8 *)(a8 + 20);
  if (v33 != 6)
    goto LABEL_29;
  if (*(_WORD *)(a8 + 16) == 64)
  {
    OneToMultiChrCnv((const char **)&__s, &v37, 223, a7);
    v33 = *(unsigned __int8 *)(a8 + 20);
LABEL_29:
    if (v33 == 5)
    {
      v34 = *(_WORD *)(a8 + 18);
      if ((v34 & 0x10) != 0)
      {
        OneToMultiChrCnv((const char **)&__s, &v37, 247, a7);
        OneToMultiChrCnv((const char **)&__s, &v37, 230, a7);
        v34 = *(_WORD *)(a8 + 18);
      }
      if ((v34 & 0x40) != 0)
      {
        v35 = strlen(__s);
        ToUpUnaccentedCnv(__s, v35, 5, a6);
      }
    }
  }
  if (*(_BYTE *)(a8 + 20) == 8 && (*(_WORD *)(a8 + 18) & 0x40) != 0)
  {
    v36 = strlen(__s);
    ToUpUnaccentedCnv(__s, v36, 8, a6);
  }
  if (*(_BYTE *)(a7 + 28))
    SLchcnv(__s, v30, (unsigned __int8 *)__s, 0, a4);
  return 0;
}

uint64_t ConvertAlts(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v6;
  __int16 *v7;
  uint64_t v8;
  char *v9;
  __int16 v10;

  if (result)
  {
    v3 = *(unsigned __int16 *)(result + 18);
    if (*(_WORD *)(result + 18))
    {
      v6 = *(_QWORD *)result;
      v7 = *(__int16 **)(result + 8);
      do
      {
        v8 = *v7++;
        v9 = (char *)(v6 + v8);
        if (*(_BYTE *)(v6 + v8))
        {
          v10 = strlen(v9);
          result = SLchcnv(v9, v10, (unsigned __int8 *)v9, a2, a3);
        }
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

uint64_t CompString(_QWORD *a1, unsigned __int8 *a2, _BYTE *a3, uint64_t a4, unsigned int a5)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int16 v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  unsigned __int16 v19;

  if (SLstrncmp(a3, a2, 3))
    return 0;
  v13 = a1;
  v11 = *a1;
  v12 = v13[1];
  v14 = a3[3] - 49;
  if (*a2 == Alt_Str[0])
  {
    *(_BYTE *)(a4 + a5) = 123;
    LOWORD(a5) = a5 + 1;
  }
  *(_BYTE *)(a4 + (unsigned __int16)a5) = 0;
  v15 = strlen((const char *)a4);
  v16 = (const char *)(v11 + *(__int16 *)(v12 + 2 * v14));
  if (*v16)
  {
    v17 = v15;
    if ((unsigned __int16)(strlen(v16) + v15) >= 0x281uLL)
    {
      strncat((char *)a4, v16, (unsigned __int16)(640 - v17));
      *(_BYTE *)(a4 + 640) = 0;
      return 4;
    }
    strcat((char *)a4, v16);
    if (*a2 != Alt_Str[0])
      return 4;
    v19 = strlen((const char *)a4);
    *(_BYTE *)(a4 + v19) = 125;
    v18 = (unsigned __int16)(v19 + 1);
LABEL_15:
    *(_BYTE *)(a4 + v18) = 0;
    return 4;
  }
  if ((_WORD)a5)
  {
    v18 = (unsigned __int16)(a5 - 1);
    if (*(_BYTE *)(a4 + v18) == 32)
      goto LABEL_15;
  }
  if (a3[4] == 32)
    return 5;
  else
    return 4;
}

uint64_t PRevamac(uint64_t a1, uint64_t a2, uint64_t *a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t result;
  int v12;
  unsigned int v14;
  _BYTE *v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  _BYTE **v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _BYTE **v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 **v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned __int8 **v37;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 **v41;
  int v42;
  int v43;
  uint64_t v44;
  _BYTE *v46;
  BOOL v47;
  int v48;
  char *v49;
  int v50;
  _BYTE *v51;
  char *v52;
  _BYTE *v53;
  int v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  int v61;
  int v63;
  int v64;
  BOOL v65;
  int v68;
  int v69;
  int v70;
  int v71;
  BOOL v72;
  int v73;
  int v74;
  int v76;
  int v77;
  BOOL v78;
  int v81;
  int v83;
  int v84;
  int v85;
  int v86;
  _BYTE *v87;
  unsigned int v88;
  unsigned __int8 *v89;
  int v90;
  unsigned int v91;
  _BYTE *v92;
  unsigned int v93;
  unsigned __int8 *v94;
  int v95;
  unsigned int v96;
  int v97;
  int v99;
  int v103;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unsigned int v108;
  uint64_t i;
  unsigned int v110;
  int v111;
  BOOL v112;
  _BYTE *v113;
  int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  _BYTE *v120;
  unsigned int v121;
  unsigned __int16 v122;
  unsigned __int8 *v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  BOOL v128;
  BOOL v129;
  BOOL v130;

  v7 = *a3;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(*a3 + 4);
  switch(a5)
  {
    case 1:
      while (1)
      {
        v7 = *(_QWORD *)(v7 + 72);
        if (!v7)
          break;
        v10 = *(_BYTE **)(v7 + 40);
        if (v10)
          goto LABEL_7;
      }
      v10 = *(_BYTE **)(v8 + 24);
      if (!v10)
        return 1;
LABEL_7:
      result = 1;
      do
      {
        v12 = *v10;
        if (!*v10)
          return 0;
        if (v12 == 10 || v12 == 13)
          return 1;
        ++v10;
      }
      while (v12 != *(unsigned __int8 *)(a2 + 22));
      return result;
    case 2:
      v15 = *(_BYTE **)(v7 + 40);
      if (!v15)
        return 0;
      result = 1;
      do
      {
        v16 = *v15;
        if (!*v15)
          return 0;
        if (v16 == 10 || v16 == 13)
          return 1;
        ++v15;
      }
      while (v16 != *(unsigned __int8 *)(a2 + 22));
      return result;
    case 4:
      v19 = *(_QWORD *)(v7 + 152);
      v20 = *(_BYTE **)(v19 + 16);
      v21 = *(_DWORD *)(v19 + 92);
      if ((v21 & 0x4000) != 0)
      {
        v22 = *(_QWORD *)(v19 + 176);
        if (v22)
        {
          v23 = *(_BYTE ***)(v22 + 144);
          if (v23)
            v20 = *v23;
        }
      }
      if (v20 && (v21 & 0x10000) == 0)
        return *v20 == 104;
      return 0;
    case 5:
      v24 = *(_QWORD *)(v7 + 152);
      v20 = *(_BYTE **)(v24 + 16);
      v25 = *(_DWORD *)(v24 + 92);
      if ((v25 & 0x4000) != 0)
      {
        v26 = *(_QWORD *)(v24 + 176);
        if (v26)
        {
          v27 = *(_BYTE ***)(v26 + 144);
          if (v27)
            v20 = *v27;
        }
      }
      if (!v20 || (v25 & 0x10000) == 0)
        return 0;
      return *v20 == 104;
    case 6:
      v28 = *(unsigned __int8 **)(v7 + 16);
      if ((*(_BYTE *)(v7 + 93) & 0x40) != 0)
      {
        v29 = *(_QWORD *)(v7 + 176);
        if (v29)
        {
          v30 = *(unsigned __int8 ***)(v29 + 144);
          if (v30)
            v28 = *v30;
        }
      }
      if (!v28)
        return 0;
      v31 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * *v28);
      v32 = v31 & 0x60000040;
      v33 = v31 & 0x10000000;
      return v32 && v33 == 0;
    case 7:
      v35 = *(unsigned __int8 **)(v7 + 16);
      if ((*(_BYTE *)(v7 + 93) & 0x40) != 0)
      {
        v36 = *(_QWORD *)(v7 + 176);
        if (v36)
        {
          v37 = *(unsigned __int8 ***)(v36 + 144);
          if (v37)
            v35 = *v37;
        }
      }
      return v35 && (*(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * *v35) & 0x10000000) != 0;
    case 8:
      result = 1;
      if (v9 > -536870881)
      {
        if (v9 == -536870880 || v9 == 0x40000)
          return result;
      }
      else if (v9 == -2147483632 || v9 == -536870896)
      {
        return result;
      }
      return 0;
    case 9:
      return (v9 & 0xE0000070) != 0;
    case 10:
      v39 = *(unsigned __int8 **)(v7 + 16);
      if ((*(_BYTE *)(v7 + 93) & 0x40) != 0)
      {
        v40 = *(_QWORD *)(v7 + 176);
        if (v40)
        {
          v41 = *(unsigned __int8 ***)(v40 + 144);
          if (v41)
            v39 = *v41;
        }
      }
      if (!v39)
        return 0;
      v42 = *v39;
      v43 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * *v39);
      if ((v43 & 0x60000040) == 0)
        return 0;
      v44 = v43 & 0x10000000;
      return (v42 & 0xFFFFFFDF) != 0x48 && v44 == 0;
    case 11:
      return *(_QWORD *)(*(_QWORD *)(v7 + 152) + 40) != 0;
    case 12:
      return (*(_WORD *)(v7 + 98) & 0xC00) != 0;
    case 13:
      return *(_BYTE *)(v7 + 50) != 0;
    case 14:
      v46 = *(_BYTE **)(v7 + 16);
      if (v46)
      {
        if (*v46 != 45)
          return 0;
        if (v46[1])
          v47 = v46[1] == 45;
        else
          v47 = 1;
        return !v47;
      }
      v126 = *(_QWORD *)(v7 + 72);
      if (!v126 || *(_QWORD *)(v126 + 40) || *(_WORD *)(v126 + 32) != 1)
        return 0;
      goto LABEL_496;
    case 15:
      v48 = *(unsigned __int16 *)(v7 + 32);
      return v48 == a6;
    case 16:
      v49 = *(char **)(v7 + 16);
      v50 = 46;
      return strchr(v49, v50) != 0;
    case 17:
      return (*(_BYTE *)(v7 + 93) & 0x80) != 0;
    case 18:
      if ((*(_BYTE *)(v7 + 93) & 0x80) == 0)
        return 0;
      v51 = *(_BYTE **)(v7 + 112);
      if (!v51)
        return 0;
      if (!SLstrncmp(*(_BYTE **)(v7 + 112), "-me", 3)
        || !SLstrncmp(v51, "-te", 3)
        || !SLstrncmp(v51, "-se", 3)
        || !SLstrncmp(v51, "-nos", 4))
      {
        return 1;
      }
      v52 = "-vos";
      v53 = v51;
      v54 = 4;
      return !SLstrncmp(v53, (unsigned __int8 *)v52, v54);
    case 19:
      return (*(_BYTE *)(v7 + 93) & 0x40) != 0;
    case 20:
      v55 = *(_QWORD *)(v7 + 72);
      v56 = (_QWORD *)(v8 + 24);
      if (v55)
        v57 = (_QWORD *)(v55 + 40);
      else
        v57 = v56;
      return *v57 != 0;
    case 21:
      v49 = *(char **)(v7 + 16);
      v50 = 47;
      return strchr(v49, v50) != 0;
    case 22:
      v58 = *(_QWORD *)(v7 + 16);
      if (v58)
      {
        v59 = *(unsigned __int16 *)(v7 + 32);
        if (v59 >= 2 && *(_BYTE *)(v58 + v59 - 1) == 45 && *(_BYTE *)(v58 + v59 - 2) != 45)
          return 1;
      }
      else if (!*(_QWORD *)(v7 + 40))
      {
        v126 = *(_QWORD *)(v7 + 80);
        if (v126)
        {
          if (*(_WORD *)(v126 + 32) == 1)
          {
LABEL_496:
            if (**(_BYTE **)(v126 + 16) == 45)
              return 1;
          }
        }
      }
      return 0;
    case 23:
      if (v9 != -2147483136)
        return 0;
      v60 = *(unsigned __int16 *)(v7 + 32) - 1;
      if (v60 >= 5)
        return 0;
      return dword_1DE2F17F0[(__int16)v60];
    case 24:
      if (v9 != -2147483136)
      {
        if (a4 != 1 && v9 == -2147483632)
        {
          v7 = *(_QWORD *)(v7 + 72);
          if (v7)
          {
            if (*(_DWORD *)(v7 + 4) == -2147483136 && (*(unsigned __int16 *)(v7 + 32) | 2) == 3)
              goto LABEL_481;
          }
        }
        return 0;
      }
      v61 = *(unsigned __int16 *)(v7 + 32);
      if (v61 == 4 || v61 == 7)
        return 1;
      if (a4 != 1)
        return 0;
      if ((v61 | 2) != 3)
        return 0;
      v7 = *(_QWORD *)(v7 + 80);
      if (!v7)
        return 0;
      v63 = *(_DWORD *)(v7 + 4);
      v64 = -2147483632;
LABEL_369:
      if (v63 != v64)
        return 0;
      goto LABEL_481;
    case 25:
      v65 = v9 == 0x40000 || v9 == 268435457;
      if (!v65 && (*(_BYTE *)(v7 + 92) & 0xC) == 0)
        return (*(_WORD *)(v7 + 98) & 0x80) != 0;
      return 1;
    case 26:
      return (*(_WORD *)(v7 + 98) & 0x80) != 0
          && *(_BYTE *)(*(unsigned __int16 *)(v7 + 32) + *(_QWORD *)(v7 + 16) - 1) != 46;
    case 27:
      if (v9 == 0x40000 || v9 == 268435457 || v9 == 268435459)
        return 1;
      v68 = *(_DWORD *)(v7 + 92);
      if ((v68 & 8) != 0)
        return 1;
      if ((*(_QWORD *)&v68 & 0xC00000) != 0x400000)
        return 0;
      return (*(_WORD *)(v7 + 98) & 0x80) != 0;
    case 28:
      result = 1;
      if (!a7 || (a7 & 0x10) != 0)
        return result;
      return 0;
    case 29:
      return (v9 & 0x80000040) == 0x40;
    case 30:
    case 111:
      v14 = v9 & 0x80000008;
      return v14 == 8;
    case 31:
      return (*(_WORD *)(v7 + 98) & 0x10) != 0;
    case 32:
      v69 = *(unsigned __int16 *)(v7 + 98);
      v70 = 3072;
      return (v70 & ~v69) == 0;
    case 33:
      v69 = *(unsigned __int16 *)(v7 + 98);
      v70 = 768;
      return (v70 & ~v69) == 0;
    case 34:
      v71 = -536870848;
      goto LABEL_319;
    case 35:
      if ((~v9 & 0xC1000000) != 0)
        goto LABEL_168;
      if ((v9 & 0x1F0000) != 0)
        return 1;
      v9 &= 0x1FFFF0u;
LABEL_168:
      if (*(_BYTE *)(a2 + 20) != 6)
        return 0;
      v72 = v9 == -536870848;
      v73 = -1073741312;
      return v72 || v9 == v73;
    case 36:
      v74 = *(unsigned __int8 *)(a2 + 20);
      if (v74 == 6 && v9 == -1073741760)
        return 1;
      if (v74 == 6)
        return 0;
      v76 = -536870848;
      return v9 == v76;
    case 37:
      return (*(_WORD *)(v7 + 96) & 0x100) != 0;
    case 38:
      v76 = -536870911;
      return v9 == v76;
    case 39:
      if ((~v9 & 0xC1000000) == 0)
        return (v9 & 0x3800) != 0;
      if (*(_BYTE *)(a2 + 20) != 6)
        return 0;
      v125 = -536870848;
LABEL_484:
      v76 = v125 - 62;
      return v9 == v76;
    case 40:
      v76 = -2147483584;
      return v9 == v76;
    case 41:
      v76 = -2147483646;
      return v9 == v76;
    case 42:
      return *(_QWORD *)(*(_QWORD *)(v7 + 152) + 80) != *(_QWORD *)(*(_QWORD *)(v7 + 152) + 176);
    case 43:
      return (*(_BYTE *)(v7 + 93) & 1) != 0;
    case 44:
      if (*(_WORD *)(v7 + 32) != 1)
        return 0;
      v77 = **(unsigned __int8 **)(v7 + 16);
      result = 1;
      v78 = (v77 - 131) > 0x22 || ((1 << (v77 + 125)) & 0x500000001) == 0;
      if (v78 && v77 != 36)
        return 0;
      return result;
    case 45:
      return v9 == -2147483644 || v9 == -2147483640 || v9 == -2147483392;
    case 46:
      if ((v9 & 0x80000020) != 0x20)
        return 0;
      v81 = *(unsigned __int16 *)(v7 + 32);
      return v81 == 1;
    case 47:
      result = 1;
      if ((*(_BYTE *)(v7 + 92) & 1) != 0 || (v9 & 0x80000020) == 0x20)
        return result;
      return 0;
    case 48:
      return (*(_BYTE *)(v7 + 92) & 2) != 0;
    case 49:
      return (v9 & 0x1F0000) != 0;
    case 50:
      v76 = -2147483392;
      return v9 == v76;
    case 51:
      return ((v9 + 2147483644) & 0xFFFFFFFB) == 0;
    case 52:
      v83 = -536870848;
      goto LABEL_259;
    case 53:
      return (*(_WORD *)(v7 + 98) & 0xC00) == 0x800;
    case 54:
      v14 = *(_WORD *)(v7 + 96) & 0xC;
      return v14 == 8;
    case 55:
      if ((v9 & 0x80000020) != 0x20)
        return 0;
      v53 = *(_BYTE **)(v7 + 16);
      if (!v53)
        return 0;
      v52 = "15";
      goto LABEL_236;
    case 56:
      v84 = 268435458;
      return (v84 & ~v9) == 0;
    case 57:
      return !*(_BYTE *)(v7 + 60);
    case 58:
      v81 = *(unsigned __int8 *)(v7 + 60);
      return v81 == 1;
    case 59:
      v85 = *(unsigned __int8 *)(v7 + 60);
      return v85 == 2;
    case 60:
      v86 = *(unsigned __int8 *)(v7 + 60);
      return v86 == 4;
    case 61:
      return *(_QWORD *)(v7 + 104) || *(_QWORD *)(v7 + 112);
    case 62:
      if ((v9 & 0x80000020) != 0x20)
        return 0;
      v53 = *(_BYTE **)(v7 + 16);
      if (!v53)
        return 0;
      v52 = "14";
LABEL_236:
      v54 = 2;
      return !SLstrncmp(v53, (unsigned __int8 *)v52, v54);
    case 63:
      v76 = -2147483616;
      return v9 == v76;
    case 64:
      return (*(_BYTE *)(v7 + 93) & 2) != 0;
    case 65:
      return (*(_BYTE *)(v7 + 92) & 0x80) != 0;
    case 66:
      return (v9 & 0x80010000) == 0x10000;
    case 67:
      v87 = *(_BYTE **)(v7 + 24);
      if (!v87)
        return 0;
      v88 = *v87;
      if (!*v87)
        return 0;
      v89 = v87 + 1;
      while (1)
      {
        v90 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v88);
        if ((v90 & 0x1000000) == 0)
          break;
        v91 = *v89++;
        v88 = v91;
        if (!v91)
          return 0;
      }
      return (v90 & 0x20000000) != 0;
    case 68:
      v92 = *(_BYTE **)(v7 + 24);
      if (!v92)
        return 0;
      v93 = *v92;
      if (!*v92)
        return 0;
      v94 = v92 + 1;
      while (1)
      {
        v95 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v93);
        if ((v95 & 0x1000000) == 0)
          break;
        v96 = *v94++;
        v93 = v96;
        if (!v96)
          return 0;
      }
      return (v95 & 0x40000000) != 0;
    case 69:
      v83 = -1073741760;
LABEL_259:
      v76 = v83 - 48;
      return v9 == v76;
    case 70:
      return (*(_BYTE *)(v7 + 93) & 8) != 0;
    case 71:
      return (*(_BYTE *)(v7 + 94) & 8) != 0;
    case 72:
      return (*(_BYTE *)(v7 + 94) & 4) != 0;
    case 73:
      v97 = -1073741760;
      goto LABEL_377;
    case 74:
      return (*(_BYTE *)(v7 + 93) & 0x10) != 0;
    case 75:
      return !*(_BYTE *)(v7 + 51);
    case 76:
      if ((v9 & 0xE0000000) == 0xC0000000 && (v9 & 0x200003D) != 0)
        return 1;
      v99 = *(unsigned __int8 *)(a2 + 20);
      if (v99 == 6 && (v9 == -1073741822 || v9 == -1073741760))
        return 1;
      if ((v99 & 0xFFFFFFFB) != 8 && v99 != 9 && v99 != 5)
        return 0;
      goto LABEL_330;
    case 77:
      return (*(_WORD *)(v7 + 98) & 0x20) != 0;
    case 78:
      return (*(_WORD *)(v7 + 98) & 8) != 0;
    case 79:
      return (*(_WORD *)(v7 + 98) & 0xC00) == 0x400;
    case 80:
      v86 = *(_WORD *)(v7 + 96) & 0xC;
      return v86 == 4;
    case 81:
      return (*(_BYTE *)(v7 + 92) & 4) != 0;
    case 82:
      return *(_BYTE *)(v7 + 51) == 3;
    case 83:
      v84 = 268435460;
      return (v84 & ~v9) == 0;
    case 84:
      result = 1;
      if (!a7 || (a7 & 0x20) != 0)
        return result;
      return 0;
    case 85:
      if (a4 == 1)
      {
        if ((*(_WORD *)(v7 + 96) & 0x1000) == 0)
          return 0;
        for (; (*(_WORD *)(v7 + 96) & 0x100) == 0; v7 = *(_QWORD *)(v7 + 176))
          ;
      }
      else
      {
        if ((*(_WORD *)(v7 + 96) & 0x100) == 0)
          return 0;
        for (; (*(_WORD *)(v7 + 96) & 0x1000) == 0; v7 = *(_QWORD *)(v7 + 168))
          ;
      }
LABEL_481:
      *a3 = v7;
      return 1;
    case 86:
      return (v9 & 0x80000020) == 0x20;
    case 87:
      return (*(_BYTE *)(v7 + 93) & 4) != 0;
    case 88:
      return *(_WORD *)(v7 + 32) == 1 && !SLstrcmp(*(_BYTE **)(v7 + 16), "1");
    case 89:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
      return 0;
    case 90:
      v71 = -1073741760;
LABEL_319:
      v76 = v71 - 60;
      return v9 == v76;
    case 91:
      if ((~v9 & 0xC2000000) != 0)
        goto LABEL_323;
      if ((v9 & 0x1F0000) != 0)
        return 1;
      v9 &= 0x1FFFF0u;
LABEL_323:
      if (*(_BYTE *)(a2 + 20) != 6)
        return 0;
      v73 = -1073741760;
      v72 = v9 == -1073741568;
      return v72 || v9 == v73;
    case 92:
      v103 = *(unsigned __int8 *)(a2 + 20);
      if (v103 == 6 && v9 == -536870848)
        return 1;
      if (v103 == 6)
        return 0;
LABEL_330:
      v76 = -1073741760;
      return v9 == v76;
    case 93:
      return (*(_WORD *)(v7 + 96) & 0x1000) != 0;
    case 94:
      v76 = -1073741823;
      return v9 == v76;
    case 95:
      if ((~v9 & 0xC2000000) == 0)
        return (v9 & 0xBC00) != 0;
      if (*(_BYTE *)(a2 + 20) != 6)
        return 0;
      v125 = -1073741760;
      goto LABEL_484;
    case 96:
    case 99:
    case 100:
    case 102:
    case 146:
      return (*(_BYTE *)(v7 + 92) & 0x20) != 0;
    case 97:
      return (*(_BYTE *)(v7 + 92) & 0x20) != 0;
    case 98:
    case 124:
      return (*(_BYTE *)(v7 + 94) & 0x10) != 0;
    case 101:
      return (*(_BYTE *)(v7 + 92) & 0x80) != 0;
    case 103:
      v72 = v9 == -2147483632;
      v73 = 0x40000;
      return v72 || v9 == v73;
    case 104:
      return (*(_BYTE *)(v7 + 92) & 8) != 0;
    case 105:
      return (*(_WORD *)(v7 + 98) & 0x300) == 0x200;
    case 106:
      v85 = *(_WORD *)(v7 + 96) & 3;
      return v85 == 2;
    case 107:
      v48 = (*(_DWORD *)(v7 + 92) >> 28) & 7;
      return v48 == a6;
    case 108:
      if (!*(_QWORD *)(v7 + 16))
        return 0;
      if (!a4 && v9 == -2147483647)
      {
        v7 = *(_QWORD *)(v7 + 72);
        if (v7)
        {
          if (*(_WORD *)(v7 + 32)
            && *(_BYTE *)(*(_QWORD *)(v7 + 16) + *(unsigned __int16 *)(v7 + 32) - 1) == 115)
          {
            goto LABEL_481;
          }
        }
      }
      v105 = *(unsigned __int16 *)(v7 + 32);
      v106 = *(_QWORD *)(v7 + 16);
      if (*(_BYTE *)(v105 + v106 - 1) != 115)
        return 0;
      v107 = v105 >= 2;
      v108 = v105 - 2;
      if (v107 && *(_BYTE *)(v106 + v108) == 39)
        return 1;
      if (a4 != 1)
        return 0;
      v7 = *(_QWORD *)(v7 + 80);
      if (!v7)
        return 0;
      v63 = *(_DWORD *)(v7 + 4);
      v64 = -2147483647;
      goto LABEL_369;
    case 109:
      v48 = *(_BYTE *)(v7 + 95) & 0xF;
      return v48 == a6;
    case 110:
      return v9 < 0;
    case 112:
      v97 = -536870848;
LABEL_377:
      v76 = v97 - 32;
      return v9 == v76;
    case 113:
      return (*(_WORD *)(v7 + 98) & 0x40) != 0;
    case 114:
      v76 = -2147483632;
      return v9 == v76;
    case 115:
      return (*(_WORD *)(v7 + 98) & 4) != 0;
    case 116:
      return (*(_BYTE *)(v7 + 92) & 0x10) != 0;
    case 117:
      v76 = -2147483520;
      return v9 == v76;
    case 118:
      return v7 == *(_QWORD *)(v8 + 72);
    case 119:
      if (*(unsigned __int16 *)(v8 + 14) < *(unsigned __int16 *)(v8 + 18))
      {
        for (i = *(_QWORD *)(v8 + 80);
              *(_QWORD *)(i + 72) && (*(_DWORD *)(i + 4) & 0x80000000) != 0;
        if (i == v7)
          return 1;
      }
      return 0;
    case 120:
      return *(_WORD *)(v7 + 32) == 1 && !SLstrcmp(*(_BYTE **)(v7 + 16), "7");
    case 121:
      return (*(_WORD *)(v7 + 98) & 0x300) == 0x100;
    case 122:
      v110 = v9 & 0x80004000;
      return v110 == 0x4000;
    case 123:
      return (v9 & 0x80001000) == 0x1000;
    case 125:
      v81 = *(_WORD *)(v7 + 96) & 3;
      return v81 == 1;
    case 126:
      v110 = *(_WORD *)(v7 + 98) & 0xC000;
      return v110 == 0x4000;
    case 127:
      return (*(_WORD *)(v7 + 98) & 0xC000) == 0x8000;
    case 128:
      return (v9 & 0xBC00) != 0;
    case 129:
      v111 = *(_DWORD *)(*a3 + 4) & 0x2000;
      v112 = *(unsigned __int16 *)(v7 + 32) == 2;
      return v112 && v111 != 0;
    case 130:
      if ((v9 & 0x80000020) == 0x20)
      {
        v113 = *(_BYTE **)(v7 + 16);
        if (v113)
        {
          if (!SLstrncmp(v113, "13", 2))
            return 1;
        }
      }
      return 0;
    case 131:
    case 132:
      return (*(_BYTE *)(v7 + 92) & 0x40) != 0;
    case 133:
      v114 = *(unsigned __int8 *)(a2 + 20);
      if ((v9 & 0xE0000000) == 0xC0000000)
      {
        if ((v9 & 0x1000000) != 0)
          return 1;
      }
      else if ((v9 & 0xE0000000) == 0x80000000)
      {
        if ((v9 & 0xD3) != 0)
          return 1;
      }
      else if (v9 >> 29 == 7 && (v9 & 0x3D) != 0)
      {
        return 1;
      }
      if (v114 != 6 || (v9 != -536870910 ? (v128 = v9 == -536870848) : (v128 = 1), !v128))
      {
        v129 = (v114 & 0xFFFFFFFB) == 8 || v114 == 9;
        v130 = v129 || v114 == 5;
        if (!v130 || v9 != -536870848)
          return 0;
      }
      return 1;
    case 134:
      return *(_BYTE *)(v7 + 51) == 2;
    case 135:
      return (*(_BYTE *)(v7 + 93) & 0x20) != 0;
    case 136:
      result = 1;
      if (!a7 || (a7 & 0x40) != 0)
        return result;
      return 0;
    case 137:
      return (*(_BYTE *)(v7 + 94) & 0x80) != 0 && (*(_WORD *)(v7 + 98) & 0x80) == 0;
    case 141:
      return (*(_WORD *)(v7 + 98) & 3) == 1;
    case 142:
      return (*(_WORD *)(v7 + 98) & 3) == 0;
    case 144:
      return v9 == -2147483647;
    case 145:
      v115 = *(unsigned __int16 *)(v7 + 32);
      if (!*(_WORD *)(v7 + 32))
        return 0;
      v116 = 0;
      v117 = *(_QWORD *)(v7 + 16);
      break;
    case 147:
      v84 = 268435464;
      return (v84 & ~v9) == 0;
    case 148:
      v118 = ~v9 & 0xC2000000;
      v111 = v9 & 0x1FBC00;
      goto LABEL_447;
    case 149:
      v118 = ~v9 & 0xC1000000;
      v111 = v9 & 0x1F3800;
LABEL_447:
      v112 = v118 == 0;
      return v112 && v111 != 0;
    case 150:
      return *(_WORD *)(v7 + 32) == 1 && **(_BYTE **)(v7 + 16) == 38;
    case 151:
      return *(_WORD *)(v7 + 32) == 1 && **(unsigned __int8 **)(v7 + 16) == 150;
    case 159:
      v120 = *(_BYTE **)(v7 + 16);
      if (!v120 || v9 != 32)
        return 0;
      v121 = *v120;
      if (*v120)
      {
        v122 = 0;
        v123 = v120 + 1;
        do
        {
          if ((*(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v121) & 0x8000000) == 0)
            return 0;
          v122 = 10 * v122 + v121 - 48;
          v124 = *v123++;
          v121 = v124;
        }
        while (v124);
      }
      else
      {
        v122 = 0;
      }
      return a6 == v122;
    default:
      v18 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)v18 = 0xDC0000008CLL;
      *(_WORD *)(v18 + 8) = a5;
      return 220;
  }
  while (*(unsigned __int8 *)(v117 + v116) - 48 <= 9)
  {
    if (++v116 >= v115)
    {
      v116 = v115;
      break;
    }
  }
  if (!v116 || v116 + 1 != v115)
    return 0;
  return ((*(unsigned __int8 *)(v117 + v116) - 97) & 0xFB) == 0;
}

uint64_t PRExprMatch(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  unsigned int v17;
  unsigned __int16 *v18;
  int v20;
  _BOOL4 v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v25;
  __int16 v26;
  BOOL v27;
  uint64_t v28;
  __int128 *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  _BYTE *v45;
  unsigned __int16 *v47;
  unsigned __int8 *v48;
  __int16 v49;
  unsigned __int16 *v50;
  int v53;
  unint64_t v54;
  unsigned int v56;
  unsigned __int8 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v59 = 0uLL;
  v58 = 0uLL;
  v3 = *(unsigned __int16 **)(a1 + 56);
  v56 = *(unsigned __int16 *)(a1 + 14);
  v4 = *(uint64_t **)(a3 + 96);
  v5 = v4[1];
  v6 = v4[2];
  v7 = *v4;
  v8 = *(unsigned __int16 *)(*v4 + 4);
  *(_QWORD *)&v61 = v3;
  *((_QWORD *)&v61 + 1) = 0x100000000;
  if (v3)
  {
    v48 = (unsigned __int8 *)(v7 + __rev16(v8));
    v9 = (_BYTE *)*((_QWORD *)v3 + 3);
    if (v9)
      LOBYTE(v9) = *v9;
    v54 = 0;
    v10 = 0;
    BYTE14(v61) = (_BYTE)v9;
    v11 = 0xFFFF;
    do
    {
      v53 = 0;
      v49 = 0;
      v57 = 0;
      v60 = v61;
      v12 = 1;
      v13 = v48;
      v47 = v3;
      v50 = v3;
      if (!v48)
        goto LABEL_93;
LABEL_6:
      v14 = v12;
      do
      {
        v59 = v60;
        BYTE13(v59) = 0;
        v15 = v13[1];
        v16 = v15 & 0xC0;
        if ((v15 & 0xC0) != 0)
        {
          v17 = bswap32(*(_DWORD *)(v13 + 2));
          switch(v16)
          {
            case 64:
              v10 = *(unsigned __int16 *)(v60 + 98);
              break;
            case 192:
              if ((_QWORD)v60 == *(_QWORD *)(a1 + 64) && v17 == 1)
                goto LABEL_88;
              v10 = *(char *)(v60 + 51);
              v12 = v14;
              break;
            case 128:
              v10 = *(_DWORD *)(v60 + 4);
              if (!v10)
              {
LABEL_54:
                v18 = (unsigned __int16 *)(v13 + 6);
                goto LABEL_55;
              }
              break;
          }
          v20 = v15 & 0x30;
          if ((v13[1] & 0x30) != 0)
          {
            if (v20 != 16)
            {
              if (v20 != 32)
              {
                if ((v13[1] & 4) == 0)
                  goto LABEL_92;
                goto LABEL_54;
              }
              v21 = (v10 & v17) != 0;
              goto LABEL_51;
            }
            v27 = v10 == v17;
          }
          else
          {
            v27 = (v17 & ~v10) == 0;
          }
          v21 = v27;
LABEL_51:
          if (((((v15 & 4) == 0) ^ v21) & 1) != 0)
            goto LABEL_92;
          goto LABEL_54;
        }
        if ((v13[1] & 0x30) != 0)
        {
          if ((((v56 < (unsigned __int16)(*(_WORD *)v60 + 1)) ^ ((v15 & 0x20) >> 5)) & 1) == 0)
            goto LABEL_92;
          v18 = (unsigned __int16 *)(v13 + 2);
        }
        else
        {
          v18 = (unsigned __int16 *)(v13 + 3);
          v22 = (unint64_t)&v13[2 * v13[2] + 3];
          while (1)
          {
            v23 = __rev16(*v18);
            if ((_DWORD)v23 || (_QWORD)v59 == 0)
            {
              if (PRdoFsa((_BYTE *)(v7 + v23), (uint64_t *)&v59, v7 + 16) == 4)
                break;
            }
            else
            {
              v25 = 0;
              v26 = 0;
              switch(BYTE12(v59))
              {
                case 0:
                  goto LABEL_36;
                case 1:
                  v25 = WORD4(v59);
LABEL_36:
                  v26 = 0;
                  WORD5(v59) += *(_WORD *)(v59 + 32) - v25;
                  goto LABEL_38;
                case 2:
                  goto LABEL_38;
                case 3:
                  v26 = WORD4(v59);
LABEL_38:
                  WORD5(v59) += *(_WORD *)(v59 + 48) - v26;
                  break;
                default:
                  break;
              }
              *(_QWORD *)&v59 = *(_QWORD *)(v59 + 80);
              WORD4(v59) = 0;
              WORD6(v59) = (4 * ((_QWORD)v59 == 0));
            }
            if ((unint64_t)++v18 >= v22)
              break;
            if (BYTE13(v59))
              NEXT_TLPOS(&v59);
          }
          v12 = v14;
          if ((unint64_t)v18 < v22)
            goto LABEL_92;
          v15 = v13[1];
          if ((v15 & 2) != 0)
          {
            v31 = *(_QWORD *)(v60 + 72);
            if (v31)
            {
              v58 = v31;
              v32 = PRdoFsa((_BYTE *)(v7 + __rev16(*v18)), (uint64_t *)&v58, v7 + 16);
              v12 = v14;
              v15 = v13[1];
              v33 = (v32 == 0) ^ ((v15 & 4) >> 2);
              v34 = *((_BYTE *)v18 + 2);
              v54 = v31;
            }
            else
            {
              if ((v13[1] & 4) == 0)
                goto LABEL_92;
              v34 = *((_BYTE *)v18 + 2);
              v33 = (v34 & 1) == 0;
            }
            if ((v34 & 1) != 0)
            {
              if (!v33)
                goto LABEL_92;
              v35 = *((unsigned __int8 *)v18 + 3);
              v36 = v5 + 32 * v35;
              *(_QWORD *)v36 = v54;
              *(_QWORD *)(v36 + 8) = 0;
              *(_OWORD *)(v36 + 16) = v58;
              if (BYTE13(v58) && BYTE14(v58))
                ++*(_WORD *)(v5 + 32 * v35 + 26);
              v18 += 2;
              v15 = v13[1];
            }
            else
            {
              if (!v33)
                goto LABEL_92;
              v18 = (unsigned __int16 *)((char *)v18 + 3);
            }
          }
        }
LABEL_55:
        if ((v15 & 1) != 0)
        {
          v28 = *(unsigned __int8 *)v18;
          v29 = (__int128 *)(v5 + 32 * v28);
          *v29 = v60;
          v29[1] = v59;
          if (BYTE13(v59) && BYTE14(v59))
            ++*(_WORD *)(v5 + 32 * v28 + 26);
          v18 = (unsigned __int16 *)((char *)v18 + 1);
          v15 = v13[1];
        }
        if ((v15 & 8) != 0)
        {
          if (PRdoAction(a2, a3, (_BYTE *)(v7 + __rev16(*v18)), &v61, v5, v7, v7 + 16, v56 == 0, &v57) == 8)
            return 220;
          if (v57)
          {
            v53 = v57;
            v37 = *(unsigned __int16 *)v59;
            v38 = *v50;
            if (v37 == v38)
            {
              v39 = BYTE12(v59);
              v12 = v14;
              if (BYTE12(v59) == (_DWORD)v14)
              {
                if (v14 <= 4 && ((1 << v14) & 0x15) != 0 || (v39 = v14, (__int16)(WORD4(v59) - v49) < 1))
                {
LABEL_92:
                  v40 = *v13;
                  v13 += v40;
                  if (!v40)
                    break;
                  goto LABEL_6;
                }
              }
              else if (BYTE12(v59) <= v14)
              {
                goto LABEL_92;
              }
LABEL_91:
              v49 = WORD4(v59);
              v50 = (unsigned __int16 *)v59;
              v12 = v39;
              goto LABEL_92;
            }
            if (v37 > v38)
            {
              v39 = BYTE12(v59);
              goto LABEL_91;
            }
          }
          else
          {
            v53 = 0;
          }
LABEL_88:
          v12 = v14;
          goto LABEL_92;
        }
        v30 = v6 + 24 * (__int16)++v11;
        *(_OWORD *)v30 = v60;
        *(_QWORD *)(v30 + 16) = v13;
        v60 = v59;
        if (BYTE13(v59))
        {
          NEXT_TLPOS(&v60);
          v12 = v14;
        }
        v13 = (unsigned __int8 *)(v7 + __rev16(*v18));
      }
      while (v7);
LABEL_93:
      while ((v11 & 0x8000) == 0)
      {
        v41 = v6 + 24 * (unsigned __int16)v11;
        v60 = *(_OWORD *)v41;
        v42 = *(unsigned __int8 **)(v41 + 16);
        v43 = *v42;
        v44 = &v42[v43];
        --v11;
        if ((_DWORD)v43)
          v13 = v44;
        else
          v13 = 0;
        if (v13)
          goto LABEL_6;
      }
      if (v53)
        v3 = (unsigned __int16 *)*((_QWORD *)v50 + 10);
      else
        v3 = (unsigned __int16 *)*((_QWORD *)v47 + 10);
      *(_QWORD *)&v61 = v3;
      DWORD2(v61) = 0;
      BYTE12(v61) = 1;
      if (v3)
      {
        v45 = (_BYTE *)*((_QWORD *)v3 + 3);
        if (v45)
          LOBYTE(v45) = *v45;
      }
      else
      {
        LOBYTE(v45) = 0;
      }
      BYTE14(v61) = (_BYTE)v45;
    }
    while (v3);
  }
  return 0;
}

uint64_t PRwakeExprData(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6)
{
  _QWORD *v6;

  v6 = *(_QWORD **)(a2 + 96);
  *a3 = v6;
  *a4 = *v6;
  *a5 = v6[2];
  *a6 = v6[1];
  return 1;
}

uint64_t PRdoFsa(_BYTE *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unsigned __int8 *v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  unint64_t v19;
  uint64_t result;

  *((_BYTE *)a2 + 13) = 0;
  v4 = *((unsigned __int8 *)a2 + 14);
  v5 = *a1 & 0x10;
  if ((*a1 & 0x10) != 0)
    v6 = 2;
  else
    v6 = 1;
  if ((*a1 & 0x10) != 0)
    v7 = 3;
  else
    v7 = 2;
  v8 = (uint64_t)&a1[((a1[1] - 1) << ((*a1 & 0x10) >> 4)) + 1];
  v10 = *(char *)(v8 + 1);
  v9 = (_BYTE *)(v8 + 1);
  if (v10 < 0)
  {
    v12 = *a2;
    v11 = a2[1];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v13 = a1 + 2;
  while (*((_BYTE *)a2 + 12) == 2)
  {
    if ((*v9 & 4) == 0)
      goto LABEL_38;
    v14 = &v9[-v6];
LABEL_33:
    v19 = *v14;
    if (v5)
      v19 = v14[1] | (v19 << 8);
    v9 = &v13[v19];
    if ((char)v13[v19] < 0)
    {
      *((_BYTE *)a2 + 13) = 1;
      v12 = *a2;
      v11 = a2[1];
    }
    NEXT_TLPOS(a2);
    v4 = *((unsigned __int8 *)a2 + 14);
  }
  if (!*((_BYTE *)a2 + 12))
  {
    if ((*v9 & 8) == 0)
      goto LABEL_38;
    v14 = &v9[-(v6 << ((*v9 & 4) != 0))];
    goto LABEL_33;
  }
  v14 = v9 + 1;
  if ((*v9 & 0x40) != 0)
    goto LABEL_33;
  if ((*v9 & 0x20) != 0)
  {
    v15 = v9[1];
    v14 = v9 + 2;
    if ((*v9 & 0x10) != 0)
      goto LABEL_20;
  }
  else
  {
    v15 = 0;
    if ((*v9 & 0x10) != 0)
    {
LABEL_20:
      v17 = *v14++;
      v16 = v17;
      if (!v15)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  v16 = 0;
  if (v15)
  {
LABEL_24:
    v18 = &v14[v7 * v15];
    ++v14;
    while (((1 << (v4 & 7)) & *(unsigned __int8 *)(a3 + ((unint64_t)v4 >> 3) + 32 * *(v14 - 1))) == 0)
    {
      --v15;
      v14 += v7;
      if (!(_WORD)v15)
      {
        v14 = v18;
        goto LABEL_28;
      }
    }
    goto LABEL_33;
  }
LABEL_28:
  if (v16)
  {
    ++v14;
    while (v4 != *(v14 - 1))
    {
      --v16;
      v14 += v7;
      if (!(_WORD)v16)
        goto LABEL_38;
    }
    goto LABEL_33;
  }
LABEL_38:
  if (!v12)
    return 4;
  result = 0;
  *a2 = v12;
  a2[1] = v11;
  return result;
}

_BYTE *NEXT_TLPOS(_BYTE *result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v1 = result[12];
  if (v1 > 1)
  {
    if (v1 == 4)
      return result;
    if (v1 == 3)
    {
      ++*((_WORD *)result + 5);
      LOWORD(v2) = *((_WORD *)result + 4) + 1;
      *((_WORD *)result + 4) = v2;
      v2 = (__int16)v2;
    }
    else
    {
      v2 = 0;
      result[12] = 3;
      *((_WORD *)result + 4) = 0;
    }
    v7 = *(_QWORD *)result;
    v8 = *(_QWORD *)(*(_QWORD *)result + 40);
    if (v8)
    {
      v9 = *(unsigned __int8 *)(v8 + v2);
      result[14] = v9;
      if (v9)
        return result;
    }
    else
    {
      result[14] = 0;
    }
    v10 = *(_QWORD *)(v7 + 80);
    *(_QWORD *)result = v10;
    if (v10)
    {
      result[12] = 0;
      return result;
    }
    v6 = 4;
    goto LABEL_20;
  }
  if (v1 == 1)
  {
    ++*((_WORD *)result + 5);
    LOWORD(v3) = *((_WORD *)result + 4) + 1;
    *((_WORD *)result + 4) = v3;
    v3 = (__int16)v3;
  }
  else
  {
    v3 = 0;
    result[12] = 1;
    *((_WORD *)result + 4) = 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)result + 24);
  if (!v4)
  {
    result[12] = 2;
    result[14] = 0;
    return result;
  }
  v5 = *(unsigned __int8 *)(v4 + v3);
  result[14] = v5;
  if (!v5)
  {
    v6 = 2;
LABEL_20:
    result[12] = v6;
  }
  return result;
}

uint64_t PRdoAction(uint64_t a1, uint64_t a2, _BYTE *a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, _BYTE *a9)
{
  int v9;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  __int16 v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _WORD *v26;
  __int16 v27;
  __int16 v28;
  uint64_t v29;
  unsigned __int16 v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t i;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  BOOL v42;
  __int16 v43;
  int v44;
  _WORD *v45;
  int v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v57;
  __int128 v58;
  unsigned __int16 v59;
  void *v60;

  *a9 = 1;
  v60 = 0;
  v9 = *a3;
  if (!*a3)
    return 0;
  v57 = 0;
  v13 = 0;
  v59 = 0;
  v14 = a3 + 1;
  v15 = a3 + 1;
  while (2)
  {
    v17 = *v15;
    v15 += 3;
    v16 = v17;
    switch(v17)
    {
      case 23:
        v58 = *a4;
        if (PRdoFsa((_BYTE *)(a6 + __rev16(*(unsigned __int16 *)(v14 + 1))), (uint64_t *)&v58, a7))
          goto LABEL_59;
        *a9 = 0;
        v50 = 4;
        goto LABEL_72;
      case 24:
        LOBYTE(v57) = v14[2];
        BYTE4(v57) = v14[1];
        goto LABEL_59;
      case 25:
      case 26:
      case 27:
        v20 = v60;
        if (v60)
          goto LABEL_11;
        v21 = PRliveRule(a1, a2, 0, BYTE4(v57), v57, 1, a8);
        if (v21)
        {
          if (v21 == 4)
            return 4;
          else
            return 8;
        }
        if (PRmkErr(a1, a2, &v60, 0, 0, BYTE4(v57), v57))
          goto LABEL_71;
        v20 = v60;
        *((_WORD *)v60 + 1) = 0;
        v20[3] = 0;
        v20[5] = 0;
LABEL_11:
        v22 = a5 + 32 * v14[2];
        v23 = *(_QWORD *)v22;
        v24 = v14[3];
        v25 = a5 + 32 * v24;
        v26 = *(_WORD **)(v25 + 16);
        v27 = *(_WORD *)(*(_QWORD *)v22 + 8);
        switch(*(_BYTE *)(v22 + 12))
        {
          case 1:
            v28 = *(_WORD *)(v22 + 8);
            goto LABEL_39;
          case 2:
            v28 = *(_WORD *)(v23 + 32);
LABEL_39:
            v27 += v28;
            break;
          case 3:
            v27 += *(_WORD *)(v23 + 32) + *(_WORD *)(v22 + 8);
            break;
          case 4:
            v51 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)v51 = 0xE6FFFFFF9ALL;
            *(_WORD *)(v51 + 8) = 0;
            goto LABEL_71;
          default:
            break;
        }
        switch(*(_BYTE *)(v25 + 28))
        {
          case 1:
            v39 = a5 + 32 * v24;
            if (*(_BYTE *)(v39 + 29))
              v40 = *(_WORD *)(v39 + 24) + 1;
            else
              v40 = *(_WORD *)(v39 + 24);
            break;
          case 2:
            v40 = v26[16];
            break;
          case 3:
            v41 = a5 + 32 * v24;
            v42 = *(_BYTE *)(v41 + 29) == 0;
            v40 = *(_WORD *)(v41 + 24) + v26[16];
            if (!v42)
              ++v40;
            break;
          case 4:
            v40 = v26[24] + v26[16];
            break;
          default:
            v40 = 0;
            break;
        }
        v43 = v26[4];
        v44 = *v14;
        switch(v44)
        {
          case 27:
            v20[4] = v27;
            v45 = v20 + 5;
            break;
          case 26:
            v20[2] = v27;
            v45 = v20 + 3;
            break;
          case 25:
            *v20 = v27;
            v45 = v20 + 1;
            break;
          default:
            goto LABEL_58;
        }
        *v45 = v40 - v27 + v43;
        v13 = v23;
LABEL_58:
        v15 = v14 + 4;
        goto LABEL_59;
      case 28:
      case 29:
      case 30:
        v19 = *((_QWORD *)v60 + 3);
        if (v19)
          goto LABEL_16;
        v29 = PRmkList(a1, (uint64_t *)v60 + 3, 3);
        if ((_DWORD)v29)
          goto LABEL_64;
        v19 = *((_QWORD *)v60 + 3);
LABEL_16:
        v30 = v16 - 27;
        goto LABEL_28;
      case 31:
      case 32:
      case 33:
        v31 = (_QWORD *)*((_QWORD *)v60 + 9);
        if (!v31)
        {
          v31 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
          *((_QWORD *)v60 + 9) = v31;
          if (!v31)
            goto LABEL_65;
        }
        v33 = v31[1];
        v32 = v31 + 1;
        v19 = v33;
        if (v33)
          goto LABEL_22;
        v29 = PRmkList(a1, v32, 3);
        if ((_DWORD)v29)
          goto LABEL_64;
        v19 = *(_QWORD *)(*((_QWORD *)v60 + 9) + 8);
LABEL_22:
        v30 = v16 - 30;
        goto LABEL_28;
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
        v18 = (uint64_t *)*((_QWORD *)v60 + 9);
        if (v18)
        {
          v19 = *v18;
          if (*v18)
            goto LABEL_27;
        }
        else
        {
          v34 = (uint64_t *)malloc_type_malloc(0x10uLL, 0x20040A4A59CD2uLL);
          *((_QWORD *)v60 + 9) = v34;
          if (!v34)
          {
LABEL_65:
            v48 = *(_QWORD *)(a1 + 32);
            *(_QWORD *)v48 = 0xDC00000078;
            *(_WORD *)(v48 + 8) = 0;
            v50 = 220;
LABEL_72:
            if (v60)
              PRfreeErr(v60);
            return v50;
          }
          v18 = v34;
          *v34 = 0;
          v34[1] = 0;
        }
        v29 = PRmkList(a1, v18, 6);
        if ((_DWORD)v29)
        {
LABEL_64:
          v50 = v29;
          goto LABEL_72;
        }
        v19 = **((_QWORD **)v60 + 9);
LABEL_27:
        v30 = v16 - 33;
LABEL_28:
        if (PRbldStr((unsigned __int8 *)a1, v14 + 1, v19, a5, v30, &v59) == 8)
        {
LABEL_71:
          v50 = 8;
          goto LABEL_72;
        }
        v15 = &v14[v59 + 1];
LABEL_59:
        v46 = (__int16)v9--;
        v14 = v15;
        if (v46 > 1)
          continue;
        v50 = 0;
        if (v13)
        {
          v47 = v60;
          if (v60)
          {
            v50 = 0;
            *((_QWORD *)v60 + 5) = *(_QWORD *)(v13 + 160);
            *(_QWORD *)(v13 + 160) = v47;
          }
        }
        return v50;
      case 42:
        v35 = (uint64_t *)(a5 + 32 * v14[1]);
        v36 = v35[2];
        v37 = bswap32(*(_DWORD *)(v14 + 2));
        for (i = *v35; i != v36; i = *(_QWORD *)(i + 80))
          *(_DWORD *)(i + 92) |= v37;
        *(_DWORD *)(v36 + 92) |= v37;
        v15 = v14 + 6;
        goto LABEL_59;
      case 43:
        v15 = v14 + 1;
        goto LABEL_59;
      default:
        v49 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)v49 = 0x800000096;
        *(_WORD *)(v49 + 8) = 260;
        goto LABEL_71;
    }
  }
}

uint64_t CMP_TLPOS(unsigned __int16 **a1, unsigned __int16 **a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  v2 = **a1;
  v3 = **a2;
  v4 = v2 > v3;
  if (v2 == v3 && (v5 = *((unsigned __int8 *)a1 + 12), v6 = *((unsigned __int8 *)a2 + 12), v4 = v5 > v6, v5 == v6))
  {
    v4 = v5 > 4;
    v7 = (1 << v5) & 0x15;
    if (v4 || v7 == 0)
      return (__int16)(*((_WORD *)a1 + 4) - *((_WORD *)a2 + 4));
    else
      return 0;
  }
  else if (v4)
  {
    return 1;
  }
  else
  {
    return -1;
  }
}

uint64_t PRdoSub(_BYTE *__src, unsigned __int16 *a2, unsigned __int8 *a3, unsigned int a4, _BYTE *a5, unsigned int a6, _QWORD *a7, _WORD *a8, _WORD *a9, char a10)
{
  _WORD *v11;
  unsigned int v12;
  uint64_t result;
  _BYTE *v18;
  _BOOL4 v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  _BYTE *v26;
  size_t v27;
  int v28;
  unsigned __int16 v29;
  BOOL v30;
  unsigned __int8 *v31;
  unsigned __int16 v32;
  unsigned __int8 *v33;
  int v34;
  size_t v35;
  __int16 v36;
  uint64_t v37;
  size_t __n;
  _BOOL4 v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  __int16 v49;
  _WORD *v50;
  _QWORD *v51;

  if (!a4)
    return 4;
  v11 = a2;
  v12 = *a2;
  if (v12 < a4)
    return 4;
  v18 = __src;
  if (a6 > a4 || a10)
  {
    v20 = a5;
    v21 = v12 % a4 + v12 / a4 * a6;
    __src = malloc_type_malloc((unsigned __int16)(v12 % a4 + v12 / a4 * a6), 0xFC541E67uLL);
    *a7 = __src;
    if (!__src)
      return 8;
    v49 = v21;
    v50 = a8;
    v51 = a7;
    v19 = 0;
    a5 = v20;
  }
  else
  {
    v49 = 0;
    v50 = a8;
    v19 = a6 >= a4;
    v51 = a7;
    *a7 = 0;
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v26 = v18;
  v27 = a6;
  do
  {
    v28 = 0;
    while (1)
    {
      v29 = v24 + 1;
      if (v18[v22] == *a3)
      {
        v30 = a4 > 1;
        if (a4 >= 2)
        {
          v30 = a4 > 1;
          if (v12 > v29)
          {
            v31 = &v18[v22 + 1];
            v32 = 1;
            v33 = a3 + 1;
            while (1)
            {
              v34 = *v33++;
              if (*v31 != v34)
                goto LABEL_20;
              v30 = ++v32 < a4;
              if (v32 < a4)
              {
                ++v31;
                if (v12 > (unsigned __int16)(v32 + v24))
                  continue;
              }
              break;
            }
          }
        }
        if (!v30)
          break;
      }
LABEL_20:
      ++v28;
      v22 = (unsigned __int16)++v24;
      if (v12 <= v29)
      {
        if ((_WORD)v28)
        {
          if (!v19)
          {
            v36 = v23;
            v37 = (uint64_t)a9;
            memcpy(&__src[(unsigned __int16)v23], v26, (unsigned __int16)v28);
            a9 = (_WORD *)v37;
            LOWORD(v23) = v36;
          }
          LOWORD(v23) = v28 + v23;
        }
        goto LABEL_37;
      }
    }
    if ((_WORD)v28)
    {
      if (!v19)
      {
        v45 = a5;
        v47 = __src;
        __n = v27;
        v41 = (uint64_t)a9;
        v43 = v23;
        v39 = v19;
        memcpy(&__src[(unsigned __int16)v23], v26, (unsigned __int16)v28);
        v27 = __n;
        v19 = v39;
        a5 = v45;
        __src = v47;
        a9 = (_WORD *)v41;
        v23 = v43;
      }
      v23 += v28;
    }
    if (a6)
    {
      if (a6 == 1)
      {
        __src[(unsigned __int16)v23] = *a5;
      }
      else
      {
        v46 = a5;
        v48 = __src;
        v35 = v27;
        v42 = (uint64_t)a9;
        v44 = v23;
        v40 = v19;
        memcpy(&__src[(unsigned __int16)v23], a5, v27);
        v27 = v35;
        v19 = v40;
        a5 = v46;
        __src = v48;
        a9 = (_WORD *)v42;
        v23 = v44;
      }
      v23 += a6;
    }
    v24 += a4;
    v22 = (unsigned __int16)v24;
    v26 = &v18[(unsigned __int16)v24];
  }
  while (v12 > (unsigned __int16)v24);
LABEL_37:
  if (*v51)
  {
    *v50 = v49;
    v11 = a9;
  }
  result = 0;
  *v11 = v23;
  return result;
}

uint64_t PRbldStr(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5, _WORD *a6)
{
  unsigned __int16 v10;
  unsigned int v11;
  uint64_t result;
  __int16 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  const void *v21;
  unsigned __int16 v22;
  const void *v23;
  unsigned __int16 v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;
  int v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  unsigned __int16 v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  _WORD *v42;
  __int16 v43;
  int v45;
  void *v46;
  unsigned __int16 v47;
  void *__src[2];
  __int128 v49;

  if (a5)
  {
    v10 = a5 - 1;
    v11 = *(unsigned __int16 *)(a3 + 18);
    if (v11 < (unsigned __int16)(a5 - 1))
    {
      do
      {
        *(_WORD *)(*(_QWORD *)(a3 + 8) + 2 * (unsigned __int16)v11) = *(_WORD *)(a3 + 24);
        result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), "", 1u);
        if ((_DWORD)result == 8)
          goto LABEL_46;
        LOWORD(v11) = *(_WORD *)(a3 + 18) + 1;
        *(_WORD *)(a3 + 18) = v11;
      }
      while ((unsigned __int16)v11 < v10);
    }
    v13 = *(_WORD *)(a3 + 24);
    v14 = *(_QWORD *)(a3 + 8);
    *(_WORD *)(a3 + 18) = v11 + 1;
    *(_WORD *)(v14 + 2 * (unsigned __int16)v11) = v13;
  }
  v42 = a6;
  v15 = a2 + 1;
  v16 = *a2;
  if (!*a2)
  {
LABEL_45:
    result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), "", 1u);
    if ((_DWORD)result == 8)
      goto LABEL_46;
    result = 0;
    *v42 = (_WORD)v15 - (_WORD)a2;
    return result;
  }
  *(_OWORD *)__src = 0u;
  v49 = 0u;
  v43 = (__int16)a2;
  while (1)
  {
    v17 = *v15;
    if (v17 <= 0x27)
    {
      if (*v15)
      {
        if (v17 != 5)
          goto LABEL_50;
        result = PRcatContainer((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), a4 + 32 * v15[1]);
        if ((_DWORD)result == 8)
          goto LABEL_46;
        v15 += 2;
      }
      else
      {
        v26 = v15[1];
        v25 = v15 + 1;
        result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v25 + 1, v26);
        if ((_DWORD)result == 8)
          goto LABEL_46;
        v15 = &v25[*v25 + 1];
      }
      goto LABEL_44;
    }
    if (v17 != 40)
      break;
    v47 = 0;
    v46 = 0;
    v45 = 0;
    v27 = (uint64_t)&v15[v15[1] + 1];
    v28 = v27 + 1 + *(unsigned __int8 *)(v27 + 1) + 1;
    __src[0] = 0;
    *(_DWORD *)((char *)&v49 + 6) = 0;
    if (PRbldStr(a1, v28, __src, a4, 0, &v47) == 8 && __src[0] != 0)
    {
      free(__src[0]);
      return 8;
    }
    --WORD4(v49);
    if (PRdoSub((_BYTE *)__src[0], (unsigned __int16 *)&v49 + 4, v15 + 2, v15[1], (_BYTE *)(v27 + 2), *(unsigned __int8 *)(v27 + 1), &v46, (_WORD *)&v45 + 1, &v45, 0) == 8)
    {
      v41 = __src[0];
      goto LABEL_53;
    }
    v30 = v46;
    if (v46)
    {
      v31 = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v46, (unsigned __int16)v45);
      free(v30);
      v32 = __src[0];
      if (v31 == 8)
        goto LABEL_52;
    }
    else
    {
      v32 = __src[0];
      if (PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), __src[0], WORD4(v49)) == 8)
      {
LABEL_52:
        v41 = v32;
LABEL_53:
        free(v41);
        v39 = *((_QWORD *)a1 + 4);
        v40 = 0x800000078;
LABEL_54:
        *(_QWORD *)v39 = v40;
        *(_WORD *)(v39 + 8) = 0;
        return 8;
      }
    }
    free(v32);
    v15 = (unsigned __int8 *)(v28 + v47);
LABEL_44:
    v37 = (__int16)v16--;
    if (v37 <= 1)
      goto LABEL_45;
  }
  if (v17 != 41)
  {
LABEL_50:
    v39 = *((_QWORD *)a1 + 4);
    v40 = 0x800000096;
    goto LABEL_54;
  }
  a2 = a1;
  v18 = v15[2];
  v19 = *(_QWORD *)(a4 + 32 * v18 + 16);
  for (i = *(_QWORD *)(a4 + 32 * v15[1]); i != v19; i = *(_QWORD *)(i + 80))
  {
    v21 = *(const void **)(i + 24);
    if (!v21
      || (v22 = strlen(*(const char **)(i + 24)),
          result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v21, v22),
          (_DWORD)result != 8))
    {
      v23 = *(const void **)(i + 40);
      if (!v23)
        continue;
      v24 = strlen(*(const char **)(i + 40));
      result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v23, v24);
      if ((_DWORD)result != 8)
        continue;
    }
    v38 = *((_QWORD *)a2 + 4);
    goto LABEL_48;
  }
  v33 = *(const char **)(v19 + 24);
  a1 = a2;
  LOWORD(a2) = v43;
  if (!v33
    || ((v34 = a4 + 32 * v18, *(_BYTE *)(v34 + 28) != 1)
      ? (v36 = (unsigned __int16)strlen(v33))
      : (!*(_BYTE *)(v34 + 29) ? (v35 = *(_WORD *)(v34 + 24)) : (v35 = *(_WORD *)(v34 + 24) + 1), v36 = v35),
        result = PRcatBytes((const void **)a3, (unsigned __int16 *)(a3 + 22), (_WORD *)(a3 + 24), v33, v36),
        (_DWORD)result != 8))
  {
    v15 += 3;
    goto LABEL_44;
  }
LABEL_46:
  v38 = *((_QWORD *)a1 + 4);
LABEL_48:
  *(_QWORD *)v38 = 0x800000078;
  *(_WORD *)(v38 + 8) = 0;
  return result;
}

uint64_t PRcatBytes(const void **a1, unsigned __int16 *a2, _WORD *a3, const void *a4, unsigned int a5)
{
  uint64_t result;

  if (PRgrow(a1, a2, (unsigned __int16)*a3, a5))
    return 8;
  memcpy((char *)*a1 + (unsigned __int16)*a3, a4, a5);
  result = 0;
  *a3 += a5;
  return result;
}

uint64_t PRcatPascalString(const void **a1, unsigned __int16 *a2, _WORD *a3, unsigned __int8 *a4)
{
  return PRcatBytes(a1, a2, a3, a4 + 1, *a4);
}

uint64_t PRcatContainer(const void **a1, unsigned __int16 *a2, _WORD *a3, uint64_t a4)
{
  int v4;
  char v8;
  unsigned __int8 v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;

  v4 = (__int16)(*(_WORD *)(a4 + 26) - *(_WORD *)(a4 + 10));
  if (v4 >= 1)
  {
    v8 = 0;
    v9 = *(_BYTE *)(a4 + 12);
    v10 = *(unsigned __int16 *)(a4 + 8);
    v11 = *(_QWORD **)a4;
    while (2)
    {
      v12 = v9;
      v13 = 0;
      v9 = 3;
      switch(v12)
      {
        case 0:
          LODWORD(v10) = 0;
          goto LABEL_5;
        case 1:
LABEL_5:
          v14 = v11[3];
          if (v14 && (v8 = *(_BYTE *)(v14 + (__int16)v10)) != 0)
          {
            v13 = (v10 + 1);
            v9 = 1;
          }
          else
          {
            LODWORD(v10) = 0;
LABEL_9:
            v15 = v11[5];
            if (!v15 || (v8 = *(_BYTE *)(v15 + (__int16)v10)) == 0)
            {
              v13 = 0;
              v11 = (_QWORD *)v11[10];
              v9 = 1;
              goto LABEL_18;
            }
            v13 = (v10 + 1);
            v9 = 3;
          }
LABEL_14:
          v16 = (unsigned __int16)*a3;
          if (*a2 < (unsigned __int16)(v16 + 1))
          {
            result = PRgrow(a1, a2, v16, 1);
            if ((_DWORD)result == 8)
              return result;
            v16 = (unsigned __int16)*a3;
          }
          *((_BYTE *)*a1 + v16) = v8;
          ++*a3;
          LOWORD(v4) = v4 - 1;
LABEL_18:
          v10 = v13;
          if ((__int16)v4 < 1)
            return 0;
          continue;
        case 2:
          goto LABEL_18;
        case 3:
          goto LABEL_9;
        default:
          v13 = v10;
          goto LABEL_14;
      }
    }
  }
  return 0;
}

uint64_t PRcatCString(const void **a1, unsigned __int16 *a2, _WORD *a3, char *__s)
{
  unsigned int v8;

  v8 = (unsigned __int16)strlen(__s);
  return PRcatBytes(a1, a2, a3, __s, v8);
}

uint64_t PRgrow(const void **a1, unsigned __int16 *a2, unsigned int a3, __int16 a4)
{
  unsigned __int16 v5;
  const void *v6;
  size_t v7;
  void *v9;
  const void *v10;
  void *v11;

  if (*a2 >= (unsigned __int16)(a4 + a3))
    return 0;
  v5 = ((a4 + a3) & 0xFFC0) + 64;
  *a2 = v5;
  v6 = *a1;
  v7 = v5 & 0xFFC0;
  if (v6)
  {
    v9 = malloc_type_malloc(v7, 0xA1C24CCEuLL);
    if (v9)
    {
      v10 = v9;
      memcpy(v9, *a1, a3);
      free((void *)*a1);
      *a1 = v10;
      return 0;
    }
  }
  else
  {
    v11 = malloc_type_malloc(v7, 0x3627E278uLL);
    *a1 = v11;
    if (v11)
      return 0;
  }
  return 8;
}

uint64_t PRfastSpell(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE *v9;
  unsigned int v10;
  int v11;
  unsigned __int8 v12;
  int v13;
  unsigned __int16 v14;
  char *v15;
  char *v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  unsigned int v25;
  char v26;
  int v27;
  int v28;
  int v29;
  __int16 v30;
  int v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  char v35;
  __int16 v36;
  unsigned __int8 *v37;
  unsigned int v38;
  unsigned __int16 v39;
  int v40;
  int v41;
  unsigned __int16 v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  BOOL v47;
  int v48;
  int v49;
  unsigned __int16 v50;
  __int16 v51;
  unsigned __int16 v52;
  void *v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  __int16 v66;
  uint64_t i;
  unsigned __int16 v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  char *v73;
  char *__s;
  int v75;
  int v76;
  unsigned __int16 v79;
  __int16 v80;
  unsigned __int16 v81;
  char *v82;
  char v83;
  unsigned __int16 v84;
  uint64_t v85;
  __int16 v86;
  char *__s1;
  int v88[2];
  uint64_t v89;
  __int128 v90;
  void *v91[2];
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  _BYTE v102[65];
  char v103[65];
  uint64_t v104;

  v3 = a3;
  v5 = a1;
  v104 = *MEMORY[0x1E0C80C00];
  v101 = 0;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  *(_OWORD *)v91 = 0u;
  v92 = 0u;
  v90 = 0u;
  *(_WORD *)(a3 + 16) = 0;
  v102[0] = 0;
  v103[0] = 0;
  v75 = *(unsigned __int8 *)(a1 + 28);
  v6 = *(_QWORD *)(a2 + 128);
  *(_BYTE *)(*(_QWORD *)(v6 + 3184) + 304) = 11;
  *(_DWORD *)(v6 + 1408) = 1;
  *(_DWORD *)v6 = 3;
  if (*(_BYTE *)(a3 + 61) && (*(_WORD *)a2 & 2) == 0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v7 = 0xE6000001F9;
    *(_WORD *)(v7 + 8) = 1020;
    return 230;
  }
  *(_BYTE *)(v6 + 1339) = 0;
  v9 = (_BYTE *)(*(_QWORD *)a3 + *(unsigned __int16 *)(a3 + 14) + *(unsigned __int16 *)(a3 + 16));
  v10 = *v9;
  if (!*v9)
    goto LABEL_159;
  v11 = 0;
  v12 = 0;
  LOWORD(v13) = 0;
  v14 = 0;
  *(_QWORD *)v88 = v6;
  v89 = 0;
  v15 = 0;
  v73 = (char *)(v6 + 1417);
  __s = (char *)(v6 + 1482);
  __s1 = v102;
  v16 = v103;
  while (2)
  {
    v79 = v14;
    v82 = v15;
    v17 = 0;
    v18 = 0;
    v19 = *(unsigned __int8 *)(a2 + 34);
    v20 = *(unsigned __int8 *)(a2 + 32);
    v21 = *(unsigned __int8 *)(a2 + 33);
    v22 = *(_QWORD *)(a2 + 8);
    do
    {
      if ((*(_DWORD *)(v22 + 4 * v10) & 0x2000000) == 0 && v10 != v19 && v10 != v20 && v10 != v21)
        break;
      v18 = (v18 + 1);
      ++v17;
      v10 = v9[(__int16)v18];
      if (*(_BYTE *)(a2 + 32))
      {
        v23 = v10 != v20 || v20 == v21;
        if (!v23)
        {
          do
          {
            v18 = (v18 + 1);
            ++v17;
            v10 = v9[(__int16)v18];
            if (v9[(__int16)v18])
              v24 = v10 == v21;
            else
              v24 = 1;
          }
          while (!v24);
        }
      }
    }
    while (v10);
    v25 = v9[(__int16)v18];
    v84 = v13;
    if (!v9[(__int16)v18])
    {
      v83 = 0;
      v27 = 0;
      v30 = 0;
      LOWORD(v13) = 0;
      goto LABEL_86;
    }
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    do
    {
      v31 = *(_DWORD *)(v22 + 4 * v25);
      if ((v31 & 0x2000000) != 0)
        break;
      if (v25 == v19)
      {
        v18 = (v18 + 1);
      }
      else
      {
        if (v25 != v20)
        {
          v18 = (v18 + 1);
          if (v30 > 63)
            break;
          if (v29 || (v31 & 0x60000040) == 0)
          {
            if (v29 && v26 && (v31 & 0x60000040) != 0)
            {
              if (v26 == 2)
              {
                if ((v31 & 0x20000000) == 0)
                {
                  v26 = 2;
                  goto LABEL_50;
                }
                v35 = 0;
                v28 = 1;
              }
              else
              {
                if ((v31 & 0x20000000) != 0 || v28)
                {
                  v28 = 1;
                  goto LABEL_50;
                }
                v35 = 2;
              }
LABEL_38:
              v26 = v35;
            }
          }
          else
          {
            v28 = 0;
            v35 = 1;
            v29 = 1;
            if ((v31 & 0x40000000) != 0)
              goto LABEL_38;
          }
LABEL_50:
          v36 = v30++;
          v16[v36] = v25;
          if (v25 == *(unsigned __int8 *)(a2 + 26))
          {
            v37 = *(unsigned __int8 **)(v3 + 32);
            v38 = v37[1];
            if (v38 <= 1)
              v38 = 1;
            do
            {
              if (v9[(__int16)v18] == 10)
                v18 = (v18 + 1);
              else
                v18 = v18;
              v23 = (unsigned __int16)v38-- == 0;
            }
            while (!v23);
            if (v37[3])
            {
              v39 = v37[3];
              while (v9[(__int16)v18 + (unint64_t)v39] == 9)
              {
                v40 = (__int16)v39--;
                if (v40 <= 1)
                  goto LABEL_62;
              }
            }
            else
            {
LABEL_62:
              v18 = v18 + v37[3];
            }
            v41 = v37[2];
            if (v41)
            {
              v42 = v41;
              while (v9[(__int16)v18 + (unint64_t)v42] == 32)
              {
                v43 = (__int16)v42--;
                if (v43 < 2)
                {
                  v18 = (v18 + v41);
                  break;
                }
              }
            }
            v27 = 1;
          }
          goto LABEL_69;
        }
        do
        {
          v32 = v18;
          v33 = v9[(__int16)v18];
          v18 = (v18 + 1);
          if (v33)
            v34 = v33 == v21;
          else
            v34 = 1;
        }
        while (!v34);
        v18 = v32;
      }
LABEL_69:
      v25 = v9[(__int16)v18];
    }
    while (v9[(__int16)v18]);
    v83 = v26;
    v44 = v9[(__int16)v18];
    if (v9[(__int16)v18])
    {
      v13 = 0;
      do
      {
        if ((*(_DWORD *)(v22 + 4 * v44) & 0x2000000) == 0 && v44 != v19 && v44 != v20 && v44 != v21)
          break;
        LODWORD(v18) = v18 + 1;
        ++v13;
        v45 = v9[(__int16)v18];
        if (v44 == v20)
        {
          while (v45 && v45 != v21)
          {
            LODWORD(v18) = v18 + 1;
            ++v13;
            v45 = v9[(__int16)v18];
          }
        }
        v44 = v45;
      }
      while (v45);
    }
    else
    {
      LOWORD(v13) = 0;
    }
LABEL_86:
    v16[v30] = 0;
    if (*(_BYTE *)(v5 + 28))
      SLchcnv(v16, v30, (unsigned __int8 *)v16, 1, *(unsigned __int8 *)(a2 + 20));
    if ((unsigned __int16)v18 <= (unsigned __int16)v17)
    {
      if ((_WORD)v17 && !*(_WORD *)(v3 + 16))
        *(_WORD *)(v3 + 16) = v17;
LABEL_159:
      if ((*(_WORD *)(v3 + 10) & 0x20) != 0)
        return 0;
      else
        return 200;
    }
    if (*(_BYTE *)(v3 + 61))
      v47 = v27 == 0;
    else
      v47 = 1;
    v48 = !v47;
    *(_DWORD *)(*(_QWORD *)v88 + 1308) = v48;
    if (ICspl(v16, *(size_t *)v88) == 8)
    {
      v70 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)v70 = 0xDC000000A0;
      *(_WORD *)(v70 + 8) = 1020;
      return 220;
    }
    v49 = *(_DWORD *)(*(_QWORD *)v88 + 4);
    if (v49 == 4 || !*(_QWORD *)(*(_QWORD *)v88 + 1328) && v49 != 11 && !*(_WORD *)(*(_QWORD *)v88 + 1322))
    {
      __s1 = v16;
      goto LABEL_148;
    }
    v76 = v11;
    v50 = v18 - (v17 + v13);
    if (*__s)
    {
      v51 = strlen(__s);
      LOWORD(v13) = v13 + v51;
      v50 -= v51;
      v16[v50] = 0;
    }
    else
    {
      v51 = 0;
    }
    if (*v73)
    {
      v52 = strlen(v73);
      LOWORD(v17) = v17 + v52;
      v16 += v52;
      v81 = v52;
      v50 -= v52;
    }
    else
    {
      v81 = 0;
    }
    v101 = 0;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    *(_OWORD *)v91 = 0u;
    v92 = 0u;
    v90 = 0u;
    WORD4(v90) = v17 + WORD2(v89);
    LOWORD(v92) = v50;
    v53 = malloc_type_calloc(1uLL, v50 + 1, 0xB82F4717uLL);
    v91[0] = v53;
    if (!v53)
    {
      v72 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)v72 = 0xDC00000078;
      *(_WORD *)(v72 + 8) = 1020;
      return 120;
    }
    strcpy((char *)v53, v16);
    if (PRFillError(a1, a2, (uint64_t)&v90, 0))
      return 220;
    free(v91[0]);
    v54 = v100;
    if (!(_QWORD)v100)
    {
      __s1 = v16;
      v3 = a3;
      v5 = a1;
      v11 = v76;
      goto LABEL_148;
    }
    *(_QWORD *)(a3 + 40) = v100;
    v86 = v79 - v84;
    v85 = v79 - v84;
    v80 = v81 + v51;
    v55 = v18 - v17;
    while (2)
    {
      v56 = *(unsigned __int8 *)(v54 + 12);
      if (v56 == 5)
      {
        v57 = *(unsigned __int8 *)(v54 + 13);
        if (v57 == 3)
          goto LABEL_117;
        if (v57 == 2 && *(_WORD *)v54)
        {
          --*(_WORD *)v54;
LABEL_117:
          ++*(_WORD *)(v54 + 2);
        }
      }
      v58 = *(unsigned __int8 *)(a2 + 20);
      if (v58 == 16)
      {
        if (v56 == 6)
        {
          *(_WORD *)v54 = v89;
          *(_WORD *)(v54 + 2) = v86;
          if (v12)
          {
            ***(_BYTE ***)(v54 + 24) = 65;
            v58 = *(unsigned __int8 *)(a2 + 20);
            goto LABEL_122;
          }
        }
LABEL_134:
        v59 = *(unsigned __int8 *)(v54 + 12);
      }
      else
      {
LABEL_122:
        if (v58 != 15)
          goto LABEL_134;
        v59 = *(unsigned __int8 *)(v54 + 12);
        if (v59 == 6)
        {
          *(_WORD *)v54 = v89;
          *(_WORD *)(v54 + 2) = v85;
          if (*(_WORD *)(*(_QWORD *)v88 + 1404) == 2)
          {
            __s1[v85] = 0;
            strcat(__s1, **(const char ***)(v54 + 24));
            v60 = *(_QWORD *)(v54 + 24);
            if (v60)
            {
              *(_DWORD *)(v60 + 18) = 0;
              *(_WORD *)(v60 + 24) = 0;
              if (*(_WORD *)(v60 + 16))
              {
                v61 = 0;
                v62 = *(_QWORD *)(v60 + 8);
                do
                  *(_WORD *)(v62 + 2 * v61++) = -1;
                while (v61 < *(unsigned __int16 *)(v60 + 16));
              }
            }
            PRaddList((char **)v60, __s1, 1, 0);
          }
          if (v12)
          {
            v63 = *(_QWORD *)(v54 + 24);
            if (*(_WORD *)(v63 + 18))
            {
              v64 = 0;
              do
              {
                v65 = (char *)(*(_QWORD *)v63 + *(__int16 *)(*(_QWORD *)(v63 + 8) + 2 * v64));
                v66 = strlen(v65);
                SLrecap((unsigned __int8 *)v65, v66, 0, 0, v12, *(_QWORD *)(a2 + 8));
                ++v64;
                v63 = *(_QWORD *)(v54 + 24);
              }
              while (v64 < *(unsigned __int16 *)(v63 + 18));
            }
          }
          goto LABEL_134;
        }
      }
      if (v59 == 52)
      {
        if (*(_BYTE *)(v54 + 13) == 100)
        {
          *(_WORD *)v54 -= v81;
          *(_WORD *)(v54 + 2) += v80;
        }
      }
      else if (v59 == 4)
      {
        *(_WORD *)v54 = WORD2(v89);
        *(_WORD *)(v54 + 2) = v55;
        *(_WORD *)(v54 + 8) = WORD2(v89);
        *(_WORD *)(v54 + 10) = v55;
      }
      v54 = *(_QWORD *)(v54 + 40);
      if (v54)
        continue;
      break;
    }
    v11 = v76;
    if (v75)
    {
      v3 = a3;
      for (i = *(_QWORD *)(a3 + 40); i; i = *(_QWORD *)(i + 40))
        ConvertAlts(*(_QWORD *)(i + 24), 0, *(unsigned __int8 *)(a2 + 20));
      __s1 = v16;
    }
    else
    {
      __s1 = v16;
      v3 = a3;
    }
    v5 = a1;
LABEL_148:
    v68 = v18 + WORD2(v89);
    v69 = *(unsigned __int16 *)(v3 + 14);
    v12 = v83;
    if (*(unsigned __int16 *)(v3 + 12) <= (unsigned __int16)(v69 + v18 + WORD2(v89)))
    {
      if ((*(_WORD *)(v3 + 10) & 0x20) != 0)
      {
        result = 0;
        *(_WORD *)(v3 + 16) = v68;
      }
      else
      {
        v71 = *(_QWORD **)(v3 + 40);
        if (v71)
        {
          *(_WORD *)(v3 + 16) = WORD2(v89);
          PRfreeErrList(v71);
          *(_QWORD *)(v3 + 40) = 0;
        }
        else
        {
          *(_WORD *)(v3 + 16) = v68;
        }
        return 200;
      }
    }
    else
    {
      *(_WORD *)(v3 + 16) = v68;
      if (!*(_QWORD *)(v3 + 40) && ++v11 < *(unsigned __int16 *)(a2 + 28))
      {
        LOWORD(v89) = v17 + WORD2(v89);
        v14 = v18 - v17;
        v15 = v103;
        if (v82 == v103)
          v15 = v102;
        v9 = (_BYTE *)(*(_QWORD *)v3 + v69 + v68);
        v10 = *v9;
        WORD2(v89) += v18;
        v16 = v15;
        if (!*v9)
          goto LABEL_159;
        continue;
      }
      return 0;
    }
    return result;
  }
}

uint64_t PRNpBuilder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned __int8 *v23;
  BOOL v24;
  unsigned __int8 **v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _WORD *v30;
  __int16 v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  int v35;
  BOOL v36;
  _BOOL4 v38;
  int v39;
  uint64_t result;
  int v41;
  _BOOL4 v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  int v46;
  _BOOL4 v47;
  _BOOL4 v48;
  unsigned int v49;
  int v50;
  int v51;
  int v52;
  unsigned int v53;
  int v54;
  int v55;
  char *v56;
  char *v57;
  int v60;
  BOOL v62;
  int v63;
  unsigned __int16 *v64;
  uint64_t v65;
  char *v66;
  int v67;
  int v68;
  unint64_t v69;
  BOOL v70;
  int v71;
  int v72;
  int v73;
  BOOL v74;
  int v75;
  uint64_t v76;

  v3 = *(unsigned __int8 *)(a2 + 20);
  v4 = FR_TOUT_STR;
  v5 = FR_ARTICLES_STR;
  if ((_DWORD)v3 != 5)
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = FR_DE_STR;
  if ((_DWORD)v3 != 5)
    v6 = 0;
  if ((_DWORD)v3 == 9)
  {
    v4 = IT_TUTTO_STR;
    v5 = IT_ARTICLES_STR;
    v6 = IT_DI_STR;
  }
  if ((_DWORD)v3 == 8)
  {
    v4 = SP_TOUT_STR;
    v5 = SP_ARTICLES_STR;
    v6 = SP_DE_STR;
  }
  if ((_DWORD)v3 == 12)
    v4 = PO_TOUT_STR;
  v66 = v4;
  if ((_DWORD)v3 == 12)
    v7 = PO_ARTICLES_STR;
  else
    v7 = v5;
  v8 = PO_DE_STR;
  if ((_DWORD)v3 != 12)
    v8 = v6;
  v56 = v8;
  v57 = v7;
  v9 = *(_QWORD *)(a3 + 56);
  if (v9)
  {
    v10 = 0;
    v64 = 0;
    v65 = 0;
    v11 = 0;
    v69 = 0;
    v12 = 0;
    v68 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v63 = 0;
    v74 = 0;
    v62 = 0;
    v75 = 0;
    LOBYTE(v67) = 0;
    v76 = 0;
    v16 = 0;
    do
    {
      v72 = v13;
      v73 = v14;
      v17 = v3;
      v18 = v9;
      v19 = *(_QWORD *)(v9 + 152);
      v71 = v12;
      if (v9 != v19)
      {
        v20 = v15;
        v21 = v75;
        v22 = 0;
        v23 = **(unsigned __int8 ***)(v9 + 144);
        v24 = 1;
        goto LABEL_31;
      }
      if (*(_QWORD *)(v9 + 80) == *(_QWORD *)(v9 + 176) || (v25 = *(unsigned __int8 ***)(v9 + 144)) == 0)
      {
        v23 = *(unsigned __int8 **)(v18 + 16);
        if (v17 <= 0xC && ((1 << v17) & 0x1120) != 0)
        {
          v26 = *(unsigned __int8 *)(v18 + 51);
          v20 = v15;
          if ((v26 - 2) < 2 || (v21 = v75, v26 == 1) && v18 != *(_QWORD *)(a3 + 72))
          {
            v21 = 0;
            v76 = 0x100000003;
            v16 = 12;
            LOBYTE(v67) = 1;
            v24 = 1;
            v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
          v20 = v15;
          v21 = v75;
        }
      }
      else
      {
        v20 = v15;
        v21 = v75;
        v23 = *v25;
      }
      v22 = 0;
      v24 = PRwrdlst(v23, v56) == 0;
LABEL_31:
      v70 = v24;
      if ((_DWORD)v17 == 9)
      {
        if (v10 && PRwrdlst(v23, IT_QUALE_STR))
        {
          BYTE4(v76) = 0;
          *(_WORD *)(v18 + 98) &= ~0x40u;
          v60 = 1;
        }
        else
        {
          v60 = 0;
        }
        if (PRwrdlst(v23, IT_I_STR))
        {
          LOBYTE(v67) = 0;
          v21 = 0;
          v76 = 0x100000002;
          v16 = 4;
          v22 = 1;
        }
        v28 = PRwrdlst(v23, IT_GLI_LE_STR);
        if (v28 && *(_QWORD *)(v19 + 80) != *(_QWORD *)(v19 + 176))
        {
          v29 = 0;
          LOBYTE(v67) = 0;
          v30 = (_WORD *)(v18 + 98);
          if (v28 == 1)
            v16 = 4;
          else
            v16 = 8;
          v31 = *(_WORD *)(v18 + 98) & 0xF08F | 0x40;
          *v30 = v31;
          v76 = 0x100000002;
          v15 = v20;
          v3 = v17;
          v12 = v71;
          v32 = v72;
          v14 = v73;
          goto LABEL_64;
        }
        v3 = v17;
      }
      else
      {
        v3 = v17;
        if ((_DWORD)v17 == 12)
        {
          v27 = PRwrdlst(v23, PO_O_A_STR);
          if (v27)
          {
            v14 = v73;
            if ((unsigned __int16)v27 == 1)
              v16 = 4;
            else
              v16 = 8;
            v15 = v20;
            v12 = v71;
            v32 = v72;
            v29 = 0;
            LOBYTE(v67) = 0;
            v60 = 0;
            v30 = (_WORD *)(v18 + 98);
            v31 = *(_WORD *)(v18 + 98) & 0xF08F | 0x40;
            *(_WORD *)(v18 + 98) = v31;
            v76 = 0x100000001;
            goto LABEL_64;
          }
          v60 = (unsigned __int16)v27;
        }
        else
        {
          v60 = 0;
        }
      }
      v32 = v72;
      v14 = v73;
      v30 = (_WORD *)(v18 + 98);
      v33 = *(unsigned __int16 *)(v18 + 98);
      if (!v22)
      {
        v16 = (v33 >> 8) & 0xC;
        LODWORD(v76) = (v33 >> 8) & 3;
        HIDWORD(v76) = (v33 >> 6) & 1;
        v67 = (v33 >> 5) & 1;
        v29 = (v33 >> 4) & 1;
        v15 = v20;
        v12 = v71;
        goto LABEL_68;
      }
      v31 = v33 & 0xF08F;
      if (BYTE4(v76))
        v31 |= 0x40u;
      v29 = v21;
      if ((_BYTE)v21)
        v31 |= 0x10u;
      if ((_BYTE)v67)
        v31 |= 0x20u;
      *v30 = v31;
      if (!(_WORD)v16)
      {
        v16 = 0;
        v15 = v20;
        v12 = v71;
        goto LABEL_65;
      }
      v15 = v20;
      v12 = v71;
LABEL_64:
      v31 |= (_WORD)v16 << 8;
      *v30 = v31;
LABEL_65:
      if ((_WORD)v76)
        *v30 = v31 | ((_WORD)v76 << 8);
      else
        LODWORD(v76) = 0;
LABEL_68:
      if ((v3 | 4) == 0xC && PRwrdlst(v23, v66))
      {
        *(_WORD *)(v18 + 98) |= 0x40u;
        BYTE4(v76) = 1;
      }
      if (v32)
        v34 = !v74;
      else
        v34 = 1;
      if (v34)
        v35 = 0;
      else
        v35 = v16;
      if ((_BYTE)v29)
        v36 = (unsigned __int16)v16 == 0;
      else
        v36 = 1;
      if (!v36)
        v16 = v35;
      v75 = v29;
      if (!(_WORD)v16)
      {
        if (v32)
        {
          v39 = v68;
          result = set_np_attributes(v64, v11, (unsigned __int16)v68, (unsigned __int16)v12, a1, a2, a3, (char)v15, v14);
          if ((_DWORD)result)
            return result;
          v15 = 0;
          v14 = 0;
          v41 = 1;
          v69 = __PAIR64__(v12, v68);
        }
        else
        {
          v39 = v68;
          v41 = HIDWORD(v65);
        }
        v13 = 0;
        v46 = v65;
        if ((_BYTE)v75)
          v46 = 1;
        LODWORD(v65) = v46;
        v38 = 1;
        goto LABEL_149;
      }
      if (v32)
      {
        if ((!v11 || (*(_BYTE *)(v11 + 94) & 0x80) == 0) && !BYTE4(v76))
        {
          BYTE4(v76) = 0;
          v38 = (_DWORD)v3 != 9 || v60 == 0;
          goto LABEL_98;
        }
        if (v62)
        {
          v38 = 1;
          BYTE4(v76) = 1;
LABEL_98:
          v39 = v68;
          v41 = HIDWORD(v65);
          v42 = ((unsigned __int16)v16 & (unsigned __int16)v69) == 0;
          if (((unsigned __int16)v76 & WORD2(v69)) == 0)
            v42 = 1;
          if ((unsigned __int16)v68 == 12)
          {
            v39 = v16;
          }
          else if ((unsigned __int16)v68 == 4)
          {
            if (v42)
              v43 = v15;
            else
              v43 = 1;
            if ((unsigned __int16)v16 == 8)
              v15 = v43;
            else
              v15 = v15;
            if ((unsigned __int16)v16 == 8)
              v39 = 16;
            else
              v39 = 4;
          }
          else
          {
            v47 = (unsigned __int16)v68 == 8;
            v48 = (unsigned __int16)v16 == 4;
            if (v42)
              v49 = v15;
            else
              v49 = 1;
            if (v47 && v48)
              v15 = v49;
            else
              v15 = v15;
            if (v47 && v48)
              v39 = 16;
          }
          if ((unsigned __int16)v12 == 3)
          {
            v13 = 1;
            v12 = v76;
          }
          else
          {
            if ((unsigned __int16)v12 == 1)
            {
              if (v42)
                v50 = v14;
              else
                v50 = 1;
              if ((unsigned __int16)v76 == 2)
              {
                v14 = v50;
                v12 = 32;
              }
              else
              {
                v12 = 1;
              }
            }
            else
            {
              if (v42)
                v51 = v14;
              else
                v51 = 1;
              if ((unsigned __int16)v12 == 2 && (unsigned __int16)v76 == 1)
              {
                v14 = v51;
                v12 = 32;
              }
            }
            v13 = 1;
          }
          goto LABEL_149;
        }
        v44 = v68;
        result = set_np_attributes(v64, v11, (unsigned __int16)v68, (unsigned __int16)v12, a1, a2, a3, (char)v15, v14);
        if ((_DWORD)result)
          return result;
        v15 = 0;
        v14 = 0;
        BYTE4(v76) = 1;
        v41 = 1;
        v45 = v76;
      }
      else
      {
        v44 = v69;
        v12 = HIDWORD(v69);
        v45 = v76;
        v41 = HIDWORD(v65);
      }
      LODWORD(v65) = 0;
      v38 = v67 == 0;
      *(_WORD *)(v18 + 96) |= 0x1000u;
      if (v63)
        v52 = v12;
      else
        v52 = 0;
      if (v63)
        v53 = v44;
      else
        v53 = 0;
      v69 = __PAIR64__(v52, v53);
      v13 = 1;
      v64 = (unsigned __int16 *)v18;
      v39 = v16;
      v12 = v45;
LABEL_149:
      if (v70 || (v54 = 1, !v41) && !(_BYTE)v65)
        v54 = 0;
      v63 = v54;
      if (!v38 || (v55 = 0, (_WORD)v16) && !*(_QWORD *)(v18 + 176))
      {
        result = set_np_attributes(v64, v18, (unsigned __int16)v39, (unsigned __int16)v12, a1, a2, a3, (char)v15, v14);
        if ((_DWORD)result)
          return result;
        v15 = 0;
        v14 = 0;
        v13 = 0;
        v55 = 1;
        v69 = __PAIR64__(v12, v39);
      }
      if (BYTE4(v76))
        v74 = PRwrdlst(v23, v57) == 0;
      else
        v74 = 0;
      v68 = v39;
      v62 = PRwrdlst(v23, v66) != 0;
      HIDWORD(v65) = v55;
      v10 = (_DWORD)v3 == 9 && PRwrdlst(v23, IT_IL_LA_STR);
      v9 = *(_QWORD *)(v18 + 176);
      v11 = v18;
    }
    while (v9);
  }
  return 0;
}

uint64_t PRwrdlst(unsigned __int8 *a1, _BYTE *a2)
{
  int v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  __int16 v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  int v10;

  v2 = *a2;
  if (*a2)
  {
    v5 = *a1;
    v3 = a1 + 1;
    v4 = v5;
    v6 = 1;
    do
    {
      if (v4)
      {
        v7 = v3;
        v8 = v4;
        while (1)
        {
          v2 = *a2;
          if (v8 != v2)
            break;
          ++a2;
          v9 = *v7++;
          v8 = v9;
          if (!v9)
          {
            v2 = *a2;
            goto LABEL_8;
          }
        }
      }
      else
      {
LABEL_8:
        if ((v2 | 0x20) == 0x20)
          return v6;
      }
      while ((v2 | 0x20) != 0x20)
      {
        v10 = *++a2;
        v2 = v10;
      }
      if (v2 == 32)
        ++a2;
      ++v6;
      v2 = *a2;
    }
    while (*a2);
  }
  return 0;
}

uint64_t set_np_attributes(unsigned __int16 *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, char a9)
{
  int v13;
  __int16 v14;
  char v15;
  int v16;
  char v17;
  char v18;
  __int16 v19;
  int v20;
  __int16 v21;
  unsigned __int8 v22;
  int v23;
  __int16 v24;
  unsigned __int16 *v25;
  BOOL v26;
  uint64_t result;
  int v28;
  int v29;
  __int16 v30;
  __int16 v31;
  _WORD *v32;
  _WORD *v33;

  v13 = *(unsigned __int8 *)(a6 + 20);
  if (a8)
    v14 = 12;
  else
    v14 = 0;
  if (a8)
    v15 = 0;
  else
    v15 = 52;
  v16 = (a8 == 0) << 9;
  if (a8)
    v17 = 53;
  else
    v17 = 54;
  if (a3 == 16)
  {
    v18 = v17;
  }
  else
  {
    v14 = a3;
    v18 = 53;
  }
  if (a3 != 16)
  {
    v15 = 0;
    v16 = 0;
  }
  if (a9)
    v19 = 3;
  else
    v19 = 0;
  if (a9)
  {
    v18 = v15;
    v20 = v16;
  }
  else
  {
    v20 = v16 | 0x400;
  }
  if (a4 == 32)
    v21 = v19;
  else
    v21 = a4;
  if (a4 == 32)
    v22 = v18;
  else
    v22 = v15;
  if (a4 == 32)
    v23 = v20;
  else
    v23 = v16;
  v24 = v21 | v14;
  *((_DWORD *)a1 + 23) |= v23;
  v25 = a1;
  if (a1)
  {
    v25 = a1;
    if (a1 != (unsigned __int16 *)a2)
    {
      v25 = a1;
      do
      {
        v25[48] |= v24 | 0x2000;
        if (v13 == 9)
          *((_DWORD *)v25 + 23) |= v23;
        v25 = (unsigned __int16 *)*((_QWORD *)v25 + 22);
        if (v25)
          v26 = v25 == (unsigned __int16 *)a2;
        else
          v26 = 1;
      }
      while (!v26);
    }
  }
  *(_WORD *)(a2 + 96) |= v24 | 0x2100;
  if (v13 == 9)
    *((_DWORD *)v25 + 23) |= v23;
  if (!v22 || *(_BYTE *)(a7 + 2) != 2 || *a1 < *(unsigned __int16 *)(a7 + 16))
    return 0;
  v28 = v22;
  v29 = PRliveRule(a5, a6, 0, 0x3Au, v22, 1, 1);
  result = 0;
  if (!v29)
  {
    v33 = 0;
    result = PRmkErr(a5, a6, &v33, *((_QWORD *)a1 + 19), 0, 0x3Au, v28);
    if (!(_DWORD)result)
    {
      v30 = *(_WORD *)(*((_QWORD *)a1 + 19) + 8);
      v31 = *(_WORD *)(*(_QWORD *)(a2 + 152) + 32) + *(_WORD *)(*(_QWORD *)(a2 + 152) + 8) - v30;
      v32 = v33;
      *v33 = v30;
      v32[1] = v31;
    }
  }
  return result;
}

uint64_t PRfixSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unsigned __int8 *v8;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 16) + 40))
    return 0;
  v4 = a3;
  if (!a3)
    return 0;
  v8 = (unsigned __int8 *)(a2 + 32);
  while (1)
  {
    if (*(_WORD *)(v4 + 2))
    {
      result = FixSpan(a1, v8, *(_QWORD *)(a2 + 8), a4, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (__int16 *)v4, (__int16 *)(v4 + 2));
      if ((_DWORD)result)
        break;
    }
    if (*(_WORD *)(v4 + 6))
    {
      result = FixSpan(a1, v8, *(_QWORD *)(a2 + 8), a4, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (__int16 *)(v4 + 4), (__int16 *)(v4 + 6));
      if ((_DWORD)result)
        break;
    }
    if (*(_WORD *)(v4 + 10))
    {
      result = FixSpan(a1, v8, *(_QWORD *)(a2 + 8), a4, *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40), (__int16 *)(v4 + 8), (__int16 *)(v4 + 10));
      if ((_DWORD)result)
        break;
    }
    v4 = *(_QWORD *)(v4 + 40);
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t FixSpan(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 *a6, __int16 *a7)
{
  int v7;
  int v8;
  signed int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BYTE *v14;
  int v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t result;
  int v21;
  BOOL v22;
  _BYTE *v23;
  int v24;
  unsigned int v25;
  BOOL v26;

  v7 = *a6;
  v8 = *a7;
  v9 = v7 & 0xFFFFFFF0;
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[3];
  v14 = (_BYTE *)(*(_QWORD *)a4 + *(__int16 *)(a5 + 2 * (v7 >> 4)));
  v15 = *v14;
  if (*v14)
    v16 = v9 < v7;
  else
    v16 = 0;
  if (v16)
  {
    do
    {
      if (v15 == v10)
      {
        do
          v17 = *v14++;
        while (v17 != v11);
      }
      else
      {
        if (v15 != v12)
        {
          if (v15 == v13)
          {
            do
              v18 = *++v14;
            while ((*(_DWORD *)(a3 + 4 * v18) & 0x2000000) != 0);
            ++v9;
            goto LABEL_15;
          }
          ++v9;
        }
        ++v14;
      }
LABEL_15:
      v15 = *v14;
    }
    while (*v14 && v7 > (__int16)v9);
  }
  if (*a7 && !v15)
  {
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v19 = 0xDCFFFFFF9BLL;
    *(_WORD *)(v19 + 8) = 3022;
    return 220;
  }
  *a6 = (_WORD)v14 - *(_QWORD *)a4 - *(_WORD *)(a4 + 14);
  v21 = *v14;
  if (*v14)
    v22 = v8 < 1;
  else
    v22 = 1;
  LOWORD(v23) = (_WORD)v14;
  if (!v22)
  {
    v23 = v14;
    do
    {
      if (v21 == v10)
      {
        do
          v24 = *v23++;
        while (v24 != v11);
      }
      else
      {
        if (v21 != v12)
        {
          if (v21 == v13)
          {
            do
              v25 = *++v23;
            while ((*(_DWORD *)(a3 + 4 * v25) & 0x2000000) != 0);
            --v8;
            goto LABEL_34;
          }
          --v8;
        }
        ++v23;
      }
LABEL_34:
      v21 = *v23;
      if (*v23)
        v26 = (__int16)v8 <= 0;
      else
        v26 = 1;
    }
    while (!v26);
  }
  result = 0;
  *a7 = (_WORD)v23 - (_WORD)v14;
  return result;
}

uint64_t PRfixPars(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  __int16 v5;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  if (!v3)
    return 0;
  if (!*(_WORD *)(a3 + 16))
    return 0;
  v5 = 0;
  result = FixSpan(a1, (unsigned __int8 *)(a2 + 32), *(_QWORD *)(a2 + 8), a3, v3, (__int16 *)(a3 + 16), &v5);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t PRgetmsg(char **a1, int a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v6;
  size_t v8;
  char *v9;
  char *v10;
  void *v11;
  unsigned int v12;
  unsigned __int16 __dst;
  _BYTE v14[320];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v5 = *(_DWORD *)a3;
  if (SLSeek(*(_DWORD *)a3, *(_DWORD *)(a3 + 4) + a2, 0))
    return 111;
  v12 = 0;
  if (SLFRead(v5, 322, &__dst, &v12))
    return 112;
  v8 = __rev16(__dst);
  v9 = (char *)malloc_type_malloc((v8 + 1), 0xF6858604uLL);
  *a1 = v9;
  if (!v9)
    return 120;
  v10 = v9;
  if (v8 < 0x141)
  {
    memcpy(v9, v14, v8);
  }
  else
  {
    memcpy(v9, v14, 0x140uLL);
    v11 = v10 + 320;
    if (SLFRead(v5, (int)v8 - 320, v11, &v12))
    {
      free(v11);
      *a1 = 0;
      return 112;
    }
    v10 = *a1;
  }
  v10[v8] = 0;
  if ((_DWORD)v8 && *(_WORD *)(a3 + 88))
  {
    v6 = PRdecomp(v10, v8, *(_BYTE **)(a3 + 80));
    if ((_DWORD)v6)
    {
      free(v10);
      *a1 = 0;
    }
  }
  else
  {
    SLcrypt(v10, v8, (uint64_t)&SLkey, 7);
    return 0;
  }
  return v6;
}

uint64_t PRIcsTokWalk(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  size_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  char *v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned __int8 *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned __int8 v44;
  uint64_t v45;
  int v46;
  int CompNum;
  int v48;
  int v49;
  void *v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  __int16 v55;
  void *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  char *v66;
  int v67;
  int v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  __int16 v73;
  char *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  char *__s;
  char *v79;
  void *v80;
  unsigned __int16 v81;
  _BYTE v82[3];
  char v83[13];
  uint64_t v84;

  v6 = a2;
  v84 = *MEMORY[0x1E0C80C00];
  v80 = 0;
  v8 = *(_QWORD *)(a3 + 128);
  v9 = *(unsigned __int8 *)(v8 + 8);
  v10 = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(v8 + 1339) = 0;
  if (a4 && (*(_WORD *)a3 & 2) == 0)
  {
    v11 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)v11 = 0x4000001F9;
    *(_WORD *)(v11 + 8) = 821;
  }
  result = PRmkList(a2, (uint64_t *)&v80, 7);
  if ((_DWORD)result == 220)
    return result;
  if (!a1)
  {
    *(_BYTE *)(v8 + 1339) = 0;
LABEL_154:
    PRfreeList((void **)v80);
    return 0;
  }
  __s = (char *)(v8 + 1624);
  v79 = (char *)(v8 + 1547);
  v13 = a1;
  while (1)
  {
    v14 = *(_QWORD *)(v13 + 72);
    if (v14)
    {
      v15 = *(_DWORD *)(v14 + 4);
      if ((v15 & 0x80000000) == 0 && (v15 & 0x221C0) != 0)
      {
        v16 = *(unsigned __int8 **)(v14 + 16);
        if (v16)
        {
          v17 = *(unsigned __int16 *)(v14 + 32);
          if (v17)
          {
            v18 = 0;
            do
            {
              v19 = *v16++;
              if ((*(_DWORD *)(v10 + 4 * v19) & 0x60000040) != 0)
              {
                if (v18)
                  goto LABEL_20;
                v18 = 1;
              }
              --v17;
            }
            while (v17);
          }
        }
      }
      if (v15 != 4096 && v15 != 0x4000)
        *(_BYTE *)(v8 + 1339) = 0;
    }
LABEL_20:
    v21 = 0;
    if (a4)
    {
      if ((*(_WORD *)a3 & 2) != 0)
      {
        v20 = *(char **)(v13 + 16);
        if (v20)
        {
          if (strchr(v20, *(char *)(a3 + 26)))
            v21 = 1;
        }
      }
    }
    *(_DWORD *)(v8 + 1308) = v21;
    v22 = *(_DWORD *)(v13 + 4);
    if (v22 != -1073733632 && v22 != -1073739776)
      break;
    LOBYTE(v24) = 1;
    if (v9 <= 0x10)
    {
      if (((1 << v9) & 0x2CC0) != 0)
      {
        v25 = *(_QWORD *)(v13 + 72);
        if (!v25)
          goto LABEL_66;
        v26 = *(unsigned __int16 *)(v25 + 32);
        if (v26 < 3)
          goto LABEL_66;
        v27 = *(unsigned __int8 *)(*(_QWORD *)(v25 + 16) + (v26 - 1));
        if ((v27 - 115) > 7 || ((1 << (v27 - 115)) & 0xA1) == 0)
        {
          if (!v27)
            goto LABEL_66;
          if (v27 != 97 || v9 != 7)
            goto LABEL_66;
        }
      }
      else
      {
        if (v9 != 16)
          goto LABEL_67;
        v25 = *(_QWORD *)(v13 + 72);
        if (!v25
          || (v32 = *(unsigned __int16 *)(v25 + 32), v32 < 3)
          || *(_BYTE *)(*(_QWORD *)(v25 + 16) + (v32 - 1)) != 115)
        {
LABEL_66:
          LOBYTE(v24) = 1;
          goto LABEL_67;
        }
      }
      if (!*(_WORD *)(v25 + 48))
      {
        v22 = -2147483647;
        *(_DWORD *)(v13 + 4) = -2147483647;
      }
      goto LABEL_66;
    }
LABEL_67:
    if ((v22 & 0x221C0) == 0)
      LOBYTE(v24) = 1;
    if ((v22 & 0x10055011) != 0 || (v24 & 1) == 0)
    {
      if (*(_WORD *)(v13 + 32))
      {
        v34 = 0;
        do
        {
          *(_BYTE *)(v8 + 1339 + v34) = *(_BYTE *)(*(_QWORD *)(v13 + 16) + v34);
          ++v34;
        }
        while (v34 < *(unsigned __int16 *)(v13 + 32));
      }
      else
      {
        LOWORD(v34) = 0;
      }
      *(_BYTE *)(v8 + (unsigned __int16)v34 + 1339) = 0;
    }
LABEL_77:
    v13 = *(_QWORD *)(v13 + 80);
    if (!v13)
    {
      v68 = 0;
      *(_BYTE *)(v8 + 1339) = 0;
      do
      {
        *(_WORD *)(a1 + 88) = v68;
        a1 = *(_QWORD *)(a1 + 176);
        ++v68;
      }
      while (a1);
      goto LABEL_154;
    }
  }
  LODWORD(v24) = v22 >> 31;
  if ((v22 & 0x80000000) != 0 || (*(_DWORD *)(v13 + 4) & 0x221C0) == 0)
    goto LABEL_67;
  if ((*(_BYTE *)(v13 + 92) & 0x10) != 0)
    goto LABEL_55;
  LODWORD(v24) = (v22 & 0x10000002) != 0;
  if ((*(_DWORD *)(v13 + 4) & 0x20000) != 0)
    LODWORD(v24) = 0;
  if ((v22 & 0x10000004) != 0 && !(_DWORD)v24)
    goto LABEL_67;
  v24 = *(unsigned __int8 **)(v13 + 16);
  if (!v24)
    goto LABEL_67;
  v29 = *(unsigned __int16 *)(v13 + 32);
  if (!*(_WORD *)(v13 + 32))
  {
LABEL_55:
    LOBYTE(v24) = 0;
    goto LABEL_67;
  }
  v30 = 0;
  while (1)
  {
    v31 = *v24++;
    if ((*(_DWORD *)(v10 + 4 * v31) & 0x60000040) != 0)
      break;
LABEL_54:
    if (!--v29)
      goto LABEL_55;
  }
  if (!v30)
  {
    v30 = 1;
    goto LABEL_54;
  }
  v35 = *(_QWORD *)(v13 + 72);
  v38 = 0;
  if (v35)
  {
    v36 = *(_DWORD *)(v35 + 4);
    v37 = v36 == -2147483640 || v36 == -2147483644;
    if (v37 && !*(_QWORD *)(v35 + 40))
      v38 = 1;
  }
  *(_BYTE *)(v8 + 1414) = v38;
  if (*(_QWORD *)(v13 + 40))
  {
    LOBYTE(v39) = 0;
  }
  else
  {
    v39 = *(_QWORD *)(v13 + 80);
    if (v39)
      LOBYTE(v39) = ((*(_DWORD *)(v39 + 4) + 2147483644) & 0xFFFFFFFB) == 0;
  }
  *(_BYTE *)(v8 + 1413) = v39;
  *(_BYTE *)(v8 + 1412) = 0;
  v40 = PRIcs(v6, a3, 0, 0, 0, *(char **)(v13 + 24), v13, v8, 3, 1);
  if (v40 > 10)
  {
    if (v40 == 11)
    {
      *(_DWORD *)(v13 + 4) |= 0x10000004u;
    }
    else if (v40 == 16)
    {
      *(_DWORD *)(v13 + 4) |= 0x10000008u;
    }
    goto LABEL_143;
  }
  if ((v40 - 2) < 2)
  {
    v41 = 0x10000000;
    goto LABEL_99;
  }
  if (v40 != 10)
    goto LABEL_143;
  v41 = 268435458;
LABEL_99:
  *(_DWORD *)(v13 + 4) |= v41;
  if (!*(_QWORD *)(a3 + 72))
  {
LABEL_143:
    v67 = *(_DWORD *)(v8 + 4);
    if (v67 != 4
      && (*(_QWORD *)(v8 + 1328) || v67 == 11 || *(_WORD *)(v8 + 1322))
      && PRFillError(v6, a3, v13, 1))
    {
      return 220;
    }
    goto LABEL_77;
  }
  v76 = (uint64_t *)v80;
  v77 = v6;
  v42 = *(_QWORD *)(a3 + 8);
  if (*(_DWORD *)(v8 + 4) == 2 && (*(_BYTE *)(v8 + 1329) & 0x20) != 0)
  {
LABEL_142:
    v6 = v77;
    goto LABEL_143;
  }
  v43 = *(unsigned __int8 *)(a3 + 20);
  if (v43 <= 0xC && ((1 << v43) & 0x1320) != 0)
    v74 = v82;
  else
    v74 = 0;
  v81 = 0;
  v75 = v42;
  if (!*(_BYTE *)(v8 + 1614))
  {
    CompNum = GetCompNum(v79, (uint64_t)v80, (uint64_t)v82, (__int16 *)&v81, v6, a3);
    if (CompNum == 220)
    {
      v69 = 817;
      goto LABEL_167;
    }
    v48 = CompNum;
    if (CompNum || *__s)
    {
      if (CompNum)
        v49 = CompNum;
      else
        v49 = 1;
      v50 = malloc_type_calloc(v49, 8uLL, 0x10040436913F5uLL);
      *(_QWORD *)(v13 + 144) = v50;
      if (v50)
      {
        v51 = FillWordElems(v48, v79, v76, v74, v81, v13, v75);
        v52 = v13;
        if (v51)
          goto LABEL_139;
        v69 = 819;
      }
      else
      {
        v69 = 818;
      }
      goto LABEL_167;
    }
    goto LABEL_142;
  }
  v73 = *(_WORD *)(v13 + 98);
  *(_WORD *)(v13 + 98) = 0;
  v44 = *(_BYTE *)(v8 + 1614);
  if (v44)
  {
    v45 = 0;
    v46 = 0;
    do
    {
      if ((*(_DWORD *)(v42 + 4 * v44) & 0x40000000) != 0)
        v44 += 32;
      v83[v45] = v44;
      v45 = (__int16)++v46;
      v44 = *(_BYTE *)(v8 + (__int16)v46 + 1614);
    }
    while (v44);
  }
  else
  {
    v45 = 0;
  }
  v83[v45] = 0;
  v53 = GetCompNum(v83, (uint64_t)v76, (uint64_t)v82, (__int16 *)&v81, v6, a3);
  if (v53 == 220)
  {
    v69 = 809;
    goto LABEL_167;
  }
  v54 = v53;
  v55 = v53;
  if ((v53 & 0xFFFE) == 0)
    v55 = 1;
  *(_DWORD *)(v13 + 92) |= 0x20000u;
  v56 = malloc_type_calloc((__int16)(v55 + 1), 8uLL, 0x10040436913F5uLL);
  *(_QWORD *)(v13 + 144) = v56;
  if (!v56)
  {
    v69 = 810;
    goto LABEL_167;
  }
  v57 = v75;
  if (v54)
  {
    v58 = FillWordElems(v54, v83, v76, v74, v81, v13, v75);
    v57 = v75;
    if (!v58)
    {
      v69 = 812;
      goto LABEL_167;
    }
  }
  if (!AddToWordElems(v13, v83, *(__int16 *)(v13 + 136), 1, v57))
  {
    v69 = 811;
    goto LABEL_167;
  }
  v59 = v77;
  v60 = GetCompNum(v79, (uint64_t)v76, (uint64_t)v82, (__int16 *)&v81, v77, a3);
  if (v60 == 220)
  {
    v69 = 813;
  }
  else
  {
    v72 = v60;
    v61 = v13;
    do
    {
      v62 = v61;
      v61 = *(_QWORD *)(v61 + 176);
    }
    while (v61 != *(_QWORD *)(v62 + 80));
    if (CreateExpTok(v62))
    {
      v71 = *(_QWORD *)(v62 + 176);
      *(_WORD *)(v71 + 98) = v73;
      v63 = v72;
      if ((v72 & 0xFFFE) == 0)
        v63 = 1;
      v64 = malloc_type_calloc(v63, 8uLL, 0x10040436913F5uLL);
      *(_QWORD *)(v71 + 144) = v64;
      if (v64)
      {
        v52 = v71;
        if (FillWordElems(v72, v79, v76, v74, v81, v71, v75))
        {
LABEL_139:
          if (!*__s)
            goto LABEL_142;
          v65 = strlen(__s);
          v66 = (char *)malloc_type_malloc(v65 + 1, 0xB2133F2DuLL);
          *(_QWORD *)(v52 + 112) = v66;
          if (v66)
          {
            strcpy(v66, __s);
            goto LABEL_142;
          }
          v69 = 820;
        }
        else
        {
          v69 = 816;
        }
      }
      else
      {
        v69 = 815;
      }
    }
    else
    {
      v69 = 814;
    }
LABEL_167:
    v59 = v77;
  }
  v70 = *(_QWORD *)(v59 + 32);
  *(_QWORD *)v70 = 0xDC00000078;
  *(_WORD *)(v70 + 8) = v69;
  return 220;
}

uint64_t GetCompNum(const char *a1, uint64_t a2, uint64_t a3, __int16 *a4, uint64_t a5, uint64_t a6)
{
  int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __int16 v16;
  uint64_t v17;

  v12 = strlen(a1);
  v13 = *(_QWORD *)(a6 + 8);
  v14 = (char *)malloc_type_calloc((__int16)v12 + 1, 1uLL, 0x100004077774924uLL);
  if (v14)
  {
    v15 = v14;
    if (v12 << 16 >= 1)
    {
      v16 = 0;
      do
      {
        v17 = a1[v16];
        if ((*(_DWORD *)(v13 + 4 * v17) & 0x40000000) != 0)
          LOBYTE(v17) = v17 + 32;
        v14[v16++] = v17;
      }
      while ((__int16)v12 > v16);
    }
    PRCtGet(v14, 2, a5, a6, a2, a3, a4);
    free(v15);
    return *(__int16 *)(a2 + 18);
  }
  else
  {
    return 220;
  }
}

uint64_t FillWordElems(int a1, char *a2, uint64_t *a3, char *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  __int16 v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 i;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  char __s[129];
  uint64_t v34;

  v8 = a6;
  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    result = AddToWordElems(a6, a2, 0, 0, a7);
    if (!(_DWORD)result)
      return result;
    return 1;
  }
  v13 = a5 - 1;
  if ((_WORD)a5 != 1)
  {
    v14 = v13;
    if (v13 >= 1)
    {
      LOWORD(v15) = 0;
      v16 = a6;
      do
      {
        CreateExpTok(v16);
        v16 = *(_QWORD *)(v16 + 176);
        result = (uint64_t)malloc_type_calloc(a1, 8uLL, 0x10040436913F5uLL);
        *(_QWORD *)(v16 + 144) = result;
        if (!result)
          return result;
        v15 = (__int16)(v15 + 1);
      }
      while (v15 < v14);
    }
    if (a1 >= 1)
    {
      v18 = 0;
      v32 = (unsigned __int16)a1;
      v19 = *a3;
      while (1)
      {
        v20 = *(__int16 *)(a3[1] + 2 * v18);
        if (*(_BYTE *)(v19 + v20))
          break;
LABEL_19:
        if (++v18 == v32)
          goto LABEL_27;
      }
      v21 = v8;
      while (1)
      {
        for (i = 0; ; ++i)
        {
          v23 = (__int16)v20;
          LODWORD(v20) = *(unsigned __int8 *)(v19 + (__int16)v20);
          if ((v20 | 0x20) == 0x20)
            break;
          v24 = i;
          __s[v24] = v20;
          LOWORD(v20) = v23 + 1;
        }
        __s[i] = 0;
        v25 = *(unsigned __int8 *)(v19 + v23);
        result = AddToWordElems(v21, __s, *(__int16 *)(v21 + 136), 0, a7);
        if (!(_DWORD)result)
          return result;
        if (v25)
          LOWORD(v20) = v23 + 1;
        else
          LOWORD(v20) = v23;
        v21 = *(_QWORD *)(v21 + 176);
        v19 = *a3;
        if (!*(_BYTE *)(*a3 + (__int16)v20))
          goto LABEL_19;
      }
    }
    goto LABEL_27;
  }
  if (a1 < 1)
  {
LABEL_27:
    if (a4 && (__int16)a5 >= 1)
    {
      v28 = a5;
      do
      {
        v29 = *(_WORD *)(v8 + 98) & 0xF09F;
        *(_WORD *)(v8 + 98) = v29;
        v30 = v29 & 0xF0FF | ((*a4 & 0xF) << 8);
        *(_WORD *)(v8 + 98) = v30;
        v31 = *a4;
        if ((*a4 & 0x10) != 0)
        {
          v30 |= 0x40u;
          *(_WORD *)(v8 + 98) = v30;
          v31 = *a4;
        }
        if ((v31 & 0x20) != 0)
          *(_WORD *)(v8 + 98) = v30 | 0x20;
        v8 = *(_QWORD *)(v8 + 176);
        ++a4;
        --v28;
      }
      while (v28);
    }
    return 1;
  }
  v26 = 0;
  v27 = (unsigned __int16)a1;
  while (1)
  {
    result = AddToWordElems(v8, (char *)(*a3 + *(__int16 *)(a3[1] + 2 * v26)), (__int16)v26, 0, a7);
    if (!(_DWORD)result)
      return result;
    if (v27 == ++v26)
      goto LABEL_27;
  }
}

uint64_t AddToWordElems(uint64_t a1, char *__s, int a3, int a4, uint64_t a5)
{
  int v10;
  _BYTE *v11;
  uint64_t result;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v10 = strlen(__s);
  if (!a3 || a4 || (v11 = **(_BYTE ***)(a1 + 144)) == 0 || SLstrcmp(v11, (unsigned __int8 *)__s))
  {
    result = (uint64_t)malloc_type_calloc((__int16)v10 + 1, 1uLL, 0x100004077774924uLL);
    *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a3) = result;
    if (!result)
      return result;
    strcpy(*(char **)(*(_QWORD *)(a1 + 144) + 8 * a3), __s);
    if (v10 << 16 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8 * a3);
        v15 = *(unsigned __int8 *)(v14 + v13);
        if ((*(_DWORD *)(a5 + 4 * v15) & 0x40000000) != 0)
          LOBYTE(v15) = v15 + 32;
        *(_BYTE *)(v14 + v13++) = v15;
      }
      while ((__int16)v10 > v13);
    }
    if (!a4)
      ++*(_WORD *)(a1 + 136);
  }
  return 1;
}

uint64_t CreateExpTok(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = (uint64_t)malloc_type_calloc(1uLL, 0xB8uLL, 0x10B00409DE433CAuLL);
  *(_QWORD *)(a1 + 176) = result;
  if (result)
  {
    *(_QWORD *)(result + 152) = *(_QWORD *)(a1 + 152);
    *(_OWORD *)(result + 72) = *(_OWORD *)(a1 + 72);
    v3 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(result + 168) = a1;
    *(_QWORD *)(result + 176) = v3;
    if (v3)
      *(_QWORD *)(v3 + 168) = result;
    return 1;
  }
  return result;
}

uint64_t PRmapost(unsigned int a1, uint64_t a2, unsigned int a3, unsigned int a4, __int16 **a5, char a6, uint64_t a7, __int16 a8, __int128 *a9, __int128 *a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  size_t v17;
  __int16 *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  size_t v22;
  __int16 *v23;
  __int128 v24;
  __int128 v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 *v30;
  _QWORD *v31;
  _QWORD *i;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unsigned __int8 *v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  __int16 v48;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;
  char *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  char *v65;
  unsigned int v66;
  unint64_t v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __int16 v73;
  char v74;
  char v75;
  unint64_t v76;
  int v77;
  int v78;
  char *v79;
  char *v80;
  int v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  _BOOL4 v86;
  int v87;
  char *v88;
  char *v89;
  unsigned __int8 v90;
  unsigned __int16 v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *k;
  int v98;
  unsigned __int8 v99;
  int v100;
  char *m;
  int v102;
  unsigned __int8 v103;
  int v104;
  uint64_t v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  const char *v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  _BYTE *v116;
  uint64_t v117;
  char *v118;
  char *j;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  int v124;
  unsigned __int16 v125;
  _BYTE *v126;
  char *v127;
  char *v128;
  int v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  unsigned __int16 v133;
  int v134;
  uint64_t v135;
  int v136;
  unsigned __int8 *v137;
  unsigned __int8 v138;
  unsigned __int8 *v139;
  int v140;
  const char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned __int16 v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  char *v158;
  char v159;
  int v160;
  uint64_t v161;
  char *v162;
  int v163;
  const char *v164;
  char *v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  int v169;
  _BYTE *v170;
  uint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int16 v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  int v185;
  unsigned int v186;
  unsigned __int8 *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned __int8 v190;
  int v191;
  unint64_t v192;
  unsigned int v194;
  uint64_t v196;
  uint64_t v197;
  unint64_t v199;
  __int16 **v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int16 v205;
  _DWORD v206[2];
  unsigned int v207;
  unsigned __int16 __dst;
  char v209;
  char __s[16];
  __int128 v211;
  __int128 v212;
  uint64_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v205 = 0;
  if ((a6 & 0x10) != 0)
  {
    v17 = *(unsigned __int8 *)(a7 + 1);
    v18 = *a5;
    v19 = a10[1];
    v201 = *a10;
    v202 = v19;
    v20 = a9[1];
    *(_OWORD *)__s = *a9;
    v211 = v20;
    v212 = a9[2];
    v213 = *((_QWORD *)a9 + 6);
    EvaActionMacro(v17, v18, (uint64_t)&v201, (uint64_t)__s, a11);
    if (*(char *)(a7 + 1) < 0)
    {
      v21 = (char *)(a7 + 2);
      do
      {
        v22 = *v21;
        v23 = *a5;
        v24 = a10[1];
        v201 = *a10;
        v202 = v24;
        v25 = a9[1];
        *(_OWORD *)__s = *a9;
        v211 = v25;
        v212 = a9[2];
        v213 = *((_QWORD *)a9 + 6);
        EvaActionMacro(v22, v23, (uint64_t)&v201, (uint64_t)__s, a11);
        v26 = *v21++;
      }
      while (v26 < 0);
    }
  }
  v200 = a5;
  v27 = 0;
  v28 = (uint64_t)*a5;
  v29 = a9[1];
  v201 = *a9;
  v202 = v29;
  v203 = a9[2];
  v204 = *((_QWORD *)a9 + 6);
  while (1)
  {
    if (!*((_BYTE *)&v201 + v27))
    {
LABEL_16:
      v33 = (uint64_t *)v200;
      goto LABEL_17;
    }
    __s[0] = 0;
    v30 = &v201 + v27;
    v31 = (_QWORD *)*((_QWORD *)v30 + 1);
    if (v31)
    {
      for (i = (_QWORD *)*((_QWORD *)v30 + 2); v31 != i; v31 = (_QWORD *)v31[10])
      {
        if (v31[3])
        {
          strlen(__s);
          __strncat_chk();
          if (v31[5])
          {
            strlen(__s);
            __strncat_chk();
          }
        }
      }
      strlen(__s);
      __strncat_chk();
    }
    if (PRaddRefs(a12, v28, __s, 1u, (unsigned __int16)(v27 + 1)))
      break;
    if (++v27 == 3)
      goto LABEL_16;
  }
  v33 = (uint64_t *)v200;
  if (*(_DWORD *)(*(_QWORD *)(a12 + 32) + 4))
    return 0;
LABEL_17:
  v34 = *v33;
  v201 = *a10;
  v35 = *((_QWORD *)a10 + 3);
  v196 = *((_QWORD *)a10 + 2);
  v197 = v34;
  v207 = 0;
  *(_DWORD *)((char *)v206 + 3) = -911886373;
  v206[0] = -612264979;
  v36 = a13;
  v37 = *(_BYTE *)(a13 + 20);
  v38 = (unsigned __int8 *)(*(_QWORD *)(a2 + 48)
                          + ((unsigned __int16)(4
                                              * (a8
                                               + (bswap32(*(unsigned __int16 *)(*(_QWORD *)(a2 + 40) + 2 * a3)) >> 16))
                                              - 4) & 0xFFFC));
  v39 = (unsigned __int8 *)(*(_QWORD *)(a2 + 64)
                          + ((*v38 << 24) | ((unint64_t)v38[1] << 16) | ((unint64_t)v38[2] << 8) | v38[3]));
  v40 = *v39;
  v41 = a11;
  if (v40 < 0x40)
    goto LABEL_37;
  v42 = 0;
  v43 = v40 >> 6;
  v44 = v39 + 1;
  do
  {
    v45 = *v44++;
    v42 = v45 | (v42 << 8);
    --v43;
  }
  while (v43);
  v46 = *(_DWORD *)a2;
  if (SLSeek(*(_DWORD *)a2, *(_DWORD *)(a2 + 4) + 4 * v42, 0) == 8)
  {
    v47 = *(_QWORD *)(a12 + 32);
    *(_QWORD *)v47 = 0xDC0000006FLL;
    v48 = 665;
LABEL_36:
    *(_WORD *)(v47 + 8) = v48;
    goto LABEL_37;
  }
  if (SLFRead(v46, 2, &__dst, &v207) == 8 || v207 != 2)
  {
    v47 = *(_QWORD *)(a12 + 32);
    *(_QWORD *)v47 = 0xDC00000070;
    v48 = 666;
    goto LABEL_36;
  }
  v209 = 0;
  v51 = __rev16(__dst);
  v52 = (unsigned __int8 *)malloc_type_calloc(v51 + 4, 1uLL, 0x100004077774924uLL);
  if (!v52)
  {
    v47 = *(_QWORD *)(a12 + 32);
    *(_QWORD *)v47 = 0xDC00000078;
    v48 = 667;
    goto LABEL_36;
  }
  v53 = v52;
  v190 = v37;
  if (SLFRead(v46, v51 + 3, v52, &v207) == 8 || v207 != v51 + 3)
  {
    free(v53);
    v47 = *(_QWORD *)(a12 + 32);
    *(_QWORD *)v47 = 0xDC00000070;
    v48 = 668;
    goto LABEL_36;
  }
  v53[v51 + 3] = 0;
  v64 = *(unsigned __int16 *)v53;
  v187 = v53;
  v65 = (char *)(v53 + 3);
  v66 = v51;
  v67 = v53[2];
  SLcrypt(v53 + 3, v66, (uint64_t)v206, 7);
  if (v67 < 0x40)
  {
    v68 = 0;
    v36 = a13;
    goto LABEL_284;
  }
  v69 = bswap32(v64) >> 16;
  v199 = v67 >> 6;
  v70 = v196;
  do
  {
    v71 = v70;
    if (*(_BYTE *)(v70 + 51) != 5)
      break;
    v70 = *(_QWORD *)(v70 + 176);
  }
  while (v70);
  v189 = v71;
  v72 = 0;
  v73 = 0;
  v188 = (a4 >> 2) & 0x1F;
  v194 = v67 >> 1;
  v191 = v67;
  do
  {
    if ((_BYTE)v72)
      v74 = v67;
    else
      v74 = v69;
    v75 = v194;
    if (v72 != 1)
      v75 = v74;
    *(_BYTE *)(v197 + v72 + 32) = (unsigned __int16)v69 >> 13;
    if ((v69 & 0x800) != 0)
    {
      v192 = v72;
      v82 = *v65;
      v83 = v196;
      if (v196 == v35)
      {
        v89 = 0;
      }
      else
      {
        v84 = 0;
        v85 = v196;
        v86 = v82 == 7;
        while (1)
        {
          if (*(_WORD *)(v85 + 32))
          {
            v87 = *(unsigned __int16 *)(v85 + 32) + v84;
            if (*(_QWORD *)(v85 + 40))
              ++v87;
          }
          else
          {
            v87 = v84 + strlen(**(const char ***)(v85 + 144));
          }
          if (v85 == v35)
            break;
          if (v82 != 3)
            v87 += *(unsigned __int16 *)(v85 + 48);
          v84 = v87 + v86;
          v85 = *(_QWORD *)(v85 + 80);
        }
        v88 = (char *)malloc_type_calloc(2 * (unsigned __int16)(v87 + v86) + 2, 1uLL, 0x100004077774924uLL);
        if (!v88)
        {
          v94 = *(_QWORD *)(a12 + 32);
          *(_QWORD *)v94 = 0xDC00000078;
          *(_WORD *)(v94 + 8) = 663;
          v33 = (uint64_t *)v200;
LABEL_269:
          v68 = 0;
          ++v65;
          LODWORD(v67) = v191;
          v72 = v192 + 1;
          goto LABEL_270;
        }
        v89 = v88;
        *v88 = 0;
        v33 = (uint64_t *)v200;
        v83 = v196;
      }
      v91 = v73 + 1;
      switch(v82)
      {
        case 3:
          v92 = v83;
          if (v83 != v35)
          {
            while (1)
            {
              v93 = *(const char **)(v92 + 24);
              if (!v93)
                v93 = **(const char ***)(v92 + 144);
              strcat(v89, v93);
              if (v92 == v35)
                break;
              v92 = *(_QWORD *)(v92 + 80);
            }
            goto LABEL_266;
          }
          v153 = *(char **)(v83 + 24);
          if (!v153)
            v153 = **(char ***)(v83 + 144);
          goto LABEL_262;
        case 4:
          v105 = v83;
          if (v83 == v35)
          {
            v153 = *(char **)(v83 + 16);
            goto LABEL_262;
          }
          while (1)
          {
            v106 = *(const char **)(v105 + 16);
            if (!v106)
              v106 = **(const char ***)(v105 + 144);
            strcat(v89, v106);
            if (v105 == v35)
              break;
            v107 = *(const char **)(v105 + 40);
            if (v107)
              strcat(v89, v107);
            v105 = *(_QWORD *)(v105 + 80);
          }
          goto LABEL_266;
        case 5:
          v108 = v83;
          if (v83 != v35)
          {
            do
            {
              v109 = *(char **)(v108 + 24);
              if (v109)
              {
                if (!*(_BYTE *)(v108 + 51))
                {
                  v110 = *v109;
                  if ((*(_DWORD *)(a11 + 4 * v110) & 0x20000000) != 0)
                    LOBYTE(v110) = v110 - 32;
                  *v109 = v110;
                  v109 = *(char **)(v108 + 24);
                }
                strcat(v89, v109);
                v111 = *(const char **)(v108 + 40);
                if (v111)
                  strcat(v89, v111);
                if (!*(_BYTE *)(v108 + 51))
                {
                  v112 = *(_BYTE **)(v108 + 24);
                  v113 = *v112;
                  if ((*(_DWORD *)(a11 + 4 * v113) & 0x40000000) != 0)
                    LOBYTE(v113) = v113 + 32;
                  *v112 = v113;
                }
                v108 = *(_QWORD *)(v108 + 80);
              }
            }
            while (v108 != v35);
            v114 = *(char **)(v35 + 24);
            if (v114)
            {
              if (!*(_BYTE *)(v35 + 51))
              {
                v115 = *v114;
                if ((*(_DWORD *)(a11 + 4 * v115) & 0x20000000) != 0)
                  LOBYTE(v115) = v115 - 32;
                *v114 = v115;
                v114 = *(char **)(v35 + 24);
              }
              strcat(v89, v114);
              if (!*(_BYTE *)(v35 + 51))
              {
                v116 = *(_BYTE **)(v35 + 24);
                v117 = *v116;
                if ((*(_DWORD *)(a11 + 4 * v117) & 0x40000000) != 0)
                  LOBYTE(v117) = v117 + 32;
                *v116 = v117;
              }
            }
            goto LABEL_266;
          }
          if ((a1 & 0x80000000) != 0)
          {
            if (!*(_BYTE *)(v83 + 51))
            {
              v170 = *(_BYTE **)(v83 + 24);
              v171 = *v170;
              if ((*(_DWORD *)(a11 + 4 * v171) & 0x20000000) != 0)
                LOBYTE(v171) = v171 - 32;
              *v170 = v171;
            }
            PRaddAlts(a12, v197, *(char **)(v83 + 24), 0, 1uLL, v91);
            if (!*(_BYTE *)(v83 + 51))
            {
              v172 = *(_BYTE **)(v83 + 24);
              v173 = *v172;
              if ((*(_DWORD *)(a11 + 4 * v173) & 0x40000000) != 0)
                LOBYTE(v173) = v173 + 32;
              *v172 = v173;
            }
            goto LABEL_269;
          }
          v154 = *(_QWORD *)(v83 + 80);
          if (v154)
          {
            v155 = *(_QWORD *)(v154 + 168);
          }
          else
          {
            v175 = *(_QWORD *)(v83 + 176);
            do
            {
              v155 = v175;
              v175 = *(_QWORD *)(v175 + 176);
            }
            while (v175);
          }
          if (!*(_WORD *)(v196 + 32))
            goto LABEL_261;
          v176 = 0;
          v177 = (unsigned __int16)strlen(*(const char **)(*(_QWORD *)(v155 + 144) + 8 * a1));
          while (SLstrncmp((_BYTE *)(*(_QWORD *)(v196 + 16) + v176), *(unsigned __int8 **)(*(_QWORD *)(v155 + 144) + 8 * a1), v177))
          {
            if (++v176 >= (unint64_t)*(unsigned __int16 *)(v196 + 32))
              goto LABEL_261;
          }
          v178 = *(_QWORD *)(v196 + 24);
          if (v178)
          {
            v179 = *(unsigned __int8 *)(v178 + v176);
            if ((*(_DWORD *)(a11 + 4 * v179) & 0x20000000) != 0)
            {
              *(_BYTE *)(v178 + v176) = v179 - 32;
              PRaddAlts(a12, v197, *(char **)(v196 + 24), 0, 1uLL, v91);
              v181 = *(unsigned __int8 *)(v178 + v176);
              if ((*(_DWORD *)(a11 + 4 * v181) & 0x40000000) != 0)
                LOBYTE(v181) = v181 + 32;
              *(_BYTE *)(v178 + v176) = v181;
              goto LABEL_269;
            }
          }
LABEL_261:
          v153 = *(char **)(v196 + 24);
LABEL_262:
          PRaddAlts(a12, v197, v153, 0, 1uLL, v91);
          goto LABEL_269;
        case 6:
          v118 = *(char **)(v83 + 24);
          for (j = strchr(v118, 45); j; j = strchr(v118, 45))
            *j = 32;
          PRaddAlts(a12, v197, v118, 0, 1uLL, (unsigned __int16)(v73 + 1));
          while (1)
          {
            v120 = strchr(v118, 32);
            if (!v120)
              break;
            *v120 = 45;
          }
          goto LABEL_269;
        case 7:
          if (v83 == v35)
            v89 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
          v121 = strcat(v89, *(const char **)(v83 + 24));
          *(_WORD *)&v89[strlen(v121)] = 46;
          if (v83 != v35)
          {
            v122 = v83;
            do
            {
              *(_WORD *)&v89[strlen(v89)] = 32;
              v122 = *(_QWORD *)(v122 + 80);
              v123 = strcat(v89, *(const char **)(v122 + 24));
              *(_WORD *)&v89[strlen(v123)] = 46;
            }
            while (v122 != v35);
          }
          v124 = v91;
          goto LABEL_267;
        case 8:
          v125 = 0;
          v126 = *(_BYTE **)(v83 + 24);
          while (2)
          {
            if (*v126 == 46)
            {
              ++v125;
LABEL_164:
              ++v126;
              continue;
            }
            break;
          }
          if (*v126)
            goto LABEL_164;
          v142 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + (unint64_t)v125 + 1, 1uLL, 0x100004077774924uLL);
          v89 = v142;
          v143 = *(unsigned __int16 *)(v83 + 32);
          if (*(_WORD *)(v83 + 32))
          {
            v144 = 0;
            v145 = 0;
            do
            {
              v146 = *(unsigned __int8 *)(*(_QWORD *)(v83 + 24) + v144);
              v142[(unsigned __int16)v145] = v146;
              if (v146 == 46)
                v142[(unsigned __int16)++v145] = 32;
              ++v144;
              ++v145;
            }
            while (v143 != v144);
          }
          goto LABEL_266;
        case 9:
          if (v83 != v35)
          {
            strcpy(v89, *(const char **)(v83 + 24));
            goto LABEL_266;
          }
          v156 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 1, 1uLL, 0x100004077774924uLL);
          if (!v156)
          {
            v174 = *(_QWORD *)(a12 + 32);
            *(_QWORD *)v174 = 0xDC00000078;
            *(_WORD *)(v174 + 8) = 664;
            goto LABEL_269;
          }
          v89 = v156;
          strcpy(v156, *(const char **)(v83 + 24));
          v157 = *(unsigned __int16 *)(v83 + 32);
          if (*(_WORD *)(v83 + 32))
          {
            v152 = 0;
            v158 = v89;
            do
            {
              v160 = *v158++;
              v159 = v160;
              if (v160 != 46)
              {
                v161 = v152++;
                v89[v161] = v159;
              }
              --v157;
            }
            while (v157);
          }
          else
          {
            v152 = 0;
          }
          goto LABEL_258;
        case 10:
          v127 = *(char **)(v83 + 24);
          v128 = &v127[*(unsigned __int16 *)(v83 + 32)];
          v129 = *(v128 - 1);
          if (v129 == 115)
          {
            if (*(v128 - 2) == 39)
            {
              *(v128 - 2) = 0;
              PRaddAlts(a12, v197, v127, 0, 1uLL, (unsigned __int16)(v73 + 1));
              v127[*(unsigned __int16 *)(v83 + 32) - 2] = 39;
            }
          }
          else if (v129 == 39)
          {
            *(v128 - 1) = 0;
            PRaddAlts(a12, v197, v127, 0, 1uLL, (unsigned __int16)(v73 + 1));
            v127[*(unsigned __int16 *)(v83 + 32) - 1] = 39;
          }
          goto LABEL_269;
        case 12:
          if (v83 == v35)
            v89 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
          v136 = 0;
          while (1)
          {
            v137 = *(unsigned __int8 **)(v83 + 24);
            if (v137)
            {
              if (*(_BYTE *)(v83 + 51) != 2)
              {
                v138 = *v137;
                if (*v137)
                {
                  v139 = v137 + 1;
                  do
                  {
                    if ((*(_DWORD *)(a11 + 4 * v138) & 0x20000000) != 0)
                      v138 -= 32;
                    v89[(unsigned __int16)v136++] = v138;
                    v140 = *v139++;
                    v138 = v140;
                  }
                  while (v140);
                }
              }
              if (v83 != v35)
              {
                v141 = *(const char **)(v83 + 40);
                if (v141)
                {
                  strcat(v89, v141);
                  ++v136;
                }
              }
            }
            if (v83 == v35)
              break;
            v83 = *(_QWORD *)(v83 + 80);
          }
          v147 = (unsigned __int16)v136;
          goto LABEL_265;
        default:
          if ((v82 - 13) <= 1)
          {
            if (v83 != v35)
              goto LABEL_269;
            v130 = *(unsigned __int16 *)(v83 + 32);
            v131 = (char *)malloc_type_calloc(v130 + 1, 1uLL, 0x100004077774924uLL);
            v89 = v131;
            if (v130)
            {
              v132 = 0;
              v133 = 0;
              do
              {
                v134 = *(unsigned __int8 *)(*(_QWORD *)(v83 + 24) + v132);
                if (v134 == 58)
                {
                  if (v82 == 14)
                    break;
                }
                else
                {
                  v135 = v133++;
                  v131[v135] = v134;
                }
                ++v132;
              }
              while (v130 != v132);
            }
            else
            {
              v133 = 0;
            }
            v147 = (unsigned __int16)(v133 - ((_DWORD)v130 == v133));
            goto LABEL_265;
          }
          if (v82 == 16)
          {
            v162 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v197 + 2) + 2, 1uLL, 0x100004077774924uLL);
            v89 = v162;
            if (v83 == v35)
              goto LABEL_268;
            v163 = 0;
            *v162 = 0;
            while (1)
            {
              v164 = *(const char **)(v83 + 24);
              if (*v164 == 47 && (unsigned __int16)++v163 == 2)
              {
                v163 = 2;
                v164 = " ";
              }
              strcat(v89, v164);
              if (v83 == v35)
                break;
              v83 = *(_QWORD *)(v83 + 80);
            }
          }
          else
          {
            if (v82 == 15)
            {
              if (v83 != v35)
                goto LABEL_268;
              v148 = (char *)malloc_type_calloc(*(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
              v89 = v148;
              v149 = *(unsigned __int16 *)(v83 + 32);
              if (*(_WORD *)(v83 + 32))
              {
                v150 = 0;
                while (1)
                {
                  v151 = *(unsigned __int8 *)(*(_QWORD *)(v83 + 24) + v150);
                  if ((*(_DWORD *)(a11 + 4 * v151) & 0x8000000) == 0)
                    break;
                  v148[v150++] = v151;
                  if (v149 == v150)
                  {
                    v148[v149] = 58;
                    v152 = v149 + 1;
                    goto LABEL_258;
                  }
                }
                v180 = v150;
              }
              else
              {
                v180 = 0;
              }
              v182 = v180;
              v148[v180] = 58;
              v152 = v180 + 1;
              if (v149 > v180)
              {
                do
                  v148[v152++] = *(_BYTE *)(*(_QWORD *)(v83 + 24) + v182++);
                while (v149 != v182);
              }
LABEL_258:
              v147 = v152;
LABEL_265:
              v89[v147] = 0;
              goto LABEL_266;
            }
            if ((v82 - 17) > 1)
              goto LABEL_269;
            if (v83 != v35 || *(_BYTE *)(v83 + 51) != 2)
              goto LABEL_268;
            v165 = (char *)malloc_type_calloc(3 * *(unsigned __int16 *)(v83 + 32) + 2, 1uLL, 0x100004077774924uLL);
            v89 = v165;
            *v165 = 0;
            if (*(_WORD *)(v83 + 32))
            {
              v166 = 0;
              v167 = 0;
              v168 = (unsigned __int16)(*(_WORD *)(v83 + 32) - 1);
              while (1)
              {
                v169 = v167 + 1;
                v165[(unsigned __int16)v167] = *(_BYTE *)(*(_QWORD *)(v83 + 24) + v166);
                if (v82 == 18)
                {
                  v165[(unsigned __int16)(v167 + 1)] = 46;
                  v169 = v167 + 2;
                }
                if (v168 == v166)
                  break;
                v167 = v169 + 1;
                v165[(unsigned __int16)v169] = 32;
                ++v166;
              }
            }
          }
LABEL_266:
          v124 = v91;
LABEL_267:
          PRaddAlts(a12, v197, v89, 0, 1uLL, v124);
LABEL_268:
          free(v89);
          goto LABEL_269;
      }
    }
    v76 = v72;
    v77 = v75 & 1;
    if ((v69 & 0x1000) != 0)
    {
      v90 = *(_BYTE *)(v189 + 51);
      *(_OWORD *)__s = v201;
      *(_QWORD *)&v211 = v196;
      *((_QWORD *)&v211 + 1) = v35;
      v72 = v76 + 1;
      v68 = CheckAltStr(v65, v197, a12, (uint64_t *)__s, a11, (v76 + 1), v90, v75 & 1, v190);
    }
    else
    {
      if (v188 < 2)
      {
LABEL_80:
        v80 = v65 + 1;
        if (*v65 != 124)
          v80 = v65;
        v65 = v80 - 1;
        do
          v81 = *++v65;
        while (v81 == 32);
      }
      else
      {
        v78 = 1;
        while (1)
        {
          v79 = strchr(v65, 124);
          if (!v79)
            break;
          v65 = v79 + 1;
          if (++v78 >= v188)
            goto LABEL_80;
        }
        v65 = 0;
      }
      v95 = strchr(v65, 124);
      if (v95)
      {
        v96 = v95;
        *v95 = 0;
        for (k = v95; ; *k = 0)
        {
          v98 = *--k;
          if (v98 != 32)
            break;
        }
        v99 = *(_BYTE *)(v189 + 51);
        *(_OWORD *)__s = v201;
        *(_QWORD *)&v211 = v196;
        *((_QWORD *)&v211 + 1) = v35;
        v100 = v77;
        v72 = v76 + 1;
        v68 = CheckAltStr(v65, v197, a12, (uint64_t *)__s, a11, (v76 + 1), v99, v100, v190);
        v65 = v96 + 1;
      }
      else
      {
        for (m = &v65[strlen(v65)]; ; *m = 0)
        {
          v102 = *--m;
          if (v102 != 32)
            break;
        }
        v103 = *(_BYTE *)(v189 + 51);
        *(_OWORD *)__s = v201;
        *(_QWORD *)&v211 = v196;
        *((_QWORD *)&v211 + 1) = v35;
        v104 = v77;
        v72 = v76 + 1;
        v68 = CheckAltStr(v65, v197, a12, (uint64_t *)__s, a11, (v76 + 1), v103, v104, v190);
      }
      LODWORD(v67) = v191;
    }
LABEL_270:
    v65 += strlen(v65) + 1;
    v41 = a11;
    if (v72 >= v199)
      break;
    LOWORD(v69) = 32 * v69;
    v73 = v72;
  }
  while (!v68);
  v36 = a13;
  v183 = *(unsigned __int8 *)(a13 + 20);
  if (v183 <= 0xC && ((1 << v183) & 0x1320) != 0)
  {
    *(_OWORD *)__s = v201;
    *(_QWORD *)&v211 = v196;
    *((_QWORD *)&v211 + 1) = v35;
    v68 = PRAltMod(a12, a13, v197, (uint64_t)__s);
  }
LABEL_284:
  if (v68 || (v184 = (v67 >> 4) & 3) == 0)
  {
LABEL_290:
    if (!v68)
    {
      v186 = (v67 >> 2) & 3;
      if (v186)
        PRaddFils(a12, v197, v65, v186, 4);
    }
  }
  else if (!PRaddFils(a12, v197, v65, (v67 >> 4) & 3, 1))
  {
    v185 = 0;
    do
    {
      v65 += strlen(v65) + 1;
      ++v185;
    }
    while (v184 > v185);
    v68 = 0;
    v36 = a13;
    goto LABEL_290;
  }
  free(v187);
LABEL_37:
  v55 = *((_QWORD *)a10 + 3);
  if (v55)
  {
    v56 = *(_QWORD *)(v55 + 40);
    if (v56)
      LOWORD(v56) = *(_WORD *)(v55 + 48);
  }
  else
  {
    LOWORD(v56) = 0;
  }
  v57 = *v33;
  v58 = *(_WORD *)(*v33 + 2) - v56;
  *(_WORD *)(v57 + 2) = v58;
  *(_WORD *)(v57 + 4) = *(_WORD *)v57;
  *(_WORD *)(v57 + 6) = v58;
  if (*((_QWORD *)a10 + 2))
  {
    v59 = *(char **)(v57 + 24);
    if (v59)
    {
      v60 = *(unsigned __int8 *)(v36 + 20);
      if (v60 == 6)
      {
        if (*(_WORD *)(v36 + 16) == 64)
        {
          CalExtBytesAfterCnv(v59, &v205, 223);
          if (v205)
            AltOneToMultiChrCnv(*(_QWORD *)(*v33 + 24), 223, v205, a12);
        }
        v60 = *(unsigned __int8 *)(v36 + 20);
      }
      if (v60 == 5)
      {
        if ((*(_WORD *)(v36 + 18) & 0x10) != 0)
        {
          CalExtBytesAfterCnv(*(char **)(*v33 + 24), &v205, 247);
          if (v205)
            AltOneToMultiChrCnv(*(_QWORD *)(*v33 + 24), 247, v205, a12);
          CalExtBytesAfterCnv(*(char **)(*v33 + 24), &v205, 230);
          if (v205)
            AltOneToMultiChrCnv(*(_QWORD *)(*v33 + 24), 230, v205, a12);
        }
        if ((*(_WORD *)(v36 + 18) & 0x40) != 0)
          ToUpUnaccentedCnv(**(_BYTE ***)(*v33 + 24), *(__int16 *)(*(_QWORD *)(*v33 + 24) + 24), 5, v41);
      }
      if (*(_BYTE *)(v36 + 20) == 8 && (*(_WORD *)(v36 + 18) & 0x40) != 0)
        ToUpUnaccentedCnv(**(_BYTE ***)(*v33 + 24), *(__int16 *)(*(_QWORD *)(*v33 + 24) + 24), 8, v41);
    }
    v61 = *((_QWORD *)a10 + 2);
    v62 = *(_QWORD *)(v61 + 160);
    v63 = *v33;
    if (v62)
    {
      *(_QWORD *)(v63 + 40) = v62;
      v63 = *v33;
    }
    *(_QWORD *)(v61 + 160) = v63;
    *v33 = 0;
  }
  return 1;
}

size_t EvaActionMacro(size_t result, __int16 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;

  v6 = *(_QWORD *)(a3 + 16);
  switch((_DWORD)result)
  {
    case 0xB:
      if ((*(_BYTE *)(v6 + 93) & 0x40) == 0)
        return result;
      a2[4] = *(_WORD *)(v6 + 8);
      result = strlen(*(const char **)(*(_QWORD *)(v6 + 144) + 8 * *(unsigned __int16 *)(v6 + 136)));
      goto LABEL_31;
    case 2:
      v9 = *(_QWORD *)(a4 + 8);
      if (!v9)
        return result;
      v10 = *(_QWORD *)(a4 + 16);
      v11 = *(__int16 *)(v9 + 8);
      a2[4] = *(_WORD *)(v9 + 8);
      if (v9 == v10)
      {
        v12 = 0;
        v10 = v9;
      }
      else
      {
        v12 = 0;
        v13 = v9;
        do
        {
          v12 += *(unsigned __int16 *)(v13 + 32);
          if (*(_QWORD *)(v13 + 40))
            v12 += *(unsigned __int16 *)(v13 + 48);
          v13 = *(_QWORD *)(v13 + 80);
        }
        while (v13 != v10);
      }
      result = *(unsigned __int16 *)(v10 + 32) + v12;
      if (*(_WORD *)(v10 + 48) && (*(_DWORD *)(v10 + 4) & 0x80000000) == 0)
      {
        result = result + *(unsigned __int16 *)(v10 + 48);
        goto LABEL_31;
      }
      if (v11 < 1)
        goto LABEL_31;
      v17 = *(_QWORD *)(v9 + 72);
      if (!v17)
        goto LABEL_31;
      v18 = *(unsigned __int16 *)(v17 + 48);
      if (!v18)
        goto LABEL_31;
      result = (v18 + result);
      v8 = v11 - v18;
      break;
    case 1:
      v7 = *(_QWORD *)(a3 + 24);
      if (!*(_QWORD *)(v7 + 40))
      {
        v14 = *(_QWORD *)(v7 + 80);
        if (v14)
        {
          if ((*(_DWORD *)(a5 + 4 * **(unsigned __int8 **)(v14 + 16)) & 0x1000000) != 0)
          {
            v15 = *(_QWORD *)(v6 + 72);
            if (v15)
            {
              if (*(_QWORD *)(v15 + 40))
              {
                v16 = *(unsigned __int16 *)(v15 + 48);
                a2[4] = *a2 - v16;
                result = (unsigned __int16)a2[1] + v16;
                goto LABEL_31;
              }
            }
          }
        }
      }
      result = (unsigned __int16)a2[1];
      if ((*(_DWORD *)(v7 + 4) & 0x80000000) != 0)
        result = result - *(unsigned __int16 *)(v7 + 48);
      v8 = *a2;
      break;
    default:
      return result;
  }
  a2[4] = v8;
LABEL_31:
  a2[5] = result;
  return result;
}

uint64_t CheckAltStr(const char *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, int a6, unsigned __int8 a7, int a8, unsigned __int8 a9)
{
  char *v14;
  uint64_t v15;
  signed int v16;
  char v17;
  __int16 v18;
  int v19;
  char v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 v37;
  unsigned int v38;
  unsigned __int8 v39;
  int v40;
  __int16 v41;
  __int16 v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  char *v46;
  uint64_t v47;
  const char *v48;
  __int16 v49;
  _BOOL4 v50;
  uint64_t v51;
  __int16 v52;
  char *v53;
  char v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned __int8 v66;
  unsigned int v67;
  unsigned __int8 v68;
  int v69;
  int v70;
  int v71;
  int v72;
  __int16 v73;
  char v74;
  int v75;
  unsigned __int8 v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  __int16 *v81;
  __int16 v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  int v89;
  int v90;
  int v91;
  int v92;
  uint64_t v93;
  int v94;
  char *v95;
  unsigned __int8 v96;
  unsigned int v97;
  int v98;
  uint64_t v99;
  __int16 v101;
  _BOOL4 v102;
  __int16 v103;
  uint64_t v104;
  char v105;
  char *v106;
  int v107;
  unsigned __int8 v109;
  int v110;
  int v111;
  __int16 v112;
  uint64_t v113;
  uint64_t v115;
  int v116;
  char __s2[2];

  v14 = (char *)a1;
  v104 = *(_QWORD *)(a3 + 16);
  v15 = a4[3];
  v115 = a4[2];
  v16 = (strlen(a1) << 16) - 0x40000;
  v113 = a3;
  v109 = a7;
  v111 = a8;
  v17 = 0;
  if (v16 >= 0)
  {
    v18 = 0;
    v19 = v16 >> 16;
    do
    {
      if (SLstrncmp(&v14[v18], "POSTCLITIC", 10))
        v20 = SLstrncmp(&v14[v18], "STEM", 4) == 0;
      else
        v20 = 2;
      v17 |= v20;
      ++v18;
    }
    while (v19 >= v18);
  }
  v21 = a9;
  v22 = strlen(v14);
  v23 = *a4;
  if (*a4)
  {
    v24 = *(_QWORD *)(v23 + 152);
    if (!v24 || (*(_BYTE *)(v24 + 93) & 0x40) == 0)
    {
      if (*(_WORD *)(v23 + 136))
      {
        v25 = *(_QWORD *)(v23 + 16);
        v26 = v25 != 0;
        if (v25)
          v24 = *(_QWORD *)(v23 + 176);
        if (v24 && *(_WORD *)(v24 + 136))
        {
          v105 = 0;
          v27 = *(_WORD *)(v24 + 136) - 1;
          goto LABEL_33;
        }
        goto LABEL_31;
      }
LABEL_30:
      v26 = 0;
LABEL_31:
      v27 = 0;
      v41 = 0;
LABEL_36:
      v105 = 0;
      goto LABEL_37;
    }
    v29 = *(_QWORD *)(a2 + 72);
    if (v29)
    {
      v30 = *(_QWORD **)(v29 + 8);
      if (v30)
      {
        if (!SLstrncmp(v14, "REF", 3))
        {
          v31 = v14[3];
          v32 = v31 - 49;
          if (v31 >= 0x31)
          {
            if (*(__int16 *)(v24 + 32) < 1)
              goto LABEL_30;
            v33 = *(unsigned __int16 *)(v24 + 32);
            v34 = *(__int16 *)(v30[1] + 2 * v32);
            v35 = *(unsigned __int8 **)(v24 + 16);
            v36 = (unsigned __int8 *)(*v30 + v34);
            while (1)
            {
              v38 = *v36++;
              v37 = v38;
              v39 = v38 + 32;
              if ((*(_DWORD *)(a5 + 4 * v38) & 0x40000000) != 0)
                v37 = v39;
              v40 = *v35++;
              if (v40 != v37)
                break;
              if (!--v33)
                goto LABEL_30;
            }
          }
        }
      }
    }
    v26 = 0;
    v27 = *(_WORD *)(v24 + 136);
    v105 = 1;
    goto LABEL_33;
  }
  v28 = a4[1];
  if (!v28)
  {
    v26 = 0;
    v27 = 0;
    v41 = 0;
    v24 = 0;
    goto LABEL_36;
  }
  v24 = *(_QWORD *)(v28 + 176);
  if (!v24 || !*(_WORD *)(v24 + 136))
  {
    v27 = 0;
    v41 = 0;
    v105 = 0;
    v26 = 1;
    goto LABEL_37;
  }
  v105 = 0;
  v27 = *(_WORD *)(v24 + 136) - 1;
  v26 = 1;
LABEL_33:
  v41 = strlen(*(const char **)(*(_QWORD *)(v24 + 144) + 8 * v27));
LABEL_37:
  v42 = v41;
  if (!v41 && !v17)
  {
    v43 = 0;
    v44 = 0;
    goto LABEL_99;
  }
  v112 = v41;
  v103 = v27;
  if ((v17 & 1) != 0)
  {
    v101 = v22;
    v50 = v26;
    v24 = v115;
    if (v115 == v15)
    {
LABEL_49:
      v51 = *(_QWORD *)(v24 + 152);
      if (!*(_QWORD *)(v51 + 144))
        goto LABEL_51;
    }
    else
    {
      v24 = v115;
      while (1)
      {
        v51 = *(_QWORD *)(v24 + 152);
        if (*(_QWORD *)(v51 + 144))
          break;
        v24 = *(_QWORD *)(v24 + 176);
        if (v24 == v15)
        {
          v24 = v15;
          goto LABEL_49;
        }
      }
    }
    v46 = **(char ***)(*(_QWORD *)(v51 + 176) + 144);
    if (v46)
    {
LABEL_52:
      v52 = strlen(v46);
      v45 = v52;
      if (*(_BYTE *)(v51 + 51) == 3 && ((*(_DWORD *)(v51 + 52) << (*(_WORD *)(v51 + 32) - v52)) & 0x80000000) != 0)
        ReCapAltStr((unsigned __int8 *)v46, v104, v51, a5, a9);
      v26 = v50;
      v22 = v101;
      if ((v17 & 2) != 0)
        goto LABEL_42;
LABEL_56:
      v49 = 0;
      v48 = 0;
      goto LABEL_58;
    }
LABEL_51:
    v46 = *(char **)(*(_QWORD *)(v115 + 80) + 24);
    goto LABEL_52;
  }
  v45 = 0;
  v46 = 0;
  if ((v17 & 2) == 0)
    goto LABEL_56;
LABEL_42:
  v47 = *(_QWORD *)(v115 + 176);
  v48 = *(const char **)(v47 + 112);
  if (v48)
    v49 = strlen(*(const char **)(v47 + 112));
  else
    v49 = 0;
LABEL_58:
  v53 = (char *)malloc_type_calloc((__int16)(v42 + v22 + v45 + v49 + 2) + 1, 1uLL, 0x100004077774924uLL);
  if (!v53)
  {
    v56 = *(_QWORD *)(v113 + 32);
    *(_QWORD *)v56 = 0xDC00000078;
    *(_WORD *)(v56 + 8) = 661;
    return 220;
  }
  v44 = v53;
  v102 = v26;
  if (v112)
    v54 = v26;
  else
    v54 = 1;
  if ((v54 & 1) != 0)
    goto LABEL_63;
  v58 = *(_QWORD *)(a2 + 72);
  if (!v58
    || (v59 = *(_QWORD **)(v58 + 8)) == 0
    || SLstrncmp(v14, "REF", 3)
    || (v60 = v14[3], v61 = v60 - 49, v60 < 0x31))
  {
LABEL_76:
    strcpy(v44, *(const char **)(*(_QWORD *)(v24 + 144) + 8 * v103));
    if ((*(_BYTE *)(v24 + 93) & 0x40) != 0)
    {
      v55 = v112;
    }
    else
    {
      *(_WORD *)&v44[strlen(v44)] = 32;
      v55 = ++v112;
    }
    goto LABEL_79;
  }
  if (*(__int16 *)(v24 + 32) >= 1)
  {
    v62 = *(unsigned __int16 *)(v24 + 32);
    v63 = *(__int16 *)(v59[1] + 2 * v61);
    v64 = *(unsigned __int8 **)(v24 + 16);
    v65 = (unsigned __int8 *)(*v59 + v63);
    do
    {
      v67 = *v65++;
      v66 = v67;
      v68 = v67 + 32;
      if ((*(_DWORD *)(a5 + 4 * v67) & 0x40000000) != 0)
        v66 = v68;
      v69 = *v64++;
      if (v69 != v66)
        goto LABEL_76;
    }
    while (--v62);
  }
LABEL_63:
  v55 = 0;
LABEL_79:
  if (!*v14)
    goto LABEL_92;
  while (1)
  {
    if (!SLstrncmp(v14, "STEM", 4))
    {
      strcat(v44, v46);
      v14 += 4;
      v73 = v45;
      goto LABEL_89;
    }
    v70 = SLstrncmp(v14, "POSTCLITIC", 10);
    if (v48)
    {
      if (!v70)
        break;
    }
    v71 = *v14;
    if (v71 == 45)
    {
      v72 = SLstrncmp(v14 + 1, "POSTCLITIC", 10);
      if (!v48 && !v72)
        goto LABEL_92;
      LOBYTE(v71) = *v14;
    }
    ++v14;
    v44[v55] = v71;
    v73 = 1;
LABEL_89:
    v55 += v73;
    if (!*v14)
      goto LABEL_92;
  }
  strcat(v44, v48);
LABEL_92:
  v74 = v105;
  if (!v24)
    v74 = 1;
  if ((v74 & 1) != 0 || !v102)
  {
    v14 = v44;
    v43 = v112;
    v76 = v109;
    v75 = v111;
    v21 = a9;
  }
  else
  {
    *(_WORD *)&v44[strlen(v44)] = 32;
    v43 = v112;
    v21 = a9;
    if (*(_WORD *)(v24 + 136))
      strcat(v44, *(const char **)(*(_QWORD *)(v24 + 144) + 8 * (__int16)(*(_WORD *)(v24 + 136) - 1)));
    v14 = v44;
LABEL_99:
    v76 = v109;
    v75 = v111;
  }
  v77 = v76;
  if (v75 && (v78 = *(_QWORD *)(a2 + 72)) != 0)
  {
    v107 = a6;
    v79 = *(_QWORD *)(v78 + 8);
    v80 = *(const char **)v79;
    v81 = *(__int16 **)(v79 + 8);
    v82 = strlen(v14);
    v116 = v82;
    v106 = v44;
    v110 = v77;
    if (((v82 - 4) & 0x8000) == 0)
    {
      v83 = 0;
      v84 = (__int16)(v82 - 4);
      v85 = v82;
      while (SLstrncmp(&v14[(__int16)v83], "REF1", 4))
      {
        if (!SLstrncmp(&v14[(__int16)v83], "REF2", 4))
        {
          v83 += 4;
          v86 = v81[1];
          goto LABEL_111;
        }
        if (!SLstrncmp(&v14[(__int16)v83], "REF3", 4))
        {
          v83 += 4;
          v86 = v81[2];
          goto LABEL_111;
        }
        ++v83;
LABEL_112:
        if (v84 < (__int16)v83)
          goto LABEL_121;
      }
      v83 += 4;
      v86 = *v81;
LABEL_111:
      v85 = v85 + strlen(&v80[v86]) - 4;
      goto LABEL_112;
    }
    LOWORD(v85) = v82;
LABEL_121:
    v87 = (char *)malloc_type_calloc((__int16)v85 + 1, 1uLL, 0x100004077774924uLL);
    if (v87)
    {
      v88 = v87;
      *v87 = 0;
      __s2[1] = 0;
      if (v116 >= 1)
      {
        v89 = 0;
        while (1)
        {
          if (!SLstrncmp(&v14[(__int16)v89], "REF1", 4))
          {
            strcat(v88, v80);
            v90 = v89 + 4;
            v91 = v116;
            if (!*v80 && v14[(__int16)v90] == 32)
              v90 = v89 + 5;
            goto LABEL_138;
          }
          if (!SLstrncmp(&v14[(__int16)v89], "REF2", 4))
            break;
          if (!SLstrncmp(&v14[(__int16)v89], "REF3", 4))
          {
            strcat(v88, &v80[v81[2]]);
            v92 = v89 + 4;
            v93 = v81[2];
LABEL_134:
            v94 = v80[v93];
            v90 = v92;
            v91 = v116;
            if (!v94)
            {
              if (v14[(__int16)v92] == 32)
                v90 = v89 + 5;
              else
                v90 = v92;
            }
            goto LABEL_138;
          }
          __s2[0] = v14[(__int16)v89];
          strcat(v88, __s2);
          v90 = v89 + 1;
          v91 = v116;
LABEL_138:
          v89 = v90;
          if (v91 <= (__int16)v90)
            goto LABEL_139;
        }
        strcat(v88, &v80[v81[1]]);
        v92 = v89 + 4;
        v93 = v81[1];
        goto LABEL_134;
      }
LABEL_139:
      v44 = v106;
      if ((v110 - 1) <= 1)
      {
        v95 = v88;
        do
        {
          v97 = *v95++;
          v96 = v97;
          v98 = *(_DWORD *)(a5 + 4 * v97);
        }
        while ((v98 & 0x1000000) != 0);
        if ((v98 & 0x20000000) != 0)
          v96 -= 32;
        *(v95 - 1) = v96;
      }
      if (v88[(__int16)v85 - 1] == 32)
        v88[(__int16)v85 - 1] = 0;
      PRaddAlts(v113, a2, v88, 0, 1uLL, v107);
      free(v88);
    }
    else
    {
      v99 = *(_QWORD *)(v113 + 32);
      *(_QWORD *)v99 = 0xDC00000078;
      *(_WORD *)(v99 + 8) = 662;
      v44 = v106;
    }
    v57 = 0;
  }
  else
  {
    if (v76 == 1 || v76 == 3 && (*(_DWORD *)(v115 + 52) & 0x80000000) != 0)
      ReCapAltStr((unsigned __int8 *)v14, v104, v115, a5, v21);
    v57 = PRaddAlts(v113, a2, v14, 0, 1uLL, a6);
  }
  if (v43 || v17)
    free(v44);
  return v57;
}

unsigned __int8 *ReCapAltStr(unsigned __int8 *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;

  do
  {
    v6 = *result++;
    v5 = v6;
    v7 = *(_DWORD *)(a4 + 4 * v6);
  }
  while ((v7 & 0x1000000) != 0);
  if (a5 != 6)
    goto LABEL_23;
  if (*(_QWORD *)(a2 + 72) == a3 || *(_QWORD *)(a2 + 56) == a3)
  {
    v11 = (v7 & 0x20000000) == 0;
LABEL_24:
    if (!v11)
      v5 -= 32;
    *(result - 1) = v5;
    return result;
  }
  v8 = *(_QWORD *)(a3 + 168);
  if (!v8 || !*(_QWORD *)(v8 + 16))
    return result;
  v9 = *(_DWORD *)(v8 + 4);
  if (v9 > -1073217537)
  {
    if (v9 > -536870911)
    {
      if (v9 != -536870848)
      {
        v10 = -536870910;
LABEL_22:
        if (v9 != v10)
          return result;
      }
    }
    else if (v9 != -1073217536)
    {
      v10 = -1072693248;
      goto LABEL_22;
    }
LABEL_23:
    v11 = (v7 & 0x20000000) == 0;
    goto LABEL_24;
  }
  if (v9 == -2147483584 || v9 == -1073725440 || v9 == -1073709056)
    goto LABEL_23;
  return result;
}

uint64_t PRmatchr(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _BOOL4 v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  signed int v34;
  unsigned int v35;
  unsigned __int8 v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  unsigned int v44;
  _BOOL4 v45;
  char v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  char v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  _BOOL4 v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  int v66;
  char v67;
  uint64_t v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unsigned __int8 v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  unsigned int v79;
  int v80;
  unsigned __int16 v81;
  uint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  __int16 *v85;
  unsigned __int16 v86;
  unsigned __int16 v87;
  _WORD v88[25];
  _WORD v89[25];
  _WORD v90[25];
  _BYTE v91[25];
  _WORD v92[25];
  uint64_t v93[9];

  v2 = a1;
  v93[7] = *MEMORY[0x1E0C80C00];
  v85 = 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 56);
  if (!v4)
  {
    v64 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v64 = 0xE6FFFFFF89;
    *(_WORD *)(v64 + 8) = 640;
    return 230;
  }
  v5 = a2;
  v6 = *(unsigned __int16 *)(v3 + 14);
  v7 = *(_QWORD **)(a2 + 48);
  result = PRmkErr(a1, a2, &v85, 0, 0, 0, 0);
  if ((_DWORD)result)
    return result;
  LOBYTE(v69) = 0;
  v70 = v6;
  v67 = 0;
  v71 = v5;
  v72 = v2;
  v9 = v7;
  v77 = v7;
  while (1)
  {
    v10 = *(_QWORD *)(v2 + 32);
    v11 = *(_DWORD *)(v10 + 4);
    if ((v11 | 4) != 4)
      break;
    if (!v4)
      goto LABEL_98;
LABEL_11:
    v68 = v4;
    if (*((_DWORD *)v9 + 34))
    {
      v87 = 0;
      v86 = 0;
      v13 = v9[16];
      PRDerive(v2, v5, v4, 10, (uint64_t)v93, (uint64_t)v92, (uint64_t)v91, (uint64_t)v90, (uint64_t)v89, (uint64_t)v88, &v86);
      if (!v86)
      {
        v67 = 0;
        v9 = v77;
        goto LABEL_64;
      }
      v14 = 0;
      v67 = 0;
      v9 = v77;
      v76 = v13;
      while (1)
      {
        v81 = 0;
        v15 = 0;
        v75 = 0;
        v16 = 1;
        v74 = v14;
        while (2)
        {
          v17 = 0;
          v18 = 0;
          v73 = (unsigned __int16)v90[v14];
          v19 = (unsigned __int16)v92[v14];
          v20 = *((unsigned __int16 *)v93 + v14);
          v21 = *((unsigned __int16 *)v9 + 70);
          v22 = *((unsigned __int8 *)v9 + 24);
          v23 = v19 % v21;
          if (v21 >> 2 >= 0x753)
            v24 = 63;
          else
            v24 = 31;
          if (v21 < 0x9C4)
            v24 = 15;
          if (v21 < 0x3E8)
            v24 = 7;
          v25 = (v24 >> 1) - (v20 & v24);
          v26 = 2 * (v20 & v24);
          v79 = *((unsigned __int8 *)v9 + 24);
          v80 = v20;
          v78 = v26;
          while (1)
          {
            v27 = (unsigned __int8 *)(v13 - (unsigned __int16)v23 + 8 * (unsigned __int16)v23);
            v28 = __rev16(*((unsigned __int16 *)v27 + 1));
            if (!v28)
            {
LABEL_58:
              v2 = v72;
LABEL_59:
              v14 = v74;
              goto LABEL_60;
            }
            if (v28 != v20)
              goto LABEL_30;
            if (!(v16 & 1 | v17))
            {
              v17 = v81 == (unsigned __int16)v23;
LABEL_30:
              v25 += v26;
              v33 = v25 + v23;
              do
              {
                v23 = v33;
                v33 -= v21;
              }
              while (v21 <= (unsigned __int16)v23);
              goto LABEL_36;
            }
            v83 = v17;
            v29 = v15;
            v30 = *v27;
            v31 = v27[1];
            v32 = v27[4];
            if (!BinarySearch(v9[4], *((unsigned __int8 *)v9 + 26), 1, v27[4], 1, &v87))
            {
              v2 = v72;
              v47 = *(_QWORD *)(v72 + 32);
              *(_QWORD *)v47 = 0xE6FFFFFF8ELL;
              *(_WORD *)(v47 + 8) = 644;
              v13 = v76;
              v9 = v77;
              goto LABEL_59;
            }
            v15 = v29;
            if (v32 >= v29)
              break;
            v9 = v77;
LABEL_35:
            v13 = v76;
            v17 = v83;
            v22 = v79;
            v20 = v80;
            v26 = v78;
LABEL_36:
            if (v22 < v18++)
              goto LABEL_58;
          }
          v9 = v77;
          v34 = bswap32(*(_DWORD *)(v77[22] + 4 * v87)) + (v31 | (v30 << 8));
          v35 = *(unsigned __int8 *)(v77[23] + v34);
          if ((_DWORD)v32 == v29 && v35 <= v75)
            goto LABEL_35;
          v37 = v27[5];
          if ((v73 - 1) >= 0x3F)
            v38 = 63;
          else
            v38 = (unsigned __int16)(v73 - 1);
          if ((v37 & 0x3F) == v38)
          {
            v39 = v27[6];
            v14 = v74;
            v2 = v72;
            if (v88[v74] != 30)
            {
              v66 = v34;
              goto LABEL_50;
            }
            if (*(_QWORD *)(v68 + 16))
            {
              v40 = *(_QWORD *)(v68 + 80);
              v66 = v34;
              if (v40)
              {
                v41 = *(_QWORD *)(v40 + 168);
                if (v41)
                {
                  v42 = 1;
                  v43 = v68;
                  goto LABEL_51;
                }
              }
LABEL_50:
              v42 = 0;
              v43 = v68;
              v41 = v68;
LABEL_51:
              v44 = **(unsigned __int16 **)(v43 + 152);
              v45 = v44 < v70;
              v67 = 0;
              if (PRliveRule(v72, v71, 0, v32, v35, v45, v44 >= v70))
              {
                v15 = v32;
                v75 = v35;
                v9 = v77;
                v14 = v74;
                goto LABEL_53;
              }
              v65 = v42;
              v14 = v74;
              v46 = PRmevrul(v41, (__int16)v89[v74], (uint64_t)v77, v87, v66, v39 >> 7, v45, v91[v74], v32, v39, &v85, v72, v71, v65);
              v9 = v77;
              v67 = v46;
              v15 = v32;
              v75 = v35;
              if ((v37 & 0x40) == 0)
              {
LABEL_57:
                v13 = v76;
                break;
              }
            }
            else
            {
LABEL_53:
              if ((v37 & 0x40) == 0)
                goto LABEL_57;
            }
          }
          else
          {
            v2 = v72;
            v14 = v74;
            if ((v27[5] & 0x40) == 0)
              goto LABEL_57;
          }
          v16 = 0;
          v81 = v23;
          v13 = v76;
          if (*(_DWORD *)(*(_QWORD *)(v2 + 32) + 4) != 220)
            continue;
          break;
        }
LABEL_60:
        if (++v14 >= (unint64_t)v86)
        {
LABEL_64:
          v10 = *(_QWORD *)(v2 + 32);
          v11 = *(_DWORD *)(v10 + 4);
          v5 = v71;
          v4 = v68;
          break;
        }
      }
    }
    if (v11)
    {
      if (v11 != 210 && v11 != 4)
        goto LABEL_98;
    }
    if (*((_WORD *)v9 + 84))
    {
      v93[0] = v4;
      v84 = *((unsigned __int16 *)v9 + 77);
      if (!*((_WORD *)v9 + 77))
      {
        LOBYTE(v69) = 0;
        goto LABEL_92;
      }
      v49 = 0;
      v69 = 0;
      v50 = v9[18];
      v92[0] = 0;
      v51 = v70;
      v82 = v50;
      do
      {
        if (PRevamac(v2, v5, v93, 1, _byteswap_ushort(*(_WORD *)(v50 + 4 * v49)), 0, 0) == 1)
        {
          v52 = *(unsigned __int8 *)(v50 + ((4 * v49) | 3)) | ((unint64_t)*(unsigned __int8 *)(v50 + ((4 * v49) | 2)) << 8);
          v9 = v77;
          v53 = v77[20];
          while (1)
          {
            v54 = (_BYTE *)(v53 + v52);
            v55 = *(_BYTE *)(v53 + v52 + 5);
            v56 = *(unsigned __int8 *)(v53 + v52 + 4);
            v57 = (uint64_t)v9;
            if (!BinarySearch(v9[4], *((unsigned __int8 *)v9 + 26), 1, v56, 1, v92))
            {
              LOBYTE(v69) = 0;
              v63 = *(_QWORD *)(v2 + 32);
              *(_QWORD *)v63 = 0xE6FFFFFF8ELL;
              *(_WORD *)(v63 + 8) = 642;
              v5 = v71;
              v9 = (_QWORD *)v57;
              goto LABEL_92;
            }
            v58 = bswap32(*(_DWORD *)(*(_QWORD *)(v57 + 176) + 4 * v92[0]))
                + (bswap32(*(unsigned __int16 *)(v53 + v52)) >> 16);
            v59 = **(unsigned __int16 **)(v93[0] + 152);
            v60 = v59 < v51;
            if (PRliveRule(v2, v71, 0, v56, *(unsigned __int8 *)(*(_QWORD *)(v57 + 184) + v58), v60, v59 >= v51))
            {
              v51 = v70;
              v9 = (_QWORD *)v57;
              if (*(_DWORD *)(*(_QWORD *)(v2 + 32) + 4) == 220)
                goto LABEL_87;
            }
            else
            {
              v61 = PRmevrul(v93[0], 0xFFFFFFFF, v57, v92[0], v58, (char)(v55 & 0x80), v60, 0, v56, v54[5], &v85, v2, v71, 0);
              v62 = v69;
              if (v61)
                v62 = 1;
              v69 = v62;
              if (*(_DWORD *)(*(_QWORD *)(v2 + 32) + 4) == 220)
              {
                LOBYTE(v69) = 0;
                v5 = v71;
                v9 = v77;
                goto LABEL_92;
              }
              v51 = v70;
              v9 = v77;
            }
            v52 = v54[3] | ((unint64_t)(v54[2] & 0x7F) << 8);
            if (!v52)
              goto LABEL_87;
          }
        }
        v9 = v77;
LABEL_87:
        ++v49;
        v50 = v82;
        v5 = v71;
      }
      while (v49 != v84);
LABEL_92:
      v4 = v68;
    }
    if (v67 == 1 || v69 == 1)
      **(_WORD **)(v2 + 16) = 210;
    v4 = *(_QWORD *)(v4 + 176);
  }
  if (v11 == 210 && v4 != 0)
    goto LABEL_11;
LABEL_98:
  if (v85)
  {
    PRfreeErr(v85);
    v10 = *(_QWORD *)(v2 + 32);
  }
  return *(unsigned int *)(v10 + 4);
}

uint64_t PRmevrul(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5, int a6, unsigned int a7, char a8, unsigned __int8 a9, unsigned __int8 a10, __int16 **a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  __int16 *v23;
  int v24;
  uint64_t result;
  int v26;
  int v27;
  int v28;
  char v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  __int16 *v60;
  int v61;
  int v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t *v66;
  char v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  char v71;
  int v72;
  unsigned __int8 v74;
  unsigned __int8 *v75;
  BOOL v76;
  BOOL v77;
  uint64_t v78;
  __int16 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  __int16 v95;
  int v97;
  unsigned __int8 v98;
  int v99;
  __int128 v100[2];
  __int128 v101[3];
  uint64_t v102;
  int v103;
  __int16 v104;
  BOOL v105;
  __int16 v106;
  _BYTE v107[5];
  char v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[56];
  unsigned __int8 v113;
  unsigned __int8 *v114;
  char v115;
  _BYTE v116[17];

  v116[0] = a6;
  v115 = a8;
  memset(v112, 0, sizeof(v112));
  v104 = 0;
  v103 = 0;
  v20 = *(_QWORD *)(a13 + 8);
  v108 = 0;
  v107[0] = 1;
  v109 = a1;
  v106 = 0;
  v113 = a10 & 3;
  LOBYTE(v97) = a10 & 3;
  if (a1 && (a10 & 3) != 0)
    SetRef((uint64_t)v112, a1, 1, a10 & 3);
  v21 = (unsigned __int8 *)(*(_QWORD *)(a3 + 184) + a5);
  v22 = *v21;
  v114 = v21 + 1;
  v23 = *a11;
  if (*a11)
  {
    *((_BYTE *)v23 + 12) = a9;
    *((_BYTE *)v23 + 13) = v22;
    v24 = PRgetSeverity(a12, a13, &v103, 0, a9, v22);
    result = 0;
    if (v24)
      return result;
    *((_BYTE *)*a11 + 14) = v103;
  }
  else
  {
    v26 = PRmkErr(a12, a13, a11, 0, 0, a9, v22);
    result = 0;
    if (v26)
      return result;
  }
  v88 = v20;
  v91 = a4;
  v110 = 0u;
  v111 = 0u;
  if (!a6)
    goto LABEL_14;
  if (!a14)
  {
    if ((a2 & 0x80000000) != 0 && *(_QWORD *)(a1 + 16))
      goto LABEL_14;
    goto LABEL_11;
  }
  if ((a2 & 0x80000000) == 0)
  {
LABEL_11:
    *(_QWORD *)&v110 = a1;
    *((_QWORD *)&v110 + 1) = a1;
  }
LABEL_14:
  v87 = a1;
  v92 = v22;
  v90 = a3;
  v27 = 0;
  LOBYTE(v28) = 0;
  v29 = 0;
  v105 = 0;
  v30 = 1;
  v31 = 1;
  v89 = a2;
  v95 = a2;
  v32 = 0;
  do
  {
LABEL_15:
    while (1)
    {
      v93 = v27;
      LOBYTE(v33) = v108;
      while (1)
      {
        v34 = *(_QWORD *)(a12 + 32);
        if ((*(_DWORD *)(v34 + 4) | 4) != 4 || (v32 & 0x40) != 0)
        {
          v108 = v33;
          goto LABEL_187;
        }
        if (v30 != 17)
          v31 = v30;
        v35 = v114;
        v36 = *v114;
        v37 = (char)*v114;
        if ((*v114 & 0x20) != 0)
          break;
        if ((*v114 & 0x40) != 0)
        {
          v98 = *v114;
          v37 = v31;
          v38 = v32;
          v39 = 0;
          v40 = 0;
          if (v113 && v109)
          {
            v41 = v114[1];
            if ((v41 - 139) < 2)
            {
              v39 = 0;
              LOBYTE(v97) = v113;
              v40 = v109;
            }
            else
            {
              if (v41 == 3 || v41 == 138)
              {
                v40 = 0;
                v39 = 1;
              }
              else
              {
                v40 = 0;
                v39 = 0;
              }
              LOBYTE(v97) = v113;
            }
          }
          v28 = EvaMacRulePiece(&v114, &v109, v30, &v115, &v105, a7, v116, &v113, &v104, (uint64_t)v112, a12, a13);
          if (!v28)
          {
            v32 = v38;
            v31 = v37;
            LOBYTE(v37) = v98;
            goto LABEL_60;
          }
          v42 = v109;
          if (!v40)
          {
            if (v109)
              v46 = v39;
            else
              v46 = 0;
            v32 = v38;
            v31 = v37;
            LOBYTE(v37) = v98;
            if (v46 != 1)
              goto LABEL_50;
            v45 = v30;
            v44 = v97;
            v43 = v109;
            goto LABEL_49;
          }
          if (v40 == v109)
          {
            v112[v97 - 1] = 1;
            v32 = v38;
            v31 = v37;
            LOBYTE(v37) = v98;
          }
          else
          {
            SetRef((uint64_t)v112, v40, v30, v97);
            v32 = v38;
            v31 = v37;
            LOBYTE(v37) = v98;
            if (!v42 || v113 == v97)
              goto LABEL_50;
            if (v30 == 1)
            {
              v43 = *(_QWORD *)(v42 + 168);
              if (v43)
              {
                v44 = v97;
                v45 = 1;
LABEL_49:
                SetRef((uint64_t)v112, v43, v45, v44);
              }
            }
            else
            {
              v43 = *(_QWORD *)(v42 + 176);
              if (v43)
              {
                v45 = v30;
                v44 = v97;
                goto LABEL_49;
              }
            }
          }
LABEL_50:
          v95 = v104;
          goto LABEL_51;
        }
        v28 = EvaWordRulePiece(&v114, &v109, v30, &v106, &v115, &v104, v116, a12, a13);
        v105 = 0;
LABEL_51:
        if (v28 == 1 && (v36 & 0x40) == 0 && v106 == 30)
        {
          if (v30 == 1)
          {
            v47 = *(_QWORD *)(v109 + 80);
            if (!v47)
            {
LABEL_59:
              LOBYTE(v28) = 1;
              v95 = v104;
              goto LABEL_60;
            }
            v48 = *(_QWORD *)(v47 + 168);
          }
          else
          {
            v48 = *(_QWORD *)(v109 + 152);
          }
          v109 = v48;
          goto LABEL_59;
        }
LABEL_60:
        v29 = v37 & 0x80;
        v33 = (char)(v33 + 1);
        if (v33 <= 5)
          v107[v33] = v28;
      }
      v32 = v36;
      v108 = v33;
      v97 = v113;
      if ((v36 & 0x40) != 0)
      {
        if ((v108 & 0x80000000) == 0)
          LOBYTE(v28) = v107[v108];
        if ((_BYTE)v28)
        {
          v78 = v109;
          if (v109)
          {
            if (v116[0])
            {
              SetHilite(v109, v95, v31, *a11, &v110);
              v78 = v109;
            }
            if (v97 && v78)
              SetRef((uint64_t)v112, v78, v31, v97);
          }
        }
        if ((_BYTE)v93)
        {
LABEL_188:
          if ((_QWORD)v110)
            v76 = *((_QWORD *)&v110 + 1) == 0;
          else
            v76 = 1;
          v77 = v76 || (_QWORD)v110 == *((_QWORD *)&v110 + 1);
          if (!v77 && *((_QWORD *)&v110 + 1) == *(_QWORD *)(*(_QWORD *)(v110 + 80) + 168))
            v110 = 0uLL;
          v101[0] = *(_OWORD *)v112;
          v101[1] = *(_OWORD *)&v112[16];
          v101[2] = *(_OWORD *)&v112[32];
          v102 = *(_QWORD *)&v112[48];
          v100[0] = v110;
          v100[1] = v111;
          PRmapost(v89, v90, v91, a10, a11, v32, (uint64_t)v114, v92, v101, v100, v88, a12, a13);
          return 1;
        }
LABEL_187:
        if (v28 != 1)
          goto LABEL_210;
        goto LABEL_188;
      }
      v49 = 0;
      v113 = 0;
      if ((v37 & 0x80000000) != 0)
      {
        v49 = v114[1] & 3;
        v113 = v114[1] & 3;
      }
      v50 = (v37 >> 1) & 1;
      v51 = v37 & 1;
      if (((v37 >> 2) & 1) != 0)
      {
        v54 = v36;
        v95 = -1;
        v27 = v93;
        goto LABEL_77;
      }
      v52 = (v37 >> 3) & 1;
      v53 = v37;
      if (v50 | v51)
        v27 = v93;
      else
        v27 = (v37 >> 4) & 1;
      if (!(v50 | v51))
        v30 = v52;
      v54 = v53;
      if ((v53 & 3) == 0)
        break;
LABEL_77:
      EvaLogInGlueByte((uint64_t)v107, &v108, (v54 >> 2) & 1, v50, v51);
      v55 = 1;
      if (v54 < 0)
        v55 = 2;
      v114 = &v35[v55];
    }
    if ((v32 & 0x80000000) != 0 || (v114[1] & 0x40) == 0)
    {
      if ((v32 & 0x80000000) != 0 && (v114[2] & 0x40) != 0 && v114[3] == 3)
LABEL_75:
        v30 = 17;
    }
    else if (v114[2] == 3)
    {
      goto LABEL_75;
    }
    if (*(v114 - 1) != v92 && (*(v114 - 3) & 0x40) != 0 && *(v114 - 2) == 3)
      v30 = 17;
    if (v108)
    {
      *(_QWORD *)v34 = 0xDC000000AALL;
      *(_WORD *)(v34 + 8) = 650;
      goto LABEL_210;
    }
    v108 = -1;
    if (!(v107[0] | v93))
      goto LABEL_210;
    v56 = v109;
    if (v31 == 1 && !(_BYTE)v30)
    {
      if (v107[0] && v109)
      {
        if (v116[0])
        {
          v57 = v49;
          SetHilite(v109, v95, 1, *a11, &v110);
          v49 = v57;
          v56 = v109;
        }
        if (v97 && v56)
        {
          v58 = v49;
          SetRef((uint64_t)v112, v56, 1, v97);
          v49 = v58;
        }
      }
      v30 = 0;
      if (a14)
        v59 = *(_QWORD *)(v87 + 152);
      else
        v59 = v87;
      v56 = *(_QWORD *)(v59 + 168);
      v109 = v56;
      goto LABEL_128;
    }
    if (!v109)
    {
      v64 = v114 + 2;
      if (v53 >= 0)
        v64 = v114 + 1;
      v114 = v64;
      break;
    }
    if (v107[0])
    {
      v99 = v49;
      if (v116[0])
      {
        v60 = *a11;
        v61 = v95;
        v62 = v31;
        v63 = v109;
        goto LABEL_115;
      }
      if (v29)
      {
        v62 = v31;
        v65 = 176;
        if (v31 == 8)
          v65 = 168;
        v63 = *(_QWORD *)(v109 + v65);
        v60 = *a11;
        if (v63 == *(_QWORD *)(v63 + 152))
          v61 = -1;
        else
          v61 = 0;
LABEL_115:
        SetHilite(v63, v61, v62, v60, &v110);
        v49 = v99;
      }
      v56 = v109;
      if (v97 && v109)
      {
        v94 = v109;
        SetRef((uint64_t)v112, v109, v31, v97);
        v56 = v94;
        v49 = v99;
      }
      if (!(_BYTE)v30)
      {
        v66 = (uint64_t *)(v56 + 168);
        goto LABEL_127;
      }
      if (v30 == 1)
      {
        v66 = (uint64_t *)(v56 + 176);
LABEL_127:
        v56 = *v66;
        v109 = *v66;
        v106 = 0;
        goto LABEL_128;
      }
    }
    v106 = 0;
    if (v30 == 17)
    {
      if (*(v35 - 1) != v92 && (*(v35 - 3) & 0x40) != 0)
      {
        if (*(v35 - 2) == 3)
          v30 = v52;
        else
          v30 = 17;
      }
      else
      {
        v30 = 17;
      }
    }
LABEL_128:
    v64 = v35 + 2;
    if (v54 >= 0)
      v64 = v35 + 1;
    v114 = v64;
    LOBYTE(v28) = 1;
  }
  while (v56);
  if (v49)
    goto LABEL_210;
  if ((*v64 & 0x20) != 0)
  {
    if ((*v64 & 0x80) != 0)
      goto LABEL_210;
    if ((*v64 & 0x10) != 0)
      v27 = 1;
    v114 = ++v64;
  }
  v67 = 0;
  v68 = 1;
  while (1)
  {
    while (1)
    {
      v69 = *v64;
      if ((v69 & 0x20) != 0)
        break;
      if (((v68 != 0) & (v69 >> 4)) != 0)
        v67 = 1;
      if ((v69 & 0x40) == 0)
      {
        v68 = 0;
        if ((v64[2] & 0x80u) == 0)
          v70 = 3;
        else
          v70 = 4;
        v64 += v70;
        continue;
      }
      v72 = v64[1] | ((v69 & 0xF) << 8);
      if (v72 == 138 || v72 == 3)
      {
        if (!(_BYTE)v27)
          goto LABEL_210;
        v64 += 3;
LABEL_172:
        if ((v72 - 107) <= 0x34 && ((1 << (v72 - 107)) & 0x10000000000005) != 0
          || v72 == 15)
        {
          v68 = 0;
          v64 += 3;
        }
        else
        {
          v68 = 0;
          v64 += 2;
        }
        continue;
      }
      if ((v72 - 139) > 1)
        goto LABEL_172;
      v75 = v64 + 3;
      if (v72 == 139)
        v64 += 2;
      if (v72 == 140)
        v64 = v75;
      if ((*v64 & 0x20) != 0)
      {
        if ((*v64 & 0x80) != 0)
          goto LABEL_210;
LABEL_163:
        ++v64;
        continue;
      }
    }
    if ((v69 & 2) != 0)
      break;
    if ((v69 & 1) == 0)
    {
      if (!(v27 | v67))
        goto LABEL_210;
      goto LABEL_182;
    }
    v71 = *++v64;
    if ((v71 & 0x20) != 0 && ((_BYTE)v27 || (v69 & 4) != 0))
      goto LABEL_182;
  }
  if ((v69 & 0x80) != 0)
    goto LABEL_210;
  v74 = v64[1];
  if ((v74 & 0x20) == 0)
    goto LABEL_163;
  if ((v64[1] & 4) != 0)
  {
    v64 += 2;
LABEL_182:
    v114 = v64;
    v108 = 0;
    LOBYTE(v28) = 1;
    v107[0] = 1;
    goto LABEL_15;
  }
  ++v64;
  if ((v74 & 3) != 0)
    goto LABEL_163;
  if ((_BYTE)v27 || (v69 & 4) != 0)
    goto LABEL_182;
LABEL_210:
  v79 = *a11;
  *(_QWORD *)(v79 + 3) = 0;
  *(_QWORD *)v79 = 0;
  v80 = *((_QWORD *)v79 + 3);
  if (v80)
  {
    free(*(void **)v80);
    *(_QWORD *)v80 = 0;
    v81 = *(_QWORD *)(v80 + 8);
    *(_WORD *)(v81 + 4) = -1;
    *(_DWORD *)v81 = -1;
    *(_QWORD *)(v80 + 18) = 0;
  }
  v82 = (uint64_t *)*((_QWORD *)v79 + 9);
  if (!v82)
    return 0;
  v83 = *v82;
  if (*v82)
  {
    free(*(void **)v83);
    *(_QWORD *)v83 = 0;
    v84 = *(_QWORD *)(v83 + 8);
    *(_DWORD *)(v84 + 8) = -1;
    *(_QWORD *)v84 = -1;
    *(_QWORD *)(v83 + 18) = 0;
    v82 = (uint64_t *)*((_QWORD *)v79 + 9);
    if (!v82)
      return 0;
  }
  v85 = v82[1];
  if (!v85)
    return 0;
  free(*(void **)v85);
  result = 0;
  *(_QWORD *)v85 = 0;
  v86 = *(_QWORD *)(v85 + 8);
  *(_WORD *)(v86 + 4) = -1;
  *(_DWORD *)v86 = -1;
  *(_QWORD *)(v85 + 18) = 0;
  return result;
}

uint64_t SetRef(uint64_t result, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v4 = (a4 - 1);
  *(_BYTE *)(result + v4) = 1;
  v5 = result + 16 * v4;
  v8 = *(_QWORD *)(v5 + 8);
  v6 = (_QWORD *)(v5 + 8);
  v7 = v8;
  if (v8)
  {
    if ((a3 & 0xFFFFFFEF) == 1)
    {
      v9 = *(__int16 *)(v7 + 8);
      v10 = *(_QWORD *)(a2 + 152);
      if (v9 <= *(__int16 *)(v10 + 8))
        *(_QWORD *)(result + 16 * v4 + 16) = v10;
      else
        *v6 = v10;
    }
    else if (!a3)
    {
      *v6 = *(_QWORD *)(a2 + 152);
    }
  }
  else
  {
    *v6 = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(result + 16 * v4 + 16) = *(_QWORD *)(a2 + 152);
  }
  return result;
}

uint64_t SetHilite(uint64_t result, int a2, int a3, _WORD *a4, _QWORD *a5)
{
  _WORD *v5;
  uint64_t v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;

  if (a3)
  {
    if (a3 == 1)
    {
      if (a2 < 0)
        a5[1] = 0;
      else
        a5[1] = result;
    }
  }
  else if (*(_QWORD *)(result + 16) && (a2 < 0 || a5[2]))
  {
    *a5 = 0;
  }
  else
  {
    *a5 = result;
  }
  v5 = *(_WORD **)(result + 152);
  if (!*a4 && !a4[1])
  {
    *a4 = v5[4];
    a4[1] = v5[24] + v5[16];
    a5[2] = v5;
    a5[3] = v5;
    return result;
  }
  if (a3 != 1)
  {
    if (a3)
      return result;
    v9 = a5[2];
    if ((_WORD *)v9 == v5)
      return result;
    v8 = a4[1];
    do
    {
      v9 = *(_QWORD *)(v9 + 72);
      v8 += *(_WORD *)(v9 + 48) + *(_WORD *)(v9 + 32);
    }
    while ((_WORD *)v9 != v5);
    v10 = v5[4];
    a5[2] = v5;
    *a4 = v10;
LABEL_29:
    a4[1] = v8;
    return result;
  }
  v6 = a5[3];
  if (*(__int16 *)(v6 + 8) <= (__int16)v5[4])
  {
    if ((_WORD *)v6 == v5)
      return result;
    v8 = a4[1];
    do
    {
      v6 = *(_QWORD *)(v6 + 80);
      v8 += *(_WORD *)(v6 + 48) + *(_WORD *)(v6 + 32);
    }
    while ((_WORD *)v6 != v5);
    a5[3] = v5;
    goto LABEL_29;
  }
  if ((_WORD *)v6 != v5)
  {
    v7 = a4[1];
    do
    {
      v7 -= *(_WORD *)(v6 + 48) + *(_WORD *)(v6 + 32);
      v6 = *(_QWORD *)(v6 + 72);
    }
    while ((_WORD *)v6 != v5);
    a4[1] = v7;
    a5[3] = v5;
  }
  return result;
}

uint64_t EvaLogInGlueByte(uint64_t result, _BYTE *a2, int a3, int a4, int a5)
{
  int v5;
  char v6;
  int v7;
  int v8;
  char v9;
  char v10;
  int v11;
  int v12;
  uint64_t v13;

  if (a4)
  {
    v5 = (char)*a2;
    if (v5 < 0)
    {
      v6 = 0;
      v7 = 0;
      goto LABEL_10;
    }
    v6 = *(_BYTE *)(result + *a2);
    *a2 = v5 - 1;
    if (v5)
    {
      v7 = *(unsigned __int8 *)(result + (v5 - 1));
      LOBYTE(v5) = v5 - 2;
LABEL_10:
      v10 = v5 + 1;
      *a2 = v5 + 1;
      if ((char)v5 > 4)
        goto LABEL_20;
      v6 |= v7;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (!a5)
  {
    v7 = 0;
    goto LABEL_20;
  }
  v8 = (char)*a2;
  if (v8 < 0)
  {
    v9 = 0;
    v7 = 0;
  }
  else
  {
    v9 = *(_BYTE *)(result + *a2);
    *a2 = v8 - 1;
    if (!v8)
    {
      v6 = 0;
LABEL_18:
      v10 = 0;
      v7 = 0;
      *a2 = 0;
      goto LABEL_19;
    }
    v7 = *(unsigned __int8 *)(result + (v8 - 1));
    LOBYTE(v8) = v8 - 2;
  }
  v10 = v8 + 1;
  *a2 = v8 + 1;
  if ((char)v8 > 4)
    goto LABEL_20;
  v6 = v7 & v9;
LABEL_19:
  *(_BYTE *)(result + v10) = v6;
LABEL_20:
  if (a3)
  {
    v11 = (char)*a2;
    if ((v11 & 0x80000000) == 0)
    {
      v7 = *(unsigned __int8 *)(result + *a2);
      LOBYTE(v11) = v11 - 1;
    }
    v12 = (char)v11;
    v13 = (char)v11 + 1;
    *a2 = v13;
    if (v12 <= 4)
      *(_BYTE *)(result + v13) = v7 == 0;
  }
  return result;
}

uint64_t EvaMacRulePiece(unsigned __int8 **a1, uint64_t *a2, uint64_t a3, _BYTE *a4, BOOL *a5, uint64_t a6, _BYTE *a7, unsigned __int8 *a8, _WORD *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  unsigned __int8 *v16;
  unsigned __int8 v17;
  unsigned __int16 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  unsigned __int8 *v26;
  BOOL *v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  BOOL v31;
  unsigned __int8 v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v40;
  __int16 v44;
  unsigned __int8 *v45;

  *a9 = -1;
  *a7 = **a1 & 0x80;
  v16 = *a1;
  v17 = **a1;
  v18 = (*a1)[1] | ((v17 & 0xF) << 8);
  v19 = *a1 + 2;
  *a1 = v19;
  if ((v18 & 0xFFE) == 0x8A)
    goto LABEL_2;
  v21 = 0;
  if (v18 <= 0x6Cu)
  {
    if (v18 != 3)
    {
      if (v18 != 15 && v18 != 107)
        goto LABEL_26;
      goto LABEL_25;
    }
LABEL_2:
    v44 = 0;
    if (v18 == 139)
    {
      v20 = 0;
    }
    else
    {
      v20 = v16[2];
      v19 = v16 + 3;
      *a1 = v16 + 3;
    }
    if ((*v19 & 0x20) != 0)
    {
      LOBYTE(v25) = 0;
      v24 = v19;
      goto LABEL_45;
    }
    v22 = v19 + 3;
    if ((*v19 & 0x40) != 0)
    {
      if ((v19[3] & 0x20) != 0 || (v19[2] & 0x20) != 0)
      {
        v40 = a8;
        LOBYTE(v25) = EvaMacRulePiece(a1, a2, a3, a4, (char *)&v44 + 1, a6, a7, &v44, a9, 0, a11, a12);
        a8 = v40;
        if ((**a1 & 0x80u) == 0)
          v24 = *a1 + 1;
        else
          v24 = *a1 + 2;
LABEL_44:
        *a1 = v24;
LABEL_45:
        v45 = v24;
        if ((~*v24 & 0xA0) != 0)
          v36 = 0;
        else
          v36 = v24[1];
        *a8 = v36;
        if (v18 > 0x8Au)
        {
          if (v18 == 139)
          {
            v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
            if (*a2 && !v25)
            {
              while (1)
              {
                v25 = SkipPieces(v19, a3, a6, 1u, (unsigned __int16 **)a2, a11, a12);
                if (!v25)
                  break;
                if (!*a2)
                {
                  LOBYTE(v25) = 0;
                  goto LABEL_78;
                }
                v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
                if (!*a2 || v25)
                  goto LABEL_78;
              }
            }
          }
          else if (v18 == 140)
          {
            v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
            if (*a2)
            {
              if (v20)
              {
                do
                {
                  if (v25)
                    break;
                  v25 = SkipPieces(v19, a3, a6, 1u, (unsigned __int16 **)a2, a11, a12);
                  if (!v25)
                    break;
                  if (!*a2)
                    goto LABEL_77;
                  v25 = EvaOneRulePiece(&v45, a2, a7, a3, a6, a4, a9, a11, a12);
                  if (!*a2)
                    break;
                  --v20;
                }
                while ((_BYTE)v20);
              }
            }
          }
          goto LABEL_78;
        }
        if (v18 == 3)
        {
          LOBYTE(v25) = SkipPieces(v19, a3, a6, v20, (unsigned __int16 **)a2, a11, a12);
LABEL_78:
          *a1 = v45;
          goto LABEL_79;
        }
        if (v18 != 138)
          goto LABEL_78;
        v25 = SkipPieces(v19, a3, a6, v20, (unsigned __int16 **)a2, a11, a12);
        if (!v25)
          goto LABEL_78;
        v37 = *a2;
        if (*a2)
        {
          if (!(_DWORD)a3)
          {
            v38 = *(_QWORD *)(v37 + 176);
            goto LABEL_76;
          }
          if ((_DWORD)a3 == 1)
          {
            v38 = *(_QWORD *)(v37 + 168);
LABEL_76:
            *a2 = v38;
          }
        }
LABEL_77:
        LOBYTE(v25) = 1;
        goto LABEL_78;
      }
    }
    else if ((v19[3] & 0x20) != 0 || (v19[4] & 0x20) != 0)
    {
      *a1 = v19 + 2;
      v23 = 3;
      if ((v19[2] & 0x80u) != 0)
      {
        v23 = 4;
        v22 = v19 + 4;
      }
      *a1 = v22;
      if ((v19[v23] & 0x80u) == 0)
        v24 = v22 + 1;
      else
        v24 = v22 + 2;
      LOBYTE(v25) = 0;
      goto LABEL_44;
    }
    LOBYTE(v25) = 0;
LABEL_79:
    v27 = a5;
    v29 = (unsigned __int16)(v18 - 139) < 2u;
    goto LABEL_80;
  }
  if (v18 != 109 && v18 != 159)
  {
    if (v18 != 140)
      goto LABEL_26;
    goto LABEL_2;
  }
LABEL_25:
  v21 = v16[2];
  *a1 = v16 + 3;
LABEL_26:
  v26 = a8;
  v27 = a5;
  v28 = *a2;
  LOBYTE(v25) = PRevamac(a11, a12, a2, a3, v18, v21, *a4);
  if ((v25 & 0xFE) != 0)
    goto LABEL_27;
  if ((v17 & 0x10) != 0)
    LOBYTE(v25) = v25 == 0;
  if (!a10
    || ((v30 = *v26, (_BYTE)v25) ? (v31 = v30 == 0) : (v31 = 1),
        v31
     || v28 == *a2
     || (v32 = v30 - 1,
         v33 = a10 + 16 * (v30 - 1),
         v35 = *(_QWORD *)(v33 + 8),
         v34 = (_QWORD *)(v33 + 8),
         v29 = v35,
         v35)))
  {
LABEL_27:
    v29 = 0;
  }
  else
  {
    *v34 = *(_QWORD *)(v28 + 152);
    *(_QWORD *)(a10 + 16 * v32 + 16) = *(_QWORD *)(v28 + 152);
  }
LABEL_80:
  *v27 = v29;
  return (char)v25;
}

uint64_t EvaWordRulePiece(unsigned __int8 **a1, uint64_t *a2, int a3, _WORD *a4, _BYTE *a5, _WORD *a6, _BYTE *a7, uint64_t a8, uint64_t a9)
{
  _BYTE *v13;
  unsigned int v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  int v22;
  int v23;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 v34;
  unsigned __int16 v35;
  __int16 v36;
  unsigned __int16 v37;
  _WORD v38[25];
  _BYTE v39[25];
  _WORD v40[25];
  _BYTE v41[50];
  _WORD v42[25];
  _WORD v43[25];
  _BYTE v44[66];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  *a7 = **a1 >> 7;
  v13 = *a1;
  v14 = **a1;
  v15 = (*a1)[1] | ((v14 & 0xF) << 8);
  *a1 += 2;
  v16 = v13[2];
  v17 = v16 & 0x7F;
  *a1 = v13 + 3;
  *a4 = 0;
  if (v16 < 0)
  {
    v35 = 0;
    v39[0] = 0;
    v40[0] = 0;
    v38[0] = 0;
    v20 = v13[3];
    *a1 = v13 + 4;
    if ((v20 & 0x80) == 0)
    {
      if ((v20 & 0x50) != 0)
        v21 = 100;
      else
        v21 = 120;
      if ((v20 & 0x40) != 0)
        v22 = v21;
      else
        v22 = 50;
      PRDerive(a8, a9, *a2, v22, (uint64_t)v43, (uint64_t)v42, (uint64_t)v39, (uint64_t)v41, (uint64_t)v38, (uint64_t)v40, &v35);
      if (v35)
      {
        v18 = 0;
        while ((v43[v18] & 0xFFF) != v15 || (v42[v18] & 0x7F) != v17)
        {
          if (v35 == ++v18)
            goto LABEL_23;
        }
        goto LABEL_42;
      }
      goto LABEL_23;
    }
    v26 = v20 & 0x3F;
    v27 = *a2;
    if (*(_QWORD *)(*a2 + 16))
    {
      v28 = *(_WORD *)(v27 + 32);
    }
    else
    {
      v28 = strlen(**(const char ***)(v27 + 144));
      v26 = v20 & 0x3F;
    }
    if ((int)v26 > v28)
      goto LABEL_23;
    if ((v20 & 0x40) != 0)
    {
      v29 = v26;
      __strncpy_chk();
      v31 = v29;
      v44[v29] = 43;
    }
    else
    {
      v44[0] = 43;
      v29 = v26;
      v30 = v26;
      __strncpy_chk();
      v31 = v30;
    }
    v44[v29 + 1] = 0;
    v37 = 0;
    v36 = 0;
    SLfun((uint64_t)v44, 0, v31, &v37, &v36);
    if ((v37 & 0xFFF) != v15 || (v36 & 0x7F) != v17)
      goto LABEL_23;
    if (a3 == 1)
    {
      v32 = *(_QWORD *)(*(_QWORD *)(*a2 + 152) + 80);
      if (v32)
      {
        LOWORD(v18) = 0;
        *a2 = *(_QWORD *)(v32 + 168);
LABEL_42:
        *a4 = v40[(unsigned __int16)v18];
        *a5 = v39[(unsigned __int16)v18];
        *a6 = v38[(unsigned __int16)v18];
        v23 = 1;
        return v23 ^ (v14 >> 4) & 1;
      }
      v33 = *(_QWORD *)(*a2 + 176);
      if (v33)
      {
        LOWORD(v18) = 0;
        do
        {
          *a2 = v33;
          v33 = *(_QWORD *)(v33 + 176);
        }
        while (v33);
        goto LABEL_42;
      }
    }
    LOWORD(v18) = 0;
    goto LABEL_42;
  }
  PRDerive(a8, a9, *a2, 20, (uint64_t)v44, (uint64_t)v43, (uint64_t)v39, (uint64_t)v42, (uint64_t)v38, (uint64_t)v40, &v34);
  if (v34)
  {
    v18 = 0;
    while ((*(_WORD *)&v44[2 * v18] & 0xFFF) != v15 || (v43[v18] & 0x7F) != v17)
    {
      if (v34 == ++v18)
      {
        v19 = v34 - 1;
        goto LABEL_22;
      }
    }
    goto LABEL_42;
  }
  v19 = -1;
LABEL_22:
  *a4 = v40[v19];
  *a6 = v38[v19];
LABEL_23:
  v23 = 0;
  *a5 = 0;
  return v23 ^ (v14 >> 4) & 1;
}

BOOL SkipPieces(unsigned __int8 *a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned __int16 **a5, uint64_t a6, uint64_t a7)
{
  unsigned __int16 *v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  char v20;
  __int16 v21;
  __int16 v22;
  char v23;
  char v24;
  char v25;
  char v26;
  unsigned __int16 *v27;
  unsigned __int8 *v28;

  v28 = a1;
  v26 = 0;
  v23 = 0;
  if (!a4)
    return 1;
  v27 = 0;
  v13 = *a5;
  v14 = 1;
  while (1)
  {
    if (!v13)
      return 0;
    v15 = *v13;
    v16 = *(unsigned __int16 *)(*(_QWORD *)(a6 + 16) + 14);
    if ((_DWORD)a3)
    {
      if (v15 >= v16)
        return 0;
    }
    else if (v15 < v16)
    {
      return 0;
    }
    if ((*v28 & 0x20) == 0)
    {
      v27 = v13;
      v17 = (*v28 & 0x40) != 0
          ? EvaMacRulePiece(&v28, &v27, a2, &v23, &v24, a3, &v25, &v26, &v22, 0, a6, a7)
          : EvaWordRulePiece(&v28, (uint64_t *)&v27, a2, &v21, &v20, &v22, &v25, a6, a7);
      if (v17 != 1)
        break;
    }
    if ((_DWORD)a2 == 1)
      v18 = 88;
    else
      v18 = 84;
    v13 = *(unsigned __int16 **)&(*a5)[v18];
    *a5 = v13;
    if (a4 < ++v14)
      return 1;
  }
  return a4 != 1;
}

uint64_t EvaOneRulePiece(unsigned __int8 **a1, uint64_t *a2, _BYTE *a3, BOOL a4, uint64_t a5, _BYTE *a6, _WORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  char v32;
  char v33;
  __int16 v34;
  char v35;
  _BYTE v36[5];
  unsigned __int8 *v37;

  v13 = 0;
  v35 = -1;
  v37 = *a1;
  *a3 = 0;
  v34 = 0;
  v32 = 0;
  v14 = 1;
  v15 = 1;
  while (1)
  {
    v16 = v37;
    if (!*a2)
      goto LABEL_43;
    v17 = *v37;
    if ((v17 & 0x20) == 0)
    {
      v18 = *(unsigned __int16 *)*a2;
      v19 = *(unsigned __int16 *)(*(_QWORD *)(a8 + 16) + 14);
      if ((_DWORD)a5)
      {
        if (v18 >= v19)
          goto LABEL_44;
      }
      else if (v18 < v19)
      {
LABEL_44:
        LOBYTE(v15) = 0;
        return (char)v15;
      }
      if ((v17 & 0x40) != 0)
        v23 = EvaMacRulePiece(&v37, a2, a4, a6, &v33, a5, a3, &v32, a7, 0, a8, a9);
      else
        v23 = EvaWordRulePiece(&v37, a2, a4, &v34, a6, a7, a3, a8, a9);
      if (v23 != 1 || (v17 & 0x40) != 0 || v34 != 30)
        goto LABEL_30;
      if (a4)
      {
        if (!a4)
        {
LABEL_30:
          if (++v35 <= 5)
            v36[v35] = v23;
          v22 = v13;
          goto LABEL_39;
        }
        v24 = (uint64_t *)(*(_QWORD *)(*a2 + 80) + 168);
      }
      else
      {
        v24 = (uint64_t *)(*a2 + 152);
      }
      *a2 = *v24;
      goto LABEL_30;
    }
    if ((v17 & 0x40) != 0)
      break;
    v32 = 0;
    if ((v17 & 0x80) != 0)
      v32 = v37[1] & 3;
    v20 = (v17 >> 2) & 1;
    v21 = (v17 >> 1) & 1;
    if (v21 | v17 & 1 | v20)
    {
      v22 = v13;
    }
    else
    {
      a4 = (v17 & 8) != 0;
      v22 = (v17 >> 4) & 1;
    }
    if (!v14)
    {
      if ((v17 & 7) != 0)
      {
        EvaLogInGlueByte((uint64_t)v36, &v35, v20, v21, v17 & 1);
      }
      else if (v35)
      {
        v15 = 0;
        v25 = *(_QWORD *)(a8 + 32);
        *(_QWORD *)v25 = 0xDC000000AALL;
        *(_WORD *)(v25 + 8) = 650;
      }
      else
      {
        v35 = -1;
        if (v36[0] | v13)
        {
          LOBYTE(v15) = 1;
LABEL_43:
          *a1 = v37;
          return (char)v15;
        }
        v15 = 0;
      }
    }
    v14 = 0;
    if ((v17 & 0x80) != 0)
      v26 = v16 + 2;
    else
      v26 = v16 + 1;
    v37 = v26;
LABEL_39:
    v13 = v22;
    if (!v15)
      return (char)v15;
  }
  if (v35 < 0)
    goto LABEL_43;
  LOBYTE(v15) = v36[v35];
  if ((_BYTE)v15)
    goto LABEL_43;
  return (char)v15;
}

uint64_t PRmisrul(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  _WORD *v15;
  __int16 v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28[2];

  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_10;
  LOWORD(v7) = 0;
  *(_QWORD *)v28 = 0;
  do
  {
    v7 = (__int16)(v7 + (*(_DWORD *)(v6 + 4) >= 0));
    v6 = *(_QWORD *)(v6 + 80);
  }
  while (v6);
  if (v7 > *(__int16 *)(*(_QWORD *)(a3 + 24) + 6))
  {
    v8 = PRliveRule(a1, a2, 0, 0xAFu, 1, 1, *(_WORD *)(v5 + 14) == 0);
    result = 0;
    if (!v8)
    {
      if (PRmkErr(a1, a2, v28, 0, 0, 0xAFu, 1))
      {
        result = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
        if ((_DWORD)result == 220 || (_DWORD)result == 230)
          return result;
      }
      else
      {
        v22 = *(_QWORD *)(v5 + 64);
        v23 = *(_WORD *)(v22 + 8);
        v24 = *(_QWORD *)v28;
        **(_WORD **)v28 = v23;
        *(_WORD *)(v24 + 2) = *(_WORD *)(*(_QWORD *)(v5 + 80) + 8) - v23 + *(_WORD *)(*(_QWORD *)(v5 + 80) + 32);
        v25 = *(_QWORD *)(v22 + 160);
        if (v25)
          *(_QWORD *)(v24 + 40) = v25;
        *(_QWORD *)(v22 + 160) = v24;
        result = 210;
        **(_WORD **)(a1 + 16) = 210;
      }
    }
  }
  else
  {
LABEL_10:
    result = 0;
  }
  if (*(_BYTE *)(a2 + 20) != 6)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(v10 + 72);
    if (!v11)
      v11 = *(_QWORD *)(v10 + 56);
    *(_QWORD *)v28 = 0;
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_DWORD *)(v12 + 4 * **(unsigned __int8 **)(v11 + 24)) & 0x20000000) != 0)
    {
      v13 = PRliveRule(a1, a2, 0, 3u, 6, 1, *(unsigned __int16 *)(v10 + 14) == 0);
      result = 0;
      if (!v13)
      {
        if (PRmkErr(a1, a2, v28, 0, 0, 3u, 6))
          return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
        v14 = *(_WORD *)(v11 + 8);
        v15 = *(_WORD **)v28;
        **(_WORD **)v28 = v14;
        v16 = *(_WORD *)(v11 + 32);
        v15[1] = v16;
        v15[2] = v14;
        v15[3] = v16;
        v17 = *(_BYTE **)(v11 + 24);
        v18 = *v17;
        if ((*(_DWORD *)(v12 + 4 * v18) & 0x20000000) != 0)
          LOBYTE(v18) = v18 - 32;
        *v17 = v18;
        v19 = PRaddAlts(a1, *(uint64_t *)v28, *(char **)(v11 + 24), 0, 1uLL, 1);
        v20 = *(_BYTE **)(v11 + 24);
        v21 = *v20;
        if ((*(_DWORD *)(v12 + 4 * v21) & 0x40000000) != 0)
          LOBYTE(v21) = v21 + 32;
        *v20 = v21;
        if (v19 || PRaddRefs(a1, *(uint64_t *)v28, *(char **)(v11 + 24), 1u, 1))
        {
          return *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4);
        }
        else
        {
          v26 = *(_QWORD *)(v11 + 160);
          v27 = *(_QWORD *)v28;
          if (v26)
            *(_QWORD *)(*(_QWORD *)v28 + 40) = v26;
          *(_QWORD *)(v11 + 160) = v27;
          result = 210;
          **(_WORD **)(a1 + 16) = 210;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t PRmkErr(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, int a5, unsigned int a6, int a7)
{
  _BYTE *v14;
  _BYTE *v15;
  uint64_t result;
  uint64_t v17;
  int v18;

  v18 = 0;
  v14 = malloc_type_calloc(1uLL, 0x50uLL, 0x1020040107DC39EuLL);
  if (v14)
  {
    v15 = v14;
    v14[15] = a5;
    v14[12] = a6;
    v14[13] = a7;
    if (a6)
    {
      result = PRgetSeverity(a1, a2, &v18, a5, a6, a7);
      if ((_DWORD)result)
        return result;
      v15[14] = v18;
      ++*(_WORD *)(a1 + 24);
    }
    if (a4)
    {
      *((_QWORD *)v15 + 5) = *(_QWORD *)(a4 + 160);
      *(_QWORD *)(a4 + 160) = v15;
    }
    result = 0;
    *a3 = v15;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v17 = 0xDC00000078;
    *(_WORD *)(v17 + 8) = 160;
    return 220;
  }
  return result;
}

uint64_t PRfreeErr(_QWORD *a1)
{
  void **v2;
  void ***v3;

  v2 = (void **)a1[3];
  if (v2)
    PRfreeList(v2);
  v3 = (void ***)a1[9];
  if (v3)
  {
    if (*v3)
    {
      PRfreeList(*v3);
      v3 = (void ***)a1[9];
    }
    if (v3[1])
    {
      PRfreeList(v3[1]);
      v3 = (void ***)a1[9];
    }
    free(v3);
  }
  free(a1);
  return 0;
}

void PRfreeList(void **a1)
{
  void *v2;
  void *v3;

  v2 = *a1;
  if (v2)
    free(v2);
  v3 = a1[1];
  if (v3)
    free(v3);
  free(a1);
}

uint64_t PRaddAlts(uint64_t a1, uint64_t a2, char *__s, void *__src, size_t __n, int a6)
{
  unsigned int v6;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  __int16 v21;

  v6 = __n;
  if (a6)
    v11 = a6 - 1;
  else
    v11 = 0;
  v13 = (uint64_t *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  if (!v12)
  {
    result = PRmkList(a1, (uint64_t *)(a2 + 24), 3);
    if ((_DWORD)result)
      return result;
    v12 = *v13;
  }
  v14 = *(unsigned __int16 *)(v12 + 16);
  if (v14 <= v11)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = v14 - v11;
    v17 = (__int16 *)(*(_QWORD *)(v12 + 8) + 2 * v11);
    do
    {
      v18 = *v17++;
      if (v18 == -1)
        ++v15;
      --v16;
    }
    while (v16);
  }
  if (v6 > v15)
  {
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v20 = 0xDC00000082;
    v21 = 161;
LABEL_20:
    *(_WORD *)(v20 + 8) = v21;
    return 220;
  }
  if (__src)
  {
    memcpy((void *)(a2 + *(unsigned __int16 *)(v12 + 18) + 32), __src, v6);
    v12 = *(_QWORD *)(a2 + 24);
  }
  result = PRaddList((char **)v12, __s, v6, v11);
  if ((_DWORD)result)
  {
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v20 = 0xDC00000078;
    v21 = 162;
    goto LABEL_20;
  }
  return result;
}

uint64_t PRmkList(uint64_t a1, uint64_t *a2, int a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v6 = malloc_type_calloc(1uLL, 0x20uLL, 0x1010040E1788B1AuLL);
  *a2 = (uint64_t)v6;
  if (v6 && (v7 = malloc_type_calloc(a3, 2uLL, 0x1000040BDFB0063uLL), (*(_QWORD *)(*a2 + 8) = v7) != 0))
  {
    v8 = *a2;
    if (a3 >= 1)
      memset(*(void **)(v8 + 8), 255, 2 * (unsigned __int16)a3);
    result = 0;
    *(_WORD *)(v8 + 16) = a3;
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v10 = 0xDC00000078;
    *(_WORD *)(v10 + 8) = 560;
    return 220;
  }
  return result;
}

uint64_t PRaddList(char **a1, char *__s, int a3, unsigned int a4)
{
  __int16 v4;
  size_t v7;
  char *v8;
  int v9;
  unsigned __int16 v10;
  const char *v11;
  int v12;
  int v13;
  char *v14;
  size_t v15;
  char *v16;

  v4 = a3;
  v7 = *((unsigned __int16 *)a1 + 12);
  v8 = a1[1];
  if (*(__int16 *)&v8[2 * a4] != -1)
  {
    while (1)
    {
      LOWORD(a4) = a4 + 1;
      if (*((unsigned __int16 *)a1 + 8) <= (unsigned __int16)a4)
        break;
      if (*(__int16 *)&v8[2 * (unsigned __int16)a4] == -1)
        goto LABEL_6;
    }
    LOWORD(a4) = -1;
  }
LABEL_6:
  v9 = *((unsigned __int16 *)a1 + 12);
  if (a3)
  {
    LOWORD(v9) = *((_WORD *)a1 + 12);
    v10 = a4;
    v11 = __s;
    do
    {
      *(_WORD *)&v8[2 * v10] = v9;
      ++*((_WORD *)a1 + 9);
      v12 = strlen(v11);
      v13 = *((unsigned __int16 *)a1 + 12);
      v9 = v13 + v12 + 1;
      *((_WORD *)a1 + 12) = v13 + v12 + 1;
      v11 += (unsigned __int16)(v12 + 1);
      --v4;
      while (*((unsigned __int16 *)a1 + 8) > ++v10)
      {
        if (*(__int16 *)&v8[2 * v10] == -1)
          goto LABEL_13;
      }
      v10 = -1;
LABEL_13:
      ;
    }
    while (v4);
  }
  v14 = *a1;
  if (*((unsigned __int16 *)a1 + 11) >= (unsigned __int16)v9)
    goto LABEL_19;
  *((_WORD *)a1 + 11) = (v9 & 0xFFC0) + 64;
  v15 = ((v9 & 0xFFFFFFC0) + 64) & 0xFFC0;
  if (v14)
  {
    v16 = (char *)malloc_type_malloc(v15, 0x8D8342C2uLL);
    if (v16)
    {
      v14 = v16;
      memcpy(v16, *a1, v7);
      free(*a1);
      *a1 = v14;
LABEL_19:
      memcpy(&v14[v7], __s, (unsigned __int16)(v9 - v7));
      return 0;
    }
  }
  else
  {
    v14 = (char *)malloc_type_malloc(v15, 0xE9E45C59uLL);
    *a1 = v14;
    if (v14)
      goto LABEL_19;
  }
  return 220;
}

uint64_t PRaddFils(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5)
{
  unsigned __int16 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  uint64_t v14;
  __int16 *v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  if (a5)
    v9 = a5 - 1;
  else
    v9 = 0;
  v10 = *(uint64_t **)(a2 + 72);
  if (!v10)
  {
    v10 = (uint64_t *)malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *(_QWORD *)(a2 + 72) = v10;
    if (!v10)
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 0xDC00000078;
      goto LABEL_21;
    }
  }
  v11 = *v10;
  if (!*v10)
  {
    result = PRmkList(a1, v10, 6);
    if ((_DWORD)result)
      return result;
    v11 = **(_QWORD **)(a2 + 72);
  }
  v12 = *(unsigned __int16 *)(v11 + 16);
  if (v12 <= v9)
  {
    v13 = 0;
  }
  else
  {
    v13 = 0;
    v14 = v12 - v9;
    v15 = (__int16 *)(*(_QWORD *)(v11 + 8) + 2 * v9);
    do
    {
      v16 = *v15++;
      if (v16 == -1)
        ++v13;
      --v14;
    }
    while (v14);
  }
  if (a4 > v13)
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = 0xDC00000082;
LABEL_21:
    *(_QWORD *)v18 = v19;
    v20 = 163;
    goto LABEL_22;
  }
  result = PRaddList((char **)v11, __s, a4, v9);
  if (!(_DWORD)result)
    return result;
  v18 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v18 = 0xDC00000078;
  v20 = 164;
LABEL_22:
  *(_WORD *)(v18 + 8) = v20;
  return 220;
}

uint64_t PRaddRefs(uint64_t a1, uint64_t a2, char *__s, unsigned int a4, int a5)
{
  unsigned __int16 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int16 v15;
  uint64_t v16;
  __int16 *v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  if (a5)
    v9 = a5 - 1;
  else
    v9 = 0;
  v10 = *(_QWORD **)(a2 + 72);
  if (!v10)
  {
    v10 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    *(_QWORD *)(a2 + 72) = v10;
    if (!v10)
    {
      v20 = *(_QWORD *)(a1 + 32);
      v21 = 0xDC00000078;
      goto LABEL_21;
    }
  }
  v13 = v10[1];
  v12 = v10 + 1;
  v11 = v13;
  if (!v13)
  {
    result = PRmkList(a1, v12, 3);
    if ((_DWORD)result)
      return result;
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 8);
  }
  v14 = *(unsigned __int16 *)(v11 + 16);
  if (v14 <= v9)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    v16 = v14 - v9;
    v17 = (__int16 *)(*(_QWORD *)(v11 + 8) + 2 * v9);
    do
    {
      v18 = *v17++;
      if (v18 == -1)
        ++v15;
      --v16;
    }
    while (v16);
  }
  if (a4 > v15)
  {
    v20 = *(_QWORD *)(a1 + 32);
    v21 = 0xDC00000082;
LABEL_21:
    *(_QWORD *)v20 = v21;
    v22 = 165;
    goto LABEL_22;
  }
  result = PRaddList((char **)v11, __s, a4, v9);
  if (!(_DWORD)result)
    return result;
  v20 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v20 = 0xDC00000078;
  v22 = 166;
LABEL_22:
  *(_WORD *)(v20 + 8) = v22;
  return 220;
}

uint64_t PRpd(unsigned __int8 *a1, int a2, unsigned int a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  if (!a1)
    return 230;
  *((_DWORD *)a1 + 5) = 0;
  v6 = a1 + 20;
  *((_DWORD *)a1 + 6) = 0;
  *((_WORD *)a1 + 14) = 0;
  v7 = PRGetAppElem(*a1);
  v21 = v7;
  if (!v7)
  {
    v10 = 0xE6FFFFFF93;
    goto LABEL_15;
  }
  v8 = v7;
  *(_QWORD *)(v7 + 32) = v6;
  if (a2 != 1)
  {
    v11 = *(char **)(v7 + 8 * a1[1] + 56);
    if (v11)
    {
      if (a2 != 2)
      {
        LODWORD(result) = -107;
        goto LABEL_13;
      }
      LODWORD(result) = -108;
      if (a3 > 0x20 || ((1 << a3) & 0x100010001) == 0)
        goto LABEL_13;
      v12 = *((_QWORD *)v11 + 97);
      *(_WORD *)(v12 + 4) = *(_WORD *)v11;
      *(_WORD *)(v12 + 2) = *(_WORD *)(v8 + 88);
      *(_WORD *)(v12 + 774) = *(_WORD *)(v11 + 769);
      if (a3 == 32 || a3 == 16)
      {
        __strcpy_chk();
        __strcpy_chk();
        if (a3 == 16)
          v13 = 11;
        else
          v13 = 12;
      }
      else
      {
        v13 = 14;
      }
      *(_BYTE *)v12 = v13;
      v14 = ICpd(0, (unsigned __int8 *)v12);
      v15 = v14;
      if (v14 == 8)
      {
        v16 = *(_QWORD *)(v8 + 32);
        *(_QWORD *)v16 = 0xE6000002C8;
        *(_WORD *)(v16 + 8) = 700;
      }
      if (a3 == 32 || a3 == 16)
      {
        if (v14 != 8)
        {
          *(_BYTE *)v12 = 13;
          v17 = ICpd(0, (unsigned __int8 *)v12);
          if (v17 == 8)
          {
            v18 = *(_QWORD *)(v8 + 32);
            v19 = 0xE6000002C7;
            goto LABEL_36;
          }
LABEL_37:
          free((void *)v12);
          free(v11);
          *(_QWORD *)(v8 + 8 * a1[1] + 56) = 0;
          --*(_BYTE *)(v8 + 90);
          if (v17 == 8 || v15 == 8)
            return 8;
          else
            return 0;
        }
        *(_BYTE *)v12 = 14;
        v15 = ICpd(0, (unsigned __int8 *)v12);
        if (v15 == 8)
        {
          v17 = 0;
          v18 = *(_QWORD *)(v8 + 32);
          v19 = 0xE6000002C8;
LABEL_36:
          *(_QWORD *)v18 = v19;
          *(_WORD *)(v18 + 8) = 700;
          goto LABEL_37;
        }
      }
      v17 = 0;
      goto LABEL_37;
    }
    v10 = 0xE6000002C2;
LABEL_15:
    *(_QWORD *)(a1 + 20) = v10;
    *((_WORD *)a1 + 14) = 700;
    return 230;
  }
  result = PRInitOrLoad((uint64_t)a1, 1, a3, &v21);
  if ((_DWORD)result && (_DWORD)result != 220 && (_DWORD)result != 230)
  {
    v6 = *(unsigned __int8 **)(v8 + 32);
LABEL_13:
    *(_DWORD *)v6 = result;
    *((_DWORD *)v6 + 1) = 230;
    *((_WORD *)v6 + 4) = 700;
    return 230;
  }
  return result;
}

uint64_t PRInitOrLoad(uint64_t a1, int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  _WORD *v17;
  _BYTE *v18;
  int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  uint64_t v26;

  v4 = *a4;
  if (!*(_BYTE *)(*a4 + 9))
  {
LABEL_41:
    v5 = *(_QWORD *)(v4 + 32);
    v6 = 0xE6000002C0;
    goto LABEL_42;
  }
  if (*(_BYTE *)(v4 + 90) == 4)
  {
    v5 = *(_QWORD *)(v4 + 32);
    v6 = 0xE6000002C3;
LABEL_42:
    *(_QWORD *)v5 = v6;
    *(_WORD *)(v5 + 8) = 700;
    return 230;
  }
  v10 = (char *)malloc_type_calloc(1uLL, 0x318uLL, 0x10200408531879CuLL);
  if (!v10)
  {
LABEL_26:
    v14 = *(_QWORD *)(v4 + 32);
    v15 = 0xDC00000078;
LABEL_27:
    *(_QWORD *)v14 = v15;
    *(_WORD *)(v14 + 8) = 700;
    return 220;
  }
  v11 = v10;
  v10[771] = *(_BYTE *)(a1 + 18);
  *(_WORD *)(v10 + 769) = *(_WORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    if (**(_BYTE **)v12)
    {
      __strcpy_chk();
      v12 = *(_QWORD *)(a1 + 8);
    }
    if (*(_BYTE *)(v12 + 8))
      __strcpy_chk();
  }
  v13 = 0;
  while (*(_QWORD *)(v4 + 8 * v13 + 56))
  {
    if (++v13 == 4)
    {
      v14 = *(_QWORD *)(v4 + 32);
      v15 = 0xDC0000007BLL;
      goto LABEL_27;
    }
  }
  result = 4294967188;
  if (a2 == 1 && a3 <= 1)
  {
    v17 = malloc_type_calloc(1uLL, 0x898uLL, 0x1090040C1876833uLL);
    if (v17)
    {
      v18 = v17;
      v17[387] = *(_WORD *)(v11 + 769);
      *((_BYTE *)v17 + 2058) = v11[771];
      v17[1] = *(_WORD *)(v4 + 88);
      v19 = v11[2];
      *((_QWORD *)v11 + 97) = v17;
      if (v19)
        __strcpy_chk();
      if (v11[258])
        __strcpy_chk();
      v20 = *(unsigned __int8 *)(v4 + 8);
      if (*(_BYTE *)(v4 + 8))
      {
        v21 = *(uint64_t **)v4;
        v22 = *(unsigned __int8 *)(v4 + 8);
        while (!*v21)
        {
          ++v21;
          if (!--v22)
          {
            v23 = 0;
            goto LABEL_31;
          }
        }
        v23 = *(_QWORD *)(*v21 + 128);
        if (!v23)
          goto LABEL_41;
LABEL_31:
        v24 = *(unsigned __int8 *)(a1 + 18);
        if (*(_BYTE *)(a1 + 18))
        {
          v25 = *(uint64_t **)v4;
          do
          {
            v26 = *v25;
            if (*v25)
            {
              if (*(unsigned __int8 *)(v26 + 20) == v24)
                v18[2059] = *(_BYTE *)(v26 + 26);
            }
            ++v25;
            --v20;
          }
          while (v20);
          goto LABEL_39;
        }
      }
      else
      {
        v23 = 0;
        if (*(_BYTE *)(a1 + 18))
        {
LABEL_39:
          *v18 = 10;
          if (ICpd(v23, v18) != 8)
          {
            result = 0;
            *(_WORD *)v11 = *((_WORD *)v18 + 2);
            *(_WORD *)(v11 + 769) = *((_WORD *)v18 + 387);
            v11[771] = v18[2058];
            *(_QWORD *)(v4 + 8 * v13 + 56) = v11;
            ++*(_BYTE *)(v4 + 90);
            *(_BYTE *)(a1 + 1) = v13;
            return result;
          }
          free(v18);
          free(v11);
          goto LABEL_41;
        }
      }
      v18[2059] = -83;
      goto LABEL_39;
    }
    goto LABEL_26;
  }
  return result;
}

double PRPostAgree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  char *v21;
  int v22;
  unsigned __int8 *v23;
  double result;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  __int16 v29;
  const char *v30;
  size_t v31;
  int v32;
  uint64_t v33;
  char *__dst;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45[2];

  *(_QWORD *)v45 = 0;
  v3 = *(unsigned __int16 **)(a3 + 112);
  v4 = *v3;
  v44 = v3[1];
  v5 = v3[2];
  v6 = *((_QWORD *)v3 + 1);
  __dst = (char *)*((_QWORD *)v3 + 2);
  v7 = *(_QWORD *)(a1 + 64);
  if (v7 || (v7 = *(_QWORD *)(a1 + 56)) != 0)
  {
    v42 = v6 + v3[3];
    v38 = v5 >> 1;
    v39 = v3[2];
    do
    {
      if ((~*(_DWORD *)(v7 + 4) & 0x10000004) == 0 || (*(_DWORD *)(v7 + 92) & 0x82000) != 0)
      {
        v8 = *(__int16 *)(v7 + 32);
        LOWORD(v9) = v8 - 1;
        if (v8 >= 1 && (_WORD)v8 != 1)
        {
          v10 = 0;
          v11 = 0;
          v12 = 0;
          v37 = v7;
          v43 = *(_QWORD *)(v7 + 16);
          do
          {
            v13 = 0;
            v14 = ((v12 & 0x7F) << 8) + 19 * (v12 >> 7) + *(unsigned __int8 *)(v43 + (unsigned __int16)v9);
            v15 = v14 - 32749;
            if ((unsigned __int16)v14 <= 0x7FECu)
              v15 = ((v12 & 0x7F) << 8) + 19 * (v12 >> 7) + *(unsigned __int8 *)(v43 + (unsigned __int16)v9);
            v16 = (unsigned __int16)v15;
            v40 = v15;
            v41 = v15 & 0x7FFF ^ v11;
            v17 = v15 & v5;
            v18 = (unsigned __int16)v41 % v4;
            v19 = v38 - v17;
            v20 = 2 * v17;
            do
            {
              v21 = (char *)(v6 + 4 * (v18 & 0x3FFF));
              v22 = *v21;
              if ((v21[1] | ((v22 & 0x7F) << 8)) == v16)
              {
                v23 = (unsigned __int8 *)(v42
                                        + (*(unsigned __int8 *)(v6 + ((4 * (v18 & 0x3FFF)) | 3)) | ((unint64_t)*(unsigned __int8 *)(v6 + ((4 * (v18 & 0x3FFF)) | 2)) << 8)));
                if (!SLstrcmp((_BYTE *)(v43 + (unsigned __int16)v9), v23 + 2))
                  v10 = (char *)v23;
                if (v10 && *v10 >= 0)
                  LOWORD(v9) = -1;
              }
              else
              {
                if ((v22 & 0x80000000) == 0)
                  break;
                v19 += v20;
                v25 = v18 + v19;
                do
                {
                  v18 = v25;
                  v25 -= v4;
                }
                while (v4 <= (unsigned __int16)v18);
              }
              ++v13;
            }
            while (v44 >= (unsigned __int16)v13 && (__int16)v9 > 0);
            v9 = (__int16)(v9 - 1);
            v5 = v39;
            v12 = v40;
            v11 = v41;
          }
          while (v9 > 0);
          if (v10)
          {
            v26 = *v10 & 0x7F;
            if (PRliveRule(a2, a3, 0, 0xAu, v26, 0, 0))
              return result;
            v7 = v37;
            if (PRmkErr(a2, a3, v45, v37, 0, 0xAu, v26))
            {
              v33 = *(_QWORD *)(a2 + 32);
              *(_QWORD *)&result = 0xDC00000078;
              *(_QWORD *)v33 = 0xDC00000078;
              *(_WORD *)(v33 + 8) = 0;
              return result;
            }
            v27 = *(_QWORD *)v45;
            **(_WORD **)v45 = *(_WORD *)(v37 + 8);
            *(_WORD *)(v27 + 2) = *(_WORD *)(v37 + 32);
            if (PRaddRefs(a2, v27, *(char **)(v37 + 24), 1u, 1))
              return result;
            v28 = v10[1];
            v29 = *(_WORD *)(v37 + 32) - v28 + 1;
            v30 = &v10[v28 + 2];
            memcpy(__dst, *(const void **)(v37 + 24), v29);
            v31 = strlen(v30);
            memcpy(&__dst[v29], v30, v31 + 1);
            v32 = PRaddAlts(a2, *(uint64_t *)v45, __dst, 0, 1uLL, 1);
          }
          else
          {
            v32 = 0;
            v7 = v37;
          }
          if (v32)
            return result;
        }
      }
      v7 = *(_QWORD *)(v7 + 80);
    }
    while (v7);
  }
  return result;
}

uint64_t PRinitProfile(uint64_t a1, uint64_t a2, int a3, const char *a4, const char *a5)
{
  uint64_t v6;
  uint64_t v10;
  void *v11;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  size_t v17;
  void *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  unsigned __int16 v23;
  _BYTE *v24;
  _BYTE *v25;
  int v26;
  int v27;
  int v28;
  int v29[2];

  v28 = 0;
  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v6 = 0xE6FFFFFF8FLL;
    *(_WORD *)(v6 + 8) = 720;
    return 230;
  }
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(v10 + 324) = 0;
  v11 = *(void **)(v10 + 304);
  if (!a5 || !*a5)
  {
    v14 = 0;
    v16 = 0;
    goto LABEL_12;
  }
  v13 = malloc_type_calloc(1uLL, 0x210uLL, 0x1010040F03745F4uLL);
  *(_QWORD *)(v10 + 312) = v13;
  if (v13)
  {
    v14 = (uint64_t)v13;
    v15 = malloc_type_calloc(1uLL, *(unsigned __int16 *)(v10 + 122), 0xA21D8EE1uLL);
    *(_QWORD *)v14 = v15;
    if (v15)
    {
      v16 = v15;
      v17 = (unsigned __int16)strlen(a5) + 1;
      v18 = malloc_type_malloc(v17, 0x58FF89E8uLL);
      *(_QWORD *)(v14 + 8) = v18;
      if (!v18)
        goto LABEL_19;
      SLpthcpy((char *)(v14 + 16), a4);
      strncpy(*(char **)(v14 + 8), a5, v17);
      v19 = &v28;
      if (!SLOpen((uint64_t)a4, (uint64_t)a5, &v28, 0))
        return loadProfile(a1, a2, v10, v14, v16, v11, v19, 2, 0);
      *(_QWORD *)v29 = 0;
      if (SLOpen(v14 + 16, *(_QWORD *)(v14 + 8), v29, 0x602u))
      {
        v20 = *(_QWORD *)(a1 + 32);
        v21 = 0xDC00000075;
LABEL_20:
        *(_QWORD *)v20 = v21;
        v22 = 721;
        goto LABEL_21;
      }
      v23 = 3 * *(_WORD *)(v10 + 122) + 16;
      v24 = malloc_type_malloc(v23, 0x2FA63502uLL);
      if (!v24)
      {
LABEL_19:
        v20 = *(_QWORD *)(a1 + 32);
        v21 = 0xDC00000078;
        goto LABEL_20;
      }
      v25 = v24;
      qmemcpy(v24, "PRMDBPRF0000001", 15);
      v24[15] = *(_BYTE *)(a2 + 20);
      if (SLSeek(*(_DWORD *)v10, *(_DWORD *)(v10 + 4) + *(_DWORD *)(v10 + 320), 0))
      {
        free(v25);
        v20 = *(_QWORD *)(a1 + 32);
        v21 = 0xDC0000006FLL;
        goto LABEL_20;
      }
      if (SLFRead(*(_DWORD *)v10, v23 - 16, v25 + 16, (unsigned int *)&v29[1])
        || v23 - 16 != v29[1])
      {
        free(v25);
        v20 = *(_QWORD *)(a1 + 32);
        v21 = 0xDC00000070;
        goto LABEL_20;
      }
      v26 = SLFWrite(v29[0], v23, v25, (unsigned int *)&v29[1]);
      v27 = v29[1];
      free(v25);
      if (v26 || v27 != v23)
      {
        v20 = *(_QWORD *)(a1 + 32);
        v21 = 0xDC00000071;
        goto LABEL_20;
      }
      if (SLClose(v29[0]))
      {
        v20 = *(_QWORD *)(a1 + 32);
        v21 = 0xDC00000072;
        goto LABEL_20;
      }
LABEL_12:
      v19 = 0;
      return loadProfile(a1, a2, v10, v14, v16, v11, v19, 2, 0);
    }
    free(*(void **)(v10 + 312));
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v20 = 0xDC00000078;
    v22 = 724;
  }
  else
  {
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v20 = 0xDC00000078;
    v22 = 723;
  }
LABEL_21:
  *(_WORD *)(v20 + 8) = v22;
  return 220;
}

uint64_t loadProfile(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, int *a7, int a8, char a9)
{
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  BOOL v26;
  char v27;
  __int16 v28;
  BOOL v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  _BYTE __dst[15];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = 0;
  if ((*(_BYTE *)(a3 + 324) & 0x40) != 0)
  {
    v20 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v20 = 0xE6FFFFFF8FLL;
    *(_WORD *)(v20 + 8) = 722;
    return 230;
  }
  if (a5)
    v14 = a9;
  else
    v14 = 1;
  if (v14)
  {
    v15 = *(_DWORD *)(a3 + 4);
    v31 = *(_DWORD *)a3;
    v16 = v15 + *(_DWORD *)(a3 + 320);
    goto LABEL_7;
  }
  if (a7)
  {
    v23 = *a7;
    v31 = *a7;
  }
  else
  {
    if (SLOpen(a4 + 16, *(_QWORD *)(a4 + 8), &v31, 0))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = 0xDC0000006ELL;
      goto LABEL_36;
    }
    v23 = v31;
  }
  v32 = 0;
  if (SLSeek(v23, 0, 0))
  {
    v18 = *(_QWORD *)(a1 + 32);
    v24 = 0xDC0000006FLL;
LABEL_51:
    *(_QWORD *)v18 = v24;
    v28 = 724;
    goto LABEL_52;
  }
  if (SLFRead(v23, 16, __dst, &v32) || v32 != 16)
  {
    v18 = *(_QWORD *)(a1 + 32);
    v24 = 0xDC00000070;
    goto LABEL_51;
  }
  v29 = *(_QWORD *)__dst == 0x46525042444D5250 && *(_QWORD *)&__dst[7] == 0x3130303030303046;
  if (!v29 || v34 != *(_BYTE *)(a2 + 20))
  {
    v18 = *(_QWORD *)(a1 + 32);
    v24 = 0xDC00000074;
    goto LABEL_51;
  }
  v16 = 16;
LABEL_7:
  v17 = *(unsigned __int16 *)(a3 + 122);
  if (a8 != 2)
  {
    if (a8 != 3)
      goto LABEL_11;
    v16 += v17;
  }
  v16 += v17;
LABEL_11:
  if (SLSeek(v31, v16, 0))
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = 0xDC0000006FLL;
LABEL_36:
    *(_QWORD *)v18 = v19;
    v28 = 722;
LABEL_52:
    *(_WORD *)(v18 + 8) = v28;
    return 220;
  }
  if (a5)
    v25 = a5;
  else
    v25 = a6;
  if (SLFRead(v31, v17, v25, &v30) || v30 != v17)
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = 0xDC00000070;
    goto LABEL_36;
  }
  if (a5 && a6)
    memcpy(a6, a5, (__int16)v17);
  if ((_BYTE)v14)
    v26 = a5 == 0;
  else
    v26 = 1;
  v27 = *(_BYTE *)(a3 + 324) | a8;
  if (!v26)
    v27 |= 0x80u;
  *(_BYTE *)(a3 + 324) = v27;
  if (v27 & 0x40 | v14)
    return 0;
  result = SLClose(v31);
  if ((_DWORD)result)
  {
    v18 = *(_QWORD *)(a1 + 32);
    v19 = 0xDC00000072;
    goto LABEL_36;
  }
  return result;
}

uint64_t PRloadProfile(uint64_t a1, uint64_t a2, int a3, int a4, char a5)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  void *v10;
  void **v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20[2];

  if (a3)
  {
    v6 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v6 = 0xE6FFFFFF8FLL;
    *(_WORD *)(v6 + 8) = 721;
    return 230;
  }
  v9 = *(_QWORD *)(a2 + 48);
  if (!v9)
    return 0;
  v10 = *(void **)(v9 + 304);
  if (!v10)
    return 0;
  v13 = *(void ***)(v9 + 312);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_10;
  }
  v14 = *v13;
  *(_QWORD *)v20 = 0;
  if ((*(_BYTE *)(v9 + 324) & 0x40) != 0)
  {
    v15 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v15 = 0xE6FFFFFF8FLL;
    result = 230;
LABEL_28:
    *(_WORD *)(v15 + 8) = 723;
    return result;
  }
  if ((*(_BYTE *)(v9 + 324) & 0x80) != 0)
  {
    v16 = *(unsigned __int16 *)(v9 + 122);
    if (SLOpen((uint64_t)(v13 + 2), (uint64_t)v13[1], v20, 2u))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v17 = 0xDC0000006ELL;
LABEL_27:
      *(_QWORD *)v15 = v17;
      result = 220;
      goto LABEL_28;
    }
    v18 = *(_BYTE *)(v9 + 324) & 3;
    v19 = 16;
    if (v18 != 2)
    {
      if (v18 != 3)
        goto LABEL_21;
      v19 = v16 + 16;
    }
    v19 += v16;
LABEL_21:
    if (SLSeek(v20[0], v19, 0))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v17 = 0xDC0000006FLL;
    }
    else if (SLFWrite(v20[0], v16, v14, (unsigned int *)&v20[1]))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v17 = 0xDC00000071;
    }
    else
    {
      *(_BYTE *)(v9 + 324) &= 0x7Cu;
      if (!SLClose(v20[0]))
        goto LABEL_10;
      v15 = *(_QWORD *)(a1 + 32);
      v17 = 0xDC00000072;
    }
    goto LABEL_27;
  }
  *(_BYTE *)(v9 + 324) &= 0xFCu;
LABEL_10:
  if (!a4)
    return 0;
  result = loadProfile(a1, a2, v9, (uint64_t)v13, v14, v10, 0, a4, a5);
  if (!(_DWORD)result)
    return 0;
  return result;
}

uint64_t PRprune(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t result;
  unsigned __int16 *v25;
  unsigned __int16 *v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  unsigned __int16 *v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned __int16 *v38;
  unsigned __int16 *v39;
  int v40;
  unsigned __int16 *v41;
  unsigned __int16 *v42;
  unsigned __int16 *v43;
  unsigned int v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  unsigned int v47;
  unsigned __int16 *v48;
  uint64_t v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  char __s[128];
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 56);
  v5 = *(_QWORD *)(PRGetDbElem(*(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9)) + 48);
  if (*(_WORD *)(v5 + 240))
    ProcessSupTab(*(_QWORD *)(v5 + 232), *(unsigned __int16 *)(v5 + 240), v4, 0);
  v6 = PRGetAppElem(*(unsigned __int8 *)(a1 + 8));
  if (!v6)
  {
    *(_QWORD *)(a1 + 64) = 0xE6FFFFFF93;
    *(_WORD *)(a1 + 72) = 480;
    return 230;
  }
  v49 = a1;
  if (*(_BYTE *)(v6 + 48))
    ProcessSupTab(*(_QWORD *)(v6 + 40), 6 * *(unsigned __int8 *)(v6 + 48), v4, 1);
  if (v4)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v4 + 160);
      if (v7)
        break;
LABEL_36:
      v4 = *(_QWORD *)(v4 + 176);
      if (!v4)
        goto LABEL_37;
    }
    v8 = *(_QWORD *)(v4 + 160);
    while (1)
    {
      *(_WORD *)(v7 + 66) = *(_WORD *)v4;
      v9 = *(uint64_t **)(v7 + 24);
      if (!v9)
        goto LABEL_24;
      v10 = *(__int16 *)(v7 + 2);
      if (v10 > 127)
        goto LABEL_24;
      __s[0] = 0;
      if (v10 >= 1)
      {
        v11 = v4;
        do
        {
          strlen(__s);
          __strncat_chk();
          v10 -= *(unsigned __int16 *)(v11 + 32);
          if (!(_WORD)v10)
            break;
          if (*(_WORD *)(v11 + 48))
          {
            strlen(__s);
            __strncat_chk();
            v10 -= *(unsigned __int16 *)(v11 + 48);
          }
          v11 = *(_QWORD *)(v11 + 80);
          if (!v11)
            break;
        }
        while ((__int16)v10 > 0);
      }
      if (*((_WORD *)v9 + 9))
        break;
LABEL_22:
      v15 = *(_QWORD *)(v7 + 40);
      if (v8 == v7)
      {
        PRfreeErr((_QWORD *)v7);
        *(_QWORD *)(v4 + 160) = v15;
        v7 = v15;
      }
      else
      {
        *(_QWORD *)(v8 + 40) = v15;
        PRfreeErr((_QWORD *)v7);
        v15 = *(_QWORD *)(v8 + 40);
        v7 = v8;
      }
LABEL_33:
      v8 = v7;
      v7 = v15;
      if (!v15)
        goto LABEL_36;
    }
    v12 = 0;
    v13 = *v9;
    v14 = v9[1];
    while (!SLstrcmp((_BYTE *)(v13 + *(__int16 *)(v14 + 2 * v12)), (unsigned __int8 *)__s))
    {
      if (++v12 >= (unint64_t)*((unsigned __int16 *)v9 + 9))
        goto LABEL_22;
    }
LABEL_24:
    v16 = *(_QWORD *)(v7 + 40);
    if (v16)
    {
      v17 = v7;
      do
      {
        v18 = v17;
        v17 = v16;
        while (*(unsigned __int8 *)(v7 + 12) == *(unsigned __int8 *)(v17 + 12)
             && *(unsigned __int8 *)(v7 + 13) == *(unsigned __int8 *)(v17 + 13))
        {
          *(_QWORD *)(v18 + 40) = *(_QWORD *)(v17 + 40);
          PRfreeErr((_QWORD *)v17);
          v17 = *(_QWORD *)(v18 + 40);
          if (!v17)
            goto LABEL_32;
        }
        v16 = *(_QWORD *)(v17 + 40);
      }
      while (v16);
    }
LABEL_32:
    v15 = *(_QWORD *)(v7 + 40);
    goto LABEL_33;
  }
LABEL_37:
  v19 = a1;
  v20 = *(unsigned __int8 *)(a1 + 56);
  v21 = *(_QWORD *)(a2 + 56);
  if (*(_WORD *)(a2 + 14))
    v22 = v21 == 0;
  else
    v22 = 1;
  if (v22)
  {
    if ((*(_BYTE *)(a2 + 2) & 0xFE) != 2 || v21 == 0)
    {
      v28 = 0;
      goto LABEL_99;
    }
    v50 = 0;
    v51 = 0;
    v32 = 0;
    v33 = 0;
    v28 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    v52 = 0;
    v37 = 0;
    while (1)
    {
      v38 = *(unsigned __int16 **)(v21 + 160);
      if (!v38)
        goto LABEL_88;
      do
      {
        while (1)
        {
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v39 = v38;
                ConvertAlts(*((_QWORD *)v38 + 3), 0, v20);
                v38 = (unsigned __int16 *)*((_QWORD *)v39 + 5);
                *((_QWORD *)v39 + 5) = 0;
                v40 = *((unsigned __int8 *)v39 + 12);
                if (v40 != 1)
                  break;
                if (*((_BYTE *)v39 + 13) != 1)
                  goto LABEL_79;
                v41 = v51;
                v51 = v39;
                if (v50)
                  goto LABEL_84;
                v50 = v39;
                v51 = v39;
                if (!v38)
                  goto LABEL_87;
              }
              if (v40 != 58)
                break;
              v41 = v36;
              v36 = v39;
              if (v35)
                goto LABEL_84;
              v35 = v39;
              v36 = v39;
              if (!v38)
                goto LABEL_87;
            }
            if (v40 != 3 || *((unsigned __int8 *)v39 + 13) - 2 > 2)
              break;
            v41 = v52;
            v52 = v39;
            if (v28)
            {
LABEL_84:
              *((_QWORD *)v41 + 5) = v39;
              if (!v38)
                goto LABEL_87;
            }
            else
            {
              v28 = v39;
              v52 = v39;
              if (!v38)
                goto LABEL_87;
            }
          }
LABEL_79:
          if (*((_BYTE *)v39 + 14) != 1)
            break;
          v41 = v37;
          v37 = v39;
          if (v34)
            goto LABEL_84;
          v34 = v39;
          v37 = v39;
          if (!v38)
            goto LABEL_87;
        }
        v41 = v33;
        v33 = v39;
        if (v32)
          goto LABEL_84;
        v32 = v39;
        v33 = v39;
      }
      while (v38);
LABEL_87:
      *(_QWORD *)(v21 + 160) = 0;
LABEL_88:
      v21 = *(_QWORD *)(v21 + 176);
      if (!v21)
      {
        if (!v35)
          goto LABEL_92;
        if (v33)
        {
          *((_QWORD *)v33 + 5) = v35;
LABEL_92:
          if (v32)
          {
            if (v37)
              goto LABEL_94;
LABEL_118:
            v34 = v32;
            v19 = v49;
LABEL_119:
            if (v51)
            {
              *((_QWORD *)v51 + 5) = v34;
              goto LABEL_121;
            }
            v50 = v34;
LABEL_124:
            if (v52)
              *((_QWORD *)v52 + 5) = v50;
            else
              v28 = v50;
            goto LABEL_99;
          }
        }
        else
        {
          v32 = v35;
          if (!v37)
            goto LABEL_118;
LABEL_94:
          *((_QWORD *)v37 + 5) = v32;
        }
        v19 = v49;
        if (v34)
          goto LABEL_119;
LABEL_121:
        if (!v50)
          goto LABEL_99;
        goto LABEL_124;
      }
    }
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  do
  {
    v29 = *(unsigned __int16 **)(v21 + 160);
    if (!v29)
      goto LABEL_60;
    do
    {
      while (1)
      {
        v30 = v29;
        ConvertAlts(*((_QWORD *)v29 + 3), 0, v20);
        v29 = (unsigned __int16 *)*((_QWORD *)v30 + 5);
        *((_QWORD *)v30 + 5) = 0;
        if (*((_BYTE *)v30 + 12) != 1 || *((_BYTE *)v30 + 13) != 1)
          break;
        v31 = v26;
        v26 = v30;
        if (v28)
        {
LABEL_56:
          *((_QWORD *)v31 + 5) = v30;
          if (!v29)
            goto LABEL_59;
        }
        else
        {
          v28 = v30;
          v26 = v30;
          if (!v29)
            goto LABEL_59;
        }
      }
      v31 = v25;
      v25 = v30;
      if (v27)
        goto LABEL_56;
      v27 = v30;
      v25 = v30;
    }
    while (v29);
LABEL_59:
    *(_QWORD *)(v21 + 160) = 0;
LABEL_60:
    v21 = *(_QWORD *)(v21 + 176);
  }
  while (v21);
  if (v27)
  {
    if (v26)
      *((_QWORD *)v26 + 5) = v27;
    else
      v28 = v27;
  }
  v19 = v49;
LABEL_99:
  if ((*(_WORD *)(v19 + 10) & 0x40) != 0)
  {
    v42 = v28;
  }
  else
  {
    v42 = 0;
    if (v28)
    {
      do
      {
        if (v42)
        {
          v43 = 0;
          v44 = *v28;
          v45 = v42;
          while (1)
          {
            v46 = v43;
            v43 = v45;
            v45 = (unsigned __int16 *)*((_QWORD *)v45 + 5);
            v47 = *v43;
            if (!v45)
              break;
            if (v44 < v47)
              goto LABEL_108;
          }
          if (v44 >= v47)
          {
            *((_QWORD *)v43 + 5) = v28;
            v48 = (unsigned __int16 *)*((_QWORD *)v28 + 5);
            *((_QWORD *)v28 + 5) = 0;
            goto LABEL_112;
          }
LABEL_108:
          if (!v46)
          {
            v48 = (unsigned __int16 *)*((_QWORD *)v28 + 5);
            *((_QWORD *)v28 + 5) = v42;
            goto LABEL_113;
          }
          *((_QWORD *)v46 + 5) = v28;
          v48 = (unsigned __int16 *)*((_QWORD *)v28 + 5);
          *((_QWORD *)v28 + 5) = v43;
LABEL_112:
          v28 = v42;
        }
        else
        {
          v48 = (unsigned __int16 *)*((_QWORD *)v28 + 5);
          *((_QWORD *)v28 + 5) = 0;
        }
LABEL_113:
        v42 = v28;
        v28 = v48;
      }
      while (v48);
    }
  }
  result = 0;
  *(_QWORD *)(v19 + 40) = v42;
  return result;
}

uint64_t ProcessSupTab(uint64_t result, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;

  if (a3)
  {
    v7 = result;
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 + 160);
      if (v9)
      {
        do
        {
          v10 = *(unsigned __int8 *)(v9 + 12);
          v11 = *(unsigned __int8 *)(v9 + 13);
          v18 = *(_QWORD *)(v9 + 40);
          v12 = v7;
          v13 = a2;
          if (a4 == 1)
          {
            v14 = a3;
            v15 = v10;
            v16 = 0;
            v17 = 1;
          }
          else
          {
            Search(v7, a2, v8, v10, 0, 0, &v18);
            v12 = v7;
            v13 = a2;
            v14 = v8;
            v15 = v10;
            v16 = v11;
            v17 = 0;
          }
          result = Search(v12, v13, v14, v15, v16, v17, &v18);
          v9 = v18;
        }
        while (v18);
      }
      v8 = *(_QWORD *)(v8 + 176);
    }
    while (v8);
  }
  return result;
}

uint64_t Search(uint64_t result, unsigned int a2, uint64_t a3, int a4, int a5, int a6, _QWORD *a7)
{
  uint64_t v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v38;
  __int16 v39;

  v8 = a3;
  v9 = result;
  v10 = 0;
  v33 = (__int16)a2;
  v39 = 0;
  v38 = a2;
  v11 = a5 | (a4 << 8);
  while (1)
  {
    if (v10)
      goto LABEL_3;
    result = BinarySearch(v9, v33, 6, v11, 2, &v39);
    if (!(_DWORD)result)
      return result;
    v10 = v39;
    if (v39)
    {
      while (v11 == bswap32(*(unsigned __int16 *)(v9 + 6 * v10 - 6)) >> 16)
      {
        if (!--v10)
        {
          v10 = 0;
          goto LABEL_4;
        }
      }
LABEL_3:
      if (v10 == 0xFFFF)
        return result;
    }
LABEL_4:
    if (6 * (unint64_t)v10 >= v38)
      return result;
    v12 = (unsigned __int8 *)(v9 + 6 * v10);
    if (*v12 != a4)
      return result;
    if (v12[1] != a5)
      return result;
    v13 = v12[2];
    v14 = v12[3];
    v15 = v12[4];
    v16 = (char)v12[5];
    v39 = ++v10;
    if (v10 == 0xFFFF)
      return result;
    if (a6)
    {
      v17 = (char)(v16 + v15) & ~((char)(v16 + v15) >> 31);
      if (v16 >= 0)
        v17 = v15;
      v18 = v16 < 1;
      if (v16 >= 1)
        v16 += v15;
      else
        v16 = v15;
      if (v18)
        v15 = v17;
    }
    v19 = v8;
    if ((_BYTE)v15)
    {
      v20 = v8;
      if ((v15 & 0x80) != 0)
      {
        do
        {
          v19 = v20;
          v20 = *(_QWORD *)(v20 + 72);
          v23 = v15++;
          if (v20)
            v24 = v23 == 0;
          else
            v24 = 1;
        }
        while (!v24);
      }
      else
      {
        do
        {
          v19 = v20;
          v20 = *(_QWORD *)(v20 + 80);
          v21 = v15--;
          if (v20)
            v22 = v21 == 0;
          else
            v22 = 1;
        }
        while (!v22);
      }
    }
    v25 = v8;
    if ((_BYTE)v16)
    {
      v26 = v8;
      if ((v16 & 0x80) != 0)
      {
        do
        {
          v25 = v26;
          v26 = *(_QWORD *)(v26 + 72);
          v29 = v16++;
          if (v26)
            v30 = v29 == 0;
          else
            v30 = 1;
        }
        while (!v30);
      }
      else
      {
        do
        {
          v25 = v26;
          v26 = *(_QWORD *)(v26 + 80);
          v27 = v16--;
          if (v26)
            v28 = v27 == 0;
          else
            v28 = 1;
        }
        while (!v28);
      }
    }
    if (v19)
    {
      do
      {
        result = *(_QWORD *)(v19 + 160);
        if (result)
        {
          v31 = 0;
          do
          {
            if (*(unsigned __int8 *)(result + 12) == v13 && (!v14 || *(unsigned __int8 *)(result + 13) == v14))
            {
              if (result == *a7)
                *a7 = *(_QWORD *)(result + 40);
              v32 = *(_QWORD *)(result + 40);
              if (v31)
              {
                *(_QWORD *)(v31 + 40) = v32;
                PRfreeErr((_QWORD *)result);
                v32 = *(_QWORD *)(v31 + 40);
                result = v31;
              }
              else
              {
                PRfreeErr((_QWORD *)result);
                result = 0;
                *(_QWORD *)(v19 + 160) = v32;
              }
            }
            else
            {
              v32 = *(_QWORD *)(result + 40);
            }
            v31 = result;
            result = v32;
          }
          while (v32);
        }
        if (v19 == v25)
          break;
        v19 = *(_QWORD *)(v19 + 176);
      }
      while (v19);
      v10 = v39;
      v8 = a3;
    }
  }
}

uint64_t PRPunct(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  unsigned __int16 v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  __int16 v17;
  _WORD *v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  int v38;
  uint64_t i;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char *v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned int v60;
  uint64_t v61;
  unsigned __int16 *v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  uint64_t v70;
  int v71;
  int j;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned __int16 *v79;
  unsigned __int16 *v80;
  _BYTE *v81;
  char v82;
  unsigned __int8 *v83;
  unint64_t v84;
  int v85;
  _BYTE *v86;
  char v87;
  unsigned __int8 *v88;
  unint64_t v89;
  int v90;
  int v91;
  uint64_t v92;
  int v94;
  uint64_t v95;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned __int16 v101;
  _WORD *v102;
  int k;
  uint64_t v104;
  int m;
  uint64_t v106;
  __int16 v107;
  uint64_t v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unsigned __int16 *v111;
  int v112;
  unsigned __int16 v113;
  unsigned __int16 *v114;
  unsigned __int16 v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  int v119;
  unsigned int v120;
  unsigned __int16 *v121;
  int v122;
  int v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  unsigned __int16 v127;
  int v128;
  unsigned int v129;
  _QWORD *v130;
  char v131;
  _WORD *v132;
  unsigned __int16 v133;
  int v134[2];
  _WORD v135[3];
  _BYTE v136[96];
  _QWORD v137[11];
  __int128 v138;
  __int128 v139;
  char __s[64];
  _QWORD v141[3];
  _QWORD v142[6];

  v142[3] = *MEMORY[0x1E0C80C00];
  v133 = 0;
  v132 = 0;
  v131 = 0;
  result = 220;
  if (!a1)
    return result;
  if (!a2)
    return result;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return result;
  v6 = *(_QWORD *)(v5 + 56);
  if (!v6)
  {
    v116 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)v116 = 0xE6FFFFFF89;
    *(_WORD *)(v116 + 8) = 200;
    return 230;
  }
  v7 = 0;
  v129 = *(unsigned __int16 *)(v5 + 14);
  v138 = 0u;
  v139 = 0u;
  while (1)
  {
    while ((*(_DWORD *)(v6 + 4) & 0x80000000) == 0)
    {
      v6 = *(_QWORD *)(v6 + 80);
      if (!v6)
        goto LABEL_198;
    }
    v8 = (int *)(v6 + 4);
    v9 = *(_DWORD *)(v6 + 4);
    if (v9 < 0)
    {
      v10 = 0;
      do
      {
        v7 = v6;
        if (v10 <= 3u)
          *((_QWORD *)&v138 + v10) = v6;
        if ((v9 & 0xC01FFF00) >= 0xC0000001)
        {
          v11 = 0;
          if ((v9 & 0x100) != 0)
            goto LABEL_20;
          v12 = 256;
          do
          {
            v13 = v11++;
            if (v12 > 0x80000)
              break;
            v14 = v9 & (2 * v12);
            v12 *= 2;
          }
          while (!v14);
          if (v13 <= 0xB)
LABEL_20:
            *v8 = (((lpQuoTab[v11] >> (2 * *(_BYTE *)(a2 + 20) - 2)) & 3) << 24) | v9;
        }
        ++v10;
        v6 = *(_QWORD *)(v6 + 80);
        if (!v6)
          break;
        v8 = (int *)(v6 + 4);
        v9 = *(_DWORD *)(v6 + 4);
      }
      while (v9 < 0);
    }
    else
    {
      v10 = 0;
    }
    v15 = v10;
    if (v10 >= 5u)
    {
      v16 = v138;
      if (v15 > 7)
      {
        if (!(_QWORD)v138)
        {
LABEL_114:
          v6 = 0;
          goto LABEL_197;
        }
      }
      else if (!PRliveRule(a1, a2, 0, 0x34u, 99, 1, *(unsigned __int16 *)v138 >= v129))
      {
        result = PRmkErr(a1, a2, &v132, v16, 0, 0x34u, 99);
        if ((_DWORD)result)
          return result;
        v17 = *(_WORD *)(v16 + 8);
        v18 = v132;
        v132[2] = v17;
        v19 = *(_WORD *)(v7 + 8) - v17 + *(_WORD *)(v7 + 32);
        v18[3] = v19;
        *v18 = v17;
        v18[1] = v19;
      }
      v6 = *(_QWORD *)(v7 + 80);
      while (v16 != v6)
      {
        *(_DWORD *)(v16 + 4) = 1024;
        v16 = *(_QWORD *)(v16 + 80);
        if (!v16)
          goto LABEL_114;
      }
      goto LABEL_197;
    }
    if (!v10)
      break;
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 16);
    v23 = *(_QWORD *)(v22 + 56);
    v24 = *(_QWORD *)(v22 + 80);
    do
    {
      v25 = *((_QWORD *)&v138 + v20);
      v26 = *(_DWORD *)(v25 + 4);
      v27 = (v26 & 0xC01FFF00) >= 0xC0000001 && (v26 & 0x3000000) == 50331648;
      if (!v27)
        goto LABEL_80;
      if (v25 != v23)
      {
        v28 = *(_QWORD *)(v25 + 72);
        if (v28)
        {
          while (!*(_QWORD *)(v28 + 40))
          {
            v29 = *(_DWORD *)(v28 + 4);
            if ((v29 & 0xC01FFF00) >= 0xC0000001)
              __asm { BR              X0 }
            v30 = 0;
            if (v29 <= -2147483393)
            {
              if (v29 != -2147483644)
                goto LABEL_49;
            }
            else if (v29 != -2147483392)
            {
              if (v29 == -1073741820 || v29 == -1073741823)
                v30 = 1;
              goto LABEL_49;
            }
            v30 = 1;
            if (*(_QWORD *)(v28 + 72))
            {
              v27 = v28 == v23;
              v28 = *(_QWORD *)(v28 + 72);
              if (!v27)
                continue;
            }
            goto LABEL_49;
          }
        }
      }
      v30 = 1;
LABEL_49:
      LOBYTE(v31) = 1;
      v32 = *((_QWORD *)&v138 + v20);
      while (1)
      {
        v33 = v21;
        if ((v31 & 1) == 0)
          break;
        v34 = *(_QWORD *)(v32 + 80);
        if (v34)
          v35 = v32 == v24;
        else
          v35 = 1;
        if (v35)
        {
          v33 = 1;
          goto LABEL_75;
        }
        LOBYTE(v31) = 0;
        v21 = 1;
        if (!*(_QWORD *)(v32 + 40))
        {
          v32 = *(_QWORD *)(v32 + 80);
          v36 = *(_DWORD *)(v34 + 4);
          if ((v36 & 0xC01FFF00) >= 0xC0000001)
            __asm { BR              X0 }
          v31 = 1;
          if (v36 > -2147483393)
          {
            if ((v36 + 0x1FFFFFFF) > 0x1F || ((1 << (v36 - 1)) & 0x80008009) == 0)
            {
              v21 = v33;
              if (v36 != -2147483392)
                goto LABEL_69;
            }
            else
            {
LABEL_70:
              v21 = v31;
              LOBYTE(v31) = 0;
            }
          }
          else
          {
            if (v36 == -2147483646)
              goto LABEL_70;
            v21 = v33;
            if (v36 != -2147483644)
            {
              if (v36 == -2147483632)
                goto LABEL_70;
LABEL_69:
              v31 = 0;
              goto LABEL_70;
            }
          }
        }
      }
      if (v30 && !(_DWORD)v21)
      {
        v38 = -16777217;
LABEL_78:
        *(_DWORD *)(v25 + 4) = v38 & v26;
        goto LABEL_79;
      }
LABEL_75:
      if (!v30 && (_DWORD)v33)
      {
        v38 = -33554433;
        goto LABEL_78;
      }
LABEL_79:
      v21 = v33;
LABEL_80:
      ++v20;
    }
    while (v20 != v10);
    for (i = 0; i != v10; ++i)
    {
      if (!v131)
      {
        v40 = *((_QWORD *)&v138 + i);
        v41 = *(_DWORD *)(v40 + 4);
        if (v41 == -2147483647)
        {
          if (*(_WORD *)(v40 + 48)
            || (v44 = *(_QWORD *)(v40 + 80)) == 0
            || *(_WORD *)(v44 + 32) != 2
            || (v45 = *(unsigned __int8 **)(v44 + 16), *v45 - 48 > 9)
            || v45[1] - 48 >= 0xA)
          {
            if (v133 && (LOBYTE(v137[3 * v133 - 3]) | 4) == 4)
              *(_QWORD *)&v136[24 * v133 - 8] = v40;
          }
        }
        else
        {
          v42 = *(_QWORD *)(a2 + 80);
          if (*(_WORD *)(v42 + 1096))
          {
            v43 = 0;
            while (*(_DWORD *)(*(_QWORD *)(v42 + 1104) + 4 * v43) != v41)
            {
              if (*(unsigned __int16 *)(v42 + 1096) == ++v43)
                goto LABEL_86;
            }
            v46 = *(unsigned __int8 *)(*(_QWORD *)(v42 + 1112) + v43);
            if (v46 == 2)
            {
              PRclsScope(a1, a2, (uint64_t)v136, &v133, (unsigned __int16 *)v40, *(unsigned __int8 *)(*(_QWORD *)(v42 + 1120) + v43), v129, &v131);
            }
            else if (v46 == 1)
            {
              PRopnScope(a1, a2, (uint64_t)v136, &v133, (char **)v40, *(unsigned __int8 *)(*(_QWORD *)(v42 + 1120) + v43), v129, &v131);
            }
            else
            {
              v47 = *(_QWORD *)(a1 + 32);
              *(_QWORD *)v47 = 0xDC0000007BLL;
              *(_WORD *)(v47 + 8) = 580;
            }
          }
        }
      }
LABEL_86:
      ;
    }
    v127 = v10 - 1;
    if (v10 != 1)
      goto LABEL_116;
LABEL_197:
    v138 = 0u;
    v139 = 0u;
    if (!v6)
    {
LABEL_198:
      if (!v131)
      {
        v108 = v133;
        if (v133)
        {
          *(_QWORD *)__s = 0;
          v109 = (unsigned __int8 *)v137;
          do
          {
            v110 = *((_QWORD *)v109 + 1);
            if (v110)
            {
              if (**(_BYTE **)(v110 + 16) == 39)
                *(_DWORD *)(v110 + 4) = -1056962560;
              else
                *(_DWORD *)(v110 + 4) = -1056956416;
            }
            else
            {
              v111 = (unsigned __int16 *)*((_QWORD *)v109 - 1);
              v112 = pClsMissed[*v109 + (unint64_t)pMissedOffset[*(unsigned __int8 *)(a2 + 20)]];
              if (!PRliveRule(a1, a2, 0, 0x34u, v112, 1, *v111 >= v129))
              {
                result = PRmkErr(a1, a2, __s, (uint64_t)v111, 0, 0x34u, v112);
                if ((_DWORD)result)
                  return result;
                v113 = v111[4];
                v114 = *(unsigned __int16 **)__s;
                *(_WORD *)(*(_QWORD *)__s + 4) = v113;
                v115 = v111[16];
                v114[3] = v115;
                *v114 = v113;
                v114[1] = v115;
              }
            }
            v109 += 24;
            --v108;
          }
          while (v108);
        }
      }
      return 0;
    }
  }
  v127 = -1;
LABEL_116:
  v48 = 0;
  v128 = (__int16)v10 - 2;
  v49 = v10;
  v123 = v10 - 2;
  v126 = v7;
  while (1)
  {
    *(_QWORD *)v134 = 0;
    if (v128 < (__int16)v48)
      break;
    v130 = *(_QWORD **)(a2 + 80);
    v50 = *(unsigned __int8 *)(a2 + 20);
    v51 = PRDblIdx(*(_DWORD *)(*((_QWORD *)&v138 + (unsigned __int16)v48) + 4), v50);
    if (v51 <= 0x16
      && (v52 = v51,
          v53 = PRDblIdx(*(_DWORD *)(*((_QWORD *)&v138 + (unsigned __int16)v48 + 1) + 4), v50),
          v53 <= 0x16)
      && (v54 = (char *)v130 + 46 * v52, v55 = *(__int16 *)&v54[2 * v53], *(_WORD *)&v54[2 * v53]))
    {
      v56 = *(_WORD *)&v54[2 * v53];
      if (v55 < 0)
      {
        if (v123 == (unsigned __int16)v48)
        {
          v57 = 23;
        }
        else
        {
          v58 = v50;
          v59 = *(__int16 *)&v54[2 * v53];
          v60 = PRDblIdx(*(_DWORD *)(*((_QWORD *)&v138 + (unsigned __int16)v48 + 2) + 4), v58);
          v55 = v59;
          v57 = v60;
        }
        v56 = *(_WORD *)(v130[133] + 48 * (unsigned __int16)((v55 & 0x7FFF) - 1) + 2 * v57);
        if (!v56)
          goto LABEL_135;
      }
      v61 = 0;
      v62 = (unsigned __int16 *)(v130[134] + 6 * (unsigned __int16)((v56 & 0x7FFF) - 1));
      v63 = *v62;
      v64 = v62[1];
      v65 = v64 & 7;
      v66 = (v64 >> 3) & 7;
      v135[0] = (v62[1] >> 6) & 7;
      v135[1] = (v64 >> 9) & 7;
      v135[2] = (v64 >> 12) & 7;
      v67 = v62[2];
      v68 = v130[135];
      v124 = *(unsigned __int8 *)(v68 + (unsigned __int16)(v67 + 1));
      v125 = *(unsigned __int8 *)(v68 + v67);
      v69 = v67 + 2;
      while (((v65 << v61) & 4) == 0)
      {
        if ((_DWORD)++v61 == 3)
        {
          v117 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)v117 = 0xDC0000007BLL;
          goto LABEL_212;
        }
      }
      v122 = v55;
      v121 = (unsigned __int16 *)*((_QWORD *)&v138 + (unsigned __int16)v48 + v61);
      v120 = v63 >> 8;
      v118 = v66;
      v119 = v63;
      if (!PRliveRule(a1, a2, 0, v63 >> 8, v63, 1, *v121 >= v129))
      {
        result = PRmkErr(a1, a2, v134, (uint64_t)v121, 0, v120, v119);
        if ((_DWORD)result)
          return result;
        v70 = 0;
        memset(v142, 0, 24);
        memset(v141, 0, sizeof(v141));
        do
        {
          v71 = (unsigned __int16)v135[v70];
          if (!v135[v70])
            break;
          for (j = 0; j != 3; ++j)
          {
            if (((v71 << j) & 4) != 0)
              break;
          }
          v73 = *((_QWORD *)&v138 + j + (unsigned __int16)v48);
          v74 = 2;
          v75 = (unsigned __int16)v48 + 2;
          do
          {
            if (((v71 << v74) & 4) != 0 && v49 > (unsigned __int16)v75 && *((_QWORD *)&v138 + v75))
              break;
            --v74;
            --v75;
          }
          while (v74 != -1);
          v76 = *((_QWORD *)&v138 + v74 + (unsigned __int16)v48);
          v142[v70] = v73;
          v141[v70++] = v76;
        }
        while (v70 != 3);
        v77 = 0;
        LOWORD(v78) = 0;
        __s[0] = 0;
        while (1)
        {
          v79 = (unsigned __int16 *)v142[v77];
          if (!v79)
            break;
          v80 = (unsigned __int16 *)v141[v77];
          do
          {
            if (*v79 > *v80)
              break;
            v81 = (_BYTE *)*((_QWORD *)v79 + 3);
            v82 = *v81;
            if (*v81 && (unsigned __int16)v78 <= 0x3Eu)
            {
              v78 = (unsigned __int16)v78;
              v83 = v81 + 1;
              do
              {
                v84 = v78;
                __s[v78++] = v82;
                if (v84 > 0x3D)
                  break;
                v85 = *v83++;
                v82 = v85;
              }
              while (v85);
            }
            if (v79 != v80)
            {
              v86 = (_BYTE *)*((_QWORD *)v79 + 5);
              if (v86)
              {
                v87 = *v86;
                if (*v86)
                {
                  if ((unsigned __int16)v78 <= 0x3Eu)
                  {
                    v78 = (unsigned __int16)v78;
                    v88 = v86 + 1;
                    do
                    {
                      v89 = v78;
                      __s[v78++] = v87;
                      if (v89 > 0x3D)
                        break;
                      v90 = *v88++;
                      v87 = v90;
                    }
                    while (v90);
                  }
                }
              }
            }
            v79 = (unsigned __int16 *)*((_QWORD *)v79 + 10);
          }
          while (v79);
          __s[(unsigned __int16)v78] = 0;
          LOWORD(v78) = v78 + 1;
          if (++v77 == 3)
            goto LABEL_169;
        }
        if (!(_WORD)v77)
          goto LABEL_170;
LABEL_169:
        result = PRaddRefs(a1, *(uint64_t *)v134, __s, (unsigned __int16)v77, 0);
        if ((_DWORD)result)
          return result;
LABEL_170:
        if (v125)
        {
          v91 = 0;
          v92 = v130[135];
          do
          {
            PRInsRefs(*(uint64_t *)v134, (_BYTE *)(v92 + v69), (uint64_t)__s);
            result = PRaddAlts(a1, *(uint64_t *)v134, __s, 0, 1uLL, 0);
            if ((_DWORD)result)
              return result;
            v92 = v130[135];
            while (*(unsigned __int8 *)(v92 + v69++))
              ;
          }
          while (v125 > (unsigned __int16)++v91);
        }
        if (v124)
        {
          v94 = 0;
          v95 = v130[135];
          do
          {
            PRInsRefs(*(uint64_t *)v134, (_BYTE *)(v95 + v69), (uint64_t)__s);
            result = PRaddFils(a1, *(uint64_t *)v134, __s, 1u, 0);
            if ((_DWORD)result)
              return result;
            v95 = v130[135];
            while (*(unsigned __int8 *)(v95 + v69++))
              ;
          }
          while (v124 > (unsigned __int16)++v94);
        }
        v97 = 2;
        v98 = (unsigned __int16)v48 + 2;
        v99 = v98;
        do
        {
          if (((v65 << v97) & 4) != 0 && v49 > (unsigned __int16)v99 && *((_QWORD *)&v138 + v99))
            break;
          --v97;
          --v99;
        }
        while (v97 != -1);
        v100 = *((_QWORD *)&v138 + v97 + (unsigned __int16)v48);
        v101 = v121[4];
        v102 = *(_WORD **)v134;
        *(_WORD *)(*(_QWORD *)v134 + 4) = v101;
        LOWORD(v100) = *(_WORD *)(v100 + 8) - v101 + *(_WORD *)(v100 + 32);
        v102[3] = v100;
        *v102 = v101;
        v102[1] = v100;
        if (v118)
        {
          for (k = 0; k != 3; ++k)
          {
            if (((v118 << k) & 4) != 0)
              break;
          }
          v104 = *((_QWORD *)&v138 + k + (unsigned __int16)v48);
          for (m = 2; m != -1; --m)
          {
            if (((v118 << m) & 4) != 0 && v49 > (unsigned __int16)v98 && *((_QWORD *)&v138 + v98))
              break;
            --v98;
          }
          v106 = *((_QWORD *)&v138 + m + (unsigned __int16)v48);
          v107 = *(_WORD *)(v104 + 8);
          v102[4] = v107;
          v102[5] = *(_WORD *)(v106 + 8) - v107 + *(_WORD *)(v106 + 32);
        }
      }
      if (v122 < 0)
LABEL_135:
        ++v48;
      v7 = v126;
    }
    else
    {
      v7 = v126;
    }
    if ((unsigned __int16)++v48 >= v127)
      goto LABEL_197;
  }
  v117 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v117 = 0xDC00000068;
LABEL_212:
  *(_WORD *)(v117 + 8) = 200;
  return 220;
}

