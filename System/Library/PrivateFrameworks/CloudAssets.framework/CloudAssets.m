void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_2568B74A0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_2568B74A0);
  }
}

uint64_t AssetDownloadResponse.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237F92868();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

void AssetDownloadResponse.asset.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_237F92850();
  sub_237F91A80(v1 + *(int *)(v3 + 20), a1, type metadata accessor for Asset);
}

uint64_t type metadata accessor for AssetDownloadResponse()
{
  uint64_t result;

  result = qword_2568B7578;
  if (!qword_2568B7578)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AssetDownloadResponse.fileURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237F92850();
  sub_237F92860();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t AssetDownloadResponse.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_237F92850() + 28));
}

uint64_t AssetDownloadResponse.init(id:asset:fileURL:range:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v14 = sub_237F92868();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a7, a1, v14);
  v15 = (int *)sub_237F92850();
  sub_237F90BE0(a2, a7 + v15[5]);
  v16 = a7 + v15[6];
  v17 = sub_237F92860();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a3, v17);
  v19 = a7 + v15[7];
  *(_QWORD *)v19 = a4;
  *(_QWORD *)(v19 + 8) = a5;
  *(_BYTE *)(v19 + 16) = a6 & 1;
  return result;
}

uint64_t sub_237F90BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Asset(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void AssetDownloadResponse.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;

  v1 = v0;
  sub_237F92868();
  sub_237F91B50(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  dispatch thunk of Hashable.hash(into:)();
  v2 = sub_237F92850();
  v3 = v0 + *(int *)(v2 + 20);
  Asset.ID.hash(into:)();
  v4 = sub_237F928BC();
  v5 = (uint64_t *)(v3 + *(int *)(v4 + 20));
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  v9 = v5[3];
  sub_237F91894(*v5, v7);
  Data.hash(into:)();
  sub_237F918D8(v6, v7);
  sub_237F91894(v8, v9);
  Data.hash(into:)();
  sub_237F918D8(v8, v9);
  Hasher._combine(_:)(*(_QWORD *)(v3 + *(int *)(v4 + 24)));
  sub_237F92860();
  sub_237F91B50(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  dispatch thunk of Hashable.hash(into:)();
  v10 = v1 + *(int *)(v2 + 28);
  if (*(_BYTE *)(v10 + 16) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)v10;
    v11 = *(_QWORD *)(v10 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v11);
  }
}

uint64_t static AssetDownloadResponse.== infix(_:_:)()
{
  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    sub_237F92850();
    static Asset.== infix(_:_:)();
  }
  return 0;
}

BOOL sub_237F90E4C(char a1, char a2)
{
  return a1 == a2;
}

void sub_237F90E5C(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_237F90E80(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_237F91004()
{
  return 4;
}

Swift::Int sub_237F9100C(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t sub_237F91050()
{
  return 0;
}

uint64_t sub_237F9105C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237F91084 + 4 * byte_237FE6E70[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_237F91084()
{
  return 0x7465737361;
}

uint64_t sub_237F91098()
{
  return 0x4C5255656C6966;
}

uint64_t sub_237F910B0()
{
  return 0x65676E6172;
}

BOOL sub_237F910C4(char *a1, char *a2)
{
  return sub_237F90E4C(*a1, *a2);
}

Swift::Int sub_237F910D0()
{
  unsigned __int8 *v0;

  return sub_237F9100C(*v0);
}

void sub_237F910D8(uint64_t a1)
{
  unsigned __int8 *v1;

  sub_237F90E5C(a1, *v1);
}

Swift::Int sub_237F910E0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_237F91120()
{
  unsigned __int8 *v0;

  return sub_237F9105C(*v0);
}

uint64_t sub_237F91128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237F90E80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237F9114C()
{
  return sub_237F91050();
}

uint64_t sub_237F91168@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237F91004();
  *a1 = result;
  return result;
}

uint64_t sub_237F9118C()
{
  sub_237F91980();
  return CodingKey.description.getter();
}

uint64_t sub_237F911B4()
{
  sub_237F91980();
  return CodingKey.debugDescription.getter();
}

uint64_t AssetDownloadResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = sub_237F9191C(&qword_2568B7520);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  sub_237F92870();
  sub_237F9195C(a1, a1[3]);
  sub_237F91980();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_237F91B50(&qword_2568B7530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_237F928A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AssetDownloadResponse();
    type metadata accessor for Asset(0);
    sub_237F91B50((unint64_t *)&unk_2568B8970, type metadata accessor for Asset, (uint64_t)&protocol conformance descriptor for Asset);
    sub_237F9281C();
    type metadata accessor for URL();
    sub_237F91B50(&qword_2568B7538, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_237F9281C();
    sub_237F9191C(&qword_2568B8920);
    sub_237F91A20(&qword_2568B7540, MEMORY[0x24BEE1770], MEMORY[0x24BEE1B98]);
    sub_237F928A8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v2, v4);
}

Swift::Int AssetDownloadResponse.hashValue.getter()
{
  Hasher.init(_seed:)();
  AssetDownloadResponse.hash(into:)();
  return Hasher._finalize()();
}

void AssetDownloadResponse.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  __int128 v35;
  char v36;
  char v37;

  v24 = a2;
  v4 = type metadata accessor for URL();
  v5 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  v27 = v5;
  MEMORY[0x24BDAC7A8]();
  sub_237F9283C();
  v25 = v6;
  v29 = type metadata accessor for Asset(0);
  MEMORY[0x24BDAC7A8]();
  sub_237F9283C();
  v28 = v7;
  v31 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8]();
  sub_237F9283C();
  v30 = v9;
  v33 = sub_237F9191C(&qword_2568B7548);
  v10 = *(_QWORD *)(v33 - 8);
  MEMORY[0x24BDAC7A8]();
  sub_237F92870();
  v11 = (int *)type metadata accessor for AssetDownloadResponse();
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_237F9195C(a1, a1[3]);
  sub_237F91980();
  v32 = v2;
  v14 = (uint64_t)v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14)
  {
    sub_237F91A00((uint64_t)a1);
  }
  else
  {
    v15 = v28;
    v23[2] = v10;
    v34 = a1;
    v16 = (uint64_t)v13;
    LOBYTE(v35) = 0;
    sub_237F91B50(&qword_2568B7550, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    v18 = v30;
    v17 = v31;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v23[1] = v8;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v16, v18, v17);
    LOBYTE(v35) = 1;
    sub_237F91B50(&qword_2568B7558, type metadata accessor for Asset, (uint64_t)&protocol conformance descriptor for Asset);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F90BE0(v15, v16 + v11[5]);
    LOBYTE(v35) = 2;
    sub_237F91B50(&qword_2568B7560, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v20 = v25;
    v19 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v16 + v11[6], v20, v19);
    sub_237F9191C(&qword_2568B8920);
    v37 = 3;
    sub_237F91A20(&qword_2568B7568, MEMORY[0x24BEE1798], MEMORY[0x24BEE1BC8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_237F9280C();
    v21 = v36;
    v22 = v16 + v11[7];
    *(_OWORD *)v22 = v35;
    *(_BYTE *)(v22 + 16) = v21;
    sub_237F91A80(v16, v24, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    sub_237F91A00((uint64_t)v34);
    sub_237F91AC0(v16, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  }
}

Swift::Int sub_237F91830()
{
  Hasher.init(_seed:)();
  AssetDownloadResponse.hash(into:)();
  return Hasher._finalize()();
}

void sub_237F91868(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AssetDownloadResponse.init(from:)(a1, a2);
}

uint64_t sub_237F9187C(_QWORD *a1)
{
  return AssetDownloadResponse.encode(to:)(a1);
}

uint64_t sub_237F91894(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_237F918D8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_237F9191C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B829E6C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_QWORD *sub_237F9195C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_237F91980()
{
  unint64_t result;

  result = qword_2568B7528;
  if (!qword_2568B7528)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7094, &type metadata for AssetDownloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7528);
  }
  return result;
}

uint64_t sub_237F919BC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x23B829E78](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_237F91A00(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_237F91A20(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_237F919BC(&qword_2568B8920);
    v8 = a2;
    result = MEMORY[0x23B829E84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

void sub_237F91A80(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  sub_237F928A0();
}

void sub_237F91AC0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_237F928A0();
}

void sub_237F91AF8()
{
  sub_237F91B50(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

void sub_237F91B24()
{
  sub_237F91B50(&qword_2568B7570, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadResponse, (uint64_t)&protocol conformance descriptor for AssetDownloadResponse);
}

void sub_237F91B50(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = a2(255);
    atomic_store(MEMORY[0x23B829E84](a3, v5), a1);
  }
  sub_237F928A0();
}

char *initializeBufferWithCopyOfBuffer for AssetDownloadResponse(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v38 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v38 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = &a1[v8];
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v41 = v11;
    v40(v9, v10, v11);
    v12 = (int *)type metadata accessor for Asset.ID(0);
    v13 = v12[5];
    v14 = &v9[v13];
    v15 = &v10[v13];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = v12[6];
    v18 = (uint64_t *)&v9[v17];
    v19 = (uint64_t *)&v10[v17];
    v20 = *v19;
    v21 = v19[1];
    swift_bridgeObjectRetain();
    sub_237F91894(v20, v21);
    *v18 = v20;
    v18[1] = v21;
    v22 = v12[7];
    v23 = (uint64_t *)&v9[v22];
    v24 = (uint64_t *)&v10[v22];
    v25 = *v24;
    v26 = v24[1];
    sub_237F91894(*v24, v26);
    *v23 = v25;
    v23[1] = v26;
    v27 = type metadata accessor for Asset(0);
    v28 = *(int *)(v27 + 20);
    v29 = (uint64_t *)&v9[v28];
    v30 = &v10[v28];
    v31 = *(_QWORD *)&v10[v28];
    v32 = *(_QWORD *)&v10[v28 + 8];
    sub_237F91894(v31, v32);
    *v29 = v31;
    v29[1] = v32;
    v33 = *((_QWORD *)v30 + 2);
    v34 = *((_QWORD *)v30 + 3);
    sub_237F91894(v33, v34);
    v29[2] = v33;
    v29[3] = v34;
    *(_QWORD *)&v9[*(int *)(v27 + 24)] = *(_QWORD *)&v10[*(int *)(v27 + 24)];
    v40(&a1[a3[6]], (char *)a2 + a3[6], v41);
    v35 = a3[7];
    v36 = &a1[v35];
    v37 = (char *)a2 + v35;
    *(_OWORD *)v36 = *(_OWORD *)v37;
    v36[16] = v37[16];
  }
  return a1;
}

uint64_t destroy for AssetDownloadResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for URL();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v10(v5, v6);
  v7 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(v5 + *(int *)(v7 + 24)), *(_QWORD *)(v5 + *(int *)(v7 + 24) + 8));
  sub_237F918D8(*(_QWORD *)(v5 + *(int *)(v7 + 28)), *(_QWORD *)(v5 + *(int *)(v7 + 28) + 8));
  v8 = v5 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_237F918D8(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
  sub_237F918D8(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
  return ((uint64_t (*)(uint64_t, uint64_t))v10)(a1 + *(int *)(a2 + 24), v6);
}

uint64_t initializeWithCopy for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v38)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v38(v8, v9, v10);
  v11 = (int *)type metadata accessor for Asset.ID(0);
  v12 = v11[5];
  v13 = (_QWORD *)(v8 + v12);
  v14 = (_QWORD *)(v9 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = v11[6];
  v17 = (uint64_t *)(v8 + v16);
  v18 = (uint64_t *)(v9 + v16);
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain();
  sub_237F91894(v19, v20);
  *v17 = v19;
  v17[1] = v20;
  v21 = v11[7];
  v22 = (uint64_t *)(v8 + v21);
  v23 = (uint64_t *)(v9 + v21);
  v24 = *v23;
  v25 = v23[1];
  sub_237F91894(*v23, v25);
  *v22 = v24;
  v22[1] = v25;
  v26 = type metadata accessor for Asset(0);
  v27 = *(int *)(v26 + 20);
  v28 = (uint64_t *)(v8 + v27);
  v29 = v9 + v27;
  v30 = *(_QWORD *)(v9 + v27);
  v31 = *(_QWORD *)(v9 + v27 + 8);
  sub_237F91894(v30, v31);
  *v28 = v30;
  v28[1] = v31;
  v32 = *(_QWORD *)(v29 + 16);
  v33 = *(_QWORD *)(v29 + 24);
  sub_237F91894(v32, v33);
  v28[2] = v32;
  v28[3] = v33;
  *(_QWORD *)(v8 + *(int *)(v26 + 24)) = *(_QWORD *)(v9 + *(int *)(v26 + 24));
  v38(a1 + a3[6], a2 + a3[6], v10);
  v34 = a3[7];
  v35 = a1 + v34;
  v36 = a2 + v34;
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *(_BYTE *)(v35 + 16) = *(_BYTE *)(v36 + 16);
  return a1;
}

uint64_t assignWithCopy for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v46)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v46(v8, v9, v10);
  v11 = (int *)type metadata accessor for Asset.ID(0);
  v12 = v11[5];
  v13 = (_QWORD *)(v8 + v12);
  v14 = (_QWORD *)(v9 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = v11[6];
  v16 = (uint64_t *)(v8 + v15);
  v17 = (uint64_t *)(v9 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_237F91894(*v17, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_237F918D8(v20, v21);
  v22 = v11[7];
  v23 = (uint64_t *)(v8 + v22);
  v24 = (uint64_t *)(v9 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_237F91894(*v24, v26);
  v27 = *v23;
  v28 = v23[1];
  *v23 = v25;
  v23[1] = v26;
  sub_237F918D8(v27, v28);
  v29 = type metadata accessor for Asset(0);
  v30 = *(int *)(v29 + 20);
  v31 = (uint64_t *)(v8 + v30);
  v32 = v9 + v30;
  v33 = *(_QWORD *)(v9 + v30);
  v34 = *(_QWORD *)(v9 + v30 + 8);
  sub_237F91894(v33, v34);
  v35 = *v31;
  v36 = v31[1];
  *v31 = v33;
  v31[1] = v34;
  sub_237F918D8(v35, v36);
  v37 = *(_QWORD *)(v32 + 16);
  v38 = *(_QWORD *)(v32 + 24);
  sub_237F91894(v37, v38);
  v39 = v31[2];
  v40 = v31[3];
  v31[2] = v37;
  v31[3] = v38;
  sub_237F918D8(v39, v40);
  *(_QWORD *)(v8 + *(int *)(v29 + 24)) = *(_QWORD *)(v9 + *(int *)(v29 + 24));
  v46(a1 + a3[6], a2 + a3[6], v10);
  v41 = a3[7];
  v42 = a1 + v41;
  v43 = a2 + v41;
  v44 = *(_BYTE *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = v44;
  return a1;
}

uint64_t initializeWithTake for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(v8 + v12[5]) = *(_OWORD *)(v9 + v12[5]);
  *(_OWORD *)(v8 + v12[6]) = *(_OWORD *)(v9 + v12[6]);
  *(_OWORD *)(v8 + v12[7]) = *(_OWORD *)(v9 + v12[7]);
  v13 = type metadata accessor for Asset(0);
  v14 = *(int *)(v13 + 20);
  v15 = (_OWORD *)(v8 + v14);
  v16 = (_OWORD *)(v9 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_QWORD *)(v8 + *(int *)(v13 + 24)) = *(_QWORD *)(v9 + *(int *)(v13 + 24));
  v11(a1 + a3[6], a2 + a3[6], v10);
  v18 = a3[7];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_OWORD *)v19 = *(_OWORD *)v20;
  *(_BYTE *)(v19 + 16) = *(_BYTE *)(v20 + 16);
  return a1;
}

uint64_t assignWithTake for AssetDownloadResponse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for Asset.ID(0);
  v13 = v12[5];
  v14 = (_QWORD *)(v8 + v13);
  v15 = (uint64_t *)(v9 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v12[6];
  v19 = *(_QWORD *)(v8 + v18);
  v20 = *(_QWORD *)(v8 + v18 + 8);
  *(_OWORD *)(v8 + v18) = *(_OWORD *)(v9 + v18);
  sub_237F918D8(v19, v20);
  v21 = v12[7];
  v22 = *(_QWORD *)(v8 + v21);
  v23 = *(_QWORD *)(v8 + v21 + 8);
  *(_OWORD *)(v8 + v21) = *(_OWORD *)(v9 + v21);
  sub_237F918D8(v22, v23);
  v24 = type metadata accessor for Asset(0);
  v25 = *(int *)(v24 + 20);
  v26 = v8 + v25;
  v27 = v9 + v25;
  v28 = *(_QWORD *)(v8 + v25);
  v29 = *(_QWORD *)(v8 + v25 + 8);
  *(_OWORD *)(v8 + v25) = *(_OWORD *)(v9 + v25);
  sub_237F918D8(v28, v29);
  v30 = *(_QWORD *)(v26 + 16);
  v31 = *(_QWORD *)(v26 + 24);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)(v27 + 16);
  sub_237F918D8(v30, v31);
  *(_QWORD *)(v8 + *(int *)(v24 + 24)) = *(_QWORD *)(v9 + *(int *)(v24 + 24));
  v11(a1 + a3[6], a2 + a3[6], v10);
  v32 = a3[7];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_OWORD *)v33 = *(_OWORD *)v34;
  *(_BYTE *)(v33 + 16) = *(_BYTE *)(v34 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetDownloadResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237F92400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_237F92868();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v9 = sub_237F928BC();
    if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
    {
      v7 = v9;
      v10 = *(int *)(a3 + 20);
    }
    else
    {
      v7 = sub_237F92860();
      v10 = *(int *)(a3 + 24);
    }
    v8 = a1 + v10;
  }
  return _s11CloudAssets21UploadResponseMessageOwet_0(v8, a2, v7);
}

uint64_t _s11CloudAssets21UploadResponseMessageOwet_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for AssetDownloadResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237F92498(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_237F92868();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v11 = sub_237F928BC();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = *(int *)(a4 + 20);
    }
    else
    {
      v9 = sub_237F92860();
      v12 = *(int *)(a4 + 24);
    }
    v10 = a1 + v12;
  }
  return _s11CloudAssets21UploadResponseMessageOwst_0(v10, a2, a2, v9);
}

uint64_t _s11CloudAssets21UploadResponseMessageOwst_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_237F9252C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Asset(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for URL();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for AssetDownloadResponse.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AssetDownloadResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 3) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v5 = v6 - 4;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetDownloadResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_237F926B8 + 4 * byte_237FE6E79[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_237F926EC + 4 * byte_237FE6E74[v4]))();
}

uint64_t sub_237F926EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F926F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237F926FCLL);
  return result;
}

uint64_t sub_237F92708(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237F92710);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_237F92714(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F9271C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F92728(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_237F92734(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetDownloadResponse.CodingKeys()
{
  return &type metadata for AssetDownloadResponse.CodingKeys;
}

unint64_t sub_237F92750()
{
  unint64_t result;

  result = qword_2568B7588;
  if (!qword_2568B7588)
  {
    result = MEMORY[0x23B829E84](&unk_237FE706C, &type metadata for AssetDownloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7588);
  }
  return result;
}

unint64_t sub_237F92790()
{
  unint64_t result;

  result = qword_2568B7590;
  if (!qword_2568B7590)
  {
    result = MEMORY[0x23B829E84](&unk_237FE6FDC, &type metadata for AssetDownloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7590);
  }
  return result;
}

unint64_t sub_237F927D0()
{
  unint64_t result;

  result = qword_2568B7598;
  if (!qword_2568B7598)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7004, &type metadata for AssetDownloadResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7598);
  }
  return result;
}

uint64_t sub_237F9280C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 208) + 8))(*(_QWORD *)(v0 - 136), *(_QWORD *)(v0 - 128));
}

uint64_t sub_237F9281C()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_237F92850()
{
  return type metadata accessor for AssetDownloadResponse();
}

uint64_t sub_237F92858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_237F92860()
{
  return type metadata accessor for URL();
}

uint64_t sub_237F92868()
{
  return type metadata accessor for UUID();
}

uint64_t sub_237F92888()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237F928BC()
{
  return type metadata accessor for Asset(0);
}

void static Asset.== infix(_:_:)()
{
  sub_237F964B4();
}

uint64_t sub_237F928E8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  char v5;
  uint64_t result;

  if ((a1 & 1) == 0)
    return 0;
  v1 = type metadata accessor for Asset.ID(0);
  sub_237F96208(v1);
  v4 = v4 && v2 == v3;
  if (v4 || (v5 = sub_237F96484(), result = 0, (v5 & 1) != 0))
    sub_237F96174();
  return result;
}

uint64_t Asset.ID.Builder.__allocating_init(partition:ownerID:signature:)()
{
  uint64_t v0;

  sub_237F96374();
  v0 = swift_allocObject();
  Asset.ID.Builder.init(partition:ownerID:signature:)();
  return v0;
}

uint64_t Asset.ID.Builder.init(partition:ownerID:signature:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  sub_237F96374();
  v6 = v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_partition;
  v7 = sub_237F92860();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
  v9 = (_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_ownerID);
  *v9 = v4;
  v9[1] = v3;
  v10 = (_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature);
  *v10 = v2;
  v10[1] = v0;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  *(_OWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature) = xmmword_237FE70F0;
  return v1;
}

uint64_t Asset.ID.Builder.setReferenceSignature(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;

  v3 = (uint64_t *)(v2 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature);
  *v3 = a1;
  v3[1] = a2;
  sub_237F91894(a1, a2);
  sub_237F962F0();
  return sub_237F96270();
}

uint64_t Asset.ID.Builder.build()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;

  v3 = v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_partition;
  v4 = sub_237F92860();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_ownerID);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_ownerID + 8);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = (_QWORD *)(a1 + v7[5]);
  *v8 = v6;
  v8[1] = v5;
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature + 8);
  v10 = (_QWORD *)(a1 + v7[6]);
  *v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature);
  v10[1] = v9;
  v11 = v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature;
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature);
  v13 = *(_QWORD *)(v11 + 8);
  v14 = (uint64_t *)(a1 + v7[7]);
  *v14 = v12;
  v14[1] = v13;
  swift_bridgeObjectRetain();
  sub_237F96288();
  return sub_237F91894(v12, v13);
}

void Asset.ID.Builder.deinit()
{
  uint64_t v0;

  v0 = sub_237F92860();
  sub_237F96160(v0);
  swift_bridgeObjectRelease();
  sub_237F964D8(OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_signature);
  sub_237F964D8(OBJC_IVAR____TtCVV11CloudAssets5Asset2ID7Builder_referenceSignature);
  sub_237F928A0();
}

uint64_t Asset.ID.Builder.__deallocating_deinit()
{
  Asset.ID.Builder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_237F92CAC()
{
  return 1;
}

void sub_237F92CB4()
{
  sub_237F93EB0();
}

uint64_t sub_237F92CD0()
{
  return 0x6675626F746F7270;
}

void sub_237F92CF0(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_237F92CFC()
{
  sub_237F93C50();
  return CodingKey.description.getter();
}

uint64_t sub_237F92D24()
{
  sub_237F93C50();
  return CodingKey.debugDescription.getter();
}

uint64_t Asset.ID.partition.getter()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  sub_237F92860();
  v0 = sub_237F961BC();
  return v1(v0);
}

void Asset.ID.storageLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];

  v0 = type metadata accessor for URL.DirectoryHint();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Asset.ID(0);
  sub_237F96368();
  v5 = v4[1];
  v6[0] = *v4;
  v6[1] = v5;
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x24BDCD7A0], v0);
  sub_237F93C14();
  swift_bridgeObjectRetain();
  URL.appending<A>(path:directoryHint:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_bridgeObjectRelease();
  sub_237F9614C();
}

void Asset.ID.ownerID.getter()
{
  type metadata accessor for Asset.ID(0);
  sub_237F96368();
  swift_bridgeObjectRetain();
  sub_237F961BC();
  sub_237F928A0();
}

void Asset.ID.signature.getter()
{
  type metadata accessor for Asset.ID(0);
  sub_237F961C8();
  sub_237F961BC();
  sub_237F928A0();
}

void Asset.ID.referenceSignature.getter()
{
  type metadata accessor for Asset.ID(0);
  sub_237F961C8();
  sub_237F961BC();
  sub_237F928A0();
}

void Asset.ID.init(storageLocation:signature:referenceSignature:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;

  URL.deletingLastPathComponent()();
  v12 = URL.lastPathComponent.getter();
  v14 = v13;
  v15 = sub_237F92860();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  v16 = (int *)type metadata accessor for Asset.ID(0);
  v17 = (uint64_t *)(a6 + v16[5]);
  *v17 = v12;
  v17[1] = v14;
  v18 = (_QWORD *)(a6 + v16[6]);
  *v18 = a2;
  v18[1] = a3;
  v19 = (_QWORD *)(a6 + v16[7]);
  *v19 = a4;
  v19[1] = a5;
  sub_237F9614C();
}

void Asset.ID.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  sub_237F96134();
  v4 = v3;
  v44 = v5;
  sub_237F9191C(&qword_2568B7DA0);
  sub_237F960C8();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  sub_237F9283C();
  v46 = v6;
  sub_237F96310();
  v45 = type metadata accessor for URL();
  v42 = *(_QWORD *)(v45 - 8);
  sub_237F960F0();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  sub_237F9283C();
  v43 = v7;
  v8 = sub_237F96310();
  v41 = type metadata accessor for Asset.ID(v8);
  sub_237F960C8();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  sub_237F9283C();
  v40 = v9;
  sub_237F96310();
  type metadata accessor for BinaryDecodingOptions();
  sub_237F960C8();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v11 = sub_237F96114(v10, v37);
  v47 = type metadata accessor for CloudAssets_Asset.ID(v11);
  sub_237F960C8();
  v12 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v37 - v15;
  v17 = sub_237F9191C(&qword_2568B75A8);
  sub_237F96358();
  MEMORY[0x24BDAC7A8](v18);
  sub_237F960FC();
  sub_237F9195C(v4, v4[3]);
  sub_237F93C50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    v38 = v14;
    v39 = v16;
    v49 = v4;
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F96330();
    BinaryDecodingOptions.init()();
    sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
    v19 = (uint64_t)v39;
    sub_237F964C0();
    v48 = v2;
    v21 = v38;
    sub_237F94060(v19, (uint64_t)v38, type metadata accessor for CloudAssets_Asset.ID);
    v22 = v46;
    URL.init(string:)();
    v23 = v45;
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v22, 1, v45) != 1)
    {
      v24 = v22;
      v25 = v43;
      v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32);
      v26(v43, v24, v23);
      v47 = v1;
      v27 = v40;
      v26(v40, v25, v23);
      v28 = v21[3];
      v29 = v41;
      v30 = (_QWORD *)(v27 + *(int *)(v41 + 20));
      *v30 = v21[2];
      v30[1] = v28;
      v31 = v21[5];
      v32 = (_QWORD *)(v27 + *(int *)(v29 + 24));
      *v32 = v21[4];
      v32[1] = v31;
      v33 = v19;
      v35 = v21[6];
      v34 = v21[7];
      swift_bridgeObjectRetain();
      sub_237F96454();
      sub_237F96340(v35);
      sub_237F963E8((uint64_t)v21);
      v36 = (uint64_t *)(v27 + *(int *)(v29 + 28));
      *v36 = v35;
      v36[1] = v34;
      sub_237F963E8(v33);
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v17);
      sub_237F94734(v27, v44, type metadata accessor for Asset.ID);
      v20 = (uint64_t)v49;
      goto LABEL_4;
    }
    sub_237F96070(v22, &qword_2568B7DA0);
    sub_237F93CC8();
    sub_237F96460();
    swift_willThrow();
    sub_237F963E8((uint64_t)v21);
    sub_237F963E8(v19);
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v1, v17);
    v4 = v49;
  }
  v20 = (uint64_t)v4;
LABEL_4:
  sub_237F91A00(v20);
  sub_237F960D8();
}

void Asset.ID.encode(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;

  sub_237F96134();
  v3 = v0;
  v4 = sub_237F963BC();
  type metadata accessor for CloudAssets_Asset.ID(v4);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F960FC();
  sub_237F9191C(&qword_2568B75D0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9195C(v0, v0[3]);
  sub_237F93C50();
  sub_237F962FC();
  UnknownStorage.init()();
  *v2 = URL.absoluteString.getter();
  v2[1] = v7;
  v8 = (int *)type metadata accessor for Asset.ID(0);
  v9 = (_QWORD *)((char *)v0 + v8[5]);
  v11 = *v9;
  v10 = v9[1];
  v2[2] = v11;
  v2[3] = v10;
  v12 = (_QWORD *)((char *)v0 + v8[6]);
  v13 = v12[1];
  v2[4] = *v12;
  v2[5] = v13;
  v14 = (_QWORD *)((char *)v3 + v8[7]);
  v15 = *v14;
  v16 = v14[1];
  v2[6] = *v14;
  v2[7] = v16;
  swift_bridgeObjectRetain();
  sub_237F96454();
  sub_237F91894(v15, v16);
  sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
  sub_237F96240();
  sub_237F961F0();
  if (!v1)
  {
    sub_237F96434();
    sub_237F962B4();
    sub_237F961D4();
  }
  sub_237F962A0();
  sub_237F9646C();
  sub_237F960D8();
}

uint64_t Asset.ID.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v1 = sub_237F92860();
  sub_237F91B50(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Asset.ID(0);
  sub_237F9648C();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v0 + *(int *)(v1 + 24));
  sub_237F96288();
  sub_237F963D8();
  sub_237F96348(v2);
  v3 = (uint64_t *)(v0 + *(int *)(v1 + 28));
  v4 = *v3;
  v5 = v3[1];
  sub_237F96350(*v3);
  Data.hash(into:)();
  return sub_237F961A0(v4, v5);
}

void static Asset.ID.== infix(_:_:)()
{
  sub_237F964B4();
}

void sub_237F9352C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  if ((a1 & 1) != 0)
  {
    v1 = type metadata accessor for Asset.ID(0);
    sub_237F96208(v1);
    v4 = v4 && v2 == v3;
    if (v4 || (sub_237F96484() & 1) != 0)
      sub_237F96174();
  }
  sub_237F961B0();
}

void Asset.ID.hashValue.getter()
{
  sub_237F961E4();
  Asset.ID.hash(into:)();
  sub_237F96328();
  sub_237F9631C();
}

Swift::Int sub_237F935B0()
{
  Hasher.init(_seed:)();
  Asset.ID.hash(into:)();
  return Hasher._finalize()();
}

void sub_237F935E8()
{
  Asset.ID.init(from:)();
}

void sub_237F935FC()
{
  Asset.ID.encode(to:)();
}

double Asset.Protector.Builder.__allocating_init(securityKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  double result;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  result = 0.0;
  *(_OWORD *)(v4 + 32) = xmmword_237FE70F0;
  return result;
}

uint64_t Asset.Protector.Builder.init(securityKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  *(_OWORD *)(v2 + 32) = xmmword_237FE70F0;
  return v2;
}

uint64_t Asset.Protector.Builder.setPrivacyKey(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  sub_237F91894(a1, a2);
  sub_237F962F0();
  return sub_237F96270();
}

uint64_t Asset.Protector.Builder.build()@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = v1[2];
  v3 = v1[3];
  v4 = v1[4];
  v5 = v1[5];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  sub_237F91894(v2, v3);
  v6 = sub_237F961BC();
  return sub_237F91894(v6, v7);
}

uint64_t Asset.Protector.Builder.deinit()
{
  uint64_t v0;

  sub_237F918D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_237F918D8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return v0;
}

uint64_t Asset.Protector.Builder.__deallocating_deinit()
{
  Asset.Protector.Builder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_237F93714()
{
  sub_237F93D40();
  return CodingKey.description.getter();
}

uint64_t sub_237F9373C()
{
  sub_237F93D40();
  return CodingKey.debugDescription.getter();
}

void Asset.Protector.securityKey.getter()
{
  sub_237F961C8();
  sub_237F961BC();
  sub_237F928A0();
}

void Asset.Protector.privacyKey.getter()
{
  sub_237F961C8();
  sub_237F961BC();
  sub_237F928A0();
}

uint64_t Asset.Protector.init(securityKey:privacyKey:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  *a5 = result;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  return result;
}

void Asset.Protector.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;

  sub_237F96134();
  v5 = v4;
  v21 = v6;
  type metadata accessor for BinaryDecodingOptions();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = sub_237F96114(v8, v20);
  type metadata accessor for CloudAssets_Asset.Protector(v9);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v10);
  sub_237F96188();
  v11 = sub_237F9191C(&qword_2568B75E0);
  sub_237F96358();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F9638C();
  sub_237F9195C(v5, v5[3]);
  sub_237F93D40();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    v19 = (uint64_t)v5;
  }
  else
  {
    v22 = v5;
    v13 = v3;
    v14 = v2;
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F96330();
    BinaryDecodingOptions.init()();
    sub_237F91B50(&qword_2568B75F0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB640);
    sub_237F964C0();
    v15 = *v2;
    v16 = v2[1];
    v18 = v2[2];
    v17 = v2[3];
    sub_237F96340(*v14);
    sub_237F91894(v18, v17);
    sub_237F94B38((uint64_t)v14, type metadata accessor for CloudAssets_Asset.Protector);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v0, v11);
    *v21 = v15;
    v21[1] = v16;
    v21[2] = v18;
    v21[3] = v17;
    v19 = (uint64_t)v22;
  }
  sub_237F91A00(v19);
  sub_237F960D8();
}

void Asset.Protector.encode(to:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_237F96134();
  v5 = v4;
  type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F960FC();
  v13 = sub_237F9191C(&qword_2568B75F8);
  v12 = *(_QWORD *)(v13 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F9638C();
  v9 = *v1;
  v8 = v1[1];
  v10 = v1[2];
  v11 = v1[3];
  sub_237F9195C(v5, v5[3]);
  sub_237F93D40();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  UnknownStorage.init()();
  *v3 = v9;
  v3[1] = v8;
  v3[2] = v10;
  v3[3] = v11;
  sub_237F91894(v9, v8);
  sub_237F91894(v10, v11);
  sub_237F91B50(&qword_2568B75F0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB640);
  Message.serializedData(partial:)();
  sub_237F94B38((uint64_t)v3, type metadata accessor for CloudAssets_Asset.Protector);
  if (!v2)
  {
    sub_237F96434();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_237F961D4();
  }
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0, v13);
  sub_237F9646C();
  sub_237F960D8();
}

uint64_t Asset.Protector.hash(into:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_237F96448();
  sub_237F96408();
  sub_237F9643C();
  sub_237F91894(v2, v1);
  Data.hash(into:)();
  return sub_237F961A0(v2, v1);
}

void static Asset.Protector.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if ((MEMORY[0x23B829224](*a1, a1[1], *a2, a2[1]) & 1) != 0)
    sub_237F9627C();
  sub_237F961B0();
}

uint64_t type metadata accessor for Asset.ID(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B7648);
}

uint64_t type metadata accessor for Asset(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B7638);
}

unint64_t sub_237F93C14()
{
  unint64_t result;

  result = qword_2568B75A0;
  if (!qword_2568B75A0)
  {
    result = MEMORY[0x23B829E84](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_2568B75A0);
  }
  return result;
}

unint64_t sub_237F93C50()
{
  unint64_t result;

  result = qword_2568B75B0;
  if (!qword_2568B75B0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE76F4, &unk_2509D4510);
    atomic_store(result, (unint64_t *)&qword_2568B75B0);
  }
  return result;
}

unint64_t sub_237F93C8C()
{
  unint64_t result;

  result = qword_2568B75B8;
  if (!qword_2568B75B8)
  {
    result = MEMORY[0x23B829E84](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2568B75B8);
  }
  return result;
}

unint64_t sub_237F93CC8()
{
  unint64_t result;

  result = qword_2568B75C8;
  if (!qword_2568B75C8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE947C, &type metadata for AssetManager.AssetError);
    atomic_store(result, (unint64_t *)&qword_2568B75C8);
  }
  return result;
}

unint64_t sub_237F93D04()
{
  unint64_t result;

  result = qword_2568B75D8;
  if (!qword_2568B75D8)
  {
    result = MEMORY[0x23B829E84](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_2568B75D8);
  }
  return result;
}

unint64_t sub_237F93D40()
{
  unint64_t result;

  result = qword_2568B75E8;
  if (!qword_2568B75E8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE76A4, &unk_2509D45A0);
    atomic_store(result, (unint64_t *)&qword_2568B75E8);
  }
  return result;
}

Swift::Int Asset.Protector.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v3 = v0[2];
  v2 = v0[3];
  sub_237F961E4();
  sub_237F96350(v1);
  Data.hash(into:)();
  sub_237F962F0();
  sub_237F91894(v3, v2);
  Data.hash(into:)();
  sub_237F918D8(v3, v2);
  return sub_237F96328();
}

void sub_237F93DF8()
{
  Swift::UInt v0;

  v0 = sub_237F963BC();
  Hasher._combine(_:)(v0);
}

uint64_t sub_237F93E18(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_237F96484();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_237F93EB0()
{
  sub_237F961E4();
  sub_237F964CC();
  sub_237F96328();
  sub_237F9631C();
}

Swift::Int sub_237F93EDC()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)();
  sub_237F91894(v1, v2);
  Data.hash(into:)();
  sub_237F918D8(v1, v2);
  sub_237F91894(v4, v3);
  Data.hash(into:)();
  sub_237F918D8(v4, v3);
  return Hasher._finalize()();
}

void sub_237F93F6C()
{
  Asset.Protector.init(from:)();
}

void sub_237F93F80()
{
  Asset.Protector.encode(to:)();
}

void sub_237F93F98()
{
  Hasher.init(_seed:)();
  sub_237F964CC();
  sub_237F96328();
  sub_237F9631C();
}

uint64_t sub_237F93FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_237F93E18(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_237F93FEC()
{
  sub_237F946F8();
  return CodingKey.description.getter();
}

uint64_t sub_237F94014()
{
  sub_237F946F8();
  return CodingKey.debugDescription.getter();
}

void Asset.id.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_237F94060(v1, a1, type metadata accessor for Asset.ID);
}

void sub_237F94060(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_237F963C8(a1, a2, a3);
  sub_237F96228(v3);
  sub_237F928A0();
}

uint64_t Asset.protector.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  type metadata accessor for Asset(0);
  sub_237F96368();
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  *a1 = *v2;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_237F91894(v3, v4);
  return sub_237F91894(v5, v6);
}

uint64_t Asset.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_237F928BC() + 24));
}

void sub_237F940E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;

  sub_237F96134();
  v45 = v4;
  v6 = v5;
  sub_237F9191C(&qword_2568B76B8);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F9283C();
  v43 = v8;
  v42 = type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F9283C();
  v44 = v10;
  sub_237F9191C(&qword_2568B7DA0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v11);
  sub_237F96188();
  v12 = type metadata accessor for URL();
  v40 = *(_QWORD *)(v12 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v13);
  sub_237F9283C();
  v41 = v14;
  sub_237F9191C(&qword_2568B76B0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v15);
  sub_237F963A4();
  v16 = type metadata accessor for CloudAssets_Asset.ID(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v17);
  v18 = sub_237F962D4();
  v19 = (int *)type metadata accessor for Asset.ID(v18);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v20);
  sub_237F960FC();
  v39 = type metadata accessor for CloudAssets_Asset(0);
  v46 = (uint64_t *)v6;
  sub_237F96098(v6 + *(int *)(v39 + 24), v0, &qword_2568B76B0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v0, 1, v16) == 1)
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0xE000000000000000;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 0xE000000000000000;
    *(_OWORD *)(v2 + 32) = xmmword_237FE70F0;
    *(_OWORD *)(v2 + 48) = xmmword_237FE70F0;
    UnknownStorage.init()();
    sub_237F96070(v0, &qword_2568B76B0);
  }
  else
  {
    sub_237F94734(v0, v2, type metadata accessor for CloudAssets_Asset.ID);
  }
  URL.init(string:)();
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v3, 1, v12) == 1)
  {
    sub_237F96070(v3, &qword_2568B7DA0);
    sub_237F93CC8();
    sub_237F96460();
    swift_willThrow();
    sub_237F94B38(v2, type metadata accessor for CloudAssets_Asset.ID);
    sub_237F94B38(v6, type metadata accessor for CloudAssets_Asset);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32);
    v21(v41, v3, v12);
    v21(v1, v41, v12);
    v22 = *(_QWORD *)(v2 + 24);
    v23 = (_QWORD *)(v1 + v19[5]);
    *v23 = *(_QWORD *)(v2 + 16);
    v23[1] = v22;
    v25 = *(_QWORD *)(v2 + 32);
    v24 = *(_QWORD *)(v2 + 40);
    v26 = (uint64_t *)(v1 + v19[6]);
    *v26 = v25;
    v26[1] = v24;
    v27 = *(_QWORD *)(v2 + 48);
    v28 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain();
    sub_237F91894(v25, v24);
    sub_237F96340(v27);
    sub_237F94B38(v2, type metadata accessor for CloudAssets_Asset.ID);
    v29 = (uint64_t *)(v1 + v19[7]);
    *v29 = v27;
    v29[1] = v28;
    sub_237F94734(v1, v45, type metadata accessor for Asset.ID);
    sub_237F96098((uint64_t)v46 + *(int *)(v39 + 28), v43, &qword_2568B76B8);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v43, 1, v42) == 1)
    {
      *(_OWORD *)v44 = xmmword_237FE70F0;
      *(_OWORD *)(v44 + 16) = xmmword_237FE70F0;
      UnknownStorage.init()();
      sub_237F96070(v43, &qword_2568B76B8);
    }
    else
    {
      sub_237F94734(v43, v44, type metadata accessor for CloudAssets_Asset.Protector);
    }
    v30 = *(_QWORD *)v44;
    v31 = *(_QWORD *)(v44 + 8);
    v32 = *(_QWORD *)(v44 + 16);
    v33 = *(_QWORD *)(v44 + 24);
    v34 = sub_237F961BC();
    sub_237F91894(v34, v35);
    sub_237F96340(v32);
    sub_237F94B38(v44, type metadata accessor for CloudAssets_Asset.Protector);
    v36 = type metadata accessor for Asset(0);
    v37 = (_QWORD *)(v45 + *(int *)(v36 + 20));
    *v37 = v30;
    v37[1] = v31;
    v37[2] = v32;
    v37[3] = v33;
    v38 = *v46;
    sub_237F94B38((uint64_t)v46, type metadata accessor for CloudAssets_Asset);
    *(_QWORD *)(v45 + *(int *)(v36 + 24)) = v38;
  }
  sub_237F960D8();
}

__n128 Asset.init(id:protector:size:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  __n128 result;
  __n128 *v9;
  uint64_t v10;
  __n128 v11;

  v11 = *a2;
  v6 = a2[1].n128_u64[0];
  v7 = a2[1].n128_u64[1];
  sub_237F94734(a1, a4, type metadata accessor for Asset.ID);
  type metadata accessor for Asset(0);
  sub_237F96368();
  result = v11;
  *v9 = v11;
  v9[1].n128_u64[0] = v6;
  v9[1].n128_u64[1] = v7;
  *(_QWORD *)(a4 + *(int *)(v10 + 24)) = a3;
  return result;
}

void Asset.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_237F96134();
  v5 = v4;
  v16 = v6;
  type metadata accessor for BinaryDecodingOptions();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v7);
  v9 = sub_237F96114(v8, v15);
  type metadata accessor for CloudAssets_Asset(v9);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v10);
  v11 = sub_237F962D4();
  type metadata accessor for Asset(v11);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F96188();
  v13 = sub_237F9191C(&qword_2568B7600);
  sub_237F96358();
  MEMORY[0x24BDAC7A8](v14);
  sub_237F963A4();
  sub_237F9195C(v5, v5[3]);
  sub_237F946F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F96330();
    BinaryDecodingOptions.init()();
    sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8);
    Message.init(serializedData:extensions:partial:options:)();
    sub_237F940E8();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v13);
    sub_237F94734(v2, v16, type metadata accessor for Asset);
  }
  sub_237F91A00((uint64_t)v5);
  sub_237F9646C();
  sub_237F960D8();
}

unint64_t sub_237F946F8()
{
  unint64_t result;

  result = qword_2568B7608;
  if (!qword_2568B7608)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7654, &unk_2509D4480);
    atomic_store(result, (unint64_t *)&qword_2568B7608);
  }
  return result;
}

void sub_237F94734(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = sub_237F963C8(a1, a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  sub_237F928A0();
}

void sub_237F94768(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;

  v44 = a1;
  v47 = type metadata accessor for CloudAssets_Asset.Protector(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v2);
  sub_237F964A0();
  v45 = v3;
  MEMORY[0x24BDAC7A8](v4);
  v46 = (_QWORD *)((char *)v39 - v5);
  v6 = sub_237F96310();
  v40 = type metadata accessor for CloudAssets_Asset.ID(v6);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F964A0();
  v43 = v8;
  MEMORY[0x24BDAC7A8](v9);
  v11 = (_QWORD *)((char *)v39 - v10);
  UnknownStorage.init()();
  *v11 = URL.absoluteString.getter();
  v11[1] = v12;
  v13 = (int *)type metadata accessor for Asset.ID(0);
  v14 = v1;
  v15 = (uint64_t *)(v1 + v13[5]);
  v16 = v15[1];
  v11[2] = *v15;
  v11[3] = v16;
  v17 = (uint64_t *)(v14 + v13[6]);
  v19 = *v17;
  v18 = v17[1];
  v11[4] = *v17;
  v11[5] = v18;
  v20 = (uint64_t *)(v14 + v13[7]);
  v21 = v14;
  v42 = v14;
  v22 = *v20;
  v23 = v20[1];
  v11[6] = *v20;
  v11[7] = v23;
  v41 = sub_237F928BC();
  v24 = (uint64_t *)(v21 + *(int *)(v41 + 20));
  v25 = *v24;
  v26 = v24[1];
  v27 = v24[2];
  v28 = v24[3];
  v39[1] = (char *)v46 + *(int *)(v47 + 24);
  swift_bridgeObjectRetain();
  sub_237F96350(v19);
  sub_237F91894(v22, v23);
  sub_237F96400(v25);
  sub_237F962C8();
  UnknownStorage.init()();
  v29 = v46;
  *v46 = v25;
  v29[1] = v26;
  v29[2] = v27;
  v29[3] = v28;
  sub_237F96400(v25);
  sub_237F962C8();
  sub_237F963F8(v25);
  sub_237F96478();
  v30 = v44;
  *v44 = 0;
  v31 = type metadata accessor for CloudAssets_Asset(0);
  UnknownStorage.init()();
  v32 = (uint64_t)v30 + *(int *)(v31 + 24);
  v33 = v40;
  _s11CloudAssets21UploadResponseMessageOwst_0(v32, 1, 1, v40);
  v34 = (uint64_t)v30 + *(int *)(v31 + 28);
  v35 = v47;
  _s11CloudAssets21UploadResponseMessageOwst_0(v34, 1, 1, v47);
  v36 = v43;
  sub_237F94060((uint64_t)v11, v43, type metadata accessor for CloudAssets_Asset.ID);
  sub_237F96070(v32, &qword_2568B76B0);
  sub_237F94734(v36, v32, type metadata accessor for CloudAssets_Asset.ID);
  _s11CloudAssets21UploadResponseMessageOwst_0(v32, 0, 1, v33);
  v37 = v45;
  sub_237F94060((uint64_t)v29, v45, type metadata accessor for CloudAssets_Asset.Protector);
  sub_237F96070(v34, &qword_2568B76B8);
  sub_237F94734(v37, v34, type metadata accessor for CloudAssets_Asset.Protector);
  _s11CloudAssets21UploadResponseMessageOwst_0(v34, 0, 1, v35);
  v38 = *(_QWORD *)(v42 + *(int *)(v41 + 24));
  sub_237F94B38((uint64_t)v29, type metadata accessor for CloudAssets_Asset.Protector);
  sub_237F94B38((uint64_t)v11, type metadata accessor for CloudAssets_Asset.ID);
  *v30 = v38;
}

void Asset.encode(to:)()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237F96134();
  v3 = sub_237F963BC();
  type metadata accessor for CloudAssets_Asset(v3);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F960FC();
  sub_237F9191C(&qword_2568B7618);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F9195C(v0, v0[3]);
  sub_237F946F8();
  sub_237F962FC();
  sub_237F94768(v2);
  sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8);
  sub_237F96240();
  sub_237F961F0();
  if (!v1)
  {
    sub_237F96434();
    sub_237F962B4();
    sub_237F961D4();
  }
  sub_237F962A0();
  sub_237F9646C();
  sub_237F960D8();
}

void sub_237F94B38(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_237F96160(v2);
  sub_237F928A0();
}

void Asset.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  Asset.ID.hash(into:)();
  sub_237F928BC();
  sub_237F9648C();
  sub_237F96288();
  sub_237F963D8();
  sub_237F96348(v2);
  sub_237F96428();
  Data.hash(into:)();
  sub_237F96294();
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
  sub_237F9614C();
}

Swift::Int Asset.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  sub_237F961E4();
  Asset.ID.hash(into:)();
  v1 = sub_237F928BC();
  sub_237F96368();
  sub_237F96448();
  sub_237F96408();
  sub_237F9643C();
  sub_237F962C8();
  Data.hash(into:)();
  sub_237F96478();
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v1 + 24)));
  return sub_237F96328();
}

Swift::Int sub_237F94C60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  Hasher.init(_seed:)();
  Asset.ID.hash(into:)();
  v4 = (uint64_t *)(v2 + *(int *)(a2 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  v8 = v4[3];
  sub_237F91894(*v4, v6);
  Data.hash(into:)();
  sub_237F918D8(v5, v6);
  sub_237F91894(v7, v8);
  Data.hash(into:)();
  sub_237F918D8(v7, v8);
  Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(a2 + 24)));
  return Hasher._finalize()();
}

void sub_237F94D1C()
{
  sub_237F91B50(&qword_2568B7620, type metadata accessor for Asset.ID, (uint64_t)&protocol conformance descriptor for Asset.ID);
}

unint64_t sub_237F94D4C()
{
  unint64_t result;

  result = qword_2568B7628;
  if (!qword_2568B7628)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Asset.Protector, &type metadata for Asset.Protector);
    atomic_store(result, (unint64_t *)&qword_2568B7628);
  }
  return result;
}

void sub_237F94D88()
{
  sub_237F91B50(&qword_2568B7630, type metadata accessor for Asset, (uint64_t)&protocol conformance descriptor for Asset);
}

void sub_237F94DB4()
{
  Asset.init(from:)();
}

void sub_237F94DC8()
{
  Asset.encode(to:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for Asset.ID(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = v8[6];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_237F91894(v16, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = v8[7];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *v20;
    v22 = v20[1];
    sub_237F91894(*v20, v22);
    *v19 = v21;
    v19[1] = v22;
    v23 = *(int *)(a3 + 20);
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (char *)a2 + v23;
    v26 = *(uint64_t *)((char *)a2 + v23);
    v27 = *(uint64_t *)((char *)a2 + v23 + 8);
    sub_237F91894(v26, v27);
    *v24 = v26;
    v24[1] = v27;
    v28 = *((_QWORD *)v25 + 2);
    v29 = *((_QWORD *)v25 + 3);
    sub_237F91894(v28, v29);
    v24[2] = v28;
    v24[3] = v29;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t destroy for Asset(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 24)), *(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 28)), *(_QWORD *)(a1 + *(int *)(v5 + 28) + 8));
  v6 = a1 + *(int *)(a2 + 20);
  sub_237F918D8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  return sub_237F918D8(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
}

uint64_t initializeWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v7[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_237F91894(v15, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = v7[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_237F91894(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = *(int *)(a3 + 20);
  v23 = (uint64_t *)(a1 + v22);
  v24 = a2 + v22;
  v25 = *(_QWORD *)(a2 + v22);
  v26 = *(_QWORD *)(a2 + v22 + 8);
  sub_237F91894(v25, v26);
  *v23 = v25;
  v23[1] = v26;
  v27 = *(_QWORD *)(v24 + 16);
  v28 = *(_QWORD *)(v24 + 24);
  sub_237F91894(v27, v28);
  v23[2] = v27;
  v23[3] = v28;
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithCopy for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_237F91894(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_237F918D8(v16, v17);
  v18 = v7[7];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_237F91894(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_237F918D8(v23, v24);
  v25 = *(int *)(a3 + 20);
  v26 = (uint64_t *)(a1 + v25);
  v27 = a2 + v25;
  v28 = *(_QWORD *)(a2 + v25);
  v29 = *(_QWORD *)(a2 + v25 + 8);
  sub_237F91894(v28, v29);
  v30 = *v26;
  v31 = v26[1];
  *v26 = v28;
  v26[1] = v29;
  sub_237F918D8(v30, v31);
  v32 = *(_QWORD *)(v27 + 16);
  v33 = *(_QWORD *)(v27 + 24);
  sub_237F91894(v32, v33);
  v34 = v26[2];
  v35 = v26[3];
  v26[2] = v32;
  v26[3] = v33;
  sub_237F918D8(v34, v35);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v8 = *(int *)(a3 + 20);
  v9 = *(int *)(a3 + 24);
  v10 = (_OWORD *)(a1 + v8);
  v11 = (_OWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  return a1;
}

uint64_t assignWithTake for Asset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_237F918D8(v14, v15);
  v16 = v7[7];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_237F918D8(v17, v18);
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_QWORD *)(a1 + v19);
  v23 = *(_QWORD *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_237F918D8(v22, v23);
  v24 = *(_QWORD *)(v20 + 16);
  v25 = *(_QWORD *)(v20 + 24);
  *(_OWORD *)(v20 + 16) = *(_OWORD *)(v21 + 16);
  sub_237F918D8(v24, v25);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237F9536C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Asset.ID(0);
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    sub_237F96258(a1, a2, v4);
  else
    sub_237F961B0();
}

uint64_t storeEnumTagSinglePayload for Asset()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237F953F4(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = sub_237F963BC();
  if (*(_DWORD *)(*(_QWORD *)(type metadata accessor for Asset.ID(v8) - 8) + 84) == a3)
  {
    v9 = sub_237F96414();
    sub_237F96264(v9, v10, v11, v12);
  }
  else
  {
    v13 = (_QWORD *)(v4 + *(int *)(a4 + 20));
    *v13 = 0;
    v13[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    sub_237F961B0();
  }
}

uint64_t sub_237F95458()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Asset.ID(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Asset.ID(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = *(uint64_t *)((char *)a2 + v9);
    v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain();
    sub_237F91894(v14, v15);
    *v13 = v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = (uint64_t *)((char *)a1 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = *v18;
    v20 = v18[1];
    sub_237F91894(*v18, v20);
    *v17 = v19;
    v17[1] = v20;
  }
  return a1;
}

uint64_t destroy for Asset.ID(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
  return sub_237F918D8(*(_QWORD *)(a1 + *(int *)(a2 + 28)), *(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

uint64_t initializeWithCopy for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (uint64_t *)(a1 + v8);
  v13 = *(_QWORD *)(a2 + v8);
  v14 = *(_QWORD *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  sub_237F91894(v13, v14);
  *v12 = v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_237F91894(*v17, v19);
  *v16 = v18;
  v16[1] = v19;
  return a1;
}

uint64_t assignWithCopy for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (uint64_t *)(a1 + v10);
  v12 = (uint64_t *)(a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_237F91894(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  sub_237F918D8(v15, v16);
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_237F91894(*v19, v21);
  v22 = *v18;
  v23 = v18[1];
  *v18 = v20;
  v18[1] = v21;
  sub_237F918D8(v22, v23);
  return a1;
}

uint64_t initializeWithTake for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for Asset.ID(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_237F918D8(v13, v14);
  v15 = a3[7];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_237F918D8(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset.ID()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237F958B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F92860();
  if (*(_DWORD *)(*(_QWORD *)(v4 - 8) + 84) == (_DWORD)a2)
    sub_237F96258(a1, a2, v4);
  else
    sub_237F961B0();
}

uint64_t storeEnumTagSinglePayload for Asset.ID()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237F95924(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_DWORD *)(*(_QWORD *)(sub_237F92860() - 8) + 84) == a3)
  {
    v7 = sub_237F96414();
    sub_237F96264(v7, v8, v9, v10);
  }
  else
  {
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
    sub_237F961B0();
  }
}

uint64_t sub_237F9597C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_237F959F8()
{
  return type metadata accessor for Asset.ID.Builder(0);
}

uint64_t type metadata accessor for Asset.ID.Builder(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B7658);
}

uint64_t sub_237F95A14(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_237F95A44()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Asset.ID.Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Asset.ID.Builder.__allocating_init(partition:ownerID:signature:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t initializeBufferWithCopyOfBuffer for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for Asset.Protector(uint64_t a1)
{
  sub_237F918D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return sub_237F918D8(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *initializeWithCopy for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = a2[1];
  sub_237F91894(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v7 = a2[2];
  v6 = a2[3];
  sub_237F91894(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for Asset.Protector(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_237F91894(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_237F918D8(v6, v7);
  v9 = a2[2];
  v8 = a2[3];
  sub_237F91894(v9, v8);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_237F918D8(v10, v11);
  return a1;
}

__n128 initializeWithTake for Asset.Protector(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for Asset.Protector(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_237F918D8(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_237F918D8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for Asset.Protector(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  if (a2)
  {
    if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    {
      v2 = *(_DWORD *)a1 + 12;
    }
    else
    {
      v2 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
      if (v2 >= 0xC)
        v2 = -1;
    }
  }
  else
  {
    v2 = -1;
  }
  return v2 + 1;
}

uint64_t storeEnumTagSinglePayload for Asset.Protector(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

void type metadata accessor for Asset.Protector()
{
  sub_237F963F0();
}

uint64_t type metadata accessor for Asset.Protector.Builder()
{
  return objc_opt_self();
}

uint64_t method lookup function for Asset.Protector.Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Asset.Protector.Builder.__allocating_init(securityKey:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t sub_237F95D28()
{
  return 0;
}

void type metadata accessor for Asset.CodingKeys()
{
  sub_237F963F0();
}

void type metadata accessor for Asset.Protector.CodingKeys()
{
  sub_237F963F0();
}

uint64_t getEnumTagSinglePayload for AssetSkeleton.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t sub_237F95D98(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237F95DD8 + 4 * byte_237FE7100[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237F95DF8 + 4 * byte_237FE7105[v4]))();
}

_BYTE *sub_237F95DD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237F95DF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237F95E00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237F95E08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237F95E10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237F95E18(_DWORD *result)
{
  *result = 0;
  return result;
}

void type metadata accessor for Asset.ID.CodingKeys()
{
  sub_237F963F0();
}

unint64_t sub_237F95E34()
{
  unint64_t result;

  result = qword_2568B7668;
  if (!qword_2568B7668)
  {
    result = MEMORY[0x23B829E84](&unk_237FE74BC, &unk_2509D4510);
    atomic_store(result, (unint64_t *)&qword_2568B7668);
  }
  return result;
}

unint64_t sub_237F95E74()
{
  unint64_t result;

  result = qword_2568B7670;
  if (!qword_2568B7670)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7574, &unk_2509D45A0);
    atomic_store(result, (unint64_t *)&qword_2568B7670);
  }
  return result;
}

unint64_t sub_237F95EB4()
{
  unint64_t result;

  result = qword_2568B7678;
  if (!qword_2568B7678)
  {
    result = MEMORY[0x23B829E84](&unk_237FE762C, &unk_2509D4480);
    atomic_store(result, (unint64_t *)&qword_2568B7678);
  }
  return result;
}

unint64_t sub_237F95EF4()
{
  unint64_t result;

  result = qword_2568B7680;
  if (!qword_2568B7680)
  {
    result = MEMORY[0x23B829E84](&unk_237FE759C, &unk_2509D4480);
    atomic_store(result, (unint64_t *)&qword_2568B7680);
  }
  return result;
}

unint64_t sub_237F95F34()
{
  unint64_t result;

  result = qword_2568B7688;
  if (!qword_2568B7688)
  {
    result = MEMORY[0x23B829E84](&unk_237FE75C4, &unk_2509D4480);
    atomic_store(result, (unint64_t *)&qword_2568B7688);
  }
  return result;
}

unint64_t sub_237F95F74()
{
  unint64_t result;

  result = qword_2568B7690;
  if (!qword_2568B7690)
  {
    result = MEMORY[0x23B829E84](&unk_237FE74E4, &unk_2509D45A0);
    atomic_store(result, (unint64_t *)&qword_2568B7690);
  }
  return result;
}

unint64_t sub_237F95FB4()
{
  unint64_t result;

  result = qword_2568B7698;
  if (!qword_2568B7698)
  {
    result = MEMORY[0x23B829E84](&unk_237FE750C, &unk_2509D45A0);
    atomic_store(result, (unint64_t *)&qword_2568B7698);
  }
  return result;
}

unint64_t sub_237F95FF4()
{
  unint64_t result;

  result = qword_2568B76A0;
  if (!qword_2568B76A0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE742C, &unk_2509D4510);
    atomic_store(result, (unint64_t *)&qword_2568B76A0);
  }
  return result;
}

unint64_t sub_237F96034()
{
  unint64_t result;

  result = qword_2568B76A8;
  if (!qword_2568B76A8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7454, &unk_2509D4510);
    atomic_store(result, (unint64_t *)&qword_2568B76A8);
  }
  return result;
}

void sub_237F96070(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_237F9191C(a2);
  sub_237F96160(v2);
  sub_237F928A0();
}

void sub_237F96098(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_237F9191C(a3);
  sub_237F96228(v3);
  sub_237F928A0();
}

uint64_t sub_237F96114@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_237F96160(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v1, a1);
}

void sub_237F96174()
{
  JUMPOUT(0x23B829224);
}

uint64_t sub_237F961A0(uint64_t a1, unint64_t a2)
{
  return sub_237F918D8(a1, a2);
}

uint64_t sub_237F961BC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237F961C8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

uint64_t sub_237F961D4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237F961E4()
{
  return Hasher.init(_seed:)();
}

void sub_237F961F0()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_237F94B38(v1, v0);
}

uint64_t sub_237F96208(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 20));
}

uint64_t sub_237F96228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v1, v2, a1);
}

uint64_t sub_237F96240()
{
  return Message.serializedData(partial:)();
}

uint64_t sub_237F96258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, a3);
}

uint64_t sub_237F96264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, a3, a4);
}

uint64_t sub_237F96270()
{
  return swift_retain();
}

void sub_237F9627C()
{
  JUMPOUT(0x23B829224);
}

uint64_t sub_237F96288()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

uint64_t sub_237F96294()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237F962A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 72) + 8))(v1, v0);
}

uint64_t sub_237F962B4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_237F962C8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

uint64_t sub_237F962D4()
{
  return 0;
}

uint64_t sub_237F962F0()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237F962FC()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t sub_237F96310()
{
  return 0;
}

Swift::Int sub_237F96328()
{
  return Hasher._finalize()();
}

double sub_237F96330()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 - 112) = 0;
  result = 0.0;
  *(_OWORD *)(v0 - 144) = 0u;
  *(_OWORD *)(v0 - 128) = 0u;
  return result;
}

uint64_t sub_237F96340(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

uint64_t sub_237F96348(uint64_t a1)
{
  unint64_t v1;

  return sub_237F918D8(a1, v1);
}

uint64_t sub_237F96350(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

uint64_t sub_237F963BC()
{
  return 0;
}

uint64_t sub_237F963C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  return a3(0);
}

uint64_t sub_237F963D8()
{
  return Data.hash(into:)();
}

void sub_237F963E8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F94B38(a1, v1);
}

uint64_t sub_237F963F8(uint64_t a1)
{
  unint64_t v1;

  return sub_237F918D8(a1, v1);
}

uint64_t sub_237F96400(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

uint64_t sub_237F96408()
{
  return Data.hash(into:)();
}

uint64_t sub_237F96414()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237F96428()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

unint64_t sub_237F96434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 96) = v0;
  *(_QWORD *)(v2 - 88) = v1;
  return sub_237F93D04();
}

uint64_t sub_237F9643C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237F96448()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

uint64_t sub_237F96454()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F91894(v1, v0);
}

uint64_t sub_237F96460()
{
  return swift_allocError();
}

uint64_t sub_237F96478()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237F96484()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void sub_237F964B4()
{
  JUMPOUT(0x23B829194);
}

uint64_t sub_237F964C0()
{
  return Message.init(serializedData:extensions:partial:options:)();
}

void sub_237F964CC()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_237F964D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_237F918D8(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

void sub_237F964E4()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_237F96508(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    sub_237F92CD0();
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_237F9658C()
{
  sub_237F961E4();
  Hasher._combine(_:)(0);
  Hasher._finalize()();
  sub_237F9631C();
}

Swift::Int sub_237F965C4()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_237F96600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_237F96508(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_237F9662C()
{
  sub_237F96934();
  return CodingKey.description.getter();
}

uint64_t sub_237F96654()
{
  sub_237F96934();
  return CodingKey.debugDescription.getter();
}

void AssetSkeleton.asset.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_237F94060(v1, a1, type metadata accessor for Asset);
}

void AssetSkeleton.assetID.getter(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_237F94060(v1, a1, type metadata accessor for Asset.ID);
}

void AssetSkeleton.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  type metadata accessor for BinaryDecodingOptions();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F982D4();
  v7 = (uint64_t *)(v6 - v5);
  type metadata accessor for AssetSkeleton();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F982D4();
  v11 = v10 - v9;
  v12 = sub_237F9191C(&qword_2568B76C0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  sub_237F982D4();
  v16 = v15 - v14;
  sub_237F9195C(a1, a1[3]);
  sub_237F96934();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v18)
  {
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_237F91B50(&qword_2568B76D0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEB550);
    Message.init(serializedData:extensions:partial:options:)();
    sub_237F96970(v7, v11);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v16, v12);
    sub_237F94734(v11, a2, (uint64_t (*)(_QWORD))type metadata accessor for AssetSkeleton);
  }
  sub_237F91A00((uint64_t)a1);
  sub_237F960D8();
}

uint64_t type metadata accessor for AssetSkeleton()
{
  uint64_t result;

  result = qword_2568B76E8;
  if (!qword_2568B76E8)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_237F96934()
{
  unint64_t result;

  result = qword_2568B76C8;
  if (!qword_2568B76C8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7924, &type metadata for AssetSkeleton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B76C8);
  }
  return result;
}

void sub_237F96970(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;

  v78 = a2;
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  v73 = v3;
  v74 = v4;
  MEMORY[0x24BDAC7A8](v3);
  v72 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_237F9191C(&qword_2568B7718);
  MEMORY[0x24BDAC7A8](v6);
  v70 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for Google_Protobuf_Timestamp();
  v71 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v75 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_237F9191C((uint64_t *)&unk_2568B8910);
  MEMORY[0x24BDAC7A8](v9);
  v69 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for CloudAssets_Credential(0);
  MEMORY[0x24BDAC7A8](v68);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Credential(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Asset(0);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_237F9191C(&qword_2568B7720);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CloudAssets_Asset(0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v62 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v62 - v26;
  sub_237FA3C98(*a1, (uint64_t)v21);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v21, 1, v22) == 1)
  {
    sub_237F96070((uint64_t)v21, &qword_2568B7720);
    sub_237F93CC8();
    swift_allocError();
    swift_willThrow();
    v28 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets;
    v29 = (uint64_t)a1;
LABEL_5:
    sub_237F94B38(v29, v28);
    return;
  }
  v64 = v13;
  v65 = v12;
  v66 = v15;
  v67 = a1;
  v30 = v76;
  v31 = v78;
  sub_237F94734((uint64_t)v21, (uint64_t)v27, type metadata accessor for CloudAssets_Asset);
  sub_237F94060((uint64_t)v27, (uint64_t)v25, type metadata accessor for CloudAssets_Asset);
  v32 = (uint64_t)v77;
  sub_237F940E8();
  if (v32)
  {
    sub_237F94B38((uint64_t)v67, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
    v28 = type metadata accessor for CloudAssets_Asset;
    v29 = (uint64_t)v27;
    goto LABEL_5;
  }
  v77 = v27;
  sub_237F94734((uint64_t)v18, v31, type metadata accessor for Asset);
  v33 = v67;
  v34 = v67[1];
  v35 = v67[2];
  v63 = type metadata accessor for AssetSkeleton();
  v36 = (uint64_t *)(v31 + *(int *)(v63 + 20));
  *v36 = v34;
  v36[1] = v35;
  v37 = (uint64_t)v33 + *(int *)(type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0) + 32);
  v38 = v69;
  sub_237F96098(v37, v69, (uint64_t *)&unk_2568B8910);
  v39 = v68;
  v40 = _s11CloudAssets21UploadResponseMessageOwet_0(v38, 1, v68);
  v41 = v30;
  v42 = v71;
  v43 = v65;
  v44 = v66;
  if (v40 == 1)
  {
    *v65 = 0;
    v43[1] = 0xE000000000000000;
    v43[2] = 0;
    v43[3] = 0xE000000000000000;
    v43[4] = 0;
    v43[5] = 0xE000000000000000;
    sub_237F91894(v34, v35);
    UnknownStorage.init()();
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v43 + *(int *)(v39 + 32), 1, 1, v41);
    sub_237F96070(v38, (uint64_t *)&unk_2568B8910);
  }
  else
  {
    sub_237F94734(v38, (uint64_t)v65, type metadata accessor for CloudAssets_Credential);
    sub_237F91894(v34, v35);
  }
  v45 = v74;
  v46 = v39;
  v47 = v43[1];
  *v44 = *v43;
  v44[1] = v47;
  v48 = v43;
  v49 = v43[2];
  v50 = v43[3];
  v44[2] = v49;
  v44[3] = v50;
  v51 = v48[5];
  v44[4] = v48[4];
  v44[5] = v51;
  v52 = v70;
  sub_237F96098((uint64_t)v48 + *(int *)(v46 + 32), v70, &qword_2568B7718);
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v52, 1, v41) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v53 = v75;
    Google_Protobuf_Timestamp.init()();
    sub_237F96070(v52, &qword_2568B7718);
  }
  else
  {
    v53 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v75, v52, v41);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v54 = v72;
  Google_Protobuf_Timestamp.date.getter();
  sub_237F94B38((uint64_t)v65, type metadata accessor for CloudAssets_Credential);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v53, v41);
  v55 = (uint64_t)v66;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))((char *)v66 + *(int *)(v64 + 28), v54, v73);
  sub_237F94B38((uint64_t)v77, type metadata accessor for CloudAssets_Asset);
  v56 = v63;
  v57 = v78;
  sub_237F94734(v55, v78 + *(int *)(v63 + 28), type metadata accessor for Credential);
  v58 = v67;
  v59 = v67[3];
  v60 = v67[4];
  sub_237F91894(v59, v60);
  sub_237F94B38((uint64_t)v58, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  v61 = (uint64_t *)(v57 + *(int *)(v56 + 24));
  *v61 = v59;
  v61[1] = v60;
}

void AssetSkeleton.init(asset:credential:storageReference:storageReferenceSignature:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v13;
  _QWORD *v14;
  _QWORD *v15;

  sub_237F94734(a1, a7, type metadata accessor for Asset);
  v13 = (int *)sub_237F98300();
  sub_237F94734(a2, a7 + v13[7], type metadata accessor for Credential);
  v14 = (_QWORD *)(a7 + v13[5]);
  *v14 = a3;
  v14[1] = a4;
  v15 = (_QWORD *)(a7 + v13[6]);
  *v15 = a5;
  v15[1] = a6;
  sub_237F9614C();
}

uint64_t sub_237F96FB4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = type metadata accessor for Date();
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Google_Protobuf_Timestamp();
  v41 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v38 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CloudAssets_Credential(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_OWORD *)(a1 + 3) = xmmword_237FE70F0;
  v10 = type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  UnknownStorage.init()();
  v36 = (uint64_t)a1 + *(int *)(v10 + 32);
  _s11CloudAssets21UploadResponseMessageOwst_0(v36, 1, 1, v7);
  sub_237F9191C(&qword_2568B7710);
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CloudAssets_Asset(0) - 8) + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_237FE7750;
  sub_237F94768((_QWORD *)(v13 + v12));
  *a1 = v13;
  v14 = (int *)type metadata accessor for AssetSkeleton();
  v15 = v14[5];
  v35 = v1;
  v16 = (uint64_t *)(v1 + v15);
  v17 = *v16;
  v18 = v16[1];
  a1[1] = *v16;
  a1[2] = v18;
  v19 = (char *)(v1 + v14[7]);
  sub_237F91894(v17, v18);
  UnknownStorage.init()();
  v20 = (uint64_t)v9 + *(int *)(v7 + 32);
  v21 = v5;
  _s11CloudAssets21UploadResponseMessageOwst_0(v20, 1, 1, v5);
  v22 = *((_QWORD *)v19 + 1);
  *v9 = *(_QWORD *)v19;
  v9[1] = v22;
  v23 = *((_QWORD *)v19 + 3);
  v9[2] = *((_QWORD *)v19 + 2);
  v9[3] = v23;
  v24 = *((_QWORD *)v19 + 5);
  v9[4] = *((_QWORD *)v19 + 4);
  v9[5] = v24;
  v25 = type metadata accessor for Credential(0);
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v37, &v19[*(int *)(v25 + 28)], v40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26 = v38;
  Google_Protobuf_Timestamp.init(date:)();
  sub_237F96070(v20, &qword_2568B7718);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v20, v26, v21);
  _s11CloudAssets21UploadResponseMessageOwst_0(v20, 0, 1, v21);
  v27 = v36;
  sub_237F96070(v36, (uint64_t *)&unk_2568B8910);
  sub_237F94734((uint64_t)v9, v27, type metadata accessor for CloudAssets_Credential);
  _s11CloudAssets21UploadResponseMessageOwst_0(v27, 0, 1, v7);
  v28 = (uint64_t *)(v35 + v14[6]);
  v29 = *v28;
  v30 = v28[1];
  v31 = a1[3];
  v32 = a1[4];
  sub_237F91894(*v28, v30);
  result = sub_237F918D8(v31, v32);
  a1[3] = v29;
  a1[4] = v30;
  return result;
}

void AssetSkeleton.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v6 = (uint64_t *)(v5 - v4);
  v7 = sub_237F9191C(&qword_2568B76D8);
  v14 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  sub_237F982D4();
  v10 = v9 - v8;
  sub_237F9195C(a1, a1[3]);
  sub_237F96934();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_237F96FB4(v6);
  sub_237F91B50(&qword_2568B76D0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEB550);
  v11 = Message.serializedData(partial:)();
  v13 = v12;
  sub_237F94B38((uint64_t)v6, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets);
  if (!v1)
  {
    sub_237F93D04();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_237F918D8(v11, v13);
  }
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v10, v7);
  sub_237F960D8();
}

void AssetSkeleton.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  Asset.ID.hash(into:)();
  type metadata accessor for Asset(0);
  sub_237F98308();
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_237F96288();
  sub_237F963D8();
  sub_237F982E4();
  sub_237F91894(v2, v3);
  Data.hash(into:)();
  sub_237F918D8(v2, v3);
  Hasher._combine(_:)(*(_QWORD *)(v0 + *(int *)(v0 + 24)));
  sub_237F98300();
  sub_237F98308();
  sub_237F96288();
  sub_237F963D8();
  sub_237F982E4();
  sub_237F96288();
  sub_237F963D8();
  sub_237F982E4();
  Credential.hash(into:)();
  sub_237F9614C();
}

void static AssetSkeleton.== infix(_:_:)()
{
  static Asset.== infix(_:_:)();
}

void sub_237F97504(char a1)
{
  if ((a1 & 1) != 0)
  {
    sub_237F98300();
    sub_237F96174();
  }
  sub_237F961B0();
}

void AssetSkeleton.hashValue.getter()
{
  sub_237F961E4();
  AssetSkeleton.hash(into:)();
  Hasher._finalize()();
  sub_237F9631C();
}

Swift::Int sub_237F97584()
{
  Hasher.init(_seed:)();
  AssetSkeleton.hash(into:)();
  return Hasher._finalize()();
}

void sub_237F975BC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AssetSkeleton.init(from:)(a1, a2);
}

void sub_237F975D0(_QWORD *a1)
{
  AssetSkeleton.encode(to:)(a1);
}

void sub_237F975E8()
{
  sub_237F91B50(&qword_2568B76E0, (uint64_t (*)(uint64_t))type metadata accessor for AssetSkeleton, (uint64_t)&protocol conformance descriptor for AssetSkeleton);
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetSkeleton(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v53 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v53 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for Asset.ID(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = v8[6];
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_237F91894(v16, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = v8[7];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *v20;
    v22 = v20[1];
    sub_237F91894(*v20, v22);
    *v19 = v21;
    v19[1] = v22;
    v23 = type metadata accessor for Asset(0);
    v24 = *(int *)(v23 + 20);
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (char *)a2 + v24;
    v27 = *(uint64_t *)((char *)a2 + v24);
    v28 = *(uint64_t *)((char *)a2 + v24 + 8);
    sub_237F91894(v27, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = *((_QWORD *)v26 + 2);
    v30 = *((_QWORD *)v26 + 3);
    sub_237F91894(v29, v30);
    v25[2] = v29;
    v25[3] = v30;
    *(uint64_t *)((char *)a1 + *(int *)(v23 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v23 + 24));
    v31 = a3[5];
    v32 = (uint64_t *)((char *)a1 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    v34 = *v33;
    v35 = v33[1];
    sub_237F91894(*v33, v35);
    *v32 = v34;
    v32[1] = v35;
    v36 = a3[6];
    v37 = (uint64_t *)((char *)a1 + v36);
    v38 = (uint64_t *)((char *)a2 + v36);
    v39 = *v38;
    v40 = v38[1];
    sub_237F91894(*v38, v40);
    *v37 = v39;
    v37[1] = v40;
    v41 = a3[7];
    v42 = (uint64_t *)((char *)a1 + v41);
    v43 = (uint64_t *)((char *)a2 + v41);
    v44 = *(uint64_t *)((char *)a2 + v41);
    v45 = v43[1];
    *v42 = v44;
    v42[1] = v45;
    v46 = v43[3];
    v42[2] = v43[2];
    v42[3] = v46;
    v47 = v43[5];
    v42[4] = v43[4];
    v42[5] = v47;
    v48 = *(int *)(type metadata accessor for Credential(0) + 28);
    v49 = (char *)v42 + v48;
    v50 = (char *)v43 + v48;
    v51 = type metadata accessor for Date();
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v52(v49, v50, v51);
  }
  return a1;
}

uint64_t destroy for AssetSkeleton(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 24)), *(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 28)), *(_QWORD *)(a1 + *(int *)(v5 + 28) + 8));
  v6 = a1 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_237F918D8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  sub_237F918D8(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  sub_237F918D8(*(_QWORD *)(a1 + a2[5]), *(_QWORD *)(a1 + a2[5] + 8));
  sub_237F918D8(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v7 = a1 + a2[7];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for Credential(0) + 28);
  v9 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
}

uint64_t initializeWithCopy for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v7[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_237F91894(v15, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = v7[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_237F91894(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = type metadata accessor for Asset(0);
  v23 = *(int *)(v22 + 20);
  v24 = (uint64_t *)(a1 + v23);
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a2 + v23);
  v27 = *(_QWORD *)(a2 + v23 + 8);
  sub_237F91894(v26, v27);
  *v24 = v26;
  v24[1] = v27;
  v28 = *(_QWORD *)(v25 + 16);
  v29 = *(_QWORD *)(v25 + 24);
  sub_237F91894(v28, v29);
  v24[2] = v28;
  v24[3] = v29;
  *(_QWORD *)(a1 + *(int *)(v22 + 24)) = *(_QWORD *)(a2 + *(int *)(v22 + 24));
  v30 = a3[5];
  v31 = (uint64_t *)(a1 + v30);
  v32 = (uint64_t *)(a2 + v30);
  v33 = *v32;
  v34 = v32[1];
  sub_237F91894(*v32, v34);
  *v31 = v33;
  v31[1] = v34;
  v35 = a3[6];
  v36 = (uint64_t *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v38 = *v37;
  v39 = v37[1];
  sub_237F91894(*v37, v39);
  *v36 = v38;
  v36[1] = v39;
  v40 = a3[7];
  v41 = (_QWORD *)(a1 + v40);
  v42 = (_QWORD *)(a2 + v40);
  v43 = *(_QWORD *)(a2 + v40);
  v44 = v42[1];
  *v41 = v43;
  v41[1] = v44;
  v45 = v42[3];
  v41[2] = v42[2];
  v41[3] = v45;
  v46 = v42[5];
  v41[4] = v42[4];
  v41[5] = v46;
  v47 = *(int *)(type metadata accessor for Credential(0) + 28);
  v48 = (char *)v41 + v47;
  v49 = (char *)v42 + v47;
  v50 = type metadata accessor for Date();
  v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v51(v48, v49, v50);
  return a1;
}

uint64_t assignWithCopy for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_237F91894(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_237F918D8(v16, v17);
  v18 = v7[7];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_237F91894(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_237F918D8(v23, v24);
  v25 = type metadata accessor for Asset(0);
  v26 = *(int *)(v25 + 20);
  v27 = (uint64_t *)(a1 + v26);
  v28 = a2 + v26;
  v29 = *(_QWORD *)(a2 + v26);
  v30 = *(_QWORD *)(a2 + v26 + 8);
  sub_237F91894(v29, v30);
  v31 = *v27;
  v32 = v27[1];
  *v27 = v29;
  v27[1] = v30;
  sub_237F918D8(v31, v32);
  v33 = *(_QWORD *)(v28 + 16);
  v34 = *(_QWORD *)(v28 + 24);
  sub_237F91894(v33, v34);
  v35 = v27[2];
  v36 = v27[3];
  v27[2] = v33;
  v27[3] = v34;
  sub_237F918D8(v35, v36);
  *(_QWORD *)(a1 + *(int *)(v25 + 24)) = *(_QWORD *)(a2 + *(int *)(v25 + 24));
  v37 = a3[5];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = *v39;
  v41 = v39[1];
  sub_237F91894(*v39, v41);
  v42 = *v38;
  v43 = v38[1];
  *v38 = v40;
  v38[1] = v41;
  sub_237F918D8(v42, v43);
  v44 = a3[6];
  v45 = (uint64_t *)(a1 + v44);
  v46 = (uint64_t *)(a2 + v44);
  v47 = *v46;
  v48 = v46[1];
  sub_237F91894(*v46, v48);
  v49 = *v45;
  v50 = v45[1];
  *v45 = v47;
  v45[1] = v48;
  sub_237F918D8(v49, v50);
  v51 = a3[7];
  v52 = (_QWORD *)(a1 + v51);
  v53 = (_QWORD *)(a2 + v51);
  *v52 = *(_QWORD *)(a2 + v51);
  v52[1] = *(_QWORD *)(a2 + v51 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[2] = v53[2];
  v52[3] = v53[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v52[4] = v53[4];
  v52[5] = v53[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = *(int *)(type metadata accessor for Credential(0) + 28);
  v55 = (char *)v52 + v54;
  v56 = (char *)v53 + v54;
  v57 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 24))(v55, v56, v57);
  return a1;
}

uint64_t initializeWithTake for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v8 = type metadata accessor for Asset(0);
  v9 = *(int *)(v8 + 20);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + *(int *)(v8 + 24)) = *(_QWORD *)(a2 + *(int *)(v8 + 24));
  v13 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  v14 = a3[7];
  v15 = (_OWORD *)(a1 + v14);
  v16 = (_OWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v15[2] = v16[2];
  v18 = *(int *)(type metadata accessor for Credential(0) + 28);
  v19 = (char *)v15 + v18;
  v20 = (char *)v16 + v18;
  v21 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for AssetSkeleton(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_237F918D8(v14, v15);
  v16 = v7[7];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_237F918D8(v17, v18);
  v19 = type metadata accessor for Asset(0);
  v20 = *(int *)(v19 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a1 + v20);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_237F918D8(v23, v24);
  v25 = *(_QWORD *)(v21 + 16);
  v26 = *(_QWORD *)(v21 + 24);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
  sub_237F918D8(v25, v26);
  *(_QWORD *)(a1 + *(int *)(v19 + 24)) = *(_QWORD *)(a2 + *(int *)(v19 + 24));
  v27 = a3[5];
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a1 + v27 + 8);
  *(_OWORD *)(a1 + v27) = *(_OWORD *)(a2 + v27);
  sub_237F918D8(v28, v29);
  v30 = a3[6];
  v31 = *(_QWORD *)(a1 + v30);
  v32 = *(_QWORD *)(a1 + v30 + 8);
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  sub_237F918D8(v31, v32);
  v33 = a3[7];
  v34 = (_QWORD *)(a1 + v33);
  v35 = (_QWORD *)(a2 + v33);
  v36 = *(_QWORD *)(a2 + v33 + 8);
  *v34 = *(_QWORD *)(a2 + v33);
  v34[1] = v36;
  swift_bridgeObjectRelease();
  v37 = v35[3];
  v34[2] = v35[2];
  v34[3] = v37;
  swift_bridgeObjectRelease();
  v38 = v35[5];
  v34[4] = v35[4];
  v34[5] = v38;
  swift_bridgeObjectRelease();
  v39 = *(int *)(type metadata accessor for Credential(0) + 28);
  v40 = (char *)v34 + v39;
  v41 = (char *)v35 + v39;
  v42 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v40, v41, v42);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetSkeleton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237F97FAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_237F982F0();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 12)
    {
      sub_237F961B0();
      return;
    }
    v7 = type metadata accessor for Credential(0);
    v8 = v4 + *(int *)(a3 + 28);
  }
  _s11CloudAssets21UploadResponseMessageOwet_0(v8, v3, v7);
}

uint64_t storeEnumTagSinglePayload for AssetSkeleton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237F98050(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  result = sub_237F982F0();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = v5;
  }
  else
  {
    if (a3 == 12)
    {
      v11 = (_QWORD *)(v5 + *(int *)(a4 + 20));
      *v11 = 0;
      v11[1] = (unint64_t)(((-(int)v4 >> 2) & 3) - 4 * (_DWORD)v4) << 60;
      return result;
    }
    v9 = type metadata accessor for Credential(0);
    v10 = v5 + *(int *)(a4 + 28);
  }
  return _s11CloudAssets21UploadResponseMessageOwst_0(v10, v4, v4, v9);
}

uint64_t sub_237F980E8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AssetSkeleton.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237F981B8 + 4 * byte_237FE7760[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237F981D8 + 4 * byte_237FE7765[v4]))();
}

_BYTE *sub_237F981B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237F981D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237F981E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237F981E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237F981F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237F981F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AssetSkeleton.CodingKeys()
{
  return &type metadata for AssetSkeleton.CodingKeys;
}

unint64_t sub_237F98218()
{
  unint64_t result;

  result = qword_2568B76F8;
  if (!qword_2568B76F8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE78FC, &type metadata for AssetSkeleton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B76F8);
  }
  return result;
}

unint64_t sub_237F98258()
{
  unint64_t result;

  result = qword_2568B7700;
  if (!qword_2568B7700)
  {
    result = MEMORY[0x23B829E84](&unk_237FE786C, &type metadata for AssetSkeleton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7700);
  }
  return result;
}

unint64_t sub_237F98298()
{
  unint64_t result;

  result = qword_2568B7708;
  if (!qword_2568B7708)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7894, &type metadata for AssetSkeleton.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7708);
  }
  return result;
}

uint64_t sub_237F982E4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237F982F0()
{
  return type metadata accessor for Asset(0);
}

uint64_t sub_237F98300()
{
  return type metadata accessor for AssetSkeleton();
}

uint64_t sub_237F9831C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237F98324@<X0>(uint64_t a1@<X8>)
{
  return sub_237F9834C(&OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals, &qword_2568B7730, a1);
}

uint64_t sub_237F98338@<X0>(uint64_t a1@<X8>)
{
  return sub_237F9834C(&OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results, &qword_2568B7740, a1);
}

uint64_t sub_237F9834C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *a1;
  v6 = sub_237F9191C(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

uint64_t sub_237F9838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + 112) = a1;
  v7 = v3 + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals;
  v8 = sub_237F9191C(&qword_2568B7730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
  v9 = v3 + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results;
  v10 = sub_237F9191C(&qword_2568B7740);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a3, v10);
  return v3;
}

uint64_t AssetsUploadCoordinator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = sub_237F9191C(&qword_2568B7730);
  sub_237F96160(v1);
  v2 = sub_237F9191C(&qword_2568B7740);
  sub_237F96160(v2);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetsUploadCoordinator.__deallocating_deinit()
{
  AssetsUploadCoordinator.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t AssetsUploadCoordinator.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237F984B0()
{
  return AssetsUploadCoordinator.unownedExecutor.getter();
}

uint64_t sub_237F984C8()
{
  return type metadata accessor for AssetsUploadCoordinator();
}

uint64_t type metadata accessor for AssetsUploadCoordinator()
{
  uint64_t result;

  result = qword_2568B7748;
  if (!qword_2568B7748)
    return swift_getSingletonMetadata();
  return result;
}

void sub_237F98508()
{
  unint64_t v0;
  unint64_t v1;

  sub_237F985D8();
  if (v0 <= 0x3F)
  {
    sub_237F98640();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for AssetsUploadCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.assetSkeletons.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.signals.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AssetsUploadCoordinator.results.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

void sub_237F985D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2568B7758)
  {
    sub_237F919BC(&qword_2568B8A60);
    v0 = type metadata accessor for AsyncThrowingStream();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2568B7758);
  }
}

void sub_237F98640()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2568B7760)
  {
    sub_237F919BC(&qword_2568B7768);
    sub_237F919BC(&qword_2568B8A60);
    v0 = type metadata accessor for AsyncThrowingStream();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2568B7760);
  }
}

uint64_t XPCAsyncSequenceRequest.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_237F92868();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t XPCAsyncSequenceRequest.data.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for XPCAsyncSequenceRequest() + 20);
  v2 = *(_QWORD *)v1;
  sub_237F91894(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for XPCAsyncSequenceRequest()
{
  uint64_t result;

  result = qword_2568B7788;
  if (!qword_2568B7788)
    return swift_getSingletonMetadata();
  return result;
}

BOOL sub_237F98760(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void sub_237F98770(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

uint64_t sub_237F98794(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_237F98858()
{
  return 2;
}

Swift::Int sub_237F98860(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t sub_237F988A4(char a1)
{
  if ((a1 & 1) != 0)
    return 1635017060;
  else
    return 25705;
}

BOOL sub_237F988C8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_237F98760(*a1, *a2);
}

Swift::Int sub_237F988D4()
{
  char *v0;

  return sub_237F98860(*v0);
}

void sub_237F988DC(uint64_t a1)
{
  char *v1;

  sub_237F98770(a1, *v1);
}

uint64_t sub_237F988E4()
{
  char *v0;

  return sub_237F988A4(*v0);
}

uint64_t sub_237F988EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237F98794(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237F98910@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237F98858();
  *a1 = result;
  return result;
}

uint64_t sub_237F98934()
{
  sub_237F98ACC();
  return CodingKey.description.getter();
}

uint64_t sub_237F9895C()
{
  sub_237F98ACC();
  return CodingKey.debugDescription.getter();
}

uint64_t XPCAsyncSequenceRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_237F9191C(&qword_2568B7770);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v7 = v6 - v5;
  sub_237F9195C(a1, a1[3]);
  sub_237F98ACC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_237F98DD4(&qword_2568B7530, MEMORY[0x24BDCEA70]);
  sub_237F994A0();
  if (!v1)
  {
    type metadata accessor for XPCAsyncSequenceRequest();
    sub_237F93D04();
    sub_237F994A0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

unint64_t sub_237F98ACC()
{
  unint64_t result;

  result = qword_2568B7778;
  if (!qword_2568B7778)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7BB4, &type metadata for XPCAsyncSequenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7778);
  }
  return result;
}

uint64_t XPCAsyncSequenceRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v15 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  sub_237F982D4();
  v13 = v5 - v4;
  v14 = sub_237F9191C(&qword_2568B7780);
  MEMORY[0x24BDAC7A8](v14);
  sub_237F982D4();
  v6 = type metadata accessor for XPCAsyncSequenceRequest();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F982D4();
  v9 = v8 - v7;
  sub_237F9195C(a1, a1[3]);
  sub_237F98ACC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return sub_237F91A00((uint64_t)a1);
  LOBYTE(v16) = 0;
  sub_237F98DD4(&qword_2568B7550, MEMORY[0x24BDCEAA8]);
  sub_237F99494();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v9, v13, v15);
  sub_237F93C8C();
  sub_237F99494();
  sub_237F99480();
  *(_OWORD *)(v9 + *(int *)(v6 + 20)) = v16;
  sub_237F98D30(v9, a2);
  sub_237F91A00((uint64_t)a1);
  return sub_237F98D74(v9);
}

uint64_t sub_237F98D30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCAsyncSequenceRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_237F98D74(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for XPCAsyncSequenceRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_237F98DB0()
{
  return sub_237F98DD4(&qword_2568B7510, MEMORY[0x24BDCEA88]);
}

uint64_t sub_237F98DD4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID();
    result = MEMORY[0x23B829E84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_237F98E18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return XPCAsyncSequenceRequest.init(from:)(a1, a2);
}

uint64_t sub_237F98E2C(_QWORD *a1)
{
  return XPCAsyncSequenceRequest.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAsyncSequenceRequest(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = *v10;
    v12 = v10[1];
    sub_237F91894(*v10, v12);
    *v9 = v11;
    v9[1] = v12;
  }
  return a1;
}

uint64_t destroy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return sub_237F918D8(*(_QWORD *)(a1 + *(int *)(a2 + 20)), *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t initializeWithCopy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_237F91894(*v9, v11);
  *v8 = v10;
  v8[1] = v11;
  return a1;
}

uint64_t assignWithCopy for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  sub_237F91894(*v9, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_237F918D8(v12, v13);
  return a1;
}

uint64_t initializeWithTake for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for XPCAsyncSequenceRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_237F918D8(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237F990DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;

  v6 = sub_237F92868();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v8) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v8) & 0xC | (v8 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237F99170(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;

  result = sub_237F92868();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
    return _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, a2, result);
  v9 = (_QWORD *)(a1 + *(int *)(a4 + 20));
  *v9 = 0;
  v9[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_237F991F0()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237F99334 + 4 * byte_237FE7A15[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237F99368 + 4 * byte_237FE7A10[v4]))();
}

uint64_t sub_237F99368(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F99370(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237F99378);
  return result;
}

uint64_t sub_237F99384(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237F9938CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237F99390(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F99398(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_237F993A4(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceRequest.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceRequest.CodingKeys;
}

unint64_t sub_237F993C4()
{
  unint64_t result;

  result = qword_2568B7798;
  if (!qword_2568B7798)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7B8C, &type metadata for XPCAsyncSequenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7798);
  }
  return result;
}

unint64_t sub_237F99404()
{
  unint64_t result;

  result = qword_2568B77A0;
  if (!qword_2568B77A0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7AFC, &type metadata for XPCAsyncSequenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B77A0);
  }
  return result;
}

unint64_t sub_237F99444()
{
  unint64_t result;

  result = qword_2568B77A8;
  if (!qword_2568B77A8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7B24, &type metadata for XPCAsyncSequenceRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B77A8);
  }
  return result;
}

uint64_t sub_237F99480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 144) + 8))(v0, v1);
}

uint64_t sub_237F99494()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_237F994A0()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t AssetDownloadRequest.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for UUID();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

void AssetDownloadRequest.tenantName.getter()
{
  sub_237F9C72C();
  sub_237F9C890();
  sub_237F961BC();
  sub_237F928A0();
}

uint64_t type metadata accessor for AssetDownloadRequest()
{
  uint64_t result;

  result = qword_2568B77F8;
  if (!qword_2568B77F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AssetDownloadRequest.workingDirectory.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237F9C72C();
  sub_237F92860();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

void AssetDownloadRequest.asset.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_237F9C72C();
  sub_237F9B398(v1 + *(int *)(v3 + 28), a1, type metadata accessor for Asset);
}

uint64_t AssetDownloadRequest.range.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_237F9C72C() + 32));
}

uint64_t AssetDownloadRequest.fileURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237F9C72C();
  sub_237F92860();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

void AssetDownloadRequest.credential.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_237F9C72C();
  sub_237F9B398(v1 + *(int *)(v3 + 40), a1, type metadata accessor for Credential);
}

void AssetDownloadRequest.storageReference.getter()
{
  uint64_t v0;

  v0 = sub_237F9C72C();
  sub_237F9C808(*(int *)(v0 + 44));
  sub_237F961BC();
  sub_237F928A0();
}

void AssetDownloadRequest.storageReferenceSignature.getter()
{
  uint64_t v0;

  v0 = sub_237F9C72C();
  sub_237F9C808(*(int *)(v0 + 48));
  sub_237F961BC();
  sub_237F928A0();
}

void AssetDownloadRequest.applicationID.getter()
{
  sub_237F9C72C();
  sub_237F9C890();
  sub_237F961BC();
  sub_237F928A0();
}

void AssetDownloadRequest.init(asset:fileURL:credential:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_237F9C834();
  v12 = v11;
  v14 = v13;
  sub_237F9C81C();
  v15 = sub_237F9C72C();
  sub_237F9C6E0(v15);
  sub_237F9C984();
  sub_237F9C97C(v14, v16);
  v17 = sub_237F92860();
  sub_237F9C740(v17);
  sub_237F9C95C(v12, v9 + v10[10]);
  sub_237F9C7D8(v10[11], (__n128)xmmword_237FE70F0);
  sub_237F9C788();
  sub_237F9C910(v14);
  *(_OWORD *)(v9 + v10[12]) = a9;
  sub_237F9C6BC();
  sub_237F9C75C();
}

void sub_237F99724(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD, uint64_t);
  unint64_t v27;
  char *v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, _QWORD, uint64_t);
  id v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  unint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;

  v49 = a1;
  v50 = a2;
  v51 = a3;
  v4 = type metadata accessor for URL.DirectoryHint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  sub_237F92870();
  sub_237F9191C(&qword_2568B7DA0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_237F92860();
  v55 = *(void (**)(uint64_t, uint64_t))(v9 - 8);
  v57 = v9;
  sub_237F960F0();
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  sub_237F9C990();
  v52 = v14;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v15);
  sub_237F9C990();
  v53 = v16;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v17);
  sub_237F9C990();
  v56 = v18;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v19);
  sub_237F9C990();
  v47 = v20;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v21);
  v48 = (char *)&v46 - v22;
  v23 = NSHomeDirectory();
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v8, 1, 1, v9);
  v24 = *MEMORY[0x24BDCD7A0];
  v25 = v5;
  v26 = *(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104);
  sub_237F9C778();
  URL.init(filePath:directoryHint:relativeTo:)();
  v58 = 0x7972617262694CLL;
  v59 = 0xE700000000000000;
  sub_237F9C778();
  v27 = sub_237F93C14();
  v28 = v52;
  URL.appending<A>(path:directoryHint:)();
  v29 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
  sub_237F9C7CC();
  sub_237F9C800();
  v30 = (void (*)(char *, uint64_t))*((_QWORD *)v55 + 1);
  v30(v13, v57);
  v58 = 0x736568636143;
  v59 = 0xE600000000000000;
  sub_237F9C778();
  v31 = (char *)v53;
  URL.appending<A>(path:directoryHint:)();
  sub_237F9C7CC();
  sub_237F9C800();
  v32 = v28;
  v33 = v57;
  v30(v32, v57);
  v58 = 0x74694B64756F6C43;
  v59 = 0xE800000000000000;
  LODWORD(v52) = v24;
  v34 = v24;
  v35 = v26;
  v26(v3, v34, v4);
  v54 = v27;
  URL.appending<A>(path:directoryHint:)();
  v55 = v29;
  v29(v3, v4);
  sub_237F9C800();
  v53 = v30;
  v30(v31, v33);
  v36 = objc_msgSend((id)objc_opt_self(), sel_mainBundle);
  v37 = objc_msgSend(v36, sel_bundleIdentifier);

  if (v37)
  {
    v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v40 = v39;

    v58 = v38;
    v59 = v40;
    v35(v3, v52, v4);
    v41 = v47;
    v42 = v56;
    URL.appending<A>(path:directoryHint:)();
    v55(v3, v4);
    sub_237F9C800();
    v43 = v57;
    v44 = (void (*)(uint64_t, uint64_t))v53;
    v53(v42, v57);
    v58 = 0x73734164756F6C43;
    v59 = 0xEB00000000737465;
    sub_237F9C824();
    v45 = v48;
    URL.appending<A>(path:directoryHint:)();
    v55(v3, v4);
    sub_237F9C800();
    v44(v41, v43);
    v58 = v49;
    v59 = v50;
    sub_237F9C824();
    URL.appending<A>(path:directoryHint:)();
    sub_237F9C7CC();
    v44((uint64_t)v45, v43);
  }
  else
  {
    __break(1u);
  }
}

void AssetDownloadRequest.init(tenantName:asset:fileURL:credential:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_237F9C834();
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_237F9C81C();
  v18 = (int *)sub_237F9C72C();
  v19 = (uint64_t *)(v9 + v18[5]);
  *v19 = v17;
  v19[1] = v15;
  v20 = v9 + v18[6];
  swift_bridgeObjectRetain();
  sub_237F99724(v17, v15, v20);
  swift_bridgeObjectRelease();
  sub_237F9C984();
  sub_237F9C97C(v13, v21);
  v22 = sub_237F92860();
  sub_237F9C740(v22);
  sub_237F9C95C(v11, v9 + v18[10]);
  sub_237F9C7D8(v18[11], (__n128)xmmword_237FE70F0);
  sub_237F9C788();
  sub_237F9C910(v13);
  *(_OWORD *)(v9 + v18[12]) = a9;
  sub_237F9C6BC();
  sub_237F9C75C();
}

void AssetDownloadRequest.init(skeleton:fileURL:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_237F9C81C();
  v6 = sub_237F9C72C();
  sub_237F9C6E0(v6);
  sub_237F9C984();
  sub_237F99D04(a1, v7, type metadata accessor for Asset);
  v8 = sub_237F92860();
  sub_237F9C7B4(v8);
  v9 = type metadata accessor for AssetSkeleton();
  v10 = sub_237F9C8E0(v9);
  sub_237F99D04(v10, v11, type metadata accessor for Credential);
  *(_OWORD *)(v2 + *(int *)(v3 + 44)) = *(_OWORD *)(a1 + *(int *)(a2 + 20));
  *(_OWORD *)(v2 + *(int *)(v3 + 48)) = *(_OWORD *)(a1 + *(int *)(a2 + 24));
  sub_237F9C6BC();
}

void sub_237F99D04(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_237F963C8(a1, a2, a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_237F928A0();
}

void AssetDownloadRequest.init(tenantName:skeleton:fileURL:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_237F9C81C();
  v9 = (int *)sub_237F9C72C();
  v10 = (uint64_t *)(v4 + v9[5]);
  *v10 = a1;
  v10[1] = a2;
  v11 = v4 + v9[6];
  swift_bridgeObjectRetain();
  sub_237F99724(a1, a2, v11);
  swift_bridgeObjectRelease();
  sub_237F9C984();
  sub_237F99D04(a3, v12, type metadata accessor for Asset);
  v13 = sub_237F92860();
  sub_237F9C7B4(v13);
  v14 = type metadata accessor for AssetSkeleton();
  v15 = sub_237F9C8E0(v14);
  sub_237F99D04(v15, v16, type metadata accessor for Credential);
  *(_OWORD *)(v4 + v9[11]) = *(_OWORD *)(a3 + *(int *)(a4 + 20));
  *(_OWORD *)(v4 + v9[12]) = *(_OWORD *)(a3 + *(int *)(a4 + 24));
  sub_237F9C6BC();
}

__n128 AssetDownloadRequest.init(asset:destination:credential:range:applicationID:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __n128 result;

  sub_237F9C81C();
  v13 = *a3;
  v14 = a3[1];
  v15 = (int *)sub_237F9C72C();
  v16 = (uint64_t *)(v8 + v15[5]);
  *v16 = v13;
  v16[1] = v14;
  v17 = v8 + v15[6];
  swift_bridgeObjectRetain();
  sub_237F99724(v13, v14, v17);
  sub_237F9C97C(a1, v8 + v15[7]);
  v18 = v8 + v15[8];
  *(_QWORD *)v18 = a4;
  *(_QWORD *)(v18 + 8) = a5;
  *(_BYTE *)(v18 + 16) = a6 & 1;
  v19 = sub_237F92860();
  sub_237F9C740(v19);
  sub_237F9C95C((uint64_t)a3, v8 + v15[10]);
  v20 = (_QWORD *)(v8 + v15[13]);
  *v20 = a7;
  v20[1] = a8;
  *(_OWORD *)(v8 + v15[11]) = xmmword_237FE70F0;
  sub_237F9C788();
  sub_237F9C910(a1);
  sub_237F91AC0((uint64_t)a3, type metadata accessor for Credential);
  result = (__n128)xmmword_237FE70F0;
  *(_OWORD *)(v8 + v15[12]) = xmmword_237FE70F0;
  return result;
}

void AssetDownloadRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  uint64_t v13;

  sub_237F9C834();
  v1 = v0;
  type metadata accessor for UUID();
  sub_237F91B50(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  dispatch thunk of Hashable.hash(into:)();
  v2 = (int *)sub_237F9C72C();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_237F92860();
  sub_237F91B50(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  dispatch thunk of Hashable.hash(into:)();
  v3 = v0 + v2[7];
  Asset.ID.hash(into:)();
  v4 = sub_237F928BC();
  v5 = (uint64_t *)(v3 + *(int *)(v4 + 20));
  v6 = *v5;
  v7 = v5[1];
  v9 = v5[2];
  v8 = v5[3];
  sub_237F91894(*v5, v7);
  Data.hash(into:)();
  sub_237F918D8(v6, v7);
  sub_237F91894(v9, v8);
  Data.hash(into:)();
  sub_237F96348(v9);
  Hasher._combine(_:)(*(_QWORD *)(v3 + *(int *)(v4 + 24)));
  v10 = v1 + v2[8];
  if (*(_BYTE *)(v10 + 16) == 1)
  {
    sub_237F9C870(0);
  }
  else
  {
    v12 = *(_QWORD *)v10;
    v11 = *(_QWORD *)(v10 + 8);
    sub_237F9C870(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v11);
  }
  dispatch thunk of Hashable.hash(into:)();
  v13 = v1 + v2[10];
  Credential.hash(into:)();
  sub_237F9C7EC(v2[11]);
  sub_237F9C8B0();
  sub_237F96348(v13);
  sub_237F9C7EC(v2[12]);
  sub_237F9C8B0();
  sub_237F96348(v13);
  if (*(_QWORD *)(v1 + v2[13] + 8))
  {
    sub_237F9C870(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_237F9C870(0);
    sub_237F9C75C();
  }
}

void static AssetDownloadRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;

  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    v4 = *(int *)(sub_237F9C72C() + 20);
    v5 = *(_QWORD *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + v4 + 8);
    v7 = (_QWORD *)(a2 + v4);
    v8 = v5 == *v7 && v6 == v7[1];
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      sub_237F9C970();
  }
  sub_237F961B0();
}

uint64_t sub_237F9A2D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  BOOL v10;
  char v12;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x614E746E616E6574 && a2 == 0xEA0000000000656DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000237FE32B0
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else
          {
            v10 = a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 6;
            }
            else if (a1 == 0xD000000000000010 && a2 == 0x8000000237FE32D0
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 7;
            }
            else if (a1 == 0xD000000000000019 && a2 == 0x8000000237FE32F0
                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 8;
            }
            else if (a1 == 0x746163696C707061 && a2 == 0xED000044496E6F69)
            {
              swift_bridgeObjectRelease();
              return 9;
            }
            else
            {
              v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v12 & 1) != 0)
                return 9;
              else
                return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t sub_237F9A6B8()
{
  return 10;
}

uint64_t sub_237F9A6C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237F9A6E8
                                                            + 4 * asc_237FE7C20[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_237F9A6E8()
{
  return 0x614E746E616E6574;
}

unint64_t sub_237F9A704()
{
  return 0xD000000000000010;
}

unint64_t sub_237F9A78C()
{
  return 0xD000000000000019;
}

uint64_t sub_237F9A7B0()
{
  return 0x746163696C707061;
}

uint64_t sub_237F9A7D4()
{
  unsigned __int8 *v0;

  return sub_237F9A6C0(*v0);
}

uint64_t sub_237F9A7DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237F9A2D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237F9A800@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237F9A6B8();
  *a1 = result;
  return result;
}

uint64_t sub_237F9A824()
{
  sub_237F9B35C();
  return CodingKey.description.getter();
}

uint64_t sub_237F9A84C()
{
  sub_237F9B35C();
  return CodingKey.debugDescription.getter();
}

void AssetDownloadRequest.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_237F9191C(&qword_2568B77B0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_237F92870();
  sub_237F9C850();
  sub_237F9C964();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_237F91B50(&qword_2568B7530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_237F9C938();
  sub_237F9C734();
  if (!v0)
  {
    type metadata accessor for AssetDownloadRequest();
    sub_237F9C8F8(1);
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for URL();
    sub_237F91B50(&qword_2568B7538, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_237F9C918();
    sub_237F9C734();
    type metadata accessor for Asset(0);
    sub_237F91B50((unint64_t *)&unk_2568B8970, type metadata accessor for Asset, (uint64_t)&protocol conformance descriptor for Asset);
    sub_237F9C918();
    sub_237F9C734();
    sub_237F9191C(&qword_2568B8920);
    sub_237F91A20(&qword_2568B7540, MEMORY[0x24BEE1770], MEMORY[0x24BEE1B98]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_237F9C734();
    type metadata accessor for Credential(0);
    sub_237F91B50(&qword_2568B77C0, type metadata accessor for Credential, (uint64_t)&protocol conformance descriptor for Credential);
    sub_237F9C734();
    sub_237F93D04();
    sub_237F9C734();
    sub_237F9C734();
    sub_237F9C8F8(9);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_237F960D8();
}

Swift::Int AssetDownloadRequest.hashValue.getter()
{
  Hasher.init(_seed:)();
  AssetDownloadRequest.hash(into:)();
  return Hasher._finalize()();
}

void AssetDownloadRequest.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, char *, uint64_t);
  char v31;
  uint64_t v32;
  char *v33;
  void (*v34)(uint64_t, char *, uint64_t);
  int *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t (*v48)(_QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  int *v64;
  __int128 v65;
  char v66;
  char v67;

  v50 = a2;
  v51 = type metadata accessor for Credential(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F9283C();
  v52 = v5;
  v53 = type metadata accessor for Asset(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9283C();
  v54 = v7;
  v8 = type metadata accessor for URL();
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  sub_237F960F0();
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v49 - v13;
  v15 = type metadata accessor for UUID();
  v58 = *(_QWORD *)(v15 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v16);
  sub_237F92870();
  v56 = sub_237F9191C(&qword_2568B77C8);
  v17 = *(_QWORD *)(v56 - 8);
  MEMORY[0x24BDAC7A8](v56);
  v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = (int *)type metadata accessor for AssetDownloadRequest();
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v20);
  sub_237F9283C();
  v59 = a1;
  v60 = v21;
  sub_237F9C850();
  v55 = v19;
  v22 = v61;
  sub_237F9C964();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v57 = v15;
  if (v22)
  {
    v61 = v22;
    sub_237F91A00(v59);
  }
  else
  {
    v23 = v54;
    v61 = v12;
    LOBYTE(v65) = 0;
    sub_237F91B50(&qword_2568B7550, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_237F9C938();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v24 = v15;
    v25 = v60;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v60, v2, v24);
    LOBYTE(v65) = 1;
    v26 = KeyedDecodingContainer.decode(_:forKey:)();
    v27 = (uint64_t *)(v25 + v64[5]);
    *v27 = v26;
    v27[1] = v28;
    LOBYTE(v65) = 2;
    sub_237F91B50(&qword_2568B7560, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v29 = v63;
    sub_237F9C964();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v30 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 32);
    v30(v25 + v64[6], v14, v29);
    LOBYTE(v65) = 3;
    sub_237F91B50(&qword_2568B7558, type metadata accessor for Asset, (uint64_t)&protocol conformance descriptor for Asset);
    sub_237F9C938();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F99D04(v23, v25 + v64[7], type metadata accessor for Asset);
    sub_237F9191C(&qword_2568B8920);
    v67 = 4;
    sub_237F91A20(&qword_2568B7568, MEMORY[0x24BEE1798], MEMORY[0x24BEE1BC8]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    v31 = v66;
    v32 = v25 + v64[8];
    *(_OWORD *)v32 = v65;
    *(_BYTE *)(v32 + 16) = v31;
    LOBYTE(v65) = 5;
    v33 = v61;
    sub_237F9C964();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v34 = v30;
    v35 = v64;
    v34(v25 + v64[9], v33, v29);
    LOBYTE(v65) = 6;
    sub_237F91B50(&qword_2568B8990, type metadata accessor for Credential, (uint64_t)&protocol conformance descriptor for Credential);
    sub_237F9C938();
    v36 = v52;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F99D04(v36, v25 + v35[10], type metadata accessor for Credential);
    v67 = 7;
    sub_237F93C8C();
    sub_237F9C878();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v61 = 0;
    *(_OWORD *)(v25 + v35[11]) = v65;
    v67 = 8;
    sub_237F9C878();
    v38 = v61;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v61 = v38;
    if (v38)
    {
      sub_237F9C7A8(*(uint64_t (**)(uint64_t, _QWORD))(v17 + 8));
      v39 = 0;
      v37 = v59;
    }
    else
    {
      *(_OWORD *)(v25 + v35[12]) = v65;
      LOBYTE(v65) = 9;
      v40 = v61;
      v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      v61 = v40;
      if (!v40)
      {
        v43 = v41;
        v44 = v42;
        sub_237F9C92C();
        v45 = v60;
        v46 = (uint64_t *)(v60 + v64[13]);
        *v46 = v43;
        v46[1] = v44;
        sub_237F9B398(v45, v50, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
        sub_237F91A00(v59);
        v47 = sub_237F961BC();
        sub_237F91AC0(v47, v48);
        goto LABEL_6;
      }
      sub_237F9C92C();
      v39 = 1;
      v35 = v64;
      v37 = v59;
      v25 = v60;
    }
    sub_237F91A00(v37);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v25, v57);
    swift_bridgeObjectRelease();
    sub_237F9C944(v25 + v35[6], v62);
    sub_237F91AC0(v25 + v35[7], type metadata accessor for Asset);
    sub_237F9C944(v25 + v35[9], v62);
    sub_237F91AC0(v25 + v35[10], type metadata accessor for Credential);
    sub_237F9C9A8(v35[11]);
    if ((v39 & 1) != 0)
      sub_237F9C9A8(v35[12]);
  }
LABEL_6:
  sub_237F960D8();
}

Swift::Int sub_237F9B2F4()
{
  Hasher.init(_seed:)();
  AssetDownloadRequest.hash(into:)();
  return Hasher._finalize()();
}

void sub_237F9B32C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AssetDownloadRequest.init(from:)(a1, a2);
}

void sub_237F9B340()
{
  AssetDownloadRequest.encode(to:)();
}

unint64_t sub_237F9B35C()
{
  unint64_t result;

  result = qword_2568B77B8;
  if (!qword_2568B77B8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7EDC, &type metadata for AssetDownloadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B77B8);
  }
  return result;
}

void sub_237F9B398(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = sub_237F963C8(a1, a2, a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_237F928A0();
}

void sub_237F9B3C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237F91B50(&qword_2568B77D0, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadRequest, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest);
  a1[1] = v2;
  sub_237F91B50(&qword_2568B77D8, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadRequest, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest);
  a1[2] = v3;
  sub_237F91B50(&qword_2568B77E0, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadRequest, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest);
  a1[3] = v4;
  sub_237F91B50(&qword_2568B77E8, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadRequest, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest);
  a1[4] = v5;
}

void sub_237F9B458()
{
  sub_237F91B50(&qword_2568B77F0, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadRequest, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest);
}

char *initializeBufferWithCopyOfBuffer for AssetDownloadRequest(char *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  void (*v75)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v72 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = (char *)(v72 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = &a1[v8];
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *(_QWORD *)v10 = *v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = &a1[v9];
    v14 = (char *)a2 + v9;
    v15 = type metadata accessor for URL();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v74 = v15;
    v75 = v16;
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v17 = a3[7];
    v18 = &a1[v17];
    v19 = (char *)a2 + v17;
    v16(&a1[v17], (char *)a2 + v17, v15);
    v20 = (int *)type metadata accessor for Asset.ID(0);
    v21 = v20[5];
    v22 = &v18[v21];
    v23 = &v19[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = v20[6];
    v26 = (uint64_t *)&v18[v25];
    v27 = (uint64_t *)&v19[v25];
    v28 = *v27;
    v29 = v27[1];
    swift_bridgeObjectRetain();
    sub_237F91894(v28, v29);
    *v26 = v28;
    v26[1] = v29;
    v30 = v20[7];
    v31 = (uint64_t *)&v18[v30];
    v32 = (uint64_t *)&v19[v30];
    v33 = *v32;
    v34 = v32[1];
    sub_237F91894(*v32, v34);
    *v31 = v33;
    v31[1] = v34;
    v35 = type metadata accessor for Asset(0);
    v36 = *(int *)(v35 + 20);
    v37 = (uint64_t *)&v18[v36];
    v38 = &v19[v36];
    v39 = *(_QWORD *)&v19[v36];
    v40 = *(_QWORD *)&v19[v36 + 8];
    sub_237F91894(v39, v40);
    *v37 = v39;
    v37[1] = v40;
    v41 = *((_QWORD *)v38 + 2);
    v42 = *((_QWORD *)v38 + 3);
    sub_237F91894(v41, v42);
    v37[2] = v41;
    v37[3] = v42;
    *(_QWORD *)&v18[*(int *)(v35 + 24)] = *(_QWORD *)&v19[*(int *)(v35 + 24)];
    v43 = a3[8];
    v44 = a3[9];
    v45 = &a1[v43];
    v46 = (char *)a2 + v43;
    *(_OWORD *)v45 = *(_OWORD *)v46;
    v45[16] = v46[16];
    v75(&a1[v44], (char *)a2 + v44, v74);
    v47 = a3[10];
    v48 = &a1[v47];
    v49 = (char *)a2 + v47;
    v50 = *(uint64_t *)((char *)a2 + v47 + 8);
    *(_QWORD *)v48 = *(uint64_t *)((char *)a2 + v47);
    *((_QWORD *)v48 + 1) = v50;
    v51 = *(uint64_t *)((char *)a2 + v47 + 24);
    *((_QWORD *)v48 + 2) = *(uint64_t *)((char *)a2 + v47 + 16);
    *((_QWORD *)v48 + 3) = v51;
    v52 = *(uint64_t *)((char *)a2 + v47 + 40);
    *((_QWORD *)v48 + 4) = *(uint64_t *)((char *)a2 + v47 + 32);
    *((_QWORD *)v48 + 5) = v52;
    v53 = *(int *)(type metadata accessor for Credential(0) + 28);
    v54 = &v48[v53];
    v55 = &v49[v53];
    v56 = type metadata accessor for Date();
    v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57(v54, v55, v56);
    v58 = a3[11];
    v59 = (uint64_t *)&a1[v58];
    v60 = (uint64_t *)((char *)a2 + v58);
    v61 = *v60;
    v62 = v60[1];
    sub_237F91894(*v60, v62);
    *v59 = v61;
    v59[1] = v62;
    v63 = a3[12];
    v64 = (uint64_t *)&a1[v63];
    v65 = (uint64_t *)((char *)a2 + v63);
    v66 = *v65;
    v67 = v65[1];
    sub_237F91894(*v65, v67);
    *v64 = v66;
    v64[1] = v67;
    v68 = a3[13];
    v69 = &a1[v68];
    v70 = (uint64_t *)((char *)a2 + v68);
    v71 = v70[1];
    *(_QWORD *)v69 = *v70;
    *((_QWORD *)v69 + 1) = v71;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AssetDownloadRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + a2[6];
  v6 = type metadata accessor for URL();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = a1 + a2[7];
  v7(v8, v6);
  v9 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(v8 + *(int *)(v9 + 24)), *(_QWORD *)(v8 + *(int *)(v9 + 24) + 8));
  sub_237F918D8(*(_QWORD *)(v8 + *(int *)(v9 + 28)), *(_QWORD *)(v8 + *(int *)(v9 + 28) + 8));
  v10 = v8 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_237F918D8(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
  sub_237F918D8(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
  v7(a1 + a2[9], v6);
  v11 = a1 + a2[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v11 + *(int *)(type metadata accessor for Credential(0) + 28);
  v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_237F918D8(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
  sub_237F918D8(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = type metadata accessor for URL();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v72 = v14;
  v73 = v15;
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v16 = a3[7];
  v17 = a1 + v16;
  v18 = a2 + v16;
  v15(a1 + v16, a2 + v16, v14);
  v19 = (int *)type metadata accessor for Asset.ID(0);
  v20 = v19[5];
  v21 = (_QWORD *)(v17 + v20);
  v22 = (_QWORD *)(v18 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = v19[6];
  v25 = (uint64_t *)(v17 + v24);
  v26 = (uint64_t *)(v18 + v24);
  v27 = *v26;
  v28 = v26[1];
  swift_bridgeObjectRetain();
  sub_237F91894(v27, v28);
  *v25 = v27;
  v25[1] = v28;
  v29 = v19[7];
  v30 = (uint64_t *)(v17 + v29);
  v31 = (uint64_t *)(v18 + v29);
  v32 = *v31;
  v33 = v31[1];
  sub_237F91894(*v31, v33);
  *v30 = v32;
  v30[1] = v33;
  v34 = type metadata accessor for Asset(0);
  v35 = *(int *)(v34 + 20);
  v36 = (uint64_t *)(v17 + v35);
  v37 = v18 + v35;
  v38 = *(_QWORD *)(v18 + v35);
  v39 = *(_QWORD *)(v18 + v35 + 8);
  sub_237F91894(v38, v39);
  *v36 = v38;
  v36[1] = v39;
  v40 = *(_QWORD *)(v37 + 16);
  v41 = *(_QWORD *)(v37 + 24);
  sub_237F91894(v40, v41);
  v36[2] = v40;
  v36[3] = v41;
  *(_QWORD *)(v17 + *(int *)(v34 + 24)) = *(_QWORD *)(v18 + *(int *)(v34 + 24));
  v42 = a3[8];
  v43 = a3[9];
  v44 = a1 + v42;
  v45 = a2 + v42;
  *(_OWORD *)v44 = *(_OWORD *)v45;
  *(_BYTE *)(v44 + 16) = *(_BYTE *)(v45 + 16);
  v73(a1 + v43, a2 + v43, v72);
  v46 = a3[10];
  v47 = (_QWORD *)(a1 + v46);
  v48 = a2 + v46;
  v49 = *(_QWORD *)(a2 + v46 + 8);
  *v47 = *(_QWORD *)(a2 + v46);
  v47[1] = v49;
  v50 = *(_QWORD *)(a2 + v46 + 24);
  v47[2] = *(_QWORD *)(a2 + v46 + 16);
  v47[3] = v50;
  v51 = *(_QWORD *)(a2 + v46 + 40);
  v47[4] = *(_QWORD *)(a2 + v46 + 32);
  v47[5] = v51;
  v52 = *(int *)(type metadata accessor for Credential(0) + 28);
  v53 = (char *)v47 + v52;
  v54 = v48 + v52;
  v55 = type metadata accessor for Date();
  v56 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v56(v53, v54, v55);
  v57 = a3[11];
  v58 = (uint64_t *)(a1 + v57);
  v59 = (uint64_t *)(a2 + v57);
  v60 = *v59;
  v61 = v59[1];
  sub_237F91894(*v59, v61);
  *v58 = v60;
  v58[1] = v61;
  v62 = a3[12];
  v63 = (uint64_t *)(a1 + v62);
  v64 = (uint64_t *)(a2 + v62);
  v65 = *v64;
  v66 = v64[1];
  sub_237F91894(*v64, v66);
  *v63 = v65;
  v63[1] = v66;
  v67 = a3[13];
  v68 = (_QWORD *)(a1 + v67);
  v69 = (_QWORD *)(a2 + v67);
  v70 = v69[1];
  *v68 = *v69;
  v68[1] = v70;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v75 = type metadata accessor for URL();
  v76 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 24);
  v76(v11, v12, v75);
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v76(a1 + v13, a2 + v13, v75);
  v16 = (int *)type metadata accessor for Asset.ID(0);
  v17 = v16[5];
  v18 = (_QWORD *)(v14 + v17);
  v19 = (_QWORD *)(v15 + v17);
  *v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v20 = v16[6];
  v21 = (uint64_t *)(v14 + v20);
  v22 = (uint64_t *)(v15 + v20);
  v23 = *v22;
  v24 = v22[1];
  sub_237F91894(*v22, v24);
  v25 = *v21;
  v26 = v21[1];
  *v21 = v23;
  v21[1] = v24;
  sub_237F918D8(v25, v26);
  v27 = v16[7];
  v28 = (uint64_t *)(v14 + v27);
  v29 = (uint64_t *)(v15 + v27);
  v30 = *v29;
  v31 = v29[1];
  sub_237F91894(*v29, v31);
  v32 = *v28;
  v33 = v28[1];
  *v28 = v30;
  v28[1] = v31;
  sub_237F918D8(v32, v33);
  v34 = type metadata accessor for Asset(0);
  v35 = *(int *)(v34 + 20);
  v36 = (uint64_t *)(v14 + v35);
  v37 = v15 + v35;
  v38 = *(_QWORD *)(v15 + v35);
  v39 = *(_QWORD *)(v15 + v35 + 8);
  sub_237F91894(v38, v39);
  v40 = *v36;
  v41 = v36[1];
  *v36 = v38;
  v36[1] = v39;
  sub_237F918D8(v40, v41);
  v42 = *(_QWORD *)(v37 + 16);
  v43 = *(_QWORD *)(v37 + 24);
  sub_237F91894(v42, v43);
  v44 = v36[2];
  v45 = v36[3];
  v36[2] = v42;
  v36[3] = v43;
  sub_237F918D8(v44, v45);
  *(_QWORD *)(v14 + *(int *)(v34 + 24)) = *(_QWORD *)(v15 + *(int *)(v34 + 24));
  v46 = a3[8];
  v47 = a1 + v46;
  v48 = a2 + v46;
  v49 = *(_BYTE *)(v48 + 16);
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_BYTE *)(v47 + 16) = v49;
  v76(a1 + a3[9], a2 + a3[9], v75);
  v50 = a3[10];
  v51 = (_QWORD *)(a1 + v50);
  v52 = (_QWORD *)(a2 + v50);
  *v51 = *(_QWORD *)(a2 + v50);
  v51[1] = *(_QWORD *)(a2 + v50 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51[2] = v52[2];
  v51[3] = v52[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v51[4] = v52[4];
  v51[5] = v52[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v53 = *(int *)(type metadata accessor for Credential(0) + 28);
  v54 = (char *)v51 + v53;
  v55 = (char *)v52 + v53;
  v56 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24))(v54, v55, v56);
  v57 = a3[11];
  v58 = (uint64_t *)(a1 + v57);
  v59 = (uint64_t *)(a2 + v57);
  v60 = *v59;
  v61 = v59[1];
  sub_237F91894(*v59, v61);
  v62 = *v58;
  v63 = v58[1];
  *v58 = v60;
  v58[1] = v61;
  sub_237F918D8(v62, v63);
  v64 = a3[12];
  v65 = (uint64_t *)(a1 + v64);
  v66 = (uint64_t *)(a2 + v64);
  v67 = *v66;
  v68 = v66[1];
  sub_237F91894(*v66, v68);
  v69 = *v65;
  v70 = v65[1];
  *v65 = v67;
  v65[1] = v68;
  sub_237F918D8(v69, v70);
  v71 = a3[13];
  v72 = (_QWORD *)(a1 + v71);
  v73 = (_QWORD *)(a2 + v71);
  *v72 = *v73;
  v72[1] = v73[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v11(a1 + v12, a2 + v12, v10);
  v15 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(v13 + v15[5]) = *(_OWORD *)(v14 + v15[5]);
  *(_OWORD *)(v13 + v15[6]) = *(_OWORD *)(v14 + v15[6]);
  *(_OWORD *)(v13 + v15[7]) = *(_OWORD *)(v14 + v15[7]);
  v16 = type metadata accessor for Asset(0);
  v17 = *(int *)(v16 + 20);
  v18 = (_OWORD *)(v13 + v17);
  v19 = (_OWORD *)(v14 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(v13 + *(int *)(v16 + 24)) = *(_QWORD *)(v14 + *(int *)(v16 + 24));
  v21 = a3[8];
  v22 = a3[9];
  v23 = a1 + v21;
  v24 = a2 + v21;
  *(_BYTE *)(v23 + 16) = *(_BYTE *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  v11(a1 + v22, a2 + v22, v10);
  v25 = a3[10];
  v26 = (_OWORD *)(a1 + v25);
  v27 = a2 + v25;
  v28 = *(_OWORD *)(a2 + v25 + 16);
  *v26 = *(_OWORD *)(a2 + v25);
  v26[1] = v28;
  v26[2] = *(_OWORD *)(a2 + v25 + 32);
  v29 = *(int *)(type metadata accessor for Credential(0) + 28);
  v30 = (char *)v26 + v29;
  v31 = v27 + v29;
  v32 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v30, v31, v32);
  v33 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  *(_OWORD *)(a1 + a3[13]) = *(_OWORD *)(a2 + a3[13]);
  return a1;
}

uint64_t assignWithTake for AssetDownloadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for URL();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v17 = a3[7];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v16(a1 + v17, a2 + v17, v15);
  v20 = (int *)type metadata accessor for Asset.ID(0);
  v21 = v20[5];
  v22 = (_QWORD *)(v18 + v21);
  v23 = (uint64_t *)(v19 + v21);
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  v26 = v20[6];
  v27 = *(_QWORD *)(v18 + v26);
  v28 = *(_QWORD *)(v18 + v26 + 8);
  *(_OWORD *)(v18 + v26) = *(_OWORD *)(v19 + v26);
  sub_237F918D8(v27, v28);
  v29 = v20[7];
  v30 = *(_QWORD *)(v18 + v29);
  v31 = *(_QWORD *)(v18 + v29 + 8);
  *(_OWORD *)(v18 + v29) = *(_OWORD *)(v19 + v29);
  sub_237F918D8(v30, v31);
  v32 = type metadata accessor for Asset(0);
  v33 = *(int *)(v32 + 20);
  v34 = v18 + v33;
  v35 = v19 + v33;
  v36 = *(_QWORD *)(v18 + v33);
  v37 = *(_QWORD *)(v18 + v33 + 8);
  *(_OWORD *)(v18 + v33) = *(_OWORD *)(v19 + v33);
  sub_237F918D8(v36, v37);
  v38 = *(_QWORD *)(v34 + 16);
  v39 = *(_QWORD *)(v34 + 24);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)(v35 + 16);
  sub_237F918D8(v38, v39);
  *(_QWORD *)(v18 + *(int *)(v32 + 24)) = *(_QWORD *)(v19 + *(int *)(v32 + 24));
  v40 = a3[8];
  v41 = a3[9];
  v42 = a1 + v40;
  v43 = a2 + v40;
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_BYTE *)(v42 + 16) = *(_BYTE *)(v43 + 16);
  v16(a1 + v41, a2 + v41, v15);
  v44 = a3[10];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  v47 = *(_QWORD *)(a2 + v44 + 8);
  *v45 = *(_QWORD *)(a2 + v44);
  v45[1] = v47;
  swift_bridgeObjectRelease();
  v48 = v46[3];
  v45[2] = v46[2];
  v45[3] = v48;
  swift_bridgeObjectRelease();
  v49 = v46[5];
  v45[4] = v46[4];
  v45[5] = v49;
  swift_bridgeObjectRelease();
  v50 = *(int *)(type metadata accessor for Credential(0) + 28);
  v51 = (char *)v45 + v50;
  v52 = (char *)v46 + v50;
  v53 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 40))(v51, v52, v53);
  v54 = a3[11];
  v55 = *(_QWORD *)(a1 + v54);
  v56 = *(_QWORD *)(a1 + v54 + 8);
  *(_OWORD *)(a1 + v54) = *(_OWORD *)(a2 + v54);
  sub_237F918D8(v55, v56);
  v57 = a3[12];
  v58 = *(_QWORD *)(a1 + v57);
  v59 = *(_QWORD *)(a1 + v57 + 8);
  *(_OWORD *)(a1 + v57) = *(_OWORD *)(a2 + v57);
  sub_237F918D8(v58, v59);
  v60 = a3[13];
  v61 = (_QWORD *)(a1 + v60);
  v62 = (uint64_t *)(a2 + v60);
  v64 = *v62;
  v63 = v62[1];
  *v61 = v64;
  v61[1] = v63;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetDownloadRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237F9C24C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  sub_237F9C8A0();
  sub_237F9C8D0();
  if (v11)
  {
    v7 = v6;
    v8 = v4;
  }
  else
  {
    if ((_DWORD)v3 == 0x7FFFFFFF)
    {
      sub_237F961B0();
      return;
    }
    sub_237F92860();
    sub_237F9C8D0();
    if (v11)
    {
      v7 = v9;
      v10 = a3[6];
    }
    else
    {
      sub_237F928BC();
      sub_237F9C8D0();
      if (v11)
      {
        v7 = v12;
        v10 = a3[7];
      }
      else
      {
        v7 = type metadata accessor for Credential(0);
        v10 = a3[10];
      }
    }
    v8 = v4 + v10;
  }
  _s11CloudAssets21UploadResponseMessageOwet_0(v8, v3, v7);
}

uint64_t storeEnumTagSinglePayload for AssetDownloadRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237F9C30C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  sub_237F9C8A0();
  sub_237F9C8C0();
  if (v13)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v5 + a4[5] + 8) = (v4 - 1);
      return;
    }
    sub_237F92860();
    sub_237F9C8C0();
    if (v13)
    {
      v9 = v11;
      v12 = a4[6];
    }
    else
    {
      sub_237F928BC();
      sub_237F9C8C0();
      if (v13)
      {
        v9 = v14;
        v12 = a4[7];
      }
      else
      {
        v9 = type metadata accessor for Credential(0);
        v12 = a4[10];
      }
    }
    v10 = v5 + v12;
  }
  _s11CloudAssets21UploadResponseMessageOwst_0(v10, v4, v4, v9);
}

uint64_t sub_237F9C3C4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Asset(319);
      if (v3 <= 0x3F)
      {
        result = type metadata accessor for Credential(319);
        if (v4 <= 0x3F)
        {
          swift_initStructMetadata();
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetDownloadRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF7)
  {
    if (a2 + 9 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 9) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 10;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v5 = v6 - 10;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetDownloadRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_237F9C57C + 4 * byte_237FE7C2F[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_237F9C5B0 + 4 * byte_237FE7C2A[v4]))();
}

uint64_t sub_237F9C5B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F9C5B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237F9C5C0);
  return result;
}

uint64_t sub_237F9C5CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237F9C5D4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_237F9C5D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237F9C5E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetDownloadRequest.CodingKeys()
{
  return &type metadata for AssetDownloadRequest.CodingKeys;
}

unint64_t sub_237F9C600()
{
  unint64_t result;

  result = qword_2568B7808;
  if (!qword_2568B7808)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7EB4, &type metadata for AssetDownloadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7808);
  }
  return result;
}

unint64_t sub_237F9C640()
{
  unint64_t result;

  result = qword_2568B7810;
  if (!qword_2568B7810)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7E24, &type metadata for AssetDownloadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7810);
  }
  return result;
}

unint64_t sub_237F9C680()
{
  unint64_t result;

  result = qword_2568B7818;
  if (!qword_2568B7818)
  {
    result = MEMORY[0x23B829E84](&unk_237FE7E4C, &type metadata for AssetDownloadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7818);
  }
  return result;
}

void sub_237F9C6BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(v0 + *(int *)(v1 + 52));
  *v2 = 0;
  v2[1] = 0;
  v3 = v0 + *(int *)(v1 + 32);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_BYTE *)(v3 + 16) = 1;
}

void sub_237F9C6E0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)(v1 + *(int *)(a1 + 20));
  *v2 = 0x616C506572616853;
  v2[1] = 0xE900000000000079;
  sub_237F99724(0x616C506572616853, 0xE900000000000079, v1 + *(int *)(a1 + 24));
}

uint64_t sub_237F9C72C()
{
  return type metadata accessor for AssetDownloadRequest();
}

uint64_t sub_237F9C734()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_237F9C740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 16))(v2, v1, a1);
}

uint64_t sub_237F9C778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v1, v2, v0);
}

uint64_t sub_237F9C788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_237F9C798()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_237F9C7A8@<X0>(uint64_t (*a1)(uint64_t, _QWORD)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, *(_QWORD *)(v2 - 184));
}

uint64_t sub_237F9C7B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v2, v1, a1);
}

uint64_t sub_237F9C7CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v1, v0);
}

void sub_237F9C7D8(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  *(__n128 *)(v2 + a1) = a2;
  sub_237F91AC0(v3, v4);
}

uint64_t sub_237F9C7EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_237F91894(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_237F9C800()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237F9C808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_237F91894(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_237F9C81C()
{
  return UUID.init()();
}

uint64_t sub_237F9C824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(v2, v1, v0);
}

unint64_t sub_237F9C850()
{
  _QWORD *v0;

  sub_237F9195C(v0, v0[3]);
  return sub_237F9B35C();
}

void sub_237F9C870(Swift::UInt8 a1)
{
  Hasher._combine(_:)(a1);
}

uint64_t sub_237F9C890()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237F9C8A0()
{
  return type metadata accessor for UUID();
}

uint64_t sub_237F9C8B0()
{
  return Data.hash(into:)();
}

uint64_t sub_237F9C8E0(uint64_t a1)
{
  uint64_t v1;

  return v1 + *(int *)(a1 + 28);
}

void sub_237F9C8F8(char a1@<W8>)
{
  uint64_t v1;

  *(_BYTE *)(v1 - 112) = a1;
}

void sub_237F9C910(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F91AC0(a1, v1);
}

uint64_t sub_237F9C918()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237F9C92C()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v1 - 192), *(_QWORD *)(v1 - 184));
}

uint64_t sub_237F9C944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(a1, v2);
}

void sub_237F9C95C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_237F9B398(a1, a2, v2);
}

void sub_237F9C970()
{
  JUMPOUT(0x23B829194);
}

void sub_237F9C97C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_237F9B398(a1, a2, v2);
}

uint64_t sub_237F9C99C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_237F9C9A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_237F918D8(*(_QWORD *)(v1 + a1), *(_QWORD *)(v1 + a1 + 8));
}

uint64_t sub_237F9C9B4@<X0>(uint64_t a1@<X8>)
{
  return sub_237F9834C(&OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__results, &qword_2568B7740, a1);
}

uint64_t sub_237F9C9C8@<X0>(uint64_t a1@<X8>)
{
  return sub_237F9834C(&OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__signals, &qword_2568B7730, a1);
}

uint64_t sub_237F9C9DC(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[3] = v1;
  v4 = sub_237F9191C(&qword_2568B7838);
  v2[4] = v4;
  v2[5] = *(_QWORD *)(v4 - 8);
  v5 = swift_task_alloc();
  v6 = *a1;
  v2[6] = v5;
  v2[7] = v6;
  return swift_task_switch();
}

uint64_t sub_237F9CA48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRetain();
  sub_237F9191C(&qword_2568B7848);
  AsyncThrowingStream.Continuation.yield(_:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237F9CADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v22 = sub_237F9191C(&qword_2568B7870);
  v3 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_237F9191C(&qword_2568B7730);
  v21 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_237F9191C(&qword_2568B7878);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v20 - v12;
  swift_defaultActor_initialize();
  v14 = v1 + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__results;
  v15 = sub_237F9191C(&qword_2568B7740);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v20 = a1;
  v17(v14, a1, v15);
  v18 = sub_237F9191C(&qword_2568B7848);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 1, 1, v18);
  v24 = v13;
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE6CA0], v22);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v1 + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__signals, v7, v23);
  sub_237F9D088((uint64_t)v13, (uint64_t)v11);
  result = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v11, 1, v18);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v20, v15);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v1 + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator_continutation, v11, v18);
    sub_237F9D0D0((uint64_t)v13);
    return v1;
  }
  return result;
}

uint64_t sub_237F9CD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_237F9D0D0(a2);
  v4 = sub_237F9191C(&qword_2568B7848);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return _s11CloudAssets21UploadResponseMessageOwst_0(a2, 0, 1, v4);
}

uint64_t AssetsDownloadCoordinator.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_237F9191C(&qword_2568B7740);
  sub_237F96160(v1);
  v2 = sub_237F9191C(&qword_2568B7730);
  sub_237F96160(v2);
  v3 = sub_237F9191C(&qword_2568B7848);
  sub_237F96160(v3);
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetsDownloadCoordinator.__deallocating_deinit()
{
  AssetsDownloadCoordinator.deinit();
  return swift_defaultActor_deallocate();
}

uint64_t AssetsDownloadCoordinator.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237F9CE20()
{
  return AssetsDownloadCoordinator.unownedExecutor.getter();
}

uint64_t sub_237F9CE38()
{
  return type metadata accessor for AssetsDownloadCoordinator();
}

uint64_t type metadata accessor for AssetsDownloadCoordinator()
{
  uint64_t result;

  result = qword_2568B7850;
  if (!qword_2568B7850)
    return swift_getSingletonMetadata();
  return result;
}

void sub_237F9CE78()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_237F98640();
  if (v0 <= 0x3F)
  {
    sub_237F9D014(319, (unint64_t *)&qword_2568B7758, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, _QWORD))MEMORY[0x24BEE6D28]);
    if (v1 <= 0x3F)
    {
      sub_237F9D014(319, &qword_2568B7868, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, _QWORD))MEMORY[0x24BEE6CD0]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for AssetsDownloadCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.results.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.signals.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AssetsDownloadCoordinator.receive(signal:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 128) + *(_QWORD *)(*(_QWORD *)v1 + 128));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_237F9CFCC;
  return v6(a1);
}

uint64_t sub_237F9CFCC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_237F9D014(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, _QWORD))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_237F919BC(&qword_2568B8A60);
    v7 = a3(a1, &type metadata for Signal, v6, MEMORY[0x24BEE3F20]);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_237F9D080(uint64_t a1)
{
  uint64_t v1;

  return sub_237F9CD1C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_237F9D088(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_237F9D0D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_237F9191C(&qword_2568B7878);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t static XPCServiceNames.userService.getter()
{
  return 0xD00000000000001BLL;
}

unint64_t static XPCServiceNames.systemService.getter()
{
  return sub_237F9D154();
}

unint64_t static XPCServiceNames.testService.getter()
{
  return sub_237F9D154();
}

ValueMetadata *type metadata accessor for XPCServiceNames()
{
  return &type metadata for XPCServiceNames;
}

unint64_t sub_237F9D154()
{
  return 0xD000000000000022;
}

void DownloadRequestMessage.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)v1;
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + 8));
  sub_237FA27D0(a1, v3);
}

uint64_t static DownloadRequestMessage.== infix(_:_:)(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 8);
  v4 = *a2;
  v5 = *((unsigned __int8 *)a2 + 8);
  if ((v3 & 1) == 0)
  {
    if ((v5 & 1) == 0)
    {
      j__swift_bridgeObjectRetain(*a2, 0);
      j__swift_bridgeObjectRetain(v2, 0);
      v6 = sub_237FA3C50();
      v3 = 0;
      v5 = 0;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  if ((v5 & 1) == 0)
  {
LABEL_5:
    j__swift_bridgeObjectRetain(*a2, *((unsigned __int8 *)a2 + 8));
    j__swift_bridgeObjectRetain(v2, v3);
    v6 = 0;
    goto LABEL_7;
  }
  v3 = 1;
  j__swift_bridgeObjectRetain(*a2, 1);
  j__swift_bridgeObjectRetain(v2, 1);
  v6 = sub_237FA3C50();
  v5 = 1;
LABEL_7:
  j__swift_bridgeObjectRelease(v2, v3);
  j__swift_bridgeObjectRelease(v4, v5);
  return v6 & 1;
}

uint64_t sub_237F9D278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  char *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 40);
    v4 = (char *)(a2 + 40);
    do
    {
      v5 = *v4;
      if ((*v3 & 1) != 0)
      {
        if (!*v4)
          return 0;
      }
      else
      {
        if (*((_QWORD *)v3 - 1) != *((_QWORD *)v4 - 1))
          v5 = 1;
        if ((v5 & 1) != 0)
          return 0;
      }
      v3 += 16;
      v4 += 16;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_237F9D2E4(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t result;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  result = a1[4];
  if (result != a2[4] || a1[5] != a2[5])
  {
    v7 = sub_237F96484();
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  if (v2 == 1)
    return 1;
  v8 = a2 + 7;
  v9 = a1 + 7;
  v10 = 1;
  while (v10 < v2)
  {
    result = *(v9 - 1);
    if (result != *(v8 - 1) || *v9 != *v8)
    {
      result = sub_237F96484();
      if ((result & 1) == 0)
        return 0;
    }
    ++v10;
    v8 += 2;
    v9 += 2;
    if (v2 == v10)
      return 1;
  }
  __break(1u);
  return result;
}

uint64_t sub_237F9D3A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  BOOL v24;
  _QWORD v26[18];
  char *v27;
  int *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v28 = (int *)type metadata accessor for AssetDownloadRequest();
  v4 = MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v26 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 == *(_QWORD *)(a2 + 16))
  {
    if (!v10 || a1 == a2)
      return 1;
    v26[17] = 0;
    v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v26[8] = *(_QWORD *)(v7 + 72);
    v26[9] = a1;
    v26[16] = v6;
    v26[10] = a2;
    v26[12] = v10;
    sub_237F91A80(a1 + v11, (uint64_t)v26 - v8, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    v26[11] = v11;
    sub_237F91A80(a2 + v11, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    if ((static UUID.== infix(_:_:)() & 1) != 0)
    {
      v12 = v28[5];
      v13 = *(_QWORD *)&v9[v12];
      v14 = *(_QWORD *)&v9[v12 + 8];
      v15 = &v6[v12];
      v16 = v13 == *(_QWORD *)v15 && v14 == *((_QWORD *)v15 + 1);
      if ((v16 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        && (MEMORY[0x23B829194](&v9[v28[6]], &v6[v28[6]]) & 1) != 0)
      {
        v17 = v28[7];
        v18 = &v9[v17];
        v27 = &v6[v17];
        if ((MEMORY[0x23B829194](&v9[v17]) & 1) != 0)
        {
          v19 = type metadata accessor for Asset.ID(0);
          v20 = *(int *)(v19 + 20);
          v21 = *(_QWORD *)&v18[v20];
          v22 = *(_QWORD *)&v18[v20 + 8];
          v23 = &v27[v20];
          v24 = v21 == *(_QWORD *)v23 && v22 == *((_QWORD *)v23 + 1);
          if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            __asm { BR              X11 }
        }
      }
    }
    sub_237F91AC0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    sub_237F91AC0((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
  }
  return 0;
}

void sub_237F9F0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v20[20];

  sub_237FA3964();
  v1 = v0;
  v3 = v2;
  v20[18] = *MEMORY[0x24BDAC8D0];
  v20[11] = type metadata accessor for AssetSkeleton();
  sub_237FA39E8();
  MEMORY[0x24BDAC7A8](v4);
  sub_237FA39D8();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v20 - v10;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12 == *(_QWORD *)(v1 + 16) && v12 && v3 != v1)
  {
    v20[12] = 0;
    v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v20[2] = *(_QWORD *)(v9 + 72);
    v20[3] = v3;
    v20[4] = v1;
    v20[5] = v7;
    v20[9] = (char *)v20 - v10;
    v20[7] = v12;
    sub_237FA3B54(v3 + v13, (uint64_t)v20 - v10);
    v20[6] = v13;
    sub_237FA3B54(v1 + v13, v7);
    if ((MEMORY[0x23B829194](v11, v7) & 1) != 0)
    {
      v14 = type metadata accessor for Asset.ID(0);
      v15 = *(int *)(v14 + 20);
      v16 = *(_QWORD *)&v11[v15];
      v17 = *(_QWORD *)&v11[v15 + 8];
      v18 = (_QWORD *)(v7 + v15);
      v19 = v16 == *v18 && v17 == v18[1];
      if (v19 || (sub_237F96484() & 1) != 0)
        __asm { BR              X8 }
    }
    sub_237FA3B4C(v7);
    sub_237FA3B4C((uint64_t)v11);
  }
  sub_237FA3848();
}

void sub_237FA082C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD v20[14];
  uint64_t v21;
  uint64_t v22;

  sub_237FA3964();
  v1 = v0;
  v3 = v2;
  v22 = *MEMORY[0x24BDAC8D0];
  v21 = type metadata accessor for AssetUploadRequest();
  sub_237FA39E8();
  MEMORY[0x24BDAC7A8](v4);
  sub_237FA39D8();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v20 - v10;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12 == *(_QWORD *)(v1 + 16) && v12 && v3 != v1)
  {
    v20[5] = 0;
    v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = *(_QWORD *)(v9 + 72);
    v20[2] = v1;
    v20[3] = v14;
    v20[4] = v3;
    v20[7] = v12;
    sub_237F91A80(v3 + v13, (uint64_t)v20 - v10, (uint64_t (*)(_QWORD))type metadata accessor for AssetUploadRequest);
    sub_237F91A80(v1 + v13, v7, (uint64_t (*)(_QWORD))type metadata accessor for AssetUploadRequest);
    if ((static UUID.== infix(_:_:)() & 1) != 0)
    {
      v15 = *(int *)(v21 + 20);
      v16 = *(_QWORD *)&v11[v15];
      v17 = *(_QWORD *)&v11[v15 + 8];
      v18 = (_QWORD *)(v7 + v15);
      v19 = v16 == *v18 && v17 == v18[1];
      if (v19 || (sub_237F96484() & 1) != 0)
        sub_237FA3A9C();
    }
    sub_237FA3B1C(v7);
    sub_237FA3B1C((uint64_t)v11);
  }
  sub_237FA3848();
}

void sub_237FA1450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  BOOL v41;

  sub_237FA3964();
  a19 = v20;
  a20 = v21;
  v23 = v22;
  v25 = v24;
  type metadata accessor for CloudAssets_Asset(0);
  sub_237FA39E8();
  MEMORY[0x24BDAC7A8](v26);
  sub_237FA39D8();
  v29 = v27 - v28;
  MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&a9 - v32;
  v34 = *(_QWORD *)(v25 + 16);
  if (v34 == *(_QWORD *)(v23 + 16) && v34 && v25 != v23)
  {
    v35 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    v36 = *(_QWORD *)(v31 + 72);
    v37 = v34 - 1;
    do
    {
      sub_237FA3B54(v25 + v35, (uint64_t)v33);
      sub_237FA3B54(v23 + v35, v29);
      sub_237FCAFA8();
      v39 = v38;
      sub_237FA3B04(v29);
      sub_237FA3B04((uint64_t)v33);
      v41 = v37-- != 0;
      if ((v39 & 1) == 0)
        break;
      v35 += v36;
    }
    while (v41);
  }
  sub_237FA3848();
}

void sub_237FA1550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char *v18;

  sub_237FA3964();
  v1 = v0;
  v3 = v2;
  type metadata accessor for CloudAssets_Signal.Event(0);
  sub_237FA39E8();
  MEMORY[0x24BDAC7A8](v4);
  sub_237FA39D8();
  v7 = v5 - v6;
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - v10;
  v12 = *(_QWORD *)(v3 + 16);
  if (v12 == *(_QWORD *)(v1 + 16) && v12 && v3 != v1)
  {
    v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v17 = *(_QWORD *)(v9 + 72);
    v18 = (char *)&v17 - v10;
    while (1)
    {
      sub_237FA3BD0(v3 + v13, (uint64_t)v11);
      sub_237FA3BD0(v1 + v13, v7);
      v14 = *(_QWORD *)v11;
      v15 = *(_QWORD *)v7;
      if (v11[8])
        v14 = *(_QWORD *)v11 != 0;
      if (*(_BYTE *)(v7 + 8) == 1)
      {
        if (v15)
        {
          if (v14 != 1)
            break;
        }
        else if (v14)
        {
          break;
        }
      }
      else if (v14 != v15)
      {
        break;
      }
      if (*((_QWORD *)v11 + 2) != *(_QWORD *)(v7 + 16))
        break;
      type metadata accessor for UnknownStorage();
      sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      v11 = v18;
      if ((v16 & 1) == 0)
        break;
      sub_237FA3BC8(v7);
      sub_237FA3BC8((uint64_t)v11);
      v13 += v17;
      if (!--v12)
        goto LABEL_19;
    }
    sub_237FA3B4C(v7);
    sub_237FA3B4C((uint64_t)v11);
  }
LABEL_19:
  sub_237FA3848();
}

uint64_t sub_237FA1728()
{
  return 0x7374736575716572;
}

uint64_t sub_237FA1740(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x7165526863746162 && a2 == 0xED00007374736575;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65526D6165727473 && a2 == 0xEE00737473657571)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_237FA1874(char a1)
{
  if ((a1 & 1) != 0)
    return 0x65526D6165727473;
  else
    return 0x7165526863746162;
}

uint64_t sub_237FA18C4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7374736575716572 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_237F96484();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

void sub_237FA1944()
{
  sub_237F961E4();
  sub_237FA3B94();
  sub_237F96328();
  sub_237F9631C();
}

void sub_237FA1970()
{
  sub_237FA1944();
}

uint64_t sub_237FA198C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA18C4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_237FA19B4()
{
  return sub_237F91050();
}

uint64_t sub_237FA19CC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237F92CAC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_237FA19F4()
{
  sub_237FA2CF8();
  return CodingKey.description.getter();
}

uint64_t sub_237FA1A1C()
{
  sub_237FA2CF8();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FA1A44()
{
  char *v0;

  return sub_237FA1874(*v0);
}

uint64_t sub_237FA1A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA1740(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FA1A70()
{
  sub_237FA2C80();
  return CodingKey.description.getter();
}

uint64_t sub_237FA1A98()
{
  sub_237FA2C80();
  return CodingKey.debugDescription.getter();
}

void sub_237FA1AC0()
{
  Hasher.init(_seed:)();
  sub_237FA3B94();
  sub_237F96328();
  sub_237F9631C();
}

uint64_t sub_237FA1AEC()
{
  sub_237FA2CBC();
  return CodingKey.description.getter();
}

uint64_t sub_237FA1B14()
{
  sub_237FA2CBC();
  return CodingKey.debugDescription.getter();
}

void DownloadRequestMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = sub_237F9191C(&qword_2568B7880);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F982D4();
  v7 = v6 - v5;
  v8 = sub_237F9191C(&qword_2568B7888);
  v18 = *(_QWORD *)(v8 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F982D4();
  v12 = v11 - v10;
  v21 = *(_QWORD *)(sub_237F9191C(&qword_2568B7890) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v13);
  sub_237F982D4();
  v16 = v15 - v14;
  v17 = *(unsigned __int8 *)(v1 + 8);
  sub_237F9195C(a1, a1[3]);
  sub_237FA2C80();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v17 & 1) != 0)
  {
    sub_237FA3C18();
    sub_237FA3A58();
    sub_237F9191C(&qword_2568B78A8);
    sub_237FA3110(&qword_2568B78B0, &qword_2568B77D8, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v7, v20);
  }
  else
  {
    sub_237FA2CF8();
    sub_237FA3A58();
    sub_237F9191C(&qword_2568B78A8);
    sub_237FA3110(&qword_2568B78B0, &qword_2568B77D8, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v12, v8);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v16, v17);
  sub_237F960D8();
}

Swift::Int DownloadRequestMessage.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  sub_237F961E4();
  Hasher._combine(_:)(v2);
  sub_237FA27D0((uint64_t)v4, v1);
  return sub_237F96328();
}

void DownloadRequestMessage.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = *(_QWORD *)(sub_237F9191C(&qword_2568B78C0) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v23 = sub_237F9191C(&qword_2568B78C8);
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  sub_237F982D4();
  v5 = sub_237F9191C(&qword_2568B78D0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_237F982D4();
  v9 = v8 - v7;
  sub_237F9195C(a1, a1[3]);
  sub_237FA2C80();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
    goto LABEL_10;
  v26 = v6;
  v10 = KeyedDecodingContainer.allKeys.getter();
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v5;
  if (!v11)
  {
LABEL_8:
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    sub_237F9191C(&qword_2568B78D8);
    *v20 = &type metadata for DownloadRequestMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v9, v12);
LABEL_10:
    v21 = (uint64_t)a1;
    goto LABEL_11;
  }
  v13 = *(_BYTE *)(v10 + 32);
  sub_237FA3730(1, v11, v10, v10 + 32, 0, (2 * v11) | 1);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v15 != v17 >> 1)
  {
    v12 = v5;
    goto LABEL_8;
  }
  if ((v13 & 1) != 0)
  {
    sub_237FA3C18();
    sub_237FA3C3C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_237F9191C(&qword_2568B78A8);
    sub_237FA3110(&qword_2568B78E0, &qword_2568B77D0, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest, MEMORY[0x24BEE12D0]);
    sub_237FA3AA8();
    sub_237FA38C4(v24);
  }
  else
  {
    LOBYTE(v27) = 0;
    sub_237FA2CF8();
    sub_237FA3C3C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_237F9191C(&qword_2568B78A8);
    sub_237FA3110(&qword_2568B78E0, &qword_2568B77D0, (uint64_t)&protocol conformance descriptor for AssetDownloadRequest, MEMORY[0x24BEE12D0]);
    sub_237FA3AA8();
    sub_237FA38C4(v4);
  }
  sub_237FA3AFC();
  sub_237FA3A4C(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  v21 = (uint64_t)a1;
  *(_QWORD *)a2 = v27;
  *(_BYTE *)(a2 + 8) = v13;
LABEL_11:
  sub_237F91A00(v21);
  sub_237F960D8();
}

Swift::Int sub_237FA21E0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  _BYTE v4[72];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v2);
  sub_237FA27D0((uint64_t)v4, v1);
  return Hasher._finalize()();
}

void sub_237FA2238(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DownloadRequestMessage.init(from:)(a1, a2);
}

void sub_237FA224C(_QWORD *a1)
{
  DownloadRequestMessage.encode(to:)(a1);
}

BOOL sub_237FA2264(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 != 0;
  if ((a2 & 1) == 0)
    v4 = a1;
  v5 = a3 != 0;
  if ((a4 & 1) == 0)
    v5 = a3;
  return v4 == v5;
}

void sub_237FA2290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_237FA22F0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  BOOL *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  __int16 v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v40 = v37;
  v41 = v38;
  v42 = BYTE2(v38);
  v43 = BYTE3(v38);
  v44 = BYTE4(v38);
  v45 = BYTE5(v38);
  if (!v36)
  {
    __break(1u);
    JUMPOUT(0x237FA2474);
  }
  result = memcmp(v36, &v40, BYTE6(v38));
  *v35 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_237FA24AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_237FA2290(v11, v17, a4, a5);
  sub_237F918D8(a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_237FA2574(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_237FA2610(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  char v7;
  char v9;
  uint64_t v10;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v10 = a1;
  v11 = a2;
  v12 = BYTE2(a2);
  v13 = BYTE3(a2);
  v14 = BYTE4(a2);
  v15 = BYTE5(a2);
  sub_237FA2290((uint64_t)&v10, (uint64_t)&v10 + BYTE6(a2), a3, a4);
  sub_237F918D8(a3, a4);
  if (!v4)
    v7 = v9;
  return v7 & 1;
}

void sub_237FA2710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  Swift::UInt64 v5;

  sub_237FA3AD0(a1, a2);
  if (v2)
  {
    v4 = (_BYTE *)(v3 + 40);
    do
    {
      if ((*v4 & 1) != 0)
      {
        Hasher._combine(_:)(1uLL);
      }
      else
      {
        v5 = *((_QWORD *)v4 - 1);
        sub_237FA3B94();
        Hasher._combine(_:)(v5);
      }
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

void sub_237FA276C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_237FA3AD0(a1, a2);
  if (v2)
  {
    v4 = v3 + 40;
    do
    {
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v4 += 16;
      --v2;
    }
    while (v2);
  }
}

void sub_237FA27D0(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::UInt v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  Swift::UInt v25;
  Swift::UInt v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  Swift::UInt v38;

  v3 = (int *)type metadata accessor for AssetDownloadRequest();
  v4 = *((_QWORD *)v3 - 1);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    v8 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v35 = *(_QWORD *)(v4 + 72);
    v36 = v3;
    do
    {
      v37 = v8;
      v38 = v7;
      sub_237F91A80(v8, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
      type metadata accessor for UUID();
      sub_237F91B50(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for URL();
      sub_237F91B50(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      dispatch thunk of Hashable.hash(into:)();
      v9 = &v6[v3[7]];
      dispatch thunk of Hashable.hash(into:)();
      v10 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      v11 = (uint64_t *)&v9[*(int *)(v10 + 24)];
      v12 = *v11;
      v13 = v11[1];
      sub_237F91894(*v11, v13);
      Data.hash(into:)();
      sub_237F918D8(v12, v13);
      v14 = (uint64_t *)&v9[*(int *)(v10 + 28)];
      v15 = *v14;
      v16 = v14[1];
      sub_237F91894(*v14, v16);
      Data.hash(into:)();
      sub_237F918D8(v15, v16);
      v17 = type metadata accessor for Asset(0);
      v18 = (uint64_t *)&v9[*(int *)(v17 + 20)];
      v19 = *v18;
      v20 = v18[1];
      v22 = v18[2];
      v21 = v18[3];
      sub_237F91894(*v18, v20);
      Data.hash(into:)();
      v23 = v19;
      v3 = v36;
      sub_237F918D8(v23, v20);
      sub_237F91894(v22, v21);
      Data.hash(into:)();
      sub_237F918D8(v22, v21);
      Hasher._combine(_:)(*(_QWORD *)&v9[*(int *)(v17 + 24)]);
      v24 = &v6[v3[8]];
      if (v24[16] == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v26 = *(_QWORD *)v24;
        v25 = *((_QWORD *)v24 + 1);
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v26);
        Hasher._combine(_:)(v25);
      }
      dispatch thunk of Hashable.hash(into:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      type metadata accessor for Credential(0);
      type metadata accessor for Date();
      sub_237F91B50((unint64_t *)&unk_2568B7940, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      dispatch thunk of Hashable.hash(into:)();
      v27 = (uint64_t *)&v6[v3[11]];
      v28 = *v27;
      v29 = v27[1];
      sub_237F91894(*v27, v29);
      Data.hash(into:)();
      sub_237F918D8(v28, v29);
      v30 = (uint64_t *)&v6[v3[12]];
      v31 = *v30;
      v32 = v30[1];
      sub_237F91894(*v30, v32);
      Data.hash(into:)();
      sub_237F918D8(v31, v32);
      if (*(_QWORD *)&v6[v3[13] + 8])
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      v33 = v37;
      v34 = v38;
      sub_237F91AC0((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
      v8 = v33 + v35;
      v7 = v34 - 1;
    }
    while (v7);
  }
}

unint64_t sub_237FA2C80()
{
  unint64_t result;

  result = qword_2568B7898;
  if (!qword_2568B7898)
  {
    result = MEMORY[0x23B829E84](&unk_237FE83C4, &type metadata for DownloadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7898);
  }
  return result;
}

unint64_t sub_237FA2CBC()
{
  unint64_t result;

  result = qword_2568B78A0;
  if (!qword_2568B78A0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8374, &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B78A0);
  }
  return result;
}

unint64_t sub_237FA2CF8()
{
  unint64_t result;

  result = qword_2568B78B8;
  if (!qword_2568B78B8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8324, &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B78B8);
  }
  return result;
}

void sub_237FA2D34()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_237FA3964();
  v5 = v4;
  type metadata accessor for AssetSkeleton();
  sub_237FA3C84();
  MEMORY[0x24BDAC7A8](v6);
  sub_237FA3914();
  if (v3)
  {
    sub_237FA3A28();
    do
    {
      sub_237F91A80(v5, v2, (uint64_t (*)(_QWORD))type metadata accessor for AssetSkeleton);
      type metadata accessor for URL();
      sub_237F91B50(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_237FA3ABC();
      type metadata accessor for Asset.ID(0);
      sub_237FA3BB4();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      sub_237FA3BA8();
      sub_237FA3B7C();
      sub_237FA3B9C();
      v7 = *(_QWORD *)(v2 + *(int *)(v0 + 28));
      sub_237FA3C68();
      sub_237FA3B5C();
      sub_237FA3C5C();
      type metadata accessor for Asset(0);
      sub_237FA3BB4();
      v9 = *(_QWORD *)(v8 + 16);
      sub_237FA3BA8();
      sub_237FA3B7C();
      sub_237FA3B9C();
      sub_237FA397C(v9);
      Data.hash(into:)();
      sub_237FA3938(v9);
      Hasher._combine(_:)(*(_QWORD *)(v2 + *(int *)(v7 + 24)));
      v10 = *(_QWORD *)(v2 + v1[5]);
      sub_237FA397C(v10);
      sub_237FA3B6C();
      sub_237FA3938(v10);
      v11 = *(_QWORD *)(v2 + v1[6]);
      sub_237FA397C(v11);
      sub_237FA3B6C();
      sub_237FA3938(v11);
      v12 = v2 + v1[7];
      sub_237FA3C7C();
      sub_237FA39B8();
      sub_237FA3C74();
      sub_237FA3C7C();
      sub_237FA39B8();
      sub_237FA3C74();
      sub_237FA3C7C();
      sub_237FA39B8();
      sub_237FA3C74();
      v0 = v12 + *(int *)(sub_237FA3AE4() + 28);
      type metadata accessor for Date();
      sub_237F91B50((unint64_t *)&unk_2568B7940, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      dispatch thunk of Hashable.hash(into:)();
      sub_237F91AC0(v2, (uint64_t (*)(_QWORD))type metadata accessor for AssetSkeleton);
      v5 += v13;
      --v3;
    }
    while (v3);
  }
  sub_237FA3848();
}

void sub_237FA2F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_237FA3964();
  v4 = v3;
  type metadata accessor for AssetUploadRequest();
  sub_237FA3C84();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FA3914();
  if (v2)
  {
    sub_237FA3A28();
    do
    {
      sub_237FA3BD0(v4, v1);
      type metadata accessor for UUID();
      sub_237F91B50(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
      sub_237FA3ABC();
      sub_237FA3AF4();
      sub_237FA3904();
      sub_237FA3AEC();
      type metadata accessor for URL();
      sub_237F91B50(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
      sub_237FA39C8();
      sub_237FA39C8();
      sub_237FA39C8();
      v6 = *(_QWORD *)(v1 + *(int *)(v0 + 36) + 16);
      sub_237FA3C68();
      sub_237FA3B5C();
      sub_237FA3C5C();
      sub_237FA3818(v6);
      Data.hash(into:)();
      sub_237FA37F8(v6);
      sub_237FA3AF4();
      sub_237FA3904();
      sub_237FA3AEC();
      sub_237FA3AF4();
      sub_237FA3904();
      sub_237FA3AEC();
      sub_237FA3AF4();
      sub_237FA3904();
      sub_237FA3AEC();
      sub_237FA3AE4();
      type metadata accessor for Date();
      sub_237F91B50((unint64_t *)&unk_2568B7940, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
      dispatch thunk of Hashable.hash(into:)();
      sub_237FA3BC8(v1);
      v4 += v7;
      --v2;
    }
    while (v2);
  }
  sub_237FA3848();
}

uint64_t sub_237FA3110(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    v9 = sub_237F919BC(&qword_2568B78A8);
    sub_237F91B50(a2, (uint64_t (*)(uint64_t))type metadata accessor for AssetDownloadRequest, a3);
    v11 = v10;
    result = MEMORY[0x23B829E84](a4, v9, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_237FA3198()
{
  unint64_t result;

  result = qword_2568B78E8;
  if (!qword_2568B78E8)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for DownloadRequestMessage, &type metadata for DownloadRequestMessage);
    atomic_store(result, (unint64_t *)&qword_2568B78E8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DownloadRequestMessage(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for DownloadRequestMessage(uint64_t a1)
{
  return j__swift_bridgeObjectRelease(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t *assignWithCopy for DownloadRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  j__swift_bridgeObjectRetain(*a2, v4);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for Signal.Event(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for DownloadRequestMessage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  *a1 = v3;
  *((_BYTE *)a1 + 8) = v4;
  j__swift_bridgeObjectRelease(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DownloadRequestMessage(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    {
      v2 = *(_DWORD *)a1 + 254;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 8);
      if (v3 <= 1)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DownloadRequestMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_237FA334C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_237FA3354(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage()
{
  return &type metadata for DownloadRequestMessage;
}

uint64_t storeEnumTagSinglePayload for DownloadRequestMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237FA33BC + 4 * byte_237FE7FC5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237FA33F0 + 4 * asc_237FE7FC0[v4]))();
}

uint64_t sub_237FA33F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA33F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FA3400);
  return result;
}

uint64_t sub_237FA340C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FA3414);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237FA3418(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA3420(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.CodingKeys()
{
  return &type metadata for DownloadRequestMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.BatchRequestsCodingKeys()
{
  return &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys;
}

uint64_t _s11CloudAssets22DownloadRequestMessageO23BatchRequestsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FA3490 + 4 * byte_237FE7FCA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FA34B0 + 4 * byte_237FE7FCF[v4]))();
}

_BYTE *sub_237FA3490(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FA34B0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA34B8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA34C0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA34C8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA34D0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DownloadRequestMessage.StreamRequestsCodingKeys()
{
  return &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys;
}

unint64_t sub_237FA34F0()
{
  unint64_t result;

  result = qword_2568B78F0;
  if (!qword_2568B78F0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE818C, &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B78F0);
  }
  return result;
}

unint64_t sub_237FA3530()
{
  unint64_t result;

  result = qword_2568B78F8;
  if (!qword_2568B78F8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8244, &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B78F8);
  }
  return result;
}

unint64_t sub_237FA3570()
{
  unint64_t result;

  result = qword_2568B7900;
  if (!qword_2568B7900)
  {
    result = MEMORY[0x23B829E84](&unk_237FE82FC, &type metadata for DownloadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7900);
  }
  return result;
}

unint64_t sub_237FA35B0()
{
  unint64_t result;

  result = qword_2568B7908;
  if (!qword_2568B7908)
  {
    result = MEMORY[0x23B829E84](&unk_237FE81B4, &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7908);
  }
  return result;
}

unint64_t sub_237FA35F0()
{
  unint64_t result;

  result = qword_2568B7910;
  if (!qword_2568B7910)
  {
    result = MEMORY[0x23B829E84](&unk_237FE81DC, &type metadata for DownloadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7910);
  }
  return result;
}

unint64_t sub_237FA3630()
{
  unint64_t result;

  result = qword_2568B7918;
  if (!qword_2568B7918)
  {
    result = MEMORY[0x23B829E84](&unk_237FE80FC, &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7918);
  }
  return result;
}

unint64_t sub_237FA3670()
{
  unint64_t result;

  result = qword_2568B7920;
  if (!qword_2568B7920)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8124, &type metadata for DownloadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7920);
  }
  return result;
}

unint64_t sub_237FA36B0()
{
  unint64_t result;

  result = qword_2568B7928;
  if (!qword_2568B7928)
  {
    result = MEMORY[0x23B829E84](&unk_237FE826C, &type metadata for DownloadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7928);
  }
  return result;
}

unint64_t sub_237FA36F0()
{
  unint64_t result;

  result = qword_2568B7930;
  if (!qword_2568B7930)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8294, &type metadata for DownloadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7930);
  }
  return result;
}

uint64_t sub_237FA3730(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2)
    goto LABEL_10;
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0)
    return swift_unknownObjectRetain();
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_237FA37B8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v1, v0);
}

uint64_t sub_237FA37C4()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F91894(v1, v0);
}

uint64_t sub_237FA37D0(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

uint64_t sub_237FA37D8()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v1, v0);
}

uint64_t sub_237FA37E4(uint64_t a1)
{
  unint64_t v1;

  return sub_237F918D8(a1, v1);
}

uint64_t sub_237FA37EC()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237FA37F8(uint64_t a1)
{
  unint64_t v1;

  return sub_237F918D8(a1, v1);
}

uint64_t sub_237FA3800()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F91894(v1, v0);
}

uint64_t sub_237FA380C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

uint64_t sub_237FA3818(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

void sub_237FA3820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  sub_237FA2290(a1, a2, v3, v2);
}

uint64_t sub_237FA3830()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v1, v0);
}

uint64_t sub_237FA383C()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F91894(v1, v0);
}

void sub_237FA3860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_237FA2290(a1, a2, a3, a4);
}

void sub_237FA3868(uint64_t a1@<X1>, char a2@<W8>)
{
  char v2;
  char v3;
  uint64_t v4;

  *(_BYTE *)(v4 - 115) = v3;
  *(_BYTE *)(v4 - 114) = a2;
  *(_BYTE *)(v4 - 113) = v2;
  *(_WORD *)(v4 - 112) = a1;
  *(_BYTE *)(v4 - 110) = BYTE2(a1);
  *(_BYTE *)(v4 - 109) = BYTE3(a1);
  *(_BYTE *)(v4 - 108) = BYTE4(a1);
  *(_BYTE *)(v4 - 107) = BYTE5(a1);
}

uint64_t sub_237FA38AC()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v1, v0);
}

uint64_t sub_237FA38B8()
{
  uint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v0, *(_QWORD *)(v1 - 176));
}

uint64_t sub_237FA38C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_237FA38D4()
{
  uint64_t v0;

  return v0 - 120;
}

uint64_t sub_237FA38E4()
{
  uint64_t v0;

  return sub_237F91894(*(_QWORD *)(v0 - 176), *(_QWORD *)(v0 - 160));
}

uint64_t sub_237FA38F4()
{
  return swift_release();
}

uint64_t sub_237FA38FC()
{
  return swift_retain();
}

uint64_t sub_237FA3904()
{
  return String.hash(into:)();
}

void sub_237FA3914()
{
  uint64_t v0;

  Hasher._combine(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_237FA3938(uint64_t a1)
{
  unint64_t v1;

  return sub_237F918D8(a1, v1);
}

void sub_237FA3940(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = v3 + a1;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  sub_237FA2290(v3, v5, v2, v1);
}

uint64_t sub_237FA397C(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

uint64_t sub_237FA3984()
{
  uint64_t v0;

  return sub_237F918D8(*(_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 192));
}

void sub_237FA398C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_237FA2290(a1, a2, a3, a4);
}

uint64_t sub_237FA3994()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FA39B8()
{
  return String.hash(into:)();
}

uint64_t sub_237FA39C8()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_237FA39F8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FA3A18()
{
  return swift_release();
}

uint64_t sub_237FA3A20()
{
  return swift_retain();
}

void sub_237FA3A28()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = *(_QWORD *)(v0 + 72);
}

uint64_t sub_237FA3A44(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

uint64_t sub_237FA3A4C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_237FA3A58()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FA3A6C()
{
  uint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v0, *(_QWORD *)(v1 - 160));
}

uint64_t sub_237FA3A78(uint64_t a1)
{
  uint64_t v1;

  return sub_237F91894(a1, *(_QWORD *)(v1 - 152));
}

void sub_237FA3A9C()
{
  JUMPOUT(0x23B829194);
}

uint64_t sub_237FA3AA8()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_237FA3ABC()
{
  return dispatch thunk of Hashable.hash(into:)();
}

void sub_237FA3AD0(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(_QWORD *)(a2 + 16));
}

uint64_t sub_237FA3AE4()
{
  return type metadata accessor for Credential(0);
}

uint64_t sub_237FA3AEC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FA3AF4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FA3AFC()
{
  return swift_unknownObjectRelease();
}

void sub_237FA3B04(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F91AC0(a1, v1);
}

uint64_t sub_237FA3B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;

  return sub_237FA24AC(a1, a2, a3, v4, v3);
}

void sub_237FA3B1C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F91AC0(a1, v1);
}

uint64_t sub_237FA3B24()
{
  uint64_t v0;

  return v0 - 120;
}

void sub_237FA3B34(char a1@<W8>)
{
  char v1;
  char v2;
  uint64_t v3;

  *(_BYTE *)(v3 - 109) = v1;
  *(_BYTE *)(v3 - 108) = v2;
  *(_BYTE *)(v3 - 107) = a1;
}

void sub_237FA3B4C(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F91AC0(a1, v1);
}

void sub_237FA3B54(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_237F91A80(a1, a2, v2);
}

uint64_t sub_237FA3B5C()
{
  return Data.hash(into:)();
}

uint64_t sub_237FA3B6C()
{
  return Data.hash(into:)();
}

uint64_t sub_237FA3B7C()
{
  return Data.hash(into:)();
}

uint64_t sub_237FA3B8C(uint64_t a1, unint64_t a2)
{
  return sub_237F91894(a1, a2);
}

void sub_237FA3B94()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_237FA3B9C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237FA3BA8()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

void sub_237FA3BC8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F91AC0(a1, v1);
}

void sub_237FA3BD0(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);

  sub_237F91A80(a1, a2, v2);
}

uint64_t sub_237FA3BD8(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 120), v3, a3);
}

uint64_t sub_237FA3BE4(uint64_t a1, uint64_t a2, size_t a3)
{
  const void *v3;
  uint64_t v4;

  return memcmp((const void *)(v4 - 120), v3, a3);
}

uint64_t sub_237FA3BF0()
{
  uint64_t v0;

  return sub_237F918D8(*(_QWORD *)(v0 - 168), *(_QWORD *)(v0 - 152));
}

void sub_237FA3BFC()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 114) = 0;
  *(_QWORD *)(v0 - 120) = 0;
}

uint64_t sub_237FA3C08(uint64_t a1)
{
  unint64_t v1;

  return sub_237F918D8(a1, v1);
}

uint64_t sub_237FA3C10(uint64_t a1)
{
  unint64_t v1;

  return sub_237F91894(a1, v1);
}

unint64_t sub_237FA3C18()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return sub_237FA2CBC();
}

void sub_237FA3C24(char a1@<W8>)
{
  char v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 117) = v1;
  *(_BYTE *)(v2 - 116) = a1;
}

void sub_237FA3C30()
{
  char v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v2 - 119) = v0;
  *(_BYTE *)(v2 - 118) = v1;
}

uint64_t sub_237FA3C50()
{
  uint64_t v0;
  uint64_t v1;

  return sub_237F9D3A8(v1, v0);
}

uint64_t sub_237FA3C5C()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237FA3C68()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F91894(v0, v1);
}

uint64_t sub_237FA3C74()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FA3C7C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FA3C98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_237FA3CA4(a1, type metadata accessor for CloudAssets_Asset, a2);
}

uint64_t sub_237FA3CA4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(a1 + 16);
  v7 = a2(0);
  v8 = v7;
  if (v6)
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)(v7 - 8) + 80);
    sub_237FA44DC(a1 + ((v9 + 32) & ~v9), a3, a2);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  return _s11CloudAssets21UploadResponseMessageOwst_0(a3, v10, 1, v8);
}

uint64_t sub_237FA3D24(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  sub_237F9191C(qword_2568B7950);
  v2[4] = sub_237FA4524();
  sub_237FA45B4();
  return sub_237FA4510();
}

uint64_t sub_237FA3D68()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  return sub_237FA451C();
}

uint64_t sub_237FA3D80()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  swift_bridgeObjectRetain();
  sub_237FA45B4();
  return sub_237FA4510();
}

uint64_t sub_237FA3DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 32);
  sub_237FA3CA4(*(_QWORD *)(v0 + 48), (uint64_t (*)(_QWORD))type metadata accessor for AssetSkeleton, v1);
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for AssetSkeleton();
  result = _s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v2);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    sub_237FA433C(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD))type metadata accessor for AssetSkeleton);
    swift_task_dealloc();
    return sub_237FA4574(*(uint64_t (**)(void))(v0 + 8));
  }
  return result;
}

uint64_t sub_237FA3E44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_237FA451C();
}

uint64_t sub_237FA3E58()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  return sub_237FA451C();
}

uint64_t sub_237FA3E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__signals;
  v3 = sub_237F9191C(&qword_2568B7730);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v1, v2, v3);
  return sub_237FA4574(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FA3EC8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = sub_237F9191C(&qword_2568B7768);
  v2[7] = sub_237FA4524();
  sub_237F9191C(&qword_2568B7968);
  v2[8] = sub_237FA4524();
  v3 = sub_237F9191C(&qword_2568B7970);
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7740);
  v2[12] = v4;
  v2[13] = *(_QWORD *)(v4 - 8);
  v2[14] = sub_237FA4524();
  sub_237FA45B4();
  return sub_237FA4510();
}

uint64_t sub_237FA3F68()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  return sub_237FA451C();
}

uint64_t sub_237FA3F80()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[13] + 16))(v0[14], v0[15] + OBJC_IVAR____TtC11CloudAssets23AssetsUploadCoordinator__results, v0[12]);
  sub_237FA45B4();
  return sub_237FA4510();
}

uint64_t sub_237FA3FC8()
{
  uint64_t v0;
  _QWORD *v1;

  MEMORY[0x23B829710](*(_QWORD *)(v0 + 96));
  sub_237FA4298();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v1;
  *v1 = v0;
  v1[1] = sub_237FA404C;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FA404C()
{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_237FA40B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  v1 = v0[8];
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v0[6]) == 1)
  {
    v3 = v0[13];
    v2 = v0[14];
    v4 = v0[12];
    sub_237FA45C0(v0[11]);
    sub_237F93CC8();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  else
  {
    sub_237FA42F4(v1, v0[7]);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = v0[13];
    v6 = v0[14];
    v8 = v0[12];
    if (EnumCaseMultiPayload != 1)
    {
      sub_237FA433C(v0[7], v0[4], type metadata accessor for Asset);
      sub_237FA45A4();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
      sub_237FA45D4();
      sub_237FA45CC();
      swift_task_dealloc();
      swift_task_dealloc();
      v9 = (uint64_t (*)(void))v0[1];
      return v9();
    }
    v0[3] = *(_QWORD *)v0[7];
    sub_237F9191C(&qword_2568B8A60);
    swift_willThrowTypedImpl();
    sub_237FA45A4();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  }
  sub_237FA4594();
  sub_237FA45D4();
  swift_task_dealloc();
  sub_237FA45CC();
  v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_237FA4234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  sub_237FA45C0(*(_QWORD *)(v0 + 88));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_237FA4594();
  sub_237FA45D4();
  swift_task_dealloc();
  sub_237FA45CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_237FA4298()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B7978;
  if (!qword_2568B7978)
  {
    v1 = type metadata accessor for AssetUploadCoordinator();
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for AssetUploadCoordinator, v1);
    atomic_store(result, (unint64_t *)&qword_2568B7978);
  }
  return result;
}

uint64_t type metadata accessor for AssetUploadCoordinator()
{
  return objc_opt_self();
}

uint64_t sub_237FA42F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FA433C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_237F963C8(a1, a2, a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32));
  return v3;
}

uint64_t AssetUploadCoordinator.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetUploadCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t AssetUploadCoordinator.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FA43C0()
{
  return AssetUploadCoordinator.unownedExecutor.getter();
}

uint64_t method lookup function for AssetUploadCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetUploadCoordinator.assetSkeleton.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_237FA4540();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_237FA4580(v1);
  return sub_237FA4534(v2, v3);
}

uint64_t sub_237FA4428()
{
  uint64_t v0;

  sub_237FA4554();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t dispatch thunk of AssetUploadCoordinator.signals.getter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_237FA4540();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_237FA4580(v1);
  return sub_237FA4534(v2, v3);
}

uint64_t dispatch thunk of AssetUploadCoordinator.result()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  v1 = (_QWORD *)sub_237FA4540();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_237FA4580(v1);
  return sub_237FA4534(v2, v3);
}

uint64_t sub_237FA44DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  v4 = sub_237F963C8(a1, a2, a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16));
  return v3;
}

uint64_t sub_237FA4510()
{
  return swift_task_switch();
}

uint64_t sub_237FA451C()
{
  return swift_task_switch();
}

uint64_t sub_237FA4524()
{
  return swift_task_alloc();
}

uint64_t sub_237FA4534(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_237FA4540()
{
  return swift_task_alloc();
}

uint64_t sub_237FA4554()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_237FA4574(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FA4580(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_237FA4594()
{
  return swift_task_dealloc();
}

uint64_t sub_237FA45A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_237FA45C0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 80) + 8))(a1, *(_QWORD *)(v1 + 72));
}

uint64_t sub_237FA45CC()
{
  return swift_task_dealloc();
}

uint64_t sub_237FA45D4()
{
  return swift_task_dealloc();
}

void SimultaneousTransferError.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  Hasher._combine(_:)(0);
  sub_237FA276C(a1, v3);
}

uint64_t static SimultaneousTransferError.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  return sub_237F9D2E4(*a1, *a2);
}

uint64_t sub_237FA4624(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x746163696C707061 && a2 == 0xEE007344496E6F69)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_237FA46CC()
{
  return 0x746163696C707061;
}

uint64_t sub_237FA46F0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000013 && a2 == 0x8000000237FE3470)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

unint64_t sub_237FA4774()
{
  return 0xD000000000000013;
}

uint64_t sub_237FA4794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA4624(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_237FA47BC()
{
  sub_237FA4DFC();
  return CodingKey.description.getter();
}

uint64_t sub_237FA47E4()
{
  sub_237FA4DFC();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FA4810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA46F0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_237FA4838()
{
  sub_237FA4DC0();
  return CodingKey.description.getter();
}

uint64_t sub_237FA4860()
{
  sub_237FA4DC0();
  return CodingKey.debugDescription.getter();
}

void SimultaneousTransferError.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = sub_237F9191C(&qword_2568B7998);
  v11 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  sub_237F982D4();
  v5 = v4 - v3;
  v6 = sub_237F9191C(&qword_2568B79A0);
  v10 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  sub_237F982D4();
  v9 = v8 - v7;
  sub_237F9195C(a1, a1[3]);
  sub_237FA4DC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_237FA4DFC();
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_237F9191C(&qword_2568B79B8);
  sub_237FA4E38(&qword_2568B79C0, MEMORY[0x24BEE0D08], MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v6);
  sub_237F960D8();
}

void SimultaneousTransferError.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v2[72];

  v1 = *v0;
  sub_237F961E4();
  sub_237F964CC();
  sub_237FA276C((uint64_t)v2, v1);
  sub_237F96328();
  sub_237F9631C();
}

void SimultaneousTransferError.init(from:)(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v21 = sub_237F9191C(&qword_2568B79C8);
  MEMORY[0x24BDAC7A8](v21);
  sub_237F982D4();
  v3 = sub_237F9191C(&qword_2568B79D0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v7 = v6 - v5;
  sub_237F9195C(a1, a1[3]);
  sub_237FA4DC0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v22)
    goto LABEL_6;
  v23 = a1;
  v8 = KeyedDecodingContainer.allKeys.getter();
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9
    || (sub_237FA372C(1, v9, v8, v8 + 32, 0, (2 * v9) | 1),
        v11 = v10,
        v13 = v12,
        swift_bridgeObjectRelease(),
        v11 != v13 >> 1))
  {
    v14 = type metadata accessor for DecodingError();
    swift_allocError();
    v16 = v15;
    sub_237F9191C(&qword_2568B78D8);
    *v16 = &type metadata for SimultaneousTransferError;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x24BEE26D0], v14);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
    a1 = v23;
LABEL_6:
    v19 = (uint64_t)a1;
    goto LABEL_7;
  }
  sub_237FA4DFC();
  KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  sub_237F9191C(&qword_2568B79B8);
  sub_237FA4E38(&qword_2568B79D8, MEMORY[0x24BEE0D38], MEMORY[0x24BEE12D0]);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  sub_237FA5280();
  swift_unknownObjectRelease();
  v17 = sub_237FA5294();
  v18(v17);
  *a2 = v24;
  v19 = (uint64_t)v23;
LABEL_7:
  sub_237F91A00(v19);
  sub_237F960D8();
}

Swift::Int sub_237FA4D38()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  sub_237FA276C((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_237FA4D84(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  SimultaneousTransferError.init(from:)(a1, a2);
}

void sub_237FA4D98(_QWORD *a1)
{
  SimultaneousTransferError.encode(to:)(a1);
}

unint64_t sub_237FA4DC0()
{
  unint64_t result;

  result = qword_2568B79A8;
  if (!qword_2568B79A8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE87F0, &type metadata for SimultaneousTransferError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B79A8);
  }
  return result;
}

unint64_t sub_237FA4DFC()
{
  unint64_t result;

  result = qword_2568B79B0;
  if (!qword_2568B79B0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE87A0, &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B79B0);
  }
  return result;
}

uint64_t sub_237FA4E38(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_237F919BC(&qword_2568B79B8);
    v8 = a2;
    result = MEMORY[0x23B829E84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_237FA4E9C()
{
  unint64_t result;

  result = qword_2568B79E0;
  if (!qword_2568B79E0)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for SimultaneousTransferError, &type metadata for SimultaneousTransferError);
    atomic_store(result, (unint64_t *)&qword_2568B79E0);
  }
  return result;
}

unint64_t sub_237FA4EDC()
{
  unint64_t result;

  result = qword_2568B79E8;
  if (!qword_2568B79E8)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for SimultaneousTransferError, &type metadata for SimultaneousTransferError);
    atomic_store(result, (unint64_t *)&qword_2568B79E8);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SimultaneousTransferError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SimultaneousTransferError()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for SimultaneousTransferError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for SimultaneousTransferError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for SimultaneousTransferError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SimultaneousTransferError(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 8))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SimultaneousTransferError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError()
{
  return &type metadata for SimultaneousTransferError;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError.CodingKeys()
{
  return &type metadata for SimultaneousTransferError.CodingKeys;
}

uint64_t _s11CloudAssets25SimultaneousTransferErrorO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FA50A0 + 4 * byte_237FE8490[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FA50C0 + 4 * byte_237FE8495[v4]))();
}

_BYTE *sub_237FA50A0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FA50C0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA50C8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA50D0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA50D8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA50E0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SimultaneousTransferError.ApplicationsBlockedCodingKeys()
{
  return &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys;
}

unint64_t sub_237FA5100()
{
  unint64_t result;

  result = qword_2568B79F0;
  if (!qword_2568B79F0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE86C0, &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B79F0);
  }
  return result;
}

unint64_t sub_237FA5140()
{
  unint64_t result;

  result = qword_2568B79F8;
  if (!qword_2568B79F8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8778, &type metadata for SimultaneousTransferError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B79F8);
  }
  return result;
}

unint64_t sub_237FA5180()
{
  unint64_t result;

  result = qword_2568B7A00;
  if (!qword_2568B7A00)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8630, &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7A00);
  }
  return result;
}

unint64_t sub_237FA51C0()
{
  unint64_t result;

  result = qword_2568B7A08;
  if (!qword_2568B7A08)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8658, &type metadata for SimultaneousTransferError.ApplicationsBlockedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7A08);
  }
  return result;
}

unint64_t sub_237FA5200()
{
  unint64_t result;

  result = qword_2568B7A10;
  if (!qword_2568B7A10)
  {
    result = MEMORY[0x23B829E84](&unk_237FE86E8, &type metadata for SimultaneousTransferError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7A10);
  }
  return result;
}

unint64_t sub_237FA5240()
{
  unint64_t result;

  result = qword_2568B7A18[0];
  if (!qword_2568B7A18[0])
  {
    result = MEMORY[0x23B829E84](&unk_237FE8710, &type metadata for SimultaneousTransferError.CodingKeys);
    atomic_store(result, qword_2568B7A18);
  }
  return result;
}

uint64_t sub_237FA5280()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 120) + 8))(v0, v1);
}

uint64_t sub_237FA5294()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FA52A8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 0x73736563637573 && a2 == 0xE700000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6572756C696166 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_237FA539C(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6572756C696166;
  else
    return 0x73736563637573;
}

uint64_t sub_237FA53CC()
{
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_237FA53E8()
{
  return 0;
}

uint64_t sub_237FA53F4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int sub_237FA5460()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_237FA54A0()
{
  return 12383;
}

BOOL sub_237FA54AC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_237F98760(*a1, *a2);
}

Swift::Int sub_237FA54C4()
{
  char *v0;

  return sub_237F98860(*v0);
}

void sub_237FA54D8(uint64_t a1)
{
  char *v1;

  sub_237F98770(a1, *v1);
}

Swift::Int sub_237FA54EC()
{
  char *v0;
  _BYTE v2[72];

  Hasher.init(_seed:)();
  sub_237F98770((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

uint64_t sub_237FA5534()
{
  char *v0;

  return sub_237FA539C(*v0);
}

uint64_t sub_237FA5548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA52A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FA5578()
{
  return sub_237F91050();
}

uint64_t sub_237FA55A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237F98858();
  *a1 = result;
  return result;
}

uint64_t sub_237FA55D0(uint64_t a1)
{
  MEMORY[0x23B829E84](&unk_237FE8BA8, a1);
  return CodingKey.description.getter();
}

uint64_t sub_237FA5604(uint64_t a1)
{
  MEMORY[0x23B829E84](&unk_237FE8BA8, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FA5638()
{
  return sub_237FA53E8();
}

uint64_t sub_237FA5648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_237FA5760(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))sub_237FA53CC, a4);
}

uint64_t sub_237FA5654(_QWORD *a1, uint64_t a2)
{
  return sub_237FA57A4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_237F91050);
}

uint64_t sub_237FA5660@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_237FA57D8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_237F92CAC, a3);
}

uint64_t sub_237FA566C(uint64_t a1)
{
  MEMORY[0x23B829E84](&unk_237FE8C48, a1);
  return CodingKey.description.getter();
}

uint64_t sub_237FA56A0(uint64_t a1)
{
  MEMORY[0x23B829E84](&unk_237FE8C48, a1);
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FA56D4()
{
  return sub_237F92CAC();
}

Swift::Int sub_237FA56E0()
{
  return sub_237FA5460();
}

void sub_237FA56F0()
{
  sub_237F964E4();
}

Swift::Int sub_237FA5700()
{
  Hasher.init(_seed:)();
  sub_237F964E4();
  return Hasher._finalize()();
}

uint64_t sub_237FA5744()
{
  return sub_237FA54A0();
}

uint64_t sub_237FA5754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_237FA5760(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))sub_237FA53F4, a4);
}

uint64_t sub_237FA5760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4]);
  *a5 = result & 1;
  return result;
}

uint64_t sub_237FA5798(_QWORD *a1, uint64_t a2)
{
  return sub_237FA57A4(a1, a2, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_237FA6E3C);
}

uint64_t sub_237FA57A4(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  return a3(a1[2], a1[3], a1[4]);
}

uint64_t sub_237FA57CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _BYTE *a3@<X8>)
{
  return sub_237FA57D8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD))sub_237FA196C, a3);
}

uint64_t sub_237FA57D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = a3(a1, a2[2], a2[3], a2[4]);
  *a4 = result & 1;
  return result;
}

uint64_t sub_237FA5810(uint64_t a1)
{
  MEMORY[0x23B829E84](&unk_237FE8BF8, a1);
  return CodingKey.description.getter();
}

uint64_t sub_237FA5844(uint64_t a1)
{
  MEMORY[0x23B829E84](&unk_237FE8BF8, a1);
  return CodingKey.debugDescription.getter();
}

void XPCResult.encode(to:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char v59;
  char v60;

  v5 = a2[2];
  v4 = a2[3];
  v6 = a2[4];
  v7 = sub_237FA6EC0();
  v11 = type metadata accessor for XPCResult.FailureCodingKeys(v7, v8, v9, v10);
  MEMORY[0x23B829E84](&unk_237FE8C48, v11);
  sub_237FA6EE4();
  v51 = v12;
  v52 = v11;
  v13 = type metadata accessor for KeyedEncodingContainer();
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  sub_237FA6E40();
  MEMORY[0x24BDAC7A8](v14);
  v44 = (char *)v42 - v15;
  v16 = sub_237FA6EC0();
  v20 = type metadata accessor for XPCResult.SuccessCodingKeys(v16, v17, v18, v19);
  MEMORY[0x23B829E84](&unk_237FE8BF8, v20);
  sub_237FA6EE4();
  v42[1] = v21;
  v42[2] = v20;
  v50 = type metadata accessor for KeyedEncodingContainer();
  v46 = *(_QWORD *)(v50 - 8);
  sub_237FA6E40();
  MEMORY[0x24BDAC7A8](v22);
  v43 = (char *)v42 - v23;
  v47 = *(_QWORD *)(v5 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v24);
  sub_237F9283C();
  v45 = v25;
  v54 = *(a2 - 1);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = v6;
  v29 = type metadata accessor for XPCResult.CodingKeys(255, v5, v4, v6);
  MEMORY[0x23B829E84](&unk_237FE8BA8, v29);
  v57 = type metadata accessor for KeyedEncodingContainer();
  v55 = *(_QWORD *)(v57 - 8);
  sub_237FA6E40();
  MEMORY[0x24BDAC7A8](v30);
  v32 = (char *)v42 - v31;
  sub_237F9195C(a1, a1[3]);
  v58 = v32;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  (*(void (**)(char *, uint64_t, _QWORD *))(v54 + 16))(v28, v56, a2);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v28, 1, v5) == 1)
  {
    v60 = 1;
    v33 = v44;
    v34 = v57;
    v35 = v58;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v49);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v35, v34);
  }
  else
  {
    v36 = v55;
    v37 = v47;
    v38 = v45;
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v45, v28, v5);
    v59 = 0;
    v39 = v43;
    v40 = v57;
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v41 = v50;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v39, v41);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v38, v5);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v58, v40);
  }
  sub_237F960D8();
}

uint64_t type metadata accessor for XPCResult.FailureCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_237FA6E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCResult.FailureCodingKeys);
}

uint64_t type metadata accessor for XPCResult.SuccessCodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_237FA6E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCResult.SuccessCodingKeys);
}

uint64_t type metadata accessor for XPCResult.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_237FA6E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCResult.CodingKeys);
}

void XPCResult.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for XPCResult.FailureCodingKeys(255, a2, a3, a4);
  sub_237FA6ED4();
}

void sub_237FA5BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_237FA6EE4();
  *(_QWORD *)(v10 - 208) = v11;
  *(_QWORD *)(v10 - 200) = v9;
  v12 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v10 - 288) = v12;
  *(_QWORD *)(v10 - 296) = *(_QWORD *)(v12 - 8);
  sub_237FA6E40();
  MEMORY[0x24BDAC7A8](v13);
  *(_QWORD *)(v10 - 216) = (char *)&a9 - v14;
  v15 = sub_237FA6E64();
  type metadata accessor for XPCResult.SuccessCodingKeys(v15, v16, v17, v18);
  sub_237FA6ED4();
}

void sub_237FA5C4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  sub_237FA6EE4();
  *(_QWORD *)(v14 - 240) = v15;
  *(_QWORD *)(v14 - 232) = v9;
  v16 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v14 - 304) = v16;
  *(_QWORD *)(v14 - 272) = *(_QWORD *)(v16 - 8);
  sub_237FA6E40();
  MEMORY[0x24BDAC7A8](v17);
  *(_QWORD *)(v14 - 224) = (char *)&a9 - v18;
  v19 = sub_237FA6E64();
  v23 = type metadata accessor for XPCResult.CodingKeys(v19, v20, v21, v22);
  MEMORY[0x23B829E84](&unk_237FE8BA8, v23);
  v24 = type metadata accessor for KeyedDecodingContainer();
  *(_QWORD *)(v14 - 184) = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v14 - 176) = v24;
  sub_237FA6E40();
  MEMORY[0x24BDAC7A8](v25);
  v27 = (char *)&a9 - v26;
  *(_QWORD *)(v14 - 248) = v11;
  *(_QWORD *)(v14 - 280) = v12;
  v28 = type metadata accessor for XPCResult(0, v11, v12, v10);
  *(_QWORD *)(v14 - 192) = v28;
  *(_QWORD *)(v14 - 264) = *(_QWORD *)(v28 - 8);
  sub_237F960F0();
  v30 = MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&a9 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v30);
  v34 = (char *)&a9 - v33;
  sub_237F9195C(v13, v13[3]);
  *(_QWORD *)(v14 - 168) = v27;
  v35 = *(_QWORD *)(v14 - 72);
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v35)
  {
    *(_QWORD *)(v14 - 320) = v32;
    *(_QWORD *)(v14 - 312) = v34;
    *(_QWORD *)(v14 - 72) = v13;
    *(_QWORD *)(v14 - 160) = KeyedDecodingContainer.allKeys.getter();
    type metadata accessor for Array();
    sub_237FA6ED4();
  }
  sub_237F91A00((uint64_t)v13);
  sub_237F960D8();
}

uint64_t type metadata accessor for XPCResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_237FA6E10(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for XPCResult);
}

void sub_237FA60E0(uint64_t a1, uint64_t *a2)
{
  XPCResult.init(from:)(a1, a2[2], a2[3], a2[4]);
}

void sub_237FA6100(_QWORD *a1, _QWORD *a2)
{
  XPCResult.encode(to:)(a1, a2);
}

uint64_t static XPCResult<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t TupleTypeMetadata2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char v24;
  char v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;

  v32 = a2;
  v8 = *(_QWORD *)(a3 - 8);
  v30[1] = a6;
  v31 = v8;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F9283C();
  v30[0] = v10;
  v14 = type metadata accessor for XPCResult(0, v11, v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v30 - v16;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v19 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v20 = MEMORY[0x24BDAC7A8](TupleTypeMetadata2);
  v22 = (char *)v30 - v21;
  v23 = (char *)v30 + *(int *)(v20 + 48) - v21;
  sub_237FA6EAC((uint64_t)v30 - v21, a1);
  sub_237FA6EAC((uint64_t)v23, v32);
  sub_237FA6E7C((uint64_t)v22);
  if (v25)
  {
    v24 = 1;
    sub_237FA6E7C((uint64_t)v23);
    if (v25)
      goto LABEL_10;
    goto LABEL_9;
  }
  sub_237FA6EAC((uint64_t)v17, (uint64_t)v22);
  sub_237FA6E7C((uint64_t)v23);
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v31 + 8))(v17, a3);
LABEL_9:
    v24 = 0;
    v15 = v19;
    v14 = TupleTypeMetadata2;
    goto LABEL_10;
  }
  v26 = v31;
  v27 = (char *)v30[0];
  (*(void (**)(_QWORD, char *, uint64_t))(v31 + 32))(v30[0], v23, a3);
  v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  v28 = *(void (**)(char *, uint64_t))(v26 + 8);
  v28(v27, a3);
  v28(v17, a3);
LABEL_10:
  (*(void (**)(char *, uint64_t))(v15 + 8))(v22, v14);
  return v24 & 1;
}

uint64_t sub_237FA62F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return static XPCResult<>.== infix(_:_:)(a1, a2, a3[2], a3[3], a3[4], *(_QWORD *)(a4 - 8));
}

void XPCResult<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](a1);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v9 + 16))(v8, v10);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v8, v2);
    Hasher._combine(_:)(0);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

Swift::Int XPCResult<>.hashValue.getter(uint64_t a1)
{
  _BYTE v3[72];

  Hasher.init(_seed:)();
  XPCResult<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_237FA6464(uint64_t a1)
{
  return XPCResult<>.hashValue.getter(a1);
}

void sub_237FA646C(uint64_t a1, uint64_t a2)
{
  XPCResult<>.hash(into:)(a1, a2);
}

Swift::Int sub_237FA6474(uint64_t a1, uint64_t a2)
{
  _BYTE v4[72];

  Hasher.init(_seed:)();
  XPCResult<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t sub_237FA64C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a3 - 8);
  return MEMORY[0x23B829E84](&protocol conformance descriptor for <> XPCResult<A>, a1, &v4);
}

uint64_t sub_237FA64F8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_237FA6500()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_237FA6558(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_237FA6628(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  result = _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return result;
}

void *sub_237FA6674(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v5);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_237FA6704(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a1, 1, v5);
  v7 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(a1, a2, v5);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

void *sub_237FA67DC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  size_t v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  v7 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    v8 = *(_DWORD *)(v7 + 84);
    v9 = *(_QWORD *)(v7 + 64);
    if (v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v5);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
  }
  return a1;
}

void *sub_237FA686C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  size_t v9;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a1, 1, v5);
  v7 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v5);
  v8 = *(_QWORD *)(v5 - 8);
  if (v6)
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(a1, a2, v5);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v7)
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v8 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v8 + 84))
    v9 = *(_QWORD *)(v8 + 64);
  else
    v9 = *(_QWORD *)(v8 + 64) + 1;
  memcpy(a1, a2, v9);
  return a1;
}

uint64_t sub_237FA6944(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v15;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int *)(v5 + 84);
  v7 = v6 - 1;
  if (!(_DWORD)v6)
    v7 = 0;
  v8 = *(_QWORD *)(v5 + 64);
  if (!(_DWORD)v6)
    ++v8;
  if (!a2)
    return 0;
  v9 = a2 - v7;
  if (a2 > v7)
  {
    v10 = 8 * v8;
    if (v8 > 3)
      goto LABEL_8;
    v12 = ((v9 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      v11 = *(_DWORD *)(a1 + v8);
      if (v11)
        goto LABEL_15;
    }
    else
    {
      if (v12 <= 0xFF)
      {
        if (v12 < 2)
          goto LABEL_22;
LABEL_8:
        v11 = *(unsigned __int8 *)(a1 + v8);
        if (!*(_BYTE *)(a1 + v8))
          goto LABEL_22;
LABEL_15:
        v13 = (v11 - 1) << v10;
        if (v8 > 3)
          v13 = 0;
        if ((_DWORD)v8)
        {
          if (v8 > 3)
            LODWORD(v8) = 4;
          __asm { BR              X12 }
        }
        return v7 + v13 + 1;
      }
      v11 = *(unsigned __int16 *)(a1 + v8);
      if (*(_WORD *)(a1 + v8))
        goto LABEL_15;
    }
  }
LABEL_22:
  if (v6 < 2)
    return 0;
  v15 = _s11CloudAssets21UploadResponseMessageOwet_0(a1, v6, v4);
  if (v15 >= 2)
    return v15 - 1;
  else
    return 0;
}

void sub_237FA6A70(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  size_t v11;
  char v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (!v8)
    v9 = 0;
  v10 = *(_QWORD *)(v7 + 64);
  if (v8)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8 * v11;
  v13 = a3 >= v9;
  v14 = a3 - v9;
  if (v14 != 0 && v13)
  {
    if (v11 <= 3)
    {
      v15 = ((v14 + ~(-1 << v12)) >> v12) + 1;
      if (HIWORD(v15))
      {
        v6 = 4u;
      }
      else if (v15 >= 0x100)
      {
        v6 = 2;
      }
      else
      {
        v6 = v15 > 1;
      }
    }
    else
    {
      v6 = 1u;
    }
  }
  if (v9 < a2)
  {
    v16 = ~v9 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        v17 = v16 & ~(-1 << v12);
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *a1 = v17;
          *((_BYTE *)a1 + 2) = BYTE2(v17);
        }
        else if ((_DWORD)v11 == 2)
        {
          *a1 = v17;
        }
        else
        {
          *(_BYTE *)a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v16;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X10 }
}

void sub_237FA6C04()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_237FA6C0C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t sub_237FA6C30(uint64_t a1, uint64_t a2)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, *(_QWORD *)(a2 + 16));
}

uint64_t sub_237FA6C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, 1, *(_QWORD *)(a3 + 16));
}

uint64_t sub_237FA6C48(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237FA6C94 + 4 * byte_237FE8853[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237FA6CC8 + 4 * byte_237FE884E[v4]))();
}

uint64_t sub_237FA6CC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA6CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FA6CD8);
  return result;
}

uint64_t sub_237FA6CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FA6CECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237FA6CF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA6CF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA6D04(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FA6D44 + 4 * byte_237FE8858[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FA6D64 + 4 * byte_237FE885D[v4]))();
}

_BYTE *sub_237FA6D44(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FA6D64(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA6D6C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA6D74(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA6D7C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA6D84(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_237FA6D90()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6DA0()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6DB0()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6DC0()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6DD0()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6DE0()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6DF0()
{
  JUMPOUT(0x23B829E84);
}

void sub_237FA6E00()
{
  JUMPOUT(0x23B829E84);
}

uint64_t sub_237FA6E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x23B829E18](a1, v6, a5);
}

uint64_t sub_237FA6E50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 256) + 8))(v2, v1);
}

uint64_t sub_237FA6E64()
{
  return 255;
}

uint64_t sub_237FA6E7C(uint64_t a1)
{
  uint64_t v1;

  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v1);
}

uint64_t sub_237FA6E98()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FA6EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, a2, v2);
}

uint64_t sub_237FA6EB4()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FA6EC0()
{
  return 255;
}

void sub_237FA6ED4()
{
  JUMPOUT(0x23B829E84);
}

uint64_t sub_237FA6EDC()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_237FA6EE4()
{
  return 0;
}

void AssetExportSession.__allocating_init(avAsset:presetName:delegate:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_237FA7194();
  v0 = (void *)sub_237FA71AC();
  sub_237FA7054(v0, v1, v2, v3);
}

void AssetExportSession.init(avAsset:presetName:delegate:)()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  sub_237FA7194();
  v0 = (void *)sub_237FA71AC();
  sub_237FA70B0(v0, v1, v2, v3, v4);
}

id AssetExportSession.__allocating_init(asset:presetName:)(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  void *v8;
  id v9;

  v7 = objc_allocWithZone(v3);
  v8 = (void *)MEMORY[0x23B829578](a2, a3);
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, sel_initWithAsset_presetName_, a1, v8);

  return v9;
}

void AssetExportSession.init(asset:presetName:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id AssetExportSession.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AssetExportSession();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_237FA7054(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;

  v8 = (char *)objc_allocWithZone((Class)type metadata accessor for AssetExportSession());
  sub_237FA70B0(a1, a2, a3, a4, v8);
}

void sub_237FA70B0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  void *v9;
  id v10;
  objc_super v11;

  *(_QWORD *)&a5[OBJC_IVAR____TtC11CloudAssets18AssetExportSession_delegate] = a4;
  swift_unknownObjectRetain();
  v9 = (void *)MEMORY[0x23B829578](a2, a3);
  swift_bridgeObjectRelease();
  v11.receiver = a5;
  v11.super_class = (Class)type metadata accessor for AssetExportSession();
  v10 = objc_msgSendSuper2(&v11, sel_initWithAsset_presetName_, a1, v9);

  if (v10)
  {

    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for AssetExportSession()
{
  return objc_opt_self();
}

uint64_t method lookup function for AssetExportSession()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetExportSession.__allocating_init(avAsset:presetName:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t sub_237FA7194()
{
  return swift_getObjectType();
}

uint64_t sub_237FA71AC()
{
  uint64_t v0;

  return v0;
}

void Signal.Event.hash(into:)()
{
  uint64_t v0;
  Swift::UInt64 v1;

  if ((*(_BYTE *)(v0 + 8) & 1) != 0)
  {
    sub_237FA8CC0();
  }
  else
  {
    v1 = *(_QWORD *)v0;
    sub_237FA3B94();
    Hasher._combine(_:)(v1);
  }
  sub_237F928A0();
}

uint64_t static Signal.Event.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      return sub_237F92CAC();
    return 0;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
    return 0;
  return *(_QWORD *)a1 == *(_QWORD *)a2;
}

uint64_t sub_237FA7238(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000237FE3520
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000237FE3540)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_237FA7324(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0xD00000000000001BLL;
}

uint64_t sub_237FA7364(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x656E6961746E6F63 && a2 == 0xEE007865646E4972)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_237FA740C()
{
  return 0x656E6961746E6F63;
}

uint64_t sub_237FA7434@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237FA53CC();
  *a1 = result & 1;
  return result;
}

uint64_t sub_237FA745C()
{
  sub_237FA776C();
  return CodingKey.description.getter();
}

uint64_t sub_237FA7484()
{
  sub_237FA776C();
  return CodingKey.debugDescription.getter();
}

unint64_t sub_237FA74AC()
{
  char *v0;

  return sub_237FA7324(*v0);
}

uint64_t sub_237FA74B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA7238(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FA74D8()
{
  sub_237FA7730();
  return CodingKey.description.getter();
}

uint64_t sub_237FA7500()
{
  sub_237FA7730();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FA7530@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA7364(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_237FA7558()
{
  sub_237FA77A8();
  return CodingKey.description.getter();
}

uint64_t sub_237FA7580()
{
  sub_237FA77A8();
  return CodingKey.debugDescription.getter();
}

void Signal.Event.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_237F96134();
  v1 = v0;
  v3 = v2;
  v4 = sub_237F9191C(&qword_2568B7C28);
  v13 = *(_QWORD *)(v4 - 8);
  v14 = v4;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F982D4();
  v8 = v7 - v6;
  v12 = *(_QWORD *)(sub_237F9191C(&qword_2568B7C30) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F982D4();
  sub_237F9191C(&qword_2568B7C38);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v10);
  sub_237FA8C88();
  v11 = *(_BYTE *)(v1 + 8);
  sub_237F9195C(v3, v3[3]);
  sub_237FA7730();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v11 & 1) != 0)
  {
    sub_237FA8CA0();
    sub_237FA8C68();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v8, v14);
  }
  else
  {
    sub_237FA77A8();
    sub_237FA8C68();
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_237FA8C3C(v12);
  }
  sub_237FA8C54();
  sub_237F960D8();
}

unint64_t sub_237FA7730()
{
  unint64_t result;

  result = qword_2568B7C40;
  if (!qword_2568B7C40)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9244, &type metadata for Signal.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7C40);
  }
  return result;
}

unint64_t sub_237FA776C()
{
  unint64_t result;

  result = qword_2568B7C48;
  if (!qword_2568B7C48)
  {
    result = MEMORY[0x23B829E84](&unk_237FE91F4, &type metadata for Signal.Event.AllUploadsFinishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7C48);
  }
  return result;
}

unint64_t sub_237FA77A8()
{
  unint64_t result;

  result = qword_2568B7C50;
  if (!qword_2568B7C50)
  {
    result = MEMORY[0x23B829E84](&unk_237FE91A4, &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7C50);
  }
  return result;
}

void Signal.Event.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  sub_237F961E4();
  if ((v2 & 1) != 0)
  {
    sub_237FA8CC0();
  }
  else
  {
    sub_237FA3B94();
    Hasher._combine(_:)(v1);
  }
  sub_237F96328();
  sub_237F9631C();
}

void Signal.Event.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  sub_237F96134();
  v3 = v2;
  v31 = v4;
  v5 = sub_237F9191C(&qword_2568B7C58);
  v28 = *(_QWORD *)(v5 - 8);
  v29 = v5;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9283C();
  v32 = v7;
  v30 = sub_237F9191C(&qword_2568B7C60);
  v8 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  sub_237F982D4();
  v9 = sub_237F9191C(&qword_2568B7C68);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  sub_237F92870();
  sub_237F9195C(v3, v3[3]);
  sub_237FA7730();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v0)
    goto LABEL_9;
  v11 = KeyedDecodingContainer.allKeys.getter();
  v12 = *(_QWORD *)(v11 + 16);
  v13 = v9;
  v27 = v3;
  if (!v12)
  {
    v19 = v1;
LABEL_8:
    v20 = type metadata accessor for DecodingError();
    swift_allocError();
    v22 = v21;
    sub_237F9191C(&qword_2568B78D8);
    *v22 = &type metadata for Signal.Event;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(v22, *MEMORY[0x24BEE26D0], v20);
    swift_willThrow();
    sub_237FA8C4C();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v19, v13);
    v3 = v27;
LABEL_9:
    v23 = (uint64_t)v3;
    goto LABEL_10;
  }
  v14 = *(_BYTE *)(v11 + 32);
  sub_237FA372C(1, v12, v11, v11 + 32, 0, (2 * v12) | 1);
  v16 = v15;
  v18 = v17;
  swift_bridgeObjectRelease();
  if (v16 != v18 >> 1)
  {
    v19 = v1;
    v13 = v9;
    goto LABEL_8;
  }
  if ((v14 & 1) != 0)
  {
    v33 = v14;
    sub_237FA8CA0();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v32, v29);
    sub_237FA8C4C();
    v24 = sub_237FA8CAC();
    v25(v24);
    v26 = 0;
  }
  else
  {
    sub_237FA77A8();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    v33 = v14;
    v26 = KeyedDecodingContainer.decode(_:forKey:)();
    sub_237FA8C3C(v8);
    sub_237FA8C4C();
    sub_237FA8C78();
  }
  v23 = (uint64_t)v3;
  *(_QWORD *)v31 = v26;
  *(_BYTE *)(v31 + 8) = v33;
LABEL_10:
  sub_237F91A00(v23);
  sub_237F960D8();
}

void sub_237FA7BBC()
{
  sub_237FA3B94();
  sub_237F928A0();
}

Swift::Int sub_237FA7BE0()
{
  uint64_t v0;
  Swift::UInt64 v1;
  char v2;

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)();
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_237FA7C44()
{
  Signal.Event.init(from:)();
}

void sub_237FA7C58()
{
  Signal.Event.encode(to:)();
}

uint64_t sub_237FA7C70()
{
  sub_237FA8580();
  return CodingKey.description.getter();
}

uint64_t sub_237FA7C98()
{
  sub_237FA8580();
  return CodingKey.debugDescription.getter();
}

uint64_t Signal.events.getter()
{
  return swift_bridgeObjectRetain();
}

void Signal.events.setter(uint64_t a1)
{
  _QWORD *v1;

  swift_bridgeObjectRelease();
  *v1 = a1;
  sub_237F928A0();
}

uint64_t (*Signal.events.modify())()
{
  return nullsub_1;
}

uint64_t sub_237FA7CFC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = type metadata accessor for CloudAssets_Signal.Event(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (v13)
  {
    v24 = a2;
    v25 = v2;
    v27 = a1;
    v29 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_237FB5F28(0, v13, 0);
    v14 = *(unsigned __int8 *)(v6 + 80);
    v26 = v12;
    v15 = v12 + ((v14 + 32) & ~v14);
    v28 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      sub_237FA8BAC(v15, (uint64_t)v11);
      sub_237FA8BAC((uint64_t)v11, (uint64_t)v9);
      if (v9[8] != 1)
        break;
      v16 = *(_QWORD *)v9;
      if (*(_QWORD *)v9)
        v17 = 0;
      else
        v17 = *((_QWORD *)v9 + 2);
      sub_237FA8BF0((uint64_t)v9, type metadata accessor for CloudAssets_Signal.Event);
      sub_237FA8BF0((uint64_t)v11, type metadata accessor for CloudAssets_Signal.Event);
      v18 = v29;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_237FB5F28(0, *(_QWORD *)(v18 + 16) + 1, 1);
        v18 = v29;
      }
      v20 = *(_QWORD *)(v18 + 16);
      v19 = *(_QWORD *)(v18 + 24);
      if (v20 >= v19 >> 1)
      {
        sub_237FB5F28((_QWORD *)(v19 > 1), v20 + 1, 1);
        v18 = v29;
      }
      *(_QWORD *)(v18 + 16) = v20 + 1;
      v21 = v18 + 16 * v20;
      *(_QWORD *)(v21 + 32) = v17;
      *(_BYTE *)(v21 + 40) = v16 != 0;
      v15 += v28;
      if (!--v13)
      {
        a1 = v27;
        a2 = v24;
        goto LABEL_15;
      }
    }
    sub_237F93CC8();
    swift_allocError();
    swift_willThrow();
    sub_237FA8BF0((uint64_t)v9, type metadata accessor for CloudAssets_Signal.Event);
    sub_237FA8BF0((uint64_t)v11, type metadata accessor for CloudAssets_Signal.Event);
    swift_release();
    sub_237FA8BF0(v27, type metadata accessor for CloudAssets_Signal);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    v18 = MEMORY[0x24BEE4AF8];
LABEL_15:
    sub_237FA8BF0(a1, type metadata accessor for CloudAssets_Signal);
    result = swift_bridgeObjectRelease();
    *a2 = v18;
  }
  return result;
}

void Signal.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  sub_237F96134();
  a19 = v22;
  a20 = v23;
  v25 = v24;
  v30 = v26;
  type metadata accessor for BinaryDecodingOptions();
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v27);
  sub_237F9283C();
  type metadata accessor for CloudAssets_Signal(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v28);
  sub_237FA8C88();
  v29 = sub_237F9191C(&qword_2568B7C70);
  MEMORY[0x24BDAC7A8](v29);
  sub_237F960FC();
  sub_237F9195C(v25, v25[3]);
  sub_237FA8580();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_237FA85BC();
    Message.init(serializedData:extensions:partial:options:)();
    sub_237FA7CFC(v21, &a10);
    sub_237FA8C2C();
    *v30 = a10;
  }
  sub_237F91A00((uint64_t)v25);
  sub_237F960D8();
}

CloudAssets::Signal __swiftcall Signal.init()()
{
  _QWORD *v0;
  CloudAssets::Signal result;

  *v0 = MEMORY[0x24BEE4AF8];
  return result;
}

uint64_t sub_237FA8168@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD *v20;
  uint64_t v21;

  v3 = type metadata accessor for CloudAssets_Signal.Event(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v19 - v8;
  v10 = *v1;
  type metadata accessor for CloudAssets_Signal(0);
  result = UnknownStorage.init()();
  v12 = *(_QWORD *)(v10 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (v12)
  {
    v20 = a1;
    v21 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_237FB5F5C(0, v12, 0);
    v13 = v21;
    v19[1] = v10;
    v14 = (_BYTE *)(v10 + 40);
    do
    {
      v15 = *((_QWORD *)v14 - 1);
      v16 = *v14;
      *((_QWORD *)v7 + 2) = 0;
      UnknownStorage.init()();
      if ((v16 & 1) != 0)
      {
        *(_QWORD *)v7 = 1;
        v7[8] = 1;
      }
      else
      {
        *(_QWORD *)v7 = 0;
        v7[8] = 1;
        *((_QWORD *)v7 + 2) = v15;
      }
      sub_237FA8B68((uint64_t)v7, (uint64_t)v9);
      v21 = v13;
      v18 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      if (v18 >= v17 >> 1)
      {
        sub_237FB5F5C(v17 > 1, v18 + 1, 1);
        v13 = v21;
      }
      *(_QWORD *)(v13 + 16) = v18 + 1;
      sub_237FA8B68((uint64_t)v9, v13+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v18);
      v14 += 16;
      --v12;
    }
    while (v12);
    result = swift_bridgeObjectRelease();
    a1 = v20;
  }
  *a1 = v13;
  return result;
}

void Signal.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  sub_237F96134();
  v4 = v3;
  type metadata accessor for CloudAssets_Signal(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F960FC();
  v6 = sub_237F9191C(&qword_2568B7C88);
  v11 = *(_QWORD *)(v6 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F92870();
  sub_237F9195C(v4, v4[3]);
  sub_237FA8580();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_237FA8168(v2);
  sub_237FA85BC();
  v8 = Message.serializedData(partial:)();
  v10 = v9;
  sub_237FA8BF0((uint64_t)v2, type metadata accessor for CloudAssets_Signal);
  if (!v0)
  {
    sub_237F93D04();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_237F918D8(v8, v10);
  }
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v6);
  sub_237F960D8();
}

void Signal.hash(into:)()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  _BYTE *v3;
  Swift::UInt64 v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (_BYTE *)(v1 + 40);
    do
    {
      if ((*v3 & 1) != 0)
      {
        sub_237FA8CC0();
      }
      else
      {
        v4 = *((_QWORD *)v3 - 1);
        sub_237FA3B94();
        Hasher._combine(_:)(v4);
      }
      v3 += 16;
      --v2;
    }
    while (v2);
  }
}

uint64_t static Signal.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  return sub_237F9D278(*a1, *a2);
}

void Signal.hashValue.getter()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v2[72];

  v1 = *v0;
  sub_237F961E4();
  sub_237FA2710((uint64_t)v2, v1);
  sub_237F96328();
  sub_237F9631C();
}

Swift::Int sub_237FA8514()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *v0;
  Hasher.init(_seed:)();
  sub_237FA2710((uint64_t)v3, v1);
  return Hasher._finalize()();
}

#error "237FA855C: call analysis failed (funcsize=5)"

void sub_237FA8568()
{
  Signal.encode(to:)();
}

unint64_t sub_237FA8580()
{
  unint64_t result;

  result = qword_2568B7C78;
  if (!qword_2568B7C78)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9154, &unk_2509D46B0);
    atomic_store(result, (unint64_t *)&qword_2568B7C78);
  }
  return result;
}

unint64_t sub_237FA85BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B7C80;
  if (!qword_2568B7C80)
  {
    v1 = type metadata accessor for CloudAssets_Signal(255);
    result = MEMORY[0x23B829E84](&unk_237FEB4D8, v1);
    atomic_store(result, (unint64_t *)&qword_2568B7C80);
  }
  return result;
}

unint64_t sub_237FA8600()
{
  unint64_t result;

  result = qword_2568B7C90;
  if (!qword_2568B7C90)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Signal.Event, &type metadata for Signal.Event);
    atomic_store(result, (unint64_t *)&qword_2568B7C90);
  }
  return result;
}

unint64_t sub_237FA8640()
{
  unint64_t result;

  result = qword_2568B7C98;
  if (!qword_2568B7C98)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Signal, &type metadata for Signal);
    atomic_store(result, (unint64_t *)&qword_2568B7C98);
  }
  return result;
}

void type metadata accessor for Signal()
{
  sub_237F963F0();
}

uint64_t getEnumTagSinglePayload for Signal.Event(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Signal.Event(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_237FA86D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_237FA86F4(uint64_t result, int a2)
{
  char v2;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    v2 = 1;
  }
  else
  {
    v2 = 0;
  }
  *(_BYTE *)(result + 8) = v2;
  return result;
}

void type metadata accessor for Signal.Event()
{
  sub_237F963F0();
}

void type metadata accessor for Signal.CodingKeys()
{
  sub_237F963F0();
}

uint64_t storeEnumTagSinglePayload for Signal.Event.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237FA877C + 4 * byte_237FE8CD5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237FA87B0 + 4 * byte_237FE8CD0[v4]))();
}

uint64_t sub_237FA87B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA87B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FA87C0);
  return result;
}

uint64_t sub_237FA87CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FA87D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237FA87D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FA87E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Signal.Event.CodingKeys()
{
  return &type metadata for Signal.Event.CodingKeys;
}

uint64_t _s11CloudAssets6SignalV5EventO37StorageContainerUploadStartCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FA883C + 4 * byte_237FE8CDA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FA885C + 4 * byte_237FE8CDF[v4]))();
}

_BYTE *sub_237FA883C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FA885C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA8864(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA886C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FA8874(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FA887C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Signal.Event.StorageContainerUploadStartCodingKeys()
{
  return &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys;
}

ValueMetadata *type metadata accessor for Signal.Event.AllUploadsFinishCodingKeys()
{
  return &type metadata for Signal.Event.AllUploadsFinishCodingKeys;
}

unint64_t sub_237FA88AC()
{
  unint64_t result;

  result = qword_2568B7CA0;
  if (!qword_2568B7CA0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8FBC, &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CA0);
  }
  return result;
}

unint64_t sub_237FA88EC()
{
  unint64_t result;

  result = qword_2568B7CA8;
  if (!qword_2568B7CA8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9074, &type metadata for Signal.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CA8);
  }
  return result;
}

unint64_t sub_237FA892C()
{
  unint64_t result;

  result = qword_2568B7CB0;
  if (!qword_2568B7CB0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE912C, &unk_2509D46B0);
    atomic_store(result, (unint64_t *)&qword_2568B7CB0);
  }
  return result;
}

unint64_t sub_237FA896C()
{
  unint64_t result;

  result = qword_2568B7CB8;
  if (!qword_2568B7CB8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE909C, &unk_2509D46B0);
    atomic_store(result, (unint64_t *)&qword_2568B7CB8);
  }
  return result;
}

unint64_t sub_237FA89AC()
{
  unint64_t result;

  result = qword_2568B7CC0;
  if (!qword_2568B7CC0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE90C4, &unk_2509D46B0);
    atomic_store(result, (unint64_t *)&qword_2568B7CC0);
  }
  return result;
}

unint64_t sub_237FA89EC()
{
  unint64_t result;

  result = qword_2568B7CC8;
  if (!qword_2568B7CC8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8F2C, &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CC8);
  }
  return result;
}

unint64_t sub_237FA8A2C()
{
  unint64_t result;

  result = qword_2568B7CD0;
  if (!qword_2568B7CD0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8F54, &type metadata for Signal.Event.StorageContainerUploadStartCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CD0);
  }
  return result;
}

unint64_t sub_237FA8A6C()
{
  unint64_t result;

  result = qword_2568B7CD8;
  if (!qword_2568B7CD8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8EDC, &type metadata for Signal.Event.AllUploadsFinishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CD8);
  }
  return result;
}

unint64_t sub_237FA8AAC()
{
  unint64_t result;

  result = qword_2568B7CE0;
  if (!qword_2568B7CE0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8F04, &type metadata for Signal.Event.AllUploadsFinishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CE0);
  }
  return result;
}

unint64_t sub_237FA8AEC()
{
  unint64_t result;

  result = qword_2568B7CE8;
  if (!qword_2568B7CE8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE8FE4, &type metadata for Signal.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CE8);
  }
  return result;
}

unint64_t sub_237FA8B2C()
{
  unint64_t result;

  result = qword_2568B7CF0;
  if (!qword_2568B7CF0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE900C, &type metadata for Signal.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B7CF0);
  }
  return result;
}

uint64_t sub_237FA8B68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudAssets_Signal.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FA8BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudAssets_Signal.Event(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FA8BF0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_237FA8C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_237FA8C3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_237FA8C4C()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_237FA8C54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v1, v0);
}

uint64_t sub_237FA8C68()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FA8C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

unint64_t sub_237FA8CA0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_237FA776C();
}

uint64_t sub_237FA8CAC()
{
  uint64_t v0;

  return v0;
}

void sub_237FA8CC0()
{
  Hasher._combine(_:)(1uLL);
}

unint64_t static LoggerSubsystem.client.getter()
{
  return sub_237FA8CF0();
}

unint64_t static LoggerSubsystem.server.getter()
{
  return sub_237FA8CF0();
}

ValueMetadata *type metadata accessor for LoggerSubsystem()
{
  return &type metadata for LoggerSubsystem;
}

unint64_t sub_237FA8CF0()
{
  return 0xD000000000000025;
}

uint64_t sub_237FA8D04(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = sub_237F9191C(&qword_2568B7DC0);
  v10 = sub_237FAC23C();
  v8[0] = a1;
  v2 = sub_237F9195C(v8, v9);
  v3 = *v2 + 32;
  v4 = v3 + *(_QWORD *)(*v2 + 16);
  swift_bridgeObjectRetain();
  sub_237FABAB8(v3, v4, &v7);
  swift_bridgeObjectRelease();
  v5 = v7;
  sub_237F91A00((uint64_t)v8);
  return v5;
}

uint64_t sub_237FA8DA4()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  sub_237FAC0E4(v0, qword_2568B7D00);
  sub_237FABF5C(v0, (uint64_t)qword_2568B7D00);
  type metadata accessor for LoadingRequestHandler();
  sub_237F9191C(&qword_2568B7D80);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t LoadingRequestHandler.__allocating_init(streamHandle:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_237FA8E54(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_237FABB2C);
}

uint64_t LoadingRequestHandler.init(streamHandle:type:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_237FA8E54(a1, a2, a3, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_237FABC1C);
}

uint64_t sub_237FA8E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = sub_237FABBF4(a1, v9);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v14 + 16))(v13);
  v15 = a4(v13, a2, a3, v4, v9, v10);
  sub_237F91A00(a1);
  return v15;
}

id sub_237FA8F10(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v2 = v1;
  v4 = sub_237F9191C(&qword_2568B7D70);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_237FAC1F4(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_type, (uint64_t)v6);
  v7 = type metadata accessor for UTType();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v6, 1, v7) == 1)
  {
    sub_237FAC1B8((uint64_t)v6, &qword_2568B7D70);
    v8 = 0;
  }
  else
  {
    v9 = UTType.identifier.getter();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
    v8 = (void *)MEMORY[0x23B829578](v9, v11);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(a1, sel_setContentType_, v8);

  v12 = (_QWORD *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle + 24);
  v14 = v12[4];
  sub_237F9195C(v12, v13);
  objc_msgSend(a1, sel_setContentLength_, (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14));
  return objc_msgSend(a1, sel_setByteRangeAccessSupported_, 1);
}

uint64_t sub_237FA9070(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = sub_237F9191C(&qword_2568B7DD0);
  v2[10] = v3;
  v2[11] = *(_QWORD *)(v3 - 8);
  v2[12] = swift_task_alloc();
  v4 = sub_237F9191C(&qword_2568B7DD8);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = swift_task_alloc();
  return swift_task_switch();
}

char *sub_237FA9100()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char *result;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  os_log_type_t type;
  uint64_t (*v25)(_QWORD, uint64_t, char *, uint64_t, uint64_t);
  uint64_t v26;

  if (qword_2568B7310 != -1)
    swift_once();
  v1 = (void *)v0[8];
  v2 = sub_237FAC474();
  sub_237FABF5C(v2, (uint64_t)qword_2568B7D00);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  v6 = sub_237FAC4D0(v4);
  v7 = (void *)v0[8];
  if (v6)
  {
    type = v5;
    v8 = sub_237FAC3E4();
    v26 = sub_237FAC3E4();
    *(_DWORD *)v8 = 136315650;
    v9 = v7;
    v10 = objc_msgSend(v9, sel_description);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    v0[5] = sub_237FAB354(v11, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    v14 = objc_msgSend(v9, sel_requestedOffset);

    v0[6] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v8 + 22) = 2048;
    v15 = objc_msgSend(v9, sel_requestedLength);

    v0[7] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_237F8F000, v4, type, "LoadingRequestHandler.handleDataRequest:%s offset:%lld length:%ld", (uint8_t *)v8, 0x20u);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }

  v17 = (uint64_t)sub_237FAC484(v16, sel_requestedOffset);
  result = (char *)sub_237FAC484(v17, sel_requestedLength);
  v19 = &result[v17];
  if (__OFADD__(v17, result))
  {
    __break(1u);
  }
  else if ((uint64_t)v19 >= v17)
  {
    v20 = (_QWORD *)(v0[9] + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
    v21 = v20[3];
    v22 = v20[4];
    sub_237F9195C(v20, v21);
    v25 = (uint64_t (*)(_QWORD, uint64_t, char *, uint64_t, uint64_t))(**(int **)(v22 + 24)
                                                                            + *(_QWORD *)(v22 + 24));
    v23 = (_QWORD *)swift_task_alloc();
    v0[16] = v23;
    *v23 = v0;
    v23[1] = sub_237FA9400;
    return (char *)v25(v0[15], v17, v19, v21, v22);
  }
  __break(1u);
  return result;
}

uint64_t sub_237FA9400()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_237FAC414();
  *v2 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FA9450()
{
  uint64_t v0;
  _QWORD *v1;

  MEMORY[0x23B829710](*(_QWORD *)(v0 + 104));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_237FA94CC;
  sub_237FAC434();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FA94CC()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FA9510()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  Class isa;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if (v2 >> 60 == 15)
  {
    v3 = *(_QWORD *)(v0 + 112);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    sub_237FAC458(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
    sub_237FAC46C();
    sub_237FAC464();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_237FAC48C((uint64_t)isa, sel_respondWithData_);

    sub_237FAC280(v1, v2);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 152) = v6;
    *v6 = v0;
    v6[1] = sub_237FA961C;
    sub_237FAC434();
    return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
  }
}

uint64_t sub_237FA961C()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FA9660()
{
  uint64_t v0;

  sub_237FAC4A8();
  sub_237FA45D4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FA9694()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  sub_237FAC458(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_237FAC4A8();
  sub_237FA45D4();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FA96EC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[14] = a1;
  v2[15] = v1;
  sub_237F9191C(&qword_2568B7DA0);
  v2[16] = swift_task_alloc();
  v3 = type metadata accessor for URLRequest();
  v2[17] = v3;
  v2[18] = *(_QWORD *)(v3 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v4 = type metadata accessor for URL();
  v2[21] = v4;
  v2[22] = *(_QWORD *)(v4 - 8);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FA97E4()
{
  uint64_t v0;
  void *v1;
  id *v2;
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  NSURL *v35;
  id v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  void *v41;
  uint8_t *v42;
  _QWORD *v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  void *v55;
  uint8_t *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  NSObject *v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  void *v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  id v78;
  void **v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  Class isa;
  uint64_t v84;
  id v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104[2];

  v104[1] = *MEMORY[0x24BDAC8D0];
  if (qword_2568B7310 != -1)
    swift_once();
  v2 = (id *)(v0 + 112);
  v1 = *(void **)(v0 + 112);
  v3 = sub_237FAC474();
  *(_QWORD *)(v0 + 200) = sub_237FABF5C(v3, (uint64_t)qword_2568B7D00);
  v4 = v1;
  v5 = sub_237FAC4BC();
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 112);
  if (v7)
  {
    v9 = (uint8_t *)sub_237FAC3E4();
    v104[0] = sub_237FAC3E4();
    *(_DWORD *)v9 = 136315138;
    *(_QWORD *)(v0 + 96) = v8;
    v10 = _Pointer.debugDescription.getter();
    *(_QWORD *)(v0 + 104) = sub_237FAC44C(v10, v11, v12, v13, v14, v15, v16, v17, v99, v100, v101);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    sub_237FAC404();
    sub_237FAC40C(&dword_237F8F000, v5, v6, "LoadingRequestHandler.handle, entering - loadingRequest:%s", v9);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }

  v18 = objc_msgSend(*v2, sel_contentInformationRequest);
  if (v18)
  {
    v19 = v18;
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v0 + 144);
    v24 = *(_QWORD *)(v0 + 128);
    v25 = *(void **)(v0 + 112);
    sub_237FA8F10(v18);
    v26 = objc_msgSend(v25, sel_request);
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

    URLRequest.url.getter();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v24, 1, v20) == 1)
    {
      v27 = *(_QWORD *)(v0 + 128);

      sub_237FAC1B8(v27, &qword_2568B7DA0);
    }
    else
    {
      v29 = *(_QWORD *)(v0 + 184);
      v28 = *(_QWORD *)(v0 + 192);
      v31 = *(_QWORD *)(v0 + 168);
      v30 = *(_QWORD *)(v0 + 176);
      v32 = *(void **)(v0 + 112);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v30 + 32))(v28, *(_QWORD *)(v0 + 128), v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
      v33 = Dictionary.init(dictionaryLiteral:)();
      v34 = objc_allocWithZone(MEMORY[0x24BDD15B8]);
      v36 = sub_237FAB1C0(v29, 206, 0, 0, v33, v35);
      objc_msgSend(v32, sel_setResponse_, v36);

      v37 = v32;
      v38 = sub_237FAC4BC();
      v39 = static os_log_type_t.debug.getter();
      v40 = os_log_type_enabled(v38, v39);
      v41 = *(void **)(v0 + 112);
      if (v40)
      {
        v42 = (uint8_t *)sub_237FAC3E4();
        v43 = (_QWORD *)sub_237FAC3E4();
        *(_DWORD *)v42 = 138412290;
        v44 = objc_msgSend(v41, sel_response);
        v45 = v44;
        if (v44)
          *(_QWORD *)(v0 + 88) = v44;
        else
          *(_QWORD *)(v0 + 80) = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v46 = *(void **)(v0 + 112);
        *v43 = v45;

        sub_237FAC40C(&dword_237F8F000, v38, v39, "Returning Response w/ ETag for AVAssetCache %@", v42);
        sub_237F9191C(&qword_2568B7DB0);
        sub_237FAC3FC();
        sub_237FAC3D8();
      }

      v47 = *(_QWORD *)(v0 + 192);
      v49 = *(_QWORD *)(v0 + 168);
      v48 = *(_QWORD *)(v0 + 176);

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
    }
    v2 = (id *)(v0 + 112);
  }
  v50 = objc_msgSend(*(id *)(v0 + 112), sel_dataRequest);
  *(_QWORD *)(v0 + 208) = v50;
  if (v50)
  {
    v51 = v50;
    if (objc_msgSend(v50, sel_requestedOffset) || objc_msgSend(v51, sel_requestedLength) != (id)2)
    {
      v61 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 216) = v61;
      *v61 = v0;
      v61[1] = sub_237FAA0E8;
      return sub_237FA9070((uint64_t)v51);
    }
    v52 = *v2;
    v53 = sub_237FAC4BC();
    v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = *(void **)(v0 + 112);
      v102 = v55;
      v103 = *(_QWORD *)(v0 + 144);
      v56 = (uint8_t *)sub_237FAC3E4();
      v104[0] = sub_237FAC3E4();
      *(_DWORD *)v56 = 136315138;
      v57 = objc_msgSend(v55, sel_request);
      static URLRequest._unconditionallyBridgeFromObjectiveC(_:)();

      sub_237FAC398(&qword_2568B7DB8, (uint64_t (*)(uint64_t))MEMORY[0x24BDCB0C0], MEMORY[0x24BDCB0E8]);
      v58 = dispatch thunk of CustomStringConvertible.description.getter();
      v60 = v59;
      sub_237FAC458(*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8));
      *(_QWORD *)(v0 + 72) = sub_237FAB354(v58, v60, v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      sub_237FAC40C(&dword_237F8F000, v53, v54, "Returning zero-filled bytes for the first two bytes of a video request %s. These two-bytes are always requested even when the payload can be served from cache.", v56);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    v77 = *v2;

    v78 = *v2;
    v79 = v2;
    v80 = sub_237FA8D04((uint64_t)&unk_2509D3868);
    v82 = v81;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v84 = sub_237F918D8(v80, v82);
    sub_237FAC48C(v84, sel_respondWithData_);

    objc_msgSend(v78, sel_finishLoading);
    v85 = v78;
    v86 = Logger.logObject.getter();
    v87 = static os_log_type_t.default.getter();
    v88 = sub_237FAC4D0(v86);
    v67 = *v79;
    if (v88)
    {
      v89 = (uint8_t *)sub_237FAC3E4();
      v90 = sub_237FAC3E4();
      *(_DWORD *)v89 = 136315138;
      v104[0] = v90;
      *(_QWORD *)(v0 + 56) = v67;
      v91 = _Pointer.debugDescription.getter();
      *(_QWORD *)(v0 + 64) = sub_237FAC44C(v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      sub_237FAC404();
      sub_237FAC40C(&dword_237F8F000, v86, v87, "LoadingRequestHandler.handle, leaving - loadingRequest:%s with synthetic response", v89);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }

  }
  else
  {
    v63 = *(NSObject **)(v0 + 112);
    -[NSObject finishLoading](v63, sel_finishLoading);
    v64 = v63;
    Logger.logObject.getter();
    v65 = sub_237FAC4B4();
    v66 = os_log_type_enabled(v63, v65);
    v67 = *(void **)(v0 + 112);
    if (v66)
    {
      v68 = (uint8_t *)sub_237FAC3E4();
      v104[0] = sub_237FAC3E4();
      *(_DWORD *)v68 = 136315138;
      *(_QWORD *)(v0 + 16) = v67;
      v69 = _Pointer.debugDescription.getter();
      *(_QWORD *)(v0 + 24) = sub_237FAC44C(v69, v70, v71, v72, v73, v74, v75, v76, v99, v100, v101);
      sub_237FAC4C4();

      sub_237FAC404();
      sub_237FAC40C(&dword_237F8F000, v63, v65, "LoadingRequestHandler.handle, leaving - loadingRequest:%s", v68);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }

  }
  sub_237FAC424();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FAA0E8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_237FAC414();
  *v2 = *v1;
  *(_QWORD *)(v3 + 224) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAA17C()
{
  uint64_t v0;
  NSObject *v1;
  NSObject *v2;
  os_log_type_t v3;
  void *v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];

  v1 = *(NSObject **)(v0 + 112);
  -[NSObject finishLoading](v1, sel_finishLoading);
  v2 = v1;
  Logger.logObject.getter();
  v3 = sub_237FAC4B4();
  if (sub_237FAC4D0(v1))
  {
    v4 = *(void **)(v0 + 112);
    v5 = (uint8_t *)sub_237FAC3E4();
    v6 = sub_237FAC3E4();
    *(_DWORD *)v5 = 136315138;
    v11[0] = v6;
    *(_QWORD *)(v0 + 16) = v4;
    v7 = _Pointer.debugDescription.getter();
    *(_QWORD *)(v0 + 24) = sub_237FAB354(v7, v8, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_237FAC404();

    sub_237FAC40C(&dword_237F8F000, v1, v3, "LoadingRequestHandler.handle, leaving - loadingRequest:%s", v5);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }
  v9 = *(void **)(v0 + 112);

  sub_237FAC424();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FAA324()
{
  uint64_t v0;
  NSObject *v1;
  void *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v19[2];

  v19[1] = *MEMORY[0x24BDAC8D0];
  v1 = *(NSObject **)(v0 + 224);
  v2 = *(void **)(v0 + 112);
  v3 = (void *)_convertErrorToNSError(_:)();
  objc_msgSend(v2, sel_finishLoadingWithError_, v3);

  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v1;
  Logger.logObject.getter();
  v8 = sub_237FAC4B4();
  if (os_log_type_enabled(v1, v8))
  {
    v9 = *(void **)(v0 + 224);
    v10 = *(void **)(v0 + 112);
    v11 = sub_237FAC3E4();
    v12 = (_QWORD *)sub_237FAC3E4();
    v19[0] = sub_237FAC3E4();
    *(_DWORD *)v11 = 136315394;
    *(_QWORD *)(v0 + 32) = v10;
    v13 = _Pointer.debugDescription.getter();
    *(_QWORD *)(v0 + 40) = sub_237FAB354(v13, v14, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_237FAC404();

    *(_WORD *)(v11 + 12) = 2112;
    v15 = v9;
    v16 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 48) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v16;
    sub_237FAC47C();
    sub_237FAC47C();
    _os_log_impl(&dword_237F8F000, v1, v8, "LoadingRequestHandler.handle, leaving - loadingRequest:%s with error %@", (uint8_t *)v11, 0x16u);
    sub_237F9191C(&qword_2568B7DB0);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }
  v17 = *(void **)(v0 + 112);

  sub_237FAC4D8();
  sub_237FAC4D8();
  sub_237FAC4D8();

  sub_237FAC424();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Bool __swiftcall LoadingRequestHandler.resourceLoader(_:shouldWaitForLoadingOfRequestedResource:)(AVAssetResourceLoader _, AVAssetResourceLoadingRequest shouldWaitForLoadingOfRequestedResource)
{
  void *v2;
  AVAssetResourceLoaderInternal *resourceLoader;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  AVAssetResourceLoaderInternal *v10;
  uint64_t v11;
  uint64_t v13;

  resourceLoader = _._resourceLoader;
  v4 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v6, 1, 1, v7);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v2;
  v8[5] = resourceLoader;
  v9 = v2;
  v10 = resourceLoader;
  sub_237FAA8B0((uint64_t)v6, (uint64_t)&unk_2568B7D28, (uint64_t)v8);
  v11 = *(_QWORD *)&v9[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping] + 16;
  sub_237FAC498();
  sub_237FAA9F4(v11, v10);
  sub_237FAC4A0();
  swift_release();
  return 1;
}

uint64_t sub_237FAA6A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  return swift_task_switch();
}

uint64_t sub_237FAA708()
{
  os_activity_scope_state_s *v0;
  os_unfair_lock_s *v1;
  os_activity_t *v2;
  os_unfair_lock_s *v3;
  _QWORD *v4;
  os_activity_scope_state_s v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = *(os_unfair_lock_s **)(v0[2].opaque[0] + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity);
  v2 = (os_activity_t *)&v1[4];
  v3 = v1 + 6;
  os_unfair_lock_lock(v1 + 6);
  sub_237FAAEE0(v2, &v6);
  os_unfair_lock_unlock(v3);
  v0[1] = v6;
  v4 = (_QWORD *)swift_task_alloc();
  v0[3].opaque[0] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = sub_237FAA7FC;
  return sub_237FA96EC(v0[2].opaque[1]);
}

uint64_t sub_237FAA7FC()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAA85C()
{
  uint64_t v0;

  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 16));
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAA8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for TaskPriority();
  if (_s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v6) == 1)
  {
    sub_237FAC1B8(a1, &qword_2568B89A0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = a3;
  return swift_task_create();
}

void sub_237FAA9F4(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v3;

  v2 = a2;
  v3 = swift_retain();
  sub_237FC24C0(v3, v2);

}

Swift::Void __swiftcall LoadingRequestHandler.resourceLoader(_:didCancel:)(AVAssetResourceLoader _, AVAssetResourceLoadingRequest didCancel)
{
  uint64_t v2;
  AVAssetResourceLoaderInternal *resourceLoader;
  uint64_t *v4;
  uint64_t v5;
  os_activity_t *v6;
  uint64_t v7;
  AVAssetResourceLoaderInternal *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  AVAssetResourceLoaderInternal *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *oslog;
  os_activity_scope_state_s state;
  uint64_t v22[2];

  resourceLoader = _._resourceLoader;
  v22[1] = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping) + 16);
  sub_237FAC498();
  sub_237FAAE70(v4, resourceLoader, &state);
  sub_237FAC4A0();
  v5 = state.opaque[0];
  if (state.opaque[0])
  {
    v6 = (os_activity_t *)(*(_QWORD *)(v2 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity)
                         + 16);
    swift_retain();
    sub_237FAC498();
    sub_237FAAEE0(v6, &state);
    sub_237FAC4A0();
    if (qword_2568B7310 != -1)
      swift_once();
    v7 = sub_237FAC474();
    sub_237FABF5C(v7, (uint64_t)qword_2568B7D00);
    v8 = resourceLoader;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)sub_237FAC3E4();
      v22[0] = sub_237FAC3E4();
      *(_DWORD *)v11 = 136315138;
      v12 = _Pointer.debugDescription.getter();
      sub_237FAB354(v12, v13, v22);
      sub_237FAC4C4();
      sub_237FAC404();

      sub_237FAC40C(&dword_237F8F000, v9, v10, "LoadingRequestHandler.didCancel - loadingRequest:%s", v11);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }

    MEMORY[0x23B829698](v5, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
    os_activity_scope_leave(&state);
    swift_release_n();
  }
  else
  {
    if (qword_2568B7310 != -1)
      swift_once();
    v14 = sub_237FAC474();
    sub_237FABF5C(v14, (uint64_t)qword_2568B7D00);
    v15 = resourceLoader;
    oslog = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v16))
    {
      v17 = (uint8_t *)sub_237FAC3E4();
      state.opaque[0] = sub_237FAC3E4();
      *(_DWORD *)v17 = 136315138;
      v22[0] = (uint64_t)v15;
      v18 = _Pointer.debugDescription.getter();
      v22[0] = sub_237FAB354(v18, v19, (uint64_t *)&state);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_237FAC404();

      sub_237FAC40C(&dword_237F8F000, oslog, v16, "LoadingRequestHandler.didCancel - loadingRequest:%s - missing task!", v17);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }

  }
}

void sub_237FAAE70(uint64_t *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  id v5;
  unint64_t v6;
  char v7;
  uint64_t v8;

  v4 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v5 = a2;
    v6 = sub_237FC1D34((uint64_t)v5);
    if ((v7 & 1) != 0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v6);
      swift_retain();
    }
    else
    {
      v8 = 0;
    }

  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
}

double sub_237FAAEE0@<D0>(os_activity_t *a1@<X0>, os_activity_scope_state_s *a2@<X8>)
{
  double result;
  unsigned __int128 v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4 = 0uLL;
  os_activity_scope_enter(*a1, (os_activity_scope_state_t)&v4);
  result = *(double *)&v4;
  *a2 = (os_activity_scope_state_s)v4;
  return result;
}

Swift::Bool __swiftcall LoadingRequestHandler.resourceLoader(_:shouldWaitForRenewalOfRequestedResource:)(AVAssetResourceLoader _, AVAssetResourceRenewalRequest shouldWaitForRenewalOfRequestedResource)
{
  -[AVAssetResourceLoaderInternal finishLoading](_._resourceLoader, sel_finishLoading, shouldWaitForRenewalOfRequestedResource.super.super.isa, shouldWaitForRenewalOfRequestedResource.super._loadingRequest);
  return 1;
}

Swift::Bool __swiftcall LoadingRequestHandler.resourceLoader(_:shouldWaitForResponseTo:)(AVAssetResourceLoader _, NSURLAuthenticationChallenge shouldWaitForResponseTo)
{
  AVAssetResourceLoaderInternal *resourceLoader;
  id v3;

  resourceLoader = _._resourceLoader;
  v3 = sub_237FAC484((uint64_t)_.super.isa, sel_sender);
  if (v3)
  {
    objc_msgSend(v3, sel_continueWithoutCredentialForAuthenticationChallenge_, resourceLoader);
    swift_unknownObjectRelease();
  }
  return 1;
}

id LoadingRequestHandler.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void LoadingRequestHandler.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id LoadingRequestHandler.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id sub_237FAB1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, NSURL *a6@<X8>)
{
  void *v6;
  void *v7;
  void *v13;
  void *v14;
  void *v15;
  NSDictionary v16;
  id v17;
  uint64_t v18;

  v7 = v6;
  URL._bridgeToObjectiveC()(a6);
  v14 = v13;
  if (!a4)
  {
    v15 = 0;
    if (a5)
      goto LABEL_3;
LABEL_5:
    v16.super.isa = 0;
    goto LABEL_6;
  }
  v15 = (void *)MEMORY[0x23B829578](a3, a4);
  swift_bridgeObjectRelease();
  if (!a5)
    goto LABEL_5;
LABEL_3:
  v16.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
LABEL_6:
  v17 = objc_msgSend(v7, sel_initWithURL_statusCode_HTTPVersion_headerFields_, v14, a2, v15, v16.super.isa);

  v18 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(a1, v18);
  return v17;
}

uint64_t sub_237FAB2B8(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_237FAB31C;
  return v6(a1);
}

uint64_t sub_237FAB31C()
{
  uint64_t v0;

  sub_237FAC3EC();
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAB354(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t ObjectType;

  sub_237FAC434();
  v9 = sub_237FAB420(v6, v7, v8, 1, a1, a2);
  v10 = v15[0];
  if (v9)
  {
    v11 = v9;
    ObjectType = swift_getObjectType();
    v15[0] = v11;
    v12 = *a3;
    if (*a3)
    {
      sub_237FAC0A4((uint64_t)v15, *a3);
      *a3 = v12 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v15[0] = a1;
    v15[1] = a2;
    v13 = *a3;
    if (*a3)
    {
      sub_237FAC0A4((uint64_t)v15, *a3);
      *a3 = v13 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_237F91A00((uint64_t)v15);
  return v10;
}

uint64_t sub_237FAB420(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_237FAB574((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_237FAB638(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

void *sub_237FAB574(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_237FAB638(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_237FAB6CC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = (uint64_t)sub_237FAB8A0(0, *(_QWORD *)(v2 + 16) + 1, 1, v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = (uint64_t)sub_237FAB8A0((char *)(v3 > 1), v4 + 1, 1, v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_237FAB6CC(uint64_t a1, unint64_t a2)
{
  Swift::Int v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v2 = String.UTF8View._foreignCount()();
    if (v2)
      goto LABEL_6;
    return MEMORY[0x24BEE4AF8];
  }
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return MEMORY[0x24BEE4AF8];
LABEL_6:
  v3 = sub_237FAB83C(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    v4 = v3;
    v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2)
      goto LABEL_14;
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *sub_237FAB83C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_237F9191C(&qword_2568B7D78);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *sub_237FAB8A0(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_237F9191C(&qword_2568B7D78);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_237FABA38(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_237FAB974(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *sub_237FAB974(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) == 0 && (&__dst[__n] <= __src || &__src[__n] <= __dst))
    return memcpy(__dst, __src, __n);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *sub_237FABA38(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_237FABAB8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = Data.InlineData.init(_:)();
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = MEMORY[0x23B829200]();
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = MEMORY[0x23B82920C]();
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

id sub_237FABB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  Class v14;
  id v15;
  id v16;
  uint64_t v18;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x24BDAC7A8](a1);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  v16 = sub_237FABC1C((uint64_t)v13, a2, a3, v15, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
  return v16;
}

uint64_t sub_237FABBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

id sub_237FABC1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  objc_class *ObjectType;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  os_activity_t v19;
  uint64_t v20;
  id v21;
  uint64_t v23;
  objc_super v24;
  uint64_t v25[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v11 = type metadata accessor for UTType();
  MEMORY[0x24BDAC7A8](v11);
  v12 = sub_237F9191C(&qword_2568B7D70);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[3] = a5;
  v25[4] = a6;
  v15 = sub_237FAC294(v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(v15, a1, a5);
  sub_237FAC2D0((uint64_t)v25, (uint64_t)a4 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  v16 = a4;
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  sub_237FAC314((uint64_t)v14, (uint64_t)&v16[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_type]);
  sub_237FAC35C();
  sub_237F9191C((uint64_t *)&unk_2568B8AE0);
  sub_237FAC398((unint64_t *)&qword_2568B7DF0, (uint64_t (*)(uint64_t))sub_237FAC35C, MEMORY[0x24BEE5BD8]);
  v17 = Dictionary.init(dictionaryLiteral:)();
  sub_237F9191C(&qword_2568B8AF0);
  v18 = swift_allocObject();
  *(_DWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 16) = v17;
  *(_QWORD *)&v16[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping] = v18;
  if (qword_2568B73D0 != -1)
    swift_once();
  v19 = _os_activity_create(&dword_237F8F000, "asset-streaming/loading-request-handler", (os_activity_t)qword_2568B8D70, OS_ACTIVITY_FLAG_DEFAULT);
  sub_237F9191C((uint64_t *)&unk_2568B7E00);
  v20 = swift_allocObject();
  *(_DWORD *)(v20 + 24) = 0;
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)&v16[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity] = v20;

  v24.receiver = v16;
  v24.super_class = ObjectType;
  v21 = objc_msgSendSuper2(&v24, sel_init);
  sub_237F91A00((uint64_t)v25);
  return v21;
}

uint64_t sub_237FABE7C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_237FABEB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_237FABF28;
  return sub_237FAA6A4(a1, v4, v5, v7, v6);
}

uint64_t sub_237FABF28()
{
  uint64_t v0;

  sub_237FAC3EC();
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FABF5C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_237FABF74()
{
  return type metadata accessor for LoadingRequestHandler();
}

uint64_t type metadata accessor for LoadingRequestHandler()
{
  uint64_t result;

  result = qword_2568B7D58;
  if (!qword_2568B7D58)
    return swift_getSingletonMetadata();
  return result;
}

void sub_237FABFB4()
{
  unint64_t v0;

  sub_237FAC050();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for LoadingRequestHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LoadingRequestHandler.__allocating_init(streamHandle:type:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

void sub_237FAC050()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_2568B7D68)
  {
    type metadata accessor for UTType();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_2568B7D68);
  }
}

uint64_t sub_237FAC0A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_237FAC0E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_237FAC124()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_237FAC148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_237FABF28;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_2568B7D88 + dword_2568B7D88))(a1, v4);
}

uint64_t sub_237FAC1B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_237F9191C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_237FAC1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_237FAC23C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B7DC8;
  if (!qword_2568B7DC8)
  {
    v1 = sub_237F919BC(&qword_2568B7DC0);
    result = MEMORY[0x23B829E84](MEMORY[0x24BDCFBE0], v1);
    atomic_store(result, (unint64_t *)&qword_2568B7DC8);
  }
  return result;
}

uint64_t sub_237FAC280(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_237F918D8(a1, a2);
  return a1;
}

uint64_t *sub_237FAC294(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_237FAC2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_237FAC314(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7D70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_237FAC35C()
{
  unint64_t result;

  result = qword_2568B7DE0;
  if (!qword_2568B7DE0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2568B7DE0);
  }
  return result;
}

uint64_t sub_237FAC398(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x23B829E84](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_237FAC3D8()
{
  JUMPOUT(0x23B829F2CLL);
}

uint64_t sub_237FAC3E4()
{
  return swift_slowAlloc();
}

uint64_t sub_237FAC3EC()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
  return swift_task_dealloc();
}

uint64_t sub_237FAC3FC()
{
  return swift_arrayDestroy();
}

uint64_t sub_237FAC404()
{
  return swift_bridgeObjectRelease();
}

void sub_237FAC40C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0xCu);
}

void sub_237FAC414()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_237FAC424()
{
  return swift_task_dealloc();
}

uint64_t sub_237FAC440(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FAC44C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

uint64_t sub_237FAC458@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t sub_237FAC464()
{
  return swift_task_dealloc();
}

uint64_t sub_237FAC46C()
{
  return swift_task_dealloc();
}

uint64_t sub_237FAC474()
{
  return type metadata accessor for Logger();
}

void sub_237FAC47C()
{
  void *v0;

}

id sub_237FAC484(uint64_t a1, const char *a2)
{
  void *v2;

  return objc_msgSend(v2, a2);
}

id sub_237FAC48C(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;

  return objc_msgSend(v2, a2, v3);
}

void sub_237FAC498()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_lock(v0);
}

void sub_237FAC4A0()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_unlock(v0);
}

uint64_t sub_237FAC4A8()
{
  return swift_task_dealloc();
}

uint64_t sub_237FAC4B4()
{
  return static os_log_type_t.default.getter();
}

uint64_t sub_237FAC4BC()
{
  return Logger.logObject.getter();
}

uint64_t sub_237FAC4C4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

BOOL sub_237FAC4D0(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

void sub_237FAC4D8()
{
  void *v0;

}

uint64_t sub_237FAC4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v4 = sub_237FC1D64();
  if ((v5 & 1) == 0)
    return 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t sub_237FAC534()
{
  uint64_t result;

  sub_237F9191C(&qword_2568B7E20);
  result = swift_allocObject();
  *(_DWORD *)(result + 20) = 0;
  *(_BYTE *)(result + 16) = 0;
  off_2568B7E10 = (_UNKNOWN *)result;
  return result;
}

void static TestConfigurations.testConfigurations()(_BYTE *a1@<X8>)
{
  os_unfair_lock_s *v1;
  _BYTE *v3;

  if (qword_2568B7318 != -1)
    swift_once();
  v3 = off_2568B7E10;
  sub_237FAC928();
  *a1 = v3[16];
  sub_237FAC91C(v1);
}

_BYTE *sub_237FAC5C8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static TestConfigurations.disableTest()()
{
  sub_237FAC5EC(0);
}

void static TestConfigurations.enableMockTest()()
{
  sub_237FAC5EC(1);
}

void static TestConfigurations.enableLiveTest()()
{
  sub_237FAC5EC(2);
}

void sub_237FAC5EC(char a1)
{
  os_unfair_lock_s *v1;
  _BYTE *v3;

  if (qword_2568B7318 != -1)
    swift_once();
  v3 = off_2568B7E10;
  sub_237FAC928();
  v3[16] = a1;
  sub_237FAC91C(v1);
}

BOOL static TestConfigurations.isSystemInstalledBinary()()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v1 = objc_msgSend(v0, sel_environment);

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  sub_237FAC4E0(0xD000000000000011, 0x8000000237FE39E0, v2);
  v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 == 0;
}

BOOL static TestConfigurations.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void TestConfigurations.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int TestConfigurations.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_237FAC78C()
{
  unint64_t result;

  result = qword_2568B7E18;
  if (!qword_2568B7E18)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for TestConfigurations, &type metadata for TestConfigurations);
    atomic_store(result, (unint64_t *)&qword_2568B7E18);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TestConfigurations(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TestConfigurations(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237FAC89C + 4 * byte_237FE9325[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237FAC8D0 + 4 * byte_237FE9320[v4]))();
}

uint64_t sub_237FAC8D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FAC8D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FAC8E0);
  return result;
}

uint64_t sub_237FAC8EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FAC8F4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237FAC8F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FAC900(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TestConfigurations()
{
  return &type metadata for TestConfigurations;
}

void sub_237FAC91C(os_unfair_lock_t lock)
{
  os_unfair_lock_unlock(lock);
}

void sub_237FAC928()
{
  os_unfair_lock_s *v0;

  os_unfair_lock_lock(v0 + 5);
}

void sub_237FAC934()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  Hasher._finalize()();
  sub_237FB8AB8();
}

uint64_t sub_237FAC974()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  sub_237FAC0E4(v0, qword_2568B7E28);
  sub_237FABF5C(v0, (uint64_t)qword_2568B7E28);
  type metadata accessor for AssetManager();
  sub_237F9191C(&qword_2568B80D8);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

void sub_237FACA08()
{
  uint64_t v0;

  type metadata accessor for AssetManager();
  v0 = swift_allocObject();
  AssetManager.init(serviceName:)(0xD00000000000001BLL, 0x8000000237FE3370);
  qword_2568B7E40 = v0;
}

uint64_t AssetManager.__allocating_init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237FB876C();
  AssetManager.init(serviceName:)(a1, a2);
  return v4;
}

uint64_t static AssetManager.shared.getter()
{
  return sub_237FACB58(&qword_2568B7328);
}

void sub_237FACABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_237FD29D0();
  v2 = v1;
  type metadata accessor for AssetManager();
  v3 = swift_allocObject();
  AssetManager.init(serviceName:)(v0, v2);
  qword_2568B7E48 = v3;
}

uint64_t static AssetManager.testable.getter()
{
  return sub_237FACB58(&qword_2568B7330);
}

uint64_t sub_237FACB58(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain();
}

void AssetManager.init(serviceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _UNKNOWN **v9;

  v3 = v2;
  v6 = type metadata accessor for XPCMessageSender();
  sub_237FB876C();
  v8 = v6;
  v9 = &off_2509D3178;
  *(_QWORD *)&v7 = XPCMessageSender.init(machServiceName:)(a1, a2);
  sub_237FB37E8(&v7, v3 + 16);
  sub_237FB8AB8();
}

uint64_t sub_237FACC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[5] = a4;
  v5[6] = a5;
  v5[7] = sub_237F9191C(&qword_2568B7768);
  v5[8] = swift_task_alloc();
  v6 = sub_237F9191C(&qword_2568B7F78);
  v5[9] = v6;
  v5[10] = *(_QWORD *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = type metadata accessor for Asset(0);
  v5[13] = swift_task_alloc();
  v5[14] = sub_237F9191C(&qword_2568B7F18);
  v5[15] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7F80);
  v5[16] = swift_task_alloc();
  v7 = sub_237F9191C(&qword_2568B7F88);
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  return swift_task_switch();
}

void sub_237FACD7C()
{
  sub_237F9191C(&qword_2568B7F10);
  sub_237FB865C();
}

uint64_t sub_237FACDB0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_237FACDEC;
  sub_237FB7AB4();
  return sub_237FB7B0C();
}

uint64_t sub_237FACDEC()
{
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FACE38()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;

  sub_237FB86AC();
  sub_237FB7E40(*(_QWORD *)(v0 + 128), 1, *(_QWORD *)(v0 + 112));
  if (v7)
  {
    sub_237FB7C74(*(_QWORD *)(v0 + 144));
    *(_QWORD *)(v0 + 32) = 0;
    sub_237F9191C(&qword_2568B7F60);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_237FA45D4();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    sub_237FB7B3C();
    return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 120);
    v3 = *(_QWORD *)(v0 + 96);
    v4 = sub_237FB8500();
    sub_237FB6994(v4, v5, v6);
    sub_237FB7E40(v2, 1, v3);
    if (v7)
    {
      v8 = *(_QWORD *)(v0 + 80);
      v9 = *(uint64_t **)(v0 + 64);
      sub_237F93CC8();
      *v9 = sub_237F96460();
      sub_237FB8290();
      sub_237F9191C(&qword_2568B7F60);
      sub_237FB85F8();
      sub_237FB7C0C(*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 80);
      sub_237F99D04(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 104), type metadata accessor for Asset);
      sub_237FB8724();
      sub_237FB85D0();
      sub_237F9191C(&qword_2568B7F60);
      sub_237FB8114();
      sub_237FB821C(*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8));
      sub_237FB8A18();
    }
    v11 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v11;
    *v11 = v0;
    v11[1] = sub_237FAD094;
    sub_237FB7AB4();
    return sub_237FB7BB8();
  }
}

uint64_t sub_237FACFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t (*v13)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_237FB7CC0();
  sub_237FB7C74(v12[18]);
  v12[3] = v12[2];
  sub_237F9191C(&qword_2568B7F60);
  sub_237FB891C();
  v12[4] = 0;
  sub_237F9191C(&qword_2568B7F60);
  sub_237FB7F64();
  sub_237FA45D4();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB8540();
  return v13(v13, v14, v15, v16, v17, v18, v19, v20, a9, a10, a11, a12);
}

uint64_t sub_237FAD094()
{
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t AssetManager.process(request:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = sub_237F9191C(&qword_2568B7768);
  v3[7] = sub_237FA4524();
  sub_237F9191C(&qword_2568B7968);
  v3[8] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7970);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = sub_237FA4524();
  v5 = sub_237F9191C(&qword_2568B7740);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  v3[6] = sub_237F9191C(&qword_2568B7768);
  v3[7] = sub_237FA4524();
  sub_237F9191C(&qword_2568B7968);
  v3[8] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7970);
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = sub_237FA4524();
  v5 = sub_237F9191C(&qword_2568B7740);
  v3[12] = v5;
  v3[13] = *(_QWORD *)(v5 - 8);
  v3[14] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v3[7] = sub_237F9191C(&qword_2568B7EB8);
  v3[8] = sub_237FA4524();
  sub_237F9191C(&qword_2568B7EC0);
  v3[9] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7EC8);
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 - 8);
  v3[12] = sub_237FA4524();
  v5 = sub_237F9191C(&qword_2568B7EA0);
  v3[13] = v5;
  v3[14] = *(_QWORD *)(v5 - 8);
  v3[15] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAD184()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_237F9191C(&qword_2568B7E58);
  sub_237FB8398();
  v1 = (__n128 *)sub_237FB7A74();
  *(_QWORD *)(v0 + 120) = v1;
  sub_237FB7BD8(v1, (__n128)xmmword_237FE7750);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  *v2 = v0;
  v2[1] = sub_237FAD214;
  sub_237FB8650();
  return AssetManager.process(requests:)(v3, v4);
}

uint64_t sub_237FAD214()
{
  uint64_t v0;

  sub_237FB8024();
  if (!v0)
    swift_bridgeObjectRelease();
  sub_237FAC434();
  return sub_237FB7A68();
}

void sub_237FAD258()
{
  sub_237FB8664();
}

uint64_t sub_237FAD270()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_237FAD2AC;
  sub_237FB7AB4();
  return sub_237FB7BB8();
}

uint64_t sub_237FAD2AC()
{
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAD2F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);

  sub_237FB7CC0();
  v3 = *(_QWORD *)(v0 + 64);
  v4 = sub_237FB7B98();
  if (v14)
  {
    sub_237FB7C74(*(_QWORD *)(v0 + 80));
    if (qword_2568B7320 != -1)
      swift_once();
    v6 = sub_237FAC474();
    sub_237FB8A60(v6, (uint64_t)qword_2568B7E28);
    v7 = sub_237FB7F84();
    if (sub_237FB7EF0(v7))
    {
      v8 = (_WORD *)sub_237FAC3E4();
      sub_237FB8AAC(v8);
      sub_237FB7CDC(&dword_237F8F000, v9, v10, "result stream for upload terminated unexpectedly");
      sub_237FAC3D8();
    }
    sub_237FB8A54();
    sub_237F93CC8();
    sub_237F96460();
    sub_237FB852C();
    v11 = sub_237FB8734();
  }
  else
  {
    sub_237FB84B8(v4, v5, &qword_2568B7768);
    sub_237FB8228();
    sub_237FB89CC();
    if (!v14)
    {
      v15 = *(_QWORD *)(v0 + 56);
      sub_237FB7ED0();
      sub_237FB7F18(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_237FB8864(v15, v16, type metadata accessor for Asset);
      sub_237FA45D4();
      sub_237FA45CC();
      sub_237FAC46C();
      sub_237FAC464();
      v17 = (uint64_t (*)(void))sub_237FB7BF8();
      return sub_237FB7AC8(v17);
    }
    sub_237FB8714();
    sub_237FB7ED0();
    v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v11 = v3;
    v12 = v1;
  }
  v13(v11, v12);
  sub_237FA4594();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return sub_237FB7AC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAD44C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_237FA4594();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAD494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  sub_237FB7C74(*(_QWORD *)(v0 + 80));
  sub_237FB7D9C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_237FA4594();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AssetManager.process(requests:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237FB899C(a1, a2);
  v3 = sub_237F9191C(&qword_2568B7E68);
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7E70);
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = sub_237FA4524();
  v5 = sub_237FB8044();
  v2[14] = v5;
  v2[15] = *(_QWORD *)(v5 - 8);
  v2[16] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_237FB899C(a1, a2);
  v3 = sub_237F9191C(&qword_2568B7ED0);
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7ED8);
  v2[11] = v4;
  v2[12] = *(_QWORD *)(v4 - 8);
  v2[13] = sub_237FA4524();
  v5 = sub_237F9191C(&qword_2568B7EE0);
  v2[14] = v5;
  v2[15] = *(_QWORD *)(v5 - 8);
  v2[16] = sub_237FA4524();
  v6 = sub_237FB8044();
  v2[17] = v6;
  v2[18] = *(_QWORD *)(v6 - 8);
  v2[19] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAD574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  os_log_type_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t (*v46)(void);

  sub_237FB7B7C();
  a23 = v27;
  a24 = v28;
  a22 = v26;
  if (qword_2568B7320 != -1)
    swift_once();
  v29 = sub_237FAC474();
  sub_237FB7D80(v29, (uint64_t)qword_2568B7E28);
  sub_237FB8484();
  v30 = sub_237FAC4B4();
  if (sub_237FB7E80(v30))
  {
    v31 = v26[16];
    v45 = v26[15];
    v32 = (uint8_t *)sub_237FAC3E4();
    a13 = sub_237FAC3E4();
    *(_DWORD *)v32 = 136315394;
    v33 = sub_237FB8398();
    v34 = sub_237FB85E0();
    MEMORY[0x23B829608](v34, v33);
    v35 = sub_237FB7FC0();
    v26[2] = sub_237FB8608(v35, v36, v37, v38);
    sub_237FB8158();
    sub_237FA3AEC();
    sub_237FB7AE4();
    sub_237FB8444();
    sub_237F91B50(&qword_2568B7E80, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], MEMORY[0x24BEE69A0]);
    sub_237FB8424();
    v39 = sub_237FB7F18(v31, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    v26[3] = sub_237FB80F0(v39, v40, &a13);
    sub_237FB8158();
    sub_237FB7FC0();
    sub_237FB7C04(&dword_237F8F000, v24, v25, "start processing %s with priority %s", v32);
    sub_237FB7F78();
    sub_237FAC3D8();
  }
  sub_237FB7AE4();

  sub_237FB859C(v26[6]);
  v46 = (uint64_t (*)(void))((char *)&dword_2568B7E78 + dword_2568B7E78);
  sub_237FB8A24();
  v41 = (_QWORD *)swift_task_alloc();
  v26[17] = v41;
  *v41 = v26;
  v41[1] = sub_237FAD768;
  sub_237FB8650();
  return sub_237FB7E0C(v42, v43, 0, v46);
}

uint64_t sub_237FAD768()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FAC414();
  sub_237FB8478();
  *(_QWORD *)(v1 + 144) = v0;
  swift_task_dealloc();
  sub_237FB89E0();
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FAD7BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);

  sub_237FB7CC0();
  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v5 = v0[8];
  v4 = v0[9];
  v6 = v0[7];
  v7 = sub_237FB8878();
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v7 + 24) = v6;
  sub_237F9191C(&qword_2568B7768);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, *MEMORY[0x24BEE6CA0], v5);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_237FB7C0C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_237FB7B3C();
  swift_task_dealloc();
  sub_237FA45D4();
  sub_237FA45CC();
  v8 = (uint64_t (*)(void))sub_237FB7BF8();
  return sub_237FB7AC8(v8);
}

uint64_t sub_237FAD870()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_237FAC46C();
  sub_237FA45D4();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAD954()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_237F9191C(&qword_2568B7E90);
  sub_237F9C72C();
  v1 = (__n128 *)sub_237FB7A74();
  *(_QWORD *)(v0 + 120) = v1;
  sub_237FB7BD8(v1, (__n128)xmmword_237FE7750);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  *v2 = v0;
  v2[1] = sub_237FAD9E4;
  sub_237FB8650();
  return AssetManager.process(requests:)(v3);
}

uint64_t sub_237FAD9E4()
{
  uint64_t v0;

  sub_237FB8024();
  if (!v0)
    swift_bridgeObjectRelease();
  sub_237FAC434();
  return sub_237FB7A68();
}

void sub_237FADA28()
{
  sub_237FB8664();
}

uint64_t sub_237FADA40()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 144) = v1;
  *v1 = v0;
  v1[1] = sub_237FADA7C;
  sub_237FB7AB4();
  return sub_237FB7BB8();
}

uint64_t sub_237FADA7C()
{
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FADAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);

  sub_237FB7CC0();
  v3 = *(_QWORD *)(v0 + 64);
  v4 = sub_237FB7B98();
  if (v14)
  {
    sub_237FB7C74(*(_QWORD *)(v0 + 80));
    if (qword_2568B7320 != -1)
      swift_once();
    v6 = sub_237FAC474();
    sub_237FB8A60(v6, (uint64_t)qword_2568B7E28);
    v7 = sub_237FB7F84();
    if (sub_237FB7EF0(v7))
    {
      v8 = (_WORD *)sub_237FAC3E4();
      sub_237FB8AAC(v8);
      sub_237FB7CDC(&dword_237F8F000, v9, v10, "result stream for download terminated unexpectedly");
      sub_237FAC3D8();
    }
    sub_237FB8A54();
    sub_237F93CC8();
    sub_237F96460();
    sub_237FB852C();
    v11 = sub_237FB8734();
  }
  else
  {
    sub_237FB84B8(v4, v5, &qword_2568B7768);
    sub_237FB8228();
    sub_237FB89CC();
    if (!v14)
    {
      v15 = *(_QWORD *)(v0 + 56);
      sub_237FB7ED0();
      sub_237FB7F18(v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
      sub_237FB8864(v15, v16, type metadata accessor for Asset);
      sub_237FA45D4();
      sub_237FA45CC();
      sub_237FAC46C();
      sub_237FAC464();
      v17 = (uint64_t (*)(void))sub_237FB7BF8();
      return sub_237FB7AC8(v17);
    }
    sub_237FB8714();
    sub_237FB7ED0();
    v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
    v11 = v3;
    v12 = v1;
  }
  v13(v11, v12);
  sub_237FA4594();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return sub_237FB7AC8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AssetManager.process(requests:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1[2] = a1;
  v2 = sub_237F9191C(&qword_2568B7E68);
  v1[3] = v2;
  v1[4] = *(_QWORD *)(v2 - 8);
  v1[5] = sub_237FA4524();
  v3 = sub_237F9191C(&qword_2568B7EA0);
  v1[6] = v3;
  v1[7] = *(_QWORD *)(v3 - 8);
  v1[8] = sub_237FA4524();
  v4 = (_QWORD *)swift_task_alloc();
  v1[9] = v4;
  *v4 = v1;
  v4[1] = sub_237FADCBC;
  sub_237FB8650();
  return AssetManager.process(requests:)(v5, v6);
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[6] = a1;
  v2[7] = v1;
  v2[8] = *v1;
  v3 = sub_237F9191C(&qword_2568B7E68);
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = sub_237FA4524();
  sub_237F9191C(&qword_2568B7740);
  v2[12] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7F00);
  v2[13] = v4;
  v2[14] = *(_QWORD *)(v4 - 8);
  v2[15] = sub_237FA4524();
  v5 = sub_237F9191C(&qword_2568B7F08);
  v2[16] = v5;
  v2[17] = *(_QWORD *)(v5 - 8);
  v2[18] = sub_237FB7C90();
  v2[19] = sub_237FB801C();
  v6 = sub_237F9191C(&qword_2568B7F10);
  v2[20] = v6;
  v2[21] = *(_QWORD *)(v6 - 8);
  v2[22] = sub_237FA4524();
  v7 = sub_237F9191C(&qword_2568B7870);
  v2[23] = v7;
  v2[24] = *(_QWORD *)(v7 - 8);
  v2[25] = sub_237FA4524();
  v8 = sub_237F9191C(&qword_2568B7848);
  v2[26] = v8;
  v2[27] = *(_QWORD *)(v8 - 8);
  v2[28] = sub_237FB7C90();
  v2[29] = sub_237FB801C();
  v9 = sub_237F9191C(&qword_2568B7730);
  v2[30] = v9;
  v2[31] = *(_QWORD *)(v9 - 8);
  v2[32] = sub_237FB7C90();
  v2[33] = sub_237FB801C();
  v10 = sub_237F9191C(&qword_2568B7E70);
  v2[34] = v10;
  v2[35] = *(_QWORD *)(v10 - 8);
  v2[36] = sub_237FA4524();
  v11 = sub_237FB8044();
  v2[37] = v11;
  v2[38] = *(_QWORD *)(v11 - 8);
  v2[39] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  sub_237F9191C(&qword_2568B89A0);
  v2[7] = sub_237FA4524();
  v3 = sub_237F9191C(&qword_2568B7740);
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = sub_237FB7C90();
  v2[11] = sub_237FB801C();
  v4 = sub_237FB8044();
  v2[12] = v4;
  v2[13] = *(_QWORD *)(v4 - 8);
  v2[14] = sub_237FA4524();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FADCBC()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FAC414();
  sub_237FB8478();
  *(_QWORD *)(v1 + 80) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FADD08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);

  sub_237FB7CC0();
  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[5];
  v4 = v0[3];
  v5 = v0[4];
  *(_QWORD *)(sub_237FB8878() + 16) = v1;
  sub_237F9191C(&qword_2568B7768);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 104))(v3, *MEMORY[0x24BEE6CA0], v4);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_237FB7D9C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_237FB7AFC();
  sub_237FAC46C();
  sub_237FAC464();
  v6 = (uint64_t (*)(void))sub_237FB7BF8();
  return sub_237FB7AC8(v6);
}

uint64_t sub_237FADDAC()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_237FAC46C();
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FADE84()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  sub_237F9191C(&qword_2568B7E90);
  sub_237F9C72C();
  v1 = (__n128 *)sub_237FB7A74();
  *(_QWORD *)(v0 + 128) = v1;
  sub_237FB7BD8(v1, (__n128)xmmword_237FE7750);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 136) = v2;
  *v2 = v0;
  v2[1] = sub_237FADF14;
  sub_237FB8650();
  return AssetManager.process(requests:)(v3, v4);
}

uint64_t sub_237FADF14()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_bridgeObjectRelease();
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FADF74()
{
  uint64_t v0;
  _QWORD *v1;

  MEMORY[0x23B829710](*(_QWORD *)(v0 + 104));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 152) = v1;
  *v1 = v0;
  v1[1] = sub_237FADFD4;
  sub_237FB7AB4();
  return sub_237FB7BB8();
}

uint64_t sub_237FADFD4()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAE018()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  os_log_type_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);

  v1 = (void *)v0[7];
  v2 = sub_237FB7B98();
  if (v4)
  {
    sub_237FB7C74(v0[11]);
    if (qword_2568B7320 != -1)
      swift_once();
    v5 = sub_237FAC474();
    sub_237FB8A60(v5, (uint64_t)qword_2568B7E28);
    v6 = sub_237FB7F84();
    if (sub_237FB7EF0(v6))
    {
      v7 = (_WORD *)sub_237FAC3E4();
      sub_237FB8AAC(v7);
      sub_237FB7CDC(&dword_237F8F000, v8, v9, "result stream for download terminated unexpectedly");
      sub_237FAC3D8();
    }

    sub_237F93CC8();
    sub_237F96460();
    sub_237FB852C();
    v10 = sub_237FB8734();
  }
  else
  {
    sub_237FB84B8(v2, v3, &qword_2568B7EB8);
    v12 = sub_237FB8228();
    v13 = v0[14];
    v14 = v0[12];
    v15 = v0[11];
    if (v12 != 1)
    {
      sub_237F99D04(v0[8], v0[4], (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
      sub_237FB7F18(v14, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
      sub_237FB7C0C(*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
      sub_237FA45D4();
      sub_237FA45CC();
      sub_237FAC46C();
      sub_237FB7AFC();
      v16 = (uint64_t (*)(void))sub_237FB7BF8();
      return v16();
    }
    v0[3] = *(_QWORD *)v0[8];
    sub_237F9191C(&qword_2568B8A60);
    swift_willThrowTypedImpl();
    sub_237FB7F18(v14, *(uint64_t (**)(uint64_t, uint64_t))(v15 + 8));
    v10 = sub_237FB89E8();
  }
  v11(v10);
  sub_237FB80B4();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_237FAE1D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_237FB80B4();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAE220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  sub_237FB7C74(*(_QWORD *)(v0 + 88));
  sub_237FB7D9C(v1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_237FB80B4();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FAE320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24)
{
  NSObject *v24;
  os_log_type_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v44;
  uint64_t (*v45)(void);

  sub_237FB7B7C();
  a23 = v27;
  a24 = v28;
  a22 = v26;
  if (qword_2568B7320 != -1)
    swift_once();
  v29 = sub_237FAC474();
  sub_237FB7D80(v29, (uint64_t)qword_2568B7E28);
  sub_237FB8484();
  v30 = sub_237FAC4B4();
  if (sub_237FB7E80(v30))
  {
    v31 = v26[19];
    v44 = v26[18];
    v32 = (uint8_t *)sub_237FAC3E4();
    a13 = sub_237FAC3E4();
    *(_DWORD *)v32 = 136315394;
    v33 = sub_237F9C72C();
    v34 = sub_237FB85E0();
    MEMORY[0x23B829608](v34, v33);
    v35 = sub_237FB7FC0();
    v26[2] = sub_237FB8608(v35, v36, v37, v38);
    sub_237FB8158();
    sub_237FA3AEC();
    sub_237FB7AE4();
    sub_237FB8444();
    sub_237F91B50(&qword_2568B7E80, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], MEMORY[0x24BEE69A0]);
    sub_237FB8424();
    v39 = sub_237FB7F18(v31, *(uint64_t (**)(uint64_t, uint64_t))(v44 + 8));
    v26[3] = sub_237FB80F0(v39, v40, &a13);
    sub_237FB8158();
    sub_237FB7FC0();
    sub_237FB7C04(&dword_237F8F000, v24, v25, "start processing %s with priority %s", v32);
    sub_237FB7F78();
    sub_237FAC3D8();
  }
  sub_237FB7AE4();

  v41 = v26[5];
  sub_237FB859C(v26[6]);
  v45 = (uint64_t (*)(void))((char *)&dword_2568B7EE8 + dword_2568B7EE8);
  v42 = (_QWORD *)swift_task_alloc();
  v26[20] = v42;
  *v42 = v26;
  v42[1] = sub_237FAE510;
  return sub_237FB7E0C(v26[16], v41, 1, v45);
}

uint64_t sub_237FAE510()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FB8478();
  *(_QWORD *)(v1 + 168) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAE564()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_237FB7B7C();
  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x24BEE4AF8];
  if (v2)
  {
    v5 = v0[8];
    v4 = v0[9];
    v26 = MEMORY[0x24BEE4AF8];
    sub_237FB5F78(0, v2, 0);
    v3 = v26;
    v6 = *(_QWORD *)(sub_237F9C72C() - 8);
    v7 = v1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    do
    {
      v9 = v0[10];
      v10 = v9 + *(int *)(v5 + 48);
      sub_237F9B398(v7, v10, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
      v11 = sub_237F92868();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v13 = *(_QWORD *)(v26 + 16);
      v12 = *(_QWORD *)(v26 + 24);
      if (v13 >= v12 >> 1)
        sub_237FB5F78(v12 > 1, v13 + 1, 1);
      v14 = v0[10];
      *(_QWORD *)(v26 + 16) = v13 + 1;
      sub_237FB885C(v14, v26+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v13);
      v7 += v8;
      --v2;
    }
    while (v2);
    v1 = v0[5];
  }
  v15 = v0[16];
  v24 = v0[15];
  v16 = v0[13];
  v25 = v0[14];
  v18 = v0[11];
  v17 = v0[12];
  v19 = v0[7];
  v20 = sub_237FAF0D4(v3);
  v21 = (_QWORD *)swift_task_alloc();
  v21[2] = v15;
  v21[3] = v20;
  v21[4] = v1;
  v21[5] = v19;
  sub_237F9191C(&qword_2568B7EB8);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v17 + 104))(v16, *MEMORY[0x24BEE6CA0], v18);
  sub_237FB89E8();
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_237FAC404();
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v15, v25);
  sub_237FB7FB0();
  sub_237FB84B0();
  sub_237FA45CC();
  sub_237FAC464();
  sub_237FB84A8();
  v22 = (uint64_t (*)(void))sub_237FB7BF8();
  return sub_237FB7DF0(v22);
}

uint64_t sub_237FAE740()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FAE794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a1;
  v24 = a3;
  v4 = sub_237F9191C(&qword_2568B7F60);
  v5 = *(_QWORD *)(v4 - 8);
  v22 = v4;
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_237F9191C(&qword_2568B7E70);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v14, 1, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v23, v4);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = (v10 + *(unsigned __int8 *)(v5 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v18 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v16, v11, v8);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v19 + v17, v7, v22);
  *(_QWORD *)(v19 + v18) = v24;
  sub_237FAEFBC((uint64_t)v14, (uint64_t)&unk_2568B8090, v19);
  return swift_release();
}

uint64_t sub_237FAE970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[3] = a4;
  v5[4] = a5;
  v5[5] = sub_237F9191C(&qword_2568B7768);
  v5[6] = swift_task_alloc();
  v6 = sub_237F9191C(&qword_2568B7F78);
  v5[7] = v6;
  v5[8] = *(_QWORD *)(v6 - 8);
  v5[9] = swift_task_alloc();
  v5[10] = type metadata accessor for Asset(0);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  v5[13] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7F18);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = type metadata accessor for UploadResponseMessage();
  v5[17] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7FB0);
  v5[18] = swift_task_alloc();
  v7 = sub_237F9191C(&qword_2568B7FB8);
  v5[19] = v7;
  v5[20] = *(_QWORD *)(v7 - 8);
  v5[21] = swift_task_alloc();
  return swift_task_switch();
}

void sub_237FAEAE4()
{
  sub_237F9191C(&qword_2568B7E70);
  sub_237FB865C();
}

uint64_t sub_237FAEB18()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v1;
  *v1 = v0;
  v1[1] = sub_237FAEB54;
  sub_237FB7AB4();
  return sub_237FB7B0C();
}

uint64_t sub_237FAEB54()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAEB98()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;

  sub_237FB7B7C();
  v1 = v0[18];
  sub_237FB7E40(v1, 1, v0[16]);
  if (v2)
  {
    sub_237FB848C();
    sub_237FB814C(v3);
    sub_237FA45D4();
    sub_237FAC46C();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    sub_237FB7B3C();
    sub_237FB7C6C();
    sub_237FB7FB0();
    sub_237FB84A8();
    v4 = (uint64_t (*)(void))sub_237FB7BF8();
    return sub_237FB7DF0(v4);
  }
  else
  {
    sub_237F99D04(v1, v0[17], (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      v7 = v0[14];
      v8 = v0[10];
      sub_237FB6994(v0[17], v0[15], &qword_2568B7F18);
      v9 = sub_237FB8500();
      sub_237FB764C(v9, v10, &qword_2568B7F18);
      sub_237FB7E40(v7, 1, v8);
      if (v2)
      {
        v11 = v0[8];
        v12 = (uint64_t *)v0[6];
        sub_237F93CC8();
        *v12 = sub_237F96460();
        sub_237FB8290();
        sub_237F9191C(&qword_2568B7F60);
        sub_237FB85F8();
        sub_237FB7C0C(*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8));
      }
      else
      {
        sub_237F99D04(v0[14], v0[13], type metadata accessor for Asset);
        if (qword_2568B7320 != -1)
          swift_once();
        v13 = sub_237FAC474();
        v14 = sub_237FABF5C(v13, (uint64_t)qword_2568B7E28);
        sub_237FB850C(v14, v15, type metadata accessor for Asset);
        v16 = v14;
        Logger.logObject.getter();
        v17 = sub_237FB8538();
        v18 = sub_237FB7FC8(v16);
        v19 = v0[12];
        if (v18)
        {
          v20 = v0[11];
          v21 = sub_237FAC3E4();
          sub_237FAC3E4();
          *(_DWORD *)v21 = 136315138;
          sub_237F9B398(v19, v20, type metadata accessor for Asset);
          v22 = String.init<A>(describing:)();
          *(_QWORD *)(v21 + 4) = sub_237FB894C(v22, v23, v24, v25, v26, v27);
          sub_237FA3C74();
          sub_237FB7484(v19, type metadata accessor for Asset);
          sub_237FAC40C(&dword_237F8F000, v16, v17, "successfully uploaded asset %s", (uint8_t *)v21);
          sub_237FAC3FC();
          sub_237FAC3D8();
        }
        sub_237FB88D4(v18, type metadata accessor for Asset);

        v28 = v0[8];
        sub_237FB8724();
        sub_237FB85D0();
        sub_237F9191C(&qword_2568B7F60);
        sub_237FB8114();
        sub_237FB821C(*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8));
        sub_237FB8A18();
      }
      sub_237FB7678(v0[15], &qword_2568B7F18);
      v29 = (_QWORD *)swift_task_alloc();
      v0[23] = v29;
      *v29 = v0;
      v29[1] = sub_237FAEEF0;
      sub_237FB7AB4();
      return sub_237FB7DD4();
    }
    else
    {
      return sub_237FB8704();
    }
  }
}

uint64_t sub_237FAEEF0()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAEF34()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FB86E0();
  sub_237FB848C();
  sub_237FB8458(v1);
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB7FB0();
  sub_237FB84B0();
  return sub_237FB7B44(*(uint64_t (**)(void))(v0 + 8));
}

void sub_237FAEFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_237FAEFBC(a1, a2, a3);
}

void sub_237FAEFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_237FAEFBC(a1, a2, a3);
}

void sub_237FAEFBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char v6;

  v5 = sub_237FB8044();
  sub_237FB7E40(a1, 1, v5);
  if (v6)
  {
    sub_237FB7678(a1, &qword_2568B89A0);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(_QWORD *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  swift_task_create();
  sub_237FB8AB8();
}

uint64_t sub_237FAF0D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_QWORD *)(a1 + 16))
  {
    sub_237F9191C(&qword_2568B8000);
    v1 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v1 = MEMORY[0x24BEE4B00];
  }
  v4 = v1;
  v2 = swift_bridgeObjectRetain();
  sub_237FB6DF0(v2, 1, &v4);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_237FAF17C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v30 = a4;
  v31 = a5;
  v28 = a1;
  v29 = a3;
  v6 = sub_237F9191C(&qword_2568B7FC0);
  v7 = *(_QWORD *)(v6 - 8);
  v26 = v6;
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v27 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_237F9191C(&qword_2568B7EE0);
  v10 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v28, v6);
  v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = (*(unsigned __int8 *)(v7 + 80) + v18 + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = 0;
  *(_QWORD *)(v21 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v21 + v17, v12, v25);
  *(_QWORD *)(v21 + v18) = v29;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v27, v26);
  v22 = v31;
  *(_QWORD *)(v21 + v20) = v30;
  *(_QWORD *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_237FAA8B0((uint64_t)v15, (uint64_t)&unk_2568B7FD0, v21);
  return swift_release();
}

uint64_t sub_237FAF384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7[13] = a6;
  v7[14] = a7;
  v7[11] = a4;
  v7[12] = a5;
  v7[15] = sub_237F9191C(&qword_2568B7EB8);
  v7[16] = swift_task_alloc();
  v8 = sub_237F9191C(&qword_2568B7FD8);
  v7[17] = v8;
  v7[18] = *(_QWORD *)(v8 - 8);
  v7[19] = swift_task_alloc();
  v9 = type metadata accessor for AssetDownloadRequest();
  v7[20] = v9;
  v7[21] = *(_QWORD *)(v9 - 8);
  v7[22] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7DA0);
  v7[23] = swift_task_alloc();
  v10 = type metadata accessor for URL();
  v7[24] = v10;
  v7[25] = *(_QWORD *)(v10 - 8);
  v7[26] = swift_task_alloc();
  v7[27] = swift_task_alloc();
  v11 = type metadata accessor for TaskPriority();
  v7[28] = v11;
  v7[29] = *(_QWORD *)(v11 - 8);
  v7[30] = swift_task_alloc();
  v7[31] = type metadata accessor for AssetDownloadResponse();
  v7[32] = swift_task_alloc();
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7FE0);
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  v7[37] = type metadata accessor for DownloadResponseMessage();
  v7[38] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7FE8);
  v7[39] = swift_task_alloc();
  v12 = sub_237F9191C(&qword_2568B7FF0);
  v7[40] = v12;
  v7[41] = *(_QWORD *)(v12 - 8);
  v7[42] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FAF5D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_237F9191C(&qword_2568B7EE0);
  MEMORY[0x23B829710](v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v2;
  *v2 = v0;
  v2[1] = sub_237FAF678;
  sub_237FAC434();
  return sub_237FB7B0C();
}

uint64_t sub_237FAF678()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FAF700()
{
  _QWORD *v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  void *v82;
  os_log_type_t v83;
  _WORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t (*v90)(uint64_t, uint64_t);
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  void *v95;
  void *v96;
  NSURL *v97;
  void *v98;
  void *v99;
  unsigned int v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (*v151)(uint64_t, uint64_t);
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156[2];

  v1 = v0;
  v156[1] = *MEMORY[0x24BDAC8D0];
  sub_237FB7B98();
  if (v2)
  {
LABEL_3:
    v3 = 41;
LABEL_4:
    sub_237FB7C74(v1[v3]);
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    sub_237FB7B3C();
    sub_237FB7C6C();
    sub_237FB7FB0();
    sub_237FAC46C();
    sub_237FA45D4();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return ((uint64_t (*)(void))v1[1])();
  }
  v5 = sub_237FB89E8();
  sub_237F99D04(v5, v6, v7);
  v8 = sub_237FB8228();
  v9 = (uint64_t *)v0[38];
  if (v8 == 1)
  {
    v10 = *v9;
    if (qword_2568B7320 != -1)
      swift_once();
    v11 = sub_237FAC474();
    v12 = sub_237FABF5C(v11, (uint64_t)qword_2568B7E28);
    swift_bridgeObjectRetain_n();
    Logger.logObject.getter();
    v13 = sub_237FB7F84();
    if (sub_237FAC4D0(v12))
    {
      v14 = sub_237FAC3E4();
      v15 = (_QWORD *)sub_237FAC3E4();
      *(_DWORD *)v14 = 138412290;
      sub_237FA4E9C();
      sub_237F96460();
      *v16 = v10;
      sub_237FB8234();
      v17 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v14 + 4) = v17;
      *v15 = v17;
      sub_237FB7AE4();
      sub_237FAC40C(&dword_237F8F000, v12, v13, "requests failed due to server blocking %@", (uint8_t *)v14);
      sub_237F9191C(&qword_2568B7DB0);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FB7AE4();

    sub_237FA4E9C();
    v35 = sub_237F96460();
    *v36 = v10;
    v0[4] = v35;
    sub_237F9191C(&qword_2568B7FC0);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    goto LABEL_23;
  }
  v19 = v0[35];
  v18 = v0[36];
  v20 = v0[31];
  v21 = (uint64_t *)((char *)v9 + *(int *)(sub_237F9191C(&qword_2568B7FF8) + 48));
  v23 = *v21;
  v22 = v21[1];
  v24 = sub_237FB8500();
  sub_237FB885C(v24, v25);
  sub_237FB764C(v18, v19, &qword_2568B7FE0);
  sub_237FB7E40(v19, 1, v20);
  if (v2)
  {
    sub_237FA3C74();
    if (qword_2568B7320 != -1)
      swift_once();
    v26 = v0[14];
    v27 = sub_237FAC474();
    sub_237FB7D80(v27, (uint64_t)qword_2568B7E28);
    sub_237FB8484();
    v28 = sub_237FB7F84();
    if (sub_237FB7FC8(v26))
    {
      v29 = v0[20];
      v30 = sub_237FAC3E4();
      v156[0] = sub_237FAC3E4();
      *(_DWORD *)v30 = 136315138;
      v31 = swift_bridgeObjectRetain();
      v32 = MEMORY[0x23B829608](v31, v29);
      v34 = v33;
      sub_237FA3C74();
      *(_QWORD *)(v30 + 4) = sub_237FAB354(v32, v34, v156);
      swift_bridgeObjectRelease();
      sub_237FB7AE4();
      sub_237FAC40C(&dword_237F8F000, v26, v28, "failed to process requests %s", (uint8_t *)v30);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FB7AE4();

    v50 = v0[36];
    v51 = v0[18];
    v52 = (uint64_t *)v1[16];
    sub_237F93CC8();
    *v52 = sub_237F96460();
    sub_237FB8290();
    sub_237F9191C(&qword_2568B7FC0);
    sub_237FB8114();
    sub_237FB821C(*(uint64_t (**)(uint64_t, uint64_t))(v51 + 8));
    v53 = v50;
    goto LABEL_22;
  }
  v150 = v23;
  sub_237F99D04(v0[35], v0[34], (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  if (qword_2568B7320 != -1)
    swift_once();
  v148 = sub_237FAC474();
  v37 = sub_237FABF5C(v148, (uint64_t)qword_2568B7E28);
  sub_237FB850C(v37, v38, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.default.getter();
  v41 = os_log_type_enabled(v39, v40);
  v147 = (uint64_t)(v0 + 4);
  if (v41)
  {
    v42 = v0[30];
    v144 = v0[29];
    v43 = sub_237FAC3E4();
    v156[0] = sub_237FAC3E4();
    *(_DWORD *)v43 = 136315394;
    sub_237F91B50(&qword_2568B8A90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v44 = sub_237FB8424();
    v0[9] = sub_237FB84F4(v44, v45);
    sub_237FB88A0();
    v46 = sub_237FAC404();
    sub_237FB85C8(v46, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    *(_WORD *)(v43 + 12) = 2080;
    static Task<>.currentPriority.getter();
    sub_237F91B50(&qword_2568B7E80, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6990], MEMORY[0x24BEE69A0]);
    v47 = sub_237FB88BC();
    v49 = v48;
    sub_237FB7FB8(v42, *(uint64_t (**)(uint64_t, uint64_t))(v144 + 8));
    v0[10] = sub_237FAB354(v47, v49, v156);
    sub_237FB88A0();
    sub_237FB88C4();
    sub_237FB7C04(&dword_237F8F000, v39, v40, "successfully downloaded asset at %s with priority %s", (uint8_t *)v43);
    swift_arrayDestroy();
    sub_237FAC3D8();
  }
  sub_237FB85C8(v41, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);

  if (!*(_QWORD *)(v0[12] + 16) || (v57 = sub_237FC1DB4(v0[34]), (v55 & 1) == 0))
  {
    sub_237FB8160(v0[23], v55, v56, v0[24]);
    goto LABEL_30;
  }
  v58 = v0[24];
  v59 = v0[25];
  v61 = v1[22];
  v60 = v1[23];
  v62 = v1[20];
  sub_237F9B398(*(_QWORD *)(v1[12] + 56) + *(_QWORD *)(v1[21] + 72) * v57, v61, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
  v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 16);
  v63(v60, v61 + *(int *)(v62 + 36), v58);
  sub_237FB8A94();
  _s11CloudAssets21UploadResponseMessageOwst_0(v60, 0, 1, v58);
  sub_237FB7B98();
  if (v2)
  {
LABEL_30:
    v79 = v1[23];
    v80 = v1[18];
    v81 = (uint64_t *)v1[16];
    v82 = (void *)v1[13];
    swift_bridgeObjectRelease();
    sub_237FB7678(v79, &qword_2568B7DA0);
    sub_237F93CC8();
    *v81 = sub_237F96460();
    sub_237FB8290();
    sub_237F9191C(&qword_2568B7FC0);
    AsyncThrowingStream.Continuation.yield(_:)();
    sub_237FB7C0C(*(uint64_t (**)(uint64_t, uint64_t))(v80 + 8));
    sub_237FB8980();
    v83 = sub_237FB7F84();
    if (sub_237FB7EF0(v83))
    {
      v84 = (_WORD *)sub_237FAC3E4();
      sub_237FB8AAC(v84);
      sub_237FB7CDC(&dword_237F8F000, v85, v86, "invalid request id");
      sub_237FAC3D8();
    }
    v87 = v1[36];

    sub_237FB8A8C(v88, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    sub_237FB7678(v87, &qword_2568B7FE0);
    goto LABEL_3;
  }
  v65 = v1[26];
  v64 = v1[27];
  v66 = v1[24];
  v67 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v1[25] + 32))(v64, v1[23], v66);
  sub_237FB850C(v67, v68, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  v63(v65, v64, v66);
  v69 = sub_237FB8980();
  v70 = static os_log_type_t.default.getter();
  v71 = os_log_type_enabled(v69, v70);
  v154 = v1 + 7;
  if (v71)
  {
    v141 = v1[26];
    v72 = v1[24];
    v145 = v1[25];
    v73 = sub_237FAC3E4();
    v156[0] = sub_237FAC3E4();
    *(_DWORD *)v73 = 136315394;
    sub_237F91B50(&qword_2568B8A90, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB28]);
    v74 = sub_237FB88DC();
    v1[7] = sub_237FB84F4(v74, v75);
    sub_237FB8158();
    v76 = sub_237FAC404();
    sub_237FB8A8C(v76, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    *(_WORD *)(v73 + 12) = 2080;
    v77 = sub_237FB88DC();
    v1[8] = sub_237FB84F4(v77, v78);
    sub_237FB88A0();
    sub_237FAC404();
    (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v141, v72);
    sub_237FB7C04(&dword_237F8F000, v69, v70, "moving file from %s to %s", (uint8_t *)v73);
    sub_237FB7F50();
    sub_237FAC3D8();
  }
  sub_237FB8A8C(v71, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  v89 = sub_237FB8500();
  v151 = v90;
  ((void (*)(uint64_t))v90)(v89);

  v91 = String.utf8CString.getter();
  v92 = sandbox_extension_consume();
  sub_237FA38F4();
  if (v92 < 0)
  {
    sub_237FB85E0();
    sub_237FB8980();
    v106 = sub_237FB7F84();
    if (sub_237FB7FC8(v91))
    {
      v107 = (uint8_t *)sub_237FAC3E4();
      v156[0] = sub_237FAC3E4();
      *(_DWORD *)v107 = 136315138;
      sub_237FB85E0();
      v1[6] = sub_237FAB354(v150, v22, v156);
      sub_237FB8834();
      swift_bridgeObjectRelease_n();
      sub_237FAC40C(&dword_237F8F000, v91, v106, "failed to consume extension token %s", v107);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FB7AE4();

    v123 = v1[41];
    v122 = v1[42];
    sub_237FB8270();
    sub_237F93CC8();
    sub_237F96460();
    v124 = swift_willThrow();
    v132 = sub_237FB85B8(v124, v125, v126, v127, v128, v129, v130, v131, v139, v140, v142, v143, v146, v147, v148, v150, v151);
    sub_237FB85C8(v132, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    sub_237FB7678(v92, &qword_2568B7FE0);
    v120 = *(uint64_t (**)(uint64_t, uint64_t))(v123 + 8);
    v121 = v122;
    goto LABEL_40;
  }
  v93 = v1[31];
  sub_237FB7FC0();
  v94 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v93 + 24));
  v96 = v95;
  URL._bridgeToObjectiveC()(v97);
  v99 = v98;
  v1[5] = 0;
  v100 = objc_msgSend(v94, sel_moveItemAtURL_toURL_error_, v96, v98, v1 + 5);

  v101 = (void *)v1[5];
  if (!v100)
  {
    v109 = v1[41];
    v108 = v1[42];
    sub_237FB8270();
    v110 = v101;
    _convertNSErrorToError(_:)();

    v111 = swift_willThrow();
    v119 = sub_237FB85B8(v111, v112, v113, v114, v115, v116, v117, v118, v139, v140, v142, v143, v146, v147, v148, v150, v151);
    sub_237FB85C8(v119, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    sub_237FB7678(v92, &qword_2568B7FE0);
    v120 = *(uint64_t (**)(uint64_t, uint64_t))(v109 + 8);
    v121 = v108;
LABEL_40:
    sub_237FB7D9C(v121, v120);
    if (qword_2568B7320 != -1)
      swift_once();
    sub_237FABF5C(v149, (uint64_t)qword_2568B7E28);
    sub_237FB88CC();
    sub_237FB88CC();
    v133 = Logger.logObject.getter();
    v134 = static os_log_type_t.error.getter();
    v1 += 7;
    if (sub_237FB7FC8(v133))
    {
      v135 = (uint8_t *)sub_237FAC3E4();
      v136 = (_QWORD *)sub_237FAC3E4();
      *(_DWORD *)v135 = 138412290;
      sub_237FB88CC();
      v137 = _swift_stdlib_bridgeErrorToNSError();
      v154[3] = v137;
      sub_237FB8834();
      *v136 = v137;
      sub_237FB841C();
      sub_237FB841C();
      sub_237FAC40C(&dword_237F8F000, v133, v134, "failed to process requests due to error %@", v135);
      sub_237F9191C(&qword_2568B7DB0);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FB841C();
    sub_237FB841C();
    v138 = (uint64_t *)v154[16];

    sub_237F93CC8();
    *v138 = sub_237F96460();
    sub_237FB89E8();
    sub_237FB8290();
    sub_237F9191C(&qword_2568B7FC0);
    AsyncThrowingStream.Continuation.yield(_:)();
    sub_237FB841C();
    v3 = 18;
    goto LABEL_4;
  }
  v102 = v1[34];
  v153 = v1[27];
  v155 = v1[36];
  v152 = v1[24];
  v103 = v1[18];
  v104 = v1[19];
  sub_237F9B398(v102, v1[16], (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  swift_storeEnumTagMultiPayload();
  v105 = v101;
  sub_237F9191C(&qword_2568B7FC0);
  AsyncThrowingStream.Continuation.yield(_:)();
  sub_237FB8900(v104, *(uint64_t (**)(uint64_t, uint64_t))(v103 + 8));
  sandbox_extension_release();
  v151(v153, v152);
  sub_237FB7484(v102, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  v53 = v155;
LABEL_22:
  sub_237FB7678(v53, &qword_2568B7FE0);
LABEL_23:
  v54 = (_QWORD *)swift_task_alloc();
  v1[44] = v54;
  *v54 = v1;
  v54[1] = sub_237FB05C4;
  sub_237FAC434();
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FB05C4()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB064C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t (*v26)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  sub_237FB8674();
  v41 = *MEMORY[0x24BDAC8D0];
  sub_237FB7C74(v18[41]);
  if (qword_2568B7320 != -1)
    swift_once();
  v19 = sub_237FAC474();
  sub_237FABF5C(v19, (uint64_t)qword_2568B7E28);
  sub_237FB7FE4();
  sub_237FB7FE4();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.error.getter();
  if (sub_237FAC4D0(v20))
  {
    v22 = (uint8_t *)sub_237FAC3E4();
    v23 = (_QWORD *)sub_237FAC3E4();
    sub_237FB8810(5.7779e-34);
    sub_237FB7FE4();
    v24 = sub_237FB8324();
    v18[3] = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v24;
    sub_237FB7F70();
    sub_237FB7F70();
    sub_237FAC40C(&dword_237F8F000, v20, v21, "failed to process requests due to error %@", v22);
    sub_237F9191C(&qword_2568B7DB0);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }
  sub_237FB7F70();
  sub_237FB7F70();
  v25 = (uint64_t *)v18[16];

  sub_237F93CC8();
  *v25 = sub_237F96460();
  sub_237FB8290();
  sub_237F9191C(&qword_2568B7FC0);
  AsyncThrowingStream.Continuation.yield(_:)();
  sub_237FB7F70();
  v35 = v18[30];
  v36 = v18[27];
  v37 = v18[26];
  v38 = v18[23];
  v39 = v18[22];
  v40 = v18[16];
  sub_237FB8458(v18[18]);
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB7FB0();
  sub_237FA45D4();
  swift_task_dealloc();
  sub_237FB87B0();
  sub_237FB84B0();
  sub_237FB84A8();
  swift_task_dealloc();
  sub_237FAC46C();
  swift_task_dealloc();
  sub_237FB8794();
  return v26(v26, v27, v28, v29, v30, v31, v32, v33, v35, v36, v37, v38, v39, v40, v41, a16, a17, a18);
}

void sub_237FB08A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_237FA3964();
  v25 = v0;
  v26 = v1;
  v3 = v2;
  v5 = v4;
  v24 = v6;
  v7 = sub_237F9191C(&qword_2568B7F60);
  v8 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v7);
  v10 = sub_237F9191C(v3);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_237FB8044();
  sub_237FB8160((uint64_t)v16, v18, v19, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v24, v7);
  v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v21 = (v12 + *(unsigned __int8 *)(v8 + 80) + v20) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v22 + v20, v13, v10);
  sub_237FB89B0(v22 + v21, (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v8 + 32));
  sub_237FAA8B0((uint64_t)v16, v26, v22);
  swift_release();
  sub_237FA3848();
}

uint64_t sub_237FB0A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[4] = a4;
  v5[5] = a5;
  v5[6] = type metadata accessor for AssetDownloadResponse();
  v5[7] = swift_task_alloc();
  v5[8] = sub_237F9191C(&qword_2568B7768);
  v5[9] = swift_task_alloc();
  v6 = sub_237F9191C(&qword_2568B7F78);
  v5[10] = v6;
  v5[11] = *(_QWORD *)(v6 - 8);
  v5[12] = swift_task_alloc();
  v5[13] = sub_237F9191C(&qword_2568B7EB8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7EC0);
  v5[16] = swift_task_alloc();
  v7 = sub_237F9191C(&qword_2568B7EC8);
  v5[17] = v7;
  v5[18] = *(_QWORD *)(v7 - 8);
  v5[19] = swift_task_alloc();
  return swift_task_switch();
}

void sub_237FB0B68()
{
  sub_237F9191C(&qword_2568B7EA0);
  sub_237FB865C();
}

uint64_t sub_237FB0B9C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 160) = v1;
  *v1 = v0;
  v1[1] = sub_237FB0BD8;
  sub_237FB7AB4();
  return sub_237FB7B0C();
}

uint64_t sub_237FB0BD8()
{
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB0C24()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  int EnumCaseMultiPayload;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 128);
  sub_237FB7B98();
  if (v2)
  {
    sub_237FB7C74(*(_QWORD *)(v0 + 144));
    sub_237FB81C4();
    sub_237FAC46C();
    sub_237FA45D4();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 120);
    sub_237FB885C(v1, v4);
    sub_237FB764C(v4, v5, &qword_2568B7EB8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    v7 = *(_QWORD **)(v0 + 112);
    v8 = *(_QWORD **)(v0 + 72);
    if (EnumCaseMultiPayload == 1)
    {
      *v8 = *v7;
    }
    else
    {
      v10 = *(_QWORD *)(v0 + 48);
      v9 = *(_QWORD *)(v0 + 56);
      sub_237F99D04((uint64_t)v7, v9, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
      sub_237F9B398(v9 + *(int *)(v10 + 20), (uint64_t)v8, type metadata accessor for Asset);
      sub_237FB8A94();
    }
    sub_237FB8500();
    swift_storeEnumTagMultiPayload();
    v11 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 88);
    v12 = *(_QWORD *)(v0 + 96);
    sub_237F9191C(&qword_2568B7F60);
    AsyncThrowingStream.Continuation.yield(_:)();
    sub_237FB7F18(v12, *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8));
    sub_237FB7678(v11, &qword_2568B7EB8);
    v14 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 168) = v14;
    *v14 = v0;
    v14[1] = sub_237FB0DBC;
    sub_237FB7AB4();
    return sub_237FB7F38();
  }
}

uint64_t sub_237FB0DBC()
{
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB0E08()
{
  uint64_t v0;

  sub_237FB7C74(*(_QWORD *)(v0 + 144));
  *(_QWORD *)(v0 + 24) = *(_QWORD *)(v0 + 16);
  sub_237F9191C(&qword_2568B7F60);
  sub_237FB891C();
  sub_237FB81C4();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AssetManager.process(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_237FB8300();
}

{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return sub_237FB8300();
}

uint64_t sub_237FB0E94()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_237F9191C(&qword_2568B7E58);
  sub_237FB8398();
  v1 = (__n128 *)sub_237FB7A74();
  *(_QWORD *)(v0 + 32) = v1;
  sub_237FB7BD8(v1, (__n128)xmmword_237FE7750);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  v3 = sub_237FB8960(v2, (uint64_t)sub_237FB0F14);
  return AssetManager.process(requests:)(v3);
}

uint64_t sub_237FB0F14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_237FB7F8C();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 56) = v0;
  }
  sub_237FAC434();
  return sub_237FB7BEC();
}

uint64_t sub_237FB0F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 56);
  type metadata accessor for AssetUploadCoordinator();
  v2 = sub_237FB8954();
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + 112) = v1;
  v3 = sub_237FB82D8();
  return sub_237FB837C(v3, v4);
}

uint64_t sub_237FB0FA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FB1150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  os_log_type_t v21;
  _DWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v33;

  sub_237FB8674();
  if (qword_2568B7320 != -1)
    swift_once();
  v19 = sub_237FAC474();
  v20 = (void *)sub_237FABF5C(v19, (uint64_t)qword_2568B7E28);
  v18[40] = (uint64_t)v20;
  sub_237FB7DA4();
  sub_237FB8484();
  v21 = sub_237FAC4B4();
  if (sub_237FB8630(v21))
  {
    v22 = (_DWORD *)sub_237FAC3E4();
    sub_237FAC3E4();
    *v22 = 136315394;
    sub_237FB8398();
    sub_237FB886C();
    sub_237FB8908();
  }
  sub_237FB7AE4();

  sub_237FB859C(v18[7]);
  v33 = (char *)&dword_2568B7E78 + dword_2568B7E78;
  sub_237FB8A24();
  v23 = (_QWORD *)swift_task_alloc();
  v18[41] = (uint64_t)v23;
  *v23 = v18;
  v23[1] = sub_237FB1340;
  sub_237FB8794();
  return v27(v24, v25, v26, v27, v28, v29, v30, v31, a9, a10, a11, a12, a13, v33, a15, a16, a17, a18);
}

uint64_t sub_237FB1340()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FAC414();
  sub_237FB8478();
  *(_QWORD *)(v1 + 336) = v0;
  swift_task_dealloc();
  sub_237FB89E0();
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FB1394()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 200);
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v17 = *(_QWORD *)(v0 + 128);
  v18 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 48);
  v20 = *(_QWORD *)(v0 + 64);
  v8 = *MEMORY[0x24BEE6CA0];
  *(_DWORD *)(v0 + 368) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 104))(v2, v8, v3);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_237FB7D9C(v2, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v14, v1, v13);
  sub_237F9191C(&qword_2568B7F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v5, v8, v7);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_237FB8410(*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v18, v15, v17);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v9;
  v9[2] = v21;
  v9[3] = v18;
  v9[4] = v14;
  v9[5] = v19;
  v9[6] = v20;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 352) = v10;
  sub_237F9191C(&qword_2568B7F20);
  *v10 = v0;
  v10[1] = sub_237FB1580;
  sub_237FAC434();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_237FB1580()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FAC414();
  sub_237FB8478();
  *(_QWORD *)(v1 + 360) = v0;
  swift_task_dealloc();
  sub_237FA45D4();
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FB15D0()
{
  uint64_t v0;

  sub_237FB7B7C();
  sub_237FB7D14();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB7FB0();
  sub_237FAC46C();
  sub_237FB87B0();
  sub_237FB84B0();
  sub_237FB84A8();
  return sub_237FB7DF0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FB1630()
{
  uint64_t v0;
  NSObject *v1;
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(NSObject **)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain_n();
  Logger.logObject.getter();
  sub_237FB8538();
  if (sub_237FAC4D0(v1))
  {
    v2 = (_DWORD *)sub_237FAC3E4();
    sub_237FAC3E4();
    *v2 = 136315138;
    type metadata accessor for AssetSkeleton();
    sub_237FB8A24();
    sub_237FB8908();
  }
  sub_237FB7AE4();

  v3 = *(unsigned int *)(v0 + 368);
  v26 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 280);
  v25 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 216);
  v22 = *(_QWORD *)(v0 + 208);
  v23 = *(_QWORD *)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 72);
  v10 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, uint64_t))(v15 + 16))(v5, v4);
  *(_QWORD *)(sub_237FB8878() + 16) = v6;
  sub_237F9191C(&qword_2568B7768);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104))(v8, v3, v9);
  AsyncThrowingStream.init<>(_:bufferingPolicy:_:)();
  sub_237FA45D4();
  type metadata accessor for AssetsUploadCoordinator();
  sub_237FB81E0();
  sub_237F9838C(v27, v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v6, v17);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v4, v14);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v26, v25);
  swift_task_dealloc();
  sub_237FB7AFC();
  sub_237FB7B18();
  sub_237FB7FB0();
  sub_237FA45CC();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_237FB7C6C();
  sub_237FAC464();
  swift_task_dealloc();
  swift_task_dealloc();
  sub_237FA45D4();
  sub_237FB7B3C();
  v11 = sub_237FB82D8();
  return v12(v11);
}

uint64_t sub_237FB193C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_237FB7B7C();
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 288);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  sub_237FB7C74(*(_QWORD *)(v0 + 168));
  sub_237FB821C(*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_237FB8900(v4, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  sub_237FB7FB8(v2, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v8);
  sub_237FB7D14();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB7FB0();
  sub_237FAC46C();
  sub_237FB87B0();
  sub_237FB84B0();
  sub_237FB84A8();
  return sub_237FB7DF0(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FB1A0C()
{
  uint64_t v0;
  __n128 *v1;
  _QWORD *v2;
  uint64_t v3;

  sub_237F9191C(&qword_2568B7E90);
  sub_237F9C72C();
  v1 = (__n128 *)sub_237FB7A74();
  *(_QWORD *)(v0 + 32) = v1;
  sub_237FB7BD8(v1, (__n128)xmmword_237FE7750);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  v3 = sub_237FB8960(v2, (uint64_t)sub_237FB1A8C);
  return AssetManager.process(requests:)(v3);
}

uint64_t sub_237FB1A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_237FB7F8C();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v2 + 56) = v0;
  }
  sub_237FAC434();
  return sub_237FB7BEC();
}

uint64_t sub_237FB1ADC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);

  v1 = *(_QWORD *)(v0 + 56);
  type metadata accessor for AssetDownloadCoordinator();
  v2 = sub_237FB8954();
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + 112) = v1;
  v3 = sub_237FB82D8();
  return sub_237FB837C(v3, v4);
}

uint64_t sub_237FB1BA4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  sub_237FB8674();
  if (qword_2568B7320 != -1)
    swift_once();
  v2 = sub_237FAC474();
  sub_237FB7D80(v2, (uint64_t)qword_2568B7E28);
  sub_237FB8484();
  v3 = sub_237FAC4B4();
  if (sub_237FB8630(v3))
  {
    v4 = (_DWORD *)sub_237FAC3E4();
    sub_237FAC3E4();
    *v4 = 136315394;
    sub_237F9C72C();
    sub_237FB886C();
    sub_237FB8908();
  }
  sub_237FB7AE4();

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 120) = v5;
  *v5 = v1;
  v5[1] = sub_237FB1D60;
  sub_237FB8794();
  return AssetManager.process(requests:)(v6);
}

uint64_t sub_237FB1D60()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FAC414();
  sub_237FB8478();
  *(_QWORD *)(v1 + 128) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB1DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_237FB7CC0();
  v13 = v12[11];
  v14 = v12[12];
  v16 = v12[9];
  v15 = v12[10];
  v17 = v12[7];
  v18 = v12[6];
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v16 + 16))(v15, v13, v12[8]);
  type metadata accessor for AssetsDownloadCoordinator();
  sub_237FB81E0();
  v19 = sub_237F9CADC(v15);
  _s11CloudAssets21UploadResponseMessageOwst_0(v17, 1, 1, v14);
  v20 = (_QWORD *)sub_237FB876C();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v19;
  v20[5] = v18;
  swift_retain();
  sub_237FAEFBC(v17, (uint64_t)&unk_2568B7F40, (uint64_t)v20);
  swift_release();
  sub_237FB7FB8(v13, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  sub_237FB7B18();
  sub_237FA45CC();
  sub_237FAC464();
  sub_237FA45D4();
  sub_237FB82D8();
  sub_237FB8540();
  return v22(v21, v22, v23, v24, v25, v26, v27, v28, a9, a10, a11, a12);
}

uint64_t sub_237FB1E98()
{
  uint64_t v0;

  swift_task_dealloc();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FB1EE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v39 = a5;
  v40 = a6;
  v36 = a4;
  v37 = a1;
  v33 = a2;
  v34 = a3;
  v46 = sub_237F9191C(&qword_2568B7F90);
  v42 = *(_QWORD *)(v46 - 8);
  v38 = *(_QWORD *)(v42 + 64);
  MEMORY[0x24BDAC7A8](v46);
  v45 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_237F9191C(&qword_2568B7848);
  v41 = *(_QWORD *)(v44 - 8);
  v7 = *(_QWORD *)(v41 + 64);
  MEMORY[0x24BDAC7A8](v44);
  v43 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_237F9191C(&qword_2568B7F08);
  v9 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v8);
  v32 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_237F9191C(&qword_2568B7E70);
  v12 = *(_QWORD *)(v11 - 8);
  v30 = v11;
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = v17;
  v18 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v17, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v34, v8);
  v19 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v43, v36, v44);
  v20 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v45, v37, v46);
  v21 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v22 = (v13 + *(unsigned __int8 *)(v9 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v23 = (v10 + *(unsigned __int8 *)(v19 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v24 = (v7 + *(unsigned __int8 *)(v20 + 80) + v23) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v25 = (v38 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject();
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v26 + v21, v14, v30);
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v26 + v22, v32, v31);
  (*(void (**)(unint64_t, char *, uint64_t))(v41 + 32))(v26 + v23, v43, v44);
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v26 + v24, v45, v46);
  v27 = v40;
  *(_QWORD *)(v26 + v25) = v39;
  *(_QWORD *)(v26 + ((v25 + 15) & 0xFFFFFFFFFFFFFFF8)) = v27;
  swift_bridgeObjectRetain();
  sub_237FAA8B0((uint64_t)v35, (uint64_t)&unk_2568B7FA0, v26);
  return swift_release();
}

uint64_t sub_237FB21DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  v8[16] = a4;
  v9 = sub_237F9191C(&qword_2568B7838);
  v8[21] = v9;
  v8[22] = *(_QWORD *)(v9 - 8);
  v8[23] = swift_task_alloc();
  v10 = sub_237F9191C(&qword_2568B7FA8);
  v8[24] = v10;
  v8[25] = *(_QWORD *)(v10 - 8);
  v8[26] = swift_task_alloc();
  v8[27] = sub_237F9191C(&qword_2568B7F18);
  v8[28] = swift_task_alloc();
  v8[29] = swift_task_alloc();
  v8[30] = swift_task_alloc();
  v8[31] = type metadata accessor for UploadResponseMessage();
  v8[32] = swift_task_alloc();
  sub_237F9191C(&qword_2568B7FB0);
  v8[33] = swift_task_alloc();
  v11 = sub_237F9191C(&qword_2568B7FB8);
  v8[34] = v11;
  v8[35] = *(_QWORD *)(v11 - 8);
  v8[36] = swift_task_alloc();
  return swift_task_switch();
}

void sub_237FB232C()
{
  sub_237F9191C(&qword_2568B7E70);
  sub_237FB865C();
}

uint64_t sub_237FB2360()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 296) = v1;
  *v1 = v0;
  v1[1] = sub_237FB239C;
  sub_237FB7AB4();
  return sub_237FB7B0C();
}

uint64_t sub_237FB239C()
{
  _BYTE *v0;
  uint64_t v1;

  sub_237FB8988();
  sub_237FAC3EC();
  if (v1)
    v0[1] = 0;
  else
    *v0 = 0;
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FB23E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t EnumCaseMultiPayload;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  sub_237FB7B7C();
  a23 = v25;
  a24 = v26;
  a22 = v24;
  v27 = *(_QWORD *)(v24 + 264);
  v28 = *(_QWORD *)(v24 + 248);
  sub_237FB7E40(v27, 1, v28);
  if (v30)
  {
    v31 = *(_BYTE *)(v24 + 320);
    sub_237FB7C74(*(_QWORD *)(v24 + 280));
    if ((v31 & 1) == 0)
    {
      if (qword_2568B7320 != -1)
        swift_once();
      v32 = *(NSObject **)(v24 + 160);
      v33 = sub_237FAC474();
      sub_237FABF5C(v33, (uint64_t)qword_2568B7E28);
      sub_237FB7DA4();
      sub_237FB88B4();
      v34 = sub_237FB7F84();
      if (sub_237FB7E28(v34))
      {
        v35 = (uint8_t *)sub_237FAC3E4();
        a13 = sub_237FAC3E4();
        *(_DWORD *)v35 = 136315138;
        v36 = sub_237FB8398();
        v37 = swift_bridgeObjectRetain();
        v38 = MEMORY[0x23B829608](v37, v36);
        v40 = v39;
        sub_237FA3AEC();
        *(_QWORD *)(v24 + 88) = sub_237FAB354(v38, v40, &a13);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_237FB7FC0();
        sub_237FB7AE4();
        sub_237FAC40C(&dword_237F8F000, v32, (os_log_type_t)v28, "ephemeral asset not received for request %s", v35);
        sub_237FAC3FC();
        sub_237FAC3D8();
      }
      sub_237FB7AE4();

      sub_237F93CC8();
      *(_QWORD *)(v24 + 64) = sub_237F96460();
      sub_237F9191C(&qword_2568B7F90);
      CheckedContinuation.resume(throwing:)();
    }
    *(_QWORD *)(v24 + 72) = 0;
    sub_237F9191C(&qword_2568B7848);
    sub_237FB8934();
    *(_QWORD *)(v24 + 80) = 0;
    sub_237F9191C(&qword_2568B7F08);
    AsyncThrowingStream.Continuation.finish(throwing:)();
    sub_237FB80C4();
    sub_237FAC46C();
    sub_237FA45D4();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    sub_237FB7B3C();
    return sub_237FB7DF0(*(uint64_t (**)(void))(v24 + 8));
  }
  else
  {
    sub_237FB8864(v27, v29, (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_237FB25A4 + 4 * byte_237FE93C8[EnumCaseMultiPayload]))(EnumCaseMultiPayload, v42, v43, v44, v45, v46, v47, v48, a9, a10, a11, a12, a13, a14, a15, a16);
  }
}

uint64_t sub_237FB2A3C()
{
  _BYTE *v0;
  uint64_t v1;

  sub_237FB8988();
  sub_237FAC3EC();
  if (v1)
    v0[1] = 1;
  else
    *v0 = 1;
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FB2A8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_BYTE *)(v2 + 321) = *(_BYTE *)(v2 + 320);
  sub_237FAC434();
  return sub_237FB7A68();
}

uint64_t sub_237FB2AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;

  sub_237FB7B7C();
  a23 = v26;
  a24 = v27;
  a22 = v24;
  v28 = *(_BYTE *)(v24 + 321);
  sub_237FB7C74(*(_QWORD *)(v24 + 280));
  v29 = *(_QWORD *)(v24 + 16);
  if ((v28 & 1) == 0)
  {
    if (qword_2568B7320 != -1)
      swift_once();
    v30 = *(NSObject **)(v24 + 160);
    v31 = sub_237FAC474();
    sub_237FABF5C(v31, (uint64_t)qword_2568B7E28);
    swift_bridgeObjectRetain();
    sub_237FB7FE4();
    swift_bridgeObjectRetain();
    sub_237FB7FE4();
    sub_237FB88B4();
    v32 = sub_237FB7F84();
    if (sub_237FB7E28(v32))
    {
      v33 = sub_237FAC3E4();
      v34 = (_QWORD *)sub_237FAC3E4();
      a13 = sub_237FAC3E4();
      *(_DWORD *)v33 = 138412546;
      sub_237FB7FE4();
      v35 = sub_237FB8324();
      *(_QWORD *)(v24 + 48) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v34 = v35;
      sub_237FB7F70();
      sub_237FB7F70();
      *(_WORD *)(v33 + 12) = 2080;
      v36 = sub_237FB8398();
      v37 = swift_bridgeObjectRetain();
      v38 = MEMORY[0x23B829608](v37, v36);
      v40 = v39;
      sub_237FA3C74();
      *(_QWORD *)(v24 + 56) = sub_237FAB354(v38, v40, &a13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_237FB7DB0();
      sub_237FB7AE4();
      sub_237FB7C04(&dword_237F8F000, v30, v25, "ephemeral asset not received due to error %@ for request %s", (uint8_t *)v33);
      sub_237F9191C(&qword_2568B7DB0);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FB7F70();
    sub_237FB7F70();
    sub_237FB7AE4();

    *(_QWORD *)(v24 + 24) = v29;
    sub_237FB7FE4();
    sub_237F9191C(&qword_2568B7F90);
    CheckedContinuation.resume(throwing:)();
  }
  *(_QWORD *)(v24 + 32) = v29;
  sub_237FB7FE4();
  sub_237F9191C(&qword_2568B7848);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  *(_QWORD *)(v24 + 40) = v29;
  sub_237F9191C(&qword_2568B7F08);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  sub_237FB80C4();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  return sub_237FB7DF0(*(uint64_t (**)(void))(v24 + 8));
}

uint64_t sub_237FB2D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[5] = a4;
  v5 = sub_237F9191C(&qword_2568B7F58);
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v6 = swift_task_alloc();
  v7 = OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__signals;
  v4[8] = v6;
  v4[9] = v7;
  return swift_task_switch();
}

uint64_t sub_237FB2DF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_237F9191C(&qword_2568B7730);
  MEMORY[0x23B829710](v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  sub_237FB8194(v2);
  return sub_237FB7BB8();
}

uint64_t sub_237FB2E68()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB2EAC()
{
  _QWORD *v0;
  os_log_type_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t (*v9)(void);
  _QWORD *v11;
  uint64_t v12;

  v2 = v0[2];
  if (v2)
  {
    if (qword_2568B7320 != -1)
      swift_once();
    v3 = sub_237FAC474();
    v4 = sub_237FABF5C(v3, (uint64_t)qword_2568B7E28);
    sub_237FB8234();
    Logger.logObject.getter();
    v5 = sub_237FB8538();
    if (sub_237FB7E28(v5))
    {
      v6 = sub_237FAC3E4();
      v12 = sub_237FAC3E4();
      *(_DWORD *)v6 = 136315138;
      v0[4] = v2;
      sub_237FB8234();
      v7 = String.init<A>(describing:)();
      *(_QWORD *)(v6 + 4) = sub_237FAB354(v7, v8, &v12);
      sub_237FA3AEC();
      sub_237FB7AE4();
      sub_237FAC40C(&dword_237F8F000, v4, v1, "received signal %s", (uint8_t *)v6);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FB7AE4();

    v11 = (_QWORD *)swift_task_alloc();
    v0[11] = v11;
    sub_237FB8194(v11);
    return sub_237FB7F38();
  }
  else
  {
    sub_237FB8458(v0[7]);
    sub_237FAC46C();
    v9 = (uint64_t (*)(void))sub_237FB7BF8();
    return v9();
  }
}

uint64_t sub_237FB303C()
{
  sub_237FAC414();
  sub_237FAC3EC();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB3080()
{
  uint64_t v0;

  sub_237FB814C(*(_QWORD *)(v0 + 56));
  sub_237FA45D4();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t AssetManager.deinit()
{
  uint64_t v0;

  sub_237F91A00(v0 + 16);
  return v0;
}

uint64_t AssetManager.__deallocating_deinit()
{
  uint64_t v0;

  sub_237F91A00(v0 + 16);
  return swift_deallocClassInstance();
}

void sub_237FB30F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_237FA3964();
  v22 = v0;
  v23 = v1;
  v20 = v2;
  v21 = v3;
  v24 = sub_237F9191C(v4);
  v5 = *(_QWORD *)(v24 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x24BDAC7A8](v24);
  v19 = (uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_237F92868();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v18 - v12;
  sub_237FB8894((uint64_t)&v18 - v12);
  sub_237FB89B0((uint64_t)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v20, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5 + 16));
  sub_237FB8894((uint64_t)v11);
  v14 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v15 = (v6 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (*(unsigned __int8 *)(v8 + 80) + v15 + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v17 = swift_allocObject();
  sub_237FB89B0(v17 + v14, v19, *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5 + 32));
  *(_QWORD *)(v17 + v15) = v22;
  sub_237FB80E8(v17 + v16, (uint64_t)v11, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 32));
  swift_beginAccess();
  swift_retain();
  sub_237FC251C(v23, v17, (uint64_t)v13);
  sub_237FB7CB8((uint64_t)v13, *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8));
  swift_endAccess();
  sub_237FA3848();
}

uint64_t sub_237FB3288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v6 = type metadata accessor for UploadResponseMessage();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_237F9191C(&qword_2568B80C8);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  v12 = v11[1];
  if (v12 >> 60 == 11)
  {
    sub_237FB74D4();
    v13 = swift_allocError();
    *v14 = 1;
    v19 = v13;
  }
  else
  {
    if (v12 >> 60 != 15)
    {
      v18[1] = a4;
      v17 = *v11;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_237F91894(v17, v12);
      JSONDecoder.init()();
      sub_237F91B50(&qword_2568B80D0, (uint64_t (*)(uint64_t))type metadata accessor for UploadResponseMessage, (uint64_t)&protocol conformance descriptor for UploadResponseMessage);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      sub_237F9191C(&qword_2568B80A0);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_237FB7520(v17, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    v19 = 0;
  }
  sub_237F9191C(&qword_2568B80A0);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  v15 = sub_237FC2378(a4);
  result = swift_endAccess();
  if (v15)
    return sub_237FB7510(v15);
  return result;
}

uint64_t sub_237FB3538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;

  v6 = type metadata accessor for DownloadResponseMessage();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_237F9191C(&qword_2568B8060);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  v12 = v11[1];
  if (v12 >> 60 == 11)
  {
    sub_237FB74D4();
    v13 = swift_allocError();
    *v14 = 1;
    v19 = v13;
  }
  else
  {
    if (v12 >> 60 != 15)
    {
      v18[1] = a4;
      v17 = *v11;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_237F91894(v17, v12);
      JSONDecoder.init()();
      sub_237F91B50(&qword_2568B8070, (uint64_t (*)(uint64_t))type metadata accessor for DownloadResponseMessage, (uint64_t)&protocol conformance descriptor for DownloadResponseMessage);
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      sub_237F9191C(&qword_2568B8020);
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_237FB7520(v17, v12);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    v19 = 0;
  }
  sub_237F9191C(&qword_2568B8020);
  AsyncThrowingStream.Continuation.finish(throwing:)();
  swift_beginAccess();
  v15 = sub_237FC2378(a4);
  result = swift_endAccess();
  if (v15)
    return sub_237FB7510(v15);
  return result;
}

uint64_t sub_237FB37E8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_237FB3800(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v3;
  *(_BYTE *)(v4 + 25) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 56) = *v3;
  sub_237F9191C(&qword_2568B89A0);
  *(_QWORD *)(v4 + 64) = swift_task_alloc();
  v5 = sub_237F9191C(&qword_2568B8098);
  *(_QWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 88) = swift_task_alloc();
  v6 = sub_237F9191C(&qword_2568B80A0);
  *(_QWORD *)(v4 + 96) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 104) = v7;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  *(_QWORD *)(v4 + 128) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FB38D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t (*v13)(void);
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  sub_237FB86C4();
  v2 = *(_QWORD *)(v0 + 120);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 72);
  v20 = *(_QWORD *)(v0 + 56);
  v18 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 48);
  v17 = *(_BYTE *)(v0 + 25);
  v15 = *(_QWORD *)(v0 + 40);
  v16 = *(_QWORD *)(v0 + 104);
  type metadata accessor for UploadResponseMessage();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v5, *MEMORY[0x24BEE6CA0], v7);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  sub_237FB8900(v5, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  v8 = sub_237FB8044();
  sub_237FB8160(v6, v9, v10, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v2, v1, v3);
  *(_QWORD *)(v0 + 16) = v15;
  *(_BYTE *)(v0 + 24) = v17 & 1;
  v11 = (*(unsigned __int8 *)(v16 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v12 = (char *)swift_allocObject();
  *((_QWORD *)v12 + 2) = 0;
  *((_QWORD *)v12 + 3) = 0;
  *((_QWORD *)v12 + 4) = v19;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 32))(&v12[v11], v2, v3);
  sub_237FB785C((uint64_t *)(v0 + 16), (uint64_t)&v12[(v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8]);
  *(_QWORD *)&v12[(v11 + v18 + 23) & 0xFFFFFFFFFFFFFFF8] = v20;
  sub_237FB8234();
  swift_retain();
  sub_237FAEFBC(v6, (uint64_t)&unk_2568B80B0, (uint64_t)v12);
  swift_release();
  sub_237FB7F18(v1, *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8));
  sub_237FAC46C();
  sub_237FB87B0();
  swift_task_dealloc();
  sub_237FA45D4();
  v13 = (uint64_t (*)(void))sub_237FB7BF8();
  return sub_237FB7B60(v13);
}

uint64_t sub_237FB3A9C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v3;
  *(_BYTE *)(v4 + 25) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  *(_QWORD *)(v4 + 56) = *v3;
  sub_237F9191C(&qword_2568B89A0);
  *(_QWORD *)(v4 + 64) = swift_task_alloc();
  v5 = sub_237F9191C(&qword_2568B8018);
  *(_QWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 88) = swift_task_alloc();
  v6 = sub_237F9191C(&qword_2568B8020);
  *(_QWORD *)(v4 + 96) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 104) = v7;
  *(_QWORD *)(v4 + 112) = *(_QWORD *)(v7 + 64);
  *(_QWORD *)(v4 + 120) = swift_task_alloc();
  *(_QWORD *)(v4 + 128) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FB3B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t (*v12)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;

  sub_237FB8690();
  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 48);
  v19 = *(_BYTE *)(v0 + 25) & 1;
  v14 = *(_QWORD *)(v0 + 40);
  type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, *MEMORY[0x24BEE6CA0], v5);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v7 = sub_237FB8044();
  sub_237FB8160(v6, v8, v9, v7);
  sub_237FB80E8(v15, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16));
  *(_QWORD *)(v0 + 16) = v14;
  *(_BYTE *)(v0 + 24) = v19;
  v10 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v17;
  sub_237FB80E8((uint64_t)v11 + v10, v15, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 32));
  sub_237FB73B8((uint64_t *)(v0 + 16), (uint64_t)v11 + ((v10 + v16 + 7) & 0xFFFFFFFFFFFFFFF8));
  *(_QWORD *)((char *)v11 + ((v10 + v16 + 23) & 0xFFFFFFFFFFFFFFF8)) = v18;
  j__swift_bridgeObjectRetain(v14, v19);
  swift_retain();
  sub_237FAEFBC(v6, (uint64_t)&unk_2568B8030, (uint64_t)v11);
  swift_release();
  sub_237FB7C0C(*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_237FA45D4();
  sub_237FB7B3C();
  swift_task_dealloc();
  sub_237FAC46C();
  v12 = (uint64_t (*)(void))sub_237FB7BF8();
  return sub_237FB7B20(v12);
}

uint64_t sub_237FB3D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 + 96) = a4;
  *(_QWORD *)(v7 + 104) = a5;
  v10 = type metadata accessor for XPCRichError();
  *(_QWORD *)(v7 + 112) = v10;
  *(_QWORD *)(v7 + 120) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 128) = swift_task_alloc();
  *(_QWORD *)(v7 + 136) = swift_task_alloc();
  *(_QWORD *)(v7 + 144) = swift_task_alloc();
  *(_QWORD *)(v7 + 152) = type metadata accessor for XPCAsyncSequenceRequest();
  *(_QWORD *)(v7 + 160) = swift_task_alloc();
  v11 = type metadata accessor for UUID();
  *(_QWORD *)(v7 + 168) = v11;
  *(_QWORD *)(v7 + 176) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 184) = swift_task_alloc();
  *(_QWORD *)(v7 + 192) = swift_task_alloc();
  *(_QWORD *)(v7 + 200) = swift_task_alloc();
  *(_QWORD *)(v7 + 208) = swift_task_alloc();
  *(_QWORD *)(v7 + 216) = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = a6;
  *(_BYTE *)(v7 + 24) = a7 & 1;
  return swift_task_switch();
}

uint64_t sub_237FB3E54()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FB8850();
  *(_QWORD *)(v1 + 224) = *(_QWORD *)(v0 + 56);
  return sub_237FA4510();
}

uint64_t sub_237FB3E88()
{
  sub_237FB30F8();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB3ED4()
{
  sub_237FB8AC0();
  return sub_237FA4510();
}

uint64_t sub_237FB3F00()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = sub_237FB856C();
  *(_QWORD *)(v1 + 248) = v0;
  sub_237FAC434();
  return sub_237FB7BEC();
}

#error "237FB42C0: call analysis failed (funcsize=301)"

#error "237FB4784: call analysis failed (funcsize=253)"

uint64_t sub_237FB4968()
{
  sub_237FB88A8();
  sub_237FAC434();
  return sub_237FA4510();
}

#error "237FB4A34: call analysis failed (funcsize=88)"

uint64_t sub_237FB4B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 + 96) = a4;
  *(_QWORD *)(v7 + 104) = a5;
  v10 = type metadata accessor for XPCRichError();
  *(_QWORD *)(v7 + 112) = v10;
  *(_QWORD *)(v7 + 120) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v7 + 128) = swift_task_alloc();
  *(_QWORD *)(v7 + 136) = swift_task_alloc();
  *(_QWORD *)(v7 + 144) = swift_task_alloc();
  *(_QWORD *)(v7 + 152) = type metadata accessor for XPCAsyncSequenceRequest();
  *(_QWORD *)(v7 + 160) = swift_task_alloc();
  v11 = type metadata accessor for UUID();
  *(_QWORD *)(v7 + 168) = v11;
  *(_QWORD *)(v7 + 176) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 184) = swift_task_alloc();
  *(_QWORD *)(v7 + 192) = swift_task_alloc();
  *(_QWORD *)(v7 + 200) = swift_task_alloc();
  *(_QWORD *)(v7 + 208) = swift_task_alloc();
  *(_QWORD *)(v7 + 216) = swift_task_alloc();
  *(_QWORD *)(v7 + 16) = a6;
  *(_BYTE *)(v7 + 24) = a7 & 1;
  return swift_task_switch();
}

uint64_t sub_237FB4C2C()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FB8850();
  *(_QWORD *)(v1 + 224) = *(_QWORD *)(v0 + 56);
  return sub_237FA4510();
}

uint64_t sub_237FB4C60()
{
  sub_237FB30F8();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FB4CAC()
{
  sub_237FB8AC0();
  return sub_237FA4510();
}

uint64_t sub_237FB4CD8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 240) = sub_237FB856C();
  *(_QWORD *)(v1 + 248) = v0;
  sub_237FAC434();
  return sub_237FB7BEC();
}

#error "237FB5098: call analysis failed (funcsize=301)"

#error "237FB555C: call analysis failed (funcsize=253)"

uint64_t sub_237FB5740()
{
  sub_237FB88A8();
  sub_237FAC434();
  return sub_237FA4510();
}

#error "237FB580C: call analysis failed (funcsize=88)"

char *sub_237FB58EC(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

uint64_t sub_237FB5970(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a3 < a1
         || (result = type metadata accessor for CloudAssets_Signal.Event(0),
             a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    type metadata accessor for CloudAssets_Signal.Event(0);
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

uint64_t sub_237FB5A6C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a2 < 0)
  {
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (a3 < a1
         || (result = sub_237F9191C(&qword_2568B7ED0), a1 + *(_QWORD *)(*(_QWORD *)(result - 8) + 72) * a2 <= a3))
  {
    sub_237F9191C(&qword_2568B7ED0);
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (a3 != a1)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void *sub_237FB5B70(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if ((a2 & 0x8000000000000000) == 0 && (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst))
    return memcpy(__dst, __src, 16 * a2);
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_237FB5C38(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
      return swift_arrayInitWithCopy();
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_237FB5D2C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7ED0) - 8) + 72) * a2;
    v6 = a3 + v5;
    v7 = a1 + v5;
    if (v6 <= a1 || v7 <= a3)
      return swift_arrayInitWithCopy();
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_237FB5E24(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if ((a2 & 0x8000000000000000) == 0 && (a3 + 16 * a2 <= a1 || a1 + 16 * a2 <= a3))
    return swift_arrayInitWithCopy();
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_237FB5EF0(uint64_t a1)
{
  uint64_t v1;

  return sub_237FAE794(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_237FB5EF8()
{
  sub_237FB08A4();
}

_QWORD *sub_237FB5F28(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = sub_237FB642C(a1, a2, a3, *v3, &qword_2568B80E8, (void (*)(uint64_t, uint64_t, _QWORD *))sub_237FB58EC, (void (*)(uint64_t, uint64_t, _QWORD *))sub_237FB5B70);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_237FB5F5C(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_237FB61A4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

size_t sub_237FB5F78(size_t a1, int64_t a2, char a3)
{
  uint64_t *v3;
  size_t result;

  result = sub_237FB62E4(a1, a2, a3, *v3);
  *v3 = result;
  return result;
}

uint64_t sub_237FB5F94(uint64_t a1)
{
  uint64_t *v1;

  return sub_237FAF17C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_237FB5FA0(uint64_t a1)
{
  uint64_t *v1;

  return sub_237FB1EE8(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

void sub_237FB5FB0()
{
  sub_237FB08A4();
}

uint64_t sub_237FB5FE0()
{
  sub_237FB80E0();
  sub_237FB888C();
  return swift_deallocObject();
}

uint64_t sub_237FB6004()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FB7D60(v1);
  return sub_237FB2D88(v2, v3, v4, v5);
}

uint64_t type metadata accessor for AssetManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for AssetManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetManager.__allocating_init(serviceName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t storeEnumTagSinglePayload for AssetManager.AssetError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FB60D4 + 4 * byte_237FE93CC[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FB60F4 + 4 * byte_237FE93D1[v4]))();
}

_BYTE *sub_237FB60D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FB60F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FB60FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FB6104(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FB610C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FB6114(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AssetManager.AssetError()
{
  return &type metadata for AssetManager.AssetError;
}

unint64_t sub_237FB6134()
{
  unint64_t result;

  result = qword_2568B7F48;
  if (!qword_2568B7F48)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9454, &type metadata for AssetManager.AssetError);
    atomic_store(result, (unint64_t *)&qword_2568B7F48);
  }
  return result;
}

_QWORD *sub_237FB6170(_QWORD *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  _QWORD *result;

  result = sub_237FB642C(a1, a2, a3, *v3, &qword_2568B7F50, (void (*)(uint64_t, uint64_t, _QWORD *))sub_237FB58EC, (void (*)(uint64_t, uint64_t, _QWORD *))sub_237FB5E24);
  *v3 = (uint64_t)result;
  return result;
}

size_t sub_237FB61A4(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_237F9191C(&qword_2568B80E0);
  v10 = *(_QWORD *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CloudAssets_Signal.Event(0) - 8) + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (unint64_t)v13 + v16;
  v18 = a4 + v16;
  if ((v5 & 1) != 0)
  {
    sub_237FB5970(v18, v8, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_237FB5C38(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

size_t sub_237FB62E4(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;

  v5 = result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  sub_237F9191C(&qword_2568B8010);
  v10 = *(_QWORD *)(sub_237F9191C(&qword_2568B7ED0) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  result = j__malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_24;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  v15 = *(unsigned __int8 *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7ED0) - 8) + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (unint64_t)v13 + v16;
  v18 = a4 + v16;
  if ((v5 & 1) != 0)
  {
    sub_237FB5A6C(v18, v8, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_237FB5D2C(v18, v8, v17);
  }
  swift_release();
  return (size_t)v13;
}

_QWORD *sub_237FB642C(_QWORD *result, int64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, _QWORD *), void (*a7)(uint64_t, uint64_t, _QWORD *))
{
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  uint64_t v18;

  v10 = (char)result;
  if ((a3 & 1) != 0)
  {
    v11 = *(_QWORD *)(a4 + 24);
    v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v12 = a2;
    }
  }
  else
  {
    v12 = a2;
  }
  v13 = *(_QWORD *)(a4 + 16);
  if (v12 <= v13)
    v14 = *(_QWORD *)(a4 + 16);
  else
    v14 = v12;
  if (v14)
  {
    sub_237F9191C(a5);
    v15 = (_QWORD *)sub_237FB876C();
    v16 = j__malloc_size(v15);
    v15[2] = v13;
    v15[3] = 2 * ((uint64_t)(v16 - 32) / 16);
  }
  else
  {
    v15 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v17 = v15 + 4;
  v18 = a4 + 32;
  if ((v10 & 1) != 0)
  {
    a6(v18, v13, v17);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    a7(v18, v13, v17);
  }
  sub_237FB84C4();
  return v15;
}

uint64_t sub_237FB6510()
{
  return sub_237FB7544();
}

uint64_t sub_237FB651C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_237F9191C(&qword_2568B7F10);
  sub_237FB7D48();
  sub_237F9191C(&qword_2568B7F60);
  sub_237FB8074();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FB7D60(v1);
  return sub_237FACC54(v2, v3, v4, v5, v6);
}

uint64_t sub_237FB6590()
{
  uint64_t v0;

  sub_237FAC3EC();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FB65CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v17 = sub_237F9191C(&qword_2568B7E70);
  v1 = *(_QWORD *)(v17 - 8);
  v13 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v2 = *(_QWORD *)(v1 + 64);
  v16 = sub_237F9191C(&qword_2568B7F08);
  v3 = *(_QWORD *)(v16 - 8);
  v4 = (v13 + v2 + *(unsigned __int8 *)(v3 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v12 = v4;
  v5 = *(_QWORD *)(v3 + 64);
  v15 = sub_237F9191C(&qword_2568B7848);
  v6 = *(_QWORD *)(v15 - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v14 = sub_237F9191C(&qword_2568B7F90);
  v9 = *(_QWORD *)(v14 - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_237FB80E0();
  (*(void (**)(unint64_t, uint64_t))(v1 + 8))(v0 + v13, v17);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v12, v16);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v15);
  (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v0 + v10, v14);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_237FB6738()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_237F9191C(&qword_2568B7E70);
  sub_237FB7D48();
  sub_237F9191C(&qword_2568B7F08);
  sub_237FB8820();
  sub_237F9191C(&qword_2568B7848);
  sub_237F9191C(&qword_2568B7F90);
  sub_237FB7FEC();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_237FB81B8(v1);
  *v2 = v0;
  v2[1] = sub_237FB7A60;
  sub_237FB81EC();
  sub_237FB8540();
  return sub_237FB21DC(v3, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_237FB681C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_237F9191C(&qword_2568B7EE0);
  sub_237FB87D0();
  sub_237FB89B8();
  sub_237F9191C(&qword_2568B7FC0);
  sub_237FB835C();
  sub_237FB80E0();
  sub_237FB7D9C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_bridgeObjectRelease();
  sub_237FB7CB8(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_237FB68DC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_237FB86AC();
  sub_237F9191C(&qword_2568B7EE0);
  sub_237F9191C(&qword_2568B7FC0);
  sub_237FB7FEC();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_237FB81B8(v1);
  *v2 = v0;
  v2[1] = sub_237FB7A60;
  v3 = sub_237FB81EC();
  return sub_237FAF384(v3, v4, v5, v6, v7, v8, v9);
}

void sub_237FB6994(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_237FB8784(a1, a2, a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_237F928A0();
}

void sub_237FB69C0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v3 = v2;
  v5 = type metadata accessor for AssetDownloadRequest();
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v49 = (uint64_t)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v2;
  sub_237F9191C(&qword_2568B8000);
  v48 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)();
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_42;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v45 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v43 = v2;
  v44 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  swift_retain();
  v19 = 0;
  v20 = v11;
  v47 = v11;
  if (!v17)
    goto LABEL_7;
LABEL_6:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v21 | (v19 << 6); ; i = __clz(__rbit64(v25)) + (v19 << 6))
  {
    v27 = *(_QWORD *)(v8 + 72);
    v28 = *(_QWORD *)(v20 + 48) + v27 * i;
    if ((v48 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 32))(v10, v28, v7);
      v29 = *(_QWORD *)(v20 + 56);
      v30 = *(_QWORD *)(v46 + 72);
      sub_237F99D04(v29 + v30 * i, v49, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v10, v28, v7);
      v31 = *(_QWORD *)(v20 + 56);
      v30 = *(_QWORD *)(v46 + 72);
      sub_237F9B398(v31 + v30 * i, v49, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    }
    sub_237F91B50(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v33 = -1 << *(_BYTE *)(v13 + 32);
    v34 = v32 & ~v33;
    v35 = v34 >> 6;
    if (((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6))) == 0)
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v33) >> 6;
      while (++v35 != v38 || (v37 & 1) == 0)
      {
        v39 = v35 == v38;
        if (v35 == v38)
          v35 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v18 + 8 * v35);
        if (v40 != -1)
        {
          v36 = __clz(__rbit64(~v40)) + (v35 << 6);
          goto LABEL_31;
        }
      }
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    v36 = __clz(__rbit64((-1 << v34) & ~*(_QWORD *)(v18 + 8 * (v34 >> 6)))) | v34 & 0x7FFFFFFFFFFFFFC0;
LABEL_31:
    *(_QWORD *)(v18 + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v36;
    (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(*(_QWORD *)(v13 + 48) + v27 * v36, v10, v7);
    sub_237F99D04(v49, *(_QWORD *)(v13 + 56) + v30 * v36, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    ++*(_QWORD *)(v13 + 16);
    v20 = v47;
    if (v17)
      goto LABEL_6;
LABEL_7:
    v23 = v19 + 1;
    if (__OFADD__(v19, 1))
      goto LABEL_44;
    if (v23 >= v44)
    {
      swift_release();
      v3 = v43;
      v24 = v45;
      goto LABEL_36;
    }
    v24 = v45;
    v25 = v45[v23];
    ++v19;
    if (!v25)
    {
      v19 = v23 + 1;
      if (v23 + 1 >= v44)
        goto LABEL_34;
      v25 = v45[v19];
      if (!v25)
        break;
    }
LABEL_18:
    v17 = (v25 - 1) & v25;
  }
  v26 = v23 + 2;
  if (v26 < v44)
  {
    v25 = v45[v26];
    if (!v25)
    {
      while (1)
      {
        v19 = v26 + 1;
        if (__OFADD__(v26, 1))
          goto LABEL_45;
        if (v19 >= v44)
          goto LABEL_34;
        v25 = v45[v19];
        ++v26;
        if (v25)
          goto LABEL_18;
      }
    }
    v19 = v26;
    goto LABEL_18;
  }
LABEL_34:
  swift_release();
  v3 = v43;
LABEL_36:
  if ((v48 & 1) != 0)
  {
    v41 = 1 << *(_BYTE *)(v47 + 32);
    if (v41 >= 64)
      sub_237FB6DD4(0, (unint64_t)(v41 + 63) >> 6, v24);
    else
      *v24 = -1 << v41;
    *(_QWORD *)(v47 + 16) = 0;
  }
LABEL_42:
  swift_release();
  *v3 = v13;
}

uint64_t sub_237FB6DD4(uint64_t result, uint64_t a2, _QWORD *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void sub_237FB6DF0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  void *v36;
  id v37;
  Swift::String v38;
  Swift::String v39;
  _QWORD v40[3];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  id v50;

  v46 = a3;
  v6 = type metadata accessor for AssetDownloadRequest();
  v43 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v45 = (uint64_t)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v44 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v47 = (uint64_t)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_237F9191C(&qword_2568B7ED0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v40[1] = v3;
  v40[2] = a1;
  v42 = &v14[*(int *)(v11 + 48)];
  v16 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v41 = *(_QWORD *)(v12 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_237FB764C(v16, (uint64_t)v14, &qword_2568B7ED0);
    v17 = *(void (**)(uint64_t, char *, uint64_t))(v44 + 32);
    v18 = v47;
    v19 = v14;
    v20 = v14;
    v21 = v8;
    v17(v47, v20, v8);
    sub_237F99D04((uint64_t)v42, v45, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    v22 = (_QWORD *)*v46;
    v24 = sub_237FC1DB4(v18);
    v25 = v22[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    v28 = v23;
    if (v22[3] < v27)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_14;
    }
    else
    {
      sub_237F9191C(&qword_2568B8008);
      _NativeDictionary.copy()();
      if ((v28 & 1) != 0)
        goto LABEL_14;
    }
LABEL_10:
    v31 = v47;
    v32 = (_QWORD *)*v46;
    *(_QWORD *)(*v46 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v8 = v21;
    v17(v32[6] + *(_QWORD *)(v44 + 72) * v24, (char *)v31, v21);
    sub_237F99D04(v45, v32[7] + *(_QWORD *)(v43 + 72) * v24, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    v33 = v32[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_18;
    v32[2] = v35;
    v16 += v41;
    a2 = 1;
    --v15;
    v14 = v19;
    if (!v15)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  sub_237FB69C0(v27, a2 & 1);
  v29 = sub_237FC1DB4(v47);
  if ((v28 & 1) != (v30 & 1))
    goto LABEL_19;
  v24 = v29;
  if ((v28 & 1) == 0)
    goto LABEL_10;
LABEL_14:
  v36 = (void *)swift_allocError();
  swift_willThrow();
  v50 = v36;
  v37 = v36;
  sub_237F9191C(&qword_2568B8A60);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_237FB7484(v45, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v47, v21);
    swift_bridgeObjectRelease();

    return;
  }
LABEL_20:
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v38._object = (void *)0x8000000237FE3AE0;
  v38._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v38);
  _print_unlocked<A, B>(_:_:)();
  v39._countAndFlagsBits = 39;
  v39._object = (void *)0xE100000000000000;
  String.append(_:)(v39);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_237FB7208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  v12 = *(_QWORD *)a6;
  v13 = *(_BYTE *)(a6 + 8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = sub_237FABF28;
  return sub_237FB3D3C(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_237FB72A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  char v13;
  _QWORD *v14;

  v12 = *(_QWORD *)a6;
  v13 = *(_BYTE *)(a6 + 8);
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = sub_237FB7A58;
  return sub_237FB4B14(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t sub_237FB7348()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_237F9191C(&qword_2568B8020);
  sub_237FB804C();
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  sub_237FB80E0();
  sub_237FB888C();
  sub_237FB7D9C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  j__swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4), *(unsigned __int8 *)(v0 + v4 + 8));
  return sub_237FB7FD0();
}

uint64_t sub_237FB73B8(uint64_t *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for Signal.Event(a2, a1);
  return a2;
}

uint64_t sub_237FB73F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_237FB86AC();
  sub_237F9191C(&qword_2568B8020);
  sub_237FB7C2C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FB7EA0(v1);
  return sub_237FB7F20(v2, v3, v4, v5, v6, v7, v8, v9);
}

unint64_t sub_237FB7448()
{
  unint64_t result;

  result = qword_2568B8050;
  if (!qword_2568B8050)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for DownloadRequestMessage, &type metadata for DownloadRequestMessage);
    atomic_store(result, (unint64_t *)&qword_2568B8050);
  }
  return result;
}

void sub_237FB7484(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  v2 = a2(0);
  sub_237FB814C(*(_QWORD *)(v2 - 8));
  sub_237F928A0();
}

uint64_t sub_237FB74B4()
{
  return sub_237FB7934();
}

uint64_t sub_237FB74C0(uint64_t a1)
{
  return sub_237FB79C0(a1, &qword_2568B8020, (uint64_t (*)(uint64_t, unint64_t, _QWORD, unint64_t))sub_237FB3538);
}

unint64_t sub_237FB74D4()
{
  unint64_t result;

  result = qword_2568B8068;
  if (!qword_2568B8068)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_2568B8068);
  }
  return result;
}

uint64_t sub_237FB7510(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_237FB7520(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF)
    return sub_237F918D8(a1, a2);
  return a1;
}

uint64_t sub_237FB7538()
{
  return sub_237FB7544();
}

uint64_t sub_237FB7544()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  sub_237FA3964();
  v2 = *(_QWORD *)(sub_237F9191C(v1) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_237F9191C(&qword_2568B7F60) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_237FB80E0();
  sub_237FB7D9C(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  sub_237FB7CB8(v0 + v6, *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8));
  return sub_237FB7BC0();
}

uint64_t sub_237FB75D8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_237F9191C(&qword_2568B7EA0);
  sub_237FB7D48();
  sub_237F9191C(&qword_2568B7F60);
  sub_237FB8074();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FB7D60(v1);
  return sub_237FB0A30(v2, v3, v4, v5, v6);
}

void sub_237FB764C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_237FB8784(a1, a2, a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_237F928A0();
}

void sub_237FB7678(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = sub_237F9191C(a2);
  sub_237FB814C(*(_QWORD *)(v2 - 8));
  sub_237F928A0();
}

uint64_t sub_237FB76A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_237FA3964();
  sub_237F9191C(&qword_2568B7E70);
  sub_237FB87D0();
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(sub_237F9191C(&qword_2568B7F60) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_237FB80E0();
  sub_237FB7D9C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  sub_237FB7CB8(v0 + v5, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  return sub_237FB7BC0();
}

uint64_t sub_237FB7740(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  sub_237F9191C(&qword_2568B7E70);
  sub_237FB7D48();
  sub_237F9191C(&qword_2568B7F60);
  sub_237FB8820();
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = v1 + (v6 & ~v5);
  v10 = swift_task_alloc();
  v11 = (_QWORD *)sub_237FB81B8(v10);
  *v11 = v2;
  v11[1] = sub_237FB7A58;
  return sub_237FAE970(a1, v7, v8, v1 + v3, v9);
}

uint64_t sub_237FB77F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_237F9191C(&qword_2568B80A0);
  sub_237FB804C();
  sub_237FB80E0();
  sub_237FB888C();
  sub_237FB7D9C(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  swift_bridgeObjectRelease();
  return sub_237FB7FD0();
}

uint64_t sub_237FB785C(uint64_t *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for Signal.Event(a2, a1);
  return a2;
}

uint64_t sub_237FB7898()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);

  sub_237FB86AC();
  sub_237F9191C(&qword_2568B80A0);
  sub_237FB7C2C();
  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FB7EA0(v1);
  return sub_237FB7F20(v2, v3, v4, v5, v6, v7, v8, v9);
}

unint64_t sub_237FB78EC()
{
  unint64_t result;

  result = qword_2568B80C0;
  if (!qword_2568B80C0)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for UploadRequestMessage, &type metadata for UploadRequestMessage);
    atomic_store(result, (unint64_t *)&qword_2568B80C0);
  }
  return result;
}

uint64_t sub_237FB7928()
{
  return sub_237FB7934();
}

uint64_t sub_237FB7934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  sub_237FA3964();
  v4 = *(_QWORD *)(sub_237F9191C(v3) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_237FB89B8();
  sub_237F92868();
  sub_237FB835C();
  sub_237FB7D9C(v0 + v5, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  swift_release();
  sub_237FB7CB8(v0 + v2, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 8));
  return sub_237FB7BC0();
}

uint64_t sub_237FB79AC(uint64_t a1)
{
  return sub_237FB79C0(a1, &qword_2568B80A0, (uint64_t (*)(uint64_t, unint64_t, _QWORD, unint64_t))sub_237FB3288);
}

uint64_t sub_237FB79C0(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, unint64_t, _QWORD, unint64_t))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(sub_237F9191C(a2) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_237F92868() - 8) + 80);
  return a3(a1, v3 + v6, *(_QWORD *)(v3 + v7), v3 + ((v7 + v8 + 8) & ~v8));
}

uint64_t sub_237FB7A68()
{
  return swift_task_switch();
}

uint64_t sub_237FB7A74()
{
  return swift_allocObject();
}

uint64_t sub_237FB7A98()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7AC8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FB7AE4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_237FB7AEC@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return a1(v1, v2, v3);
}

uint64_t sub_237FB7AFC()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7B04(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FB7B0C()
{
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FB7B18()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7B20(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FB7B3C()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7B44(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FB7B60(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FB7B98()
{
  uint64_t v0;
  uint64_t v1;

  return _s11CloudAssets21UploadResponseMessageOwet_0(v0, 1, v1);
}

uint64_t sub_237FB7BB8()
{
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FB7BC0()
{
  return swift_deallocObject();
}

void sub_237FB7BD8(__n128 *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);
  uint64_t v4;

  a1[1] = a2;
  sub_237F9B398(v2, (uint64_t)a1 + v4, v3);
}

uint64_t sub_237FB7BEC()
{
  return swift_task_switch();
}

uint64_t sub_237FB7BF8()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

void sub_237FB7C04(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x16u);
}

uint64_t sub_237FB7C0C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_237FB7C6C()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7C74@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_237FB7C7C@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 264) = a1;
  return a1(v1, v2, v3);
}

uint64_t sub_237FB7C90()
{
  return swift_task_alloc();
}

uint64_t sub_237FB7CA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(a2, v2, v3);
}

uint64_t sub_237FB7CB8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_237FB7CDC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;

  _os_log_impl(a1, v5, v4, a4, v6, 2u);
}

_QWORD *sub_237FB7CF0()
{
  uint64_t v0;
  _QWORD *result;

  result = sub_237F9195C((_QWORD *)(*(_QWORD *)(v0 + 96) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 40));
  *(_QWORD *)(v0 + 296) = result;
  return result;
}

uint64_t sub_237FB7D14()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7D60(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_237FB7D80(uint64_t a1, uint64_t a2)
{
  sub_237FABF5C(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_237FB7D9C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_237FB7DA4()
{
  return swift_bridgeObjectRetain_n();
}

uint64_t sub_237FB7DB0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FB7DB8()
{
  return swift_task_switch();
}

uint64_t sub_237FB7DD4()
{
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FB7DF0(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FB7E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

BOOL sub_237FB7E28(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_237FB7E38()
{
  void *v0;

}

uint64_t sub_237FB7E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, a3);
}

uint64_t sub_237FB7E54()
{
  return swift_task_switch();
}

uint64_t sub_237FB7E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL sub_237FB7E80(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_237FB7E90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_237FB7EA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_237FB7ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_237FB7EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL sub_237FB7EF0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

id sub_237FB7F00()
{
  void *v0;

  return v0;
}

uint64_t sub_237FB7F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_237FB7F18@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_237FB7F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  return a8();
}

uint64_t sub_237FB7F38()
{
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FB7F50()
{
  return swift_arrayDestroy();
}

uint64_t sub_237FB7F64()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

void sub_237FB7F70()
{
  void *v0;

}

uint64_t sub_237FB7F78()
{
  return swift_arrayDestroy();
}

uint64_t sub_237FB7F84()
{
  return static os_log_type_t.error.getter();
}

uint64_t sub_237FB7F8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  return swift_task_dealloc();
}

uint64_t sub_237FB7FB0()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB7FB8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_237FB7FC0()
{
  return swift_bridgeObjectRelease();
}

BOOL sub_237FB7FC8(NSObject *a1)
{
  os_log_type_t v1;

  return os_log_type_enabled(a1, v1);
}

uint64_t sub_237FB7FD0()
{
  return swift_deallocObject();
}

id sub_237FB7FE4()
{
  void *v0;

  return v0;
}

uint64_t sub_237FB8014()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB801C()
{
  return swift_task_alloc();
}

uint64_t sub_237FB8024()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 136) = v0;
  return swift_task_dealloc();
}

uint64_t sub_237FB8044()
{
  return type metadata accessor for TaskPriority();
}

uint64_t sub_237FB8098(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB80B4()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB80C4()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB80E0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_237FB80E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

uint64_t sub_237FB80F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;

  return sub_237FAB354(v3, v4, a3);
}

uint64_t sub_237FB80FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_237FB8108()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FB8114()
{
  return AsyncThrowingStream.Continuation.yield(_:)();
}

uint64_t sub_237FB8124()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FB8130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a12 + 8))(v12, v13);
}

uint64_t sub_237FB814C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_237FB8158()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB8160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, 1, 1, a4);
}

uint64_t sub_237FB816C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB8178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _QWORD *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a11 = v15;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a15 + 8))(v16, v17);
}

uint64_t sub_237FB8194(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_237FB81B8(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t sub_237FB81C4()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB81E0()
{
  return swift_allocObject();
}

uint64_t sub_237FB81EC()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FB8210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_237FB821C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_237FB8228()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_237FB8234()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FB823C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a13 = v13;
  return (*(uint64_t (**)(uint64_t, uint64_t))(a11 + 8))(v14, v15);
}

uint64_t sub_237FB8258()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0[22] + 16))(v0[26], v0[27], v0[21]);
}

uint64_t sub_237FB8290()
{
  return swift_storeEnumTagMultiPayload();
}

id sub_237FB8298()
{
  void *v0;

  return v0;
}

uint64_t sub_237FB82A0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB82B8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 80) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_237FB82D0()
{
  uint64_t v0;

}

uint64_t sub_237FB82D8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FB82E8()
{
  return swift_release();
}

uint64_t sub_237FB8300()
{
  return swift_task_switch();
}

uint64_t sub_237FB830C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);

  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  *(_QWORD *)(v15 + 272) = v19;
  return v19(v17, a15, v18);
}

uint64_t sub_237FB8324()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_237FB832C()
{
  return swift_dynamicCast();
}

uint64_t sub_237FB8344()
{
  return swift_dynamicCast();
}

uint64_t sub_237FB837C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_237FB8388()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2112;
}

uint64_t sub_237FB8398()
{
  return type metadata accessor for AssetUploadRequest();
}

uint64_t sub_237FB83A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  return v12(a2, a12, v13);
}

uint64_t sub_237FB83B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  return v14(a2, a14, v15);
}

uint64_t sub_237FB83D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);

  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 272) = v5;
  return v5(v2, v1, v3);
}

uint64_t sub_237FB83E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(a2, v2, v3);
}

uint64_t sub_237FB83FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 32))(v3, v1, v2);
}

uint64_t sub_237FB8410@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

void sub_237FB841C()
{
  void *v0;

}

uint64_t sub_237FB8424()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FB8430()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return static Task<>.currentPriority.getter();
}

uint64_t sub_237FB8444()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
  return static Task<>.currentPriority.getter();
}

uint64_t sub_237FB8458@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_237FB8464()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 264))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 168));
}

void sub_237FB8478()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
}

uint64_t sub_237FB8484()
{
  return Logger.logObject.getter();
}

uint64_t sub_237FB84A8()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB84B0()
{
  return swift_task_dealloc();
}

void sub_237FB84B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;

  sub_237FB6994(v3, v4, a3);
}

uint64_t sub_237FB84C4()
{
  return swift_release();
}

uint64_t sub_237FB84CC()
{
  return swift_release();
}

uint64_t sub_237FB84E0()
{
  return dispatch thunk of XPCSession.send<A>(_:)();
}

uint64_t sub_237FB84F4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_237FAB354(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_237FB8500()
{
  uint64_t v0;

  return v0;
}

void sub_237FB850C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;

  sub_237F9B398(v4, v3, a3);
}

uint64_t sub_237FB8518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a15 + 8))(v15, v16);
}

uint64_t sub_237FB852C()
{
  return swift_willThrow();
}

uint64_t sub_237FB8538()
{
  return static os_log_type_t.default.getter();
}

BOOL sub_237FB855C(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_237FB856C()
{
  return sub_237FD2038();
}

uint64_t sub_237FB857C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
}

uint64_t sub_237FB858C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  unint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a6);
  return sub_237FAB354(v7, v6, (uint64_t *)va);
}

_QWORD *sub_237FB859C@<X0>(uint64_t a1@<X8>)
{
  return sub_237F9195C((_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40));
}

uint64_t sub_237FB85B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t (*a17)(uint64_t, uint64_t))
{
  uint64_t v17;
  uint64_t v18;

  return a17(v17, v18);
}

void sub_237FB85C8(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_237FB7484(v2, a2);
}

uint64_t sub_237FB85D0()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_237FB85E0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FB85E8()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FB85F8()
{
  return AsyncThrowingStream.Continuation.yield(_:)();
}

uint64_t sub_237FB8608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  return sub_237FAB354(v5, v4, (uint64_t *)va);
}

uint64_t sub_237FB8618(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

uint64_t sub_237FB8628()
{
  return static os_log_type_t.default.getter();
}

BOOL sub_237FB8630(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_237FB8640(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

void sub_237FB865C()
{
  JUMPOUT(0x23B829710);
}

void sub_237FB8664()
{
  JUMPOUT(0x23B829710);
}

uint64_t sub_237FB86FC()
{
  return XPCRichError.canRetry.getter();
}

uint64_t sub_237FB8704()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_237FB8714()
{
  return swift_willThrow();
}

void sub_237FB8724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_237F9B398(v0, v1, v2);
}

uint64_t sub_237FB8734()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FB8744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

BOOL sub_237FB8754(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_237FB8764()
{
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t sub_237FB876C()
{
  return swift_allocObject();
}

uint64_t sub_237FB8774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;

  return a10(v10, v11);
}

uint64_t sub_237FB8784(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_237F9191C(a3);
}

uint64_t sub_237FB87B0()
{
  return swift_task_dealloc();
}

uint64_t sub_237FB87B8()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB87C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

BOOL sub_237FB8800(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_237FB8810(float a1)
{
  float *v1;

  *v1 = a1;
}

uint64_t sub_237FB8834()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB8850()
{
  return UUID.init()();
}

void sub_237FB885C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_237FB6994(a1, a2, v2);
}

void sub_237FB8864(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_237F99D04(a1, v3, a3);
}

uint64_t sub_237FB886C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FB8878()
{
  return swift_task_alloc();
}

uint64_t sub_237FB888C()
{
  return swift_release();
}

uint64_t sub_237FB8894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v2, v1);
}

uint64_t sub_237FB88A0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FB88A8()
{
  return sub_237FD1F8C();
}

uint64_t sub_237FB88B4()
{
  return Logger.logObject.getter();
}

uint64_t sub_237FB88BC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FB88C4()
{
  return swift_bridgeObjectRelease();
}

id sub_237FB88CC()
{
  void *v0;

  return v0;
}

void sub_237FB88D4(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_237FB7484(v2, a2);
}

uint64_t sub_237FB88DC()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FB88E8()
{
  return dispatch thunk of JSONEncoder.encode<A>(_:)();
}

uint64_t sub_237FB88F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_237FB8900@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

void sub_237FB8908()
{
  JUMPOUT(0x23B829608);
}

uint64_t sub_237FB8910()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_237FB891C()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_237FB8928()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_237FB8934()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_237FB8940()
{
  return AsyncThrowingStream.Continuation.finish(throwing:)();
}

uint64_t sub_237FB894C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

uint64_t sub_237FB8954()
{
  return swift_allocObject();
}

uint64_t sub_237FB8960@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = a2;
  return v2;
}

void sub_237FB8974()
{
  id *v0;

}

uint64_t sub_237FB8980()
{
  return Logger.logObject.getter();
}

void sub_237FB8988()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_237FB899C(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = result;
  v3[7] = *v2;
  return result;
}

uint64_t sub_237FB89B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, _QWORD)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, *(_QWORD *)(v3 - 112));
}

uint64_t sub_237FB89E0()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FB89E8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FB89F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_237FB8A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_237FB8A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

void sub_237FB8A18()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_237FB7484(v0, v1);
}

uint64_t sub_237FB8A24()
{
  return swift_bridgeObjectRetain();
}

void sub_237FB8A2C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = v0;
}

void sub_237FB8A40()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 40) = v1;
}

void sub_237FB8A54()
{
  void *v0;

}

uint64_t sub_237FB8A60(uint64_t a1, uint64_t a2)
{
  sub_237FABF5C(a1, a2);
  return Logger.logObject.getter();
}

uint64_t sub_237FB8A74(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

void sub_237FB8A8C(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_237FB7484(v2, a2);
}

void sub_237FB8A94()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);

  sub_237FB7484(v0, v1);
}

void sub_237FB8AA0()
{
  id *v0;

}

_WORD *sub_237FB8AAC(_WORD *result)
{
  *result = 0;
  return result;
}

_QWORD *sub_237FB8AC0()
{
  uint64_t v0;
  _QWORD *result;

  result = sub_237F9195C((_QWORD *)(*(_QWORD *)(v0 + 96) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 96) + 40));
  *(_QWORD *)(v0 + 232) = result;
  return result;
}

void sub_237FB8AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  char v15;

  type metadata accessor for AssetDownloadResponse();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v7);
  sub_237FBBC8C();
  sub_237F9191C(&qword_2568B7FE0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v8);
  sub_237FBBC74();
  sub_237F9191C(&qword_2568B8258);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v9);
  sub_237FBBCE0();
  v11 = v2 + v10;
  sub_237FBBBC4(a1, v2, &qword_2568B7FE0);
  sub_237FBBBC4(a2, v11, &qword_2568B7FE0);
  sub_237FBBCAC(v2);
  if (v14)
  {
    v12 = sub_237FBBCAC(v11);
    if (v14)
      v13 = &qword_2568B7FE0;
    else
      v13 = &qword_2568B8258;
  }
  else
  {
    sub_237FBBBC4(v2, v4, &qword_2568B7FE0);
    sub_237FBBCAC(v11);
    if (v14)
    {
      sub_237F94B38(v4, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
      v13 = &qword_2568B8258;
    }
    else
    {
      sub_237FBBBFC(v11, v3, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
      v15 = static UUID.== infix(_:_:)();
      if ((v15 & 1) != 0)
        static Asset.== infix(_:_:)();
      sub_237FBBD30(v3);
      sub_237FBBD30(v4);
      v13 = &qword_2568B7FE0;
    }
  }
  sub_237FBBD64(v12, v13);
  sub_237FA3848();
}

uint64_t sub_237FB8CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  char v17;
  uint64_t v19;

  v4 = type metadata accessor for Asset(0);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_237F9191C(&qword_2568B7F18);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_237F9191C(&qword_2568B8260);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t)&v13[*(int *)(v11 + 48)];
  sub_237FBBBC4(a1, (uint64_t)v13, &qword_2568B7F18);
  sub_237FBBBC4(a2, v14, &qword_2568B7F18);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v4) == 1)
  {
    v15 = _s11CloudAssets21UploadResponseMessageOwet_0(v14, 1, v4);
    if (v15 == 1)
      v16 = &qword_2568B7F18;
    else
      v16 = &qword_2568B8260;
    if (v15 == 1)
      v17 = -1;
    else
      v17 = 0;
  }
  else
  {
    sub_237FBBBC4((uint64_t)v13, (uint64_t)v9, &qword_2568B7F18);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v14, 1, v4) != 1)
    {
      sub_237FBBBFC(v14, (uint64_t)v6, type metadata accessor for Asset);
      static Asset.== infix(_:_:)();
    }
    sub_237F94B38((uint64_t)v9, type metadata accessor for Asset);
    v17 = 0;
    v16 = &qword_2568B8260;
  }
  sub_237F96070((uint64_t)v13, v16);
  return v17 & 1;
}

void sub_237FB8ED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  Swift::UInt v16;

  v3 = type metadata accessor for AssetDownloadResponse();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v4);
  sub_237FBBC74();
  sub_237F9191C(&qword_2568B7FE0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FBBC8C();
  sub_237FBBBC4(v0, v0, &qword_2568B7FE0);
  sub_237FBBCAC(v0);
  if (v6)
  {
    sub_237FBBD6C(1uLL);
  }
  else
  {
    sub_237FBBBFC(v0, v1, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
    sub_237FBBD6C(0);
    type metadata accessor for UUID();
    sub_237FBBB90(&qword_2568B7510, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    dispatch thunk of Hashable.hash(into:)();
    v7 = v1 + *(int *)(v3 + 20);
    type metadata accessor for URL();
    sub_237FBBB90(&qword_2568B7518, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    dispatch thunk of Hashable.hash(into:)();
    type metadata accessor for Asset.ID(0);
    sub_237FBBD50();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_237FA3BA8();
    sub_237FA3B7C();
    sub_237FA3B9C();
    v8 = (uint64_t *)(v7 + *(int *)(v2 + 28));
    v9 = *v8;
    v10 = v8[1];
    sub_237F91894(*v8, v10);
    sub_237FBBD24();
    Data.hash(into:)();
    sub_237F918D8(v9, v10);
    type metadata accessor for Asset(0);
    sub_237FBBD50();
    v13 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    sub_237FA3BA8();
    sub_237FA3B7C();
    sub_237FA3B9C();
    sub_237F91894(v13, v12);
    Data.hash(into:)();
    sub_237F918D8(v13, v12);
    sub_237FBBD6C(*(_QWORD *)(v7 + *(int *)(v9 + 24)));
    dispatch thunk of Hashable.hash(into:)();
    v14 = v1 + *(int *)(v3 + 28);
    if (*(_BYTE *)(v14 + 16) == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v16 = *(_QWORD *)v14;
      v15 = *(_QWORD *)(v14 + 8);
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v16);
      Hasher._combine(_:)(v15);
    }
    sub_237F94B38(v1, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  }
}

void sub_237FB915C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for Asset(0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_237F9191C(&qword_2568B7F18);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_237FBBBC4(v1, (uint64_t)v7, &qword_2568B7F18);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v7, 1, v2) == 1)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    sub_237FBBBFC((uint64_t)v7, (uint64_t)v4, type metadata accessor for Asset);
    Hasher._combine(_:)(0);
    type metadata accessor for URL();
    sub_237FBBB90(&qword_2568B7518, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
    dispatch thunk of Hashable.hash(into:)();
    v8 = type metadata accessor for Asset.ID(0);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v9 = (uint64_t *)&v4[*(int *)(v8 + 24)];
    v10 = *v9;
    v11 = v9[1];
    sub_237F91894(*v9, v11);
    Data.hash(into:)();
    sub_237F918D8(v10, v11);
    v12 = (uint64_t *)&v4[*(int *)(v8 + 28)];
    v13 = *v12;
    v14 = v12[1];
    sub_237F91894(*v12, v14);
    Data.hash(into:)();
    sub_237F918D8(v13, v14);
    v15 = (uint64_t *)&v4[*(int *)(v2 + 20)];
    v16 = *v15;
    v17 = v15[1];
    v18 = v15[2];
    v19 = v15[3];
    sub_237F91894(*v15, v17);
    Data.hash(into:)();
    sub_237F918D8(v16, v17);
    sub_237F91894(v18, v19);
    Data.hash(into:)();
    sub_237F918D8(v18, v19);
    Hasher._combine(_:)(*(_QWORD *)&v4[*(int *)(v2 + 24)]);
    sub_237F94B38((uint64_t)v4, type metadata accessor for Asset);
  }
}

void UploadResponseMessage.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  sub_237F9191C(&qword_2568B7F18);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v2);
  type metadata accessor for UploadResponseMessage();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v3);
  sub_237FBBC74();
  sub_237FB9538(v0, v1);
  v4 = (char *)sub_237FB9460 + 4 * byte_237FE94C0[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_237FB9460()
{
  sub_237FA3B94();
  sub_237FA2D34();
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for UploadResponseMessage()
{
  uint64_t result;

  result = qword_2568B81C8;
  if (!qword_2568B81C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_237FB9538(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UploadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void static UploadResponseMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  sub_237F9191C(&qword_2568B7F18);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FBBC8C();
  type metadata accessor for UploadResponseMessage();
  sub_237F960C8();
  v7 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v7);
  sub_237FBBD80();
  v9 = MEMORY[0x24BDAC7A8](v8);
  MEMORY[0x24BDAC7A8](v9);
  sub_237F9191C(&qword_2568B80F0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v10);
  sub_237FBBCE0();
  v12 = v2 + v11;
  sub_237FB9538(a1, v2);
  sub_237FB9538(a2, v12);
  v13 = (char *)sub_237FB969C + 4 * byte_237FE94C4[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_237FB969C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_237FB9538(v0, v1);
  if (sub_237FBBCC8())
  {
    v2 = swift_bridgeObjectRelease();
    sub_237FBBD64(v2, &qword_2568B80F0);
  }
  else
  {
    sub_237FBBD38();
    sub_237F9F0B0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_237F94B38(v0, (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
  }
  sub_237FA3848();
}

uint64_t sub_237FB97E0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v8;

  v2 = a1 == 0x6172656D65687065 && a2 == 0xEE0074657373416CLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6574736973726570 && a2 == 0xEE00746573734164;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x6C616E676973 && a2 == 0xE600000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0xD000000000000019 && a2 == 0x8000000237FE3B30)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_237FB99B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237FB99F4 + 4 * byte_237FE94C8[a1]))(0x6172656D65687065, 0xEE0074657373416CLL);
}

uint64_t sub_237FB99F4()
{
  return 0x6574736973726570;
}

uint64_t sub_237FB9A18()
{
  return 0x6C616E676973;
}

unint64_t sub_237FB9A2C()
{
  return 0xD000000000000019;
}

uint64_t sub_237FB9A48(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_237FB9AC4()
{
  return 0x726F727265;
}

uint64_t sub_237FB9AD8()
{
  unsigned __int8 *v0;

  return sub_237FB99B0(*v0);
}

uint64_t sub_237FB9AE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FB97E0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FB9B04()
{
  sub_237FBA880();
  return CodingKey.description.getter();
}

uint64_t sub_237FB9B2C()
{
  sub_237FBA880();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FB9B58()
{
  sub_237FBA9E8();
  return CodingKey.description.getter();
}

uint64_t sub_237FB9B80()
{
  sub_237FBA9E8();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FB9BA8()
{
  sub_237FBA9AC();
  return CodingKey.description.getter();
}

uint64_t sub_237FB9BD0()
{
  sub_237FBA9AC();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FB9BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FA53F4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_237FB9C20()
{
  sub_237FBA934();
  return CodingKey.description.getter();
}

uint64_t sub_237FB9C48()
{
  sub_237FBA934();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FB9C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FB9A48(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_237FB9C9C()
{
  sub_237FBA8BC();
  return CodingKey.description.getter();
}

uint64_t sub_237FB9CC4()
{
  sub_237FBA8BC();
  return CodingKey.debugDescription.getter();
}

void UploadResponseMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  sub_237F9191C(&qword_2568B80F8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v2);
  sub_237F9283C();
  sub_237F9191C(&qword_2568B8100);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237FBBCFC(v4, v14);
  sub_237F9191C(&qword_2568B8108);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F9283C();
  sub_237F9191C(&qword_2568B7F18);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F982D4();
  sub_237F9191C(&qword_2568B8110);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F982D4();
  type metadata accessor for UploadResponseMessage();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F982D4();
  v11 = v10 - v9;
  sub_237F9191C(&qword_2568B8118);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F982D4();
  sub_237F9195C(a1, a1[3]);
  sub_237FBA880();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_237FB9538(v15, v11);
  v13 = (char *)sub_237FB9EC0 + 4 * byte_237FE94CC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

void sub_237FB9EC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = *v0;
  *(_BYTE *)(v4 - 72) = 0;
  sub_237FBA9E8();
  sub_237FBBC60();
  *(_QWORD *)(v4 - 72) = v5;
  sub_237F9191C(&qword_2568B7F20);
  sub_237FBAAD4(&qword_2568B8160, &qword_2568B8168, (uint64_t)&protocol conformance descriptor for AssetSkeleton, MEMORY[0x24BEE12A0]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 200) + 8))(v3, v2);
  sub_237FBBCA4(v1, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 112) + 8));
  swift_bridgeObjectRelease();
  sub_237F960D8();
}

void UploadResponseMessage.hashValue.getter()
{
  sub_237F961E4();
  UploadResponseMessage.hash(into:)();
  sub_237F96328();
  sub_237F9631C();
}

void UploadResponseMessage.init(from:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[19];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v49[13] = a2;
  v52 = sub_237F9191C(&qword_2568B8170);
  v49[18] = *(_QWORD *)(v52 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F9283C();
  v49[17] = v5;
  v6 = sub_237F9191C(&qword_2568B8178);
  v49[11] = *(_QWORD *)(v6 - 8);
  v49[12] = v6;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237FBBCFC(v8, v49[0]);
  v9 = sub_237F9191C(&qword_2568B8180);
  v49[9] = *(_QWORD *)(v9 - 8);
  v49[10] = v9;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v10);
  sub_237F9283C();
  v49[15] = v11;
  v12 = sub_237F9191C(&qword_2568B8188);
  v49[7] = *(_QWORD *)(v12 - 8);
  v49[8] = v12;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v13);
  sub_237F9283C();
  v49[14] = v14;
  v53 = sub_237F9191C(&qword_2568B8190);
  v50 = *(_QWORD *)(v53 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v15);
  sub_237F982D4();
  v18 = v17 - v16;
  v51 = type metadata accessor for UploadResponseMessage();
  sub_237F960C8();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  sub_237FBBD80();
  v24 = MEMORY[0x24BDAC7A8](v23);
  v26 = (char *)v49 - v25;
  v27 = MEMORY[0x24BDAC7A8](v24);
  v29 = (char *)v49 - v28;
  MEMORY[0x24BDAC7A8](v27);
  v31 = (char *)v49 - v30;
  v54 = a1;
  v32 = (_QWORD *)sub_237FBBD38();
  sub_237F9195C(v32, v33);
  sub_237FBA880();
  v34 = v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v34)
  {
    v49[2] = (uint64_t)v29;
    v49[5] = (uint64_t)v26;
    v49[3] = v2;
    v49[4] = (uint64_t)v22;
    v35 = v51;
    v49[6] = (uint64_t)v31;
    v55 = v18;
    v36 = KeyedDecodingContainer.allKeys.getter();
    v37 = *(_QWORD *)(v36 + 16);
    if (v37)
    {
      v49[1] = 0;
      v38 = *(unsigned __int8 *)(v36 + 32);
      sub_237FA372C(1, v37, v36, v36 + 32, 0, (2 * v37) | 1);
      v40 = v39;
      v42 = v41;
      swift_bridgeObjectRelease();
      v43 = v35;
      if (v40 == v42 >> 1)
        __asm { BR              X9 }
    }
    else
    {
      v43 = v35;
    }
    v44 = type metadata accessor for DecodingError();
    swift_allocError();
    v46 = v45;
    sub_237F9191C(&qword_2568B78D8);
    *v46 = v43;
    v47 = v53;
    v48 = v55;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v44 - 8) + 104))(v46, *MEMORY[0x24BEE26D0], v44);
    swift_willThrow();
    sub_237FA3AFC();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v47);
  }
  sub_237F91A00(v54);
  sub_237F960D8();
}

void sub_237FBA510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237FBBD94();
  sub_237FBBC38();
  if (!v1)
  {
    sub_237F9191C(&qword_2568B7F18);
    sub_237FBAA9C(&qword_2568B81A8);
    sub_237FBBCD4();
    sub_237FBBC50(*(_QWORD *)(v2 - 216));
    sub_237FA3AFC();
    sub_237FBBCA4(*(_QWORD *)(v2 - 96), *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8));
    v3 = *(_QWORD *)(v2 - 248);
    sub_237FBBD24();
    swift_storeEnumTagMultiPayload();
    v4 = v3;
    v5 = *(_QWORD *)(v2 - 240);
    sub_237FBBBFC(v4, v5, (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
    sub_237FBBBFC(v5, *(_QWORD *)(v2 - 184), (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
    sub_237F91A00(*(_QWORD *)(v2 - 104));
    JUMPOUT(0x237FBA500);
  }
  sub_237FA3AFC();
  sub_237FBBCA4(v0, *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 136) + 8));
  JUMPOUT(0x237FBA4FCLL);
}

void sub_237FBA5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  sub_237FBBD44();
  sub_237FBBC38();
  if (v1)
    JUMPOUT(0x237FBA5C8);
  sub_237FBAA60();
  sub_237FBBCD4();
  v3 = *(_QWORD *)(v2 - 136);
  sub_237FBBC50(*(_QWORD *)(v2 - 200));
  sub_237FA3AFC();
  sub_237FBBCA4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  v4 = *(_QWORD **)(v2 - 264);
  *v4 = *(_QWORD *)(v2 - 72);
  sub_237FBBD24();
  swift_storeEnumTagMultiPayload();
  v5 = (uint64_t)v4;
  v6 = *(_QWORD *)(v2 - 240);
  sub_237FBBBFC(v5, v6, (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
  sub_237FBBBFC(v6, *(_QWORD *)(v2 - 184), (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
  sub_237F91A00(*(_QWORD *)(v2 - 104));
  JUMPOUT(0x237FBA500);
}

void sub_237FBA5E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_237FBBDA0();
  sub_237FBBC38();
  if (v1)
  {
    sub_237FA3AFC();
    JUMPOUT(0x237FBA6ACLL);
  }
  sub_237FBAA24();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v6 = *(_QWORD *)(v5 - 136);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
  sub_237FA3AFC();
  sub_237FBBCA4(v0, *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8));
  **(_QWORD **)(v5 - 256) = *(_QWORD *)(v5 - 72);
  sub_237FBBD24();
  JUMPOUT(0x237FBA78CLL);
}

Swift::Int sub_237FBA7D4()
{
  Hasher.init(_seed:)();
  UploadResponseMessage.hash(into:)();
  return Hasher._finalize()();
}

void sub_237FBA80C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UploadResponseMessage.init(from:)(a1, a2);
}

void sub_237FBA820(_QWORD *a1)
{
  UploadResponseMessage.encode(to:)(a1);
}

uint64_t sub_237FBA838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_237FBA880()
{
  unint64_t result;

  result = qword_2568B8120;
  if (!qword_2568B8120)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9B5C, &type metadata for UploadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8120);
  }
  return result;
}

unint64_t sub_237FBA8BC()
{
  unint64_t result;

  result = qword_2568B8128;
  if (!qword_2568B8128)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9B0C, &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8128);
  }
  return result;
}

unint64_t sub_237FBA8F8()
{
  unint64_t result;

  result = qword_2568B8130;
  if (!qword_2568B8130)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for SimultaneousTransferError, &type metadata for SimultaneousTransferError);
    atomic_store(result, (unint64_t *)&qword_2568B8130);
  }
  return result;
}

unint64_t sub_237FBA934()
{
  unint64_t result;

  result = qword_2568B8138;
  if (!qword_2568B8138)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9ABC, &type metadata for UploadResponseMessage.SignalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8138);
  }
  return result;
}

unint64_t sub_237FBA970()
{
  unint64_t result;

  result = qword_2568B8140;
  if (!qword_2568B8140)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Signal, &type metadata for Signal);
    atomic_store(result, (unint64_t *)&qword_2568B8140);
  }
  return result;
}

unint64_t sub_237FBA9AC()
{
  unint64_t result;

  result = qword_2568B8148;
  if (!qword_2568B8148)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9A6C, &type metadata for UploadResponseMessage.PersistedAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8148);
  }
  return result;
}

unint64_t sub_237FBA9E8()
{
  unint64_t result;

  result = qword_2568B8158;
  if (!qword_2568B8158)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9A1C, &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8158);
  }
  return result;
}

unint64_t sub_237FBAA24()
{
  unint64_t result;

  result = qword_2568B8198;
  if (!qword_2568B8198)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for SimultaneousTransferError, &type metadata for SimultaneousTransferError);
    atomic_store(result, (unint64_t *)&qword_2568B8198);
  }
  return result;
}

unint64_t sub_237FBAA60()
{
  unint64_t result;

  result = qword_2568B81A0;
  if (!qword_2568B81A0)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Signal, &type metadata for Signal);
    atomic_store(result, (unint64_t *)&qword_2568B81A0);
  }
  return result;
}

void sub_237FBAA9C(_QWORD *a1)
{
  if (!*a1)
  {
    sub_237F919BC(&qword_2568B7F18);
    sub_237FBBD74();
  }
  sub_237F928A0();
}

uint64_t sub_237FBAAD4(unint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v8 = sub_237F919BC(&qword_2568B7F20);
    sub_237FBBB90(a2, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
    v10 = v9;
    result = MEMORY[0x23B829E84](a4, v8, &v10);
    atomic_store(result, a1);
  }
  return result;
}

void sub_237FBAB58()
{
  sub_237FBBB90(&qword_2568B81C0, (void (*)(uint64_t))type metadata accessor for UploadResponseMessage);
}

uint64_t initializeBufferWithCopyOfBuffer for UploadResponseMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_237FBABDC + 4 * byte_237FE94D4[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v7;
}

uint64_t destroy for UploadResponseMessage(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
    case 2:
    case 3:
      result = swift_bridgeObjectRelease();
      break;
    case 1:
      v3 = type metadata accessor for Asset(0);
      result = _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v3);
      if (!(_DWORD)result)
      {
        v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        v5 = type metadata accessor for Asset.ID(0);
        swift_bridgeObjectRelease();
        sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 24)), *(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
        sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 28)), *(_QWORD *)(a1 + *(int *)(v5 + 28) + 8));
        v6 = a1 + *(int *)(v3 + 20);
        sub_237F918D8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        result = sub_237F918D8(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
      }
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for UploadResponseMessage()
{
  char *v0;

  v0 = (char *)sub_237FBAEE0 + 4 * byte_237FE94DC[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

_QWORD *sub_237FBAEE0()
{
  _QWORD *v0;
  _QWORD *v1;

  *v0 = *v1;
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t assignWithCopy for UploadResponseMessage(uint64_t result, uint64_t a2)
{
  char *v2;

  if (result != a2)
  {
    sub_237F94B38(result, (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
    v2 = (char *)&loc_237FBB0E0 + 4 * byte_237FE94E0[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  return result;
}

char *initializeWithTake for UploadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v6 = type metadata accessor for Asset(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
    {
      v7 = sub_237F9191C(&qword_2568B7F18);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = (int *)type metadata accessor for Asset.ID(0);
      *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
      *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
      *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
      v10 = *(int *)(v6 + 20);
      v11 = &a1[v10];
      v12 = &a2[v10];
      v13 = *((_OWORD *)v12 + 1);
      *(_OWORD *)v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v13;
      *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for UploadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  if (a1 != a2)
  {
    sub_237F94B38((uint64_t)a1, (uint64_t (*)(_QWORD))type metadata accessor for UploadResponseMessage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        v7 = sub_237F9191C(&qword_2568B7F18);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v8 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        v9 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
        *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
        v10 = *(int *)(v6 + 20);
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_237FBB508()
{
  return swift_storeEnumTagMultiPayload();
}

void sub_237FBB518()
{
  unint64_t v0;

  sub_237FBB590(319);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

void sub_237FBB590(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_2568B81D8)
  {
    v2 = type metadata accessor for Asset(255);
    sub_237FBBB90(&qword_2568B7558, (void (*)(uint64_t))type metadata accessor for Asset);
    v4 = v3;
    sub_237FBBB90(qword_2568B8970, (void (*)(uint64_t))type metadata accessor for Asset);
    v6 = type metadata accessor for XPCResult(a1, v2, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_2568B81D8);
  }
}

uint64_t storeEnumTagSinglePayload for UploadResponseMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_237FBB680 + 4 * byte_237FE94E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_237FBB6B4 + 4 * byte_237FE94E4[v4]))();
}

uint64_t sub_237FBB6B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FBB6BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FBB6C4);
  return result;
}

uint64_t sub_237FBB6D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FBB6D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_237FBB6DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FBB6E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.CodingKeys()
{
  return &type metadata for UploadResponseMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.EphemeralAssetCodingKeys()
{
  return &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.PersistedAssetCodingKeys()
{
  return &type metadata for UploadResponseMessage.PersistedAssetCodingKeys;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.SignalCodingKeys()
{
  return &type metadata for UploadResponseMessage.SignalCodingKeys;
}

uint64_t _s11CloudAssets21UploadResponseMessageO24EphemeralAssetCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FBB774 + 4 * byte_237FE94EE[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FBB794 + 4 * byte_237FE94F3[v4]))();
}

_BYTE *sub_237FBB774(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FBB794(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FBB79C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FBB7A4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FBB7AC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FBB7B4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UploadResponseMessage.SimultaneousTransferErrorCodingKeys()
{
  return &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys;
}

unint64_t sub_237FBB7D4()
{
  unint64_t result;

  result = qword_2568B81E0;
  if (!qword_2568B81E0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9714, &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B81E0);
  }
  return result;
}

unint64_t sub_237FBB814()
{
  unint64_t result;

  result = qword_2568B81E8;
  if (!qword_2568B81E8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE97CC, &type metadata for UploadResponseMessage.SignalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B81E8);
  }
  return result;
}

unint64_t sub_237FBB854()
{
  unint64_t result;

  result = qword_2568B81F0;
  if (!qword_2568B81F0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9884, &type metadata for UploadResponseMessage.PersistedAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B81F0);
  }
  return result;
}

unint64_t sub_237FBB894()
{
  unint64_t result;

  result = qword_2568B81F8;
  if (!qword_2568B81F8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE993C, &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B81F8);
  }
  return result;
}

unint64_t sub_237FBB8D4()
{
  unint64_t result;

  result = qword_2568B8200;
  if (!qword_2568B8200)
  {
    result = MEMORY[0x23B829E84](&unk_237FE99F4, &type metadata for UploadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8200);
  }
  return result;
}

unint64_t sub_237FBB914()
{
  unint64_t result;

  result = qword_2568B8208;
  if (!qword_2568B8208)
  {
    result = MEMORY[0x23B829E84](&unk_237FE98AC, &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8208);
  }
  return result;
}

unint64_t sub_237FBB954()
{
  unint64_t result;

  result = qword_2568B8210;
  if (!qword_2568B8210)
  {
    result = MEMORY[0x23B829E84](&unk_237FE98D4, &type metadata for UploadResponseMessage.EphemeralAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8210);
  }
  return result;
}

unint64_t sub_237FBB994()
{
  unint64_t result;

  result = qword_2568B8218;
  if (!qword_2568B8218)
  {
    result = MEMORY[0x23B829E84](&unk_237FE97F4, &type metadata for UploadResponseMessage.PersistedAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8218);
  }
  return result;
}

unint64_t sub_237FBB9D4()
{
  unint64_t result;

  result = qword_2568B8220;
  if (!qword_2568B8220)
  {
    result = MEMORY[0x23B829E84](&unk_237FE981C, &type metadata for UploadResponseMessage.PersistedAssetCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8220);
  }
  return result;
}

unint64_t sub_237FBBA14()
{
  unint64_t result;

  result = qword_2568B8228;
  if (!qword_2568B8228)
  {
    result = MEMORY[0x23B829E84](&unk_237FE973C, &type metadata for UploadResponseMessage.SignalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8228);
  }
  return result;
}

unint64_t sub_237FBBA54()
{
  unint64_t result;

  result = qword_2568B8230;
  if (!qword_2568B8230)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9764, &type metadata for UploadResponseMessage.SignalCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8230);
  }
  return result;
}

unint64_t sub_237FBBA94()
{
  unint64_t result;

  result = qword_2568B8238;
  if (!qword_2568B8238)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9684, &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8238);
  }
  return result;
}

unint64_t sub_237FBBAD4()
{
  unint64_t result;

  result = qword_2568B8240;
  if (!qword_2568B8240)
  {
    result = MEMORY[0x23B829E84](&unk_237FE96AC, &type metadata for UploadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8240);
  }
  return result;
}

unint64_t sub_237FBBB14()
{
  unint64_t result;

  result = qword_2568B8248;
  if (!qword_2568B8248)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9964, &type metadata for UploadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8248);
  }
  return result;
}

unint64_t sub_237FBBB54()
{
  unint64_t result;

  result = qword_2568B8250;
  if (!qword_2568B8250)
  {
    result = MEMORY[0x23B829E84](&unk_237FE998C, &type metadata for UploadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8250);
  }
  return result;
}

void sub_237FBBB90(_QWORD *a1, void (*a2)(uint64_t))
{
  if (!*a1)
  {
    a2(255);
    sub_237FBBD74();
  }
  sub_237F928A0();
}

void sub_237FBBBC4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = sub_237F9191C(a3);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16));
  sub_237F928A0();
}

void sub_237FBBBFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  v3 = a3(0);
  sub_237F9C99C(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 32));
  sub_237F928A0();
}

uint64_t sub_237FBBC38()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FBBC50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_237FBBC60()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FBBCA4@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v2;

  return a2(a1, v2);
}

uint64_t sub_237FBBCAC(uint64_t a1)
{
  uint64_t v1;

  return _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v1);
}

uint64_t sub_237FBBCC8()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_237FBBCD4()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

void sub_237FBBCFC(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 160) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_237FBBD18()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t sub_237FBBD24()
{
  uint64_t v0;

  return v0;
}

void sub_237FBBD30(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F94B38(a1, v1);
}

uint64_t sub_237FBBD38()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_237FBBD44()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 2;
  return sub_237FBA934();
}

void sub_237FBBD64(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_237F96070(v2, a2);
}

void sub_237FBBD6C(Swift::UInt a1)
{
  Hasher._combine(_:)(a1);
}

void sub_237FBBD74()
{
  JUMPOUT(0x23B829E84);
}

unint64_t sub_237FBBD94()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return sub_237FBA9AC();
}

unint64_t sub_237FBBDA0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 3;
  return sub_237FBA8BC();
}

void UploadRequestMessage.hash(into:)()
{
  uint64_t v0;

  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 8));
  sub_237FA2F48();
}

uint64_t static UploadRequestMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) == 0)
      goto LABEL_3;
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  if ((*(_BYTE *)(a2 + 8) & 1) == 0)
    goto LABEL_5;
LABEL_3:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_237FA082C();
  v3 = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_237FBBE5C()
{
  sub_237FBC6EC();
  return CodingKey.description.getter();
}

uint64_t sub_237FBBE84()
{
  sub_237FBC6EC();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FBBEAC()
{
  sub_237FBC674();
  return CodingKey.description.getter();
}

uint64_t sub_237FBBED4()
{
  sub_237FBC674();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FBBEFC()
{
  sub_237FBC6B0();
  return CodingKey.description.getter();
}

uint64_t sub_237FBBF24()
{
  sub_237FBC6B0();
  return CodingKey.debugDescription.getter();
}

void UploadRequestMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = sub_237F9191C(&qword_2568B8268);
  v19 = *(_QWORD *)(v3 - 8);
  v20 = v3;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F982D4();
  v7 = v6 - v5;
  v8 = sub_237F9191C(&qword_2568B8270);
  v18 = *(_QWORD *)(v8 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F982D4();
  v12 = v11 - v10;
  v21 = *(_QWORD *)(sub_237F9191C(&qword_2568B8278) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v13);
  sub_237F982D4();
  v16 = v15 - v14;
  v17 = *(unsigned __int8 *)(v1 + 8);
  sub_237F9195C(a1, a1[3]);
  sub_237FBC674();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((v17 & 1) != 0)
  {
    sub_237FBCCA0();
    sub_237FA3A58();
    sub_237F9191C(&qword_2568B8290);
    sub_237FBC728(&qword_2568B8298, &qword_2568B82A0, (uint64_t)&protocol conformance descriptor for AssetUploadRequest, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v7, v20);
  }
  else
  {
    sub_237FBC6EC();
    sub_237FA3A58();
    sub_237F9191C(&qword_2568B8290);
    sub_237FBC728(&qword_2568B8298, &qword_2568B82A0, (uint64_t)&protocol conformance descriptor for AssetUploadRequest, MEMORY[0x24BEE12A0]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v12, v8);
  }
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v16, v17);
  sub_237F960D8();
}

Swift::Int UploadRequestMessage.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  sub_237F961E4();
  Hasher._combine(_:)(v1);
  sub_237FA2F48();
  return sub_237F96328();
}

void UploadRequestMessage.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v24 = *(_QWORD *)(sub_237F9191C(&qword_2568B82B0) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v23 = sub_237F9191C(&qword_2568B82B8);
  v4 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  sub_237F982D4();
  v5 = sub_237F9191C(&qword_2568B82C0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  sub_237F982D4();
  v9 = v8 - v7;
  sub_237F9195C(a1, a1[3]);
  sub_237FBC674();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v25)
    goto LABEL_10;
  v26 = v6;
  v10 = KeyedDecodingContainer.allKeys.getter();
  v11 = *(_QWORD *)(v10 + 16);
  v12 = v5;
  if (!v11)
  {
LABEL_8:
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    sub_237F9191C(&qword_2568B78D8);
    *v20 = &type metadata for UploadRequestMessage;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_unknownObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v9, v12);
LABEL_10:
    v21 = (uint64_t)a1;
    goto LABEL_11;
  }
  v13 = *(_BYTE *)(v10 + 32);
  sub_237FA372C(1, v11, v10, v10 + 32, 0, (2 * v11) | 1);
  v15 = v14;
  v17 = v16;
  swift_bridgeObjectRelease();
  if (v15 != v17 >> 1)
  {
    v12 = v5;
    goto LABEL_8;
  }
  if ((v13 & 1) != 0)
  {
    sub_237FBCCA0();
    sub_237FA3C3C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_237F9191C(&qword_2568B8290);
    sub_237FBC728(&qword_2568B82C8, &qword_2568B82D0, (uint64_t)&protocol conformance descriptor for AssetUploadRequest, MEMORY[0x24BEE12D0]);
    sub_237FA3AA8();
    sub_237FA38C4(v24);
  }
  else
  {
    LOBYTE(v27) = 0;
    sub_237FBC6EC();
    sub_237FA3C3C();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    sub_237F9191C(&qword_2568B8290);
    sub_237FBC728(&qword_2568B82C8, &qword_2568B82D0, (uint64_t)&protocol conformance descriptor for AssetUploadRequest, MEMORY[0x24BEE12D0]);
    sub_237FA3AA8();
    sub_237FA38C4(v4);
  }
  sub_237FA3AFC();
  sub_237FA3A4C(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8));
  v21 = (uint64_t)a1;
  *(_QWORD *)a2 = v27;
  *(_BYTE *)(a2 + 8) = v13;
LABEL_11:
  sub_237F91A00(v21);
  sub_237F960D8();
}

Swift::Int sub_237FBC5F0()
{
  uint64_t v0;
  Swift::UInt v1;

  v1 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_237FA2F48();
  return Hasher._finalize()();
}

void sub_237FBC648(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  UploadRequestMessage.init(from:)(a1, a2);
}

void sub_237FBC65C(_QWORD *a1)
{
  UploadRequestMessage.encode(to:)(a1);
}

unint64_t sub_237FBC674()
{
  unint64_t result;

  result = qword_2568B8280;
  if (!qword_2568B8280)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9FB4, &type metadata for UploadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8280);
  }
  return result;
}

unint64_t sub_237FBC6B0()
{
  unint64_t result;

  result = qword_2568B8288;
  if (!qword_2568B8288)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9F64, &type metadata for UploadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8288);
  }
  return result;
}

unint64_t sub_237FBC6EC()
{
  unint64_t result;

  result = qword_2568B82A8;
  if (!qword_2568B82A8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9F14, &type metadata for UploadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B82A8);
  }
  return result;
}

uint64_t sub_237FBC728(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_237F919BC(&qword_2568B8290);
    v10 = sub_237FBC7A4(a2, a3);
    result = MEMORY[0x23B829E84](a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_237FBC7A4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AssetUploadRequest();
    result = MEMORY[0x23B829E84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_237FBC7E8()
{
  unint64_t result;

  result = qword_2568B82D8;
  if (!qword_2568B82D8)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for UploadRequestMessage, &type metadata for UploadRequestMessage);
    atomic_store(result, (unint64_t *)&qword_2568B82D8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for UploadRequestMessage(uint64_t a1, uint64_t a2)
{
  char v3;

  v3 = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for UploadRequestMessage()
{
  return &type metadata for UploadRequestMessage;
}

uint64_t storeEnumTagSinglePayload for UploadRequestMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237FBC92C + 4 * byte_237FE9BB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237FBC960 + 4 * byte_237FE9BB0[v4]))();
}

uint64_t sub_237FBC960(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FBC968(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FBC970);
  return result;
}

uint64_t sub_237FBC97C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FBC984);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237FBC988(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FBC990(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.CodingKeys()
{
  return &type metadata for UploadRequestMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.BatchRequestsCodingKeys()
{
  return &type metadata for UploadRequestMessage.BatchRequestsCodingKeys;
}

uint64_t _s11CloudAssets20UploadRequestMessageO23BatchRequestsCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FBCA00 + 4 * byte_237FE9BBA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FBCA20 + 4 * byte_237FE9BBF[v4]))();
}

_BYTE *sub_237FBCA00(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FBCA20(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FBCA28(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FBCA30(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FBCA38(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FBCA40(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for UploadRequestMessage.StreamRequestsCodingKeys()
{
  return &type metadata for UploadRequestMessage.StreamRequestsCodingKeys;
}

unint64_t sub_237FBCA60()
{
  unint64_t result;

  result = qword_2568B82E0;
  if (!qword_2568B82E0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9D7C, &type metadata for UploadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B82E0);
  }
  return result;
}

unint64_t sub_237FBCAA0()
{
  unint64_t result;

  result = qword_2568B82E8;
  if (!qword_2568B82E8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9E34, &type metadata for UploadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B82E8);
  }
  return result;
}

unint64_t sub_237FBCAE0()
{
  unint64_t result;

  result = qword_2568B82F0;
  if (!qword_2568B82F0)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9EEC, &type metadata for UploadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B82F0);
  }
  return result;
}

unint64_t sub_237FBCB20()
{
  unint64_t result;

  result = qword_2568B82F8;
  if (!qword_2568B82F8)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9DA4, &type metadata for UploadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B82F8);
  }
  return result;
}

unint64_t sub_237FBCB60()
{
  unint64_t result;

  result = qword_2568B8300;
  if (!qword_2568B8300)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9DCC, &type metadata for UploadRequestMessage.BatchRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8300);
  }
  return result;
}

unint64_t sub_237FBCBA0()
{
  unint64_t result;

  result = qword_2568B8308;
  if (!qword_2568B8308)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9CEC, &type metadata for UploadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8308);
  }
  return result;
}

unint64_t sub_237FBCBE0()
{
  unint64_t result;

  result = qword_2568B8310;
  if (!qword_2568B8310)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9D14, &type metadata for UploadRequestMessage.StreamRequestsCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8310);
  }
  return result;
}

unint64_t sub_237FBCC20()
{
  unint64_t result;

  result = qword_2568B8318;
  if (!qword_2568B8318)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9E5C, &type metadata for UploadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8318);
  }
  return result;
}

unint64_t sub_237FBCC60()
{
  unint64_t result;

  result = qword_2568B8320;
  if (!qword_2568B8320)
  {
    result = MEMORY[0x23B829E84](&unk_237FE9E84, &type metadata for UploadRequestMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8320);
  }
  return result;
}

unint64_t sub_237FBCCA0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return sub_237FBC6B0();
}

uint64_t sub_237FBCCAC(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  char v7;

  if (a1 == 0xD000000000000011 && a2 == 0x8000000237FE3B50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = a1 == 0x6552746C75736572 && a2 == 0xEE00646576696563;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x65526C616E676973 && a2 == 0xEE00646576696563)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v7 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_237FBCE34()
{
  return 3;
}

uint64_t sub_237FBCE3C(char a1)
{
  if (!a1)
    return 0xD000000000000011;
  if (a1 == 1)
    return 0x6552746C75736572;
  return 0x65526C616E676973;
}

void sub_237FBCEB0()
{
  Hasher.init(_seed:)();
  sub_237F964CC();
  Hasher._finalize()();
  sub_237F9631C();
}

uint64_t sub_237FBCEE0()
{
  char *v0;

  return sub_237FBCE3C(*v0);
}

uint64_t sub_237FBCEE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FBCCAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FBCF0C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237FBCE34();
  *a1 = result;
  return result;
}

uint64_t sub_237FBCF30()
{
  sub_237FBD450();
  return CodingKey.description.getter();
}

uint64_t sub_237FBCF58()
{
  sub_237FBD450();
  return CodingKey.debugDescription.getter();
}

void sub_237FBCF80()
{
  sub_237FBCEB0();
}

uint64_t sub_237FBCF98()
{
  sub_237FBD50C();
  return CodingKey.description.getter();
}

uint64_t sub_237FBCFC0()
{
  sub_237FBD50C();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FBCFE8()
{
  sub_237FBD4D0();
  return CodingKey.description.getter();
}

uint64_t sub_237FBD010()
{
  sub_237FBD4D0();
  return CodingKey.debugDescription.getter();
}

void sub_237FBD038()
{
  Hasher.init(_seed:)();
  sub_237F964CC();
  Hasher._finalize()();
  sub_237F9631C();
}

uint64_t sub_237FBD064()
{
  sub_237FBD588();
  return CodingKey.description.getter();
}

uint64_t sub_237FBD08C()
{
  sub_237FBD588();
  return CodingKey.debugDescription.getter();
}

void AssetUploadEvent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int EnumCaseMultiPayload;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = sub_237F9191C(&qword_2568B8328);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237FBEA50(v5, v22);
  v25 = *(_QWORD *)(sub_237F9191C(&qword_2568B8330) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9283C();
  v24 = v7;
  sub_237F9191C(&qword_2568B7F18);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F982D4();
  v11 = v10 - v9;
  v23 = *(_QWORD *)(sub_237F9191C(&qword_2568B8338) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F982D4();
  v15 = v14 - v13;
  type metadata accessor for AssetUploadEvent();
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v16);
  sub_237F9638C();
  v30 = *(_QWORD *)(sub_237F9191C(&qword_2568B8340) - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v17);
  sub_237F982D4();
  v20 = v19 - v18;
  sub_237F9195C(a1, a1[3]);
  sub_237FBD450();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_237FBD48C(v29, v1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_237FBD588();
    sub_237FBEA30();
    sub_237F9191C(&qword_2568B7F20);
    sub_237FBDC48(&qword_2568B8160, &qword_2568B8168, (uint64_t)&protocol conformance descriptor for AssetSkeleton, MEMORY[0x24BEE12A0]);
    sub_237FBEA6C();
    sub_237FB7F18(v15, *(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
    sub_237FBBCA4(v20, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_237FBEA98();
    sub_237FBEA30();
    sub_237FBA970();
    sub_237FBEA6C();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    sub_237FB7F18(v20, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
    goto LABEL_6;
  }
  sub_237FBA838(v1, v11);
  sub_237FBEA78();
  sub_237FBEA30();
  sub_237FBDC0C(&qword_2568B8150);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_237FB7F18(v24, *(uint64_t (**)(uint64_t, uint64_t))(v25 + 8));
  sub_237FBD548(v11);
  sub_237FBBCA4(v20, *(uint64_t (**)(uint64_t, uint64_t))(v30 + 8));
LABEL_7:
  sub_237F960D8();
}

uint64_t type metadata accessor for AssetUploadEvent()
{
  uint64_t result;

  result = qword_2568B8388;
  if (!qword_2568B8388)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_237FBD450()
{
  unint64_t result;

  result = qword_2568B8348;
  if (!qword_2568B8348)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA4DC, &type metadata for AssetUploadEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8348);
  }
  return result;
}

uint64_t sub_237FBD48C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_237FBD4D0()
{
  unint64_t result;

  result = qword_2568B8350;
  if (!qword_2568B8350)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA48C, &type metadata for AssetUploadEvent.SignalReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8350);
  }
  return result;
}

unint64_t sub_237FBD50C()
{
  unint64_t result;

  result = qword_2568B8358;
  if (!qword_2568B8358)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA43C, &type metadata for AssetUploadEvent.ResultReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8358);
  }
  return result;
}

uint64_t sub_237FBD548(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_237F9191C(&qword_2568B7F18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_237FBD588()
{
  unint64_t result;

  result = qword_2568B8360;
  if (!qword_2568B8360)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA3EC, &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8360);
  }
  return result;
}

void AssetUploadEvent.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  _QWORD *v52;
  _QWORD *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;

  v63 = a2;
  v62 = sub_237F9191C(&qword_2568B8368);
  v59 = *(_QWORD *)(v62 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F9283C();
  v66 = v5;
  v61 = sub_237F9191C(&qword_2568B8370);
  v58 = *(_QWORD *)(v61 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237FBEA50(v7, v51[0]);
  v60 = sub_237F9191C(&qword_2568B8378);
  v57 = *(_QWORD *)(v60 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F9283C();
  v64 = v9;
  v10 = sub_237F9191C(&qword_2568B8380);
  v67 = *(_QWORD *)(v10 - 8);
  v68 = v10;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v11);
  sub_237F9638C();
  v12 = type metadata accessor for AssetUploadEvent();
  sub_237F960F0();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v19 = (char *)v51 - v18;
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)v51 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)v51 - v23;
  v25 = a1[3];
  v69 = a1;
  sub_237F9195C(a1, v25);
  sub_237FBD450();
  v26 = v70;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v26)
  {
    v27 = (uint64_t)v69;
    goto LABEL_11;
  }
  v52 = v22;
  v53 = v16;
  v54 = v24;
  v55 = v19;
  v56 = v12;
  v28 = v68;
  v70 = v2;
  v29 = KeyedDecodingContainer.allKeys.getter();
  v30 = *(_QWORD *)(v29 + 16);
  if (!v30)
  {
    v27 = (uint64_t)v69;
LABEL_10:
    v38 = v67;
    v39 = v56;
    v40 = type metadata accessor for DecodingError();
    swift_allocError();
    v42 = v41;
    sub_237F9191C(&qword_2568B78D8);
    *v42 = v39;
    v43 = v70;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v42, *MEMORY[0x24BEE26D0], v40);
    swift_willThrow();
    sub_237FBE9F0();
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v28);
    goto LABEL_11;
  }
  v31 = v28;
  v51[1] = 0;
  v32 = *(unsigned __int8 *)(v29 + 32);
  sub_237FA372C(1, v30, v29, v29 + 32, 0, (2 * v30) | 1);
  v34 = v33;
  v36 = v35;
  swift_bridgeObjectRelease();
  if (v34 != v36 >> 1)
  {
    v27 = (uint64_t)v69;
    v28 = v31;
    goto LABEL_10;
  }
  if (v32)
  {
    if (v32 == 1)
    {
      sub_237FBEA78();
      v37 = v65;
      sub_237FBEA90();
      sub_237F9191C(&qword_2568B7F18);
      sub_237FBDC0C(&qword_2568B81A8);
      sub_237FBEA84();
      v27 = (uint64_t)v69;
      sub_237FBBCA4(v37, *(uint64_t (**)(uint64_t, uint64_t))(v58 + 8));
      sub_237FBE9F0();
      sub_237FBE9F8(v67);
      v46 = v55;
    }
    else
    {
      sub_237FBEA98();
      sub_237FBEA90();
      sub_237FBAA60();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v27 = (uint64_t)v69;
      sub_237FBE9F8(v59);
      sub_237FBE9F0();
      v47 = sub_237FBEA1C();
      v48(v47);
      v46 = v53;
      *v53 = v71;
    }
  }
  else
  {
    LOBYTE(v71) = 0;
    sub_237FBD588();
    v44 = v70;
    sub_237FBEA90();
    sub_237F9191C(&qword_2568B7F20);
    sub_237FBDC48(&qword_2568B81B0, &qword_2568B81B8, (uint64_t)&protocol conformance descriptor for AssetSkeleton, MEMORY[0x24BEE12D0]);
    sub_237FBEA84();
    v27 = (uint64_t)v69;
    v45 = v67;
    sub_237FBEA3C();
    sub_237FBE9F0();
    sub_237FBBCA4(v44, *(uint64_t (**)(uint64_t, uint64_t))(v45 + 8));
    v46 = v52;
    *v52 = v71;
  }
  swift_storeEnumTagMultiPayload();
  v49 = (uint64_t)v46;
  v50 = (uint64_t)v54;
  sub_237FBDBC8(v49, (uint64_t)v54);
  sub_237FBDBC8(v50, v63);
LABEL_11:
  sub_237F91A00(v27);
  sub_237F960D8();
}

void sub_237FBDBA0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AssetUploadEvent.init(from:)(a1, a2);
}

void sub_237FBDBB4(_QWORD *a1)
{
  AssetUploadEvent.encode(to:)(a1);
}

uint64_t sub_237FBDBC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FBDC0C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    sub_237F919BC(&qword_2568B7F18);
    sub_237FBBD74();
  }
  return result;
}

uint64_t sub_237FBDC48(unint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = sub_237F919BC(&qword_2568B7F20);
    v9 = sub_237FBE52C(a2, (void (*)(uint64_t))type metadata accessor for AssetSkeleton);
    result = MEMORY[0x23B829E84](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetUploadEvent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        v7 = sub_237F9191C(&qword_2568B7F18);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v9 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v10 = (int *)type metadata accessor for Asset.ID(0);
        v11 = v10[5];
        v12 = (uint64_t *)((char *)a1 + v11);
        v13 = (uint64_t *)((char *)a2 + v11);
        v14 = v13[1];
        *v12 = *v13;
        v12[1] = v14;
        v15 = v10[6];
        v16 = (uint64_t *)((char *)a1 + v15);
        v17 = (uint64_t *)((char *)a2 + v15);
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain();
        sub_237F91894(v18, v19);
        *v16 = v18;
        v16[1] = v19;
        v20 = v10[7];
        v21 = (uint64_t *)((char *)a1 + v20);
        v22 = (uint64_t *)((char *)a2 + v20);
        v23 = *v22;
        v24 = v22[1];
        sub_237F91894(*v22, v24);
        *v21 = v23;
        v21[1] = v24;
        v25 = *(int *)(v6 + 20);
        v26 = (uint64_t *)((char *)a1 + v25);
        v27 = (char *)a2 + v25;
        v28 = *(uint64_t *)((char *)a2 + v25);
        v29 = *(uint64_t *)((char *)a2 + v25 + 8);
        sub_237F91894(v28, v29);
        *v26 = v28;
        v26[1] = v29;
        v30 = *((_QWORD *)v27 + 2);
        v31 = *((_QWORD *)v27 + 3);
        sub_237F91894(v30, v31);
        v26[2] = v30;
        v26[3] = v31;
        *(uint64_t *)((char *)a1 + *(int *)(v6 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 24));
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for AssetUploadEvent(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:
      return swift_bridgeObjectRelease();
    case 1:
      v3 = type metadata accessor for Asset(0);
      result = _s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v3);
      if (!(_DWORD)result)
      {
        v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
        v5 = type metadata accessor for Asset.ID(0);
        swift_bridgeObjectRelease();
        sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 24)), *(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
        sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 28)), *(_QWORD *)(a1 + *(int *)(v5 + 28) + 8));
        v6 = a1 + *(int *)(v3 + 20);
        sub_237F918D8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
        return sub_237F918D8(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
      }
      break;
    case 0:
      return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *initializeWithCopy for AssetUploadEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v4 = type metadata accessor for Asset(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
    {
      v5 = sub_237F9191C(&qword_2568B7F18);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for URL();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = (int *)type metadata accessor for Asset.ID(0);
      v8 = v7[5];
      v9 = (_QWORD *)((char *)a1 + v8);
      v10 = (_QWORD *)((char *)a2 + v8);
      v11 = v10[1];
      *v9 = *v10;
      v9[1] = v11;
      v12 = v7[6];
      v13 = (_QWORD *)((char *)a1 + v12);
      v14 = (_QWORD *)((char *)a2 + v12);
      v15 = *v14;
      v16 = v14[1];
      swift_bridgeObjectRetain();
      sub_237F91894(v15, v16);
      *v13 = v15;
      v13[1] = v16;
      v17 = v7[7];
      v18 = (_QWORD *)((char *)a1 + v17);
      v19 = (_QWORD *)((char *)a2 + v17);
      v20 = *v19;
      v21 = v19[1];
      sub_237F91894(*v19, v21);
      *v18 = v20;
      v18[1] = v21;
      v22 = *(int *)(v4 + 20);
      v23 = (_QWORD *)((char *)a1 + v22);
      v24 = (char *)a2 + v22;
      v25 = *(_QWORD *)((char *)a2 + v22);
      v26 = *(_QWORD *)((char *)a2 + v22 + 8);
      sub_237F91894(v25, v26);
      *v23 = v25;
      v23[1] = v26;
      v27 = *((_QWORD *)v24 + 2);
      v28 = *((_QWORD *)v24 + 3);
      sub_237F91894(v27, v28);
      v23[2] = v27;
      v23[3] = v28;
      *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
    }
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for AssetUploadEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (a1 != a2)
  {
    sub_237FBE33C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v4 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        v5 = sub_237F9191C(&qword_2568B7F18);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
      }
      else
      {
        v6 = type metadata accessor for URL();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = (int *)type metadata accessor for Asset.ID(0);
        v8 = v7[5];
        v9 = (_QWORD *)((char *)a1 + v8);
        v10 = (_QWORD *)((char *)a2 + v8);
        *v9 = *v10;
        v9[1] = v10[1];
        v11 = v7[6];
        v12 = (_QWORD *)((char *)a1 + v11);
        v13 = (_QWORD *)((char *)a2 + v11);
        v14 = *v13;
        v15 = v13[1];
        swift_bridgeObjectRetain();
        sub_237F91894(v14, v15);
        *v12 = v14;
        v12[1] = v15;
        v16 = v7[7];
        v17 = (_QWORD *)((char *)a1 + v16);
        v18 = (_QWORD *)((char *)a2 + v16);
        v19 = *v18;
        v20 = v18[1];
        sub_237F91894(*v18, v20);
        *v17 = v19;
        v17[1] = v20;
        v21 = *(int *)(v4 + 20);
        v22 = (_QWORD *)((char *)a1 + v21);
        v23 = (char *)a2 + v21;
        v24 = *(_QWORD *)((char *)a2 + v21);
        v25 = *(_QWORD *)((char *)a2 + v21 + 8);
        sub_237F91894(v24, v25);
        *v22 = v24;
        v22[1] = v25;
        v26 = *((_QWORD *)v23 + 2);
        v27 = *((_QWORD *)v23 + 3);
        sub_237F91894(v26, v27);
        v22[2] = v26;
        v22[3] = v27;
        *(_QWORD *)((char *)a1 + *(int *)(v4 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v4 + 24));
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v4);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_237FBE33C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AssetUploadEvent();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *assignWithTake for AssetUploadEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;

  if (a1 != a2)
  {
    sub_237FBE33C((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v6 = type metadata accessor for Asset(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v6))
      {
        v7 = sub_237F9191C(&qword_2568B7F18);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v8 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        v9 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
        *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
        v10 = *(int *)(v6 + 20);
        v11 = &a1[v10];
        v12 = &a2[v10];
        v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_237FBE4B8()
{
  unint64_t v0;

  sub_237FBB590(319);
  if (v0 <= 0x3F)
    swift_initEnumMetadataMultiPayload();
}

uint64_t sub_237FBE52C(uint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result;

  result = *a1;
  if (!result)
  {
    a2(255);
    sub_237FBBD74();
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AssetUploadEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237FBE5B0 + 4 * byte_237FEA015[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237FBE5E4 + 4 * byte_237FEA010[v4]))();
}

uint64_t sub_237FBE5E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FBE5EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FBE5F4);
  return result;
}

uint64_t sub_237FBE600(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FBE608);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237FBE60C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FBE614(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.CodingKeys()
{
  return &type metadata for AssetUploadEvent.CodingKeys;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.SkeletonsReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.ResultReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.ResultReceivedCodingKeys;
}

uint64_t _s11CloudAssets16AssetUploadEventO27SkeletonsReceivedCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FBE694 + 4 * byte_237FEA01A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FBE6B4 + 4 * byte_237FEA01F[v4]))();
}

_BYTE *sub_237FBE694(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FBE6B4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FBE6BC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FBE6C4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FBE6CC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FBE6D4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadEvent.SignalReceivedCodingKeys()
{
  return &type metadata for AssetUploadEvent.SignalReceivedCodingKeys;
}

unint64_t sub_237FBE6F4()
{
  unint64_t result;

  result = qword_2568B8398;
  if (!qword_2568B8398)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA19C, &type metadata for AssetUploadEvent.SignalReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8398);
  }
  return result;
}

unint64_t sub_237FBE734()
{
  unint64_t result;

  result = qword_2568B83A0;
  if (!qword_2568B83A0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA254, &type metadata for AssetUploadEvent.ResultReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83A0);
  }
  return result;
}

unint64_t sub_237FBE774()
{
  unint64_t result;

  result = qword_2568B83A8;
  if (!qword_2568B83A8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA30C, &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83A8);
  }
  return result;
}

unint64_t sub_237FBE7B4()
{
  unint64_t result;

  result = qword_2568B83B0;
  if (!qword_2568B83B0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA3C4, &type metadata for AssetUploadEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83B0);
  }
  return result;
}

unint64_t sub_237FBE7F4()
{
  unint64_t result;

  result = qword_2568B83B8;
  if (!qword_2568B83B8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA27C, &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83B8);
  }
  return result;
}

unint64_t sub_237FBE834()
{
  unint64_t result;

  result = qword_2568B83C0;
  if (!qword_2568B83C0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA2A4, &type metadata for AssetUploadEvent.SkeletonsReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83C0);
  }
  return result;
}

unint64_t sub_237FBE874()
{
  unint64_t result;

  result = qword_2568B83C8;
  if (!qword_2568B83C8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA1C4, &type metadata for AssetUploadEvent.ResultReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83C8);
  }
  return result;
}

unint64_t sub_237FBE8B4()
{
  unint64_t result;

  result = qword_2568B83D0;
  if (!qword_2568B83D0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA1EC, &type metadata for AssetUploadEvent.ResultReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83D0);
  }
  return result;
}

unint64_t sub_237FBE8F4()
{
  unint64_t result;

  result = qword_2568B83D8;
  if (!qword_2568B83D8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA10C, &type metadata for AssetUploadEvent.SignalReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83D8);
  }
  return result;
}

unint64_t sub_237FBE934()
{
  unint64_t result;

  result = qword_2568B83E0;
  if (!qword_2568B83E0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA134, &type metadata for AssetUploadEvent.SignalReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83E0);
  }
  return result;
}

unint64_t sub_237FBE974()
{
  unint64_t result;

  result = qword_2568B83E8;
  if (!qword_2568B83E8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA334, &type metadata for AssetUploadEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83E8);
  }
  return result;
}

unint64_t sub_237FBE9B4()
{
  unint64_t result;

  result = qword_2568B83F0;
  if (!qword_2568B83F0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA35C, &type metadata for AssetUploadEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B83F0);
  }
  return result;
}

uint64_t sub_237FBE9F0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_237FBE9F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(v2, v1);
}

uint64_t sub_237FBEA08()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FBEA1C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FBEA30()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FBEA3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 200) + 8))(v1, v0);
}

void sub_237FBEA50(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_237FBEA6C()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

unint64_t sub_237FBEA78()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 1;
  return sub_237FBD50C();
}

uint64_t sub_237FBEA84()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_237FBEA90()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

unint64_t sub_237FBEA98()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 72) = 2;
  return sub_237FBD4D0();
}

uint64_t XPCMessageSender.__allocating_init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_237FC2FD4();
  v4 = swift_allocObject();
  XPCMessageSender.init(machServiceName:)(a1, a2);
  return v4;
}

uint64_t sub_237FBEAF0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x24BEE6CA0];
  sub_237F919BC(&qword_2568B8A60);
  v3 = type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t sub_237FBEB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_237FA3964();
  v34 = v1;
  v35 = v2;
  v31 = v3;
  v32 = v0;
  v29 = v4;
  v30 = v5;
  v7 = v6;
  sub_237F919BC(&qword_2568B8A60);
  v33 = sub_237FC3064();
  v8 = *(_QWORD *)(v33 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x24BDAC7A8](v33);
  v11 = (char *)&v27 - v10;
  v28 = (char *)&v27 - v10;
  v12 = sub_237F92868();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v27 - v17;
  v19 = *(void (**)(uint64_t))(v13 + 16);
  v20 = sub_237FC2FC8();
  v19(v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v29, v33);
  ((void (*)(char *, uint64_t, uint64_t))v19)(v16, v7, v12);
  v21 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v22 = (v9 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (*(unsigned __int8 *)(v13 + 80) + v22 + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v24 = swift_allocObject();
  v25 = v31;
  *(_QWORD *)(v24 + 16) = v30;
  *(_QWORD *)(v24 + 24) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v24 + v21, v28, v33);
  *(_QWORD *)(v24 + v22) = v32;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v24 + v23, v16, v12);
  swift_beginAccess();
  swift_retain();
  sub_237FC251C((uint64_t)sub_237FC224C, v24, (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  return swift_endAccess();
}

uint64_t sub_237FBED48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  _QWORD v21[5];
  uint64_t v22;

  v21[3] = a6;
  MEMORY[0x24BDAC7A8](a1);
  sub_237F919BC(&qword_2568B8A60);
  v10 = type metadata accessor for AsyncThrowingStream.Continuation.YieldResult();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - v12;
  v14 = (uint64_t *)(a1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  v15 = v14[1];
  if (v15 >> 60 == 11)
  {
    sub_237FB74D4();
    v16 = swift_allocError();
    *v17 = 1;
    v22 = v16;
    type metadata accessor for AsyncThrowingStream.Continuation();
    AsyncThrowingStream.Continuation.finish(throwing:)();
  }
  else
  {
    v21[2] = a3;
    if (v15 >> 60 != 15)
    {
      v21[0] = a4;
      v21[1] = a2;
      v20 = *v14;
      type metadata accessor for JSONDecoder();
      swift_allocObject();
      sub_237F91894(v20, v15);
      JSONDecoder.init()();
      dispatch thunk of JSONDecoder.decode<A>(_:from:)();
      swift_release();
      type metadata accessor for AsyncThrowingStream.Continuation();
      AsyncThrowingStream.Continuation.yield(_:)();
      sub_237FB7520(v20, v15);
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    }
    v22 = 0;
    type metadata accessor for AsyncThrowingStream.Continuation();
    AsyncThrowingStream.Continuation.finish(throwing:)();
  }
  swift_beginAccess();
  v18 = sub_237FC2378(a4);
  result = swift_endAccess();
  if (v18)
    return sub_237FB7510(v18);
  return result;
}

uint64_t sub_237FBF044(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  char v6;
  void (*v7)(uint64_t);

  result = swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v4 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = sub_237FC1DB4(a1);
    if ((v6 & 1) != 0)
    {
      v7 = *(void (**)(uint64_t))(*(_QWORD *)(v4 + 56) + 16 * v5);
      swift_retain_n();
      swift_bridgeObjectRelease();
      v7(a1);
      return swift_release_n();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_237FBF0E8()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t sub_237FBF10C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FBF11C()
{
  uint64_t v0;

  v0 = sub_237FAC474();
  sub_237FAC0E4(v0, qword_2568B83F8);
  sub_237FABF5C(v0, (uint64_t)qword_2568B83F8);
  type metadata accessor for XPCMessageSender();
  sub_237F9191C(&qword_2568B8458);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t XPCMessageSender.init(machServiceName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;

  v3 = v2;
  type metadata accessor for XPCMessageSender.AsyncSequenceDispatcher();
  v6 = swift_allocObject();
  swift_defaultActor_initialize();
  type metadata accessor for UUID();
  v7 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  sub_237F9191C(&qword_2568B8410);
  sub_237FAC398(&qword_2568B7510, v7, MEMORY[0x24BDCEA88]);
  *(_QWORD *)(v6 + 112) = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v3 + 56) = v6;
  v8 = type metadata accessor for XPCSessionCacheImplementation();
  swift_allocObject();
  swift_retain_n();
  v9 = sub_237FD1F3C(a1, a2, (uint64_t)sub_237FBF438, v6);
  v12 = v8;
  v13 = &off_2509D4450;
  swift_release();
  *(_QWORD *)&v11 = v9;
  sub_237FB37E8(&v11, v3 + 16);
  return v3;
}

uint64_t type metadata accessor for XPCMessageSender.AsyncSequenceDispatcher()
{
  return objc_opt_self();
}

double sub_237FBF300@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  double result;
  uint64_t v16;

  v6 = type metadata accessor for XPCAsyncSequenceResponse();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x24BDAC7A8](v6);
  v9 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v11, 1, 1, v12);
  sub_237FC2C44(a1, (uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a2;
  sub_237FC2D2C((uint64_t)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v14 + v13);
  swift_retain();
  sub_237FAA8B0((uint64_t)v11, (uint64_t)&unk_2568B8490, (uint64_t)v14);
  swift_release();
  *(_QWORD *)(a3 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return result;
}

double sub_237FBF438@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_237FBF300(a1, v2, a2);
}

uint64_t sub_237FBF440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t sub_237FBF458()
{
  uint64_t v0;

  sub_237FBF044(*(_QWORD *)(v0 + 24));
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t XPCMessageSender.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10[2];

  v1 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TaskPriority();
  sub_237FB8160((uint64_t)v3, v5, v6, v4);
  sub_237FAC2D0(v0 + 16, (uint64_t)v10);
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = 0;
  sub_237FB37E8(v10, v7 + 32);
  sub_237FAA8B0((uint64_t)v3, (uint64_t)&unk_2568B8420, v7);
  swift_release();
  sub_237F91A00(v0 + 16);
  swift_release();
  return v0;
}

uint64_t sub_237FBF558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_237FBF570()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = sub_237F9195C(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  return sub_237FA4510();
}

uint64_t sub_237FBF5AC()
{
  uint64_t v0;

  sub_237FD2464();
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t XPCMessageSender.__deallocating_deinit()
{
  XPCMessageSender.deinit();
  sub_237FC2FD4();
  return swift_deallocClassInstance();
}

uint64_t XPCMessageSender.send<A, B>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_237FC3090(a1, a2, a3, a4, a5, a6);
  sub_237FAC434();
  return swift_task_switch();
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_237FC3090(a1, a2, a3, a4, a5, a6);
  v8 = *(_QWORD *)(v7 - 8);
  v6[10] = v8;
  v6[11] = *(_QWORD *)(v8 + 64);
  v6[12] = sub_237FC2F00();
  sub_237F9191C(&qword_2568B89A0);
  v6[13] = sub_237FC2F00();
  sub_237F919BC(&qword_2568B8A60);
  sub_237FC3050();
  v9 = type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy();
  v6[14] = v9;
  v6[15] = *(_QWORD *)(v9 - 8);
  v6[16] = sub_237FC2F00();
  sub_237FC3050();
  v10 = type metadata accessor for AsyncThrowingStream.Continuation();
  v6[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[18] = v11;
  v6[19] = *(_QWORD *)(v11 + 64);
  v6[20] = swift_task_alloc();
  v6[21] = swift_task_alloc();
  sub_237FAC434();
  return sub_237FB7BEC();
}

uint64_t sub_237FBF614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  v5 = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 48) = v2;
  *(_QWORD *)(v4 + 56) = v3;
  *(_QWORD *)(v4 + 64) = v1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v6;
  *v6 = v0;
  v6[1] = sub_237FBF6BC;
  sub_237FAC434();
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_237FBF6BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_237FAC434();
    return swift_task_switch();
  }
  else
  {
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v2 + 8))();
  }
}

uint64_t sub_237FBF72C()
{
  uint64_t v0;

  swift_task_dealloc();
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FBF758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a8;
  v35 = a7;
  v36 = a4;
  v31 = a3;
  v32 = a1;
  v33 = a2;
  sub_237F919BC(&qword_2568B8A60);
  v10 = type metadata accessor for CheckedContinuation();
  v11 = *(_QWORD *)(v10 - 8);
  v29 = v10;
  v12 = *(_QWORD *)(v11 + 64);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)&v29 - v14;
  v30 = (char *)&v29 - v14;
  v16 = *(_QWORD *)(a5 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  MEMORY[0x24BDAC7A8](v13);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v21, 1, 1, v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v31, a5);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v15, v32, v10);
  v23 = (*(unsigned __int8 *)(v16 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v24 = (v17 + v23 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v25 = (char *)swift_allocObject();
  *((_QWORD *)v25 + 2) = 0;
  *((_QWORD *)v25 + 3) = 0;
  *((_QWORD *)v25 + 4) = a5;
  *((_QWORD *)v25 + 5) = a6;
  v27 = v33;
  v26 = v34;
  *((_QWORD *)v25 + 6) = v35;
  *((_QWORD *)v25 + 7) = v26;
  *((_QWORD *)v25 + 8) = v27;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v25[v23], v18, a5);
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v25[v24], v30, v29);
  *(_QWORD *)&v25[(v12 + v24 + 7) & 0xFFFFFFFFFFFFFFF8] = v36;
  swift_retain();
  sub_237FAA8B0((uint64_t)v21, (uint64_t)&unk_2568B8468, (uint64_t)v25);
  return swift_release();
}

uint64_t sub_237FBF95C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[20] = v13;
  v8[21] = v14;
  v8[18] = a8;
  v8[19] = v12;
  v8[16] = a6;
  v8[17] = a7;
  v8[14] = a4;
  v8[15] = a5;
  sub_237F919BC(&qword_2568B8A60);
  v9 = type metadata accessor for CheckedContinuation();
  v8[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[23] = v10;
  v8[24] = *(_QWORD *)(v10 + 64);
  v8[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FBF9F0()
{
  _QWORD *v0;

  sub_237FAC2D0(v0[14] + 16, (uint64_t)(v0 + 2));
  v0[26] = sub_237F9195C(v0 + 2, v0[5]);
  return sub_237FA4510();
}

uint64_t sub_237FBFA40()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 216) = sub_237FC30AC();
  *(_QWORD *)(v1 + 224) = v0;
  sub_237FAC434();
  return sub_237FB7BEC();
}

void sub_237FBFA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 192);
  v21 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 184);
  v20 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 136);
  (*(void (**)(void))(v2 + 16))();
  v24 = v0 + 16;
  v7 = sub_237FC2FC8();
  sub_237FAC2D0(v7, v8);
  v9 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v10 = (v1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = v6;
  *((_QWORD *)v11 + 3) = v5;
  *((_QWORD *)v11 + 4) = v4;
  *((_QWORD *)v11 + 5) = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 32))(&v11[v9], v21, v20);
  sub_237FB37E8((__int128 *)(v0 + 56), (uint64_t)&v11[v10]);
  *(_QWORD *)&v11[(v10 + 47) & 0xFFFFFFFFFFFFFFF8] = v22;
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = v6;
  v12[3] = v5;
  v12[4] = v4;
  v12[5] = v3;
  v12[6] = sub_237FC2AC0;
  v12[7] = v11;
  dispatch thunk of XPCSession.send<A, B>(_:replyHandler:)();
  if (v23)
  {
    swift_release();
    swift_release();
    sub_237F91A00(v24);
    *(_QWORD *)(v0 + 96) = v23;
    sub_237FB7F00();
    CheckedContinuation.resume(throwing:)();
    if (qword_2568B7338 != -1)
      swift_once();
    v13 = sub_237FAC474();
    sub_237FABF5C(v13, (uint64_t)qword_2568B83F8);
    sub_237FB7F00();
    sub_237FB7F00();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (sub_237FC2FA0(v15))
    {
      v16 = (uint8_t *)sub_237FAC3E4();
      v17 = (_QWORD *)sub_237FAC3E4();
      *(_DWORD *)v16 = 138412290;
      sub_237FB7F00();
      v18 = sub_237FB8764();
      sub_237FC2ECC(v18);
      *v17 = v12;
      sub_237FAC47C();
      sub_237FAC47C();
      _os_log_impl(&dword_237F8F000, v14, (os_log_type_t)(v0 + 96), "received %@ in sending message", v16, 0xCu);
      sub_237F9191C(&qword_2568B7DB0);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FAC47C();
    sub_237FAC47C();
    sub_237FAC47C();

  }
  else
  {
    swift_release();
    swift_release();
    sub_237F91A00(v24);
  }
  swift_task_dealloc();
  sub_237FC2F6C();
  __asm { BR              X0 }
}

void sub_237FBFD3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _DWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 224);
  sub_237F91A00(v0 + 16);
  *(_QWORD *)(v0 + 96) = v2;
  sub_237FB7FE4();
  CheckedContinuation.resume(throwing:)();
  if (qword_2568B7338 != -1)
    swift_once();
  v3 = sub_237FAC474();
  sub_237FABF5C(v3, (uint64_t)qword_2568B83F8);
  sub_237FB7FE4();
  sub_237FB7FE4();
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (sub_237FC2FA0(v5))
  {
    v6 = (_DWORD *)sub_237FAC3E4();
    v7 = (_QWORD *)sub_237FAC3E4();
    *v6 = 138412290;
    sub_237FB7FE4();
    v8 = sub_237FB8324();
    sub_237FC2ECC(v8);
    *v7 = v1;
    sub_237FB7F70();
    sub_237FB7F70();
    sub_237FC2F88(&dword_237F8F000, v4, v9, "received %@ in sending message");
    sub_237F9191C(&qword_2568B7DB0);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }
  sub_237FB7F70();
  sub_237FB7F70();
  sub_237FB7F70();

  swift_task_dealloc();
  sub_237FB8540();
  __asm { BR              X0 }
}

uint64_t sub_237FBFEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _QWORD *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  BOOL v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint8_t *v63;
  uint8_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  uint64_t v76;
  __int128 v77[3];

  v72 = a3;
  v76 = a2;
  v8 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v8);
  v73 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_237F9191C(&qword_2568B8470);
  MEMORY[0x24BDAC7A8](v10);
  v74 = (void (*)(char *, char *, uint64_t))((char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = type metadata accessor for XPCRichError();
  v71 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v70 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v75 = (char *)&v63 - v16;
  v17 = *(_QWORD *)(a6 - 8);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v63 - v21;
  v23 = sub_237F919BC(&qword_2568B8A60);
  v24 = type metadata accessor for Result();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  v27 = (void **)((char *)&v63 - v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v63 - v26, a1, v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v67 = v25;
    v68 = v24;
    v69 = a6;
    v28 = a1;
    v29 = *v27;
    *(_QWORD *)&v77[0] = v29;
    v30 = v29;
    v31 = (uint64_t)v74;
    v32 = swift_dynamicCast();
    v66 = v23;
    v33 = v12;
    if ((v32 & 1) != 0)
    {
      _s11CloudAssets21UploadResponseMessageOwst_0(v31, 0, 1, v12);
      v34 = v71;
      v35 = v75;
      (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v75, v31, v12);
      if (qword_2568B7338 != -1)
        swift_once();
      v36 = type metadata accessor for Logger();
      sub_237FABF5C(v36, (uint64_t)qword_2568B83F8);
      v37 = v70;
      v74 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      v74(v70, v35, v12);
      v38 = Logger.logObject.getter();
      v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc();
        v41 = (_QWORD *)swift_slowAlloc();
        v64 = v40;
        v65 = v29;
        *(_DWORD *)v40 = 138412290;
        v63 = v40 + 4;
        sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
        swift_allocError();
        v42 = v34;
        v74(v43, v37, v33);
        v44 = _swift_stdlib_bridgeErrorToNSError();
        *(_QWORD *)&v77[0] = v44;
        v29 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v41 = v44;
        v45 = *(void (**)(char *, uint64_t))(v42 + 8);
        v45(v37, v33);
        v46 = v39;
        v47 = v64;
        _os_log_impl(&dword_237F8F000, v38, v46, "received xpc error %@ from xpc session", v64, 0xCu);
        sub_237F9191C(&qword_2568B7DB0);
        swift_arrayDestroy();
        MEMORY[0x23B829F2C](v41, -1, -1);
        MEMORY[0x23B829F2C](v47, -1, -1);
      }
      else
      {
        v45 = *(void (**)(char *, uint64_t))(v34 + 8);
        v45(v37, v12);
      }

      v57 = type metadata accessor for TaskPriority();
      v58 = v73;
      _s11CloudAssets21UploadResponseMessageOwst_0(v73, 1, 1, v57);
      sub_237FAC2D0(v72, (uint64_t)v77);
      v59 = swift_allocObject();
      *(_QWORD *)(v59 + 16) = 0;
      *(_QWORD *)(v59 + 24) = 0;
      sub_237FB37E8(v77, v59 + 32);
      sub_237FAEFA0(v58, (uint64_t)&unk_2568B8480, v59);
      swift_release();
      sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
      v60 = swift_allocError();
      v61 = v75;
      v74(v62, v75, v33);
      *(_QWORD *)&v77[0] = v60;
      type metadata accessor for CheckedContinuation();
      CheckedContinuation.resume(throwing:)();

      v45(v61, v33);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 8))(v28, v68);
    }
    else
    {
      _s11CloudAssets21UploadResponseMessageOwst_0(v31, 1, 1, v12);
      sub_237FC2B80(v31);
      v49 = v28;
      v50 = v67;
      if (qword_2568B7338 != -1)
        swift_once();
      v51 = type metadata accessor for Logger();
      sub_237FABF5C(v51, (uint64_t)qword_2568B83F8);
      v52 = Logger.logObject.getter();
      v53 = static os_log_type_t.error.getter();
      v54 = os_log_type_enabled(v52, v53);
      v55 = v68;
      if (v54)
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v56 = 0;
        _os_log_impl(&dword_237F8F000, v52, v53, "error received from xpc session is not XPC error type.", v56, 2u);
        MEMORY[0x23B829F2C](v56, -1, -1);
      }

      *(_QWORD *)&v77[0] = v29;
      type metadata accessor for CheckedContinuation();
      CheckedContinuation.resume(throwing:)();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 8))(v49, v55);
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v17 + 32))(v22, v27, a6);
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v22, a6);
    type metadata accessor for CheckedContinuation();
    CheckedContinuation.resume(returning:)();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v22, a6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(a1, v24);
  }
}

uint64_t sub_237FC055C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch();
}

uint64_t sub_237FC0574()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 24) = sub_237F9195C(*(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 24));
  return sub_237FA4510();
}

uint64_t sub_237FC05B0()
{
  uint64_t (*v0)(void);

  sub_237FD1F8C();
  v0 = (uint64_t (*)(void))sub_237FB7BF8();
  return sub_237FAC440(v0);
}

uint64_t sub_237FC05DC(uint64_t a1, uint64_t (*a2)(char *))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_237F919BC(&qword_2568B8A60);
  v4 = type metadata accessor for Result();
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v9 - v5;
  (*(void (**)(char *, uint64_t))(v7 + 16))((char *)&v9 - v5, a1);
  return a2(v6);
}

uint64_t sub_237FC0758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 88);
  v25 = *(_QWORD *)(v0 + 64);
  v26 = *(_QWORD *)(v0 + 72);
  v24 = *(_QWORD *)(v0 + 56);
  v17 = *(_QWORD *)(v0 + 32);
  v23 = *(_OWORD *)(v0 + 40);
  v16 = *(_QWORD *)(v0 + 24);
  sub_237FBEAF0(v2);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = type metadata accessor for TaskPriority();
  sub_237FB8160(v5, v9, v10, v8);
  sub_237FC2F98(v20, v1, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v16, v17);
  v11 = (*(unsigned __int8 *)(v18 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v12 = (v22 + *(unsigned __int8 *)(v7 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = v17;
  *(_OWORD *)(v13 + 40) = v23;
  *(_QWORD *)(v13 + 56) = v24;
  *(_QWORD *)(v13 + 64) = v25;
  sub_237FC2F98(v13 + v11, v20, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 32));
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(v13 + v12, v6, v17);
  *(_QWORD *)(v13 + ((v21 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = v26;
  swift_retain();
  sub_237FAEFA0(v5, (uint64_t)&unk_2568B8440, v13);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v1, v19);
  sub_237FAC46C();
  sub_237FA45CC();
  swift_task_dealloc();
  sub_237FB7AFC();
  sub_237FA45D4();
  v14 = (uint64_t (*)(void))sub_237FB7BF8();
  return v14();
}

uint64_t sub_237FC0974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 128) = v13;
  *(_OWORD *)(v8 + 112) = v12;
  *(_QWORD *)(v8 + 96) = a6;
  *(_QWORD *)(v8 + 104) = a8;
  *(_QWORD *)(v8 + 80) = a4;
  *(_QWORD *)(v8 + 88) = a5;
  v9 = type metadata accessor for XPCRichError();
  *(_QWORD *)(v8 + 136) = v9;
  *(_QWORD *)(v8 + 144) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 152) = swift_task_alloc();
  *(_QWORD *)(v8 + 160) = swift_task_alloc();
  *(_QWORD *)(v8 + 168) = swift_task_alloc();
  *(_QWORD *)(v8 + 176) = type metadata accessor for XPCAsyncSequenceRequest();
  *(_QWORD *)(v8 + 184) = swift_task_alloc();
  v10 = type metadata accessor for UUID();
  *(_QWORD *)(v8 + 192) = v10;
  *(_QWORD *)(v8 + 200) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v8 + 208) = swift_task_alloc();
  *(_QWORD *)(v8 + 216) = swift_task_alloc();
  *(_QWORD *)(v8 + 224) = swift_task_alloc();
  *(_QWORD *)(v8 + 232) = swift_task_alloc();
  *(_QWORD *)(v8 + 240) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FC0A84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  UUID.init()();
  *(_QWORD *)(v0 + 248) = *(_QWORD *)(v1 + 56);
  return sub_237FA4510();
}

uint64_t sub_237FC0AC0()
{
  sub_237FBEB5C();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FC0AFC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 256) = sub_237F9195C((_QWORD *)(*(_QWORD *)(v0 + 80) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40));
  return sub_237FA4510();
}

uint64_t sub_237FC0B3C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 264) = sub_237FC30AC();
  *(_QWORD *)(v1 + 272) = v0;
  sub_237FAC434();
  return sub_237FB7BEC();
}

uint64_t sub_237FC0B88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(NSObject *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(void);
  _QWORD *v58;
  _QWORD *v59;
  NSObject *v60;
  NSObject *v61;
  void (*v62)(uint64_t);
  void (*v63)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t));
  uint64_t v64[2];

  v1 = *(_QWORD *)(v0 + 272);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 200) + 16))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 192));
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  v2 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v4 = v1;
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  if (v4)
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 192));
    swift_release();
    swift_release();
    *(_QWORD *)(v0 + 16) = v4;
    sub_237FB8298();
    *(_QWORD *)(v0 + 280) = sub_237F9191C(&qword_2568B8A60);
    if (swift_dynamicCast())
    {
      v13 = *(_QWORD *)(v0 + 144);
      sub_237FB7E38();
      sub_237FB7AEC(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 32));
      if (qword_2568B7338 != -1)
        swift_once();
      v14 = *(_QWORD *)(v0 + 200);
      v16 = *(_QWORD *)(v0 + 152);
      v15 = *(_QWORD *)(v0 + 160);
      v17 = *(_QWORD *)(v0 + 136);
      v18 = *(_QWORD *)(v0 + 144);
      v19 = sub_237FAC474();
      *(_QWORD *)(v0 + 288) = sub_237FABF5C(v19, (uint64_t)qword_2568B83F8);
      sub_237FC2F28(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16));
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
      *(_QWORD *)(v0 + 304) = v20;
      v20(v16, v15, v17);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.default.getter();
      v23 = v22;
      v24 = os_log_type_enabled(v21, v22);
      v25 = *(_QWORD *)(v0 + 192);
      v27 = *(_QWORD *)(v0 + 144);
      v26 = *(_QWORD *)(v0 + 152);
      v28 = *(_QWORD *)(v0 + 136);
      if (v24)
      {
        v61 = v21;
        v29 = sub_237FAC3E4();
        v58 = (_QWORD *)sub_237FAC3E4();
        v64[0] = sub_237FAC3E4();
        *(_DWORD *)v29 = 136315394;
        sub_237FAC398((unint64_t *)&qword_2568B8040, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v30 = sub_237FB8108();
        *(_QWORD *)(v0 + 64) = sub_237FAB354(v30, v31, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_237FB7DB0();
        sub_237FB7F08();
        *(_WORD *)(v29 + 12) = 2112;
        sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
        v32 = sub_237F96460();
        v20(v33, v26, v28);
        v34 = sub_237FB8324();
        sub_237FC3030(v34);
        sub_237FB8014();
        *v58 = v32;
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
        sub_237FB7C04(&dword_237F8F000, v61, (os_log_type_t)v23, "[message id = %s] failed to send message over XPC due to XPC error %@", (uint8_t *)v29);
        sub_237F9191C(&qword_2568B7DB0);
        sub_237FAC3FC();
        sub_237FAC3D8();
      }
      sub_237FB7F08();
      v48 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
      v48(v26, v28);

      *(_QWORD *)(v0 + 312) = v48;
      *(_QWORD *)(v0 + 320) = v23;
      if ((XPCRichError.canRetry.getter() & 1) == 0)
      {
        sub_237FC2FE4();
        return swift_task_switch();
      }
      v62 = *(void (**)(uint64_t))(v0 + 312);
      v63 = *(void (**)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))(v0 + 320);
      sub_237FC2E58();
      sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
      v49 = sub_237FC2E8C();
      sub_237FC2E78(v49, v50);
      *(_QWORD *)(v0 + 48) = v23;
      sub_237FC2EBC();
      AsyncThrowingStream.Continuation.finish(throwing:)();
      v51 = sub_237FC2FC8();
      v62(v51);
      v63(v25, v20);
      sub_237FC30B8();
    }
    else
    {

      if (qword_2568B7338 != -1)
        swift_once();
      v35 = *(_QWORD *)(v0 + 240);
      v37 = *(_QWORD *)(v0 + 200);
      v36 = *(NSObject **)(v0 + 208);
      v38 = sub_237FAC474();
      sub_237FABF5C(v38, (uint64_t)qword_2568B83F8);
      sub_237FC2F98((uint64_t)v36, v35, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 16));
      sub_237FB8298();
      sub_237FB8298();
      Logger.logObject.getter();
      v39 = sub_237FAC4B4();
      v40 = os_log_type_enabled(v36, v39);
      v42 = *(_QWORD *)(v0 + 200);
      v41 = *(_QWORD *)(v0 + 208);
      v43 = *(_QWORD *)(v0 + 192);
      if (v40)
      {
        v60 = v36;
        v44 = sub_237FAC3E4();
        v59 = (_QWORD *)sub_237FAC3E4();
        v64[0] = sub_237FAC3E4();
        *(_DWORD *)v44 = 136315394;
        sub_237FAC398((unint64_t *)&qword_2568B8040, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
        v45 = sub_237FC3070();
        *(_QWORD *)(v0 + 32) = sub_237FAB354(v45, v46, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
        *(_WORD *)(v44 + 12) = 2112;
        sub_237FB7F00();
        v47 = sub_237FB8764();
        *(_QWORD *)(v0 + 40) = v47;
        sub_237FB8014();
        *v59 = v47;
        sub_237FB7E38();
        sub_237FB7E38();
        sub_237FB7C04(&dword_237F8F000, v60, v39, "[message id = %s] failed to send message over XPC due to non-XPC error %@", (uint8_t *)v44);
        sub_237F9191C(&qword_2568B7DB0);
        sub_237FAC3FC();
        sub_237FAC3D8();
      }
      v52 = *(void (**)(NSObject *, uint64_t))(v42 + 8);
      v52(*(NSObject **)(v0 + 208), *(_QWORD *)(v0 + 192));
      sub_237FB7E38();
      sub_237FB7E38();

      sub_237FC307C();
      *(_QWORD *)(v0 + 24) = v4;
      sub_237FC3044();
      sub_237FB8928();
      v52(v36, v42);
    }
  }
  else
  {
    v8 = v2;
    v9 = v3;
    v11 = *(_QWORD *)(v0 + 176);
    v10 = *(_QWORD *)(v0 + 184);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10, v5, v7);
    v12 = (uint64_t *)(v10 + *(int *)(v11 + 20));
    *v12 = v8;
    v12[1] = v9;
    sub_237FAC398(&qword_2568B8058, (uint64_t (*)(uint64_t))type metadata accessor for XPCAsyncSequenceRequest, (uint64_t)&protocol conformance descriptor for XPCAsyncSequenceRequest);
    dispatch thunk of XPCSession.send<A>(_:)();
    v54 = *(_QWORD *)(v0 + 240);
    v55 = *(_QWORD *)(v0 + 200);
    v56 = *(_QWORD *)(v0 + 184);
    swift_release();
    sub_237F98D74(v56);
    sub_237FB7CB8(v54, *(uint64_t (**)(uint64_t, uint64_t))(v55 + 8));
  }
  sub_237FC2E04();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  v57 = (uint64_t (*)(void))sub_237FB7BF8();
  return v57();
}

uint64_t sub_237FC12CC()
{
  _QWORD *v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v39;
  _QWORD *v40;
  NSObject *v41;
  NSObject *v42;
  void (*v43)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t));
  uint64_t v47;

  v1 = v0[34];
  v0[2] = v1;
  v2 = (id *)(v0 + 2);
  sub_237FB7F00();
  v0[35] = sub_237F9191C(&qword_2568B8A60);
  if ((swift_dynamicCast() & 1) == 0)
  {

    if (qword_2568B7338 != -1)
      swift_once();
    v22 = v0[30];
    v24 = v0[25];
    v23 = v0[26];
    v25 = sub_237FAC474();
    sub_237FABF5C(v25, (uint64_t)qword_2568B83F8);
    sub_237FC2F98((uint64_t)v23, v22, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16));
    sub_237FB7F00();
    sub_237FB7F00();
    Logger.logObject.getter();
    v26 = sub_237FAC4B4();
    v27 = os_log_type_enabled(v23, v26);
    v28 = v0[25];
    if (v27)
    {
      v42 = v23;
      v29 = sub_237FAC3E4();
      v40 = (_QWORD *)sub_237FAC3E4();
      v47 = sub_237FAC3E4();
      *(_DWORD *)v29 = 136315394;
      sub_237FAC398((unint64_t *)&qword_2568B8040, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
      v30 = sub_237FC3070();
      v0[4] = sub_237FAB354(v30, v31, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_237FC2F5C();
      *(_WORD *)(v29 + 12) = 2112;
      sub_237FB7F00();
      v32 = sub_237FB8764();
      v0[5] = v32;
      sub_237FB8014();
      *v40 = v32;
      sub_237FAC47C();
      sub_237FAC47C();
      sub_237FB7C04(&dword_237F8F000, v42, v26, "[message id = %s] failed to send message over XPC due to non-XPC error %@", (uint8_t *)v29);
      sub_237F9191C(&qword_2568B7DB0);
      sub_237FAC3FC();
      sub_237FAC3D8();
    }
    sub_237FC2F5C();
    sub_237FAC47C();
    sub_237FAC47C();

    sub_237FC307C();
    v0[3] = v1;
    sub_237FC3044();
    AsyncThrowingStream.Continuation.finish(throwing:)();
    ((void (*)(NSObject *, uint64_t))v24)(v23, v28);
LABEL_13:
    sub_237FC2E04();
    sub_237FAC46C();
    sub_237FA45D4();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    sub_237FB7B3C();
    sub_237FB7C6C();
    sub_237FB7BF8();
    sub_237FC2F6C();
    __asm { BR              X0 }
  }
  v3 = v0[18];
  sub_237FAC47C();
  sub_237FB7AEC(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32));
  if (qword_2568B7338 != -1)
    swift_once();
  v4 = v0[25];
  v5 = v0[19];
  v44 = v0[20];
  v7 = v0[17];
  v6 = v0[18];
  v8 = sub_237FAC474();
  v0[36] = sub_237FABF5C(v8, (uint64_t)qword_2568B83F8);
  sub_237FC2F28(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16));
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v0[38] = v9;
  v9(v5, v44, v7);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = v0[24];
  v14 = v0[19];
  v45 = v0[18];
  v15 = v0[17];
  if (v12)
  {
    v41 = v10;
    v16 = sub_237FAC3E4();
    v39 = (_QWORD *)sub_237FAC3E4();
    v47 = sub_237FAC3E4();
    *(_DWORD *)v16 = 136315394;
    sub_237FAC398((unint64_t *)&qword_2568B8040, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v17 = sub_237FB8108();
    v0[8] = sub_237FAB354(v17, v18, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_237FB7DB0();
    sub_237FC2F3C();
    *(_WORD *)(v16 + 12) = 2112;
    sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
    v19 = sub_237F96460();
    v9(v20, v14, v15);
    v21 = sub_237FB8324();
    sub_237FC3030(v21);
    sub_237FB8014();
    *v39 = v19;
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v14, v15);
    sub_237FB7C04(&dword_237F8F000, v41, v11, "[message id = %s] failed to send message over XPC due to XPC error %@", (uint8_t *)v16);
    sub_237F9191C(&qword_2568B7DB0);
    sub_237FAC3FC();
    sub_237FAC3D8();
  }
  sub_237FC2F3C();
  v33 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
  v33(v14, v15);

  v0[39] = v33;
  v0[40] = v2;
  if ((XPCRichError.canRetry.getter() & 1) != 0)
  {
    v43 = (void (*)(uint64_t))v0[39];
    v46 = (void (*)(uint64_t, void (*)(uint64_t, uint64_t, uint64_t)))v0[40];
    sub_237FC2E58();
    sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
    v34 = sub_237FC2E8C();
    sub_237FC2E78(v34, v35);
    v0[6] = v15;
    sub_237FC2EBC();
    sub_237FB8928();
    v36 = sub_237FC2FC8();
    v43(v36);
    v46(v13, v9);
    sub_237FC30B8();
    goto LABEL_13;
  }
  sub_237FC2FE4();
  sub_237FC2F6C();
  return swift_task_switch();
}

uint64_t sub_237FC18AC()
{
  sub_237FD1F8C();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FC18E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void (*v16)(uint64_t);
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(NSObject *, uint64_t);
  uint64_t v19;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v2 + 296))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 240), *(_QWORD *)(v2 + 192));
  Logger.logObject.getter();
  v4 = sub_237FAC4B4();
  if (os_log_type_enabled(v0, v4))
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v2 + 320);
    v5 = *(_QWORD *)(v2 + 216);
    v6 = *(_QWORD *)(v2 + 192);
    v7 = (_DWORD *)sub_237FAC3E4();
    v19 = sub_237FAC3E4();
    *v7 = 136315138;
    sub_237FAC398((unint64_t *)&qword_2568B8040, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAB8]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v2 + 56) = sub_237FAB354(v8, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_237FB7DB0();
    v17(v5, v6);
    sub_237FC2F88(&dword_237F8F000, v0, v10, "[message id = %s] evict xpc session from cache as it is no longer usable");
    sub_237FAC3FC();
    sub_237FAC3D8();
  }
  (*(void (**)(_QWORD, _QWORD))(v2 + 320))(*(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 192));

  v16 = *(void (**)(uint64_t))(v2 + 312);
  v18 = *(void (**)(NSObject *, uint64_t))(v2 + 320);
  sub_237FC2E58();
  sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
  v11 = sub_237FC2E8C();
  sub_237FC2E78(v11, v12);
  *(_QWORD *)(v2 + 48) = v3;
  sub_237FC2EBC();
  AsyncThrowingStream.Continuation.finish(throwing:)();
  v13 = sub_237FC2FC8();
  v16(v13);
  v18(v0, v1);
  sub_237FC30B8();
  sub_237FC2E04();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  v14 = (uint64_t (*)(void))sub_237FB7BF8();
  return v14();
}

uint64_t sub_237FC1AF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FC2F0C(v1);
  return sub_237FBF558(v2, v3, v4, v5);
}

uint64_t sub_237FC1B44(uint64_t a1)
{
  uint64_t *v1;

  return sub_237FBF758(a1, v1[6], v1[7], v1[8], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_237FC1B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_237FA3964();
  v1 = *(_QWORD *)(v0 + 32);
  sub_237F919BC(&qword_2568B8A60);
  v2 = *(_QWORD *)(type metadata accessor for AsyncThrowingStream.Continuation() - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v1 - 8);
  v5 = (v3 + *(_QWORD *)(v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_237FC2EA0();
  swift_release();
  sub_237FB7CB8(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v1);
  return sub_237FB7BC0();
}

uint64_t sub_237FC1C04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_237FC301C(a1);
  sub_237F919BC(&qword_2568B8A60);
  type metadata accessor for AsyncThrowingStream.Continuation();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_237FB81B8(v1);
  sub_237FC2E20(v2, v3, v4, v5, v6, v7, v8, v9, v19);
  sub_237FB8540();
  return sub_237FC0974(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_237FC1CCC()
{
  uint64_t v0;

  sub_237FA4554();
  return sub_237FAC440(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t type metadata accessor for XPCMessageSender()
{
  return objc_opt_self();
}

uint64_t method lookup function for XPCMessageSender()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XPCMessageSender.__allocating_init(machServiceName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

unint64_t sub_237FC1D34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_237FC1E74(a1, v4);
}

unint64_t sub_237FC1D64()
{
  uint64_t v0;
  uint64_t v1;
  Swift::Int v2;

  sub_237FC2EE8();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  return sub_237FC1F7C(v1, v0, v2);
}

unint64_t sub_237FC1DB4(uint64_t a1)
{
  uint64_t v2;

  sub_237F92868();
  sub_237FAC398(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_237FC205C(a1, v2);
}

unint64_t sub_237FC1E1C()
{
  Swift::UInt v0;
  Swift::UInt v1;
  Swift::Int v2;

  sub_237FC2EE8();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v0);
  v2 = Hasher._finalize()();
  return sub_237FC2300(v1, v0, v2);
}

unint64_t sub_237FC1E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_237FAC35C();
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_237FC1F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_237FC205C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  _QWORD v16[2];

  v3 = v2;
  v16[1] = a1;
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      sub_237FAC398(&qword_2568B8448, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_237FC219C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  sub_237FA3964();
  sub_237F919BC(&qword_2568B8A60);
  v1 = *(_QWORD *)(sub_237FC3064() - 8);
  v2 = (*(_QWORD *)(v1 + 64)
      + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  v3 = *(_QWORD *)(sub_237F92868() - 8);
  v4 = (v2 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_237FC2F4C();
  swift_release();
  sub_237FB7CB8(v0 + v4, *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8));
  return sub_237FB7BC0();
}

uint64_t sub_237FC224C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  sub_237F919BC(&qword_2568B8A60);
  v5 = *(_QWORD *)(type metadata accessor for AsyncThrowingStream.Continuation() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(sub_237F92868() - 8) + 80);
  return sub_237FBED48(a1, v1 + v6, *(_QWORD *)(v1 + v7), v1 + ((v7 + v8 + 8) & ~v8), v3, v4);
}

unint64_t sub_237FC2300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = -1 << *(_BYTE *)(v3 + 32);
  result = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = ~v5;
    do
    {
      v8 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * result);
      v10 = *v8;
      v9 = v8[1];
      if (v10 == a1 && v9 == a2)
        break;
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

uint64_t sub_237FC2378(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  char v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  swift_bridgeObjectRetain();
  v4 = sub_237FC1DB4(a1);
  LOBYTE(a1) = v5;
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *v2;
  v7 = *v2;
  *v2 = 0x8000000000000000;
  v8 = *(_QWORD *)(v7 + 24);
  sub_237F9191C(&qword_2568B8450);
  _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
  v9 = *(_QWORD *)(v14 + 48);
  v10 = sub_237F92868();
  v11 = (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58];
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9 + *(_QWORD *)(*(_QWORD *)(v10 - 8) + 72) * v4, v10);
  v12 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 16 * v4);
  sub_237F9191C(&qword_2568B8410);
  sub_237FAC398(&qword_2568B7510, v11, MEMORY[0x24BDCEA88]);
  _NativeDictionary._delete(at:)();
  *v2 = v14;
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_237FC24C0(uint64_t a1, void *a2)
{
  _QWORD *v2;
  char v5;
  uint64_t v7;

  swift_isUniquelyReferenced_nonNull_native();
  sub_237FC2FB0();
  sub_237FC2588(a1, a2, v5);
  *v2 = v7;
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FC251C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  char v7;
  uint64_t v9;

  swift_isUniquelyReferenced_nonNull_native();
  sub_237FC2FB0();
  sub_237FC268C(a1, a2, a3, v7);
  *v3 = v9;
  return swift_bridgeObjectRelease();
}

id sub_237FC2588(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  _BOOL8 v11;
  Swift::Int v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  id result;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v8 = sub_237FC1D34((uint64_t)a2);
  v10 = v7[2];
  v11 = (v9 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v8;
  v14 = v9;
  sub_237F9191C(&qword_2568B8498);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v12))
    goto LABEL_5;
  v15 = sub_237FC1D34((uint64_t)a2);
  if ((v14 & 1) != (v16 & 1))
  {
LABEL_9:
    sub_237FAC35C();
    result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v13 = v15;
LABEL_5:
  v17 = *v4;
  if ((v14 & 1) != 0)
  {
    v18 = v17[7];
    result = (id)swift_release();
    *(_QWORD *)(v18 + 8 * v13) = a1;
  }
  else
  {
    sub_237FC27E4(v13, (uint64_t)a2, a1, v17);
    return a2;
  }
  return result;
}

uint64_t sub_237FC268C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  _BOOL8 v17;
  Swift::Int v18;
  unint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = (_QWORD **)v4;
  v28 = a2;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v4;
  v14 = sub_237FC1DB4(a3);
  v16 = v13[2];
  v17 = (v15 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_10;
  }
  v19 = v14;
  v20 = v15;
  sub_237F9191C(&qword_2568B8450);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v18))
    goto LABEL_5;
  v21 = sub_237FC1DB4(a3);
  if ((v20 & 1) != (v22 & 1))
  {
LABEL_10:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v19 = v21;
LABEL_5:
  v23 = *v5;
  if ((v20 & 1) != 0)
  {
    v24 = (uint64_t *)(v23[7] + 16 * v19);
    result = swift_release();
    v26 = v28;
    *v24 = a1;
    v24[1] = v26;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
    return sub_237FC2828(v19, (uint64_t)v12, a1, v28, v23);
  }
  return result;
}

unint64_t sub_237FC27E4(unint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_QWORD *)(a4[6] + 8 * result) = a2;
  *(_QWORD *)(a4[7] + 8 * result) = a3;
  v4 = a4[2];
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    __break(1u);
  else
    a4[2] = v6;
  return result;
}

uint64_t sub_237FC2828(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v10 = a5[6];
  v11 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1, a2, v11);
  v13 = (_QWORD *)(a5[7] + 16 * a1);
  *v13 = a3;
  v13[1] = a4;
  v14 = a5[2];
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    a5[2] = v16;
  return result;
}

uint64_t sub_237FC28C8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  sub_237FA3964();
  v1 = ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 80))
     + *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 64);
  sub_237F919BC(&qword_2568B8A60);
  v2 = *(_QWORD *)(type metadata accessor for CheckedContinuation() - 8);
  v3 = (v1 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  sub_237FC2EA0();
  swift_release();
  sub_237FC2F4C();
  sub_237FB7CB8(v0 + v3, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 8));
  return sub_237FB7BC0();
}

uint64_t sub_237FC2968(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  sub_237FC301C(a1);
  sub_237F919BC(&qword_2568B8A60);
  type metadata accessor for CheckedContinuation();
  sub_237FC3008();
  v1 = swift_task_alloc();
  v2 = (_QWORD *)sub_237FB81B8(v1);
  sub_237FC2E20(v2, v3, v4, v5, v6, v7, v8, v9, v19);
  sub_237FB8540();
  return sub_237FBF95C(v10, v11, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_237FC2A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_237F919BC(&qword_2568B8A60);
  v1 = type metadata accessor for CheckedContinuation();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  sub_237F91A00(v0 + v4);
  return swift_deallocObject();
}

uint64_t sub_237FC2AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  sub_237F919BC(&qword_2568B8A60);
  type metadata accessor for CheckedContinuation();
  sub_237FC3008();
  return sub_237FBFEAC(a1, v1 + v6, v1 + (v5 & 0xFFFFFFFFFFFFFFF8), *(_QWORD *)(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFF8)), v3, v4);
}

uint64_t sub_237FC2B54()
{
  swift_release();
  sub_237FC2FD4();
  return swift_deallocObject();
}

uint64_t sub_237FC2B70(uint64_t a1)
{
  uint64_t v1;

  return sub_237FC05DC(a1, *(uint64_t (**)(char *))(v1 + 48));
}

uint64_t sub_237FC2B80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_237F9191C(&qword_2568B8470);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_237FC2BC4()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  sub_237F91A00(v0 + 32);
  return swift_deallocObject();
}

uint64_t sub_237FC2BF0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = swift_task_alloc();
  v1 = (_QWORD *)sub_237FB81B8(v0);
  v2 = sub_237FC2F0C(v1);
  return sub_237FC055C(v2, v3, v4, v5);
}

uint64_t sub_237FC2C44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FC2C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v1 = type metadata accessor for XPCAsyncSequenceResponse();
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  swift_unknownObjectRelease();
  swift_release();
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = sub_237F92868();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (uint64_t *)(v3 + *(int *)(v1 + 20));
  v6 = v5[1];
  if (((v6 >> 60) | 4) != 0xF)
    sub_237F918D8(*v5, v6);
  return swift_deallocObject();
}

uint64_t sub_237FC2D2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FC2D70(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for XPCAsyncSequenceResponse() - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = swift_task_alloc();
  v10 = (_QWORD *)sub_237FB81B8(v9);
  *v10 = v2;
  v10[1] = sub_237FC1CCC;
  return sub_237FBF440(a1, v5, v6, v7, v8);
}

uint64_t sub_237FC2E04()
{
  return swift_task_dealloc();
}

uint64_t sub_237FC2E20(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  *a1 = v11;
  a1[1] = v9;
  v13[4] = v10;
  v13[2] = v12;
  v13[3] = a9;
  return v13[5];
}

uint64_t sub_237FC2E78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(a2, v2, v3);
}

uint64_t sub_237FC2E8C()
{
  return swift_allocError();
}

uint64_t sub_237FC2EA0()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_237FC2EBC()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t sub_237FC2ECC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FC2EE8()
{
  return Hasher.init(_seed:)();
}

uint64_t sub_237FC2F00()
{
  return swift_task_alloc();
}

uint64_t sub_237FC2F0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v3;
  a1[1] = v1;
  return v2;
}

uint64_t sub_237FC2F28@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 296) = a1;
  return a1(v1, v2, v3);
}

uint64_t sub_237FC2F3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_237FC2F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1 + v3, v0);
}

uint64_t sub_237FC2F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

void sub_237FC2F88(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  uint8_t *v4;
  os_log_type_t v5;

  _os_log_impl(a1, a2, v5, a4, v4, 0xCu);
}

uint64_t sub_237FC2F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t)@<X8>)
{
  uint64_t v3;

  return a3(a1, a2, v3);
}

BOOL sub_237FC2FA0(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

void sub_237FC2FB0()
{
  _QWORD *v0;

  *v0 = 0x8000000000000000;
}

uint64_t sub_237FC2FC8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FC2FD4()
{
  uint64_t v0;

  return v0;
}

_QWORD *sub_237FC2FE4()
{
  uint64_t v0;
  _QWORD *result;

  result = sub_237F9195C((_QWORD *)(*(_QWORD *)(v0 + 80) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 80) + 40));
  *(_QWORD *)(v0 + 328) = result;
  return result;
}

uint64_t sub_237FC301C(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 40) = result;
  return result;
}

uint64_t sub_237FC3030(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = result;
  return result;
}

uint64_t sub_237FC3044()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t sub_237FC3050()
{
  return 0;
}

uint64_t sub_237FC3064()
{
  return type metadata accessor for AsyncThrowingStream.Continuation();
}

uint64_t sub_237FC3070()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FC3090(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v7[7] = a6;
  v7[8] = v6;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = result;
  v7[9] = *v6;
  return result;
}

uint64_t sub_237FC30AC()
{
  return sub_237FD2038();
}

void sub_237FC30B8()
{
  uint64_t v0;

}

uint64_t dispatch thunk of AssetRequest.tenantName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of AssetRequest.workingDirectory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of AssetRequest.credential.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t DownloadResponseMessage.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_237F9191C(&qword_2568B7FE0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v6 = v5 - v4;
  type metadata accessor for DownloadResponseMessage();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v7);
  sub_237FBBC8C();
  sub_237FC3230((uint64_t)v1, (uint64_t)v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v8 = *v1;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(0);
    sub_237FA276C(a1, v8);
  }
  else
  {
    sub_237F9191C(&qword_2568B7FF8);
    sub_237FC4148((uint64_t)v1, v6);
    Hasher._combine(_:)(0);
    sub_237FB8ED8();
    v9 = String.hash(into:)();
    sub_237FC545C(v9, &qword_2568B7FE0);
  }
  return sub_237FC5448();
}

uint64_t type metadata accessor for DownloadResponseMessage()
{
  uint64_t result;

  result = qword_2568B8508;
  if (!qword_2568B8508)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_237FC3230(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static DownloadResponseMessage.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  sub_237F9191C(&qword_2568B7FE0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FBBC8C();
  type metadata accessor for DownloadResponseMessage();
  sub_237F960C8();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v35 - v10;
  sub_237F9191C(&qword_2568B84A0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F982D4();
  v15 = v14 - v13;
  v17 = (_QWORD **)(v14 - v13 + *(int *)(v16 + 48));
  sub_237FC3230(a1, v14 - v13);
  sub_237FC3230(a2, (uint64_t)v17);
  if (sub_237FC5464() != 1)
  {
    sub_237FC3230(v15, (uint64_t)v11);
    v20 = *(int *)(sub_237F9191C(&qword_2568B7FF8) + 48);
    v22 = *(_QWORD *)&v11[v20];
    v21 = *(_QWORD *)&v11[v20 + 8];
    if (sub_237FC5464() == 1)
    {
      v23 = sub_237FC549C();
      sub_237FC545C(v23, &qword_2568B7FE0);
LABEL_7:
      sub_237FC4190(v15, &qword_2568B84A0);
LABEL_17:
      v19 = 0;
      return v19 & 1;
    }
    v24 = (char *)v17 + v20;
    v26 = *(uint64_t *)((char *)v17 + v20);
    v25 = *((_QWORD *)v24 + 1);
    sub_237FC4148((uint64_t)v17, v2);
    sub_237FB8AF8((uint64_t)v11, v2);
    v28 = v27;
    sub_237FC545C(v27, &qword_2568B7FE0);
    if ((v28 & 1) != 0)
    {
      if (v22 == v26 && v21 == v25)
      {
        v34 = swift_bridgeObjectRelease_n();
        sub_237FC5494(v34, &qword_2568B7FE0);
LABEL_20:
        sub_237FC546C();
        v19 = 1;
        return v19 & 1;
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      sub_237FC5448();
      v32 = sub_237FC549C();
      sub_237FC5494(v32, &qword_2568B7FE0);
      if ((v31 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      sub_237FC5494(v29, &qword_2568B7FE0);
      sub_237FC5448();
      sub_237FC549C();
    }
    sub_237FC546C();
    goto LABEL_17;
  }
  sub_237FC3230(v15, (uint64_t)v9);
  v18 = (_QWORD *)*v9;
  if (sub_237FC5464() != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  v19 = sub_237F9D2E4(v18, *v17);
  swift_bridgeObjectRelease();
  sub_237FC5448();
  sub_237FC546C();
  return v19 & 1;
}

uint64_t sub_237FC34DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000237FE3B30)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_237FC35C8(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000019;
  else
    return 0x65736E6F70736572;
}

uint64_t sub_237FC3604(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746C75736572 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000237FE3C30)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void sub_237FC36E8(char a1)
{
  sub_237F961E4();
  Hasher._combine(_:)(a1 & 1);
  sub_237F96328();
  sub_237F9631C();
}

uint64_t sub_237FC3718(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000015;
  else
    return 0x746C75736572;
}

uint64_t sub_237FC3754()
{
  char *v0;

  return sub_237FC35C8(*v0);
}

uint64_t sub_237FC375C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FC34DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FC3780()
{
  sub_237FC4204();
  return CodingKey.description.getter();
}

uint64_t sub_237FC37A8()
{
  sub_237FC4204();
  return CodingKey.debugDescription.getter();
}

void sub_237FC37D0()
{
  char *v0;

  sub_237FC36E8(*v0);
}

void sub_237FC37E8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  sub_237F96328();
  sub_237F9631C();
}

uint64_t sub_237FC381C()
{
  char *v0;

  return sub_237FC3718(*v0);
}

uint64_t sub_237FC3824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FC3604(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FC3848()
{
  sub_237FC427C();
  return CodingKey.description.getter();
}

uint64_t sub_237FC3870()
{
  sub_237FC427C();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FC389C()
{
  sub_237FC4240();
  return CodingKey.description.getter();
}

uint64_t sub_237FC38C4()
{
  sub_237FC4240();
  return CodingKey.debugDescription.getter();
}

void DownloadResponseMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = sub_237F9191C(&qword_2568B84A8);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F982D4();
  v7 = v6 - v5;
  v8 = sub_237F9191C(&qword_2568B84B0);
  v23 = *(_QWORD *)(v8 - 8);
  v24 = v8;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F982D4();
  v12 = v11 - v10;
  sub_237F9191C(&qword_2568B7FE0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v13);
  sub_237F9283C();
  v22 = v14;
  type metadata accessor for DownloadResponseMessage();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v15);
  sub_237F963A4();
  v27 = sub_237F9191C(&qword_2568B84B8);
  v16 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  sub_237F982D4();
  v19 = v18 - v17;
  sub_237F9195C(a1, a1[3]);
  sub_237FC4204();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_237FC3230(v25, v1);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_237FC5488();
    sub_237FBEA30();
    sub_237FBA8F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v7, v21);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_237F9191C(&qword_2568B7FF8);
    sub_237FC4148(v1, v22);
    sub_237FC427C();
    sub_237FBEA30();
    sub_237FC42FC(&qword_2568B84D8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v26)
      KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v12, v24);
    sub_237FC4190(v22, &qword_2568B7FE0);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v19, v27);
  }
  sub_237F960D8();
}

void DownloadResponseMessage.hashValue.getter()
{
  _BYTE v0[72];

  sub_237F961E4();
  DownloadResponseMessage.hash(into:)((uint64_t)v0);
  sub_237F96328();
  sub_237F9631C();
}

void DownloadResponseMessage.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  void (*v38)(uint64_t);
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  char v65;
  char v66;

  v53 = a2;
  v4 = sub_237F9191C(&qword_2568B84E0);
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F9283C();
  v58 = v6;
  v7 = sub_237F9191C(&qword_2568B84E8);
  v8 = *(_QWORD *)(v7 - 8);
  v56 = v7;
  v57 = v8;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F9283C();
  v60 = v10;
  v11 = sub_237F9191C(&qword_2568B84F0);
  v59 = *(_QWORD *)(v11 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F963A4();
  v13 = type metadata accessor for DownloadResponseMessage();
  sub_237F960C8();
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x24BDAC7A8](v15);
  v20 = (char *)&v48 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v48 - v21;
  v23 = a1[3];
  v61 = a1;
  sub_237F9195C(a1, v23);
  sub_237FC4204();
  v24 = v62;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24)
    goto LABEL_9;
  v49 = (uint64_t *)v17;
  v50 = v22;
  v51 = v20;
  v52 = 0;
  v62 = v13;
  v25 = KeyedDecodingContainer.allKeys.getter();
  v26 = *(_QWORD *)(v25 + 16);
  v27 = v11;
  if (!v26)
  {
LABEL_7:
    v33 = v62;
    v34 = type metadata accessor for DecodingError();
    swift_allocError();
    v36 = v35;
    sub_237F9191C(&qword_2568B78D8);
    *v36 = v33;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v36, *MEMORY[0x24BEE26D0], v34);
    swift_willThrow();
    sub_237FBE9F0();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v2, v27);
    goto LABEL_9;
  }
  v28 = *(_BYTE *)(v25 + 32);
  sub_237FA372C(1, v26, v25, v25 + 32, 0, (2 * v26) | 1);
  v30 = v29;
  v32 = v31;
  swift_bridgeObjectRelease();
  if (v30 != v32 >> 1)
  {
    v27 = v11;
    goto LABEL_7;
  }
  if ((v28 & 1) != 0)
  {
    sub_237FC5488();
    sub_237FC5428();
    sub_237FBAA24();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v37 = sub_237FC5474();
    v38(v37);
    sub_237FBE9F0();
    sub_237FC543C(*(uint64_t (**)(uint64_t, uint64_t))(v59 + 8));
    v39 = v49;
    *v49 = v63;
    swift_storeEnumTagMultiPayload();
    sub_237FC5450((uint64_t)v39);
  }
  else
  {
    v66 = 0;
    sub_237FC427C();
    sub_237FC5428();
    sub_237F9191C(&qword_2568B7FE0);
    v65 = 0;
    sub_237FC42FC(&qword_2568B84F8);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v64 = 1;
    v40 = KeyedDecodingContainer.decode(_:forKey:)();
    v41 = v59;
    v52 = 0;
    v42 = v57;
    v44 = v43;
    v58 = v40;
    v45 = sub_237F9191C(&qword_2568B7FF8);
    v46 = v42;
    v47 = (uint64_t)v51;
    v39 = (uint64_t *)&v51[*(int *)(v45 + 48)];
    sub_237FC54A4(*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8));
    sub_237FBE9F0();
    sub_237FC543C(*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8));
    *v39 = v58;
    v39[1] = v44;
    swift_storeEnumTagMultiPayload();
    sub_237FC5450(v47);
  }
  sub_237FC42B8((uint64_t)v39, v53);
LABEL_9:
  sub_237F91A00((uint64_t)v61);
  sub_237F960D8();
}

Swift::Int sub_237FC40E4()
{
  _BYTE v1[72];

  Hasher.init(_seed:)();
  DownloadResponseMessage.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_237FC411C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  DownloadResponseMessage.init(from:)(a1, a2);
}

void sub_237FC4130(_QWORD *a1)
{
  DownloadResponseMessage.encode(to:)(a1);
}

uint64_t sub_237FC4148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7FE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_237FC4190(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_237F9191C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  sub_237F928A0();
}

uint64_t sub_237FC41C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_237FC4204()
{
  unint64_t result;

  result = qword_2568B84C0;
  if (!qword_2568B84C0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA9FC, &type metadata for DownloadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B84C0);
  }
  return result;
}

unint64_t sub_237FC4240()
{
  unint64_t result;

  result = qword_2568B84C8;
  if (!qword_2568B84C8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA9AC, &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B84C8);
  }
  return result;
}

unint64_t sub_237FC427C()
{
  unint64_t result;

  result = qword_2568B84D0;
  if (!qword_2568B84D0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA95C, &type metadata for DownloadResponseMessage.ResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B84D0);
  }
  return result;
}

uint64_t sub_237FC42B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DownloadResponseMessage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_237FC42FC(_QWORD *a1)
{
  if (!*a1)
  {
    sub_237F919BC(&qword_2568B7FE0);
    sub_237FBBD74();
  }
  sub_237F928A0();
}

void sub_237FC4334()
{
  sub_237FBBB90(&qword_2568B8500, (void (*)(uint64_t))type metadata accessor for DownloadResponseMessage);
}

uint64_t *initializeBufferWithCopyOfBuffer for DownloadResponseMessage(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v6 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v6 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v7 = type metadata accessor for AssetDownloadResponse();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v7))
      {
        v8 = sub_237F9191C(&qword_2568B7FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v9 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
        v10 = *(int *)(v7 + 20);
        v11 = (char *)a1 + v10;
        v12 = (char *)a2 + v10;
        v13 = type metadata accessor for URL();
        v46 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
        v47 = v13;
        v46(v11, v12, v13);
        v14 = (int *)type metadata accessor for Asset.ID(0);
        v15 = v14[5];
        v16 = &v11[v15];
        v17 = &v12[v15];
        v18 = *((_QWORD *)v17 + 1);
        *(_QWORD *)v16 = *(_QWORD *)v17;
        *((_QWORD *)v16 + 1) = v18;
        v19 = v14[6];
        v20 = (uint64_t *)&v11[v19];
        v21 = (uint64_t *)&v12[v19];
        v22 = *v21;
        v23 = v21[1];
        swift_bridgeObjectRetain();
        sub_237F91894(v22, v23);
        *v20 = v22;
        v20[1] = v23;
        v24 = v14[7];
        v25 = (uint64_t *)&v11[v24];
        v26 = (uint64_t *)&v12[v24];
        v27 = *v26;
        v28 = v26[1];
        sub_237F91894(*v26, v28);
        *v25 = v27;
        v25[1] = v28;
        v29 = type metadata accessor for Asset(0);
        v30 = *(int *)(v29 + 20);
        v31 = (uint64_t *)&v11[v30];
        v45 = v7;
        v32 = &v12[v30];
        v33 = *(_QWORD *)&v12[v30];
        v34 = *(_QWORD *)&v12[v30 + 8];
        sub_237F91894(v33, v34);
        *v31 = v33;
        v31[1] = v34;
        v35 = *((_QWORD *)v32 + 2);
        v36 = *((_QWORD *)v32 + 3);
        sub_237F91894(v35, v36);
        v31[2] = v35;
        v31[3] = v36;
        *(_QWORD *)&v11[*(int *)(v29 + 24)] = *(_QWORD *)&v12[*(int *)(v29 + 24)];
        v46((char *)a1 + *(int *)(v45 + 24), (char *)a2 + *(int *)(v45 + 24), v47);
        v37 = *(int *)(v45 + 28);
        v38 = (char *)a1 + v37;
        v39 = (char *)a2 + v37;
        *(_OWORD *)v38 = *(_OWORD *)v39;
        v38[16] = v39[16];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v45);
      }
      v40 = *(int *)(sub_237F9191C(&qword_2568B7FF8) + 48);
      v41 = (uint64_t *)((char *)a1 + v40);
      v42 = (uint64_t *)((char *)a2 + v40);
      v43 = v42[1];
      *v41 = *v42;
      v41[1] = v43;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for DownloadResponseMessage(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v2 = type metadata accessor for AssetDownloadResponse();
    if (!_s11CloudAssets21UploadResponseMessageOwet_0(a1, 1, v2))
    {
      v3 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      v4 = a1 + *(int *)(v2 + 20);
      v5 = type metadata accessor for URL();
      v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
      v6(v4, v5);
      v7 = type metadata accessor for Asset.ID(0);
      swift_bridgeObjectRelease();
      sub_237F918D8(*(_QWORD *)(v4 + *(int *)(v7 + 24)), *(_QWORD *)(v4 + *(int *)(v7 + 24) + 8));
      sub_237F918D8(*(_QWORD *)(v4 + *(int *)(v7 + 28)), *(_QWORD *)(v4 + *(int *)(v7 + 28) + 8));
      v8 = v4 + *(int *)(type metadata accessor for Asset(0) + 20);
      sub_237F918D8(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
      sub_237F918D8(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
      v6(a1 + *(int *)(v2 + 24), v5);
    }
    sub_237F9191C(&qword_2568B7FF8);
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DownloadResponseMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  else
  {
    v4 = type metadata accessor for AssetDownloadResponse();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
    {
      v5 = sub_237F9191C(&qword_2568B7FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
    }
    else
    {
      v6 = type metadata accessor for UUID();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(v4 + 20);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = type metadata accessor for URL();
      v43 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
      v44 = v10;
      v43(v8, v9, v10);
      v11 = (int *)type metadata accessor for Asset.ID(0);
      v12 = v11[5];
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = *((_QWORD *)v14 + 1);
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = v15;
      v16 = v11[6];
      v17 = (uint64_t *)&v8[v16];
      v18 = (uint64_t *)&v9[v16];
      v19 = *v18;
      v20 = v18[1];
      swift_bridgeObjectRetain();
      sub_237F91894(v19, v20);
      *v17 = v19;
      v17[1] = v20;
      v21 = v11[7];
      v22 = (uint64_t *)&v8[v21];
      v23 = (uint64_t *)&v9[v21];
      v24 = *v23;
      v25 = v23[1];
      sub_237F91894(*v23, v25);
      *v22 = v24;
      v22[1] = v25;
      v26 = type metadata accessor for Asset(0);
      v27 = *(int *)(v26 + 20);
      v28 = (uint64_t *)&v8[v27];
      v42 = v4;
      v29 = &v9[v27];
      v30 = *(_QWORD *)&v9[v27];
      v31 = *(_QWORD *)&v9[v27 + 8];
      sub_237F91894(v30, v31);
      *v28 = v30;
      v28[1] = v31;
      v32 = *((_QWORD *)v29 + 2);
      v33 = *((_QWORD *)v29 + 3);
      sub_237F91894(v32, v33);
      v28[2] = v32;
      v28[3] = v33;
      *(_QWORD *)&v8[*(int *)(v26 + 24)] = *(_QWORD *)&v9[*(int *)(v26 + 24)];
      v43((char *)a1 + *(int *)(v42 + 24), (char *)a2 + *(int *)(v42 + 24), v44);
      v34 = *(int *)(v42 + 28);
      v35 = (char *)a1 + v34;
      v36 = (char *)a2 + v34;
      *(_OWORD *)v35 = *(_OWORD *)v36;
      v35[16] = v36[16];
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v42);
    }
    v37 = *(int *)(sub_237F9191C(&qword_2568B7FF8) + 48);
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = v39[1];
    *v38 = *v39;
    v38[1] = v40;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_QWORD *assignWithCopy for DownloadResponseMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;

  if (a1 != a2)
  {
    sub_237FC41C8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    else
    {
      v4 = type metadata accessor for AssetDownloadResponse();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, v4))
      {
        v5 = sub_237F9191C(&qword_2568B7FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
      }
      else
      {
        v6 = type metadata accessor for UUID();
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = *(int *)(v4 + 20);
        v8 = (char *)a1 + v7;
        v9 = (char *)a2 + v7;
        v10 = type metadata accessor for URL();
        v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
        v43 = v10;
        v42(v8, v9, v10);
        v11 = (int *)type metadata accessor for Asset.ID(0);
        v12 = v11[5];
        v13 = &v8[v12];
        v14 = &v9[v12];
        *(_QWORD *)v13 = *(_QWORD *)v14;
        *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
        v15 = v11[6];
        v16 = (uint64_t *)&v8[v15];
        v17 = (uint64_t *)&v9[v15];
        v18 = *v17;
        v19 = v17[1];
        swift_bridgeObjectRetain();
        sub_237F91894(v18, v19);
        *v16 = v18;
        v16[1] = v19;
        v20 = v11[7];
        v21 = (uint64_t *)&v8[v20];
        v22 = (uint64_t *)&v9[v20];
        v23 = *v22;
        v24 = v22[1];
        sub_237F91894(*v22, v24);
        *v21 = v23;
        v21[1] = v24;
        v25 = type metadata accessor for Asset(0);
        v26 = *(int *)(v25 + 20);
        v27 = (uint64_t *)&v8[v26];
        v41 = v4;
        v28 = &v9[v26];
        v29 = *(_QWORD *)&v9[v26];
        v30 = *(_QWORD *)&v9[v26 + 8];
        sub_237F91894(v29, v30);
        *v27 = v29;
        v27[1] = v30;
        v31 = *((_QWORD *)v28 + 2);
        v32 = *((_QWORD *)v28 + 3);
        sub_237F91894(v31, v32);
        v27[2] = v31;
        v27[3] = v32;
        *(_QWORD *)&v8[*(int *)(v25 + 24)] = *(_QWORD *)&v9[*(int *)(v25 + 24)];
        v42((char *)a1 + *(int *)(v41 + 24), (char *)a2 + *(int *)(v41 + 24), v43);
        v33 = *(int *)(v41 + 28);
        v34 = (char *)a1 + v33;
        v35 = (char *)a2 + v33;
        v36 = v35[16];
        *(_OWORD *)v34 = *(_OWORD *)v35;
        v34[16] = v36;
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, v41);
      }
      v37 = *(int *)(sub_237F9191C(&qword_2568B7FF8) + 48);
      v38 = (_QWORD *)((char *)a1 + v37);
      v39 = (_QWORD *)((char *)a2 + v37);
      *v38 = *v39;
      v38[1] = v39[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for DownloadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v6 = (int *)type metadata accessor for AssetDownloadResponse();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, (uint64_t)v6))
    {
      v7 = sub_237F9191C(&qword_2568B7FE0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    else
    {
      v8 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = v6[5];
      v10 = &a1[v9];
      v11 = &a2[v9];
      v12 = type metadata accessor for URL();
      v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
      v13(v10, v11, v12);
      v14 = (int *)type metadata accessor for Asset.ID(0);
      *(_OWORD *)&v10[v14[5]] = *(_OWORD *)&v11[v14[5]];
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      *(_OWORD *)&v10[v14[7]] = *(_OWORD *)&v11[v14[7]];
      v15 = type metadata accessor for Asset(0);
      v16 = *(int *)(v15 + 20);
      v17 = &v10[v16];
      v18 = &v11[v16];
      v19 = *((_OWORD *)v18 + 1);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *((_OWORD *)v17 + 1) = v19;
      *(_QWORD *)&v10[*(int *)(v15 + 24)] = *(_QWORD *)&v11[*(int *)(v15 + 24)];
      v13(&a1[v6[6]], &a2[v6[6]], v12);
      v20 = v6[7];
      v21 = &a1[v20];
      v22 = &a2[v20];
      *(_OWORD *)v21 = *(_OWORD *)v22;
      v21[16] = v22[16];
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
    }
    v23 = sub_237F9191C(&qword_2568B7FF8);
    *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for DownloadResponseMessage(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;

  if (a1 != a2)
  {
    sub_237FC41C8((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v6 = (int *)type metadata accessor for AssetDownloadResponse();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)a2, 1, (uint64_t)v6))
      {
        v7 = sub_237F9191C(&qword_2568B7FE0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
      }
      else
      {
        v8 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
        v9 = v6[5];
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = type metadata accessor for URL();
        v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32);
        v13(v10, v11, v12);
        v14 = (int *)type metadata accessor for Asset.ID(0);
        *(_OWORD *)&v10[v14[5]] = *(_OWORD *)&v11[v14[5]];
        *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
        *(_OWORD *)&v10[v14[7]] = *(_OWORD *)&v11[v14[7]];
        v15 = type metadata accessor for Asset(0);
        v16 = *(int *)(v15 + 20);
        v17 = &v10[v16];
        v18 = &v11[v16];
        v19 = *((_OWORD *)v18 + 1);
        *(_OWORD *)v17 = *(_OWORD *)v18;
        *((_OWORD *)v17 + 1) = v19;
        *(_QWORD *)&v10[*(int *)(v15 + 24)] = *(_QWORD *)&v11[*(int *)(v15 + 24)];
        v13(&a1[v6[6]], &a2[v6[6]], v12);
        v20 = v6[7];
        v21 = &a1[v20];
        v22 = &a2[v20];
        *(_OWORD *)v21 = *(_OWORD *)v22;
        v21[16] = v22[16];
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)a1, 0, 1, (uint64_t)v6);
      }
      v23 = sub_237F9191C(&qword_2568B7FF8);
      *(_OWORD *)&a1[*(int *)(v23 + 48)] = *(_OWORD *)&a2[*(int *)(v23 + 48)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void sub_237FC4F24()
{
  unint64_t v0;
  _QWORD v1[6];

  sub_237FC4FA8(319);
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[4] = v1;
    v1[5] = MEMORY[0x24BEE0158] + 64;
    swift_initEnumMetadataMultiPayload();
  }
}

void sub_237FC4FA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!qword_2568B8518)
  {
    v2 = type metadata accessor for AssetDownloadResponse();
    sub_237FBBB90(&qword_2568B8520, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
    v4 = v3;
    sub_237FBBB90(&qword_2568B8528, (void (*)(uint64_t))type metadata accessor for AssetDownloadResponse);
    v6 = type metadata accessor for XPCResult(a1, v2, v4, v5);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_2568B8518);
  }
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.CodingKeys()
{
  return &type metadata for DownloadResponseMessage.CodingKeys;
}

uint64_t _s11CloudAssets23DownloadResponseMessageO10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237FC50B0 + 4 * byte_237FEA5D5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237FC50E4 + 4 * asc_237FEA5D0[v4]))();
}

uint64_t sub_237FC50E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FC50EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FC50F4);
  return result;
}

uint64_t sub_237FC5100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FC5108);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237FC510C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FC5114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.ResponseCodingKeys()
{
  return &type metadata for DownloadResponseMessage.ResponseCodingKeys;
}

uint64_t storeEnumTagSinglePayload for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FC5170 + 4 * byte_237FEA5DA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FC5190 + 4 * byte_237FEA5DF[v4]))();
}

_BYTE *sub_237FC5170(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FC5190(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FC5198(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FC51A0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FC51A8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FC51B0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys()
{
  return &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys;
}

unint64_t sub_237FC51D0()
{
  unint64_t result;

  result = qword_2568B8530;
  if (!qword_2568B8530)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA7C4, &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8530);
  }
  return result;
}

unint64_t sub_237FC5210()
{
  unint64_t result;

  result = qword_2568B8538;
  if (!qword_2568B8538)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA87C, &type metadata for DownloadResponseMessage.ResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8538);
  }
  return result;
}

unint64_t sub_237FC5250()
{
  unint64_t result;

  result = qword_2568B8540;
  if (!qword_2568B8540)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA934, &type metadata for DownloadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8540);
  }
  return result;
}

unint64_t sub_237FC5290()
{
  unint64_t result;

  result = qword_2568B8548;
  if (!qword_2568B8548)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA7EC, &type metadata for DownloadResponseMessage.ResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8548);
  }
  return result;
}

unint64_t sub_237FC52D0()
{
  unint64_t result;

  result = qword_2568B8550;
  if (!qword_2568B8550)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA814, &type metadata for DownloadResponseMessage.ResponseCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8550);
  }
  return result;
}

unint64_t sub_237FC5310()
{
  unint64_t result;

  result = qword_2568B8558;
  if (!qword_2568B8558)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA734, &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8558);
  }
  return result;
}

unint64_t sub_237FC5350()
{
  unint64_t result;

  result = qword_2568B8560;
  if (!qword_2568B8560)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA75C, &type metadata for DownloadResponseMessage.SimultaneousTransferErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8560);
  }
  return result;
}

unint64_t sub_237FC5390()
{
  unint64_t result;

  result = qword_2568B8568;
  if (!qword_2568B8568)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA8A4, &type metadata for DownloadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8568);
  }
  return result;
}

unint64_t sub_237FC53D0()
{
  unint64_t result;

  result = qword_2568B8570;
  if (!qword_2568B8570)
  {
    result = MEMORY[0x23B829E84](&unk_237FEA8CC, &type metadata for DownloadResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8570);
  }
  return result;
}

uint64_t sub_237FC5428()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FC543C@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t sub_237FC5448()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FC5450(uint64_t a1)
{
  uint64_t v1;

  return sub_237FC42B8(a1, *(_QWORD *)(v1 - 192));
}

void sub_237FC545C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_237FC4190(v2, a2);
}

uint64_t sub_237FC5464()
{
  return swift_getEnumCaseMultiPayload();
}

uint64_t sub_237FC546C()
{
  uint64_t v0;

  return sub_237FC41C8(v0);
}

uint64_t sub_237FC5474()
{
  uint64_t v0;

  return v0;
}

unint64_t sub_237FC5488()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 1;
  return sub_237FC4240();
}

void sub_237FC5494(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_237FC4190(v2, a2);
}

uint64_t sub_237FC549C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FC54A4@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v1, v2);
}

uint64_t *sub_237FC54B0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UnknownStorage();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v59 = v13;
    v13(v10, v11, v12);
    v14 = a3[7];
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = (int *)type metadata accessor for CloudAssets_Asset(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v16, 1, (uint64_t)v17))
    {
      v18 = sub_237F9191C(&qword_2568B7720);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v13((char *)v15 + v17[5], (char *)v16 + v17[5], v12);
      v20 = v17[6];
      v21 = (_QWORD *)((char *)v15 + v20);
      v22 = (_QWORD *)((char *)v16 + v20);
      v56 = type metadata accessor for CloudAssets_Asset.ID(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v22, 1, v56))
      {
        v23 = sub_237F9191C(&qword_2568B76B0);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        v24 = v22[1];
        *v21 = *v22;
        v21[1] = v24;
        v57 = v12;
        v25 = v22[3];
        v21[2] = v22[2];
        v21[3] = v25;
        v26 = v22[5];
        v55 = v22[4];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_237F91894(v55, v26);
        v21[4] = v55;
        v21[5] = v26;
        v28 = v22[6];
        v27 = v22[7];
        sub_237F91894(v28, v27);
        v21[6] = v28;
        v21[7] = v27;
        v12 = v57;
        v59((char *)v21 + *(int *)(v56 + 32), (char *)v22 + *(int *)(v56 + 32), v57);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v21, 0, 1, v56);
      }
      v29 = v17[7];
      v30 = (_QWORD *)((char *)v15 + v29);
      v31 = (_QWORD *)((char *)v16 + v29);
      v32 = type metadata accessor for CloudAssets_Asset.Protector(0);
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32))
      {
        v33 = sub_237F9191C(&qword_2568B76B8);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        v58 = v12;
        v34 = *v31;
        v35 = v31[1];
        sub_237F91894(*v31, v35);
        *v30 = v34;
        v30[1] = v35;
        v36 = v31[2];
        v37 = v31[3];
        sub_237F91894(v36, v37);
        v30[2] = v36;
        v30[3] = v37;
        v12 = v58;
        v59((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v58);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      }
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v15, 0, 1, (uint64_t)v17);
    }
    v38 = a3[8];
    v39 = (uint64_t *)((char *)v4 + v38);
    v40 = (uint64_t *)((char *)a2 + v38);
    v41 = type metadata accessor for CloudAssets_Credential(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v40, 1, v41))
    {
      v42 = sub_237F9191C((uint64_t *)&unk_2568B8910);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v43 = v40[1];
      *v39 = *v40;
      v39[1] = v43;
      v44 = v40[3];
      v39[2] = v40[2];
      v39[3] = v44;
      v45 = v40[5];
      v39[4] = v40[4];
      v39[5] = v45;
      v46 = *(int *)(v41 + 28);
      v47 = (char *)v39 + v46;
      v48 = (char *)v40 + v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v59(v47, v48, v12);
      v49 = *(int *)(v41 + 32);
      v50 = (char *)v39 + v49;
      v51 = (char *)v40 + v49;
      v52 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v51, 1, v52))
      {
        v53 = sub_237F9191C(&qword_2568B7718);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v50, v51, v52);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v50, 0, 1, v52);
      }
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v39, 0, 1, v41);
    }
  }
  return v4;
}

uint64_t type metadata accessor for CloudAssets_Asset(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B85D0);
}

uint64_t type metadata accessor for CloudAssets_Asset.ID(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8600);
}

uint64_t type metadata accessor for CloudAssets_Asset.Protector(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B85F0);
}

uint64_t type metadata accessor for CloudAssets_Credential(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8598);
}

uint64_t sub_237FC58FC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[7];
  v8 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (!_s11CloudAssets21UploadResponseMessageOwet_0(v7, 1, (uint64_t)v8))
  {
    v6(v7 + v8[5], v5);
    v9 = v7 + v8[6];
    v10 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (!_s11CloudAssets21UploadResponseMessageOwet_0(v9, 1, v10))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_237F918D8(*(_QWORD *)(v9 + 32), *(_QWORD *)(v9 + 40));
      sub_237F918D8(*(_QWORD *)(v9 + 48), *(_QWORD *)(v9 + 56));
      v6(v9 + *(int *)(v10 + 32), v5);
    }
    v11 = v7 + v8[7];
    v12 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (!_s11CloudAssets21UploadResponseMessageOwet_0(v11, 1, v12))
    {
      sub_237F918D8(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
      sub_237F918D8(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24));
      v6(v11 + *(int *)(v12 + 24), v5);
    }
  }
  v13 = a1 + a2[8];
  v14 = type metadata accessor for CloudAssets_Credential(0);
  result = _s11CloudAssets21UploadResponseMessageOwet_0(v13, 1, v14);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v13 + *(int *)(v14 + 28), v5);
    v16 = v13 + *(int *)(v14 + 32);
    v17 = type metadata accessor for Google_Protobuf_Timestamp();
    result = _s11CloudAssets21UploadResponseMessageOwet_0(v16, 1, v17);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  }
  return result;
}

_QWORD *sub_237FC5AE4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v57 = v12;
  v12(v9, v10, v11);
  v13 = a3[7];
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, (uint64_t)v16))
  {
    v17 = sub_237F9191C(&qword_2568B7720);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v12((char *)v14 + v16[5], (char *)v15 + v16[5], v11);
    v18 = v16[6];
    v19 = (_QWORD *)((char *)v14 + v18);
    v20 = (_QWORD *)((char *)v15 + v18);
    v54 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v54))
    {
      v21 = sub_237F9191C(&qword_2568B76B0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v20[1];
      *v19 = *v20;
      v19[1] = v22;
      v55 = v11;
      v23 = v20[3];
      v19[2] = v20[2];
      v19[3] = v23;
      v24 = v20[5];
      v53 = v20[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_237F91894(v53, v24);
      v19[4] = v53;
      v19[5] = v24;
      v26 = v20[6];
      v25 = v20[7];
      sub_237F91894(v26, v25);
      v19[6] = v26;
      v19[7] = v25;
      v11 = v55;
      v57((char *)v19 + *(int *)(v54 + 32), (char *)v20 + *(int *)(v54 + 32), v55);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v54);
    }
    v27 = v16[7];
    v28 = (_QWORD *)((char *)v14 + v27);
    v29 = (_QWORD *)((char *)v15 + v27);
    v30 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v29, 1, v30))
    {
      v31 = sub_237F9191C(&qword_2568B76B8);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v56 = v11;
      v32 = *v29;
      v33 = v29[1];
      sub_237F91894(*v29, v33);
      *v28 = v32;
      v28[1] = v33;
      v34 = v29[2];
      v35 = v29[3];
      sub_237F91894(v34, v35);
      v28[2] = v34;
      v28[3] = v35;
      v11 = v56;
      v57((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v56);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v28, 0, 1, v30);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, (uint64_t)v16);
  }
  v36 = a3[8];
  v37 = (_QWORD *)((char *)a1 + v36);
  v38 = (_QWORD *)((char *)a2 + v36);
  v39 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v38, 1, v39))
  {
    v40 = sub_237F9191C((uint64_t *)&unk_2568B8910);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    v41 = v38[1];
    *v37 = *v38;
    v37[1] = v41;
    v42 = v38[3];
    v37[2] = v38[2];
    v37[3] = v42;
    v43 = v38[5];
    v37[4] = v38[4];
    v37[5] = v43;
    v44 = *(int *)(v39 + 28);
    v45 = (char *)v37 + v44;
    v46 = (char *)v38 + v44;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v57(v45, v46, v11);
    v47 = *(int *)(v39 + 32);
    v48 = (char *)v37 + v47;
    v49 = (char *)v38 + v47;
    v50 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v49, 1, v50))
    {
      v51 = sub_237F9191C(&qword_2568B7718);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v48, 0, 1, v50);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v37, 0, 1, v39);
  }
  return a1;
}

_QWORD *sub_237FC5EB4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  int v15;
  int v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  char *v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  size_t v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  void (*v108)(char *, char *, uint64_t);
  int *v109;
  int *v110;
  void (*v111)(char *, char *, uint64_t);
  void (*v112)(char *, char *, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v115 = *(_QWORD *)(v9 - 8);
  v10 = *(void (**)(char *, char *, uint64_t))(v115 + 24);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = (int *)type metadata accessor for CloudAssets_Asset(0);
  v15 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v12, 1, (uint64_t)v14);
  v16 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, (uint64_t)v14);
  if (!v15)
  {
    if (v16)
    {
      sub_237F94B38((uint64_t)v12, type metadata accessor for CloudAssets_Asset);
      goto LABEL_7;
    }
    v109 = a3;
    v112 = v10;
    *(_QWORD *)v12 = *(_QWORD *)v13;
    v114 = v9;
    v10(&v12[v14[5]], &v13[v14[5]], v9);
    v24 = v14[6];
    v25 = &v12[v24];
    v26 = &v13[v24];
    v27 = type metadata accessor for CloudAssets_Asset.ID(0);
    v28 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v25, 1, v27);
    v106 = v27;
    v29 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v26, 1, v27);
    if (v28)
    {
      if (!v29)
      {
        *(_QWORD *)v25 = *(_QWORD *)v26;
        *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
        *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
        *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
        v31 = *((_QWORD *)v26 + 4);
        v30 = *((_QWORD *)v26 + 5);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_237F91894(v31, v30);
        *((_QWORD *)v25 + 4) = v31;
        *((_QWORD *)v25 + 5) = v30;
        v33 = *((_QWORD *)v26 + 6);
        v32 = *((_QWORD *)v26 + 7);
        sub_237F91894(v33, v32);
        *((_QWORD *)v25 + 6) = v33;
        *((_QWORD *)v25 + 7) = v32;
        v9 = v114;
        (*(void (**)(char *, char *, uint64_t))(v115 + 16))(&v25[*(int *)(v106 + 32)], &v26[*(int *)(v106 + 32)], v114);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v25, 0, 1, v106);
LABEL_19:
        v10 = v112;
        goto LABEL_20;
      }
    }
    else
    {
      if (!v29)
      {
        *(_QWORD *)v25 = *(_QWORD *)v26;
        *((_QWORD *)v25 + 1) = *((_QWORD *)v26 + 1);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
        *((_QWORD *)v25 + 3) = *((_QWORD *)v26 + 3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v88 = *((_QWORD *)v26 + 4);
        v87 = *((_QWORD *)v26 + 5);
        sub_237F91894(v88, v87);
        v89 = *((_QWORD *)v25 + 4);
        v90 = *((_QWORD *)v25 + 5);
        *((_QWORD *)v25 + 4) = v88;
        *((_QWORD *)v25 + 5) = v87;
        sub_237F918D8(v89, v90);
        v92 = *((_QWORD *)v26 + 6);
        v91 = *((_QWORD *)v26 + 7);
        sub_237F91894(v92, v91);
        v93 = *((_QWORD *)v25 + 6);
        v94 = *((_QWORD *)v25 + 7);
        *((_QWORD *)v25 + 6) = v92;
        *((_QWORD *)v25 + 7) = v91;
        sub_237F918D8(v93, v94);
        v95 = *(int *)(v27 + 32);
        v96 = &v26[v95];
        v10 = v112;
        v9 = v114;
        v112(&v25[v95], v96, v114);
LABEL_20:
        v48 = v14[7];
        v49 = (uint64_t *)&v12[v48];
        v50 = (uint64_t *)&v13[v48];
        v51 = type metadata accessor for CloudAssets_Asset.Protector(0);
        v52 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v49, 1, v51);
        v53 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v50, 1, v51);
        if (v52)
        {
          if (!v53)
          {
            v54 = *v50;
            v55 = v50[1];
            sub_237F91894(*v50, v55);
            *v49 = v54;
            v49[1] = v55;
            v56 = v50[2];
            v57 = v50[3];
            sub_237F91894(v56, v57);
            v49[2] = v56;
            v49[3] = v57;
            v10 = v112;
            (*(void (**)(char *, char *, uint64_t))(v115 + 16))((char *)v49 + *(int *)(v51 + 24), (char *)v50 + *(int *)(v51 + 24), v9);
            _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v49, 0, 1, v51);
LABEL_26:
            a3 = v109;
            goto LABEL_27;
          }
        }
        else
        {
          if (!v53)
          {
            v97 = *v50;
            v98 = v50[1];
            sub_237F91894(*v50, v98);
            v99 = *v49;
            v100 = v49[1];
            *v49 = v97;
            v49[1] = v98;
            sub_237F918D8(v99, v100);
            v101 = v50[2];
            v102 = v50[3];
            sub_237F91894(v101, v102);
            v103 = v49[2];
            v104 = v49[3];
            v49[2] = v101;
            v49[3] = v102;
            v10 = v112;
            sub_237F918D8(v103, v104);
            v112((char *)v49 + *(int *)(v51 + 24), (char *)v50 + *(int *)(v51 + 24), v9);
            goto LABEL_26;
          }
          sub_237F94B38((uint64_t)v49, type metadata accessor for CloudAssets_Asset.Protector);
        }
        v58 = sub_237F9191C(&qword_2568B76B8);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
        goto LABEL_26;
      }
      sub_237F94B38((uint64_t)v25, type metadata accessor for CloudAssets_Asset.ID);
    }
    v47 = sub_237F9191C(&qword_2568B76B0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    v9 = v114;
    goto LABEL_19;
  }
  if (v16)
  {
LABEL_7:
    v23 = sub_237F9191C(&qword_2568B7720);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_27;
  }
  v111 = v10;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v17 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
  v17(&v12[v14[5]], &v13[v14[5]], v9);
  v18 = v14[6];
  v19 = &v12[v18];
  v20 = &v13[v18];
  v113 = v9;
  v21 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = sub_237F9191C(&qword_2568B76B0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
    *((_QWORD *)v19 + 2) = *((_QWORD *)v20 + 2);
    v107 = v17;
    v110 = a3;
    *((_QWORD *)v19 + 3) = *((_QWORD *)v20 + 3);
    v34 = *((_QWORD *)v20 + 4);
    v105 = *((_QWORD *)v20 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_237F91894(v34, v105);
    *((_QWORD *)v19 + 4) = v34;
    *((_QWORD *)v19 + 5) = v105;
    v35 = *((_QWORD *)v20 + 6);
    v36 = *((_QWORD *)v20 + 7);
    sub_237F91894(v35, v36);
    *((_QWORD *)v19 + 6) = v35;
    *((_QWORD *)v19 + 7) = v36;
    v17 = v107;
    a3 = v110;
    v107(&v19[*(int *)(v21 + 32)], &v20[*(int *)(v21 + 32)], v113);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v21);
  }
  v37 = v14[7];
  v38 = &v12[v37];
  v39 = (uint64_t *)&v13[v37];
  v40 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v39, 1, v40))
  {
    v41 = sub_237F9191C(&qword_2568B76B8);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    v9 = v113;
  }
  else
  {
    v108 = v17;
    v42 = a3;
    v43 = *v39;
    v44 = v39[1];
    sub_237F91894(*v39, v44);
    *(_QWORD *)v38 = v43;
    *((_QWORD *)v38 + 1) = v44;
    v45 = v39[2];
    v46 = v39[3];
    sub_237F91894(v45, v46);
    *((_QWORD *)v38 + 2) = v45;
    *((_QWORD *)v38 + 3) = v46;
    a3 = v42;
    v9 = v113;
    v108(&v38[*(int *)(v40 + 24)], (char *)v39 + *(int *)(v40 + 24), v113);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v38, 0, 1, v40);
  }
  v10 = v111;
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, (uint64_t)v14);
LABEL_27:
  v59 = a3[8];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (_QWORD *)((char *)a2 + v59);
  v62 = type metadata accessor for CloudAssets_Credential(0);
  v63 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v60, 1, v62);
  v64 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v61, 1, v62);
  if (v63)
  {
    if (!v64)
    {
      *v60 = *v61;
      v60[1] = v61[1];
      v60[2] = v61[2];
      v60[3] = v61[3];
      v60[4] = v61[4];
      v60[5] = v61[5];
      v65 = *(int *)(v62 + 28);
      v66 = (char *)v60 + v65;
      v67 = (char *)v61 + v65;
      v68 = *(void (**)(char *, char *, uint64_t))(v115 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v68(v66, v67, v9);
      v69 = *(int *)(v62 + 32);
      v70 = (char *)v60 + v69;
      v71 = (char *)v61 + v69;
      v72 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v71, 1, v72))
      {
        v73 = sub_237F9191C(&qword_2568B7718);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v70, v71, v72);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v70, 0, 1, v72);
      }
      v83 = (uint64_t)v60;
      v84 = v62;
      goto LABEL_40;
    }
    goto LABEL_33;
  }
  if (v64)
  {
    sub_237F94B38((uint64_t)v60, type metadata accessor for CloudAssets_Credential);
LABEL_33:
    v74 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C((uint64_t *)&unk_2568B8910) - 8) + 64);
    v75 = v60;
    v76 = v61;
    goto LABEL_34;
  }
  *v60 = *v61;
  v60[1] = v61[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60[2] = v61[2];
  v60[3] = v61[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v60[4] = v61[4];
  v60[5] = v61[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10((char *)v60 + *(int *)(v62 + 28), (char *)v61 + *(int *)(v62 + 28), v9);
  v77 = *(int *)(v62 + 32);
  v78 = (uint64_t)v60 + v77;
  v79 = (uint64_t)v61 + v77;
  v80 = type metadata accessor for Google_Protobuf_Timestamp();
  v81 = _s11CloudAssets21UploadResponseMessageOwet_0(v78, 1, v80);
  v82 = _s11CloudAssets21UploadResponseMessageOwet_0(v79, 1, v80);
  if (v81)
  {
    if (!v82)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 16))(v78, v79, v80);
      v83 = v78;
      v84 = v80;
LABEL_40:
      _s11CloudAssets21UploadResponseMessageOwst_0(v83, 0, 1, v84);
      return a1;
    }
  }
  else
  {
    v86 = *(_QWORD *)(v80 - 8);
    if (!v82)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 24))(v78, v79, v80);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v78, v80);
  }
  v74 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7718) - 8) + 64);
  v75 = (void *)v78;
  v76 = (const void *)v79;
LABEL_34:
  memcpy(v75, v76, v74);
  return a1;
}

_OWORD *sub_237FC6774(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v42)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[7];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (_QWORD *)((char *)a2 + v12);
  v15 = (int *)type metadata accessor for CloudAssets_Asset(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, (uint64_t)v15))
  {
    v16 = sub_237F9191C(&qword_2568B7720);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v11((char *)v13 + v15[5], (char *)v14 + v15[5], v10);
    v17 = v15[6];
    v18 = (_OWORD *)((char *)v13 + v17);
    v19 = (_OWORD *)((char *)v14 + v17);
    v42 = v11;
    v20 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_237F9191C(&qword_2568B76B0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v19[1];
      *v18 = *v19;
      v18[1] = v22;
      v23 = v19[3];
      v18[2] = v19[2];
      v18[3] = v23;
      v42((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
    v24 = v15[7];
    v25 = (_OWORD *)((char *)v13 + v24);
    v26 = (_OWORD *)((char *)v14 + v24);
    v27 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v26, 1, v27))
    {
      v28 = sub_237F9191C(&qword_2568B76B8);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
      v11 = v42;
    }
    else
    {
      v29 = v26[1];
      *v25 = *v26;
      v25[1] = v29;
      v11 = v42;
      v42((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v25, 0, 1, v27);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, (uint64_t)v15);
  }
  v30 = a3[8];
  v31 = (_OWORD *)((char *)a1 + v30);
  v32 = (_OWORD *)((char *)a2 + v30);
  v33 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v32, 1, v33))
  {
    v34 = sub_237F9191C((uint64_t *)&unk_2568B8910);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    v35 = v32[1];
    *v31 = *v32;
    v31[1] = v35;
    v31[2] = v32[2];
    v11((char *)v31 + *(int *)(v33 + 28), (char *)v32 + *(int *)(v33 + 28), v10);
    v36 = *(int *)(v33 + 32);
    v37 = (char *)v31 + v36;
    v38 = (char *)v32 + v36;
    v39 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v38, 1, v39))
    {
      v40 = sub_237F9191C(&qword_2568B7718);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v37, v38, v39);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v37, 0, 1, v39);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v31, 0, 1, v33);
  }
  return a1;
}

_QWORD *sub_237FC6A9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  int v18;
  int v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  int v33;
  size_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  __int128 v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  size_t v58;
  void *v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  int v80;
  int v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  _QWORD *v95;
  int *__src;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, char *, uint64_t);
  void (*v100)(char *, char *, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UnknownStorage();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = a3[7];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = (int *)type metadata accessor for CloudAssets_Asset(0);
  v18 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, (uint64_t)v17);
  v19 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v16, 1, (uint64_t)v17);
  if (v18)
  {
    if (!v19)
    {
      __src = a3;
      v97 = v12;
      v99 = v13;
      *(_QWORD *)v15 = *(_QWORD *)v16;
      v20 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v20(&v15[v17[5]], &v16[v17[5]], v11);
      v21 = v17[6];
      v22 = &v15[v21];
      v23 = &v16[v21];
      v24 = type metadata accessor for CloudAssets_Asset.ID(0);
      v94 = v20;
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v24))
      {
        v25 = sub_237F9191C(&qword_2568B76B0);
        memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        v36 = *((_OWORD *)v23 + 1);
        *(_OWORD *)v22 = *(_OWORD *)v23;
        *((_OWORD *)v22 + 1) = v36;
        v37 = *((_OWORD *)v23 + 3);
        *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
        *((_OWORD *)v22 + 3) = v37;
        v20(&v22[*(int *)(v24 + 32)], &v23[*(int *)(v24 + 32)], v11);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v22, 0, 1, v24);
      }
      v38 = v17[7];
      v39 = &v15[v38];
      v40 = &v16[v38];
      v41 = type metadata accessor for CloudAssets_Asset.Protector(0);
      v12 = v97;
      a3 = __src;
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v40, 1, v41))
      {
        v42 = sub_237F9191C(&qword_2568B76B8);
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        v43 = *((_OWORD *)v40 + 1);
        *(_OWORD *)v39 = *(_OWORD *)v40;
        *((_OWORD *)v39 + 1) = v43;
        v94(&v39[*(int *)(v41 + 24)], &v40[*(int *)(v41 + 24)], v11);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v39, 0, 1, v41);
      }
      v13 = v99;
      v44 = (uint64_t)v15;
      v45 = (uint64_t)v17;
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  if (v19)
  {
    sub_237F94B38((uint64_t)v15, type metadata accessor for CloudAssets_Asset);
LABEL_7:
    v26 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7720) - 8) + 64);
    v27 = v15;
    v28 = v16;
LABEL_8:
    memcpy(v27, v28, v26);
    goto LABEL_18;
  }
  v98 = v12;
  v100 = v13;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v13(&v15[v17[5]], &v16[v17[5]], v11);
  v29 = v17[6];
  v30 = (uint64_t)&v15[v29];
  v31 = &v16[v29];
  v32 = type metadata accessor for CloudAssets_Asset.ID(0);
  v95 = (_QWORD *)v30;
  LODWORD(v30) = _s11CloudAssets21UploadResponseMessageOwet_0(v30, 1, v32);
  v93 = v32;
  v33 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32);
  if (!(_DWORD)v30)
  {
    if (!v33)
    {
      v83 = *((_QWORD *)v31 + 1);
      *v95 = *(_QWORD *)v31;
      v95[1] = v83;
      swift_bridgeObjectRelease();
      v84 = *((_QWORD *)v31 + 3);
      v95[2] = *((_QWORD *)v31 + 2);
      v95[3] = v84;
      swift_bridgeObjectRelease();
      v85 = v95[4];
      v86 = v95[5];
      *((_OWORD *)v95 + 2) = *((_OWORD *)v31 + 2);
      sub_237F918D8(v85, v86);
      v87 = v95[6];
      v88 = v95[7];
      *((_OWORD *)v95 + 3) = *((_OWORD *)v31 + 3);
      sub_237F918D8(v87, v88);
      v13 = v100;
      v100((char *)v95 + *(int *)(v93 + 32), &v31[*(int *)(v93 + 32)], v11);
      goto LABEL_36;
    }
    sub_237F94B38((uint64_t)v95, type metadata accessor for CloudAssets_Asset.ID);
    v34 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B76B0) - 8) + 64);
    v35 = v95;
LABEL_35:
    memcpy(v35, v31, v34);
    v13 = v100;
LABEL_36:
    v12 = v98;
    goto LABEL_41;
  }
  if (v33)
  {
    v34 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B76B0) - 8) + 64);
    v35 = v95;
    goto LABEL_35;
  }
  v74 = *((_OWORD *)v31 + 1);
  *(_OWORD *)v95 = *(_OWORD *)v31;
  *((_OWORD *)v95 + 1) = v74;
  v75 = *((_OWORD *)v31 + 3);
  *((_OWORD *)v95 + 2) = *((_OWORD *)v31 + 2);
  *((_OWORD *)v95 + 3) = v75;
  v12 = v98;
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))((char *)v95 + *(int *)(v32 + 32), &v31[*(int *)(v32 + 32)], v11);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v95, 0, 1, v32);
  v13 = v100;
LABEL_41:
  v76 = v17[7];
  v77 = (uint64_t)&v15[v76];
  v78 = &v16[v76];
  v79 = type metadata accessor for CloudAssets_Asset.Protector(0);
  v80 = _s11CloudAssets21UploadResponseMessageOwet_0(v77, 1, v79);
  v81 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v78, 1, v79);
  if (v80)
  {
    if (!v81)
    {
      v82 = *((_OWORD *)v78 + 1);
      *(_OWORD *)v77 = *(_OWORD *)v78;
      *(_OWORD *)(v77 + 16) = v82;
      (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v77 + *(int *)(v79 + 24), &v78[*(int *)(v79 + 24)], v11);
      v44 = v77;
      v45 = v79;
LABEL_17:
      _s11CloudAssets21UploadResponseMessageOwst_0(v44, 0, 1, v45);
      goto LABEL_18;
    }
    goto LABEL_46;
  }
  if (v81)
  {
    sub_237F94B38(v77, type metadata accessor for CloudAssets_Asset.Protector);
LABEL_46:
    v26 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B76B8) - 8) + 64);
    v27 = (void *)v77;
    v28 = v78;
    goto LABEL_8;
  }
  v89 = *(_QWORD *)v77;
  v90 = *(_QWORD *)(v77 + 8);
  *(_OWORD *)v77 = *(_OWORD *)v78;
  sub_237F918D8(v89, v90);
  v91 = *(_QWORD *)(v77 + 16);
  v92 = *(_QWORD *)(v77 + 24);
  *(_OWORD *)(v77 + 16) = *((_OWORD *)v78 + 1);
  sub_237F918D8(v91, v92);
  v13((char *)(v77 + *(int *)(v79 + 24)), &v78[*(int *)(v79 + 24)], v11);
LABEL_18:
  v46 = a3[8];
  v47 = (uint64_t)a1 + v46;
  v48 = (uint64_t)a2 + v46;
  v49 = type metadata accessor for CloudAssets_Credential(0);
  v50 = _s11CloudAssets21UploadResponseMessageOwet_0(v47, 1, v49);
  v51 = _s11CloudAssets21UploadResponseMessageOwet_0(v48, 1, v49);
  if (v50)
  {
    if (!v51)
    {
      v52 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + 16) = v52;
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v47 + *(int *)(v49 + 28), v48 + *(int *)(v49 + 28), v11);
      v53 = *(int *)(v49 + 32);
      v54 = (void *)(v47 + v53);
      v55 = (const void *)(v48 + v53);
      v56 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v55, 1, v56))
      {
        v57 = sub_237F9191C(&qword_2568B7718);
        memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v56 - 8) + 32))(v54, v55, v56);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v54, 0, 1, v56);
      }
      v70 = v47;
      v71 = v49;
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  if (v51)
  {
    sub_237F94B38(v47, type metadata accessor for CloudAssets_Credential);
LABEL_24:
    v58 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C((uint64_t *)&unk_2568B8910) - 8) + 64);
    v59 = (void *)v47;
    v60 = (const void *)v48;
    goto LABEL_25;
  }
  v61 = *(_QWORD *)(v48 + 8);
  *(_QWORD *)v47 = *(_QWORD *)v48;
  *(_QWORD *)(v47 + 8) = v61;
  swift_bridgeObjectRelease();
  v62 = *(_QWORD *)(v48 + 24);
  *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
  *(_QWORD *)(v47 + 24) = v62;
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v48 + 40);
  *(_QWORD *)(v47 + 32) = *(_QWORD *)(v48 + 32);
  *(_QWORD *)(v47 + 40) = v63;
  swift_bridgeObjectRelease();
  v13((char *)(v47 + *(int *)(v49 + 28)), (char *)(v48 + *(int *)(v49 + 28)), v11);
  v64 = *(int *)(v49 + 32);
  v65 = v47 + v64;
  v66 = v48 + v64;
  v67 = type metadata accessor for Google_Protobuf_Timestamp();
  v68 = _s11CloudAssets21UploadResponseMessageOwet_0(v65, 1, v67);
  v69 = _s11CloudAssets21UploadResponseMessageOwet_0(v66, 1, v67);
  if (v68)
  {
    if (!v69)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 32))(v65, v66, v67);
      v70 = v65;
      v71 = v67;
LABEL_31:
      _s11CloudAssets21UploadResponseMessageOwst_0(v70, 0, 1, v71);
      return a1;
    }
  }
  else
  {
    v73 = *(_QWORD *)(v67 - 8);
    if (!v69)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 40))(v65, v66, v67);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v65, v67);
  }
  v58 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7718) - 8) + 64);
  v59 = (void *)v65;
  v60 = (const void *)v66;
LABEL_25:
  memcpy(v59, v60, v58);
  return a1;
}

uint64_t sub_237FC71BC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237FC71C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_237FCFD4C();
  if (v3)
  {
    sub_237FCFC58(*(_QWORD *)(v0 + 8));
    sub_237F961B0();
  }
  else
  {
    v2 = v1;
    sub_237FCFB8C();
    sub_237F9C8D0();
    if (v3)
    {
      v4 = *(int *)(v2 + 24);
    }
    else
    {
      sub_237F9191C(&qword_2568B7720);
      sub_237F9C8D0();
      if (v5)
      {
        sub_237FD0004();
      }
      else
      {
        sub_237F9191C((uint64_t *)&unk_2568B8910);
        sub_237FCFFF8();
      }
    }
    v6 = sub_237FCFE28(v4);
    sub_237F96258(v6, v7, v8);
  }
}

uint64_t sub_237FC7248()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FC7254()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_237FCFC44();
  if (v4)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_237F961B0();
  }
  else
  {
    v3 = v2;
    sub_237FCFB8C();
    sub_237F9C8C0();
    if (v4)
    {
      v5 = *(int *)(v3 + 24);
    }
    else
    {
      sub_237F9191C(&qword_2568B7720);
      sub_237F9C8C0();
      if (v6)
      {
        sub_237FCFFEC();
      }
      else
      {
        sub_237F9191C((uint64_t *)&unk_2568B8910);
        sub_237FCFFE0();
      }
    }
    v7 = sub_237FCFC8C(v5);
    sub_237F96264(v7, v8, v9, v10);
  }
}

uint64_t type metadata accessor for CloudAssets_AssetStreamHandle(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8578);
}

void sub_237FC72E8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_237FC73B4(319, &qword_2568B8588, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset);
    if (v1 <= 0x3F)
    {
      sub_237FC73B4(319, &qword_2568B8590, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

void sub_237FC73B4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t *sub_237FC7400(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = *(int *)(a3 + 28);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v13 = type metadata accessor for UnknownStorage();
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
    v15 = *(int *)(a3 + 32);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v17, 1, v18))
    {
      v19 = sub_237F9191C(&qword_2568B7718);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v16, 0, 1, v18);
    }
  }
  return v4;
}

uint64_t sub_237FC7550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 32);
  v7 = type metadata accessor for Google_Protobuf_Timestamp();
  result = _s11CloudAssets21UploadResponseMessageOwet_0(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return result;
}

_QWORD *sub_237FC75FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v12 = type metadata accessor for UnknownStorage();
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for Google_Protobuf_Timestamp();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v16, 1, v17))
  {
    v18 = sub_237F9191C(&qword_2568B7718);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v15, 0, 1, v17);
  }
  return a1;
}

_QWORD *sub_237FC7720(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 32);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Google_Protobuf_Timestamp();
  LODWORD(v8) = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v11, 1, v13);
  v14 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v12, 1, v13);
  if (!(_DWORD)v8)
  {
    v15 = *(_QWORD *)(v13 - 8);
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    v16 = sub_237F9191C(&qword_2568B7718);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v11, 0, 1, v13);
  return a1;
}

_OWORD *sub_237FC78A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = *(int *)(a3 + 32);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for Google_Protobuf_Timestamp();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_237F9191C(&qword_2568B7718);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(v12, v13, v14);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *sub_237FC7998(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for Google_Protobuf_Timestamp();
  LODWORD(v11) = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, v16);
  v17 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v15, 1, v16);
  if (!(_DWORD)v11)
  {
    v18 = *(_QWORD *)(v16 - 8);
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v14, v15, v16);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v19 = sub_237F9191C(&qword_2568B7718);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v14, 0, 1, v16);
  return a1;
}

uint64_t sub_237FC7AF0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237FC7AFC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237FCFD4C();
  if (v1)
  {
    sub_237FCFC58(*(_QWORD *)(v0 + 8));
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    sub_237F9C8D0();
    if (v1)
    {
      sub_237FD0004();
    }
    else
    {
      sub_237F9191C(&qword_2568B7718);
      sub_237FCFFF8();
    }
    v3 = sub_237FCFE28(v2);
    sub_237F96258(v3, v4, v5);
  }
}

uint64_t sub_237FC7B5C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FC7B68()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_237FCFC44();
  if (v2)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    sub_237F9C8C0();
    if (v2)
    {
      sub_237FCFFEC();
    }
    else
    {
      sub_237F9191C(&qword_2568B7718);
      sub_237FCFFE0();
    }
    v4 = sub_237FCFC8C(v3);
    sub_237F96264(v4, v5, v6, v7);
  }
}

void sub_237FC7BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_237FC8D60(a1, a2, a3, (uint64_t)&unk_237FEAAC0, (uint64_t)&unk_237FEAAC0, &qword_2568B85A8, (void (*)(uint64_t))MEMORY[0x24BE5B990]);
}

uint64_t *sub_237FC7BE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for UnknownStorage();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_237FC7C80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_237FC7CC8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *sub_237FC7D38(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *sub_237FC7DAC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_237FC7E08(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_237FC7E74()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237FC7E80()
{
  unint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_237FCFD4C();
  if (v2)
  {
    sub_237FCFC58(*v0);
    sub_237F961B0();
  }
  else
  {
    v3 = v1;
    sub_237FCFB8C();
    v4 = sub_237FCFE28(*(int *)(v3 + 20));
    sub_237F96258(v4, v5, v6);
  }
}

uint64_t sub_237FC7EC8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FC7ED4()
{
  int v0;
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_237FCFC44();
  if (v3)
  {
    *v1 = (v0 - 1);
    sub_237F961B0();
  }
  else
  {
    v4 = v2;
    sub_237FCFB8C();
    v5 = sub_237FCFC8C(*(int *)(v4 + 20));
    sub_237F96264(v5, v6, v7, v8);
  }
}

uint64_t type metadata accessor for CloudAssets_Signal(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B85B0);
}

uint64_t sub_237FC7F2C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_237FC7FA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v8 = a2[1];
    v9 = a2[2];
    swift_bridgeObjectRetain();
    sub_237F91894(v8, v9);
    a1[1] = v8;
    a1[2] = v9;
    v10 = a2[3];
    v11 = a2[4];
    sub_237F91894(v10, v11);
    a1[3] = v10;
    a1[4] = v11;
    v12 = *(int *)(a3 + 28);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v15 = type metadata accessor for UnknownStorage();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    v16(v13, v14, v15);
    v17 = *(int *)(a3 + 32);
    v18 = (uint64_t *)((char *)a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = type metadata accessor for CloudAssets_Credential(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_237F9191C((uint64_t *)&unk_2568B8910);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = v19[1];
      *v18 = *v19;
      v18[1] = v22;
      v23 = v19[3];
      v18[2] = v19[2];
      v18[3] = v23;
      v24 = v19[5];
      v18[4] = v19[4];
      v18[5] = v24;
      v25 = *(int *)(v20 + 28);
      v26 = (char *)v18 + v25;
      v27 = (char *)v19 + v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v16(v26, v27, v15);
      v28 = *(int *)(v20 + 32);
      v29 = (char *)v18 + v28;
      v30 = (char *)v19 + v28;
      v31 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v30, 1, v31))
      {
        v32 = sub_237F9191C(&qword_2568B7718);
        memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v29, v30, v31);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v29, 0, 1, v31);
      }
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t sub_237FC819C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_237F918D8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for UnknownStorage();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 32);
  v8 = type metadata accessor for CloudAssets_Credential(0);
  result = _s11CloudAssets21UploadResponseMessageOwet_0(v7, 1, v8);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v6(v7 + *(int *)(v8 + 28), v5);
    v10 = v7 + *(int *)(v8 + 32);
    v11 = type metadata accessor for Google_Protobuf_Timestamp();
    result = _s11CloudAssets21UploadResponseMessageOwet_0(v10, 1, v11);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  }
  return result;
}

_QWORD *sub_237FC82A8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a2[1];
  *a1 = *a2;
  v7 = a2[2];
  swift_bridgeObjectRetain();
  sub_237F91894(v6, v7);
  a1[1] = v6;
  a1[2] = v7;
  v8 = a2[3];
  v9 = a2[4];
  sub_237F91894(v8, v9);
  a1[3] = v8;
  a1[4] = v9;
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 32);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v18 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v17, 1, v18))
  {
    v19 = sub_237F9191C((uint64_t *)&unk_2568B8910);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = v17[1];
    *v16 = *v17;
    v16[1] = v20;
    v21 = v17[3];
    v16[2] = v17[2];
    v16[3] = v21;
    v22 = v17[5];
    v16[4] = v17[4];
    v16[5] = v22;
    v23 = *(int *)(v18 + 28);
    v24 = (char *)v16 + v23;
    v25 = (char *)v17 + v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v24, v25, v13);
    v26 = *(int *)(v18 + 32);
    v27 = (char *)v16 + v26;
    v28 = (char *)v17 + v26;
    v29 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v28, 1, v29))
    {
      v30 = sub_237F9191C(&qword_2568B7718);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v27, v28, v29);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v27, 0, 1, v29);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v16, 0, 1, v18);
  }
  return a1;
}

_QWORD *sub_237FC847C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  void *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[1];
  v7 = a2[2];
  sub_237F91894(v6, v7);
  v8 = a1[1];
  v9 = a1[2];
  a1[1] = v6;
  a1[2] = v7;
  sub_237F918D8(v8, v9);
  v10 = a2[3];
  v11 = a2[4];
  sub_237F91894(v10, v11);
  v12 = a1[3];
  v13 = a1[4];
  a1[3] = v10;
  a1[4] = v11;
  sub_237F918D8(v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, char *, uint64_t))(v18 + 24);
  v19(v15, v16, v17);
  v20 = *(int *)(a3 + 32);
  v21 = (_QWORD *)((char *)a1 + v20);
  v22 = (_QWORD *)((char *)a2 + v20);
  v23 = type metadata accessor for CloudAssets_Credential(0);
  LODWORD(v16) = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v21, 1, v23);
  v24 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v22, 1, v23);
  if ((_DWORD)v16)
  {
    if (!v24)
    {
      *v21 = *v22;
      v21[1] = v22[1];
      v21[2] = v22[2];
      v21[3] = v22[3];
      v21[4] = v22[4];
      v21[5] = v22[5];
      v25 = *(int *)(v23 + 28);
      v26 = (char *)v21 + v25;
      v27 = (char *)v22 + v25;
      v28 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v28(v26, v27, v17);
      v29 = *(int *)(v23 + 32);
      v30 = (char *)v21 + v29;
      v31 = (char *)v22 + v29;
      v32 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v31, 1, v32))
      {
        v33 = sub_237F9191C(&qword_2568B7718);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v30, 0, 1, v32);
      }
      v43 = (uint64_t)v21;
      v44 = v23;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v24)
  {
    sub_237F94B38((uint64_t)v21, type metadata accessor for CloudAssets_Credential);
LABEL_7:
    v34 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C((uint64_t *)&unk_2568B8910) - 8) + 64);
    v35 = v21;
    v36 = v22;
    goto LABEL_8;
  }
  *v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[2] = v22[2];
  v21[3] = v22[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v21[4] = v22[4];
  v21[5] = v22[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v19((char *)v21 + *(int *)(v23 + 28), (char *)v22 + *(int *)(v23 + 28), v17);
  v37 = *(int *)(v23 + 32);
  v38 = (uint64_t)v21 + v37;
  v39 = (uint64_t)v22 + v37;
  v40 = type metadata accessor for Google_Protobuf_Timestamp();
  v41 = _s11CloudAssets21UploadResponseMessageOwet_0(v38, 1, v40);
  v42 = _s11CloudAssets21UploadResponseMessageOwet_0(v39, 1, v40);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16))(v38, v39, v40);
      v43 = v38;
      v44 = v40;
LABEL_14:
      _s11CloudAssets21UploadResponseMessageOwst_0(v43, 0, 1, v44);
      return a1;
    }
  }
  else
  {
    v46 = *(_QWORD *)(v40 - 8);
    if (!v42)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 24))(v38, v39, v40);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v38, v40);
  }
  v34 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7718) - 8) + 64);
  v35 = (void *)v38;
  v36 = (const void *)v39;
LABEL_8:
  memcpy(v35, v36, v34);
  return a1;
}

uint64_t sub_237FC87E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 32);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for CloudAssets_Credential(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_237F9191C((uint64_t *)&unk_2568B8910);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v13[1];
    *v12 = *v13;
    v12[1] = v16;
    v12[2] = v13[2];
    v10((uint64_t)v12 + *(int *)(v14 + 28), (uint64_t)v13 + *(int *)(v14 + 28), v9);
    v17 = *(int *)(v14 + 32);
    v18 = (char *)v12 + v17;
    v19 = (char *)v13 + v17;
    v20 = type metadata accessor for Google_Protobuf_Timestamp();
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v19, 1, v20))
    {
      v21 = sub_237F9191C(&qword_2568B7718);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v18, 0, 1, v20);
    }
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  return a1;
}

_QWORD *sub_237FC8974(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v6 = a1[1];
  v7 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_237F918D8(v6, v7);
  v8 = a1[3];
  v9 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  sub_237F918D8(v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 40);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 32);
  v17 = (uint64_t)a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for CloudAssets_Credential(0);
  LODWORD(v12) = _s11CloudAssets21UploadResponseMessageOwet_0(v17, 1, v19);
  v20 = _s11CloudAssets21UploadResponseMessageOwet_0(v18, 1, v19);
  if ((_DWORD)v12)
  {
    if (!v20)
    {
      v21 = *(_OWORD *)(v18 + 16);
      *(_OWORD *)v17 = *(_OWORD *)v18;
      *(_OWORD *)(v17 + 16) = v21;
      *(_OWORD *)(v17 + 32) = *(_OWORD *)(v18 + 32);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v13);
      v22 = *(int *)(v19 + 32);
      v23 = (void *)(v17 + v22);
      v24 = (const void *)(v18 + v22);
      v25 = type metadata accessor for Google_Protobuf_Timestamp();
      if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25))
      {
        v26 = sub_237F9191C(&qword_2568B7718);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
        _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
      }
      v39 = v17;
      v40 = v19;
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (v20)
  {
    sub_237F94B38(v17, type metadata accessor for CloudAssets_Credential);
LABEL_7:
    v27 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C((uint64_t *)&unk_2568B8910) - 8) + 64);
    v28 = (void *)v17;
    v29 = (const void *)v18;
    goto LABEL_8;
  }
  v30 = *(_QWORD *)(v18 + 8);
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_QWORD *)(v17 + 8) = v30;
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v18 + 24);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 24) = v31;
  swift_bridgeObjectRelease();
  v32 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v17 + 32) = *(_QWORD *)(v18 + 32);
  *(_QWORD *)(v17 + 40) = v32;
  swift_bridgeObjectRelease();
  v15((char *)(v17 + *(int *)(v19 + 28)), v18 + *(int *)(v19 + 28), v13);
  v33 = *(int *)(v19 + 32);
  v34 = v17 + v33;
  v35 = v18 + v33;
  v36 = type metadata accessor for Google_Protobuf_Timestamp();
  v37 = _s11CloudAssets21UploadResponseMessageOwet_0(v34, 1, v36);
  v38 = _s11CloudAssets21UploadResponseMessageOwet_0(v35, 1, v36);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 32))(v34, v35, v36);
      v39 = v34;
      v40 = v36;
LABEL_14:
      _s11CloudAssets21UploadResponseMessageOwst_0(v39, 0, 1, v40);
      return a1;
    }
  }
  else
  {
    v42 = *(_QWORD *)(v36 - 8);
    if (!v38)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40))(v34, v35, v36);
      return a1;
    }
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v34, v36);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(sub_237F9191C(&qword_2568B7718) - 8) + 64);
  v28 = (void *)v34;
  v29 = (const void *)v35;
LABEL_8:
  memcpy(v28, v29, v27);
  return a1;
}

uint64_t sub_237FC8C4C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237FC8C58()
{
  unint64_t *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237FCFD4C();
  if (v1)
  {
    sub_237FCFC58(*v0);
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    sub_237F9C8D0();
    if (v1)
    {
      sub_237FD0004();
    }
    else
    {
      sub_237F9191C((uint64_t *)&unk_2568B8910);
      sub_237FCFFF8();
    }
    v3 = sub_237FCFE28(v2);
    sub_237F96258(v3, v4, v5);
  }
}

uint64_t sub_237FC8CB8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FC8CC4()
{
  int v0;
  _QWORD *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_237FCFC44();
  if (v2)
  {
    *v1 = (v0 - 1);
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    sub_237F9C8C0();
    if (v2)
    {
      sub_237FCFFEC();
    }
    else
    {
      sub_237F9191C((uint64_t *)&unk_2568B8910);
      sub_237FCFFE0();
    }
    v4 = sub_237FCFC8C(v3);
    sub_237F96264(v4, v5, v6, v7);
  }
}

uint64_t type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B85C0);
}

void sub_237FC8D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_237FC8D60(a1, a2, a3, MEMORY[0x24BEE0158] + 64, (uint64_t)&unk_237FEAB50, &qword_2568B8590, (void (*)(uint64_t))type metadata accessor for CloudAssets_Credential);
}

void sub_237FC8D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, void (*a7)(uint64_t))
{
  unint64_t v9;
  unint64_t v10;

  type metadata accessor for UnknownStorage();
  if (v9 <= 0x3F)
  {
    sub_237FC73B4(319, a6, a7);
    if (v10 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *sub_237FC8E04(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v34)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UnknownStorage();
    v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[6];
    v13 = (uint64_t *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for CloudAssets_Asset.ID(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, v15))
    {
      v16 = sub_237F9191C(&qword_2568B76B0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v18 = v14[1];
      *v13 = *v14;
      v13[1] = v18;
      v34 = v11;
      v19 = v14[3];
      v13[2] = v14[2];
      v13[3] = v19;
      v20 = v14[4];
      v21 = v14[5];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_237F91894(v20, v21);
      v13[4] = v20;
      v13[5] = v21;
      v22 = v14[6];
      v23 = v14[7];
      sub_237F91894(v22, v23);
      v13[6] = v22;
      v13[7] = v23;
      v11 = v34;
      v34((char *)v13 + *(int *)(v15 + 32), (char *)v14 + *(int *)(v15 + 32), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, v15);
    }
    v24 = a3[7];
    v25 = (uint64_t *)((char *)v4 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = type metadata accessor for CloudAssets_Asset.Protector(0);
    if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v26, 1, v27))
    {
      v28 = sub_237F9191C(&qword_2568B76B8);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *v26;
      v30 = v26[1];
      sub_237F91894(*v26, v30);
      *v25 = v29;
      v25[1] = v30;
      v31 = v26[2];
      v32 = v26[3];
      sub_237F91894(v31, v32);
      v25[2] = v31;
      v25[3] = v32;
      v11((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v10);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v25, 0, 1, v27);
    }
  }
  return v4;
}

uint64_t sub_237FC901C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  v4 = a1 + a2[5];
  v5 = type metadata accessor for UnknownStorage();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (!_s11CloudAssets21UploadResponseMessageOwet_0(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_237F918D8(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    sub_237F918D8(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
    v11(v6 + *(int *)(v7 + 32), v5);
  }
  v8 = a1 + a2[7];
  v9 = type metadata accessor for CloudAssets_Asset.Protector(0);
  result = _s11CloudAssets21UploadResponseMessageOwet_0(v8, 1, v9);
  if (!(_DWORD)result)
  {
    sub_237F918D8(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    sub_237F918D8(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 24), v5);
  }
  return result;
}

_QWORD *sub_237FC913C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v32)(char *, char *, uint64_t);

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_237F9191C(&qword_2568B76B0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v13[1];
    *v12 = *v13;
    v12[1] = v16;
    v32 = v10;
    v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    v18 = v13[4];
    v19 = v13[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_237F91894(v18, v19);
    v12[4] = v18;
    v12[5] = v19;
    v20 = v13[6];
    v21 = v13[7];
    sub_237F91894(v20, v21);
    v12[6] = v20;
    v12[7] = v21;
    v10 = v32;
    v32((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  v22 = a3[7];
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (_QWORD *)((char *)a2 + v22);
  v25 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v24, 1, v25))
  {
    v26 = sub_237F9191C(&qword_2568B76B8);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = *v24;
    v28 = v24[1];
    sub_237F91894(*v24, v28);
    *v23 = v27;
    v23[1] = v28;
    v29 = v24[2];
    v30 = v24[3];
    sub_237F91894(v29, v30);
    v23[2] = v29;
    v23[3] = v30;
    v10((char *)v23 + *(int *)(v25 + 24), (char *)v24 + *(int *)(v25 + 24), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v23, 0, 1, v25);
  }
  return a1;
}

_QWORD *sub_237FC9328(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CloudAssets_Asset.ID(0);
  v16 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v15);
  v17 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, v15);
  if (v16)
  {
    if (!v17)
    {
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
      *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
      v52 = v9;
      v53 = v10;
      v18 = v11;
      v19 = *((_QWORD *)v14 + 4);
      v20 = *((_QWORD *)v14 + 5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_237F91894(v19, v20);
      *((_QWORD *)v13 + 4) = v19;
      *((_QWORD *)v13 + 5) = v20;
      v11 = v18;
      v9 = v52;
      v21 = *((_QWORD *)v14 + 6);
      v22 = *((_QWORD *)v14 + 7);
      sub_237F91894(v21, v22);
      *((_QWORD *)v13 + 6) = v21;
      *((_QWORD *)v13 + 7) = v22;
      v10 = v53;
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(&v13[*(int *)(v15 + 32)], &v14[*(int *)(v15 + 32)], v52);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_237F94B38((uint64_t)v13, type metadata accessor for CloudAssets_Asset.ID);
LABEL_6:
    v23 = sub_237F9191C(&qword_2568B76B0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_QWORD *)v13 + 2) = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 3) = *((_QWORD *)v14 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v54 = v10;
  v36 = *((_QWORD *)v14 + 4);
  v37 = *((_QWORD *)v14 + 5);
  sub_237F91894(v36, v37);
  v38 = *((_QWORD *)v13 + 4);
  v39 = *((_QWORD *)v13 + 5);
  *((_QWORD *)v13 + 4) = v36;
  *((_QWORD *)v13 + 5) = v37;
  sub_237F918D8(v38, v39);
  v40 = *((_QWORD *)v14 + 6);
  v41 = *((_QWORD *)v14 + 7);
  sub_237F91894(v40, v41);
  v42 = *((_QWORD *)v13 + 6);
  v43 = *((_QWORD *)v13 + 7);
  *((_QWORD *)v13 + 6) = v40;
  *((_QWORD *)v13 + 7) = v41;
  v10 = v54;
  sub_237F918D8(v42, v43);
  v11(&v13[*(int *)(v15 + 32)], &v14[*(int *)(v15 + 32)], v9);
LABEL_7:
  v24 = a3[7];
  v25 = (_QWORD *)((char *)a1 + v24);
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = type metadata accessor for CloudAssets_Asset.Protector(0);
  v28 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v25, 1, v27);
  v29 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v26, 1, v27);
  if (!v28)
  {
    if (!v29)
    {
      v44 = *v26;
      v45 = v26[1];
      sub_237F91894(*v26, v45);
      v46 = *v25;
      v47 = v25[1];
      *v25 = v44;
      v25[1] = v45;
      sub_237F918D8(v46, v47);
      v48 = v26[2];
      v49 = v26[3];
      sub_237F91894(v48, v49);
      v50 = v25[2];
      v51 = v25[3];
      v25[2] = v48;
      v25[3] = v49;
      sub_237F918D8(v50, v51);
      v11((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v9);
      return a1;
    }
    sub_237F94B38((uint64_t)v25, type metadata accessor for CloudAssets_Asset.Protector);
    goto LABEL_12;
  }
  if (v29)
  {
LABEL_12:
    v34 = sub_237F9191C(&qword_2568B76B8);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    return a1;
  }
  v30 = *v26;
  v31 = v26[1];
  sub_237F91894(*v26, v31);
  *v25 = v30;
  v25[1] = v31;
  v32 = v26[2];
  v33 = v26[3];
  sub_237F91894(v32, v33);
  v25[2] = v32;
  v25[3] = v33;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v25 + *(int *)(v27 + 24), (char *)v26 + *(int *)(v27 + 24), v9);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v25, 0, 1, v27);
  return a1;
}

_QWORD *sub_237FC9678(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for CloudAssets_Asset.ID(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v14))
  {
    v15 = sub_237F9191C(&qword_2568B76B0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v16 = v13[1];
    *v12 = *v13;
    v12[1] = v16;
    v17 = v13[3];
    v12[2] = v13[2];
    v12[3] = v17;
    v10((char *)v12 + *(int *)(v14 + 32), (char *)v13 + *(int *)(v14 + 32), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v12, 0, 1, v14);
  }
  v18 = a3[7];
  v19 = (_OWORD *)((char *)a1 + v18);
  v20 = (_OWORD *)((char *)a2 + v18);
  v21 = type metadata accessor for CloudAssets_Asset.Protector(0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21))
  {
    v22 = sub_237F9191C(&qword_2568B76B8);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = v20[1];
    *v19 = *v20;
    v19[1] = v23;
    v10((char *)v19 + *(int *)(v21 + 24), (char *)v20 + *(int *)(v21 + 24), v9);
    _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v19, 0, 1, v21);
  }
  return a1;
}

_QWORD *sub_237FC97F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  int v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(char *, char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[6];
  v13 = (_QWORD *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for CloudAssets_Asset.ID(0);
  v16 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v13, 1, v15);
  v17 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v14, 1, v15);
  if (v16)
  {
    if (!v17)
    {
      v18 = *((_OWORD *)v14 + 1);
      *(_OWORD *)v13 = *(_OWORD *)v14;
      *((_OWORD *)v13 + 1) = v18;
      v19 = *((_OWORD *)v14 + 3);
      *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
      *((_OWORD *)v13 + 3) = v19;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v13 + *(int *)(v15 + 32), &v14[*(int *)(v15 + 32)], v9);
      _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_237F94B38((uint64_t)v13, type metadata accessor for CloudAssets_Asset.ID);
LABEL_6:
    v20 = sub_237F9191C(&qword_2568B76B0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  v30 = *((_QWORD *)v14 + 1);
  *v13 = *(_QWORD *)v14;
  v13[1] = v30;
  swift_bridgeObjectRelease();
  v31 = *((_QWORD *)v14 + 3);
  v13[2] = *((_QWORD *)v14 + 2);
  v13[3] = v31;
  swift_bridgeObjectRelease();
  v32 = v13[4];
  v33 = v13[5];
  *((_OWORD *)v13 + 2) = *((_OWORD *)v14 + 2);
  sub_237F918D8(v32, v33);
  v34 = v13[6];
  v35 = v13[7];
  *((_OWORD *)v13 + 3) = *((_OWORD *)v14 + 3);
  sub_237F918D8(v34, v35);
  v11((char *)v13 + *(int *)(v15 + 32), &v14[*(int *)(v15 + 32)], v9);
LABEL_7:
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for CloudAssets_Asset.Protector(0);
  v25 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v22, 1, v24);
  v26 = _s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v24);
  if (!v25)
  {
    if (!v26)
    {
      v36 = *v22;
      v37 = v22[1];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      sub_237F918D8(v36, v37);
      v38 = v22[2];
      v39 = v22[3];
      *((_OWORD *)v22 + 1) = *((_OWORD *)v23 + 1);
      sub_237F918D8(v38, v39);
      v11((char *)v22 + *(int *)(v24 + 24), &v23[*(int *)(v24 + 24)], v9);
      return a1;
    }
    sub_237F94B38((uint64_t)v22, type metadata accessor for CloudAssets_Asset.Protector);
    goto LABEL_12;
  }
  if (v26)
  {
LABEL_12:
    v28 = sub_237F9191C(&qword_2568B76B8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    return a1;
  }
  v27 = *((_OWORD *)v23 + 1);
  *(_OWORD *)v22 = *(_OWORD *)v23;
  *((_OWORD *)v22 + 1) = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v22 + *(int *)(v24 + 24), &v23[*(int *)(v24 + 24)], v9);
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v22, 0, 1, v24);
  return a1;
}

uint64_t sub_237FC9A70()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FC9A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_237FCFB8C();
  sub_237F9C8D0();
  if (v5)
  {
    v4 = *(int *)(a3 + 20);
  }
  else
  {
    sub_237F9191C(&qword_2568B76B0);
    sub_237F9C8D0();
    if (v5)
    {
      v4 = *(int *)(a3 + 24);
    }
    else
    {
      sub_237F9191C(&qword_2568B76B8);
      sub_237FD0004();
    }
  }
  v6 = sub_237FCFE28(v4);
  return sub_237F96258(v6, v7, v8);
}

uint64_t sub_237FC9AEC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FC9AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_237FCFB8C();
  sub_237F9C8C0();
  if (v6)
  {
    v5 = *(int *)(a4 + 20);
  }
  else
  {
    sub_237F9191C(&qword_2568B76B0);
    sub_237F9C8C0();
    if (v6)
    {
      v5 = *(int *)(a4 + 24);
    }
    else
    {
      sub_237F9191C(&qword_2568B76B8);
      sub_237FCFFEC();
    }
  }
  v7 = sub_237FCFC8C(v5);
  return sub_237F96264(v7, v8, v9, v10);
}

void sub_237FC9B6C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    sub_237FC73B4(319, &qword_2568B85E0, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.ID);
    if (v1 <= 0x3F)
    {
      sub_237FC73B4(319, &qword_2568B85E8, (void (*)(uint64_t))type metadata accessor for CloudAssets_Asset.Protector);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t *sub_237FC9C3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_237F91894(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_237F91894(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_237FC9CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_237F918D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_237F918D8(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_237FC9D48(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_237F91894(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_237F91894(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_237FC9DD4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_237F91894(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_237F918D8(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_237F91894(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_237F918D8(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_237FC9E70(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_237FC9ECC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_237F918D8(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_237F918D8(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_237FC9F4C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237FC9F58(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 == 12)
  {
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    v4 = sub_237FCFE28(*(int *)(a3 + 24));
    sub_237F96258(v4, v5, v6);
  }
}

uint64_t sub_237FC9FC0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FC9FCC(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 12)
  {
    *a1 = 0;
    a1[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
    sub_237F961B0();
  }
  else
  {
    v7 = sub_237FCFB8C();
    sub_237F96264((uint64_t)a1 + *(int *)(a4 + 24), a2, a2, v7);
  }
}

uint64_t sub_237FCA02C()
{
  return sub_237FCFA44();
}

uint64_t *sub_237FCA03C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[4];
    v10 = a2[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_237F91894(v9, v10);
    a1[4] = v9;
    a1[5] = v10;
    v11 = a2[6];
    v12 = a2[7];
    sub_237F91894(v11, v12);
    a1[6] = v11;
    a1[7] = v12;
    v13 = *(int *)(a3 + 32);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = type metadata accessor for UnknownStorage();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_237FCA110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_237F918D8(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_237FCA170(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_237F91894(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_237F91894(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

_QWORD *sub_237FCA218(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a2[4];
  v7 = a2[5];
  sub_237F91894(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  a1[4] = v6;
  a1[5] = v7;
  sub_237F918D8(v8, v9);
  v10 = a2[6];
  v11 = a2[7];
  sub_237F91894(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  a1[6] = v10;
  a1[7] = v11;
  sub_237F918D8(v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_237FCA2F4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

_QWORD *sub_237FCA358(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_237F918D8(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_237F918D8(v10, v11);
  v12 = *(int *)(a3 + 32);
  v13 = (char *)a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for UnknownStorage();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_237FCA3F4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

void sub_237FCA400()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237FCFD4C();
  if (v1)
  {
    sub_237FCFC58(*(_QWORD *)(v0 + 8));
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    sub_237FCFFF8();
    v3 = sub_237FCFE28(v2);
    sub_237F96258(v3, v4, v5);
  }
}

uint64_t sub_237FCA444()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FCA450()
{
  int v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  sub_237FCFC44();
  if (v2)
  {
    *(_QWORD *)(v1 + 8) = (v0 - 1);
    sub_237F961B0();
  }
  else
  {
    sub_237FCFB8C();
    sub_237FCFFE0();
    v4 = sub_237FCFC8C(v3);
    sub_237F96264(v4, v5, v6, v7);
  }
}

uint64_t sub_237FCA490()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_237FCA510(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_237FCFE5C(a1);
  *(_OWORD *)(v1 + 32) = xmmword_237FE70F0;
  *(_OWORD *)(v1 + 48) = xmmword_237FE70F0;
  sub_237FCFF70();
  sub_237FCFD5C();
  sub_237F928A0();
}

void sub_237FCA540(_OWORD *a1@<X8>)
{
  *a1 = xmmword_237FE70F0;
  a1[1] = xmmword_237FE70F0;
  sub_237FCFF78();
  sub_237FCFD5C();
  sub_237F928A0();
}

uint64_t sub_237FCA570@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  type metadata accessor for CloudAssets_Asset(0);
  sub_237FCFD5C();
  v1 = sub_237FCFF70();
  sub_237FCFEB0(v1);
  sub_237FCFF78();
  v2 = sub_237FCFCAC();
  return sub_237F96264(v2, v3, v4, v5);
}

uint64_t sub_237FCA5C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a1 + 8) = xmmword_237FE70F0;
  *(_OWORD *)(a1 + 24) = xmmword_237FE70F0;
  type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
  sub_237FCFD5C();
  type metadata accessor for CloudAssets_Credential(0);
  v1 = sub_237FCFCAC();
  return sub_237FCFCE8(v1, v2, v3, v4);
}

void sub_237FCA620(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  type metadata accessor for CloudAssets_Signal.Event(0);
  sub_237FCFD5C();
  sub_237F928A0();
}

void sub_237FCA658(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  type metadata accessor for CloudAssets_Signal(0);
  sub_237FCFD5C();
  sub_237F928A0();
}

uint64_t sub_237FCA68C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_237FCFE5C(a1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_QWORD *)(v1 + 40) = v2;
  sub_237FCFF80();
  sub_237FCFD5C();
  type metadata accessor for Google_Protobuf_Timestamp();
  v3 = sub_237FCFCAC();
  return sub_237FCFCE8(v3, v4, v5, v6);
}

BOOL sub_237FCA6E0(_BOOL8 result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

void sub_237FCA6F4(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void sub_237FCA704(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  sub_237FCA6CC();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

BOOL sub_237FCA734()
{
  uint64_t v0;

  return sub_237FCA6E0(*(_QWORD *)v0, *(_BYTE *)(v0 + 8));
}

void sub_237FCA740(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  sub_237FCA6CC();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void sub_237FCA774(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = sub_237FCA6E0(*(_QWORD *)v1, *(_BYTE *)(v1 + 8));
  sub_237F928A0();
}

Swift::Int sub_237FCA79C()
{
  return sub_237FCA7A8();
}

Swift::Int sub_237FCA7A8()
{
  Hasher.init(_seed:)();
  sub_237FCFAF4();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_237FCA804()
{
  sub_237FCF6E0();
  return Enum.hash(into:)();
}

Swift::Int sub_237FCA83C()
{
  return sub_237FCA848();
}

Swift::Int sub_237FCA848()
{
  Hasher.init(_seed:)();
  sub_237FCFAF4();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

BOOL sub_237FCA8A0(uint64_t a1, uint64_t a2)
{
  return sub_237FA2264(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

void sub_237FCA8BC()
{
  qword_2568C4B40 = (uint64_t)&unk_2509D2C78;
}

uint64_t *sub_237FCA8D0()
{
  if (qword_2568B7340 != -1)
    swift_once();
  return &qword_2568C4B40;
}

uint64_t sub_237FCA910@<X0>(_QWORD *a1@<X8>)
{
  sub_237FCA8D0();
  *a1 = qword_2568C4B40;
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FCA93C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_237FCFE5C(a1);
  type metadata accessor for CloudAssets_AssetStreamHandle(0);
  sub_237FCFD5C();
  v1 = type metadata accessor for CloudAssets_Asset(0);
  sub_237FCFEB0(v1);
  type metadata accessor for CloudAssets_Credential(0);
  v2 = sub_237FCFCAC();
  return sub_237F96264(v2, v3, v4, v5);
}

uint64_t sub_237FCA994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  _QWORD *v12;
  char *v13;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4B48);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4B48);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA50;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "id";
  *(_QWORD *)(v7 + 8) = 2;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "protector";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  v12 = (_QWORD *)((char *)v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "size";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCAB18()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = sub_237FCFB70();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 3:
          sub_237FCFFAC();
          break;
        case 2:
          sub_237FCFDF0();
          sub_237FCE544();
          break;
        case 1:
          sub_237FCFC30();
          sub_237FCABB8();
          break;
      }
      v1 = sub_237FCFBA8();
    }
  }
  sub_237FCFBD8();
}

uint64_t sub_237FCABB8()
{
  type metadata accessor for CloudAssets_Asset(0);
  type metadata accessor for CloudAssets_Asset.ID(0);
  sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

void sub_237FCAC4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = sub_237FCFD6C();
  sub_237FCACC8(v2);
  if (!v0)
  {
    v3 = sub_237FCFED8();
    sub_237FCAE38(v3);
    if (*v1)
      dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)();
    type metadata accessor for CloudAssets_Asset(0);
    sub_237FCFE44();
  }
  sub_237FCFDB4();
}

void sub_237FCACC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = sub_237F9191C(&qword_2568B76B0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CloudAssets_Asset.ID(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CloudAssets_Asset(0);
  sub_237FBBBC4(a1 + *(int *)(v8 + 24), (uint64_t)v4, &qword_2568B76B0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_237F96070((uint64_t)v4, &qword_2568B76B0);
  }
  else
  {
    sub_237FBBBFC((uint64_t)v4, (uint64_t)v7, type metadata accessor for CloudAssets_Asset.ID);
    sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    sub_237F94B38((uint64_t)v7, type metadata accessor for CloudAssets_Asset.ID);
  }
}

void sub_237FCAE38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = sub_237F9191C(&qword_2568B76B8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CloudAssets_Asset.Protector(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CloudAssets_Asset(0);
  sub_237FBBBC4(a1 + *(int *)(v8 + 28), (uint64_t)v4, &qword_2568B76B8);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_237F96070((uint64_t)v4, &qword_2568B76B8);
  }
  else
  {
    sub_237FBBBFC((uint64_t)v4, (uint64_t)v7, type metadata accessor for CloudAssets_Asset.Protector);
    sub_237F91B50(&qword_2568B75F0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB640);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    sub_237F94B38((uint64_t)v7, type metadata accessor for CloudAssets_Asset.Protector);
  }
}

void sub_237FCAFA8()
{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  char *v58;
  void (*v59)(uint64_t, uint64_t);
  _QWORD *v60;
  char v61;
  _QWORD *v62;
  char v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;

  sub_237FA3964();
  v77 = v2;
  v4 = (char *)v3;
  v5 = sub_237FCFB8C();
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F964A0();
  v65 = v7;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v8);
  v64 = (char *)&v64 - v9;
  v10 = sub_237F96310();
  v73 = type metadata accessor for CloudAssets_Asset.Protector(v10);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v11);
  sub_237F9283C();
  v68 = (_QWORD *)v12;
  v70 = sub_237F9191C(&qword_2568B8740);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v13);
  sub_237F9283C();
  v74 = v14;
  sub_237F9191C(&qword_2568B76B8);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v15);
  sub_237F964A0();
  v69 = (_QWORD *)v16;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v17);
  v71 = (uint64_t)&v64 - v18;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v19);
  v72 = (uint64_t)&v64 - v20;
  v21 = sub_237F96310();
  v22 = type metadata accessor for CloudAssets_Asset.ID(v21);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v23);
  sub_237FCFF58();
  v24 = sub_237F9191C(&qword_2568B8748);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v25);
  sub_237F92870();
  sub_237F9191C(&qword_2568B76B0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v26);
  sub_237FCFE34();
  v29 = (_QWORD *)(v27 - v28);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v33 = (char *)&v64 - v32;
  MEMORY[0x24BDAC7A8](v31);
  v35 = (char *)&v64 - v34;
  v36 = type metadata accessor for CloudAssets_Asset(0);
  v37 = *(int *)(v36 + 24);
  v75 = v4;
  sub_237FCFD64((uint64_t)&v4[v37], (uint64_t)v35);
  v76 = v36;
  sub_237FCFD64((uint64_t)&v77[*(int *)(v36 + 24)], (uint64_t)v33);
  v38 = v0 + *(int *)(v24 + 48);
  sub_237FCFD64((uint64_t)v35, v0);
  sub_237FCFD64((uint64_t)v33, v38);
  sub_237FB7E40(v0, 1, v22);
  if (v40)
  {
    sub_237FCFBD0((uint64_t)v33);
    sub_237FCFBD0((uint64_t)v35);
    v39 = sub_237FB7E40(v38, 1, v22);
    if (v40)
    {
      sub_237FCFEF8(v39, &qword_2568B76B0);
      goto LABEL_11;
    }
LABEL_9:
    v41 = &qword_2568B8748;
    v42 = v0;
    goto LABEL_27;
  }
  sub_237FBBBC4(v0, (uint64_t)v29, &qword_2568B76B0);
  sub_237FB7E40(v38, 1, v22);
  if (v40)
  {
    sub_237FCFBD0((uint64_t)v33);
    sub_237FCFBD0((uint64_t)v35);
    sub_237F94B38((uint64_t)v29, type metadata accessor for CloudAssets_Asset.ID);
    goto LABEL_9;
  }
  sub_237FBBBFC(v38, (uint64_t)v1, type metadata accessor for CloudAssets_Asset.ID);
  sub_237FCBAF4(v29, v1);
  v44 = v43;
  sub_237FCFDE8((uint64_t)v1);
  sub_237FCFFB8((uint64_t)v33);
  sub_237FCFFB8((uint64_t)v35);
  sub_237FCFDE8((uint64_t)v29);
  sub_237FCFFB8(v0);
  if ((v44 & 1) == 0)
    goto LABEL_28;
LABEL_11:
  v46 = v75;
  v45 = v76;
  v47 = v72;
  sub_237FCFD04((uint64_t)&v75[*(int *)(v76 + 28)], v72);
  v48 = v77;
  v49 = v71;
  sub_237FCFD04((uint64_t)&v77[*(int *)(v45 + 28)], v71);
  v50 = v74;
  v51 = v74 + *(int *)(v70 + 48);
  sub_237FCFD04(v47, v74);
  sub_237FCFD04(v49, v51);
  v52 = v73;
  sub_237FB7E40(v50, 1, v73);
  if (!v40)
  {
    v60 = v69;
    sub_237FBBBC4(v50, (uint64_t)v69, &qword_2568B76B8);
    sub_237FB7E40(v51, 1, v52);
    if (!v61)
    {
      v62 = v68;
      sub_237FBBBFC(v51, (uint64_t)v68, type metadata accessor for CloudAssets_Asset.Protector);
      if ((MEMORY[0x23B829224](*v60, v60[1], *v62, v62[1]) & 1) != 0
        && (MEMORY[0x23B829224](v60[2], v60[3], v62[2], v62[3]) & 1) != 0)
      {
        sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v63 = dispatch thunk of static Equatable.== infix(_:_:)();
        sub_237F963E8((uint64_t)v62);
        sub_237FCFC6C(v49);
        sub_237FCFC6C(v47);
        sub_237F963E8((uint64_t)v60);
        sub_237FCFC6C(v50);
        if ((v63 & 1) == 0)
          goto LABEL_28;
        goto LABEL_16;
      }
      sub_237FCFDE8((uint64_t)v62);
      sub_237FCFC74(v49);
      sub_237FCFC74(v47);
      sub_237FCFDE8((uint64_t)v60);
      v42 = v50;
      v41 = &qword_2568B76B8;
LABEL_27:
      sub_237F96070(v42, v41);
      goto LABEL_28;
    }
    sub_237FCFBD0(v49);
    sub_237FCFBD0(v47);
    sub_237F94B38((uint64_t)v60, type metadata accessor for CloudAssets_Asset.Protector);
LABEL_21:
    v41 = &qword_2568B8740;
    v42 = v50;
    goto LABEL_27;
  }
  sub_237FCFC74(v49);
  sub_237FCFC74(v47);
  sub_237FB7E40(v51, 1, v52);
  if (!v40)
    goto LABEL_21;
  sub_237F96070(v50, &qword_2568B76B8);
LABEL_16:
  if (*(_QWORD *)v46 == *(_QWORD *)v48)
  {
    v53 = v76;
    v55 = v66;
    v54 = v67;
    v56 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    v57 = v64;
    v56(v64, &v46[*(int *)(v76 + 20)], v67);
    v58 = v65;
    v56(v65, &v48[*(int *)(v53 + 20)], v54);
    sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    dispatch thunk of static Equatable.== infix(_:_:)();
    v59 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
    v59((uint64_t)v58, v54);
    v59((uint64_t)v57, v54);
  }
LABEL_28:
  sub_237FA3848();
}

unint64_t sub_237FCB580()
{
  return 0xD000000000000011;
}

uint64_t (*sub_237FCB5A8())()
{
  return nullsub_1;
}

void sub_237FCB5BC()
{
  sub_237FCAB18();
}

void sub_237FCB5D0()
{
  sub_237FCAC4C();
}

uint64_t sub_237FCB5E8()
{
  sub_237F91B50(&qword_2568B8700, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB378);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCB63C(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7348, (uint64_t)qword_2568C4B48);
}

uint64_t sub_237FCB658()
{
  sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCB698()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_Asset, &qword_2568B86A0, (uint64_t)&unk_237FEB2E8);
}

uint64_t sub_237FCB6C4()
{
  sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8);
  return Message.hash(into:)();
}

void sub_237FCB71C(int a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = 4475182;
  v1._object = (void *)0xE300000000000000;
  sub_237FCBE30(a1, v1, qword_2568C4B60, &qword_2568C4B60[1]);
}

_QWORD *sub_237FCB738()
{
  if (qword_2568B7350 != -1)
    swift_once();
  return qword_2568C4B60;
}

uint64_t sub_237FCB778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4B70);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4B70);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "partition";
  *(_QWORD *)(v7 + 8) = 9;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "owner_id";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "signature";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "reference_signature";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_237FCB944(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for _NameMap();
  return sub_237FABF5C(v3, a2);
}

void sub_237FCB984()
{
  uint64_t v0;
  char v1;
  char v3;
  char v4;

  sub_237FCFB70();
  if (!v0)
  {
    while ((v1 & 1) == 0)
    {
      sub_237FD0024();
      if (!(!v4 & v3))
        __asm { BR              X9 }
      sub_237FCFBA8();
    }
  }
  sub_237FCFBD8();
}

void sub_237FCBA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_237FD0010();
  sub_237FCFB94();
  if (!v2 || (v0 = v1, sub_237FCFDA0(), !v1))
  {
    sub_237FCFB94();
    if (!v3 || (v0 = v1, sub_237FCFDA0(), !v1))
    {
      if ((sub_237FCFDD4() & 1) != 0 || (sub_237FCFC9C(), !v0))
      {
        if ((sub_237FCFDD4() & 1) != 0 || (sub_237FCFC9C(), !v0))
        {
          type metadata accessor for CloudAssets_Asset.ID(0);
          UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  sub_237FCFE9C();
}

void sub_237FCBAF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);

  sub_237FCFB8C();
  sub_237FCFCD4();
  MEMORY[0x24BDAC7A8](v8);
  sub_237FCFBB4();
  MEMORY[0x24BDAC7A8](v9);
  v10 = sub_237FCFF40();
  v14 = v10 == v13 && v11 == v12;
  if (v14 || (sub_237F96484() & 1) != 0)
  {
    v15 = a1[2] == a2[2] && a1[3] == a2[3];
    if ((v15 || (sub_237F96484() & 1) != 0)
      && (MEMORY[0x23B829224](a1[4], a1[5], a2[4], a2[5]) & 1) != 0
      && (MEMORY[0x23B829224](a1[6], a1[7], a2[6], a2[7]) & 1) != 0)
    {
      v16 = sub_237FCFF70();
      sub_237FCFBEC(*(int *)(v16 + 32));
      sub_237FCFC7C(*(int *)(v16 + 32));
      sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      sub_237FCFC00();
      v17 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v17(v2, v3);
      v17(v4, v3);
    }
  }
  sub_237F9614C();
}

uint64_t sub_237FCBC08(uint64_t a1, uint64_t a2)
{
  return sub_237FCE130(a1, a2, (void (*)(void))sub_237FCB738, qword_2568C4B60);
}

uint64_t sub_237FCBC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_237FCBC60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_237FCBCA0())()
{
  return nullsub_1;
}

void sub_237FCBCB4()
{
  sub_237FCB984();
}

void sub_237FCBCC8()
{
  sub_237FCBA14();
}

uint64_t sub_237FCBCDC()
{
  sub_237F91B50(&qword_2568B86F0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB288);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCBD2C(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7358, (uint64_t)qword_2568C4B70);
}

uint64_t sub_237FCBD48()
{
  sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCBD88()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_Asset.ID, &qword_2568B8690, (uint64_t)&unk_237FEB1F8);
}

uint64_t sub_237FCBDB4()
{
  sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
  return Message.hash(into:)();
}

void sub_237FCBE08(int a1)
{
  Swift::String v1;

  v1._countAndFlagsBits = 0x746365746F72502ELL;
  v1._object = (void *)0xEA0000000000726FLL;
  sub_237FCBE30(a1, v1, qword_2568C4B88, &qword_2568C4B88[1]);
}

void sub_237FCBE30(int a1, Swift::String a2, _QWORD *a3, _QWORD *a4)
{
  String.append(_:)(a2);
  *a3 = 0xD000000000000011;
  *a4 = 0x8000000237FE3C50;
}

_QWORD *sub_237FCBE98()
{
  if (qword_2568B7360 != -1)
    swift_once();
  return qword_2568C4B88;
}

uint64_t sub_237FCBED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4B98);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4B98);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA70;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "security_key";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "privacy_key";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCC028()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = sub_237FCFB70();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 2 || v1 == 1)
        sub_237FCFE84();
      v1 = sub_237FCFBA8();
    }
  }
  sub_237FCFDC4();
}

void sub_237FCC084()
{
  __asm { BR              X10 }
}

void sub_237FCC0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if ((a2 & 0xFF000000000000) != 0 && (sub_237FCFEC4(), v2))
    sub_237FCFDB4();
  else
    ((void (*)(_QWORD))((char *)&loc_237FCC120 + 4 * byte_237FEAA88[*(_QWORD *)(v3 + 24) >> 62]))(*(_QWORD *)(v3 + 16));
}

void sub_237FCC17C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_237FCFB8C();
  sub_237FCFCD4();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FCFBB4();
  MEMORY[0x24BDAC7A8](v6);
  v7 = sub_237FCFF40();
  if ((MEMORY[0x23B829224](v7) & 1) != 0
    && (MEMORY[0x23B829224](*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24)) & 1) != 0)
  {
    v8 = sub_237FCFF78();
    sub_237FCFBEC(*(int *)(v8 + 24));
    sub_237FCFC7C(*(int *)(v8 + 24));
    sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    sub_237FCFC00();
    sub_237FCFCF0();
    sub_237FCFDE0(v2);
  }
  sub_237F9614C();
}

uint64_t sub_237FCC23C(uint64_t a1, uint64_t a2)
{
  return sub_237FCE130(a1, a2, (void (*)(void))sub_237FCBE98, qword_2568C4B88);
}

uint64_t (*sub_237FCC25C())()
{
  return nullsub_1;
}

void sub_237FCC270()
{
  sub_237FCC028();
}

void sub_237FCC284()
{
  sub_237FCC084();
}

uint64_t sub_237FCC298()
{
  sub_237F91B50(&qword_2568B86F8, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB198);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCC2E8(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7368, (uint64_t)qword_2568C4B98);
}

uint64_t sub_237FCC304()
{
  sub_237F91B50(&qword_2568B75F0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB640);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCC344()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_Asset.Protector, &qword_2568B8680, (uint64_t)&unk_237FEB108);
}

uint64_t sub_237FCC370()
{
  sub_237F91B50(&qword_2568B75F0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB640);
  return Message.hash(into:)();
}

uint64_t sub_237FCC3C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4BB0);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4BB0);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "tenant_name";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C328];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "requestor_id";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "access_token";
  *((_QWORD *)v13 + 1) = 12;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "expiration_date";
  *((_QWORD *)v15 + 1) = 15;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCC57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  sub_237F96134();
  sub_237FCFB70();
  if (!v12)
  {
    while ((v13 & 1) == 0)
    {
      sub_237FD0024();
      if (!(!v24 & v23))
      {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_237FCC5DC + 4 * byte_237FEAA8C[v22]))(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
        return;
      }
      sub_237FCFBA8();
    }
  }
  sub_237F960D8();
}

void sub_237FCC62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = v3;
  sub_237FCFB94();
  if (!v9 || (sub_237FCFDAC(), !v4))
  {
    sub_237FCFB94();
    if (!v10 || (sub_237FCFDAC(), !v4))
    {
      sub_237FCFB94();
      if (!v11 || (sub_237FCFDAC(), !v4))
      {
        sub_237FCC718(v5, a1, a2, a3);
        if (!v4)
        {
          type metadata accessor for CloudAssets_Credential(0);
          UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  sub_237FCFDC4();
}

void sub_237FCC718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = a4;
  v5 = sub_237F9191C(&qword_2568B7718);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Google_Protobuf_Timestamp();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CloudAssets_Credential(0);
  sub_237FBBBC4(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_2568B7718);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v7, 1, v8) == 1)
  {
    sub_237F96070((uint64_t)v7, &qword_2568B7718);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    sub_237F91B50(&qword_2568B8728, (uint64_t (*)(uint64_t))MEMORY[0x24BE5B990], MEMORY[0x24BE5B980]);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

void sub_237FCC88C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(_BYTE *, char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _BYTE v39[4];
  int v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  sub_237FA3964();
  v3 = v2;
  v5 = v4;
  v6 = sub_237FCFB8C();
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F964A0();
  v44 = v8;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v9);
  v43 = &v39[-v10];
  sub_237F96310();
  v11 = type metadata accessor for Google_Protobuf_Timestamp();
  v47 = *(_QWORD *)(v11 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v12);
  sub_237FCFF58();
  v13 = sub_237F9191C(&qword_2568B8750);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v14);
  sub_237F960FC();
  sub_237F9191C(&qword_2568B7718);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v15);
  sub_237FCFE34();
  v18 = v16 - v17;
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = &v39[-v21];
  MEMORY[0x24BDAC7A8](v20);
  v24 = &v39[-v23];
  v25 = *v5 == *v3 && v5[1] == v3[1];
  if (!v25 && (sub_237F96484() & 1) == 0)
    goto LABEL_27;
  v26 = v5[2] == v3[2] && v5[3] == v3[3];
  if (!v26 && (sub_237F96484() & 1) == 0)
    goto LABEL_27;
  v27 = v5[4] == v3[4] && v5[5] == v3[5];
  if (!v27 && (sub_237F96484() & 1) == 0)
    goto LABEL_27;
  v41 = v1;
  v28 = sub_237FCFF80();
  sub_237FCFD04((uint64_t)v5 + *(int *)(v28 + 32), (uint64_t)v24);
  v42 = v28;
  sub_237FCFD04((uint64_t)v3 + *(int *)(v28 + 32), (uint64_t)v22);
  v29 = v0 + *(int *)(v13 + 48);
  sub_237FCFD04((uint64_t)v24, v0);
  sub_237FCFD04((uint64_t)v22, v29);
  sub_237FB7E40(v0, 1, v11);
  if (v25)
  {
    sub_237FCFC6C((uint64_t)v22);
    sub_237FCFC6C((uint64_t)v24);
    sub_237FB7E40(v29, 1, v11);
    if (v25)
    {
      sub_237F96070(v0, &qword_2568B7718);
LABEL_26:
      v32 = v42;
      v33 = (char *)v5 + *(int *)(v42 + 28);
      v34 = v46;
      v35 = *(void (**)(_BYTE *, char *, uint64_t))(v45 + 16);
      v36 = (uint64_t)v43;
      v35(v43, v33, v46);
      v37 = (char *)v3 + *(int *)(v32 + 28);
      v38 = v44;
      v35((_BYTE *)v44, v37, v34);
      sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      dispatch thunk of static Equatable.== infix(_:_:)();
      sub_237FCFEF0(v38);
      sub_237FCFEF0(v36);
      goto LABEL_27;
    }
    goto LABEL_24;
  }
  sub_237FBBBC4(v0, v18, &qword_2568B7718);
  sub_237FB7E40(v29, 1, v11);
  if (v30)
  {
    sub_237FCFBD0((uint64_t)v22);
    sub_237FCFBD0((uint64_t)v24);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v18, v11);
LABEL_24:
    sub_237F96070(v0, &qword_2568B8750);
    goto LABEL_27;
  }
  v31 = v41;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 32))(v41, v29, v11);
  sub_237F91B50(&qword_2568B8758, (uint64_t (*)(uint64_t))MEMORY[0x24BE5B990], MEMORY[0x24BE5B9A0]);
  v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  sub_237FCFEF0(v31);
  sub_237FCFC6C((uint64_t)v22);
  sub_237FCFC6C((uint64_t)v24);
  sub_237FCFEF0(v18);
  sub_237FCFC6C(v0);
  if ((v40 & 1) != 0)
    goto LABEL_26;
LABEL_27:
  sub_237FA3848();
}

unint64_t sub_237FCCC30()
{
  return 0xD000000000000016;
}

uint64_t (*sub_237FCCC54())()
{
  return nullsub_1;
}

#error "237FCCC70: call analysis failed (funcsize=5)"

void sub_237FCCC7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_237FCC62C(a1, a2, a3);
}

uint64_t sub_237FCCC90()
{
  sub_237F91B50(&qword_2568B8720, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB0A8);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCCCE0(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7370, (uint64_t)qword_2568C4BB0);
}

uint64_t sub_237FCCCFC()
{
  sub_237F91B50(&qword_2568B8668, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB3E8);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCCD3C()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_Credential, &qword_2568B8670, (uint64_t)&unk_237FEB018);
}

uint64_t sub_237FCCD68()
{
  sub_237F91B50(&qword_2568B8668, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB3E8);
  return Message.hash(into:)();
}

uint64_t sub_237FCCDBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4BC8);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4BC8);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "assets";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "storage_reference";
  *(_QWORD *)(v11 + 8) = 17;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "credential";
  *((_QWORD *)v13 + 1) = 10;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "storage_reference_signature";
  *((_QWORD *)v15 + 1) = 27;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCCF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  sub_237F96134();
  sub_237FCFB70();
  if (!v12)
  {
    while ((v13 & 1) == 0)
    {
      sub_237FD0024();
      if (!(!v24 & v23))
      {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_237FCCFE4 + 4 * byte_237FEAA90[v22]))(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
        return;
      }
      sub_237FCFBA8();
    }
  }
  sub_237F960D8();
}

void sub_237FCD054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_237FD0010();
  if (!*(_QWORD *)(*(_QWORD *)v0 + 16)
    || (type metadata accessor for CloudAssets_Asset(0),
        sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8),
        sub_237FCFF18(),
        v1 = v2,
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v2))
  {
    if ((sub_237FCFDD4() & 1) != 0 || (sub_237FCFC9C(), (v2 = v1) == 0))
    {
      sub_237FCE7D8();
      if (!v2)
      {
        if ((sub_237FCFDD4() & 1) == 0)
          sub_237FCFC9C();
        type metadata accessor for CloudAssets_SimultaneousDownloadableAssets(0);
        UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  sub_237FCFBD8();
}

#error "237FCD284: call analysis failed (funcsize=189)"

unint64_t sub_237FCD494()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_237FCD4B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FCFB8C();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t sub_237FCD4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FCFB8C();
  v0 = sub_237FCFD14();
  return sub_237F92858(v0, v1, v2, v3);
}

#error "237FCD508: call analysis failed (funcsize=5)"

void sub_237FCD514()
{
  sub_237FCD054();
}

uint64_t sub_237FCD528()
{
  sub_237F91B50(&qword_2568B8708, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEAFB8);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCD578(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7378, (uint64_t)qword_2568C4BC8);
}

uint64_t sub_237FCD594()
{
  sub_237F91B50(&qword_2568B76D0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEB550);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCD5D4()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, &qword_2568B8658, (uint64_t)&unk_237FEAF28);
}

uint64_t sub_237FCD600()
{
  sub_237F91B50(&qword_2568B76D0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEB550);
  return Message.hash(into:)();
}

uint64_t sub_237FCD654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4BE0);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4BE0);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_237FE7750;
  v5 = v4 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v4 + v3) = 1;
  *(_QWORD *)v5 = "events";
  *(_QWORD *)(v5 + 8) = 6;
  *(_BYTE *)(v5 + 16) = 2;
  v6 = *MEMORY[0x24BE5C318];
  v7 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v5, v6, v7);
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCD758()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = sub_237FCFB70();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        sub_237FCFDF0();
        sub_237FCD7B8();
      }
      v1 = sub_237FCFBA8();
    }
  }
  sub_237FCFE9C();
}

void sub_237FCD7B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_237F96134();
  sub_237FCFC14(v0, v1, v2, v3, v4);
  sub_237FCFCC0();
  dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
  sub_237F960D8();
}

void sub_237FCD808()
{
  uint64_t v0;
  uint64_t v1;

  sub_237FCFF98();
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16)
    || (type metadata accessor for CloudAssets_Signal.Event(0),
        sub_237F91B50(&qword_2568B8628, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEAD70),
        sub_237FCFF18(),
        dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(),
        !v0))
  {
    type metadata accessor for CloudAssets_Signal(0);
    sub_237FCFD90();
  }
  sub_237FCFBD8();
}

void sub_237FCD8A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  sub_237FCFB8C();
  sub_237FCFCD4();
  MEMORY[0x24BDAC7A8](v1);
  sub_237FCFBB4();
  MEMORY[0x24BDAC7A8](v2);
  sub_237FCFF30();
  sub_237FA1550();
  if ((v3 & 1) != 0)
  {
    v4 = type metadata accessor for CloudAssets_Signal(0);
    sub_237FCFBEC(*(int *)(v4 + 20));
    sub_237FCFC7C(*(int *)(v4 + 20));
    sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    sub_237FCFC00();
    sub_237FCFCF0();
    sub_237FCFDE0(v0);
  }
  sub_237F9614C();
}

unint64_t sub_237FCD95C()
{
  return 0xD000000000000012;
}

uint64_t sub_237FCD978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FCFB8C();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t sub_237FCD9A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FCFB8C();
  v0 = sub_237FCFD14();
  return sub_237F92858(v0, v1, v2, v3);
}

void sub_237FCD9C8()
{
  sub_237FCD758();
}

void sub_237FCD9DC()
{
  sub_237FCD808();
}

uint64_t sub_237FCD9F0()
{
  sub_237F91B50(&qword_2568B8710, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEAEC8);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCDA40(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7380, (uint64_t)qword_2568C4BE0);
}

uint64_t sub_237FCDA5C()
{
  sub_237F91B50((unint64_t *)&qword_2568B7C80, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEB4D8);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCDA9C()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_Signal, &qword_2568B8648, (uint64_t)&unk_237FEAE38);
}

uint64_t sub_237FCDAC8()
{
  sub_237F91B50((unint64_t *)&qword_2568B7C80, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEB4D8);
  return Message.hash(into:)();
}

uint64_t sub_237FCDB1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4BF8);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4BF8);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA70;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "STORAGE_CONTAINER_UPLOAD_START";
  *(_QWORD *)(v7 + 8) = 30;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "ALL_UPLOADS_FINISH";
  *((_QWORD *)v11 + 1) = 18;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t sub_237FCDC6C(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7388, (uint64_t)qword_2568C4BF8);
}

void sub_237FCDC88()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x746E6576452ELL;
  v0._object = (void *)0xE600000000000000;
  String.append(_:)(v0);
  qword_2568C4C10 = 0xD000000000000012;
  *(_QWORD *)algn_2568C4C18 = 0x8000000237FE3CA0;
}

uint64_t *sub_237FCDCEC()
{
  if (qword_2568B7390 != -1)
    swift_once();
  return &qword_2568C4C10;
}

uint64_t sub_237FCDD2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4C20);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4C20);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA70;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "type";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "container_index";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCDE84()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = sub_237FCFB70();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 2)
      {
        sub_237FCFFAC();
      }
      else if (v1 == 1)
      {
        sub_237FCFC30();
        sub_237FCDEE8();
      }
      v1 = sub_237FCFBA8();
    }
  }
  sub_237FCFDC4();
}

uint64_t sub_237FCDEE8()
{
  sub_237FCF6E0();
  return dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
}

uint64_t sub_237FCDF4C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t result;

  sub_237FCFF98();
  if (!*v1
    || (sub_237FCF6E0(), result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(), !v0))
  {
    if (!*(_QWORD *)(v2 + 16)
      || (result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v0))
    {
      type metadata accessor for CloudAssets_Signal.Event(0);
      return sub_237FCFD90();
    }
  }
  return result;
}

void sub_237FCE014(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_237FCFB8C();
  sub_237FCFCD4();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FCFBB4();
  MEMORY[0x24BDAC7A8](v6);
  sub_237FCFF30();
  v7 = *a1;
  v8 = *a2;
  if (*((_BYTE *)a1 + 8))
    v7 = *a1 != 0;
  if (*((_BYTE *)a2 + 8) == 1)
  {
    if (v8)
    {
      if (v7 != 1)
        goto LABEL_12;
    }
    else if (v7)
    {
      goto LABEL_12;
    }
  }
  else if (v7 != v8)
  {
    goto LABEL_12;
  }
  if (a1[2] == a2[2])
  {
    v9 = type metadata accessor for CloudAssets_Signal.Event(0);
    sub_237FCFBEC(*(int *)(v9 + 24));
    sub_237FCFC7C(*(int *)(v9 + 24));
    sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    sub_237FCFC00();
    sub_237FCFCF0();
    sub_237FCFDE0(v2);
  }
LABEL_12:
  sub_237F9614C();
}

uint64_t sub_237FCE118(uint64_t a1, uint64_t a2)
{
  return sub_237FCE130(a1, a2, (void (*)(void))sub_237FCDCEC, &qword_2568C4C10);
}

uint64_t sub_237FCE130(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t *a4)
{
  uint64_t v5;

  a3();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

void sub_237FCE16C()
{
  sub_237FCDE84();
}

uint64_t sub_237FCE180()
{
  return sub_237FCDF4C();
}

uint64_t sub_237FCE194()
{
  sub_237F91B50(&qword_2568B8768, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEAD38);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCE1E4(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B7398, (uint64_t)qword_2568C4C20);
}

uint64_t sub_237FCE200()
{
  sub_237F91B50(&qword_2568B8628, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEAD70);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCE240()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_Signal.Event, &qword_2568B8630, (uint64_t)&unk_237FEACA8);
}

uint64_t sub_237FCE26C()
{
  sub_237F91B50(&qword_2568B8628, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEAD70);
  return Message.hash(into:)();
}

uint64_t sub_237FCE2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = type metadata accessor for _NameMap();
  sub_237FAC0E4(v0, qword_2568C4C38);
  sub_237FABF5C(v0, (uint64_t)qword_2568C4C38);
  sub_237F9191C(&qword_2568B8730);
  v1 = sub_237F9191C(&qword_2568B8738);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_237FEAA60;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "asset";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = type metadata accessor for _NameMap.NameDescription();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "credential";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "type";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "applicationID";
  *((_QWORD *)v15 + 1) = 13;
  v15[16] = 2;
  v10();
  return _NameMap.init(dictionaryLiteral:)();
}

void sub_237FCE478(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;

  sub_237F96134();
  sub_237FCFB70();
  if (!v12)
  {
    while ((v13 & 1) == 0)
    {
      sub_237FD0024();
      if (!(!v24 & v23))
      {
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_237FCE4DC + 4 * byte_237FEAA94[v22]))(v14, v15, v16, v17, v18, v19, v20, v21, a9, a10, a11, a12);
        return;
      }
      sub_237FCFBA8();
    }
  }
  sub_237F960D8();
}

void sub_237FCE544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_237F96134();
  sub_237FCFC14(v0, v1, v2, v3, v4);
  sub_237FCFFD4();
  sub_237FCFCC0();
  sub_237FCFD2C();
  sub_237F960D8();
}

void sub_237FCE580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  sub_237F96134();
  sub_237FCFC14(v0, v1, v2, v3, v4);
  sub_237FCFFD4();
  sub_237FCFCC0();
  sub_237FCFD2C();
  sub_237F960D8();
}

void sub_237FCE5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = sub_237FCFD6C();
  sub_237FCE668(v1);
  if (!v0)
  {
    sub_237FCFED8();
    sub_237FCE7D8();
    sub_237FCFB94();
    if (v2)
      sub_237FCFDA0();
    sub_237FCFB94();
    if (v3)
      sub_237FCFDA0();
    type metadata accessor for CloudAssets_AssetStreamHandle(0);
    sub_237FCFE44();
  }
  sub_237FCFDB4();
}

void sub_237FCE668(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v9[2];

  v2 = sub_237F9191C(&qword_2568B7720);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CloudAssets_Asset(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  sub_237FBBBC4(a1 + *(int *)(v8 + 28), (uint64_t)v4, &qword_2568B7720);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v4, 1, v5) == 1)
  {
    sub_237F96070((uint64_t)v4, &qword_2568B7720);
  }
  else
  {
    sub_237FBBBFC((uint64_t)v4, (uint64_t)v7, type metadata accessor for CloudAssets_Asset);
    sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    sub_237F94B38((uint64_t)v7, type metadata accessor for CloudAssets_Asset);
  }
}

void sub_237FCE7D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(_QWORD);
  uint64_t (*v3)(_QWORD);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_237F96134();
  v3 = v2;
  v5 = v4;
  sub_237F9191C((uint64_t *)&unk_2568B8910);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F96188();
  v7 = type metadata accessor for CloudAssets_Credential(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F960FC();
  v9 = v3(0);
  sub_237FBBBC4(v5 + *(int *)(v9 + 32), v1, (uint64_t *)&unk_2568B8910);
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v7) == 1)
  {
    sub_237F96070(v1, (uint64_t *)&unk_2568B8910);
  }
  else
  {
    sub_237FBBBFC(v1, v0, type metadata accessor for CloudAssets_Credential);
    sub_237F91B50(&qword_2568B8668, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB3E8);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    sub_237F94B38(v0, type metadata accessor for CloudAssets_Credential);
  }
  sub_237F960D8();
}

void sub_237FCE90C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  char v60;
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;

  sub_237FA3964();
  v3 = v2;
  v5 = v4;
  v6 = sub_237FCFB8C();
  v66 = *(_QWORD *)(v6 - 8);
  v67 = v6;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F964A0();
  v65 = v8;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v9);
  v64 = (uint64_t)&v63 - v10;
  v11 = sub_237F96310();
  v73 = type metadata accessor for CloudAssets_Credential(v11);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F9283C();
  v68 = v13;
  v70 = sub_237F9191C(&qword_2568B8760);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v14);
  sub_237F9283C();
  v74 = v15;
  sub_237F9191C((uint64_t *)&unk_2568B8910);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v16);
  sub_237F964A0();
  v69 = v17;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v18);
  v71 = (uint64_t)&v63 - v19;
  sub_237F9C950();
  MEMORY[0x24BDAC7A8](v20);
  v72 = (uint64_t)&v63 - v21;
  v22 = sub_237F96310();
  v23 = type metadata accessor for CloudAssets_Asset(v22);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v24);
  sub_237F96188();
  v25 = sub_237F9191C(&qword_2568B8778);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v26);
  sub_237F92870();
  sub_237F9191C(&qword_2568B7720);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v27);
  sub_237FCFE34();
  v30 = v28 - v29;
  v32 = MEMORY[0x24BDAC7A8](v31);
  v34 = (char *)&v63 - v33;
  MEMORY[0x24BDAC7A8](v32);
  v36 = (char *)&v63 - v35;
  v37 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  v38 = *(int *)(v37 + 28);
  v75 = v5;
  v39 = (uint64_t)v5 + v38;
  v40 = (int *)v37;
  sub_237FCFD64(v39, (uint64_t)v36);
  v41 = v40[7];
  v76 = v3;
  sub_237FCFD64((uint64_t)v3 + v41, (uint64_t)v34);
  v42 = v0 + *(int *)(v25 + 48);
  sub_237FCFD64((uint64_t)v36, v0);
  sub_237FCFD64((uint64_t)v34, v42);
  sub_237FB7E40(v0, 1, v23);
  if (v44)
  {
    sub_237FCFBD0((uint64_t)v34);
    sub_237FCFBD0((uint64_t)v36);
    v43 = sub_237FB7E40(v42, 1, v23);
    if (v44)
    {
      sub_237FCFEF8(v43, &qword_2568B7720);
      goto LABEL_11;
    }
LABEL_9:
    v45 = &qword_2568B8778;
    v46 = v0;
LABEL_20:
    sub_237F96070(v46, v45);
    goto LABEL_21;
  }
  sub_237FBBBC4(v0, v30, &qword_2568B7720);
  sub_237FB7E40(v42, 1, v23);
  if (v44)
  {
    sub_237FCFBD0((uint64_t)v34);
    sub_237FCFBD0((uint64_t)v36);
    sub_237F94B38(v30, type metadata accessor for CloudAssets_Asset);
    goto LABEL_9;
  }
  sub_237FBBBFC(v42, v1, type metadata accessor for CloudAssets_Asset);
  sub_237FCAFA8();
  v48 = v47;
  sub_237FCFDE8(v1);
  sub_237FCFFCC((uint64_t)v34);
  sub_237FCFFCC((uint64_t)v36);
  sub_237FCFDE8(v30);
  sub_237FCFFCC(v0);
  if ((v48 & 1) == 0)
    goto LABEL_21;
LABEL_11:
  v49 = v75;
  v50 = v72;
  sub_237FCFD0C((uint64_t)v75 + v40[8], v72);
  v51 = v76;
  v52 = v71;
  sub_237FCFD0C((uint64_t)v76 + v40[8], v71);
  v53 = v74;
  v54 = v74 + *(int *)(v70 + 48);
  sub_237FCFD0C(v50, v74);
  sub_237FCFD0C(v52, v54);
  v55 = v73;
  sub_237FB7E40(v53, 1, v73);
  if (!v44)
  {
    v56 = v69;
    sub_237FBBBC4(v53, v69, (uint64_t *)&unk_2568B8910);
    sub_237FB7E40(v54, 1, v55);
    if (!v57)
    {
      v58 = v68;
      sub_237FBBBFC(v54, v68, type metadata accessor for CloudAssets_Credential);
      sub_237FCC88C();
      v60 = v59;
      sub_237F963E8(v58);
      sub_237FCFC6C(v52);
      sub_237FCFC6C(v50);
      sub_237F963E8(v56);
      sub_237FCFC6C(v53);
      if ((v60 & 1) == 0)
        goto LABEL_21;
      goto LABEL_23;
    }
    sub_237FCFBD0(v52);
    sub_237FCFBD0(v50);
    sub_237F94B38(v56, type metadata accessor for CloudAssets_Credential);
    goto LABEL_19;
  }
  sub_237FCFC74(v52);
  sub_237FCFC74(v50);
  sub_237FB7E40(v54, 1, v55);
  if (!v44)
  {
LABEL_19:
    v45 = &qword_2568B8760;
    v46 = v53;
    goto LABEL_20;
  }
  sub_237F96070(v53, (uint64_t *)&unk_2568B8910);
LABEL_23:
  v61 = *v49 == *v51 && v49[1] == v51[1];
  if (v61 || (sub_237F96484() & 1) != 0)
  {
    v62 = v49[2] == v51[2] && v49[3] == v51[3];
    if (v62 || (sub_237F96484() & 1) != 0)
    {
      sub_237FCFF88(v64, (uint64_t)v49 + v40[6]);
      sub_237FCFF88(v65, (uint64_t)v51 + v40[6]);
      sub_237F91B50(&qword_2568B7938, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      sub_237FCFE10();
      sub_237FCFE70();
      sub_237FCFFC0();
    }
  }
LABEL_21:
  sub_237FA3848();
}

Swift::Int sub_237FCEE3C(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  a1(0);
  sub_237F91B50(a2, a1, a3);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

unint64_t sub_237FCEEBC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_237FCEED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FCFB8C();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t sub_237FCEF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FCFB8C();
  v0 = sub_237FCFD14();
  return sub_237F92858(v0, v1, v2, v3);
}

#error "237FCEF30: call analysis failed (funcsize=5)"

void sub_237FCEF3C()
{
  sub_237FCE5BC();
}

uint64_t sub_237FCEF50()
{
  sub_237F91B50(&qword_2568B8718, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEAC48);
  return _MessageImplementationBase.isEqualTo(message:)();
}

uint64_t sub_237FCEFA0(uint64_t a1, uint64_t a2)
{
  return sub_237FCEFBC(a1, a2, &qword_2568B73A0, (uint64_t)qword_2568C4C38);
}

uint64_t sub_237FCEFBC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  sub_237FCB944(a3, a4);
  type metadata accessor for _NameMap();
  v4 = sub_237F92888();
  return sub_237F92858(v4, v5, v6, v7);
}

uint64_t sub_237FCEFF4()
{
  sub_237F91B50(&qword_2568B8930, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEB460);
  return Message.debugDescription.getter();
}

Swift::Int sub_237FCF034()
{
  return sub_237FCEE3C(type metadata accessor for CloudAssets_AssetStreamHandle, &qword_2568B8618, (uint64_t)&unk_237FEABB8);
}

uint64_t sub_237FCF060()
{
  sub_237F91B50(&qword_2568B8930, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEB460);
  return Message.hash(into:)();
}

Swift::Int sub_237FCF0B0()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void sub_237FCF104()
{
  sub_237F91B50(&qword_2568B8610, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEAB90);
}

void sub_237FCF130()
{
  sub_237F91B50(&qword_2568B8930, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEB460);
}

void sub_237FCF15C()
{
  sub_237F91B50(&qword_2568B8618, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEABB8);
}

void sub_237FCF188()
{
  sub_237F91B50(&qword_2568B8620, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEAC80);
}

uint64_t type metadata accessor for CloudAssets_Signal.Event(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8780);
}

void sub_237FCF1C8()
{
  sub_237F91B50(&qword_2568B8628, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEAD70);
}

void sub_237FCF1F4()
{
  sub_237F91B50(&qword_2568B8630, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEACA8);
}

void sub_237FCF220()
{
  sub_237F91B50(&qword_2568B8638, type metadata accessor for CloudAssets_Signal.Event, (uint64_t)&unk_237FEACE8);
}

void sub_237FCF24C()
{
  sub_237F91B50(&qword_2568B8640, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEAE10);
}

void sub_237FCF278()
{
  sub_237F91B50((unint64_t *)&qword_2568B7C80, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEB4D8);
}

void sub_237FCF2A4()
{
  sub_237F91B50(&qword_2568B8648, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEAE38);
}

void sub_237FCF2D0()
{
  sub_237F91B50(&qword_2568B8650, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEAF00);
}

void sub_237FCF2FC()
{
  sub_237F91B50(&qword_2568B76D0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEB550);
}

void sub_237FCF328()
{
  sub_237F91B50(&qword_2568B8658, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEAF28);
}

void sub_237FCF354()
{
  sub_237F91B50(&qword_2568B8660, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEAFF0);
}

void sub_237FCF380()
{
  sub_237F91B50(&qword_2568B8668, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB3E8);
}

void sub_237FCF3AC()
{
  sub_237F91B50(&qword_2568B8670, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB018);
}

void sub_237FCF3D8()
{
  sub_237F91B50(&qword_2568B8678, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB0E0);
}

void sub_237FCF404()
{
  sub_237F91B50(&qword_2568B75F0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB640);
}

void sub_237FCF430()
{
  sub_237F91B50(&qword_2568B8680, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB108);
}

void sub_237FCF45C()
{
  sub_237F91B50(&qword_2568B8688, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB1D0);
}

void sub_237FCF488()
{
  sub_237F91B50(&qword_2568B75C0, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB6B8);
}

void sub_237FCF4B4()
{
  sub_237F91B50(&qword_2568B8690, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB1F8);
}

void sub_237FCF4E0()
{
  sub_237F91B50(&qword_2568B8698, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB2C0);
}

void sub_237FCF50C()
{
  sub_237F91B50(&qword_2568B7610, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB5C8);
}

void sub_237FCF538()
{
  sub_237F91B50(&qword_2568B86A0, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB2E8);
}

unint64_t sub_237FCF568()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B86A8;
  if (!qword_2568B86A8)
  {
    v1 = sub_237F919BC(&qword_2568B86B0);
    result = MEMORY[0x23B829E84](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2568B86A8);
  }
  return result;
}

void sub_237FCF5AC()
{
  sub_237F91B50(&qword_2568B86B8, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB058);
}

void sub_237FCF5D8()
{
  sub_237F91B50(&qword_2568B86C0, type metadata accessor for CloudAssets_AssetStreamHandle, (uint64_t)&unk_237FEABF8);
}

void sub_237FCF604()
{
  sub_237F91B50(&qword_2568B86C8, type metadata accessor for CloudAssets_Signal, (uint64_t)&unk_237FEAE78);
}

void sub_237FCF630()
{
  sub_237F91B50(&qword_2568B86D0, type metadata accessor for CloudAssets_SimultaneousDownloadableAssets, (uint64_t)&unk_237FEAF68);
}

void sub_237FCF65C()
{
  sub_237F91B50(&qword_2568B86D8, type metadata accessor for CloudAssets_Asset, (uint64_t)&unk_237FEB328);
}

void sub_237FCF688()
{
  sub_237F91B50(&qword_2568B86E0, type metadata accessor for CloudAssets_Asset.Protector, (uint64_t)&unk_237FEB148);
}

void sub_237FCF6B4()
{
  sub_237F91B50(&qword_2568B86E8, type metadata accessor for CloudAssets_Asset.ID, (uint64_t)&unk_237FEB238);
}

unint64_t sub_237FCF6E0()
{
  unint64_t result;

  result = qword_2568B8770;
  if (!qword_2568B8770)
  {
    result = MEMORY[0x23B829E84](&unk_237FEB7F8, &type metadata for CloudAssets_Signal.EventType);
    atomic_store(result, (unint64_t *)&qword_2568B8770);
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudAssets_Signal.EventType()
{
  return &type metadata for CloudAssets_Signal.EventType;
}

_QWORD *sub_237FCF72C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    v5 = *(int *)(a3 + 24);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = type metadata accessor for UnknownStorage();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_237FCF7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for UnknownStorage();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_237FCF7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_237FCF868(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = (uint64_t)a2 + v5;
  v8 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t sub_237FCF8D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_237FCF940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_237FCF9AC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FCF9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 24);
  v5 = sub_237FCFB8C();
  return _s11CloudAssets21UploadResponseMessageOwet_0(v4, a2, v5);
}

uint64_t sub_237FCF9EC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FCF9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 24);
  v6 = sub_237FCFB8C();
  return sub_237FCFCE8(v5, a2, a2, v6);
}

uint64_t sub_237FCFA2C()
{
  return sub_237FCFA44();
}

uint64_t sub_237FCFA44()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_237FCFAB4()
{
  unint64_t result;

  result = qword_2568B8790;
  if (!qword_2568B8790)
  {
    result = MEMORY[0x23B829E84](&unk_237FEB758, &type metadata for CloudAssets_Signal.EventType);
    atomic_store(result, (unint64_t *)&qword_2568B8790);
  }
  return result;
}

unint64_t sub_237FCFAF4()
{
  unint64_t result;

  result = qword_2568B8798;
  if (!qword_2568B8798)
  {
    result = MEMORY[0x23B829E84](&unk_237FEB780, &type metadata for CloudAssets_Signal.EventType);
    atomic_store(result, (unint64_t *)&qword_2568B8798);
  }
  return result;
}

unint64_t sub_237FCFB34()
{
  unint64_t result;

  result = qword_2568B87A0;
  if (!qword_2568B87A0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEB7C0, &type metadata for CloudAssets_Signal.EventType);
    atomic_store(result, (unint64_t *)&qword_2568B87A0);
  }
  return result;
}

uint64_t sub_237FCFB70()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

uint64_t sub_237FCFB8C()
{
  return type metadata accessor for UnknownStorage();
}

uint64_t sub_237FCFBA8()
{
  return dispatch thunk of Decoder.nextFieldNumber()();
}

void sub_237FCFBD0(uint64_t a1)
{
  uint64_t *v1;

  sub_237F96070(a1, v1);
}

uint64_t sub_237FCFBEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v3 + a1, v1);
}

uint64_t sub_237FCFC00()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_237FCFC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(0);
}

uint64_t sub_237FCFC30()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFC58@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF)
    LODWORD(a1) = -1;
  return (a1 + 1);
}

void sub_237FCFC6C(uint64_t a1)
{
  uint64_t *v1;

  sub_237F96070(a1, v1);
}

void sub_237FCFC74(uint64_t a1)
{
  uint64_t *v1;

  sub_237F96070(a1, v1);
}

uint64_t sub_237FCFC7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);

  return v4(v1, v3 + a1, v2);
}

uint64_t sub_237FCFC8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_237FCFC9C()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t sub_237FCFCAC()
{
  uint64_t v0;

  return v0;
}

void sub_237FCFCC0()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t (*v2)(uint64_t);

  sub_237F91B50(v1, v2, v0);
}

uint64_t sub_237FCFCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, a3, a4);
}

uint64_t sub_237FCFCF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

void sub_237FCFD04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_237FBBBC4(a1, a2, v2);
}

void sub_237FCFD0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_237FBBBC4(a1, a2, v2);
}

uint64_t sub_237FCFD14()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFD2C()
{
  return dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
}

uint64_t sub_237FCFD5C()
{
  return UnknownStorage.init()();
}

void sub_237FCFD64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_237FBBBC4(a1, a2, v2);
}

uint64_t sub_237FCFD6C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFD90()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t sub_237FCFDA0()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_237FCFDAC()
{
  return dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
}

uint64_t sub_237FCFDD4()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237FD25F8(v0, v1);
}

uint64_t sub_237FCFDE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(a1, v1);
}

void sub_237FCFDE8(uint64_t a1)
{
  uint64_t (*v1)(_QWORD);

  sub_237F94B38(a1, v1);
}

uint64_t sub_237FCFDF0()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFE10()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t sub_237FCFE28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return v1 + a1;
}

uint64_t sub_237FCFE44()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

void sub_237FCFE5C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
}

uint64_t sub_237FCFE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v2, v0);
}

uint64_t sub_237FCFE84()
{
  return dispatch thunk of Decoder.decodeSingularBytesField(value:)();
}

uint64_t sub_237FCFE90()
{
  return dispatch thunk of Decoder.decodeSingularStringField(value:)();
}

uint64_t sub_237FCFEB0(uint64_t a1)
{
  uint64_t v1;

  return _s11CloudAssets21UploadResponseMessageOwst_0(v1, 1, 1, a1);
}

uint64_t sub_237FCFEC4()
{
  return dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)();
}

uint64_t sub_237FCFED8()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFEF0(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

void sub_237FCFEF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  sub_237F96070(v2, a2);
}

uint64_t sub_237FCFF00()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFF18()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FCFF40()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_237FCFF70()
{
  return type metadata accessor for CloudAssets_Asset.ID(0);
}

uint64_t sub_237FCFF78()
{
  return type metadata accessor for CloudAssets_Asset.Protector(0);
}

uint64_t sub_237FCFF80()
{
  return type metadata accessor for CloudAssets_Credential(0);
}

uint64_t sub_237FCFF88(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;

  return v2(a1, a2, v3);
}

void sub_237FCFF90(uint64_t a1)
{
  uint64_t *v1;

  sub_237F96070(a1, v1);
}

uint64_t sub_237FCFFAC()
{
  return dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
}

void sub_237FCFFB8(uint64_t a1)
{
  uint64_t *v1;

  sub_237F96070(a1, v1);
}

uint64_t sub_237FCFFC0()
{
  uint64_t (*v0)(uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;

  return v0(v2, v1);
}

void sub_237FCFFCC(uint64_t a1)
{
  uint64_t *v1;

  sub_237F96070(a1, v1);
}

uint64_t sub_237FCFFD4()
{
  uint64_t (*v0)(_QWORD);

  return v0(0);
}

uint64_t sub_237FD0030(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  char v8;

  v2 = a1 == 0x646C656979 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x6873696E6966 && a2 == 0xE600000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return 2;
      else
        return 3;
    }
  }
}

uint64_t sub_237FD0164(char a1)
{
  if (!a1)
    return 0x646C656979;
  if (a1 == 1)
    return 0x6873696E6966;
  return 0x726F727265;
}

uint64_t sub_237FD01B0()
{
  char *v0;

  return sub_237FD0164(*v0);
}

uint64_t sub_237FD01B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FD0030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FD01DC()
{
  sub_237FD0550();
  return CodingKey.description.getter();
}

uint64_t sub_237FD0204()
{
  sub_237FD0550();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FD022C()
{
  sub_237FD058C();
  return CodingKey.description.getter();
}

uint64_t sub_237FD0254()
{
  sub_237FD058C();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FD027C()
{
  sub_237FD05C8();
  return CodingKey.description.getter();
}

uint64_t sub_237FD02A4()
{
  sub_237FD05C8();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FD02CC()
{
  sub_237FD0604();
  return CodingKey.description.getter();
}

uint64_t sub_237FD02F4()
{
  sub_237FD0604();
  return CodingKey.debugDescription.getter();
}

void XPCAsyncSequenceResponse.Event.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = sub_237F9191C(&qword_2568B87A8);
  v21 = *(_QWORD *)(v23 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F9283C();
  v19 = v4;
  v5 = sub_237F9191C(&qword_2568B87B0);
  v17 = *(_QWORD *)(v5 - 8);
  v18 = v5;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F982D4();
  v9 = v8 - v7;
  v22 = sub_237F9191C(&qword_2568B87B8);
  v20 = *(_QWORD *)(v22 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v10);
  sub_237F982D4();
  v13 = v12 - v11;
  sub_237F9191C(&qword_2568B87C0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v14);
  sub_237FA8C88();
  v15 = v1[1];
  v16 = *v1;
  sub_237F9195C(a1, a1[3]);
  sub_237FD0550();
  sub_237FD1E80();
  if (v15 >> 60 == 11)
  {
    sub_237FD1E90();
    sub_237FA8C68();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v23);
  }
  else
  {
    if (v15 >> 60 != 15)
    {
      sub_237F91894(v16, v15);
      sub_237FD0604();
      sub_237FA8C68();
      sub_237F93D04();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v13, v22);
      sub_237FD1E50();
      sub_237FB7520(v16, v15);
      goto LABEL_7;
    }
    sub_237FD1E9C();
    sub_237FA8C68();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v9, v18);
  }
  sub_237FD1E50();
LABEL_7:
  sub_237F960D8();
}

unint64_t sub_237FD0550()
{
  unint64_t result;

  result = qword_2568B87C8;
  if (!qword_2568B87C8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBE0C, &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B87C8);
  }
  return result;
}

unint64_t sub_237FD058C()
{
  unint64_t result;

  result = qword_2568B87D0;
  if (!qword_2568B87D0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBDBC, &type metadata for XPCAsyncSequenceResponse.Event.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B87D0);
  }
  return result;
}

unint64_t sub_237FD05C8()
{
  unint64_t result;

  result = qword_2568B87D8;
  if (!qword_2568B87D8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBD6C, &type metadata for XPCAsyncSequenceResponse.Event.FinishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B87D8);
  }
  return result;
}

unint64_t sub_237FD0604()
{
  unint64_t result;

  result = qword_2568B87E0;
  if (!qword_2568B87E0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBD1C, &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B87E0);
  }
  return result;
}

void XPCAsyncSequenceResponse.Event.init(from:)(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v27 = sub_237F9191C(&qword_2568B87E8);
  v31 = *(_QWORD *)(v27 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F9283C();
  v30 = v4;
  v5 = sub_237F9191C(&qword_2568B87F0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237FD1E34(v7, v22);
  v26 = sub_237F9191C(&qword_2568B87F8);
  MEMORY[0x24BDAC7A8](v26);
  sub_237FA8C88();
  v8 = sub_237F9191C(&qword_2568B8800);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  sub_237F963A4();
  sub_237F9195C(a1, a1[3]);
  sub_237FD0550();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v33)
    goto LABEL_10;
  v23 = v9;
  v10 = KeyedDecodingContainer.allKeys.getter();
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11
    || (v12 = *(unsigned __int8 *)(v10 + 32),
        sub_237FA372C(1, v11, v10, v10 + 32, 0, (2 * v11) | 1),
        v14 = v13,
        v16 = v15,
        swift_bridgeObjectRelease(),
        v14 != v16 >> 1))
  {
    v18 = type metadata accessor for DecodingError();
    swift_allocError();
    v20 = v19;
    sub_237F9191C(&qword_2568B78D8);
    *v20 = &type metadata for XPCAsyncSequenceResponse.Event;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v20, *MEMORY[0x24BEE26D0], v18);
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_237FC543C(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 8));
LABEL_10:
    v21 = (uint64_t)a1;
    goto LABEL_11;
  }
  if (v12)
  {
    if (v12 == 1)
    {
      sub_237FD1E9C();
      sub_237FD1E20();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v29, v25);
      sub_237FD1E64();
      sub_237FC543C(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      v17 = xmmword_237FEB850;
    }
    else
    {
      sub_237FD1E90();
      sub_237FD1E20();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v27);
      sub_237FD1E64();
      sub_237FC543C(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
      v17 = xmmword_237FEB840;
    }
  }
  else
  {
    LOBYTE(v32) = 0;
    sub_237FD0604();
    sub_237FD1E20();
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237FD1E6C();
    sub_237FD1E64();
    sub_237FC543C(*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8));
    v17 = v32;
  }
  *a2 = v17;
  v21 = (uint64_t)a1;
LABEL_11:
  sub_237F91A00(v21);
  sub_237F960D8();
}

void sub_237FD0A04(_QWORD *a1@<X0>, __int128 *a2@<X8>)
{
  XPCAsyncSequenceResponse.Event.init(from:)(a1, a2);
}

void sub_237FD0A18(_QWORD *a1)
{
  XPCAsyncSequenceResponse.Event.encode(to:)(a1);
}

uint64_t XPCAsyncSequenceResponse.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_237F92868();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t XPCAsyncSequenceResponse.event.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;

  v3 = (uint64_t *)(v1 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  v4 = *v3;
  v5 = v3[1];
  *a1 = *v3;
  a1[1] = v5;
  return sub_237FD0FE8(v4, v5);
}

void XPCAsyncSequenceResponse.init(id:event:)(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = *a2;
  v6 = a2[1];
  v7 = sub_237F92868();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a3, a1, v7);
  v8 = (_QWORD *)(a3 + *(int *)(type metadata accessor for XPCAsyncSequenceResponse() + 20));
  *v8 = v5;
  v8[1] = v6;
  sub_237F961B0();
}

uint64_t sub_237FD0AE8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v7;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E657665 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_237FD0BB4(char a1)
{
  if ((a1 & 1) != 0)
    return 0x746E657665;
  else
    return 25705;
}

uint64_t sub_237FD0BDC()
{
  char *v0;

  return sub_237FD0BB4(*v0);
}

uint64_t sub_237FD0BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FD0AE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FD0C08()
{
  sub_237FD1000();
  return CodingKey.description.getter();
}

uint64_t sub_237FD0C30()
{
  sub_237FD1000();
  return CodingKey.debugDescription.getter();
}

uint64_t XPCAsyncSequenceResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_237F9191C(&qword_2568B8808);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v7 = v6 - v5;
  sub_237F9195C(a1, a1[3]);
  sub_237FD1000();
  sub_237FD1E80();
  type metadata accessor for UUID();
  sub_237F98DD4(&qword_2568B7530, MEMORY[0x24BDCEA70]);
  sub_237F994A0();
  if (!v1)
  {
    type metadata accessor for XPCAsyncSequenceResponse();
    sub_237FD103C();
    sub_237F994A0();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v7, v3);
}

void XPCAsyncSequenceResponse.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v14 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v14 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FD1E34(v6, v9);
  v13 = sub_237F9191C(&qword_2568B8820);
  MEMORY[0x24BDAC7A8](v13);
  sub_237FA8C88();
  v7 = type metadata accessor for XPCAsyncSequenceResponse();
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F963A4();
  sub_237F9195C(a1, a1[3]);
  sub_237FD1000();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    sub_237F91A00((uint64_t)a1);
  }
  else
  {
    LOBYTE(v15) = 0;
    sub_237F98DD4(&qword_2568B7550, MEMORY[0x24BDCEAA8]);
    sub_237F99494();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v3, v12, v14);
    sub_237FD1078();
    sub_237F99494();
    sub_237F99480();
    *(_OWORD *)(v3 + *(int *)(v7 + 20)) = v15;
    sub_237FC2C44(v3, a2);
    sub_237F91A00((uint64_t)a1);
    sub_237FD10B4(v3);
  }
  sub_237F960D8();
}

void sub_237FD0F88(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  XPCAsyncSequenceResponse.init(from:)(a1, a2);
}

uint64_t sub_237FD0F9C(_QWORD *a1)
{
  return XPCAsyncSequenceResponse.encode(to:)(a1);
}

uint64_t type metadata accessor for XPCAsyncSequenceResponse()
{
  uint64_t result;

  result = qword_2568B8830;
  if (!qword_2568B8830)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_237FD0FE8(uint64_t a1, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF)
    return sub_237F91894(a1, a2);
  return a1;
}

unint64_t sub_237FD1000()
{
  unint64_t result;

  result = qword_2568B8810;
  if (!qword_2568B8810)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBCCC, &type metadata for XPCAsyncSequenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8810);
  }
  return result;
}

unint64_t sub_237FD103C()
{
  unint64_t result;

  result = qword_2568B8818;
  if (!qword_2568B8818)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for XPCAsyncSequenceResponse.Event, &type metadata for XPCAsyncSequenceResponse.Event);
    atomic_store(result, (unint64_t *)&qword_2568B8818);
  }
  return result;
}

unint64_t sub_237FD1078()
{
  unint64_t result;

  result = qword_2568B8828;
  if (!qword_2568B8828)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for XPCAsyncSequenceResponse.Event, &type metadata for XPCAsyncSequenceResponse.Event);
    atomic_store(result, (unint64_t *)&qword_2568B8828);
  }
  return result;
}

uint64_t sub_237FD10B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for XPCAsyncSequenceResponse();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for XPCAsyncSequenceResponse(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (((v11 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_237F91894(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
  }
  return a1;
}

uint64_t destroy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  unint64_t v7;

  v4 = type metadata accessor for UUID();
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v6 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v7 = v6[1];
  if (((v7 >> 60) | 4) != 0xF)
    return sub_237F918D8(*v6, v7);
  return result;
}

uint64_t initializeWithCopy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (((v10 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_237F91894(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  return a1;
}

uint64_t assignWithCopy for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  if (((*(_QWORD *)(a1 + v7 + 8) >> 60) | 4) != 0xF)
  {
    v12 = v9[1];
    if (((v12 >> 60) | 4) != 0xF)
    {
      v14 = *v9;
      sub_237F91894(v14, v12);
      v15 = *v8;
      v16 = v8[1];
      *v8 = v14;
      v8[1] = v12;
      sub_237F918D8(v15, v16);
      return a1;
    }
    sub_237FD1384((uint64_t)v8);
    goto LABEL_6;
  }
  v10 = v9[1];
  if (((v10 >> 60) | 4) == 0xF)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    return a1;
  }
  v11 = *v9;
  sub_237F91894(v11, v10);
  *v8 = v11;
  v8[1] = v10;
  return a1;
}

uint64_t sub_237FD1384(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

uint64_t assignWithTake for XPCAsyncSequenceResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (((v10 >> 60) | 4) != 0xF)
  {
    v11 = v9[1];
    if (((v11 >> 60) | 4) != 0xF)
    {
      v13 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_237F918D8(v13, v10);
      return a1;
    }
    sub_237FD1384((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceResponse()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FD1480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;

  v6 = sub_237F92868();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
    return _s11CloudAssets21UploadResponseMessageOwet_0(a1, a2, v6);
  v8 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  v9 = (4 * v8) & 0xC | (v8 >> 2);
  v10 = __OFSUB__(13, v9);
  v11 = 13 - v9;
  if (v11 < 0 != v10)
    v11 = -1;
  if (((4 * (_DWORD)v8) & 0xC) != 0)
    return (v11 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FD1518(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = sub_237F92868();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, a2, v8);
  }
  else
  {
    v9 = (_QWORD *)(a1 + *(int *)(a4 + 20));
    *v9 = 0;
    v9[1] = (unint64_t)(((14 - a2) >> 2) & 3 | (4 * (14 - (_DWORD)a2))) << 60;
    sub_237F961B0();
  }
}

uint64_t sub_237FD1594()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *destroy for XPCAsyncSequenceResponse.Event(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_237F918D8(*result, v1);
  return result;
}

uint64_t _s11CloudAssets24XPCAsyncSequenceResponseV5EventOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_237F91894(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for XPCAsyncSequenceResponse.Event(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_237F91894(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_237F918D8(v10, v11);
      return a1;
    }
    sub_237F918D8(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_237F91894(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

__n128 initializeWithTake for XPCAsyncSequenceResponse.Event(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for XPCAsyncSequenceResponse.Event(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_237F918D8(v7, v4);
      return a1;
    }
    sub_237F918D8(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for XPCAsyncSequenceResponse.Event(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xB && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 11);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = 0;
  if (v4 >= 3)
    return v4 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 11;
    if (a3 >= 0xB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_237FD1820(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_237FD1848(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event()
{
  return &type metadata for XPCAsyncSequenceResponse.Event;
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_237FD18D4 + 4 * byte_237FEB865[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_237FD1908 + 4 * byte_237FEB860[v4]))();
}

uint64_t sub_237FD1908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FD1910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FD1918);
  return result;
}

uint64_t sub_237FD1924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FD192CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_237FD1930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FD1938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_237FD19A0 + 4 * byte_237FEB86F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_237FD19D4 + 4 * byte_237FEB86A[v4]))();
}

uint64_t sub_237FD19D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FD19DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FD19E4);
  return result;
}

uint64_t sub_237FD19F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FD19F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_237FD19FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FD1A04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.CodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for XPCAsyncSequenceResponse.Event.YieldCodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FD1A60 + 4 * byte_237FEB874[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FD1A80 + 4 * byte_237FEB879[v4]))();
}

_BYTE *sub_237FD1A60(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FD1A80(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FD1A88(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FD1A90(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FD1A98(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FD1AA0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.YieldCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.FinishCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.FinishCodingKeys;
}

ValueMetadata *type metadata accessor for XPCAsyncSequenceResponse.Event.ErrorCodingKeys()
{
  return &type metadata for XPCAsyncSequenceResponse.Event.ErrorCodingKeys;
}

unint64_t sub_237FD1AE0()
{
  unint64_t result;

  result = qword_2568B8840;
  if (!qword_2568B8840)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBB34, &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8840);
  }
  return result;
}

unint64_t sub_237FD1B20()
{
  unint64_t result;

  result = qword_2568B8848;
  if (!qword_2568B8848)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBBEC, &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8848);
  }
  return result;
}

unint64_t sub_237FD1B60()
{
  unint64_t result;

  result = qword_2568B8850;
  if (!qword_2568B8850)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBCA4, &type metadata for XPCAsyncSequenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8850);
  }
  return result;
}

unint64_t sub_237FD1BA0()
{
  unint64_t result;

  result = qword_2568B8858;
  if (!qword_2568B8858)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBC14, &type metadata for XPCAsyncSequenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8858);
  }
  return result;
}

unint64_t sub_237FD1BE0()
{
  unint64_t result;

  result = qword_2568B8860;
  if (!qword_2568B8860)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBC3C, &type metadata for XPCAsyncSequenceResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8860);
  }
  return result;
}

unint64_t sub_237FD1C20()
{
  unint64_t result;

  result = qword_2568B8868;
  if (!qword_2568B8868)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBAA4, &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8868);
  }
  return result;
}

unint64_t sub_237FD1C60()
{
  unint64_t result;

  result = qword_2568B8870;
  if (!qword_2568B8870)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBACC, &type metadata for XPCAsyncSequenceResponse.Event.YieldCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8870);
  }
  return result;
}

unint64_t sub_237FD1CA0()
{
  unint64_t result;

  result = qword_2568B8878;
  if (!qword_2568B8878)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBA54, &type metadata for XPCAsyncSequenceResponse.Event.FinishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8878);
  }
  return result;
}

unint64_t sub_237FD1CE0()
{
  unint64_t result;

  result = qword_2568B8880;
  if (!qword_2568B8880)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBA7C, &type metadata for XPCAsyncSequenceResponse.Event.FinishCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8880);
  }
  return result;
}

unint64_t sub_237FD1D20()
{
  unint64_t result;

  result = qword_2568B8888;
  if (!qword_2568B8888)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBA04, &type metadata for XPCAsyncSequenceResponse.Event.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8888);
  }
  return result;
}

unint64_t sub_237FD1D60()
{
  unint64_t result;

  result = qword_2568B8890;
  if (!qword_2568B8890)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBA2C, &type metadata for XPCAsyncSequenceResponse.Event.ErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8890);
  }
  return result;
}

unint64_t sub_237FD1DA0()
{
  unint64_t result;

  result = qword_2568B8898;
  if (!qword_2568B8898)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBB5C, &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8898);
  }
  return result;
}

unint64_t sub_237FD1DE0()
{
  unint64_t result;

  result = qword_2568B88A0;
  if (!qword_2568B88A0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEBB84, &type metadata for XPCAsyncSequenceResponse.Event.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B88A0);
  }
  return result;
}

uint64_t sub_237FD1E20()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void sub_237FD1E34(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_237FD1E50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 104) + 8))(v1, v0);
}

uint64_t sub_237FD1E64()
{
  return swift_unknownObjectRelease();
}

uint64_t sub_237FD1E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 184) + 8))(v1, v0);
}

uint64_t sub_237FD1E80()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

unint64_t sub_237FD1E90()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 2;
  return sub_237FD058C();
}

unint64_t sub_237FD1E9C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 96) = 1;
  return sub_237FD05C8();
}

uint64_t sub_237FD1EA8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  sub_237FAC0E4(v0, qword_2568B88A8);
  sub_237FABF5C(v0, (uint64_t)qword_2568B88A8);
  type metadata accessor for XPCSessionCacheImplementation();
  sub_237F9191C(&qword_2568B88C0);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

_QWORD *sub_237FD1F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  swift_defaultActor_initialize();
  v4[14] = a1;
  v4[15] = a2;
  v4[16] = a3;
  v4[17] = a4;
  v4[18] = 0;
  return v4;
}

uint64_t sub_237FD1F8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (qword_2568B73A8 != -1)
    swift_once();
  v2 = sub_237FAC474();
  sub_237FABF5C(v2, (uint64_t)qword_2568B88A8);
  v3 = (void *)Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (sub_237FD25E8(v4))
  {
    *(_WORD *)sub_237FAC3E4() = 0;
    sub_237FD25C4(&dword_237F8F000, v5, v6, "evict xpc session");
    sub_237FAC3D8();
  }

  *(_QWORD *)(v1 + 144) = 0;
  return swift_release();
}

uint64_t sub_237FD2038()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v1 + 144))
  {
    v0 = *(_QWORD *)(v1 + 144);
  }
  else
  {
    v3 = sub_237FD207C();
    if (v2)
      return v0;
    v0 = v3;
  }
  swift_retain();
  return v0;
}

uint64_t sub_237FD207C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v0;
  v3 = type metadata accessor for XPCSession.InitializationOptions();
  MEMORY[0x24BDAC7A8](v3);
  if (qword_2568B73A8 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  sub_237FABF5C(v4, (uint64_t)qword_2568B88A8);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_237F8F000, v5, v6, "establish xpc session", v7, 2u);
    MEMORY[0x23B829F2C](v7, -1, -1);
  }

  type metadata accessor for XPCSession();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static XPCSession.InitializationOptions.none.getter();
  type metadata accessor for XPCAsyncSequenceResponse();
  sub_237FAC398(&qword_2568B88C8, (uint64_t (*)(uint64_t))type metadata accessor for XPCAsyncSequenceResponse, (uint64_t)&protocol conformance descriptor for XPCAsyncSequenceResponse);
  v8 = XPCSession.__allocating_init<A>(machService:targetQueue:options:incomingMessageHandler:cancellationHandler:)();
  v9 = v8;
  if (!v1)
  {
    *(_QWORD *)(v2 + 144) = v8;
    swift_retain();
    swift_release();
  }
  return v9;
}

uint64_t sub_237FD225C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t);
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  _QWORD v18[4];

  v2 = v1;
  v4 = type metadata accessor for XPCRichError();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_2568B73A8 != -1)
    swift_once();
  v8 = sub_237FAC474();
  sub_237FABF5C(v8, (uint64_t)qword_2568B88A8);
  v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v9(v7, a1, v4);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)sub_237FAC3E4();
    v13 = sub_237FAC3E4();
    v18[2] = v2;
    v14 = (_QWORD *)v13;
    *(_DWORD *)v12 = 138412290;
    v18[1] = v12 + 4;
    sub_237FAC398(&qword_2568B8048, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6678], MEMORY[0x24BEE6688]);
    swift_allocError();
    v9(v15, (uint64_t)v7, v4);
    v16 = _swift_stdlib_bridgeErrorToNSError();
    v18[3] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v16;
    sub_237FD25D8();
    _os_log_impl(&dword_237F8F000, v10, v11, "cached xpc connection disconnected due to error %@", v12, 0xCu);
    sub_237F9191C(&qword_2568B7DB0);
    swift_arrayDestroy();
    sub_237FAC3D8();
  }
  sub_237FD25D8();

  return sub_237FD1F8C();
}

uint64_t sub_237FD2464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  if (qword_2568B73A8 != -1)
    swift_once();
  v2 = sub_237FAC474();
  sub_237FABF5C(v2, (uint64_t)qword_2568B88A8);
  v3 = (void *)Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (sub_237FD25E8(v4))
  {
    *(_WORD *)sub_237FAC3E4() = 0;
    sub_237FD25C4(&dword_237F8F000, v5, v6, "cancel xpc session");
    sub_237FAC3D8();
  }

  if (*(_QWORD *)(v1 + 144))
  {
    swift_retain();
    dispatch thunk of XPCSession.cancel(reason:)();
    swift_release();
  }
  return sub_237FD1F8C();
}

uint64_t sub_237FD253C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_237FD2570()
{
  sub_237FD253C();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for XPCSessionCacheImplementation()
{
  return objc_opt_self();
}

uint64_t sub_237FD25A8()
{
  return sub_237FBF10C();
}

void sub_237FD25C4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t sub_237FD25D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

BOOL sub_237FD25E8(os_log_type_t a1)
{
  NSObject *v1;

  return os_log_type_enabled(v1, a1);
}

uint64_t sub_237FD25F8(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)sub_237FD261C + 4 * byte_237FEBEE0[a2 >> 62]))();
}

BOOL sub_237FD261C(uint64_t a1, uint64_t a2)
{
  return BYTE6(a2) == 0;
}

void sub_237FD2644(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_237FD26A0(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;

  v7 = v3;
  if (v3)
  {
    v27 = v3;
    v26 = v2;
    *(_QWORD *)(v6 - 104) = v5;
    v8 = v3 & ~(v3 >> 63);
    sub_237FB6170(0, v8, 0);
    v5 = *(_QWORD *)(v6 - 104);
    if ((_DWORD)v4)
    {
      if ((_DWORD)v4 == 1)
        v9 = (int)a1;
      else
        v9 = *(_QWORD *)(a1 + 16);
      if (v7 < 0)
        goto LABEL_40;
    }
    else
    {
      if (v7 < 0)
      {
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
      }
      v9 = 0;
    }
    *(_QWORD *)(v6 - 136) = a2 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v6 - 128) = v4;
    while (v8)
    {
      if ((_DWORD)v4)
      {
        if ((_DWORD)v4 == 1)
        {
          if (v9 < (int)a1 || v9 >= a1 >> 32)
            goto LABEL_34;
          v11 = __DataStorage._bytes.getter();
          if (!v11)
            goto LABEL_42;
          v12 = v11;
          v13 = __DataStorage._offset.getter();
          v14 = v9 - v13;
          if (__OFSUB__(v9, v13))
            goto LABEL_37;
        }
        else
        {
          if (v9 < *(_QWORD *)(a1 + 16))
            goto LABEL_36;
          if (v9 >= *(_QWORD *)(a1 + 24))
            goto LABEL_38;
          v16 = __DataStorage._bytes.getter();
          if (!v16)
            goto LABEL_43;
          v12 = v16;
          v17 = __DataStorage._offset.getter();
          v14 = v9 - v17;
          if (__OFSUB__(v9, v17))
            goto LABEL_39;
        }
        v15 = *(_BYTE *)(v12 + v14);
      }
      else
      {
        if (v9 >= v27)
          goto LABEL_35;
        *(_DWORD *)(v6 - 118) = a1;
        *(_BYTE *)(v6 - 114) = v26;
        *(_WORD *)(v6 - 113) = *(_WORD *)((char *)&a1 + 5);
        *(_BYTE *)(v6 - 111) = HIBYTE(a1);
        *(_DWORD *)(v6 - 110) = a2;
        *(_WORD *)(v6 - 106) = WORD2(a2);
        v15 = *(_BYTE *)(v6 - 118 + v9);
      }
      sub_237F9191C(&qword_2568B8AD0);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_237FE7750;
      *(_QWORD *)(v18 + 56) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v18 + 64) = MEMORY[0x24BEE42B0];
      *(_BYTE *)(v18 + 32) = v15;
      v19 = String.init(format:_:)();
      v21 = v20;
      *(_QWORD *)(v6 - 104) = v5;
      v23 = *(_QWORD *)(v5 + 16);
      v22 = *(_QWORD *)(v5 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_237FB6170((_QWORD *)(v22 > 1), v23 + 1, 1);
        v5 = *(_QWORD *)(v6 - 104);
      }
      *(_QWORD *)(v5 + 16) = v23 + 1;
      v24 = v5 + 16 * v23;
      *(_QWORD *)(v24 + 32) = v19;
      *(_QWORD *)(v24 + 40) = v21;
      ++v9;
      --v8;
      --v7;
      v4 = *(_QWORD *)(v6 - 128);
      if (!v7)
        return v5;
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    JUMPOUT(0x237FD29A8);
  }
  return v5;
}

uint64_t sub_237FD29D0()
{
  uint64_t v1;

  swift_bridgeObjectRetain();
  v1 = String.init<A>(_:)();
  String.append<A>(contentsOf:)();
  return v1;
}

uint64_t sub_237FD2A4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  char v9;

  v2 = a1 == 0x7465737361 && a2 == 0xE500000000000000;
  if (v2 || (sub_237FDAD1C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61;
    if (v6 || (sub_237FDAD1C() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      v7 = a1 == 0x7079547465737361 && a2 == 0xE900000000000065;
      if (v7 || (sub_237FDAD1C() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x746163696C707061 && a2 == 0xED000044496E6F69)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v9 = sub_237FDAD1C();
        sub_237FB89E0();
        if ((v9 & 1) != 0)
          return 3;
        else
          return 4;
      }
    }
  }
}

uint64_t sub_237FD2BF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237FD2C28 + 4 * byte_237FEBEE4[a1]))(0x7465737361, 0xE500000000000000);
}

uint64_t sub_237FD2C28()
{
  return 0x69746E6564657263;
}

uint64_t sub_237FD2C44()
{
  return 0x7079547465737361;
}

uint64_t sub_237FD2C60()
{
  return 0x746163696C707061;
}

uint64_t sub_237FD2C84()
{
  unsigned __int8 *v0;

  return sub_237FD2BF8(*v0);
}

uint64_t sub_237FD2C8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FD2A4C(a1, a2);
  *a3 = result;
  return result;
}

void sub_237FD2CB0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_237FD2CBC()
{
  sub_237FD93D4();
  return CodingKey.description.getter();
}

uint64_t sub_237FD2CE4()
{
  sub_237FD93D4();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FD2D0C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  sub_237FAC0E4(v0, qword_2568B88D0);
  sub_237FABF5C(v0, (uint64_t)qword_2568B88D0);
  type metadata accessor for AssetStreamHandle(0);
  sub_237F9191C((uint64_t *)&unk_2568B8AB0);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

void sub_237FD2DA4()
{
  uint64_t v0;

  sub_237FD2DC0();
  qword_2568B88E8 = v0;
}

void sub_237FD2DC0()
{
  unint64_t v0;
  _BYTE *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  if (qword_2568B7318 != -1)
    swift_once();
  v0 = 0xD000000000000022;
  v1 = (char *)off_2568B7E10 + 16;
  v2 = (os_unfair_lock_s *)((char *)off_2568B7E10 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)off_2568B7E10 + 5);
  sub_237FAC5C8(v1, &v5);
  os_unfair_lock_unlock(v2);
  if (v5)
  {
    v3 = 0x8000000237FE33C0;
    if (!static TestConfigurations.isSystemInstalledBinary()())
    {
      v0 = sub_237FD29D0();
      v3 = v4;
    }
  }
  else
  {
    v0 = 0xD00000000000001BLL;
    v3 = 0x8000000237FE3370;
  }
  type metadata accessor for AssetManager();
  swift_allocObject();
  AssetManager.init(serviceName:)(v0, v3);
}

void AssetStreamHandle.init(from:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  sub_237F96134();
  v68 = v3;
  v70 = v4;
  v5 = type metadata accessor for Date();
  v57 = *(_QWORD *)(v5 - 8);
  v58 = v5;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9283C();
  v56 = v7;
  sub_237F9191C(&qword_2568B7718);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v8);
  sub_237F9283C();
  v54 = v9;
  v55 = type metadata accessor for Google_Protobuf_Timestamp();
  v60 = *(_QWORD *)(v55 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v10);
  sub_237F9283C();
  v59 = v11;
  sub_237F9191C((uint64_t *)&unk_2568B8910);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F9283C();
  v65 = v13;
  v66 = type metadata accessor for CloudAssets_Credential(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v14);
  sub_237F9283C();
  v61 = v15;
  sub_237F9191C(&qword_2568B7720);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v16);
  v18 = sub_237FDAD7C(v17, v53);
  v63 = type metadata accessor for CloudAssets_Asset(v18);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v19);
  sub_237F9283C();
  v62 = v20;
  sub_237F928BC();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v21);
  sub_237FDAE40();
  type metadata accessor for BinaryDecodingOptions();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v22);
  sub_237FA8C88();
  v23 = type metadata accessor for CloudAssets_AssetStreamHandle(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v24);
  sub_237F960FC();
  v25 = (int *)sub_237FDAE0C();
  v26 = v25[8];
  sub_237FDAFFC();
  v27 = sub_237FB8954();
  swift_defaultActor_initialize();
  sub_237F9191C(&qword_2568B8920);
  sub_237FDAF9C();
  sub_237FD34A4();
  *(_QWORD *)(v27 + 112) = Dictionary.init(dictionaryLiteral:)();
  *(_QWORD *)(v70 + v26) = v27;
  sub_237FA3A44(v68);
  BinaryDecodingOptions.init()();
  sub_237FBBB90(&qword_2568B8930, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  Message.init(serializedData:extensions:partial:options:)();
  if (v0)
  {
    sub_237FA38AC();
    swift_release();
  }
  else
  {
    v69 = v1;
    sub_237F96098((uint64_t)v2 + *(int *)(v23 + 28), v64, &qword_2568B7720);
    v28 = v2;
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v64, 1, v63) == 1)
    {
      *v62 = 0;
      UnknownStorage.init()();
      v29 = (char *)v62 + *(int *)(v63 + 24);
      v30 = type metadata accessor for CloudAssets_Asset.ID(0);
      v31 = (uint64_t)v29;
      v28 = v2;
      sub_237FB8160(v31, v32, v33, v30);
      v34 = (uint64_t)v62 + *(int *)(v63 + 28);
      v35 = type metadata accessor for CloudAssets_Asset.Protector(0);
      sub_237FB8160(v34, v36, v37, v35);
      sub_237F96070(v64, &qword_2568B7720);
    }
    else
    {
      sub_237F94734(v64, (uint64_t)v62, type metadata accessor for CloudAssets_Asset);
    }
    sub_237F940E8();
    sub_237F94734(v69, v70, type metadata accessor for Asset);
    sub_237F96098((uint64_t)v28 + *(int *)(v23 + 32), v65, (uint64_t *)&unk_2568B8910);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v65, 1, v66) == 1)
    {
      *v61 = 0;
      v61[1] = 0xE000000000000000;
      v61[2] = 0;
      v61[3] = 0xE000000000000000;
      v61[4] = 0;
      v61[5] = 0xE000000000000000;
      UnknownStorage.init()();
      sub_237FDAF40();
      _s11CloudAssets21UploadResponseMessageOwst_0(v38, v39, v40, v55);
      sub_237F96070(v65, (uint64_t *)&unk_2568B8910);
    }
    else
    {
      sub_237F94734(v65, (uint64_t)v61, type metadata accessor for CloudAssets_Credential);
    }
    v67 = v28;
    v41 = (char *)(v70 + v25[5]);
    v42 = v61[1];
    *(_QWORD *)v41 = *v61;
    *((_QWORD *)v41 + 1) = v42;
    v43 = v61[3];
    *((_QWORD *)v41 + 2) = v61[2];
    *((_QWORD *)v41 + 3) = v43;
    v44 = v61[5];
    *((_QWORD *)v41 + 4) = v61[4];
    *((_QWORD *)v41 + 5) = v44;
    sub_237F96098((uint64_t)v61 + *(int *)(v66 + 32), v54, &qword_2568B7718);
    if (_s11CloudAssets21UploadResponseMessageOwet_0(v54, 1, v55) == 1)
    {
      sub_237FB8A24();
      sub_237FDAD74();
      swift_bridgeObjectRetain();
      v45 = v59;
      Google_Protobuf_Timestamp.init()();
      sub_237F96070(v54, &qword_2568B7718);
      v46 = v60;
    }
    else
    {
      v45 = v59;
      v46 = v60;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 32))(v59, v54, v55);
      sub_237FB8A24();
      sub_237FDAD74();
      swift_bridgeObjectRetain();
    }
    Google_Protobuf_Timestamp.date.getter();
    sub_237F94B38((uint64_t)v61, type metadata accessor for CloudAssets_Credential);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v55);
    v47 = sub_237FA3AE4();
    (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(&v41[*(int *)(v47 + 28)], v56, v58);
    sub_237FA38AC();
    v48 = v67[1];
    v49 = (_QWORD *)(v70 + v25[6]);
    *v49 = *v67;
    v49[1] = v48;
    v51 = v67[2];
    v50 = v67[3];
    swift_bridgeObjectRetain();
    sub_237FB8A24();
    sub_237F94B38((uint64_t)v67, type metadata accessor for CloudAssets_AssetStreamHandle);
    v52 = (_QWORD *)(v70 + v25[7]);
    *v52 = v51;
    v52[1] = v50;
  }
  sub_237F960D8();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  sub_237F96134();
  v38 = v0;
  v2 = v1;
  v31 = v3;
  v33 = sub_237FA3AE4();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v4);
  v6 = sub_237FDACEC(v5, v30);
  v34 = type metadata accessor for Asset(v6);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v7);
  v35 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_237F9191C((uint64_t *)&unk_2568B8980);
  v9 = *(_QWORD *)(v36 - 8);
  MEMORY[0x24BDAC7A8](v36);
  sub_237F982D4();
  v10 = (int *)type metadata accessor for AssetStreamHandle(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v11);
  sub_237F982D4();
  v14 = v13 - v12;
  v16 = *(int *)(v15 + 32);
  sub_237FDAFFC();
  v17 = sub_237FB8954();
  swift_defaultActor_initialize();
  sub_237F9191C(&qword_2568B8920);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  sub_237FD34A4();
  *(_QWORD *)(v17 + 112) = Dictionary.init(dictionaryLiteral:)();
  v37 = v16;
  v39 = v14;
  *(_QWORD *)(v14 + v16) = v17;
  sub_237F9195C(v2, v2[3]);
  sub_237FD93D4();
  v18 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v18)
  {
    sub_237FDB028();
    swift_release();
  }
  else
  {
    v19 = v32;
    v38 = v9;
    sub_237FBBB90(&qword_2568B7558, (void (*)(uint64_t))type metadata accessor for Asset);
    v20 = v35;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v21 = (uint64_t)v20;
    v22 = v39;
    sub_237F94734(v21, v39, type metadata accessor for Asset);
    sub_237FBBB90(&qword_2568B8990, (void (*)(uint64_t))type metadata accessor for Credential);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_237F94734(v19, v22 + v10[5], type metadata accessor for Credential);
    v23 = KeyedDecodingContainer.decode(_:forKey:)();
    v24 = (uint64_t *)(v22 + v10[6]);
    *v24 = v23;
    v24[1] = v25;
    v26 = KeyedDecodingContainer.decode(_:forKey:)();
    v28 = v27;
    sub_237FDACB0();
    v29 = (uint64_t *)(v22 + v10[7]);
    *v29 = v26;
    v29[1] = v28;
    sub_237F94060(v22, v31, type metadata accessor for AssetStreamHandle);
    sub_237FDB028();
    sub_237F94B38(v22, type metadata accessor for AssetStreamHandle);
  }
  sub_237F960D8();
}

uint64_t type metadata accessor for AssetStreamHandle(uint64_t a1)
{
  return sub_237F95A14(a1, qword_2568B89D8);
}

uint64_t type metadata accessor for AssetStreamHandle.RangeReadersCache()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for AssetStreamHandle.RangeReader(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8A28);
}

unint64_t sub_237FD34A4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_2568B8928;
  if (!qword_2568B8928)
  {
    v1 = sub_237F919BC(&qword_2568B8920);
    v2 = MEMORY[0x24BEE1778];
    result = MEMORY[0x23B829E84](MEMORY[0x24BEE1BA0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_2568B8928);
  }
  return result;
}

uint64_t AssetStreamHandle.serializedData()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  sub_237F96134();
  v4 = type metadata accessor for Date();
  v50 = *(_QWORD *)(v4 - 8);
  v51 = v4;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237FDAD9C(v6, v43);
  v7 = type metadata accessor for Google_Protobuf_Timestamp();
  v53 = *(_QWORD *)(v7 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v8);
  v10 = sub_237FDADBC(v9, v44);
  v11 = type metadata accessor for CloudAssets_Credential(v10);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F96188();
  v13 = type metadata accessor for CloudAssets_Asset(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v14);
  v15 = sub_237FDAE40();
  v52 = type metadata accessor for CloudAssets_AssetStreamHandle(v15);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v16);
  sub_237FA8C88();
  *v2 = 0;
  v2[1] = 0xE000000000000000;
  v2[2] = 0;
  v2[3] = 0xE000000000000000;
  UnknownStorage.init()();
  v17 = (uint64_t)v2 + *(int *)(v52 + 28);
  sub_237FDAF40();
  _s11CloudAssets21UploadResponseMessageOwst_0(v18, v19, v20, v13);
  v21 = (uint64_t)v2 + *(int *)(v52 + 32);
  sub_237FDAF40();
  _s11CloudAssets21UploadResponseMessageOwst_0(v22, v23, v24, v11);
  v47 = v0;
  sub_237F94768(v1);
  sub_237F96070(v17, &qword_2568B7720);
  sub_237F94734((uint64_t)v1, v17, type metadata accessor for CloudAssets_Asset);
  _s11CloudAssets21UploadResponseMessageOwst_0(v17, 0, 1, v13);
  v45 = v11;
  v46 = (int *)sub_237FDAE0C();
  v25 = (_QWORD *)(v0 + v46[5]);
  UnknownStorage.init()();
  v26 = (uint64_t)v3 + *(int *)(v11 + 32);
  sub_237FDAF40();
  v27 = v7;
  _s11CloudAssets21UploadResponseMessageOwst_0(v28, v29, v30, v7);
  v31 = v25[1];
  *v3 = *v25;
  v3[1] = v31;
  v32 = v25[3];
  v3[2] = v25[2];
  v3[3] = v32;
  v33 = v25[5];
  v3[4] = v25[4];
  v3[5] = v33;
  v34 = (char *)v25 + *(int *)(sub_237FA3AE4() + 28);
  (*(void (**)(uint64_t, char *, uint64_t))(v50 + 16))(v48, v34, v51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Google_Protobuf_Timestamp.init(date:)();
  sub_237F96070(v26, &qword_2568B7718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32))(v26, v49, v27);
  _s11CloudAssets21UploadResponseMessageOwst_0(v26, 0, 1, v27);
  sub_237F96070(v21, (uint64_t *)&unk_2568B8910);
  sub_237F94734((uint64_t)v3, v21, type metadata accessor for CloudAssets_Credential);
  _s11CloudAssets21UploadResponseMessageOwst_0(v21, 0, 1, v45);
  v35 = (uint64_t *)(v47 + v46[6]);
  v37 = *v35;
  v36 = v35[1];
  sub_237FB8A24();
  swift_bridgeObjectRelease();
  *v2 = v37;
  v2[1] = v36;
  v38 = (uint64_t *)(v47 + v46[7]);
  v40 = *v38;
  v39 = v38[1];
  sub_237FB8A24();
  swift_bridgeObjectRelease();
  v2[2] = v40;
  v2[3] = v39;
  sub_237FBBB90(&qword_2568B8930, (void (*)(uint64_t))type metadata accessor for CloudAssets_AssetStreamHandle);
  v41 = Message.serializedData(partial:)();
  sub_237F94B38((uint64_t)v2, type metadata accessor for CloudAssets_AssetStreamHandle);
  return v41;
}

void static AssetStreamHandle.makeAssetStreamHandle(partition:owner:accessToken:requestorID:signature:referenceSignature:size:assetKey:filenameExtension:applicationID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unint64_t a21,uint64_t a22,unint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  sub_237F96134();
  v62 = v31;
  v61 = v32;
  v58 = v33;
  v59 = v34;
  v36 = v35;
  sub_237FA3AE4();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v37);
  sub_237F982D4();
  v40 = (_QWORD *)(v39 - v38);
  v41 = sub_237F928BC();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v42);
  sub_237F982D4();
  v45 = v44 - v43;
  v46 = (int *)type metadata accessor for Asset.ID(0);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v47);
  sub_237F96188();
  if ((sub_237FD25F8(a25, a26) & 1) != 0)
  {
    sub_237FD8B5C();
    swift_allocError();
    *(_OWORD *)v48 = xmmword_237FEC200;
    *(_BYTE *)(v48 + 16) = 0;
    swift_willThrow();
  }
  else
  {
    v60 = v36;
    v49 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v30, v58, v49);
    v50 = (_QWORD *)(v30 + v46[5]);
    *v50 = v59;
    v50[1] = v61;
    v51 = (uint64_t *)(v30 + v46[6]);
    *v51 = v62;
    v51[1] = a21;
    v52 = (uint64_t *)(v30 + v46[7]);
    *v52 = a22;
    v52[1] = a23;
    sub_237F94060(v30, v45, type metadata accessor for Asset.ID);
    v53 = v45 + *(int *)(v41 + 20);
    *(_QWORD *)v53 = a25;
    *(_QWORD *)(v53 + 8) = a26;
    *(_OWORD *)(v53 + 16) = xmmword_237FE70F0;
    *(_QWORD *)(v45 + *(int *)(v41 + 24)) = a24;
    type metadata accessor for Credential.Builder(0);
    swift_allocObject();
    sub_237FDAD74();
    sub_237F91894(v62, a21);
    sub_237F91894(a22, a23);
    sub_237FA3A44(a25);
    sub_237FA3A44(a25);
    sub_237F91894(0, 0xC000000000000000);
    sub_237FDAD74();
    swift_bridgeObjectRetain();
    Credential.Builder.init(tenantName:requestorID:accessToken:)();
    Credential.Builder.build()(v40);
    swift_release();
    sub_237F94060(v45, v36, type metadata accessor for Asset);
    v54 = (int *)type metadata accessor for AssetStreamHandle(0);
    sub_237F94060((uint64_t)v40, v36 + v54[5], type metadata accessor for Credential);
    v63 = v54[8];
    sub_237FDAFFC();
    v55 = sub_237FB8954();
    swift_bridgeObjectRetain();
    sub_237FDAD74();
    swift_defaultActor_initialize();
    sub_237F9191C(&qword_2568B8920);
    sub_237FDAF9C();
    sub_237FD34A4();
    *(_QWORD *)(v55 + 112) = Dictionary.init(dictionaryLiteral:)();
    sub_237F918D8(a25, a26);
    sub_237F918D8(0, 0xC000000000000000);
    *(_QWORD *)(v60 + v63) = v55;
    v56 = (_QWORD *)(v60 + v54[6]);
    *v56 = a27;
    v56[1] = a28;
    v57 = (_QWORD *)(v60 + v54[7]);
    *v57 = a29;
    v57[1] = a30;
    sub_237F94B38((uint64_t)v40, type metadata accessor for Credential);
    sub_237F94B38(v45, type metadata accessor for Asset);
    sub_237F94B38(v30, type metadata accessor for Asset.ID);
  }
  sub_237F960D8();
}

void AssetStreamHandle.makeAVPlayerItem(with:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSURL *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v49 = a2;
  v3 = sub_237FDB044();
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F9283C();
  v54 = v5;
  v51 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v6);
  sub_237FDAD9C(v7, v47);
  type metadata accessor for DispatchQoS();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v8);
  v10 = sub_237FDACEC(v9, v47);
  v47 = type metadata accessor for AssetStreamHandle(v10);
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v11);
  sub_237F9283C();
  v48 = v12;
  v13 = sub_237F92868();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  sub_237FA8C88();
  sub_237F9191C(&qword_2568B7DA0);
  sub_237F960C8();
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v47 - v19;
  v21 = sub_237F92860();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x24BDAC7A8](v21);
  sub_237F982D4();
  v25 = v24 - v23;
  v26 = sub_237FDAEA4();
  sub_237F96098(v26, v27, &qword_2568B7DA0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v20, 1, v21) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25, v20, v21);
    goto LABEL_5;
  }
  sub_237FDAD50();
  UUID.init()();
  sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
  v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v28);
  sub_237FB88C4();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v2, v13);
  URL.init(string:)();
  sub_237FAC404();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v18, 1, v21) != 1)
  {
    v29 = sub_237FDB004();
    v30(v29);
    sub_237F96070((uint64_t)v20, &qword_2568B7DA0);
LABEL_5:
    v31 = v54;
    v32 = v49;
    v33 = v50;
    v34 = v48;
    v35 = objc_allocWithZone(MEMORY[0x24BDB26C8]);
    sub_237FB8A24();
    v36 = sub_237FDB004();
    v39 = sub_237FD8B98(v36, v37, v38);
    v40 = objc_allocWithZone((Class)sub_237FDAFF0());
    sub_237FDAFE8(v33, v41, type metadata accessor for AssetStreamHandle);
    sub_237FDAD74();
    v42 = sub_237FD90CC(v34, v32, (uint64_t)v35, v40);
    v43 = objc_msgSend(v39, sel_resourceLoader, v47);
    sub_237FDAC0C(0, &qword_2568B8940);
    v44 = v42;
    static DispatchQoS.unspecified.getter();
    v55 = MEMORY[0x24BEE4AF8];
    sub_237FBBB90(&qword_2568B8948, (void (*)(uint64_t))MEMORY[0x24BEE5688]);
    sub_237F9191C(&qword_2568B8950);
    sub_237FDABD8(&qword_2568B8958, &qword_2568B8950);
    sub_237FDAE70();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v52 + 104))(v31, *MEMORY[0x24BEE5750], v53);
    sub_237FDADDC();
    v45 = (void *)sub_237FDAFBC();
    sub_237FDAF4C((uint64_t)v45, sel_setDelegate_queue_);

    v46 = objc_allocWithZone((Class)type metadata accessor for PlayerItem());
    sub_237FD8E30(v39, v44, v46);
    sub_237FA3848();
    return;
  }
  __break(1u);
}

void AssetStreamHandle.makeAVAssetExportSession(with:options:presetName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSURL *v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  void *v38;
  char *v39;
  uint64_t v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v41 = a2;
  v48 = a3;
  v49 = a4;
  v7 = sub_237FDB044();
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v8);
  sub_237FDADBC(v9, v40[0]);
  v44 = type metadata accessor for OS_dispatch_queue.Attributes();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v10);
  sub_237FDACEC(v11, v40[0]);
  type metadata accessor for DispatchQoS();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F9283C();
  v43 = v13;
  v40[0] = sub_237FDAE0C();
  sub_237F960C8();
  MEMORY[0x24BDAC7A8](v14);
  sub_237FDAD7C(v15, v40[0]);
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  sub_237F960FC();
  sub_237F9191C(&qword_2568B7DA0);
  sub_237F960C8();
  v19 = MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)v40 - v22;
  v24 = sub_237F92860();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x24BDAC7A8](v24);
  sub_237FA8C88();
  sub_237F96098(v4, (uint64_t)v23, &qword_2568B7DA0);
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v23, 1, v24) != 1)
  {
    sub_237FC2F98(v5, (uint64_t)v23, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
    goto LABEL_5;
  }
  sub_237FDAD50();
  UUID.init()();
  sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  sub_237FA3AEC();
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v6, v16);
  URL.init(string:)();
  sub_237FAC404();
  if (_s11CloudAssets21UploadResponseMessageOwet_0((uint64_t)v21, 1, v24) != 1)
  {
    sub_237FC2F98(v5, (uint64_t)v21, *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 32));
    sub_237F96070((uint64_t)v23, &qword_2568B7DA0);
LABEL_5:
    v27 = v49;
    v28 = v41;
    v29 = v42;
    v30 = v40[1];
    v31 = objc_allocWithZone(MEMORY[0x24BDB26C8]);
    sub_237FB8A24();
    v33 = sub_237FD8B98(v5, v28, v32);
    v34 = objc_allocWithZone((Class)sub_237FDAFF0());
    sub_237F94060(v29, v30, type metadata accessor for AssetStreamHandle);
    sub_237FDAD74();
    v35 = sub_237FD90CC(v30, v28, (uint64_t)v31, v34);
    v36 = objc_msgSend(v33, sel_resourceLoader);
    sub_237FDAC0C(0, &qword_2568B8940);
    v37 = v35;
    static DispatchQoS.unspecified.getter();
    v50 = MEMORY[0x24BEE4AF8];
    sub_237FBBB90(&qword_2568B8948, (void (*)(uint64_t))MEMORY[0x24BEE5688]);
    sub_237F9191C(&qword_2568B8950);
    sub_237FDABD8(&qword_2568B8958, &qword_2568B8950);
    sub_237FDAE70();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v47, *MEMORY[0x24BEE5750], v46);
    sub_237FDADDC();
    v38 = (void *)sub_237FDAFBC();
    sub_237FDAF4C((uint64_t)v38, sel_setDelegate_queue_);

    v39 = (char *)objc_allocWithZone((Class)type metadata accessor for AssetExportSession());
    swift_bridgeObjectRetain();
    sub_237FD9324(v33, v48, v27, v37, v39);
    sub_237FA3848();
    return;
  }
  __break(1u);
}

uint64_t AssetStreamHandle.encode(to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[16];

  v1 = sub_237F9191C(&qword_2568B8960);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = (_QWORD *)sub_237FDAEA4();
  sub_237F9195C(v5, v6);
  sub_237FD93D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  sub_237F928BC();
  sub_237FBBB90(qword_2568B8970, (void (*)(uint64_t))type metadata accessor for Asset);
  sub_237F994A0();
  if (!v0)
  {
    sub_237FDAE0C();
    v8[14] = 1;
    sub_237FA3AE4();
    sub_237FBBB90(&qword_2568B77C0, (void (*)(uint64_t))type metadata accessor for Credential);
    sub_237F994A0();
    v8[13] = 2;
    sub_237FDAF6C();
    v8[12] = 3;
    sub_237FDAF6C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_237FD484C()
{
  AssetStreamHandle.init(from:)();
}

uint64_t sub_237FD4860()
{
  return AssetStreamHandle.encode(to:)();
}

uint64_t sub_237FD4874()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  sub_237FAC0E4(v0, qword_2568B88F0);
  sub_237FABF5C(v0, (uint64_t)qword_2568B88F0);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  sub_237F9191C(&qword_2568B8A68);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

uint64_t sub_237FD490C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSURL *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v19;
  _QWORD v20[2];
  id v21[2];

  v20[1] = a1;
  v21[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = type metadata accessor for URL();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_defaultManager);
  v21[0] = 0;
  v7 = objc_msgSend(v6, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 13, 1, 0, 0, v21);

  v8 = v21[0];
  if (v7)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();
    v9 = v8;

    v10 = objc_msgSend(v5, sel_defaultManager);
    URL._bridgeToObjectiveC()(v11);
    v13 = v12;
    v21[0] = 0;
    v14 = objc_msgSend(v10, sel_URLForDirectory_inDomain_appropriateForURL_create_error_, 99, 1, v12, 1, v21);

    v15 = v21[0];
    if (v14)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

    }
    else
    {
      v19 = v21[0];
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    v17 = v21[0];
    _convertNSErrorToError(_:)();

    return swift_willThrow();
  }
}

uint64_t sub_237FD4B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v59 = a6;
  v7 = v6;
  v13 = type metadata accessor for URL.DirectoryHint();
  v55 = *(_QWORD *)(v13 - 8);
  v56 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v53 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL();
  v57 = *(_QWORD *)(v15 - 8);
  v58 = v15;
  v16 = MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v54 = (char *)&v51 - v19;
  swift_defaultActor_initialize();
  v20 = v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset;
  v61 = a1;
  sub_237F94060(a1, v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, type metadata accessor for Asset);
  v21 = (_QWORD *)(v6
                 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range);
  v51 = a2;
  v52 = a3;
  *v21 = a2;
  v21[1] = a3;
  v22 = v6
      + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential;
  v62 = a4;
  sub_237F94060(a4, v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential, type metadata accessor for Credential);
  v23 = (_QWORD *)(v6
                 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_applicationID);
  v24 = v59;
  v25 = v60;
  *v23 = a5;
  v23[1] = v24;
  v59 = v18;
  sub_237FD490C((uint64_t)v18);
  if (v25)
  {
    sub_237F94B38(v20, type metadata accessor for Asset);
    sub_237F94B38(v22, type metadata accessor for Credential);
    swift_bridgeObjectRelease();
    type metadata accessor for AssetStreamHandle.RangeReader(0);
    swift_defaultActor_destroy();
    sub_237F94B38(v62, type metadata accessor for Credential);
    sub_237F94B38(v61, type metadata accessor for Asset);
    swift_deallocPartialClassInstance();
  }
  else
  {
    v26 = type metadata accessor for Asset.ID(0);
    v27 = v61;
    sub_237FD2644(*(_QWORD *)(v61 + *(int *)(v26 + 24)), *(_QWORD *)(v61 + *(int *)(v26 + 24) + 8));
    v64 = v28;
    sub_237F9191C(&qword_2568B79B8);
    sub_237FDABD8(qword_2568B8AC0, &qword_2568B79B8);
    v29 = BidirectionalCollection<>.joined(separator:)();
    v31 = v30;
    swift_bridgeObjectRelease();
    v64 = v29;
    v65 = v31;
    v32._countAndFlagsBits = 95;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    sub_237FD2644(*(_QWORD *)(v27 + *(int *)(v26 + 28)), *(_QWORD *)(v27 + *(int *)(v26 + 28) + 8));
    v63 = v33;
    v34 = BidirectionalCollection<>.joined(separator:)();
    v36 = v35;
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = v34;
    v37._object = v36;
    String.append(_:)(v37);
    swift_bridgeObjectRelease();
    v38._countAndFlagsBits = 95;
    v38._object = (void *)0xE100000000000000;
    String.append(_:)(v38);
    v63 = v51;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v40._countAndFlagsBits = 95;
    v40._object = (void *)0xE100000000000000;
    String.append(_:)(v40);
    v63 = v52;
    v41._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v41);
    swift_bridgeObjectRelease();
    v43 = v55;
    v42 = v56;
    v44 = v53;
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v53, *MEMORY[0x24BDCD7A0], v56);
    sub_237F93C14();
    v45 = v54;
    v46 = v59;
    URL.appending<A>(component:directoryHint:)();
    sub_237F94B38(v62, type metadata accessor for Credential);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v42);
    swift_bridgeObjectRelease();
    v47 = v57;
    v48 = v46;
    v49 = v58;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v48, v58);
    sub_237F94B38(v27, type metadata accessor for Asset);
    (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v7+ OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL, v45, v49);
    *(_QWORD *)(v7
              + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState) = 0;
  }
  return v7;
}

uint64_t sub_237FD4F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  os_log_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38[2];

  v2 = v0;
  v38[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for Asset(0);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_237FDAC0C(0, (unint64_t *)&qword_2568B8A88);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v2+ OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL, v6);
  v11 = (uint64_t)v9;
  v12 = (id)v10;
  v13 = sub_237FDFDB8(v11);
  if (v1)
    return (uint64_t)v12;
  v14 = v2 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range;
  v15 = *(_QWORD *)(v2
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range);
  if ((v15 & 0x8000000000000000) == 0)
  {
    v38[0] = 0;
    v36 = v13;
    if (!objc_msgSend(v13, sel_seekToOffset_error_, v15, v38))
    {
      v12 = v38[0];
      _convertNSErrorToError(_:)();

LABEL_10:
      swift_willThrow();

      return (uint64_t)v12;
    }
    v35 = *(_QWORD *)(v14 + 8);
    if (__OFSUB__(v35, v15))
    {
      __break(1u);
    }
    else
    {
      v16 = v38[0];
      v17 = NSFileHandle.read(upToCount:)();
      if (v18 >> 60 != 15)
      {
        v12 = (id)v17;

        return (uint64_t)v12;
      }
      if (qword_2568B73C0 == -1)
        goto LABEL_7;
    }
    swift_once();
LABEL_7:
    v19 = type metadata accessor for Logger();
    sub_237FABF5C(v19, (uint64_t)qword_2568B88F0);
    swift_retain_n();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    v12 = (id)v21;
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc();
      v34 = (void *)swift_slowAlloc();
      v38[0] = v34;
      *(_DWORD *)v22 = 136315650;
      v33 = v20;
      v31[1] = v22 + 4;
      sub_237FBBB90(&qword_2568B8A90, (void (*)(uint64_t))MEMORY[0x24BDCDAC0]);
      v32 = (int)v12;
      v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v37 = sub_237FAB354(v23, v24, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 12) = 2080;
      v25 = sub_237FDAAA0();
      v37 = sub_237FAB354(v25, v26, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v22 + 22) = 2080;
      sub_237F94060(v2 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, (uint64_t)v5, type metadata accessor for Asset);
      v27 = String.init<A>(describing:)();
      v37 = sub_237FAB354(v27, v28, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      v20 = v33;
      _os_log_impl(&dword_237F8F000, v33, (os_log_type_t)v32, "read from %s for range %s of asset %s failed", (uint8_t *)v22, 0x20u);
      v12 = v34;
      swift_arrayDestroy();
      MEMORY[0x23B829F2C](v12, -1, -1);
      MEMORY[0x23B829F2C](v22, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    sub_237FD8B5C();
    swift_allocError();
    *(_QWORD *)v30 = 0xD000000000000027;
    *(_QWORD *)(v30 + 8) = 0x8000000237FE4040;
    *(_BYTE *)(v30 + 16) = 2;
    goto LABEL_10;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_237FD5430()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = *v0;
  v2 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v4, 1, 1, v5);
  sub_237FBBB90(&qword_2568B8A78, (void (*)(uint64_t))type metadata accessor for AssetStreamHandle.RangeReader);
  v7 = v6;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v0;
  v8[3] = v7;
  v8[4] = v0;
  v8[5] = v1;
  swift_retain_n();
  sub_237FAEFB0((uint64_t)v4, (uint64_t)&unk_2568B8A80, (uint64_t)v8);
}

uint64_t sub_237FD5514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[11] = a1;
  v4[12] = a4;
  v4[13] = type metadata accessor for AssetDownloadResponse();
  v4[14] = swift_task_alloc();
  v5 = type metadata accessor for UUID();
  v4[15] = v5;
  v4[16] = *(_QWORD *)(v5 - 8);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  type metadata accessor for Credential(0);
  v4[22] = swift_task_alloc();
  v6 = type metadata accessor for URL();
  v4[23] = v6;
  v4[24] = *(_QWORD *)(v6 - 8);
  v4[25] = swift_task_alloc();
  v4[26] = type metadata accessor for Asset(0);
  v4[27] = swift_task_alloc();
  v4[28] = type metadata accessor for AssetDownloadRequest();
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FD56A4()
{
  _QWORD *v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(_QWORD, _QWORD);
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v1 = v0[29];
  v47 = v0[30];
  v2 = (int *)v0[28];
  v3 = v0[24];
  v4 = v0[25];
  v43 = v4;
  v45 = v3;
  v5 = (uint64_t *)v0[22];
  v40 = v0[27];
  v41 = v0[23];
  v49 = v0[21];
  v46 = v0[16];
  v48 = v0[15];
  v6 = v0[12];
  v7 = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset;
  v0[31] = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset;
  v38 = v6 + v7;
  sub_237F94060(v6 + v7, v40, type metadata accessor for Asset);
  v8 = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL;
  v0[32] = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL;
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  sub_237FC2F98(v4, v6 + v8, v42);
  sub_237F94060(v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential, (uint64_t)v5, type metadata accessor for Credential);
  v9 = v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range;
  v10 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_range);
  v0[33] = v10;
  v11 = *(_QWORD *)(v9 + 8);
  v0[34] = v11;
  v12 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_applicationID
                  + 8);
  v39 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_applicationID);
  swift_bridgeObjectRetain();
  UUID.init()();
  v14 = *v5;
  v13 = v5[1];
  v15 = (uint64_t *)(v1 + v2[5]);
  *v15 = *v5;
  v15[1] = v13;
  swift_bridgeObjectRetain();
  sub_237F99720(v14, v13);
  sub_237F94060(v40, v1 + v2[7], type metadata accessor for Asset);
  v16 = v1 + v2[8];
  *(_QWORD *)v16 = v10;
  *(_QWORD *)(v16 + 8) = v11;
  *(_BYTE *)(v16 + 16) = 0;
  v42(v1 + v2[9], v43, v41);
  sub_237F94060((uint64_t)v5, v1 + v2[10], type metadata accessor for Credential);
  v17 = (_QWORD *)(v1 + v2[13]);
  *v17 = v39;
  v17[1] = v12;
  *(_OWORD *)(v1 + v2[11]) = xmmword_237FE70F0;
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v41);
  sub_237F94B38(v40, type metadata accessor for Asset);
  sub_237F94B38((uint64_t)v5, type metadata accessor for Credential);
  *(_OWORD *)(v1 + v2[12]) = xmmword_237FE70F0;
  sub_237F94734(v1, v47, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16);
  v0[35] = v18;
  v18(v49, v47, v48);
  if (qword_2568B73C0 != -1)
    swift_once();
  v19 = v0[20];
  v20 = v0[21];
  v21 = v0[15];
  v22 = sub_237FAC474();
  v0[36] = sub_237FABF5C(v22, (uint64_t)qword_2568B88F0);
  v18(v19, v20, v21);
  sub_237FDADFC();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = v0[20];
    v26 = v0[15];
    v44 = v0[16];
    v27 = sub_237FAC3E4();
    sub_237FAC3E4();
    *(_DWORD *)v27 = 136315650;
    sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v28 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_237FDAFB4(v28, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v25, v26);
    sub_237FDAF04();
    v30 = sub_237FDAAA0();
    v0[9] = sub_237FDAFB4(v30, v31);
    sub_237FB8014();
    sub_237FDACC4();
    sub_237FDAD48();
    *(_WORD *)(v27 + 22) = (_WORD)v0 + 64;
    sub_237FDAED4(v38, v32, type metadata accessor for Asset);
    v33 = String.init<A>(describing:)();
    v0[10] = sub_237FDAFB4(v33, v34);
    sub_237FB8014();
    sub_237FDACC4();
    sub_237FB89E0();
    sub_237FDAD2C(&dword_237F8F000, v23, v24, "[requestID = %s] start downloading range %s of asset %s", (uint8_t *)v27);
    sub_237FDACE0();
    sub_237FAC3D8();
  }
  v35 = *(void (**)(_QWORD, _QWORD))(v0[16] + 8);
  v35(v0[20], v0[15]);

  sub_237FDAE04();
  v0[37] = v35;
  if (qword_2568B73B8 != -1)
    swift_once();
  v36 = (_QWORD *)swift_task_alloc();
  v0[38] = v36;
  *v36 = v0;
  v36[1] = sub_237FD5BB0;
  return AssetManager.process(request:)(v0[14], v0[30]);
}

uint64_t sub_237FD5BB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_237FDAE1C();
  *v3 = *v2;
  *(_QWORD *)(v0 + 312) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

void sub_237FD5C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t);
  void *v36;
  id v37;
  uint64_t countAndFlagsBits;
  void *v39;
  unsigned int v40;
  id v41;
  NSURL *v42;
  void *v43;
  void *v44;
  unsigned int v45;
  void *v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  const char *v82;
  id v83;
  void *v84;
  uint64_t (*v85)(uint64_t, _QWORD);
  uint64_t v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  os_log_type_t v115;
  void (*v116)(uint64_t);

  v2 = *(_QWORD *)(v0 + 312);
  sub_237FDAF7C();
  sub_237FDFEC4();
  if (!v2)
  {
    v1 = v0 + 32;
    v4 = (uint64_t *)(*(_QWORD *)(v0 + 112) + *(int *)(*(_QWORD *)(v0 + 104) + 28));
    if (*((_BYTE *)v4 + 16) == 1)
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 120));
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.error.getter();
      if (sub_237FAC4D0(v5))
      {
        v116 = *(void (**)(uint64_t))(v0 + 296);
        v7 = (uint8_t *)swift_slowAlloc();
        sub_237FAC3E4();
        *(_DWORD *)v7 = 136315138;
        sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v8 = sub_237FDAE84();
        *(_QWORD *)(v0 + 24) = sub_237FDACA8(v8, v9, v10, v11, v12, v13, v14, v15, v96, v99, v103, v107, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_237FDAD48();
        v16 = sub_237FDAEA4();
        v116(v16);
        _os_log_impl(&dword_237F8F000, v5, v6, "[requestID = %s] missing range information in download response", v7, 0xCu);
        swift_arrayDestroy();
        sub_237FAC3D8();
      }
      v34 = sub_237FDAEA4();
      v35(v34);

      sub_237FDAF7C();
      v36 = (void *)objc_opt_self();
      v37 = objc_msgSend(v36, sel_defaultManager);
      countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
      v39 = (void *)MEMORY[0x23B829578](countAndFlagsBits);
      sub_237FAC404();
      v40 = objc_msgSend(v37, sel_fileExistsAtPath_, v39);

      if (v40)
      {
        sub_237FDAF7C();
        v41 = objc_msgSend(v36, sel_defaultManager);
        URL._bridgeToObjectiveC()(v42);
        v44 = v43;
        *(_QWORD *)(v0 + 16) = 0;
        v45 = objc_msgSend(v41, sel_removeItemAtURL_error_, v43, v0 + 16);

        v46 = *(void **)(v0 + 16);
        if (v45)
        {
          v47 = v46;
        }
        else
        {
          v83 = v46;
          v84 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
        }
      }
      sub_237FD8B5C();
      sub_237F96460();
      v81 = 0xD00000000000002ELL;
      v82 = "missing range information in download response";
    }
    else
    {
      v17 = *v4;
      v18 = v4[1];
      v19 = *(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 280);
      v20 = *(_QWORD *)(v0 + 168);
      v21 = *(_QWORD *)(v0 + 120);
      if (*(_QWORD *)(v0 + 264) >= v17 && v18 >= *(_QWORD *)(v0 + 272))
      {
        v19(*(_QWORD *)(v0 + 144), v20, v21);
        swift_retain_n();
        v48 = Logger.logObject.getter();
        v49 = static os_log_type_t.default.getter();
        v50 = os_log_type_enabled(v48, v49);
        v51 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
        if (v50)
        {
          v108 = *(_QWORD *)(v0 + 216);
          v112 = *(_QWORD *)(v0 + 208);
          v115 = v49;
          v52 = *(_QWORD *)(v0 + 144);
          v53 = *(_QWORD *)(v0 + 120);
          v104 = *(_QWORD *)(v0 + 96) + *(_QWORD *)(v0 + 248);
          v54 = sub_237FAC3E4();
          sub_237FAC3E4();
          *(_DWORD *)v54 = 136315650;
          sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
          v55 = dispatch thunk of CustomStringConvertible.description.getter();
          *(_QWORD *)(v0 + 32) = sub_237FDACA8(v55, v56, v57, v58, v59, v60, v61, v62, v0 + 48, (uint64_t)v48, v104, v108, v112);
          sub_237FDB03C();
          sub_237FB88C4();
          v51(v52, v53);
          *(_WORD *)(v54 + 12) = 2080;
          v63 = sub_237FDAAA0();
          *(_QWORD *)(v0 + 40) = sub_237FDACA8(v63, v64, v65, v66, v67, v68, v69, v70, v97, v100, v105, v109, v113);
          sub_237FB8014();
          sub_237FB89E0();
          *(_WORD *)(v54 + 22) = 2080;
          sub_237FDAED4(v106, v71, type metadata accessor for Asset);
          v72 = String.init<A>(describing:)();
          *(_QWORD *)(v0 + 48) = sub_237FDACA8(v72, v73, v74, v75, v76, v77, v78, v79, v98, v101, v106, v110, v114);
          sub_237FB8014();
          sub_237FDACC4();
          sub_237FB89E0();
          sub_237FDAD2C(&dword_237F8F000, v102, v115, "[requestID = %s] downloaded range %s of asset %s", (uint8_t *)v54);
          sub_237FDACE0();
          sub_237FAC3D8();
        }
        v51(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));

        sub_237FDACC4();
        v88 = sub_237FD4F50();
        v90 = v89;
        v91 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
        v92 = *(_QWORD *)(v0 + 240);
        v93 = *(_QWORD *)(v0 + 168);
        v94 = *(_QWORD *)(v0 + 120);
        v95 = *(uint64_t **)(v0 + 88);
        sub_237F94B38(*(_QWORD *)(v0 + 112), (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
        v91(v93, v94);
        sub_237F94B38(v92, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
        *v95 = v88;
        v95[1] = v90;
        sub_237FAC464();
        sub_237FB7AFC();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_237FA45D4();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        sub_237FAC46C();
LABEL_22:
        sub_237FDAF24();
        __asm { BR              X0 }
      }
      v19(*(_QWORD *)(v0 + 136), v20, v21);
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.error.getter();
      if (sub_237FAC4D0(v23))
      {
        v25 = (uint8_t *)sub_237FAC3E4();
        sub_237FAC3E4();
        *(_DWORD *)v25 = 136315138;
        sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v26 = sub_237FDAE84();
        *(_QWORD *)(v0 + 56) = sub_237FDACA8(v26, v27, v28, v29, v30, v31, v32, v33, v96, v99, v103, v107, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_237FDB01C();
        _os_log_impl(&dword_237F8F000, v23, v24, "[requestID = %s] downloaded range is smaller than needed range", v25, 0xCu);
        sub_237FDAE34();
        sub_237FAC3D8();
      }
      sub_237FDB01C();

      sub_237FD8B5C();
      sub_237F96460();
      v81 = 0xD00000000000002DLL;
      v82 = "downloaded range is smaller than needed range";
    }
    *(_QWORD *)v80 = v81;
    *(_QWORD *)(v80 + 8) = (unint64_t)(v82 - 32) | 0x8000000000000000;
    *(_BYTE *)(v80 + 16) = 2;
    v3 = swift_willThrow();
  }
  sub_237FDAEB0(v3, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadResponse);
  sub_237FDAEB8();
  v86 = v85(v1, *(_QWORD *)(v0 + 120));
  sub_237FDAEB0(v86, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB7FB0();
  sub_237FAC46C();
  swift_task_dealloc();
  swift_task_dealloc();
  goto LABEL_22;
}

uint64_t sub_237FD6410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  sub_237FDAEB8();
  v3 = v2(v1, *(_QWORD *)(v0 + 120));
  sub_237FDAEB0(v3, (uint64_t (*)(_QWORD))type metadata accessor for AssetDownloadRequest);
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  sub_237FB7C6C();
  sub_237FB7FB0();
  sub_237FAC46C();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FD64E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[21] = a1;
  v2[22] = v1;
  v2[23] = type metadata accessor for Asset(0);
  v2[24] = swift_task_alloc();
  v3 = type metadata accessor for UUID();
  v2[25] = v3;
  v2[26] = *(_QWORD *)(v3 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FD65A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t, uint64_t);
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v112;
  unint64_t v113;
  _QWORD *v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;

  v2 = v0[22];
  v3 = OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState;
  v4 = *(_QWORD *)(v2
                 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState);
  v0[32] = v4;
  if (v4)
  {
    if (v4 == 1)
    {
      if (qword_2568B73C0 != -1)
        swift_once();
      v5 = v0[28];
      v7 = v0[25];
      v6 = v0[26];
      v8 = v0[21];
      v9 = sub_237FAC474();
      sub_237FABF5C(v9, (uint64_t)qword_2568B88F0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      sub_237FDADFC();
      v10 = Logger.logObject.getter();
      v11 = static os_log_type_t.default.getter();
      if (sub_237FAC4D0(v10))
      {
        v132 = v0[24];
        v139 = v0[23];
        HIDWORD(v123) = v11;
        v12 = v0[22];
        v13 = sub_237FAC3E4();
        v156 = sub_237FAC3E4();
        *(_DWORD *)v13 = 136315650;
        sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
        v14 = sub_237FDAE84();
        v0[8] = sub_237FDACA8(v14, v15, v16, v17, v18, v19, v20, v21, (uint64_t)(v0 + 10), v123, v132, v139, v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        sub_237FB88C4();
        sub_237FDAF8C();
        *(_WORD *)(v13 + 12) = 2080;
        v22 = sub_237FDAE2C();
        v0[9] = sub_237FDACA8(v22, v23, v24, v25, v26, v27, v28, v29, v117, v124, v133, v140, v147);
        sub_237FB8014();
        sub_237FDACC4();
        sub_237FB88C4();
        *(_WORD *)(v13 + 22) = 2080;
        sub_237FDAED4(v12 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v30, type metadata accessor for Asset);
        v31 = String.init<A>(describing:)();
        v0[10] = sub_237FDACA8(v31, v32, v33, v34, v35, v36, v37, v38, v118, v125, v134, v141, v148);
        sub_237FB8014();
        sub_237FDACC4();
        sub_237FB88C4();
        sub_237FDAD2C(&dword_237F8F000, v10, v130, "[requestID = %s] range %s of asset %s available in cache", (uint8_t *)v13);
        sub_237FDACE0();
        sub_237FAC3D8();
      }
      sub_237FDAF8C();

      sub_237FDAE04();
      sub_237FD4F50();
      sub_237FDB010();
      sub_237FA45D4();
      sub_237FAC464();
      sub_237FB7B18();
      sub_237FB7AFC();
      sub_237FB7B3C();
      sub_237FDAF24();
      __asm { BR              X2 }
    }
    v75 = qword_2568B73C0;
    swift_retain();
    if (v75 != -1)
      swift_once();
    v76 = v0[30];
    v78 = v0[25];
    v77 = v0[26];
    v79 = v0[21];
    v80 = sub_237FAC474();
    v0[33] = sub_237FABF5C(v80, (uint64_t)qword_2568B88F0);
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
    v0[34] = v81;
    v81(v76, v79, v78);
    sub_237FDADFC();
    v82 = Logger.logObject.getter();
    v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = v0[22];
      v154 = v0[24];
      v85 = sub_237FAC3E4();
      sub_237FAC3E4();
      *(_DWORD *)v85 = 136315650;
      sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v86 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[15] = sub_237FDACA8(v86, v87, v88, v89, v90, v91, v92, v93, v116, v123, v131, (uint64_t)(v0 + 15), (uint64_t)(v0 + 17));
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_237FDAD48();
      sub_237FDAF5C();
      *(_WORD *)(v85 + 12) = 2080;
      v94 = sub_237FDAE2C();
      v0[16] = sub_237FDACA8(v94, v95, v96, v97, v98, v99, v100, v101, v121, v128, v137, v145, v152);
      sub_237FB8014();
      sub_237FDACC4();
      sub_237FDAD48();
      *(_WORD *)(v85 + 22) = 2080;
      sub_237F94060(v84 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v154, type metadata accessor for Asset);
      v102 = String.init<A>(describing:)();
      v0[17] = sub_237FDACA8(v102, v103, v104, v105, v106, v107, v108, v109, v122, v129, v138, v146, v153);
      sub_237FB8014();
      sub_237FDACC4();
      sub_237FDAD48();
      sub_237FDAD2C(&dword_237F8F000, v82, v83, "[requestID = %s] downloading range %s of asset %s", (uint8_t *)v85);
      sub_237FDACE0();
      sub_237FAC3D8();
    }
    sub_237FDAF5C();

    sub_237FDAE04();
    v0[35] = v1;
    v110 = (_QWORD *)swift_task_alloc();
    v0[36] = v110;
    sub_237F9191C(&qword_2568B8A60);
    *v110 = v0;
    v110[1] = sub_237FD6FFC;
  }
  else
  {
    v155 = v3;
    if (qword_2568B73C0 != -1)
      swift_once();
    v39 = v0[21];
    v40 = v0[31];
    v42 = v0[25];
    v41 = v0[26];
    v43 = sub_237FAC474();
    sub_237FABF5C(v43, (uint64_t)qword_2568B88F0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v40, v39, v42);
    sub_237FDADFC();
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.default.getter();
    v46 = os_log_type_enabled(v44, v45);
    v47 = v0[26];
    if (v46)
    {
      v149 = v0[24];
      v48 = v0[22];
      v49 = sub_237FAC3E4();
      sub_237FAC3E4();
      *(_DWORD *)v49 = 136315650;
      sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
      v50 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[18] = sub_237FDACA8(v50, v51, v52, v53, v54, v55, v56, v57, v116, v123, (uint64_t)(v0 + 20), (uint64_t)v44, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_237FA3C74();
      sub_237FDAEE4();
      sub_237FDAF04();
      v58 = sub_237FDAE2C();
      v0[19] = sub_237FDACA8(v58, v59, v60, v61, v62, v63, v64, v65, v119, v126, v135, v142, v150);
      sub_237FB8014();
      sub_237FDACC4();
      sub_237FDAD48();
      *(_WORD *)(v49 + 22) = v47;
      sub_237FDAED4(v48 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v66, type metadata accessor for Asset);
      v67 = sub_237FDB030();
      v0[20] = sub_237FDACA8(v67, v68, v69, v70, v71, v72, v73, v74, v120, v127, v136, v143, v151);
      sub_237FB8014();
      sub_237FDACC4();
      sub_237FDAD48();
      sub_237FDAD2C(&dword_237F8F000, v144, v45, "[requestID = %s] ready to download range %s of asset (%s", (uint8_t *)v49);
      sub_237FDACE0();
      sub_237FAC3D8();
    }
    sub_237FDAEE4();

    sub_237FDAE04();
    sub_237FD5430();
    v0[38] = v112;
    v113 = *(_QWORD *)(v2 + v155);
    *(_QWORD *)(v2 + v155) = v112;
    swift_retain();
    sub_237FDAA90(v113);
    v114 = (_QWORD *)swift_task_alloc();
    v0[39] = v114;
    sub_237F9191C(&qword_2568B8A60);
    *v114 = v0;
    v114[1] = sub_237FD72E4;
  }
  sub_237FDAF24();
  return Task.value.getter();
}

uint64_t sub_237FD6FFC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_237FDAE1C();
  *v3 = *v2;
  *(_QWORD *)(v0 + 296) = v1;
  swift_task_dealloc();
  return sub_237FDACA0();
}

uint64_t sub_237FD7054()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  sub_237FB8690();
  v1 = *(_QWORD *)(v0 + 40);
  v40 = *(_QWORD *)(v0 + 32);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 272))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 200));
  sub_237FDADFC();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 232);
    v5 = *(_QWORD *)(v0 + 200);
    v34 = *(_QWORD *)(v0 + 280);
    v37 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 176);
    v7 = sub_237FAC3E4();
    sub_237FAC3E4();
    *(_DWORD *)v7 = 136315650;
    sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(_QWORD *)(v0 + 96) = sub_237FDAE5C(v8, v9, v10, v11, v12, v13, v14, v15, v34, v37);
    sub_237FDAEA4();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v35(v4, v5);
    *(_WORD *)(v7 + 12) = 2080;
    v16 = sub_237FDAE2C();
    *(_QWORD *)(v0 + 104) = sub_237FDAE5C(v16, v17, v18, v19, v20, v21, v22, v23, (uint64_t)v35, v38);
    sub_237FDB03C();
    sub_237FB88C4();
    sub_237FDACC4();
    *(_WORD *)(v7 + 22) = 2080;
    sub_237F94060(v6 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, v39, type metadata accessor for Asset);
    v24 = String.init<A>(describing:)();
    *(_QWORD *)(v0 + 112) = sub_237FDAE5C(v24, v25, v26, v27, v28, v29, v30, v31, v36, v39);
    sub_237FDB03C();
    sub_237FB88C4();
    sub_237FDACC4();
    sub_237FDAD2C(&dword_237F8F000, v2, v3, "[requestID = %s] downloaded range %s of asset %s", (uint8_t *)v7);
    sub_237FDACE0();
    sub_237FAC3D8();
  }
  v32 = *(_QWORD *)(v0 + 256);
  (*(void (**)(_QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 200));
  sub_237FDAE04();
  sub_237FDAA90(v32);

  swift_task_dealloc();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v40, v1);
}

uint64_t sub_237FD72E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;

  sub_237FDAE1C();
  *v3 = *v2;
  *(_QWORD *)(v0 + 320) = v1;
  swift_task_dealloc();
  return sub_237FDACA0();
}

uint64_t sub_237FD733C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  sub_237FDB010();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  sub_237FB7B3C();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_237FD73B4()
{
  uint64_t v0;

  sub_237FDAA90(*(_QWORD *)(v0 + 256));
  sub_237FDAE90();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  return sub_237FDAD34(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FD7400()
{
  uint64_t v0;

  swift_release();
  sub_237FDAE90();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  return sub_237FDAD34(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FD744C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t countAndFlagsBits;
  void *v6;
  unsigned int v7;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v18[2];

  v1 = v0;
  v18[1] = *(id *)MEMORY[0x24BDAC8D0];
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_defaultManager);
  v4 = v0
     + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cachedDataURL;
  countAndFlagsBits = URL.path(percentEncoded:)(1)._countAndFlagsBits;
  v6 = (void *)MEMORY[0x23B829578](countAndFlagsBits);
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v3, sel_fileExistsAtPath_, v6);

  if (v7)
  {
    v8 = objc_msgSend(v2, sel_defaultManager);
    URL._bridgeToObjectiveC()(v9);
    v11 = v10;
    v18[0] = 0;
    v12 = objc_msgSend(v8, sel_removeItemAtURL_error_, v10, v18);

    if (v12)
    {
      v13 = v18[0];
    }
    else
    {
      v14 = v18[0];
      v15 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  sub_237F94B38(v1 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_asset, type metadata accessor for Asset);
  sub_237F94B38(v1 + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_credential, type metadata accessor for Credential);
  swift_bridgeObjectRelease();
  v16 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v4, v16);
  sub_237FDAA90(*(_QWORD *)(v1
                          + OBJC_IVAR____TtCV11CloudAssets17AssetStreamHandleP33_8A8CF1A1AB92A9609CD6E8B040939DD611RangeReader_cacheState));
  swift_defaultActor_destroy();
  return v1;
}

uint64_t sub_237FD7624()
{
  sub_237FD744C();
  return swift_defaultActor_deallocate();
}

uint64_t AssetStreamHandle.size.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(sub_237F928BC() + 24));
}

uint64_t AssetStreamHandle.range.getter()
{
  uint64_t v0;
  uint64_t result;

  result = sub_237F928BC();
  if ((*(_QWORD *)(v0 + *(int *)(result + 24)) & 0x8000000000000000) == 0)
    return 0;
  __break(1u);
  return result;
}

uint64_t sub_237FD767C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = result - result % 5242880;
  if (__OFSUB__(result, result % 5242880))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = a2 % 5242880;
  if (!(a2 % 5242880))
  {
LABEL_8:
    if (a2 >= v3)
      return v3;
    goto LABEL_11;
  }
  v5 = a2 + 5242880;
  if (__OFADD__(a2, 5242880))
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v6 = v5 - v4;
  if (!__OFSUB__(v5, v4))
  {
    result = type metadata accessor for Asset(0);
    if (*(_QWORD *)(v2 + *(int *)(result + 24)) >= v6)
      a2 = v6;
    else
      a2 = *(_QWORD *)(v2 + *(int *)(result + 24));
    goto LABEL_8;
  }
LABEL_13:
  __break(1u);
  return result;
}

char *sub_237FD7704(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a1 >= a2)
  {
    return (char *)MEMORY[0x24BEE4AF8];
  }
  else
  {
    v3 = a1;
    result = sub_237FD8C54(0, 1, 1, MEMORY[0x24BEE4AF8]);
    v5 = (uint64_t)result;
    while (1)
    {
      v6 = v3 + 5242880;
      if (__OFADD__(v3, 5242880))
        break;
      if (v6 >= a2)
        v7 = a2;
      else
        v7 = v3 + 5242880;
      if (v7 < v3)
        goto LABEL_15;
      v9 = *(_QWORD *)(v5 + 16);
      v8 = *(_QWORD *)(v5 + 24);
      if (v9 >= v8 >> 1)
      {
        result = sub_237FD8C54((char *)(v8 > 1), v9 + 1, 1, v5);
        v5 = (uint64_t)result;
      }
      *(_QWORD *)(v5 + 16) = v9 + 1;
      v10 = v5 + 16 * v9;
      *(_QWORD *)(v10 + 32) = v3;
      *(_QWORD *)(v10 + 40) = v7;
      v3 += 5242880;
      if (v6 >= a2)
        return (char *)v5;
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  return result;
}

uint64_t AssetStreamHandle.inputStream(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_237FDAE0C();
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = *(_QWORD *)(v6 + 64);
  v4[9] = sub_237FC2F00();
  sub_237F9191C(&qword_2568B89A0);
  v4[10] = sub_237FC2F00();
  v7 = sub_237F92868();
  v4[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[12] = v8;
  v4[13] = *(_QWORD *)(v8 + 64);
  v4[14] = sub_237FDAD0C();
  v4[15] = sub_237FB801C();
  v9 = *(_QWORD *)(sub_237FA3AE4() - 8);
  v4[16] = v9;
  v4[17] = *(_QWORD *)(v9 + 64);
  v4[18] = sub_237FDAD0C();
  v4[19] = sub_237FB801C();
  v10 = *(_QWORD *)(sub_237F928BC() - 8);
  v4[20] = v10;
  v4[21] = *(_QWORD *)(v10 + 64);
  v4[22] = sub_237FDAD0C();
  v4[23] = sub_237FB801C();
  v11 = sub_237F9191C(&qword_2568B89A8);
  v4[24] = v11;
  v4[25] = *(_QWORD *)(v11 - 8);
  v4[26] = sub_237FC2F00();
  v12 = sub_237F9191C(&qword_2568B89B0);
  v4[27] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[28] = v13;
  v4[29] = *(_QWORD *)(v13 + 64);
  v4[30] = sub_237FDAD0C();
  v4[31] = sub_237FB801C();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FD78FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v42 = *(_QWORD *)(v0 + 248);
  v46 = *(_QWORD *)(v0 + 240);
  v38 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 208);
  v45 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);
  v40 = *(_QWORD *)(v0 + 184);
  v36 = *(_QWORD *)(v0 + 176);
  v31 = *(_QWORD *)(v0 + 168);
  v25 = *(_QWORD *)(v0 + 160);
  v39 = *(_QWORD *)(v0 + 152);
  v47 = *(_QWORD *)(v0 + 144);
  v30 = *(_QWORD *)(v0 + 136);
  v27 = *(_QWORD *)(v0 + 128);
  v37 = *(_QWORD *)(v0 + 120);
  v43 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 104);
  v35 = *(_QWORD *)(v0 + 96);
  v41 = *(_QWORD *)(v0 + 88);
  v29 = *(_QWORD *)(v0 + 80);
  v44 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v23 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 40);
  v34 = *(_QWORD *)(v0 + 32);
  v33 = *(_QWORD *)(v0 + 24);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v1, *MEMORY[0x24BEE6CA0], v2);
  static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  sub_237FDAFDC(v5);
  sub_237F94060(v5 + *(int *)(v4 + 20), v39, type metadata accessor for Credential);
  v6 = (uint64_t *)(v5 + *(int *)(v4 + 28));
  v28 = *v6;
  v26 = v6[1];
  swift_bridgeObjectRetain();
  UUID.init()();
  type metadata accessor for TaskPriority();
  sub_237FDAF40();
  _s11CloudAssets21UploadResponseMessageOwst_0(v7, v8, v9, v10);
  sub_237FDAFE8(v5, v11, type metadata accessor for AssetStreamHandle);
  sub_237FDAFDC(v40);
  sub_237F94060(v39, v47, type metadata accessor for Credential);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16))(v43, v37, v41);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v46, v42, v45);
  v12 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v13 = (v24 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (*(unsigned __int8 *)(v25 + 80) + v13 + 16) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  v15 = (v31 + *(unsigned __int8 *)(v27 + 80) + v14) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  v16 = (v30 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (*(unsigned __int8 *)(v35 + 80) + v16 + 16) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  v18 = (v32 + *(unsigned __int8 *)(v38 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  sub_237F94734(v44, v19 + v12, type metadata accessor for AssetStreamHandle);
  v20 = (_QWORD *)(v19 + v13);
  *v20 = v33;
  v20[1] = v34;
  sub_237F94734(v36, v19 + v14, type metadata accessor for Asset);
  sub_237F94734(v47, v19 + v15, type metadata accessor for Credential);
  v21 = (_QWORD *)(v19 + v16);
  *v21 = v28;
  v21[1] = v26;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v35 + 32))(v19 + v17, v43, v41);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v19 + v18, v46, v45);
  sub_237FAA8B0(v29, (uint64_t)&unk_2568B89C0, v19);
  AsyncThrowingStream.Continuation.onTermination.setter();
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v37, v41);
  sub_237F94B38(v39, type metadata accessor for Credential);
  sub_237F94B38(v40, type metadata accessor for Asset);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v42, v45);
  sub_237FA45D4();
  sub_237FA45CC();
  swift_task_dealloc();
  sub_237FAC46C();
  swift_task_dealloc();
  sub_237FB7C6C();
  swift_task_dealloc();
  sub_237FB7AFC();
  sub_237FAC464();
  sub_237FB7FB0();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_237FD7D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v8 + 224) = v12;
  *(_QWORD *)(v8 + 232) = v13;
  *(_OWORD *)(v8 + 208) = v11;
  *(_QWORD *)(v8 + 192) = a7;
  *(_QWORD *)(v8 + 200) = a8;
  *(_QWORD *)(v8 + 176) = a5;
  *(_QWORD *)(v8 + 184) = a6;
  *(_QWORD *)(v8 + 168) = a4;
  v9 = sub_237F9191C((uint64_t *)&unk_2568B8A98);
  *(_QWORD *)(v8 + 240) = v9;
  *(_QWORD *)(v8 + 248) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 256) = swift_task_alloc();
  type metadata accessor for Credential(0);
  *(_QWORD *)(v8 + 264) = swift_task_alloc();
  *(_QWORD *)(v8 + 272) = swift_task_alloc();
  *(_QWORD *)(v8 + 280) = type metadata accessor for Asset(0);
  *(_QWORD *)(v8 + 288) = swift_task_alloc();
  *(_QWORD *)(v8 + 296) = swift_task_alloc();
  *(_QWORD *)(v8 + 304) = swift_task_alloc();
  *(_QWORD *)(v8 + 312) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_237FD7E08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_237FD767C(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  v3 = sub_237FD7704(v1, v2);
  *(_QWORD *)(v0 + 320) = v3;
  v4 = *((_QWORD *)v3 + 2);
  *(_QWORD *)(v0 + 328) = v4;
  if (v4)
  {
    v5 = *(_QWORD *)(v0 + 168);
    v6 = *(int *)(sub_237FDAE0C() + 32);
    *(_DWORD *)(v0 + 456) = v6;
    *(_QWORD *)(v0 + 336) = 0;
    *(_QWORD *)(v0 + 344) = 0;
    *(_QWORD *)(v0 + 352) = *((_QWORD *)v3 + 4);
    *(_QWORD *)(v0 + 360) = *((_QWORD *)v3 + 5);
    *(_QWORD *)(v0 + 368) = *(_QWORD *)(v5 + v6);
    return sub_237FDACA0();
  }
  else
  {
    sub_237FAC404();
    *(_QWORD *)(v0 + 152) = 0;
    sub_237F9191C(&qword_2568B89B0);
    sub_237FB891C();
    sub_237FDACCC();
    sub_237FAC46C();
    sub_237FA45D4();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
  }
}

uint64_t sub_237FD7EE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 368);
  sub_237FDAF14();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 112) + 16) && (sub_237FC1E1C(), (v2 & 1) != 0))
    v3 = swift_retain();
  else
    v3 = 0;
  *(_QWORD *)(v0 + 376) = v3;
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FD7F4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32[10];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  sub_237FB8690();
  v34 = v1;
  v35 = v2;
  v33 = v0;
  v3 = *(_QWORD *)(v0 + 376);
  v4 = *(_QWORD *)(v0 + 200);
  sub_237F94060(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 312), type metadata accessor for Asset);
  sub_237FDAFD4(v4, v5, type metadata accessor for Credential);
  if (v3)
  {
    v7 = *(_QWORD *)(v0 + 376);
LABEL_3:
    sub_237F94B38(*(_QWORD *)(v0 + 272), type metadata accessor for Credential);
    sub_237FDAEB0(v8, type metadata accessor for Asset);
    *(_QWORD *)(v0 + 384) = v7;
    *(_QWORD *)(v0 + 392) = *(_QWORD *)(*(_QWORD *)(v0 + 168) + *(int *)(v0 + 456));
    return swift_task_switch();
  }
  v10 = *(_QWORD *)(v0 + 352);
  v11 = *(_QWORD *)(v0 + 360);
  v12 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 264);
  v14 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 208);
  v16 = *(char **)(v0 + 216);
  sub_237FDAFE8(*(_QWORD *)(v0 + 312), v6, type metadata accessor for Asset);
  sub_237F94060(v14, v15, type metadata accessor for Credential);
  type metadata accessor for AssetStreamHandle.RangeReader(0);
  swift_allocObject();
  swift_bridgeObjectRetain();
  v18 = sub_237FD4B00(v13, v10, v11, v15, v17, v16);
  if (!v12)
  {
    v7 = v18;
    goto LABEL_3;
  }
  sub_237F94B38(*(_QWORD *)(v0 + 272), type metadata accessor for Credential);
  sub_237FDAEB0(v19, type metadata accessor for Asset);
  sub_237FAC404();
  if (qword_2568B73B0 != -1)
    swift_once();
  v20 = *(_QWORD *)(v0 + 192);
  v21 = sub_237FAC474();
  sub_237FABF5C(v21, (uint64_t)qword_2568B88D0);
  sub_237FDAFD4(v20, v22, type metadata accessor for Asset);
  sub_237FB7F00();
  sub_237FB7F00();
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.error.getter();
  if (sub_237FAC4D0(v23))
  {
    v25 = sub_237FAC3E4();
    v31 = (_QWORD *)sub_237FAC3E4();
    v32[0] = sub_237FAC3E4();
    *(_DWORD *)v25 = 136315650;
    sub_237FDAEF4();
    v26 = sub_237FDB05C();
    *(_QWORD *)(v0 + 120) = sub_237FAB354(v26, v27, v32);
    sub_237FDAE14();
    sub_237FA3AEC();
    sub_237FDAFA8();
    *(_WORD *)(v25 + 12) = 2080;
    v28 = sub_237FDAAA0();
    *(_QWORD *)(v0 + 136) = sub_237FAB354(v28, v29, v32);
    sub_237FDAE14();
    sub_237FA3C74();
    *(_WORD *)(v25 + 22) = 2112;
    sub_237FB7F00();
    v30 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 144) = v30;
    sub_237FDAE14();
    *v31 = v30;
    sub_237FAC47C();
    sub_237FAC47C();
    sub_237FDAD2C(&dword_237F8F000, v23, v24, "failed to stream data for %s in range %s due to error %@", (uint8_t *)v25);
    sub_237F9191C(&qword_2568B7DB0);
    sub_237FDAE34();
    sub_237FAC3D8();
  }
  sub_237F94B38(*(_QWORD *)(v0 + 296), type metadata accessor for Asset);
  sub_237FAC47C();
  sub_237FAC47C();

  *(_QWORD *)(v0 + 128) = v12;
  sub_237F9191C(&qword_2568B89B0);
  sub_237FB891C();
  sub_237FDACCC();
  sub_237FAC46C();
  sub_237FA45D4();
  sub_237FAC464();
  sub_237FA45CC();
  sub_237FB7B18();
  sub_237FB7AFC();
  return sub_237FB7B20(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FD82EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 392);
  sub_237FDAF14();
  if (*(_QWORD *)(*(_QWORD *)(v1 + 112) + 16))
    sub_237FC1E1C();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FD8350()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 400) = *(_QWORD *)(*(_QWORD *)(v0 + 168) + *(int *)(v0 + 456));
  return swift_task_switch();
}

void sub_237FD8370()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[44];
  v2 = v0[22];
  if (v1 > v2)
    v2 = v0[44];
  v3 = __OFSUB__(v2, v1);
  v4 = v2 - v1;
  v0[51] = v4;
  if (v3)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v5 = v0[45];
  if (v5 >= v0[23])
    v5 = v0[23];
  v3 = __OFSUB__(v5, v1);
  v6 = v5 - v1;
  v0[52] = v6;
  if (v3)
    goto LABEL_10;
  if (v6 >= v4)
  {
    v7 = (_QWORD *)swift_task_alloc();
    v0[53] = v7;
    *v7 = v0;
    v7[1] = sub_237FD85AC;
    sub_237FD64E8(v0[28]);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_237FD840C()
{
  uint64_t v0;
  uint64_t *v1;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v3;
  uint64_t result;
  char v5;
  uint64_t v6;
  _BOOL8 v7;
  Swift::Int v8;
  unint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 400) + 112);
  sub_237FDB004();
  swift_beginAccess();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3 = *v1;
  *(_QWORD *)(v0 + 160) = *v1;
  *v1 = 0x8000000000000000;
  result = sub_237FC1E1C();
  v6 = *(_QWORD *)(v3 + 16);
  v7 = (v5 & 1) == 0;
  v8 = v6 + v7;
  if (__OFADD__(v6, v7))
  {
    __break(1u);
  }
  else
  {
    v9 = result;
    v10 = v5;
    sub_237F9191C(&qword_2568B8AA8);
    result = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v8);
    if ((result & 1) != 0)
    {
      result = sub_237FC1E1C();
      if ((v10 & 1) != (v11 & 1))
      {
        sub_237F9191C(&qword_2568B8920);
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      v9 = result;
    }
    v12 = *(_QWORD **)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 384);
    if ((v10 & 1) != 0)
    {
      v14 = v12[7];
      swift_release();
      *(_QWORD *)(v14 + 8 * v9) = v13;
LABEL_10:
      *v1 = (uint64_t)v12;
      swift_bridgeObjectRelease();
      swift_endAccess();
      sub_237FAC434();
      return sub_237FDACA0();
    }
    v15 = v12[6];
    v16 = *(_OWORD *)(v0 + 352);
    v12[(v9 >> 6) + 8] |= 1 << v9;
    *(_OWORD *)(v15 + 16 * v9) = v16;
    *(_QWORD *)(v12[7] + 8 * v9) = v13;
    v17 = v12[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (!v18)
    {
      v12[2] = v19;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_237FD85AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_237FDAE1C();
  v0[54] = v2;
  v0[55] = v3;
  v0[56] = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  sub_237FAC434();
  return sub_237FDACA0();
}

void sub_237FD8614()
{
  __asm { BR              X10 }
}

uint64_t sub_237FD865C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (BYTE6(v0) < *(uint64_t *)(v1 + 416))
  {
    v8 = *(_QWORD *)(v1 + 432);
    v10 = *(_QWORD *)(v1 + 248);
    v9 = *(_QWORD *)(v1 + 256);
    v11 = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(v1 + 88) = v8;
    *(_QWORD *)(v1 + 96) = v0;
    sub_237F91894(v8, v0);
    sub_237F9191C(&qword_2568B89B0);
    AsyncThrowingStream.Continuation.yield(_:)();
    swift_release();
    sub_237F918D8(v8, v0);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 248);
    v2 = *(_QWORD *)(v1 + 256);
    v4 = *(_QWORD *)(v1 + 240);
    *(_QWORD *)(v1 + 104) = Data.subdata(in:)();
    *(_QWORD *)(v1 + 112) = v5;
    sub_237F9191C(&qword_2568B89B0);
    AsyncThrowingStream.Continuation.yield(_:)();
    swift_release();
    v6 = sub_237FDB004();
    sub_237F918D8(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  }
  v12 = *(_QWORD *)(v1 + 344) + 1;
  if (v12 == *(_QWORD *)(v1 + 328))
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v1 + 152) = 0;
    sub_237F9191C(&qword_2568B89B0);
    sub_237FB891C();
    sub_237FDACCC();
    sub_237FAC46C();
    sub_237FA45D4();
    sub_237FAC464();
    sub_237FA45CC();
    sub_237FB7B18();
    sub_237FB7AFC();
    return sub_237FB7B04(*(uint64_t (**)(void))(v1 + 8));
  }
  else
  {
    *(_QWORD *)(v1 + 336) = *(_QWORD *)(v1 + 448);
    *(_QWORD *)(v1 + 344) = v12;
    v14 = *(int *)(v1 + 456);
    v15 = *(_QWORD *)(v1 + 168);
    v16 = *(_QWORD *)(v1 + 320) + 16 * v12;
    *(_QWORD *)(v1 + 352) = *(_QWORD *)(v16 + 32);
    *(_QWORD *)(v1 + 360) = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v1 + 368) = *(_QWORD *)(v15 + v14);
    return sub_237FDACA0();
  }
}

#error "237FD8938: call analysis failed (funcsize=137)"

void sub_237FD8AB4()
{
  JUMPOUT(0x23B829698);
}

uint64_t sub_237FD8ADC()
{
  AssetStreamHandle.range.getter();
  return 0;
}

uint64_t sub_237FD8AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_237FC1CCC;
  return AssetStreamHandle.inputStream(for:)(a1, a2, a3);
}

unint64_t sub_237FD8B5C()
{
  unint64_t result;

  result = qword_2568B8938;
  if (!qword_2568B8938)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC1C0, &type metadata for AssetStreamHandle.Error);
    atomic_store(result, (unint64_t *)&qword_2568B8938);
  }
  return result;
}

id sub_237FD8B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, NSURL *a3@<X8>)
{
  void *v3;
  void *v4;
  void *v7;
  void *v8;
  NSDictionary v9;
  id v10;
  uint64_t v11;

  v4 = v3;
  URL._bridgeToObjectiveC()(a3);
  v8 = v7;
  if (a2)
  {
    v9.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v9.super.isa = 0;
  }
  v10 = objc_msgSend(v4, sel_initWithURL_options_, v8, v9.super.isa);

  v11 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
  return v10;
}

char *sub_237FD8C54(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    sub_237F9191C(&qword_2568B8AD8);
    v10 = (char *)swift_allocObject();
    v11 = j__malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  if ((v5 & 1) != 0)
  {
    sub_237FB58EC((char *)(a4 + 32), v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_237FD8D40(0, v8, v12, a4);
  }
  return v10;
}

char *sub_237FD8D40(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_237FD8E30(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v29;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_id], v9, v6);
  *(_QWORD *)&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_resourceLoaderDelegate] = a2;
  swift_unknownObjectRetain();

  v11 = (objc_class *)type metadata accessor for PlayerItem();
  v29.receiver = v10;
  v29.super_class = v11;
  v12 = objc_msgSendSuper2(&v29, sel_initWithAsset_automaticallyLoadedAssetKeys_, a1, 0);
  v13 = qword_2568B73C8;
  v14 = v12;
  if (v13 != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  sub_237FABF5C(v15, (uint64_t)qword_2568B8CC0);
  v16 = v14;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v26 = a1;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v28 = v21;
    *(_DWORD *)v20 = 136315138;
    sub_237FBBB90(&qword_2568B8040, (void (*)(uint64_t))MEMORY[0x24BDCEA58]);
    v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v27 = sub_237FAB354(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_237F8F000, v17, v18, "initialize PlayerItem with id %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B829F2C](v21, -1, -1);
    MEMORY[0x23B829F2C](v20, -1, -1);

  }
  else
  {

  }
  return v16;
}

id sub_237FD90CC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  os_activity_t v15;
  uint64_t v16;
  id v17;
  uint64_t v19;
  objc_super v20;
  uint64_t v21[5];

  ObjectType = (objc_class *)swift_getObjectType();
  v7 = type metadata accessor for UTType();
  MEMORY[0x24BDAC7A8](v7);
  v8 = sub_237F9191C(&qword_2568B7D70);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = type metadata accessor for AssetStreamHandle(0);
  v21[4] = (uint64_t)&protocol witness table for AssetStreamHandle;
  v11 = sub_237FAC294(v21);
  sub_237F94734(a1, (uint64_t)v11, type metadata accessor for AssetStreamHandle);
  sub_237FAC2D0((uint64_t)v21, (uint64_t)a4 + OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_assetStreamHandle);
  v12 = a4;
  static UTType.data.getter();
  UTType.init(filenameExtension:conformingTo:)();
  sub_237FAC314((uint64_t)v10, (uint64_t)&v12[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_type]);
  sub_237FDAC0C(0, (unint64_t *)&qword_2568B7DE0);
  sub_237F9191C((uint64_t *)&unk_2568B8AE0);
  sub_237FDAC44();
  v13 = Dictionary.init(dictionaryLiteral:)();
  sub_237F9191C(&qword_2568B8AF0);
  v14 = swift_allocObject();
  *(_DWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 16) = v13;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedTaskMapping] = v14;
  if (qword_2568B73D0 != -1)
    swift_once();
  v15 = _os_activity_create(&dword_237F8F000, "asset-streaming/loading-request-handler", (os_activity_t)qword_2568B8D70, OS_ACTIVITY_FLAG_DEFAULT);
  sub_237F9191C((uint64_t *)&unk_2568B7E00);
  v16 = swift_allocObject();
  *(_DWORD *)(v16 + 24) = 0;
  *(_QWORD *)(v16 + 16) = v15;
  *(_QWORD *)&v12[OBJC_IVAR____TtC11CloudAssets21LoadingRequestHandler_protectedActivity] = v16;

  v20.receiver = v12;
  v20.super_class = ObjectType;
  v17 = objc_msgSendSuper2(&v20, sel_init);
  sub_237F91A00((uint64_t)v21);
  return v17;
}

void sub_237FD9324(void *a1, uint64_t a2, uint64_t a3, void *a4, char *a5)
{
  void *v10;
  id v11;
  objc_super v12;

  *(_QWORD *)&a5[OBJC_IVAR____TtC11CloudAssets18AssetExportSession_delegate] = a4;
  swift_unknownObjectRetain();
  v10 = (void *)MEMORY[0x23B829578](a2, a3);
  swift_bridgeObjectRelease();
  v12.receiver = a5;
  v12.super_class = (Class)type metadata accessor for AssetExportSession();
  v11 = objc_msgSendSuper2(&v12, sel_initWithAsset_presetName_, a1, v10);

  if (v11)
  {

  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_237FD93D4()
{
  unint64_t result;

  result = qword_2568B8968;
  if (!qword_2568B8968)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC170, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8968);
  }
  return result;
}

uint64_t sub_237FD9410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(unint64_t, uint64_t);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = sub_237FDAE0C();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = sub_237F928BC();
  v6 = *(_QWORD *)(v5 - 8);
  v24 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v7 = *(_QWORD *)(v6 + 64);
  v32 = sub_237FA3AE4();
  v8 = *(_QWORD *)(v32 - 8);
  v25 = (v24 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v9 = (*(_QWORD *)(v8 + 64) + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = sub_237F92868();
  v29 = *(_QWORD *)(v31 - 8);
  v26 = (v9 + *(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  v10 = *(_QWORD *)(v29 + 64);
  v11 = sub_237F9191C(&qword_2568B89B0);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v11 - 8) + 80);
  v27 = (v26 + v10 + v12) & ~v12;
  v28 = *(_QWORD *)(v11 - 8);
  v30 = v11;
  swift_unknownObjectRelease();
  v13 = v0 + v3;
  v14 = sub_237F92860();
  v15 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v0 + v3, v14);
  v16 = type metadata accessor for Asset.ID(0);
  sub_237FDAE64();
  sub_237FDAEDC(v0 + v3 + *(int *)(v16 + 24));
  sub_237FDAEDC(v0 + v3 + *(int *)(v16 + 28));
  v17 = v0 + v3 + *(int *)(v5 + 20);
  sub_237F918D8(*(_QWORD *)v17, *(_QWORD *)(v17 + 8));
  sub_237F918D8(*(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24));
  v18 = v13 + *(int *)(v1 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v19 = v18 + *(int *)(v32 + 28);
  v20 = type metadata accessor for Date();
  v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8);
  v21(v19, v20);
  sub_237FDAE64();
  sub_237FDAE64();
  swift_release();
  v15(v0 + v24, v14);
  swift_bridgeObjectRelease();
  sub_237FDAEDC(v0 + v24 + *(int *)(v16 + 24));
  sub_237FDAEDC(v0 + v24 + *(int *)(v16 + 28));
  v22 = v0 + v24 + *(int *)(v5 + 20);
  sub_237F918D8(*(_QWORD *)v22, *(_QWORD *)(v22 + 8));
  sub_237F918D8(*(_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 24));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21(v0 + v25 + *(int *)(v32 + 28), v20);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v29 + 8))(v0 + v26, v31);
  (*(void (**)(unint64_t, uint64_t))(v28 + 8))(v0 + v27, v30);
  return swift_deallocObject();
}

uint64_t sub_237FD96E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;

  sub_237FDAE0C();
  sub_237FDAFC8();
  v4 = (v3 + 32) & ~v3;
  v6 = (*(_QWORD *)(v5 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_237F928BC();
  sub_237FDAFC8();
  v8 = (v6 + v7 + 16) & ~v7;
  v10 = *(_QWORD *)(v9 + 64);
  sub_237FA3AE4();
  sub_237FDAFC8();
  v12 = (v8 + v10 + v11) & ~v11;
  sub_237F92868();
  sub_237FDAFC8();
  sub_237F9191C(&qword_2568B89B0);
  v18 = *(_QWORD *)(v1 + 24);
  v19 = *(_QWORD *)(v1 + 16);
  v13 = v1 + v6;
  v14 = *(_QWORD *)(v1 + v6);
  v15 = *(_QWORD *)(v13 + 8);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v16;
  *v16 = v2;
  v16[1] = sub_237FA4428;
  return sub_237FD7D10(a1, v19, v18, v1 + v4, v14, v15, v1 + v8, v1 + v12);
}

void sub_237FD983C()
{
  sub_237FD8AB4();
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetStreamHandle(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v50 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v50 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = (int *)type metadata accessor for Asset.ID(0);
    v9 = v8[5];
    v10 = (uint64_t *)((char *)v4 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = v8[6];
    v14 = (uint64_t *)((char *)v4 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    swift_bridgeObjectRetain();
    sub_237F91894(v16, v17);
    *v14 = v16;
    v14[1] = v17;
    v18 = v8[7];
    v19 = (uint64_t *)((char *)v4 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *v20;
    v22 = v20[1];
    sub_237F91894(*v20, v22);
    *v19 = v21;
    v19[1] = v22;
    v23 = type metadata accessor for Asset(0);
    v24 = *(int *)(v23 + 20);
    v25 = (uint64_t *)((char *)v4 + v24);
    v26 = (char *)a2 + v24;
    v27 = *(uint64_t *)((char *)a2 + v24);
    v28 = *(uint64_t *)((char *)a2 + v24 + 8);
    sub_237F91894(v27, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = *((_QWORD *)v26 + 2);
    v30 = *((_QWORD *)v26 + 3);
    sub_237F91894(v29, v30);
    v25[2] = v29;
    v25[3] = v30;
    *(uint64_t *)((char *)v4 + *(int *)(v23 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v23 + 24));
    v31 = a3[5];
    v32 = (uint64_t *)((char *)v4 + v31);
    v33 = (char *)a2 + v31;
    v34 = *(uint64_t *)((char *)a2 + v31 + 8);
    *v32 = *(uint64_t *)((char *)a2 + v31);
    v32[1] = v34;
    v35 = *(uint64_t *)((char *)a2 + v31 + 24);
    v32[2] = *(uint64_t *)((char *)a2 + v31 + 16);
    v32[3] = v35;
    v36 = *(uint64_t *)((char *)a2 + v31 + 40);
    v32[4] = *(uint64_t *)((char *)a2 + v31 + 32);
    v32[5] = v36;
    v37 = *(int *)(type metadata accessor for Credential(0) + 28);
    v38 = (char *)v32 + v37;
    v39 = &v33[v37];
    v40 = type metadata accessor for Date();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v41(v38, v39, v40);
    v42 = a3[6];
    v43 = a3[7];
    v44 = (uint64_t *)((char *)v4 + v42);
    v45 = (uint64_t *)((char *)a2 + v42);
    v46 = v45[1];
    *v44 = *v45;
    v44[1] = v46;
    v47 = (uint64_t *)((char *)v4 + v43);
    v48 = (uint64_t *)((char *)a2 + v43);
    v49 = v48[1];
    *v47 = *v48;
    v47[1] = v49;
    *(uint64_t *)((char *)v4 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AssetStreamHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = type metadata accessor for Asset.ID(0);
  swift_bridgeObjectRelease();
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 24)), *(_QWORD *)(a1 + *(int *)(v5 + 24) + 8));
  sub_237F918D8(*(_QWORD *)(a1 + *(int *)(v5 + 28)), *(_QWORD *)(a1 + *(int *)(v5 + 28) + 8));
  v6 = a1 + *(int *)(type metadata accessor for Asset(0) + 20);
  sub_237F918D8(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  sub_237F918D8(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
  v7 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v7 + *(int *)(type metadata accessor for Credential(0) + 28);
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v7[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  swift_bridgeObjectRetain();
  sub_237F91894(v15, v16);
  *v13 = v15;
  v13[1] = v16;
  v17 = v7[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_237F91894(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = type metadata accessor for Asset(0);
  v23 = *(int *)(v22 + 20);
  v24 = (uint64_t *)(a1 + v23);
  v25 = a2 + v23;
  v26 = *(_QWORD *)(a2 + v23);
  v27 = *(_QWORD *)(a2 + v23 + 8);
  sub_237F91894(v26, v27);
  *v24 = v26;
  v24[1] = v27;
  v28 = *(_QWORD *)(v25 + 16);
  v29 = *(_QWORD *)(v25 + 24);
  sub_237F91894(v28, v29);
  v24[2] = v28;
  v24[3] = v29;
  *(_QWORD *)(a1 + *(int *)(v22 + 24)) = *(_QWORD *)(a2 + *(int *)(v22 + 24));
  v30 = a3[5];
  v31 = (_QWORD *)(a1 + v30);
  v32 = a2 + v30;
  v33 = *(_QWORD *)(a2 + v30 + 8);
  *v31 = *(_QWORD *)(a2 + v30);
  v31[1] = v33;
  v34 = *(_QWORD *)(a2 + v30 + 24);
  v31[2] = *(_QWORD *)(a2 + v30 + 16);
  v31[3] = v34;
  v35 = *(_QWORD *)(a2 + v30 + 40);
  v31[4] = *(_QWORD *)(a2 + v30 + 32);
  v31[5] = v35;
  v36 = *(int *)(type metadata accessor for Credential(0) + 28);
  v37 = (char *)v31 + v36;
  v38 = v32 + v36;
  v39 = type metadata accessor for Date();
  v40 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v40(v37, v38, v39);
  v41 = a3[6];
  v42 = a3[7];
  v43 = (_QWORD *)(a1 + v41);
  v44 = (_QWORD *)(a2 + v41);
  v45 = v44[1];
  *v43 = *v44;
  v43[1] = v45;
  v46 = (_QWORD *)(a1 + v42);
  v47 = (_QWORD *)(a2 + v42);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = v7[6];
  v12 = (uint64_t *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v14 = *v13;
  v15 = v13[1];
  sub_237F91894(*v13, v15);
  v16 = *v12;
  v17 = v12[1];
  *v12 = v14;
  v12[1] = v15;
  sub_237F918D8(v16, v17);
  v18 = v7[7];
  v19 = (uint64_t *)(a1 + v18);
  v20 = (uint64_t *)(a2 + v18);
  v21 = *v20;
  v22 = v20[1];
  sub_237F91894(*v20, v22);
  v23 = *v19;
  v24 = v19[1];
  *v19 = v21;
  v19[1] = v22;
  sub_237F918D8(v23, v24);
  v25 = type metadata accessor for Asset(0);
  v26 = *(int *)(v25 + 20);
  v27 = (uint64_t *)(a1 + v26);
  v28 = a2 + v26;
  v29 = *(_QWORD *)(a2 + v26);
  v30 = *(_QWORD *)(a2 + v26 + 8);
  sub_237F91894(v29, v30);
  v31 = *v27;
  v32 = v27[1];
  *v27 = v29;
  v27[1] = v30;
  sub_237F918D8(v31, v32);
  v33 = *(_QWORD *)(v28 + 16);
  v34 = *(_QWORD *)(v28 + 24);
  sub_237F91894(v33, v34);
  v35 = v27[2];
  v36 = v27[3];
  v27[2] = v33;
  v27[3] = v34;
  sub_237F918D8(v35, v36);
  *(_QWORD *)(a1 + *(int *)(v25 + 24)) = *(_QWORD *)(a2 + *(int *)(v25 + 24));
  v37 = a3[5];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *(_QWORD *)(a2 + v37);
  v38[1] = *(_QWORD *)(a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[2] = v39[2];
  v38[3] = v39[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v38[4] = v39[4];
  v38[5] = v39[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v40 = *(int *)(type metadata accessor for Credential(0) + 28);
  v41 = (char *)v38 + v40;
  v42 = (char *)v39 + v40;
  v43 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 24))(v41, v42, v43);
  v44 = a3[6];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  *v45 = *v46;
  v45[1] = v46[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3[7];
  v48 = (_QWORD *)(a1 + v47);
  v49 = (_QWORD *)(a2 + v47);
  *v48 = *v49;
  v48[1] = v49[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  *(_OWORD *)(a1 + v7[5]) = *(_OWORD *)(a2 + v7[5]);
  *(_OWORD *)(a1 + v7[6]) = *(_OWORD *)(a2 + v7[6]);
  *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
  v8 = type metadata accessor for Asset(0);
  v9 = *(int *)(v8 + 20);
  v10 = (_OWORD *)(a1 + v9);
  v11 = (_OWORD *)(a2 + v9);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + *(int *)(v8 + 24)) = *(_QWORD *)(a2 + *(int *)(v8 + 24));
  v13 = a3[5];
  v14 = (_OWORD *)(a1 + v13);
  v15 = a2 + v13;
  v16 = *(_OWORD *)(a2 + v13 + 16);
  *v14 = *(_OWORD *)(a2 + v13);
  v14[1] = v16;
  v14[2] = *(_OWORD *)(a2 + v13 + 32);
  v17 = *(int *)(type metadata accessor for Credential(0) + 28);
  v18 = (char *)v14 + v17;
  v19 = v15 + v17;
  v20 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  v21 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t assignWithTake for AssetStreamHandle(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for Asset.ID(0);
  v8 = v7[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  v13 = v7[6];
  v14 = *(_QWORD *)(a1 + v13);
  v15 = *(_QWORD *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_237F918D8(v14, v15);
  v16 = v7[7];
  v17 = *(_QWORD *)(a1 + v16);
  v18 = *(_QWORD *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_237F918D8(v17, v18);
  v19 = type metadata accessor for Asset(0);
  v20 = *(int *)(v19 + 20);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = *(_QWORD *)(a1 + v20);
  v24 = *(_QWORD *)(a1 + v20 + 8);
  *(_OWORD *)(a1 + v20) = *(_OWORD *)(a2 + v20);
  sub_237F918D8(v23, v24);
  v25 = *(_QWORD *)(v21 + 16);
  v26 = *(_QWORD *)(v21 + 24);
  *(_OWORD *)(v21 + 16) = *(_OWORD *)(v22 + 16);
  sub_237F918D8(v25, v26);
  *(_QWORD *)(a1 + *(int *)(v19 + 24)) = *(_QWORD *)(a2 + *(int *)(v19 + 24));
  v27 = a3[5];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  v30 = *(_QWORD *)(a2 + v27 + 8);
  *v28 = *(_QWORD *)(a2 + v27);
  v28[1] = v30;
  swift_bridgeObjectRelease();
  v31 = v29[3];
  v28[2] = v29[2];
  v28[3] = v31;
  swift_bridgeObjectRelease();
  v32 = v29[5];
  v28[4] = v29[4];
  v28[5] = v32;
  swift_bridgeObjectRelease();
  v33 = *(int *)(type metadata accessor for Credential(0) + 28);
  v34 = (char *)v28 + v33;
  v35 = (char *)v29 + v33;
  v36 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 40))(v34, v35, v36);
  v37 = a3[6];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  v42 = a3[7];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (uint64_t *)(a2 + v42);
  v46 = *v44;
  v45 = v44[1];
  *v43 = v46;
  v43[1] = v45;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetStreamHandle()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FDA250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v6 = sub_237F928BC();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
    return _s11CloudAssets21UploadResponseMessageOwet_0(v8, a2, v7);
  }
  v9 = sub_237FA3AE4();
  if (*(_DWORD *)(*(_QWORD *)(v9 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v9;
    v8 = a1 + *(int *)(a3 + 20);
    return _s11CloudAssets21UploadResponseMessageOwet_0(v8, a2, v7);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FDA2F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v8 = sub_237F928BC();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
    return _s11CloudAssets21UploadResponseMessageOwst_0(v10, a2, a2, v9);
  }
  result = sub_237FA3AE4();
  if (*(_DWORD *)(*(_QWORD *)(result - 8) + 84) == a3)
  {
    v9 = result;
    v10 = a1 + *(int *)(a4 + 20);
    return _s11CloudAssets21UploadResponseMessageOwst_0(v10, a2, a2, v9);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_237FDA390()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_237FDA42C()
{
  return type metadata accessor for AssetStreamHandle.RangeReader(0);
}

uint64_t sub_237FDA434()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for Asset(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Credential(319);
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for URL();
      if (v3 <= 0x3F)
        return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AssetStreamHandle.RangeReader.CacheState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_retain();
  *a1 = v3;
  return a1;
}

unint64_t destroy for AssetStreamHandle.RangeReader.CacheState(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_release();
  return result;
}

unint64_t *assignWithCopy for AssetStreamHandle.RangeReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_retain();
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_retain();
    swift_release();
  }
  return a1;
}

unint64_t *assignWithTake for AssetStreamHandle.RangeReader.CacheState(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v3 < 0xFFFFFFFF)
  {
    swift_release();
LABEL_5:
    *a1 = v3;
    return a1;
  }
  *a1 = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetStreamHandle.RangeReader.CacheState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle.RangeReader.CacheState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_237FDA6DC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_237FDA6F4(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.RangeReader.CacheState()
{
  return &type metadata for AssetStreamHandle.RangeReader.CacheState;
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_237FDA770 + 4 * byte_237FEBEED[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_237FDA7A4 + 4 * byte_237FEBEE8[v4]))();
}

uint64_t sub_237FDA7A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FDA7AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FDA7B4);
  return result;
}

uint64_t sub_237FDA7C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FDA7C8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_237FDA7CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FDA7D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.CodingKeys()
{
  return &type metadata for AssetStreamHandle.CodingKeys;
}

uint64_t sub_237FDA7F4(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for AssetStreamHandle.Error(uint64_t a1)
{
  return sub_237FDA81C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_237FDA81C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s11CloudAssets17AssetStreamHandleV5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_237FDA7F4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AssetStreamHandle.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_237FDA7F4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_237FDA81C(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AssetStreamHandle.Error(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AssetStreamHandle.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_237FDA81C(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetStreamHandle.Error(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned int v3;

  if (a2)
  {
    if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    {
      v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2)
        v2 = -1;
      else
        v2 = v3 ^ 0xFF;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetStreamHandle.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_237FDA9AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_237FDA9B4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetStreamHandle.Error()
{
  return &type metadata for AssetStreamHandle.Error;
}

unint64_t sub_237FDA9D4()
{
  unint64_t result;

  result = qword_2568B8A48;
  if (!qword_2568B8A48)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC0F8, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8A48);
  }
  return result;
}

unint64_t sub_237FDAA14()
{
  unint64_t result;

  result = qword_2568B8A50;
  if (!qword_2568B8A50)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC068, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8A50);
  }
  return result;
}

unint64_t sub_237FDAA54()
{
  unint64_t result;

  result = qword_2568B8A58;
  if (!qword_2568B8A58)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC090, &type metadata for AssetStreamHandle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8A58);
  }
  return result;
}

unint64_t sub_237FDAA90(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

uint64_t sub_237FDAAA0()
{
  Swift::String v0;

  _print_unlocked<A, B>(_:_:)();
  v0._countAndFlagsBits = 3943982;
  v0._object = (void *)0xE300000000000000;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  return 0;
}

uint64_t sub_237FDAB34()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_237FDAB60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_237FC1CCC;
  return sub_237FD5514(a1, v4, v5, v6);
}

void sub_237FDABD8(_QWORD *a1, uint64_t *a2)
{
  if (!*a1)
  {
    sub_237F919BC(a2);
    sub_237FBBD74();
  }
  sub_237F928A0();
}

uint64_t sub_237FDAC0C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_237FDAC44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B7DF0;
  if (!qword_2568B7DF0)
  {
    v1 = sub_237FDAC0C(255, (unint64_t *)&qword_2568B7DE0);
    result = MEMORY[0x23B829E84](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&qword_2568B7DF0);
  }
  return result;
}

uint64_t sub_237FDACA0()
{
  return swift_task_switch();
}

uint64_t sub_237FDACA8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

uint64_t sub_237FDACB0()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 - 96) + 8))(v0, *(_QWORD *)(v1 - 112));
}

uint64_t sub_237FDACC4()
{
  return swift_release_n();
}

uint64_t sub_237FDACCC()
{
  return swift_task_dealloc();
}

uint64_t sub_237FDACE0()
{
  return swift_arrayDestroy();
}

uint64_t sub_237FDACEC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 144) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_237FDAD0C()
{
  return swift_task_alloc();
}

uint64_t sub_237FDAD1C()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void sub_237FDAD2C(void *a1, NSObject *a2, os_log_type_t a3, const char *a4, uint8_t *a5)
{
  _os_log_impl(a1, a2, a3, a4, a5, 0x20u);
}

uint64_t sub_237FDAD34(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FDAD48()
{
  return swift_bridgeObjectRelease();
}

void sub_237FDAD50()
{
  uint64_t v0;

  *(_QWORD *)(v0 - 96) = 0x6D61657274736B63;
  *(_QWORD *)(v0 - 88) = 0xEB000000002F2F3ALL;
}

uint64_t sub_237FDAD74()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FDAD7C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_237FDAD9C@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 128) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_237FDADBC@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t sub_237FDADDC()
{
  return 0x712D65646F636564;
}

uint64_t sub_237FDADFC()
{
  return swift_retain_n();
}

uint64_t sub_237FDAE04()
{
  return swift_release_n();
}

uint64_t sub_237FDAE0C()
{
  return type metadata accessor for AssetStreamHandle(0);
}

uint64_t sub_237FDAE14()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void sub_237FDAE1C()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = *v0;
}

uint64_t sub_237FDAE2C()
{
  return sub_237FDAAA0();
}

uint64_t sub_237FDAE34()
{
  return swift_arrayDestroy();
}

uint64_t sub_237FDAE40()
{
  return 0;
}

uint64_t sub_237FDAE5C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

uint64_t sub_237FDAE64()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_237FDAE70()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t sub_237FDAE84()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t sub_237FDAE90()
{
  return swift_task_dealloc();
}

uint64_t sub_237FDAEA4()
{
  uint64_t v0;

  return v0;
}

void sub_237FDAEB0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;

  sub_237F94B38(v2, a2);
}

void sub_237FDAED4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_237F94060(a1, v3, a3);
}

uint64_t sub_237FDAEDC@<X0>(uint64_t a1@<X8>)
{
  return sub_237F918D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_237FDAEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

void sub_237FDAEF4()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;
  uint64_t v2;

  sub_237F94060(v2, v1, v0);
}

void sub_237FDAF04()
{
  uint64_t v0;

  *(_WORD *)(v0 + 12) = 2080;
}

uint64_t sub_237FDAF14()
{
  return swift_beginAccess();
}

id sub_237FDAF4C(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  return objc_msgSend(v4, a2, v2, v3);
}

uint64_t sub_237FDAF5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_237FDAF6C()
{
  return KeyedEncodingContainer.encode(_:forKey:)();
}

uint64_t sub_237FDAF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_237FDAF9C()
{
  return type metadata accessor for AssetStreamHandle.RangeReader(0);
}

void sub_237FDAFA8()
{
  uint64_t (*v0)(_QWORD);
  uint64_t v1;

  sub_237F94B38(v1, v0);
}

uint64_t sub_237FDAFB4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_237FAB354(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t sub_237FDAFBC()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

void sub_237FDAFD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_237F94060(a1, v3, a3);
}

void sub_237FDAFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  sub_237F94060(a1, v1, v2);
}

void sub_237FDAFE8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  sub_237F94060(a1, v3, a3);
}

uint64_t sub_237FDAFF0()
{
  return type metadata accessor for LoadingRequestHandler();
}

uint64_t sub_237FDAFFC()
{
  return type metadata accessor for AssetStreamHandle.RangeReadersCache();
}

uint64_t sub_237FDB004()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FDB010()
{
  return swift_task_dealloc();
}

uint64_t sub_237FDB01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t);

  return v2(v0, v1);
}

uint64_t sub_237FDB028()
{
  uint64_t v0;

  return sub_237F91A00(v0);
}

uint64_t sub_237FDB030()
{
  return String.init<A>(describing:)();
}

uint64_t sub_237FDB03C()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t sub_237FDB044()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t sub_237FDB050()
{
  return swift_arrayDestroy();
}

uint64_t sub_237FDB05C()
{
  return String.init<A>(describing:)();
}

uint64_t sub_237FDB068@<X0>(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v5 = sub_237FDC4A4();
  v22 = *(_QWORD *)(v5 - 8);
  v23 = v5;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F982D4();
  v9 = v8 - v7;
  sub_237F9191C(&qword_2568B7718);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v10);
  sub_237F960FC();
  v11 = type metadata accessor for Google_Protobuf_Timestamp();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  sub_237F982D4();
  v15 = v14 - v13;
  v16 = a1[1];
  *(_QWORD *)a2 = *a1;
  *((_QWORD *)a2 + 1) = v16;
  v17 = a1[3];
  *((_QWORD *)a2 + 2) = a1[2];
  *((_QWORD *)a2 + 3) = v17;
  v18 = a1[5];
  *((_QWORD *)a2 + 4) = a1[4];
  *((_QWORD *)a2 + 5) = v18;
  v19 = type metadata accessor for CloudAssets_Credential(0);
  sub_237FDC45C((uint64_t)a1 + *(int *)(v19 + 32), v2);
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v2, 1, v11) == 1)
  {
    sub_237FDC508();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Google_Protobuf_Timestamp.init()();
    sub_237FDBBC4(v2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15, v2, v11);
    sub_237FDC508();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  Google_Protobuf_Timestamp.date.getter();
  sub_237FDBC04((uint64_t)a1);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v15, v11);
  v20 = type metadata accessor for Credential(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 32))(&a2[*(int *)(v20 + 28)], v9, v23);
}

uint64_t static Credential.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;

  v4 = *a1 == *a2 && a1[1] == a2[1];
  if (!v4 && (sub_237F96484() & 1) == 0)
    return 0;
  v5 = a1[2] == a2[2] && a1[3] == a2[3];
  if (!v5 && (sub_237F96484() & 1) == 0)
    return 0;
  v6 = a1[4] == a2[4] && a1[5] == a2[5];
  if (!v6 && (sub_237F96484() & 1) == 0)
    return 0;
  type metadata accessor for Credential(0);
  return static Date.== infix(_:_:)();
}

uint64_t type metadata accessor for Credential(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8B18);
}

uint64_t Credential.Builder.__allocating_init(tenantName:requestorID:accessToken:)()
{
  uint64_t v0;

  sub_237FDC4C4();
  v0 = swift_allocObject();
  Credential.Builder.init(tenantName:requestorID:accessToken:)();
  return v0;
}

uint64_t Credential.Builder.build()@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v3 = v1[3];
  *a1 = v1[2];
  a1[1] = v3;
  v4 = v1[5];
  a1[2] = v1[4];
  a1[3] = v4;
  v5 = (char *)v1 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate;
  v6 = v1[6];
  v7 = v1[7];
  a1[4] = v6;
  a1[5] = v7;
  swift_beginAccess();
  v8 = (char *)a1 + *(int *)(type metadata accessor for Credential(0) + 28);
  sub_237FDC4A4();
  sub_237FDC4FC();
  (*(void (**)(char *, char *))(v9 + 16))(v8, v5);
  swift_bridgeObjectRetain();
  sub_237FDC4BC();
  return sub_237FDAD74();
}

_QWORD *Credential.Builder.init(tenantName:requestorID:accessToken:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_237FDC4C4();
  v7 = sub_237FDC4A4();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  sub_237F982D4();
  v11 = v10 - v9;
  v1[2] = v6;
  v1[3] = v5;
  v1[6] = v2;
  v1[7] = v0;
  v1[4] = v4;
  v1[5] = v3;
  static Date.distantFuture.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))((uint64_t)v1 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate, v11, v7);
  return v1;
}

uint64_t Credential.Builder.setExpirationDate(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate;
  swift_beginAccess();
  sub_237FDC4A4();
  sub_237FDC4FC();
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v3, a1);
  swift_endAccess();
  return swift_retain();
}

uint64_t Credential.Builder.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtCV11CloudAssets10Credential7Builder_expirationDate;
  v2 = sub_237FDC4A4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t Credential.Builder.__deallocating_deinit()
{
  Credential.Builder.deinit();
  return swift_deallocClassInstance();
}

uint64_t sub_237FDB550(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x6675626F746F7270 && a2 == 0xEC00000061746144)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    sub_237F92CD0();
    v3 = sub_237F96484();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_237FDB5D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_237FDB550(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_237FDB5FC()
{
  sub_237FDB918();
  return CodingKey.description.getter();
}

uint64_t sub_237FDB624()
{
  sub_237FDB918();
  return CodingKey.debugDescription.getter();
}

void Credential.tenantName.getter()
{
  sub_237FDAD74();
  sub_237F961BC();
  sub_237F928A0();
}

void Credential.requestorID.getter()
{
  sub_237FDAD74();
  sub_237F961BC();
  sub_237F928A0();
}

void Credential.accessToken.getter()
{
  sub_237FDAD74();
  sub_237F961BC();
  sub_237F928A0();
}

uint64_t Credential.expirationDate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for Credential(0);
  sub_237FDC4A4();
  sub_237FDC4FC();
  v0 = sub_237F961BC();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t Credential.init(accessToken:expiryDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a4 = 0x616C506572616853;
  a4[1] = 0xE900000000000079;
  a4[2] = 0;
  a4[3] = 0xE000000000000000;
  a4[4] = a1;
  a4[5] = a2;
  v5 = (uint64_t)a4 + *(int *)(type metadata accessor for Credential(0) + 28);
  sub_237FDC4A4();
  sub_237FDC4FC();
  return sub_237F92858(v5, a3, v7, *(uint64_t (**)(void))(v6 + 32));
}

void Credential.init(from:)(_QWORD *a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  type metadata accessor for BinaryDecodingOptions();
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237F9283C();
  type metadata accessor for CloudAssets_Credential(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F982D4();
  v8 = (_QWORD *)(v7 - v6);
  v9 = sub_237F9191C(&qword_2568B8AF8);
  MEMORY[0x24BDAC7A8](v9);
  sub_237F9638C();
  sub_237F9195C(a1, a1[3]);
  sub_237FDB918();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_237F93C8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    BinaryDecodingOptions.init()();
    sub_237FAC398(&qword_2568B8668, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB3E8);
    Message.init(serializedData:extensions:partial:options:)();
    sub_237FDB068(v8, a2);
    sub_237FDC4E0();
  }
  sub_237F91A00((uint64_t)a1);
  sub_237F960D8();
}

unint64_t sub_237FDB918()
{
  unint64_t result;

  result = qword_2568B8B00;
  if (!qword_2568B8B00)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC40C, &type metadata for Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8B00);
  }
  return result;
}

void Credential.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = v2;
  v6 = type metadata accessor for Date();
  v27 = *(_QWORD *)(v6 - 8);
  v28 = v6;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F9283C();
  v26 = v8;
  v9 = type metadata accessor for Google_Protobuf_Timestamp();
  v29 = *(_QWORD *)(v9 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v10);
  sub_237F9638C();
  v11 = type metadata accessor for CloudAssets_Credential(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v12);
  sub_237F960FC();
  v13 = sub_237F9191C(&qword_2568B8B08);
  v31 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v14);
  sub_237F982D4();
  v17 = v16 - v15;
  sub_237F9195C(a1, a1[3]);
  sub_237FDB918();
  v30 = v17;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  UnknownStorage.init()();
  v18 = (uint64_t)v3 + *(int *)(v11 + 32);
  sub_237FDC4F0(v18, 1);
  v19 = v4[1];
  *v3 = *v4;
  v3[1] = v19;
  v20 = v4[3];
  v3[2] = v4[2];
  v3[3] = v20;
  v21 = v4[5];
  v3[4] = v4[4];
  v3[5] = v21;
  v22 = (char *)v4 + *(int *)(type metadata accessor for Credential(0) + 28);
  (*(void (**)(uint64_t, char *, uint64_t))(v27 + 16))(v26, v22, v28);
  sub_237FDC4BC();
  swift_bridgeObjectRetain();
  sub_237FDC508();
  Google_Protobuf_Timestamp.init(date:)();
  sub_237FDBBC4(v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v18, v1, v9);
  sub_237FDC4F0(v18, 0);
  sub_237FAC398(&qword_2568B8668, type metadata accessor for CloudAssets_Credential, (uint64_t)&unk_237FEB3E8);
  v23 = Message.serializedData(partial:)();
  v25 = v24;
  sub_237FDBC04((uint64_t)v3);
  if (!v33)
  {
    sub_237F93D04();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_237F918D8(v23, v25);
  }
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  sub_237F960D8();
}

uint64_t sub_237FDBBC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_237F9191C(&qword_2568B7718);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_237FDBC04(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudAssets_Credential(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void Credential.hash(into:)()
{
  sub_237FDC4BC();
  sub_237FDC4AC();
  sub_237FC5448();
  sub_237FDC4BC();
  sub_237FDC4AC();
  sub_237FC5448();
  sub_237FDC4BC();
  sub_237FDC4AC();
  sub_237FC5448();
  type metadata accessor for Credential(0);
  sub_237FDC4A4();
  sub_237FAC398((unint64_t *)&unk_2568B7940, (uint64_t (*)(uint64_t))MEMORY[0x24BDCE900], MEMORY[0x24BDCE930]);
  dispatch thunk of Hashable.hash(into:)();
  sub_237F961B0();
}

void Credential.hashValue.getter()
{
  sub_237F961E4();
  Credential.hash(into:)();
  Hasher._finalize()();
  sub_237F9631C();
}

Swift::Int sub_237FDBD04()
{
  Hasher.init(_seed:)();
  Credential.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_237FDBD3C()
{
  return sub_237FAC398(&qword_2568B8B10, type metadata accessor for Credential, (uint64_t)&protocol conformance descriptor for Credential);
}

void sub_237FDBD68(_QWORD *a1@<X0>, char *a2@<X8>)
{
  Credential.init(from:)(a1, a2);
}

void sub_237FDBD7C(_QWORD *a1)
{
  Credential.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for Credential(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    v7 = a2[5];
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a2 + v8;
    v10 = (char *)a1 + v8;
    a1[4] = a2[4];
    a1[5] = v7;
    v11 = type metadata accessor for Date();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v12(v10, v9, v11);
  }
  return v3;
}

uint64_t destroy for Credential(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *initializeWithCopy for Credential(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = a2[5];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a2 + v7;
  v9 = (char *)a1 + v7;
  a1[4] = a2[4];
  a1[5] = v6;
  v10 = type metadata accessor for Date();
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v9, v8, v10);
  return a1;
}

_QWORD *assignWithCopy for Credential(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for Credential(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

_QWORD *assignWithTake for Credential(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  v9 = *(int *)(a3 + 28);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for Credential()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FDC100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_237FDC4A4();
    return _s11CloudAssets21UploadResponseMessageOwet_0(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for Credential()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FDC17C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(a1 + 8) = (a2 - 1);
    sub_237F961B0();
  }
  else
  {
    v7 = sub_237FDC4A4();
    _s11CloudAssets21UploadResponseMessageOwst_0(a1 + *(int *)(a4 + 28), a2, a2, v7);
  }
}

uint64_t sub_237FDC1DC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_237FDC254()
{
  return type metadata accessor for Credential.Builder(0);
}

uint64_t type metadata accessor for Credential.Builder(uint64_t a1)
{
  return sub_237F95A14(a1, (uint64_t *)&unk_2568B8B28);
}

uint64_t sub_237FDC270()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for Credential.Builder()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Credential.Builder.__allocating_init(tenantName:requestorID:accessToken:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t storeEnumTagSinglePayload for Credential.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_237FDC340 + 4 * byte_237FEC210[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_237FDC360 + 4 * byte_237FEC215[v4]))();
}

_BYTE *sub_237FDC340(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_237FDC360(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FDC368(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FDC370(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_237FDC378(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_237FDC380(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Credential.CodingKeys()
{
  return &type metadata for Credential.CodingKeys;
}

unint64_t sub_237FDC3A0()
{
  unint64_t result;

  result = qword_2568B8B38;
  if (!qword_2568B8B38)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC3E4, &type metadata for Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8B38);
  }
  return result;
}

unint64_t sub_237FDC3E0()
{
  unint64_t result;

  result = qword_2568B8B40;
  if (!qword_2568B8B40)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC354, &type metadata for Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8B40);
  }
  return result;
}

unint64_t sub_237FDC420()
{
  unint64_t result;

  result = qword_2568B8B48;
  if (!qword_2568B8B48)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC37C, &type metadata for Credential.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8B48);
  }
  return result;
}

uint64_t sub_237FDC45C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_237F9191C(&qword_2568B7718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_237FDC4A4()
{
  return type metadata accessor for Date();
}

uint64_t sub_237FDC4AC()
{
  return String.hash(into:)();
}

uint64_t sub_237FDC4BC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_237FDC4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v0, v2);
}

uint64_t sub_237FDC4F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return _s11CloudAssets21UploadResponseMessageOwst_0(a1, a2, 1, v2);
}

uint64_t sub_237FDC508()
{
  return swift_bridgeObjectRetain();
}

uint64_t AssetUploadRequest.id.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  type metadata accessor for UUID();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t AssetUploadRequest.tenantName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(sub_237FB8398() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t type metadata accessor for AssetUploadRequest()
{
  uint64_t result;

  result = qword_2568B8B90;
  if (!qword_2568B8B90)
    return swift_getSingletonMetadata();
  return result;
}

void AssetUploadRequest.tenantName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(sub_237FB8398() + 20));
  swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  sub_237F961B0();
}

uint64_t (*AssetUploadRequest.tenantName.modify())()
{
  sub_237FB8398();
  return nullsub_1;
}

uint64_t AssetUploadRequest.workingDirectory.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FB8398();
  sub_237F92860();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t AssetUploadRequest.workingDirectory.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(sub_237FB8398() + 24);
  v4 = sub_237F92860();
  return sub_237F92858(v3, a1, v4, *(uint64_t (**)(void))(*(_QWORD *)(v4 - 8) + 40));
}

uint64_t (*AssetUploadRequest.workingDirectory.modify())()
{
  sub_237FB8398();
  return nullsub_1;
}

uint64_t AssetUploadRequest.fileURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FB8398();
  sub_237F92860();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t AssetUploadRequest.storageLocation.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);

  sub_237FB8398();
  sub_237F92860();
  v0 = sub_237F92888();
  return sub_237F92858(v0, v1, v2, v3);
}

uint64_t AssetUploadRequest.protector.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = (uint64_t *)(v1 + *(int *)(sub_237FB8398() + 36));
  v4 = *v3;
  v5 = v3[1];
  v6 = v3[2];
  v7 = v3[3];
  *a1 = *v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  sub_237F91894(v4, v5);
  return sub_237F91894(v6, v7);
}

uint64_t AssetUploadRequest.credential.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_237FB8398();
  return sub_237FDDA70(v1 + *(int *)(v3 + 40), a1, type metadata accessor for Credential);
}

uint64_t AssetUploadRequest.init(fileURL:storageLocation:protector:credential:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  __int128 v18;

  v18 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v10 = *((_QWORD *)a3 + 3);
  UUID.init()();
  v11 = (int *)sub_237FB8398();
  v12 = (_QWORD *)(a5 + v11[5]);
  *v12 = 0x616C506572616853;
  v12[1] = 0xE900000000000079;
  sub_237F99720(0x616C506572616853, 0xE900000000000079);
  v13 = a5 + v11[7];
  v14 = sub_237F92860();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
  v15(v13, a1, v14);
  v15(a5 + v11[8], a2, v14);
  v16 = a5 + v11[9];
  *(_OWORD *)v16 = v18;
  *(_QWORD *)(v16 + 16) = v9;
  *(_QWORD *)(v16 + 24) = v10;
  return sub_237FDE8C0(a4, a5 + v11[10]);
}

uint64_t sub_237FDC85C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Credential(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t AssetUploadRequest.init(tenantName:fileURL:storageLocation:protector:credential:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  __int128 v22;

  v22 = *a5;
  v13 = *((_QWORD *)a5 + 2);
  v14 = *((_QWORD *)a5 + 3);
  UUID.init()();
  v15 = (int *)sub_237FB8398();
  v16 = (_QWORD *)(a7 + v15[5]);
  *v16 = a1;
  v16[1] = a2;
  swift_bridgeObjectRetain();
  sub_237F99720(a1, a2);
  swift_bridgeObjectRelease();
  v17 = a7 + v15[7];
  v18 = sub_237F92860();
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
  v19(v17, a3, v18);
  v19(a7 + v15[8], a4, v18);
  v20 = a7 + v15[9];
  *(_OWORD *)v20 = v22;
  *(_QWORD *)(v20 + 16) = v13;
  *(_QWORD *)(v20 + 24) = v14;
  return sub_237FDE8C0(a6, a7 + v15[10]);
}

void AssetUploadRequest.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  type metadata accessor for UUID();
  sub_237FAC398(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
  dispatch thunk of Hashable.hash(into:)();
  v1 = sub_237FB8398();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  sub_237F92860();
  sub_237FAC398(&qword_2568B7518, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAF0]);
  sub_237FDE8F0();
  sub_237FDE8F0();
  sub_237FDE8F0();
  v2 = (uint64_t *)(v0 + *(int *)(v1 + 36));
  v3 = *v2;
  v4 = v2[1];
  v5 = v2[2];
  v6 = v2[3];
  sub_237F91894(*v2, v4);
  Data.hash(into:)();
  sub_237F918D8(v3, v4);
  sub_237F91894(v5, v6);
  Data.hash(into:)();
  sub_237FA3938(v5);
  Credential.hash(into:)();
}

uint64_t static AssetUploadRequest.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  BOOL v8;

  if ((static UUID.== infix(_:_:)() & 1) != 0)
  {
    v4 = *(int *)(sub_237FB8398() + 20);
    v5 = *(_QWORD *)(a1 + v4);
    v6 = *(_QWORD *)(a1 + v4 + 8);
    v7 = (_QWORD *)(a2 + v4);
    v8 = v5 == *v7 && v6 == v7[1];
    if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      sub_237F9C970();
  }
  return 0;
}

uint64_t sub_237FDCC90(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  char v11;

  v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v6 = a1 == 0x614E746E616E6574 && a2 == 0xEA0000000000656DLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000237FE32B0
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v7 = a1 == 0x4C5255656C6966 && a2 == 0xE700000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        v8 = a1 == 0x4C656761726F7473 && a2 == 0xEF6E6F697461636FLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 4;
        }
        else
        {
          v9 = a1 == 0x6F746365746F7270 && a2 == 0xE900000000000072;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 5;
          }
          else if (a1 == 0x69746E6564657263 && a2 == 0xEA00000000006C61)
          {
            swift_bridgeObjectRelease();
            return 6;
          }
          else
          {
            v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v11 & 1) != 0)
              return 6;
            else
              return 7;
          }
        }
      }
    }
  }
}

uint64_t sub_237FDCF80()
{
  return 7;
}

uint64_t sub_237FDCF88(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_237FDCFB0 + 4 * byte_237FEC460[a1]))(25705, 0xE200000000000000);
}

uint64_t sub_237FDCFB0()
{
  return 0x614E746E616E6574;
}

unint64_t sub_237FDCFCC()
{
  return 0xD000000000000010;
}

uint64_t sub_237FDCFE8()
{
  return 0x4C5255656C6966;
}

uint64_t sub_237FDD000()
{
  return 0x4C656761726F7473;
}

uint64_t sub_237FDD024()
{
  return 0x6F746365746F7270;
}

uint64_t sub_237FDD040()
{
  return 0x69746E6564657263;
}

uint64_t sub_237FDD060()
{
  unsigned __int8 *v0;

  return sub_237FDCF88(*v0);
}

uint64_t sub_237FDD068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FDCC90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FDD08C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237FDCF80();
  *a1 = result;
  return result;
}

uint64_t sub_237FDD0B0()
{
  sub_237FDD37C();
  return CodingKey.description.getter();
}

uint64_t sub_237FDD0D8()
{
  sub_237FDD37C();
  return CodingKey.debugDescription.getter();
}

void AssetUploadRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = sub_237F9191C(&qword_2568B8B50);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  sub_237F982D4();
  v7 = v6 - v5;
  sub_237F9195C(a1, a1[3]);
  sub_237FDD37C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_237FAC398(&qword_2568B7530, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA70]);
  sub_237F9C938();
  sub_237F9C734();
  if (!v1)
  {
    type metadata accessor for AssetUploadRequest();
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for URL();
    sub_237FAC398(&qword_2568B7538, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDAE0]);
    sub_237F9C734();
    sub_237F9C734();
    sub_237F9C734();
    sub_237FDD3B8();
    sub_237F9C734();
    type metadata accessor for Credential(0);
    sub_237FAC398(&qword_2568B77C0, type metadata accessor for Credential, (uint64_t)&protocol conformance descriptor for Credential);
    sub_237F9C938();
    sub_237F9C734();
  }
  sub_237FB7D9C(v7, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
  sub_237F960D8();
}

unint64_t sub_237FDD37C()
{
  unint64_t result;

  result = qword_2568B8B58;
  if (!qword_2568B8B58)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC6CC, &type metadata for AssetUploadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8B58);
  }
  return result;
}

unint64_t sub_237FDD3B8()
{
  unint64_t result;

  result = qword_2568B8B60;
  if (!qword_2568B8B60)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Asset.Protector, &type metadata for Asset.Protector);
    atomic_store(result, (unint64_t *)&qword_2568B8B60);
  }
  return result;
}

Swift::Int AssetUploadRequest.hashValue.getter()
{
  Hasher.init(_seed:)();
  AssetUploadRequest.hash(into:)();
  return Hasher._finalize()();
}

void AssetUploadRequest.init(from:)(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  _OWORD *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  char v59;

  v43 = a2;
  v46 = type metadata accessor for Credential(0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F9283C();
  v44 = v4;
  v5 = type metadata accessor for URL();
  v51 = *(_QWORD *)(v5 - 8);
  v52 = v5;
  sub_237F960F0();
  v7 = MEMORY[0x24BDAC7A8](v6);
  v45 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v41 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v41 - v12;
  v14 = type metadata accessor for UUID();
  v50 = *(_QWORD *)(v14 - 8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v15);
  sub_237F982D4();
  v18 = v17 - v16;
  v47 = sub_237F9191C(&qword_2568B8B68);
  v19 = *(_QWORD *)(v47 - 8);
  MEMORY[0x24BDAC7A8](v47);
  sub_237F982D4();
  v22 = v21 - v20;
  v55 = (int *)type metadata accessor for AssetUploadRequest();
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v23);
  sub_237F9283C();
  v56 = v24;
  v25 = a1[3];
  v53 = a1;
  sub_237F9195C(a1, v25);
  sub_237FDD37C();
  v48 = v22;
  v26 = v54;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  v49 = v14;
  if (v26)
  {
    sub_237FDE920();
  }
  else
  {
    LOBYTE(v57) = 0;
    sub_237FAC398(&qword_2568B7550, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEAA8]);
    sub_237F9C938();
    sub_237FDE900();
    v27 = v14;
    v28 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v56, v18, v27);
    LOBYTE(v57) = 1;
    v29 = KeyedDecodingContainer.decode(_:forKey:)();
    v54 = v19;
    v30 = (uint64_t *)(v28 + v55[5]);
    *v30 = v29;
    v30[1] = v31;
    LOBYTE(v57) = 2;
    sub_237FAC398(&qword_2568B7560, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDAC0], MEMORY[0x24BDCDB10]);
    v32 = v52;
    sub_237FDE900();
    v33 = v55;
    v34 = v56 + v55[6];
    v42 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 32);
    v42(v34, v13, v32);
    LOBYTE(v57) = 3;
    sub_237FDE900();
    v35 = v33[7];
    v36 = v56;
    sub_237FDE928(v56 + v35, (uint64_t)v11);
    LOBYTE(v57) = 4;
    sub_237FDE900();
    v37 = v55;
    sub_237FDE928(v36 + v55[8], v45);
    v59 = 5;
    sub_237FDDA34();
    sub_237FDE900();
    v38 = (_OWORD *)(v36 + v37[9]);
    v39 = v58;
    *v38 = v57;
    v38[1] = v39;
    LOBYTE(v57) = 6;
    sub_237FAC398(&qword_2568B8990, type metadata accessor for Credential, (uint64_t)&protocol conformance descriptor for Credential);
    sub_237F9C938();
    v40 = v44;
    sub_237FDE900();
    sub_237FDE908();
    sub_237FDC85C(v40, v36 + v37[10]);
    sub_237FDDA70(v36, v43, (uint64_t (*)(_QWORD))type metadata accessor for AssetUploadRequest);
    sub_237FDE920();
    sub_237FDDAB4(v36);
  }
  sub_237F960D8();
}

Swift::Int sub_237FDD9FC()
{
  Hasher.init(_seed:)();
  AssetUploadRequest.hash(into:)();
  return Hasher._finalize()();
}

unint64_t sub_237FDDA34()
{
  unint64_t result;

  result = qword_2568B8B70;
  if (!qword_2568B8B70)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for Asset.Protector, &type metadata for Asset.Protector);
    atomic_store(result, (unint64_t *)&qword_2568B8B70);
  }
  return result;
}

uint64_t sub_237FDDA70(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_237FDDAB4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AssetUploadRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_237FDDAF0(_QWORD *a1)
{
  uint64_t result;

  a1[1] = sub_237FAC398(&qword_2568B82D0, (uint64_t (*)(uint64_t))type metadata accessor for AssetUploadRequest, (uint64_t)&protocol conformance descriptor for AssetUploadRequest);
  a1[2] = sub_237FAC398(&qword_2568B82A0, (uint64_t (*)(uint64_t))type metadata accessor for AssetUploadRequest, (uint64_t)&protocol conformance descriptor for AssetUploadRequest);
  a1[3] = sub_237FAC398(&qword_2568B8B78, (uint64_t (*)(uint64_t))type metadata accessor for AssetUploadRequest, (uint64_t)&protocol conformance descriptor for AssetUploadRequest);
  result = sub_237FAC398(&qword_2568B8B80, (uint64_t (*)(uint64_t))type metadata accessor for AssetUploadRequest, (uint64_t)&protocol conformance descriptor for AssetUploadRequest);
  a1[4] = result;
  return result;
}

uint64_t sub_237FDDB84()
{
  return sub_237FAC398(&qword_2568B8B88, (uint64_t (*)(uint64_t))type metadata accessor for AssetUploadRequest, (uint64_t)&protocol conformance descriptor for AssetUploadRequest);
}

void sub_237FDDBB0(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  AssetUploadRequest.init(from:)(a1, a2);
}

void sub_237FDDBC4(_QWORD *a1)
{
  AssetUploadRequest.encode(to:)(a1);
}

uint64_t sub_237FDDBD8()
{
  return sub_237FAC398(&qword_2568B7510, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA88]);
}

char *initializeBufferWithCopyOfBuffer for AssetUploadRequest(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v36 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v36 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = &a1[v8];
    v11 = &a2[v8];
    v12 = *((_QWORD *)v11 + 1);
    *(_QWORD *)v10 = *(_QWORD *)v11;
    *((_QWORD *)v10 + 1) = v12;
    v13 = &a1[v9];
    v14 = &a2[v9];
    v15 = type metadata accessor for URL();
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain();
    v16(v13, v14, v15);
    v16(&a1[a3[7]], &a2[a3[7]], v15);
    v16(&a1[a3[8]], &a2[a3[8]], v15);
    v17 = a3[9];
    v18 = (uint64_t *)&a1[v17];
    v19 = &a2[v17];
    v20 = *(_QWORD *)&a2[v17];
    v21 = *(_QWORD *)&a2[v17 + 8];
    sub_237F91894(v20, v21);
    *v18 = v20;
    v18[1] = v21;
    v22 = *((_QWORD *)v19 + 2);
    v23 = *((_QWORD *)v19 + 3);
    sub_237F91894(v22, v23);
    v18[2] = v22;
    v18[3] = v23;
    v24 = a3[10];
    v25 = &a1[v24];
    v26 = &a2[v24];
    v27 = *(_QWORD *)&a2[v24];
    v28 = *((_QWORD *)v26 + 1);
    *(_QWORD *)v25 = v27;
    *((_QWORD *)v25 + 1) = v28;
    v29 = *((_QWORD *)v26 + 3);
    *((_QWORD *)v25 + 2) = *((_QWORD *)v26 + 2);
    *((_QWORD *)v25 + 3) = v29;
    v30 = *((_QWORD *)v26 + 5);
    *((_QWORD *)v25 + 4) = *((_QWORD *)v26 + 4);
    *((_QWORD *)v25 + 5) = v30;
    v31 = *(int *)(type metadata accessor for Credential(0) + 28);
    v32 = &v25[v31];
    v33 = &v26[v31];
    v34 = type metadata accessor for Date();
    v35 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35(v32, v33, v34);
  }
  return a1;
}

uint64_t destroy for AssetUploadRequest(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + a2[6];
  v6 = type metadata accessor for URL();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + a2[7], v6);
  v7(a1 + a2[8], v6);
  v8 = a1 + a2[9];
  sub_237F918D8(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
  sub_237F918D8(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
  v9 = a1 + a2[10];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v9 + *(int *)(type metadata accessor for Credential(0) + 28);
  v11 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = type metadata accessor for URL();
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  v15(a1 + a3[7], a2 + a3[7], v14);
  v15(a1 + a3[8], a2 + a3[8], v14);
  v16 = a3[9];
  v17 = (uint64_t *)(a1 + v16);
  v18 = a2 + v16;
  v19 = *(_QWORD *)(a2 + v16);
  v20 = *(_QWORD *)(a2 + v16 + 8);
  sub_237F91894(v19, v20);
  *v17 = v19;
  v17[1] = v20;
  v21 = *(_QWORD *)(v18 + 16);
  v22 = *(_QWORD *)(v18 + 24);
  sub_237F91894(v21, v22);
  v17[2] = v21;
  v17[3] = v22;
  v23 = a3[10];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23);
  v27 = v25[1];
  *v24 = v26;
  v24[1] = v27;
  v28 = v25[3];
  v24[2] = v25[2];
  v24[3] = v28;
  v29 = v25[5];
  v24[4] = v25[4];
  v24[5] = v29;
  v30 = *(int *)(type metadata accessor for Credential(0) + 28);
  v31 = (char *)v24 + v30;
  v32 = (char *)v25 + v30;
  v33 = type metadata accessor for Date();
  v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34(v31, v32, v33);
  return a1;
}

uint64_t assignWithCopy for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for URL();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14(a1 + a3[7], a2 + a3[7], v13);
  v14(a1 + a3[8], a2 + a3[8], v13);
  v15 = a3[9];
  v16 = (uint64_t *)(a1 + v15);
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a2 + v15);
  v19 = *(_QWORD *)(a2 + v15 + 8);
  sub_237F91894(v18, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_237F918D8(v20, v21);
  v22 = *(_QWORD *)(v17 + 16);
  v23 = *(_QWORD *)(v17 + 24);
  sub_237F91894(v22, v23);
  v24 = v16[2];
  v25 = v16[3];
  v16[2] = v22;
  v16[3] = v23;
  sub_237F918D8(v24, v25);
  v26 = a3[10];
  v27 = (_QWORD *)(a1 + v26);
  v28 = (_QWORD *)(a2 + v26);
  *v27 = *(_QWORD *)(a2 + v26);
  v27[1] = *(_QWORD *)(a2 + v26 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27[2] = v28[2];
  v27[3] = v28[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v27[4] = v28[4];
  v27[5] = v28[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v29 = *(int *)(type metadata accessor for Credential(0) + 28);
  v30 = (char *)v27 + v29;
  v31 = (char *)v28 + v29;
  v32 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v30, v31, v32);
  return a1;
}

uint64_t initializeWithTake for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  _OWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(a1 + a3[7], a2 + a3[7], v10);
  v11(a1 + a3[8], a2 + a3[8], v10);
  v12 = a3[9];
  v13 = a3[10];
  v14 = (_OWORD *)(a1 + v12);
  v15 = (_OWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = (_OWORD *)(a1 + v13);
  v18 = a2 + v13;
  v19 = *(_OWORD *)(a2 + v13 + 16);
  *v17 = *(_OWORD *)(a2 + v13);
  v17[1] = v19;
  v17[2] = *(_OWORD *)(a2 + v13 + 32);
  v20 = *(int *)(type metadata accessor for Credential(0) + 28);
  v21 = (char *)v17 + v20;
  v22 = v18 + v20;
  v23 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

uint64_t assignWithTake for AssetUploadRequest(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for URL();
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v16(a1 + a3[7], a2 + a3[7], v15);
  v16(a1 + a3[8], a2 + a3[8], v15);
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = *(_QWORD *)(a1 + v17);
  v21 = *(_QWORD *)(a1 + v17 + 8);
  *(_OWORD *)(a1 + v17) = *(_OWORD *)(a2 + v17);
  sub_237F918D8(v20, v21);
  v22 = *(_QWORD *)(v18 + 16);
  v23 = *(_QWORD *)(v18 + 24);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)(v19 + 16);
  sub_237F918D8(v22, v23);
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (_QWORD *)(a2 + v24);
  v27 = *(_QWORD *)(a2 + v24 + 8);
  *v25 = *(_QWORD *)(a2 + v24);
  v25[1] = v27;
  swift_bridgeObjectRelease();
  v28 = v26[3];
  v25[2] = v26[2];
  v25[3] = v28;
  swift_bridgeObjectRelease();
  v29 = v26[5];
  v25[4] = v26[4];
  v25[5] = v29;
  swift_bridgeObjectRelease();
  v30 = *(int *)(type metadata accessor for Credential(0) + 28);
  v31 = (char *)v25 + v30;
  v32 = (char *)v26 + v30;
  v33 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v31, v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetUploadRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_237FDE490(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v6 = sub_237F9C8A0();
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)v3)
  {
    v7 = v6;
    v8 = v4;
    return _s11CloudAssets21UploadResponseMessageOwet_0(v8, v3, v7);
  }
  if ((_DWORD)v3 != 0x7FFFFFFF)
  {
    v11 = sub_237F92860();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == (_DWORD)v3)
    {
      v7 = v11;
      v12 = a3[6];
    }
    else
    {
      v7 = type metadata accessor for Credential(0);
      v12 = a3[10];
    }
    v8 = v4 + v12;
    return _s11CloudAssets21UploadResponseMessageOwet_0(v8, v3, v7);
  }
  v9 = *(_QWORD *)(v4 + a3[5] + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetUploadRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_237FDE550(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_237F9C8A0();
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = v5;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(v5 + a4[5] + 8) = (v4 - 1);
      sub_237F961B0();
      return;
    }
    v11 = sub_237F92860();
    if (*(_DWORD *)(*(_QWORD *)(v11 - 8) + 84) == a3)
    {
      v9 = v11;
      v12 = a4[6];
    }
    else
    {
      v9 = type metadata accessor for Credential(0);
      v12 = a4[10];
    }
    v10 = v5 + v12;
  }
  _s11CloudAssets21UploadResponseMessageOwst_0(v10, v4, v4, v9);
}

uint64_t sub_237FDE5F8()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for URL();
    if (v2 <= 0x3F)
    {
      result = type metadata accessor for Credential(319);
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssetUploadRequest.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 6) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v5 = v6 - 7;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetUploadRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_237FDE780 + 4 * byte_237FEC46C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_237FDE7B4 + 4 * byte_237FEC467[v4]))();
}

uint64_t sub_237FDE7B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FDE7BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FDE7C4);
  return result;
}

uint64_t sub_237FDE7D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FDE7D8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_237FDE7DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FDE7E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssetUploadRequest.CodingKeys()
{
  return &type metadata for AssetUploadRequest.CodingKeys;
}

unint64_t sub_237FDE804()
{
  unint64_t result;

  result = qword_2568B8BA0;
  if (!qword_2568B8BA0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC6A4, &type metadata for AssetUploadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8BA0);
  }
  return result;
}

unint64_t sub_237FDE844()
{
  unint64_t result;

  result = qword_2568B8BA8;
  if (!qword_2568B8BA8)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC614, &type metadata for AssetUploadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8BA8);
  }
  return result;
}

unint64_t sub_237FDE884()
{
  unint64_t result;

  result = qword_2568B8BB0;
  if (!qword_2568B8BB0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC63C, &type metadata for AssetUploadRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8BB0);
  }
  return result;
}

uint64_t sub_237FDE8C0(uint64_t a1, uint64_t a2)
{
  return sub_237FDC85C(a1, a2);
}

uint64_t sub_237FDE8DC()
{
  uint64_t v0;
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v1 - 136) + 8))(*(_QWORD *)(v1 - 184), v0);
}

uint64_t sub_237FDE8F0()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t sub_237FDE900()
{
  return KeyedDecodingContainer.decode<A>(_:forKey:)();
}

uint64_t sub_237FDE908()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 - 136) + 8))(*(_QWORD *)(v0 - 184), *(_QWORD *)(v0 - 192));
}

uint64_t sub_237FDE918(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;

  return v1(a1, v2);
}

uint64_t sub_237FDE920()
{
  uint64_t v0;

  return sub_237F91A00(*(_QWORD *)(v0 - 144));
}

uint64_t sub_237FDE928(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 - 232))(a1, a2, v2);
}

uint64_t sub_237FDE934()
{
  uint64_t v0;
  unint64_t v1;

  return sub_237F918D8(v0, v1);
}

uint64_t sub_237FDE940()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237F918D8(v1, v0);
}

BOOL static XPCError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void XPCError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_237FDE988(uint64_t a1, uint64_t a2)
{
  BOOL v5;
  BOOL v6;
  char v8;

  if (a1 == 0xD000000000000015 && a2 == 0x8000000237FE4120
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    v5 = a1 == 0x636552726F727265 && a2 == 0xED00006465766965;
    if (v5 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0xD000000000000010 && a2 == 0x8000000237FE4140
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      v6 = a1 == 0x456E776F6E6B6E75 && a2 == 0xEF746E696F70646ELL;
      if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else if (a1 == 0x6C616E7265746E69 && a2 == 0xED0000726F727245)
      {
        swift_bridgeObjectRelease();
        return 4;
      }
      else
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v8 & 1) != 0)
          return 4;
        else
          return 5;
      }
    }
  }
}

uint64_t sub_237FDEBFC()
{
  return 5;
}

uint64_t sub_237FDEC04(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_237FDEC44 + 4 * byte_237FEC720[a1]))(0xD000000000000015, 0x8000000237FE4120);
}

uint64_t sub_237FDEC44()
{
  return 0x636552726F727265;
}

unint64_t sub_237FDEC68()
{
  return 0xD000000000000010;
}

uint64_t sub_237FDEC84()
{
  return 0x456E776F6E6B6E75;
}

uint64_t sub_237FDECA8()
{
  return 0x6C616E7265746E69;
}

uint64_t sub_237FDECD0()
{
  unsigned __int8 *v0;

  return sub_237FDEC04(*v0);
}

uint64_t sub_237FDECD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_237FDE988(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_237FDECFC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_237FDEBFC();
  *a1 = result;
  return result;
}

uint64_t sub_237FDED20()
{
  sub_237FDF1A8();
  return CodingKey.description.getter();
}

uint64_t sub_237FDED48()
{
  sub_237FDF1A8();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FDED70()
{
  sub_237FDF25C();
  return CodingKey.description.getter();
}

uint64_t sub_237FDED98()
{
  sub_237FDF25C();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FDEDC0()
{
  sub_237FDF298();
  return CodingKey.description.getter();
}

uint64_t sub_237FDEDE8()
{
  sub_237FDF298();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FDEE10()
{
  sub_237FDF2D4();
  return CodingKey.description.getter();
}

uint64_t sub_237FDEE38()
{
  sub_237FDF2D4();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FDEE60()
{
  sub_237FDF1E4();
  return CodingKey.description.getter();
}

uint64_t sub_237FDEE88()
{
  sub_237FDF1E4();
  return CodingKey.debugDescription.getter();
}

uint64_t sub_237FDEEB0()
{
  sub_237FDF220();
  return CodingKey.description.getter();
}

uint64_t sub_237FDEED8()
{
  sub_237FDF220();
  return CodingKey.debugDescription.getter();
}

void XPCError.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_237F9191C(&qword_2568B8BB8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237F9283C();
  sub_237F9191C(&qword_2568B8BC0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v4);
  sub_237FDFD4C(v5, v11);
  sub_237F9191C(&qword_2568B8BC8);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9283C();
  sub_237F9191C(&qword_2568B8BD0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v7);
  sub_237F9283C();
  v8 = sub_237F9191C(&qword_2568B8BD8);
  MEMORY[0x24BDAC7A8](v8);
  sub_237F982D4();
  sub_237F9191C(&qword_2568B8BE0);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v9);
  sub_237F982D4();
  v10 = *v1;
  sub_237F9195C(a1, a1[3]);
  sub_237FDF1A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  __asm { BR              X9 }
}

void sub_237FDF098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  sub_237FDF2D4();
  v5 = *(_QWORD *)(v4 - 88);
  KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v5);
  sub_237F960D8();
}

unint64_t sub_237FDF1A8()
{
  unint64_t result;

  result = qword_2568B8BE8;
  if (!qword_2568B8BE8)
  {
    result = MEMORY[0x23B829E84](&unk_237FECCE0, &type metadata for XPCError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8BE8);
  }
  return result;
}

unint64_t sub_237FDF1E4()
{
  unint64_t result;

  result = qword_2568B8BF0;
  if (!qword_2568B8BF0)
  {
    result = MEMORY[0x23B829E84](&unk_237FECC90, &type metadata for XPCError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8BF0);
  }
  return result;
}

unint64_t sub_237FDF220()
{
  unint64_t result;

  result = qword_2568B8BF8;
  if (!qword_2568B8BF8)
  {
    result = MEMORY[0x23B829E84](&unk_237FECC40, &type metadata for XPCError.UnknownEndpointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8BF8);
  }
  return result;
}

unint64_t sub_237FDF25C()
{
  unint64_t result;

  result = qword_2568B8C00;
  if (!qword_2568B8C00)
  {
    result = MEMORY[0x23B829E84](&unk_237FECBF0, &type metadata for XPCError.CorruptedMessageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C00);
  }
  return result;
}

unint64_t sub_237FDF298()
{
  unint64_t result;

  result = qword_2568B8C08;
  if (!qword_2568B8C08)
  {
    result = MEMORY[0x23B829E84](&unk_237FECBA0, &type metadata for XPCError.ErrorReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C08);
  }
  return result;
}

unint64_t sub_237FDF2D4()
{
  unint64_t result;

  result = qword_2568B8C10;
  if (!qword_2568B8C10)
  {
    result = MEMORY[0x23B829E84](&unk_237FECB50, &type metadata for XPCError.InitializationFailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C10);
  }
  return result;
}

void XPCError.hashValue.getter()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = Hasher.init(_seed:)();
  sub_237FDFD88(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  Hasher._finalize()();
  sub_237F9631C();
}

void XPCError.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  sub_237F9191C(&qword_2568B8C18);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v2);
  sub_237F9283C();
  sub_237F9191C(&qword_2568B8C20);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v3);
  sub_237FDFD4C(v4, v19);
  sub_237F9191C(&qword_2568B8C28);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v5);
  sub_237F9283C();
  sub_237F9191C(&qword_2568B8C30);
  sub_237F960F0();
  MEMORY[0x24BDAC7A8](v6);
  sub_237F9283C();
  v7 = sub_237F9191C(&qword_2568B8C38);
  MEMORY[0x24BDAC7A8](v7);
  sub_237F982D4();
  v8 = sub_237F9191C(&qword_2568B8C40);
  MEMORY[0x24BDAC7A8](v8);
  sub_237F982D4();
  sub_237F9195C(a1, a1[3]);
  sub_237FDF1A8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v20)
  {
    v9 = KeyedDecodingContainer.allKeys.getter();
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = *(unsigned __int8 *)(v9 + 32);
      sub_237FA372C(1, v10, v9, v9 + 32, 0, (2 * v10) | 1);
      v13 = v12;
      v15 = v14;
      swift_bridgeObjectRelease();
      if (v13 == v15 >> 1)
        __asm { BR              X9 }
    }
    v16 = type metadata accessor for DecodingError();
    swift_allocError();
    v18 = v17;
    sub_237F9191C(&qword_2568B78D8);
    *v18 = &type metadata for XPCError;
    KeyedDecodingContainer.codingPath.getter();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, *MEMORY[0x24BEE26D0], v16);
    swift_willThrow();
    swift_unknownObjectRelease();
    sub_237FDFD68();
  }
  sub_237F91A00((uint64_t)a1);
  sub_237F960D8();
}

void sub_237FDF684()
{
  uint64_t v0;

  sub_237FDFDAC();
  sub_237FDFD38();
  if (!v0)
    JUMPOUT(0x237FDF75CLL);
  JUMPOUT(0x237FDF660);
}

void sub_237FDF6B4()
{
  uint64_t v0;

  sub_237FDFDA0();
  sub_237FDFD38();
  if (!v0)
    JUMPOUT(0x237FDF6E0);
  JUMPOUT(0x237FDF660);
}

void sub_237FDF6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_237FDFD94();
  v3 = *(_QWORD *)(v2 - 152);
  sub_237FDFD38();
  if (!v0)
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 176) + 8))(v3, v1);
    swift_unknownObjectRelease();
    sub_237FDFD68();
    **(_BYTE **)(v2 - 136) = *(_QWORD *)(v2 - 248);
    JUMPOUT(0x237FDF66CLL);
  }
  JUMPOUT(0x237FDF660);
}

void sub_237FDF728()
{
  uint64_t v0;

  sub_237FDFD7C();
  sub_237FDFD38();
  if (!v0)
    JUMPOUT(0x237FDF75CLL);
  JUMPOUT(0x237FDF660);
}

void sub_237FDF788()
{
  int v0;
  int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;

  v0 = Hasher.init(_seed:)();
  sub_237FDFD88(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
  Hasher._finalize()();
  sub_237F9631C();
}

void sub_237FDF7B8(_QWORD *a1)
{
  XPCError.init(from:)(a1);
}

void sub_237FDF7CC(_QWORD *a1)
{
  XPCError.encode(to:)(a1);
}

unint64_t sub_237FDF7E4()
{
  unint64_t result;

  result = qword_2568B8C48;
  if (!qword_2568B8C48)
  {
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for XPCError, &type metadata for XPCError);
    atomic_store(result, (unint64_t *)&qword_2568B8C48);
  }
  return result;
}

ValueMetadata *type metadata accessor for XPCError()
{
  return &type metadata for XPCError;
}

uint64_t _s11CloudAssets8XPCErrorOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 4) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v5 = v6 - 5;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s11CloudAssets8XPCErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_237FDF90C + 4 * byte_237FEC734[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_237FDF940 + 4 * byte_237FEC72F[v4]))();
}

uint64_t sub_237FDF940(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FDF948(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x237FDF950);
  return result;
}

uint64_t sub_237FDF95C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x237FDF964);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_237FDF968(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_237FDF970(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for XPCError.CodingKeys()
{
  return &type metadata for XPCError.CodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.InitializationFailureCodingKeys()
{
  return &type metadata for XPCError.InitializationFailureCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.ErrorReceivedCodingKeys()
{
  return &type metadata for XPCError.ErrorReceivedCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.CorruptedMessageCodingKeys()
{
  return &type metadata for XPCError.CorruptedMessageCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.UnknownEndpointCodingKeys()
{
  return &type metadata for XPCError.UnknownEndpointCodingKeys;
}

ValueMetadata *type metadata accessor for XPCError.InternalErrorCodingKeys()
{
  return &type metadata for XPCError.InternalErrorCodingKeys;
}

unint64_t sub_237FDF9E0()
{
  unint64_t result;

  result = qword_2568B8C50;
  if (!qword_2568B8C50)
  {
    result = MEMORY[0x23B829E84](&unk_237FECB28, &type metadata for XPCError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C50);
  }
  return result;
}

unint64_t sub_237FDFA20()
{
  unint64_t result;

  result = qword_2568B8C58;
  if (!qword_2568B8C58)
  {
    result = MEMORY[0x23B829E84](&unk_237FECA48, &type metadata for XPCError.InitializationFailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C58);
  }
  return result;
}

unint64_t sub_237FDFA60()
{
  unint64_t result;

  result = qword_2568B8C60;
  if (!qword_2568B8C60)
  {
    result = MEMORY[0x23B829E84](&unk_237FECA70, &type metadata for XPCError.InitializationFailureCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C60);
  }
  return result;
}

unint64_t sub_237FDFAA0()
{
  unint64_t result;

  result = qword_2568B8C68;
  if (!qword_2568B8C68)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC9F8, &type metadata for XPCError.ErrorReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C68);
  }
  return result;
}

unint64_t sub_237FDFAE0()
{
  unint64_t result;

  result = qword_2568B8C70;
  if (!qword_2568B8C70)
  {
    result = MEMORY[0x23B829E84](&unk_237FECA20, &type metadata for XPCError.ErrorReceivedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C70);
  }
  return result;
}

unint64_t sub_237FDFB20()
{
  unint64_t result;

  result = qword_2568B8C78;
  if (!qword_2568B8C78)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC9A8, &type metadata for XPCError.CorruptedMessageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C78);
  }
  return result;
}

unint64_t sub_237FDFB60()
{
  unint64_t result;

  result = qword_2568B8C80;
  if (!qword_2568B8C80)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC9D0, &type metadata for XPCError.CorruptedMessageCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C80);
  }
  return result;
}

unint64_t sub_237FDFBA0()
{
  unint64_t result;

  result = qword_2568B8C88;
  if (!qword_2568B8C88)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC958, &type metadata for XPCError.UnknownEndpointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C88);
  }
  return result;
}

unint64_t sub_237FDFBE0()
{
  unint64_t result;

  result = qword_2568B8C90;
  if (!qword_2568B8C90)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC980, &type metadata for XPCError.UnknownEndpointCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C90);
  }
  return result;
}

unint64_t sub_237FDFC20()
{
  unint64_t result;

  result = qword_2568B8C98;
  if (!qword_2568B8C98)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC908, &type metadata for XPCError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8C98);
  }
  return result;
}

unint64_t sub_237FDFC60()
{
  unint64_t result;

  result = qword_2568B8CA0;
  if (!qword_2568B8CA0)
  {
    result = MEMORY[0x23B829E84](&unk_237FEC930, &type metadata for XPCError.InternalErrorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8CA0);
  }
  return result;
}

unint64_t sub_237FDFCA0()
{
  unint64_t result;

  result = qword_2568B8CA8;
  if (!qword_2568B8CA8)
  {
    result = MEMORY[0x23B829E84](&unk_237FECA98, &type metadata for XPCError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8CA8);
  }
  return result;
}

unint64_t sub_237FDFCE0()
{
  unint64_t result;

  result = qword_2568B8CB0;
  if (!qword_2568B8CB0)
  {
    result = MEMORY[0x23B829E84](&unk_237FECAC0, &type metadata for XPCError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2568B8CB0);
  }
  return result;
}

uint64_t sub_237FDFD20()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t sub_237FDFD38()
{
  return KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

void sub_237FDFD4C(uint64_t a1@<X8>, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 - 152) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t sub_237FDFD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 96) + 8))(v0, v1);
}

unint64_t sub_237FDFD7C()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 65) = 4;
  return sub_237FDF1E4();
}

void sub_237FDFD88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  Swift::UInt v10;

  Hasher._combine(_:)(v10);
}

unint64_t sub_237FDFD94()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 66) = 3;
  return sub_237FDF220();
}

unint64_t sub_237FDFDA0()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 67) = 2;
  return sub_237FDF25C();
}

unint64_t sub_237FDFDAC()
{
  uint64_t v0;

  *(_BYTE *)(v0 - 68) = 1;
  return sub_237FDF298();
}

id sub_237FDFDB8(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x24BDAC8D0];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = sub_237F92860();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = sub_237F92860();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

void sub_237FDFEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  void *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  id v16;
  _QWORD v17[12];

  v17[11] = *MEMORY[0x24BDAC8D0];
  v1 = sub_237F92860();
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_237FE00B0();
  sub_237FE0198((uint64_t)v3);
  v4 = sub_237FDFDB8((uint64_t)v3);
  if (!v0)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, sel_fileDescriptor);
    v17[0] = 65542;
    v7 = ffsctl(v6, 0xC0084A44uLL, v17, 0);
    if (v7)
    {
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v11 = v10;
      sub_237F9191C(&qword_2568B8CB8);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_237FE7750;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)(inited + 40) = v13;
      *(_QWORD *)(inited + 72) = v1;
      v14 = sub_237FAC294((uint64_t *)(inited + 48));
      sub_237FE0198((uint64_t)v14);
      v15 = Dictionary.init(dictionaryLiteral:)();
      v16 = objc_allocWithZone(MEMORY[0x24BDD1540]);
      sub_237FE00EC(v9, v11, v8, v15);
      swift_willThrow();
    }
    objc_msgSend(v5, sel_closeFile);

  }
}

unint64_t sub_237FE00B0()
{
  unint64_t result;

  result = qword_2568B8A88;
  if (!qword_2568B8A88)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_2568B8A88);
  }
  return result;
}

id sub_237FE00EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v7;
  NSDictionary v8;
  id v9;

  v7 = (void *)MEMORY[0x23B829578]();
  swift_bridgeObjectRelease();
  if (a4)
  {
    v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.isa = 0;
  }
  v9 = objc_msgSend(v4, sel_initWithDomain_code_userInfo_, v7, a3, v8.super.isa);

  return v9;
}

uint64_t sub_237FE0198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);

  return v3(a1, v1, v2);
}

id PlayerItem.__allocating_init(avAsset:delegate:)()
{
  void *v0;
  uint64_t v1;

  sub_237FE0F5C();
  v0 = (void *)sub_237FE0F6C();
  return sub_237FE0A88(v0, v1);
}

uint64_t sub_237FE01CC()
{
  uint64_t v0;

  v0 = sub_237FAC474();
  sub_237FAC0E4(v0, qword_2568B8CC0);
  sub_237FABF5C(v0, (uint64_t)qword_2568B8CC0);
  sub_237FE0EC4();
  sub_237F9191C(&qword_2568B8D28);
  String.init<A>(describing:)();
  return Logger.init(subsystem:category:)();
}

id PlayerItem.init(avAsset:delegate:)()
{
  void *v0;
  uint64_t v1;
  void *v2;

  sub_237FE0F5C();
  v0 = (void *)sub_237FE0F6C();
  return sub_237FE0AD0(v0, v1, v2);
}

uint64_t sub_237FE0284(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  dispatch_semaphore_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t result;
  void *v20;
  id v21;
  uint64_t v22;

  v4 = type metadata accessor for DispatchTime();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_237F9191C(&qword_2568B89A0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = dispatch_semaphore_create(0);
  type metadata accessor for PlayerItem.UnsafeSendablePlayerItemBox();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = 0;
  v13 = type metadata accessor for TaskPriority();
  _s11CloudAssets21UploadResponseMessageOwst_0((uint64_t)v10, 1, 1, v13);
  type metadata accessor for MainActor();
  v14 = v11;
  swift_retain();
  v15 = a1;
  swift_unknownObjectRetain();
  v16 = static MainActor.shared.getter();
  v17 = (_QWORD *)swift_allocObject();
  v18 = MEMORY[0x24BEE6930];
  v17[2] = v16;
  v17[3] = v18;
  v17[4] = v14;
  v17[5] = v12;
  v17[6] = v15;
  v17[7] = a2;
  sub_237FAA8B0((uint64_t)v10, (uint64_t)&unk_2568B8CE8, (uint64_t)v17);
  swift_release();
  static DispatchTime.distantFuture.getter();
  MEMORY[0x23B8297AC](v7);
  result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = *(void **)(v12 + 16);
  if (v20)
  {
    v21 = v20;
    swift_release();

    return (uint64_t)v21;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_237FE043C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  type metadata accessor for MainActor();
  v7[6] = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

uint64_t sub_237FE04AC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  void *v6;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  swift_release();
  sub_237FE0EC4();
  swift_getObjectType();
  v4 = v2;
  swift_unknownObjectRetain();
  v5 = sub_237FE0A88(v4, v1);
  v6 = *(void **)(v3 + 16);
  *(_QWORD *)(v3 + 16) = v5;

  OS_dispatch_semaphore.signal()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id PlayerItem.__deallocating_deinit()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  objc_super v10;

  if (qword_2568B73C8 != -1)
    swift_once();
  v1 = sub_237FAC474();
  sub_237FABF5C(v1, (uint64_t)qword_2568B8CC0);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)sub_237FAC3E4();
    sub_237FAC3E4();
    *(_DWORD *)v5 = 136315138;
    sub_237F92868();
    sub_237FE0E84();
    v6 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_237FE0F94(v6, v7, v8);
    sub_237FE0F80();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_237F8F000, v3, v4, "deinit PlayerItem with id %s", v5, 0xCu);
    swift_arrayDestroy();
    sub_237FAC3D8();
  }

  v10.receiver = v2;
  v10.super_class = (Class)sub_237FE0EC4();
  return objc_msgSendSuper2(&v10, sel_dealloc);
}

id sub_237FE0748@<X0>(_QWORD *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id result;

  if (qword_2568B73C8 != -1)
    swift_once();
  v3 = sub_237FAC474();
  sub_237FABF5C(v3, (uint64_t)qword_2568B8CC0);
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)sub_237FAC3E4();
    sub_237FAC3E4();
    *(_DWORD *)v7 = 136315138;
    sub_237F92868();
    sub_237FE0E84();
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    sub_237FE0F94(v8, v9, v10);
    sub_237FE0F80();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_237F8F000, v5, v6, "copy PlayerItem with id %s", v7, 0xCu);
    swift_arrayDestroy();
    sub_237FAC3D8();
  }

  v11 = sub_237FE0EC4();
  v12 = objc_msgSend(v4, sel_asset);
  v13 = *(_QWORD *)&v4[OBJC_IVAR____TtC11CloudAssets10PlayerItem_resourceLoaderDelegate];
  swift_getObjectType();
  swift_unknownObjectRetain();
  result = sub_237FE0A88(v12, v13);
  a1[3] = v11;
  *a1 = result;
  return result;
}

id PlayerItem.__allocating_init(asset:automaticallyLoadedAssetKeys:)(void *a1, uint64_t a2)
{
  objc_class *v2;
  objc_class *v3;
  NSArray v5;
  id v6;

  v3 = v2;
  if (a2)
  {
    v5.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.isa = 0;
  }
  v6 = objc_msgSend(objc_allocWithZone(v3), sel_initWithAsset_automaticallyLoadedAssetKeys_, a1, v5.super.isa);

  return v6;
}

void PlayerItem.init(asset:automaticallyLoadedAssetKeys:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_237FE0A64()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id sub_237FE0A88(void *a1, uint64_t a2)
{
  id v4;

  v4 = objc_allocWithZone((Class)type metadata accessor for PlayerItem());
  return sub_237FE0AD0(a1, a2, v4);
}

id sub_237FE0AD0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  objc_class *v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  objc_super v29;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3;
  UUID.init()();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_id], v9, v6);
  *(_QWORD *)&v10[OBJC_IVAR____TtC11CloudAssets10PlayerItem_resourceLoaderDelegate] = a2;
  swift_unknownObjectRetain();

  v11 = (objc_class *)type metadata accessor for PlayerItem();
  v29.receiver = v10;
  v29.super_class = v11;
  v12 = objc_msgSendSuper2(&v29, sel_initWithAsset_automaticallyLoadedAssetKeys_, a1, 0);
  v13 = qword_2568B73C8;
  v14 = v12;
  if (v13 != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  sub_237FABF5C(v15, (uint64_t)qword_2568B8CC0);
  v16 = v14;
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc();
    v26 = a1;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc();
    v28 = v21;
    *(_DWORD *)v20 = 136315138;
    sub_237FE0E84();
    v22 = dispatch thunk of CustomStringConvertible.description.getter();
    v27 = sub_237FAB354(v22, v23, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_237F8F000, v17, v18, "initialize PlayerItem with id %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x23B829F2C](v21, -1, -1);
    MEMORY[0x23B829F2C](v20, -1, -1);

    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }

  return v16;
}

uint64_t type metadata accessor for PlayerItem.UnsafeSendablePlayerItemBox()
{
  return objc_opt_self();
}

uint64_t sub_237FE0D7C()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_237FE0DC0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_237F9CFCC;
  return sub_237FE043C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t type metadata accessor for PlayerItem()
{
  uint64_t result;

  result = qword_2568B8D10;
  if (!qword_2568B8D10)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_237FE0E84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B8040;
  if (!qword_2568B8040)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x23B829E84](MEMORY[0x24BDCEAB8], v1);
    atomic_store(result, (unint64_t *)&qword_2568B8040);
  }
  return result;
}

uint64_t sub_237FE0EC4()
{
  return type metadata accessor for PlayerItem();
}

uint64_t sub_237FE0ECC()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PlayerItem()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlayerItem.__allocating_init(avAsset:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static PlayerItem.makePlayerItem(with:delegate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t sub_237FE0F5C()
{
  return swift_getObjectType();
}

uint64_t sub_237FE0F6C()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FE0F94(uint64_t a1, unint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  return sub_237FAB354(a1, a2, (uint64_t *)va);
}

uint64_t sub_237FE0FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v5 = (_QWORD *)sub_237FE1AA8();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_237FE19DC;
  return sub_237FE1A18(a1, a2, v7);
}

uint64_t sub_237FE0FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3[6] = v2;
  v6 = sub_237F9191C(&qword_2568B7DD0);
  v3[7] = v6;
  v3[8] = *(_QWORD *)(v6 - 8);
  v3[9] = swift_task_alloc();
  v7 = sub_237F9191C(&qword_2568B7DD8);
  v3[10] = v7;
  v3[11] = *(_QWORD *)(v7 - 8);
  v3[12] = swift_task_alloc();
  v8 = swift_task_alloc();
  v3[13] = v8;
  v9 = (_QWORD *)swift_task_alloc();
  v3[14] = v9;
  *v9 = v3;
  v9[1] = sub_237FE10CC;
  return AssetStreamHandle.inputStream(for:)(v8, a1, a2);
}

uint64_t sub_237FE10CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FE1124()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_237FE1AF0();
  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  type metadata accessor for Asset(0);
  v5 = Data.init(capacity:)();
  v0[16] = v5;
  v0[17] = v6;
  v0[2] = v5;
  v0[3] = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_237FE1894(&qword_2568B8D38, &qword_2568B7DD8, MEMORY[0x24BEE6D38]);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  v0[18] = sub_237FE1894(&qword_2568B8D40, &qword_2568B7DD0, MEMORY[0x24BEE6D18]);
  v7 = (_QWORD *)swift_task_alloc();
  v0[19] = v7;
  *v7 = v0;
  v7[1] = sub_237FE1214;
  return sub_237FE19E0();
}

uint64_t sub_237FE1214()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  sub_237FE1A88(&v4);
  if (v0)
  {
    sub_237FE1AE0(*(_QWORD *)(v2 + 128), *(_QWORD *)(v2 + 136));
    sub_237FE1A28();
  }
  sub_237FAC434();
  return sub_237FE1A08();
}

uint64_t sub_237FE1274()
{
  uint64_t v0;

  sub_237FE1B28();
  sub_237FA45D4();
  sub_237FAC464();
  return sub_237FE19F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FE12A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  _QWORD *v5;

  sub_237FE1AF0();
  if (v0[5] >> 60 == 15)
  {
    sub_237FE1B54(v0[8]);
    sub_237FAC280(v0[4], v0[5]);
    sub_237FE1ABC();
    swift_task_dealloc();
    sub_237FA45D4();
    swift_task_dealloc();
    v1 = sub_237FE1B40();
    return sub_237FE1A38(v1, v2, v3);
  }
  else
  {
    sub_237FE1A90();
    sub_237FE1B34();
    v5 = (_QWORD *)swift_task_alloc();
    v0[21] = v5;
    *v5 = v0;
    v5[1] = sub_237FE139C;
    return sub_237FE19E0();
  }
}

uint64_t sub_237FE1358()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  sub_237FE1B28();
  sub_237FA45D4();
  sub_237FAC464();
  return sub_237FE19F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FE139C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  sub_237FE1A88(&v4);
  if (v0)
  {
    sub_237FE1AE0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    sub_237FE1A28();
  }
  sub_237FAC434();
  return sub_237FE1A08();
}

uint64_t StreamHandle.readAll(in:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void);

  sub_237FE1B14();
  v1[7] = v2;
  v1[8] = v0;
  v1[6] = v3;
  v4 = sub_237F9191C(&qword_2568B7DD0);
  v1[9] = v4;
  v1[10] = *(_QWORD *)(v4 - 8);
  v1[11] = swift_task_alloc();
  v5 = sub_237F9191C(&qword_2568B7DD8);
  v1[12] = v5;
  v1[13] = *(_QWORD *)(v5 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v6 = (_QWORD *)sub_237FA4540();
  v1[16] = v6;
  v7 = sub_237FE1A64(v6);
  return sub_237FE1A50(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_237FE14B8()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  sub_237FAC434();
  return sub_237FA4510();
}

uint64_t sub_237FE1510()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  sub_237FE1AF0();
  v2 = v0[14];
  v1 = v0[15];
  v3 = v0[12];
  v4 = v0[13];
  (*(void (**)(_QWORD))(v0[7] + 8))(v0[6]);
  v5 = Data.init(capacity:)();
  v0[18] = v5;
  v0[19] = v6;
  v0[2] = v5;
  v0[3] = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_237FE1894(&qword_2568B8D38, &qword_2568B7DD8, MEMORY[0x24BEE6D38]);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  v0[20] = sub_237FE1894(&qword_2568B8D40, &qword_2568B7DD0, MEMORY[0x24BEE6D18]);
  v7 = (_QWORD *)swift_task_alloc();
  v0[21] = v7;
  *v7 = v0;
  v7[1] = sub_237FE15FC;
  return sub_237FE19E0();
}

uint64_t sub_237FE15FC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  sub_237FE1A88(&v4);
  if (v0)
  {
    sub_237FE1AD0(*(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152));
    sub_237FE1A28();
  }
  sub_237FAC434();
  return sub_237FE1A08();
}

uint64_t sub_237FE165C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  _QWORD *v5;

  sub_237FE1AF0();
  if (v0[5] >> 60 == 15)
  {
    sub_237FE1B54(v0[10]);
    sub_237FAC280(v0[4], v0[5]);
    sub_237FE1ABC();
    swift_task_dealloc();
    sub_237FA45D4();
    swift_task_dealloc();
    v1 = sub_237FE1B40();
    return sub_237FE1A38(v1, v2, v3);
  }
  else
  {
    sub_237FE1A90();
    sub_237FE1B34();
    v5 = (_QWORD *)swift_task_alloc();
    v0[22] = v5;
    *v5 = v0;
    v5[1] = sub_237FE170C;
    return sub_237FE19E0();
  }
}

uint64_t sub_237FE170C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v2 = *v1;
  v4 = *v1;
  sub_237FE1A88(&v4);
  if (v0)
  {
    sub_237FE1AD0(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
    sub_237FE1A28();
  }
  sub_237FAC434();
  return sub_237FE1A08();
}

uint64_t sub_237FE176C()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));
  sub_237FE1B08();
  sub_237FA45D4();
  sub_237FAC464();
  return sub_237FE19F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FE17B0()
{
  uint64_t v0;

  sub_237FE1B08();
  sub_237FA45D4();
  sub_237FAC464();
  return sub_237FE19F8(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_237FE17E4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_237FE1858;
  return StreamHandle.readAll(in:)();
}

uint64_t sub_237FE1858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  v6 = sub_237FA4554();
  if (!v2)
  {
    v6 = a1;
    v7 = a2;
  }
  return sub_237FE1A18(v6, v7, *(uint64_t (**)(void))(v3 + 8));
}

uint64_t sub_237FE1894(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_237F919BC(a2);
    result = MEMORY[0x23B829E84](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t dispatch thunk of StreamHandle.size.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of StreamHandle.range.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of StreamHandle.inputStream(for:)()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);

  v1 = (_QWORD *)sub_237FA4540();
  *(_QWORD *)(v0 + 16) = v1;
  v2 = sub_237FE1A64(v1);
  return sub_237FE1A50(v2, v3, v4, v5, v6, v7);
}

uint64_t dispatch thunk of StreamHandle.readAll(in:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);

  sub_237FE1B14();
  v5 = (_QWORD *)sub_237FE1AA8();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_237FE19A4;
  return v7(v4, v3, v1, v0);
}

uint64_t sub_237FE19A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_237FA4554();
  return sub_237FE1A18(a1, a2, *(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_237FE19E0()
{
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

uint64_t sub_237FE19F8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_237FE1A08()
{
  return swift_task_switch();
}

uint64_t sub_237FE1A18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_237FE1A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v0);
}

uint64_t sub_237FE1A38(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_237FE1A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  return a6();
}

uint64_t sub_237FE1A64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *a1 = v2;
  a1[1] = v1;
  return v3;
}

uint64_t sub_237FE1A88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = v1;
  return swift_task_dealloc();
}

uint64_t sub_237FE1A90()
{
  return Data.append(_:)();
}

uint64_t sub_237FE1AA8()
{
  return swift_task_alloc();
}

uint64_t sub_237FE1ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_237FE1AD0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 184) = v3;
  return sub_237F918D8(a1, a2);
}

uint64_t sub_237FE1AE0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v2 + 160) = v3;
  return sub_237F918D8(a1, a2);
}

uint64_t sub_237FE1B08()
{
  return swift_task_dealloc();
}

uint64_t sub_237FE1B28()
{
  return swift_task_dealloc();
}

uint64_t sub_237FE1B34()
{
  unint64_t v0;
  uint64_t v1;

  return sub_237FAC280(v1, v0);
}

uint64_t sub_237FE1B40()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FE1B54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t))(a1 + 8))(v1);
}

uint64_t sub_237FE1B60()
{
  qword_2568B8D70 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t sub_237FE1B88(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a1;
  v2[5] = v1;
  v2[6] = sub_237F9191C(&qword_2568B7768);
  v2[7] = sub_237FA4524();
  sub_237F9191C(&qword_2568B7968);
  v2[8] = sub_237FA4524();
  v3 = sub_237F9191C(&qword_2568B7740);
  v2[9] = v3;
  v2[10] = *(_QWORD *)(v3 - 8);
  v2[11] = sub_237FA4524();
  v4 = sub_237F9191C(&qword_2568B7970);
  v2[12] = v4;
  v2[13] = *(_QWORD *)(v4 - 8);
  v2[14] = sub_237FA4524();
  return sub_237FA4510();
}

uint64_t sub_237FE1C2C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  return sub_237FA451C();
}

uint64_t sub_237FE1C44()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[10] + 16))(v0[11], v0[15] + OBJC_IVAR____TtC11CloudAssets25AssetsDownloadCoordinator__results, v0[9]);
  return sub_237FA4510();
}

uint64_t sub_237FE1C94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  MEMORY[0x23B829710](v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_237FE1F20();
  v4 = (_QWORD *)swift_task_alloc();
  v0[16] = v4;
  *v4 = v0;
  v4[1] = sub_237FE1D3C;
  return _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF();
}

uint64_t sub_237FE1D3C()
{
  swift_task_dealloc();
  return sub_237FB7A68();
}

uint64_t sub_237FE1D98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = v0[8];
  if (_s11CloudAssets21UploadResponseMessageOwet_0(v1, 1, v0[6]) == 1)
  {
    sub_237FE2190();
    sub_237F93CC8();
    swift_allocError();
    swift_willThrow();
  }
  else
  {
    sub_237FA42F4(v1, v0[7]);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      sub_237F90BE0(v0[7], v0[4]);
      sub_237FE2180();
      sub_237FA45D4();
      swift_task_dealloc();
      sub_237FA45CC();
      swift_task_dealloc();
      v2 = (uint64_t (*)(void))v0[1];
      return v2();
    }
    v0[3] = *(_QWORD *)v0[7];
    sub_237F9191C(&qword_2568B8A60);
    swift_willThrowTypedImpl();
    sub_237FE2180();
  }
  sub_237FA4594();
  sub_237FA45D4();
  swift_task_dealloc();
  sub_237FA45CC();
  v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_237FE1ED8()
{
  uint64_t v0;

  sub_237FE2190();
  sub_237FA4594();
  sub_237FA45D4();
  swift_task_dealloc();
  sub_237FA45CC();
  return sub_237FB7B04(*(uint64_t (**)(void))(v0 + 8));
}

unint64_t sub_237FE1F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2568B8D80;
  if (!qword_2568B8D80)
  {
    v1 = type metadata accessor for AssetDownloadCoordinator();
    result = MEMORY[0x23B829E84](&protocol conformance descriptor for AssetDownloadCoordinator, v1);
    atomic_store(result, (unint64_t *)&qword_2568B8D80);
  }
  return result;
}

uint64_t type metadata accessor for AssetDownloadCoordinator()
{
  return objc_opt_self();
}

uint64_t sub_237FE1F7C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *a1;
  *(_QWORD *)(v2 + 24) = v1;
  *(_QWORD *)(v2 + 32) = v3;
  return sub_237FA451C();
}

uint64_t sub_237FE1F94()
{
  uint64_t *v0;
  _QWORD *v1;

  v0[2] = v0[4];
  v1 = (_QWORD *)swift_task_alloc();
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = sub_237FE1FEC;
  return sub_237F9C9DC(v0 + 2);
}

uint64_t sub_237FE1FEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 48) = v0;
  swift_task_dealloc();
  if (v0)
    return sub_237FB7A68();
  else
    return sub_237FB7B04(*(uint64_t (**)(void))(v2 + 8));
}

uint64_t sub_237FE204C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t AssetDownloadCoordinator.deinit()
{
  uint64_t v0;

  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t AssetDownloadCoordinator.__deallocating_deinit()
{
  swift_release();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t AssetDownloadCoordinator.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_237FE20AC()
{
  return AssetDownloadCoordinator.unownedExecutor.getter();
}

uint64_t method lookup function for AssetDownloadCoordinator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssetDownloadCoordinator.result()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v3 = (_QWORD *)sub_237FA4540();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_237F9CFCC;
  return v5(a1);
}

uint64_t dispatch thunk of AssetDownloadCoordinator.receive(signal:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v3 = (_QWORD *)sub_237FA4540();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_237FE217C;
  return v5(a1);
}

uint64_t sub_237FE2180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v0, v1);
}

uint64_t sub_237FE2190()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[14], v0[12]);
}

uint64_t static URLRequest._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCB068]();
}

uint64_t URLRequest.url.getter()
{
  return MEMORY[0x24BDCB088]();
}

uint64_t type metadata accessor for URLRequest()
{
  return MEMORY[0x24BDCB0C0]();
}

uint64_t dispatch thunk of JSONDecoder.decode<A>(_:from:)()
{
  return MEMORY[0x24BDCB220]();
}

uint64_t JSONDecoder.init()()
{
  return MEMORY[0x24BDCB260]();
}

uint64_t type metadata accessor for JSONDecoder()
{
  return MEMORY[0x24BDCB268]();
}

uint64_t dispatch thunk of JSONEncoder.encode<A>(_:)()
{
  return MEMORY[0x24BDCB3B8]();
}

uint64_t JSONEncoder.init()()
{
  return MEMORY[0x24BDCB400]();
}

uint64_t type metadata accessor for JSONEncoder()
{
  return MEMORY[0x24BDCB410]();
}

uint64_t __DataStorage._bytes.getter()
{
  return MEMORY[0x24BDCBBC8]();
}

uint64_t __DataStorage._length.getter()
{
  return MEMORY[0x24BDCBBD8]();
}

uint64_t __DataStorage._offset.getter()
{
  return MEMORY[0x24BDCBBF0]();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return MEMORY[0x24BDCBE60]();
}

uint64_t LocalizedError.failureReason.getter()
{
  return MEMORY[0x24BDCBE68]();
}

uint64_t LocalizedError.errorDescription.getter()
{
  return MEMORY[0x24BDCBE78]();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return MEMORY[0x24BDCBE80]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t type metadata accessor for URL.DirectoryHint()
{
  return MEMORY[0x24BDCD7B8]();
}

uint64_t URL.absoluteString.getter()
{
  return MEMORY[0x24BDCD820]();
}

uint64_t URL.lastPathComponent.getter()
{
  return MEMORY[0x24BDCD898]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t URL.deletingLastPathComponent()()
{
  return MEMORY[0x24BDCD968]();
}

uint64_t static URL.== infix(_:_:)()
{
  return MEMORY[0x24BDCD988]();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = MEMORY[0x24BDCD9E8](percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.init(string:)()
{
  return MEMORY[0x24BDCDA68]();
}

uint64_t URL.init(filePath:directoryHint:relativeTo:)()
{
  return MEMORY[0x24BDCDA70]();
}

uint64_t URL.appending<A>(path:directoryHint:)()
{
  return MEMORY[0x24BDCDAA0]();
}

uint64_t URL.appending<A>(component:directoryHint:)()
{
  return MEMORY[0x24BDCDAA8]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t Data.InlineData.init(_:)()
{
  return MEMORY[0x24BDCDB58]();
}

uint64_t Data.LargeSlice.init(_:)()
{
  return MEMORY[0x24BDCDB68]();
}

uint64_t Data.InlineSlice.init(_:)()
{
  return MEMORY[0x24BDCDBD0]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data.== infix(_:_:)()
{
  return MEMORY[0x24BDCDCC8]();
}

uint64_t Data.hash(into:)()
{
  return MEMORY[0x24BDCDCF8]();
}

uint64_t Data.append(_:)()
{
  return MEMORY[0x24BDCDD40]();
}

uint64_t Data.subdata(in:)()
{
  return MEMORY[0x24BDCDD68]();
}

uint64_t Data.init(capacity:)()
{
  return MEMORY[0x24BDCDD98]();
}

uint64_t static Date.distantFuture.getter()
{
  return MEMORY[0x24BDCE2F8]();
}

uint64_t static Date.== infix(_:_:)()
{
  return MEMORY[0x24BDCE858]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t static UUID.== infix(_:_:)()
{
  return MEMORY[0x24BDCE9E0]();
}

uint64_t UUID.init()()
{
  return MEMORY[0x24BDCEA40]();
}

uint64_t type metadata accessor for UUID()
{
  return MEMORY[0x24BDCEA58]();
}

uint64_t Google_Protobuf_Timestamp.date.getter()
{
  return MEMORY[0x24BE5B970]();
}

uint64_t Google_Protobuf_Timestamp.init(date:)()
{
  return MEMORY[0x24BE5B978]();
}

uint64_t Google_Protobuf_Timestamp.init()()
{
  return MEMORY[0x24BE5B988]();
}

uint64_t type metadata accessor for Google_Protobuf_Timestamp()
{
  return MEMORY[0x24BE5B990]();
}

uint64_t UnknownStorage.traverse<A>(visitor:)()
{
  return MEMORY[0x24BE5BF00]();
}

uint64_t UnknownStorage.init()()
{
  return MEMORY[0x24BE5BF08]();
}

uint64_t type metadata accessor for UnknownStorage()
{
  return MEMORY[0x24BE5BF10]();
}

uint64_t BinaryDecodingOptions.init()()
{
  return MEMORY[0x24BE5BFC0]();
}

uint64_t type metadata accessor for BinaryDecodingOptions()
{
  return MEMORY[0x24BE5BFC8]();
}

uint64_t _MessageImplementationBase._protobuf_generated_isEqualTo(other:)()
{
  return MEMORY[0x24BE5C008]();
}

uint64_t _MessageImplementationBase.isEqualTo(message:)()
{
  return MEMORY[0x24BE5C010]();
}

uint64_t Enum.hash(into:)()
{
  return MEMORY[0x24BE5C018]();
}

uint64_t dispatch thunk of Decoder.nextFieldNumber()()
{
  return MEMORY[0x24BE5C038]();
}

uint64_t dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)()
{
  return MEMORY[0x24BE5C078]();
}

uint64_t dispatch thunk of Decoder.decodeSingularBytesField(value:)()
{
  return MEMORY[0x24BE5C0A8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularInt64Field(value:)()
{
  return MEMORY[0x24BE5C0D8]();
}

uint64_t dispatch thunk of Decoder.decodeSingularStringField(value:)()
{
  return MEMORY[0x24BE5C120]();
}

uint64_t dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C148]();
}

uint64_t dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)()
{
  return MEMORY[0x24BE5C160]();
}

uint64_t Message.isInitialized.getter()
{
  return MEMORY[0x24BE5C1B0]();
}

uint64_t Message.init(serializedData:extensions:partial:options:)()
{
  return MEMORY[0x24BE5C1B8]();
}

uint64_t Message.serializedData(partial:)()
{
  return MEMORY[0x24BE5C1C0]();
}

uint64_t Message.debugDescription.getter()
{
  return MEMORY[0x24BE5C1D0]();
}

uint64_t Message.hash(into:)()
{
  return MEMORY[0x24BE5C1E8]();
}

uint64_t dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C278]();
}

uint64_t dispatch thunk of Visitor.visitSingularBytesField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C298]();
}

uint64_t dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2B0]();
}

uint64_t dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C2E8]();
}

uint64_t dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C300]();
}

uint64_t dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)()
{
  return MEMORY[0x24BE5C310]();
}

uint64_t type metadata accessor for _NameMap.NameDescription()
{
  return MEMORY[0x24BE5C330]();
}

uint64_t _NameMap.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BE5C340]();
}

uint64_t type metadata accessor for _NameMap()
{
  return MEMORY[0x24BE5C350]();
}

uint64_t UTType.identifier.getter()
{
  return MEMORY[0x24BEE6190]();
}

uint64_t UTType.init(filenameExtension:conformingTo:)()
{
  return MEMORY[0x24BEE6210]();
}

uint64_t static UTType.data.getter()
{
  return MEMORY[0x24BEE62A8]();
}

uint64_t type metadata accessor for UTType()
{
  return MEMORY[0x24BEE63B8]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t XPCSession.__allocating_init<A>(machService:targetQueue:options:incomingMessageHandler:cancellationHandler:)()
{
  return MEMORY[0x24BEE64F8]();
}

uint64_t static XPCSession.InitializationOptions.none.getter()
{
  return MEMORY[0x24BEE6520]();
}

uint64_t type metadata accessor for XPCSession.InitializationOptions()
{
  return MEMORY[0x24BEE6530]();
}

uint64_t dispatch thunk of XPCSession.send<A, B>(_:replyHandler:)()
{
  return MEMORY[0x24BEE6568]();
}

uint64_t dispatch thunk of XPCSession.send<A>(_:)()
{
  return MEMORY[0x24BEE6570]();
}

uint64_t dispatch thunk of XPCSession.cancel(reason:)()
{
  return MEMORY[0x24BEE6578]();
}

uint64_t type metadata accessor for XPCSession()
{
  return MEMORY[0x24BEE65A8]();
}

uint64_t XPCRichError.canRetry.getter()
{
  return MEMORY[0x24BEE6670]();
}

uint64_t type metadata accessor for XPCRichError()
{
  return MEMORY[0x24BEE6678]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.distantFuture.getter()
{
  return MEMORY[0x24BEE5548]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

uint64_t Dictionary.init(dictionaryLiteral:)()
{
  return MEMORY[0x24BEE02B0]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return MEMORY[0x24BEE0618]();
}

uint64_t BidirectionalCollection<>.joined(separator:)()
{
  return MEMORY[0x24BEE07D0]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t String.utf8CString.getter()
{
  return MEMORY[0x24BEE0A30]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.append<A>(contentsOf:)()
{
  return MEMORY[0x24BEE0BB0]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t String.init<A>(_:)()
{
  return MEMORY[0x24BEE0DD0]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t Array.description.getter()
{
  return MEMORY[0x24BEE1120]();
}

uint64_t type metadata accessor for Array()
{
  return MEMORY[0x24BEE1250]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t Task.value.getter()
{
  return MEMORY[0x24BEE6AC0]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

uint64_t static Task<>.currentPriority.getter()
{
  return MEMORY[0x24BEE6B18]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6C08]();
}

uint64_t static AsyncThrowingStream.makeStream<>(of:throwing:bufferingPolicy:)()
{
  return MEMORY[0x24BEE6C50]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.YieldResult()
{
  return MEMORY[0x24BEE6C80]();
}

uint64_t AsyncThrowingStream.Continuation.onTermination.setter()
{
  return MEMORY[0x24BEE6C90]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x24BEE6CA8]();
}

uint64_t AsyncThrowingStream.Continuation.yield(_:)()
{
  return MEMORY[0x24BEE6CC0]();
}

uint64_t AsyncThrowingStream.Continuation.finish(throwing:)()
{
  return MEMORY[0x24BEE6CC8]();
}

uint64_t type metadata accessor for AsyncThrowingStream.Continuation()
{
  return MEMORY[0x24BEE6CD0]();
}

uint64_t AsyncThrowingStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6CE0]();
}

uint64_t _sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF()
{
  return MEMORY[0x24BEE6CE8]();
}

uint64_t type metadata accessor for AsyncThrowingStream()
{
  return MEMORY[0x24BEE6D28]();
}

uint64_t AsyncThrowingStream.init<>(_:bufferingPolicy:_:)()
{
  return MEMORY[0x24BEE6D30]();
}

uint64_t Collection<>.popFirst()()
{
  return MEMORY[0x24BEE1930]();
}

uint64_t Collection.isEmpty.getter()
{
  return MEMORY[0x24BEE19B8]();
}

uint64_t NSFileHandle.read(upToCount:)()
{
  return MEMORY[0x24BDCFE50]();
}

uint64_t static os_log_type_t.debug.getter()
{
  return MEMORY[0x24BEE7908]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t OS_dispatch_semaphore.wait(timeout:)()
{
  return MEMORY[0x24BEE5918]();
}

Swift::Int __swiftcall OS_dispatch_semaphore.signal()()
{
  return MEMORY[0x24BEE5928]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t type metadata accessor for ArraySlice()
{
  return MEMORY[0x24BEE2150]();
}

uint64_t ArraySlice.init<A>(_:)()
{
  return MEMORY[0x24BEE2168]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t DecodingError.Context.init(codingPath:debugDescription:underlyingError:)()
{
  return MEMORY[0x24BEE26E8]();
}

uint64_t type metadata accessor for DecodingError()
{
  return MEMORY[0x24BEE2710]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

Swift::Bool __swiftcall _NativeDictionary.ensureUnique(isUnique:capacity:)(Swift::Bool isUnique, Swift::Int capacity)
{
  return MEMORY[0x24BEE2E58](isUnique, capacity);
}

Swift::Void __swiftcall _NativeDictionary.copy()()
{
  MEMORY[0x24BEE2E68]();
}

uint64_t _NativeDictionary._delete(at:)()
{
  return MEMORY[0x24BEE2E70]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE32B8]();
}

uint64_t KeyedDecodingContainer.codingPath.getter()
{
  return MEMORY[0x24BEE32C0]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE32D8]();
}

uint64_t KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3308]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE33A0]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedDecodingContainer.allKeys.getter()
{
  return MEMORY[0x24BEE33C8]();
}

uint64_t type metadata accessor for KeyedDecodingContainer()
{
  return MEMORY[0x24BEE33E0]();
}

uint64_t KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)()
{
  return MEMORY[0x24BEE3408]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent(_:forKey:)()
{
  return MEMORY[0x24BEE3428]();
}

uint64_t KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3458]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34F0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t type metadata accessor for KeyedEncodingContainer()
{
  return MEMORY[0x24BEE3520]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t type metadata accessor for Result()
{
  return MEMORY[0x24BEE4408]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t _Pointer.debugDescription.getter()
{
  return MEMORY[0x24BEE49D0]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

NSString *NSHomeDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD0DD8]();
}

os_activity_t _os_activity_create(void *dso, const char *description, os_activity_t activity, os_activity_flag_t flags)
{
  return (os_activity_t)MEMORY[0x24BDACB00](dso, description, activity, *(_QWORD *)&flags);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x24BDADF28](value);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int ffsctl(int a1, unint64_t a2, void *a3, unsigned int a4)
{
  return MEMORY[0x24BDAE358](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void os_activity_scope_enter(os_activity_t activity, os_activity_scope_state_t state)
{
  MEMORY[0x24BDAF2A0](activity, state);
}

void os_activity_scope_leave(os_activity_scope_state_t state)
{
  MEMORY[0x24BDAF2A8](state);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x24BDAFC00]();
}

uint64_t sandbox_extension_release()
{
  return MEMORY[0x24BDAFC20]();
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4D10]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x24BEE4DD0]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x24BEE4DF8]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x24BEE4E40]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x24BEE4EB0]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_storeEnumTagSinglePayloadGeneric()
{
  return MEMORY[0x24BEE4F60]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x24BEE5008]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

