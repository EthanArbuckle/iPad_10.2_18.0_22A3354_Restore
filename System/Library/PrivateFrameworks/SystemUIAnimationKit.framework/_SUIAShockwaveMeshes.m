@implementation _SUIAShockwaveMeshes

+ (id)identityMeshTransformRows:(unsigned int)a3 columns:(unsigned int)a4
{
  double v4;

  LODWORD(v4) = 0;
  return (id)objc_msgSend(a1, "identityMeshTransformRows:columns:sharpness:normalization:replicatesEdges:", *(_QWORD *)&a3, *(_QWORD *)&a4, *MEMORY[0x24BDE58F0], 1, v4);
}

+ (id)identityMeshTransformRows:(unsigned int)a3 columns:(unsigned int)a4 sharpness:(float)a5 normalization:(id)a6 replicatesEdges:(BOOL)a7
{
  _BOOL8 v7;
  id v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  double v15;
  double v16;
  int v17;
  int32x4_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  int32x2_t v25;
  int32x4_t v26;
  double v27;
  double v28;
  int32x4_t v29;
  uint64_t v30;

  v7 = a7;
  v25 = *(int32x2_t *)&a5;
  v10 = a6;
  v11 = objc_alloc_init(MEMORY[0x24BDE5710]);
  objc_msgSend(v11, "setDepthNormalization:", v10);
  objc_msgSend(v11, "setReplicatesEdges:", v7);
  v12 = a3 - 1;
  if (!a3)
    goto LABEL_12;
  v13 = 0;
  do
  {
    if (a4)
    {
      v14 = 0;
      if (v13)
        v15 = (float)((float)(1.0 / (float)v12) * (float)v13);
      else
        v15 = 0.0;
      do
      {
        v16 = (float)((float)(1.0 / (float)(a4 - 1)) * (float)v14);
        if (!v14)
          v16 = 0.0;
        v27 = v16;
        v28 = v15;
        *(double *)v29.i64 = v16;
        *(double *)&v29.i64[1] = v15;
        v30 = 0x3FE0000000000000;
        objc_msgSend(v11, "addVertex:", &v27, *(_QWORD *)&v25);
        ++v14;
      }
      while (a4 != v14);
    }
    ++v13;
  }
  while (v13 != a3);
  if (a3 != 1)
  {
LABEL_12:
    v17 = 0;
    v18 = vdupq_lane_s32(v25, 0);
    v26 = v18;
    do
    {
      if (a4 == 1)
      {
        ++v17;
      }
      else
      {
        v19 = v17 * a4;
        v20 = ++v17 * a4;
        v21 = a4 - 1;
        do
        {
          v22 = v19 + 1;
          v23 = v20 + 1;
          LODWORD(v27) = v19;
          HIDWORD(v27) = v19 + 1;
          LODWORD(v28) = v20 + 1;
          HIDWORD(v28) = v20;
          v29 = v18;
          objc_msgSend(v11, "addFace:", &v27, v26.i64[0]);
          v18 = v26;
          v19 = v22;
          v20 = v23;
          --v21;
        }
        while (v21);
      }
    }
    while (v17 != v12);
  }

  return v11;
}

+ (id)siriButtonAndEdgeMesh
{
  void *v8;
  _OWORD v10[20];
  int64x2_t v11;
  int64x2_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int64x2_t v31;
  int64x2_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  int64x2_t v71;
  int64x2_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  int64x2_t v91;
  int64x2_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  uint64_t v151;
  uint64_t v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  __int128 v186;
  uint64_t v187;
  uint64_t v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  uint64_t v218;
  __int128 v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;

  v222 = *MEMORY[0x24BDAC8D0];
  memset(v10, 0, 32);
  v10[2] = xmmword_247CA1BF0;
  v10[3] = xmmword_247CA1C00;
  v10[4] = xmmword_247CA1C10;
  v10[5] = xmmword_247CA1C20;
  __asm { FMOV            V1.2D, #0.5 }
  v10[6] = xmmword_247CA1C20;
  v10[7] = _Q1;
  v10[8] = xmmword_247CA1C10;
  v10[9] = xmmword_247CA1C10;
  v10[10] = xmmword_247CA1C30;
  v10[11] = xmmword_247CA1C30;
  v10[12] = xmmword_247CA1C40;
  v10[13] = xmmword_247CA1C50;
  v10[14] = xmmword_247CA1C10;
  v10[15] = xmmword_247CA1C60;
  v10[16] = xmmword_247CA1C60;
  v10[17] = xmmword_247CA1C70;
  v10[18] = xmmword_247CA1C80;
  v10[19] = xmmword_247CA1C90;
  v11 = vdupq_n_s64(0x3FC555555FFDF467uLL);
  v12 = v11;
  v13 = xmmword_247CA1CA0;
  v14 = xmmword_247CA1CB0;
  v15 = xmmword_247CA1C90;
  v16 = xmmword_247CA1BF0;
  v17 = xmmword_247CA1BF0;
  v18 = xmmword_247CA1CC0;
  v19 = xmmword_247CA1CD0;
  v20 = xmmword_247CA1C90;
  v21 = xmmword_247CA1CE0;
  v22 = xmmword_247CA1CE0;
  v23 = xmmword_247CA1CF0;
  v24 = xmmword_247CA1D00;
  v25 = xmmword_247CA1C90;
  v26 = xmmword_247CA1D10;
  v27 = xmmword_247CA1D10;
  v28 = xmmword_247CA1BF0;
  v29 = xmmword_247CA1D20;
  v30 = xmmword_247CA1D30;
  v31 = vdupq_n_s64(0x3FD555556000B417uLL);
  v32 = v31;
  v33 = _Q1;
  v34 = xmmword_247CA1D40;
  v35 = xmmword_247CA1D50;
  v36 = xmmword_247CA1D60;
  v37 = xmmword_247CA1D60;
  v38 = xmmword_247CA1C40;
  v39 = xmmword_247CA1D70;
  v40 = xmmword_247CA1D30;
  v41 = xmmword_247CA1D80;
  v42 = xmmword_247CA1D80;
  v43 = xmmword_247CA1C70;
  v44 = xmmword_247CA1C70;
  v45 = _Q1;
  v46 = xmmword_247CA1C90;
  v47 = xmmword_247CA1C90;
  v48 = xmmword_247CA1CA0;
  v49 = xmmword_247CA1D90;
  v50 = xmmword_247CA1DA0;
  v51 = _Q1;
  v52 = xmmword_247CA1DB0;
  v53 = xmmword_247CA1CC0;
  v54 = xmmword_247CA1DC0;
  v55 = xmmword_247CA1DA0;
  v56 = xmmword_247CA1DD0;
  v57 = xmmword_247CA1DD0;
  v58 = xmmword_247CA1CF0;
  v59 = xmmword_247CA1CF0;
  v60 = _Q1;
  v61 = xmmword_247CA1DE0;
  v62 = xmmword_247CA1DE0;
  v63 = xmmword_247CA1BF0;
  v64 = xmmword_247CA1DF0;
  v65 = xmmword_247CA1E00;
  v66 = xmmword_247CA1E10;
  v67 = xmmword_247CA1E10;
  v68 = _Q1;
  v69 = xmmword_247CA1E00;
  v70 = xmmword_247CA1E00;
  v71 = vdupq_n_s64(0x3FE555555FFF543FuLL);
  v72 = v71;
  v73 = xmmword_247CA1C40;
  v74 = xmmword_247CA1E20;
  v75 = xmmword_247CA1E00;
  v76 = xmmword_247CA1E30;
  v77 = xmmword_247CA1E30;
  v78 = xmmword_247CA1C70;
  v79 = xmmword_247CA1E40;
  v80 = xmmword_247CA1DD0;
  v81 = xmmword_247CA1E50;
  v82 = xmmword_247CA1E50;
  v83 = xmmword_247CA1CA0;
  v84 = xmmword_247CA1E60;
  v85 = xmmword_247CA1DD0;
  v86 = xmmword_247CA1C40;
  v87 = xmmword_247CA1C40;
  v88 = xmmword_247CA1CC0;
  v89 = xmmword_247CA1E70;
  v90 = xmmword_247CA1DD0;
  v91 = vdupq_n_s64(0x3FEAAAAAA000ABC1uLL);
  v92 = v91;
  v93 = xmmword_247CA1CF0;
  v94 = xmmword_247CA1E80;
  v95 = xmmword_247CA1DD0;
  v96 = xmmword_247CA1E90;
  v97 = xmmword_247CA1E90;
  v98 = xmmword_247CA1BF0;
  v99 = xmmword_247CA1EA0;
  v100 = xmmword_247CA1EB0;
  v101 = xmmword_247CA1EC0;
  v102 = xmmword_247CA1EC0;
  v103 = _Q1;
  v104 = xmmword_247CA1EB0;
  v105 = xmmword_247CA1EB0;
  v106 = xmmword_247CA1ED0;
  v107 = xmmword_247CA1ED0;
  v108 = xmmword_247CA1C40;
  v109 = xmmword_247CA1EE0;
  v110 = xmmword_247CA1EB0;
  __asm { FMOV            V0.2D, #1.0 }
  v111 = _Q0;
  v112 = _Q0;
  v113 = 0x3FE0000000000000;
  v114 = xmmword_247CA1EF0;
  v116 = 0;
  v115 = 0;
  v117 = xmmword_247CA1F00;
  v118 = 0;
  v119 = 0;
  v120 = xmmword_247CA1F10;
  v121 = 0;
  v122 = 0;
  v123 = xmmword_247CA1F20;
  v124 = 0;
  v125 = 0;
  v126 = xmmword_247CA1F30;
  v127 = 0;
  v128 = 0;
  v129 = xmmword_247CA1F40;
  v131 = 0;
  v130 = 0;
  v132 = xmmword_247CA1F50;
  v134 = 0;
  v133 = 0;
  v135 = xmmword_247CA1F60;
  v137 = 0;
  v136 = 0;
  v138 = xmmword_247CA1F70;
  v140 = 0;
  v139 = 0;
  v141 = xmmword_247CA1F80;
  v143 = 0;
  v142 = 0;
  v144 = xmmword_247CA1F90;
  v146 = 0;
  v145 = 0;
  v147 = xmmword_247CA1FA0;
  v149 = 0;
  v148 = 0;
  v150 = xmmword_247CA1FB0;
  v152 = 0;
  v151 = 0;
  v153 = xmmword_247CA1FC0;
  v155 = 0;
  v154 = 0;
  v156 = xmmword_247CA1FD0;
  v158 = 0;
  v157 = 0;
  v159 = xmmword_247CA1FE0;
  v161 = 0;
  v160 = 0;
  v162 = xmmword_247CA1FF0;
  v164 = 0;
  v163 = 0;
  v165 = xmmword_247CA2000;
  v167 = 0;
  v166 = 0;
  v168 = xmmword_247CA2010;
  v170 = 0;
  v169 = 0;
  v171 = xmmword_247CA2020;
  v173 = 0;
  v172 = 0;
  v174 = xmmword_247CA2030;
  v176 = 0;
  v175 = 0;
  v177 = xmmword_247CA2040;
  v179 = 0;
  v178 = 0;
  v180 = xmmword_247CA2050;
  v182 = 0;
  v181 = 0;
  v183 = xmmword_247CA2060;
  v185 = 0;
  v184 = 0;
  v186 = xmmword_247CA2070;
  v188 = 0;
  v187 = 0;
  v189 = xmmword_247CA2080;
  v191 = 0;
  v190 = 0;
  v192 = xmmword_247CA2090;
  v194 = 0;
  v193 = 0;
  v195 = xmmword_247CA20A0;
  v197 = 0;
  v196 = 0;
  v198 = xmmword_247CA20B0;
  v200 = 0;
  v199 = 0;
  v201 = xmmword_247CA20C0;
  v203 = 0;
  v202 = 0;
  v204 = xmmword_247CA20D0;
  v206 = 0;
  v205 = 0;
  v207 = xmmword_247CA20E0;
  v209 = 0;
  v208 = 0;
  v210 = xmmword_247CA20F0;
  v212 = 0;
  v211 = 0;
  v213 = xmmword_247CA2100;
  v215 = 0;
  v214 = 0;
  v216 = xmmword_247CA2110;
  v218 = 0;
  v217 = 0;
  v219 = xmmword_247CA2120;
  v221 = 0;
  v220 = 0;
  objc_msgSend(MEMORY[0x24BDE5710], "meshTransformWithVertexCount:vertices:faceCount:faces:depthNormalization:", 49, v10, 36, &v114, *MEMORY[0x24BDE58F0]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "setReplicatesEdges:", 1);
  return v8;
}

+ (id)captureButtonMesh
{
  uint64_t v14;
  void *v15;
  _OWORD v17[202];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  __int128 v163;
  uint64_t v164;
  uint64_t v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  __int128 v181;
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  uint64_t v185;
  uint64_t v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  __int128 v190;
  uint64_t v191;
  uint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  uint64_t v197;
  uint64_t v198;
  __int128 v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  __int128 v205;
  uint64_t v206;
  uint64_t v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;

  v211 = *MEMORY[0x24BDAC8D0];
  memset(v17, 0, 32);
  v17[2] = xmmword_247CA2130;
  v17[3] = xmmword_247CA2140;
  v17[4] = xmmword_247CA1C10;
  v17[5] = xmmword_247CA2150;
  v17[6] = xmmword_247CA2150;
  v17[7] = xmmword_247CA2160;
  v17[8] = xmmword_247CA2170;
  v17[9] = xmmword_247CA1C10;
  v17[10] = xmmword_247CA1C70;
  v17[11] = xmmword_247CA1C70;
  v17[12] = xmmword_247CA2180;
  v17[13] = xmmword_247CA2190;
  v17[14] = xmmword_247CA1C10;
  v17[15] = xmmword_247CA21A0;
  v17[16] = xmmword_247CA21A0;
  v17[17] = xmmword_247CA21B0;
  v17[18] = xmmword_247CA21C0;
  v17[19] = xmmword_247CA1C10;
  v17[20] = xmmword_247CA1C60;
  v17[21] = xmmword_247CA1C60;
  v17[22] = xmmword_247CA1C70;
  v17[23] = xmmword_247CA21D0;
  __asm { FMOV            V5.2D, #0.125 }
  v17[24] = xmmword_247CA21E0;
  v17[25] = _Q5;
  v17[26] = _Q5;
  v17[27] = xmmword_247CA21F0;
  v17[28] = xmmword_247CA2200;
  v17[29] = xmmword_247CA21E0;
  v17[30] = xmmword_247CA2210;
  v17[31] = xmmword_247CA2210;
  __asm { FMOV            V7.2D, #0.5 }
  v17[32] = _Q7;
  v17[33] = xmmword_247CA21E0;
  v17[34] = xmmword_247CA21E0;
  v17[35] = xmmword_247CA2220;
  v17[36] = xmmword_247CA2220;
  v17[37] = xmmword_247CA2230;
  v17[38] = xmmword_247CA2240;
  v17[39] = xmmword_247CA21E0;
  v17[40] = xmmword_247CA2250;
  v17[41] = xmmword_247CA2250;
  v17[42] = xmmword_247CA1CF0;
  v17[43] = xmmword_247CA2260;
  v17[44] = xmmword_247CA21E0;
  v17[45] = xmmword_247CA2270;
  v17[46] = xmmword_247CA2270;
  v17[47] = xmmword_247CA2130;
  v17[48] = xmmword_247CA2280;
  v17[49] = xmmword_247CA2290;
  __asm { FMOV            V19.2D, #0.25 }
  v17[50] = _Q19;
  v17[51] = xmmword_247CA22A0;
  v17[52] = xmmword_247CA2160;
  v17[53] = xmmword_247CA22B0;
  v17[54] = xmmword_247CA2290;
  v17[55] = xmmword_247CA21F0;
  v17[56] = xmmword_247CA22C0;
  v17[57] = xmmword_247CA2180;
  v17[58] = xmmword_247CA22D0;
  v17[59] = xmmword_247CA2290;
  v17[60] = xmmword_247CA22E0;
  v17[61] = xmmword_247CA22F0;
  v17[62] = xmmword_247CA21B0;
  v17[63] = xmmword_247CA2300;
  v17[64] = xmmword_247CA2290;
  v17[65] = xmmword_247CA2310;
  v17[66] = xmmword_247CA2310;
  v17[67] = xmmword_247CA1C70;
  v17[68] = xmmword_247CA2320;
  v17[69] = xmmword_247CA2330;
  v17[70] = xmmword_247CA2340;
  v17[71] = xmmword_247CA2340;
  v17[72] = xmmword_247CA21F0;
  v17[73] = xmmword_247CA2350;
  v17[74] = xmmword_247CA2330;
  __asm { FMOV            V20.2D, #0.375 }
  v17[75] = _Q20;
  v17[76] = xmmword_247CA2360;
  v17[77] = _Q7;
  v17[78] = xmmword_247CA2370;
  v17[79] = xmmword_247CA2330;
  v17[80] = xmmword_247CA2380;
  v17[81] = xmmword_247CA2390;
  v17[82] = xmmword_247CA2230;
  v17[83] = xmmword_247CA23A0;
  v17[84] = xmmword_247CA2330;
  v17[85] = xmmword_247CA23B0;
  v17[86] = xmmword_247CA23B0;
  v17[87] = xmmword_247CA1CF0;
  v17[88] = xmmword_247CA23C0;
  v17[89] = xmmword_247CA2330;
  v17[90] = xmmword_247CA1C10;
  v17[91] = xmmword_247CA1C10;
  v17[92] = xmmword_247CA2130;
  v17[93] = xmmword_247CA2130;
  v17[94] = _Q7;
  v17[95] = xmmword_247CA2290;
  v17[96] = xmmword_247CA23D0;
  v17[97] = xmmword_247CA2160;
  v17[98] = xmmword_247CA23E0;
  v17[99] = _Q7;
  v17[100] = _Q7;
  v17[101] = xmmword_247CA23F0;
  v17[102] = xmmword_247CA2180;
  v17[103] = xmmword_247CA2400;
  v17[104] = xmmword_247CA2410;
  v17[105] = xmmword_247CA2420;
  v17[106] = xmmword_247CA2430;
  v17[107] = xmmword_247CA21B0;
  v17[108] = xmmword_247CA21B0;
  v17[109] = _Q7;
  v17[110] = xmmword_247CA1EB0;
  v17[111] = xmmword_247CA1EB0;
  v17[112] = xmmword_247CA1C70;
  v17[113] = xmmword_247CA2440;
  v17[114] = xmmword_247CA2450;
  v17[115] = xmmword_247CA2460;
  v17[116] = xmmword_247CA2460;
  v17[117] = xmmword_247CA21F0;
  v17[118] = xmmword_247CA2470;
  v17[119] = xmmword_247CA2480;
  v17[120] = xmmword_247CA2490;
  v17[121] = xmmword_247CA24A0;
  v17[122] = _Q7;
  v17[123] = xmmword_247CA2450;
  v17[124] = xmmword_247CA24B0;
  __asm { FMOV            V20.2D, #0.625 }
  v17[125] = _Q20;
  v17[126] = xmmword_247CA24C0;
  v17[127] = xmmword_247CA2230;
  v17[128] = xmmword_247CA24D0;
  v17[129] = xmmword_247CA2450;
  v17[130] = xmmword_247CA24E0;
  v17[131] = xmmword_247CA24E0;
  v17[132] = xmmword_247CA1CF0;
  v17[133] = xmmword_247CA24F0;
  v17[134] = xmmword_247CA2450;
  v17[135] = xmmword_247CA2500;
  v17[136] = xmmword_247CA2500;
  v17[137] = xmmword_247CA2130;
  v17[138] = xmmword_247CA2510;
  v17[139] = xmmword_247CA2420;
  v17[140] = xmmword_247CA2520;
  v17[141] = xmmword_247CA2520;
  v17[142] = xmmword_247CA2160;
  v17[143] = xmmword_247CA2530;
  v17[144] = xmmword_247CA2420;
  v17[145] = xmmword_247CA2230;
  v17[146] = xmmword_247CA2230;
  v17[147] = xmmword_247CA2180;
  v17[148] = xmmword_247CA2540;
  v17[149] = xmmword_247CA2420;
  __asm { FMOV            V19.2D, #0.75 }
  v17[150] = _Q19;
  v17[151] = _Q19;
  v17[152] = xmmword_247CA21B0;
  v17[153] = xmmword_247CA2550;
  v17[154] = xmmword_247CA2420;
  v17[155] = xmmword_247CA2560;
  v17[156] = xmmword_247CA2560;
  v17[157] = xmmword_247CA1C70;
  v17[158] = xmmword_247CA2570;
  v17[159] = xmmword_247CA2580;
  v17[160] = xmmword_247CA2590;
  v17[161] = xmmword_247CA2590;
  v17[162] = xmmword_247CA21F0;
  v17[163] = xmmword_247CA25A0;
  v17[164] = xmmword_247CA2580;
  v17[165] = xmmword_247CA25B0;
  v17[166] = xmmword_247CA25B0;
  v17[167] = _Q7;
  v17[168] = xmmword_247CA2580;
  v17[169] = xmmword_247CA2580;
  v17[170] = xmmword_247CA25C0;
  v17[171] = xmmword_247CA25C0;
  v17[172] = xmmword_247CA2230;
  v17[173] = xmmword_247CA25D0;
  v17[174] = xmmword_247CA2580;
  __asm { FMOV            V6.2D, #0.875 }
  v17[175] = _Q6;
  v17[176] = _Q6;
  v17[177] = xmmword_247CA1CF0;
  v17[178] = xmmword_247CA25E0;
  v17[179] = xmmword_247CA2580;
  v17[180] = xmmword_247CA1E90;
  v17[181] = xmmword_247CA1E90;
  v17[182] = xmmword_247CA2130;
  v17[183] = xmmword_247CA25F0;
  v17[184] = xmmword_247CA1EB0;
  v17[185] = xmmword_247CA2600;
  v17[186] = xmmword_247CA2600;
  v17[187] = xmmword_247CA2160;
  v17[188] = xmmword_247CA2610;
  v17[189] = xmmword_247CA1EB0;
  v17[190] = xmmword_247CA1CF0;
  v17[191] = xmmword_247CA1CF0;
  v17[192] = xmmword_247CA2180;
  v17[193] = xmmword_247CA2620;
  v17[194] = xmmword_247CA1EB0;
  v17[195] = xmmword_247CA2630;
  v17[196] = xmmword_247CA2630;
  v17[197] = xmmword_247CA21B0;
  v17[198] = xmmword_247CA2640;
  v17[199] = xmmword_247CA1EB0;
  __asm { FMOV            V0.2D, #1.0 }
  v17[200] = _Q0;
  v17[201] = _Q0;
  v18 = 0x3FE0000000000000;
  v19 = xmmword_247CA2650;
  v21 = 0;
  v20 = 0;
  v22 = xmmword_247CA2660;
  v23 = 0;
  v24 = 0;
  v25 = xmmword_247CA2670;
  v26 = 0;
  v27 = 0;
  v28 = xmmword_247CA2680;
  v29 = 0;
  v30 = 0;
  v31 = xmmword_247CA2690;
  v32 = 0;
  v33 = 0;
  v34 = xmmword_247CA26A0;
  v36 = 0;
  v35 = 0;
  v37 = xmmword_247CA26B0;
  v39 = 0;
  v38 = 0;
  v40 = xmmword_247CA26C0;
  v42 = 0;
  v41 = 0;
  v43 = xmmword_247CA26D0;
  v45 = 0;
  v44 = 0;
  v46 = xmmword_247CA26E0;
  v48 = 0;
  v47 = 0;
  v49 = xmmword_247CA26F0;
  v51 = 0;
  v50 = 0;
  v52 = xmmword_247CA2700;
  v54 = 0;
  v53 = 0;
  v55 = xmmword_247CA2710;
  v57 = 0;
  v56 = 0;
  v58 = xmmword_247CA2720;
  v60 = 0;
  v59 = 0;
  v61 = xmmword_247CA2730;
  v63 = 0;
  v62 = 0;
  v64 = xmmword_247CA2740;
  v66 = 0;
  v65 = 0;
  v67 = xmmword_247CA2750;
  v69 = 0;
  v68 = 0;
  v70 = xmmword_247CA2760;
  v72 = 0;
  v71 = 0;
  v73 = xmmword_247CA2770;
  v75 = 0;
  v74 = 0;
  v76 = xmmword_247CA2780;
  v78 = 0;
  v77 = 0;
  v79 = xmmword_247CA2790;
  v81 = 0;
  v80 = 0;
  v82 = xmmword_247CA27A0;
  v84 = 0;
  v83 = 0;
  v85 = xmmword_247CA27B0;
  v87 = 0;
  v86 = 0;
  v88 = xmmword_247CA27C0;
  v90 = 0;
  v89 = 0;
  v91 = xmmword_247CA27D0;
  v93 = 0;
  v92 = 0;
  v94 = xmmword_247CA27E0;
  v96 = 0;
  v95 = 0;
  v97 = xmmword_247CA27F0;
  v99 = 0;
  v98 = 0;
  v100 = xmmword_247CA2800;
  v102 = 0;
  v101 = 0;
  v103 = xmmword_247CA2810;
  v105 = 0;
  v104 = 0;
  v106 = xmmword_247CA2820;
  v108 = 0;
  v107 = 0;
  v109 = xmmword_247CA2830;
  v111 = 0;
  v110 = 0;
  v112 = xmmword_247CA2840;
  v114 = 0;
  v113 = 0;
  v115 = xmmword_247CA2850;
  v117 = 0;
  v116 = 0;
  v118 = xmmword_247CA2860;
  v120 = 0;
  v119 = 0;
  v121 = xmmword_247CA2870;
  v123 = 0;
  v122 = 0;
  v124 = xmmword_247CA2880;
  v126 = 0;
  v125 = 0;
  v127 = xmmword_247CA2890;
  v129 = 0;
  v128 = 0;
  v130 = xmmword_247CA28A0;
  v132 = 0;
  v131 = 0;
  v133 = xmmword_247CA28B0;
  v135 = 0;
  v134 = 0;
  v136 = xmmword_247CA28C0;
  v138 = 0;
  v137 = 0;
  v139 = xmmword_247CA28D0;
  v141 = 0;
  v140 = 0;
  v142 = xmmword_247CA28E0;
  v144 = 0;
  v143 = 0;
  v145 = xmmword_247CA28F0;
  v147 = 0;
  v146 = 0;
  v148 = xmmword_247CA2900;
  v150 = 0;
  v149 = 0;
  v151 = xmmword_247CA2910;
  v153 = 0;
  v152 = 0;
  v154 = xmmword_247CA2920;
  v156 = 0;
  v155 = 0;
  v157 = xmmword_247CA2930;
  v159 = 0;
  v158 = 0;
  v160 = xmmword_247CA2940;
  v162 = 0;
  v161 = 0;
  v163 = xmmword_247CA2950;
  v165 = 0;
  v164 = 0;
  v166 = xmmword_247CA2960;
  v168 = 0;
  v167 = 0;
  v169 = xmmword_247CA2970;
  v171 = 0;
  v170 = 0;
  v172 = xmmword_247CA2980;
  v174 = 0;
  v173 = 0;
  v175 = xmmword_247CA2990;
  v177 = 0;
  v176 = 0;
  v178 = xmmword_247CA29A0;
  v180 = 0;
  v179 = 0;
  v181 = xmmword_247CA29B0;
  v183 = 0;
  v182 = 0;
  v184 = xmmword_247CA29C0;
  v186 = 0;
  v185 = 0;
  v187 = xmmword_247CA29D0;
  v189 = 0;
  v188 = 0;
  v190 = xmmword_247CA29E0;
  v192 = 0;
  v191 = 0;
  v193 = xmmword_247CA29F0;
  v195 = 0;
  v194 = 0;
  v196 = xmmword_247CA2A00;
  v198 = 0;
  v197 = 0;
  v199 = xmmword_247CA2A10;
  v201 = 0;
  v200 = 0;
  v202 = xmmword_247CA2A20;
  v204 = 0;
  v203 = 0;
  v14 = *MEMORY[0x24BDE58F0];
  v205 = xmmword_247CA2A30;
  v207 = 0;
  v206 = 0;
  v208 = xmmword_247CA2A40;
  v210 = 0;
  v209 = 0;
  objc_msgSend(MEMORY[0x24BDE5710], "meshTransformWithVertexCount:vertices:faceCount:faces:depthNormalization:", 81, v17, 64, &v19, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v15, "setReplicatesEdges:", 1);
  return v15;
}

@end
