void sub_21B0459B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B045F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B0461E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B046758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_21B04C7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, id *a11, id *location)
{
  id *v12;

  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak((id *)&STACK[0x2F0]);
  _Unwind_Resume(a1);
}

void sub_21B054EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

double _TVRCGameControllerNormalizedDigitizerValue(float a1, double a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  double v8;

  v2 = a1;
  if (a2 - v2 >= 80.0)
    v3 = 1.0;
  else
    v3 = (a2 - v2) / 80.0;
  v4 = vabdd_f64(v2, a2);
  v5 = v4 / -80.0;
  if (v4 >= 80.0)
    v5 = -1.0;
  if (v2 > a2)
    v6 = v5;
  else
    v6 = v3;
  v7 = v6;
  v8 = v7;
  if (v8 < -1.0)
    v8 = -1.0;
  return (float)fmin(v8, 1.0);
}

id _TVRMakeDirectionalImageView(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  v1 = (void *)MEMORY[0x24BDD1488];
  v2 = a1;
  objc_msgSend(v1, "bundleForClass:", objc_opt_class());
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = objc_alloc(MEMORY[0x24BEBD668]);
  objc_msgSend(MEMORY[0x24BEBD640], "imageNamed:inBundle:compatibleWithTraitCollection:", v2, v3, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = (void *)objc_msgSend(v4, "initWithImage:", v5);
  objc_msgSend(v6, "layer");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDE56B0], "filterWithType:", *MEMORY[0x24BDE5BD8]);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "setCompositingFilter:", v8);

  objc_msgSend(v6, "setAlpha:", 0.24);
  return v6;
}

double _TVRImageFrameForDirectionalImage(void *a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  CGRect v19;
  CGRect v20;
  CGRect v21;
  CGRect v22;

  objc_msgSend(a1, "image");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "size");
  v13 = v12;

  UIRectCenteredIntegralRect();
  v15 = v14;
  UIRectGetCenter();
  v17 = v16;
  if ((a2 & 2) != 0)
  {
    v20.origin.x = a3;
    v20.origin.y = a4;
    v20.size.width = a5;
    v20.size.height = a6;
    v15 = (v17 + -44.0 + CGRectGetMinX(v20)) * 0.5 - v13 * 0.5;
    if ((a2 & 8) == 0)
    {
LABEL_3:
      if ((a2 & 1) == 0)
        goto LABEL_4;
LABEL_9:
      v22.origin.x = a3;
      v22.origin.y = a4;
      v22.size.width = a5;
      v22.size.height = a6;
      CGRectGetMinY(v22);
      if ((a2 & 4) == 0)
        return v15;
      goto LABEL_5;
    }
  }
  else if ((a2 & 8) == 0)
  {
    goto LABEL_3;
  }
  v21.origin.x = a3;
  v21.origin.y = a4;
  v21.size.width = a5;
  v21.size.height = a6;
  v15 = (v17 + 44.0 + CGRectGetMaxX(v21)) * 0.5 - v13 * 0.5;
  if ((a2 & 1) != 0)
    goto LABEL_9;
LABEL_4:
  if ((a2 & 4) != 0)
  {
LABEL_5:
    v19.origin.x = a3;
    v19.origin.y = a4;
    v19.size.width = a5;
    v19.size.height = a6;
    CGRectGetMaxY(v19);
  }
  return v15;
}

void __clearCachedBoundingBoxThresholdDistance()
{
  __hasCachedBoundingBoxThresholdDistance = 0;
}

void __clearCachedBoundingBoxThresholdSpeed()
{
  __hasCachedBoundingBoxThresholdSpeed = 0;
}

void __clearCachedBoundingBoxExitSpeed()
{
  __hasCachedBoundingBoxExitSpeed = 0;
}

void __clearCachedBoundingBoxExtraRightDistance()
{
  __hasCachedBoundingBoxExtraRightDistance = 0;
}

void __clearCachedTouchCenteringWeight()
{
  __hasCachedTouchCenteringWeight = 0;
}

void __clearCachedTouchToSelectTravelDistance()
{
  __hasCachedTouchToSelectTravelDistance = 0;
}

void sub_21B056DE0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_21B0581EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_21B05CD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B05DFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id *a14, id *location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)&STACK[0x290]);
  _Unwind_Resume(a1);
}

void sub_21B05E3FC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_21B0620F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, id *a11, id *a12, id *a13, id *a14, id *a15, id *a16, id *a17, id *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  id *v40;
  uint64_t v41;

  objc_destroyWeak(v40);
  objc_destroyWeak(location);
  objc_destroyWeak(a11);
  objc_destroyWeak(a12);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak((id *)(v41 - 136));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_21B062964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B06BD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_21B071B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B072340(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 48));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

double _TVRImageFrameForDirectionalImage_0(void *a1, char a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  void *v11;
  double v12;
  double v13;
  double MinX;
  double v15;
  CGRect v17;
  CGRect v18;
  CGRect v19;
  CGRect v20;

  objc_msgSend(a1, "image");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "size");
  v13 = v12;

  UIRectCenteredIntegralRect();
  if ((a2 & 2) != 0)
  {
    v17.origin.x = a3;
    v17.origin.y = a4;
    v17.size.width = a5;
    v17.size.height = a6;
    MinX = CGRectGetMinX(v17);
  }
  v15 = MinX;
  if ((a2 & 8) == 0)
  {
    if ((a2 & 1) == 0)
      goto LABEL_5;
LABEL_9:
    v20.origin.x = a3;
    v20.origin.y = a4;
    v20.size.width = a5;
    v20.size.height = a6;
    CGRectGetMinY(v20);
    if ((a2 & 4) == 0)
      return v15;
    goto LABEL_6;
  }
  v19.origin.x = a3;
  v19.origin.y = a4;
  v19.size.width = a5;
  v19.size.height = a6;
  v15 = CGRectGetMaxX(v19) - v13;
  if ((a2 & 1) != 0)
    goto LABEL_9;
LABEL_5:
  if ((a2 & 4) != 0)
  {
LABEL_6:
    v18.origin.x = a3;
    v18.origin.y = a4;
    v18.size.width = a5;
    v18.size.height = a6;
    CGRectGetMaxY(v18);
  }
  return v15;
}

void sub_21B078AB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v21);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B079CC4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  id *v3;
  id *v4;
  uint64_t v5;

  objc_destroyWeak(v4);
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v5 - 144));
  _Unwind_Resume(a1);
}

void sub_21B07A140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B07A2F8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_21B07A5A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B07ABCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_21B07C5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id _TVRUIButtonLog()
{
  if (_TVRUIButtonLog_onceToken != -1)
    dispatch_once(&_TVRUIButtonLog_onceToken, &__block_literal_global_11);
  return (id)_TVRUIButtonLog_log;
}

id _TVRUIDeviceInfoLog()
{
  if (_TVRUIDeviceInfoLog_onceToken != -1)
    dispatch_once(&_TVRUIDeviceInfoLog_onceToken, &__block_literal_global_3);
  return (id)_TVRUIDeviceInfoLog_log;
}

id _TVRUIDevicePickerLog()
{
  if (_TVRUIDevicePickerLog_onceToken != -1)
    dispatch_once(&_TVRUIDevicePickerLog_onceToken, &__block_literal_global_5);
  return (id)_TVRUIDevicePickerLog_log;
}

id _TVRUIDeviceQueryLog()
{
  if (_TVRUIDeviceQueryLog_onceToken != -1)
    dispatch_once(&_TVRUIDeviceQueryLog_onceToken, &__block_literal_global_7);
  return (id)_TVRUIDeviceQueryLog_log;
}

id _TVRUIHintsLog()
{
  if (_TVRUIHintsLog_onceToken != -1)
    dispatch_once(&_TVRUIHintsLog_onceToken, &__block_literal_global_9);
  return (id)_TVRUIHintsLog_log;
}

id _TVRUIIRLog()
{
  if (_TVRUIIRLog_onceToken != -1)
    dispatch_once(&_TVRUIIRLog_onceToken, &__block_literal_global_11);
  return (id)_TVRUIIRLog_log;
}

id _TVRUIIntentManagerLog()
{
  if (_TVRUIIntentManagerLog_onceToken != -1)
    dispatch_once(&_TVRUIIntentManagerLog_onceToken, &__block_literal_global_13);
  return (id)_TVRUIIntentManagerLog_log;
}

id _TVRUIKeyboardLog()
{
  if (_TVRUIKeyboardLog_onceToken != -1)
    dispatch_once(&_TVRUIKeyboardLog_onceToken, &__block_literal_global_15);
  return (id)_TVRUIKeyboardLog_log;
}

id _TVRUINetworkObserverLog()
{
  if (_TVRUINetworkObserverLog_onceToken != -1)
    dispatch_once(&_TVRUINetworkObserverLog_onceToken, &__block_literal_global_17);
  return (id)_TVRUINetworkObserverLog_log;
}

id _TVRUIPrewarmLog()
{
  if (_TVRUIPrewarmLog_onceToken != -1)
    dispatch_once(&_TVRUIPrewarmLog_onceToken, &__block_literal_global_19);
  return (id)_TVRUIPrewarmLog_log;
}

id _TVRUISignpostLog()
{
  if (_TVRUISignpostLog_onceToken != -1)
    dispatch_once(&_TVRUISignpostLog_onceToken, &__block_literal_global_21);
  return (id)_TVRUISignpostLog_log;
}

id _TVRUISiriLog()
{
  if (_TVRUISiriLog_onceToken != -1)
    dispatch_once(&_TVRUISiriLog_onceToken, &__block_literal_global_23);
  return (id)_TVRUISiriLog_log;
}

id _TVRUITipsLog()
{
  if (_TVRUITipsLog_onceToken != -1)
    dispatch_once(&_TVRUITipsLog_onceToken, &__block_literal_global_25);
  return (id)_TVRUITipsLog_log;
}

id _TVRUIViewControllerLog()
{
  if (_TVRUIViewControllerLog_onceToken != -1)
    dispatch_once(&_TVRUIViewControllerLog_onceToken, &__block_literal_global_27);
  return (id)_TVRUIViewControllerLog_log;
}

id _TVRUIViewServiceLog()
{
  if (_TVRUIViewServiceLog_onceToken != -1)
    dispatch_once(&_TVRUIViewServiceLog_onceToken, &__block_literal_global_29);
  return (id)_TVRUIViewServiceLog_log;
}

id _TVRUIVolumeControllerLog()
{
  if (_TVRUIVolumeControllerLog_onceToken != -1)
    dispatch_once(&_TVRUIVolumeControllerLog_onceToken, &__block_literal_global_31);
  return (id)_TVRUIVolumeControllerLog_log;
}

id _TVRUINowPlayingLog()
{
  if (_TVRUINowPlayingLog_onceToken != -1)
    dispatch_once(&_TVRUINowPlayingLog_onceToken, &__block_literal_global_33);
  return (id)_TVRUINowPlayingLog_log;
}

void sub_21B07FECC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void sub_21B080CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21B081000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_21B08344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void __getVUITimeMetadataFactoryClass_block_invoke(uint64_t a1)
{
  VideosUILibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("VUITimeMetadataFactory");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVUITimeMetadataFactoryClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    __getVUITimeMetadataFactoryClass_block_invoke_cold_1();
    VideosUILibrary();
  }
}

void VideosUILibrary()
{
  void *v0;

  if (!VideosUILibraryCore_frameworkLibrary)
    VideosUILibraryCore_frameworkLibrary = _sl_dlopen();
  if (!VideosUILibraryCore_frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

void __getVUITimedMetadataPlaybackInfoClass_block_invoke(uint64_t a1)
{
  TVRUIMediaControlsViewController *v2;
  SEL v3;

  VideosUILibrary();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("VUITimedMetadataPlaybackInfo");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVUITimedMetadataPlaybackInfoClass_softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v2 = (TVRUIMediaControlsViewController *)__getVUITimedMetadataPlaybackInfoClass_block_invoke_cold_1();
    -[TVRUIMediaControlsViewController viewDidLoad](v2, v3);
  }
}

void sub_21B084ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B084E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location)
{
  objc_destroyWeak(location);
  _Unwind_Resume(a1);
}

void sub_21B08787C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_21B087AA8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_21B088CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B089220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location)
{
  uint64_t v12;

  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v12 - 152));
  _Unwind_Resume(a1);
}

void sub_21B08A590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B08A7C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B08D4D4(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_21B08E14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B08FABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B090B98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B09422C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_21B097270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_3(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

uint64_t _TVRUIIsCategory(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;

  v1 = a1;
  v2 = (void *)_AXSCopyPreferredContentSizeCategoryName();
  v3 = objc_msgSend(v2, "isEqualToString:", v1);

  return v3;
}

void sub_21B09F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B0A032C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *location, id *a10)
{
  id *v10;
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v10);
  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak((id *)(v12 - 168));
  _Unwind_Resume(a1);
}

void sub_21B0A05D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_21B0A1A5C(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

void sub_21B0A331C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)&STACK[0x2F8]);
  _Unwind_Resume(a1);
}

void sub_21B0A3C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, id *a12, uint64_t a13, id *a14, id *a15, id *a16, id *a17)
{
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v17);
  objc_destroyWeak(v18);
  objc_destroyWeak(location);
  objc_destroyWeak(a12);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak((id *)(v19 - 200));
  _Unwind_Resume(a1);
}

void sub_21B0A49EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_21B0A5E14(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 32));
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

char *FMPFSKPeripheralDotNode.init(experienceType:name:dotDiameter:color:diskRadius:dotScale:angle:opacity:offset:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, uint64_t a7, char a8, double a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16)
{
  char *v16;
  int v20;
  uint64_t v21;
  objc_class *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  void *v54;
  id v55;
  id v56;
  void *v57;
  int v58;
  id v59;
  uint64_t ObjCClassFromMetadata;
  void *v61;
  id v62;
  void *v63;
  id v64;
  id v65;
  id v66;
  double v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  id v73;
  char *v74;
  char *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  id v85;
  id v86;
  id v87;
  Class isa;
  id v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  double v95;
  double *v96;
  double v97;
  double *v98;
  double v99;
  double *v100;
  double v101;
  double *v102;
  double v103;
  double v104;
  double *v105;
  double v106;
  void *v107;
  void *v108;
  id v109;
  id v110;
  double v111;
  double v112;
  double *v113;
  int v116;
  char *v117;
  char *v118;
  uint64_t v122;
  void *v123;
  uint64_t v125;
  id v126;
  objc_super v127;

  v20 = *a1;
  v21 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
  v22 = (objc_class *)type metadata accessor for FMPFSKNode();
  v23 = objc_allocWithZone(v22);
  v24 = v16;
  *(_QWORD *)&v16[v21] = objc_msgSend(v23, sel_init);
  v25 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode;
  *(_QWORD *)&v24[v25] = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v26 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  *(_QWORD *)&v24[v26] = objc_msgSend(objc_allocWithZone(v22), sel_init);
  v27 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  type metadata accessor for FMPFSKSpriteNode();
  v122 = v27;
  *(_QWORD *)&v24[v27] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v28 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode;
  *(_QWORD *)&v24[v28] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangingNode()), sel_init);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode] = 0;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] = 0;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 0;
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction] = 0;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDiskRadius] = 1;
  v29 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
  *(_QWORD *)v29 = 0;
  v117 = v29;
  v29[8] = 1;
  v30 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
  *(_QWORD *)v30 = 0;
  v30[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDotScale] = 1;
  v31 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
  *(_QWORD *)v31 = 0;
  v31[8] = 1;
  v32 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
  *(_QWORD *)v32 = 0;
  v32[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyAngle] = 1;
  v33 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
  *(_QWORD *)v33 = 0;
  v33[8] = 1;
  v34 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
  *(_QWORD *)v34 = 0;
  v34[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOpacity] = 1;
  v35 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
  *(_QWORD *)v35 = 0;
  v35[8] = 1;
  v36 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
  *(_QWORD *)v36 = 0;
  v36[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyBrightness] = 1;
  v37 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness];
  *(_QWORD *)v37 = 0;
  v118 = v37;
  v37[8] = 1;
  v38 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
  *(_QWORD *)v38 = 0;
  v38[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOffset] = 1;
  v39 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
  *(_QWORD *)v39 = 0;
  *((_QWORD *)v39 + 1) = 0;
  v39[16] = 1;
  v40 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 1) = 0;
  v40[16] = 1;
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading] = 0;
  v41 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor];
  *(_QWORD *)v41 = 0;
  v41[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = 1;
  v42 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactor];
  *(_QWORD *)v42 = 0;
  v42[8] = 1;
  v43 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedRadiusFactor];
  *(_QWORD *)v43 = 0;
  v43[8] = 1;
  v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_experienceType] = v20;
  if (v20 == 1)
  {
    if (one-time initialization token for r1NoAR != -1)
      swift_once();
    v44 = &static FMPFSKPeripheralDotNodeStyle.r1NoAR;
  }
  else
  {
    if (one-time initialization token for r1OrBT != -1)
      swift_once();
    v44 = &static FMPFSKPeripheralDotNodeStyle.r1OrBT;
  }
  v116 = a6 & 1;
  v45 = *((_QWORD *)v44 + 10);
  v46 = v44[4];
  v47 = (void *)*((_QWORD *)v44 + 7);
  v49 = *((_QWORD *)v44 + 5);
  v48 = *((_QWORD *)v44 + 6);
  v50 = *(__int128 *)((char *)v44 + 24);
  v51 = *((_QWORD *)v44 + 2);
  v52 = *((_QWORD *)v44 + 1);
  v53 = &v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style];
  *(_QWORD *)v53 = *(_QWORD *)v44;
  *((_QWORD *)v53 + 1) = v52;
  *((_QWORD *)v53 + 2) = v51;
  *(_OWORD *)(v53 + 24) = v50;
  *((_QWORD *)v53 + 5) = v49;
  *((_QWORD *)v53 + 6) = v48;
  *((_QWORD *)v53 + 7) = v47;
  *((_OWORD *)v53 + 4) = v46;
  *((_QWORD *)v53 + 10) = v45;
  *(double *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotDiameter] = a9;
  v54 = (void *)objc_opt_self();
  v55 = v47;
  v56 = objc_msgSend(v54, sel_mainScreen);
  v57 = (void *)MEMORY[0x22075C584](0xD000000000000011, 0x800000021B0FDD10);
  v58 = MGGetSInt32Answer();

  *(double *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_pixelsPerInch] = (double)v58;
  if (a4)
    v59 = a4;
  else
    v59 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor] = v59;
  type metadata accessor for FMPFView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v61 = (void *)objc_opt_self();
  v126 = a4;
  v62 = objc_msgSend(v61, sel_bundleForClass_, ObjCClassFromMetadata);
  v63 = (void *)MEMORY[0x22075C584](0xD000000000000016, 0x800000021B0FDD30);
  v64 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_compatibleWithTraitCollection_, v63, v62, 0);

  if (v64)
  {
    v65 = objc_msgSend((id)objc_opt_self(), sel_textureWithImage_, v64);

    v62 = v64;
    v66 = v65;
  }
  else
  {
    v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9ED0]), sel_init);
  }

  objc_msgSend(v66, sel_size);
  *(double *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale] = 1.0 / (v67 / a9);
  *(_QWORD *)v117 = a5;
  v117[8] = v116 != 0;
  *(_QWORD *)v31 = a7;
  v31[8] = a8 & 1;
  *(_QWORD *)v33 = a10;
  v33[8] = a11 & 1;
  *(_QWORD *)v35 = a12;
  v35[8] = a13 & 1;
  *(_QWORD *)v118 = *((_QWORD *)v53 + 3);
  v118[8] = 0;
  *(_QWORD *)v39 = a14;
  *((_QWORD *)v39 + 1) = a15;
  v39[16] = a16 & 1;
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(a5, v116, 0x3FE0000000000000, 0, 0, 1);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(_QWORD *)v31, v31[8], 0x3F847AE147AE147BLL, 0, 0, 1);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(_QWORD *)v33, v33[8], 0x3FA015BF9217271ALL, 0, 0, 1);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(_QWORD *)v35, v35[8], 0x3F847AE147AE147BLL, 0, 0, 1);
  v68 = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(*(_QWORD *)v118, v118[8], 0x3F847AE147AE147BLL, 0);
  v69 = 0;
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightnessSpring] = v68;
  if ((v39[16] & 1) == 0)
    v69 = *(_QWORD *)v39;
  v70 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v69, v39[16], 0x3FE0000000000000, 0, 0, 1);
  v71 = 0;
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring] = v70;
  if ((v39[16] & 1) == 0)
    v71 = *((_QWORD *)v39 + 1);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v71, v39[16], 0x3FE0000000000000, 0, 0, 1);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring] = specialized static FMPFFluidSpring.randomSpringWith(initialValue:randomFactor:stableValueThreshold:)(0, 0, 0, 1, 0x3FE0000000000000, 0);
  *(_QWORD *)&v24[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  objc_msgSend(*(id *)&v24[v122], sel_setTexture_, v66);
  v72 = *(id *)&v24[v122];
  objc_msgSend(v66, sel_size);
  objc_msgSend(v72, sel_setSize_);

  v73 = *(id *)&v24[v122];
  objc_msgSend(v73, sel_setColorBlendFactor_, 1.0);

  v127.receiver = v24;
  v127.super_class = (Class)type metadata accessor for FMPFSKPeripheralDotNode();
  v74 = (char *)objc_msgSendSuper2(&v127, sel_init);
  v123 = v66;
  v75 = v74;
  if (a3)
  {
    v76 = (void *)MEMORY[0x22075C584](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v76 = 0;
  }
  objc_msgSend(v74, sel_setName_, v76);

  v77 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
  objc_msgSend(v74, sel_addChild_, *(_QWORD *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode]);
  v78 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode;
  objc_msgSend(*(id *)&v74[v77], sel_addChild_, *(_QWORD *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode]);
  v79 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  objc_msgSend(*(id *)&v74[v78], sel_addChild_, *(_QWORD *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode]);
  v80 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  objc_msgSend(*(id *)&v74[v79], sel_addChild_, *(_QWORD *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode]);
  v125 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode;
  v81 = *(void **)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode];
  objc_msgSend(v74, sel_addChild_, v81);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v82 = swift_allocObject();
  *(_OWORD *)(v82 + 16) = xmmword_21B0F7C30;
  v83 = (void *)objc_opt_self();
  v84 = (void *)objc_opt_self();
  v85 = v81;
  v86 = objc_msgSend(v84, sel_rangeWithConstantValue_, 0.0);
  v87 = objc_msgSend(v83, sel_distance_toNode_, v86, *(_QWORD *)&v74[v79]);

  *(_QWORD *)(v82 + 32) = v87;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v85, sel_setConstraints_, isa);

  v89 = *(id *)&v74[v77];
  v90 = (void *)MEMORY[0x22075C584](0x6C61626D6947, 0xE600000000000000);
  objc_msgSend(v89, sel_setName_, v90);

  v91 = *(id *)&v74[v79];
  v92 = (void *)MEMORY[0x22075C584](7630660, 0xE300000000000000);
  objc_msgSend(v91, sel_setName_, v92);

  v93 = *(id *)&v74[v80];
  v94 = (void *)MEMORY[0x22075C584](0x68746150746F44, 0xE700000000000000);
  objc_msgSend(v93, sel_setName_, v94);

  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius + 8] & 1) == 0)
  {
    v95 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
    v96 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
    *v96 = v95;
    *((_BYTE *)v96 + 8) = 0;
    objc_msgSend(*(id *)&v74[v78], sel_setPosition_, 0.0, v95);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale + 8] & 1) == 0)
  {
    v97 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
    v98 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
    *v98 = v97;
    *((_BYTE *)v98 + 8) = 0;
    objc_msgSend(*(id *)&v74[v79], sel_setScale_, *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale] * v97);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle + 8] & 1) == 0)
  {
    v99 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
    v100 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
    *v100 = v99;
    *((_BYTE *)v100 + 8) = 0;
    if (!*(_QWORD *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
      objc_msgSend(*(id *)&v74[v77], sel_setZRotation_, v99);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity + 8] & 1) == 0)
  {
    v101 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
    v102 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
    *v102 = v101;
    v103 = v101;
    *((_BYTE *)v102 + 8) = 0;
    objc_msgSend(*(id *)&v74[v79], sel_setAlpha_, v101);
    objc_msgSend(*(id *)&v74[v125], sel_setAlpha_, v103);
  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness + 8] & 1) == 0)
  {
    v104 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness];
    v105 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
    *v105 = v104;
    v106 = v104;
    *((_BYTE *)v105 + 8) = 0;
    v107 = *(void **)&v74[v80];
    v108 = *(void **)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor];
    v109 = v107;
    v110 = v108;
    FMPFSKSpriteNode.setBrightness(_:with:)(v110, v106);

  }
  if ((v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset + 16] & 1) == 0)
  {
    v111 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset + 8];
    v112 = *(double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
    v113 = (double *)&v74[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
    *v113 = v112;
    v113[1] = v111;
    *((_BYTE *)v113 + 16) = 0;
    objc_msgSend(v74, sel_setPosition_, v112, v111);
  }

  return v74;
}

uint64_t FMPFSKPeripheralDotNode.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t v20;

  v1 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v2 = _Pointer.debugDescription.getter();
  v4 = specialized BidirectionalCollection.suffix(_:)(6uLL, v2, v3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = MEMORY[0x22075C5CC](v4, v6, v8, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 30768;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 32;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = objc_msgSend(v0, sel_name);
  if (v14)
  {
    v15 = v14;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v1 = v17;

  }
  else
  {
    v16 = 0;
  }
  v18._countAndFlagsBits = v16;
  v18._object = v1;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v20;
}

id FMPFSKPeripheralDotNode.createBeaconSubNode()()
{
  uint64_t v0;
  id v1;
  uint64_t ObjCClassFromMetadata;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;

  type metadata accessor for FMPFSKSpriteNode();
  v1 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  type metadata accessor for FMPFView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v3 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v4 = (void *)MEMORY[0x22075C584](0xD000000000000016, 0x800000021B0FDD30);
  v5 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_compatibleWithTraitCollection_, v4, v3, 0);

  if (v5)
  {
    v6 = objc_msgSend((id)objc_opt_self(), sel_textureWithImage_, v5);

    v3 = v5;
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9ED0]), sel_init);
  }

  objc_msgSend(v1, sel_setTexture_, v6);
  v7 = v1;
  objc_msgSend(v6, sel_size);
  objc_msgSend(v7, sel_setSize_);

  v8 = v0 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style;
  objc_msgSend(v7, sel_setColor_, *(_QWORD *)(v8 + 56));
  objc_msgSend(v7, sel_setColorBlendFactor_, 1.0);
  objc_msgSend(v7, sel_setAlpha_, *(double *)(v8 + 40));
  objc_msgSend(v7, sel_setScale_, 1.0);
  v9 = v7;
  v10 = (void *)MEMORY[0x22075C584](0x6E6F63616542, 0xE600000000000000);
  objc_msgSend(v9, sel_setName_, v10);

  return v9;
}

void closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)(void *a1, char *a2, double a3)
{
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  id v9;
  id v10;
  char *v11;
  _QWORD v12[6];

  objc_msgSend(a1, sel_setSpeed_, *(double *)&a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 8] * a3);
  if ((a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness + 8] & 1) == 0)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
    if (!UIAccessibilityIsReduceMotionEnabled())
    {
      v6 = *(void **)&a2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode];
      v7 = (_QWORD *)swift_allocObject();
      v7[2] = a1;
      v7[3] = v5;
      v7[4] = a2;
      v12[4] = closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)partial apply;
      v12[5] = v7;
      v12[0] = MEMORY[0x24BDAC760];
      v12[1] = 1107296256;
      v12[2] = thunk for @escaping @callee_guaranteed () -> ();
      v12[3] = &block_descriptor_19;
      v8 = _Block_copy(v12);
      v9 = v6;
      v10 = a1;
      v11 = a2;
      swift_release();
      objc_msgSend(v9, sel_runAction_completion_, v10, v8);
      _Block_release(v8);

    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.setFreeFromBearing()()
{
  char *v0;
  uint64_t v1;
  double *v2;
  double v3;
  uint64_t *v4;
  double v5;
  double v6;
  id v7;
  void *v8;
  double v9;
  void *v10;
  double *v11;
  void *v12;
  id v13;
  id v14;
  char *v15;
  id v16;
  _QWORD aBlock[6];

  v1 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction;
  if (!*(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
  {
    v2 = (double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
    if ((v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness + 8] & 1) == 0
      && (v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius + 8] & 1) == 0)
    {
      v3 = *v2;
      v4 = (uint64_t *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style];
      v5 = (*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius]
          + *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius])
         * 3.14159265
         / (*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style]
          * 0.5);
      v6 = dbl_21B0F7C40[(specialized RandomNumberGenerator.next<A>(upperBound:)(100) & 1) == 0];
      v7 = objc_msgSend((id)objc_opt_self(), sel_rotateByAngle_duration_, v6 / (double)v4[2], v5 / (double)v4[2]);
      objc_msgSend(v7, sel_setTimingMode_, 0);
      objc_msgSend(v7, sel_setSpeed_, v3 * *((double *)v4 + 1));
      v8 = *(void **)&v0[v1];
      *(_QWORD *)&v0[v1] = v7;
      v16 = v7;

      if (((_BYTE)v2[1] & 1) != 0 || (v9 = *v2, UIAccessibilityIsReduceMotionEnabled()))
      {

      }
      else
      {
        v10 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode];
        v11 = (double *)swift_allocObject();
        *((_QWORD *)v11 + 2) = v16;
        v11[3] = v9;
        *((_QWORD *)v11 + 4) = v0;
        aBlock[4] = partial apply for closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:);
        aBlock[5] = v11;
        aBlock[0] = MEMORY[0x24BDAC760];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_12;
        v12 = _Block_copy(aBlock);
        v13 = v16;
        v14 = v10;
        v15 = v0;
        swift_release();
        objc_msgSend(v14, sel_runAction_completion_, v13, v12);
        _Block_release(v12);

      }
    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.setBoundToBearing()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  double *v3;
  double v4;
  uint64_t v5;
  void *v6;
  double v7;
  long double v8;
  double v9;
  double v10;
  double v11;
  Swift::Double v13;
  uint64_t v14;
  uint64_t v15;

  v1 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
  {
    v2 = v0;
    v3 = (double *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
    if (((_BYTE)v3[1] & 1) == 0)
    {
      v4 = *v3;
      v5 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode], sel_removeAllActions);
      v6 = *(void **)&v2[v1];
      *(_QWORD *)&v2[v1] = 0;

      v7 = fmod(*(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading]/ 180.0* 3.14159265, 6.28318531);
      if (v7 <= 3.14159265)
      {
        if (v7 < -3.14159265)
          v7 = v7 + 6.28318531;
      }
      else
      {
        v7 = v7 + -6.28318531;
      }
      objc_msgSend(*(id *)&v2[v5], sel_zRotation);
      v9 = fmod(v8, 6.28318531);
      if (v9 <= 3.14159265)
      {
        if (v9 < -3.14159265)
          v9 = v9 + 6.28318531;
      }
      else
      {
        v9 = v9 + -6.28318531;
      }
      v10 = v7 + v9;
      v11 = v4 - (v7 + v9);
      if (vabdd_f64(v4, v10) > 3.14159265)
      {
        if (v10 >= 0.0 || v4 < 0.0)
        {
          if (v4 < 0.0 && v10 >= 0.0)
            v11 = v11 + 6.28318531;
        }
        else
        {
          v11 = v11 + -6.28318531;
        }
      }
      v13 = v4 - v11;
      *v3 = v4 - v11;
      *((_BYTE *)v3 + 8) = 0;
      objc_msgSend(*(id *)&v2[v5], sel_setZRotation_, v4 - v11);
      v14 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring];
      FLSpring.resetImmediately(toValue:)(v13);
      *(_BYTE *)(v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      objc_msgSend(v2, sel_setZRotation_, 0.0);
      v15 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring];
      FLSpring.resetImmediately(toValue:)(0.0);
      *(_BYTE *)(v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      FMPFSKPeripheralDotNode.setAngle(_:sprung:)(1, v4);
    }
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.pulse(_:animated:)(Swift::Bool _, Swift::Bool animated)
{
  char *v2;
  char *v3;
  void *v4;
  double *v5;
  double v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  Class isa;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  char v31;
  id v32;
  id v33;
  char v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  Class v39;
  id v40;
  void *v41;
  uint64_t v42;
  void *v43;
  id v44;
  char *v45;
  uint64_t v46;
  uint64_t i;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t aBlock;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  void *v57;
  id (*v58)();
  uint64_t v59;

  v3 = v2;
  if (_)
  {
    v4 = (void *)objc_opt_self();
    v5 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style];
    v6 = *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 64];
    v7 = objc_msgSend(v4, sel_fadeAlphaTo_duration_, *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 48], v6);
    objc_msgSend(v7, sel_setTimingMode_, 2);
    if ((v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] & 1) != 0)
    {
      v8 = FMPFSKPeripheralDotNode.createBeaconSubNode()();
      v9 = objc_msgSend(v4, sel_scaleTo_duration_, v5[4], v6);
      objc_msgSend(v9, sel_setTimingMode_, 2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_21B0F7C50;
      *(_QWORD *)(v10 + 32) = v7;
      *(_QWORD *)(v10 + 40) = v9;
      aBlock = v10;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for SKAction);
      v11 = v7;
      v12 = v9;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v14 = objc_msgSend(v4, sel_group_, isa);

      objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_addChild_, v8);
      v15 = swift_allocObject();
      *(_QWORD *)(v15 + 16) = v8;
      v58 = partial apply for closure #2 in FMPFSKPeripheralDotNode.pulse(_:animated:);
      v59 = v15;
      aBlock = MEMORY[0x24BDAC760];
      v55 = 1107296256;
      v56 = thunk for @escaping @callee_guaranteed () -> ();
      v57 = &block_descriptor_6;
      v16 = _Block_copy(&aBlock);
      v17 = v8;
      swift_release();
      objc_msgSend(v17, sel_runAction_completion_, v14, v16);

      _Block_release(v16);
    }
    else
    {
      v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 1;
      v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] = 1;
      v35 = objc_msgSend(v4, sel_scaleTo_duration_, v5[4], v6);
      objc_msgSend(v35, sel_setTimingMode_, 2);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v36 = swift_allocObject();
      *(_OWORD *)(v36 + 16) = xmmword_21B0F7C50;
      *(_QWORD *)(v36 + 32) = v7;
      *(_QWORD *)(v36 + 40) = v35;
      aBlock = v36;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for SKAction);
      v37 = v7;
      v38 = v35;
      v39 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v40 = objc_msgSend(v4, sel_group_, v39);

      v41 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode];
      v42 = swift_allocObject();
      *(_QWORD *)(v42 + 16) = v3;
      v58 = partial apply for closure #1 in FMPFSKPeripheralDotNode.pulse(_:animated:);
      v59 = v42;
      aBlock = MEMORY[0x24BDAC760];
      v55 = 1107296256;
      v56 = thunk for @escaping @callee_guaranteed () -> ();
      v57 = &block_descriptor;
      v43 = _Block_copy(&aBlock);
      v44 = v41;
      v45 = v3;
      swift_release();
      objc_msgSend(v44, sel_runAction_completion_, v40, v43);

      _Block_release(v43);
    }
    return;
  }
  if (animated)
    return;
  aBlock = MEMORY[0x24BEE4AF8];
  v18 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_children);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v19 >> 62)
    goto LABEL_27;
  v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v20)
  {
LABEL_7:
    v52 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
    v53 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode;
    v21 = 4;
    v22 = v3;
    while (1)
    {
      if ((v19 & 0xC000000000000001) != 0)
        v23 = (id)MEMORY[0x22075C8C0](v21 - 4, v19);
      else
        v23 = *(id *)(v19 + 8 * v21);
      v24 = v23;
      v25 = v21 - 3;
      if (__OFADD__(v21 - 4, 1))
      {
        __break(1u);
LABEL_27:
        swift_bridgeObjectRetain();
        v20 = _CocoaArrayWrapper.endIndex.getter();
        if (!v20)
          goto LABEL_28;
        goto LABEL_7;
      }
      objc_opt_self();
      v26 = swift_dynamicCastObjCClass();
      if (!v26)
        goto LABEL_9;
      v27 = (void *)v26;
      v28 = *(void **)&v3[v53];
      if (v28)
      {
        v29 = v24;
        v30 = v28;
        v31 = static NSObject.== infix(_:_:)();

        v3 = v22;
        if ((v31 & 1) != 0)
          break;
      }
      else
      {
        v32 = v24;
      }
      v33 = *(id *)&v3[v52];
      v34 = static NSObject.== infix(_:_:)();

      v3 = v22;
      if ((v34 & 1) != 0)
        break;
      MEMORY[0x22075C638](objc_msgSend(v27, sel_removeAllActions));
      if (*(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();

      v3 = v22;
      if (v25 == v20)
        goto LABEL_28;
LABEL_10:
      ++v21;
    }

LABEL_9:
    if (v25 == v20)
      goto LABEL_28;
    goto LABEL_10;
  }
LABEL_28:
  swift_bridgeObjectRelease_n();
  if (aBlock >> 62)
  {
    swift_bridgeObjectRetain_n();
    v46 = _CocoaArrayWrapper.endIndex.getter();
    if (v46)
      goto LABEL_30;
  }
  else
  {
    v46 = *(_QWORD *)((aBlock & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v46)
    {
LABEL_30:
      if (v46 < 1)
      {
        __break(1u);
        return;
      }
      for (i = 0; i != v46; ++i)
      {
        if ((aBlock & 0xC000000000000001) != 0)
          v48 = (id)MEMORY[0x22075C8C0](i, aBlock);
        else
          v48 = *(id *)(aBlock + 8 * i + 32);
        v49 = v48;
        objc_msgSend(v48, sel_removeFromParent);

      }
    }
  }
  swift_bridgeObjectRelease_n();
  v50 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse;
  if ((v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] & 1) != 0)
  {
    v51 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode], sel_removeAllActions);
    objc_msgSend(*(id *)&v3[v51], sel_setScale_, 1.0);
    objc_msgSend(*(id *)&v3[v51], sel_setAlpha_, 1.0);
  }
  v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 0;
  v3[v50] = 0;
  swift_bridgeObjectRelease();
}

void FMPFSKPeripheralDotNode.setDotScale(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale;
  *(Swift::Double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring),
        v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    v10 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v10 = a2;
    *(_BYTE *)(v10 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale;
    *(Swift::Double *)v9 = a2;
    *(_BYTE *)(v9 + 8) = 0;
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode), sel_setScale_, *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale) * a2);
  }
}

void FMPFSKPeripheralDotNode.setAngle(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle;
  *(Swift::Double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring),
        v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    v10 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v10 = a2;
    *(_BYTE *)(v10 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle;
    *(Swift::Double *)v9 = a2;
    *(_BYTE *)(v9 + 8) = 0;
    if (!*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction))
      objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode), sel_setZRotation_, a2);
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.setOffset(_:sprung:)(CGPoint _, Swift::Bool sprung)
{
  char *v2;
  char *v3;
  CGFloat y;
  CGFloat x;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = v2;
  y = _.y;
  x = _.x;
  v6 = &v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
  *(CGFloat *)v6 = _.x;
  *((_QWORD *)v6 + 1) = *(_QWORD *)&_.y;
  v6[16] = 0;
  if (!sprung
    || (v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring],
        v8 = v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v8 + 280) + *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) == 1.79769313e308)
    || (v9 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring,
        v10 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring],
        v11 = v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v11 + 280) + *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) == 1.79769313e308))
  {
    v12 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring];
    FLSpring.resetImmediately(toValue:)(x);
    *(_BYTE *)(v12 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v13 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring];
    FLSpring.resetImmediately(toValue:)(y);
    *(_BYTE *)(v13 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v14 = (CGFloat *)&v3[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
    *v14 = x;
    v14[1] = y;
    *((_BYTE *)v14 + 16) = 0;
    objc_msgSend(v3, sel_setPosition_, x, y);
  }
  else
  {
    v15 = v7 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(CGFloat *)v15 = x;
    *(_BYTE *)(v15 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
    v16 = *(_QWORD *)&v3[v9] + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(CGFloat *)v16 = y;
    *(_BYTE *)(v16 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.addSprungRelativeHeading(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring);
  v4 = v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  v5 = v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  v6 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v7 = *(double *)(v4 + 280) + v6;
  v8 = v7 + a1;
  if (v7 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v8);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v6 = *(double *)(v5 + 40);
  }
  v9 = v8 - v6;
  *(double *)(v4 + 280) = v9;
  *(double *)(v4 + 240) = v9;
  *(_QWORD *)(v4 + 248) = 0;
}

id FMPFSKPeripheralDotNode.setUnsprungInteractiveAngleFactor(_:)(id result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  uint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;

  v3 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor;
  *(_QWORD *)v3 = result;
  *(_BYTE *)(v3 + 8) = a2 & 1;
  if ((a2 & 1) == 0 && (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle + 8) & 1) == 0)
  {
    v4 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle);
    v5 = *(double *)&result;
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring);
    v7 = (double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    result = (id)swift_beginAccess();
    v8 = *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v8) <= *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
      v8 = v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v9 = v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle;
    *(double *)v9 = v4 * v5 + (1.0 - v5) * v8;
    *(_BYTE *)(v9 + 8) = 0;
    if (!*(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction))
      return objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode), sel_setZRotation_);
  }
  return result;
}

void FMPFSKPeripheralDotNode.__ivar_destroyer()
{
  uint64_t v0;

}

id FMPFSKPeripheralDotNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKPeripheralDotNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKPeripheralDotNode()
{
  return objc_opt_self();
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for NSProcessInfoThermalState);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for CGSize);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, (unint64_t *)&lazy cache variable for type metadata for CGPoint);
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(a1, a2, MEMORY[0x24BEE0CD8]);
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x24BDCF9E0]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance CHHapticPatternKey(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance CHHapticPatternKey(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance CHHapticPatternKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x22075C584](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance NSProcessInfoThermalState@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance NSProcessInfoThermalState(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CHHapticPatternKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticPatternKey()
{
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticEngineOptionKey()
{
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticEngineOptionKey, (uint64_t)&protocol conformance descriptor for CHHapticEngineOptionKey);
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey((unint64_t *)&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticEngineOptionKey, (uint64_t)&protocol conformance descriptor for CHHapticEngineOptionKey);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CHHapticPatternKey@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x22075C584](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance CHHapticPowerUsage()
{
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPowerUsage, (uint64_t)&protocol conformance descriptor for CHHapticPowerUsage);
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPowerUsage, (uint64_t)&protocol conformance descriptor for CHHapticPowerUsage);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance CHHapticPatternKey(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CHHapticPatternKey()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CHHapticPatternKey()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CHHapticPatternKey()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void specialized FMPFSKPeripheralDotNode.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v1 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode;
  v2 = (objc_class *)type metadata accessor for FMPFSKNode();
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v3 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v4 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v5 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  type metadata accessor for FMPFSKSpriteNode();
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v6 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangingNode()), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_hasPlayedInitialPulse] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDiskRadius] = 1;
  v7 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDotScale] = 1;
  v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyAngle] = 1;
  v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angle];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOpacity] = 1;
  v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyBrightness] = 1;
  v15 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightness];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOffset] = 1;
  v17 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_offset];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v18 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading] = 0;
  v19 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = 1;
  v20 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactor];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v21 = &v0[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedRadiusFactor];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized FMPFSKPeripheralDotNode.renderingColor.setter(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  void *v8;
  id v9;
  id v10;

  v2 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor;
  v3 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor) = a1;
  v4 = a1;

  v5 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode)
     + OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_previousBrightness;
  *(_QWORD *)v6 = 0;
  *(_BYTE *)(v6 + 8) = 1;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness + 8) & 1) == 0)
  {
    v7 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness);
    v8 = *(void **)(v1 + v2);
    v9 = *(id *)(v1 + v5);
    v10 = v8;
    FMPFSKSpriteNode.setBrightness(_:with:)(v10, v7);

  }
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22075D43C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for SKConstraint(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_21B0A9EA0()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in FMPFSKPeripheralDotNode.pulse(_:animated:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse) = 0;
  v2 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode), sel_setScale_, 1.0);
  return objc_msgSend(*(id *)(v1 + v2), sel_setAlpha_, 1.0);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

id partial apply for closure #2 in FMPFSKPeripheralDotNode.pulse(_:animated:)()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), sel_removeFromParent);
}

void partial apply for closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)()
{
  uint64_t v0;

  closure #1 in FMPFSKPeripheralDotNode.executePartPerimeterRotation(_:)(*(void **)(v0 + 16), *(char **)(v0 + 32), *(double *)(v0 + 24));
}

uint64_t sub_21B0A9F50()
{
  uint64_t v0;

  return swift_deallocObject();
}

void type metadata accessor for CHHapticPatternKey(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for CHHapticPatternKey);
}

void type metadata accessor for CHHapticPowerUsage(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for CHHapticPowerUsage);
}

void type metadata accessor for CHHapticEngineOptionKey(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for CHHapticEngineOptionKey);
}

void type metadata accessor for UIFontDescriptorSymbolicTraits(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for UIFontDescriptorSymbolicTraits);
}

void type metadata accessor for SKLabelHorizontalAlignmentMode(uint64_t a1)
{
  type metadata accessor for NSProcessInfoThermalState(a1, &lazy cache variable for type metadata for SKLabelHorizontalAlignmentMode);
}

void type metadata accessor for NSProcessInfoThermalState(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t base witness table accessor for RawRepresentable in CHHapticEngineOptionKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticEngineOptionKey, (uint64_t)&protocol conformance descriptor for CHHapticEngineOptionKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticEngineOptionKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticEngineOptionKey, (uint64_t)&protocol conformance descriptor for CHHapticEngineOptionKey);
}

uint64_t lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x22075D454](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in CHHapticEngineOptionKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticEngineOptionKey, (uint64_t)&protocol conformance descriptor for CHHapticEngineOptionKey);
}

uint64_t base witness table accessor for RawRepresentable in CHHapticPowerUsage()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPowerUsage, (uint64_t)&protocol conformance descriptor for CHHapticPowerUsage);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticPowerUsage()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPowerUsage, (uint64_t)&protocol conformance descriptor for CHHapticPowerUsage);
}

uint64_t base witness table accessor for Equatable in CHHapticPowerUsage()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPowerUsage, (uint64_t)&protocol conformance descriptor for CHHapticPowerUsage);
}

uint64_t base witness table accessor for RawRepresentable in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
}

uint64_t base witness table accessor for Equatable in CHHapticPatternKey()
{
  return lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
}

uint64_t initializeBufferWithCopyOfBuffer for FMFindingState(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for FMFindingState(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  int v3;
  int v4;

  v1 = *(char **)(a1 + 16);
  LODWORD(v2) = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF)
    v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 - 1;
  if (v3 < 0)
    v4 = -1;
  else
    v4 = v3;
  if ((v3 <= 4 || v4 <= 0) && (unint64_t)(v1 - 1) >= 5)
  {

  }
}

uint64_t initializeWithCopy for FMFindingState(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  id v19;

  v4 = *(char **)(a2 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF)
    v5 = *(_QWORD *)(a2 + 16);
  v6 = v5 - 1;
  if (v6 < 0)
    v7 = -1;
  else
    v7 = v6;
  if (v7 < 1 || v6 <= 4)
  {
    if ((unint64_t)(v4 - 2) < 4 || v4 == (char *)1)
    {
      v9 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v9;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
      v16 = *(void **)(a2 + 24);
      v15 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v16;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
      *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
      v17 = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 88) = v17;
      *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
      v18 = v4;
      v19 = v16;
    }
    *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v12;
    *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
    v13 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v13;
    v14 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v14;
  }
  return a1;
}

uint64_t assignWithCopy for FMFindingState(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  id v43;
  uint64_t v44;

  v4 = *(char **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 - 1;
  if ((int)v6 - 1 < 0)
    v8 = -1;
  else
    v8 = v6 - 1;
  v9 = a2[2];
  if (v9 < 0xFFFFFFFF)
    v5 = a2[2];
  v10 = v5 - 1;
  if (v10 < 0)
    v11 = -1;
  else
    v11 = v10;
  v13 = v11 < 1 || v10 < 5;
  if (v8 < 1 || v7 <= 4)
  {
    if (v13)
    {
      v15 = v9 - 2;
      if ((unint64_t)(v4 - 2) >= 4)
      {
        if (v15 >= 4)
        {
          if (v4 == (char *)1)
          {
LABEL_30:
            if (v9 != 1)
            {
              v26 = *a2;
              *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
              *(_QWORD *)a1 = v26;
              v27 = (void *)a2[2];
              *(_QWORD *)(a1 + 16) = v27;
              v28 = (void *)a2[3];
              *(_QWORD *)(a1 + 24) = v28;
              *(_QWORD *)(a1 + 32) = a2[4];
              *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
              *(_QWORD *)(a1 + 48) = a2[6];
              *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
              *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
              *(_QWORD *)(a1 + 64) = a2[8];
              *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
              *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
              *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
              *(_QWORD *)(a1 + 80) = a2[10];
              v29 = a2[11];
              *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
              *(_QWORD *)(a1 + 88) = v29;
              v30 = v27;
              v31 = v28;
              goto LABEL_40;
            }
LABEL_31:
            v16 = *(_OWORD *)a2;
            v17 = *((_OWORD *)a2 + 2);
            *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
            *(_OWORD *)(a1 + 32) = v17;
            *(_OWORD *)a1 = v16;
            v18 = *((_OWORD *)a2 + 3);
            v19 = *((_OWORD *)a2 + 4);
            v20 = *((_OWORD *)a2 + 5);
            *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
            *(_OWORD *)(a1 + 64) = v19;
            *(_OWORD *)(a1 + 80) = v20;
            *(_OWORD *)(a1 + 48) = v18;
LABEL_40:
            *(_BYTE *)(a1 + 97) = *((_BYTE *)a2 + 97);
            return a1;
          }
          if (v9 != 1)
          {
            v38 = *a2;
            *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
            *(_QWORD *)a1 = v38;
            v39 = (void *)a2[2];
            *(_QWORD *)(a1 + 16) = v39;
            v40 = v39;

            v41 = *(void **)(a1 + 24);
            v42 = (void *)a2[3];
            *(_QWORD *)(a1 + 24) = v42;
            v43 = v42;

            *(_QWORD *)(a1 + 32) = a2[4];
            *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
            *(_QWORD *)(a1 + 48) = a2[6];
            *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
            *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
            *(_QWORD *)(a1 + 64) = a2[8];
            *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
            *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
            *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
            *(_QWORD *)(a1 + 80) = a2[10];
            v44 = a2[11];
            *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
            *(_QWORD *)(a1 + 88) = v44;
            goto LABEL_40;
          }
          outlined destroy of FMFindingDistance(a1);
        }
        else
        {
          outlined destroy of (distance: FMFindingDistance?)(a1);
        }
        v33 = *((_OWORD *)a2 + 1);
        v32 = *((_OWORD *)a2 + 2);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v33;
        *(_OWORD *)(a1 + 32) = v32;
        v35 = *((_OWORD *)a2 + 4);
        v34 = *((_OWORD *)a2 + 5);
        v36 = *((_OWORD *)a2 + 3);
        *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
        *(_OWORD *)(a1 + 64) = v35;
        *(_OWORD *)(a1 + 80) = v34;
        *(_OWORD *)(a1 + 48) = v36;
        goto LABEL_40;
      }
LABEL_29:
      if (v15 < 4)
        goto LABEL_31;
      goto LABEL_30;
    }
    if ((unint64_t)(v4 - 1) >= 5)
    {

    }
  }
  else if (v13)
  {
    v15 = v9 - 2;
    goto LABEL_29;
  }
  v21 = *(_OWORD *)a2;
  v22 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 32) = v22;
  *(_OWORD *)a1 = v21;
  v23 = *((_OWORD *)a2 + 3);
  v24 = *((_OWORD *)a2 + 4);
  v25 = *((_OWORD *)a2 + 5);
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v24;
  *(_OWORD *)(a1 + 80) = v25;
  *(_OWORD *)(a1 + 48) = v23;
  return a1;
}

uint64_t outlined destroy of FMFindingDistance(uint64_t a1)
{
  destroy for FMFindingDistance(a1);
  return a1;
}

uint64_t outlined destroy of (distance: FMFindingDistance?)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (distance: FMFindingDistance?));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy98_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_WORD *)(a1 + 96) = *((_WORD *)a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FMFindingState(uint64_t a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v21;

  v4 = *(char **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF)
    v5 = *(_QWORD *)(a1 + 16);
  v6 = v5 - 1;
  if (v6 < 0)
    v7 = -1;
  else
    v7 = v6;
  if (v7 >= 1 && v6 > 4)
    goto LABEL_26;
  v9 = *(_QWORD *)(a2 + 16);
  LODWORD(v10) = -1;
  if (v9 < 0xFFFFFFFF)
    v10 = *(_QWORD *)(a2 + 16);
  v11 = v10 - 1;
  if (v11 < 0)
    v12 = -1;
  else
    v12 = v11;
  if (v12 < 1 || v11 <= 4)
  {
    if ((unint64_t)(v4 - 2) >= 4)
    {
      if (v9 - 2 >= 4)
      {
        if (v4 != (char *)1)
        {
          if (v9 != 1)
          {
            *(_QWORD *)a1 = *(_QWORD *)a2;
            *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
            *(_QWORD *)(a1 + 16) = v9;

            v21 = *(void **)(a1 + 24);
            *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

            *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
            *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
            *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
            *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
            *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
            *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
            *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
            *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
            *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
            *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
            *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
            goto LABEL_31;
          }
          outlined destroy of FMFindingDistance(a1);
        }
      }
      else
      {
        outlined destroy of (distance: FMFindingDistance?)(a1);
      }
    }
    v17 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v17;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v18;
    v19 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v19;
LABEL_31:
    *(_BYTE *)(a1 + 97) = *(_BYTE *)(a2 + 97);
    return a1;
  }
  if ((unint64_t)(v4 - 1) >= 5)
  {

  }
LABEL_26:
  v14 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v14;
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v15;
  v16 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  int v5;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF5 && *(_BYTE *)(a1 + 98))
    return (*(_DWORD *)a1 + 2147483638);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v5 = -1;
  else
    v5 = v4;
  if (v4 <= 4)
    v4 = 4;
  v6 = v4 - 4;
  if (v5 <= 0)
    v6 = 0;
  if (v6 >= 5)
    return v6 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMFindingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF6)
  {
    *(_WORD *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483638;
    if (a3 >= 0x7FFFFFF6)
      *(_BYTE *)(result + 98) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFF6)
      *(_BYTE *)(result + 98) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 9;
  }
  return result;
}

uint64_t getEnumTag for FMFindingState(uint64_t a1)
{
  unint64_t v1;
  int v2;
  int v3;
  unsigned int v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v3 = -1;
  else
    v3 = v2;
  if (v2 <= 4)
    v2 = 4;
  v4 = v2 - 4;
  if (v3 <= 0)
    return 0;
  else
    return v4;
}

double destructiveInjectEnumTag for FMFindingState(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_WORD *)(a1 + 96) = 0;
    *(_QWORD *)a1 = a2 - 2147483642;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 16) = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingState()
{
  return &type metadata for FMFindingState;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingState.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEF637241646E4165;
  v3 = 0x7672754364617571;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x7672754364617571;
    else
      v5 = 0x7261656E696CLL;
    if (v4 == 1)
      v6 = 0xE900000000000065;
    else
      v6 = 0xE600000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0x7672754364617571;
    v6 = 0xEF637241646E4165;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v2 = 0xE900000000000065;
  }
  else
  {
    v3 = 0x7261656E696CLL;
    v2 = 0xE600000000000000;
  }
LABEL_12:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6D6572757361656DLL;
    else
      v3 = 0x646E657274;
    if (v2 == 1)
      v4 = 0xEB00000000746E65;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6D6572757361656DLL;
      else
        v6 = 0x646E657274;
      if (v5 == 1)
        v7 = 0xEB00000000746E65;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701869940;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701869940)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65636E6174736964;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65636E6174736964;
  else
    v5 = 1701869940;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_21B0AAC20(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_21B0AAC84 + 4 * byte_21B0F81EC[a2]))(0x6973616572636E69);
}

uint64_t sub_21B0AAC84(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6973616572636E69 && v1 == 0xEA0000000000676ELL)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingState.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingState.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingState.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingState.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FMFindingState.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingState.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xEB00000000746E65;
  v5 = 0x6D6572757361656DLL;
  if (v2 != 1)
  {
    v5 = 0x646E657274;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701869940;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FMFindingState.CodingKeys()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D6572757361656DLL;
  if (*v0 != 1)
    v1 = 0x646E657274;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance FMFindingState.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FMFindingState.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance FMFindingState.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance FMFindingState.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingState.CodingKeys()
{
  lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FMFindingState.CodingKeys()
{
  lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FMFindingState.description.getter()
{
  __int128 *v0;
  uint64_t v1;
  void *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  void *v42;
  void *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;

  v1 = (uint64_t)v0;
  outlined init with take of FMFindingState(v0, (uint64_t)v23);
  v21 = v23[1];
  v22 = v23[0];
  v19 = (void *)v23[3];
  v20 = (void *)v23[2];
  outlined init with take of FMFindingState(v0, (uint64_t)&v24);
  v2 = v26;
  v3 = 0xE300000000000000;
  v4 = 0xEC00000064657463;
  v5 = 0x656E6E6F63736964;
  v6 = 7104878;
  v7 = 7496038;
  v8 = MEMORY[0x24BEE0D00];
  v9 = &unk_21B0F8000;
  switch((unint64_t)v26)
  {
    case 1uLL:
      goto LABEL_4;
    case 2uLL:
      goto LABEL_7;
    case 3uLL:
      v3 = 0xE400000000000000;
      v7 = 1918985582;
      goto LABEL_7;
    case 4uLL:
      v3 = 0xE400000000000000;
      v7 = 1701995880;
      goto LABEL_7;
    case 5uLL:
      v3 = 0xE500000000000000;
      v7 = 0x646E756F66;
      goto LABEL_7;
    case 6uLL:
      goto LABEL_8;
    case 7uLL:
      v4 = 0xEA0000000000676ELL;
      v5 = 0x697463656E6E6F63;
      goto LABEL_8;
    case 8uLL:
      v4 = 0xE600000000000000;
      v5 = 0x676E69766F6DLL;
      goto LABEL_8;
    case 9uLL:
      v4 = 0xEF68746150646574;
      v5 = 0x6172656E65676564;
      goto LABEL_8;
    default:
      v16 = v27;
      v17 = v25;
      v18 = v24;
      v40 = v24;
      v41 = v25 & 1;
      v42 = v26;
      v43 = v27;
      v44 = v28;
      v45 = v29 & 1;
      v46 = v30;
      v47 = v31 & 1;
      v48 = v32 & 1;
      v49 = v33;
      v50 = v34 & 1;
      v51 = v35 & 1;
      v52 = v36 & 1;
      v53 = v37;
      v54 = v38;
      v55 = v39 & 1;
      outlined copy of FMFindingMeasurement(v22, v21, v20, v19);
      outlined copy of FMFindingDistance?(v18, v17, v2, v16);
      v6 = FMFindingDistance.description.getter();
      v3 = v10;
      v8 = MEMORY[0x24BEE0D00];
      v9 = (_OWORD *)&unk_21B0F8000;
LABEL_4:
      v11 = v3;
      String.append(_:)(*(Swift::String *)&v6);
      outlined retain of FMFindingState(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      swift_bridgeObjectRelease();
      v7 = 0x3A65736963657270;
      v3 = 0xE900000000000020;
LABEL_7:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = v9[70];
      *(_QWORD *)(v12 + 56) = v8;
      *(_QWORD *)(v12 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v12 + 32) = v7;
      *(_QWORD *)(v12 + 40) = v3;
      v13._countAndFlagsBits = String.init(format:_:)();
      String.append(_:)(v13);
      outlined retain of FMFindingState(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      swift_bridgeObjectRelease();
      v5 = 0x657463656E6E6F63;
      v4 = 0xEB00000000203A64;
LABEL_8:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = v9[70];
      *(_QWORD *)(v14 + 56) = v8;
      *(_QWORD *)(v14 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(_QWORD *)(v14 + 32) = v5;
      *(_QWORD *)(v14 + 40) = v4;
      return String.init(format:_:)();
  }
}

uint64_t FMFindingState.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD v50[13];
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 v62;
  char v63;
  uint64_t v64;

  v2 = v1;
  outlined init with take of FMFindingState(v2, (uint64_t)v50);
  v33 = v50[1];
  v34 = v50[0];
  v31 = (void *)v50[3];
  v32 = (void *)v50[2];
  v29 = v50[5];
  v30 = v50[4];
  v27 = v50[7];
  v28 = v50[6];
  v25 = v50[9];
  v26 = v50[8];
  v23 = v50[11];
  v24 = v50[10];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FMFindingState.CodingKeys>);
  v35 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of FMFindingState(v2, (uint64_t)v51);
  v7 = v52;
  switch(v52)
  {
    case 6:
      LOBYTE(v37) = 0;
      goto LABEL_10;
    case 7:
      LOBYTE(v37) = 0;
      goto LABEL_10;
    case 8:
      LOBYTE(v37) = 0;
      goto LABEL_10;
    case 9:
      LOBYTE(v37) = 0;
LABEL_10:
      KeyedEncodingContainer.encode(_:forKey:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v6, v4);
      break;
    default:
      v11 = v51[1];
      v12 = v51[0];
      v21 = v54;
      v22 = v53;
      v19 = v56;
      v20 = v55;
      v17 = v58;
      v18 = v57;
      v15 = v60;
      v16 = v59;
      v14 = v61;
      v13 = v62;
      v8 = v63;
      LOBYTE(v37) = 0;
      outlined copy of FMFindingMeasurement(v34, v33, v32, v31);
      v9 = v64;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v9)
      {
        v37 = v12;
        v38 = v11;
        v39 = v7;
        v40 = v22;
        v41 = v21;
        v42 = v20;
        v43 = v19;
        v44 = v18;
        v45 = v17;
        v46 = v16;
        v47 = v15;
        v48 = v14;
        v49 = v13;
        v36 = 1;
        lazy protocol witness table accessor for type FMFindingMeasurement and conformance FMFindingMeasurement();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
        LOBYTE(v37) = v8;
        v36 = 2;
        lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
      result = outlined retain of FMFindingState((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      break;
  }
  return result;
}

void FMFindingState.hash(into:)()
{
  __int128 *v0;
  Swift::UInt v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  unsigned __int8 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  outlined init with take of FMFindingState(v0, (uint64_t)v21);
  v19 = v21[1];
  v20 = v21[0];
  v17 = (void *)v21[3];
  v18 = (void *)v21[2];
  outlined init with take of FMFindingState(v0, (uint64_t)&v22);
  switch(v24)
  {
    case 6:
      v1 = 1;
      break;
    case 7:
      v1 = 2;
      break;
    case 8:
      v1 = 4;
      break;
    case 9:
      v1 = 5;
      break;
    default:
      v2 = v23;
      v15 = v22;
      v3 = v25;
      v4 = v26;
      v5 = v27;
      v6 = v28;
      v7 = v29;
      v8 = v30;
      v9 = v31;
      v10 = v32;
      v11 = v33;
      v12 = v34;
      v16 = v35;
      v13 = v24;
      Hasher._combine(_:)(3uLL);
      switch(v13)
      {
        case 2:
          v14 = 1;
          goto LABEL_12;
        case 3:
          v14 = 2;
          goto LABEL_12;
        case 4:
          v14 = 3;
          goto LABEL_12;
        case 5:
          v14 = 4;
LABEL_12:
          Hasher._combine(_:)(v14);
          break;
        default:
          Hasher._combine(_:)(5uLL);
          if (v13 == 1)
          {
            Hasher._combine(_:)(0);
            outlined retain of FMFindingState((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
          }
          else
          {
            v36 = v15;
            v37 = v2 & 1;
            v38 = v13;
            v39 = v3;
            v40 = v4;
            v41 = v5 & 1;
            v42 = v6;
            v43 = v7 & 0x101;
            v44 = v8;
            v45 = v9 & 0x101;
            v46 = BYTE2(v9) & 1;
            v47 = v10;
            v48 = v11;
            v49 = v12 & 1;
            Hasher._combine(_:)(1u);
            outlined copy of FMFindingMeasurement(v20, v19, v18, v17);
            FMFindingDistance.hash(into:)();
          }
          break;
      }
      __asm { BR              X9 }
      return;
  }
  Hasher._combine(_:)(v1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingState(__int128 *a1, __int128 *a2)
{
  __int128 v4[6];
  __int128 v5[6];

  outlined init with take of FMFindingState(a1, (uint64_t)v4);
  outlined init with take of FMFindingState(a2, (uint64_t)v5);
  return specialized static FMFindingState.== infix(_:_:)(v4, v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingState()
{
  __int128 *v0;
  _BYTE v2[104];

  outlined init with take of FMFindingState(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  FMFindingState.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingState()
{
  __int128 *v0;
  _BYTE v1[104];

  outlined init with take of FMFindingState(v0, (uint64_t)v1);
  FMFindingState.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingState()
{
  __int128 *v0;
  _BYTE v2[104];

  outlined init with take of FMFindingState(v0, (uint64_t)v2);
  Hasher.init(_seed:)();
  FMFindingState.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FMFindingState@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[6];

  result = specialized FMFindingState.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of FMFindingState(v5, a2);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingState(_QWORD *a1)
{
  __int128 *v1;
  _BYTE v4[104];

  outlined init with take of FMFindingState(v1, (uint64_t)v4);
  return FMFindingState.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingState()
{
  __int128 *v0;
  _BYTE v2[104];

  outlined init with take of FMFindingState(v0, (uint64_t)v2);
  return FMFindingState.description.getter();
}

unint64_t lazy protocol witness table accessor for type FMFindingState and conformance FMFindingState()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingState and conformance FMFindingState;
  if (!lazy protocol witness table cache variable for type FMFindingState and conformance FMFindingState)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingState, &type metadata for FMFindingState);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState and conformance FMFindingState);
  }
  return result;
}

uint64_t outlined init with take of FMFindingState(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *a1;
  v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  *(_WORD *)(a2 + 96) = *((_WORD *)a1 + 48);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

BOOL specialized static FMFindingState.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  _QWORD v88[4];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  _QWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char v128;

  outlined init with take of FMFindingState(a2, (uint64_t)v88);
  v53 = v88[0];
  v55 = v88[1];
  v57 = (void *)v88[2];
  v59 = (void *)v88[3];
  outlined init with take of FMFindingState(a1, (uint64_t)v102);
  switch(v103)
  {
    case 6:
      outlined init with take of FMFindingState(a2, (uint64_t)&v62);
      return v64 == 6;
    case 7:
      outlined init with take of FMFindingState(a2, (uint64_t)&v62);
      return v64 == 7;
    case 8:
      outlined init with take of FMFindingState(a2, (uint64_t)&v62);
      return (v64 & 0xFFFFFFFFFFFFFFFELL) == 8;
    case 9:
      return 0;
    default:
      v51 = (uint64_t)a1;
      v52 = v103;
      v41 = v102[0];
      v42 = v102[1];
      v43 = v104;
      v44 = v105;
      v3 = v106;
      v4 = v107;
      v5 = v108;
      v6 = v109;
      v7 = v110;
      v8 = v111;
      v9 = v112;
      v10 = v113;
      v11 = v114;
      outlined init with take of FMFindingState(a2, (uint64_t)&v89);
      v12 = v91;
      if ((unint64_t)(v91 - 6) < 4)
        return 0;
      break;
  }
  v13 = v52;
  switch(v52)
  {
    case 2:
      v14 = v91 == 2;
      goto LABEL_13;
    case 3:
      v14 = v91 == 3;
      goto LABEL_13;
    case 4:
      v14 = v91 == 4;
      goto LABEL_13;
    case 5:
      v14 = v91 == 5;
LABEL_13:
      if (!v14)
      {
        v18 = v51;
        goto LABEL_17;
      }
      outlined copy of FMFindingMeasurement(v53, v55, v57, v59);
      v16 = v51;
      goto LABEL_16;
    default:
      if ((unint64_t)(v91 - 2) < 4)
        return 0;
      v40 = v6;
      v20 = v89;
      v21 = v90;
      v22 = v92;
      v23 = v93;
      v24 = v94;
      v25 = v95;
      v26 = v96;
      v27 = v97;
      v28 = v98;
      v29 = v99;
      v30 = v100;
      v31 = v101;
      if (v52 == 1)
      {
        if (v91 == 1)
        {
          outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
          v16 = v51;
          outlined retain of FMFindingState(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
LABEL_16:
          specialized == infix<A>(_:_:)(v11);
          v15 = v17;
          outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
          outlined retain of FMFindingState(v16, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
          return v15;
        }
        goto LABEL_26;
      }
      if (v91 == 1)
      {
        v48 = v93;
        v49 = v94;
        v32 = v53;
        v33 = v55;
        v46 = v90;
        v47 = v92;
        v34 = v57;
        v35 = v59;
        v45 = v89;
        v36 = v101;
        v58 = v98;
        v60 = v5;
        v37 = v97;
        v54 = v95;
        v56 = v4;
        v38 = v100;
        v50 = v3;
        v39 = v99;
        outlined copy of FMFindingMeasurement(v32, v33, v34, v35);
        v20 = v45;
        v21 = v46;
        v22 = v47;
        v23 = v48;
        v24 = v49;
        v13 = v52;
        v25 = v54;
        v29 = v39;
        v3 = v50;
        v30 = v38;
        v4 = v56;
        v28 = v58;
        v27 = v37;
        v5 = v60;
        v31 = v36;
LABEL_26:
        v62 = v41;
        v63 = v42;
        v64 = v13;
        v65 = v43;
        v66 = v44;
        v67 = v3;
        v68 = v4;
        v69 = v5;
        v70 = v40;
        v71 = v7;
        v72 = v8;
        v73 = v9;
        v74 = v10;
        v75 = v20;
        v76 = v21;
        v77 = v12;
        v78 = v22;
        v79 = v23;
        v80 = v24;
        v81 = v25;
        v82 = v26;
        v83 = v27;
        v84 = v28;
        v85 = v29;
        v86 = v30;
        v87 = v31;
        outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
        outlined retain of FMFindingState(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
        outlined release of (FMFindingDistance?, FMFindingDistance?)((uint64_t)&v62);
        return 0;
      }
      v115 = v41;
      v116 = v42 & 1;
      v117 = v52;
      v118 = v43;
      v119 = v44;
      v120 = v3 & 1;
      v121 = v4;
      v122 = v5 & 0x101;
      v123 = v40;
      v124 = v7 & 0x101;
      v125 = BYTE2(v7) & 1;
      v126 = v8;
      v127 = v9;
      v128 = v10 & 1;
      v62 = v89;
      LOBYTE(v63) = v90 & 1;
      v64 = v91;
      v65 = v92;
      v66 = v93;
      LOBYTE(v67) = v94 & 1;
      v68 = v95;
      LOWORD(v69) = v96 & 0x101;
      v70 = v97;
      LOWORD(v71) = v98 & 0x101;
      BYTE2(v71) = BYTE2(v98) & 1;
      v72 = v99;
      v73 = v100;
      v74 = v101 & 1;
      outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
      v16 = v51;
      outlined retain of FMFindingState(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
      if (specialized static FMFindingDistance.== infix(_:_:)((uint64_t)&v115, (uint64_t)&v62))
        goto LABEL_16;
      outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      v18 = v51;
LABEL_17:
      outlined retain of FMFindingState(v18, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      return 0;
  }
}

uint64_t outlined copy of FMFindingState(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 6 >= (char *)4)
    return outlined copy of FMFindingMeasurement(a1, a2, a3, a4);
  return a1;
}

uint64_t outlined copy of FMFindingMeasurement(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 2 >= (char *)4)
    return (uint64_t)outlined copy of FMFindingDistance?(a1, a2, a3, a4);
  return a1;
}

id outlined copy of FMFindingDistance?(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v4;
  id result;

  if (a3 != (void *)1)
  {
    v4 = a4;
    return a3;
  }
  return result;
}

uint64_t outlined release of (FMFindingDistance?, FMFindingDistance?)(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v5;
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 104);
  v2 = *(void **)(a1 + 120);
  v5 = *(_QWORD *)(a1 + 112);
  v3 = *(void **)(a1 + 128);
  outlined consume of FMFindingDistance?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24));
  outlined consume of FMFindingDistance?(v6, v5, v2, v3);
  return a1;
}

void outlined consume of FMFindingDistance?(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 != (void *)1)
  {

  }
}

uint64_t outlined retain of FMFindingState(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))
{
  __int16 v4;

  v4 = *(_WORD *)(a1 + 96);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v4);
  return a1;
}

void outlined consume of FMFindingState(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 6 >= (char *)4)
    outlined consume of FMFindingMeasurement(a1, a2, a3, a4);
}

void outlined consume of FMFindingMeasurement(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if ((char *)a3 - 2 >= (char *)4)
    outlined consume of FMFindingDistance?(a1, a2, a3, a4);
}

unint64_t specialized FMFindingState.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingState.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t specialized FMFindingState.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  int v42;
  char v43;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FMFindingState.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v29) = 0;
  switch(KeyedDecodingContainer.decode(_:forKey:)())
  {
    case 1:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 6;
      goto LABEL_10;
    case 2:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 7;
      goto LABEL_10;
    case 3:
      v43 = 1;
      lazy protocol witness table accessor for type FMFindingMeasurement and conformance FMFindingMeasurement();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v21 = v29;
      v15 = v31;
      v20 = v30;
      v19 = v32;
      v27 = v34;
      v28 = v33;
      v25 = v36;
      v26 = v35;
      v23 = v38;
      v24 = v37;
      v13 = v40;
      v22 = v39;
      v42 = v41;
      v43 = 2;
      lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v14 = v42 | (v29 << 8);
      v10 = v21;
      v11 = v20;
      v12 = v19;
      goto LABEL_10;
    case 4:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 8;
      goto LABEL_10;
    case 5:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v27 = 0;
      v28 = 0;
      v25 = 0;
      v26 = 0;
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 9;
LABEL_10:
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = v11;
      *(_QWORD *)(a2 + 16) = v15;
      *(_QWORD *)(a2 + 24) = v12;
      v16 = v27;
      *(_QWORD *)(a2 + 32) = v28;
      *(_QWORD *)(a2 + 40) = v16;
      v17 = v25;
      *(_QWORD *)(a2 + 48) = v26;
      *(_QWORD *)(a2 + 56) = v17;
      v18 = v23;
      *(_QWORD *)(a2 + 64) = v24;
      *(_QWORD *)(a2 + 72) = v18;
      *(_QWORD *)(a2 + 80) = v22;
      *(_QWORD *)(a2 + 88) = v13;
      *(_WORD *)(a2 + 96) = v14;
      break;
    default:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingState.CodingKeys, &unk_24DE2E250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingState.CodingKeys, &unk_24DE2E250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingState.CodingKeys, &unk_24DE2E250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingState.CodingKeys, &unk_24DE2E250);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingState.CodingKeys and conformance FMFindingState.CodingKeys);
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

unint64_t lazy protocol witness table accessor for type FMFindingMeasurement and conformance FMFindingMeasurement()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement, &type metadata for FMFindingMeasurement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement, &type metadata for FMFindingMeasurement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement, &type metadata for FMFindingMeasurement);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement and conformance FMFindingMeasurement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingTrend, &type metadata for FMFindingTrend);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingTrend, &type metadata for FMFindingTrend);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingTrend, &type metadata for FMFindingTrend);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend;
  if (!lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingTrend, &type metadata for FMFindingTrend);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTrend and conformance FMFindingTrend);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x22075D454](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingState.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingState.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21B0ACC50 + 4 * byte_21B0F821B[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21B0ACC84 + 4 * byte_21B0F8216[v4]))();
}

uint64_t sub_21B0ACC84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0ACC8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0ACC94);
  return result;
}

uint64_t sub_21B0ACCA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0ACCA8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21B0ACCAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0ACCB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for FMFindingState.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for FMFindingState.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for FMFindingState.CodingKeys()
{
  return &unk_24DE2E250;
}

void destroy for FMFindingDistance(uint64_t a1)
{

}

uint64_t initializeWithCopy for FMFindingDistance(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  id v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(void **)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
  v5 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v6 = v3;
  v7 = v4;
  return a1;
}

uint64_t assignWithCopy for FMFindingDistance(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = *(void **)(a1 + 16);
  v6 = (void *)a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  v7 = v6;

  v8 = *(void **)(a1 + 24);
  v9 = (void *)a2[3];
  *(_QWORD *)(a1 + 24) = v9;
  v10 = v9;

  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
  *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
  *(_QWORD *)(a1 + 80) = a2[10];
  v11 = a2[11];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 88) = v11;
  return a1;
}

__n128 __swift_memcpy97_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for FMFindingDistance(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingDistance(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingDistance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingDistance()
{
  return &type metadata for FMFindingDistance;
}

uint64_t FMFindingDistance.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21B0AD128 + 4 * byte_21B0F8470[a1]))(0x736944746E616C73, 0xED000065636E6174);
}

uint64_t sub_21B0AD128()
{
  return 0x676E6972616562;
}

uint64_t sub_21B0AD140()
{
  return 0x4264696C61567369;
}

uint64_t sub_21B0AD164()
{
  return 0x616542564F466E69;
}

uint64_t sub_21B0AD184()
{
  return 0x564F466E497369;
}

uint64_t sub_21B0AD19C()
{
  return 0x636165526E497369;
}

unint64_t sub_21B0AD1B8()
{
  return 0xD000000000000012;
}

unint64_t sub_21B0AD1F8()
{
  return 0xD000000000000010;
}

uint64_t sub_21B0AD218()
{
  return 0x776F6C65427369;
}

uint64_t FMFindingDistance.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_21B0AD270 + 4 * byte_21B0F847B[a1]))(0x736944746E616C73, 0xED000065636E6174);
}

uint64_t sub_21B0AD270()
{
  return 0x676E6972616562;
}

uint64_t sub_21B0AD288()
{
  return 0x4264696C61567369;
}

uint64_t sub_21B0AD2AC()
{
  return 0x616542564F466E69;
}

uint64_t sub_21B0AD2CC()
{
  return 0x564F466E497369;
}

uint64_t sub_21B0AD2E4()
{
  return 0x636165526E497369;
}

unint64_t sub_21B0AD300()
{
  return 0xD000000000000012;
}

unint64_t sub_21B0AD340()
{
  return 0xD000000000000010;
}

uint64_t sub_21B0AD360()
{
  return 0x776F6C65427369;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingDistance.CodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = FMFindingDistance.CodingKeys.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == FMFindingDistance.CodingKeys.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingDistance.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  FMFindingDistance.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingDistance.CodingKeys()
{
  unsigned __int8 *v0;

  FMFindingDistance.CodingKeys.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingDistance.CodingKeys()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  FMFindingDistance.CodingKeys.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingDistance.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FMFindingDistance.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingDistance.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = FMFindingDistance.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FMFindingDistance.CodingKeys()
{
  unsigned __int8 *v0;

  return FMFindingDistance.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance FMFindingDistance.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FMFindingDistance.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FMFindingDistance.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingDistance.CodingKeys()
{
  lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FMFindingDistance.CodingKeys()
{
  lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FMFindingDistance.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[16];
  char v11[16];
  _BYTE v12[16];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FMFindingDistance.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of Double?(v3, (uint64_t)v12);
  outlined init with take of Double?((uint64_t)v12, (uint64_t)v11);
  v10[15] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  lazy protocol witness table accessor for type Double? and conformance <A> A?();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    v11[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[0] = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t FMFindingDistance.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  double v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v1 = swift_allocObject();
  v2 = (_QWORD *)v1;
  *(_OWORD *)(v1 + 16) = xmmword_21B0F86E0;
  v3 = *(double *)v0;
  v4 = *(unsigned __int8 *)(v0 + 8);
  v5 = MEMORY[0x24BEE1448];
  *(_QWORD *)(v1 + 56) = MEMORY[0x24BEE13C8];
  *(_QWORD *)(v1 + 64) = v5;
  if (v4)
    v3 = -1.0;
  *(double *)(v1 + 32) = v3;
  if ((*(_BYTE *)(v0 + 40) & 1) != 0)
  {
    v6 = *(_QWORD *)(v0 + 32);
    v7 = MEMORY[0x24BEE1448];
    v8 = MEMORY[0x24BEE13C8];
  }
  else
  {
    v6 = -1;
    v7 = MEMORY[0x24BEE17F0];
    v8 = MEMORY[0x24BEE1768];
  }
  *(_QWORD *)(v1 + 96) = v8;
  *(_QWORD *)(v1 + 104) = v7;
  *(_QWORD *)(v1 + 72) = v6;
  v9 = *(_BYTE *)(v0 + 56);
  v10 = lazy protocol witness table accessor for type String and conformance String();
  v11 = 1702195828;
  if ((v9 & 1) != 0)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if ((v9 & 1) != 0)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = MEMORY[0x24BEE0D00];
  v2[17] = MEMORY[0x24BEE0D00];
  v2[18] = v10;
  v2[14] = v12;
  v2[15] = v13;
  if ((*(_BYTE *)(v0 + 57) & 1) != 0)
  {
    v15 = 0xE400000000000000;
  }
  else
  {
    v11 = 0x65736C6166;
    v15 = 0xE500000000000000;
  }
  v2[22] = v14;
  v2[23] = v10;
  v2[19] = v11;
  v2[20] = v15;
  return String.init(format:_:)();
}

void FMFindingDistance.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  Swift::UInt64 v9;
  Swift::UInt64 v10;
  Swift::UInt64 v11;
  Swift::UInt v12;

  v1 = v0;
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    v2 = *(void **)(v0 + 16);
    if (v2)
      goto LABEL_3;
LABEL_9:
    Hasher._combine(_:)(0);
    v4 = *(void **)(v0 + 24);
    if (v4)
      goto LABEL_4;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)v0;
  Hasher._combine(_:)(1u);
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = v6;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
  v2 = *(void **)(v0 + 16);
  if (!v2)
    goto LABEL_9;
LABEL_3:
  Hasher._combine(_:)(1u);
  v3 = v2;
  NSObject.hash(into:)();

  v4 = *(void **)(v1 + 24);
  if (v4)
  {
LABEL_4:
    Hasher._combine(_:)(1u);
    v5 = v4;
    NSObject.hash(into:)();

    goto LABEL_11;
  }
LABEL_10:
  Hasher._combine(_:)(0);
LABEL_11:
  if ((*(_QWORD *)(v1 + 32) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v8 = *(_QWORD *)(v1 + 32);
  else
    v8 = 0;
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 40) & 1);
  if ((*(_QWORD *)(v1 + 48) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v9 = *(_QWORD *)(v1 + 48);
  else
    v9 = 0;
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 56) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 57) & 1);
  if ((*(_QWORD *)(v1 + 64) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v10 = *(_QWORD *)(v1 + 64);
  else
    v10 = 0;
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 72) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 73) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v1 + 74) & 1);
  if ((*(_QWORD *)(v1 + 80) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v11 = *(_QWORD *)(v1 + 80);
  else
    v11 = 0;
  Hasher._combine(_:)(v11);
  if (*(_BYTE *)(v1 + 96) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 88);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingDistance(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  char v12;
  _OWORD v13[6];
  char v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_BYTE *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return specialized static FMFindingDistance.== infix(_:_:)((uint64_t)v11, (uint64_t)v13);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingDistance()
{
  Hasher.init(_seed:)();
  FMFindingDistance.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingDistance()
{
  Hasher.init(_seed:)();
  FMFindingDistance.hash(into:)();
  return Hasher._finalize()();
}

__n128 protocol witness for Decodable.init(from:) in conformance FMFindingDistance@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  char v8;

  specialized FMFindingDistance.init(from:)(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_BYTE *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingDistance(_QWORD *a1)
{
  return FMFindingDistance.encode(to:)(a1);
}

unint64_t lazy protocol witness table accessor for type FMFindingDistance and conformance FMFindingDistance()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance;
  if (!lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance, &type metadata for FMFindingDistance);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance;
  if (!lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance, &type metadata for FMFindingDistance);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance;
  if (!lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance, &type metadata for FMFindingDistance);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance and conformance FMFindingDistance);
  }
  return result;
}

BOOL specialized static FMFindingDistance.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  char v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  char v14;
  char v15;

  v4 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  v5 = *(void **)(a1 + 16);
  v6 = *(void **)(a2 + 16);
  if (v5)
  {
    if (!v6)
      return 0;
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for PRTargetEstimate);
    v7 = v6;
    v8 = v5;
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
      return 0;
  }
  else if (v6)
  {
    return 0;
  }
  v10 = *(void **)(a1 + 24);
  v11 = *(void **)(a2 + 24);
  if (v10)
  {
    if (!v11)
      return 0;
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for PRPose);
    v12 = v11;
    v13 = v10;
    v14 = static NSObject.== infix(_:_:)();

    if ((v14 & 1) == 0)
      return 0;
  }
  else if (v11)
  {
    return 0;
  }
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32)
    || ((*(unsigned __int8 *)(a1 + 40) ^ *(unsigned __int8 *)(a2 + 40)) & 1) != 0
    || *(double *)(a1 + 48) != *(double *)(a2 + 48)
    || ((*(unsigned __int8 *)(a1 + 56) ^ *(unsigned __int8 *)(a2 + 56)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 57) ^ *(unsigned __int8 *)(a2 + 57)) & 1) != 0
    || *(double *)(a1 + 64) != *(double *)(a2 + 64)
    || ((*(unsigned __int8 *)(a1 + 72) ^ *(unsigned __int8 *)(a2 + 72)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 73) ^ *(unsigned __int8 *)(a2 + 73)) & 1) != 0
    || ((*(unsigned __int8 *)(a1 + 74) ^ *(unsigned __int8 *)(a2 + 74)) & 1) != 0
    || *(double *)(a1 + 80) != *(double *)(a2 + 80))
  {
    return 0;
  }
  v15 = *(_BYTE *)(a2 + 96);
  if ((*(_BYTE *)(a1 + 96) & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 88) != *(_QWORD *)(a2 + 88))
      v15 = 1;
    return (v15 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 96) & 1) != 0;
}

unint64_t specialized FMFindingDistance.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingDistance.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

uint64_t specialized FMFindingDistance.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t result;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FMFindingDistance.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v40 = 0;
  KeyedDecodingContainer.decode(_:forKey:)();
  v10 = v9;
  v39 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  v12 = v11;
  v38 = 2;
  v13 = KeyedDecodingContainer.decode(_:forKey:)();
  v37 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  v15 = v14;
  v36 = 4;
  v29 = KeyedDecodingContainer.decode(_:forKey:)();
  v35 = 5;
  v28 = KeyedDecodingContainer.decode(_:forKey:)();
  v34 = 6;
  KeyedDecodingContainer.decode(_:forKey:)();
  v17 = v16;
  v33 = 7;
  v27 = KeyedDecodingContainer.decode(_:forKey:)();
  v32 = 8;
  v26 = KeyedDecodingContainer.decode(_:forKey:)();
  v31 = 9;
  v25 = KeyedDecodingContainer.decode(_:forKey:)();
  v30 = 10;
  KeyedDecodingContainer.decode(_:forKey:)();
  v19 = v18;
  v24 = v13 & 1;
  v28 &= 1u;
  v29 &= 1u;
  v27 &= 1u;
  v20 = v26 & 1;
  v21 = v25 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = v12;
  *(_BYTE *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v15;
  *(_BYTE *)(a2 + 56) = v29;
  *(_BYTE *)(a2 + 57) = v28;
  *(_QWORD *)(a2 + 64) = v17;
  *(_BYTE *)(a2 + 72) = v27;
  *(_BYTE *)(a2 + 73) = v20;
  *(_BYTE *)(a2 + 74) = v21;
  *(_QWORD *)(a2 + 80) = v19;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 1;
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance.CodingKeys, &unk_24DE2E460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance.CodingKeys, &unk_24DE2E460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance.CodingKeys, &unk_24DE2E460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingDistance.CodingKeys, &unk_24DE2E460);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance.CodingKeys and conformance FMFindingDistance.CodingKeys);
  }
  return result;
}

uint64_t outlined init with take of Double?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Double? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = lazy protocol witness table cache variable for type Double? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type Double? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Double?);
    v2 = MEMORY[0x24BEE13D8];
    result = MEMORY[0x22075D454](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Double? and conformance <A> A?);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x22075D448](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingDistance.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingDistance.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_21B0AE4B8 + 4 * byte_21B0F848B[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_21B0AE4EC + 4 * byte_21B0F8486[v4]))();
}

uint64_t sub_21B0AE4EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0AE4F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0AE4FCLL);
  return result;
}

uint64_t sub_21B0AE508(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0AE510);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_21B0AE514(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0AE51C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for FMFindingDistance.CodingKeys()
{
  return &unk_24DE2E460;
}

void __swiftcall FLSimpleSpring.step(deltaTime:)(TVRemoteUI::FLSimpleSpring *__return_ptr retstr, Swift::Double deltaTime)
{
  double *v2;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  Swift::Double v19;
  Swift::Double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  __double2 v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  long double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;

  v5 = *v2;
  v6 = v2[1];
  v8 = v2[5];
  v7 = v2[6];
  if (vabdd_f64(*v2, v8) <= v7)
  {
    v12 = v2[7];
    v11 = v2[8];
    v10 = v2[3];
    v9 = v2[4];
    if (fabs(v6) <= v12)
    {
      v18 = v2[12];
      v17 = v2[13];
      v14 = v2[10];
      v15 = v2[11];
      v19 = v2[9];
      v20 = v2[2];
      goto LABEL_16;
    }
  }
  else
  {
    v10 = v2[3];
    v9 = v2[4];
    v11 = v2[8];
  }
  v13 = v5 - v8;
  v37 = v10;
  v38 = v9;
  if (v10 == v11 && v9 == v2[9])
  {
    v14 = v2[10];
    v15 = v2[11];
    v35 = v2[12];
    v16 = v2[13];
  }
  else
  {
    v14 = v9 * 0.5;
    v15 = sqrt(v10);
    v35 = sqrt(v15 * v15 - v14 * v14);
    v16 = sqrt(v14 * v14 - v15 * v15);
  }
  v36 = v16;
  v21 = -v14;
  v22 = exp(-(v14 * deltaTime));
  v23 = v6 + v13 * v14;
  if (v14 >= v15)
  {
    if (v15 >= v14)
    {
      v27 = v13 + v23 * deltaTime;
      v29 = v22 * v23;
      v28 = v22 * v21 * v27;
      v10 = v37;
      v9 = v38;
      v17 = v36;
    }
    else
    {
      v30 = v36 * deltaTime;
      v34 = v23 / v36;
      v33 = cosh(v30);
      v31 = v30;
      v17 = v36;
      v32 = sinh(v31);
      v27 = v13 * v33 + v34 * v32;
      v28 = v22 * (v17 * (v34 * v33) + v17 * (v13 * v32));
      v29 = v22 * v21 * v27;
      v10 = v37;
      v9 = v38;
    }
    v18 = v35;
  }
  else
  {
    v24 = v35 * deltaTime;
    v25 = v23 / v35;
    v26 = __sincos_stret(v24);
    v27 = v13 * v26.__cosval + v25 * v26.__sinval;
    v18 = v35;
    v28 = v22 * (v18 * (v25 * v26.__cosval) - v18 * (v13 * v26.__sinval));
    v29 = v22 * v21 * v27;
    v10 = v37;
    v9 = v38;
    v17 = v36;
  }
  v6 = v29 + v28;
  v5 = v8 + v22 * v27;
  v7 = 0.0;
  v20 = 1.0;
  v12 = 0.0;
  v11 = v10;
  v19 = v9;
LABEL_16:
  retstr->state.position = v5;
  retstr->state.velocity = v6;
  retstr->mass = v20;
  retstr->stiffness = v10;
  retstr->damping = v9;
  retstr->anchor = v8;
  retstr->stablePositionThreshold = v7;
  retstr->stableVelocityThreshold = v12;
  retstr->_previousStiffness = v11;
  retstr->_previousDamping = v19;
  retstr->_beta = v14;
  retstr->_omega0 = v15;
  retstr->_omega1 = v18;
  retstr->_omega2 = v17;
}

Swift::Bool __swiftcall FLCompoundSpring.isStable()()
{
  double *v0;
  double v1;
  double v3;
  double v5;

  v1 = v0[30];
  if (vabdd_f64(*v0, v1) > v0[44])
    return 0;
  if (fabs(v0[1]) > v0[45])
    return 0;
  v3 = fabs(v0[31]);
  if (vabdd_f64(v1, v0[35]) > v0[36] || v3 > v0[37])
    return 0;
  v5 = fabs(v0[3]);
  if (vabdd_f64(v0[2], v0[7]) > v0[8] || v5 > v0[9])
    return 0;
  if (vabdd_f64(v0[16], v0[21]) <= v0[22])
    return fabs(v0[17]) <= v0[23];
  return 0;
}

uint64_t FLSpring.parameters.didset(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t result;

  v5 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v6 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v7 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v8 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  if (v5 != a1 || v6 != a2 || v7 != a3 || v8 != a4)
  {
    v12 = v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
    swift_beginAccess();
    if (v6 == 0.0)
    {
      *(double *)(v12 + 16) = v5;
      *(_QWORD *)(v12 + 24) = 0;
    }
    else
    {
      v13 = 6.28318531 / v6 * (6.28318531 / v6);
      v14 = sqrt(v13);
      *(double *)(v12 + 40) = v13;
      *(double *)(v12 + 48) = v14 + v14;
    }
    *(double *)(v12 + 56) = v5;
    if (v8 == 0.0)
    {
      *(double *)(v12 + 128) = v7;
      *(_QWORD *)(v12 + 136) = 0;
    }
    else
    {
      v15 = 6.28318531 / v8 * (6.28318531 / v8);
      v16 = sqrt(v15);
      *(double *)(v12 + 152) = v15;
      *(double *)(v12 + 160) = v16 + v16;
    }
    *(double *)(v12 + 168) = v7;
    return swift_endAccess();
  }
  return result;
}

Swift::Void __swiftcall FLSpring.resetImmediately(toValue:)(Swift::Double toValue)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v5 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  *(Swift::Double *)v5 = toValue;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = v3;
  *(_OWORD *)(v5 + 24) = xmmword_21B0F86F0;
  *(_OWORD *)(v5 + 40) = xmmword_21B0F8700;
  *(_QWORD *)(v5 + 56) = v3;
  v6 = vdupq_n_s64(0x4341C37937E08000uLL);
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(int64x2_t *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_QWORD *)(v5 + 128) = v4;
  *(_OWORD *)(v5 + 136) = xmmword_21B0F86F0;
  *(_OWORD *)(v5 + 152) = xmmword_21B0F8700;
  *(_QWORD *)(v5 + 168) = v4;
  *(_QWORD *)(v5 + 176) = 0;
  *(_QWORD *)(v5 + 184) = 0;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(int64x2_t *)(v5 + 192) = v6;
  *(Swift::Double *)(v5 + 240) = toValue;
  *(_OWORD *)(v5 + 248) = xmmword_21B0F86F0;
  *(_QWORD *)(v5 + 264) = 0x4063BD3CC9BE45DELL;
  *(_QWORD *)(v5 + 272) = 0x403921FB54442D18;
  *(Swift::Double *)(v5 + 280) = toValue;
  *(_QWORD *)(v5 + 288) = 0;
  *(_QWORD *)(v5 + 296) = 0;
  *(_OWORD *)(v5 + 320) = 0u;
  *(_OWORD *)(v5 + 336) = 0u;
  *(int64x2_t *)(v5 + 304) = v6;
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
  *(_QWORD *)(v5 + 352) = v7;
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
  *(_QWORD *)(v5 + 360) = v8;
  v9 = 6.28318531
     / *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
     * (6.28318531
      / *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
  v10 = sqrt(v9);
  v11 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v10 + v10);
  v12 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = 0x3FF0000000000000;
  *(double *)(v12 + 24) = v9;
  *(double *)(v12 + 32) = v11;
  *(_QWORD *)(v12 + 40) = 0;
  *(int64x2_t *)(v12 + 64) = v6;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_QWORD *)(v12 + 48) = v7;
  *(_QWORD *)(v12 + 56) = v8;
  *(Swift::Double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = toValue;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
}

Swift::Void __swiftcall FLSpring.step(_:)(Swift::Double a1)
{
  uint64_t v1;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  Swift::Double v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Double v15;
  Swift::Double v16;
  double v17;
  Swift::Double position;
  Swift::Double velocity;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  TVRemoteUI::FLSimpleSpringState v27;
  double v28;
  uint64_t v29;
  __int128 v30;
  Swift::Double v31;
  Swift::Double v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  TVRemoteUI::FLSimpleSpringState v38;
  __int128 v39;
  Swift::Double omega2;
  Swift::Double omega1;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  TVRemoteUI::FLSimpleSpringState state;
  TVRemoteUI::FLSimpleSpring v48;
  TVRemoteUI::FLSimpleSpring v49;
  TVRemoteUI::FLSimpleSpring v50;
  TVRemoteUI::FLSimpleSpring v51;
  TVRemoteUI::FLSimpleSpring v52;
  Swift::Double v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int64x2_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  double v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;

  v3 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  v4 = *(double *)(v3 + 280);
  v5 = v4 - *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget);
  *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = v4;
  *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = v5 / a1 * 0.25
                                                                          + *(double *)(v1
                                                                                      + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity)
                                                                          * 0.75;
  v28 = *(double *)(v3 + 16);
  v6 = *(double *)(v3 + 128);
  v8 = *(double *)v3;
  v7 = *(_QWORD *)(v3 + 8);
  v9 = *(_QWORD *)(v3 + 272);
  v10 = *(_OWORD *)(v3 + 256);
  v64 = *(_OWORD *)(v3 + 240);
  v29 = v64;
  v65 = v10;
  v66 = v9;
  v67 = v4;
  v11 = *(_OWORD *)(v3 + 304);
  v68 = *(_OWORD *)(v3 + 288);
  v69 = v11;
  v12 = *(_OWORD *)(v3 + 336);
  v70 = *(_OWORD *)(v3 + 320);
  v71 = v12;
  v13 = *(_QWORD *)(v3 + 352);
  v14 = *(_QWORD *)(v3 + 360);
  FLSimpleSpring.step(deltaTime:)(&v48, a1);
  v46 = *(_OWORD *)&v48.mass;
  state = v48.state;
  v44 = *(_OWORD *)&v48.stablePositionThreshold;
  v45 = *(_OWORD *)&v48.damping;
  v42 = *(_OWORD *)&v48._beta;
  v43 = *(_OWORD *)&v48._previousStiffness;
  omega2 = v48._omega2;
  omega1 = v48._omega1;
  FLSimpleSpring.step(deltaTime:)(&v49, a1);
  v37 = *(_OWORD *)&v49.mass;
  v38 = v49.state;
  v35 = *(_OWORD *)&v49.stablePositionThreshold;
  v36 = *(_OWORD *)&v49.damping;
  v33 = *(_OWORD *)&v49._beta;
  v34 = *(_OWORD *)&v49._previousStiffness;
  v31 = v49._omega2;
  v32 = v49._omega1;
  FLSimpleSpring.step(deltaTime:)(&v50, a1);
  v26 = *(_OWORD *)&v50.mass;
  v27 = v50.state;
  v24 = *(_OWORD *)&v50.stablePositionThreshold;
  v25 = *(_OWORD *)&v50.damping;
  v39 = *(_OWORD *)&v50._previousStiffness;
  v30 = *(_OWORD *)&v50._beta;
  v15 = v50._omega1;
  v16 = v50._omega2;
  v17 = sqrt(6.28318531 / v6 * (6.28318531 / v6));
  v53 = v8;
  v54 = v7;
  v55 = 0x3FF0000000000000;
  v56 = 6.28318531 / v6 * (6.28318531 / v6);
  v57 = v28 * (v17 + v17);
  v58 = v29;
  v59 = v13;
  v60 = v14;
  v61 = vdupq_n_s64(0x4341C37937E08000uLL);
  v62 = 0u;
  v63 = 0u;
  FLSimpleSpring.step(deltaTime:)(&v51, a1);
  position = v51.state.position;
  velocity = v51.state.velocity;
  swift_beginAccess();
  *(Swift::Double *)v3 = position;
  *(Swift::Double *)(v3 + 8) = velocity;
  *(TVRemoteUI::FLSimpleSpringState *)(v3 + 16) = state;
  *(_OWORD *)(v3 + 32) = v46;
  *(_OWORD *)(v3 + 48) = v45;
  *(_OWORD *)(v3 + 64) = v44;
  *(_OWORD *)(v3 + 80) = v43;
  *(_OWORD *)(v3 + 96) = v42;
  *(Swift::Double *)(v3 + 112) = omega1;
  *(Swift::Double *)(v3 + 120) = omega2;
  *(TVRemoteUI::FLSimpleSpringState *)(v3 + 128) = v38;
  *(_OWORD *)(v3 + 144) = v37;
  *(_OWORD *)(v3 + 160) = v36;
  *(_OWORD *)(v3 + 176) = v35;
  *(_OWORD *)(v3 + 192) = v34;
  *(_OWORD *)(v3 + 208) = v33;
  *(Swift::Double *)(v3 + 224) = v32;
  *(Swift::Double *)(v3 + 232) = v31;
  *(TVRemoteUI::FLSimpleSpringState *)(v3 + 240) = v27;
  *(_OWORD *)(v3 + 256) = v26;
  *(_OWORD *)(v3 + 272) = v25;
  *(_OWORD *)(v3 + 288) = v24;
  *(Swift::Double *)(v3 + 336) = v15;
  *(Swift::Double *)(v3 + 344) = v16;
  *(_QWORD *)(v3 + 352) = v13;
  *(_QWORD *)(v3 + 360) = v14;
  v20 = v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  *(_OWORD *)(v3 + 304) = v39;
  *(_OWORD *)(v3 + 320) = v30;
  FLSimpleSpring.step(deltaTime:)(&v52, a1);
  v21 = *(_OWORD *)&v52._beta;
  *(_OWORD *)(v20 + 64) = *(_OWORD *)&v52._previousStiffness;
  *(_OWORD *)(v20 + 80) = v21;
  *(_OWORD *)(v20 + 96) = *(_OWORD *)&v52._omega1;
  v22 = *(_OWORD *)&v52.mass;
  *(TVRemoteUI::FLSimpleSpringState *)v20 = v52.state;
  *(_OWORD *)(v20 + 16) = v22;
  v23 = *(_OWORD *)&v52.stablePositionThreshold;
  *(_OWORD *)(v20 + 32) = *(_OWORD *)&v52.damping;
  *(_OWORD *)(v20 + 48) = v23;
}

id FLSpring.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FLSpring();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FLSpring()
{
  return objc_opt_self();
}

__n128 __swift_memcpy112_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t getEnumTagSinglePayload for FLSimpleSpring(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FLSimpleSpring(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FLSimpleSpring()
{
  return &type metadata for FLSimpleSpring;
}

void *__swift_memcpy368_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t getEnumTagSinglePayload for FLCompoundSpring(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 368))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FLCompoundSpring(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 368) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FLCompoundSpring()
{
  return &type metadata for FLCompoundSpring;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for FLSpringParameters(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FLSpringParameters(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FLSpringParameters()
{
  return &type metadata for FLSpringParameters;
}

ValueMetadata *type metadata accessor for FLSimpleSpringState()
{
  return &type metadata for FLSimpleSpringState;
}

id FMR1HapticPattern.__allocating_init(events:parameters:)()
{
  objc_class *v0;
  id v1;
  Class isa;
  Class v3;
  id v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = objc_allocWithZone(v0);
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEvent);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
  v3 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8[0] = 0;
  v4 = objc_msgSend(v1, sel_initWithEvents_parameters_error_, isa, v3, v8);

  if (v4)
  {
    v5 = v8[0];
  }
  else
  {
    v6 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

id FMR1HapticPattern.init(events:parameters:)(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, SEL *a5)
{
  _BYTE *v5;
  _QWORD *v8;
  Class isa;
  Class v10;
  id v11;
  id v12;
  id v13;
  objc_super v15;
  id v16[2];

  v16[1] = *(id *)MEMORY[0x24BDAC8D0];
  v8 = &v5[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *v8 = 0;
  v8[1] = 0;
  v5[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = 2;
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEvent);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  type metadata accessor for SKConstraint(0, a3);
  v10 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16[0] = 0;
  v15.receiver = v5;
  v15.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  v11 = objc_msgSendSuper2(&v15, *a5, isa, v10, v16);

  if (v11)
  {
    v12 = v16[0];
  }
  else
  {
    v13 = v16[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v11;
}

id @objc FMR1HapticPattern.init(events:parameters:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t *a6, uint64_t a7, SEL *a8)
{
  uint64_t v11;
  uint64_t v12;

  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEvent);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  type metadata accessor for SKConstraint(0, a6);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  return FMR1HapticPattern.init(events:parameters:)(v11, v12, a6, a7, a8);
}

id FMR1HapticPattern.__allocating_init(dictionary:)()
{
  objc_class *v0;
  id v1;
  Class isa;
  id v3;
  id v4;
  id v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = objc_allocWithZone(v0);
  type metadata accessor for CHHapticPatternKey(0);
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7[0] = 0;
  v3 = objc_msgSend(v1, sel_initWithDictionary_error_, isa, v7);

  if (v3)
  {
    v4 = v7[0];
  }
  else
  {
    v5 = v7[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

id FMR1HapticPattern.init(dictionary:)()
{
  _BYTE *v0;
  _QWORD *v1;
  Class isa;
  id v3;
  id v4;
  id v5;
  objc_super v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *v1 = 0;
  v1[1] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = 2;
  type metadata accessor for CHHapticPatternKey(0);
  lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey(&lazy protocol witness table cache variable for type CHHapticPatternKey and conformance CHHapticPatternKey, (uint64_t (*)(uint64_t))type metadata accessor for CHHapticPatternKey, (uint64_t)&protocol conformance descriptor for CHHapticPatternKey);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8[0] = 0;
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  v3 = objc_msgSendSuper2(&v7, sel_initWithDictionary_error_, isa, v8);

  if (v3)
  {
    v4 = v8[0];
  }
  else
  {
    v5 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v3;
}

id FMR1HapticPattern.init(contentsOf:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _QWORD *v4;
  NSURL *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  id v12;
  id v13;
  uint64_t v14;
  objc_super v16;
  id v17[2];

  v2 = v1;
  v17[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = &v2[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *v4 = 0;
  v4[1] = 0;
  v5 = (NSURL *)OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap;
  v2[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = 2;
  URL._bridgeToObjectiveC()(v5);
  v7 = v6;
  v17[0] = 0;
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  v8 = objc_msgSendSuper2(&v16, sel_initWithContentsOfURL_error_, v7, v17);

  v9 = v17[0];
  if (v8)
  {
    v10 = type metadata accessor for URL();
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v12 = v9;
    v11(a1, v10);
  }
  else
  {
    v13 = v17[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v14 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(a1, v14);
  }
  return v8;
}

id FMR1HapticPattern.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMR1HapticPattern();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMR1HapticPattern()
{
  return objc_opt_self();
}

NSObject *FMR1HapticsController.init()()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  NSObject *v24;
  objc_super v26;

  v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticCapability;
  v2 = (void *)objc_opt_self();
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_capabilitiesForHardware);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink] = 0;
  v4 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v6 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern] = 0;
  v9 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_connectedHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_buildHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadOffHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachOffHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_preNearbyHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern] = 0;
  v10 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer] = 0;
  v11 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactor];
  *(_DWORD *)v11 = 0;
  v11[4] = 1;
  v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticRampingFactorSpring;
  *(_QWORD *)&v3[v12] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0x3FF0000000000000, 0, 0, 1, 0, 1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_restartContinuousHapticWorkItem] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_enablePlayingAheadHaptic] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem] = 0;
  v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactorLogCounter] = 0;
  v13 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastLoggedContinuousHapticFactor];
  *(_DWORD *)v13 = 0;
  v13[4] = 1;
  v14 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;

  v26.receiver = v3;
  v26.super_class = (Class)type metadata accessor for FMR1HapticsController();
  v15 = objc_msgSendSuper2(&v26, sel_init);
  v16 = one-time initialization token for findingExperience;
  v17 = v15;
  if (v16 != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.findingExperience);
  v19 = v17;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v22 = 138412290;
    v24 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v19;

    _os_log_impl(&dword_21B042000, v20, v21, "🧭 FMR1HaptiCtrl%@: init", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v23, -1, -1);
    MEMORY[0x22075D4E4](v22, -1, -1);
  }
  else
  {

    v20 = v19;
  }

  return v19;
}

id FMR1HapticsController.__deallocating_deinit()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  objc_class *v11;
  uint64_t v13;
  objc_super v14;

  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.findingExperience);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = objc_msgSend(v2, sel_description);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v3, v4, "🧭 FMR1HaptiCtrl%s: deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v6, -1, -1);
    MEMORY[0x22075D4E4](v5, -1, -1);

  }
  else
  {

  }
  v11 = (objc_class *)type metadata accessor for FMR1HapticsController();
  v14.receiver = v2;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

uint64_t FMR1HapticsController.description.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;

  v0 = _Pointer.debugDescription.getter();
  v2 = specialized BidirectionalCollection.suffix(_:)(6uLL, v0, v1);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = MEMORY[0x22075C5CC](v2, v4, v6, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 30768;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  v12 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v12;
}

id FMR1HapticsController.loadHapticPattern(named:isTap:)(uint64_t a1, unint64_t a2, char a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t ObjCClassFromMetadata;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  NSObject *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  Class isa;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD *v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  _QWORD *v48;
  id v49;
  uint64_t v50;
  id v51;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  _QWORD *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  uint64_t v76;
  id v77;
  uint64_t v78[5];

  v4 = v3;
  v78[4] = *MEMORY[0x24BDAC8D0];
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMR1HapticsController();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v14 = (void *)objc_opt_self();
  v15 = ObjCClassFromMetadata;
  v16 = a2;
  v17 = objc_msgSend(v14, sel_bundleForClass_, v15);
  v76 = a1;
  v18 = (void *)MEMORY[0x22075C584](a1, a2);
  v19 = (void *)MEMORY[0x22075C584](1885431905, 0xE400000000000000);
  v20 = -[NSObject pathForResource:ofType:](v17, sel_pathForResource_ofType_, v18, v19);

  if (!v20)
    goto LABEL_11;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  URL.init(fileURLWithPath:)();
  swift_bridgeObjectRelease();
  v21 = Data.init(contentsOf:options:)();
  v23 = v22;
  v74 = v16;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v24 = (void *)objc_opt_self();
  isa = Data._bridgeToObjectiveC()().super.isa;
  v77 = 0;
  v26 = objc_msgSend(v24, sel_JSONObjectWithData_options_error_, isa, 0, &v77);

  v27 = v77;
  if (!v26)
  {
    v41 = v27;
    v42 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_10;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [CHHapticPatternKey : Any]);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    outlined consume of Data._Representation(v21, v23);
    v16 = v74;
LABEL_11:
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.findingExperience);
    swift_bridgeObjectRetain_n();
    v44 = v4;
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc();
      v48 = (_QWORD *)swift_slowAlloc();
      v74 = swift_slowAlloc();
      v77 = v44;
      v78[0] = v74;
      *(_DWORD *)v47 = 138412546;
      v75 = v17;
      v49 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v48 = v44;

      *(_WORD *)(v47 + 12) = 2080;
      swift_bridgeObjectRetain();
      v77 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v16, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_21B042000, v45, v46, "🧭 FMR1HaptiCtrl%@: unable to load '%s' haptic pattern", (uint8_t *)v47, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v48, -1, -1);
      v50 = v74;
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v50, -1, -1);
      MEMORY[0x22075D4E4](v47, -1, -1);

      return 0;
    }

    swift_bridgeObjectRelease_n();
LABEL_16:

    return 0;
  }
  type metadata accessor for FMR1HapticPattern();
  v28 = FMR1HapticPattern.__allocating_init(dictionary:)();
  v51 = v28;
  if (!v28)
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.findingExperience);
    v30 = v74;
    swift_bridgeObjectRetain_n();
    v31 = v4;
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    v34 = v33;
    v75 = v32;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc();
      v72 = v34;
      v36 = v35;
      v71 = (_QWORD *)swift_slowAlloc();
      v73 = swift_slowAlloc();
      v77 = v31;
      v78[0] = v73;
      *(_DWORD *)v36 = 138412546;
      v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v38 = v71;
      *v71 = v31;

      *(_WORD *)(v36 + 12) = 2080;
      swift_bridgeObjectRetain();
      v77 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v30, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v39 = v75;
      _os_log_impl(&dword_21B042000, v75, (os_log_type_t)v72, "🧭 FMR1HaptiCtrl%@: unable to create '%s' haptic pattern", (uint8_t *)v36, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v38, -1, -1);
      v40 = v73;
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v40, -1, -1);
      MEMORY[0x22075D4E4](v36, -1, -1);
      outlined consume of Data._Representation(v21, v23);

    }
    else
    {
      outlined consume of Data._Representation(v21, v23);

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_16;
  }
  v75 = v17;
  v53 = v28;
  v54 = v74;
  swift_bridgeObjectRetain();
  v55 = specialized Collection.dropFirst(_:)(4uLL, v76, v54);
  swift_bridgeObjectRelease();
  v56 = Substring.index(_:offsetBy:limitedBy:)();
  if ((v57 & 1) != 0)
    v58 = v55;
  else
    v58 = v56;
  if (v58 >> 14 < v55 >> 14)
    __break(1u);
  v59 = Substring.subscript.getter();
  v61 = v60;
  v63 = v62;
  v65 = v64;
  swift_bridgeObjectRelease();
  v66 = MEMORY[0x22075C5CC](v59, v61, v63, v65);
  v68 = v67;
  swift_bridgeObjectRelease();
  v69 = (uint64_t *)&v53[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name];
  *v69 = v66;
  v69[1] = v68;
  swift_bridgeObjectRelease();
  outlined consume of Data._Representation(v21, v23);

  v53[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_isTap] = a3 & 1;
  return v51;
}

Swift::Void __swiftcall FMR1HapticsController.setUpHaptics()()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  char *v13;
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void *v18;
  uint64_t inited;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  id v29;
  id v30;
  Class isa;
  id v32;
  char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  char *v38;
  void *v39;
  id v40;
  uint64_t v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  char *v47;
  char *v48;
  void *v49;
  char *v50;
  id v51;
  char *v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  id v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  id v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  void *v80;
  id v81;
  void *v82;
  id v83;
  void *v84;
  id v85;
  void *v86;
  id v87;
  void *v88;
  id v89;
  void *v90;
  id v91;
  void *v92;
  id v93;
  void *v94;
  id v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  id v100;
  id v101;
  os_log_t log;
  char *v103;
  char *v104;
  char *aBlock;
  uint64_t v106;
  void *v107;
  void *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x24BDAC8D0];
  if ((v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup] & 1) != 0)
    return;
  v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup] = 1;
  if (objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticCapability], sel_supportsHaptics))
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.findingExperience);
    v2 = v0;
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v5 = 138412290;
      aBlock = v2;
      v7 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v6 = v2;

      _os_log_impl(&dword_21B042000, v3, v4, "🧭 FMR1HaptiCtrl%@: setting up haptic engine", v5, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v6, -1, -1);
      MEMORY[0x22075D4E4](v5, -1, -1);

    }
    else
    {

    }
    v14 = objc_msgSend((id)objc_opt_self(), sel_auxiliarySession);
    v15 = *MEMORY[0x24BDB1598];
    aBlock = 0;
    if (objc_msgSend(v14, sel_setCategory_error_, v15, &aBlock))
    {
      v16 = aBlock;
    }
    else
    {
      v17 = aBlock;
      v18 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(CHHapticEngineOptionKey, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_21B0F87A0;
    v20 = (void *)*MEMORY[0x24BDBF520];
    v21 = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 32) = *MEMORY[0x24BDBF520];
    *(_QWORD *)(inited + 40) = 0x746C7561666544;
    *(_QWORD *)(inited + 48) = 0xE700000000000000;
    v22 = (void *)*MEMORY[0x24BDBF518];
    *(_QWORD *)(inited + 64) = v21;
    *(_QWORD *)(inited + 72) = v22;
    v23 = (void *)*MEMORY[0x24BDBF5A8];
    type metadata accessor for CHHapticPowerUsage(0);
    *(_QWORD *)(inited + 104) = v24;
    *(_QWORD *)(inited + 80) = v23;
    v25 = v20;
    v26 = v22;
    v27 = v23;
    v28 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v29 = v14;
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v28);
    swift_bridgeObjectRelease();
    v30 = objc_allocWithZone(MEMORY[0x24BDBF5C0]);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    aBlock = 0;
    v32 = objc_msgSend(v30, sel_initWithAudioSession_sessionIsShared_options_error_, v29, 0, isa, &aBlock);

    v33 = aBlock;
    if (v32)
    {

      v34 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine;
      v35 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
      *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine] = v32;

      v36 = *(void **)&v2[v34];
      if (v36)
      {
        v37 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v109 = partial apply for closure #1 in FMR1HapticsController.setUpHaptics();
        v110 = v37;
        v38 = (char *)MEMORY[0x24BDAC760];
        aBlock = (char *)MEMORY[0x24BDAC760];
        v106 = 1107296256;
        v107 = thunk for @escaping @callee_guaranteed () -> ();
        v108 = &block_descriptor_14;
        v39 = _Block_copy(&aBlock);
        v40 = v36;
        swift_release();
        objc_msgSend(v40, sel_setResetHandler_, v39);
        _Block_release(v39);
        v41 = swift_allocObject();
        swift_unknownObjectWeakInit();
        v109 = partial apply for closure #2 in FMR1HapticsController.setUpHaptics();
        v110 = v41;
        aBlock = v38;
        v106 = 1107296256;
        v107 = thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ();
        v108 = &block_descriptor_18;
        v42 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v40, sel_setStoppedHandler_, v42);
        _Block_release(v42);
        objc_msgSend(v40, sel_setPlaysHapticsOnly_, 0);
        objc_msgSend(v40, sel_setIsMutedForAudio_, 0);
        objc_msgSend(v40, sel_setFollowAudioRoute_, 0);
        objc_msgSend(v40, sel_startWithCompletionHandler_, 0);
        v43 = v2;
        v44 = Logger.logObject.getter();
        v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          v46 = (uint8_t *)swift_slowAlloc();
          log = (os_log_t)swift_slowAlloc();
          *(_DWORD *)v46 = 138412290;
          aBlock = v43;
          v47 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          log->isa = (Class)v43;

          _os_log_impl(&dword_21B042000, v44, v45, "🧭 FMR1HaptiCtrl%@: started haptic engine", v46, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22075D4E4](log, -1, -1);
          MEMORY[0x22075D4E4](v46, -1, -1);

          goto LABEL_25;
        }

      }
      goto LABEL_25;
    }
    v48 = v33;
    v49 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v50 = v2;
    v51 = v49;
    v52 = v50;
    v53 = v49;
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = swift_slowAlloc();
      v57 = (_QWORD *)swift_slowAlloc();
      v104 = (char *)swift_slowAlloc();
      aBlock = v104;
      *(_DWORD *)v56 = 138412546;
      v58 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v57 = v52;

      *(_WORD *)(v56 + 12) = 2080;
      swift_getErrorValue();
      v59 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21B042000, v54, v55, "🧭 FMR1HaptiCtrl%@: failed creating haptic engine: %s", (uint8_t *)v56, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v57, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v104, -1, -1);
      MEMORY[0x22075D4E4](v56, -1, -1);

    }
    else
    {

    }
LABEL_25:
    v61 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000011, 0x800000021B0FE5F0, 1);
    v62 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern] = v61;

    v63 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000011, 0x800000021B0FE610, 1);
    v64 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern] = v63;

    v65 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000013, 0x800000021B0FE630, 1);
    v66 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern] = v65;

    v67 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x800000021B0FE650, 1);
    v68 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern] = v67;

    v69 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x800000021B0FE670, 1);
    v70 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern] = v69;

    v71 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x800000021B0FE690, 0);
    v72 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_connectedHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_connectedHapticPattern] = v71;

    v73 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000014, 0x800000021B0FE6B0, 0);
    v74 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_buildHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_buildHapticPattern] = v73;

    v75 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000016, 0x800000021B0FE6D0, 0);
    v76 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern] = v75;

    v77 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0x6165684131524D46, 0xEE00393833422D64, 1);
    v78 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern] = v77;

    v79 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x800000021B0FE6F0, 0);
    v80 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadOffHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadOffHapticPattern] = v79;

    v81 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x800000021B0FE710, 0);
    v82 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachHapticPattern] = v81;

    v83 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000016, 0x800000021B0FE730, 0);
    v84 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachOffHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_armsReachOffHapticPattern] = v83;

    v85 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000012, 0x800000021B0FE750, 0);
    v86 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_preNearbyHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_preNearbyHapticPattern] = v85;

    v87 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0x7261654E31524D46, 0xEF393833422D7962, 0);
    v88 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern] = v87;

    v89 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0x462D495353524D46, 0xEF7261654E2D7261, 0);
    v90 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern] = v89;

    v91 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000015, 0x800000021B0FE770, 0);
    v92 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern] = v91;

    v93 = FMR1HapticsController.loadHapticPattern(named:isTap:)(0xD000000000000015, 0x800000021B0FE790, 0);
    v94 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern] = v93;

    v95 = objc_msgSend((id)objc_opt_self(), sel_displayLinkWithTarget_selector_, v2, sel_hapticDisplayLinkUpdateWithDisplaylink_);
    v96 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink;
    v97 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink] = v95;

    v98 = *(void **)&v2[v96];
    if (v98)
    {
      v99 = (void *)objc_opt_self();
      v100 = v98;
      v101 = objc_msgSend(v99, sel_currentRunLoop);
      objc_msgSend(v100, sel_addToRunLoop_forMode_, v101, *MEMORY[0x24BDBCB80]);

    }
    FMR1HapticsController.setUpContinuousHapticPlayer()();
    return;
  }
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.findingExperience);
  v103 = v0;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v11 = 138412290;
    aBlock = v103;
    v13 = v103;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v12 = v103;

    _os_log_impl(&dword_21B042000, v9, v10, "🧭 FMR1HaptiCtrl%@: unsupported haptic", v11, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v12, -1, -1);
    MEMORY[0x22075D4E4](v11, -1, -1);

  }
  else
  {

  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CHHapticEngineOptionKey, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of Any?(v6, (uint64_t)&v13, &demangling cache variable for type metadata for (CHHapticEngineOptionKey, Any));
    v7 = v13;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t specialized _dictionaryUpCast<A, B, C, D>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD v35[2];
  _OWORD v36[2];
  _OWORD v37[2];
  uint64_t v38;
  _OWORD v39[2];
  uint64_t v40;

  if (*(_QWORD *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    v2 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v2 = MEMORY[0x24BEE4B00];
  }
  v27 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v8 = 0;
  while (1)
  {
    if (v5)
    {
      v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v26)
        goto LABEL_37;
      v14 = *(_QWORD *)(v27 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v26)
          goto LABEL_37;
        v14 = *(_QWORD *)(v27 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v26)
            goto LABEL_37;
          v14 = *(_QWORD *)(v27 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v12);
    outlined init with copy of Any(*(_QWORD *)(a1 + 56) + 32 * v12, (uint64_t)v39 + 8);
    *(_QWORD *)&v39[0] = v17;
    v37[0] = v39[0];
    v37[1] = v39[1];
    v38 = v40;
    *(_QWORD *)&v36[0] = v17;
    type metadata accessor for CHHapticEngineOptionKey(0);
    v18 = v17;
    swift_dynamicCast();
    outlined init with take of Any((_OWORD *)((char *)v37 + 8), v31);
    v32 = v28;
    v33 = v29;
    v34 = v30;
    outlined init with take of Any(v31, v35);
    v28 = v32;
    v29 = v33;
    v30 = v34;
    outlined init with take of Any(v35, v36);
    outlined init with take of Any(v36, &v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v19 = -1 << *(_BYTE *)(v2 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6))) != 0)
    {
      v9 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v6 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v22 = 0;
      v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v24 = v21 == v23;
        if (v21 == v23)
          v21 = 0;
        v22 |= v24;
        v25 = *(_QWORD *)(v6 + 8 * v21);
      }
      while (v25 == -1);
      v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(_QWORD *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = *(_QWORD *)(v2 + 48) + 40 * v9;
    *(_OWORD *)v10 = v28;
    *(_OWORD *)(v10 + 16) = v29;
    *(_QWORD *)(v10 + 32) = v30;
    result = (uint64_t)outlined init with take of Any(&v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v9));
    ++*(_QWORD *)(v2 + 16);
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_37:
    swift_release();
    outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
    return v2;
  }
  v14 = *(_QWORD *)(v27 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v26)
      goto LABEL_37;
    v14 = *(_QWORD *)(v27 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

void closure #1 in FMR1HapticsController.setUpHaptics()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  id v28[5];

  v28[4] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x22075D574](v1);
  if (!v2)
    return;
  v3 = (void *)v2;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine);
  if (!v4)
    goto LABEL_5;
  v28[0] = 0;
  if (objc_msgSend(v4, sel_startAndReturnError_, v28))
  {
    v5 = v28[0];
LABEL_5:
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.findingExperience);
    v7 = v3;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v10 = 138412290;
      v28[0] = v7;
      v12 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v11 = v3;

      _os_log_impl(&dword_21B042000, v8, v9, "🧭 FMR1HaptiCtrl%@: restarted haptic engine", v10, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v11, -1, -1);
      MEMORY[0x22075D4E4](v10, -1, -1);

    }
    else
    {

    }
    return;
  }
  v13 = v28[0];
  v14 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.findingExperience);
  v16 = v3;
  v17 = v14;
  v18 = v16;
  v19 = v14;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc();
    v23 = (_QWORD *)swift_slowAlloc();
    v27 = (void *)swift_slowAlloc();
    v28[0] = v27;
    *(_DWORD *)v22 = 138412546;
    v24 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v23 = v3;

    *(_WORD *)(v22 + 12) = 2080;
    swift_getErrorValue();
    v25 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21B042000, v20, v21, "🧭 FMR1HaptiCtrl%@: failed restarting haptic engine: %s", (uint8_t *)v22, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v23, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v27, -1, -1);
    MEMORY[0x22075D4E4](v22, -1, -1);

  }
  else
  {

  }
}

void closure #2 in FMR1HapticsController.setUpHaptics()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = a2 + 16;
  swift_beginAccess();
  v3 = MEMORY[0x22075D574](v2);
  if (v3)
  {
    v4 = (void *)v3;
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.findingExperience);
    v6 = v4;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc();
      v10 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v9 = 138412546;
      v6 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v10 = v4;

      *(_WORD *)(v9 + 12) = 2048;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B042000, v7, v8, "🧭 FMR1HaptiCtrl%@: stopped haptic engine (%ld)", (uint8_t *)v9, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v10, -1, -1);
      MEMORY[0x22075D4E4](v9, -1, -1);
    }
    else
    {

      v7 = v6;
    }

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v3)(uint64_t);

  v3 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v3(a2);
  return swift_release();
}

Swift::Void __swiftcall FMR1HapticsController.tearDownHaptics()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_setup) == 1)
  {
    FMR1HapticsController.tearDownContinuousHapticPlayer()();
    v2 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink;
    v3 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink);
    if (v3)
    {
      v4 = (void *)objc_opt_self();
      v5 = v3;
      v6 = objc_msgSend(v4, sel_currentRunLoop);
      objc_msgSend(v5, sel_removeFromRunLoop_forMode_, v6, *MEMORY[0x24BDBCB80]);

      v7 = *(void **)(v0 + v2);
    }
    else
    {
      v7 = 0;
    }
    objc_msgSend(v7, sel_invalidate);
    v8 = *(void **)(v0 + v2);
    *(_QWORD *)(v0 + v2) = 0;

    v9 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine;
    v10 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine);
    if (v10)
    {
      objc_msgSend(v10, sel_stopWithCompletionHandler_, 0);
      v11 = *(void **)(v0 + v9);
    }
    else
    {
      v11 = 0;
    }
    *(_QWORD *)(v0 + v9) = 0;

    *(_BYTE *)(v0 + v1) = 0;
  }
}

void FMR1HapticsController.setUpContinuousHapticPlayer()()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  id v4;
  id v5;
  double v6;
  id v7;
  uint64_t v8;
  id v9;
  double v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  Class isa;
  id v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char *v22;
  id v23;
  char *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  id v37;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  char *v46;
  id v47;
  void *v48;
  void *v49;
  char *v50;
  id v51;
  void *v52;
  void *v53;
  id v54;
  id v55[2];

  v55[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v1)
  {
    v2 = v0;
    v3 = *MEMORY[0x24BDBF540];
    v4 = objc_allocWithZone(MEMORY[0x24BDBF5D0]);
    v5 = v1;
    LODWORD(v6) = 0.5;
    v7 = objc_msgSend(v4, sel_initWithParameterID_value_, v3, v6);
    v8 = *MEMORY[0x24BDBF548];
    v9 = objc_allocWithZone(MEMORY[0x24BDBF5D0]);
    LODWORD(v10) = 0.5;
    v11 = objc_msgSend(v9, sel_initWithParameterID_value_, v8, v10);
    v12 = (void *)*MEMORY[0x24BDBF558];
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_21B0F7C50;
    *(_QWORD *)(v13 + 32) = v7;
    *(_QWORD *)(v13 + 40) = v11;
    specialized Array._endMutation()();
    v14 = objc_allocWithZone(MEMORY[0x24BDBF5C8]);
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticEventParameter);
    v15 = v12;
    v54 = v7;
    v16 = v11;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v14, sel_initWithEventType_parameters_relativeTime_duration_, v15, isa, 0.0, 100.0);

    type metadata accessor for FMR1HapticPattern();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_21B0F7C30;
    *(_QWORD *)(v19 + 32) = v18;
    v55[0] = (id)v19;
    specialized Array._endMutation()();
    v20 = v18;
    v34 = (char *)FMR1HapticPattern.__allocating_init(events:parameters:)();
    *(_OWORD *)&v34[OBJC_IVAR____TtC10TVRemoteUI17FMR1HapticPattern_name] = xmmword_21B0F87B0;
    swift_bridgeObjectRelease();
    v35 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPattern];
    *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPattern] = v34;
    v36 = v34;

    v55[0] = 0;
    v37 = objc_msgSend(v5, sel_createPlayerWithPattern_error_, v36, v55);
    v38 = v55[0];
    if (v37)
    {
      *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer] = v37;
      v39 = v38;
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      if (one-time initialization token for findingExperience != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.findingExperience);
      v41 = v2;
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v50 = v36;
        v44 = (uint8_t *)swift_slowAlloc();
        v45 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v44 = 138412290;
        v55[0] = v41;
        v52 = v20;
        v46 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v45 = v41;

        _os_log_impl(&dword_21B042000, v42, v43, "🧭 FMR1HaptiCtrl%@: created continuous haptic player", v44, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x22075D4E4](v45, -1, -1);
        MEMORY[0x22075D4E4](v44, -1, -1);

        swift_unknownObjectRelease();
        v33 = v5;
      }
      else
      {

        swift_unknownObjectRelease();
        v33 = v54;
      }
    }
    else
    {
      v47 = v55[0];
      v48 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      v53 = v5;
      if (one-time initialization token for findingExperience != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.findingExperience);
      v22 = v2;
      v23 = v48;
      v24 = v22;
      v25 = v48;
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v26, v27))
      {

        return;
      }
      v28 = swift_slowAlloc();
      v29 = (_QWORD *)swift_slowAlloc();
      v49 = (void *)swift_slowAlloc();
      v55[0] = v49;
      *(_DWORD *)v28 = 138412546;
      v51 = v20;
      v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v29 = v24;

      *(_WORD *)(v28 + 12) = 2080;
      swift_getErrorValue();
      v31 = Error.localizedDescription.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, (uint64_t *)v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_21B042000, v26, v27, "🧭 FMR1HaptiCtrl%@: failed creating continuous haptic player: %s", (uint8_t *)v28, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v29, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v49, -1, -1);
      MEMORY[0x22075D4E4](v28, -1, -1);

      v33 = v51;
    }

  }
}

uint64_t FMR1HapticsController.tearDownContinuousHapticPlayer()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v7[2];

  v7[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer);
  if (v2)
  {
    v7[0] = 0;
    if (objc_msgSend(v2, sel_stopAtTime_error_, v7, 0.0))
    {
      v3 = v7[0];
    }
    else
    {
      v4 = v7[0];
      v5 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
  }
  *(_QWORD *)(v0 + v1) = 0;
  return swift_unknownObjectRelease();
}

void FMR1HapticsController.stopContinuousHapticPlayer()()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  NSObject *v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  id v25[2];

  v1 = v0;
  v25[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_restartContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
  if (!v2)
    goto LABEL_6;
  v25[0] = 0;
  if (objc_msgSend(v2, sel_stopAtTime_error_, v25, 0.0))
  {
    v3 = v25[0];
LABEL_6:
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.findingExperience);
    v5 = v0;
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v8 = 138412290;
      v25[0] = v5;
      v10 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v9 = v5;

      _os_log_impl(&dword_21B042000, v6, v7, "🧭 FMR1HaptiCtrl%@: stopped continuous haptic player", v8, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v9, -1, -1);
      MEMORY[0x22075D4E4](v8, -1, -1);

      return;
    }

    goto LABEL_16;
  }
  v11 = v25[0];
  v12 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.findingExperience);
  v14 = v1;
  v15 = v12;
  v16 = v14;
  v17 = v12;
  v5 = Logger.logObject.getter();
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v18))
  {
    v19 = swift_slowAlloc();
    v20 = (_QWORD *)swift_slowAlloc();
    v24 = (void *)swift_slowAlloc();
    v25[0] = v24;
    *(_DWORD *)v19 = 138412546;
    v21 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v20 = v16;

    *(_WORD *)(v19 + 12) = 2080;
    swift_getErrorValue();
    v22 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, (uint64_t *)v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21B042000, v5, v18, "🧭 FMR1HaptiCtrl%@: failed stopping continuous haptic player: %s", (uint8_t *)v19, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v20, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v24, -1, -1);
    MEMORY[0x22075D4E4](v19, -1, -1);

    return;
  }

LABEL_16:
}

void FMR1HapticsController.resetContinuousHapticPlayerBeforeNearbyHaptic()()
{
  char *v0;
  uint64_t v1;
  id v2;
  double v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  Class isa;
  unsigned int v9;
  id v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  char *v21;
  id v22;
  char *v23;
  id v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32[2];

  v32[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *MEMORY[0x24BDBF508];
  v2 = objc_allocWithZone(MEMORY[0x24BDBF5B8]);
  LODWORD(v3) = 1.0;
  v4 = objc_msgSend(v2, sel_initWithParameterID_value_relativeTime_, v1, v3, 0.0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
  if (!v5)
  {
LABEL_4:
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.findingExperience);
    v12 = v0;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v15 = 138412290;
      v32[0] = v12;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v16 = v12;

      _os_log_impl(&dword_21B042000, v13, v14, "🧭 FMR1HaptiCtrl%@: reset continuous haptic player intensity to 1.0", v15, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v16, -1, -1);
      MEMORY[0x22075D4E4](v15, -1, -1);

      return;
    }

    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21B0F7C30;
  *(_QWORD *)(v6 + 32) = v4;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
  swift_unknownObjectRetain();
  v7 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  v9 = objc_msgSend(v5, sel_sendParameters_atTime_error_, isa, v32, 0.0);
  swift_unknownObjectRelease();

  if (v9)
  {
    v10 = v32[0];
    goto LABEL_4;
  }
  v18 = v32[0];
  v19 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.findingExperience);
  v21 = v0;
  v22 = v19;
  v23 = v21;
  v24 = v19;
  v4 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v25))
  {
    v26 = swift_slowAlloc();
    v27 = (_QWORD *)swift_slowAlloc();
    v31 = (void *)swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)v26 = 138412546;
    v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v27 = v23;

    *(_WORD *)(v26 + 12) = 2080;
    swift_getErrorValue();
    v29 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21B042000, v4, v25, "🧭 FMR1HaptiCtrl%@: failed parametering continuous haptic player: %s", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v31, -1, -1);
    MEMORY[0x22075D4E4](v26, -1, -1);

    return;
  }

LABEL_14:
}

void FMR1HapticsController.resetContinuousHapticPlayerAfterNearbyHaptic()()
{
  char *v0;
  uint64_t v1;
  id v2;
  double v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  Class isa;
  unsigned int v9;
  id v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  id v18;
  void *v19;
  uint64_t v20;
  char *v21;
  id v22;
  char *v23;
  id v24;
  os_log_type_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32[2];

  v32[1] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *MEMORY[0x24BDBF508];
  v2 = objc_allocWithZone(MEMORY[0x24BDBF5B8]);
  LODWORD(v3) = 1058642330;
  v4 = objc_msgSend(v2, sel_initWithParameterID_value_relativeTime_, v1, v3, 0.0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
  if (!v5)
  {
LABEL_4:
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.findingExperience);
    v12 = v0;
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc();
      v16 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v15 = 138412546;
      v32[0] = v12;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v16 = v12;

      *(_WORD *)(v15 + 12) = 2048;
      v32[0] = (id)0x3FE3333340000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_21B042000, v13, v14, "🧭 FMR1HaptiCtrl%@: reset continuous haptic player intensity to %f", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v16, -1, -1);
      MEMORY[0x22075D4E4](v15, -1, -1);

      return;
    }

    goto LABEL_14;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21B0F7C30;
  *(_QWORD *)(v6 + 32) = v4;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
  swift_unknownObjectRetain();
  v7 = v4;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v32[0] = 0;
  v9 = objc_msgSend(v5, sel_sendParameters_atTime_error_, isa, v32, 0.0);
  swift_unknownObjectRelease();

  if (v9)
  {
    v10 = v32[0];
    goto LABEL_4;
  }
  v18 = v32[0];
  v19 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.findingExperience);
  v21 = v0;
  v22 = v19;
  v23 = v21;
  v24 = v19;
  v4 = Logger.logObject.getter();
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v25))
  {
    v26 = swift_slowAlloc();
    v27 = (_QWORD *)swift_slowAlloc();
    v31 = (void *)swift_slowAlloc();
    v32[0] = v31;
    *(_DWORD *)v26 = 138412546;
    v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v27 = v23;

    *(_WORD *)(v26 + 12) = 2080;
    swift_getErrorValue();
    v29 = Error.localizedDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, (uint64_t *)v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_21B042000, v4, v25, "🧭 FMR1HaptiCtrl%@: failed parametering continuous haptic player: %s", (uint8_t *)v26, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v27, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v31, -1, -1);
    MEMORY[0x22075D4E4](v26, -1, -1);

    return;
  }

LABEL_14:
}

id FMR1HapticsController.hapticDisplayLinkUpdate(displaylink:)(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  double v11;
  double v12;
  uint64_t v13;
  id result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  _OWORD v23[2];

  v2 = v1;
  v4 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_enablePlayingAheadHaptic;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_enablePlayingAheadHaptic) == 1)
  {
    memset(v23, 0, sizeof(v23));
    FMR1HapticsController.playAheadHaptic(context:)((uint64_t)v23);
    outlined destroy of Any?((uint64_t)v23);
    *(_BYTE *)(v1 + v4) = 0;
  }
  else if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod + 8) & 1) == 0)
  {
    v5 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod);
    v6 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp + 8) & 1) != 0
      || (v7 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay,
          (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay + 8) & 1) != 0))
    {
      objc_msgSend(a1, sel_timestamp);
      *(_QWORD *)v6 = v8;
      *(_BYTE *)(v6 + 8) = 0;
      v9 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay;
      *(double *)v9 = v5;
      *(_BYTE *)(v9 + 8) = 0;
    }
    else
    {
      v17 = *(double *)v7;
      v18 = *(double *)v6;
      objc_msgSend(a1, sel_timestamp);
      v20 = v19 - v18;
      if (v17 > v5)
        v21 = v17;
      else
        v21 = v5;
      if (v21 > v20)
        goto LABEL_8;
      objc_msgSend(a1, sel_timestamp);
      *(_QWORD *)v6 = v22;
      *(_BYTE *)(v6 + 8) = 0;
      *(double *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
    }
    specialized FMR1HapticsController.playSingleTapHaptic(displaylink:)();
  }
LABEL_8:
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) == 1
    && (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime + 8) & 1) == 0
    && (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactor + 4) & 1) == 0)
  {
    v10 = *(float *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticFactor);
    v11 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime);
    objc_msgSend(a1, sel_timestamp);
    v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticRampingFactorSpring);
    FLSpring.step(_:)(v12 - v11);
    *(_BYTE *)(v13 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    specialized FMR1HapticsController.applyContinuousHapticPlayer(with:rampingFactor:)(v10);
  }
  result = objc_msgSend(a1, sel_timestamp);
  v15 = v2 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_lastRenderTime;
  *(_QWORD *)v15 = v16;
  *(_BYTE *)(v15 + 8) = 0;
  return result;
}

uint64_t type metadata accessor for FMR1HapticsController()
{
  return objc_opt_self();
}

float FMR1HapticsController.selectSingleTapHaptic(hapticFactor:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  float v8;
  float v9;
  float result;
  uint64_t v11;
  uint64_t v12;

  if (a1 < 0.2)
  {
    v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap1HapticPattern;
LABEL_7:
    v4 = *(void **)(v1 + v3);
    v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern;
    v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern);
    goto LABEL_8;
  }
  if (a1 < 0.4)
  {
    v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap2HapticPattern;
    goto LABEL_7;
  }
  if (a1 < 0.6)
  {
    v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap3HapticPattern;
    goto LABEL_7;
  }
  v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern;
  v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern);
  if (a1 >= 0.8)
    v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap5HapticPattern;
  else
    v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTap4HapticPattern;
  v4 = *(void **)(v1 + v12);
LABEL_8:
  *(_QWORD *)(v1 + v5) = v4;
  v7 = v4;

  v8 = 1.0 - a1;
  v9 = a1;
  result = (float)(v9 * 0.65) + (float)(v8 * 0.4);
  v11 = v1 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity;
  *(float *)v11 = result;
  *(_BYTE *)(v11 + 4) = 0;
  return result;
}

void FMR1HapticsController.playScatterHaptic(context:)(uint64_t a1)
{
  char *v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  NSObject *v23;
  uint8_t *v24;
  id v25;
  void *v26;
  unsigned int v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(void *, uint64_t);
  id v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  NSObject *log;
  id v53;
  uint64_t v54;
  void *v55;
  _OWORD v57[2];
  uint64_t v58;

  v2 = v1;
  v58 = *MEMORY[0x24BDAC8D0];
  v3 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  memset(v57, 0, sizeof(v57));
  v4 = (uint64_t)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v57, v4);
  swift_endAccess();
  v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v5] = 0;
  swift_release();
  if (v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  v6 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v6] = 0;
  swift_release();
  v7 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v7] = 0;
  swift_release();
  v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  v8 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v8] = 0;
  swift_release();
  v9 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v9)
  {
    v10 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_scatterHapticPattern];
    if (v10)
    {
      *(_QWORD *)&v57[0] = 0;
      v11 = v9;
      v12 = v10;
      v55 = v11;
      v13 = objc_msgSend(v11, sel_createPlayerWithPattern_error_, v12, v57);
      if (v13)
      {
        v14 = v13;
        v15 = one-time initialization token for findingExperience;
        v16 = *(id *)&v57[0];
        if (v15 != -1)
          swift_once();
        v17 = type metadata accessor for Logger();
        __swift_project_value_buffer(v17, (uint64_t)static Logger.findingExperience);
        v18 = v2;
        v19 = Logger.logObject.getter();
        v20 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v19, v20))
        {
          v53 = v12;
          v21 = (uint8_t *)swift_slowAlloc();
          v22 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v21 = 138412290;
          *(_QWORD *)&v57[0] = v18;
          v23 = v18;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v22 = v18;

          _os_log_impl(&dword_21B042000, v19, v20, "🧭 FMR1HaptiCtrl%@: playing scatter haptic", v21, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22075D4E4](v22, -1, -1);
          v24 = v21;
          v12 = v53;
          MEMORY[0x22075D4E4](v24, -1, -1);
        }
        else
        {

          v19 = v18;
        }

        *(_QWORD *)&v57[0] = 0;
        v27 = objc_msgSend(v14, sel_startAtTime_error_, v57, 0.0);
        v28 = *(void **)&v57[0];
        if (v27)
        {
          *((_BYTE *)&v18->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying) = 1;
          v29 = v28;
        }
        else
        {
          v30 = *(id *)&v57[0];
          v31 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          v32 = v18;
          v33 = v31;
          v34 = v32;
          v35 = v31;
          v36 = Logger.logObject.getter();
          v37 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v36, v37))
          {
            v38 = swift_slowAlloc();
            v51 = (_QWORD *)swift_slowAlloc();
            v54 = swift_slowAlloc();
            *(_QWORD *)&v57[0] = v54;
            *(_DWORD *)v38 = 138412546;
            log = v36;
            v39 = v18;
            v40 = v34;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v51 = v34;

            v18 = v39;
            *(_WORD *)(v38 + 12) = 2080;
            swift_getErrorValue();
            v41 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, (uint64_t *)v57);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_21B042000, log, v37, "🧭 FMR1HaptiCtrl%@: failed playing scatter haptic (%s)", (uint8_t *)v38, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v51, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v54, -1, -1);
            MEMORY[0x22075D4E4](v38, -1, -1);

          }
          else
          {

          }
        }
        v43 = *(void (**)(void *, uint64_t))((char *)&v18->isa
                                                     + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
        if (v43)
        {
          v44 = v12;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v43);
          v43(v10, a1);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v43);

        }
        v45 = *(Class *)((char *)&v18->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink);
        if (v45)
        {
          v46 = v45;
          objc_msgSend(v46, sel_timestamp);
          v48 = v47;

          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
          v48 = 0;
        }
        v49 = (char *)v18 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp;
        *(_QWORD *)v49 = v48;
        v49[8] = 0;
        v50 = (char *)v18 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay;
        *(_QWORD *)v50 = 0x3FF0000000000000;
        v50[8] = 0;
      }
      else
      {
        v25 = *(id *)&v57[0];
        v26 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

uint64_t FMR1HapticsController.playTapHapticAt(period:context:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v11[2];

  if ((a2 & 1) != 0)
  {
    v7 = v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod;
    *(_QWORD *)v7 = a1;
    *(_BYTE *)(v7 + 8) = 1;
    memset(v11, 0, sizeof(v11));
  }
  else
  {
    v6 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
    if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(_QWORD *)(v3 + v6) = 0;
    swift_release();
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) == 1)
    {
      *(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) = 0;
      FMR1HapticsController.stopContinuousHapticPlayer()();
    }
    v8 = v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod;
    *(_QWORD *)v8 = a1;
    *(_BYTE *)(v8 + 8) = 0;
    outlined init with copy of Any?(a3, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext;
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v11, v9);
  return swift_endAccess();
}

void FMR1HapticsController.playNearbyHaptic(context:)(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  double v32;
  double v33;
  double *v34;
  _BYTE *v35;
  id v36;
  void *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  _BYTE *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  int v51;
  _BOOL4 v52;
  NSObject *v53;
  uint64_t v54;
  uint8_t *v55;
  NSObject *v56;
  _QWORD *v57;
  uint8_t *v58;
  unsigned int v59;
  void *v60;
  NSObject *v61;
  id v62;
  uint64_t v63;
  void *v64;
  NSObject *v65;
  uint64_t v66;
  void *v67;
  id v68;
  id v69;
  void *v70;
  char *v71;
  id v72;
  char *v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  _QWORD *v78;
  char *v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  os_log_t v83;
  uint64_t v84;
  void (*v85)(void *, uint64_t);
  id v86;
  _QWORD v87[2];
  _QWORD *v88;
  uint8_t *v89;
  int v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  _BYTE *v93;
  double *v94;
  NSObject *v95;
  uint64_t v96;
  void *v97;
  id v98;
  id v99;
  id v100;
  Class isa;
  os_log_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 aBlock;
  __int128 v106;
  void (*v107)();
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v2 = v1;
  v104 = a1;
  v110 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for DispatchWorkItemFlags();
  v103 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v4);
  v6 = (char *)v87 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = (os_log_t)type metadata accessor for DispatchQoS();
  isa = v102[-1].isa;
  MEMORY[0x24BDAC7A8](v102, v7);
  v9 = (char *)v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime();
  v11 = *(_QWORD *)(v10 - 8);
  v13 = MEMORY[0x24BDAC7A8](v10, v12);
  v15 = (char *)v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v16);
  v18 = (char *)v87 - v17;
  v19 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  aBlock = 0u;
  v106 = 0u;
  v20 = (uint64_t)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)&aBlock, v20);
  swift_endAccess();
  v21 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v2[v21] = 0;
  swift_release();
  if (v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  v22 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v2[v22] = 0;
  swift_release();
  v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  v23 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v2[v23] = 0;
  swift_release();
  v24 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v2[v24] = 0;
  swift_release();
  FMR1HapticsController.resetContinuousHapticPlayerBeforeNearbyHaptic()();
  v25 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v25)
  {
    v26 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticPattern];
    if (v26)
    {
      v96 = v3;
      *(_QWORD *)&aBlock = 0;
      v27 = v25;
      v97 = v26;
      v28 = v26;
      v29 = objc_msgSend(v27, sel_createPlayerWithPattern_error_, v28, &aBlock);
      if (!v29)
      {
        v36 = (id)aBlock;
        v37 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        return;
      }
      v100 = v29;
      v98 = v28;
      v99 = v27;
      v30 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink];
      if (v30)
      {
        v31 = (id)aBlock;
        objc_msgSend(v30, sel_timestamp);
        v33 = v32;
        v34 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp];
        v35 = &v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp + 8];
        if ((*v35 & 1) != 0)
        {
          if (v32 >= 2.0)
            goto LABEL_26;
          goto LABEL_22;
        }
      }
      else
      {
        v34 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp];
        v38 = v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_nearbyHapticLastPlayTimestamp + 8];
        v39 = (id)aBlock;
        if ((v38 & 1) != 0)
        {
LABEL_22:
          if (one-time initialization token for findingExperience != -1)
            swift_once();
          v40 = type metadata accessor for Logger();
          __swift_project_value_buffer(v40, (uint64_t)static Logger.findingExperience);
          v41 = v2;
          v42 = Logger.logObject.getter();
          v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = (uint8_t *)swift_slowAlloc();
            v45 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v44 = 138412290;
            *(_QWORD *)&aBlock = v41;
            v46 = v41;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v45 = v41;

            _os_log_impl(&dword_21B042000, v42, v43, "🧭 FMR1HaptiCtrl%@: not playing nearby haptic (we just played it)", v44, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v45, -1, -1);
            MEMORY[0x22075D4E4](v44, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease();
          }

          return;
        }
        v35 = v34 + 1;
        v33 = 0.0;
      }
      if (*v34 + 2.0 <= v33)
      {
LABEL_26:
        v93 = v35;
        if (one-time initialization token for findingExperience != -1)
          swift_once();
        v47 = type metadata accessor for Logger();
        v48 = __swift_project_value_buffer(v47, (uint64_t)static Logger.findingExperience);
        v95 = v2;
        v92 = (void (*)(char *, uint64_t))v48;
        v49 = Logger.logObject.getter();
        v50 = static os_log_type_t.default.getter();
        v51 = v50;
        v52 = os_log_type_enabled(v49, v50);
        v94 = v34;
        if (v52)
        {
          v91 = v10;
          v53 = v95;
          v54 = swift_slowAlloc();
          v90 = v51;
          v55 = (uint8_t *)v54;
          v88 = (_QWORD *)swift_slowAlloc();
          v89 = v55;
          *(_DWORD *)v55 = 138412290;
          v87[1] = v55 + 4;
          *(_QWORD *)&aBlock = v53;
          v56 = v53;
          v34 = v94;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v57 = v88;
          *v88 = v53;

          v10 = v91;
          v58 = v89;
          _os_log_impl(&dword_21B042000, v49, (os_log_type_t)v90, "🧭 FMR1HaptiCtrl%@: playing nearby haptic", v89, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22075D4E4](v57, -1, -1);
          MEMORY[0x22075D4E4](v58, -1, -1);
        }
        else
        {

          v49 = v95;
        }

        *(_QWORD *)&aBlock = 0;
        v59 = objc_msgSend(v100, sel_startAtTime_error_, &aBlock, 0.0);
        v60 = (void *)aBlock;
        if (v59)
        {
          v61 = v95;
          *((_BYTE *)&v95->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying) = 1;
          type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
          v62 = v60;
          v91 = static OS_dispatch_queue.main.getter();
          static DispatchTime.now()();
          MEMORY[0x22075C554](v15, 0.2);
          v92 = *(void (**)(char *, uint64_t))(v11 + 8);
          v92(v15, v10);
          v63 = swift_allocObject();
          *(_QWORD *)(v63 + 16) = v61;
          v107 = partial apply for closure #1 in FMR1HapticsController.playNearbyHaptic(context:);
          v108 = v63;
          *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v106 = thunk for @escaping @callee_guaranteed () -> ();
          *((_QWORD *)&v106 + 1) = &block_descriptor_10;
          v64 = _Block_copy(&aBlock);
          v65 = v61;
          swift_release();
          static DispatchQoS.unspecified.getter();
          *(_QWORD *)&aBlock = MEMORY[0x24BEE4AF8];
          lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
          lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
          v66 = v96;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          v67 = (void *)v91;
          MEMORY[0x22075C77C](v18, v9, v6, v64);
          _Block_release(v64);

          (*(void (**)(char *, uint64_t))(v103 + 8))(v6, v66);
          (*((void (**)(char *, os_log_t))isa + 1))(v9, v102);
          v92(v18, v10);
          v68 = v99;
        }
        else
        {
          v69 = (id)aBlock;
          v70 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          v71 = v95;
          v72 = v70;
          v73 = v71;
          v74 = v70;
          v75 = Logger.logObject.getter();
          v76 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v75, v76))
          {
            v77 = swift_slowAlloc();
            v78 = (_QWORD *)swift_slowAlloc();
            v103 = swift_slowAlloc();
            *(_QWORD *)&aBlock = v103;
            *(_DWORD *)v77 = 138412546;
            v102 = v75;
            v109 = (uint64_t)v73;
            v79 = v73;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            v80 = v78;
            *v78 = v73;

            *(_WORD *)(v77 + 12) = 2080;
            swift_getErrorValue();
            v81 = Error.localizedDescription.getter();
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            v83 = v102;
            _os_log_impl(&dword_21B042000, v102, v76, "🧭 FMR1HaptiCtrl%@: failed playing nearby haptic (%s)", (uint8_t *)v77, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v80, -1, -1);
            v84 = v103;
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v84, -1, -1);
            MEMORY[0x22075D4E4](v77, -1, -1);

          }
          else
          {

          }
          v68 = v99;
          v34 = v94;
        }
        v85 = *(void (**)(void *, uint64_t))((char *)&v95->isa
                                                     + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
        if (v85)
        {
          v86 = v98;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v85);
          v85(v97, v104);

          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v85);
          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
        }
        *v34 = v33;
        *v93 = 0;
        return;
      }
      goto LABEL_22;
    }
  }
}

uint64_t FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()()
{
  return FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem, (uint64_t)partial apply for closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary(), (uint64_t)&block_descriptor_4, 0.2);
}

uint64_t FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary()()
{
  return FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem, (uint64_t)partial apply for closure #1 in FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary(), (uint64_t)&block_descriptor_0, 0.05);
}

uint64_t FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(uint64_t *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void (*v24)(char *, uint64_t);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD aBlock[6];

  v9 = type metadata accessor for DispatchWallTime();
  v29 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9, v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11, v14);
  v16 = (char *)&v27 - v15;
  v17 = type metadata accessor for DispatchWorkItemFlags();
  result = MEMORY[0x24BDAC7A8](v17, v18);
  v20 = *a1;
  if (!*(_QWORD *)(v4 + *a1))
  {
    v21 = swift_allocObject();
    swift_unknownObjectWeakInit();
    aBlock[4] = a2;
    aBlock[5] = v21;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = a3;
    _Block_copy(aBlock);
    v30 = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type CHHapticEngineOptionKey and conformance CHHapticEngineOptionKey((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v28 = v9;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    v22 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(_QWORD *)(v4 + v20) = v22;
    swift_retain();
    swift_release();
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v23 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchWallTime.now()();
    MEMORY[0x22075C560](v13, a4);
    v24 = *(void (**)(char *, uint64_t))(v29 + 8);
    v25 = v13;
    v26 = v28;
    v24(v25, v28);
    OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();
    swift_release();

    return ((uint64_t (*)(char *, uint64_t))v24)(v16, v26);
  }
  return result;
}

uint64_t closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(uint64_t a1, void (*a2)(_OWORD *))
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  _OWORD v6[2];

  v3 = a1 + 16;
  swift_beginAccess();
  result = MEMORY[0x22075D574](v3);
  if (result)
  {
    v5 = (void *)result;
    memset(v6, 0, sizeof(v6));
    a2(v6);

    return outlined destroy of Any?((uint64_t)v6);
  }
  return result;
}

void FMR1HapticsController.playAheadHaptic(context:)(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  NSObject *v21;
  uint8_t *v22;
  id v23;
  void *v24;
  unsigned int v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  NSObject *v30;
  id v31;
  NSObject *v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(void *, uint64_t);
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  NSObject *log;
  id v51;
  void *v52;
  void *v53;
  id v55[2];

  v2 = v1;
  v55[1] = *(id *)MEMORY[0x24BDAC8D0];
  v3 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v3] = 0;
  swift_release();
  v4 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v4] = 0;
  swift_release();
  v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
  v5 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v5] = 0;
  swift_release();
  v6 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v1[v6] = 0;
  swift_release();
  v7 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v7)
  {
    v8 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_aheadHapticPattern];
    if (v8)
    {
      v55[0] = 0;
      v9 = v7;
      v10 = v8;
      v53 = v9;
      v11 = objc_msgSend(v9, sel_createPlayerWithPattern_error_, v10, v55);
      if (v11)
      {
        v12 = v11;
        v13 = one-time initialization token for findingExperience;
        v14 = v55[0];
        if (v13 != -1)
          swift_once();
        v15 = type metadata accessor for Logger();
        __swift_project_value_buffer(v15, (uint64_t)static Logger.findingExperience);
        v16 = v2;
        v17 = Logger.logObject.getter();
        v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v51 = v10;
          v19 = (uint8_t *)swift_slowAlloc();
          v20 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v19 = 138412290;
          v55[0] = v16;
          v21 = v16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v20 = v16;

          _os_log_impl(&dword_21B042000, v17, v18, "🧭 FMR1HaptiCtrl%@: playing ahead (green) haptic", v19, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22075D4E4](v20, -1, -1);
          v22 = v19;
          v10 = v51;
          MEMORY[0x22075D4E4](v22, -1, -1);
        }
        else
        {

          v17 = v16;
        }

        v55[0] = 0;
        v25 = objc_msgSend(v12, sel_startAtTime_error_, v55, 0.0);
        v26 = v55[0];
        if (v25)
        {
          *((_BYTE *)&v16->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying) = 1;
          v27 = v26;
        }
        else
        {
          v28 = v55[0];
          v29 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          v30 = v16;
          v31 = v29;
          v32 = v30;
          v33 = v29;
          v34 = Logger.logObject.getter();
          v35 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v34, v35))
          {
            v36 = swift_slowAlloc();
            v49 = (_QWORD *)swift_slowAlloc();
            v52 = (void *)swift_slowAlloc();
            v55[0] = v52;
            *(_DWORD *)v36 = 138412546;
            log = v34;
            v37 = v16;
            v38 = v32;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v49 = v32;

            v16 = v37;
            *(_WORD *)(v36 + 12) = 2080;
            swift_getErrorValue();
            v39 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v55);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_21B042000, log, v35, "🧭 FMR1HaptiCtrl%@: failed playing ahead haptic (%s)", (uint8_t *)v36, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v49, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v52, -1, -1);
            MEMORY[0x22075D4E4](v36, -1, -1);

          }
          else
          {

          }
        }
        v41 = *(void (**)(void *, uint64_t))((char *)&v16->isa
                                                     + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
        if (v41)
        {
          v42 = v10;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v41);
          v41(v8, a1);
          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v41);

        }
        v43 = *(Class *)((char *)&v16->isa + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticDisplayLink);
        if (v43)
        {
          v44 = v43;
          objc_msgSend(v44, sel_timestamp);
          v46 = v45;

          swift_unknownObjectRelease();
        }
        else
        {

          swift_unknownObjectRelease();
          v46 = 0;
        }
        v47 = (char *)v16 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticLastPlayTimestamp;
        *(_QWORD *)v47 = v46;
        v47[8] = 0;
        v48 = (char *)v16 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticNextPlayDelay;
        *(_QWORD *)v48 = 0;
        v48[8] = 0;
      }
      else
      {
        v23 = v55[0];
        v24 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

uint64_t FMR1HapticsController.playInFOVModeTapHapticAt(hapticFactor:period:context:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v3 + v7) = 0;
  swift_release();
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) == 1)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern) = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  v8 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v3 + v8) = 0;
  swift_release();
  v9 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v3 + v9) = 0;
  swift_release();
  *(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic) = 0;
  v10 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v3 + v10) = 0;
  swift_release();
  v11 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v3 + v11) = 0;
  swift_release();
  FMR1HapticsController.selectSingleTapHaptic(hapticFactor:)(a2);
  return FMR1HapticsController.playTapHapticAt(period:context:)(*(uint64_t *)&a3, 0, a1);
}

Swift::Void __swiftcall FMR1HapticsController.playLevelIncreasedHaptic()()
{
  FMR1HapticsController.playLevelIncreasedHaptic()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelIncreaseHapticPattern, "🧭 FMR1HaptiCtrl%@: playing level increased haptic", "🧭 FMR1HaptiCtrl%@: failed playing level increased haptic (%s)");
}

Swift::Void __swiftcall FMR1HapticsController.playLevelDecreasedHaptic()()
{
  FMR1HapticsController.playLevelIncreasedHaptic()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_levelDecreaseHapticPattern, "🧭 FMR1HaptiCtrl%@: playing level decreased haptic", "🧭 FMR1HaptiCtrl%@: failed playing level decreased haptic (%s)");
}

Swift::Void __swiftcall FMR1HapticsController.playFarNearHaptic()()
{
  FMR1HapticsController.playLevelIncreasedHaptic()(&OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_farNearHapticPattern, "🧭 FMR1HaptiCtrl%@: playing level far->near haptic", "🧭 FMR1HaptiCtrl%@: failed playing far->near haptic (%s)");
}

void FMR1HapticsController.playLevelIncreasedHaptic()(_QWORD *a1, const char *a2, const char *a3)
{
  _BYTE *v3;
  _BYTE *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _BYTE *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  _BYTE *v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  _BYTE *v38;
  id v39;
  _BYTE *v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  _QWORD *v45;
  _BYTE *v46;
  uint64_t v47;
  unint64_t v48;
  char *format;
  void *v50;
  void *v51;
  _OWORD v52[2];
  uint64_t v53;

  v7 = v3;
  v53 = *MEMORY[0x24BDAC8D0];
  v8 = &v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  memset(v52, 0, sizeof(v52));
  v9 = (uint64_t)&v3[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
  swift_beginAccess();
  outlined assign with take of Any?((uint64_t)v52, v9);
  swift_endAccess();
  v10 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
  if (*(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v7[v10] = 0;
  swift_release();
  if (v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
    FMR1HapticsController.stopContinuousHapticPlayer()();
  }
  v11 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
  if (*(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v7[v11] = 0;
  swift_release();
  v12 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
  if (*(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v7[v12] = 0;
  swift_release();
  v13 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
  if (*(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)&v7[v13] = 0;
  swift_release();
  v14 = *(void **)&v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v14)
  {
    v15 = *(void **)&v7[*a1];
    if (v15)
    {
      *(_QWORD *)&v52[0] = 0;
      v16 = v14;
      v17 = v15;
      v18 = objc_msgSend(v16, sel_createPlayerWithPattern_error_, v17, v52);
      v19 = *(void **)&v52[0];
      if (v18)
      {
        v20 = v18;
        *(_QWORD *)&v52[0] = 0;
        v21 = v19;
        v22 = objc_msgSend(v20, sel_startAtTime_error_, v52, 0.0);
        v23 = *(void **)&v52[0];
        if (v22)
        {
          v7[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 1;
          v24 = one-time initialization token for findingExperience;
          v25 = v23;
          if (v24 != -1)
            swift_once();
          v26 = type metadata accessor for Logger();
          __swift_project_value_buffer(v26, (uint64_t)static Logger.findingExperience);
          v27 = v7;
          v28 = Logger.logObject.getter();
          v29 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v28, v29))
          {
            v30 = (uint8_t *)swift_slowAlloc();
            v50 = v17;
            v31 = (_QWORD *)swift_slowAlloc();
            *(_DWORD *)v30 = 138412290;
            *(_QWORD *)&v52[0] = v27;
            v32 = v27;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v31 = v27;

            _os_log_impl(&dword_21B042000, v28, v29, a2, v30, 0xCu);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v31, -1, -1);
            MEMORY[0x22075D4E4](v30, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {

            swift_unknownObjectRelease();
          }

        }
        else
        {
          v51 = v17;
          v35 = *(id *)&v52[0];
          v36 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (one-time initialization token for findingExperience != -1)
            swift_once();
          v37 = type metadata accessor for Logger();
          __swift_project_value_buffer(v37, (uint64_t)static Logger.findingExperience);
          v38 = v7;
          v39 = v36;
          v40 = v38;
          v41 = v36;
          v42 = Logger.logObject.getter();
          v43 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v42, v43))
          {
            v44 = swift_slowAlloc();
            v45 = (_QWORD *)swift_slowAlloc();
            format = (char *)swift_slowAlloc();
            *(_QWORD *)&v52[0] = format;
            *(_DWORD *)v44 = 138412546;
            v46 = v40;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v45 = v40;

            *(_WORD *)(v44 + 12) = 2080;
            swift_getErrorValue();
            v47 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, (uint64_t *)v52);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_21B042000, v42, v43, a3, (uint8_t *)v44, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v45, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](format, -1, -1);
            MEMORY[0x22075D4E4](v44, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();

          }
        }
      }
      else
      {
        v33 = *(id *)&v52[0];
        v34 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

Swift::Void __swiftcall FMR1HapticsController.stopHaptics()()
{
  _BYTE *v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[2];

  v1 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying;
  if (v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] == 1)
  {
    v2 = v0;
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.findingExperience);
    v4 = v0;
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v18 = v1;
      v8 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v7 = 138412290;
      *(_QWORD *)&v19[0] = v4;
      v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v8 = v4;

      _os_log_impl(&dword_21B042000, v5, v6, "🧭 FMR1HaptiCtrl%@: stopping haptics", v7, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      v10 = v8;
      v1 = v18;
      MEMORY[0x22075D4E4](v10, -1, -1);
      MEMORY[0x22075D4E4](v7, -1, -1);

    }
    else
    {

    }
    v11 = &v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticPlaybackPeriod];
    *(_QWORD *)v11 = 0;
    v11[8] = 1;
    memset(v19, 0, sizeof(v19));
    v12 = (uint64_t)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
    swift_beginAccess();
    outlined assign with take of Any?((uint64_t)v19, v12);
    swift_endAccess();
    v13 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem;
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_startContinuousHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(_QWORD *)&v4[v13] = 0;
    swift_release();
    if (v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
    {
      v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] = 0;
      FMR1HapticsController.stopContinuousHapticPlayer()();
    }
    v14 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem;
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playNearbyHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(_QWORD *)&v4[v14] = 0;
    swift_release();
    v15 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem;
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playArmsReachHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(_QWORD *)&v4[v15] = 0;
    swift_release();
    v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hasPlayedArmsReachHaptic] = 0;
    v16 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem;
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playScatterHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(_QWORD *)&v4[v16] = 0;
    swift_release();
    v17 = OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem;
    if (*(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playBuildHapticWorkItem])
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    *(_QWORD *)&v4[v17] = 0;
    swift_release();
    v2[v1] = 0;
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t outlined assign with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_21B0B6B48()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary()()
{
  uint64_t v0;

  return closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(v0, (void (*)(_OWORD *))FMR1HapticsController.playNearbyHaptic(context:));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x22075D454](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()()
{
  uint64_t v0;

  return closure #1 in FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()(v0, (void (*)(_OWORD *))FMR1HapticsController.playScatterHaptic(context:));
}

uint64_t sub_21B0B6C50()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMR1HapticsController.playNearbyHaptic(context:)()
{
  FMR1HapticsController.resetContinuousHapticPlayerAfterNearbyHaptic()();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

void specialized FMR1HapticsController.applyContinuousHapticPlayer(with:rampingFactor:)(float a1)
{
  char *v1;
  float v3;
  float v4;
  uint64_t v5;
  id v6;
  double v7;
  uint64_t v8;
  id v9;
  double v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  Class isa;
  unsigned int v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  char *v23;
  id v24;
  char *v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  id v35;
  id v36[2];

  v36[1] = *(id *)MEMORY[0x24BDAC8D0];
  if (v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_isPlayingContinuousHapticPattern] == 1)
  {
    v3 = 1.0 - a1;
    v4 = (float)(a1 * 0.6) + (float)((float)(1.0 - a1) * 0.5);
    v5 = *MEMORY[0x24BDBF508];
    v6 = objc_allocWithZone(MEMORY[0x24BDBF5B8]);
    *(float *)&v7 = v4;
    v35 = objc_msgSend(v6, sel_initWithParameterID_value_relativeTime_, v5, v7, 0.0);
    v8 = *MEMORY[0x24BDBF510];
    v9 = objc_allocWithZone(MEMORY[0x24BDBF5B8]);
    *(float *)&v10 = (float)(a1 * 0.1) - v3;
    v11 = objc_msgSend(v9, sel_initWithParameterID_value_relativeTime_, v8, v10, 0.0);
    v12 = v11;
    v13 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_continuousHapticPlayer];
    if (v13)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_21B0F7C50;
      *(_QWORD *)(v14 + 32) = v35;
      *(_QWORD *)(v14 + 40) = v12;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
      swift_unknownObjectRetain();
      v15 = v35;
      v16 = v12;
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v36[0] = 0;
      v18 = objc_msgSend(v13, sel_sendParameters_atTime_error_, isa, v36, 0.0);
      swift_unknownObjectRelease();

      if (v18)
      {
        v19 = v36[0];

      }
      else
      {
        v20 = v36[0];
        v21 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for findingExperience != -1)
          swift_once();
        v22 = type metadata accessor for Logger();
        __swift_project_value_buffer(v22, (uint64_t)static Logger.findingExperience);
        v23 = v1;
        v24 = v21;
        v25 = v23;
        v26 = v21;
        v27 = Logger.logObject.getter();
        v28 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v27, v28))
        {
          v29 = swift_slowAlloc();
          v30 = (_QWORD *)swift_slowAlloc();
          v34 = (void *)swift_slowAlloc();
          v36[0] = v34;
          *(_DWORD *)v29 = 138412546;
          v31 = v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v30 = v25;

          *(_WORD *)(v29 + 12) = 2080;
          swift_getErrorValue();
          v32 = Error.localizedDescription.getter();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, (uint64_t *)v36);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_21B042000, v27, v28, "🧭 FMR1HaptiCtrl%@: failed parametering continuous haptic player: %s", (uint8_t *)v29, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x22075D4E4](v30, -1, -1);
          swift_arrayDestroy();
          MEMORY[0x22075D4E4](v34, -1, -1);
          MEMORY[0x22075D4E4](v29, -1, -1);

        }
        else
        {

        }
      }
    }
    else
    {

    }
  }
}

void specialized FMR1HapticsController.playSingleTapHaptic(displaylink:)()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  int v12;
  uint64_t v13;
  id v14;
  id v15;
  double v16;
  id v17;
  uint64_t v18;
  NSObject *v19;
  Class isa;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  char *v25;
  id v26;
  char *v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(void *, id *);
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  char *v43;
  id v44;
  char *v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  _QWORD *v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  _QWORD *v55;
  void *type;
  void *v57;
  id v58;
  void *v59;
  os_log_t v60;
  id v61[6];

  v61[4] = *(id *)MEMORY[0x24BDAC8D0];
  v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticEngine];
  if (v1)
  {
    v2 = v0;
    v3 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPattern];
    if (v3)
    {
      v61[0] = 0;
      v4 = v3;
      v5 = v1;
      v6 = objc_msgSend(v5, sel_createPlayerWithPattern_error_, v4, v61);
      v7 = v61[0];
      if (v6)
      {
        v8 = v6;
        if ((v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity + 4] & 1) != 0)
        {
          v9 = v61[0];
        }
        else
        {
          v12 = *(_DWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_singleTapSelectedHapticPatternIntensity];
          v13 = *MEMORY[0x24BDBF508];
          v14 = objc_allocWithZone(MEMORY[0x24BDBF5B8]);
          v15 = v7;
          LODWORD(v16) = v12;
          v17 = objc_msgSend(v14, sel_initWithParameterID_value_relativeTime_, v13, v16, 0.0);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
          v18 = swift_allocObject();
          *(_OWORD *)(v18 + 16) = xmmword_21B0F7C30;
          *(_QWORD *)(v18 + 32) = v17;
          v61[0] = (id)v18;
          specialized Array._endMutation()();
          type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for CHHapticDynamicParameter);
          v19 = v17;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v61[0] = 0;
          LOBYTE(v13) = objc_msgSend(v8, sel_sendParameters_atTime_error_, isa, v61, 0.0);

          if ((v13 & 1) != 0)
          {
            v21 = v61[0];

          }
          else
          {
            v22 = v61[0];
            v23 = (void *)_convertNSErrorToError(_:)();

            swift_willThrow();
            if (one-time initialization token for findingExperience != -1)
              swift_once();
            v24 = type metadata accessor for Logger();
            __swift_project_value_buffer(v24, (uint64_t)static Logger.findingExperience);
            v25 = v2;
            v26 = v23;
            v27 = v25;
            v28 = v23;
            v29 = Logger.logObject.getter();
            v30 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v29, v30))
            {
              v58 = v4;
              v31 = swift_slowAlloc();
              v55 = (_QWORD *)swift_slowAlloc();
              v57 = (void *)swift_slowAlloc();
              v61[0] = v57;
              *(_DWORD *)v31 = 138412546;
              v54 = v23;
              v60 = v19;
              v32 = v27;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *v55 = v27;

              *(_WORD *)(v31 + 12) = 2080;
              swift_getErrorValue();
              v33 = Error.localizedDescription.getter();
              getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, (uint64_t *)v61);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();

              _os_log_impl(&dword_21B042000, v29, v30, "🧭 FMR1HaptiCtrl%@: failed parametering tap haptic player: %s", (uint8_t *)v31, 0x16u);
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
              swift_arrayDestroy();
              MEMORY[0x22075D4E4](v55, -1, -1);
              swift_arrayDestroy();
              MEMORY[0x22075D4E4](v57, -1, -1);
              v35 = v31;
              v4 = v58;
              MEMORY[0x22075D4E4](v35, -1, -1);

            }
            else
            {

            }
          }
        }
        v36 = *(void (**)(void *, id *))&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler];
        if (v36)
        {
          v37 = (uint64_t)&v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_tapHapticContext];
          swift_beginAccess();
          outlined init with copy of Any?(v37, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for Any?);
          v38 = v4;
          outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v36);
          v36(v3, v61);

          outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v36);
          outlined destroy of Any?((uint64_t)v61);
        }
        v61[0] = 0;
        if (objc_msgSend(v8, sel_startAtTime_error_, v61, 0.0, v54))
        {
          v39 = v61[0];

          swift_unknownObjectRelease();
          v2[OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_hapticsMayBePlaying] = 1;
        }
        else
        {
          v40 = v61[0];
          v41 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          if (one-time initialization token for findingExperience != -1)
            swift_once();
          v42 = type metadata accessor for Logger();
          __swift_project_value_buffer(v42, (uint64_t)static Logger.findingExperience);
          v43 = v2;
          v44 = v41;
          v45 = v43;
          v46 = v41;
          v47 = Logger.logObject.getter();
          v48 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v47, v48))
          {
            v49 = swift_slowAlloc();
            v50 = (_QWORD *)swift_slowAlloc();
            type = (void *)swift_slowAlloc();
            v61[0] = type;
            *(_DWORD *)v49 = 138412546;
            v59 = v4;
            v51 = v45;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *v50 = v45;

            *(_WORD *)(v49 + 12) = 2080;
            swift_getErrorValue();
            v52 = Error.localizedDescription.getter();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)v61);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();

            _os_log_impl(&dword_21B042000, v47, v48, "🧭 FMR1HaptiCtrl%@: failed playing single tap haptic (%s)", (uint8_t *)v49, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](v50, -1, -1);
            swift_arrayDestroy();
            MEMORY[0x22075D4E4](type, -1, -1);
            MEMORY[0x22075D4E4](v49, -1, -1);

            swift_unknownObjectRelease();
          }
          else
          {
            swift_unknownObjectRelease();

          }
        }
      }
      else
      {
        v10 = v61[0];
        v11 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
}

void partial apply for closure #1 in FMR1HapticsController.setUpHaptics()()
{
  uint64_t v0;

  closure #1 in FMR1HapticsController.setUpHaptics()(v0);
}

void partial apply for closure #2 in FMR1HapticsController.setUpHaptics()(uint64_t a1)
{
  uint64_t v1;

  closure #2 in FMR1HapticsController.setUpHaptics()(a1, v1);
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

Swift::String __swiftcall FMFindingLocalizedString(_:fallbackKey:tableName:)(Swift::String _, Swift::String_optional fallbackKey, Swift::String_optional tableName)
{
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t ObjCClassFromMetadata;
  id v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String_optional v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  void *v24;
  Swift::String result;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;

  object = tableName.value._object;
  countAndFlagsBits = tableName.value._countAndFlagsBits;
  v5 = fallbackKey.value._object;
  v26 = fallbackKey.value._countAndFlagsBits;
  v6 = _._object;
  v7 = _._countAndFlagsBits;
  type metadata accessor for FMBTDistanceView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v9 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = v7;
  v10._object = v6;
  String.append(_:)(v10);
  v27._countAndFlagsBits = 0xD000000000000019;
  v27._object = (void *)0x800000021B0FE7B0;
  v11._countAndFlagsBits = v7;
  v11._object = v6;
  v12.value._countAndFlagsBits = countAndFlagsBits;
  v12.value._object = object;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v9, v13, v27);
  v15 = v14._countAndFlagsBits;
  v16 = v14._object;
  swift_bridgeObjectRelease();
  v17 = v14._countAndFlagsBits == v7 && v14._object == v6;
  if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    if (v5)
    {
      swift_bridgeObjectRelease();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = v26;
      v18._object = v5;
      String.append(_:)(v18);
      v28._countAndFlagsBits = 0xD000000000000019;
      v28._object = (void *)0x800000021B0FE7B0;
      v19._countAndFlagsBits = v26;
      v19._object = v5;
      v20.value._countAndFlagsBits = countAndFlagsBits;
      v20.value._object = object;
      v21._countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v9, v21, v28);
      v15 = v22._countAndFlagsBits;
      v16 = v22._object;
      swift_bridgeObjectRelease();
    }
  }

  v23 = v15;
  v24 = v16;
  result._object = v24;
  result._countAndFlagsBits = v23;
  return result;
}

uint64_t one-time initialization function for default(uint64_t a1)
{
  return one-time initialization function for default(a1, static Logger.default);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for findingExperience(uint64_t a1)
{
  return one-time initialization function for default(a1, static Logger.findingExperience);
}

uint64_t one-time initialization function for default(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

double FMPFSKQuadrant.randomPositionAlongDiskWithRadius(_:defaultAngle:multiplier:clockwise:)(uint64_t a1, char a2, uint64_t a3, char a4, unsigned __int8 a5, char a6)
{
  double v6;
  int v10;

  v6 = 0.0;
  if ((a2 & 1) == 0)
  {
    v10 = a5;
    specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1, 0.0, 3.14159265);
    if (v10 == 2)
      specialized RandomNumberGenerator.next<A>(upperBound:)(0x7FFFFFFFFFFFFFFFLL);
    if ((a4 & 1) != 0)
      __asm { BR              X10 }
    v6 = *(double *)&a3;
    __sincos_stret(*(double *)&a3);
  }
  return v6;
}

void sub_21B0B8040()
{
  JUMPOUT(0x21B0B7FECLL);
}

void sub_21B0B8058()
{
  JUMPOUT(0x21B0B7FECLL);
}

void sub_21B0B8070()
{
  JUMPOUT(0x21B0B7FECLL);
}

void sub_21B0B8088()
{
  JUMPOUT(0x21B0B7FECLL);
}

void sub_21B0B80A0()
{
  JUMPOUT(0x21B0B7FECLL);
}

BOOL static FMFindingType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void FMFindingType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingType()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int FMFindingType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingType()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void FMFindingTechnology.hash(into:)()
{
  __int16 *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    v2 = v1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int FMFindingTechnology.hashValue.getter()
{
  __int16 *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x80000000) != 0)
  {
    v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    v2 = v1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingTechnology()
{
  __int16 *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = *v0;
  if ((v1 & 0x80000000) != 0)
  {
    v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    v2 = v1;
  }
  Hasher._combine(_:)(v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingTechnology()
{
  __int16 *v0;
  unsigned int v1;
  unsigned int v2;

  v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x80000000) != 0)
  {
    v2 = (v1 >> 8) & 0x7F;
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(v1 & 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    v2 = v1;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL specialized static FMFindingTechnology.== infix(_:_:)(__int16 *a1, unsigned __int16 *a2)
{
  int v2;
  int v3;

  v2 = (unsigned __int16)*a1;
  v3 = *a2;
  if (*a1 < 0)
  {
    if ((v3 & 0x8000) != 0 && ((v2 & 1) == 0) != (v3 & 1))
      return ((v3 ^ v2) & 0x7F00) == 0;
  }
  else if ((v3 & 0x8000) == 0)
  {
    return (v3 ^ v2) == 0;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type FMFindingType and conformance FMFindingType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingType and conformance FMFindingType;
  if (!lazy protocol witness table cache variable for type FMFindingType and conformance FMFindingType)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingType, &type metadata for FMFindingType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingType and conformance FMFindingType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMExperienceType and conformance FMExperienceType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMExperienceType and conformance FMExperienceType;
  if (!lazy protocol witness table cache variable for type FMExperienceType and conformance FMExperienceType)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMExperienceType, &type metadata for FMExperienceType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMExperienceType and conformance FMExperienceType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingTechnology and conformance FMFindingTechnology()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingTechnology and conformance FMFindingTechnology;
  if (!lazy protocol witness table cache variable for type FMFindingTechnology and conformance FMFindingTechnology)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingTechnology, &type metadata for FMFindingTechnology);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingTechnology and conformance FMFindingTechnology);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21B0B85E0 + 4 * byte_21B0F8845[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21B0B8614 + 4 * byte_21B0F8840[v4]))();
}

uint64_t sub_21B0B8614(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0B861C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0B8624);
  return result;
}

uint64_t sub_21B0B8630(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0B8638);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21B0B863C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0B8644(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMFindingType()
{
  return &type metadata for FMFindingType;
}

uint64_t storeEnumTagSinglePayload for FMExperienceType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21B0B86AC + 4 * byte_21B0F884F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21B0B86E0 + 4 * byte_21B0F884A[v4]))();
}

uint64_t sub_21B0B86E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0B86E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0B86F0);
  return result;
}

uint64_t sub_21B0B86FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0B8704);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21B0B8708(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0B8710(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMExperienceType()
{
  return &type metadata for FMExperienceType;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for FMFindingTechnology(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0xFFF)
    goto LABEL_17;
  if (a2 + 61441 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 61441 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 61441;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 61441;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 61441;
  }
LABEL_17:
  v6 = ((*a1 >> 15) | (2 * ((*a1 >> 4) & 0x7C0 | (*a1 >> 2)))) ^ 0xFFF;
  if (v6 >= 0xFFE)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for FMFindingTechnology(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 61441 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 61441 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFFE)
    return ((uint64_t (*)(void))((char *)&loc_21B0B8830 + 4 * byte_21B0F8859[v4]))();
  *a1 = a2 - 4095;
  return ((uint64_t (*)(void))((char *)sub_21B0B8864 + 4 * byte_21B0F8854[v4]))();
}

uint64_t sub_21B0B8864(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_21B0B886C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x21B0B8874);
  return result;
}

uint64_t sub_21B0B8894(uint64_t result, int a2)
{
  unsigned int v2;

  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x21B0B889CLL);
  v2 = ((-a2 >> 1) & 0x7FF) - (a2 << 11);
  *(_WORD *)result = (16 * v2) & 0xFC00 | (4 * (v2 & 0x3F));
  return result;
}

uint64_t sub_21B0B88A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_21B0B88A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t getEnumTag for FMFindingTechnology(unsigned __int16 *a1)
{
  return *a1 >> 15;
}

_WORD *destructiveProjectEnumData for FMFindingTechnology(_WORD *result)
{
  *result &= ~0x8000u;
  return result;
}

_WORD *destructiveInjectEnumTag for FMFindingTechnology(_WORD *result, __int16 a2)
{
  *result = *result & 0x303 | (a2 << 15);
  return result;
}

ValueMetadata *type metadata accessor for FMFindingTechnology()
{
  return &type metadata for FMFindingTechnology;
}

uint64_t UIFont.font(with:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;
  uint64_t result;
  Swift::String v7;

  v3 = objc_msgSend(v1, sel_fontDescriptor);
  v4 = objc_msgSend(v3, sel_fontDescriptorWithSymbolicTraits_, a1);

  if (v4)
  {
    v5 = objc_msgSend((id)objc_opt_self(), sel_fontWithDescriptor_size_, v4, 0.0);

    return (uint64_t)v5;
  }
  else
  {
    _StringGuts.grow(_:)(61);
    v7._object = (void *)0x800000021B0FE810;
    v7._countAndFlagsBits = 0xD00000000000003BLL;
    String.append(_:)(v7);
    type metadata accessor for UIFontDescriptorSymbolicTraits(0);
    _print_unlocked<A, B>(_:_:)();
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

id FMPFSKLabelNode.init(experienceType:style:text:position:normalizedIndex:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6, double a7)
{
  _BYTE *v7;
  uint64_t v15;
  uint64_t v16;
  id v17;
  double v18;
  uint64_t v19;
  double v20;
  double v21;
  char v22;
  int v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  void *v27;
  char *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  void *v37;
  Swift::String v38;
  Swift::Bool v39;
  double v40;
  id v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  id v47;
  int v49;
  objc_super v50;
  _QWORD v51[7];
  char v52;
  char v53[8];
  uint64_t v54;

  outlined init with take of FMPFSKLabelNodeStyle?(a2, (uint64_t)v51);
  v16 = v51[0];
  v15 = v51[1];
  v17 = (id)v51[2];
  v18 = *(double *)&v51[3];
  v19 = v51[4];
  v20 = *(double *)&v51[5];
  v21 = *(double *)&v51[6];
  v22 = v52;
  v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_experienceType] = *a1;
  outlined init with take of FMPFSKLabelNodeStyle?(a2, (uint64_t)v53);
  if (v54)
  {
    v23 = v22 & 1;
    v24 = v7;
  }
  else
  {
    v25 = one-time initialization token for r1NoAR;
    v26 = v7;
    if (v25 != -1)
      swift_once();
    v16 = static FMPFSKLabelNodeStyle.r1NoAR;
    v15 = *(_QWORD *)algn_25513FD18;
    v27 = (void *)qword_25513FD20;
    v18 = *(double *)&qword_25513FD28;
    v20 = *((double *)&xmmword_25513FD30 + 1);
    v19 = xmmword_25513FD30;
    v21 = *(double *)&qword_25513FD40;
    v23 = byte_25513FD48;
    swift_bridgeObjectRetain();
    v17 = v27;
  }
  v28 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_style];
  *(_QWORD *)v28 = v16;
  *((_QWORD *)v28 + 1) = v15;
  *((_QWORD *)v28 + 2) = v17;
  *((double *)v28 + 3) = v18;
  *((_QWORD *)v28 + 4) = v19;
  *((double *)v28 + 5) = v20;
  *((double *)v28 + 6) = v21;
  v49 = v23;
  v28[56] = v23;
  *(double *)&v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_normalizedIndex] = a7;
  v29 = objc_allocWithZone(MEMORY[0x24BDE9E90]);
  outlined retain of FMPFSKLabelNodeStyle?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FMPFSKLabelNodeStyle?);
  swift_bridgeObjectRetain_n();
  v30 = v17;
  v31 = (void *)MEMORY[0x22075C584](v16, v15);
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v29, sel_initWithFontNamed_, v31);

  objc_msgSend(v32, sel_setFontSize_, v18);
  objc_msgSend(v32, sel_setFontColor_, v30);
  v33 = (void *)MEMORY[0x22075C584](a3, a4);
  objc_msgSend(v32, sel_setText_, v33);

  objc_msgSend(v32, sel_setVerticalAlignmentMode_, 1);
  objc_msgSend(v32, sel_setHorizontalAlignmentMode_, v19);
  objc_msgSend(v32, sel_setNumberOfLines_, 1);
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_labelNode] = v32;
  v34 = v32;

  v50.receiver = v7;
  v50.super_class = (Class)type metadata accessor for FMPFSKLabelNode();
  v35 = objc_msgSendSuper2(&v50, sel_init);
  objc_msgSend(v35, sel_addChild_, v34);
  v36 = v35;
  v37 = (void *)MEMORY[0x22075C584](a3, a4);
  objc_msgSend(v36, sel_setName_, v37);

  v38._countAndFlagsBits = 49;
  v38._object = (void *)0xE100000000000000;
  v39 = String.hasSuffix(_:)(v38);
  swift_bridgeObjectRelease();
  v40 = 0.0;
  if (v39)
  {
    v41 = objc_msgSend(v34, sel_horizontalAlignmentMode, 0.0);
    v40 = 0.0;
    if (v41 == (id)2)
    {
      objc_msgSend(v34, sel_fontSize, 0.0);
      v40 = v42 * -0.125;
    }
  }
  if (v49)
    v43 = 0.0;
  else
    v43 = v21;
  if (v49)
    v44 = 0.0;
  else
    v44 = v20;
  v45 = v44 + a5 + v40;
  v46 = v43 + a6;
  v47 = v36;
  objc_msgSend(v47, sel_setPosition_, v45, v46);
  outlined retain of FMPFSKLabelNodeStyle?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FMPFSKLabelNodeStyle?);

  swift_bridgeObjectRelease();
  return v47;
}

uint64_t FMPFSKLabelNode.description.getter()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease();
  v3 = _Pointer.debugDescription.getter();
  v5 = specialized BidirectionalCollection.suffix(_:)(6uLL, v3, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = MEMORY[0x22075C5CC](v5, v7, v9, v11);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 30768;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 32;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  v15 = objc_msgSend(v0, sel_name);
  if (v15)
  {
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v2 = v18;

  }
  else
  {
    v17 = 0;
  }
  v19._countAndFlagsBits = v17;
  v19._object = v2;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x3E4025202CLL;
  v20._object = (void *)0xE500000000000000;
  String.append(_:)(v20);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_21B0F8460;
  v22 = objc_msgSend(v1, sel_isHidden);
  v23 = lazy protocol witness table accessor for type String and conformance String();
  v24 = 0x656C6269736976;
  if (v22)
    v24 = 0x6E6564646968;
  v25 = 0xE700000000000000;
  *(_QWORD *)(v21 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v21 + 64) = v23;
  if (v22)
    v25 = 0xE600000000000000;
  *(_QWORD *)(v21 + 32) = v24;
  *(_QWORD *)(v21 + 40) = v25;
  v26 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v26;
}

void FMPFSKLabelNode.__ivar_destroyer()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
}

id FMPFSKLabelNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKLabelNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKLabelNode()
{
  return objc_opt_self();
}

uint64_t outlined init with take of FMPFSKLabelNodeStyle?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FMPFSKLabelNodeStyle?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id outlined copy of FMPFSKLabelNodeStyle?(uint64_t a1, uint64_t a2, void *a3)
{
  id result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return a3;
  }
  return result;
}

uint64_t outlined retain of FMPFSKLabelNodeStyle?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  return a1;
}

void outlined consume of FMPFSKLabelNodeStyle?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();

  }
}

double one-time initialization function for default()
{
  id v0;
  id v1;
  double result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.6);

  result = 0.5;
  static FMPFRingViewStyle.default = xmmword_21B0F8A40;
  qword_25513C4C8 = 0x3FC41B2F769CF0E0;
  qword_25513C4D0 = (uint64_t)v1;
  return result;
}

{
  void *v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  double result;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x24BEBE1F0]);
  v2 = UIFont.font(with:)(2);

  v3 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x24BEBE210]);
  v4 = UIFont.font(with:)(2);

  v5 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x24BEBE250]);
  v6 = UIFont.font(with:)(2);

  v7 = objc_msgSend(v0, sel_preferredFontForTextStyle_, *MEMORY[0x24BEBE1D0]);
  v8 = UIFont.font(with:)(2);

  *(_QWORD *)&static FMFindingViewStyle.default = v2;
  *((_QWORD *)&static FMFindingViewStyle.default + 1) = v4;
  qword_25513FC40 = v6;
  unk_25513FC48 = v8;
  xmmword_25513FC50 = xmmword_21B0F8E30;
  unk_25513FC60 = xmmword_21B0F8E40;
  xmmword_25513FC70 = xmmword_21B0F8E50;
  unk_25513FC80 = xmmword_21B0F8E60;
  xmmword_25513FC90 = xmmword_21B0F8E70;
  unk_25513FCA0 = xmmword_21B0F8E80;
  result = 111.0;
  xmmword_25513FCB0 = xmmword_21B0F8E90;
  qword_25513FCC0 = 0x4014000000000000;
  return result;
}

{
  id v0;
  id v1;
  double result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.8);

  static FMR1GlyphButtonStyle.default = xmmword_21B0F9210;
  qword_25513FCE0 = 0x4026000000000000;
  qword_25513FCE8 = (uint64_t)v1;
  result = 1.15;
  xmmword_25513FCF0 = xmmword_21B0F9220;
  qword_25513FD00 = 0x3FE0000000000000;
  return result;
}

id FMPFRingView.init(sceneSize:diskRadiusScale:verticalOffset:)(uint64_t a1, char a2, double a3, double a4, double a5)
{
  char *v5;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  double *v16;
  double v17;
  double v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  CGAffineTransform v35;
  objc_super v36;

  v11 = &v5[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style];
  v12 = one-time initialization token for default;
  v13 = v5;
  if (v12 != -1)
    swift_once();
  v14 = qword_25513C4C8;
  v15 = (void *)qword_25513C4D0;
  *(_OWORD *)v11 = static FMPFRingViewStyle.default;
  *((_QWORD *)v11 + 2) = v14;
  *((_QWORD *)v11 + 3) = v15;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle] = 0;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle] = 0;
  v16 = (double *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_sceneSize];
  *v16 = a3;
  v16[1] = a4;
  v17 = *(double *)&a1;
  if ((a2 & 1) != 0)
    v17 = 0.0;
  *(double *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_verticalOffset] = v17;
  if (a4 >= a3)
    v18 = a3;
  else
    v18 = a4;
  *(double *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_diskRadius] = v18 * 0.5 * a5;
  v19 = v15;
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3FA015BF9217271ALL, 0, 0, 1);
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3FA015BF9217271ALL, 0, 0, 1);
  *(_QWORD *)&v13[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);

  v36.receiver = v13;
  v36.super_class = (Class)type metadata accessor for FMPFRingView();
  v20 = objc_msgSendSuper2(&v36, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v21 = (void *)objc_opt_self();
  v22 = v20;
  v23 = objc_msgSend(v21, sel_clearColor);
  objc_msgSend(v22, sel_setBackgroundColor_, v23);

  CGAffineTransformMakeRotation(&v35, -1.57079633);
  objc_msgSend(v22, sel_setTransform_, &v35);
  if (one-time initialization token for default != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.default);
  v25 = v22;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    v29 = swift_slowAlloc();
    *(_QWORD *)&v35.a = v29;
    *(_DWORD *)v28 = 136315138;
    v30 = objc_msgSend(v25, sel_description);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v33 = v32;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v26, v27, "🧭 FMPFRingView%s: init", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v29, -1, -1);
    MEMORY[0x22075D4E4](v28, -1, -1);

  }
  else
  {

  }
  return v25;
}

id FMPFRingView.__deallocating_deinit()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  objc_class *v11;
  uint64_t v13;
  objc_super v14;

  if (one-time initialization token for default != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    v13 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = objc_msgSend(v2, sel_description);
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v3, v4, "🧭 FMPFRingView%s: deinit", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v6, -1, -1);
    MEMORY[0x22075D4E4](v5, -1, -1);

  }
  else
  {

  }
  v11 = (objc_class *)type metadata accessor for FMPFRingView();
  v14.receiver = v2;
  v14.super_class = v11;
  return objc_msgSendSuper2(&v14, sel_dealloc);
}

Swift::Void __swiftcall FMPFRingView.updateWithDeltaTime(_:)(Swift::Double a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  *(Swift::Double *)(v11 + 24) = a1;
  v12 = (void *)objc_opt_self();
  v13 = v1;
  if (objc_msgSend(v12, sel_isMainThread))
  {
    closure #1 in FMPFRingView.updateWithDeltaTime(_:)(v13, a1);
    swift_release();
  }
  else
  {
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v14 = (void *)static OS_dispatch_queue.main.getter();
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = partial apply for closure #1 in FMPFRingView.updateWithDeltaTime(_:);
    *(_QWORD *)(v15 + 24) = v11;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v15;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_21;
    v16 = _Block_copy(aBlock);
    v19 = v4;
    v17 = v16;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v10, v6, v17);
    _Block_release(v17);
    swift_release();

    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

id closure #1 in FMPFRingView.updateWithDeltaTime(_:)(char *a1, Swift::Double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;
  uint64_t v22;
  double *v23;
  double v24;

  v4 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring;
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring];
  if (!FMPFFluidSpring.isStable.getter())
  {
    FLSpring.step(_:)(a2);
    *(_BYTE *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v6 = *(_QWORD *)&a1[v4];
    v7 = (double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v6+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v8 = *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    else
      v8 = v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v9 = (void *)objc_opt_self();
    objc_msgSend(v9, sel_begin);
    objc_msgSend(v9, sel_setDisableActions_, 1);
    objc_msgSend(a1, sel_setAlpha_, v8);
    objc_msgSend(v9, sel_commit);
  }
  v10 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring;
  v11 = *(_QWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring];
  if (!FMPFFluidSpring.isStable.getter() || !FMPFFluidSpring.isStable.getter() || !FMPFFluidSpring.isStable.getter())
  {
    FLSpring.step(_:)(a2);
    *(_BYTE *)(v11 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v12 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring;
    v13 = *(_QWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring];
    FLSpring.step(_:)(a2);
    *(_BYTE *)(v13 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v14 = OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring;
    v15 = *(_QWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring];
    FLSpring.step(_:)(a2);
    *(_BYTE *)(v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v16 = *(_QWORD *)&a1[v10];
    v17 = (double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v17[35] + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v17 + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v16+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v18 = *v17 + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    else
      v18 = v17[35] + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v19 = *(_QWORD *)&a1[v12];
    v20 = (double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v20[35] + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v20 + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v19+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v21 = *v20 + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    else
      v21 = v20[35] + *(double *)(v19 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v22 = *(_QWORD *)&a1[v14];
    v23 = (double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    v24 = *v23 + *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v23[35] + *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v24) <= *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
      v24 = v23[35] + *(double *)(v22 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    *(double *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle] = v18;
    *(double *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle] = v21;
    *(double *)&a1[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] = v24;
  }
  return objc_msgSend(a1, sel_setNeedsDisplay);
}

uint64_t FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(uint64_t a1, char a2, char a3, Swift::Double a4, Swift::Double a5)
{
  void *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char *v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  void *v23;
  char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v11 = type metadata accessor for DispatchWorkItemFlags();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8]();
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(type metadata accessor for DispatchQoS() - 8);
  result = MEMORY[0x24BDAC7A8]();
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (fabs(a5) >= a4)
  {
    v28 = result;
    v29 = v12;
    v19 = a2 & 1;
    v20 = (a2 & 1) != 0;
    v21 = swift_allocObject();
    *(_QWORD *)(v21 + 16) = a1;
    *(_BYTE *)(v21 + 24) = v20;
    v22 = a3 & 1;
    *(_BYTE *)(v21 + 25) = v22;
    *(_QWORD *)(v21 + 32) = v5;
    *(Swift::Double *)(v21 + 40) = a4;
    *(Swift::Double *)(v21 + 48) = a5;
    v23 = (void *)objc_opt_self();
    v24 = v5;
    if (objc_msgSend(v23, sel_isMainThread))
    {
      closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(a1, v19, v22, v24, a4, a5);
      return swift_release();
    }
    else
    {
      type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
      v25 = (void *)static OS_dispatch_queue.main.getter();
      v26 = swift_allocObject();
      *(_QWORD *)(v26 + 16) = partial apply for closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
      *(_QWORD *)(v26 + 24) = v21;
      aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
      aBlock[5] = v26;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_12_0;
      v27 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      static DispatchQoS.unspecified.getter();
      aBlock[0] = MEMORY[0x24BEE4AF8];
      lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x22075C7AC](0, v18, v14, v27);
      _Block_release(v27);
      swift_release();

      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v11);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v28);
    }
  }
  return result;
}

void closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(uint64_t a1, char a2, char a3, char *a4, Swift::Double a5, Swift::Double a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((a2 & 1) != 0)
    *(double *)&a1 = 0.0;
  v10 = *(_QWORD *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngleSpring];
  if ((a3 & 1) != 0)
  {
    v11 = v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v11 = a5;
    *(_BYTE *)(v11 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
    v12 = *(_QWORD *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring]
        + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v12 = a6;
    *(_BYTE *)(v12 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
    v13 = *(_QWORD *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring]
        + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(double *)v13 = *(double *)&a1;
    *(_BYTE *)(v13 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    FLSpring.resetImmediately(toValue:)(a5);
    *(_BYTE *)(v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v14 = *(_QWORD *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngleSpring];
    FLSpring.resetImmediately(toValue:)(a6);
    *(_BYTE *)(v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v15 = *(_QWORD *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScaleSpring];
    FLSpring.resetImmediately(toValue:)(*(Swift::Double *)&a1);
    *(_BYTE *)(v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    *(Swift::Double *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle] = a5;
    *(Swift::Double *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle] = a6;
    *(double *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] = *(double *)&a1;
    objc_msgSend(a4, sel_bounds);
    objc_msgSend(a4, sel_drawRect_);
  }
}

uint64_t FMPFRingView.setOpacity(_:sprung:)(uint64_t a1, char a2, char a3)
{
  void *v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v6 = a2 & 1;
  v7 = type metadata accessor for DispatchWorkItemFlags();
  v21 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8]();
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a1;
  *(_BYTE *)(v13 + 24) = v6;
  *(_BYTE *)(v13 + 25) = a3;
  *(_QWORD *)(v13 + 32) = v3;
  v14 = (void *)objc_opt_self();
  v15 = v3;
  if (objc_msgSend(v14, sel_isMainThread))
  {
    closure #1 in FMPFRingView.setOpacity(_:sprung:)(a1, v6, a3 & 1, v15);
    return swift_release();
  }
  else
  {
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v17 = (void *)static OS_dispatch_queue.main.getter();
    v18 = swift_allocObject();
    *(_QWORD *)(v18 + 16) = partial apply for closure #1 in FMPFRingView.setOpacity(_:sprung:);
    *(_QWORD *)(v18 + 24) = v13;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    aBlock[5] = v18;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_1;
    v19 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v12, v9, v19);
    _Block_release(v19);
    swift_release();

    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v20);
  }
}

void closure #1 in FMPFRingView.setOpacity(_:sprung:)(uint64_t a1, char a2, char a3, char *a4)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;

  if ((a2 & 1) != 0)
    *(double *)&a1 = 0.0;
  v5 = *(_QWORD *)&a4[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_opacitySpring];
  if ((a3 & 1) != 0)
  {
    v6 = v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(double *)v6 = *(double *)&a1;
    *(_BYTE *)(v6 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    FLSpring.resetImmediately(toValue:)(*(Swift::Double *)&a1);
    *(_BYTE *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v8 = (void *)objc_opt_self();
    objc_msgSend(v8, sel_begin);
    objc_msgSend(v8, sel_setDisableActions_, 1);
    objc_msgSend(a4, sel_setAlpha_, *(double *)&a1);
    objc_msgSend(v8, sel_commit);
  }
}

uint64_t type metadata accessor for FMPFRingView()
{
  return objc_opt_self();
}

void destroy for FMPFRingViewStyle(uint64_t a1)
{

}

uint64_t initializeWithCopy for FMPFRingViewStyle(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for FMPFRingViewStyle(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = (void *)a2[3];
  v4 = (void *)a1[3];
  a1[3] = v3;
  v5 = v3;

  return a1;
}

uint64_t assignWithTake for FMPFRingViewStyle(uint64_t a1, uint64_t a2)
{
  void *v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v3 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFRingViewStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFRingViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void *type metadata accessor for FMPFRingViewStyle()
{
  return &unk_24DE2EAF0;
}

uint64_t sub_21B0BAA14()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFRingView.setOpacity(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFRingView.setOpacity(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25), *(char **)(v0 + 32));
}

uint64_t partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags();
    result = MEMORY[0x22075D454](MEMORY[0x24BEE5468], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

uint64_t sub_21B0BAACC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25), *(char **)(v0 + 32), *(Swift::Double *)(v0 + 40), *(Swift::Double *)(v0 + 48));
}

uint64_t sub_21B0BAB08()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in FMPFRingView.updateWithDeltaTime(_:)()
{
  uint64_t v0;

  return closure #1 in FMPFRingView.updateWithDeltaTime(_:)(*(char **)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_21B0BAB38()
{
  swift_release();
  return swift_deallocObject();
}

void specialized FMPFRingView.draw(_:)()
{
  char *v0;
  double Width;
  double v2;
  double Height;
  double v4;
  double v5;
  char *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  double v13;
  id v14;
  id v15;
  CGRect v16;
  CGRect v17;

  objc_msgSend(v0, sel_bounds);
  Width = CGRectGetWidth(v16);
  v2 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_verticalOffset];
  objc_msgSend(v0, sel_bounds);
  Height = CGRectGetHeight(v17);
  v4 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_startAngle];
  v5 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_endAngle];
  v6 = &v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style];
  v7 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style + 16];
  if (v7 + v7 < vabdd_f64(v4, v5))
  {
    v8 = Height * 0.5;
    v9 = Width * 0.5 - v2;
    v10 = -v7;
    if (v4 <= v5)
      v11 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style + 16];
    else
      v11 = -v7;
    if (v4 > v5)
      v10 = *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_style + 16];
    v12 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, v4 > v5, v9, v8, *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_diskRadius]* (*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI12FMPFRingView_additionalRadiusScale] + 1.0), v10 - v4, v11 - v5);
    if (v12)
    {
      v13 = *((double *)v6 + 1);
      v15 = v12;
      objc_msgSend(v15, sel_setLineWidth_, v13);
      objc_msgSend(v15, sel_setLineCapStyle_, 1);
      objc_msgSend(*((id *)v6 + 3), sel_setStroke);
      v14 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
      objc_msgSend(v14, sel_setFill);

      objc_msgSend(v15, sel_stroke);
    }
  }
}

uint64_t FMFindingMeasurement.description.getter()
{
  __int128 *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v1 = (uint64_t)v0;
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v13);
  v11 = v13[1];
  v12 = v13[0];
  v9 = (void *)v13[3];
  v10 = (void *)v13[2];
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)&v14);
  v2 = 0xE300000000000000;
  v3 = 7104878;
  v4 = 7496038;
  switch(v16)
  {
    case 1:
      goto LABEL_4;
    case 2:
      break;
    case 3:
      v2 = 0xE400000000000000;
      v4 = 1918985582;
      break;
    case 4:
      v2 = 0xE400000000000000;
      v4 = 1701995880;
      break;
    case 5:
      v2 = 0xE500000000000000;
      v4 = 0x646E756F66;
      break;
    default:
      v30 = v14;
      v31 = v15 & 1;
      v32 = v16;
      v33 = v17;
      v34 = v18;
      v35 = v19 & 1;
      v36 = v20;
      v37 = v21 & 1;
      v38 = v22 & 1;
      v39 = v23;
      v40 = v24 & 1;
      v41 = v25 & 1;
      v42 = v26 & 1;
      v43 = v27;
      v44 = v28;
      v45 = v29 & 1;
      outlined copy of FMFindingDistance?(v12, v11, v10, v9);
      v3 = FMFindingDistance.description.getter();
      v2 = v5;
LABEL_4:
      v6 = v2;
      String.append(_:)(*(Swift::String *)&v3);
      outlined release of FMFindingMeasurement(v1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMFindingMeasurement);
      swift_bridgeObjectRelease();
      v4 = 0x3A65736963657270;
      v2 = 0xE900000000000020;
      break;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_21B0F8460;
  *(_QWORD *)(v7 + 56) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v7 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v2;
  return String.init(format:_:)();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingTrend(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance FMFindingTrend()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_21B0BB014()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingTrend()
{
  __asm { BR              X10 }
}

uint64_t sub_21B0BB0C0()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingTrend()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_21B0BB164()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingTrend@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FMFindingTrend.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingTrend()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_21B0BB230 + 4 * byte_21B0F8AA1[*v0]))();
}

void sub_21B0BB230(_QWORD *a1@<X8>)
{
  *a1 = 0x6973616572636E69;
  a1[1] = 0xEA0000000000676ELL;
}

void sub_21B0BB254(_QWORD *a1@<X8>)
{
  *a1 = 0x6973616572636564;
  a1[1] = 0xEA0000000000676ELL;
}

void sub_21B0BB274(_QWORD *a1@<X8>)
{
  *a1 = 0x656C62617473;
  a1[1] = 0xE600000000000000;
}

uint64_t protocol witness for Decodable.init(from:) in conformance FMFindingTrend()
{
  lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend();
  return RawRepresentable<>.init(from:)();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingTrend()
{
  lazy protocol witness table accessor for type FMFindingTrend and conformance FMFindingTrend();
  return RawRepresentable<>.encode(to:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingMeasurement.CodingKeys(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingMeasurement.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMFindingMeasurement.CodingKeys()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingMeasurement.CodingKeys()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMFindingMeasurement.CodingKeys@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingMeasurement.CodingKeys.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMFindingMeasurement.CodingKeys(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701869940;
  if (*v1)
    v2 = 0x65636E6174736964;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE800000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance FMFindingMeasurement.CodingKeys()
{
  _BYTE *v0;

  if (*v0)
    return 0x65636E6174736964;
  else
    return 1701869940;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance FMFindingMeasurement.CodingKeys@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingMeasurement.CodingKeys.init(rawValue:), v3);
  result = swift_bridgeObjectRelease();
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance FMFindingMeasurement.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingMeasurement.CodingKeys()
{
  lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance FMFindingMeasurement.CodingKeys()
{
  lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t FMFindingMeasurement.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _QWORD v51[12];
  unsigned __int8 v52;
  _QWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 v64;
  uint64_t v65;

  v2 = v1;
  outlined init with take of FMFindingMeasurement(v2, (uint64_t)v51);
  v35 = v51[1];
  v36 = v51[0];
  v33 = (void *)v51[3];
  v34 = (void *)v51[2];
  v31 = v51[5];
  v32 = v51[4];
  v29 = v51[7];
  v30 = v51[6];
  v27 = v51[9];
  v28 = v51[8];
  v25 = v51[11];
  v26 = v51[10];
  v24 = v52;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<FMFindingMeasurement.CodingKeys>);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with take of FMFindingMeasurement(v2, (uint64_t)v53);
  v8 = v54;
  switch(v54)
  {
    case 2:
      LOBYTE(v38) = 0;
      goto LABEL_9;
    case 3:
      LOBYTE(v38) = 0;
      goto LABEL_9;
    case 4:
      LOBYTE(v38) = 0;
      goto LABEL_9;
    case 5:
      LOBYTE(v38) = 0;
LABEL_9:
      KeyedEncodingContainer.encode(_:forKey:)();
      result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      break;
    default:
      v13 = v53[1];
      v14 = v53[0];
      v22 = v56;
      v23 = v55;
      v20 = v58;
      v21 = v57;
      v18 = v60;
      v19 = v59;
      v9 = v63;
      v16 = v62;
      v17 = v61;
      v15 = v64;
      LOBYTE(v38) = 0;
      outlined copy of FMFindingDistance?(v36, v35, v34, v33);
      v10 = v65;
      KeyedEncodingContainer.encode(_:forKey:)();
      if (!v10)
      {
        v38 = v14;
        v39 = v13;
        v40 = v8;
        v41 = v23;
        v42 = v22;
        v43 = v21;
        v44 = v20;
        v45 = v19;
        v46 = v18;
        v47 = v17;
        v48 = v16;
        v49 = v9;
        v50 = v15;
        v37 = 1;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FMFindingDistance?);
        lazy protocol witness table accessor for type FMFindingDistance? and conformance <A> A?();
        KeyedEncodingContainer.encode<A>(_:forKey:)();
      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      result = outlined release of FMFindingMeasurement((uint64_t)v2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMFindingMeasurement);
      break;
  }
  return result;
}

void FMFindingMeasurement.hash(into:)()
{
  __int128 *v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;

  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v19);
  v17 = v19[1];
  v18 = v19[0];
  v15 = (void *)v19[3];
  v16 = (void *)v19[2];
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)&v20);
  v1 = v22;
  switch(v22)
  {
    case 2:
      v2 = 1;
      goto LABEL_6;
    case 3:
      v2 = 2;
      goto LABEL_6;
    case 4:
      v2 = 3;
      goto LABEL_6;
    case 5:
      v2 = 4;
LABEL_6:
      Hasher._combine(_:)(v2);
      break;
    default:
      v13 = v20;
      v14 = v21;
      v3 = v23;
      v4 = v24;
      v5 = v25;
      v6 = v26;
      v7 = v27;
      v8 = v28;
      v9 = v29;
      v10 = v30;
      v11 = v31;
      v12 = v32;
      Hasher._combine(_:)(5uLL);
      if (v1 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v33 = v13;
        v34 = v14 & 1;
        v35 = v1;
        v36 = v3;
        v37 = v4;
        v38 = v5 & 1;
        v39 = v6;
        v40 = v7 & 0x101;
        v41 = v8;
        v42 = v9 & 0x101;
        v43 = BYTE2(v9) & 1;
        v44 = v10;
        v45 = v11;
        v46 = v12 & 1;
        Hasher._combine(_:)(1u);
        outlined copy of FMFindingDistance?(v18, v17, v16, v15);
        FMFindingDistance.hash(into:)();
      }
      outlined release of FMFindingMeasurement((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMFindingMeasurement);
      break;
  }
}

uint64_t FMFindingMeasurement.calculateTrend(from:)(uint64_t a1)
{
  __int128 *v1;
  BOOL v3;
  char v4;
  unint64_t v5;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[6];
  _BYTE v11[16];
  unint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  outlined init with take of FMFindingMeasurement(v1, (uint64_t)v13);
  switch(v14)
  {
    case 2:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6)
        return 1;
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      v3 = v12 >= 6;
      v4 = 8 * v12;
      v5 = 0x20202030000;
      goto LABEL_12;
    case 3:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6)
        return 1;
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      v3 = v12 >= 6;
      v5 = 0x20203010000;
      v4 = 8 * v12;
      goto LABEL_12;
    case 4:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6)
        return 1;
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      v3 = v12 >= 6;
      v4 = 8 * v12;
      v5 = 0x20301010000;
      goto LABEL_12;
    case 5:
      outlined init with take of FMFindingMeasurement?(a1, (uint64_t)&v8);
      if (v9 == 6)
        return 1;
      outlined init with take of FMFindingMeasurement(&v8, (uint64_t)v10);
      outlined init with take of FMFindingMeasurement(v10, (uint64_t)v11);
      v3 = v12 >= 6;
      v4 = 8 * v12;
      v5 = 0x30101010000;
LABEL_12:
      v7 = v5 >> v4;
      if (v3)
        return 0;
      else
        return v7;
    default:
      return 0;
  }
}

Swift::Int FMFindingMeasurement.hashValue.getter()
{
  __int128 *v0;
  uint64_t v1;
  Swift::UInt v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v20);
  v18 = v20[1];
  v19 = v20[0];
  v16 = (void *)v20[3];
  v17 = (void *)v20[2];
  Hasher.init(_seed:)();
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)&v21);
  v1 = v23;
  switch(v23)
  {
    case 2:
      v2 = 1;
      goto LABEL_6;
    case 3:
      v2 = 2;
      goto LABEL_6;
    case 4:
      v2 = 3;
      goto LABEL_6;
    case 5:
      v2 = 4;
LABEL_6:
      Hasher._combine(_:)(v2);
      break;
    default:
      v4 = v22;
      v15 = v21;
      v5 = v24;
      v6 = v25;
      v7 = v26;
      v8 = v27;
      v9 = v28;
      v10 = v29;
      v11 = v30;
      v12 = v31;
      v13 = v32;
      v14 = v33;
      Hasher._combine(_:)(5uLL);
      if (v1 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v34 = v15;
        v35 = v4 & 1;
        v36 = v1;
        v37 = v5;
        v38 = v6;
        v39 = v7 & 1;
        v40 = v8;
        v41 = v9 & 0x101;
        v42 = v10;
        v43 = v11 & 0x101;
        v44 = BYTE2(v11) & 1;
        v45 = v12;
        v46 = v13;
        v47 = v14 & 1;
        Hasher._combine(_:)(1u);
        outlined copy of FMFindingDistance?(v19, v18, v17, v16);
        FMFindingDistance.hash(into:)();
      }
      outlined release of FMFindingMeasurement((uint64_t)v0, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMFindingMeasurement);
      break;
  }
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FMFindingMeasurement(__int128 *a1, __int128 *a2)
{
  __int128 v4[6];
  __int128 v5[6];

  outlined init with take of FMFindingMeasurement(a1, (uint64_t)v4);
  outlined init with take of FMFindingMeasurement(a2, (uint64_t)v5);
  return specialized static FMFindingMeasurement.== infix(_:_:)(v4, v5);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMFindingMeasurement()
{
  __int128 *v0;
  _BYTE v2[104];

  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v2);
  return FMFindingMeasurement.hashValue.getter();
}

void protocol witness for Hashable.hash(into:) in conformance FMFindingMeasurement()
{
  __int128 *v0;
  _BYTE v1[104];

  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v1);
  FMFindingMeasurement.hash(into:)();
}

uint64_t outlined init with take of FMFindingMeasurement(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = *a1;
  v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  *(_BYTE *)(a2 + 96) = *((_BYTE *)a1 + 96);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

uint64_t outlined init with take of FMFindingMeasurement?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for FMFindingMeasurement?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for FMFindingTrend(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_21B0BC074 + 4 * byte_21B0F8ABA[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_21B0BC0A8 + 4 * byte_21B0F8AB5[v4]))();
}

uint64_t sub_21B0BC0A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0BC0B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0BC0B8);
  return result;
}

uint64_t sub_21B0BC0C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0BC0CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_21B0BC0D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0BC0D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMFindingTrend()
{
  return &type metadata for FMFindingTrend;
}

void destroy for FMFindingMeasurement(uint64_t a1)
{
  void *v1;
  uint64_t v2;

  v1 = *(void **)(a1 + 16);
  LODWORD(v2) = -1;
  if ((unint64_t)v1 < 0xFFFFFFFF)
    v2 = *(_QWORD *)(a1 + 16);
  if ((int)v2 - 1 <= 0 && v1 != (void *)1)
  {

  }
}

uint64_t initializeWithCopy for FMFindingMeasurement(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;

  v3 = *(void **)(a2 + 16);
  LODWORD(v4) = -1;
  if ((unint64_t)v3 < 0xFFFFFFFF)
    v4 = *(_QWORD *)(a2 + 16);
  if ((int)v4 - 1 > 0 || v3 == (void *)1)
  {
    v5 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v5;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
    v9 = *(void **)(a2 + 24);
    v8 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v8;
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_WORD *)(a1 + 73) = *(_WORD *)(a2 + 73);
    v10 = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 88) = v10;
    *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
    v11 = v3;
    v12 = v9;
  }
  return a1;
}

uint64_t assignWithCopy for FMFindingMeasurement(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;

  v4 = *(void **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 >= 0xFFFFFFFF)
    LODWORD(v6) = -1;
  else
    v6 = *(_QWORD *)(a1 + 16);
  v7 = v6 - 1;
  v8 = a2[2];
  if (v8 < 0xFFFFFFFF)
    v5 = a2[2];
  v9 = v5 - 1;
  if (v7 > 0)
  {
    if (v9 <= 0)
    {
LABEL_13:
      if (v8 != 1)
      {
        v16 = *a2;
        *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
        *(_QWORD *)a1 = v16;
        v17 = (void *)a2[2];
        *(_QWORD *)(a1 + 16) = v17;
        v18 = (void *)a2[3];
        *(_QWORD *)(a1 + 24) = v18;
        *(_QWORD *)(a1 + 32) = a2[4];
        *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
        *(_QWORD *)(a1 + 48) = a2[6];
        *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
        *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
        *(_QWORD *)(a1 + 64) = a2[8];
        *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
        *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
        *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
        *(_QWORD *)(a1 + 80) = a2[10];
        v19 = a2[11];
        *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
        *(_QWORD *)(a1 + 88) = v19;
        v20 = v17;
        v21 = v18;
        return a1;
      }
    }
LABEL_14:
    v10 = *(_OWORD *)a2;
    v11 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)a1 = v10;
    v12 = *((_OWORD *)a2 + 3);
    v13 = *((_OWORD *)a2 + 4);
    v14 = *((_OWORD *)a2 + 5);
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = v14;
    *(_OWORD *)(a1 + 48) = v12;
    return a1;
  }
  if (v9 > 0)
  {
    if (v4 != (void *)1)
    {

    }
    goto LABEL_14;
  }
  if (v4 == (void *)1)
    goto LABEL_13;
  if (v8 == 1)
  {
    outlined destroy of FMFindingDistance(a1);
    v23 = *((_OWORD *)a2 + 1);
    v22 = *((_OWORD *)a2 + 2);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v23;
    *(_OWORD *)(a1 + 32) = v22;
    v25 = *((_OWORD *)a2 + 4);
    v24 = *((_OWORD *)a2 + 5);
    v26 = *((_OWORD *)a2 + 3);
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_OWORD *)(a1 + 64) = v25;
    *(_OWORD *)(a1 + 80) = v24;
    *(_OWORD *)(a1 + 48) = v26;
  }
  else
  {
    v27 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = v27;
    v28 = (void *)a2[2];
    *(_QWORD *)(a1 + 16) = v28;
    v29 = v28;

    v30 = *(void **)(a1 + 24);
    v31 = (void *)a2[3];
    *(_QWORD *)(a1 + 24) = v31;
    v32 = v31;

    *(_QWORD *)(a1 + 32) = a2[4];
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 48) = a2[6];
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    *(_BYTE *)(a1 + 57) = *((_BYTE *)a2 + 57);
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
    *(_QWORD *)(a1 + 80) = a2[10];
    v33 = a2[11];
    *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
    *(_QWORD *)(a1 + 88) = v33;
  }
  return a1;
}

uint64_t assignWithTake for FMFindingMeasurement(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v10;
  uint64_t v11;
  void *v12;

  v4 = *(void **)(a1 + 16);
  LODWORD(v5) = -1;
  if ((unint64_t)v4 < 0xFFFFFFFF)
    v5 = *(_QWORD *)(a1 + 16);
  if ((int)v5 - 1 <= 0)
  {
    v10 = *(_QWORD *)(a2 + 16);
    LODWORD(v11) = -1;
    if (v10 < 0xFFFFFFFF)
      v11 = *(_QWORD *)(a2 + 16);
    if ((int)v11 - 1 <= 0)
    {
      if (v4 != (void *)1)
      {
        if (v10 != 1)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
          *(_QWORD *)(a1 + 16) = v10;

          v12 = *(void **)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
          *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
          *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
          *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
          *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
          *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
          *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
          return a1;
        }
        outlined destroy of FMFindingDistance(a1);
      }
    }
    else if (v4 != (void *)1)
    {

    }
  }
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingMeasurement(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = (v3 - 1) & ~(((int)v3 - 1) >> 31);
  if (v4 >= 5)
    return v4 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMFindingMeasurement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_BYTE *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 97) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 97) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for FMFindingMeasurement(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return ((_DWORD)v1 - 1) & ~(((int)v1 - 1) >> 31);
}

double destructiveInjectEnumTag for FMFindingMeasurement(uint64_t a1, unsigned int a2)
{
  double result;

  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(a1 + 88) = 0;
    result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_BYTE *)(a1 + 96) = 0;
    *(_QWORD *)a1 = a2 - 2147483646;
  }
  else if (a2)
  {
    *(_QWORD *)(a1 + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingMeasurement()
{
  return &type metadata for FMFindingMeasurement;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMFindingMeasurement()
{
  uint64_t *v0;
  void *v1;
  Swift::UInt v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v1 = (void *)v0[2];
  v7 = v0[1];
  v8 = *v0;
  v9 = (void *)v0[3];
  Hasher.init(_seed:)();
  switch((unint64_t)v1)
  {
    case 2uLL:
      v2 = 1;
      goto LABEL_6;
    case 3uLL:
      v2 = 2;
      goto LABEL_6;
    case 4uLL:
      v2 = 3;
      goto LABEL_6;
    case 5uLL:
      v2 = 4;
LABEL_6:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(5uLL);
      if (v1 == (void *)1)
      {
        Hasher._combine(_:)(0);
        v4 = v8;
        v5 = v7;
        v6 = 1;
      }
      else
      {
        Hasher._combine(_:)(1u);
        outlined copy of FMFindingDistance?(v8, v7, v1, v9);
        FMFindingDistance.hash(into:)();
        v5 = v7;
        v4 = v8;
        v6 = (uint64_t)v1;
      }
      outlined consume of FMFindingMeasurement(v4, v5, (void *)v6, v9);
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for Decodable.init(from:) in conformance FMFindingMeasurement@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5[6];

  result = specialized FMFindingMeasurement.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return outlined init with take of FMFindingMeasurement(v5, a2);
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance FMFindingMeasurement(_QWORD *a1)
{
  __int128 *v1;
  _BYTE v4[104];

  outlined init with take of FMFindingMeasurement(v1, (uint64_t)v4);
  return FMFindingMeasurement.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance FMFindingMeasurement()
{
  __int128 *v0;
  _BYTE v2[104];

  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v2);
  return FMFindingMeasurement.description.getter();
}

BOOL specialized static FMFindingMeasurement.== infix(_:_:)(__int128 *a1, __int128 *a2)
{
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  _QWORD v87[4];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _QWORD v101[2];
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  char v123;
  uint64_t v124;
  uint64_t v125;
  char v126;

  outlined init with take of FMFindingMeasurement(a2, (uint64_t)v87);
  v56 = v87[1];
  v58 = v87[0];
  v52 = (void *)v87[3];
  v54 = (void *)v87[2];
  outlined init with take of FMFindingMeasurement(a1, (uint64_t)v101);
  switch(v102)
  {
    case 2:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 2;
    case 3:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 3;
    case 4:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 4;
    case 5:
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v61);
      return v63 == 5;
    default:
      v50 = (uint64_t)a1;
      v51 = v102;
      v4 = v101[0];
      v5 = v101[1];
      v6 = v103;
      v7 = v104;
      v8 = v105;
      v9 = v106;
      v10 = v107;
      v11 = v108;
      v47 = v109;
      v48 = v110;
      v49 = v111;
      v12 = v112;
      outlined init with take of FMFindingMeasurement(a2, (uint64_t)&v88);
      v13 = v90;
      if ((unint64_t)(v90 - 2) < 4)
        return 0;
      v39 = v6;
      v40 = v7;
      v41 = v8;
      v42 = v9;
      v43 = v11;
      v44 = v12;
      v14 = v88;
      v15 = v89;
      v16 = v91;
      v17 = v92;
      v18 = v93;
      v19 = v94;
      v20 = v95;
      v21 = v96;
      v22 = v97;
      v23 = v98;
      v24 = v99;
      v25 = v100;
      v26 = v51;
      if (v51 == 1)
      {
        if (v90 == 1)
          return 1;
      }
      else
      {
        if (v90 != 1)
        {
          v113 = v4;
          v114 = v5 & 1;
          v115 = v51;
          v116 = v6;
          v117 = v7;
          v118 = v8 & 1;
          v119 = v9;
          v120 = v10 & 0x101;
          v121 = v11;
          v122 = v47 & 0x101;
          v123 = BYTE2(v47) & 1;
          v124 = v48;
          v125 = v49;
          v126 = v44 & 1;
          v61 = v88;
          LOBYTE(v62) = v89 & 1;
          v63 = v90;
          v64 = v91;
          v65 = v92;
          LOBYTE(v66) = v93 & 1;
          v67 = v94;
          LOWORD(v68) = v95 & 0x101;
          v69 = v96;
          LOWORD(v70) = v97 & 0x101;
          BYTE2(v70) = BYTE2(v97) & 1;
          v71 = v98;
          v72 = v99;
          v73 = v100 & 1;
          outlined release of FMFindingMeasurement((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of FMFindingMeasurement);
          outlined release of FMFindingMeasurement(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of FMFindingMeasurement);
          v3 = specialized static FMFindingDistance.== infix(_:_:)((uint64_t)&v113, (uint64_t)&v61);
          outlined release of FMFindingMeasurement((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMFindingMeasurement);
          outlined release of FMFindingMeasurement(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMFindingMeasurement);
          return v3;
        }
        v45 = v92;
        v28 = v56;
        v27 = v58;
        v57 = v91;
        v59 = v93;
        v29 = v54;
        v55 = v89;
        v30 = v52;
        v53 = v88;
        v46 = v4;
        v31 = v98;
        v32 = v97;
        v33 = v96;
        v34 = v95;
        v35 = v94;
        v36 = v5;
        v37 = v100;
        outlined copy of FMFindingDistance?(v27, v28, v29, v30);
        v26 = v51;
        v14 = v53;
        v15 = v55;
        v16 = v57;
        v17 = v45;
        v18 = v59;
        v25 = v37;
        v5 = v36;
        v19 = v35;
        v13 = 1;
        v20 = v34;
        v21 = v33;
        v22 = v32;
        v23 = v31;
        v4 = v46;
      }
      v61 = v4;
      v62 = v5;
      v63 = v26;
      v64 = v39;
      v65 = v40;
      v66 = v41;
      v67 = v42;
      v68 = v10;
      v69 = v43;
      v70 = v47;
      v71 = v48;
      v72 = v49;
      v73 = v44;
      v74 = v14;
      v75 = v15;
      v76 = v13;
      v77 = v16;
      v78 = v17;
      v79 = v18;
      v80 = v19;
      v81 = v20;
      v82 = v21;
      v83 = v22;
      v84 = v23;
      v85 = v24;
      v86 = v25;
      outlined release of FMFindingMeasurement((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of FMFindingMeasurement);
      outlined release of FMFindingMeasurement(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of FMFindingMeasurement);
      outlined release of (FMFindingDistance?, FMFindingDistance?)((uint64_t)&v61);
      return 0;
  }
}

unint64_t specialized FMFindingTrend.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMFindingTrend.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t specialized FMFindingMeasurement.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 v40;
  char v41;
  uint64_t v42;
  unsigned __int8 v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<FMFindingMeasurement.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  LOBYTE(v33) = 0;
  switch(KeyedDecodingContainer.decode(_:forKey:)())
  {
    case 1:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v31 = 0;
      v32 = 0;
      v29 = 0;
      v30 = 0;
      v27 = 0;
      v28 = 0;
      v26 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 2;
      goto LABEL_19;
    case 2:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v31 = 0;
      v32 = 0;
      v29 = 0;
      v30 = 0;
      v27 = 0;
      v28 = 0;
      v26 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 3;
      goto LABEL_19;
    case 3:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v31 = 0;
      v32 = 0;
      v29 = 0;
      v30 = 0;
      v27 = 0;
      v28 = 0;
      v26 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 4;
      goto LABEL_19;
    case 4:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v31 = 0;
      v32 = 0;
      v29 = 0;
      v30 = 0;
      v27 = 0;
      v28 = 0;
      v26 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 5;
      goto LABEL_19;
    case 5:
      v49 = 1;
      lazy protocol witness table accessor for type FMFindingDistance and conformance FMFindingDistance();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      v31 = v34;
      v32 = v33;
      v23 = v35;
      v27 = v38;
      v28 = v37;
      v26 = v39;
      v29 = v42;
      v30 = v36;
      v25 = v46;
      v24 = v47;
      v14 = v48;
      if (v41)
        v16 = 256;
      else
        v16 = 0;
      v10 = v16 | v40;
      if (v44)
        v17 = 256;
      else
        v17 = 0;
      v18 = v17 | v43;
      v19 = 0x10000;
      if (!v45)
        v19 = 0;
      v11 = v18 | v19;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      v12 = v25;
      v13 = v24;
      v15 = v23;
LABEL_19:
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
      v20 = v31;
      *(_QWORD *)a2 = v32;
      *(_QWORD *)(a2 + 8) = v20;
      v21 = v30;
      *(_QWORD *)(a2 + 16) = v15;
      *(_QWORD *)(a2 + 24) = v21;
      v22 = v27;
      *(_QWORD *)(a2 + 32) = v28;
      *(_QWORD *)(a2 + 40) = v22;
      *(_QWORD *)(a2 + 48) = v26;
      *(_QWORD *)(a2 + 56) = v10;
      *(_QWORD *)(a2 + 64) = v29;
      *(_QWORD *)(a2 + 72) = v11;
      *(_QWORD *)(a2 + 80) = v12;
      *(_QWORD *)(a2 + 88) = v13;
      *(_BYTE *)(a2 + 96) = v14;
      break;
    default:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement.CodingKeys, &unk_24DE2EE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement.CodingKeys, &unk_24DE2EE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement.CodingKeys, &unk_24DE2EE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys;
  if (!lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMFindingMeasurement.CodingKeys, &unk_24DE2EE18);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingMeasurement.CodingKeys and conformance FMFindingMeasurement.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FMFindingDistance? and conformance <A> A?()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type FMFindingDistance? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type FMFindingDistance? and conformance <A> A?)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for FMFindingDistance?);
    v2 = lazy protocol witness table accessor for type FMFindingDistance and conformance FMFindingDistance();
    result = MEMORY[0x22075D454](MEMORY[0x24BEE4AA8], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMFindingDistance? and conformance <A> A?);
  }
  return result;
}

uint64_t outlined release of FMFindingMeasurement(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 96);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingMeasurement.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingMeasurement.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_21B0BD55C + 4 * byte_21B0F8AD1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_21B0BD590 + 4 * byte_21B0F8ACC[v4]))();
}

uint64_t sub_21B0BD590(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0BD598(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0BD5A0);
  return result;
}

uint64_t sub_21B0BD5AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0BD5B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_21B0BD5B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0BD5C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for FMFindingMeasurement.CodingKeys(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void *type metadata accessor for FMFindingMeasurement.CodingKeys()
{
  return &unk_24DE2EE18;
}

void destroy for FMFindingViewStyle(id *a1)
{

}

uint64_t initializeWithCopy for FMFindingViewStyle(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  id v10;
  id v11;
  id v12;
  id v13;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v7;
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  v10 = v3;
  v11 = v4;
  v12 = v5;
  v13 = v6;
  return a1;
}

uint64_t assignWithCopy for FMFindingViewStyle(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  id v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  v13 = *(void **)(a2 + 24);
  v14 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v13;
  v15 = v13;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for FMFindingViewStyle(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFindingViewStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 152))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFindingViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 152) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 152) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMFindingViewStyle()
{
  return &type metadata for FMFindingViewStyle;
}

void one-time initialization function for baseRadius()
{
  static FMPFSKBTRangeDiskNode.baseRadius = 0x4084000000000000;
}

void FMPFSKBTRangeDiskNode.setup()()
{
  void *v0;
  CGPathRef v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  CGRect v10;

  if (one-time initialization token for baseRadius != -1)
    swift_once();
  *(_QWORD *)&v10.size.width = static FMPFSKBTRangeDiskNode.baseRadius;
  v10.origin.x = *(double *)&static FMPFSKBTRangeDiskNode.baseRadius * -0.5;
  v10.origin.y = *(double *)&static FMPFSKBTRangeDiskNode.baseRadius * -0.5;
  *(_QWORD *)&v10.size.height = static FMPFSKBTRangeDiskNode.baseRadius;
  v1 = CGPathCreateWithEllipseInRect(v10, 0);
  objc_msgSend(v0, sel_setPath_, v1);

  objc_msgSend(v0, sel_setLineWidth_, 1.0);
  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_systemBlueColor);
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_traitCollectionWithUserInterfaceStyle_, 2);
  v6 = objc_msgSend(v3, sel_resolvedColorWithTraitCollection_, v5);

  objc_msgSend(v0, sel_setFillColor_, v6);
  v7 = objc_msgSend(v2, sel_systemBlueColor);
  v8 = objc_msgSend(v4, sel_traitCollectionWithUserInterfaceStyle_, 2);
  v9 = objc_msgSend(v7, sel_resolvedColorWithTraitCollection_, v8);

  objc_msgSend(v0, sel_setStrokeColor_, v9);
}

Swift::Void __swiftcall FMPFSKBTRangeDiskNode.render()()
{
  char *v0;
  uint64_t v1;
  double *v2;
  double v3;
  uint64_t v4;
  double *v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring];
  v2 = (double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  v3 = *v2 + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  if (vabdd_f64(v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v3) <= *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v3 = v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  objc_msgSend(v0, sel_setAlpha_, v3);
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_sizeSpring];
  v5 = (double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  v6 = *v5;
  v7 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v8 = v5[35];
  v9 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v10 = *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
  v11 = objc_msgSend(v0, sel_scene);
  if (v11)
  {
    v12 = v11;
    if (vabdd_f64(v8 + v9, v6 + v7) > v10)
      v13 = v6 + v7;
    else
      v13 = v8 + v9;
    objc_msgSend(v11, sel_size);
    v15 = v14;

    v16 = round(v13 * v15);
    if (one-time initialization token for baseRadius != -1)
      swift_once();
    v17 = v16 / *(double *)&static FMPFSKBTRangeDiskNode.baseRadius;
  }
  else
  {
    v17 = 1.0;
  }
  objc_msgSend(v0, sel_setScale_, v17);
}

void FMPFSKBTRangeDiskNode.__ivar_destroyer()
{
  uint64_t v0;

}

id FMPFSKBTRangeDiskNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKBTRangeDiskNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTRangeDiskNode()
{
  return objc_opt_self();
}

id FMPFSKNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKNode);
}

uint64_t type metadata accessor for FMPFSKNode()
{
  return objc_opt_self();
}

void FMPFSKSpriteNode.setBrightness(_:with:)(void *a1, double a2)
{
  char *v2;
  double *v4;
  double *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10[2];

  v10[1] = *(double *)MEMORY[0x24BDAC8D0];
  v4 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_brightness];
  *v4 = a2;
  *((_BYTE *)v4 + 8) = 0;
  v5 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_previousBrightness];
  if ((v2[OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_previousBrightness + 8] & 1) != 0
    || vabdd_f64(*v5, a2) >= 2.22044605e-16)
  {
    *v5 = a2;
    *((_BYTE *)v5 + 8) = 0;
    v9 = 1.0;
    v10[0] = 1.0;
    v7 = 1.0;
    v8 = 1.0;
    objc_msgSend(a1, sel_getRed_green_blue_alpha_, v10, &v9, &v8, &v7);
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithRed_green_blue_alpha_, v10[0] * a2, v9 * a2, v8 * a2, v7);
    objc_msgSend(v2, sel_setColor_, v6);

  }
}

id FMPFSKSpriteNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKSpriteNode);
}

uint64_t type metadata accessor for FMPFSKSpriteNode()
{
  return objc_opt_self();
}

id FMPFSKShapeNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKShapeNode);
}

id FMPFSKNode.__deallocating_deinit(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKShapeNode()
{
  return objc_opt_self();
}

id FMPFSKBTRangeDotNode.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  objc_super v17;

  v1 = OBJC_IVAR____TtC10TVRemoteUI20FMPFSKBTRangeDotNode_sizeSpring;
  v2 = v0;
  *(_QWORD *)&v0[v1] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F50624DD2F1A9FCLL, 0);

  type metadata accessor for FMPFView();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v4 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  v5 = (void *)MEMORY[0x22075C584](0xD000000000000016, 0x800000021B0FDD30);
  v6 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_compatibleWithTraitCollection_, v5, v4, 0);

  if (v6)
  {
    v7 = objc_msgSend((id)objc_opt_self(), sel_textureWithImage_, v6);

    v4 = v6;
  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9ED0]), sel_init);
  }

  v8 = (void *)objc_opt_self();
  v9 = v7;
  v10 = objc_msgSend(v8, sel_whiteColor);
  objc_msgSend(v9, sel_size);
  v12 = v11;
  v14 = v13;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for FMPFSKBTRangeDotNode();
  v15 = objc_msgSendSuper2(&v17, sel_initWithTexture_color_size_, v9, v10, v12, v14);

  return v15;
}

Swift::Void __swiftcall FMPFSKBTRangeDotNode.update(delta:)(Swift::Double delta)
{
  char *v1;
  void *v2;
  uint64_t v3;
  double *v4;
  double v5;
  id v6;
  double v7;
  void *v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  double v13;
  double v14;

  v2 = v1;
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI20FMPFSKBTRangeDotNode_sizeSpring];
  FLSpring.step(_:)(delta);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  v4 = (double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  if (vabdd_f64(v4[35] + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v4 + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v3+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v5 = *v4 + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  else
    v5 = v4[35] + *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v6 = objc_msgSend(v2, sel_scene);
  v7 = 1.0;
  if (v6)
  {
    v8 = v6;
    objc_msgSend(v6, sel_size);
    v10 = v9;

    v11 = objc_msgSend(v2, sel_texture);
    if (v11)
    {
      v12 = v11;
      objc_msgSend(v11, sel_size);
      v14 = v13;

      v7 = round(v5 * v10) / v14;
    }
  }
  objc_msgSend(v2, sel_setScale_, v7);
}

void FMPFSKBTRangeDotNode.setDotNodeSizeFactor(_:sprung:)(char a1, Swift::Double a2)
{
  char *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  double *v6;
  double v7;
  id v8;
  double v9;
  void *v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  double v15;
  double v16;

  v3 = v2;
  v4 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI20FMPFSKBTRangeDotNode_sizeSpring];
  if ((a1 & 1) != 0)
  {
    v5 = v4 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v5 = a2;
    *(_BYTE *)(v5 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v4 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v6 = (double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    if (vabdd_f64(v6[35] + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v6 + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v4+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v7 = *v6 + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    else
      v7 = v6[35] + *(double *)(v4 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v8 = objc_msgSend(v3, sel_scene);
    v9 = 1.0;
    if (v8)
    {
      v10 = v8;
      objc_msgSend(v8, sel_size);
      v12 = v11;

      v13 = objc_msgSend(v3, sel_texture);
      if (v13)
      {
        v14 = v13;
        objc_msgSend(v13, sel_size);
        v16 = v15;

        v9 = round(v7 * v12) / v16;
      }
    }
    objc_msgSend(v3, sel_setScale_, v9);
  }
}

Swift::Void __swiftcall FMPFSKBTRangeDotNode.pulse(duration:)(Swift::Double duration)
{
  void *v1;
  void *v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  Class isa;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  Class v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  _QWORD v26[6];

  v2 = v1;
  if (!UIAccessibilityIsReduceMotionEnabled())
  {
    v4 = objc_msgSend(v1, sel_texture);
    if (v4)
    {
      v5 = v4;
      type metadata accessor for FMPFSKSpriteNode();
      v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_21B0F7C30;
      v8 = (void *)objc_opt_self();
      v9 = (void *)objc_opt_self();
      v10 = v6;
      v11 = objc_msgSend(v9, sel_rangeWithConstantValue_, 0.0);
      v12 = objc_msgSend(v8, sel_distance_toNode_, v11, v2);

      *(_QWORD *)(v7 + 32) = v12;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKConstraint);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_setConstraints_, isa, v7);

      objc_msgSend(v10, sel_setTexture_, v5);
      v14 = v10;
      objc_msgSend(v5, sel_size);
      objc_msgSend(v14, sel_setSize_);

      objc_msgSend(v14, sel_setScale_, 1.0);
      v15 = (void *)objc_opt_self();
      v16 = objc_msgSend(v15, sel_scaleTo_duration_, 2.0, duration);
      objc_msgSend(v16, sel_setTimingMode_, 2);
      v17 = objc_msgSend(v15, sel_fadeAlphaTo_duration_, 0.0, duration);
      objc_msgSend(v17, sel_setTimingMode_, 2);
      v18 = swift_allocObject();
      *(_OWORD *)(v18 + 16) = xmmword_21B0F7C50;
      *(_QWORD *)(v18 + 32) = v17;
      *(_QWORD *)(v18 + 40) = v16;
      v26[0] = v18;
      specialized Array._endMutation()();
      type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for SKAction);
      v19 = v17;
      v20 = v16;
      v21 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v15, sel_group_, v21, v26[0]);

      objc_msgSend(v2, sel_addChild_, v14);
      v23 = swift_allocObject();
      *(_QWORD *)(v23 + 16) = v14;
      v26[4] = partial apply for closure #2 in FMPFSKPeripheralDotNode.pulse(_:animated:);
      v26[5] = v23;
      v26[0] = MEMORY[0x24BDAC760];
      v26[1] = 1107296256;
      v26[2] = thunk for @escaping @callee_guaranteed () -> ();
      v26[3] = &block_descriptor_2;
      v24 = _Block_copy(v26);
      v25 = v14;
      swift_release();
      objc_msgSend(v25, sel_runAction_completion_, v22, v24);
      _Block_release(v24);

    }
  }
}

void FMPFSKBTRangeDotNode.__ivar_destroyer()
{
  uint64_t v0;

}

id FMPFSKBTRangeDotNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKBTRangeDotNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTRangeDotNode()
{
  return objc_opt_self();
}

uint64_t sub_21B0BEE98()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

char *FMPFSKPatternFragmentNode.init(experienceType:name:color:randomFactor:texture:imageName:minScaleFactor:maxScaleFactor:explodedDiskRadius:peripheralDiskRadius:innerPeripheralDiskRadius:explodedPosition:peripheralPosition:composedPosition:conformedToExplodedFactor:conformationFactor:scalingFactor:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, char a17, double a18, char a19, uint64_t a20,uint64_t a21,char a22,double a23,double a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34)
{
  char *v30;
  int v36;
  uint64_t v37;
  id v38;
  char *v39;
  void *v40;
  int v41;
  char *v42;
  char v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  double v72;
  double v73;
  char v74;
  char *v75;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  id v87;
  uint64_t v89;
  id v90;
  char *v91;
  uint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  _QWORD *v115;
  void *v116;
  uint64_t ObjCClassFromMetadata;
  id v118;
  void *v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  id v124;
  double v125;
  double v126;
  id v127;
  uint64_t v128;
  double v129;
  double v130;
  double v131;
  double v132;
  double v133;
  double v134;
  double v135;
  char *v136;
  char *v137;
  void *v138;
  uint64_t v139;
  void *v140;
  uint64_t v141;
  double v142;
  double v143;
  char v144;
  char *v145;
  char *v146;
  char *v147;
  double *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char v158;
  uint64_t v159;
  char *v160;
  char v161;
  double *v162;
  char *v163;
  char *v164;
  double v165;
  char *v166;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v173;
  char *v176;
  char *v177;
  char *v178;
  char *v179;
  objc_super v182;
  char v183;
  _DWORD v184[2];
  _DWORD v185[2];
  _DWORD v186[2];
  _DWORD v187[2];
  _DWORD v188[2];
  _DWORD v189[2];
  _DWORD v190[2];
  _DWORD v191[2];
  _DWORD v192[2];
  _DWORD v193[4];

  v36 = *a1;
  v37 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
  v38 = objc_allocWithZone((Class)type metadata accessor for FMPFSKNode());
  v39 = v30;
  v40 = v38;
  v41 = v36;
  *(_QWORD *)&v30[v37] = objc_msgSend(v40, sel_init);
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter] = 0;
  v42 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
  *(_QWORD *)v42 = 0;
  *((_QWORD *)v42 + 1) = 0;
  v43 = 1;
  v42[16] = 1;
  v44 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition];
  *(_QWORD *)v44 = 0;
  *((_QWORD *)v44 + 1) = 0;
  v44[16] = 1;
  v45 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
  *(_QWORD *)v45 = 0;
  v45[8] = 1;
  v46 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
  *(_QWORD *)v46 = 0;
  v46[8] = 1;
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction] = 0;
  v47 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0;
  v47[16] = 1;
  v48 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_relativeHeading];
  *(_QWORD *)v48 = 0;
  v48[8] = 1;
  v168 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring;
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring] = 0;
  v169 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring;
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring] = 0;
  v170 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring;
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring] = 0;
  v49 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
  *(_QWORD *)v49 = 0;
  *((_QWORD *)v49 + 1) = 0;
  v49[16] = 1;
  v50 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
  *(_QWORD *)v50 = 0;
  *((_QWORD *)v50 + 1) = 0;
  v50[16] = 1;
  v51 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  *(_QWORD *)v51 = 0;
  *((_QWORD *)v51 + 1) = 0;
  v51[16] = 1;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling] = 0;
  v52 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
  *(_OWORD *)v52 = 0u;
  *((_OWORD *)v52 + 1) = 0u;
  v52[32] = 1;
  v53 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
  *(_QWORD *)v53 = 0;
  v178 = v53;
  v53[8] = 1;
  v54 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
  *(_QWORD *)v54 = 0;
  v177 = v54;
  v54[8] = 1;
  v55 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor];
  *(_QWORD *)v55 = 0;
  v176 = v55;
  v55[8] = 1;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] = 1;
  v56 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset];
  *(_QWORD *)v56 = 0;
  *((_QWORD *)v56 + 1) = 0;
  v173 = v56;
  v56[16] = 1;
  v57 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
  *(_QWORD *)v57 = 0;
  *((_QWORD *)v57 + 1) = 0;
  v57[16] = 1;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceHomingFactor] = 1;
  v58 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
  *(_QWORD *)v58 = 0;
  v58[8] = 1;
  v59 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
  *(_QWORD *)v59 = 0;
  v59[8] = 1;
  v60 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset];
  *(_QWORD *)v60 = 0;
  v60[8] = 1;
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading] = 0;
  v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_experienceType] = v36;
  if (v36 == 1)
  {
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    LOBYTE(v193[0]) = 1;
    LOBYTE(v192[0]) = 1;
    LOBYTE(v191[0]) = 1;
    LOBYTE(v190[0]) = 1;
    LOBYTE(v189[0]) = 1;
    LOBYTE(v188[0]) = 0;
    LOBYTE(v187[0]) = 0;
    LOBYTE(v186[0]) = 0;
    LOBYTE(v185[0]) = 0;
    LOBYTE(v184[0]) = 0;
    v183 = 0;
    v66 = 0x4010000000000000;
    v67 = 0;
    v68 = 0x3FF8000000000000;
    v69 = 0x3FF0000000000000;
    v70 = 0;
    v71 = 0x4004000000000000;
    v72 = 0.0;
    v73 = 0.6;
    v74 = 0;
  }
  else
  {
    v71 = 0;
    v69 = 0;
    v68 = 0;
    v66 = 0;
    LOBYTE(v193[0]) = 0;
    LOBYTE(v192[0]) = 0;
    LOBYTE(v191[0]) = 0;
    LOBYTE(v190[0]) = 0;
    LOBYTE(v189[0]) = 0;
    LOBYTE(v188[0]) = 1;
    LOBYTE(v187[0]) = 1;
    LOBYTE(v186[0]) = 1;
    LOBYTE(v185[0]) = 1;
    LOBYTE(v184[0]) = 1;
    v183 = 1;
    v65 = 1;
    v67 = 1;
    v64 = 0x3FF0000000000000;
    v63 = 0x3FE6666666666666;
    v61 = 0x3FB999999999999ALL;
    v70 = 1;
    v73 = 1.0;
    v72 = 0.75;
    v62 = 30;
    v74 = 1;
    v43 = 0;
  }
  v75 = &v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style];
  *(_OWORD *)v75 = xmmword_21B0F8F40;
  *((_OWORD *)v75 + 1) = xmmword_21B0F8F50;
  __asm { FMOV            V2.2D, #0.5 }
  *((_OWORD *)v75 + 2) = _Q2;
  *((_QWORD *)v75 + 6) = 16;
  *((double *)v75 + 7) = v72;
  *((_OWORD *)v75 + 4) = xmmword_21B0F8F60;
  *((_OWORD *)v75 + 5) = xmmword_21B0F8F70;
  *((double *)v75 + 12) = v73;
  *((_QWORD *)v75 + 13) = 0x3FF0000000000000;
  *((_QWORD *)v75 + 14) = v61;
  v75[120] = v43;
  *(_DWORD *)(v75 + 121) = v193[0];
  *((_DWORD *)v75 + 31) = *(_DWORD *)((char *)v193 + 3);
  *((_QWORD *)v75 + 16) = v62;
  v75[136] = v43;
  *((_DWORD *)v75 + 35) = *(_DWORD *)((char *)v192 + 3);
  *(_DWORD *)(v75 + 137) = v192[0];
  *((_QWORD *)v75 + 18) = 0;
  v75[152] = v43;
  *((_DWORD *)v75 + 39) = *(_DWORD *)((char *)v191 + 3);
  *(_DWORD *)(v75 + 153) = v191[0];
  *((_QWORD *)v75 + 20) = v63;
  v75[168] = v43;
  *((_DWORD *)v75 + 43) = *(_DWORD *)((char *)v190 + 3);
  *(_DWORD *)(v75 + 169) = v190[0];
  *((_QWORD *)v75 + 22) = v64;
  v75[184] = v43;
  v81 = v189[0];
  *((_DWORD *)v75 + 47) = *(_DWORD *)((char *)v189 + 3);
  *(_DWORD *)(v75 + 185) = v81;
  *((_QWORD *)v75 + 24) = v69;
  v75[200] = v65;
  v82 = v188[0];
  *((_DWORD *)v75 + 51) = *(_DWORD *)((char *)v188 + 3);
  *(_DWORD *)(v75 + 201) = v82;
  *((_QWORD *)v75 + 26) = v69;
  v75[216] = v65;
  v83 = v187[0];
  *((_DWORD *)v75 + 55) = *(_DWORD *)((char *)v187 + 3);
  *(_DWORD *)(v75 + 217) = v83;
  *((_QWORD *)v75 + 28) = v71;
  v75[232] = v65;
  v84 = v186[0];
  *((_DWORD *)v75 + 59) = *(_DWORD *)((char *)v186 + 3);
  *(_DWORD *)(v75 + 233) = v84;
  *((_QWORD *)v75 + 30) = v69;
  v75[248] = v67;
  v85 = v185[0];
  *((_DWORD *)v75 + 63) = *(_DWORD *)((char *)v185 + 3);
  *(_DWORD *)(v75 + 249) = v85;
  *((_QWORD *)v75 + 32) = v68;
  v75[264] = v70;
  v86 = v184[0];
  *((_DWORD *)v75 + 67) = *(_DWORD *)((char *)v184 + 3);
  *(_DWORD *)(v75 + 265) = v86;
  *((_QWORD *)v75 + 34) = 0x3FE0000000000000;
  *((_QWORD *)v75 + 35) = v66;
  v75[288] = v74;
  v179 = v58;
  if (a4)
    v87 = a4;
  else
    v87 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_renderingColor] = v87;
  *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedDiskRadius] = a10;
  *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralDiskRadius] = a11;
  *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius] = a12;
  if (v41 != 1)
  {
    v92 = one-time initialization token for r1OrBT;
    v93 = a4;
    if (v92 != -1)
      swift_once();
    v91 = &byte_25513FE50;
    goto LABEL_13;
  }
  v89 = one-time initialization token for r1NoAR;
  v90 = a4;
  if (v89 != -1)
    goto LABEL_67;
  while (1)
  {
    v91 = &byte_25513FF20;
LABEL_13:
    v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle] = *v91;
    if ((a30 & 1) != 0)
      v94 = 0;
    else
      v94 = a29;
    a30 = (char)v179;
    *(_QWORD *)v178 = v94;
    v178[8] = 0;
    if ((a32 & 1) != 0)
      v95 = 0;
    else
      v95 = a31;
    *(_QWORD *)v177 = v95;
    v177[8] = 0;
    if ((a34 & 1) != 0)
      v96 = 0;
    else
      v96 = a33;
    *(_QWORD *)v176 = v96;
    v176[8] = 0;
    *(_QWORD *)v179 = 0;
    v179[8] = 0;
    v97 = *(double *)&a8;
    if ((a17 & 1) != 0)
      v97 = 1.0;
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_minScaleFactor] = v97;
    v98 = a18;
    if ((a19 & 1) != 0)
      v98 = 1.0;
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_maxScaleFactor] = v98;
    v99 = *((double *)v75 + 8);
    v100 = *((double *)v75 + 9);
    v101 = v99 * (1.0 - v100);
    v102 = 0.0;
    if (v101 < 0.0)
      v101 = 0.0;
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedBrightness] = (1.0 - a9) * v101
                                                                                                 + fmin(v99 * (v100 + 1.0), 1.0)* a9;
    v103 = *((double *)v75 + 10);
    v104 = *((double *)v75 + 11);
    if (v103 * (1.0 - v104) >= 0.0)
      v102 = v103 * (1.0 - v104);
    *(double *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_nonConformedBrightness] = (1.0 - a9) * v102 + fmin(v103 * (v104 + 1.0), 1.0) * a9;
    v105 = fmax(*((double *)v75 + 2) / 200.0 * a11, 1.0);
    if (v105 >= 0.0)
      break;
    __break(1u);
LABEL_67:
    swift_once();
  }
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v105, v105);
  v107 = v106;
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v105, v105);
  v108 = (uint64_t *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialDisturbanceScatterOffset];
  *v108 = v107;
  v108[1] = v109;
  *(_QWORD *)v173 = v107;
  *((_QWORD *)v173 + 1) = v109;
  v173[16] = 0;
  if ((v75[136] & 1) == 0)
  {
    v110 = specialized static FMPFFluidSpring.slowSpringWith(initialValue:stableValueThreshold:)(v107, 0, 0x3FE0000000000000, 0);
    v111 = *(void **)&v39[v168];
    *(_QWORD *)&v39[v168] = v110;

    if ((v173[16] & 1) != 0)
      v112 = 0;
    else
      v112 = *((_QWORD *)v173 + 1);
    v113 = specialized static FMPFFluidSpring.slowSpringWith(initialValue:stableValueThreshold:)(v112, v173[16], 0x3FE0000000000000, 0);
    v114 = *(void **)&v39[v169];
    *(_QWORD *)&v39[v169] = v113;

    v115 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(*(_QWORD *)v179, v179[8], 0x3F847AE147AE147BLL, 0, 0, 1);
    v116 = *(void **)&v39[v170];
    *(_QWORD *)&v39[v170] = v115;

  }
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring] = specialized static FMPFFluidSpring.randomSpringWith(initialValue:randomFactor:stableValueThreshold:)(0, 0, *(uint64_t *)&a9, 0, 0x3FE0000000000000, 0);
  *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_noiseSubSpring] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0, 1);
  if (a7)
  {
    type metadata accessor for FMPFView();
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v118 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    swift_bridgeObjectRetain();
    v119 = (void *)MEMORY[0x22075C584](a6, a7);
    swift_bridgeObjectRelease();
    v120 = objc_msgSend((id)objc_opt_self(), sel_imageNamed_inBundle_compatibleWithTraitCollection_, v119, v118, 0);

    if (v120)
    {
      v121 = objc_msgSend((id)objc_opt_self(), sel_textureWithImage_, v120);
      swift_bridgeObjectRelease();

      v118 = v120;
    }
    else
    {
      v121 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9ED0]), sel_init);
      swift_bridgeObjectRelease();
    }

    type metadata accessor for FMPFSKSpriteNode();
    v127 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithTexture_, v121);
    v128 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
    *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode] = v127;
    v124 = v127;
    objc_msgSend(v124, sel_size);
    v130 = 0.5 - 1.0 / v129 * 0.5;
    objc_msgSend(*(id *)&v39[v128], sel_size);
    v132 = 0.5 - 1.0 / v131 * 0.5;
    objc_msgSend(*(id *)&v39[v128], sel_size);
    v134 = 1.0 / v133;
    objc_msgSend(*(id *)&v39[v128], sel_size);
    objc_msgSend(v124, sel_setCenterRect_, v130, v132, v134, 1.0 / v135);

  }
  else
  {
    type metadata accessor for FMPFSKSpriteNode();
    v122 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
    v123 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
    *(_QWORD *)&v39[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode] = v122;
    objc_msgSend(v122, sel_setTexture_, a5);
    v124 = *(id *)&v39[v123];
    if (a5)
    {
      objc_msgSend(a5, sel_size);
    }
    else
    {
      v126 = 0.0;
      v125 = 0.0;
    }
    objc_msgSend(v124, sel_setSize_, v125, v126);
  }

  v182.receiver = v39;
  v182.super_class = (Class)type metadata accessor for FMPFSKPatternFragmentNode();
  v136 = (char *)objc_msgSendSuper2(&v182, sel_init);
  v137 = v136;
  if (a3)
  {
    v138 = (void *)MEMORY[0x22075C584](a2, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    v138 = 0;
  }
  objc_msgSend(v136, sel_setName_, v138);

  v139 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
  objc_msgSend(v136, sel_addChild_, *(_QWORD *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode]);
  v140 = *(void **)&v136[v139];
  v141 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
  objc_msgSend(v140, sel_addChild_, *(_QWORD *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode]);
  objc_msgSend(*(id *)&v136[v141], sel_setColorBlendFactor_, 1.0);
  v142 = a23;
  v143 = a24;
  v144 = a25 & 1;
  if ((a25 & 1) != 0)
  {
    v143 = 0.0;
    v142 = 0.0;
  }
  objc_msgSend(*(id *)&v136[v141], sel_setPosition_, v142, v143);
  v145 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
  *(_QWORD *)v145 = a20;
  *((_QWORD *)v145 + 1) = a21;
  v145[16] = a22 & 1;
  v146 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
  *(double *)v146 = a23;
  *((double *)v146 + 1) = a24;
  v146[16] = v144;
  v147 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  *(_QWORD *)v147 = a26;
  *((_QWORD *)v147 + 1) = a27;
  v147[16] = a28 & 1;
  v148 = (double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
  *v148 = a23;
  v148[1] = a24;
  *((_BYTE *)v148 + 16) = v144;
  v149 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition];
  *(_QWORD *)v149 = a20;
  *((_QWORD *)v149 + 1) = a21;
  v149[16] = a22 & 1;
  v150 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
  if ((v152 & 1) != 0)
    v153 = *(_QWORD *)&a23;
  else
    v153 = v150;
  if ((v152 & 1) != 0)
    v154 = *(_QWORD *)&a24;
  else
    v154 = v151;
  v155 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
  *(_QWORD *)v155 = v153;
  *((_QWORD *)v155 + 1) = v154;
  v155[16] = v152 & a25 & 1;
  v156 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(_QWORD *)v147, *((_QWORD *)v147 + 1), v147[16], v153, v154, v152 & a25 & 1);
  v157 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
  *(_QWORD *)v157 = v156;
  v157[8] = v158 & 1;
  v159 = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(_QWORD *)v155, *((_QWORD *)v155 + 1), v155[16], *(_QWORD *)v146, *((_QWORD *)v146 + 1), v146[16]);
  v160 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
  *(_QWORD *)v160 = v159;
  v160[8] = v161 & 1;
  v162 = (double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0)
    FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*v162);
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor + 8] & 1) == 0)
    FMPFSKPatternFragmentNode.applyScalingFactor(_:)(*(double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor]);
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset + 16] & 1) == 0)
  {
    v163 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
    *(_OWORD *)v163 = *(_OWORD *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset];
    v163[16] = 0;
    if (((_BYTE)v162[1] & 1) == 0)
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*v162);
  }
  if ((v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor + 8] & 1) == 0)
  {
    v164 = &v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
    *(_QWORD *)v164 = *(_QWORD *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
    v164[8] = 0;
  }
  v165 = *(double *)&v136[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_nonConformedBrightness];
  v166 = v136;
  objc_msgSend(v166, sel_setZPosition_, v165);

  return v166;
}

uint64_t FMPFSKPatternFragmentNode.description.getter()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  id v36;
  void *v37;
  uint64_t v38;
  void *v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  unsigned int v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16] & 1) != 0)
  {
    v3 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v4 = _Pointer.debugDescription.getter();
    v6 = specialized BidirectionalCollection.suffix(_:)(6uLL, v4, v5);
    v8 = v7;
    v10 = v9;
    v12 = v11;
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = MEMORY[0x22075C5CC](v6, v8, v10, v12);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 30768;
    v14._object = (void *)0xE200000000000000;
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 32;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16 = objc_msgSend(v0, sel_name);
    if (v16)
    {
      v17 = v16;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v3 = v19;

    }
    else
    {
      v18 = 0;
    }
    v40._countAndFlagsBits = v18;
    v40._object = v3;
    String.append(_:)(v40);
    swift_bridgeObjectRelease();
    v41._countAndFlagsBits = 0x3E4025202CLL;
    v41._object = (void *)0xE500000000000000;
    String.append(_:)(v41);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v42 = swift_allocObject();
    *(_OWORD *)(v42 + 16) = xmmword_21B0F8460;
    v43 = objc_msgSend(v1, sel_isHidden);
    v44 = lazy protocol witness table accessor for type String and conformance String();
    v45 = 0x656C6269736976;
    if (v43)
      v45 = 0x6E6564646968;
    v46 = 0xE700000000000000;
    *(_QWORD *)(v42 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v42 + 64) = v44;
    if (v43)
      v46 = 0xE600000000000000;
    *(_QWORD *)(v42 + 32) = v45;
    *(_QWORD *)(v42 + 40) = v46;
  }
  else
  {
    v21 = *(_QWORD *)v2;
    v20 = *((_QWORD *)v2 + 1);
    v22 = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(64);
    v23._object = (void *)0x800000021B0FF120;
    v23._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v23);
    v24 = _Pointer.debugDescription.getter();
    v26 = specialized BidirectionalCollection.suffix(_:)(6uLL, v24, v25);
    v28 = v27;
    v30 = v29;
    v32 = v31;
    swift_bridgeObjectRelease();
    v33._countAndFlagsBits = MEMORY[0x22075C5CC](v26, v28, v30, v32);
    String.append(_:)(v33);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34._countAndFlagsBits = 30768;
    v34._object = (void *)0xE200000000000000;
    String.append(_:)(v34);
    swift_bridgeObjectRelease();
    v35._countAndFlagsBits = 32;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v36 = objc_msgSend(v0, sel_name);
    if (v36)
    {
      v37 = v36;
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v22 = v39;

    }
    else
    {
      v38 = 0;
    }
    v47._countAndFlagsBits = v38;
    v47._object = v22;
    String.append(_:)(v47);
    swift_bridgeObjectRelease();
    v48._countAndFlagsBits = 0xD000000000000024;
    v48._object = (void *)0x800000021B0FF140;
    String.append(_:)(v48);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_21B0F8F80;
    v50 = MEMORY[0x24BEE50B0];
    *(_QWORD *)(v49 + 56) = MEMORY[0x24BEE50B0];
    v51 = lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    *(_QWORD *)(v49 + 64) = v51;
    *(_QWORD *)(v49 + 32) = v21;
    *(_QWORD *)(v49 + 96) = v50;
    *(_QWORD *)(v49 + 104) = v51;
    *(_QWORD *)(v49 + 72) = v20;
    v52 = objc_msgSend(v1, sel_isHidden);
    v53 = lazy protocol witness table accessor for type String and conformance String();
    v54 = 0x656C6269736976;
    if (v52)
      v54 = 0x6E6564646968;
    v55 = 0xE700000000000000;
    *(_QWORD *)(v49 + 136) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v49 + 144) = v53;
    if (v52)
      v55 = 0xE600000000000000;
    *(_QWORD *)(v49 + 112) = v54;
    *(_QWORD *)(v49 + 120) = v55;
  }
  v56 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t FMPFSKPatternFragmentNode.calculateIntermediatePosition()()
{
  uint64_t v0;
  double v1;
  char v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  uint64_t result;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
    goto LABEL_9;
  v1 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
  {
    v3 = swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v3 = swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
LABEL_9:
    *(double *)&result = 0.0;
    return result;
  }
LABEL_6:
  v4 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
  v5 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
  specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v3, 0.0, 3.14159265);
  v7 = v6 * 0.25;
  v8 = 2.0;
  if (v1 > 0.0)
    v8 = -2.0;
  *(double *)&result = v4 * __sincos_stret(v5 * (v8 * v7) + 1.57079633).__cosval;
  return result;
}

uint64_t FMPFSKPatternFragmentNode.positionOnCurvedPathWith(startPoint:controlPoint:endPoint:at:)()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t result;

  v1 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
  if (!*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
    return swift_bridgeObjectRelease();
  v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = swift_bridgeObjectRelease();
  if ((v2 & 1) != 0)
    return result;
  if (*(_BYTE *)(v0 + v1) && *(_BYTE *)(v0 + v1) == 1)
    return swift_bridgeObjectRelease();
  _stringCompareWithSmolCheck(_:_:expecting:)();
  return swift_bridgeObjectRelease();
}

uint64_t FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char v6;

  v3 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle)
    && *(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle) == 1)
  {
    swift_bridgeObjectRelease();
    return *(_QWORD *)&a1;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
    return *(_QWORD *)&a1;
  if (*(_BYTE *)(v1 + v3))
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) == 0)
      return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  double v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v25;
  char v26;
  double v28;

  if ((a3 & 1) != 0 || (a6 & 1) != 0)
    return 0;
  v7 = *(double *)&a1;
  v9 = 1;
  *(double *)&v10 = COERCE_DOUBLE(FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)&a1));
  v12 = v11;
  v13 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
  v28 = *(double *)&v10;
  v15 = v14;
  v16 = 0.0;
  v17 = *(double *)&a2;
  v18 = v7;
  do
  {
    v23 = (double)v9 * 0.0625;
    v24 = 1.0 - v23;
    if (!*(_BYTE *)(v6 + v13))
      goto LABEL_10;
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v25 & 1) != 0)
      goto LABEL_12;
    if (*(_BYTE *)(v6 + v13) && *(_BYTE *)(v6 + v13) == 1)
    {
LABEL_10:
      swift_bridgeObjectRelease();
    }
    else
    {
      v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v26 & 1) == 0)
        goto LABEL_4;
    }
LABEL_12:
    if ((v12 & 1) != 0)
    {
LABEL_4:
      v19 = v23 * *(double *)&a4 + v24 * v18;
      v20 = v24 * v17;
      v21 = v23 * *(double *)&a5;
      goto LABEL_5;
    }
    v19 = v24 * (v23 * v28 + v24 * v18) + v23 * (v23 * *(double *)&a4 + v24 * v28);
    v21 = v24 * (v23 * v15 + v24 * v17);
    v20 = v23 * (v23 * *(double *)&a5 + v24 * v15);
LABEL_5:
    v22 = v21 + v20;
    v16 = v16 + sqrt((v22 - *(double *)&a2) * (v22 - *(double *)&a2) + (v19 - v7) * (v19 - v7));
    ++v9;
    *(double *)&a2 = v22;
    v7 = v19;
  }
  while (v9 != 17);
  return *(_QWORD *)&v16;
}

void FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  char *v10;
  _QWORD v11[6];

  if ((objc_msgSend(v1, sel_isHidden) & 1) == 0)
  {
    v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode]
       + OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_brightness;
    if ((*(_BYTE *)(v3 + 8) & 1) == 0)
    {
      v4 = *(_QWORD *)v3;
      if (!UIAccessibilityIsReduceMotionEnabled())
      {
        v5 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode];
        v6 = (_QWORD *)swift_allocObject();
        v6[2] = a1;
        v6[3] = v4;
        v6[4] = v1;
        v11[4] = partial apply for closure #1 in FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:);
        v11[5] = v6;
        v11[0] = MEMORY[0x24BDAC760];
        v11[1] = 1107296256;
        v11[2] = thunk for @escaping @callee_guaranteed () -> ();
        v11[3] = &block_descriptor_3;
        v7 = _Block_copy(v11);
        v8 = v5;
        v9 = a1;
        v10 = v1;
        swift_release();
        objc_msgSend(v8, sel_runAction_completion_, v9, v7);
        _Block_release(v7);

      }
    }
  }
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.setDotsFreeFromBearing()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  long double v4;
  long double v5;
  double v6;
  char v7;
  uint64_t v8;
  double v9;
  char v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  id v15;
  void *v16;
  id v17;

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) == 0)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode)
       + OBJC_IVAR____TtC10TVRemoteUI16FMPFSKSpriteNode_brightness;
    if ((*(_BYTE *)(v2 + 8) & 1) == 0)
    {
      v3 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction;
      if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction))
      {
        v5 = *(double *)v1;
        v4 = *((double *)v1 + 1);
        v6 = *(double *)v2;
        v7 = specialized RandomNumberGenerator.next<A>(upperBound:)(11);
        v8 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style;
        v9 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 32) * 100.0;
        if (v9 < 0.0)
        {
          __break(1u);
        }
        else
        {
          v10 = v7;
          v11 = hypot(v5, v4);
          v12 = dbl_21B0F7C40[(v10 & 1) == 0];
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v13, 0.0, v9);
          v15 = objc_msgSend((id)objc_opt_self(), sel_rotateByAngle_duration_, v12 / (double)*(uint64_t *)(v8 + 48), (v11 + v11)* 3.14159265/ (*(double *)(v8 + 24)* (v14 / -100.0 + 1.0))/ (double)*(uint64_t *)(v8 + 48));
          objc_msgSend(v15, sel_setTimingMode_, 0);
          objc_msgSend(v15, sel_setSpeed_, v6 * *(double *)(v8 + 40));
          v16 = *(void **)(v0 + v3);
          *(_QWORD *)(v0 + v3) = v15;
          v17 = v15;

          FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)(v17);
        }
      }
    }
  }
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.setDotsBoundToBearing()()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  char *v5;
  long double v6;
  uint64_t v7;
  long double v8;
  long double v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  __double2 v16;
  double v17;
  long double v18;
  __double2 v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char v29;
  uint64_t v30;
  char *v31;
  char v32;

  v1 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction;
  if (*(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction])
  {
    v2 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode], sel_removeAllActions);
    v3 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = 0;

    v4 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
    if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16] & 1) == 0)
    {
      v5 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
      if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition + 16] & 1) == 0)
      {
        v7 = *(_QWORD *)v4;
        v6 = *((double *)v4 + 1);
        v9 = *(double *)v5;
        v8 = *((double *)v5 + 1);
        v10 = fmod(*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading]/ 180.0* 3.14159265, 6.28318531);
        if (v10 <= 3.14159265)
        {
          if (v10 < -3.14159265)
            v10 = v10 + 6.28318531;
        }
        else
        {
          v10 = v10 + -6.28318531;
        }
        objc_msgSend(*(id *)&v0[v2], sel_zRotation);
        v12 = fmod(v11, 6.28318531);
        if (v12 <= 3.14159265)
        {
          if (v12 < -3.14159265)
            v12 = v12 + 6.28318531;
        }
        else
        {
          v12 = v12 + -6.28318531;
        }
        v13 = v10 + v12;
        v14 = hypot(*(long double *)&v7, v6);
        v15 = atan2(v6, *(long double *)&v7);
        v16 = __sincos_stret(v13 + v15);
        *(double *)v4 = v14 * v16.__cosval;
        *((double *)v4 + 1) = v14 * v16.__sinval;
        v4[16] = 0;
        FMPFSKPatternFragmentNode.peripheralPosition.didset();
        v17 = hypot(v9, v8);
        v18 = atan2(v8, v9);
        v19 = __sincos_stret(v13 + v18);
        *(double *)v5 = v17 * v19.__cosval;
        *((double *)v5 + 1) = v17 * v19.__sinval;
        v5[16] = 0;
      }
    }
    objc_msgSend(*(id *)&v0[v2], sel_setZRotation_, 0.0);
    objc_msgSend(v0, sel_setZRotation_, 0.0);
    v20 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
    if ((v22 & 1) != 0)
    {
      v23 = *(_QWORD *)v4;
      v24 = *((_QWORD *)v4 + 1);
      v25 = v4[16];
    }
    else
    {
      v23 = v20;
      v24 = v21;
      v25 = 0;
    }
    v26 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
    *(_QWORD *)v26 = v23;
    *((_QWORD *)v26 + 1) = v24;
    v26[16] = v25;
    v27 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition], *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8], v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16], v23, v24, v25);
    v28 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
    *(_QWORD *)v28 = v27;
    v28[8] = v29 & 1;
    v30 = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(_QWORD *)v26, *((_QWORD *)v26 + 1), v26[16], *(_QWORD *)v4, *((_QWORD *)v4 + 1), v4[16]);
    v31 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
    *(_QWORD *)v31 = v30;
    v31[8] = v32 & 1;
    if ((v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0)
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor]);
  }
}

uint64_t FMPFSKPatternFragmentNode.peripheralPosition.didset()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  char v13;

  v1 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 8);
    v6 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16);
  }
  else
  {
    v4 = v1;
    v5 = v2;
    v6 = 0;
  }
  v7 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
  *(_QWORD *)v7 = v4;
  *(_QWORD *)(v7 + 8) = v5;
  *(_BYTE *)(v7 + 16) = v6;
  v8 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition), *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16), v4, v5, v6);
  v9 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
  *(_QWORD *)v9 = v8;
  *(_BYTE *)(v9 + 8) = v10 & 1;
  result = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_BYTE *)(v7 + 16), *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition), *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16));
  v12 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
  *(_QWORD *)v12 = result;
  *(_BYTE *)(v12 + 8) = v13 & 1;
  return result;
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.resetToInitialPeripheralPosition()()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_experienceType) != 1)
  {
    v1 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition + 16);
    v2 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
    *(_OWORD *)v2 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition);
    *(_BYTE *)(v2 + 16) = v1;
    FMPFSKPatternFragmentNode.peripheralPosition.didset();
    v3 = FMPFSKPatternFragmentNode.calculateIntermediatePosition()();
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)v2;
      v7 = *(_QWORD *)(v2 + 8);
      v8 = *(_BYTE *)(v2 + 16);
    }
    else
    {
      v6 = v3;
      v7 = v4;
      v8 = 0;
    }
    v9 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
    *(_QWORD *)v9 = v6;
    *(_QWORD *)(v9 + 8) = v7;
    *(_BYTE *)(v9 + 16) = v8;
    v10 = FMPFSKPatternFragmentNode.quadCurveBezierLength(from:endPoint:)(*(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition), *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8), *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16), v6, v7, v8);
    v11 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
    *(_QWORD *)v11 = v10;
    *(_BYTE *)(v11 + 8) = v12 & 1;
    v13 = specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(*(_QWORD *)v9, *(_QWORD *)(v9 + 8), *(_BYTE *)(v9 + 16), *(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
    v14 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
    *(_QWORD *)v14 = v13;
    *(_BYTE *)(v14 + 8) = v15 & 1;
    v16 = *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition + 16);
    v17 = v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition;
    *(_OWORD *)v17 = *(_OWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition);
    *(_BYTE *)(v17 + 16) = v16;
  }
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.setDisturbanceScatterOffset(_:sprung:)(CGPoint _, Swift::Bool sprung)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  CGFloat y;
  CGFloat x;
  uint64_t v8;
  double *v9;
  double *v10;
  uint64_t v11;
  double v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  CGFloat *v16;
  CGFloat *v17;

  v3 = v2;
  v4 = *(_BYTE **)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring);
  if (v4
    && (v5 = *(_BYTE **)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring)) != 0)
  {
    y = _.y;
    x = _.x;
    v8 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset;
    *(CGFloat *)v8 = _.x;
    *(CGFloat *)(v8 + 8) = _.y;
    *(_BYTE *)(v8 + 16) = 0;
    if (!sprung
      || (v9 = (double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s],
          swift_beginAccess(),
          v9[35] + *(double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308)
      || (v10 = (double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s],
          swift_beginAccess(),
          v10[35] + *(double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308))
    {
      FLSpring.resetImmediately(toValue:)(x);
      v4[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
      FLSpring.resetImmediately(toValue:)(y);
      v5[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
      v11 = v3 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset;
      *(CGFloat *)v11 = x;
      *(CGFloat *)(v11 + 8) = y;
      *(_BYTE *)(v11 + 16) = 0;
      if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8) & 1) == 0)
      {
        v12 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor);
        v13 = v4;
        v14 = v5;
        FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v12);

      }
    }
    else
    {
      v16 = (CGFloat *)&v4[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
      *v16 = x;
      *((_BYTE *)v16 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      v17 = (CGFloat *)&v5[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
      *v17 = y;
      *((_BYTE *)v17 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
    }
  }
  else
  {
    v15 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset;
    *(_BYTE *)(v15 + 16) = 0;
    *(_QWORD *)v15 = 0;
    *(_QWORD *)(v15 + 8) = 0;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8) & 1) == 0)
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*(double *)(v2
                                                                      + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor));
  }
}

void FMPFSKPatternFragmentNode.__ivar_destroyer()
{
  uint64_t v0;

}

id FMPFSKPatternFragmentNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKPatternFragmentNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKPatternFragmentNode()
{
  return objc_opt_self();
}

uint64_t specialized FMPFSKPatternFragmentNode.arcLength(from:endPoint:)(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  double v11;
  double v12;
  double v13;
  double v14;

  if (((a3 | a6) & 1) != 0)
    return 0;
  v11 = hypot(*(long double *)&a4, *(long double *)&a5);
  v12 = atan2(*(long double *)&a2, *(long double *)&a1);
  v13 = atan2(*(long double *)&a5, *(long double *)&a4);
  v14 = v13 - v12;
  if (vabdd_f64(v13, v12) > 3.14159265)
  {
    if (v12 >= 0.0 || v13 < 0.0)
    {
      if (v13 < 0.0 && v12 >= 0.0)
        v14 = v14 + 6.28318531;
    }
    else
    {
      v14 = v14 + -6.28318531;
    }
  }
  return fabs((v11 + v11) * v14);
}

double specialized FMPFSKPatternFragmentNode.positionOnArcWith(startPoint:endPoint:at:)(long double a1, long double a2, long double a3, long double a4, double a5)
{
  double v8;
  double v9;
  double v10;
  double v12;

  v8 = atan2(a2, a1);
  v9 = atan2(a4, a3);
  v10 = v9 - v8;
  if (vabdd_f64(v9, v8) > 3.14159265)
  {
    if (v8 >= 0.0 || v9 < 0.0)
    {
      if (v9 < 0.0 && v8 >= 0.0)
        v10 = v10 + 6.28318531;
    }
    else
    {
      v10 = v10 + -6.28318531;
    }
  }
  v12 = hypot(a3, a4);
  return v12 * __sincos_stret((1.0 - a5) * v8 + (v8 + v10) * a5).__cosval;
}

void specialized FMPFSKPatternFragmentNode.positionOnCurvedPathWith(conformationFactor:trackOffsetCorrection:)(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  double v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  long double v10;
  double v11;
  long double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;

  v5 = 0.0;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0
    || (v6 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition,
        (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition + 16) & 1) != 0)
    || (v7 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition,
        (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
    || (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength + 8) & 1) != 0
    || (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength + 8) & 1) != 0)
  {
    v8 = 1;
    v9 = 0;
    v10 = 0.0;
    v11 = 0.0;
  }
  else
  {
    v12 = *(double *)v6;
    v10 = *(double *)v7;
    v13 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength);
    v14 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength);
    v15 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset);
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset + 8))
      v15 = 0.0;
    v16 = *(double *)(v6 + 8) - v15;
    v11 = *(double *)(v7 + 8) - v15;
    v17 = 1.0 - a2;
    FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)(v2
                                                                        + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition));
    v18 = v14 / (v13 + v14);
    if (v17 <= v18)
      FMPFSKPatternFragmentNode.positionOnCurvedPathWith(startPoint:controlPoint:endPoint:at:)();
    else
      v5 = specialized FMPFSKPatternFragmentNode.positionOnArcWith(startPoint:endPoint:at:)(v12, v16, v10, v11, (v17 - v18) / (v13 / (v13 + v14)));
    v8 = 0;
  }
  *(double *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v9;
  *(long double *)(a1 + 16) = v10;
  *(double *)(a1 + 24) = v11;
  *(_BYTE *)(a1 + 32) = v8;
}

uint64_t sub_21B0C16D4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_setSpeed_, *(double *)(v0 + 24)* *(double *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 40));
  return FMPFSKPatternFragmentNode.executePartPerimeterRotation(_:)(v1);
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type CGFloat and conformance CGFloat()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CGFloat and conformance CGFloat;
  if (!lazy protocol witness table cache variable for type CGFloat and conformance CGFloat)
  {
    result = MEMORY[0x22075D454](MEMORY[0x24BEE5108], MEMORY[0x24BEE50B0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CGFloat and conformance CGFloat);
  }
  return result;
}

void specialized FMPFSKPatternFragmentNode.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v1 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKNode()), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter] = 0;
  v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
  *(_QWORD *)v2 = 0;
  *((_QWORD *)v2 + 1) = 0;
  v2[16] = 1;
  v3 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialExplodedPosition];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  v3[16] = 1;
  v4 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength];
  *(_QWORD *)v4 = 0;
  v4[8] = 1;
  v5 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction] = 0;
  v6 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v7 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_relativeHeading];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring] = 0;
  v8 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling] = 0;
  v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v11[32] = 1;
  v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] = 1;
  v15 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffset];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v16 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceHomingFactor] = 1;
  v17 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = &v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for SiriTip()
{
  return &type metadata for SiriTip;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in SiriTip()
{
  return MEMORY[0x24BEE0D10];
}

unint64_t protocol witness for Tip.id.getter in conformance SiriTip()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Tip.title.getter in conformance SiriTip()
{
  LocalizedStringKey.init(stringLiteral:)();
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.message.getter in conformance SiriTip()
{
  LocalizedStringKey.init(stringLiteral:)();
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.image.getter in conformance SiriTip()
{
  uint64_t ObjCClassFromMetadata;
  id v1;

  type metadata accessor for TVRUITipManager();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  return Image.init(_:bundle:)();
}

uint64_t protocol witness for Tip.options.getter in conformance SiriTip()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Tips.UsesConstellation();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x22075C3E0](1);
  v12 = MEMORY[0x24BDF61D8];
  MEMORY[0x22075C38C](v7, v4, MEMORY[0x24BDF61D8]);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = v4;
  v17 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  MEMORY[0x22075C3B0](v11, v8, OpaqueTypeConformance2);
  v16 = v8;
  v17 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v14 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

void protocol witness for Identifiable.id.getter in conformance SiriTip(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000015;
  a1[1] = 0x800000021B0FF1A0;
}

unint64_t lazy protocol witness table accessor for type SiriTip and conformance SiriTip()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriTip and conformance SiriTip;
  if (!lazy protocol witness table cache variable for type SiriTip and conformance SiriTip)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for SiriTip, &type metadata for SiriTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriTip and conformance SiriTip);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SiriTip and conformance SiriTip;
  if (!lazy protocol witness table cache variable for type SiriTip and conformance SiriTip)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for SiriTip, &type metadata for SiriTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriTip and conformance SiriTip);
  }
  return result;
}

char *FMPFSKPatternNode.init(experienceType:config:size:withRingView:conformedToExplodedFactor:conformationFactor:)(unsigned __int8 *a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, char a7, double a8, double a9)
{
  char *v9;
  int v13;
  uint64_t v14;
  objc_class *v15;
  id v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void *v62;
  id v63;
  void *v64;
  int v65;
  double *v66;
  void *v67;
  id v68;
  void *v69;
  void *v70;
  double v71;
  double v72;
  double v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  char *v80;
  void *v81;
  char *v82;
  id v83;
  uint64_t v85;
  objc_super v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;

  v13 = *a1;
  v85 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView;
  *(_QWORD *)&v9[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView] = 0;
  v14 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode;
  v15 = (objc_class *)type metadata accessor for FMPFSKNode();
  v16 = objc_allocWithZone(v15);
  v17 = v9;
  *(_QWORD *)&v9[v14] = objc_msgSend(v16, sel_init);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode] = 0;
  v18 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode;
  *(_QWORD *)&v17[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9E98]), sel_init);
  v19 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode;
  *(_QWORD *)&v17[v19] = objc_msgSend(objc_allocWithZone(v15), sel_init);
  v20 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  *(_QWORD *)&v17[v20] = objc_msgSend(objc_allocWithZone(v15), sel_init);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes] = MEMORY[0x24BEE4AF8];
  v21 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode;
  *(_QWORD *)&v17[v21] = objc_msgSend(objc_allocWithZone(v15), sel_init);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_forceHideNoonNode] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting] = 0;
  v22 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange] = 0;
  v23 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v23[16] = 1;
  v24 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v24[16] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_inFOV] = 2;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformedToExplodedFactor] = 1;
  v25 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
  *(_QWORD *)v25 = 0;
  v25[8] = 1;
  v26 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor];
  *(_QWORD *)v26 = 0;
  v26[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformationFactor] = 1;
  v27 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
  *(_QWORD *)v27 = 0;
  v27[8] = 1;
  v28 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor];
  *(_QWORD *)v28 = 0;
  v28[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing] = 1;
  v29 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_bearing];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  v30 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing];
  *(_QWORD *)v30 = 0;
  v30[8] = 1;
  v31 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing];
  *(_QWORD *)v31 = 0;
  v31[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor] = 1;
  v32 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor];
  *(_QWORD *)v32 = 0;
  v32[8] = 1;
  v33 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor];
  *(_QWORD *)v33 = 0;
  v33[8] = 1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor] = 0;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLookout] = 1;
  v34 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookout];
  *(_QWORD *)v34 = 0;
  v34[8] = 1;
  v35 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout];
  *(_QWORD *)v35 = 0;
  v35[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLabelsOpacity] = 1;
  v36 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacity];
  *(_QWORD *)v36 = 0;
  v36[8] = 1;
  v37 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLabelsOpacity];
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType] = v13;
  if (v13 == 1)
  {
    if (one-time initialization token for r1NoAR != -1)
      swift_once();
    v38 = &static FMPFSKPatternNodeStyle.r1NoAR;
  }
  else
  {
    if (one-time initialization token for r1OrBT != -1)
      swift_once();
    v38 = &static FMPFSKPatternNodeStyle.r1OrBT;
  }
  v39 = v38[11];
  v102 = v38[10];
  v103 = v39;
  v104 = v38[12];
  v40 = v38[7];
  v98 = v38[6];
  v99 = v40;
  v41 = v38[9];
  v100 = v38[8];
  v101 = v41;
  v42 = v38[3];
  v94 = v38[2];
  v95 = v42;
  v43 = v38[5];
  v96 = v38[4];
  v97 = v43;
  v44 = v38[1];
  v92 = *v38;
  v93 = v44;
  v45 = (__int128 *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  v45[2] = v94;
  v45[3] = v42;
  v46 = v99;
  v45[6] = v98;
  v45[7] = v46;
  v47 = v97;
  v45[4] = v96;
  v45[5] = v47;
  v48 = v104;
  v49 = v102;
  v45[11] = v103;
  v45[12] = v48;
  v50 = v101;
  v45[8] = v100;
  v45[9] = v50;
  v45[10] = v49;
  v51 = v93;
  *v45 = v92;
  v45[1] = v51;
  v52 = &v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config];
  v53 = *(_OWORD *)(a2 + 48);
  v55 = *(_OWORD *)a2;
  v54 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v52 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v52 + 3) = v53;
  *(_OWORD *)v52 = v55;
  *((_OWORD *)v52 + 1) = v54;
  v56 = *(_OWORD *)(a2 + 112);
  v58 = *(_OWORD *)(a2 + 64);
  v57 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v52 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v52 + 7) = v56;
  *((_OWORD *)v52 + 4) = v58;
  *((_OWORD *)v52 + 5) = v57;
  v60 = *(_OWORD *)(a2 + 144);
  v59 = *(_OWORD *)(a2 + 160);
  v61 = *(_OWORD *)(a2 + 128);
  v52[176] = *(_BYTE *)(a2 + 176);
  *((_OWORD *)v52 + 9) = v60;
  *((_OWORD *)v52 + 10) = v59;
  *((_OWORD *)v52 + 8) = v61;
  v62 = (void *)objc_opt_self();
  outlined retain of FMPFSKPatternNodeConfig(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FMPFSKLabelNodeStyle?);
  v63 = objc_msgSend(v62, sel_mainScreen);
  v64 = (void *)MEMORY[0x22075C584](0xD000000000000011, 0x800000021B0FDD10);
  v65 = MGGetSInt32Answer();

  *(double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pixelsPerInch] = (double)v65;
  v66 = (double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize];
  *v66 = a8;
  v66[1] = a9;
  v67 = *(void **)&v9[v85];
  *(_QWORD *)&v9[v85] = a3;
  v68 = a3;

  if (one-time initialization token for default != -1)
    swift_once();
  v69 = (void *)qword_25513FD58;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonDotColor] = qword_25513FD58;
  v70 = (void *)qword_25513FD60;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeDotColor] = qword_25513FD60;
  v71 = 1.0;
  if (v13 == 1)
    v71 = 0.5;
  v72 = v71 * *v66;
  v73 = v71 * v66[1];
  if (v73 >= v72)
    v73 = v72;
  v74 = v73 * 0.5;
  *(double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_explodedDiskRadius] = *((double *)v45 + 6) * v74;
  *(double *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius] = v74 * *((double *)v45 + 8);
  if ((a5 & 1) != 0)
    v75 = 0;
  else
    v75 = a4;
  *(_QWORD *)v25 = v75;
  v25[8] = 0;
  if ((a7 & 1) != 0)
    v76 = 0;
  else
    v76 = a6;
  *(_QWORD *)v27 = v76;
  v27[8] = 0;
  v77 = *((_QWORD *)v45 + 22);
  v78 = v69;
  v79 = v70;
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v76, 0, 0x3F50624DD2F1A9FCLL, 0, v77, 0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(v75, 0, 0x3F847AE147AE147BLL, 0, v77, 0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_energeticAngleSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F69BC65B68B71C3, 0, 0, 1);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lethargicAngleSpring] = specialized static FMPFFluidSpring.lethargicSpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F69BC65B68B71C3, 0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 1, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring] = specialized static FMPFFluidSpring.lethargicSpringWith(initialValue:stableValueThreshold:)(0x3FE0000000000000, 0, 0x3F1A36E2EB1C432DLL, 0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);

  v91.receiver = v17;
  v91.super_class = (Class)type metadata accessor for FMPFSKPatternNode();
  v80 = (char *)objc_msgSendSuper2(&v91, sel_init);
  v81 = *(void **)&v80[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode];
  v82 = v80;
  v83 = v81;
  objc_msgSend(v82, sel_addChild_, v83);

  outlined retain of FMPFSKPatternNodeConfig(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FMPFSKLabelNodeStyle?);
  return v82;
}

Swift::Void __swiftcall FMPFSKPatternNode.applyDebugMode(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  BOOL v29;
  uint64_t v30;
  void *v31;

  v2 = v1;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode), sel_setHidden_, !a1);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode), sel_setHidden_, !a1);
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode), sel_setHidden_, !a1);
  v4 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode;
  v5 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode);
  if (v5)
    objc_msgSend(v5, sel_setHidden_, 1);
  v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode;
  v7 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode);
  if (v7)
    objc_msgSend(v7, sel_setHidden_, 0);
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setHidden_, 0);
  v8 = *(void **)(v2 + v4);
  if (v8)
  {
    if (a1)
    {
      v9 = (void *)objc_opt_self();
      v10 = v8;
      v11 = objc_msgSend(v9, sel_yellowColor);
      v12 = objc_msgSend(v11, sel_colorWithAlphaComponent_, 0.75);

    }
    else
    {
      v13 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonDotColor);
      v14 = v8;
      v12 = v13;
    }
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v12);

  }
  v15 = *(void **)(v2 + v6);
  if (v15)
  {
    if (a1)
    {
      v16 = (void *)objc_opt_self();
      v17 = v15;
      v18 = objc_msgSend(v16, sel_purpleColor);
      v19 = objc_msgSend(v18, sel_colorWithAlphaComponent_, 0.75);

    }
    else
    {
      v20 = *(void **)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeDotColor);
      v21 = v15;
      v19 = v20;
    }
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v19);

  }
  v22 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode), sel_children);
  type metadata accessor for SKNode();
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v23 >> 62)
    goto LABEL_27;
  v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v24; v24 = _CocoaArrayWrapper.endIndex.getter())
  {
    v25 = 4;
    v26 = 0;
    if ((v23 & 0xC000000000000001) != 0)
    {
LABEL_18:
      v27 = (id)MEMORY[0x22075C8C0](v26, v23);
      goto LABEL_20;
    }
    while (1)
    {
      v27 = *(id *)(v23 + 8 * v25);
LABEL_20:
      v28 = v27;
      v29 = __OFADD__(v26, 1);
      v30 = v26 + 1;
      if (v29)
        break;
      objc_opt_self();
      v31 = (void *)swift_dynamicCastObjCClass();
      if (v31)
        objc_msgSend(v31, sel_setLineWidth_, 1.0);

      if (v30 == v24)
        goto LABEL_28;
      v26 = ++v25 - 4;
      if ((v23 & 0xC000000000000001) != 0)
        goto LABEL_18;
    }
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
  }
LABEL_28:
  swift_bridgeObjectRelease_n();
}

void FMPFSKPatternNode.setConformationFactor(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  double *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v6 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor;
  *(Swift::Double *)v6 = a2;
  *(_BYTE *)(v6 + 8) = 0;
  v7 = (double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor);
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor + 8) & 1) == 0)
  {
    v8 = *v7;
    if (*v7 == 0.0 && a2 > 0.0)
    {
      v9 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate, v8))
      {
        v10 = *(_QWORD *)(v9 + 8);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v10 + 24))(ObjectType, v10);
        swift_unknownObjectRelease();
      }
      FMPFSKPatternNode.readjustFragmentNodesComposedPositionForTape(_:)(*(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track), *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track + 8));
    }
    else if (v8 == 1.0 && a2 < 1.0)
    {
      v13 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
      {
        v14 = *(_QWORD *)(v13 + 8);
        v15 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v15, v14);
        swift_unknownObjectRelease();
      }
      FMPFSKPatternNode.readjustFragmentNodesPeripheralPositionForTape()();
    }
  }
  if ((a1 & 1) != 0
    && (v16 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring),
        v17 = v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v17 + 280) + *(double *)(v16 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    v19 = v16 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v19 = a2;
    *(_BYTE *)(v19 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    FMPFSKPatternNode.applyConformationFactor(_:sprung:)(1, a2);
  }
}

void FMPFSKPatternNode.setCenterFactor(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = v2;
  v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor + 8) & 1) == 0)
  {
    if (*(double *)v5 >= a2)
    {
      v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor;
      if (*(double *)v5 <= a2)
        v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor);
      else
        v7 = -1;
    }
    else
    {
      v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor;
      v7 = 1;
    }
    *(_QWORD *)(v2 + v6) = v7;
  }
  *(Swift::Double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (v8 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring),
        v9 = v8 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v9 + 280) + *(double *)(v8 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    v12 = v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v12 = a2;
    *(_BYTE *)(v12 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v11 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor;
    *(Swift::Double *)v11 = a2;
    *(_BYTE *)(v11 + 8) = 0;
  }
  FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
}

void FMPFSKPatternNode.setLookout(_:sprung:)(char a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v2;
  v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookout;
  *(Swift::Double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring),
        v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    v10 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v10 = a2;
    *(_BYTE *)(v10 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout;
    *(Swift::Double *)v9 = a2;
    *(_BYTE *)(v9 + 8) = 0;
  }
  FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
}

Swift::Void __swiftcall FMPFSKPatternNode.addSprungRelativeHeading(_:)(Swift::Double a1)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  int64x2_t v24;

  v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v4 = *v3;
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v5)
      goto LABEL_12;
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  v6 = 0;
  v24 = vdupq_n_s64(0x4341C37937E08000uLL);
  do
  {
    if ((v4 & 0xC000000000000001) != 0)
      v8 = (char *)MEMORY[0x22075C8C0](v6, v4);
    else
      v8 = (char *)*(id *)(v4 + 8 * v6 + 32);
    v9 = v8;
    v10 = *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring];
    v11 = v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
    swift_beginAccess();
    v12 = v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
    v13 = *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v14 = *(double *)(v11 + 280) + v13;
    v15 = v14 + a1;
    if (v14 == 1.79769313e308)
    {
      v16 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
      v17 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
      *(double *)v11 = v15;
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = v16;
      *(_OWORD *)(v11 + 24) = xmmword_21B0F86F0;
      *(_OWORD *)(v11 + 40) = xmmword_21B0F8700;
      *(_QWORD *)(v11 + 56) = v16;
      *(_QWORD *)(v11 + 64) = 0;
      *(_QWORD *)(v11 + 72) = 0;
      *(int64x2_t *)(v11 + 80) = v24;
      *(_OWORD *)(v11 + 96) = 0u;
      *(_OWORD *)(v11 + 112) = 0u;
      *(_QWORD *)(v11 + 128) = v17;
      *(_OWORD *)(v11 + 136) = xmmword_21B0F86F0;
      *(_OWORD *)(v11 + 152) = xmmword_21B0F8700;
      *(_QWORD *)(v11 + 168) = v17;
      *(_QWORD *)(v11 + 176) = 0;
      *(_QWORD *)(v11 + 184) = 0;
      *(_OWORD *)(v11 + 208) = 0u;
      *(_OWORD *)(v11 + 224) = 0u;
      *(int64x2_t *)(v11 + 192) = v24;
      *(double *)(v11 + 240) = v15;
      *(_OWORD *)(v11 + 248) = xmmword_21B0F86F0;
      *(_QWORD *)(v11 + 264) = 0x4063BD3CC9BE45DELL;
      *(_QWORD *)(v11 + 272) = 0x403921FB54442D18;
      *(double *)(v11 + 280) = v15;
      *(_QWORD *)(v11 + 288) = 0;
      *(_QWORD *)(v11 + 296) = 0;
      *(int64x2_t *)(v11 + 304) = v24;
      *(_OWORD *)(v11 + 320) = 0u;
      *(_OWORD *)(v11 + 336) = 0u;
      v18 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
      *(_QWORD *)(v11 + 352) = v18;
      v19 = *(_QWORD *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
      *(_QWORD *)(v11 + 360) = v19;
      v20 = 6.28318531
          / *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
          * (6.28318531
           / *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
      v21 = sqrt(v20);
      v22 = *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v21 + v21);
      *(_QWORD *)v12 = 0;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0x3FF0000000000000;
      *(double *)(v12 + 24) = v20;
      *(double *)(v12 + 32) = v22;
      *(_QWORD *)(v12 + 40) = 0;
      *(int64x2_t *)(v12 + 64) = v24;
      *(_OWORD *)(v12 + 80) = 0u;
      *(_OWORD *)(v12 + 96) = 0u;
      *(_QWORD *)(v12 + 48) = v18;
      *(_QWORD *)(v12 + 56) = v19;
      *(double *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = v15;
      *(_QWORD *)(v10 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
      *(_BYTE *)(v10 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      v13 = 0.0;
    }
    v7 = v15 - v13;
    *(double *)(v11 + 280) = v7;
    ++v6;
    *(double *)(v11 + 240) = v7;
    *(_QWORD *)(v11 + 248) = 0;

  }
  while (v5 != v6);
LABEL_12:
  swift_bridgeObjectRelease_n();
  if (*(_QWORD *)(v23 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode))
    FMPFSKPeripheralDotNode.addSprungRelativeHeading(_:)(a1);
}

id FMPFSKPatternNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKPatternNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKPatternNode()
{
  return objc_opt_self();
}

uint64_t outlined retain of FMPFSKPatternNodeConfig(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168), *(unsigned __int8 *)(a1 + 176));
  return a1;
}

unint64_t type metadata accessor for SKNode()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SKNode;
  if (!lazy cache variable for type metadata for SKNode)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  }
  return result;
}

void specialized FMPFSKPatternNode.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  objc_class *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView] = 0;
  v1 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode;
  v2 = (objc_class *)type metadata accessor for FMPFSKNode();
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode] = 0;
  v3 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9E98]), sel_init);
  v4 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  v5 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes] = MEMORY[0x24BEE4AF8];
  v6 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode;
  *(_QWORD *)&v0[v6] = objc_msgSend(objc_allocWithZone(v2), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_forceHideNoonNode] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting] = 0;
  v7 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange] = 0;
  v8 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 1;
  v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_inFOV] = 2;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformedToExplodedFactor] = 1;
  v10 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformationFactor] = 1;
  v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing] = 1;
  v14 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_bearing];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing];
  *(_QWORD *)v15 = 0;
  v15[8] = 1;
  v16 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor] = 1;
  v17 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor];
  *(_QWORD *)v17 = 0;
  v17[8] = 1;
  v18 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLookout] = 1;
  v19 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookout];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  v20 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLabelsOpacity] = 1;
  v21 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacity];
  *(_QWORD *)v21 = 0;
  v21[8] = 1;
  v22 = &v0[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLabelsOpacity];
  *(_QWORD *)v22 = 0;
  v22[8] = 1;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined destroy of weak FMPFSKPatternNodeDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t @objc FMPFSKScene.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for UITouch();
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8);

  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for UITouch()
{
  unint64_t result;

  result = lazy cache variable for type metadata for UITouch;
  if (!lazy cache variable for type metadata for UITouch)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UITouch and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type UITouch and conformance NSObject;
  if (!lazy protocol witness table cache variable for type UITouch and conformance NSObject)
  {
    v1 = type metadata accessor for UITouch();
    result = MEMORY[0x22075D454](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITouch and conformance NSObject);
  }
  return result;
}

void specialized FMPFSKScene.touchesBegan(_:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  _QWORD v30[6];

  v2 = v1;
  v4 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v5 = objc_msgSend(v4, sel_fmpfDebugMode);

  if (v5 && (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) & 1) == 0)
  {
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) = 1;
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches) = 1;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for UITouch();
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      Set.Iterator.init(_cocoa:)();
      a1 = v30[1];
      v29 = v30[2];
      v6 = v30[3];
      v7 = v30[4];
      v8 = v30[5];
    }
    else
    {
      v9 = -1 << *(_BYTE *)(a1 + 32);
      v29 = a1 + 56;
      v6 = ~v9;
      v10 = -v9;
      if (v10 < 64)
        v11 = ~(-1 << v10);
      else
        v11 = -1;
      v8 = v11 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v7 = 0;
    }
    v28 = (unint64_t)(v6 + 64) >> 6;
    while (1)
    {
      if (a1 < 0)
      {
        if (!__CocoaSet.Iterator.next()())
          goto LABEL_39;
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v19 = (id)v30[0];
        swift_unknownObjectRelease();
        v18 = v7;
        v16 = v8;
        if (!v19)
          goto LABEL_39;
      }
      else
      {
        if (v8)
        {
          v16 = (v8 - 1) & v8;
          v17 = __clz(__rbit64(v8)) | (v7 << 6);
          v18 = v7;
        }
        else
        {
          v20 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
            __break(1u);
            return;
          }
          if (v20 >= v28)
            goto LABEL_39;
          v21 = *(_QWORD *)(v29 + 8 * v20);
          v18 = v7 + 1;
          if (!v21)
          {
            v18 = v7 + 2;
            if (v7 + 2 >= v28)
              goto LABEL_39;
            v21 = *(_QWORD *)(v29 + 8 * v18);
            if (!v21)
            {
              v18 = v7 + 3;
              if (v7 + 3 >= v28)
                goto LABEL_39;
              v21 = *(_QWORD *)(v29 + 8 * v18);
              if (!v21)
              {
                v18 = v7 + 4;
                if (v7 + 4 >= v28)
                  goto LABEL_39;
                v21 = *(_QWORD *)(v29 + 8 * v18);
                if (!v21)
                {
                  v22 = v7 + 5;
                  while (v28 != v22)
                  {
                    v21 = *(_QWORD *)(v29 + 8 * v22++);
                    if (v21)
                    {
                      v18 = v22 - 1;
                      goto LABEL_32;
                    }
                  }
LABEL_39:
                  outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
                  return;
                }
              }
            }
          }
LABEL_32:
          v16 = (v21 - 1) & v21;
          v17 = __clz(__rbit64(v21)) + (v18 << 6);
        }
        v19 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v17);
        if (!v19)
          goto LABEL_39;
      }
      objc_msgSend(v19, sel_locationInNode_, v2);
      v25 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation;
      if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation + 16) == 1)
      {
        *(_QWORD *)v25 = v23;
        *(_QWORD *)(v25 + 8) = v24;
        *(_BYTE *)(v25 + 16) = 0;
        v30[0] = 0;
        v26 = MEMORY[0x22075D4F0](v30, 8);
        v27 = v30[0];
        if ((unint64_t)(11 * v30[0]) <= 4)
        {
          do
          {
            v30[0] = 0;
            v26 = MEMORY[0x22075D4F0](v30, 8);
            v27 = v30[0];
          }
          while ((unint64_t)(11 * v30[0]) < 5);
        }
        if ((((v27 * (unsigned __int128)0xBuLL) >> 64) & 1) != 0)
        {
          v12 = 45.0;
          v13 = 180.0;
        }
        else
        {
          v12 = -180.0;
          v13 = -45.0;
        }
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v26, v12, v13);
        v14 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing;
        *(_QWORD *)v14 = v15;
        *(_BYTE *)(v14 + 8) = 0;
      }

      v7 = v18;
      v8 = v16;
    }
  }
}

void specialized FMPFSKScene.touchesMoved(_:with:)(uint64_t a1)
{
  char *v1;
  char *v2;
  id v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double *v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  double v41;
  uint64_t ObjectType;
  double v43;
  _BOOL4 v44;
  int64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  if (v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches] == 1)
  {
    v2 = v1;
    v4 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v5 = objc_msgSend(v4, sel_fmpfDebugMode);

    if (v5)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.makeIterator()();
        type metadata accessor for UITouch();
        lazy protocol witness table accessor for type UITouch and conformance NSObject();
        Set.Iterator.init(_cocoa:)();
        a1 = v47;
        v6 = v48;
        v7 = v49;
        v8 = v50;
        v9 = v51;
      }
      else
      {
        v10 = -1 << *(_BYTE *)(a1 + 32);
        v6 = a1 + 56;
        v11 = ~v10;
        v12 = -v10;
        if (v12 < 64)
          v13 = ~(-1 << v12);
        else
          v13 = -1;
        v9 = v13 & *(_QWORD *)(a1 + 56);
        swift_bridgeObjectRetain();
        v7 = v11;
        v8 = 0;
      }
      v14 = (unint64_t)(v7 + 64) >> 6;
      v45 = v14;
      if ((a1 & 0x8000000000000000) == 0)
        goto LABEL_14;
LABEL_10:
      if (__CocoaSet.Iterator.next()())
      {
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v15 = v46;
        swift_unknownObjectRelease();
        v16 = v8;
        v17 = v9;
        if (v46)
        {
          do
          {
            objc_msgSend(v15, sel_locationInNode_, v2);
            v24 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation];
            if ((v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation + 16] & 1) != 0
              || (v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing + 8] & 1) != 0)
            {

              v8 = v16;
              v9 = v17;
              if (a1 < 0)
                goto LABEL_10;
            }
            else
            {
              v25 = v22;
              v26 = v23;
              v27 = *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing];
              v28 = *v24;
              v29 = v24[1];
              objc_msgSend(v2, sel_size);
              v31 = v30;
              objc_msgSend(v2, sel_size);
              v33 = v32;
              v34 = MEMORY[0x22075D574](&v2[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]);
              if (v34)
              {
                v35 = v34;
                v36 = v34 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate;
                if (MEMORY[0x22075D574](v34 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate))
                {
                  v37 = *(_QWORD *)(v36 + 8);
                  v44 = vabdd_f64(v28, v25) < vabdd_f64(v29, v26);
                  v38 = hypot(v25 - v28, v26 - v29);
                  if (v33 >= v31)
                    v39 = v31;
                  else
                    v39 = v33;
                  v40 = v6;
                  v41 = fmin(v38 / (v39 * 0.66), 1.0);
                  ObjectType = swift_getObjectType();
                  v43 = v41;
                  v6 = v40;
                  (*(void (**)(double, _QWORD, _BOOL4, uint64_t, uint64_t, uint64_t, double))(v37 + 24))(COERCE_DOUBLE(*(_QWORD *)&v43), 0, v44, v35, ObjectType, v37, v27);

                  swift_unknownObjectRelease();
                }
                else
                {

                }
                swift_unknownObjectRelease();
              }
              else
              {

              }
              v8 = v16;
              v9 = v17;
              v14 = v45;
              if (a1 < 0)
                goto LABEL_10;
            }
LABEL_14:
            if (v9)
            {
              v17 = (v9 - 1) & v9;
              v18 = __clz(__rbit64(v9)) | (v8 << 6);
              v16 = v8;
            }
            else
            {
              v19 = v8 + 1;
              if (__OFADD__(v8, 1))
              {
                __break(1u);
                return;
              }
              if (v19 >= v14)
                break;
              v20 = *(_QWORD *)(v6 + 8 * v19);
              v16 = v8 + 1;
              if (!v20)
              {
                v16 = v8 + 2;
                if (v8 + 2 >= v14)
                  break;
                v20 = *(_QWORD *)(v6 + 8 * v16);
                if (!v20)
                {
                  v16 = v8 + 3;
                  if (v8 + 3 >= v14)
                    break;
                  v20 = *(_QWORD *)(v6 + 8 * v16);
                  if (!v20)
                  {
                    v16 = v8 + 4;
                    if (v8 + 4 >= v14)
                      break;
                    v20 = *(_QWORD *)(v6 + 8 * v16);
                    if (!v20)
                    {
                      v21 = v8 + 5;
                      while (v14 != v21)
                      {
                        v20 = *(_QWORD *)(v6 + 8 * v21++);
                        if (v20)
                        {
                          v16 = v21 - 1;
                          goto LABEL_29;
                        }
                      }
                      break;
                    }
                  }
                }
              }
LABEL_29:
              v17 = (v20 - 1) & v20;
              v18 = __clz(__rbit64(v20)) + (v16 << 6);
            }
            v15 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v18);
          }
          while (v15);
        }
      }
      outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
    }
  }
}

void specialized FMPFSKScene.touchesEnded(_:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches) == 1)
  {
    v2 = v1;
    v3 = a1;
    v25 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for UITouch();
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      Set.Iterator.init(_cocoa:)();
      v3 = v29;
      v27 = v30;
      v4 = v31;
      v5 = v32;
      v6 = v33;
    }
    else
    {
      v7 = -1 << *(_BYTE *)(a1 + 32);
      v27 = a1 + 56;
      v4 = ~v7;
      v8 = -v7;
      if (v8 < 64)
        v9 = ~(-1 << v8);
      else
        v9 = -1;
      v6 = v9 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v5 = 0;
    }
    v26 = (unint64_t)(v4 + 64) >> 6;
    while (1)
    {
      if (v3 < 0)
      {
        if (!__CocoaSet.Iterator.next()())
          goto LABEL_38;
        type metadata accessor for UITouch();
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v15 = v28;
        swift_unknownObjectRelease();
        v14 = v5;
        v12 = v6;
        if (!v28)
          goto LABEL_38;
      }
      else
      {
        if (v6)
        {
          v12 = (v6 - 1) & v6;
          v13 = __clz(__rbit64(v6)) | (v5 << 6);
          v14 = v5;
        }
        else
        {
          v16 = v5 + 1;
          if (__OFADD__(v5, 1))
          {
            __break(1u);
            return;
          }
          if (v16 >= v26)
            goto LABEL_38;
          v17 = *(_QWORD *)(v27 + 8 * v16);
          v14 = v5 + 1;
          if (!v17)
          {
            v14 = v5 + 2;
            if (v5 + 2 >= v26)
              goto LABEL_38;
            v17 = *(_QWORD *)(v27 + 8 * v14);
            if (!v17)
            {
              v14 = v5 + 3;
              if (v5 + 3 >= v26)
                goto LABEL_38;
              v17 = *(_QWORD *)(v27 + 8 * v14);
              if (!v17)
              {
                v14 = v5 + 4;
                if (v5 + 4 >= v26)
                  goto LABEL_38;
                v17 = *(_QWORD *)(v27 + 8 * v14);
                if (!v17)
                {
                  v18 = v5 + 5;
                  while (v26 != v18)
                  {
                    v17 = *(_QWORD *)(v27 + 8 * v18++);
                    if (v17)
                    {
                      v14 = v18 - 1;
                      goto LABEL_31;
                    }
                  }
LABEL_38:
                  outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
                  *(_BYTE *)(v2 + v25) = 0;
                  *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) = 0;
                  return;
                }
              }
            }
          }
LABEL_31:
          v12 = (v17 - 1) & v17;
          v13 = __clz(__rbit64(v17)) + (v14 << 6);
        }
        v15 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
        if (!v15)
          goto LABEL_38;
      }
      objc_msgSend(v15, sel_locationInNode_, v2);
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing + 8) & 1) == 0
        && (*(_BYTE *)(v2 + 16 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation) & 1) == 0)
      {
        v19 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing);
        v20 = MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
        if (v20)
        {
          v21 = v20;
          v22 = v20 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate;
          if (MEMORY[0x22075D574](v20 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate))
          {
            v23 = *(_QWORD *)(v22 + 8);
            ObjectType = swift_getObjectType();
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v23 + 24))(0, 1, 2, v21, ObjectType, v23, v19);
            swift_unknownObjectRelease();
          }
          swift_unknownObjectRelease();
        }
        v10 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation;
        *(_QWORD *)v10 = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_BYTE *)(v10 + 16) = 1;
        v11 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing;
        *(_QWORD *)v11 = 0;
        *(_BYTE *)(v11 + 8) = 1;
      }

      v5 = v14;
      v6 = v12;
    }
  }
}

void specialized FMPFSKScene.touchesCancelled(_:with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches) == 1)
  {
    v2 = a1;
    v19 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches;
    if ((a1 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      type metadata accessor for UITouch();
      lazy protocol witness table accessor for type UITouch and conformance NSObject();
      Set.Iterator.init(_cocoa:)();
      v2 = v23;
      v21 = v24;
      v3 = v25;
      v4 = v26;
      v5 = v27;
    }
    else
    {
      v6 = -1 << *(_BYTE *)(a1 + 32);
      v21 = a1 + 56;
      v3 = ~v6;
      v7 = -v6;
      if (v7 < 64)
        v8 = ~(-1 << v7);
      else
        v8 = -1;
      v5 = v8 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain();
      v4 = 0;
    }
    v18 = v3;
    v20 = (unint64_t)(v3 + 64) >> 6;
    if (v2 < 0)
      goto LABEL_11;
    while (1)
    {
      if (v5)
      {
        v9 = (v5 - 1) & v5;
        v10 = __clz(__rbit64(v5)) | (v4 << 6);
        v11 = v4;
      }
      else
      {
        v13 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          return;
        }
        if (v13 >= v20)
          goto LABEL_31;
        v14 = *(_QWORD *)(v21 + 8 * v13);
        v11 = v4 + 1;
        if (!v14)
        {
          v11 = v4 + 2;
          if (v4 + 2 >= v20)
            goto LABEL_31;
          v14 = *(_QWORD *)(v21 + 8 * v11);
          if (!v14)
          {
            v11 = v4 + 3;
            if (v4 + 3 >= v20)
              goto LABEL_31;
            v14 = *(_QWORD *)(v21 + 8 * v11);
            if (!v14)
            {
              v11 = v4 + 4;
              if (v4 + 4 >= v20)
                goto LABEL_31;
              v14 = *(_QWORD *)(v21 + 8 * v11);
              if (!v14)
              {
                v15 = v4 + 5;
                while (v20 != v15)
                {
                  v14 = *(_QWORD *)(v21 + 8 * v15++);
                  if (v14)
                  {
                    v11 = v15 - 1;
                    goto LABEL_27;
                  }
                }
LABEL_31:
                outlined consume of [CHHapticEngineOptionKey : Any].Iterator._Variant();
                *(_BYTE *)(v1 + v19) = 0;
                *(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging) = 0;
                return;
              }
            }
          }
        }
LABEL_27:
        v9 = (v14 - 1) & v14;
        v10 = __clz(__rbit64(v14)) + (v11 << 6);
      }
      v12 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v10);
      if (!v12)
        goto LABEL_31;
      while (1)
      {
        objc_msgSend(v12, sel_locationInNode_, v1, v18);

        v16 = v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation;
        *(_QWORD *)v16 = 0;
        *(_QWORD *)(v16 + 8) = 0;
        *(_BYTE *)(v16 + 16) = 1;
        v17 = v1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing;
        *(_QWORD *)v17 = 0;
        *(_BYTE *)(v17 + 8) = 1;
        v4 = v11;
        v5 = v9;
        if ((v2 & 0x8000000000000000) == 0)
          break;
LABEL_11:
        if (__CocoaSet.Iterator.next()())
        {
          type metadata accessor for UITouch();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v12 = v22;
          swift_unknownObjectRelease();
          v11 = v4;
          v9 = v5;
          if (v22)
            continue;
        }
        goto LABEL_31;
      }
    }
  }
}

void *TVRUIFindingSession.start(for:dismissedHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v22;

  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_pairedRemoteInfo) & 1) == 0
    || (v7 = objc_msgSend(a1, sel_pairedRemoteInfo)) == 0)
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.findingExperience);
    v8 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_21B042000, v8, v15, "No remote info found. Failed to start finding session.", v16, 2u);
      MEMORY[0x22075D4E4](v16, -1, -1);
    }
    goto LABEL_24;
  }
  v8 = v7;
  if ((objc_msgSend(v3, sel_isFindingSessionActive) & 1) != 0)
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.findingExperience);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      v13 = "Finding session is already active";
LABEL_22:
      _os_log_impl(&dword_21B042000, v10, v11, v13, v12, 2u);
      MEMORY[0x22075D4E4](v12, -1, -1);

      return 0;
    }
LABEL_23:

LABEL_24:
    return 0;
  }
  -[NSObject copy](v8, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for TVRCSiriRemoteInfo);
  if (!swift_dynamicCast())
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.findingExperience);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      v13 = "Remote info copy type mismatch";
      goto LABEL_22;
    }
    goto LABEL_23;
  }
  v17 = objc_msgSend(a1, sel_name);
  if (!v17)
  {
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = (id)MEMORY[0x22075C584](v18);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v22, sel_setTvName_, v17);

  if ((objc_msgSend(a1, sel_respondsToSelector_, sel_enableFindingSession_) & 1) != 0)
    objc_msgSend(a1, sel_enableFindingSession_, 1);
  *(_QWORD *)&v3[OBJC_IVAR___TVRUIFindingSession_device] = a1;
  swift_unknownObjectRelease();
  swift_unknownObjectRetain();
  v19 = TVRUIFindingSession.findingViewController(for:dismissedHandler:)(v22, a2, a3);

  return v19;
}

void *TVRUIFindingSession.findingViewController(for:dismissedHandler:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  void (**v11)();
  id v12;
  void *v13;
  unint64_t v14;
  void *v15;
  id v16;
  id v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  objc_super v30;

  v4 = v3;
  v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v9 = (objc_class *)type metadata accessor for FindingSessionPresentationController();
  v10 = (char *)objc_allocWithZone(v9);
  v11 = (void (**)())&v10[OBJC_IVAR____TtC10TVRemoteUI36FindingSessionPresentationController_didDismissHandler];
  *v11 = partial apply for closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:);
  v11[1] = (void (*)())v8;
  v30.receiver = v10;
  v30.super_class = v9;
  v12 = objc_msgSendSuper2(&v30, sel_init);
  v13 = *(void **)(v4 + OBJC_IVAR___TVRUIFindingSession_findingSessionPresentationController);
  *(_QWORD *)(v4 + OBJC_IVAR___TVRUIFindingSession_findingSessionPresentationController) = v12;

  v14 = (unint64_t)TVRCSiriRemoteInfo.discoveryToken()();
  if (v14)
  {
    v15 = (void *)v14;
    v16 = objc_allocWithZone((Class)type metadata accessor for FindingViewController());
    v17 = a1;
    v18 = (char *)specialized FindingViewController.init(discoveryToken:remoteInfo:)(v15, v17);

    v19 = &v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
    v20 = *(_QWORD *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
    *(_QWORD *)v19 = a2;
    *((_QWORD *)v19 + 1) = a3;
    swift_retain();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v20);

    v21 = OBJC_IVAR___TVRUIFindingSession_findingVC;
    v22 = *(void **)(v4 + OBJC_IVAR___TVRUIFindingSession_findingVC);
    *(_QWORD *)(v4 + OBJC_IVAR___TVRUIFindingSession_findingVC) = v18;

    v23 = *(void **)(v4 + v21);
    v24 = v23;
  }
  else
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.findingExperience);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_21B042000, v26, v27, "Failed to create discovery token", v28, 2u);
      MEMORY[0x22075D4E4](v28, -1, -1);
    }

    return 0;
  }
  return v23;
}

void closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:)(uint64_t a1)
{
  uint64_t v1;
  char *v2;
  void *v3;
  void *v4;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = (char *)MEMORY[0x22075D574](v1);
  if (v2)
  {
    v3 = v2;
    v4 = *(void **)&v2[OBJC_IVAR___TVRUIFindingSession_device];
    if (v4)
    {
      swift_unknownObjectRetain();

      if ((objc_msgSend(v4, sel_respondsToSelector_, sel_enableFindingSession_) & 1) != 0)
        objc_msgSend(v4, sel_enableFindingSession_, 0);
      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

NIDiscoveryToken_optional __swiftcall TVRCSiriRemoteInfo.discoveryToken()()
{
  void *v0;
  id v1;
  Swift::Bool v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  objc_class *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  NSData v17;
  objc_class *v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Class isa;
  objc_class *v24;
  NIDiscoveryToken_optional result;

  v1 = objc_msgSend(v0, sel_btAddressData);
  if (!v1
    || (v3 = v1,
        v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)(),
        v6 = v5,
        v3,
        outlined consume of Data._Representation(v4, v6),
        (v7 = objc_msgSend(v0, sel_irkData)) == 0))
  {
    v24 = 0;
    goto LABEL_7;
  }
  v8 = v7;
  v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v11 = v10;

  outlined consume of Data._Representation(v9, v11);
  v12 = (objc_class *)objc_msgSend(v0, sel_btAddressData);
  if (!v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  v13 = v12;
  v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v16 = v15;

  v17.super.isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v14, v16);
  v12 = (objc_class *)objc_msgSend(v0, sel_irkData);
  if (!v12)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v18 = v12;
  v19 = (void *)objc_opt_self();
  v20 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v22 = v21;

  isa = Data._bridgeToObjectiveC()().super.isa;
  outlined consume of Data._Representation(v20, v22);
  v24 = (objc_class *)objc_msgSend(v19, sel_generateBluetoothDeviceTokenWithPublicAddress_IRK_, v17.super.isa, isa);

LABEL_7:
  v12 = v24;
LABEL_10:
  result.value.super.isa = v12;
  result.is_nil = v2;
  return result;
}

Swift::Void __swiftcall TVRUIFindingSession.stop()()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;

  v1 = *(void **)(v0 + OBJC_IVAR___TVRUIFindingSession_findingVC);
  if (v1)
  {
    v2 = one-time initialization token for findingExperience;
    v7 = v1;
    if (v2 != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.findingExperience);
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v6 = 0;
      _os_log_impl(&dword_21B042000, v4, v5, "Stop finding remote", v6, 2u);
      MEMORY[0x22075D4E4](v6, -1, -1);
    }

    objc_msgSend(v7, sel_dismissViewControllerAnimated_completion_, 1, 0);
  }
}

void __swiftcall TVRUIFindingSession.init()(TVRUIFindingSession *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

id TVRUIFindingSession.init()()
{
  uint64_t v0;
  objc_super v2;

  *(_QWORD *)(v0 + OBJC_IVAR___TVRUIFindingSession_findingVC) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR___TVRUIFindingSession_findingSessionPresentationController) = 0;
  *(_QWORD *)(v0 + OBJC_IVAR___TVRUIFindingSession_device) = 0;
  v2.super_class = (Class)TVRUIFindingSession;
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for TVRUIFindingSession(uint64_t a1)
{
  return type metadata accessor for SKConstraint(a1, &lazy cache variable for type metadata for TVRUIFindingSession);
}

id FindingSessionPresentationController.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FindingSessionPresentationController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FindingSessionPresentationController()
{
  return objc_opt_self();
}

uint64_t sub_21B0C52E4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ()()
{
  uint64_t v0;

  return thunk for @escaping @callee_unowned @convention(block) () -> ()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21B0C5310()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:)()
{
  uint64_t v0;

  closure #1 in TVRUIFindingSession.findingViewController(for:dismissedHandler:)(v0);
}

char *FMPFSKBTLevelRingNode.init(threshold:radius:width:alpha:response:)(double a1, double a2, double a3, double a4, double a5)
{
  char *v5;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  id v24;
  CGMutablePathRef Mutable;
  void *v26;
  objc_super v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v11 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring;
  v12 = v5;
  v13 = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F50624DD2F1A9FCLL, 0);
  *(_QWORD *)&v5[v11] = v13;
  v14 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring;
  *(_QWORD *)&v12[v14] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0);
  v15 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode;
  *(_QWORD *)&v12[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9EB8]), sel_init);
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold] = a1;
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetAlpha] = a4;
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetWidth] = a3;
  *(double *)&v12[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetRadius] = round(a2);
  v16 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v17 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v18 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v19 = *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *(double *)((char *)v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16) = a5;
  FLSpring.parameters.didset(v16, v17, v18, v19);

  v28.receiver = v12;
  v28.super_class = (Class)type metadata accessor for FMPFSKBTLevelRingNode();
  v20 = (char *)objc_msgSendSuper2(&v28, sel_init);
  v21 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode;
  v22 = *(void **)&v20[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode];
  v23 = v20;
  v24 = v22;
  Mutable = CGPathCreateMutable();
  v29 = 0x3FF0000000000000;
  v30 = 0;
  v31 = 0;
  v32 = 0x3FF0000000000000;
  v33 = 0;
  v34 = 0;
  CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  objc_msgSend(v24, sel_setPath_, Mutable);

  v26 = *(void **)&v20[v21];
  objc_msgSend(v26, sel_setLineWidth_, *(double *)&v23[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetWidth]);
  objc_msgSend(v23, sel_addChild_, v26);

  return v23;
}

id FMPFSKBTLevelRingNode.render()()
{
  char *v0;
  uint64_t v1;
  double *v2;
  double *v3;
  double v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double *v8;
  double *v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  _BOOL4 IsReduceMotionEnabled;

  IsReduceMotionEnabled = UIAccessibilityIsReduceMotionEnabled();
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
  v2 = (double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  v3 = (double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v4 = *v2 + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v5 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v4) <= *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v4 = v2[35] + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  objc_msgSend(v0, sel_setAlpha_, *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetAlpha] * v4);
  v6 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode];
  v7 = *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring];
  v8 = (double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  v9 = (double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v10 = *v8 + *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v11 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v8[35] + *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v10) <= *(double *)(v7 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v10 = v8[35] + v9[5];
  objc_msgSend(v6, sel_setAlpha_, v10);
  if (IsReduceMotionEnabled)
  {
    objc_msgSend(v0, sel_setScale_, v2[35] + v3[5]);
    v12 = 1.0;
  }
  else
  {
    v13 = *v2 + *v3;
    if (vabdd_f64(v2[35] + v3[5], v13) <= *(double *)(v1 + v5))
      v13 = v2[35] + v3[5];
    objc_msgSend(v0, sel_setScale_, v13);
    v12 = *v8 + *v9;
    if (vabdd_f64(v8[35] + v9[5], v12) <= *(double *)(v7 + v11))
      v12 = v8[35] + v9[5];
  }
  return FMPFSKBTLevelRingNode.renderRingPath(at:)(v12);
}

id FMPFSKBTLevelRingNode.renderRingPath(at:)(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double *v6;
  double v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  id v19;
  CGMutablePathRef Mutable;
  id v21;
  id v22;

  v2 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetRadius);
  v3 = v2 * a1;
  v4 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_targetWidth) + v2 - v2 * a1 + v2 - v2 * a1;
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring);
  v6 = (double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  if (vabdd_f64(v6[35] + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v6 + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v5+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v7 = *v6 + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  else
    v7 = v6[35] + *(double *)(v5 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v8 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode);
  v9 = (void *)objc_opt_self();
  v10 = v9;
  if (v7 >= 0.7)
  {
    v21 = objc_msgSend(v9, sel_whiteColor);
    objc_msgSend(v8, sel_setStrokeColor_, v21);

    v22 = objc_msgSend(v10, sel_clearColor);
    objc_msgSend(v8, sel_setFillColor_, v22);

    Mutable = CGPathCreateMutable();
    CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  }
  else
  {
    v11 = objc_msgSend(v9, sel_clearColor);
    objc_msgSend(v8, sel_setStrokeColor_, v11);

    v12 = objc_msgSend(v10, sel_whiteColor);
    objc_msgSend(v8, sel_setFillColor_, v12);

    v13 = v3 + v4 * 0.5;
    v14 = v3 - v4 * 0.5;
    v15 = -v13;
    v16 = v13 + v13;
    v17 = (void *)objc_opt_self();
    v18 = objc_msgSend(v17, sel_bezierPathWithOvalInRect_, v15, v15, v16, v16);
    v19 = objc_msgSend(v17, sel_bezierPathWithOvalInRect_, -v14, -v14, v14 + v14, v14 + v14);
    objc_msgSend(v18, sel_appendPath_, v19);
    objc_msgSend(v18, sel_setUsesEvenOddFillRule_, 1);
    Mutable = (CGMutablePathRef)objc_msgSend(v18, sel_CGPath);

    v4 = 0.0;
  }
  objc_msgSend(v8, sel_setPath_, Mutable);

  return objc_msgSend(v8, sel_setLineWidth_, v4);
}

id FMPFSKBTLevelRingNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKBTLevelRingNode);
}

uint64_t type metadata accessor for FMPFSKBTLevelRingNode()
{
  return objc_opt_self();
}

id FMPFSKBTLevelsNode.init()()
{
  void *v0;
  char *v1;
  id v2;
  unint64_t v3;
  objc_super v5;

  v1 = v0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes] = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySdGG_10TVRemoteUI21FMPFSKBTLevelRingNodeCs5NeverOTg508_sSiSd10f4UI21hij32CIgyyo_Si6offset_Sd7elementtACs5K81OIegnrzr_TR04_s10a18UI18FMPFSKBTLevelse12CACycfcAA017cD14D0CSi_SdtXEfU_Tf3nnnpf_nTf1cn_n((uint64_t)&outlined read-only object #0 of FMPFSKBTLevelsNode.init());

  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FMPFSKBTLevelsNode();
  v2 = objc_msgSendSuper2(&v5, sel_init);
  v3 = swift_bridgeObjectRetain();
  specialized Sequence.forEach(_:)(v3, v2);
  swift_bridgeObjectRelease();

  return v2;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySaySdGG_10TVRemoteUI21FMPFSKBTLevelRingNodeCs5NeverOTg508_sSiSd10f4UI21hij32CIgyyo_Si6offset_Sd7elementtACs5K81OIegnrzr_TR04_s10a18UI18FMPFSKBTLevelse12CACycfcAA017cD14D0CSi_SdtXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  double v4;
  id v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  id v15;
  uint64_t v17;
  CGRect v18;

  v17 = MEMORY[0x24BEE4AF8];
  specialized ContiguousArray.reserveCapacity(_:)();
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v2)
  {
    for (i = 0; i != v2; ++i)
    {
      v4 = *(double *)(a1 + 32 + 8 * i);
      v5 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
      objc_msgSend(v5, sel_bounds);
      v7 = v6;
      v9 = v8;
      v11 = v10;
      v13 = v12;

      v18.origin.x = v7;
      v18.origin.y = v9;
      v18.size.width = v11;
      v18.size.height = v13;
      v14 = v4 * CGRectGetHeight(v18) * 0.5;
      v15 = objc_allocWithZone((Class)type metadata accessor for FMPFSKBTLevelRingNode());
      FMPFSKBTLevelRingNode.init(threshold:radius:width:alpha:response:)(v4, v14, 10.0, (double)i * -0.05 + 0.45, (double)i * 0.33 + 1.0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
    }
  }
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Void __swiftcall FMPFSKBTLevelsNode.show(sprung:)(Swift::Bool sprung)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int64x2_t v30;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_15;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v30 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v15 = (char *)MEMORY[0x22075C8C0](v5, v3);
      else
        v15 = (char *)*(id *)(v3 + 8 * v5 + 32);
      v16 = v15;
      v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
      if (sprung)
      {
        v18 = v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(_QWORD *)v18 = 0x3FF0000000000000;
        *(_BYTE *)(v18 + 8) = 0;
        v19 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        v20 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        v21 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        if (*(double *)(v19 + 280) + v21 == 1.79769313e308)
        {
          v22 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          v23 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          *(_OWORD *)v19 = xmmword_21B0F8F60;
          *(_QWORD *)(v19 + 16) = v22;
          *(_OWORD *)(v19 + 24) = xmmword_21B0F86F0;
          *(_OWORD *)(v19 + 40) = xmmword_21B0F8700;
          *(_QWORD *)(v19 + 56) = v22;
          *(_QWORD *)(v19 + 64) = 0;
          *(_QWORD *)(v19 + 72) = 0;
          *(int64x2_t *)(v19 + 80) = v30;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_QWORD *)(v19 + 128) = v23;
          *(_OWORD *)(v19 + 136) = xmmword_21B0F86F0;
          *(_OWORD *)(v19 + 152) = xmmword_21B0F8700;
          *(_QWORD *)(v19 + 168) = v23;
          *(_QWORD *)(v19 + 176) = 0;
          *(_QWORD *)(v19 + 184) = 0;
          *(int64x2_t *)(v19 + 192) = v30;
          *(_OWORD *)(v19 + 208) = 0u;
          *(_OWORD *)(v19 + 224) = 0u;
          *(_OWORD *)(v19 + 240) = xmmword_21B0F8F60;
          *(_OWORD *)(v19 + 256) = xmmword_21B0F90B0;
          *(_OWORD *)(v19 + 272) = xmmword_21B0F90C0;
          *(_QWORD *)(v19 + 288) = 0;
          *(_QWORD *)(v19 + 296) = 0;
          *(int64x2_t *)(v19 + 304) = v30;
          *(_OWORD *)(v19 + 320) = 0u;
          *(_OWORD *)(v19 + 336) = 0u;
          v24 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(_QWORD *)(v19 + 352) = v24;
          v25 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(_QWORD *)(v19 + 360) = v25;
          v26 = 6.28318531
              / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          v27 = sqrt(v26);
          v28 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v27 + v27);
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0x3FF0000000000000;
          *(double *)(v20 + 24) = v26;
          *(double *)(v20 + 32) = v28;
          *(_QWORD *)(v20 + 40) = 0;
          *(int64x2_t *)(v20 + 64) = v30;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_OWORD *)(v20 + 96) = 0u;
          *(_QWORD *)(v20 + 48) = v24;
          *(_QWORD *)(v20 + 56) = v25;
          *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
          *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          v21 = 0.0;
        }
        v29 = 1.0 - v21;
        *(double *)(v19 + 280) = v29;
        *(double *)(v19 + 240) = v29;
        *(_QWORD *)(v19 + 248) = 0;
      }
      else
      {
        v6 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        v7 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        v8 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        *(_OWORD *)v8 = xmmword_21B0F8F60;
        *(_QWORD *)(v8 + 16) = v6;
        *(_OWORD *)(v8 + 24) = xmmword_21B0F86F0;
        *(_OWORD *)(v8 + 40) = xmmword_21B0F8700;
        *(_QWORD *)(v8 + 56) = v6;
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)(v8 + 72) = 0;
        *(int64x2_t *)(v8 + 80) = v30;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_QWORD *)(v8 + 128) = v7;
        *(_OWORD *)(v8 + 136) = xmmword_21B0F86F0;
        *(_OWORD *)(v8 + 152) = xmmword_21B0F8700;
        *(_QWORD *)(v8 + 168) = v7;
        *(_QWORD *)(v8 + 176) = 0;
        *(_QWORD *)(v8 + 184) = 0;
        *(int64x2_t *)(v8 + 192) = v30;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 224) = 0u;
        *(_OWORD *)(v8 + 240) = xmmword_21B0F8F60;
        *(_OWORD *)(v8 + 256) = xmmword_21B0F90B0;
        *(_OWORD *)(v8 + 272) = xmmword_21B0F90C0;
        *(_QWORD *)(v8 + 288) = 0;
        *(_QWORD *)(v8 + 296) = 0;
        *(int64x2_t *)(v8 + 304) = v30;
        *(_OWORD *)(v8 + 320) = 0u;
        *(_OWORD *)(v8 + 336) = 0u;
        v9 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(_QWORD *)(v8 + 352) = v9;
        v10 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(_QWORD *)(v8 + 360) = v10;
        v11 = 6.28318531
            / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        v12 = sqrt(v11);
        v13 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v12 + v12);
        v14 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0x3FF0000000000000;
        *(double *)(v14 + 24) = v11;
        *(double *)(v14 + 32) = v13;
        *(_QWORD *)(v14 + 40) = 0;
        *(int64x2_t *)(v14 + 64) = v30;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_QWORD *)(v14 + 48) = v9;
        *(_QWORD *)(v14 + 56) = v10;
        *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
        *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTLevelRingNode.render()();
      }

      ++v5;
    }
    while (v4 != v5);
    goto LABEL_15;
  }
  __break(1u);
}

Swift::Void __swiftcall FMPFSKBTLevelsNode.hide(sprung:)(Swift::Bool sprung)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  int64x2_t v30;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_15;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    v30 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
        v15 = (char *)MEMORY[0x22075C8C0](v5, v3);
      else
        v15 = (char *)*(id *)(v3 + 8 * v5 + 32);
      v16 = v15;
      v17 = *(_QWORD *)&v15[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
      if (sprung)
      {
        v18 = v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(_QWORD *)v18 = 0;
        *(_BYTE *)(v18 + 8) = 0;
        v19 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        v20 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        v21 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        if (*(double *)(v19 + 280) + v21 == 1.79769313e308)
        {
          v22 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          v23 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          *(_QWORD *)v19 = 0;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = v22;
          *(_OWORD *)(v19 + 24) = xmmword_21B0F86F0;
          *(_OWORD *)(v19 + 40) = xmmword_21B0F8700;
          *(_QWORD *)(v19 + 56) = v22;
          *(_QWORD *)(v19 + 64) = 0;
          *(_QWORD *)(v19 + 72) = 0;
          *(int64x2_t *)(v19 + 80) = v30;
          *(_OWORD *)(v19 + 96) = 0u;
          *(_OWORD *)(v19 + 112) = 0u;
          *(_QWORD *)(v19 + 128) = v23;
          *(_OWORD *)(v19 + 136) = xmmword_21B0F86F0;
          *(_OWORD *)(v19 + 152) = xmmword_21B0F8700;
          *(_QWORD *)(v19 + 168) = v23;
          *(_QWORD *)(v19 + 176) = 0;
          *(_QWORD *)(v19 + 184) = 0;
          *(int64x2_t *)(v19 + 192) = v30;
          *(_OWORD *)(v19 + 208) = 0u;
          *(_OWORD *)(v19 + 224) = 0u;
          *(_OWORD *)(v19 + 240) = 0u;
          *(_OWORD *)(v19 + 256) = xmmword_21B0F90B0;
          *(_QWORD *)(v19 + 272) = 0x403921FB54442D18;
          *(_QWORD *)(v19 + 288) = 0;
          *(_QWORD *)(v19 + 296) = 0;
          *(_QWORD *)(v19 + 280) = 0;
          *(int64x2_t *)(v19 + 304) = v30;
          *(_OWORD *)(v19 + 320) = 0u;
          *(_OWORD *)(v19 + 336) = 0u;
          v24 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(_QWORD *)(v19 + 352) = v24;
          v25 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(_QWORD *)(v19 + 360) = v25;
          v26 = 6.28318531
              / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          v27 = sqrt(v26);
          v28 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v27 + v27);
          *(_QWORD *)v20 = 0;
          *(_QWORD *)(v20 + 8) = 0;
          *(_QWORD *)(v20 + 16) = 0x3FF0000000000000;
          *(double *)(v20 + 24) = v26;
          *(double *)(v20 + 32) = v28;
          *(_QWORD *)(v20 + 40) = 0;
          *(int64x2_t *)(v20 + 64) = v30;
          *(_OWORD *)(v20 + 80) = 0u;
          *(_OWORD *)(v20 + 96) = 0u;
          *(_QWORD *)(v20 + 48) = v24;
          *(_QWORD *)(v20 + 56) = v25;
          *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
          *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          v21 = 0.0;
        }
        v29 = 0.0 - v21;
        *(double *)(v19 + 280) = v29;
        *(double *)(v19 + 240) = v29;
        *(_QWORD *)(v19 + 248) = 0;
      }
      else
      {
        v6 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        v7 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        v8 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        *(_QWORD *)v8 = 0;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = v6;
        *(_OWORD *)(v8 + 24) = xmmword_21B0F86F0;
        *(_OWORD *)(v8 + 40) = xmmword_21B0F8700;
        *(_QWORD *)(v8 + 56) = v6;
        *(_QWORD *)(v8 + 64) = 0;
        *(_QWORD *)(v8 + 72) = 0;
        *(int64x2_t *)(v8 + 80) = v30;
        *(_OWORD *)(v8 + 96) = 0u;
        *(_OWORD *)(v8 + 112) = 0u;
        *(_QWORD *)(v8 + 128) = v7;
        *(_OWORD *)(v8 + 136) = xmmword_21B0F86F0;
        *(_OWORD *)(v8 + 152) = xmmword_21B0F8700;
        *(_QWORD *)(v8 + 168) = v7;
        *(_QWORD *)(v8 + 176) = 0;
        *(_QWORD *)(v8 + 184) = 0;
        *(int64x2_t *)(v8 + 192) = v30;
        *(_OWORD *)(v8 + 208) = 0u;
        *(_OWORD *)(v8 + 224) = 0u;
        *(_OWORD *)(v8 + 240) = 0u;
        *(_OWORD *)(v8 + 256) = xmmword_21B0F90B0;
        *(_QWORD *)(v8 + 272) = 0x403921FB54442D18;
        *(_QWORD *)(v8 + 280) = 0;
        *(_QWORD *)(v8 + 288) = 0;
        *(_QWORD *)(v8 + 296) = 0;
        *(int64x2_t *)(v8 + 304) = v30;
        *(_OWORD *)(v8 + 320) = 0u;
        *(_OWORD *)(v8 + 336) = 0u;
        v9 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(_QWORD *)(v8 + 352) = v9;
        v10 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(_QWORD *)(v8 + 360) = v10;
        v11 = 6.28318531
            / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        v12 = sqrt(v11);
        v13 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v12 + v12);
        v14 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        *(_QWORD *)v14 = 0;
        *(_QWORD *)(v14 + 8) = 0;
        *(_QWORD *)(v14 + 16) = 0x3FF0000000000000;
        *(double *)(v14 + 24) = v11;
        *(double *)(v14 + 32) = v13;
        *(_QWORD *)(v14 + 40) = 0;
        *(int64x2_t *)(v14 + 64) = v30;
        *(_OWORD *)(v14 + 80) = 0u;
        *(_OWORD *)(v14 + 96) = 0u;
        *(_QWORD *)(v14 + 48) = v9;
        *(_QWORD *)(v14 + 56) = v10;
        *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
        *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTLevelRingNode.render()();
      }

      ++v5;
    }
    while (v4 != v5);
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t FMPFSKBTLevelsNode.update(diskSize:sprung:)(char a1, double a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  char *v25;
  void *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t j;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  double v71;
  double v72;
  unint64_t v73;
  int64x2_t v74;
  int64x2_t v75;
  uint64_t v76;
  uint64_t v77;

  v5 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  v77 = MEMORY[0x24BEE4AF8];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v6 = result;
    v73 = v5 >> 62;
    if (!result)
      goto LABEL_15;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v73 = v5 >> 62;
    if (!v6)
      goto LABEL_15;
  }
  if (v6 < 1)
  {
    __break(1u);
    goto LABEL_62;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(double *)(MEMORY[0x22075C8C0](i, v5) + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold) <= a2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
    do
    {
      v11 = *(char **)(v5 + 8 * v9 + 32);
      if (*(double *)&v11[v10] <= a2)
      {
        v12 = v11;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v10 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
      }
      ++v9;
    }
    while (v6 != v9);
  }
LABEL_15:
  swift_bridgeObjectRelease();
  v13 = &lazy protocol witness table cache variable for type CHHapticPowerUsage and conformance CHHapticPowerUsage;
  if (v77 < 0 || (v77 & 0x4000000000000000) != 0)
  {
    swift_retain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v14 = result;
    if (!result)
      goto LABEL_30;
  }
  else
  {
    v14 = *(_QWORD *)(v77 + 16);
    result = swift_retain();
    if (!v14)
      goto LABEL_30;
  }
  if (v14 < 1)
  {
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  v15 = 0;
  v75 = vdupq_n_s64(0x4341C37937E08000uLL);
  do
  {
    if ((v77 & 0xC000000000000001) != 0)
      v25 = (char *)MEMORY[0x22075C8C0](v15, v77);
    else
      v25 = (char *)*(id *)(v77 + 8 * v15 + 32);
    v26 = v25;
    v27 = v13;
    v28 = *(_QWORD *)&v25[v13[365]];
    if ((a1 & 1) != 0)
    {
      v29 = v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(_QWORD *)v29 = 0;
      *(_BYTE *)(v29 + 8) = 0;
      v30 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
      swift_beginAccess();
      v31 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
      v32 = *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      if (*(double *)(v30 + 280) + v32 == 1.79769313e308)
      {
        v33 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        v34 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        *(_QWORD *)v30 = 0;
        *(_QWORD *)(v30 + 8) = 0;
        *(_QWORD *)(v30 + 16) = v33;
        *(_OWORD *)(v30 + 24) = xmmword_21B0F86F0;
        *(_OWORD *)(v30 + 40) = xmmword_21B0F8700;
        *(_QWORD *)(v30 + 56) = v33;
        *(_QWORD *)(v30 + 64) = 0;
        *(_QWORD *)(v30 + 72) = 0;
        *(int64x2_t *)(v30 + 80) = v75;
        *(_OWORD *)(v30 + 96) = 0u;
        *(_OWORD *)(v30 + 112) = 0u;
        *(_QWORD *)(v30 + 128) = v34;
        *(_OWORD *)(v30 + 136) = xmmword_21B0F86F0;
        *(_OWORD *)(v30 + 152) = xmmword_21B0F8700;
        *(_QWORD *)(v30 + 168) = v34;
        *(_QWORD *)(v30 + 176) = 0;
        *(_QWORD *)(v30 + 184) = 0;
        *(int64x2_t *)(v30 + 192) = v75;
        *(_OWORD *)(v30 + 208) = 0u;
        *(_OWORD *)(v30 + 224) = 0u;
        *(_OWORD *)(v30 + 240) = 0u;
        *(_OWORD *)(v30 + 256) = xmmword_21B0F90B0;
        *(_QWORD *)(v30 + 272) = 0x403921FB54442D18;
        *(_QWORD *)(v30 + 288) = 0;
        *(_QWORD *)(v30 + 296) = 0;
        *(_QWORD *)(v30 + 280) = 0;
        *(int64x2_t *)(v30 + 304) = v75;
        *(_OWORD *)(v30 + 320) = 0u;
        *(_OWORD *)(v30 + 336) = 0u;
        v35 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(_QWORD *)(v30 + 352) = v35;
        v36 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(_QWORD *)(v30 + 360) = v36;
        v37 = 6.28318531
            / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        v38 = sqrt(v37);
        v39 = *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v38 + v38);
        *(_QWORD *)v31 = 0;
        *(_QWORD *)(v31 + 8) = 0;
        *(_QWORD *)(v31 + 16) = 0x3FF0000000000000;
        *(double *)(v31 + 24) = v37;
        *(double *)(v31 + 32) = v39;
        *(_QWORD *)(v31 + 40) = 0;
        *(int64x2_t *)(v31 + 64) = v75;
        *(_OWORD *)(v31 + 80) = 0u;
        *(_OWORD *)(v31 + 96) = 0u;
        *(_QWORD *)(v31 + 48) = v35;
        *(_QWORD *)(v31 + 56) = v36;
        *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
        *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(_BYTE *)(v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        v32 = 0.0;
      }
      v40 = 0.0 - v32;
      *(double *)(v30 + 280) = v40;
      *(double *)(v30 + 240) = v40;
      *(_QWORD *)(v30 + 248) = 0;
    }
    else
    {
      v16 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
      v17 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
      v18 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
      swift_beginAccess();
      *(_QWORD *)v18 = 0;
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v16;
      *(_OWORD *)(v18 + 24) = xmmword_21B0F86F0;
      *(_OWORD *)(v18 + 40) = xmmword_21B0F8700;
      *(_QWORD *)(v18 + 56) = v16;
      *(_QWORD *)(v18 + 64) = 0;
      *(_QWORD *)(v18 + 72) = 0;
      *(int64x2_t *)(v18 + 80) = v75;
      *(_OWORD *)(v18 + 96) = 0u;
      *(_OWORD *)(v18 + 112) = 0u;
      *(_QWORD *)(v18 + 128) = v17;
      *(_OWORD *)(v18 + 136) = xmmword_21B0F86F0;
      *(_OWORD *)(v18 + 152) = xmmword_21B0F8700;
      *(_QWORD *)(v18 + 168) = v17;
      *(_QWORD *)(v18 + 176) = 0;
      *(_QWORD *)(v18 + 184) = 0;
      *(int64x2_t *)(v18 + 192) = v75;
      *(_OWORD *)(v18 + 208) = 0u;
      *(_OWORD *)(v18 + 224) = 0u;
      *(_OWORD *)(v18 + 240) = 0u;
      *(_OWORD *)(v18 + 256) = xmmword_21B0F90B0;
      *(_QWORD *)(v18 + 272) = 0x403921FB54442D18;
      *(_QWORD *)(v18 + 280) = 0;
      *(_QWORD *)(v18 + 288) = 0;
      *(_QWORD *)(v18 + 296) = 0;
      *(int64x2_t *)(v18 + 304) = v75;
      *(_OWORD *)(v18 + 320) = 0u;
      *(_OWORD *)(v18 + 336) = 0u;
      v19 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
      *(_QWORD *)(v18 + 352) = v19;
      v20 = *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
      *(_QWORD *)(v18 + 360) = v20;
      v21 = 6.28318531
          / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
          * (6.28318531
           / *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
      v22 = sqrt(v21);
      v23 = *(double *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v22 + v22);
      v24 = v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
      *(_QWORD *)v24 = 0;
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = 0x3FF0000000000000;
      *(double *)(v24 + 24) = v21;
      *(double *)(v24 + 32) = v23;
      *(_QWORD *)(v24 + 40) = 0;
      *(int64x2_t *)(v24 + 64) = v75;
      *(_OWORD *)(v24 + 80) = 0u;
      *(_OWORD *)(v24 + 96) = 0u;
      *(_QWORD *)(v24 + 48) = v19;
      *(_QWORD *)(v24 + 56) = v20;
      *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0;
      *(_QWORD *)(v28 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
      *(_BYTE *)(v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      FMPFSKBTLevelRingNode.render()();
    }

    ++v15;
    v13 = v27;
  }
  while (v14 != v15);
LABEL_30:
  swift_release_n();
  v76 = MEMORY[0x24BEE4AF8];
  if (v73)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v41 = result;
    if (!result)
      goto LABEL_45;
  }
  else
  {
    v41 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v41)
      goto LABEL_45;
  }
  if (v41 < 1)
  {
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if ((v5 & 0xC000000000000001) != 0)
  {
    for (j = 0; j != v41; ++j)
    {
      if (*(double *)(MEMORY[0x22075C8C0](j, v5) + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold) > a2)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  else
  {
    v43 = 0;
    v44 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
    do
    {
      v45 = *(char **)(v5 + 8 * v43 + 32);
      if (*(double *)&v45[v44] > a2)
      {
        v46 = v45;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        v44 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_threshold;
      }
      ++v43;
    }
    while (v41 != v43);
  }
LABEL_45:
  swift_bridgeObjectRelease();
  if ((v76 & 0x8000000000000000) == 0 && (v76 & 0x4000000000000000) == 0)
  {
    v47 = *(_QWORD *)(v76 + 16);
    result = swift_retain();
    if (v47)
      goto LABEL_48;
    return swift_release_n();
  }
  swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v47 = result;
  if (!result)
    return swift_release_n();
LABEL_48:
  if (v47 >= 1)
  {
    v48 = 0;
    v74 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v76 & 0xC000000000000001) != 0)
        v58 = (char *)MEMORY[0x22075C8C0](v48, v76);
      else
        v58 = (char *)*(id *)(v76 + 8 * v48 + 32);
      v59 = v58;
      v60 = *(_QWORD *)&v58[v13[365]];
      if ((a1 & 1) != 0)
      {
        v61 = v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(_QWORD *)v61 = 0x3FF0000000000000;
        *(_BYTE *)(v61 + 8) = 0;
        v62 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        v63 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        v64 = *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        if (*(double *)(v62 + 280) + v64 == 1.79769313e308)
        {
          v65 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          v66 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          *(_OWORD *)v62 = xmmword_21B0F8F60;
          *(_QWORD *)(v62 + 16) = v65;
          *(_OWORD *)(v62 + 24) = xmmword_21B0F86F0;
          *(_OWORD *)(v62 + 40) = xmmword_21B0F8700;
          *(_QWORD *)(v62 + 56) = v65;
          *(_QWORD *)(v62 + 64) = 0;
          *(_QWORD *)(v62 + 72) = 0;
          *(int64x2_t *)(v62 + 80) = v74;
          *(_OWORD *)(v62 + 96) = 0u;
          *(_OWORD *)(v62 + 112) = 0u;
          *(_QWORD *)(v62 + 128) = v66;
          *(_OWORD *)(v62 + 136) = xmmword_21B0F86F0;
          *(_OWORD *)(v62 + 152) = xmmword_21B0F8700;
          *(_QWORD *)(v62 + 168) = v66;
          *(_QWORD *)(v62 + 176) = 0;
          *(_QWORD *)(v62 + 184) = 0;
          *(int64x2_t *)(v62 + 192) = v74;
          *(_OWORD *)(v62 + 208) = 0u;
          *(_OWORD *)(v62 + 224) = 0u;
          *(_OWORD *)(v62 + 240) = xmmword_21B0F8F60;
          *(_OWORD *)(v62 + 256) = xmmword_21B0F90B0;
          *(_OWORD *)(v62 + 272) = xmmword_21B0F90C0;
          *(_QWORD *)(v62 + 288) = 0;
          *(_QWORD *)(v62 + 296) = 0;
          *(int64x2_t *)(v62 + 304) = v74;
          *(_OWORD *)(v62 + 320) = 0u;
          *(_OWORD *)(v62 + 336) = 0u;
          v67 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(_QWORD *)(v62 + 352) = v67;
          v68 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(_QWORD *)(v62 + 360) = v68;
          v69 = 6.28318531
              / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          v70 = sqrt(v69);
          v71 = *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v70 + v70);
          *(_QWORD *)v63 = 0;
          *(_QWORD *)(v63 + 8) = 0;
          *(_QWORD *)(v63 + 16) = 0x3FF0000000000000;
          *(double *)(v63 + 24) = v69;
          *(double *)(v63 + 32) = v71;
          *(_QWORD *)(v63 + 40) = 0;
          *(int64x2_t *)(v63 + 64) = v74;
          *(_OWORD *)(v63 + 80) = 0u;
          *(_OWORD *)(v63 + 96) = 0u;
          *(_QWORD *)(v63 + 48) = v67;
          *(_QWORD *)(v63 + 56) = v68;
          *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
          *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(_BYTE *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          v64 = 0.0;
        }
        v72 = 1.0 - v64;
        *(double *)(v62 + 280) = v72;
        *(double *)(v62 + 240) = v72;
        *(_QWORD *)(v62 + 248) = 0;
      }
      else
      {
        v49 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
        v50 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
        v51 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
        swift_beginAccess();
        *(_OWORD *)v51 = xmmword_21B0F8F60;
        *(_QWORD *)(v51 + 16) = v49;
        *(_OWORD *)(v51 + 24) = xmmword_21B0F86F0;
        *(_OWORD *)(v51 + 40) = xmmword_21B0F8700;
        *(_QWORD *)(v51 + 56) = v49;
        *(_QWORD *)(v51 + 64) = 0;
        *(_QWORD *)(v51 + 72) = 0;
        *(int64x2_t *)(v51 + 80) = v74;
        *(_OWORD *)(v51 + 96) = 0u;
        *(_OWORD *)(v51 + 112) = 0u;
        *(_QWORD *)(v51 + 128) = v50;
        *(_OWORD *)(v51 + 136) = xmmword_21B0F86F0;
        *(_OWORD *)(v51 + 152) = xmmword_21B0F8700;
        *(_QWORD *)(v51 + 168) = v50;
        *(_QWORD *)(v51 + 176) = 0;
        *(_QWORD *)(v51 + 184) = 0;
        *(int64x2_t *)(v51 + 192) = v74;
        *(_OWORD *)(v51 + 208) = 0u;
        *(_OWORD *)(v51 + 224) = 0u;
        *(_OWORD *)(v51 + 240) = xmmword_21B0F8F60;
        *(_OWORD *)(v51 + 256) = xmmword_21B0F90B0;
        *(_OWORD *)(v51 + 272) = xmmword_21B0F90C0;
        *(_QWORD *)(v51 + 288) = 0;
        *(_QWORD *)(v51 + 296) = 0;
        *(int64x2_t *)(v51 + 304) = v74;
        *(_OWORD *)(v51 + 320) = 0u;
        *(_OWORD *)(v51 + 336) = 0u;
        v52 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
        *(_QWORD *)(v51 + 352) = v52;
        v53 = *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
        *(_QWORD *)(v51 + 360) = v53;
        v54 = 6.28318531
            / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
            * (6.28318531
             / *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
        v55 = sqrt(v54);
        v56 = *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v55 + v55);
        v57 = v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
        *(_QWORD *)v57 = 0;
        *(_QWORD *)(v57 + 8) = 0;
        *(_QWORD *)(v57 + 16) = 0x3FF0000000000000;
        *(double *)(v57 + 24) = v54;
        *(double *)(v57 + 32) = v56;
        *(_QWORD *)(v57 + 40) = 0;
        *(int64x2_t *)(v57 + 64) = v74;
        *(_OWORD *)(v57 + 80) = 0u;
        *(_OWORD *)(v57 + 96) = 0u;
        *(_QWORD *)(v57 + 48) = v52;
        *(_QWORD *)(v57 + 56) = v53;
        *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = 0x3FF0000000000000;
        *(_QWORD *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
        *(_BYTE *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTLevelRingNode.render()();
      }

      ++v48;
    }
    while (v47 != v48);
    return swift_release_n();
  }
LABEL_64:
  __break(1u);
  return result;
}

uint64_t FMPFSKBTLevelsNode.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

id FMPFSKBTLevelsNode.__deallocating_deinit()
{
  return FMPFSKNode.__deallocating_deinit(type metadata accessor for FMPFSKBTLevelsNode);
}

uint64_t type metadata accessor for FMPFSKBTLevelsNode()
{
  return objc_opt_self();
}

uint64_t specialized Sequence.forEach(_:)(unint64_t a1, void *a2)
{
  unint64_t v4;
  id v5;
  void *v6;

  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v4)
  {
    while (!__OFSUB__(v4--, 1))
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v5 = (id)MEMORY[0x22075C8C0](v4, a1);
LABEL_5:
        v6 = v5;
        objc_msgSend(a2, sel_addChild_, v5);

        if (!v4)
          return swift_bridgeObjectRelease();
      }
      else
      {
        if ((v4 & 0x8000000000000000) != 0)
          goto LABEL_12;
        if (v4 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          v5 = *(id *)(a1 + 32 + 8 * v4);
          goto LABEL_5;
        }
LABEL_13:
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        v4 = _CocoaArrayWrapper.endIndex.getter();
        if (!v4)
          return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  return swift_bridgeObjectRelease();
}

void specialized FMPFSKBTLevelRingNode.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring;
  *(_QWORD *)&v0[v1] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0, 0, 0x3F50624DD2F1A9FCLL, 0);
  v2 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring;
  *(_QWORD *)&v0[v2] = specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(0x3FF0000000000000, 0, 0x3F50624DD2F1A9FCLL, 0);
  v3 = OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_ringNode;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9EB8]), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

ValueMetadata *type metadata accessor for FMPFBezierFunction()
{
  return &type metadata for FMPFBezierFunction;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

Swift::Void __swiftcall FMPFSKScene.fragmentsStartedOrbiting()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t ObjectType;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  v9 = v0;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v33 = v5;
  if (v12)
  {
    v30 = v2;
    v31 = v1;
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = *(void **)&v9[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode];
    if (v15)
    {
      v16 = objc_msgSend(v15, sel_description);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

    }
    else
    {
      v17 = 0;
      v19 = 0xE000000000000000;
    }
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v10, v11, "🧭 FMPFSKPatternNode%s: fragmentsStartedOrbiting()", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v14, -1, -1);
    MEMORY[0x22075D4E4](v13, -1, -1);

    v2 = v30;
    v1 = v31;
  }
  else
  {

  }
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v9;
  v21 = (void *)objc_opt_self();
  v22 = v9;
  if (objc_msgSend(v21, sel_isMainThread))
  {
    v23 = &v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v24 = *((_QWORD *)v23 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v24 + 8) + 8))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v26 = (void *)static OS_dispatch_queue.main.getter();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #1 in FMPFSKScene.fragmentsStartedOrbiting();
    *(_QWORD *)(v27 + 24) = v20;
    aBlock[4] = (uint64_t)partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_73;
    v28 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v7, v4, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }

  swift_release();
}

BOOL closure #1 in FMPFSKScene.fragmentsStartedOrbiting()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 8))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.fragmentsStoppedOrbiting()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t ObjectType;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v32 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for default != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.default);
  v9 = v0;
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.default.getter();
  v12 = os_log_type_enabled(v10, v11);
  v33 = v5;
  if (v12)
  {
    v30 = v2;
    v31 = v1;
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = *(void **)&v9[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode];
    if (v15)
    {
      v16 = objc_msgSend(v15, sel_description);
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v19 = v18;

    }
    else
    {
      v17 = 0;
      v19 = 0xE000000000000000;
    }
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v10, v11, "🧭 FMPFSKPatternNode%s: fragmentsStoppedOrbiting()", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v14, -1, -1);
    MEMORY[0x22075D4E4](v13, -1, -1);

    v2 = v30;
    v1 = v31;
  }
  else
  {

  }
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = v9;
  v21 = (void *)objc_opt_self();
  v22 = v9;
  if (objc_msgSend(v21, sel_isMainThread))
  {
    v23 = &v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v22[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v24 = *((_QWORD *)v23 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v24 + 8) + 16))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
      return;
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v26 = (void *)static OS_dispatch_queue.main.getter();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = partial apply for closure #1 in FMPFSKScene.fragmentsStoppedOrbiting();
    *(_QWORD *)(v27 + 24) = v20;
    aBlock[4] = (uint64_t)partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v27;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_63;
    v28 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v7, v4, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v33);
  }

  swift_release();
}

BOOL closure #1 in FMPFSKScene.fragmentsStoppedOrbiting()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 16))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.patternIsFullyPeripheral()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  v10 = (void *)objc_opt_self();
  v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v13 = *((_QWORD *)v12 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 40))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.patternIsFullyPeripheral();
    *(_QWORD *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_53;
    v17 = _Block_copy(aBlock);
    v20 = v2;
    v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.patternIsFullyPeripheral()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 40))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.patternIsFullyFormed()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  v10 = (void *)objc_opt_self();
  v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v13 = *((_QWORD *)v12 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 48))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.patternIsFullyFormed();
    *(_QWORD *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_43;
    v17 = _Block_copy(aBlock);
    v20 = v2;
    v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.patternIsFullyFormed()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 48))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.pointeeDotIsFullyCentered()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  v10 = (void *)objc_opt_self();
  v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v13 = *((_QWORD *)v12 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 56))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.pointeeDotIsFullyCentered();
    *(_QWORD *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_33;
    v17 = _Block_copy(aBlock);
    v20 = v2;
    v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.pointeeDotIsFullyCentered()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 56))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  v10 = (void *)objc_opt_self();
  v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v13 = *((_QWORD *)v12 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 64))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered();
    *(_QWORD *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_23;
    v17 = _Block_copy(aBlock);
    v20 = v2;
    v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 64))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.pointeeAndNoonDotsDidConverge()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  v10 = (void *)objc_opt_self();
  v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v13 = *((_QWORD *)v12 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 72))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge();
    *(_QWORD *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_13;
    v17 = _Block_copy(aBlock);
    v20 = v2;
    v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 72))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

Swift::Void __swiftcall FMPFSKScene.pointeeAndNoonDotsDidDiverge()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  void *v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  id v19;
  uint64_t v20;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = v0;
  v10 = (void *)objc_opt_self();
  v11 = v0;
  if (objc_msgSend(v10, sel_isMainThread))
  {
    v12 = &v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate];
    if (MEMORY[0x22075D574](&v11[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate]))
    {
      v13 = *((_QWORD *)v12 + 1);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(_QWORD *)(v13 + 8) + 80))(ObjectType);

      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {

      swift_release();
    }
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v15 = (void *)static OS_dispatch_queue.main.getter();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge();
    *(_QWORD *)(v16 + 24) = v9;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_4;
    v17 = _Block_copy(aBlock);
    v20 = v2;
    v18 = v17;
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    v19 = v11;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x22075C7AC](0, v8, v4, v18);
    _Block_release(v18);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

    swift_release();
  }
}

BOOL closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t ObjectType;

  v1 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate;
  v2 = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 8) + 80))(ObjectType);
    swift_unknownObjectRelease();
  }
  return v2 == 0;
}

uint64_t sub_21B0C8F90()
{
  uint64_t v0;

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.pointeeAndNoonDotsDidDiverge()(*(_QWORD *)(v0 + 16));
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

BOOL partial apply for closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.pointeeAndNoonDotsDidConverge()(*(_QWORD *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.patternIsFullyFormedAndPointeeDotIsFullyCentered()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21B0C9020()
{
  swift_release();
  return swift_deallocObject();
}

BOOL partial apply for closure #1 in FMPFSKScene.pointeeDotIsFullyCentered()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.pointeeDotIsFullyCentered()(*(_QWORD *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.patternIsFullyFormed()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.patternIsFullyFormed()(*(_QWORD *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.patternIsFullyPeripheral()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.patternIsFullyPeripheral()(*(_QWORD *)(v0 + 16));
}

BOOL partial apply for closure #1 in FMPFSKScene.fragmentsStoppedOrbiting()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.fragmentsStoppedOrbiting()(*(_QWORD *)(v0 + 16));
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

BOOL partial apply for closure #1 in FMPFSKScene.fragmentsStartedOrbiting()()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.fragmentsStartedOrbiting()(*(_QWORD *)(v0 + 16));
}

ValueMetadata *type metadata accessor for InfoTip()
{
  return &type metadata for InfoTip;
}

unint64_t protocol witness for Tip.id.getter in conformance InfoTip()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Tip.title.getter in conformance InfoTip()
{
  uint64_t ObjCClassFromMetadata;
  id v1;

  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for TVRUITipManager();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  return Text.init(_:tableName:bundle:comment:)();
}

uint64_t protocol witness for Tip.message.getter in conformance InfoTip()
{
  uint64_t ObjCClassFromMetadata;
  id v1;

  LocalizedStringKey.init(stringLiteral:)();
  type metadata accessor for TVRUITipManager();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v1 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  return Text.init(_:tableName:bundle:comment:)();
}

void protocol witness for Identifiable.id.getter in conformance InfoTip(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000016;
  a1[1] = 0x800000021B0FFBD0;
}

unint64_t lazy protocol witness table accessor for type InfoTip and conformance InfoTip()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InfoTip and conformance InfoTip;
  if (!lazy protocol witness table cache variable for type InfoTip and conformance InfoTip)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for InfoTip, &type metadata for InfoTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InfoTip and conformance InfoTip);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type InfoTip and conformance InfoTip;
  if (!lazy protocol witness table cache variable for type InfoTip and conformance InfoTip)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for InfoTip, &type metadata for InfoTip);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InfoTip and conformance InfoTip);
  }
  return result;
}

uint64_t specialized InfoTip.options.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)>>.0);
  v1 = *(_QWORD *)(v0 - 8);
  v36 = v0;
  v37 = v1;
  MEMORY[0x24BDAC7A8]();
  v34 = (char *)&v28 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildPartialBlock<A>(first:)>>.0);
  v35 = *(_QWORD *)(v32 - 8);
  MEMORY[0x24BDAC7A8]();
  v30 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Tips.MaxDisplayCount();
  v29 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  v33 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Tips.UsesConstellation();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8]();
  v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for <<opaque return type of static Tips.OptionsBuilder.buildExpression<A>(_:)>>.0);
  v31 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8]();
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x22075C3E0](0);
  v17 = MEMORY[0x24BDF61D8];
  MEMORY[0x22075C38C](v13, v10, MEMORY[0x24BDF61D8]);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  Tips.MaxDisplayCount.init(_:)();
  v18 = MEMORY[0x24BDF61B8];
  MEMORY[0x22075C38C](v6, v4, MEMORY[0x24BDF61B8]);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v4);
  v38 = v10;
  v39 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v20 = v30;
  MEMORY[0x22075C3B0](v16, v14, OpaqueTypeConformance2);
  v38 = v14;
  v39 = OpaqueTypeConformance2;
  v21 = swift_getOpaqueTypeConformance2();
  v38 = v4;
  v39 = v18;
  v22 = swift_getOpaqueTypeConformance2();
  v23 = v34;
  v24 = v32;
  static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)();
  v38 = v24;
  v39 = v7;
  v40 = v21;
  v41 = v22;
  swift_getOpaqueTypeConformance2();
  v25 = v36;
  v26 = static Tips.OptionsBuilder.buildFinalResult<A>(_:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v23, v25);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  return v26;
}

void FMPFSKPatternNode.applyConformationFactor(_:sprung:)(char a1, double a2)
{
  uint64_t v2;
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  _BYTE *v14;
  double *v15;
  double *v16;
  uint64_t v17;
  double *v18;
  char *v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double *v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double *v38;
  uint64_t v39;
  double v40;
  int64x2_t v41;

  v4 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 184);
  v5 = (a2 - v4) / (1.0 - v4);
  if (v5 < 0.0)
    v6 = 0.0;
  else
    v6 = v5;
  v7 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor;
  *(double *)v7 = a2;
  *(_BYTE *)(v7 + 8) = 0;
  v8 = (uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v9 = *v8;
  if (!((unint64_t)*v8 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v10)
      goto LABEL_6;
LABEL_35:
    swift_bridgeObjectRelease_n();
    FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
    return;
  }
  swift_bridgeObjectRetain_n();
  v10 = _CocoaArrayWrapper.endIndex.getter();
  if (!v10)
    goto LABEL_35;
LABEL_6:
  if (v10 >= 1)
  {
    v11 = 0;
    v12 = fmin(a2 / v4, 1.0);
    v41 = vdupq_n_s64(0x4341C37937E08000uLL);
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v13 = (char *)MEMORY[0x22075C8C0](v11, v9);
      else
        v13 = (char *)*(id *)(v9 + 8 * v11 + 32);
      v14 = v13;
      v15 = (double *)&v13[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
      *v15 = v12;
      *((_BYTE *)v15 + 8) = 0;
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v12);
      v16 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_scalingFactor];
      *v16 = v6;
      *((_BYTE *)v16 + 8) = 0;
      FMPFSKPatternFragmentNode.applyScalingFactor(_:)(v6);
      v17 = *(_QWORD *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring];
      if (!v17
        || (v18 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style],
            (v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 168] & 1) != 0)
        || ((_BYTE)v18[19] & 1) != 0
        || ((_BYTE)v18[23] & 1) != 0)
      {
        v19 = &v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
        *(_QWORD *)v19 = 0x3FF0000000000000;
        v19[8] = 0;
      }
      else
      {
        v20 = v18[20];
        if (v20 <= a2)
        {
          v24 = (v18[22] - a2) / (v18[22] - v20);
          v25 = 1.0 - v24;
          if (v24 >= 1.0)
            v25 = 0.0;
          if (v24 < 0.0)
            v23 = 1.0;
          else
            v23 = v25;
        }
        else
        {
          v21 = (a2 - v18[18]) / (v20 - v18[18]);
          v22 = 1.0 - v21;
          if (v21 < 0.0)
            v22 = 1.0;
          if (v21 >= 1.0)
            v23 = 0.0;
          else
            v23 = v22;
        }
        v26 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactor];
        *v26 = v23;
        *((_BYTE *)v26 + 8) = 0;
        if ((a1 & 1) != 0
          && (v27 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
              swift_beginAccess(),
              v28 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40),
              *(double *)(v27 + 280) + v28 != 1.79769313e308))
        {
          v39 = v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
          *(double *)v39 = v23;
          *(_BYTE *)(v39 + 8) = 0;
          v40 = v23 - v28;
          *(double *)(v27 + 280) = v40;
          *(double *)(v27 + 240) = v40;
          *(_QWORD *)(v27 + 248) = 0;
        }
        else
        {
          v29 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
          v30 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
          v31 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
          swift_beginAccess();
          *(double *)v31 = v23;
          *(_QWORD *)(v31 + 8) = 0;
          *(_QWORD *)(v31 + 16) = v29;
          *(_OWORD *)(v31 + 24) = xmmword_21B0F86F0;
          *(_OWORD *)(v31 + 40) = xmmword_21B0F8700;
          *(_QWORD *)(v31 + 56) = v29;
          *(_QWORD *)(v31 + 64) = 0;
          *(_QWORD *)(v31 + 72) = 0;
          *(int64x2_t *)(v31 + 80) = v41;
          *(_OWORD *)(v31 + 96) = 0u;
          *(_OWORD *)(v31 + 112) = 0u;
          *(_QWORD *)(v31 + 128) = v30;
          *(_OWORD *)(v31 + 136) = xmmword_21B0F86F0;
          *(_OWORD *)(v31 + 152) = xmmword_21B0F8700;
          *(_QWORD *)(v31 + 168) = v30;
          *(_QWORD *)(v31 + 176) = 0;
          *(_QWORD *)(v31 + 184) = 0;
          *(_OWORD *)(v31 + 208) = 0u;
          *(_OWORD *)(v31 + 224) = 0u;
          *(int64x2_t *)(v31 + 192) = v41;
          *(double *)(v31 + 240) = v23;
          *(_OWORD *)(v31 + 248) = xmmword_21B0F86F0;
          *(_QWORD *)(v31 + 264) = 0x4063BD3CC9BE45DELL;
          *(_QWORD *)(v31 + 272) = 0x403921FB54442D18;
          *(double *)(v31 + 280) = v23;
          *(_QWORD *)(v31 + 288) = 0;
          *(_QWORD *)(v31 + 296) = 0;
          *(int64x2_t *)(v31 + 304) = v41;
          *(_OWORD *)(v31 + 320) = 0u;
          *(_OWORD *)(v31 + 336) = 0u;
          v32 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold);
          *(_QWORD *)(v31 + 352) = v32;
          v33 = *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold);
          *(_QWORD *)(v31 + 360) = v33;
          v34 = 6.28318531
              / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16)
              * (6.28318531
               / *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters + 16));
          v35 = sqrt(v34);
          v36 = *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters) * (v35 + v35);
          v37 = v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
          *(_QWORD *)v37 = 0;
          *(_QWORD *)(v37 + 8) = 0;
          *(_QWORD *)(v37 + 16) = 0x3FF0000000000000;
          *(double *)(v37 + 24) = v34;
          *(double *)(v37 + 32) = v36;
          *(_QWORD *)(v37 + 40) = 0;
          *(int64x2_t *)(v37 + 64) = v41;
          *(_OWORD *)(v37 + 80) = 0u;
          *(_OWORD *)(v37 + 96) = 0u;
          *(_QWORD *)(v37 + 48) = v32;
          *(_QWORD *)(v37 + 56) = v33;
          *(double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget) = v23;
          *(_QWORD *)(v17 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity) = 0;
          *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          v38 = (double *)&v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
          *v38 = v23;
          *((_BYTE *)v38 + 8) = 0;
        }
      }

      ++v11;
    }
    while (v10 != v11);
    goto LABEL_35;
  }
  __break(1u);
}

Swift::Void __swiftcall FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  unint64_t v3;
  double v4;
  double v5;
  BOOL v6;
  double v7;
  uint64_t *v8;
  double v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  _BYTE *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t ObjectType;
  double v22;
  int v23;
  _BOOL4 v25;
  double v27;
  double *v28;
  BOOL v29;
  double v30;
  uint64_t v31;
  double v32;
  char v33;
  unint64_t *v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  BOOL v41;
  double v42;
  _BOOL8 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v2 = v0;
  v3 = v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor;
  v4 = 0.0;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor + 8))
    v5 = 0.0;
  else
    v5 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor);
  v6 = v5 > 0.0;
  *(_QWORD *)&v7 = v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor;
  v8 = &OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes;
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor + 8) & 1) != 0)
    goto LABEL_21;
  v9 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 184);
  if (**(double **)&v7 - v9 >= 0.0)
    v4 = **(double **)&v7 - v9;
  if (*(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 200) <= v4
                                                                                      / (1.0 - **(double **)&v7 - v9)
    || (*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) != 0
    || *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor) >= 0.0)
  {
    v6 = 1;
  }
  v10 = (unint64_t *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v11 = *v10;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v12 = _CocoaArrayWrapper.endIndex.getter();
    if (v12)
      goto LABEL_13;
  }
  else
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v12)
    {
LABEL_13:
      if (v12 < 1)
        goto LABEL_85;
      for (i = 0; i != v12; ++i)
      {
        if ((v11 & 0xC000000000000001) != 0)
          v14 = (_BYTE *)MEMORY[0x22075C8C0](i, v11);
        else
          v14 = *(id *)(v11 + 8 * i + 32);
        v14[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] = v5 <= 0.0;

      }
    }
  }
  swift_bridgeObjectRelease_n();
  *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor) = v6;
  v8 = &OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes;
LABEL_21:
  *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing) = 1;
  if ((*(_BYTE *)(*(_QWORD *)&v7 + 8) & 1) != 0)
    goto LABEL_25;
  v15 = **(double **)&v7;
  if (**(double **)&v7 <= 0.0)
  {
    v19 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
    if (!MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate, v15))
      goto LABEL_53;
    v20 = *(_QWORD *)(v19 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v20 + 40))(ObjectType, v20);
    goto LABEL_30;
  }
  if ((*(_BYTE *)(v3 + 8) & 1) != 0)
  {
LABEL_25:
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) == 0
      && *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor) >= 1.0)
    {
LABEL_26:
      v16 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (!MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
        goto LABEL_53;
      v17 = *(_QWORD *)(v16 + 8);
      v18 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v17 + 56))(v18, v17);
LABEL_30:
      swift_unknownObjectRelease();
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  if (v15 < 1.0
    || *(double *)v3 > 0.0
    || (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) == 0
    && *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor) >= 1.0)
  {
    v22 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
    v23 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8);
    if (v23 == 1 || v22 < 1.0)
    {
      if ((*(_BYTE *)(v3 + 8) & 1) != 0)
        goto LABEL_52;
    }
    else if ((*(_BYTE *)(v3 + 8) & 1) != 0 || v15 < 1.0 || *(double *)v3 > 0.0)
    {
      goto LABEL_26;
    }
    v25 = v15 < 1.0;
    if (*(double *)v3 > 0.0)
      v25 = 1;
    if ((v23 | v25) != 1 && v22 >= 1.0)
    {
      v47 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (!MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
        goto LABEL_83;
      v48 = *(_QWORD *)(v47 + 8);
      v49 = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v48 + 64))(v49, v48);
      goto LABEL_82;
    }
LABEL_52:
    *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments) = 0;
    goto LABEL_53;
  }
  v44 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
  if (MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
  {
    v45 = *(_QWORD *)(v44 + 8);
    v46 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v45 + 48))(v46, v45);
LABEL_82:
    swift_unknownObjectRelease();
  }
LABEL_83:
  *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments) = 1;
LABEL_53:
  v27 = 0.0;
  if ((*(_BYTE *)(*(_QWORD *)&v7 + 8) & 1) == 0)
  {
    v28 = (double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8) & 1) == 0
      && *v28 >= 0.0)
    {
      v29 = v5 <= 0.0
         || *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_derivativeCenterFactor) == -1;
      v27 = **(double **)&v7 * *v28;
      if (v29)
        v27 = 0.0;
    }
  }
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setAlpha_, 1.0 - v27);
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_needsRecomputeVisibleFragments) == 1)
  {
    objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_position);
    *(double *)&v31 = COERCE_DOUBLE(FMPFSKPatternNode.visibleTrackOffsets(center:)(-v30));
    if ((v33 & 1) == 0)
    {
      v1 = *(double *)&v31;
      v7 = v32;
      v34 = (unint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
      swift_beginAccess();
      v11 = *v34;
      if (v11 >> 62)
        goto LABEL_86;
      v35 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      for (; v35; v35 = _CocoaArrayWrapper.endIndex.getter())
      {
        v3 = v11 & 0xC000000000000001;
        v36 = v1 + 1.0;
        v37 = v7 + -1.0;
        v38 = 4;
        v39 = 0;
        if ((v11 & 0xC000000000000001) != 0)
        {
LABEL_67:
          v40 = COERCE_DOUBLE(MEMORY[0x22075C8C0](v39, v11));
          goto LABEL_69;
        }
        while (1)
        {
          *(_QWORD *)&v40 = *(id *)(v11 + 8 * v38);
LABEL_69:
          v1 = v40;
          v41 = __OFADD__(v39, 1);
          *(_QWORD *)&v7 = v39 + 1;
          if (v41)
            break;
          if ((*(_BYTE *)(*(_QWORD *)&v40
                         + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                         + 16) & 1) == 0)
          {
            v42 = *(double *)(*(_QWORD *)&v40
                            + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                            + 8);
            v43 = v37 > v42 || v42 > v36;
            objc_msgSend(*(id *)&v40, sel_setHidden_, v43);
          }

          if (*(_QWORD *)&v7 == v35)
            goto LABEL_87;
          v39 = ++v38 - 4;
          if (v3)
            goto LABEL_67;
        }
        __break(1u);
LABEL_85:
        __break(1u);
LABEL_86:
        swift_bridgeObjectRetain_n();
      }
LABEL_87:
      swift_bridgeObjectRelease_n();
    }
  }
  v50 = (unint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v51 = *v50;
  if (*v50 >> 62)
    goto LABEL_102;
  v52 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v52)
  {
LABEL_103:
    v8 = 0;
    v3 = 0;
LABEL_104:
    swift_bridgeObjectRelease_n();
    v7 = *(double *)&OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting;
    v55 = *v50;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_allFragmentsAreOrbiting) & 1) == 0)
    {
      if (v55 >> 62)
        goto LABEL_111;
      if (*(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10) == v3)
        goto LABEL_107;
LABEL_112:
      if (*(_BYTE *)(v2 + *(_QWORD *)&v7) != 1)
        goto LABEL_121;
      v55 = *v50;
    }
    if (v55 >> 62)
    {
      swift_bridgeObjectRetain();
      v65 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if ((uint64_t *)v65 == v8)
        goto LABEL_116;
    }
    else if (*(uint64_t **)((v55 & 0xFFFFFFFFFFFFF8) + 0x10) == v8)
    {
LABEL_116:
      *(_BYTE *)(v2 + *(_QWORD *)&v7) = 0;
      v61 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
      if (MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
      {
        v62 = *(_QWORD *)(v61 + 8);
        v63 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v62 + 16))(v63, v62);
        swift_unknownObjectRelease();
      }
      if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track + 8) & 1) == 0)
      {
        v64 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring);
        FLSpring.resetImmediately(toValue:)(*(Swift::Double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track));
        *(_BYTE *)(v64 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      }
      return;
    }
LABEL_121:
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange) == 1
      && (*(_BYTE *)(v2 + *(_QWORD *)&v7) & 1) == 0
      && (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track + 8) & 1) == 0)
    {
      v66 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_track);
      *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackDidChange) = 0;
      v67 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring)
          + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(_QWORD *)v67 = v66;
      *(_BYTE *)(v67 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
    }
    return;
  }
LABEL_90:
  if (v52 >= 1)
  {
    v7 = 0.0;
    v8 = 0;
    v3 = 0;
    while (1)
    {
      if ((v51 & 0xC000000000000001) != 0)
        v53 = (char *)MEMORY[0x22075C8C0](*(_QWORD *)&v7, v51);
      else
        v53 = (char *)*(id *)(v51 + 8 * *(_QWORD *)&v7 + 32);
      v54 = *(_QWORD *)&v53[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction];

      if (v54)
      {
        v41 = __OFADD__(v3++, 1);
        if (v41)
        {
          __break(1u);
LABEL_101:
          __break(1u);
LABEL_102:
          swift_bridgeObjectRetain_n();
          v52 = _CocoaArrayWrapper.endIndex.getter();
          if (!v52)
            goto LABEL_103;
          goto LABEL_90;
        }
      }
      else
      {
        v41 = __OFADD__(v8, 1);
        v8 = (uint64_t *)((char *)v8 + 1);
        if (v41)
          goto LABEL_101;
      }
      if (v52 == ++*(_QWORD *)&v7)
        goto LABEL_104;
    }
  }
  __break(1u);
LABEL_111:
  swift_bridgeObjectRetain();
  v60 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v60 != v3)
    goto LABEL_112;
LABEL_107:
  *(_BYTE *)(v2 + *(_QWORD *)&v7) = 1;
  v56 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
  if (MEMORY[0x22075D574](v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
  {
    v57 = *(_QWORD *)(v56 + 8);
    v58 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v58, v57);
    swift_unknownObjectRelease();
  }
  v59 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring);
  FLSpring.resetImmediately(toValue:)(0.5);
  *(_BYTE *)(v59 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
  FMPFSKPatternNode.applyTrack(_:)(0.5);
}

void FMPFSKPatternNode.apply(presentedEnergeticAngle:presentedLethargicAngle:presentedCenterFactor:presentedLookout:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v17;
  uint64_t v18;
  double v19;
  void *v20;
  char *v21;
  id v22;
  unsigned int v23;
  double v24;
  void *v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  long double v30;
  double v31;
  double v32;
  char v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  uint64_t v40;
  long double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  id v55;
  double v56;
  double v57;
  double v58;
  char *v59;
  uint64_t v60;
  char *v61;
  double *v62;
  uint64_t v63;
  double *v64;
  uint64_t v65;
  char **__ptr32 *v66;
  double v67;
  double v68;
  int v69;
  double v70;
  Swift::Double v71;
  uint64_t v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t ObjectType;
  double v79;
  double v80;
  double v81;
  uint64_t v82;
  double v83;
  double v84;
  double v85;
  double v86;
  Swift::Double v87;
  Swift::Double *v88;
  uint64_t v89;
  Swift::Double *v90;
  Swift::Double v91;
  Swift::Double *v92;
  uint64_t v93;
  Swift::Double *v94;
  double v95;
  double v96;
  uint64_t v97;
  void *v98;
  id v99;
  double v100;
  void *v101;
  id v102;
  char v103;
  Swift::Double v104;
  char *v105;
  uint64_t v106;
  _BOOL4 v107;
  double v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  double v114;
  double v115;
  double v116;
  double v117;
  double v118;
  uint64_t v119;
  double v120;
  double v121;
  double v122;
  double v123;
  double v124;
  double v125;
  double *v126;
  uint64_t v127;
  double *v128;
  Swift::Double v129;
  Swift::Double *v130;
  uint64_t v131;
  Swift::Double *v132;
  Swift::Double v133;
  Swift::Double *v134;
  uint64_t v135;
  Swift::Double *v136;
  Swift::Double v137;
  Swift::Double *v138;
  uint64_t v139;
  Swift::Double *v140;
  _BYTE *v141;
  BOOL v142;
  BOOL v143;
  id v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  id v149;
  void *v150;
  void *v151;
  id v152;
  char v153;
  id v154;
  double v156;
  Swift::Double v157;
  double v158;
  double v159;
  double v160;
  double v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  BOOL v166;
  double v167;
  uint64_t v168;
  double v169;
  double v170;
  unint64_t v171;
  double v172;
  double v173;
  double v174;
  double v176;
  _BYTE *v177;

  v9 = v8;
  v10 = *(void **)(v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode);
  if (v10)
  {
    v11 = *(void **)(v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode);
    if (v11)
    {
      if ((*(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor + 8) & 1) == 0)
      {
        v17 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor);
        v18 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor;
        *(double *)v18 = *(double *)&a5;
        *(_BYTE *)(v18 + 8) = a6 & 1;
        if ((a6 & 1) != 0)
          v19 = 0.0;
        else
          v19 = *(double *)&a5;
        v20 = (void *)objc_opt_self();
        v177 = v10;
        v21 = v11;
        v22 = objc_msgSend(v20, sel_standardUserDefaults);
        v23 = objc_msgSend(v22, sel_fmpfDebugMode);

        v24 = 1.0;
        if (!v23)
          v24 = 0.0;
        objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode), sel_setAlpha_, v24);
        v25 = *(void **)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode);
        if ((a4 & 1) != 0)
          objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_zRotation);
        else
          v26 = *(double *)&a3;
        objc_msgSend(v25, sel_setZRotation_, v26);
        v27 = *(double *)&a1;
        if ((a2 & 1) == 0)
          v27 = *(double *)&a1 / 3.14159265 * 180.0;
        v28 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing;
        *(double *)v28 = v27;
        *(_BYTE *)(v28 + 8) = a2 & 1;
        v166 = (a2 & 1) == 0;
        if ((a4 & 1) == 0)
          *(double *)&a3 = *(double *)&a3 / 3.14159265 * 180.0;
        v29 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing;
        *(double *)v29 = *(double *)&a3;
        *(_BYTE *)(v29 + 8) = a4 & 1;
        objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode], sel_zRotation);
        v31 = fmod(v30, 6.28318531);
        if (v31 <= 3.14159265)
        {
          if (v31 < -3.14159265)
            v31 = v31 + 6.28318531;
        }
        else
        {
          v31 = v31 + -6.28318531;
        }
        v32 = fmod(v31, 6.28318531);
        if (v32 <= 3.14159265)
        {
          v33 = a8;
          if (v32 < -3.14159265)
            v32 = v32 + 6.28318531;
        }
        else
        {
          v32 = v32 + -6.28318531;
          v33 = a8;
        }
        if ((a2 & 1) == 0)
          v32 = *(double *)&a1;
        v34 = (double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style);
        v35 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 112);
        v36 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 120);
        v37 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 96);
        v38 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 104);
        v160 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 144);
        v39 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 128);
        v159 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 136);
        v40 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout;
        *(double *)v40 = *(double *)&a7;
        *(_BYTE *)(v40 + 8) = v33 & 1;
        v41 = remainder(v32, 6.28318531);
        v42 = fmod(v41, 6.28318531);
        if (v42 <= 3.14159265)
        {
          if (v42 < -3.14159265)
            v42 = v42 + 6.28318531;
        }
        else
        {
          v42 = v42 + -6.28318531;
        }
        v176 = v42;
        v43 = (v17 - v34[20]) / (1.0 - v34[20]);
        if (v43 < 0.0)
          v43 = 0.0;
        v165 = *(double *)&a7;
        if ((a8 & 1) != 0)
          v44 = 0.0;
        else
          v44 = *(double *)&a7;
        v46 = (1.0 - v19) * v43;
        v47 = (1.0 - v44) * v46;
        v48 = v17;
        if (*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_forceHideNoonNode))
          v49 = 0.0;
        else
          v49 = v43;
        v50 = (double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor);
        v173 = v48;
        if ((*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor + 8) & 1) != 0)
        {
          v169 = (1.0 - v44) * v46;
          v51 = 1.0;
        }
        else
        {
          v51 = 1.0 - *v50;
          v52 = v48 * *v50;
          v43 = v52 + v43 * v51;
          v44 = v52 + v44 * v51;
          v169 = v47 * v51;
        }
        v45 = 1.0 - v19;
        v167 = v51
             * -(*(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize + 8)
               * (v19 * (v19 * v19) + v19 * v19 * (v45 * 0.0) + v45 * (v45 * v45) * 0.0 + v19 * (v45 * v45 * 0.0)));
        v53 = v38 * v43 + v37 * (1.0 - v43);
        v174 = v44;
        v170 = v36 * v43 + v35 * (1.0 - v43);
        v172 = v39 * v44;
        v54 = v34[21];
        v158 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pixelsPerInch);
        v55 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
        objc_msgSend(v55, sel_scale);
        v57 = v56;

        v58 = v34[2];
        v59 = &v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
        *(_QWORD *)v59 = 0x3FF0000000000000;
        v59[8] = 0;
        v60 = *(_QWORD *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring];
        FLSpring.resetImmediately(toValue:)(1.0);
        *(_BYTE *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        v61 = &v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
        *(_QWORD *)v61 = 0x3FF0000000000000;
        v61[8] = 0;
        v163 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
        objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setAlpha_, 1.0);
        objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_setAlpha_, 1.0);
        v62 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacity];
        *v62 = v49;
        *((_BYTE *)v62 + 8) = 0;
        v63 = *(_QWORD *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring];
        FLSpring.resetImmediately(toValue:)(v49);
        *(_BYTE *)(v63 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        v64 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
        *v64 = v49;
        *((_BYTE *)v64 + 8) = 0;
        v65 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode;
        objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setAlpha_, v49);
        objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_setAlpha_, v49);
        v66 = &off_21B0F7000;
        v67 = v176;
        v68 = fabs(v176);
        if ((*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor + 8) & 1) != 0
          || (v69 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_inFOV), v69 == 2)
          || (v70 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactor), (v69 & 1) == 0)
          && v19 < 2.22044605e-16)
        {
          v71 = v53;
          v72 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping;
          v73 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping);
          v74 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode;
          if (*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) == 1)
          {
            v75 = 0.0;
            FMPFSKPatternNode.setLookout(_:sprung:)(1, 0.0);
            if (v73 <= 0.0)
            {
              v79 = v68;
              *(_BYTE *)(v9 + v74) = 0;
              v67 = v176;
              v80 = v174;
              v66 = &off_21B0F7000;
            }
            else
            {
              v76 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
              if (MEMORY[0x22075D574](v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate))
              {
                v77 = *(_QWORD *)(v76 + 8);
                ObjectType = swift_getObjectType();
                (*(void (**)(uint64_t, uint64_t))(v77 + 80))(ObjectType, v77);
                swift_unknownObjectRelease();
              }
              v79 = v68;
              *(_BYTE *)(v9 + v74) = 0;
              v67 = v176;
              v80 = v174;
              v66 = &off_21B0F7000;
              v75 = v176 * v174;
            }
          }
          else
          {
            v79 = v68;
            *(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) = 0;
            v75 = 0.0;
            v80 = v174;
            if (v73 > 0.0)
              v75 = v176 * v174;
          }
          v81 = v80 * *(double *)(v9 + v72);
          v82 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
          v83 = -((v81 + *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius)) * v19);
          v84 = *((double *)v66 + 334);
          v85 = -(v83 * cos(v84 - v67));
          v86 = sin(v84 - v79) * v83;
          if (*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) != 1)
            objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setPosition_, 0.0, v167);
          FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v86, *(unint64_t *)&v85), 0);
          FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v86, *(unint64_t *)&v85), 0);
          FMPFSKPeripheralDotNode.setDotScale(_:sprung:)(1, v170);
          FMPFSKPeripheralDotNode.setAngle(_:sprung:)(0, v75);
          v87 = v81 + *(double *)(v9 + v82);
          v88 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
          *v88 = v87;
          *((_BYTE *)v88 + 8) = 0;
          v89 = *(_QWORD *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
          FLSpring.resetImmediately(toValue:)(v87);
          *(_BYTE *)(v89 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          v90 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
          *v90 = v87;
          *((_BYTE *)v90 + 8) = 0;
          objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v87);
          FMPFSKPeripheralDotNode.setDotScale(_:sprung:)(1, v71);
          v91 = v81 + *(double *)(v9 + v82);
          v92 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
          *v92 = v91;
          *((_BYTE *)v92 + 8) = 0;
          v93 = *(_QWORD *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
          FLSpring.resetImmediately(toValue:)(v91);
          *(_BYTE *)(v93 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
          v94 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
          *v94 = v91;
          *((_BYTE *)v94 + 8) = 0;
          objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v91);
          v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = 0;
          FMPFSKPeripheralDotNode.pulse(_:animated:)(0, 0);
          v95 = v172;
          if (v73 <= 0.0)
            v95 = 0.0;
          v96 = v173;
LABEL_59:
          v97 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView;
          v98 = *(void **)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView);
          if (v98)
          {
            v99 = v98;
            FMPFRingView.setOpacity(_:sprung:)(*(uint64_t *)&v169, 0, 1);

          }
          if ((v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle + 8] & 1) == 0)
          {
            v100 = fmod(*(long double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle], 6.28318531);
            if (v100 <= 3.14159265)
            {
              if (v100 < -3.14159265)
                v100 = v100 + 6.28318531;
            }
            else
            {
              v100 = v100 + -6.28318531;
            }
            v101 = *(void **)(v9 + v97);
            if (v101)
            {
              v102 = v101;
              FMPFRingView.drawFromStartAngle(_:to:additionalRadiusScale:sprung:)(*(uint64_t *)&v95, 0, 0, v100, v176);

            }
          }
          if (v174 <= 0.0)
          {
            v104 = v176;
            if ((a8 & 1) != 0)
            {
              v103 = v166;
            }
            else
            {
              v103 = v166;
              if (v165 > 0.0)
              {
LABEL_73:
                if (*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
                {
                  if (v96 > 0.0)
                    goto LABEL_80;
                }
                else if (v96 > 0.75)
                {
                  goto LABEL_80;
                }
                if ((*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8) & 1) == 0
                  && *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor) == 0.0)
                {
                  v105 = &v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor];
                  *(_QWORD *)v105 = 0;
                  v105[8] = 1;
                  FMPFSKPeripheralDotNode.setFreeFromBearing()();
LABEL_81:

                  return;
                }
LABEL_80:
                FMPFSKPeripheralDotNode.setBoundToBearing()();
                FMPFSKPeripheralDotNode.setUnsprungInteractiveAngleFactor(_:)(COERCE_ID(v96 * (v96 * v96)+ v96 * v96 * ((1.0 - v96) * 3.0)+ (1.0 - v96) * ((1.0 - v96) * (1.0 - v96)) * 0.0+ v96 * ((1.0 - v96) * (1.0 - v96) * 3.0)), 0);
                goto LABEL_81;
              }
            }
          }
          else
          {
            v103 = 0;
            v104 = v176;
          }
          FMPFSKPeripheralDotNode.setAngle(_:sprung:)(v103, v104);
          goto LABEL_73;
        }
        v106 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode;
        v156 = v54;
        if ((*(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) & 1) != 0)
        {
          *(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNodeSnappedUnderPointeeNode) = 1;
          v107 = v70 >= 0.5;
          if ((v69 & 1) != 0)
          {
            v108 = v174;
            if (v70 >= 0.5)
            {
              v107 = 1;
              v109 = v176;
              goto LABEL_96;
            }
            goto LABEL_91;
          }
          v108 = v174;
        }
        else
        {
          FMPFSKPatternNode.setLookout(_:sprung:)(1, 1.0);
          if ((v69 & 1) != 0)
          {
            v110 = v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate;
            if (MEMORY[0x22075D574]())
            {
              v111 = *(_QWORD *)(v110 + 8);
              v112 = swift_getObjectType();
              (*(void (**)(uint64_t, uint64_t))(v111 + 72))(v112, v111);
              swift_unknownObjectRelease();
            }
            v107 = 1;
            *(_BYTE *)(v9 + v106) = 1;
            v67 = v176;
            v109 = v176;
            v108 = v174;
            v66 = &off_21B0F7000;
            if (v70 < 0.5)
            {
LABEL_91:
              v109 = v67 * v108;
              v107 = 1;
            }
LABEL_96:
            v157 = v109;
            v113 = *(unsigned __int8 *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType);
            v114 = 0.0;
            v115 = 1.0;
            v116 = 0.0;
            if (v113 != 2)
            {
              v117 = 1.0;
              v118 = 0.0;
              if (v107)
              {
                v118 = v108;
                v117 = 1.0 - v108;
              }
              v116 = 1.0 - v108 + v159 * v118;
              v115 = v19 * (v156 * v158 / v57 / v58 / v53 - v160) + v117 + v160 * v118;
            }
            v161 = v53;
            v119 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
            v120 = *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius);
            if ((v69 & 1) != 0)
              v114 = v108;
            v121 = v114 * (v39 * v120);
            *(double *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_extraDiskRadiusWhenSnapping) = v121;
            v122 = -((v120 + v121) * v19);
            v123 = *((double *)v66 + 334);
            v124 = -(v122 * cos(v123 - v67));
            v125 = sin(v123 - v68) * v122;
            if (v113 != 1)
              objc_msgSend(*(id *)(v9 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_setPosition_, 0.0, v167);
            FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v125, *(unint64_t *)&v124), 0);
            FMPFSKPeripheralDotNode.setOffset(_:sprung:)((CGPoint)__PAIR128__(*(unint64_t *)&v125, *(unint64_t *)&v124), 0);
            v126 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
            *v126 = v170 * v116;
            *((_BYTE *)v126 + 8) = 0;
            v127 = *(_QWORD *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring];
            FLSpring.resetImmediately(toValue:)(v170 * v116);
            *(_BYTE *)(v127 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            v128 = (double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
            *v128 = v170 * v116;
            *((_BYTE *)v128 + 8) = 0;
            objc_msgSend(*(id *)&v177[v65], sel_setScale_, v170 * v116 * *(double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale]);
            FMPFSKPeripheralDotNode.setAngle(_:sprung:)(0, v157);
            v129 = v121 + *(double *)(v9 + v119);
            v130 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
            *v130 = v129;
            *((_BYTE *)v130 + 8) = 0;
            v131 = *(_QWORD *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
            FLSpring.resetImmediately(toValue:)(v129);
            *(_BYTE *)(v131 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            v132 = (Swift::Double *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
            *v132 = v129;
            *((_BYTE *)v132 + 8) = 0;
            objc_msgSend(*(id *)&v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v129);
            v133 = v161 * v115;
            v134 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScale];
            *v134 = v133;
            *((_BYTE *)v134 + 8) = 0;
            v135 = *(_QWORD *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring];
            FLSpring.resetImmediately(toValue:)(v133);
            *(_BYTE *)(v135 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            v136 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
            *v136 = v133;
            *((_BYTE *)v136 + 8) = 0;
            objc_msgSend(*(id *)&v21[v163], sel_setScale_, v133 * *(double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale]);
            v137 = v121 + *(double *)(v9 + v119);
            v138 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadius];
            *v138 = v137;
            *((_BYTE *)v138 + 8) = 0;
            v139 = *(_QWORD *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
            FLSpring.resetImmediately(toValue:)(v137);
            *(_BYTE *)(v139 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
            v140 = (Swift::Double *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
            *v140 = v137;
            *((_BYTE *)v140 + 8) = 0;
            objc_msgSend(*(id *)&v21[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0, v137);
            v141 = v177;
            v142 = 0;
            v143 = v19 < 1.0;
            v96 = v173;
            v95 = v172;
            if (!v143)
            {
              v164 = v177[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_isPlayingInitialPulse];
              v144 = objc_msgSend(*(id *)&v177[v65], sel_children);
              type metadata accessor for SKNode();
              v145 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v145 >> 62)
                goto LABEL_121;
              v146 = *(_QWORD *)((v145 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              if (v146)
              {
                while (1)
                {
                  if (v146 < 1)
                  {
                    __break(1u);
                    return;
                  }
                  v147 = 0;
                  v168 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode;
                  v162 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode;
                  v148 = v145 & 0xC000000000000001;
                  v171 = v145;
                  while (1)
                  {
                    v149 = v148 ? (id)MEMORY[0x22075C8C0](v147, v145) : *(id *)(v145 + 8 * v147 + 32);
                    v150 = v149;
                    objc_opt_self();
                    if (swift_dynamicCastObjCClass())
                    {
                      v151 = *(void **)&v177[v168];
                      if (!v151)
                        break;
                      v152 = v151;
                      v153 = static NSObject.== infix(_:_:)();

                      v145 = v171;
                      if ((v153 & 1) == 0)
                        break;
                    }

LABEL_110:
                    if (v146 == ++v147)
                      goto LABEL_122;
                  }
                  v154 = *(id *)&v177[v162];
                  v145 = static NSObject.== infix(_:_:)();

                  if ((v145 & 1) != 0)
                    break;
                  if (!__OFADD__(v164++, 1))
                    break;
                  __break(1u);
LABEL_121:
                  swift_bridgeObjectRetain();
                  v146 = _CocoaArrayWrapper.endIndex.getter();
                  if (!v146)
                    goto LABEL_122;
                }
                v145 = v171;
                goto LABEL_110;
              }
LABEL_122:
              swift_bridgeObjectRelease_n();
              v142 = v164 == 0;
              v141 = v177;
            }
            v141[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] = v142;
            goto LABEL_59;
          }
          *(_BYTE *)(v9 + v106) = 1;
          v107 = v70 >= 0.5;
          v67 = v176;
          v108 = v174;
          v66 = &off_21B0F7000;
        }
        v109 = 0.0;
        if (v107)
          v109 = v67;
        goto LABEL_96;
      }
    }
  }
}

uint64_t FMPFSKPatternNode.applyTrack(_:)(double a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v4;
  double v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  char *v11;
  void *v12;
  double *v13;
  uint64_t result;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char *v20;
  void *v21;
  double v22;
  double v23;

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
  v5 = 0.0;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 32) & 1) == 0)
    v5 = (a1 + -0.5)
       * ((*(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius)
         + *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius))
        * (double)*(uint64_t *)v4
        / (double)*(uint64_t *)(v4 + 24));
  v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode);
  objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_position);
  objc_msgSend(v6, sel_setPosition_);
  v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v8 = *v7;
  if ((unint64_t)*v7 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v9 = _CocoaArrayWrapper.endIndex.getter();
    if (!v9)
      goto LABEL_14;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v9)
      goto LABEL_14;
  }
  if (v9 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (i = 0; i != v9; ++i)
  {
    if ((v8 & 0xC000000000000001) != 0)
      v11 = (char *)MEMORY[0x22075C8C0](i, v8);
    else
      v11 = (char *)*(id *)(v8 + 8 * i + 32);
    v12 = v11;
    v13 = (double *)&v11[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_trackOffset];
    *v13 = v5;
    *((_BYTE *)v13 + 8) = 0;
    if ((v11[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0)
      FMPFSKPatternFragmentNode.applyConformationFactor(_:)(*(double *)&v11[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor]);

  }
LABEL_14:
  result = swift_bridgeObjectRelease_n();
  if ((*(_BYTE *)(v4 + 112) & 1) == 0)
  {
    v5 = *(double *)(v4 + 104);
    v15 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v2
                                                                + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode), sel_children));
    type metadata accessor for SKNode();
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v2 = specialized _arrayConditionalCast<A, B>(_:)(v16);
    result = swift_bridgeObjectRelease();
    if (v2)
    {
      if (!(v2 >> 62))
      {
        v17 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        result = swift_bridgeObjectRetain();
        if (v17)
        {
LABEL_18:
          if (v17 < 1)
          {
            __break(1u);
            return result;
          }
          v18 = 0;
          v19 = (double)*(uint64_t *)v4;
          do
          {
            if ((v2 & 0xC000000000000001) != 0)
              v20 = (char *)MEMORY[0x22075C8C0](v18, v2);
            else
              v20 = (char *)*(id *)(v2 + 8 * v18 + 32);
            v21 = v20;
            v22 = v5 * ((*(double *)&v20[OBJC_IVAR____TtC10TVRemoteUI15FMPFSKLabelNode_normalizedIndex] - a1) * v19);
            ++v18;
            if (v22 < 0.0)
              v23 = 1.0;
            else
              v23 = 1.0 - v22;
            objc_msgSend(v20, sel_setAlpha_, v23);

          }
          while (v17 != v18);
        }
        return swift_bridgeObjectRelease_n();
      }
LABEL_28:
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v17 = result;
      if (result)
        goto LABEL_18;
      return swift_bridgeObjectRelease_n();
    }
  }
  return result;
}

uint64_t specialized _arrayConditionalCast<A, B>(_:)(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v1 = a1;
  v12 = MEMORY[0x24BEE4AF8];
  if (a1 >> 62)
    goto LABEL_18;
  specialized ContiguousArray.reserveCapacity(_:)();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x22075C8C0](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        type metadata accessor for FMPFSKLabelNode();
        if (!swift_dynamicCastClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2)
          return v12;
      }
      __break(1u);
    }
    else
    {
      v5 = 0;
      v6 = v1 + 32;
      while (1)
      {
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        v8 = *(void **)(v6 + 8 * v5);
        type metadata accessor for FMPFSKLabelNode();
        v9 = swift_dynamicCastClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v9;
        v10 = v8;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        ++v5;
        if (v7 == v2)
          return v12;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    specialized ContiguousArray.reserveCapacity(_:)();
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return v12;
}

Swift::Void __swiftcall FMPFSKPatternNode.updateWithDeltaTime(_:)(Swift::Double_optional a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  Swift::Double v5;
  char v6;
  double v7;
  double v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  Swift::Double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  char *v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  double v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double *v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double *v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double *v67;
  double v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  void *v74;
  id v75;
  void *v76;
  id v77;
  void *v78;
  id v79;
  double v80;
  double v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;

  v3 = v2;
  v4 = v1;
  v5 = *(double *)&a1.is_nil;
  v6 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_bearing + 8);
  if ((v6 & 1) != 0)
  {
    v7 = 0.0;
    v8 = 0.0;
    v9 = 1;
    v10 = 1;
  }
  else
  {
    v8 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing);
    v10 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedEnergeticBearing + 8);
    if ((v10 & 1) == 0)
      v8 = v8 / 180.0 * 3.14159265;
    v7 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing);
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLethargicBearing + 8) & 1) != 0)
    {
      v9 = 1;
    }
    else
    {
      v9 = 0;
      v7 = v7 / 180.0 * 3.14159265;
    }
  }
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
  v12 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8);
  v13 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout);
  v14 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout + 8);
  if ((v4 & 1) == 0)
  {
    v86 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout + 8);
    v87 = v10;
    v84 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLookout);
    v85 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor);
    v82 = v9;
    v83 = *(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedCenterFactor + 8);
    v15 = *(double *)&a1.is_nil;
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformedToExplodedFactor) != 1)
      goto LABEL_23;
    v16 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring;
    v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring);
    if (FMPFFluidSpring.isStable.getter())
      goto LABEL_23;
    FLSpring.step(_:)(v5);
    *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v18 = *(_QWORD *)(v3 + v16);
    v19 = (double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    v20 = *v19 + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v20) <= *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
      v20 = v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    v21 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor;
    *(double *)v21 = v20;
    *(_BYTE *)(v21 + 8) = 0;
    v22 = (unint64_t *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
    swift_beginAccess();
    v23 = *v22;
    v80 = v8;
    v81 = v5;
    if (v23 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v24 = _CocoaArrayWrapper.endIndex.getter();
      if (v24)
        goto LABEL_15;
    }
    else
    {
      v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v24)
      {
LABEL_15:
        if (v24 < 1)
        {
LABEL_79:
          __break(1u);
          return;
        }
        v25 = 0;
        v26 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor;
        do
        {
          if ((v23 & 0xC000000000000001) != 0)
            v27 = (char *)MEMORY[0x22075C8C0](v25, v23);
          else
            v27 = (char *)*(id *)(v23 + 8 * v25 + 32);
          v28 = *(_BYTE *)(v26 + 8);
          v29 = &v27[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
          *(_QWORD *)v29 = *(_QWORD *)v26;
          v29[8] = v28;

          ++v25;
        }
        while (v24 != v25);
      }
    }
    swift_bridgeObjectRelease_n();
    v8 = v80;
    v5 = v81;
LABEL_23:
    v30 = v7;
    v31 = v5;
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyConformationFactor) == 1)
    {
      v32 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring;
      v33 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactorSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(_BYTE *)(v33 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v34 = *(_QWORD *)(v3 + v32);
        v35 = (double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v36 = *v35 + *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v35[35] + *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v36) <= *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v36 = v35[35] + *(double *)(v34 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        FMPFSKPatternNode.applyConformationFactor(_:sprung:)(1, v36);
      }
    }
    v37 = (_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing);
    if (!(v6 & 1 | ((*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyBearing) & 1) == 0)))
    {
      v38 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_energeticAngleSpring;
      v39 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_energeticAngleSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(_BYTE *)(v39 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v40 = *(_QWORD *)(v3 + v38);
        v41 = (double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v87 = 0;
        v42 = *v41 + *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v41[35] + *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v42) <= *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v42 = v41[35] + *(double *)(v40 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        v8 = v42;
      }
    }
    if (v6 & 1 | ((*v37 & 1) == 0))
    {
      v9 = v82;
      v5 = v31;
      v7 = v30;
    }
    else
    {
      v43 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lethargicAngleSpring;
      v44 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lethargicAngleSpring);
      v9 = v82;
      v5 = v31;
      v7 = v30;
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(_BYTE *)(v44 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v45 = *(_QWORD *)(v3 + v43);
        v46 = (double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v9 = 0;
        v47 = *v46 + *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v46[35] + *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v47) <= *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v47 = v46[35] + *(double *)(v45 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        v7 = v47;
      }
    }
    v12 = v83;
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldApplyCenterFactor) == 1)
    {
      v48 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring;
      v49 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_centerFactorSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(_BYTE *)(v49 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v50 = *(_QWORD *)(v3 + v48);
        v51 = (double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v12 = 0;
        v52 = *v51 + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v52) <= *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v52 = v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        v85 = *(_QWORD *)&v52;
      }
    }
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLookout) == 1)
    {
      v53 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring;
      v54 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_lookoutSpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(_BYTE *)(v54 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v55 = *(_QWORD *)(v3 + v53);
        v56 = (double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v86 = 0;
        v57 = *v56 + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v57) <= *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v57 = v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        v84 = *(_QWORD *)&v57;
      }
    }
    if (*(_BYTE *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_shouldLabelsOpacity) == 1)
    {
      v58 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacitySpring;
      v59 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsOpacitySpring);
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(v15);
        *(_BYTE *)(v59 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v60 = *(_QWORD *)(v3 + v58);
        v61 = (double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v62 = *v61 + *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v61[35] + *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v62) <= *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v62 = v61[35] + *(double *)(v60 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        v63 = v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedLabelsOpacity;
        *(double *)v63 = v62;
        *(_BYTE *)(v63 + 8) = 0;
        objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode), sel_setAlpha_);
      }
    }
    v64 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring;
    v65 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackSpring);
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(v15);
      *(_BYTE *)(v65 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v66 = *(_QWORD *)(v3 + v64);
      v67 = (double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v68 = *v67 + *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v67[35] + *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v68) <= *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v68 = v67[35] + *(double *)(v66 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      FMPFSKPatternNode.applyTrack(_:)(v68);
    }
    v14 = v86;
    v10 = v87;
    v13 = v84;
    v11 = v85;
  }
  FMPFSKPatternNode.apply(presentedEnergeticAngle:presentedLethargicAngle:presentedCenterFactor:presentedLookout:)(*(uint64_t *)&v8, v10, *(uint64_t *)&v7, v9, v11, v12, v13, v14);
  v69 = (uint64_t *)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v70 = *v69;
  if ((unint64_t)*v69 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v71 = _CocoaArrayWrapper.endIndex.getter();
    if (v71)
      goto LABEL_61;
  }
  else
  {
    v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v71)
    {
LABEL_61:
      if (v71 >= 1)
      {
        v72 = 0;
        while (1)
        {
          if ((v70 & 0xC000000000000001) != 0)
          {
            v73 = (id)MEMORY[0x22075C8C0](v72, v70);
            if ((v4 & 1) == 0)
              goto LABEL_68;
          }
          else
          {
            v73 = *(id *)(v70 + 8 * v72 + 32);
            if ((v4 & 1) == 0)
LABEL_68:
              FMPFSKPatternFragmentNode.updateWithDeltaTime(_:)(v5);
          }

          if (v71 == ++v72)
            goto LABEL_70;
        }
      }
      __break(1u);
      goto LABEL_79;
    }
  }
LABEL_70:
  swift_bridgeObjectRelease_n();
  if ((v4 & 1) == 0)
  {
    v74 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode);
    if (v74)
    {
      v75 = v74;
      FMPFSKPeripheralDotNode.updateWithDeltaTime(_:)(v5);

    }
    v76 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode);
    if (v76)
    {
      v77 = v76;
      FMPFSKPeripheralDotNode.updateWithDeltaTime(_:)(v5);

    }
    v78 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_ringView);
    if (v78)
    {
      v79 = v78;
      FMPFRingView.updateWithDeltaTime(_:)(v5);

    }
  }
  FMPFSKPatternNode.stageConformationVsScalingVsBearingVsCentering()();
}

id FMR1GlyphButton.init(named:tintColor:backgroundColor:)(uint64_t a1, void *a2, objc_class *a3, void *a4)
{
  char *v4;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  id v23;
  UIColor_optional v24;
  Swift::String v25;
  objc_super v27;
  UIColor_optional v28;

  v9 = &v4[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  v10 = one-time initialization token for default;
  v11 = v4;
  if (v10 != -1)
    swift_once();
  v12 = qword_25513FCE0;
  v13 = (void *)qword_25513FCE8;
  v14 = qword_25513FD00;
  v15 = xmmword_25513FCF0;
  *(_OWORD *)v9 = static FMR1GlyphButtonStyle.default;
  *((_QWORD *)v9 + 2) = v12;
  *((_QWORD *)v9 + 3) = v13;
  *((_OWORD *)v9 + 2) = v15;
  *((_QWORD *)v9 + 6) = v14;
  v16 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  v17 = (void *)objc_opt_self();
  v18 = v13;
  *(_QWORD *)&v11[v16] = objc_msgSend(v17, sel_buttonWithType_, 0);
  v19 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  *(_QWORD *)&v11[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring] = 0;
  v20 = &v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v21 = &v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_legend];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  v22 = &v11[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_named];
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = 0;

  v27.receiver = v11;
  v27.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  v23 = objc_msgSendSuper2(&v27, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  FMR1GlyphButton.setupSubviews()();
  FMR1GlyphButton.setupConstraints()();
  if (a2)
  {
    v25._countAndFlagsBits = a1;
    v25._object = a2;
    v28.value.super.isa = a3;
    v28.is_nil = (char)a4;
    FMR1GlyphButton.set(named:tintColor:backgroundColor:)(v25, v28, v24);
    swift_bridgeObjectRelease();
  }

  return v23;
}

id FMR1GlyphButton.__deallocating_deinit()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  objc_super v6;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink];
  if (v1)
  {
    v2 = (void *)objc_opt_self();
    v3 = v1;
    v4 = objc_msgSend(v2, sel_currentRunLoop);
    objc_msgSend(v3, sel_removeFromRunLoop_forMode_, v4, *MEMORY[0x24BDBCB80]);

  }
  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

Swift::Void __swiftcall FMR1GlyphButton.setupSubviews()()
{
  char *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  char *v9;
  id v10;
  id v11;
  double v12;

  objc_msgSend(v0, sel_setUserInteractionEnabled_, 1);
  objc_msgSend(v0, sel_setAccessibilityRespondsToUserInteraction_, 1);
  objc_msgSend(v0, sel_setIsAccessibilityElement_, 1);
  v1 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
  objc_msgSend(v0, sel_setBackgroundColor_, v1);

  v2 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_setUserInteractionEnabled_, 0);
  objc_msgSend(*(id *)&v0[v2], sel_setIsAccessibilityElement_, 0);
  objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[v2]);
  v3 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  v4 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label];
  v5 = (void *)objc_opt_self();
  v6 = *MEMORY[0x24BEBE1F0];
  v7 = v4;
  v8 = objc_msgSend(v5, sel_preferredFontForTextStyle_, v6);
  v9 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(v8, sel_fontWithSize_, *(double *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style
                                                                                            + 16]));

  objc_msgSend(v7, sel_setFont_, v10);
  objc_msgSend(*(id *)&v0[v3], sel_setNumberOfLines_, 0);
  objc_msgSend(*(id *)&v0[v3], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v3], sel_setTextAlignment_, 1);
  objc_msgSend(*(id *)&v0[v3], sel_setTextColor_, *((_QWORD *)v9 + 3));
  v11 = objc_msgSend(*(id *)&v0[v3], sel_layer);
  LODWORD(v12) = 0;
  objc_msgSend(v11, sel_setOpacity_, v12);

  objc_msgSend(v0, sel_addSubview_, *(_QWORD *)&v0[v3]);
}

Swift::Void __swiftcall FMR1GlyphButton.setupConstraints()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  double *v14;
  double v15;
  id v16;
  id v17;
  id v18;
  Class isa;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  Class v32;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v31 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21B0F9230;
  v4 = objc_msgSend(*(id *)&v1[v2], sel_topAnchor);
  v5 = objc_msgSend(v1, (SEL)&selRef_allowsSwipeToDismiss + 4);
  v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(_QWORD *)(v3 + 32) = v6;
  v7 = objc_msgSend(*(id *)&v1[v2], sel_leadingAnchor);
  v8 = objc_msgSend(v1, sel_leadingAnchor);
  v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v8);

  *(_QWORD *)(v3 + 40) = v9;
  v10 = objc_msgSend(*(id *)&v1[v2], sel_trailingAnchor);
  v11 = objc_msgSend(v1, sel_trailingAnchor);
  v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(_QWORD *)(v3 + 48) = v12;
  v13 = objc_msgSend(*(id *)&v1[v2], sel_widthAnchor);
  v14 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  v15 = *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style];
  v16 = objc_msgSend(v13, sel_constraintEqualToConstant_, v15);

  *(_QWORD *)(v3 + 56) = v16;
  v17 = objc_msgSend(*(id *)&v1[v2], sel_heightAnchor);
  v18 = objc_msgSend(v17, sel_constraintEqualToConstant_, v15);

  *(_QWORD *)(v3 + 64) = v18;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_activateConstraints_, isa);

  v20 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_21B0F9240;
  v22 = objc_msgSend(*(id *)&v1[v20], sel_topAnchor);
  v23 = objc_msgSend(*(id *)&v1[v2], sel_bottomAnchor);
  v24 = objc_msgSend(v22, sel_constraintEqualToAnchor_constant_, v23, v14[1]);

  *(_QWORD *)(v21 + 32) = v24;
  v25 = objc_msgSend(*(id *)&v1[v20], sel_bottomAnchor);
  v26 = objc_msgSend(v1, sel_bottomAnchor);
  v27 = objc_msgSend(v25, sel_constraintEqualToAnchor_, v26);

  *(_QWORD *)(v21 + 40) = v27;
  v28 = objc_msgSend(*(id *)&v1[v20], sel_centerXAnchor);
  v29 = objc_msgSend(*(id *)&v1[v2], sel_centerXAnchor);
  v30 = objc_msgSend(v28, sel_constraintEqualToAnchor_, v29);

  *(_QWORD *)(v21 + 48) = v30;
  specialized Array._endMutation()();
  v32 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v31, sel_activateConstraints_, v32);

}

void FMR1GlyphButton.touchesBegan(_:with:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  Class isa;
  id v5;
  id v6;
  id v7;
  id v8;
  objc_super v9;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v9.receiver = v2;
  v9.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v9, sel_touchesBegan_withEvent_, isa, a2);

  v5 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  v6 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v7 = objc_msgSend(v6, sel_colorWithAlphaComponent_, 0.5);

  v8 = objc_msgSend(v7, sel_CGColor);
  objc_msgSend(v5, sel_setBackgroundColor_, v8);

}

void FMR1GlyphButton.touchesEnded(_:with:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  Class isa;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  id v15;
  objc_super v16;
  CGPoint v17;
  CGRect v18;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v16.receiver = v2;
  v16.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v16, sel_touchesEnded_withEvent_, isa, a2);

  v5 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  v6 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  v7 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor];
  if (v7)
    v8 = objc_msgSend(v7, sel_CGColor);
  else
    v8 = 0;
  objc_msgSend(v6, sel_setBackgroundColor_, v8);

  v9 = swift_bridgeObjectRetain();
  v10 = (void *)specialized Collection.first.getter(v9);
  swift_bridgeObjectRelease();
  if (v10)
  {
    objc_msgSend(v10, sel_locationInView_, v2);
    v12 = v11;
    v14 = v13;
    objc_msgSend(v2, sel_bounds);
    v17.x = v12;
    v17.y = v14;
    if (CGRectContainsPoint(v18, v17))
    {
      v15 = *(id *)&v2[v5];
      objc_msgSend(v15, sel_sendActionsForControlEvents_, 64);

    }
  }
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    v3 = __CocoaSet.startIndex.getter();
    v5 = v4;
    v6 = __CocoaSet.endIndex.getter();
    v8 = MEMORY[0x22075C854](v3, v5, v6, v7);
    swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
    {
LABEL_3:
      outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
      return 0;
    }
LABEL_7:
    specialized Set.subscript.getter(v3, v5, v2 != 0, a1);
    v9 = v13;
    outlined consume of Set<UITouch>.Index._Variant(v3, v5, v2 != 0);
    return v9;
  }
  result = specialized _NativeSet.startIndex.getter(a1);
  if ((v12 & 1) == 0)
  {
    v5 = v11;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v11)
    {
      v3 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
        goto LABEL_3;
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t @objc FMR1GlyphButton.touchesBegan(_:with:)(void *a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(uint64_t, void *))
{
  uint64_t v8;
  id v9;
  id v10;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = a4;
  v10 = a1;
  a5(v8, a4);

  return swift_bridgeObjectRelease();
}

void FMR1GlyphButton.touchesCancelled(_:with:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  Class isa;
  id v5;
  void *v6;
  id v7;
  objc_super v8;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v8, sel_touchesCancelled_withEvent_, isa, a2);

  v5 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  v6 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor];
  if (v6)
    v7 = objc_msgSend(v6, sel_CGColor);
  else
    v7 = 0;
  objc_msgSend(v5, sel_setBackgroundColor_, v7);

}

void FMR1GlyphButton.touchesMoved(_:with:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  Class isa;
  uint64_t v5;
  void *v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  _BOOL4 v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  objc_super v17;
  CGPoint v18;
  CGRect v19;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  lazy protocol witness table accessor for type UITouch and conformance NSObject();
  isa = Set._bridgeToObjectiveC()().super.isa;
  v17.receiver = v2;
  v17.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v17, sel_touchesMoved_withEvent_, isa, a2);

  v5 = swift_bridgeObjectRetain();
  v6 = (void *)specialized Collection.first.getter(v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    objc_msgSend(v6, sel_locationInView_, v2);
    v8 = v7;
    v10 = v9;
    objc_msgSend(v2, sel_bounds);
    v18.x = v8;
    v18.y = v10;
    v11 = CGRectContainsPoint(v19, v18);
    v12 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
    if (v11)
    {
      v13 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
      v14 = objc_msgSend(v13, sel_colorWithAlphaComponent_, 0.5);

      v15 = objc_msgSend(v14, sel_CGColor);
    }
    else
    {
      v16 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor];
      if (v16)
        v15 = objc_msgSend(v16, sel_CGColor);
      else
        v15 = 0;
    }
    objc_msgSend(v12, sel_setBackgroundColor_, v15);

  }
}

id FMR1GlyphButton.ringDisplayLinkUpdate(displaylink:)(id a1)
{
  char *v1;
  double *v3;
  char *v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  id result;
  uint64_t v11;

  v3 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime];
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime + 8] & 1) == 0)
  {
    v4 = v1;
    v5 = *v3;
    objc_msgSend(a1, sel_timestamp);
    v7 = v6 - v5;
    v8 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring];
    if (v8)
    {
      FLSpring.step(_:)(v7);
      *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    }
    v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring];
    if (v9)
    {
      FLSpring.step(_:)(v7);
      *(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    }
    objc_msgSend(v4, sel_setNeedsDisplay);
  }
  result = objc_msgSend(a1, sel_timestamp);
  *(_QWORD *)v3 = v11;
  *((_BYTE *)v3 + 8) = 0;
  return result;
}

void FMR1GlyphButton.isUserInteractionEnabled.setter(char a1)
{
  char *v1;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v8;
  _QWORD v9[6];
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for FMR1GlyphButton();
  objc_msgSendSuper2(&v10, sel_setUserInteractionEnabled_, a1 & 1);
  v3 = (void *)objc_opt_self();
  v4 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v1;
  *(_BYTE *)(v5 + 24) = a1;
  v9[4] = partial apply for closure #1 in FMR1GlyphButton.isUserInteractionEnabled.setter;
  v9[5] = v5;
  v9[0] = MEMORY[0x24BDAC760];
  v9[1] = 1107296256;
  v9[2] = thunk for @escaping @callee_guaranteed () -> ();
  v9[3] = &block_descriptor_5;
  v6 = _Block_copy(v9);
  v7 = v4;
  v8 = v1;
  swift_release();
  objc_msgSend(v3, sel_transitionWithView_duration_options_animations_completion_, v7, 5242880, v6, 0, 0.25);
  _Block_release(v6);

}

void FMR1GlyphButton.setTarget(_:action:for:accessibilityActionName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v6 = v5;
  v12 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v12, sel_removeAllAnimations);

  v13 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  v14 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button], sel_layer);
  objc_msgSend(v14, sel_removeAllAnimations);

  v15 = objc_msgSend(*(id *)&v6[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label], sel_layer);
  objc_msgSend(v15, sel_removeAllAnimations);

  v16 = *(void **)&v6[v13];
  outlined init with copy of Any?(a1, (uint64_t)v34);
  v17 = v35;
  if (v35)
  {
    v18 = __swift_project_boxed_opaque_existential_1(v34, v35);
    v32 = a1;
    v33 = a5;
    v19 = a3;
    v20 = *(_QWORD *)(v17 - 8);
    MEMORY[0x24BDAC7A8](v18, v18);
    v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v20 + 16))(v22);
    v23 = v16;
    v24 = _bridgeAnythingToObjectiveC<A>(_:)();
    v25 = *(void (**)(char *, uint64_t))(v20 + 8);
    a3 = v19;
    v25(v22, v17);
    a1 = v32;
    a5 = v33;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  }
  else
  {
    v26 = v16;
    v24 = 0;
  }
  objc_msgSend(v16, sel_addTarget_action_forControlEvents_, v24, a2, a3, v32, v33);

  swift_unknownObjectRelease();
  if (a5)
  {
    swift_bridgeObjectRetain();
    v27 = (void *)MEMORY[0x22075C584](a4, a5);
    objc_msgSend(v6, sel_setAccessibilityLabel_, v27);

    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
    outlined init with copy of Any?(a1, (uint64_t)v34);
    v28 = UIAccessibilityCustomAction.__allocating_init(name:target:selector:)(a4, a5, v34, a2);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_21B0F7C30;
    *(_QWORD *)(v29 + 32) = v28;
    v34[0] = v29;
    specialized Array._endMutation()();
    v30 = v28;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setAccessibilityCustomActions_, isa);

  }
  else
  {
    objc_msgSend(v6, sel_setAccessibilityLabel_, 0);
    objc_msgSend(v6, sel_setAccessibilityCustomActions_, 0);
  }
}

id UIAccessibilityCustomAction.__allocating_init(name:target:selector:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v15;

  v6 = (void *)MEMORY[0x22075C584]();
  swift_bridgeObjectRelease();
  v7 = a3[3];
  if (v7)
  {
    v8 = __swift_project_boxed_opaque_existential_1(a3, a3[3]);
    v9 = *(_QWORD *)(v7 - 8);
    MEMORY[0x24BDAC7A8](v8, v8);
    v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v9 + 16))(v11);
    v12 = _bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a3);
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithName_target_selector_, v6, v12, a4);

  swift_unknownObjectRelease();
  return v13;
}

Swift::Void __swiftcall FMR1GlyphButton.set(named:tintColor:backgroundColor:)(Swift::String named, UIColor_optional tintColor, UIColor_optional backgroundColor)
{
  uint64_t v3;
  void *v4;
  Class isa;
  void *object;
  uint64_t countAndFlagsBits;
  double v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  Class v16;
  void *v17;
  id v18;
  objc_class *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;

  v4 = *(void **)&tintColor.is_nil;
  isa = tintColor.value.super.isa;
  object = named._object;
  countAndFlagsBits = named._countAndFlagsBits;
  *(Swift::String *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_named) = named;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style);
  v9 = objc_msgSend((id)objc_opt_self(), sel_configurationWithPointSize_weight_, 7, v8 / 3.0);
  swift_bridgeObjectRetain();
  v10 = (void *)MEMORY[0x22075C584](countAndFlagsBits, object);
  swift_bridgeObjectRelease();
  v11 = objc_msgSend((id)objc_opt_self(), sel_systemImageNamed_, v10);

  v12 = objc_msgSend(v11, sel_imageByApplyingSymbolConfiguration_, v9);
  if (v12)
    objc_msgSend(*(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button), sel_setImage_forState_, v12, 0);
  v13 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  v14 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button);
  if (isa)
  {
    v15 = v14;
    v16 = isa;
  }
  else
  {
    v17 = (void *)objc_opt_self();
    v18 = v14;
    v16 = (Class)objc_msgSend(v17, sel_whiteColor);
  }
  v19 = isa;
  objc_msgSend(v14, sel_setTintColor_, v16);

  v20 = objc_msgSend(*(id *)(v3 + v13), sel_layer);
  objc_msgSend(v20, sel_setCornerRadius_, v8 * 0.5);

  if (!v4 || (v21 = objc_msgSend(v4, sel_CGColor)) == 0)
  {
    v22 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
    v23 = objc_msgSend(v22, sel_colorWithAlphaComponent_, 0.5);

    v21 = objc_msgSend(v23, sel_CGColor);
  }
  v24 = objc_msgSend(*(id *)(v3 + v13), sel_layer);
  objc_msgSend(v24, sel_setBackgroundColor_, v21);

  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithCGColor_, v21);
  v26 = *(id *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor) = v25;

}

uint64_t type metadata accessor for FMR1GlyphButton()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for FMR1GlyphButtonStyle(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v4 = v3;
  return a1;
}

_QWORD *assignWithCopy for FMR1GlyphButtonStyle(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v4 = (void *)a2[3];
  v5 = (void *)a1[3];
  a1[3] = v4;
  v6 = v4;

  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FMR1GlyphButtonStyle(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);

  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMR1GlyphButtonStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMR1GlyphButtonStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMR1GlyphButtonStyle()
{
  return &type metadata for FMR1GlyphButtonStyle;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_21B0CE850()
{
  uint64_t v0;

  return swift_deallocObject();
}

id partial apply for closure #1 in FMR1GlyphButton.isUserInteractionEnabled.setter()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button), sel_setEnabled_, *(unsigned __int8 *)(v0 + 24));
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

void specialized Set.subscript.getter(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter() == *(_DWORD *)(a4 + 36))
      {
        __CocoaSet.Index.element.getter();
        type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = static NSObject.== infix(_:_:)();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = static NSObject.== infix(_:_:)();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x22075C878](a1, a2, v7);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UITouch);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t specialized _NativeSet.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void specialized FMR1GlyphButton.init(coder:)()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v1 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style;
  if (one-time initialization token for default != -1)
    swift_once();
  v2 = &v0[v1];
  v3 = qword_25513FCE0;
  v4 = (void *)qword_25513FCE8;
  v5 = qword_25513FD00;
  v6 = xmmword_25513FCF0;
  *(_OWORD *)v2 = static FMR1GlyphButtonStyle.default;
  *((_QWORD *)v2 + 2) = v3;
  *((_QWORD *)v2 + 3) = v4;
  *((_OWORD *)v2 + 2) = v6;
  *((_QWORD *)v2 + 6) = v5;
  v7 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  v8 = (void *)objc_opt_self();
  v9 = v4;
  *(_QWORD *)&v0[v7] = objc_msgSend(v8, sel_buttonWithType_, 0);
  v10 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label;
  *(_QWORD *)&v0[v10] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_normalBackgroundColor] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring] = 0;
  v11 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_legend];
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = 0;
  v13 = &v0[OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_named];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized FMR1GlyphButton.draw(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double *v4;
  double *v5;
  double v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  void **v17;
  char *v18;
  double *v19;
  double v20;
  double v21;
  uint64_t v22;
  void *v23;
  void *v24;
  char *v25;
  id v26;
  id v27;
  void *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  CGFloat v33;
  CGFloat v34;
  uint64_t v35;
  double v36;
  id v37;
  id v38;
  CGRect v39;
  CGRect v40;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring;
  v3 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringPerimiterAnimationSpring);
  v4 = (double *)&unk_21B0F9000;
  if (!v3)
  {
    v17 = (void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
    v18 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
    if (!v18)
      return;
    goto LABEL_12;
  }
  v5 = (double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  swift_beginAccess();
  if (vabdd_f64(v5[35] + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40], *v5 + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o]) > *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold])v6 = *v5 + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  else
    v6 = v5[35] + *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40];
  if (v6 >= 0.99)
  {
    v7 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16];
    v8 = v3;
    v9 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F50624DD2F1A9FCLL, 0, v7, 0);
    v10 = (double *)((char *)v9 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    v11 = (double *)((char *)v9 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    v12 = *(double *)((char *)v9 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    if (v10[35] + v12 == 1.79769313e308)
    {
      FLSpring.resetImmediately(toValue:)(1.0);
      *((_BYTE *)v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      v12 = v11[5];
    }
    v13 = 1.0 - v12;
    v10[35] = v13;
    v10[30] = v13;
    v10[31] = 0.0;
    v14 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring) = v9;
    v15 = v9;

    v16 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = 0;

  }
  v17 = (void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
  v18 = *(char **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringFadeAnimationSpring);
  if (v18)
  {
    v4 = (double *)&unk_21B0F9000;
LABEL_12:
    v19 = (double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
    swift_beginAccess();
    v20 = *v19 + *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
    if (vabdd_f64(v19[35] + *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40], v20) <= *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold])
      v20 = v19[35] + *(double *)&v18[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40];
    v6 = 1.0 - v20;
    v21 = 4.71238898;
    if (v20 >= v4[63])
    {
      v22 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink;
      v23 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_ringDisplayLink);
      if (v23)
      {
        v24 = (void *)objc_opt_self();
        v25 = v18;
        v26 = v23;
        v27 = objc_msgSend(v24, sel_currentRunLoop);
        objc_msgSend(v26, sel_removeFromRunLoop_forMode_, v27, *MEMORY[0x24BDBCB80]);

        v28 = *(void **)(v1 + v22);
      }
      else
      {
        v29 = v18;
        v28 = 0;
      }
      *(_QWORD *)(v1 + v22) = 0;

      v30 = v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_lastRenderTime;
      *(_QWORD *)v30 = 0;
      *(_BYTE *)(v30 + 8) = 1;
      v31 = *v17;
      *v17 = 0;

    }
    goto LABEL_20;
  }
  v21 = v6 * 6.28318531 + -1.57079633;
LABEL_20:
  v32 = OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_button), sel_frame);
  v33 = CGRectGetWidth(v39) * 0.5;
  objc_msgSend(*(id *)(v1 + v32), sel_frame);
  v34 = CGRectGetHeight(v40) * 0.5;
  v35 = v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style;
  v36 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style + 40);
  v37 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, v33, v34, (*(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_style) - v36) * 0.5, -1.57079633, v21);
  objc_msgSend(v37, sel_setLineWidth_, v36);
  objc_msgSend(v37, sel_setLineCapStyle_, 1);
  v38 = objc_msgSend(*(id *)(v1 + v32), sel_tintColor);
  objc_msgSend(v38, sel_setStroke);

  objc_msgSend(v37, sel_strokeWithBlendMode_alpha_, 0, v6 * *(double *)(v35 + 48));
}

uint64_t outlined consume of Set<UITouch>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

id UIColor.fmpfBlendWithColor(_:factor:)(void *a1, double a2)
{
  void *v2;
  unsigned int v5;
  id result;
  BOOL v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15[2];

  v15[1] = *(double *)MEMORY[0x24BDAC8D0];
  v14 = 0.0;
  v15[0] = 0.0;
  v12 = 0;
  v13 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v8 = 0;
  v9 = 0.0;
  v5 = objc_msgSend(v2, sel_getRed_green_blue_alpha_, v15, &v14, &v13, &v12);
  result = 0;
  if (v5)
    v7 = a1 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    if (objc_msgSend(a1, sel_getRed_green_blue_alpha_, &v11, &v10, &v9, &v8))
      return objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithDisplayP3Red_green_blue_alpha_, (1.0 - a2) * v15[0] + v11 * a2, (1.0 - a2) * v14 + v10 * a2, (1.0 - a2) * v13 + v9 * a2, 1.0);
    else
      return 0;
  }
  return result;
}

id one-time initialization function for fmpfBlackColor()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  static UIColor.fmpfBlackColor = (uint64_t)result;
  return result;
}

void destroy for FMPFSKLabelNodeStyle(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for FMPFSKLabelNodeStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

uint64_t assignWithCopy for FMPFSKLabelNodeStyle(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(void **)(a2 + 16);
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  v6 = v4;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v7;
  return a1;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FMPFSKLabelNodeStyle(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFSKLabelNodeStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKLabelNodeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKLabelNodeStyle()
{
  return &type metadata for FMPFSKLabelNodeStyle;
}

double one-time initialization function for r1NoAR()
{
  id v0;
  double result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  static FMPFSKLabelNodeStyle.r1NoAR = 0xD000000000000012;
  *(_QWORD *)algn_25513FD18 = 0x800000021B0FFD30;
  qword_25513FD20 = (uint64_t)v0;
  qword_25513FD28 = 0x4046000000000000;
  *(_QWORD *)&result = 2;
  xmmword_25513FD30 = xmmword_21B0F9290;
  qword_25513FD40 = 0;
  byte_25513FD48 = 0;
  return result;
}

{
  double result;

  if (one-time initialization token for r1NoAR != -1)
    swift_once();
  *(_QWORD *)&static FMPFSKPatternNodeStyle.r1NoAR = 0;
  BYTE8(static FMPFSKPatternNodeStyle.r1NoAR) = 1;
  xmmword_25513FF08 = xmmword_21B0F9370;
  qword_25513FF18 = 0x3FEAAAAAAAAAAAABLL;
  byte_25513FF20 = 1;
  xmmword_25513FF28 = xmmword_21B0F92E0;
  xmmword_25513FF38 = xmmword_21B0F9380;
  __asm { FMOV            V1.2D, #1.0 }
  xmmword_25513FF48 = _Q1;
  xmmword_25513FF58 = _Q1;
  xmmword_25513FF68 = _Q1;
  xmmword_25513FF78 = xmmword_21B0F9330;
  xmmword_25513FF88 = xmmword_21B0F9340;
  *(_QWORD *)&xmmword_25513FF98 = 0x3FECCCCCCCCCCCCDLL;
  *((_QWORD *)&xmmword_25513FF98 + 1) = *((_QWORD *)&xmmword_25513CDF8 + 1);
  result = 0.6;
  xmmword_25513FFA8 = xmmword_21B0F9390;
  xmmword_25513FFB8 = xmmword_21B0F93A0;
  return result;
}

{
  id v0;
  id v1;
  double result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.4);

  static FMPFSKPeripheralDotNodeStyle.r1NoAR = xmmword_21B0F9440;
  qword_25513CDC8 = 16;
  *(_OWORD *)algn_25513CDD0 = xmmword_21B0F9450;
  *(_OWORD *)&qword_25513CDE0 = xmmword_21B0F9460;
  qword_25513CDF0 = (uint64_t)v1;
  result = 0.5;
  xmmword_25513CDF8 = xmmword_21B0F9470;
  qword_25513CE08 = 0x4040000000000000;
  return result;
}

void destroy for FMPFSKPatternNodeConfig(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 128))
  {
    swift_bridgeObjectRelease();

  }
}

uint64_t initializeWithCopy for FMPFSKPatternNodeConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  id v7;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v4 = *(_QWORD *)(a2 + 128);
  if (v4)
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = v4;
    v5 = *(void **)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v5;
    v6 = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = v6;
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    swift_bridgeObjectRetain();
    v7 = v5;
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v8;
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  }
  return a1;
}

uint64_t assignWithCopy for FMPFSKPatternNodeConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  __int128 *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  __int128 v17;
  void *v18;
  __int128 v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v9;
  v10 = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v10;
  v11 = (_OWORD *)(a1 + 120);
  v12 = (__int128 *)(a2 + 120);
  v13 = *(_QWORD *)(a2 + 128);
  if (*(_QWORD *)(a1 + 128))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v14 = *(void **)(a2 + 136);
      v15 = *(void **)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v14;
      v16 = v14;

      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      v17 = *(_OWORD *)(a2 + 160);
      *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = v17;
    }
    else
    {
      outlined destroy of FMPFSKLabelNodeStyle(a1 + 120);
      v22 = v12[1];
      v21 = v12[2];
      v23 = *v12;
      *(_OWORD *)((char *)v11 + 41) = *(__int128 *)((char *)v12 + 41);
      v11[1] = v22;
      v11[2] = v21;
      *v11 = v23;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    v18 = *(void **)(a2 + 136);
    *(_QWORD *)(a1 + 136) = v18;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    v19 = *(_OWORD *)(a2 + 160);
    *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = v19;
    swift_bridgeObjectRetain();
    v20 = v18;
  }
  else
  {
    v24 = *v12;
    v25 = *(_OWORD *)(a2 + 136);
    v26 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
    *(_OWORD *)(a1 + 136) = v25;
    *(_OWORD *)(a1 + 152) = v26;
    *v11 = v24;
  }
  return a1;
}

uint64_t outlined destroy of FMPFSKLabelNodeStyle(uint64_t a1)
{
  destroy for FMPFSKLabelNodeStyle(a1);
  return a1;
}

__n128 __swift_memcpy177_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t assignWithTake for FMPFSKPatternNodeConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v7;
  void *v8;
  __int128 v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  v4 = (_OWORD *)(a1 + 120);
  v5 = (_OWORD *)(a2 + 120);
  if (!*(_QWORD *)(a1 + 128))
    goto LABEL_5;
  v7 = *(_QWORD *)(a2 + 128);
  if (!v7)
  {
    outlined destroy of FMPFSKLabelNodeStyle((uint64_t)v4);
LABEL_5:
    v9 = v5[1];
    *v4 = *v5;
    v4[1] = v9;
    v4[2] = v5[2];
    *(_OWORD *)((char *)v4 + 41) = *(_OWORD *)((char *)v5 + 41);
    return a1;
  }
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = v7;
  swift_bridgeObjectRelease();
  v8 = *(void **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);

  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_BYTE *)(a1 + 176) = *(_BYTE *)(a2 + 176);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFSKPatternNodeConfig(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 177))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternNodeConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 176) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 177) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 177) = 0;
    if (a2)
      *(_QWORD *)(result + 128) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternNodeConfig()
{
  return &type metadata for FMPFSKPatternNodeConfig;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t getEnumTagSinglePayload for FMPFSKPatternNodeStyle(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternNodeStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternNodeStyle()
{
  return &type metadata for FMPFSKPatternNodeStyle;
}

id one-time initialization function for default()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id result;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_whiteColor);
  v2 = objc_msgSend(v0, sel_whiteColor);
  v3 = objc_msgSend(v2, sel_colorWithAlphaComponent_, 0.4);

  result = objc_msgSend(v0, sel_whiteColor);
  static FMPFSKPatternNodeCommonStyle.default = (uint64_t)v1;
  qword_25513FD58 = (uint64_t)v3;
  qword_25513FD60 = (uint64_t)result;
  qword_25513FD68 = 0x3FE0000000000000;
  return result;
}

id one-time initialization function for r1NoAR()
{
  id v1;

  if (one-time initialization token for r1NoAR != -1)
    swift_once();
  v1 = (id)qword_25513FD20;
  static FMPFSKPatternNodeConfig.r1NoAR = xmmword_21B0F92C0;
  byte_25513FD80 = 0;
  qword_25513FD88 = 5;
  LOBYTE(xmmword_25513FD90) = 0;
  *((_QWORD *)&xmmword_25513FD90 + 1) = 120;
  byte_25513FDA0 = 0;
  qword_25513FDA8 = 0;
  LOBYTE(xmmword_25513FDB0) = 0;
  *((_QWORD *)&xmmword_25513FDB0 + 1) = 0x4059000000000000;
  byte_25513FDC0 = 0;
  qword_25513FDC8 = 1;
  LOBYTE(xmmword_25513FDD0) = 0;
  *((_QWORD *)&xmmword_25513FDD0 + 1) = 0;
  byte_25513FDE0 = 0;
  qword_25513FDE8 = static FMPFSKLabelNodeStyle.r1NoAR;
  unk_25513FDF0 = *(_QWORD *)algn_25513FD18;
  qword_25513FDF8 = qword_25513FD20;
  xmmword_25513FE00 = *(_OWORD *)&qword_25513FD28;
  xmmword_25513FE10 = *(__int128 *)((char *)&xmmword_25513FD30 + 8);
  byte_25513FE20 = byte_25513FD48;
  swift_bridgeObjectRetain();
  return v1;
}

double one-time initialization function for r1OrBT()
{
  double result;

  if (one-time initialization token for r1OrBT != -1)
    swift_once();
  *(_QWORD *)&static FMPFSKPatternNodeStyle.r1OrBT = 0x3FE0000000000000;
  BYTE8(static FMPFSKPatternNodeStyle.r1OrBT) = 0;
  xmmword_25513FE38 = xmmword_21B0F92D0;
  qword_25513FE48 = 0x3FEAAAAAAAAAAAABLL;
  byte_25513FE50 = 0;
  xmmword_25513FE58 = xmmword_21B0F92E0;
  xmmword_25513FE68 = xmmword_21B0F92F0;
  xmmword_25513FE78 = xmmword_21B0F9300;
  xmmword_25513FE88 = xmmword_21B0F9310;
  xmmword_25513FE98 = xmmword_21B0F9320;
  xmmword_25513FEA8 = xmmword_21B0F9330;
  xmmword_25513FEB8 = xmmword_21B0F9340;
  *(_QWORD *)&xmmword_25513FEC8 = 0x3FECCCCCCCCCCCCDLL;
  *((_QWORD *)&xmmword_25513FEC8 + 1) = *((_QWORD *)&xmmword_25513CDA0 + 1);
  result = 0.5;
  xmmword_25513FED8 = xmmword_21B0F9350;
  xmmword_25513FEE8 = xmmword_21B0F9360;
  return result;
}

{
  id v0;
  id v1;
  double result;

  v0 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  v1 = objc_msgSend(v0, sel_colorWithAlphaComponent_, 0.4);

  static FMPFSKPeripheralDotNodeStyle.r1OrBT = xmmword_21B0F9440;
  qword_25513CD70 = 16;
  unk_25513CD78 = xmmword_21B0F9450;
  *(_OWORD *)&qword_25513CD88 = xmmword_21B0F9460;
  qword_25513CD98 = (uint64_t)v1;
  result = 0.5;
  xmmword_25513CDA0 = xmmword_21B0F9470;
  qword_25513CDB0 = 0x4040000000000000;
  return result;
}

id FMPFSKPatternFragmentNode.applyConformationFactor(_:)(double a1)
{
  char *v1;
  char *v2;
  double *v3;
  id result;
  float64x2_t v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  id v11;
  double v12;
  double v13;
  _BYTE v14[40];
  float64x2_t v15[2];
  char v16;

  v2 = v1;
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction + 32] & 1) == 0
    && (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 288] & 1) == 0)
  {
    v3 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
    a1 = pow(a1 * a1 * a1 * v3[3]+ a1 * a1 * ((1.0 - a1) * (v3[2] * 3.0))+ (1.0 - a1) * ((1.0 - a1) * (1.0 - a1)) * *v3+ (1.0 - a1) * (1.0 - a1) * (v3[1] * 3.0) * a1, *(long double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 280]);
  }
  v13 = a1;
  specialized FMPFSKPatternFragmentNode.positionOnCurvedPathWith(conformationFactor:trackOffsetCorrection:)((uint64_t)v14, a1);
  result = (id)outlined init with take of (position: CGPoint, peripheralPosition: CGPoint)?((uint64_t)v14, (uint64_t)v15);
  if ((v16 & 1) == 0)
  {
    v5 = v15[0];
    if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor + 8] & 1) == 0
      && (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset + 16] & 1) == 0)
    {
      v5 = vaddq_f64(v15[0], vmulq_n_f64(*(float64x2_t *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset], v13* (1.0- *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor])));
    }
    if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition + 16] & 1) != 0
      || (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor + 8] & 1) != 0)
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode], sel_setPosition_, *(_OWORD *)&v5);
      v6 = v13;
      v7 = 1.0 - v13;
    }
    else
    {
      objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode], sel_setPosition_, vaddq_f64(vmulq_n_f64(v5, 1.0 - *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor]), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15[1], 1.0 - v13), vmulq_n_f64(*(float64x2_t *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_explodedPosition], v13)), *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor])));
      v7 = 1.0 - v13;
      v6 = v13;
    }
    v12 = v7;
    v8 = v7 * *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_nonConformedBrightness]
       + v6 * *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedBrightness];
    v9 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_renderingColor];
    v10 = *(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode];
    v11 = v9;
    FMPFSKSpriteNode.setBrightness(_:with:)(v11, v8);

    return objc_msgSend(v2, sel_setAlpha_, v12 * *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 104]+ v13 * *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 96]);
  }
  return result;
}

id FMPFSKPatternFragmentNode.applyScalingFactor(_:)(double a1)
{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  void *v19;

  v2 = 1.0;
  v3 = 1.0 - a1;
  v4 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_maxScaleFactor) * a1
     + (1.0 - a1) * *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_minScaleFactor);
  v5 = v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style;
  v6 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 192);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 200))
    v6 = 1.0;
  v7 = *(double *)(v5 + 208);
  if (*(_BYTE *)(v5 + 216))
    v7 = 1.0;
  v8 = *(double *)(v5 + 224);
  if (*(_BYTE *)(v5 + 232))
    v8 = 1.0;
  if (!*(_BYTE *)(v5 + 248))
    v2 = *(double *)(v5 + 240);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling) == 1
    && (*(_BYTE *)(v5 + 264) & 1) == 0)
  {
    v9 = *(double *)(v5 + 256);
    v10 = 1.0;
    if (v6 > 1.0)
    {
      v6 = v6 * v9;
      if (v7 <= 1.0)
      {
LABEL_13:
        if (v8 <= 1.0)
          goto LABEL_14;
        goto LABEL_23;
      }
    }
    else if (v7 <= 1.0)
    {
      goto LABEL_13;
    }
    v7 = v7 * v9;
    if (v8 <= 1.0)
    {
LABEL_14:
      if (v2 <= 1.0)
      {
LABEL_16:
        v2 = v2 * v10;
        goto LABEL_17;
      }
LABEL_15:
      v10 = *(double *)(v5 + 256);
      goto LABEL_16;
    }
LABEL_23:
    v8 = v8 * v9;
    if (v2 <= 1.0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_17:
  v11 = v3 * v7 + v2 * a1;
  v12 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_dotNode), sel_setXScale_, v4 * (v3 * v6 + v8 * a1));
  objc_msgSend(*(id *)(v1 + v12), sel_setYScale_, v4 * v11);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_experienceType) == 1)
  {
    objc_msgSend(*(id *)(v1 + v12), sel_size);
    v14 = v13;
    objc_msgSend(*(id *)(v1 + v12), sel_xScale);
    v16 = v14 / v15;
    objc_msgSend(*(id *)(v1 + v12), sel_size);
    v18 = (v17 - v16) * 0.5;
    v19 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode);
  }
  else
  {
    v19 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_gimbalNode);
    v18 = 0.0;
  }
  return objc_msgSend(v19, sel_setPosition_, v18, 0.0);
}

Swift::Void __swiftcall FMPFSKPatternFragmentNode.updateWithDeltaTime(_:)(Swift::Double a1)
{
  char *v1;
  char *v2;
  _BYTE *v4;
  _BYTE *v5;
  double *v6;
  double *v7;
  double *v8;
  double *v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  _BYTE *v15;
  _BYTE *v16;
  double v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  double *v28;
  double v29;
  double *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double *v34;
  double v35;
  uint64_t v36;
  double v37;
  double *v39;
  double *v40;
  uint64_t v42;

  v2 = v1;
  if (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceScatterOffset] != 1)
    goto LABEL_23;
  v4 = *(_BYTE **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetXSpring];
  if (!v4)
    goto LABEL_23;
  v5 = *(_BYTE **)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceScatterOffsetYSpring];
  if (!v5)
    goto LABEL_23;
  v6 = (double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  swift_beginAccess();
  v7 = (double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  if (v6[35] + *(double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308)
    goto LABEL_23;
  v8 = (double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  swift_beginAccess();
  v9 = (double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  if (v8[35] + *(double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40] == 1.79769313e308)
    goto LABEL_23;
  v10 = &v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style];
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 136] & 1) != 0 || (v10[120] & 1) != 0)
    goto LABEL_23;
  v42 = *((_QWORD *)v10 + 16);
  v11 = *((double *)v10 + 14);
  FLSpring.step(_:)(a1);
  v4[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 1;
  FLSpring.step(_:)(a1);
  v5[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 1;
  v12 = *v6 + *v7;
  if (vabdd_f64(v6[35] + v7[5], v12) <= *(double *)&v4[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold])
    v12 = v6[35] + v7[5];
  v13 = *v8 + *v9;
  if (vabdd_f64(v8[35] + v9[5], v13) <= *(double *)&v5[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold])
    v13 = v8[35] + v9[5];
  v14 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceScatterOffset];
  *v14 = v12;
  v14[1] = v13;
  *((_BYTE *)v14 + 16) = 0;
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) != 0)
  {
    v15 = v4;
    v16 = v5;
  }
  else
  {
    v17 = *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
    v18 = v4;
    v19 = v5;
    FMPFSKPatternFragmentNode.applyConformationFactor(_:)(v17);
  }
  v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter];
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
    __break(1u);
    goto LABEL_54;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbScatterRandomOffsetFrameCounter] = v22;
  if (!v42)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v22 == 0x8000000000000000 && v42 == -1)
    goto LABEL_55;
  if (!(v22 % v42))
  {
    v23 = fmax(v11 * *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralDiskRadius], 1.0);
    if (v23 >= 0.0)
    {
      specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v23, v23);
      v25 = v24;
      specialized static BinaryFloatingPoint<>.random<A>(in:using:)(-v23, v23);
      FMPFSKPatternFragmentNode.setDisturbanceScatterOffset(_:sprung:)((CGPoint)__PAIR128__(v26, v25), 1);
      goto LABEL_22;
    }
LABEL_56:
    __break(1u);
    return;
  }
LABEL_22:

LABEL_23:
  if (v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_shouldApplyDisturbanceHomingFactor] == 1)
  {
    v27 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_disturbanceHomingFactorSpring];
    if (v27)
    {
      if (!FMPFFluidSpring.isStable.getter())
      {
        FLSpring.step(_:)(a1);
        *(_BYTE *)(v27 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
        v28 = (double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
        swift_beginAccess();
        v29 = *v28 + *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
        if (vabdd_f64(v28[35] + *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v29) <= *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
          v29 = v28[35] + *(double *)(v27 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
        v30 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedDisturbanceHomingFactor];
        *v30 = v29;
        *((_BYTE *)v30 + 8) = 0;
      }
    }
  }
  v31 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring;
  v32 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_headingSpring];
  if (!FMPFFluidSpring.isStable.getter()
    && *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_perimeterRotateOnceAction])
  {
    FLSpring.step(_:)(a1);
    *(_BYTE *)(v32 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v33 = *(_QWORD *)&v2[v31];
    v34 = (double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    v35 = *v34 + *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v34[35] + *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v35) <= *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
      v35 = v34[35] + *(double *)(v33 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_presentedAbsoluteHeading] = v35;
    objc_msgSend(v2, sel_setZRotation_, v35 / 180.0 * 3.14159265);
  }
  v36 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_noiseSubSpring];
  FLSpring.step(_:)(a1);
  *(_BYTE *)(v36 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  if ((v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor + 8] & 1) == 0)
  {
    v37 = *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationFactor];
    if (v37 <= 0.0 && v37 <= *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style + 56])
    {
      FMPFSKPatternFragmentNode.setDotsFreeFromBearing()();
      return;
    }
    if (v37 > 0.0)
    {
      FMPFSKPatternFragmentNode.setDotsBoundToBearing()();
      return;
    }
    if (v37 == 1.0)
    {
      v39 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
      v40 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition];
      if ((v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16] & 1) != 0)
      {
        if ((v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition + 16] & 1) == 0)
LABEL_52:
          FMPFSKPatternFragmentNode.resetToInitialPeripheralPosition()();
      }
      else
      {
        if ((v2[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_initialPeripheralPosition + 16] & 1) != 0)
          goto LABEL_52;
        if (*v39 != *v40 || v39[1] != v40[1])
          goto LABEL_52;
      }
    }
  }
}

uint64_t outlined init with take of (position: CGPoint, peripheralPosition: CGPoint)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (position: CGPoint, peripheralPosition: CGPoint)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWallTime();
  v24 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2, v3);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4, v7);
  v9 = (char *)&v24 - v8;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x24BDAC7A8](v10, v11);
  v12 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  objc_msgSend(v12, sel_setIdleTimerDisabled_, 1);

  if (*(_QWORD *)(v1 + 16))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  v13 = swift_allocObject();
  swift_weakInit();
  aBlock[4] = (uint64_t)partial apply for closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = (uint64_t)&block_descriptor_6;
  _Block_copy(aBlock);
  v25 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  v14 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  *(_QWORD *)(v1 + 16) = v14;
  swift_retain();
  swift_release();
  type metadata accessor for OS_dispatch_queue();
  v15 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchWallTime.now()();
  MEMORY[0x22075C560](v6, 180.0);
  v16 = *(void (**)(char *, uint64_t))(v24 + 8);
  v16(v6, v2);
  OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();

  v16(v9, v2);
  if (one-time initialization token for default != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.default);
  swift_retain_n();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v25 = v1;
    aBlock[0] = v21;
    *(_DWORD *)v20 = 136315138;
    type metadata accessor for FMFindingSleepPreventer();
    swift_retain();
    v22 = String.init<A>(describing:)();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v18, v19, "🧭 FMItemDetailContentViewController%s: disabling sleeping timer", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v21, -1, -1);
    MEMORY[0x22075D4E4](v20, -1, -1);
    swift_release();

  }
  else
  {

    swift_release_n();
    swift_release();
  }
}

void closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()()
{
  id v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    v0 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
    objc_msgSend(v0, sel_setIdleTimerDisabled_, 0);

    if (one-time initialization token for default != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.default);
    swift_retain_n();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      v5 = swift_slowAlloc();
      v8 = v5;
      *(_DWORD *)v4 = 136315138;
      type metadata accessor for FMFindingSleepPreventer();
      swift_retain();
      v6 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v2, v3, "🧭 FMItemDetailContentViewController%s: re-enabling sleeping timer", v4, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v5, -1, -1);
      MEMORY[0x22075D4E4](v4, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t FMFindingSleepPreventer.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMFindingSleepPreventer()
{
  return objc_opt_self();
}

uint64_t sub_21B0D0FD0()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()()
{
  closure #1 in FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

Swift::Void __swiftcall FMPFView.updateWithDeltaTime(_:)(Swift::Double a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t ObjectType;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate];
  if (MEMORY[0x22075D574](&v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate]))
  {
    v12 = *((_QWORD *)v11 + 1);
    ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t, Swift::Double))(v12 + 8))(v1, ObjectType, v12, a1);
    swift_unknownObjectRelease();
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = v1;
  *(Swift::Double *)(v14 + 24) = a1;
  v15 = (void *)objc_opt_self();
  v16 = v1;
  if (objc_msgSend(v15, sel_isMainThread))
  {
    closure #1 in FMPFView.updateWithDeltaTime(_:)((uint64_t)v16, a1);
    swift_release();
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    v21 = static OS_dispatch_queue.main.getter();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = partial apply for closure #1 in FMPFView.updateWithDeltaTime(_:);
    *(_QWORD *)(v17 + 24) = v14;
    aBlock[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    aBlock[5] = v17;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_7;
    v18 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v19 = (void *)v21;
    MEMORY[0x22075C7AC](0, v10, v6, v18);
    _Block_release(v18);
    swift_release();

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

void closure #1 in FMPFView.updateWithDeltaTime(_:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings;
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings);
  FLSpring.step(_:)(a2);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  v6 = *(_QWORD *)(v4 + 8);
  FLSpring.step(_:)(a2);
  *(_BYTE *)(v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  v7 = *(_QWORD *)(v4 + 16);
  FLSpring.step(_:)(a2);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring);
  FLSpring.step(_:)(a2);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  v9 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring);
  FLSpring.step(_:)(a2);
  *(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 0);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsStoppedOrbiting() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 1);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsWillConform() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 2);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsWillUnconform() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 3);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.patternIsFullyPeripheral() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 4);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.patternIsFullyFormed() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 5);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.pointeeDotIsFullyCentered() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 6);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.patternIsFullyFormedAndPointeeDotIsFullyCentered() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 7);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.pointeeAndNoonDotsDidConverge() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 8);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.pointeeAndNoonDotsDidDiverge() in conformance FMPFView(uint64_t a1, uint64_t a2)
{
  return protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(a1, a2, 9);
}

uint64_t protocol witness for FMPFSKPatternNodeDelegate.fragmentsStartedOrbiting() in conformance FMPFView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t ObjectType;

  v5 = v3 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate;
  result = MEMORY[0x22075D574](v3 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate);
  if (result)
  {
    v7 = *(_QWORD *)(v5 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 32))(v3, a3, ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_21B0D1460()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFView.updateWithDeltaTime(_:)()
{
  uint64_t v0;

  closure #1 in FMPFView.updateWithDeltaTime(_:)(*(_QWORD *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_21B0D1490()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

void destroy for FMPFSKPeripheralDotNodeStyle(uint64_t a1)
{

}

uint64_t initializeWithCopy for FMPFSKPeripheralDotNodeStyle(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  void *v4;
  id v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for FMPFSKPeripheralDotNodeStyle(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  v4 = (void *)a2[7];
  v5 = (void *)a1[7];
  a1[7] = v4;
  v6 = v4;

  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  return a1;
}

__n128 __swift_memcpy88_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for FMPFSKPeripheralDotNodeStyle(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMPFSKPeripheralDotNodeStyle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPeripheralDotNodeStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPeripheralDotNodeStyle()
{
  return &type metadata for FMPFSKPeripheralDotNodeStyle;
}

double FMPFFluidSpring.ftarget.didset()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double result;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget + 8))
    v1 = 1.79769313e308;
  else
    v1 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget);
  v2 = v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  v3 = v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o;
  v4 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  if (*(double *)(v2 + 280) + v4 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v1);
    *(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v4 = *(double *)(v3 + 40);
  }
  result = v1 - v4;
  *(double *)(v2 + 280) = result;
  *(double *)(v2 + 240) = result;
  *(_QWORD *)(v2 + 248) = 0;
  return result;
}

BOOL FMPFFluidSpring.isStable.getter()
{
  uint64_t v0;
  uint64_t v1;
  double *v2;
  double v3;

  v1 = v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
  swift_beginAccess();
  v2 = (double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v3 = *(double *)(v0 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  if (*(double *)(v1 + 280) + v3 == 1.79769313e308)
    return 1;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) == 1
    && FLCompoundSpring.isStable()()
    && vabdd_f64(*v2, v3) <= v2[6])
  {
    return fabs(v2[1]) <= v2[7];
  }
  return 0;
}

Swift::Void __swiftcall FMPFFluidSpring.resetImmediately(toValue:)(Swift::Double toValue)
{
  uint64_t v1;

  FLSpring.resetImmediately(toValue:)(toValue);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
}

id FMPFFluidSpring.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFFluidSpring();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFFluidSpring()
{
  return objc_opt_self();
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    MEMORY[0x22075D4F0](&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          MEMORY[0x22075D4F0](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  _BYTE *v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  _OWORD *v14;
  char *v15;
  int64x2_t v16;
  char *v17;
  _QWORD *v18;
  double v19;
  double *v20;
  double *v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double *v27;
  double *v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  objc_super v38;

  v10 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  v11 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *v13 = xmmword_21B0F94C0;
  v13[1] = xmmword_21B0F94D0;
  v14 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  *v14 = xmmword_21B0F94C0;
  v14[1] = xmmword_21B0F94D0;
  v15 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_QWORD *)v15 + 4) = 0x3FF0000000000000;
  *((_QWORD *)v15 + 9) = 0;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  v16 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((int64x2_t *)v15 + 5) = v16;
  *((_OWORD *)v15 + 6) = 0u;
  *((_QWORD *)v15 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v15 + 23) = 0;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((int64x2_t *)v15 + 12) = v16;
  *((_OWORD *)v15 + 13) = 0u;
  *((_QWORD *)v15 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *((_QWORD *)v15 + 37) = 0;
  *((int64x2_t *)v15 + 19) = v16;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  v17 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *((_QWORD *)v17 + 7) = 0;
  *((int64x2_t *)v17 + 4) = v16;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v38.receiver = v10;
  v38.super_class = (Class)type metadata accessor for FLSpring();
  v18 = objc_msgSendSuper2(&v38, sel_init);
  (*(void (**)(double))((*MEMORY[0x24BEE4EA0] & *v18) + 0x1B0))(0.0);
  if ((a6 & 1) != 0)
    v19 = 0.5;
  else
    v19 = *(double *)&a5;
  v20 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse);
  *v20 = v19;
  *((_BYTE *)v20 + 8) = 0;
  v21 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v22 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v23 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v24 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v25 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *(_OWORD *)v21 = xmmword_21B0F8F60;
  v21[2] = v19;
  v21[3] = 0.0;
  FLSpring.parameters.didset(v22, v23, v24, v25);
  if ((a2 & 1) != 0)
    v26 = 1.79769313e308;
  else
    v26 = *(double *)&a1;
  v27 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *v27 = v26;
  v28 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v29 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v30 = v27[35] + v29;
  v31 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v30, v26 + *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v32 = v26 + *v28;
  else
    v32 = v27[35] + v29;
  if (v30 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v32);
    *((_BYTE *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v29 = v28[5];
  }
  v33 = v32 - v29;
  v27[35] = v33;
  v27[30] = v33;
  v27[31] = 0.0;
  v34 = *(double *)&a3;
  if ((a4 & 1) != 0)
    v34 = 0.0;
  *(double *)((char *)v18 + v31) = v34;
  v27[44] = v34;
  v28[6] = v34;
  *(_QWORD *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v27[45] = 0.01;
  v28[7] = 0.01;
  return v18;
}

_QWORD *specialized static FMPFFluidSpring.lazySpringWith(initialValue:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BYTE *v6;
  char *v7;
  char *v8;
  _OWORD *v9;
  _OWORD *v10;
  char *v11;
  int64x2_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _OWORD *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  objc_super v33;

  v6 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v6[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  v7 = &v6[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v6[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *v9 = xmmword_21B0F94C0;
  v9[1] = xmmword_21B0F94D0;
  v10 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  *v10 = xmmword_21B0F94C0;
  v10[1] = xmmword_21B0F94D0;
  v11 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_QWORD *)v11 + 4) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  v12 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v11 + 7) = 0u;
  *((_OWORD *)v11 + 8) = 0u;
  *((int64x2_t *)v11 + 5) = v12;
  *((_OWORD *)v11 + 6) = 0u;
  *((_QWORD *)v11 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v11 + 23) = 0;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *((_OWORD *)v11 + 14) = 0u;
  *((_OWORD *)v11 + 15) = 0u;
  *((int64x2_t *)v11 + 12) = v12;
  *((_OWORD *)v11 + 13) = 0u;
  *((_QWORD *)v11 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v11 + 264) = 0u;
  *(_OWORD *)(v11 + 280) = 0u;
  *((_QWORD *)v11 + 37) = 0;
  *((int64x2_t *)v11 + 19) = v12;
  *((_OWORD *)v11 + 20) = 0u;
  *((_OWORD *)v11 + 21) = 0u;
  *((_OWORD *)v11 + 22) = 0u;
  v13 = &v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v13 + 24) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *((_QWORD *)v13 + 7) = 0;
  *((int64x2_t *)v13 + 4) = v12;
  *((_OWORD *)v13 + 5) = 0u;
  *((_OWORD *)v13 + 6) = 0u;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)&v6[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v33.receiver = v6;
  v33.super_class = (Class)type metadata accessor for FLSpring();
  v14 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(double))((*MEMORY[0x24BEE4EA0] & *v14) + 0x1B0))(0.0);
  v15 = (char *)v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse;
  *(_QWORD *)v15 = 0x3FF0000000000000;
  v15[8] = 0;
  v16 = (_OWORD *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v17 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v18 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v19 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v20 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *v16 = xmmword_21B0F8F60;
  v16[1] = xmmword_21B0F8F60;
  FLSpring.parameters.didset(v17, v18, v19, v20);
  if ((a2 & 1) != 0)
    v21 = 1.79769313e308;
  else
    v21 = *(double *)&a1;
  v22 = (double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *v22 = v21;
  v23 = (double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v24 = *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v25 = v22[35] + v24;
  v26 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v25, v21 + *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v27 = v21 + *v23;
  else
    v27 = v22[35] + v24;
  if (v25 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v27);
    *((_BYTE *)v14 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v24 = v23[5];
  }
  v28 = v27 - v24;
  v22[35] = v28;
  v22[30] = v28;
  v22[31] = 0.0;
  v29 = *(double *)&a3;
  if ((a4 & 1) != 0)
    v29 = 0.0;
  *(double *)((char *)v14 + v26) = v29;
  v22[44] = v29;
  v23[6] = v29;
  *(_QWORD *)((char *)v14 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v22[45] = 0.01;
  v23[7] = 0.01;
  return v14;
}

_QWORD *specialized static FMPFFluidSpring.randomSpringWith(initialValue:randomFactor:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, char a6)
{
  _BYTE *v10;
  char *v11;
  char *v12;
  _OWORD *v13;
  _OWORD *v14;
  char *v15;
  int64x2_t v16;
  char *v17;
  _QWORD *v18;
  double v19;
  unint64_t v20;
  double v21;
  double *v22;
  double *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double *v29;
  double *v30;
  double v31;
  double v32;
  uint64_t v33;
  double v34;
  double v35;
  double v36;
  objc_super v40;

  v10 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  v11 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v10[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *v13 = xmmword_21B0F94C0;
  v13[1] = xmmword_21B0F94D0;
  v14 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  *v14 = xmmword_21B0F94C0;
  v14[1] = xmmword_21B0F94D0;
  v15 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_QWORD *)v15 + 4) = 0x3FF0000000000000;
  *((_QWORD *)v15 + 9) = 0;
  *(_OWORD *)(v15 + 56) = 0u;
  *(_OWORD *)(v15 + 40) = 0u;
  v16 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((int64x2_t *)v15 + 5) = v16;
  *((_OWORD *)v15 + 6) = 0u;
  *((_QWORD *)v15 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v15 + 23) = 0;
  *(_OWORD *)(v15 + 168) = 0u;
  *(_OWORD *)(v15 + 152) = 0u;
  *((_OWORD *)v15 + 14) = 0u;
  *((_OWORD *)v15 + 15) = 0u;
  *((int64x2_t *)v15 + 12) = v16;
  *((_OWORD *)v15 + 13) = 0u;
  *((_QWORD *)v15 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v15 + 264) = 0u;
  *(_OWORD *)(v15 + 280) = 0u;
  *((_QWORD *)v15 + 37) = 0;
  *((int64x2_t *)v15 + 19) = v16;
  *((_OWORD *)v15 + 20) = 0u;
  *((_OWORD *)v15 + 21) = 0u;
  *((_OWORD *)v15 + 22) = 0u;
  v17 = &v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  *((_QWORD *)v17 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v17 + 24) = 0u;
  *(_OWORD *)(v17 + 40) = 0u;
  *((_QWORD *)v17 + 7) = 0;
  *((int64x2_t *)v17 + 4) = v16;
  *((_OWORD *)v17 + 5) = 0u;
  *((_OWORD *)v17 + 6) = 0u;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)&v10[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v40.receiver = v10;
  v40.super_class = (Class)type metadata accessor for FLSpring();
  v18 = objc_msgSendSuper2(&v40, sel_init);
  (*(void (**)(double))((*MEMORY[0x24BEE4EA0] & *v18) + 0x1B0))(0.0);
  if ((a4 & 1) != 0)
  {
    v20 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
    v19 = ((double)v20 * 1.11022302e-16 * 100.0 + 0.0) / 100.0;
    if (v20 == 0x20000000000000)
      v19 = 1.0;
  }
  else
  {
    v19 = *(double *)&a3;
  }
  v21 = v19 + 1.0 - v19 + 1.0 - v19;
  v22 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse);
  *v22 = v21;
  *((_BYTE *)v22 + 8) = 0;
  v23 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v24 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v25 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v26 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v27 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *(_OWORD *)v23 = xmmword_21B0F8F60;
  v23[2] = v21;
  v23[3] = 0.0;
  FLSpring.parameters.didset(v24, v25, v26, v27);
  if ((a2 & 1) != 0)
    v28 = 1.79769313e308;
  else
    v28 = *(double *)&a1;
  v29 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *v29 = v28;
  v30 = (double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v31 = *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v32 = v29[35] + v31;
  v33 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v32, v28 + *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v34 = v28 + *v30;
  else
    v34 = v29[35] + v31;
  if (v32 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v34);
    *((_BYTE *)v18 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v31 = v30[5];
  }
  v35 = v34 - v31;
  v29[35] = v35;
  v29[30] = v35;
  v29[31] = 0.0;
  v36 = *(double *)&a5;
  if ((a6 & 1) != 0)
    v36 = 0.0;
  *(double *)((char *)v18 + v33) = v36;
  v29[44] = v36;
  v30[6] = v36;
  *(_QWORD *)((char *)v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v29[45] = 0.01;
  v30[7] = 0.01;
  return v18;
}

_QWORD *specialized static FMPFFluidSpring.slowSpringWith(initialValue:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BYTE *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  _OWORD *v11;
  char *v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _OWORD *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  objc_super v33;

  v7 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  v8 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *v10 = xmmword_21B0F94C0;
  v10[1] = xmmword_21B0F94D0;
  v11 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  *v11 = xmmword_21B0F94C0;
  v11[1] = xmmword_21B0F94D0;
  v12 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_QWORD *)v12 + 4) = 0x3FF0000000000000;
  *((_QWORD *)v12 + 9) = 0;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((int64x2_t *)v12 + 5) = v13;
  *((_OWORD *)v12 + 6) = 0u;
  *((_QWORD *)v12 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v12 + 23) = 0;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((int64x2_t *)v12 + 12) = v13;
  *((_OWORD *)v12 + 13) = 0u;
  *((_QWORD *)v12 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *((_QWORD *)v12 + 37) = 0;
  *((int64x2_t *)v12 + 19) = v13;
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  v14 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_QWORD *)v14 + 7) = 0;
  *((int64x2_t *)v14 + 4) = v13;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v33.receiver = v7;
  v33.super_class = (Class)type metadata accessor for FLSpring();
  v15 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(double))((*MEMORY[0x24BEE4EA0] & *v15) + 0x1B0))(0.0);
  v16 = (char *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse;
  *(_QWORD *)v16 = 0x4000000000000000;
  v16[8] = 0;
  v17 = (_OWORD *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v18 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v19 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v20 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v21 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *v17 = xmmword_21B0F8F60;
  v17[1] = xmmword_21B0F94E0;
  FLSpring.parameters.didset(v18, v19, v20, v21);
  if ((a2 & 1) != 0)
    v22 = 1.79769313e308;
  else
    v22 = *(double *)&a1;
  v23 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *v23 = v22;
  v24 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v25 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v26 = v23[35] + v25;
  v27 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v26, v22 + *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v28 = v22 + *v24;
  else
    v28 = v23[35] + v25;
  if (v26 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v28);
    *((_BYTE *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v25 = v24[5];
  }
  v29 = v28 - v25;
  v23[35] = v29;
  v23[30] = v29;
  v23[31] = 0.0;
  v30 = *(double *)&a3;
  if ((a4 & 1) != 0)
    v30 = 0.0;
  *(double *)((char *)v15 + v27) = v30;
  v23[44] = v30;
  v24[6] = v30;
  *(_QWORD *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v23[45] = 0.01;
  v24[7] = 0.01;
  return v15;
}

_QWORD *specialized static FMPFFluidSpring.lethargicSpringWith(initialValue:stableValueThreshold:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BYTE *v7;
  char *v8;
  char *v9;
  _OWORD *v10;
  _OWORD *v11;
  char *v12;
  int64x2_t v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _OWORD *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double *v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  objc_super v33;

  v7 = objc_allocWithZone((Class)type metadata accessor for FMPFFluidSpring());
  v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready] = 0;
  v8 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v7[OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_offsetParameters];
  *v10 = xmmword_21B0F94C0;
  v10[1] = xmmword_21B0F94D0;
  v11 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters];
  *v11 = xmmword_21B0F94C0;
  v11[1] = xmmword_21B0F94D0;
  v12 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s];
  *(_OWORD *)v12 = 0u;
  *((_OWORD *)v12 + 1) = 0u;
  *((_QWORD *)v12 + 4) = 0x3FF0000000000000;
  *((_QWORD *)v12 + 9) = 0;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  v13 = vdupq_n_s64(0x4341C37937E08000uLL);
  *((_OWORD *)v12 + 7) = 0u;
  *((_OWORD *)v12 + 8) = 0u;
  *((int64x2_t *)v12 + 5) = v13;
  *((_OWORD *)v12 + 6) = 0u;
  *((_QWORD *)v12 + 18) = 0x3FF0000000000000;
  *((_QWORD *)v12 + 23) = 0;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *((_OWORD *)v12 + 14) = 0u;
  *((_OWORD *)v12 + 15) = 0u;
  *((int64x2_t *)v12 + 12) = v13;
  *((_OWORD *)v12 + 13) = 0u;
  *((_QWORD *)v12 + 32) = 0x3FF0000000000000;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *((_QWORD *)v12 + 37) = 0;
  *((int64x2_t *)v12 + 19) = v13;
  *((_OWORD *)v12 + 20) = 0u;
  *((_OWORD *)v12 + 21) = 0u;
  *((_OWORD *)v12 + 22) = 0u;
  v14 = &v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 0x3FF0000000000000;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *((_QWORD *)v14 + 7) = 0;
  *((int64x2_t *)v14 + 4) = v13;
  *((_OWORD *)v14 + 5) = 0u;
  *((_OWORD *)v14 + 6) = 0u;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__targetVelocity] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring__previousTarget] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold] = 0x3F50624DD2F1A9FCLL;
  *(_QWORD *)&v7[OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold] = 0x3F50624DD2F1A9FCLL;
  v33.receiver = v7;
  v33.super_class = (Class)type metadata accessor for FLSpring();
  v15 = objc_msgSendSuper2(&v33, sel_init);
  (*(void (**)(double))((*MEMORY[0x24BEE4EA0] & *v15) + 0x1B0))(0.0);
  v16 = (char *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_initialResponse;
  *(_QWORD *)v16 = 0x3FE3333333333333;
  v16[8] = 0;
  v17 = (_OWORD *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v18 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters);
  v19 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 8);
  v20 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 16);
  v21 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_parameters + 24);
  *v17 = xmmword_21B0F8F60;
  v17[1] = xmmword_21B0F94F0;
  FLSpring.parameters.didset(v18, v19, v20, v21);
  if ((a2 & 1) != 0)
    v22 = 1.79769313e308;
  else
    v22 = *(double *)&a1;
  v23 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
  swift_beginAccess();
  *v23 = v22;
  v24 = (double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
  v25 = *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
  v26 = v23[35] + v25;
  v27 = OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold;
  if (vabdd_f64(v26, v22 + *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
    v28 = v22 + *v24;
  else
    v28 = v23[35] + v25;
  if (v26 == 1.79769313e308)
  {
    FLSpring.resetImmediately(toValue:)(v28);
    *((_BYTE *)v15 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v25 = v24[5];
  }
  v29 = v28 - v25;
  v23[35] = v29;
  v23[30] = v29;
  v23[31] = 0.0;
  v30 = *(double *)&a3;
  if ((a4 & 1) != 0)
    v30 = 0.0;
  *(double *)((char *)v15 + v27) = v30;
  v23[44] = v30;
  v24[6] = v30;
  *(_QWORD *)((char *)v15 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableVelocityThreshold) = 0x3F847AE147AE147BLL;
  v23[45] = 0.01;
  v24[7] = 0.01;
  return v15;
}

id @objc NSUserDefaults.fmpfDebugMode.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0x646F4D6775626564, 0xE900000000000065);
}

void @objc NSUserDefaults.fmpfDebugMode.setter(void *a1, uint64_t a2, uint64_t a3)
{
  @objc NSUserDefaults.fmpfDebugMode.setter(a1, a2, a3, 0x646F4D6775626564, 0xE900000000000065);
}

id @objc NSUserDefaults.fmpfBTDebugMode.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0x4D67756265447462, 0xEB0000000065646FLL);
}

void @objc NSUserDefaults.fmpfBTDebugMode.setter(void *a1, uint64_t a2, uint64_t a3)
{
  @objc NSUserDefaults.fmpfDebugMode.setter(a1, a2, a3, 0x4D67756265447462, 0xEB0000000065646FLL);
}

id @objc NSUserDefaults.fmpfEcoMode.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0x65646F4D6F6365, 0xE700000000000000);
}

void @objc NSUserDefaults.fmpfEcoMode.setter(void *a1, uint64_t a2, uint64_t a3)
{
  @objc NSUserDefaults.fmpfDebugMode.setter(a1, a2, a3, 0x65646F4D6F6365, 0xE700000000000000);
}

id @objc NSUserDefaults.fmpfDebugModeWithoutBearing.getter(void *a1, uint64_t a2)
{
  return @objc NSUserDefaults.fmpfDebugMode.getter(a1, a2, 0xD000000000000017, 0x800000021B0FFF70);
}

id @objc NSUserDefaults.fmpfDebugMode.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  id v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  id v12;

  v7 = (void *)objc_opt_self();
  v8 = a1;
  v9 = objc_msgSend(v7, sel_sharedInstance);
  v10 = objc_msgSend(v9, sel_isInternalBuild);

  if (v10)
  {
    v11 = MEMORY[0x22075C584](a3, a4);
    v12 = objc_msgSend(v8, sel_BOOLForKey_, v11);

    v8 = (id)v11;
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void @objc NSUserDefaults.fmpfDebugModeWithoutBearing.setter(void *a1, uint64_t a2, uint64_t a3)
{
  @objc NSUserDefaults.fmpfDebugMode.setter(a1, a2, a3, 0xD000000000000017, 0x800000021B0FFF70);
}

void @objc NSUserDefaults.fmpfDebugMode.setter(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  id v9;
  id v10;
  Class isa;
  id v12;

  v8 = (void *)objc_opt_self();
  v9 = a1;
  v10 = objc_msgSend(v8, sel_sharedInstance);
  objc_msgSend(v10, sel_isInternalBuild);

  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v12 = (id)MEMORY[0x22075C584](a4, a5);
  objc_msgSend(v9, sel_setValue_forKey_, isa, v12);

}

float @objc NSUserDefaults.fmpfBlackBackdropSigma.getter()
{
  return 50.0;
}

float @objc NSUserDefaults.fmpfBlackBackdropAlpha.getter()
{
  return 0.7;
}

float @objc NSUserDefaults.fmpfGreenBackdropSigma.getter()
{
  return 70.0;
}

float @objc NSUserDefaults.fmpfGreenBackdropAlpha.getter()
{
  return 0.9;
}

float @objc NSUserDefaults.fmpfGreenBackdropHue.getter()
{
  return 0.31;
}

float @objc NSUserDefaults.fmpfGreenBackdropSaturation.getter()
{
  return 0.67;
}

float @objc NSUserDefaults.fmpfGreenBackdropValue.getter()
{
  return 0.57;
}

uint64_t @objc NSUserDefaults.fmpfArrowDotCount.getter(void *a1)
{
  id v1;
  uint64_t v2;

  v1 = a1;
  v2 = NSUserDefaults.fmpfArrowDotCount.getter();

  return v2;
}

uint64_t NSUserDefaults.fmpfArrowDotCount.getter()
{
  void *v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  _OWORD v8[2];

  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  v2 = objc_msgSend(v1, sel_isInternalBuild);

  if (!v2)
    return 150;
  v3 = (void *)MEMORY[0x22075C584](0x746F44776F727261, 0xED0000746E756F43);
  v4 = objc_msgSend(v0, sel_valueForKey_, v3);

  if (!v4)
  {
    memset(v8, 0, sizeof(v8));
    outlined destroy of Any?((uint64_t)v8);
    return 150;
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined destroy of Any?((uint64_t)v8);
  v5 = (void *)MEMORY[0x22075C584](0x746F44776F727261, 0xED0000746E756F43);
  v6 = objc_msgSend(v0, sel_integerForKey_, v5);

  return (uint64_t)v6;
}

void @objc NSUserDefaults.fmpfArrowDotCount.setter(void *a1)
{
  void *v2;
  id v3;
  id v4;
  Class isa;
  id v6;

  v2 = (void *)objc_opt_self();
  v3 = a1;
  v4 = objc_msgSend(v2, sel_sharedInstance);
  objc_msgSend(v4, sel_isInternalBuild);

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v6 = (id)MEMORY[0x22075C584](0x746F44776F727261, 0xED0000746E756F43);
  objc_msgSend(v3, sel_setValue_forKey_, isa, v6);

}

uint64_t FMPFSKPatternNode.readjustFragmentNodesComposedPositionForTape(_:)(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  int64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _BYTE *v35;
  char v36;
  float64x2_t v37;
  double v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  float64x2_t v44;
  __double2 v45;
  uint64_t v46;
  double v47;
  char v48;
  double v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  float64x2_t v53;
  float64_t v54;
  uint64_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  double v61;
  double v62;
  uint64_t v63;
  long double v64;
  long double v65;
  long double v66;
  long double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  _BYTE *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  double *v77;
  _QWORD *v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _BOOL4 v82;
  id v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  char v87;
  float64x2_t v88;
  double v89;
  char v90;
  uint64_t v91;
  double v92;
  double v93;
  double v94;
  double v95;
  float64x2_t v96;
  __double2 v97;
  uint64_t v98;
  double v99;
  char v100;
  double v101;
  uint64_t v102;
  char v103;
  char v104;
  uint64_t v105;
  float64x2_t v106;
  float64_t v107;
  uint64_t v108;
  float64x2_t v109;
  float64x2_t v110;
  uint64_t v111;
  char v112;
  long double v113;
  long double v114;
  long double v115;
  long double v116;
  double v117;
  double v118;
  double v119;
  double v120;
  uint64_t v122;
  uint64_t v123;
  Swift::String v124;
  id v125;
  uint64_t v126;
  void *v127;
  void *v128;
  Swift::String v129;
  Swift::String v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  BOOL v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  double v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  int64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  int64_t v164;
  uint64_t v165;
  int64_t v166;
  float64x2_t v167;
  float64x2_t v168;
  float64x2_t v169;
  float64x2_t v170;
  float64x2_t v171;
  float64x2_t v172;
  double v173;
  double v174;
  float64x2_t v175;
  uint64_t v176[3];

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
  {
    v4 = (uint64_t *)v2;
    if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 48) & 1) == 0
      && *(uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 40) >= 1)
    {
      v6 = result;
      v152 = v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
      v7 = (uint64_t *)(v2 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
      swift_beginAccess();
      v8 = *v7;
      v9 = MEMORY[0x24BEE4AF8];
      v176[0] = MEMORY[0x24BEE4AF8];
      if ((unint64_t)v8 >> 62)
      {
        if (v8 < 0)
          LODWORD(v2) = v8;
        else
          LODWORD(v2) = v8 & 0xFFFFFFF8;
        swift_bridgeObjectRetain();
        v10 = _CocoaArrayWrapper.endIndex.getter();
        *(_QWORD *)&v175.f64[0] = v6;
        if (v10)
          goto LABEL_6;
      }
      else
      {
        v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        *(_QWORD *)&v175.f64[0] = v6;
        if (v10)
        {
LABEL_6:
          if (v10 < 1)
          {
            __break(1u);
LABEL_260:
            __break(1u);
LABEL_261:
            __break(1u);
LABEL_262:
            __break(1u);
LABEL_263:
            __break(1u);
            swift_release();
            __break(1u);
LABEL_264:
            v15 = v8;
            v13 = v158;
            v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
            v3 = v164;
            v9 = v154;
            v80 = v162;
            if (!v8)
              goto LABEL_265;
LABEL_179:
            v81 = 0;
            a2 = 0;
            v17 = v9 & 0xC000000000000001;
            v155 = v9 + 32;
            v156 = v9 & 0xFFFFFFFFFFFFFF8;
            v166 = v3 + v80;
            v82 = __OFADD__(v3, v80);
            LODWORD(v163) = v82;
            v162 = 0xC01921FB54442D18;
            v160 = v15;
            v157 = v9 & 0xC000000000000001;
            while (1)
            {
              if (a2 == v15)
                goto LABEL_241;
              if (v17)
              {
                v83 = (id)MEMORY[0x22075C8C0](a2, v9);
              }
              else
              {
                if (a2 >= *(_QWORD *)(v156 + 16))
                  goto LABEL_246;
                v83 = *(id *)(v155 + 8 * a2);
              }
              v2 = (uint64_t)v83;
              if (!objc_msgSend(v83, sel_isHidden, v148, v149))
              {

                goto LABEL_184;
              }
              v84 = v163;
              if (v81 == v3)
              {
                v85 = v166;
              }
              else
              {
                v84 = 0;
                v85 = v81;
              }
              if ((v84 & 1) != 0)
                goto LABEL_247;
              if ((v85 & 0x8000000000000000) != 0)
                goto LABEL_242;
              if (v85 >= *(_QWORD *)(v165 + 16))
                goto LABEL_243;
              v17 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
              *(_OWORD *)v17 = *(_OWORD *)(v165 + 32 + 16 * v85);
              *(_BYTE *)(v17 + 16) = 0;
              v86 = v2 + *v4;
              if ((*(_BYTE *)(v86 + 16) & 1) != 0)
              {
                v87 = 1;
                v88 = *(float64x2_t *)v86;
              }
              else
              {
                v89 = *(double *)v86;
                if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
                {
                  v90 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v91 = swift_bridgeObjectRelease();
                  v9 = v154;
                  if ((v90 & 1) == 0)
                  {
                    v87 = *(_BYTE *)(v86 + 16);
                    v88 = *(float64x2_t *)v86;
                    goto LABEL_206;
                  }
                }
                else
                {
                  v91 = swift_bridgeObjectRelease();
                }
                v175.f64[0] = *(float64_t *)(v2
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
                v92 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
                specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v91, 0.0, 3.14159265);
                v94 = v93 * 0.25;
                v95 = 2.0;
                if (v89 > 0.0)
                  v95 = -2.0;
                v97 = __sincos_stret(v92 * (v95 * v94) + 1.57079633);
                v96.f64[0] = v97.__cosval;
                v87 = 0;
                v96.f64[1] = v97.__sinval;
                v88 = vmulq_n_f64(v96, v175.f64[0]);
              }
LABEL_206:
              v98 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
              *(float64x2_t *)v98 = v88;
              *(_BYTE *)(v98 + 16) = v87;
              v99 = 0.0;
              if ((*(_BYTE *)(v17 + 16) & 1) == 0 && (v87 & 1) == 0)
              {
                v170 = v88;
                v172 = *(float64x2_t *)v17;
                v102 = FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)v17);
                v104 = v103;
                v105 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
                *(_QWORD *)&v106.f64[0] = v102;
                v106.f64[1] = v107;
                v168 = v106;
                v101 = 0.0;
                v108 = 1;
                v109 = v172;
                while (1)
                {
                  v175 = v109;
                  v174 = (double)v108 * 0.0625;
                  v173 = 1.0 - v174;
                  if (*(_BYTE *)(v2 + v105))
                  {
                    LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    if ((v17 & 1) != 0)
                      goto LABEL_218;
                    if (!*(_BYTE *)(v2 + v105) || *(_BYTE *)(v2 + v105) != 1)
                    {
                      LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                      swift_bridgeObjectRelease();
                      if ((v17 & 1) == 0)
                        goto LABEL_210;
                      goto LABEL_218;
                    }
                  }
                  swift_bridgeObjectRelease();
LABEL_218:
                  if ((v104 & 1) == 0)
                  {
                    v109 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v168, v174), vmulq_n_f64(v172, v173)), v173), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v170, v174), vmulq_n_f64(v168, v173)), v174));
                    goto LABEL_211;
                  }
LABEL_210:
                  v109 = vaddq_f64(vmulq_n_f64(v170, v174), vmulq_n_f64(v172, v173));
LABEL_211:
                  v110 = vsubq_f64(v109, v175);
                  v101 = v101 + sqrt(vaddvq_f64(vmulq_f64(v110, v110)));
                  if (++v108 == 17)
                  {
                    v100 = 0;
                    v13 = v158;
                    v3 = v164;
                    v9 = v154;
                    goto LABEL_221;
                  }
                }
              }
              v100 = 1;
              v101 = 0.0;
LABEL_221:
              v111 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
              *(double *)v111 = v101;
              *(_BYTE *)(v111 + 8) = v100;
              if ((*(_BYTE *)(v98 + 16) & 1) != 0 || (*(_BYTE *)(v86 + 16) & 1) != 0)
              {
                v112 = 1;
                v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                v15 = v160;
              }
              else
              {
                v113 = *(double *)v86;
                v114 = *(double *)(v86 + 8);
                v116 = *(double *)v98;
                v115 = *(double *)(v98 + 8);
                v117 = hypot(*(long double *)v86, v114);
                v118 = atan2(v115, v116);
                v119 = atan2(v114, v113);
                v120 = v119 - v118;
                if (vabdd_f64(v119, v118) > 3.14159265)
                {
                  if (v118 >= 0.0 || v119 < 0.0)
                  {
                    if (v119 < 0.0 && v118 >= 0.0)
                      v120 = v120 + 6.28318531;
                  }
                  else
                  {
                    v120 = v120 + -6.28318531;
                  }
                }
                v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                v15 = v160;
                v112 = 0;
                v99 = fabs((v117 + v117) * v120);
              }
              v122 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
              *(double *)v122 = v99;
              *(_BYTE *)(v122 + 8) = v112;

              v81 = v85 + 1;
              if (__OFADD__(v85, 1))
                goto LABEL_244;
              v17 = v157;
LABEL_184:
              if (++a2 == v15)
                goto LABEL_265;
            }
          }
          v11 = 0;
          v3 = v8 & 0xC000000000000001;
          do
          {
            if (v3)
              v12 = (id)MEMORY[0x22075C8C0](v11, v8);
            else
              v12 = *(id *)(v8 + 8 * v11 + 32);
            if ((*((_BYTE *)v12 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0
              || *((_BYTE *)v12 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) == 1)
            {

            }
            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
              specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
              specialized ContiguousArray._endMutation()();
            }
            ++v11;
          }
          while (v10 != v11);
          swift_bridgeObjectRelease();
          v13 = v176[0];
          v9 = MEMORY[0x24BEE4AF8];
LABEL_22:
          LODWORD(v2) = v13 < 0 || (v13 & 0x4000000000000000) != 0;
          swift_bridgeObjectRetain();
          v14 = (_QWORD *)v13;
          v153 = v2;
          if ((v2 & 1) != 0)
          {
            v14 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
            swift_release();
          }
          v176[0] = (uint64_t)v14;
          v15 = 0;
          specialized MutableCollection<>.sort(by:)(v176, &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          v16 = v176[0];
          v176[0] = v9;
          LODWORD(v17) = v16 < 0 || (v16 & 0x4000000000000000) != 0;
          v163 = v16;
          if ((_DWORD)v17 == 1)
          {
            swift_retain();
            v8 = _CocoaArrayWrapper.endIndex.getter();
            v166 = v8;
            if (v8)
            {
LABEL_32:
              if (v8 >= 1)
              {
                v9 = 0;
                v3 = v163 & 0xC000000000000001;
                do
                {
                  if (v3)
                    v18 = (id)MEMORY[0x22075C8C0](v9, v163);
                  else
                    v18 = *(id *)(v163 + 8 * v9 + 32);
                  v19 = v18;
                  if ((objc_msgSend(v18, sel_isHidden) & 1) != 0)
                  {

                  }
                  else
                  {
                    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                    specialized ContiguousArray._endMutation()();
                  }
                  ++v9;
                }
                while (v166 != v9);
                swift_release();
                v20 = v176[0];
LABEL_44:
                LODWORD(v2) = v20 < 0 || (v20 & 0x4000000000000000) != 0;
                v161 = v20;
                if ((_DWORD)v2 == 1)
                  goto LABEL_248;
                if (!*(_QWORD *)(v20 + 16))
                {
LABEL_249:
                  v176[0] = 0;
                  v176[1] = 0xE000000000000000;
                  _StringGuts.grow(_:)(66);
                  v124._object = (void *)0x800000021B0FFFE0;
                  v124._countAndFlagsBits = 0x1000000000000016;
                  String.append(_:)(v124);
                  v125 = objc_msgSend(v4, sel_description);
                  v126 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                  v128 = v127;

                  v129._countAndFlagsBits = v126;
                  v129._object = v128;
                  String.append(_:)(v129);
                  swift_bridgeObjectRelease();
                  v130._object = (void *)0x800000021B100000;
                  v130._countAndFlagsBits = 0xD00000000000002ALL;
                  String.append(_:)(v130);
                  LODWORD(v149) = 0;
                  v148 = 377;
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_250:
                  __break(1u);
LABEL_251:
                  __break(1u);
LABEL_252:
                  __break(1u);
LABEL_253:
                  __break(1u);
LABEL_254:
                  __break(1u);
                  goto LABEL_255;
                }
LABEL_49:
                if ((_DWORD)v17)
                {
                  LODWORD(v17) = v163;
                  swift_bridgeObjectRetain();
                  v21 = _CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                  v20 = v161;
                }
                else
                {
                  v21 = *(_QWORD *)(v163 + 16);
                }
                v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                v22 = (double)v21;
                if ((a2 & 1) != 0)
                {
                  v23 = v22 * 0.5;
                  if (!(_DWORD)v2)
                    goto LABEL_54;
                }
                else
                {
                  v23 = (1.0 - v175.f64[0]) * v22;
                  if ((v2 & 1) == 0)
                  {
LABEL_54:
                    v24 = *(_QWORD *)(v20 + 16);
                    goto LABEL_57;
                  }
                }
                swift_bridgeObjectRetain();
                v25 = _CocoaArrayWrapper.endIndex.getter();
                swift_release();
                v24 = v25;
LABEL_57:
                if (v24 >= 0)
                  v26 = v24;
                else
                  v26 = v24 + 1;
                v162 = v24;
                if (v153)
                {
                  swift_bridgeObjectRetain();
                  v8 = _CocoaArrayWrapper.endIndex.getter();
                  swift_release();
                  v24 = v162;
                }
                else
                {
                  v8 = *(_QWORD *)(v13 + 16);
                }
                v3 = v8 - v24;
                if (__OFSUB__(v8, v24))
                  goto LABEL_250;
                v27 = v23 - (double)(v26 >> 1);
                if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
                  goto LABEL_251;
                if (v27 <= -9.22337204e18)
                  goto LABEL_252;
                if (v27 >= 9.22337204e18)
                  goto LABEL_253;
                if ((uint64_t)v27 < 0)
                {
                  if (v3 > 0)
                  {
                    v3 = 0;
                    if ((v153 & 1) != 0)
                      goto LABEL_71;
                    goto LABEL_74;
                  }
                }
                else if (v3 >= (uint64_t)v27)
                {
                  v3 = (uint64_t)v27;
                }
                if (v153)
                {
LABEL_71:
                  swift_retain();
                  v2 = _CocoaArrayWrapper.endIndex.getter();
LABEL_75:
                  v9 = MEMORY[0x24BEE4AF8];
                  if (v2)
                  {
                    if (v2 < 1)
                      goto LABEL_261;
                    v28 = 0;
                    v8 = v13 & 0xC000000000000001;
                    do
                    {
                      if (v8)
                        v29 = (char *)MEMORY[0x22075C8C0](v28, v13);
                      else
                        v29 = (char *)*(id *)(v13 + 8 * v28 + 32);
                      v175 = *(float64x2_t *)&v29[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
                      LODWORD(v17) = v29[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                                                        + 16];

                      if ((v17 & 1) == 0)
                      {
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                          v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v9 + 16) + 1, 1, (_QWORD *)v9);
                        v17 = *(_QWORD *)(v9 + 16);
                        v30 = *(_QWORD *)(v9 + 24);
                        a2 = v17 + 1;
                        if (v17 >= v30 >> 1)
                          v9 = (unint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v17 + 1, 1, (_QWORD *)v9);
                        *(_QWORD *)(v9 + 16) = a2;
                        *(float64x2_t *)(v9 + 16 * v17 + 32) = v175;
                      }
                      ++v28;
                    }
                    while (v2 != v28);
                  }
                  swift_release();
                  v176[0] = v9;
                  swift_bridgeObjectRetain();
                  specialized MutableCollection<>.sort(by:)(v176, specialized _ContiguousArrayBuffer._consumeAndCreateNew());
                  if (v15)
                    goto LABEL_308;
                  v151 = 0;
                  v158 = v13;
                  swift_bridgeObjectRelease();
                  v31 = v162;
                  if ((v162 & 0x8000000000000000) != 0)
                    goto LABEL_254;
                  v164 = v3;
                  v165 = v176[0];
                  v32 = v161;
                  if (v162)
                  {
                    a2 = 0;
                    v159 = v176[0] + 32;
                    v13 = 0x3FB0000000000000;
                    do
                    {
                      if (a2 == v31)
                        goto LABEL_237;
                      if (v3 < 0)
                        goto LABEL_238;
                      if (a2 + v3 >= *(_QWORD *)(v165 + 16))
                        goto LABEL_239;
                      v175 = *(float64x2_t *)(v159 + 16 * (a2 + v3));
                      if ((v161 & 0xC000000000000001) != 0)
                      {
                        v35 = (_BYTE *)MEMORY[0x22075C8C0](a2, v32);
                      }
                      else
                      {
                        if (a2 >= *(_QWORD *)(v32 + 16))
                          goto LABEL_245;
                        v35 = *(id *)(v161 + 32 + 8 * a2);
                      }
                      v2 = (uint64_t)v35;
                      v17 = (unint64_t)&v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition];
                      *(float64x2_t *)v17 = v175;
                      *(_BYTE *)(v17 + 16) = 0;
                      v15 = (unint64_t)&v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition];
                      if ((v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16] & 1) != 0)
                      {
                        v36 = 1;
                        v37 = *(float64x2_t *)v15;
                      }
                      else
                      {
                        v38 = *(double *)v15;
                        if (v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle])
                        {
                          if (v35[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle] == 1)
                            v8 = 0xE900000000000065;
                          else
                            v8 = 0xE600000000000000;
                          v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
                          v39 = swift_bridgeObjectRelease();
                          if ((v9 & 1) == 0)
                          {
                            v36 = *(_BYTE *)(v15 + 16);
                            v37 = *(float64x2_t *)v15;
                            goto LABEL_113;
                          }
                        }
                        else
                        {
                          v39 = swift_bridgeObjectRelease();
                        }
                        v175.f64[0] = *(float64_t *)(v2
                                                   + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
                        v40 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
                        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v39, 0.0, 3.14159265);
                        v42 = v41 * 0.25;
                        v43 = 2.0;
                        if (v38 > 0.0)
                          v43 = -2.0;
                        v45 = __sincos_stret(v40 * (v43 * v42) + 1.57079633);
                        v44.f64[0] = v45.__cosval;
                        v36 = 0;
                        v44.f64[1] = v45.__sinval;
                        v37 = vmulq_n_f64(v44, v175.f64[0]);
                      }
LABEL_113:
                      v46 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition;
                      *(float64x2_t *)v46 = v37;
                      *(_BYTE *)(v46 + 16) = v36;
                      v47 = 0.0;
                      if ((*(_BYTE *)(v17 + 16) & 1) == 0 && (v36 & 1) == 0)
                      {
                        v169 = v37;
                        v171 = *(float64x2_t *)v17;
                        v50 = FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*(double *)v17);
                        v9 = v51;
                        v52 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
                        *(_QWORD *)&v53.f64[0] = v50;
                        v53.f64[1] = v54;
                        v167 = v53;
                        v49 = 0.0;
                        v55 = 1;
                        v56 = v171;
                        while (1)
                        {
                          v175 = v56;
                          if (!*(_BYTE *)(v2 + v52))
                            break;
                          if (*(_BYTE *)(v2 + v52) == 1)
                            v8 = 0xE900000000000065;
                          else
                            v8 = 0xE600000000000000;
                          LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          if ((v17 & 1) != 0)
                            goto LABEL_128;
                          if (*(_BYTE *)(v2 + v52))
                          {
                            if (*(_BYTE *)(v2 + v52) == 1)
                              break;
                            v8 = 0xE600000000000000;
                          }
                          else
                          {
                            v8 = 0xEF637241646E4165;
                          }
                          LODWORD(v17) = _stringCompareWithSmolCheck(_:_:expecting:)();
                          swift_bridgeObjectRelease();
                          v59 = v169;
                          v60 = v175;
                          v62 = 1.0 - (double)v55 * 0.0625;
                          v61 = (double)v55 * 0.0625;
                          if ((v17 & 1) != 0 && (v9 & 1) == 0)
                          {
LABEL_133:
                            v57 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v167, v61), vmulq_n_f64(v171, v62)), v62), vmulq_n_f64(vaddq_f64(vmulq_n_f64(v59, v61), vmulq_n_f64(v167, v62)), v61));
                            goto LABEL_118;
                          }
LABEL_117:
                          v57 = vaddq_f64(vmulq_n_f64(v59, v61), vmulq_n_f64(v171, v62));
LABEL_118:
                          v58 = vsubq_f64(v57, v60);
                          v49 = v49 + sqrt(vaddvq_f64(vmulq_f64(v58, v58)));
                          ++v55;
                          v56 = v57;
                          if (v55 == 17)
                          {
                            v48 = 0;
                            v4 = &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
                            v3 = v164;
                            goto LABEL_135;
                          }
                        }
                        swift_bridgeObjectRelease();
LABEL_128:
                        v59 = v169;
                        v60 = v175;
                        v62 = 1.0 - (double)v55 * 0.0625;
                        v61 = (double)v55 * 0.0625;
                        if ((v9 & 1) == 0)
                          goto LABEL_133;
                        goto LABEL_117;
                      }
                      v48 = 1;
                      v49 = 0.0;
LABEL_135:
                      v63 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength;
                      *(double *)v63 = v49;
                      *(_BYTE *)(v63 + 8) = v48;
                      if ((*(_BYTE *)(v46 + 16) & 1) != 0 || (*(_BYTE *)(v15 + 16) & 1) != 0)
                      {
                        v33 = 1;
                      }
                      else
                      {
                        v64 = *(double *)v15;
                        v65 = *(double *)(v15 + 8);
                        v67 = *(double *)v46;
                        v66 = *(double *)(v46 + 8);
                        v68 = hypot(*(long double *)v15, v65);
                        v69 = atan2(v66, v67);
                        v70 = atan2(v65, v64);
                        v71 = v70 - v69;
                        if (vabdd_f64(v70, v69) > 3.14159265)
                        {
                          if (v69 >= 0.0 || v70 < 0.0)
                          {
                            if (v70 < 0.0 && v69 >= 0.0)
                              v71 = v71 + 6.28318531;
                          }
                          else
                          {
                            v71 = v71 + -6.28318531;
                          }
                        }
                        v33 = 0;
                        v47 = fabs((v68 + v68) * v71);
                      }
                      ++a2;
                      v34 = v2 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength;
                      *(double *)v34 = v47;
                      *(_BYTE *)(v34 + 8) = v33;

                      v32 = v161;
                      v31 = v162;
                    }
                    while (a2 != v162);
                  }
                  v9 = MEMORY[0x24BEE4AF8];
                  v176[0] = MEMORY[0x24BEE4AF8];
                  v13 = v166;
                  if (!v166)
                  {
                    a2 = v163;
                    goto LABEL_160;
                  }
                  a2 = v163;
                  v15 = v163 & 0xC000000000000001;
                  swift_retain();
                  v17 = 4;
                  do
                  {
                    v2 = v17 - 4;
                    if (v15)
                      v73 = (_BYTE *)MEMORY[0x22075C8C0](v17 - 4, v163);
                    else
                      v73 = *(id *)(v163 + 8 * v17);
                    v9 = (unint64_t)v73;
                    v74 = v17 - 3;
                    if (__OFADD__(v2, 1))
                    {
                      __break(1u);
LABEL_237:
                      __break(1u);
LABEL_238:
                      __break(1u);
LABEL_239:
                      __break(1u);
LABEL_240:
                      __break(1u);
LABEL_241:
                      __break(1u);
LABEL_242:
                      __break(1u);
LABEL_243:
                      __break(1u);
LABEL_244:
                      __break(1u);
LABEL_245:
                      __break(1u);
LABEL_246:
                      __break(1u);
LABEL_247:
                      __break(1u);
LABEL_248:
                      swift_retain();
                      v123 = _CocoaArrayWrapper.endIndex.getter();
                      swift_release();
                      v20 = v161;
                      if (!v123)
                        goto LABEL_249;
                      goto LABEL_49;
                    }
                    if ((v73[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16] & 1) != 0)
                      goto LABEL_262;
                    if (*(double *)&v73[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 8] < 0.0)
                    {
                      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                      v8 = *(_QWORD *)(v176[0] + 16);
                      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                      specialized ContiguousArray._endMutation()();
                    }
                    else
                    {

                    }
                    ++v17;
                  }
                  while (v74 != v166);
                  swift_release();
                  v9 = v176[0];
LABEL_160:
                  swift_bridgeObjectRetain();
                  if ((v9 & 0x8000000000000000) == 0)
                  {
                    v8 = v9;
                    if ((v9 & 0x4000000000000000) == 0)
                    {
LABEL_162:
                      v176[0] = v8;
                      specialized MutableCollection<>.shuffle<A>(using:)();
                      swift_release();
                      v15 = v176[0];
                      v176[0] = MEMORY[0x24BEE4AF8];
                      v13 = v158;
                      if (v166)
                      {
                        v17 = a2 & 0xC000000000000001;
                        v75 = 4;
                        do
                        {
                          v2 = v75 - 4;
                          if (v17)
                            v76 = (char *)MEMORY[0x22075C8C0](v75 - 4, a2);
                          else
                            v76 = (char *)*(id *)(a2 + 8 * v75);
                          v9 = (unint64_t)v76;
                          v3 = v75 - 3;
                          if (__OFADD__(v2, 1))
                            goto LABEL_240;
                          v77 = (double *)&v76[*v4];
                          if (((_BYTE)v77[2] & 1) != 0)
                            goto LABEL_263;
                          if (v77[1] >= 0.0)
                          {
                            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                            v8 = *(_QWORD *)(v176[0] + 16);
                            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
                            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                            specialized ContiguousArray._endMutation()();
                          }
                          else
                          {

                          }
                          ++v75;
                          v139 = v3 == v166;
                          v3 = v164;
                        }
                        while (!v139);
                        swift_release();
                        v9 = v176[0];
                      }
                      else
                      {
                        swift_release();
                        v9 = MEMORY[0x24BEE4AF8];
                      }
                      swift_bridgeObjectRetain();
                      if ((v9 & 0x8000000000000000) != 0)
                        goto LABEL_258;
                      v78 = (_QWORD *)v9;
                      if ((v9 & 0x4000000000000000) != 0)
                        goto LABEL_258;
                      while (1)
                      {
                        v176[0] = (uint64_t)v78;
                        v2 = (uint64_t)v176;
                        specialized MutableCollection<>.shuffle<A>(using:)();
                        swift_release();
                        v79 = v176[0];
                        v176[0] = v15;
                        specialized Array.append<A>(contentsOf:)(v79, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
                        v9 = v176[0];
                        v154 = v176[0];
                        v150 = (unint64_t)v176[0] >> 62;
                        if (!((unint64_t)v176[0] >> 62))
                          break;
                        swift_bridgeObjectRetain();
                        v8 = _CocoaArrayWrapper.endIndex.getter();
                        swift_bridgeObjectRelease();
                        if ((v8 & 0x8000000000000000) == 0)
                          goto LABEL_264;
                        __break(1u);
LABEL_258:
                        v78 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
                        swift_release();
                      }
                      v15 = *(_QWORD *)((v176[0] & 0xFFFFFFFFFFFFF8) + 0x10);
                      v80 = v162;
                      if (v15)
                        goto LABEL_179;
LABEL_265:
                      swift_release();
                      swift_release();
                      if (*(_BYTE *)(v152 + 16) == 1)
                      {
                        swift_bridgeObjectRelease();
                        v131 = v151;
                        goto LABEL_292;
                      }
                      v132 = *(_QWORD *)(v152 + 8);
                      v131 = v151;
                      if (v150)
                      {
                        v134 = swift_bridgeObjectRetain();
                        v133 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v134);
                        swift_bridgeObjectRelease();
                      }
                      else
                      {
                        v133 = v154 & 0xFFFFFFFFFFFFFF8;
                        swift_bridgeObjectRetain();
                      }
                      v176[0] = v133;
                      specialized MutableCollection<>.sort(by:)(v176, &OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
                      if (v151)
                        goto LABEL_308;
                      swift_bridgeObjectRelease();
                      v135 = v176[0];
                      if (v176[0] < 0 || (v176[0] & 0x4000000000000000) != 0)
                        goto LABEL_286;
                      v136 = *(_QWORD *)(v176[0] + 16);
                      if (v136)
                      {
                        while (1)
                        {
                          v137 = v132 + 1;
                          if (__OFADD__(v132, 1))
                            goto LABEL_288;
                          if (v132 != -1)
                            break;
LABEL_289:
                          __break(1u);
LABEL_290:
                          v13 = v158;
                          if (!v136)
                            goto LABEL_291;
                        }
                        v132 = 0;
                        while (1)
                        {
                          v139 = v132 == 0x8000000000000000 && v137 == -1;
                          if (v139)
                            break;
                          if ((v135 & 0xC000000000000001) != 0)
                            v138 = (_BYTE *)MEMORY[0x22075C8C0](v132, v135);
                          else
                            v138 = *(id *)(v135 + 8 * v132 + 32);
                          v138[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_useAlternateScaling] = v132 % v137 == 0;

                          ++v132;
                          v13 = v158;
                          if (v136 == v132)
                            goto LABEL_291;
                        }
                        __break(1u);
LABEL_286:
                        swift_bridgeObjectRetain();
                        v136 = _CocoaArrayWrapper.endIndex.getter();
                        swift_release();
                        if ((v136 & 0x8000000000000000) == 0)
                          goto LABEL_290;
                        __break(1u);
LABEL_288:
                        __break(1u);
                        goto LABEL_289;
                      }
LABEL_291:
                      swift_release();
LABEL_292:
                      swift_bridgeObjectRetain();
                      v140 = (_QWORD *)v13;
                      if (v153)
                      {
                        v140 = specialized _copyCollectionToContiguousArray<A>(_:)(v13);
                        swift_release();
                      }
                      v176[0] = (uint64_t)v140;
                      specialized MutableCollection<>.sort(by:)(v176);
                      if (v131)
                        goto LABEL_308;
                      swift_release();
                      v141 = v176[0];
                      if (v176[0] < 0 || (v176[0] & 0x4000000000000000) != 0)
                      {
                        swift_bridgeObjectRetain();
                        v142 = _CocoaArrayWrapper.endIndex.getter();
                        swift_release();
                        swift_retain();
                        v143 = _CocoaArrayWrapper.endIndex.getter();
                        if (v143)
                          goto LABEL_298;
                      }
                      else
                      {
                        v142 = *(_QWORD *)(v176[0] + 16);
                        swift_retain();
                        v143 = v142;
                        if (v142)
                        {
LABEL_298:
                          if (v143 >= 1)
                          {
                            v144 = 0;
                            v145 = 0.0;
                            do
                            {
                              if ((v141 & 0xC000000000000001) != 0)
                                v146 = (char *)MEMORY[0x22075C8C0](v144, v141);
                              else
                                v146 = (char *)*(id *)(v141 + 8 * v144 + 32);
                              ++v144;
                              v147 = &v146[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformationTimingFunction];
                              *(_QWORD *)v147 = 0;
                              *(float64x2_t *)(v147 + 8) = vmulq_n_f64((float64x2_t)xmmword_21B0F9520, 1.0 - v145);
                              *((_QWORD *)v147 + 3) = 0x3FF0000000000000;
                              v147[32] = 0;

                              v145 = 1.0 / (double)v142 + v145;
                            }
                            while (v143 != v144);
                            return swift_release_n();
                          }
                          __break(1u);
LABEL_308:
                          result = swift_release();
                          __break(1u);
                          return result;
                        }
                      }
                      return swift_release_n();
                    }
                  }
LABEL_255:
                  v8 = (uint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v9);
                  swift_release();
                  goto LABEL_162;
                }
LABEL_74:
                v2 = *(_QWORD *)(v13 + 16);
                swift_retain();
                goto LABEL_75;
              }
              goto LABEL_260;
            }
          }
          else
          {
            v8 = *(_QWORD *)(v16 + 16);
            swift_retain();
            v166 = v8;
            if (v8)
              goto LABEL_32;
          }
          swift_release();
          v20 = MEMORY[0x24BEE4AF8];
          goto LABEL_44;
        }
      }
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x24BEE4AF8];
      goto LABEL_22;
    }
  }
  return result;
}

Swift::Void __swiftcall FMPFSKPatternNode.readjustFragmentNodesPeripheralPositionForTape()()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v3;
  char v4;
  double v5;
  double v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  unint64_t v12;
  char **v13;
  double v14;
  double v15;
  char v16;
  double *v17;
  double v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  __double2 v30;
  double v31;
  double *v32;
  char v33;
  uint64_t v34;
  double v35;
  double v36;
  char v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  __double2 v43;
  char *v44;
  double v45;
  char v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  char v51;
  char v52;
  uint64_t v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  double v62;
  char v63;
  char v64;
  double *v65;
  long double v66;
  long double v67;
  long double v68;
  long double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  double v86;
  unint64_t v87;

  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode), sel_position);
  *(double *)&v2 = COERCE_DOUBLE(FMPFSKPatternNode.visibleTrackOffsets(center:)(-v1));
  if ((v4 & 1) == 0)
  {
    v5 = *(double *)&v2;
    v6 = v3;
    v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
    swift_beginAccess();
    v8 = *v7;
    if ((unint64_t)*v7 >> 62)
      goto LABEL_58;
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v9)
    {
      while (v9 >= 1)
      {
        v10 = 0;
        v11 = (v5 + v6) * 0.5;
        v6 = 4.45014772e-308;
        v12 = v8 & 0xC000000000000001;
        v82 = v0 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style;
        v81 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
        v83 = v8 + 32;
        v13 = &selRef_initWithAnimationType_visualStyle_;
        v14 = -0.5;
        v15 = 0.5;
        v75 = 6.28318531;
        v80 = v8 & 0xC000000000000001;
        v78 = v8;
        v79 = v0;
        v77 = v9;
        v76 = v11;
        while (1)
        {
          if (v12)
            v18 = COERCE_DOUBLE(MEMORY[0x22075C8C0](v10, v8));
          else
            *(_QWORD *)&v18 = *(id *)(v83 + 8 * v10);
          v5 = v18;
          if ((objc_msgSend(*(id *)&v18, v13[104], *(_QWORD *)&v75) & 1) == 0)
          {
            v19 = (double *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
            if ((*(_BYTE *)(*(_QWORD *)&v5
                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition
                           + 16) & 1) == 0)
              break;
          }
LABEL_8:

          if (++v10 == v9)
            goto LABEL_59;
        }
        if (v11 <= v19[1])
        {
          do
          {
            v87 = 0;
            v20 = MEMORY[0x22075D4F0](&v87, 8);
          }
          while (0x20000000000001 * v87 < 0x1FFFFFFFFFF801);
          v24 = (v87 * (unsigned __int128)0x20000000000001uLL) >> 64;
          v23 = 3.14159265;
          if (v24 != 0x20000000000000)
            v23 = (double)v24 * 1.11022302e-16 * 3.14159265 + 0.0;
        }
        else
        {
          do
          {
            v87 = 0;
            v20 = MEMORY[0x22075D4F0](&v87, 8);
          }
          while (0x20000000000001 * v87 < 0x1FFFFFFFFFF801);
          v21 = (v87 * (unsigned __int128)0x20000000000001uLL) >> 64;
          v22 = (double)v21 * 1.11022302e-16 * 3.14159265 + 2.22044605e-16;
          if (v21 == 0x20000000000000)
            v22 = 3.14159265;
          v23 = -v22;
        }
        v25 = *(double *)(v82 + 72);
        v26 = v25 * v14;
        v27 = v25 * v15;
        if (v26 <= v27)
        {
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v20, v26, v27);
          v29 = *(double *)(v0 + v81) * (1.0 - v28);
          v30 = __sincos_stret(v23);
          v31 = v30.__cosval * v29;
          v32 = (double *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          *v32 = v30.__cosval * v29;
          v32[1] = v30.__sinval * v29;
          *((_BYTE *)v32 + 16) = 0;
          if (*(_BYTE *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle))
          {
            v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v34 = swift_bridgeObjectRelease();
            v6 = 4.45014772e-308;
            if ((v33 & 1) == 0)
            {
              v35 = *v32;
              v36 = v32[1];
              v37 = *((_BYTE *)v32 + 16);
              goto LABEL_30;
            }
          }
          else
          {
            v34 = swift_bridgeObjectRelease();
          }
          v38 = *(double *)(*(_QWORD *)&v5
                          + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_innerPeripheralDiskRadius);
          v39 = *(double *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_style);
          specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v34, 0.0, 3.14159265);
          v41 = v40 * 0.25;
          v42 = 2.0;
          if (v31 > 0.0)
            v42 = -2.0;
          v43 = __sincos_stret(v39 * (v42 * v41) + 1.57079633);
          v37 = 0;
          v35 = v38 * v43.__cosval;
          v36 = v38 * v43.__sinval;
LABEL_30:
          v44 = (char *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_intermediatePosition);
          *(double *)v44 = v35;
          *((double *)v44 + 1) = v36;
          v44[16] = v37;
          v45 = 0.0;
          if (((_BYTE)v19[2] & 1) != 0 || (v37 & 1) != 0)
          {
            v46 = 1;
            v47 = 0.0;
LABEL_45:
            v65 = (double *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_curveLength);
            *v65 = v47;
            *((_BYTE *)v65 + 8) = v46;
            if ((v44[16] & 1) != 0 || ((_BYTE)v32[2] & 1) != 0)
            {
              v16 = 1;
              v12 = v80;
              v13 = &selRef_initWithAnimationType_visualStyle_;
            }
            else
            {
              v66 = *v32;
              v67 = v32[1];
              v69 = *(double *)v44;
              v68 = *((double *)v44 + 1);
              v70 = hypot(*v32, v67);
              v71 = atan2(v68, v69);
              v72 = atan2(v67, v66);
              v73 = v72 - v71;
              if (vabdd_f64(v72, v71) > 3.14159265)
              {
                if (v71 >= 0.0 || v72 < 0.0)
                {
                  if (v72 < 0.0 && v71 >= 0.0)
                    v73 = v73 + v75;
                }
                else
                {
                  v73 = v73 + -6.28318531;
                }
              }
              v12 = v80;
              v13 = &selRef_initWithAnimationType_visualStyle_;
              v14 = -0.5;
              v15 = 0.5;
              v16 = 0;
              v45 = fabs((v70 + v70) * v73);
            }
            v17 = (double *)(*(_QWORD *)&v5 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_arcLength);
            *v17 = v45;
            *((_BYTE *)v17 + 8) = v16;
            goto LABEL_8;
          }
          v85 = v36;
          v86 = v35;
          v49 = *v19;
          v48 = v19[1];
          *(double *)&v50 = COERCE_DOUBLE(FMPFSKPatternFragmentNode.controlPoint(with:trackOffset:)(*v19));
          v52 = v51;
          v53 = OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_travelingStyle;
          v84 = *(double *)&v50;
          v55 = v54;
          v47 = 0.0;
          v56 = v48;
          v57 = v49;
          v58 = 1;
          while (2)
          {
            v61 = (double)v58 * 0.0625;
            v62 = 1.0 - v61;
            if (!*(_BYTE *)(*(_QWORD *)&v5 + v53))
            {
LABEL_40:
              swift_bridgeObjectRelease();
              goto LABEL_42;
            }
            v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v63 & 1) != 0)
              goto LABEL_42;
            if (*(_BYTE *)(*(_QWORD *)&v5 + v53) && *(_BYTE *)(*(_QWORD *)&v5 + v53) == 1)
              goto LABEL_40;
            v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v64 & 1) != 0)
            {
LABEL_42:
              if ((v52 & 1) == 0)
              {
                v59 = v62 * (v61 * v84 + v57 * v62) + v61 * (v86 * v61 + v62 * v84);
                v60 = v62 * (v61 * v55 + v56 * v62) + v61 * (v85 * v61 + v62 * v55);
LABEL_35:
                v47 = v47 + sqrt((v60 - v48) * (v60 - v48) + (v59 - v49) * (v59 - v49));
                ++v58;
                v48 = v60;
                v49 = v59;
                if (v58 == 17)
                {
                  v46 = 0;
                  v8 = v78;
                  v0 = v79;
                  v9 = v77;
                  v11 = v76;
                  v6 = 4.45014772e-308;
                  v14 = -0.5;
                  v15 = 0.5;
                  v45 = 0.0;
                  goto LABEL_45;
                }
                continue;
              }
            }
            break;
          }
          v59 = v86 * v61 + v57 * v62;
          v60 = v85 * v61 + v56 * v62;
          goto LABEL_35;
        }
        __break(1u);
LABEL_58:
        swift_bridgeObjectRetain_n();
        v9 = _CocoaArrayWrapper.endIndex.getter();
        if (!v9)
          goto LABEL_59;
      }
      __break(1u);
    }
    else
    {
LABEL_59:
      swift_bridgeObjectRelease_n();
    }
  }
}

void FMPFSKPatternNode.setupArrowChildNodes(conformationFactor:)(void *a1, char a2)
{
  _BYTE *v2;
  _BYTE *v3;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  double v20;
  char *v21;
  double v22;
  double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  void *v33;
  id v34;
  id v35;
  void *ObjCClassFromMetadata;
  id v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  id v42;
  id v43;
  id v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  void *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  id v67;
  double v68;
  double v69;
  double *v70;
  double v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  id v83;
  void *v84;
  id v85;
  id v86;
  unint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  objc_class *v101;
  char *v102;
  void *v103;
  id v104;
  void *v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void *v111;
  uint64_t v112;
  id v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  void *v119;
  BOOL v120;
  uint64_t v121;
  void *v122;
  id v123;
  id v124;
  char *v125;
  id v126;
  id v127;
  void *v128;
  void *v129;
  void *v130;
  id v131;
  void *v132;
  void *v133;
  void *v134;
  id v135;
  id v136;
  UIBezierPath v137;
  void *v138;
  void *v139;
  void *v140;
  void *v141;
  void *v142;
  void *v143;
  unint64_t v144;
  double *v145;
  uint64_t v146;
  id v147;
  double v148;
  id v149;
  _BYTE *v150;
  char *v151;
  uint64_t v152;
  char *v153;
  id v154;
  id v155;
  char *v156;
  char v157;
  id v158;
  double v160;
  unsigned int v161;
  double v162;
  uint64_t v163;
  char *v164;
  void *v165;
  unint64_t v166;
  _QWORD v167[7];

  v3 = v2;
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_standardUserDefaults);
  v161 = objc_msgSend(v6, sel_fmpfDebugMode);

  if ((a2 & 1) != 0)
  {
    a1 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
    v157 = v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8];
  }
  else
  {
    v157 = 0;
  }
  v7 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode];
  v8 = objc_msgSend(v7, sel_children);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v155 = *(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode];
  v10 = objc_msgSend(v155, sel_children);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v167[3] = v9;
  specialized Array.append<A>(contentsOf:)(v11, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
  v12 = v9;
  v13 = (unint64_t *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes];
  swift_beginAccess();
  v14 = *v13;
  if (*v13 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    v15 = v14;
  }
  swift_bridgeObjectRelease();
  v167[0] = v12;
  specialized Array.append<A>(contentsOf:)(v15, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    if (!v16)
      goto LABEL_16;
  }
  else
  {
    v16 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v16)
      goto LABEL_16;
  }
  if (v16 < 1)
  {
    __break(1u);
    goto LABEL_108;
  }
  for (i = 0; i != v16; ++i)
  {
    if ((v12 & 0xC000000000000001) != 0)
      v18 = (id)MEMORY[0x22075C8C0](i, v12);
    else
      v18 = *(id *)(v12 + 8 * i + 32);
    v19 = v18;
    objc_msgSend(v18, sel_removeFromParent);

  }
LABEL_16:
  v165 = v5;
  swift_bridgeObjectRelease_n();
  *v13 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v20 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize];
  if (*(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize + 8] < v20)
    v20 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_sceneSize + 8];
  v21 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  v22 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  if (v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style + 8])
    v22 = 1.0;
  v23 = v20 * v22;
  v24 = *((double *)v21 + 2);
  v25 = *((double *)v21 + 3);
  v26 = v20 * v22 - v24;
  v27 = v24 + 2.22044605e-16;
  v153 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_style];
  if (v24 + 2.22044605e-16 <= v20 * v22 * *((double *)v21 + 4))
    v27 = v23 * *((double *)v21 + 4);
  v148 = *((double *)v21 + 2);
  v162 = v27 * 0.5;
  v28 = v27 * 0.5 + v24 * -0.5;
  v29 = 0.0 - v28;
  v160 = v28 / tan(v25);
  v30 = v26 * 0.5 - v160;
  v31 = v28 + 0.0;
  v32 = cos(v25);
  objc_msgSend(v155, sel_addChild_, v7);
  v33 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode];
  objc_msgSend(v7, sel_addChild_, v33);
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
  v150 = v3;
  objc_msgSend(v34, sel_moveToPoint_, 0.0, v26 * -0.5);
  objc_msgSend(v34, sel_addLineToPoint_, 0.0, v26 * 0.5);
  objc_msgSend(v34, sel_closePath);
  type metadata accessor for FMPFSKShapeNode();
  v143 = v34;
  v35 = objc_msgSend(v34, sel_CGPath);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v37 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v35);

  v38 = (void *)objc_opt_self();
  v39 = v37;
  v40 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v39, sel_setStrokeColor_, v40);

  objc_msgSend(v39, sel_setLineCap_, 1);
  v41 = one-time initialization token for default;
  v42 = v39;
  if (v41 != -1)
    swift_once();
  objc_msgSend(v42, sel_setAlpha_, *(double *)&qword_25513FD68);

  v142 = v42;
  objc_msgSend(v33, sel_addChild_, v42);
  v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
  objc_msgSend(v43, (SEL)&selRef_stopAtTime_error_ + 5, v29, v30);
  objc_msgSend(v43, sel_addLineToPoint_, 0.0, v26 * 0.5);
  objc_msgSend(v43, sel_closePath);
  v141 = v43;
  v44 = objc_msgSend(v43, sel_CGPath);
  v45 = v33;
  v46 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v44);

  v47 = v46;
  v48 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v47, sel_setStrokeColor_, v48);

  objc_msgSend(v47, sel_setLineCap_, 1);
  objc_msgSend(v47, sel_setAlpha_, *(double *)&qword_25513FD68);
  v140 = v47;
  objc_msgSend(v45, sel_addChild_, v47);
  v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
  objc_msgSend(v49, sel_moveToPoint_, v31, v30);
  objc_msgSend(v49, sel_addLineToPoint_, 0.0, v26 * 0.5);
  objc_msgSend(v49, sel_closePath);
  v139 = v49;
  v50 = objc_msgSend(v49, sel_CGPath);
  v51 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v50);

  v52 = v51;
  v53 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v52, sel_setStrokeColor_, v53);

  objc_msgSend(v52, sel_setLineCap_, 1);
  objc_msgSend(v52, sel_setAlpha_, *(double *)&qword_25513FD68);
  v147 = v45;
  v138 = v52;
  objc_msgSend(v45, sel_addChild_, v52);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  v137.super.isa = UIBezierPath.init(fmpfRectangleCentered:size:)((CGPoint)0, (CGSize)__PAIR128__(*(unint64_t *)&v23, v162 + v162)).super.isa;
  v54 = -[objc_class CGPath](v137.super.isa, sel_CGPath);
  v55 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v54);

  v56 = v55;
  v57 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v56, sel_setStrokeColor_, v57);

  objc_msgSend(v56, sel_setAlpha_, *(double *)&qword_25513FD68);
  objc_msgSend(v7, sel_addChild_, v56);
  v58 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode];
  v146 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode;
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode] = v56;
  v135 = v56;

  v163 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
  v136 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, 0.0, 0.0, *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius], -3.14159265, 3.14159265);
  v59 = objc_msgSend(v136, sel_CGPath);
  v60 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v59);

  v61 = v60;
  v149 = v38;
  v62 = objc_msgSend(v38, sel_whiteColor);
  objc_msgSend(v61, sel_setStrokeColor_, v62);

  objc_msgSend(v61, sel_setAlpha_, *(double *)&qword_25513FD68);
  objc_msgSend(v61, sel_setZPosition_, -4.4408921e-16);
  objc_msgSend(v7, sel_addChild_, v61);
  v63 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode;
  v64 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode];
  *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode] = v61;
  v65 = (unint64_t)v61;

  v66 = objc_msgSend(v165, sel_standardUserDefaults);
  v67 = objc_msgSend(v66, sel_fmpfArrowDotCount);

  if (__OFSUB__(v67, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  v68 = fmax((v26 + v160 / v32 + v160 / v32) / (double)((unint64_t)v67 - 1), 2.22044605e-16);
  v69 = round(v160 / v32 / v68);
  if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  if (v69 <= -9.22337204e18)
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  if (v69 >= 9.22337204e18)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  v70 = (double *)((uint64_t)v69 + 1);
  if (__OFADD__((uint64_t)v69, 1))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  v71 = round(v26 / v68);
  if ((~*(_QWORD *)&v71 & 0x7FF0000000000000) == 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  if (v71 <= -9.22337204e18)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v71 >= 9.22337204e18)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  if (__OFADD__((uint64_t)v71, 1))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  v144 = v63;
  v145 = (double *)((uint64_t)v71 + 1);
  v152 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_explodedDiskRadius;
  v151 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
  v67 = specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)(v70, 1uLL, (void *)static FMPFSKPatternNodeCommonStyle.default, *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor], v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor + 8], (uint64_t)a1, v157, 0, v29, v30, 0.0, v26 * 0.5, *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_explodedDiskRadius], *(double *)&v3[v163]);
  v63 = v72;
  v160 = *(double *)&OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode], sel_addChild_, v67);
  v134 = (void *)v65;
  v64 = (uint64_t)v70;
  if (!(v63 >> 62))
  {
    v73 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v166 = v63;
    if (!v73)
      goto LABEL_54;
    goto LABEL_35;
  }
LABEL_53:
  swift_bridgeObjectRetain();
  v73 = _CocoaArrayWrapper.endIndex.getter();
  v166 = v63;
  if (!v73)
    goto LABEL_54;
LABEL_35:
  if (v73 < 1)
  {
LABEL_108:
    __break(1u);
    goto LABEL_109;
  }
  v74 = 0;
  v65 = v63 & 0xC000000000000001;
  do
  {
    if (v65)
      v75 = (id)MEMORY[0x22075C8C0](v74, v63);
    else
      v75 = *(id *)(v63 + 8 * v74 + 32);
    v76 = v75;
    swift_beginAccess();
    v77 = v76;
    MEMORY[0x22075C638]();
    if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    ++v74;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

    v63 = v166;
  }
  while (v73 != v74);
LABEL_54:
  v133 = v67;
  swift_bridgeObjectRelease();
  v78 = specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)((double *)v64, 1uLL, (void *)static FMPFSKPatternNodeCommonStyle.default, *(_QWORD *)v151, v151[8], (uint64_t)a1, v157, v64, v31, v30, 0.0, v26 * 0.5, *(double *)&v150[v152], *(double *)&v150[v163]);
  v80 = v79;
  v132 = v78;
  objc_msgSend(*(id *)&v150[*(_QWORD *)&v160], sel_addChild_);
  if (v80 >> 62)
  {
    swift_bridgeObjectRetain();
    v81 = _CocoaArrayWrapper.endIndex.getter();
    if (!v81)
      goto LABEL_66;
  }
  else
  {
    v81 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v81)
      goto LABEL_66;
  }
  if (v81 < 1)
  {
LABEL_109:
    __break(1u);
    goto LABEL_110;
  }
  v82 = 0;
  do
  {
    if ((v80 & 0xC000000000000001) != 0)
      v83 = (id)MEMORY[0x22075C8C0](v82, v80);
    else
      v83 = *(id *)(v80 + 8 * v82 + 32);
    v84 = v83;
    swift_beginAccess();
    v85 = v84;
    MEMORY[0x22075C638]();
    v65 = *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v65 >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    ++v82;
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_endAccess();

  }
  while (v81 != v82);
LABEL_66:
  swift_bridgeObjectRelease();
  if (v64 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else
  {
    v86 = specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)(v145, 0, (void *)static FMPFSKPatternNodeCommonStyle.default, *(_QWORD *)v151, v151[8], (uint64_t)a1, v157, 2 * v64, 0.0, v26 * -0.5, 0.0, v26 * 0.5, *(double *)&v150[v152], *(double *)&v150[v163]);
    v65 = v87;
    a1 = v86;
    objc_msgSend(*(id *)&v150[*(_QWORD *)&v160], sel_addChild_);
    if (!(v65 >> 62))
    {
      v88 = *(_QWORD *)((v65 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      v89 = v148;
      if (v88)
        goto LABEL_69;
      goto LABEL_80;
    }
  }
  swift_bridgeObjectRetain();
  v88 = _CocoaArrayWrapper.endIndex.getter();
  v89 = v148;
  if (v88)
  {
LABEL_69:
    if (v88 >= 1)
    {
      v90 = 0;
      do
      {
        if ((v65 & 0xC000000000000001) != 0)
          v91 = (id)MEMORY[0x22075C8C0](v90, v65);
        else
          v91 = *(id *)(v65 + 8 * v90 + 32);
        v92 = v91;
        swift_beginAccess();
        v93 = v92;
        MEMORY[0x22075C638]();
        if (*(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        ++v90;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

      }
      while (v88 != v90);
      goto LABEL_80;
    }
LABEL_110:
    __break(1u);
    return;
  }
LABEL_80:
  swift_bridgeObjectRelease();
  objc_msgSend(v155, sel_addChild_, *(_QWORD *)&v150[*(_QWORD *)&v160]);
  if ((v161 & 1) != 0)
    v94 = objc_msgSend(v149, sel_yellowColor);
  else
    v94 = (id)qword_25513FD58;
  v95 = v94;
  v96 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode;
  v97 = *(void **)&v150[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_noonNode];
  if (v97)
    objc_msgSend(v97, sel_removeFromParent);
  v98 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType;
  LOBYTE(v167[0]) = v150[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType];
  v99 = *(_QWORD *)&v150[v163];
  v100 = *((_QWORD *)v153 + 14);
  v101 = (objc_class *)type metadata accessor for FMPFSKPeripheralDotNode();
  objc_allocWithZone(v101);
  v158 = v95;
  v102 = FMPFSKPeripheralDotNode.init(experienceType:name:dotDiameter:color:diskRadius:dotScale:angle:opacity:offset:)((unsigned __int8 *)v167, 1852796750, 0xE400000000000000, v95, v99, 0, v100, 0, v89, 0, 0, 0x3FF0000000000000, 0, 0, 0, 1);
  objc_msgSend(v150, sel_addChild_, v102);
  objc_msgSend(*(id *)&v102[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_removeFromParent);
  v103 = *(void **)&v150[v96];
  *(_QWORD *)&v150[v96] = v102;
  v156 = v102;

  if (v161)
    v104 = objc_msgSend(v149, sel_purpleColor);
  else
    v104 = (id)qword_25513FD60;
  v105 = v104;
  v106 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode;
  v107 = *(void **)&v150[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
  if (v107)
    objc_msgSend(v107, sel_removeFromParent);
  LOBYTE(v167[0]) = v150[v98];
  v108 = *(_QWORD *)&v150[v163];
  v109 = *((_QWORD *)v153 + 12);
  objc_allocWithZone(v101);
  v154 = v105;
  v110 = FMPFSKPeripheralDotNode.init(experienceType:name:dotDiameter:color:diskRadius:dotScale:angle:opacity:offset:)((unsigned __int8 *)v167, 0x6565746E696F50, 0xE700000000000000, v105, v108, 0, v109, 0, v89, 0, 0, 0x3FF0000000000000, 0, 0, 0, 1);
  objc_msgSend(v150, sel_addChild_, v110);
  v111 = *(void **)&v150[v106];
  *(_QWORD *)&v150[v106] = v110;
  v164 = v110;

  v112 = v161 ^ 1;
  objc_msgSend(v7, sel_setHidden_, v112);
  objc_msgSend(*(id *)&v150[v146], sel_setHidden_, v112);
  objc_msgSend(*(id *)&v150[v144], sel_setHidden_, v112);
  v113 = objc_msgSend(v147, sel_children);
  v114 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v114 >> 62)
    goto LABEL_102;
  v115 = *(_QWORD *)((v114 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v115; v115 = _CocoaArrayWrapper.endIndex.getter())
  {
    v116 = 4;
    v117 = 0;
    if ((v114 & 0xC000000000000001) != 0)
    {
LABEL_93:
      v118 = (id)MEMORY[0x22075C8C0](v117, v114);
      goto LABEL_95;
    }
    while (1)
    {
      v118 = *(id *)(v114 + 8 * v116);
LABEL_95:
      v119 = v118;
      v120 = __OFADD__(v117, 1);
      v121 = v117 + 1;
      if (v120)
        break;
      objc_opt_self();
      v122 = (void *)swift_dynamicCastObjCClass();
      if (v122)
        objc_msgSend(v122, sel_setLineWidth_, 1.0);

      if (v121 == v115)
        goto LABEL_103;
      v117 = ++v116 - 4;
      if ((v114 & 0xC000000000000001) != 0)
        goto LABEL_93;
    }
    __break(1u);
LABEL_102:
    swift_bridgeObjectRetain();
  }
LABEL_103:
  swift_bridgeObjectRelease_n();
  objc_msgSend(*(id *)&v150[*(_QWORD *)&v160], sel_setHidden_, 0);
  if ((v161 & 1) != 0)
  {
    v123 = objc_msgSend(v149, sel_yellowColor);
    v124 = objc_msgSend(v123, sel_colorWithAlphaComponent_, 0.75);

    v125 = v156;
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v124);

    v126 = objc_msgSend(v149, sel_purpleColor);
    v127 = objc_msgSend(v126, sel_colorWithAlphaComponent_, 0.75);

    v128 = v135;
    v129 = v158;
    v130 = v154;
  }
  else
  {
    v129 = v158;
    v131 = v158;
    v125 = v156;
    specialized FMPFSKPeripheralDotNode.renderingColor.setter(v131);

    v130 = v154;
    v127 = v154;
    v128 = v135;
  }
  specialized FMPFSKPeripheralDotNode.renderingColor.setter(v127);

  objc_msgSend(v125, sel_setHidden_, 0);
  objc_msgSend(v164, sel_setHidden_, 0);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8[2];

  v4 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v6 = *(_QWORD *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2);
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  uint64_t v7[2];

  v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = a2(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  *a1 = v4;
  return result;
}

uint64_t FMPFSKPatternNode.visibleTrackOffsets(center:)(double a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t result;
  double v4;
  double v5;
  double v6;

  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop + 16) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom + 16) & 1) != 0)
    return 0;
  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 48) & 1) != 0)
    return 0;
  if (__OFSUB__(*v2, 1))
  {
    __break(1u);
  }
  else
  {
    v4 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop + 8);
    v5 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom + 8);
    v6 = (v4 - v5) / (double)(*v2 - 1) * (double)(uint64_t)v2[5] * 0.5;
    if (v6 + a1 < v4)
      v4 = v6 + a1;
    return *(_QWORD *)&v4;
  }
  return result;
}

void FMPFSKPatternNode.setupTapeChildNodes(conformationFactor:)(uint64_t a1, char a2)
{
  double v2;
  unint64_t v3;
  double v4;
  id v7;
  char **v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t i;
  id v20;
  void *v21;
  uint64_t *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  id v31;
  id v32;
  void *ObjCClassFromMetadata;
  id v34;
  double v35;
  id v36;
  id v37;
  uint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void *v48;
  uint64_t v49;
  char **v50;
  uint64_t v51;
  id v52;
  void *v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  id v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  BOOL v65;
  uint64_t v66;
  void *v67;
  double v68;
  uint64_t v69;
  double v70;
  char v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  void *v79;
  uint64_t v80;
  double v81;
  _BOOL8 v82;
  id v83;
  id v84;
  void *v85;
  void *v86;
  uint64_t v87;
  int v88;
  char *v89;
  void *v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  double v96;
  id v97;

  v4 = v2;
  v7 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v8 = (char **)objc_msgSend(v7, sel_fmpfDebugMode);

  if ((a2 & 1) != 0)
  {
    v95 = *(_QWORD *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor);
    v92 = *(_BYTE *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8);
  }
  else
  {
    v95 = a1;
    v92 = 0;
  }
  v97 = *(id *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDebugNode);
  v9 = objc_msgSend(v97, sel_children);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v11 = *(_QWORD *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_gimbalNode);
  v12 = objc_msgSend((id)v11, sel_children);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  specialized Array.append<A>(contentsOf:)(v13, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
  v14 = v10;
  v15 = (unint64_t *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes);
  swift_beginAccess();
  v16 = *v15;
  if (*v15 >> 62)
  {
    swift_bridgeObjectRetain();
    v17 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    v17 = v16;
  }
  swift_bridgeObjectRelease();
  specialized Array.append<A>(contentsOf:)(v17, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    if (!v18)
      goto LABEL_16;
  }
  else
  {
    v18 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v18)
      goto LABEL_16;
  }
  if (v18 < 1)
    goto LABEL_60;
  for (i = 0; i != v18; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0)
      v20 = (id)MEMORY[0x22075C8C0](i, v14);
    else
      v20 = *(id *)(v14 + 8 * i + 32);
    v21 = v20;
    objc_msgSend(v20, sel_removeFromParent);

  }
LABEL_16:
  v88 = (int)v8;
  swift_bridgeObjectRelease_n();
  *v15 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  v22 = (uint64_t *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config);
  if ((*(_BYTE *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 32) & 1) != 0)
  {
    __break(1u);
    return;
  }
  v89 = (char *)OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius;
  v91 = *v22;
  v23 = *(double *)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_peripheralDiskRadius);
  v24 = (v23 + v23) * (double)*v22 / (double)v22[3];
  v25 = -v23;
  v26 = v24 * 0.5;
  v27 = v24 * -0.5;
  v28 = *(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackTop;
  *(double *)v28 = -v23;
  *(double *)(v28 + 8) = v24 * 0.5;
  *(_BYTE *)(v28 + 16) = 0;
  v29 = *(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_trackBottom;
  *(double *)v29 = -v23;
  *(double *)(v29 + 8) = v24 * -0.5;
  *(_BYTE *)(v29 + 16) = 0;
  v94 = (id)v11;
  v3 = (unint64_t)v97;
  objc_msgSend((id)v11, sel_addChild_, v97);
  v30 = *(char ***)(*(_QWORD *)&v4 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasPatternSpinesNode);
  objc_msgSend(v97, sel_addChild_, v30);
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
  objc_msgSend(v31, sel_moveToPoint_, v25, v27);
  objc_msgSend(v31, sel_addLineToPoint_, v25, v26);
  objc_msgSend(v31, sel_closePath);
  type metadata accessor for FMPFSKShapeNode();
  v86 = v31;
  v32 = objc_msgSend(v31, sel_CGPath);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v34 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v32);

  v35 = v4;
  v4 = COERCE_DOUBLE(objc_opt_self());
  v36 = v34;
  v37 = objc_msgSend(*(id *)&v4, sel_whiteColor);
  objc_msgSend(v36, sel_setStrokeColor_, v37);

  objc_msgSend(v36, sel_setLineCap_, 1);
  v38 = one-time initialization token for default;
  v39 = v36;
  if (v38 != -1)
    swift_once();
  objc_msgSend(v39, sel_setAlpha_, *(double *)&qword_25513FD68);

  v8 = v30;
  v85 = v39;
  objc_msgSend(v30, sel_addChild_, v39);
  v11 = (unint64_t)v89;
  v84 = objc_msgSend((id)objc_opt_self(), sel_bezierPathWithArcCenter_radius_startAngle_endAngle_clockwise_, 1, 0.0, 0.0, *(double *)&v89[*(_QWORD *)&v35], -3.14159265, 3.14159265);
  v40 = objc_msgSend(v84, sel_CGPath);
  v41 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v40);

  v42 = v41;
  v43 = objc_msgSend(*(id *)&v4, sel_whiteColor);
  objc_msgSend(v42, sel_setStrokeColor_, v43);

  objc_msgSend(v42, sel_setAlpha_, *(double *)&qword_25513FD68);
  objc_msgSend(v42, sel_setZPosition_, -4.4408921e-16);
  objc_msgSend(v97, sel_addChild_, v42);
  v44 = *(void **)(*(_QWORD *)&v35 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode);
  v87 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode;
  *(_QWORD *)(*(_QWORD *)&v35 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasDiskBezierNode) = v42;
  v83 = v42;

  v45 = specialized FMPFSKPatternNode.tapeFragmentNodesWith(spineBottom:spineTop:dotCount:dotDiameter:peripheralDiskRadius:color:conformationFactor:startIndex:)(v91, (__int128 *)static FMPFSKPatternNodeCommonStyle.default, v95, v92, 0, v25, v27, v25, v26, *(double *)&v89[*(_QWORD *)&v35]);
  v47 = v46;
  v90 = v48;
  v96 = v35;
  v93 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode;
  objc_msgSend(*(id *)(*(_QWORD *)&v35 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentsNode), sel_addChild_, v45);
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain();
    v49 = _CocoaArrayWrapper.endIndex.getter();
    v50 = v8;
    if (v49)
      goto LABEL_21;
  }
  else
  {
    v49 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v50 = v8;
    if (v49)
    {
LABEL_21:
      if (v49 < 1)
        goto LABEL_61;
      v51 = 0;
      do
      {
        if ((v47 & 0xC000000000000001) != 0)
          v52 = (id)MEMORY[0x22075C8C0](v51, v47);
        else
          v52 = *(id *)(v47 + 8 * v51 + 32);
        v53 = v52;
        swift_beginAccess();
        v54 = v53;
        MEMORY[0x22075C638](v54);
        if (*(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        ++v51;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_endAccess();

        v50 = v8;
      }
      while (v49 != v51);
    }
  }
  v89 = (char *)v45;
  swift_bridgeObjectRelease();
  objc_msgSend(v94, sel_addChild_, *(_QWORD *)(*(_QWORD *)&v96 + v93), v83);
  v55 = *(void **)(*(_QWORD *)&v96 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode);
  *(_QWORD *)(*(_QWORD *)&v96 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_labelsNode) = v90;
  v56 = v90;

  v90 = v56;
  objc_msgSend(v94, sel_addChild_, v56);
  v57 = v88 ^ 1u;
  objc_msgSend(v97, sel_setHidden_, v57);
  objc_msgSend(*(id *)(*(_QWORD *)&v96 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_canvasInsideBorderBezierNode), sel_setHidden_, v57);
  objc_msgSend(*(id *)(*(_QWORD *)&v96 + v87), sel_setHidden_, v57);
  v58 = objc_msgSend(v50, sel_children);
  v59 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v59 >> 62)
    goto LABEL_43;
  v60 = *(_QWORD *)((v59 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v60; v60 = _CocoaArrayWrapper.endIndex.getter())
  {
    v61 = 4;
    v62 = 0;
    if ((v59 & 0xC000000000000001) != 0)
    {
LABEL_34:
      v63 = (id)MEMORY[0x22075C8C0](v62, v59);
      goto LABEL_36;
    }
    while (1)
    {
      v63 = *(id *)(v59 + 8 * v61);
LABEL_36:
      v64 = v63;
      v65 = __OFADD__(v62, 1);
      v66 = v62 + 1;
      if (v65)
        break;
      objc_opt_self();
      v67 = (void *)swift_dynamicCastObjCClass();
      if (v67)
        objc_msgSend(v67, sel_setLineWidth_, 1.0);

      if (v66 == v60)
        goto LABEL_44;
      v62 = ++v61 - 4;
      if ((v59 & 0xC000000000000001) != 0)
        goto LABEL_34;
    }
    __break(1u);
LABEL_43:
    swift_bridgeObjectRetain();
  }
LABEL_44:
  swift_bridgeObjectRelease_n();
  v8 = &selRef_setCaptionsEnabled_;
  objc_msgSend(*(id *)(*(_QWORD *)&v96 + v93), sel_setHidden_, 0);
  objc_msgSend(v94, sel_position);
  *(double *)&v69 = COERCE_DOUBLE(FMPFSKPatternNode.visibleTrackOffsets(center:)(-v68));
  if ((v71 & 1) == 0)
  {
    v3 = v69;
    v4 = v70;
    v11 = *v15;
    if (*v15 >> 62)
      goto LABEL_62;
    v72 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    for (; v72; v72 = _CocoaArrayWrapper.endIndex.getter())
    {
      v73 = *(double *)&v3;
      v3 = v11 & 0xC000000000000001;
      v74 = v73 + 1.0;
      v75 = v4 + -1.0;
      v76 = 4;
      v4 = COERCE_DOUBLE(&OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
      v77 = 0;
      if ((v11 & 0xC000000000000001) != 0)
      {
LABEL_48:
        v78 = (char *)MEMORY[0x22075C8C0](v77, v11);
        goto LABEL_50;
      }
      while (1)
      {
        v78 = (char *)*(id *)(v11 + 8 * v76);
LABEL_50:
        v79 = v78;
        v65 = __OFADD__(v77, 1);
        v80 = v77 + 1;
        if (v65)
          break;
        if ((v78[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16] & 1) == 0)
        {
          v81 = *(double *)&v78[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 8];
          v82 = v75 > v81 || v81 > v74;
          objc_msgSend(v78, v8[105], v82, v83);
        }

        if (v80 == v72)
          goto LABEL_63;
        v77 = ++v76 - 4;
        if (*(double *)&v3 != 0.0)
          goto LABEL_48;
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
LABEL_62:
      swift_bridgeObjectRetain_n();
    }
LABEL_63:
    swift_bridgeObjectRelease_n();
  }
  FMPFSKPatternNode.readjustFragmentNodesComposedPositionForTape(_:)(0, 1uLL);

  swift_bridgeObjectRelease();
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t a1, double a2, double a3)
{
  return specialized static BinaryFloatingPoint<>.random<A>(in:using:)(a1, (uint64_t (*)(uint64_t, double, double))specialized static BinaryFloatingPoint<>.random<A>(in:using:), a2, a3);
}

uint64_t specialized static BinaryFloatingPoint<>.random<A>(in:using:)(uint64_t result, uint64_t (*a2)(uint64_t, double, double), double a3, double a4)
{
  double v6;
  uint64_t v8;
  uint64_t v9;

  if (a3 == a4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = a4 - a3;
  if ((~COERCE__INT64(a4 - a3) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v8 = result;
  v9 = 0;
  result = MEMORY[0x22075D4F0](&v9, 8);
  if (v6 * ((double)(v9 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a3 == a4)
    return a2(v8, a3, a4);
  return result;
}

void specialized static BinaryFloatingPoint<>.random<A>(in:using:)(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0)
    specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
  else
    __break(1u);
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x22075C8CC](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void specialized MutableCollection<>.shuffle<A>(using:)()
{
  uint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  id v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;

  v1 = *(_QWORD *)(*v0 + 16);
  v2 = v1 - 2;
  if (v1 >= 2)
  {
    v3 = 0;
    while (1)
    {
      v20 = 0;
      MEMORY[0x22075D4F0](&v20, 8);
      v5 = (v20 * (unsigned __int128)v1) >> 64;
      if (v1 > v20 * v1)
      {
        v6 = -(uint64_t)v1 % v1;
        if (v6 > v20 * v1)
        {
          do
          {
            v20 = 0;
            MEMORY[0x22075D4F0](&v20, 8);
          }
          while (v6 > v20 * v1);
          v5 = (v20 * (unsigned __int128)v1) >> 64;
        }
      }
      v7 = v3 + v5;
      if (__OFADD__(v3, v5))
        break;
      if (v3 != v7)
      {
        v8 = *v0;
        v9 = *(_QWORD *)(*v0 + 16);
        if (v3 >= v9)
          goto LABEL_21;
        if (v7 >= v9)
          goto LABEL_22;
        v10 = *(void **)(v8 + 32 + 8 * v7);
        v11 = *(id *)(v8 + 32 + 8 * v3);
        v12 = v10;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *v0 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
        if (v3 >= *(_QWORD *)(v8 + 16))
          goto LABEL_23;
        v14 = v8 + 8 * v3;
        v15 = *(void **)(v14 + 32);
        *(_QWORD *)(v14 + 32) = v12;

        specialized ContiguousArray._endMutation()();
        v16 = *v0;
        v17 = swift_isUniquelyReferenced_nonNull_native();
        *v0 = v16;
        if ((v17 & 1) == 0)
          specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
        if (v7 >= *(_QWORD *)(v16 + 16))
          goto LABEL_24;
        v18 = v16 + 8 * v7;
        v19 = *(void **)(v18 + 32);
        *(_QWORD *)(v18 + 32) = v11;

        specialized ContiguousArray._endMutation()();
      }
      --v1;
      if (v3++ == v2)
        return;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  v3 = v2 - 2;
  if (v2 >= 2)
  {
    v4 = 0;
    while (1)
    {
      v13 = 0;
      MEMORY[0x22075D4F0](&v13, 8);
      v6 = (v13 * (unsigned __int128)v2) >> 64;
      if (v2 > v13 * v2)
      {
        v7 = -(uint64_t)v2 % v2;
        if (v7 > v13 * v2)
        {
          do
          {
            v13 = 0;
            MEMORY[0x22075D4F0](&v13, 8);
          }
          while (v7 > v13 * v2);
          v6 = (v13 * (unsigned __int128)v2) >> 64;
        }
      }
      v8 = v4 + v6;
      if (__OFADD__(v4, v6))
        break;
      if (v4 != v8)
      {
        v9 = *(_QWORD *)(v1 + 16);
        if (v4 >= v9)
          goto LABEL_19;
        if (v8 >= v9)
          goto LABEL_20;
        v11 = *(_OWORD *)(v1 + 32 + 16 * v4);
        v12 = *(_OWORD *)(v1 + 32 + 16 * v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v1 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v1);
        v10 = *(_QWORD *)(v1 + 16);
        if (v4 >= v10)
          goto LABEL_21;
        *(_OWORD *)(v1 + 32 + 16 * v4) = v12;
        if (v8 >= v10)
          goto LABEL_22;
        *(_OWORD *)(v1 + 32 + 16 * v8) = v11;
        *v0 = v1;
      }
      --v2;
      if (v4++ == v3)
        return;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  double v15;
  double v16;
  double *v17;
  double v18;
  double v19;
  __int128 *v20;
  Swift::Int v21;
  Swift::Int v22;
  __int128 *v23;
  __int128 v24;
  Swift::Int v25;
  double *v26;
  double v27;
  Swift::Int v28;
  double *v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t i;
  double v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  Swift::Int v104;
  uint64_t v105;
  double *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v82 = *a1;
      v83 = *a1 + 8;
      v84 = -1;
      for (i = 1; i != v3; ++i)
      {
        v86 = *(double *)(v82 + 16 * i + 8);
        v87 = v84;
        v88 = v83;
        do
        {
          if (v86 >= *(double *)v88)
            break;
          if (!v82)
            goto LABEL_141;
          v89 = *(_QWORD *)(v88 + 8);
          *(_OWORD *)(v88 + 8) = *(_OWORD *)(v88 - 8);
          *(_QWORD *)(v88 - 8) = v89;
          *(double *)v88 = v86;
          v88 -= 16;
        }
        while (!__CFADD__(v87++, 1));
        v83 += 16;
        --v84;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v100 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (double *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_103:
      v91 = v12;
      v102 = v9;
      if (v13 >= 2)
      {
        v92 = *v100;
        do
        {
          v93 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v92)
            goto LABEL_145;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v92 + 16 * v95), (double *)(v92 + 16 * *(_QWORD *)&v91[16 * v13 + 16]), v92 + 16 * v96, __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_134;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v13 > v98)
            goto LABEL_135;
          memmove(&v94[16 * v13 + 16], &v94[16 * v13 + 32], 16 * (v98 - v13));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v13 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    type metadata accessor for CGPoint(0);
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)(v8 + 16) = v7;
    v102 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v101 = *a1 + 40;
  v99 = *a1 - 16;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v103 = v6;
  v104 = v3;
  v105 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 16 * v10 + 8);
      v16 = *(double *)(v11 + 16 * v14 + 8);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v101 + 16 * v14);
        v18 = v15;
        while (1)
        {
          v19 = v18;
          v18 = *v17;
          if (v15 < v16 == *v17 >= v19)
            break;
          ++v10;
          v17 += 2;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v20 = (__int128 *)(v99 + 16 * v10);
          v21 = v10;
          v22 = v14;
          v23 = (__int128 *)(v11 + 16 * v14);
          do
          {
            if (v22 != --v21)
            {
              if (!v11)
                goto LABEL_144;
              v24 = *v23;
              *v23 = *v20;
              *v20 = v24;
            }
            ++v22;
            --v20;
            ++v23;
          }
          while (v22 < v21);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v25 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v25 >= v3)
      v25 = v3;
    if (v25 < v14)
      break;
    if (v10 != v25)
    {
      v26 = (double *)(v11 + 16 * v10);
      do
      {
        v27 = *(double *)(v11 + 16 * v10 + 8);
        v28 = v14;
        v29 = v26;
        do
        {
          if (v27 >= *(v29 - 1))
            break;
          if (!v11)
            goto LABEL_142;
          v30 = *v29;
          *(_OWORD *)v29 = *((_OWORD *)v29 - 1);
          *(v29 - 1) = v27;
          *(v29 - 2) = v30;
          v29 -= 2;
          ++v28;
        }
        while (v10 != v28);
        ++v10;
        v26 += 2;
      }
      while (v10 != v25);
      v10 = v25;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v32 = *((_QWORD *)v12 + 2);
    v31 = *((_QWORD *)v12 + 3);
    v13 = v32 + 1;
    v11 = v105;
    if (v32 >= v31 >> 1)
    {
      v81 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v31 > 1), v32 + 1, 1, v12);
      v11 = v105;
      v12 = v81;
    }
    *((_QWORD *)v12 + 2) = v13;
    v33 = v12 + 32;
    v34 = &v12[16 * v32 + 32];
    *(_QWORD *)v34 = v14;
    *((_QWORD *)v34 + 1) = v10;
    if (v32)
    {
      while (1)
      {
        v35 = v13 - 1;
        if (v13 >= 4)
        {
          v40 = &v33[16 * v13];
          v41 = *((_QWORD *)v40 - 8);
          v42 = *((_QWORD *)v40 - 7);
          v46 = __OFSUB__(v42, v41);
          v43 = v42 - v41;
          if (v46)
            goto LABEL_120;
          v45 = *((_QWORD *)v40 - 6);
          v44 = *((_QWORD *)v40 - 5);
          v46 = __OFSUB__(v44, v45);
          v38 = v44 - v45;
          v39 = v46;
          if (v46)
            goto LABEL_121;
          v47 = v13 - 2;
          v48 = &v33[16 * v13 - 32];
          v50 = *(_QWORD *)v48;
          v49 = *((_QWORD *)v48 + 1);
          v46 = __OFSUB__(v49, v50);
          v51 = v49 - v50;
          if (v46)
            goto LABEL_123;
          v46 = __OFADD__(v38, v51);
          v52 = v38 + v51;
          if (v46)
            goto LABEL_126;
          if (v52 >= v43)
          {
            v70 = &v33[16 * v35];
            v72 = *(_QWORD *)v70;
            v71 = *((_QWORD *)v70 + 1);
            v46 = __OFSUB__(v71, v72);
            v73 = v71 - v72;
            if (v46)
              goto LABEL_130;
            v63 = v38 < v73;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v64 = *((_QWORD *)v12 + 4);
            v65 = *((_QWORD *)v12 + 5);
            v46 = __OFSUB__(v65, v64);
            v57 = v65 - v64;
            v58 = v46;
            goto LABEL_77;
          }
          v37 = *((_QWORD *)v12 + 4);
          v36 = *((_QWORD *)v12 + 5);
          v46 = __OFSUB__(v36, v37);
          v38 = v36 - v37;
          v39 = v46;
        }
        if ((v39 & 1) != 0)
          goto LABEL_122;
        v47 = v13 - 2;
        v53 = &v33[16 * v13 - 32];
        v55 = *(_QWORD *)v53;
        v54 = *((_QWORD *)v53 + 1);
        v56 = __OFSUB__(v54, v55);
        v57 = v54 - v55;
        v58 = v56;
        if (v56)
          goto LABEL_125;
        v59 = &v33[16 * v35];
        v61 = *(_QWORD *)v59;
        v60 = *((_QWORD *)v59 + 1);
        v46 = __OFSUB__(v60, v61);
        v62 = v60 - v61;
        if (v46)
          goto LABEL_128;
        if (__OFADD__(v57, v62))
          goto LABEL_129;
        if (v57 + v62 >= v38)
        {
          v63 = v38 < v62;
LABEL_83:
          if (v63)
            v35 = v47;
          goto LABEL_85;
        }
LABEL_77:
        if ((v58 & 1) != 0)
          goto LABEL_124;
        v66 = &v33[16 * v35];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v46 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v46)
          goto LABEL_127;
        if (v69 < v57)
          goto LABEL_15;
LABEL_85:
        v74 = v35 - 1;
        if (v35 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v75 = v12;
        v76 = &v33[16 * v74];
        v77 = *(_QWORD *)v76;
        v78 = &v33[16 * v35];
        v79 = *((_QWORD *)v78 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((double *)(v11 + 16 * *(_QWORD *)v76), (double *)(v11 + 16 * *(_QWORD *)v78), v11 + 16 * v79, __dst);
        if (v1)
          goto LABEL_93;
        if (v79 < v77)
          goto LABEL_117;
        if (v35 > *((_QWORD *)v75 + 2))
          goto LABEL_118;
        *(_QWORD *)v76 = v77;
        *(_QWORD *)&v33[16 * v74 + 8] = v79;
        v80 = *((_QWORD *)v75 + 2);
        if (v35 >= v80)
          goto LABEL_119;
        v12 = v75;
        v13 = v80 - 1;
        memmove(&v33[16 * v35], v78 + 16, 16 * (v80 - 1 - v35));
        *((_QWORD *)v75 + 2) = v80 - 1;
        v11 = v105;
        if (v80 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v103;
    v3 = v104;
    if (v10 >= v104)
    {
      v9 = v102;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

double *specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  double *result;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  char *v21;
  Swift::Int v22;
  uint64_t v23;
  unint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  double *v27;
  double *v28;
  uint64_t v29;
  double *v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  double *v36;
  double *v37;
  uint64_t v38;
  uint64_t *v39;
  Swift::Int v40;
  Swift::Int v41;
  uint64_t *v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t *v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t *v48;
  double *v49;
  double *v50;
  uint64_t v51;
  uint64_t v52;
  double *v53;
  double v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  double *v116;
  Swift::Int v117;
  uint64_t v118;
  char *__dst;
  uint64_t v120;

  v2 = v1;
  v4 = a1[1];
  result = (double *)_minimumMergeRunLength(_:)(v4);
  if ((uint64_t)result < v4)
  {
    if (v4 >= 0)
      v6 = v4;
    else
      v6 = v4 + 1;
    if (v4 >= -1)
    {
      v7 = result;
      v114 = a1;
      if (v4 < 2)
      {
        v21 = (char *)MEMORY[0x24BEE4AF8];
        v120 = MEMORY[0x24BEE4AF8];
        __dst = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
        if (v4 != 1)
        {
          v24 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
          if (v24 < 2)
            goto LABEL_127;
          goto LABEL_115;
        }
      }
      else
      {
        v8 = v6 >> 1;
        type metadata accessor for FMPFSKPatternFragmentNode();
        v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
        *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
        __dst = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
        v120 = v9;
      }
      v116 = v7;
      v22 = 0;
      v23 = *a1;
      v115 = *a1 - 8;
      v21 = (char *)MEMORY[0x24BEE4AF8];
      v117 = v4;
      v118 = *a1;
      while (1)
      {
        v25 = v22++;
        if (v22 < v4)
        {
          v26 = *(_QWORD *)(v23 + 8 * v22);
          v27 = (double *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if ((*(_BYTE *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
            goto LABEL_171;
          v28 = (double *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          if ((*(_BYTE *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
            goto LABEL_172;
          v29 = *(_QWORD *)(v23 + 8 * v25);
          v30 = (double *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if ((*(_BYTE *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
            goto LABEL_173;
          v31 = v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
          if ((*(_BYTE *)(v31 + 16) & 1) != 0)
            goto LABEL_174;
          v32 = v27[1] - v28[1];
          v33 = v32 * v32 + (*v27 - *v28) * (*v27 - *v28);
          v34 = (v30[1] - *(double *)(v31 + 8)) * (v30[1] - *(double *)(v31 + 8))
              + (*v30 - *(double *)v31) * (*v30 - *(double *)v31);
          v22 = v25 + 2;
          if (v25 + 2 < v4)
          {
            do
            {
              v35 = *(_QWORD *)(v23 + 8 * v22);
              if ((*(_BYTE *)(v35 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
                goto LABEL_165;
              if ((*(_BYTE *)(v35 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
                goto LABEL_166;
              v37 = (double *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
              if ((*(_BYTE *)(v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
                goto LABEL_167;
              v38 = v26 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition;
              if ((*(_BYTE *)(v38 + 16) & 1) != 0)
                goto LABEL_168;
              v36 = (double *)(v35 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
              if (v33 < v34 == (v36[1]
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition
                                           + 8))
                              * (v36[1]
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition
                                           + 8))
                              + (*v36
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition))
                              * (*v36
                               - *(double *)(v35
                                           + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition)) >= (v37[1] - *(double *)(v38 + 8)) * (v37[1] - *(double *)(v38 + 8)) + (*v37 - *(double *)v38) * (*v37 - *(double *)v38))
                goto LABEL_38;
              ++v22;
              v26 = v35;
            }
            while (v4 != v22);
            v22 = v4;
          }
LABEL_38:
          if (v33 < v34)
          {
            if (v22 < v25)
              goto LABEL_151;
            if (v25 < v22)
            {
              v39 = (uint64_t *)(v115 + 8 * v22);
              v40 = v22;
              v41 = v25;
              v42 = (uint64_t *)(v23 + 8 * v25);
              do
              {
                if (v41 != --v40)
                {
                  if (!v23)
                    goto LABEL_169;
                  v43 = *v42;
                  *v42 = *v39;
                  *v39 = v43;
                }
                ++v41;
                --v39;
                ++v42;
              }
              while (v41 < v40);
            }
          }
        }
        if (v22 < v4)
        {
          if (__OFSUB__(v22, v25))
            goto LABEL_149;
          if (v22 - v25 < (uint64_t)v116)
          {
            v44 = (Swift::Int)v116 + v25;
            if (__OFADD__(v25, v116))
              goto LABEL_152;
            if (v44 >= v4)
              v44 = v4;
            if (v44 < v25)
            {
LABEL_153:
              __break(1u);
LABEL_154:
              __break(1u);
              goto LABEL_155;
            }
            if (v22 != v44)
            {
              v45 = (uint64_t *)(v115 + 8 * v22);
              do
              {
                v46 = *(_QWORD *)(v23 + 8 * v22);
                v47 = v25;
                v48 = v45;
                do
                {
                  v49 = (double *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
                  if ((*(_BYTE *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
                    goto LABEL_159;
                  v50 = (double *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
                  if ((*(_BYTE *)(v46 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
                    goto LABEL_160;
                  v51 = *v48;
                  v52 = *v48 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
                  if ((*(_BYTE *)(v52 + 16) & 1) != 0)
                    goto LABEL_161;
                  if ((*(_BYTE *)(v51 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
                    goto LABEL_162;
                  v54 = v49[1] - v50[1];
                  v53 = (double *)(v51 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
                  if (v54 * v54 + (*v49 - *v50) * (*v49 - *v50) >= (*(double *)(v52 + 8) - v53[1])
                                                                  * (*(double *)(v52 + 8) - v53[1])
                                                                  + (*(double *)v52 - *v53) * (*(double *)v52 - *v53))
                    break;
                  if (!v23)
                    goto LABEL_163;
                  *v48 = v46;
                  v48[1] = v51;
                  --v48;
                  ++v47;
                }
                while (v22 != v47);
                ++v22;
                ++v45;
              }
              while (v22 != v44);
              v22 = v44;
            }
          }
        }
        if (v22 < v25)
          goto LABEL_144;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v21 + 2) + 1, 1, v21);
        v56 = *((_QWORD *)v21 + 2);
        v55 = *((_QWORD *)v21 + 3);
        v24 = v56 + 1;
        v23 = v118;
        if (v56 >= v55 >> 1)
        {
          v105 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v21);
          v23 = v118;
          v21 = v105;
        }
        *((_QWORD *)v21 + 2) = v24;
        v57 = v21 + 32;
        v58 = &v21[16 * v56 + 32];
        *(_QWORD *)v58 = v25;
        *((_QWORD *)v58 + 1) = v22;
        if (v56)
        {
          while (1)
          {
            v59 = v24 - 1;
            if (v24 >= 4)
            {
              v64 = &v57[16 * v24];
              v65 = *((_QWORD *)v64 - 8);
              v66 = *((_QWORD *)v64 - 7);
              v70 = __OFSUB__(v66, v65);
              v67 = v66 - v65;
              if (v70)
                goto LABEL_133;
              v69 = *((_QWORD *)v64 - 6);
              v68 = *((_QWORD *)v64 - 5);
              v70 = __OFSUB__(v68, v69);
              v62 = v68 - v69;
              v63 = v70;
              if (v70)
                goto LABEL_134;
              v71 = v24 - 2;
              v72 = &v57[16 * v24 - 32];
              v74 = *(_QWORD *)v72;
              v73 = *((_QWORD *)v72 + 1);
              v70 = __OFSUB__(v73, v74);
              v75 = v73 - v74;
              if (v70)
                goto LABEL_136;
              v70 = __OFADD__(v62, v75);
              v76 = v62 + v75;
              if (v70)
                goto LABEL_139;
              if (v76 >= v67)
              {
                v94 = &v57[16 * v59];
                v96 = *(_QWORD *)v94;
                v95 = *((_QWORD *)v94 + 1);
                v70 = __OFSUB__(v95, v96);
                v97 = v95 - v96;
                if (v70)
                  goto LABEL_143;
                v87 = v62 < v97;
                goto LABEL_103;
              }
            }
            else
            {
              if (v24 != 3)
              {
                v88 = *((_QWORD *)v21 + 4);
                v89 = *((_QWORD *)v21 + 5);
                v70 = __OFSUB__(v89, v88);
                v81 = v89 - v88;
                v82 = v70;
                goto LABEL_97;
              }
              v61 = *((_QWORD *)v21 + 4);
              v60 = *((_QWORD *)v21 + 5);
              v70 = __OFSUB__(v60, v61);
              v62 = v60 - v61;
              v63 = v70;
            }
            if ((v63 & 1) != 0)
              goto LABEL_135;
            v71 = v24 - 2;
            v77 = &v57[16 * v24 - 32];
            v79 = *(_QWORD *)v77;
            v78 = *((_QWORD *)v77 + 1);
            v80 = __OFSUB__(v78, v79);
            v81 = v78 - v79;
            v82 = v80;
            if (v80)
              goto LABEL_138;
            v83 = &v57[16 * v59];
            v85 = *(_QWORD *)v83;
            v84 = *((_QWORD *)v83 + 1);
            v70 = __OFSUB__(v84, v85);
            v86 = v84 - v85;
            if (v70)
              goto LABEL_141;
            if (__OFADD__(v81, v86))
              goto LABEL_142;
            if (v81 + v86 >= v62)
            {
              v87 = v62 < v86;
LABEL_103:
              if (v87)
                v59 = v71;
              goto LABEL_105;
            }
LABEL_97:
            if ((v82 & 1) != 0)
              goto LABEL_137;
            v90 = &v57[16 * v59];
            v92 = *(_QWORD *)v90;
            v91 = *((_QWORD *)v90 + 1);
            v70 = __OFSUB__(v91, v92);
            v93 = v91 - v92;
            if (v70)
              goto LABEL_140;
            if (v93 < v81)
              goto LABEL_24;
LABEL_105:
            v98 = v59 - 1;
            if (v59 - 1 >= v24)
            {
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
LABEL_149:
              __break(1u);
LABEL_150:
              __break(1u);
LABEL_151:
              __break(1u);
LABEL_152:
              __break(1u);
              goto LABEL_153;
            }
            if (!v23)
              goto LABEL_164;
            v99 = v21;
            v100 = &v57[16 * v98];
            v101 = *(_QWORD *)v100;
            v102 = &v57[16 * v59];
            v103 = *((_QWORD *)v102 + 1);
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v23 + 8 * *(_QWORD *)v100), (char *)(v23 + 8 * *(_QWORD *)v102), v23 + 8 * v103, __dst);
            if (v1)
              goto LABEL_127;
            if (v103 < v101)
              goto LABEL_130;
            if (v59 > *((_QWORD *)v99 + 2))
              goto LABEL_131;
            *(_QWORD *)v100 = v101;
            *(_QWORD *)&v57[16 * v98 + 8] = v103;
            v104 = *((_QWORD *)v99 + 2);
            if (v59 >= v104)
              goto LABEL_132;
            v21 = v99;
            v24 = v104 - 1;
            memmove(&v57[16 * v59], v102 + 16, 16 * (v104 - 1 - v59));
            *((_QWORD *)v99 + 2) = v104 - 1;
            v23 = v118;
            if (v104 <= 2)
              goto LABEL_24;
          }
        }
        v24 = 1;
LABEL_24:
        v4 = v117;
        if (v22 >= v117)
        {
          v2 = v1;
          if (v24 < 2)
          {
LABEL_127:
            swift_bridgeObjectRelease();
            *(_QWORD *)((v120 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()();
            return (double *)swift_bridgeObjectRelease();
          }
LABEL_115:
          v106 = *v114;
          while (1)
          {
            v107 = v24 - 2;
            if (v24 < 2)
              goto LABEL_145;
            if (!v106)
              goto LABEL_170;
            v108 = v21;
            v109 = v21 + 32;
            v110 = *(_QWORD *)&v21[16 * v107 + 32];
            v111 = *(_QWORD *)&v21[16 * v24 + 24];
            specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v106 + 8 * v110), (char *)(v106 + 8 * *(_QWORD *)&v109[16 * v24 - 16]), v106 + 8 * v111, __dst);
            if (v2)
              goto LABEL_127;
            if (v111 < v110)
              goto LABEL_146;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v108 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v108);
            if (v107 >= *((_QWORD *)v108 + 2))
              goto LABEL_147;
            v112 = &v108[16 * v107 + 32];
            *(_QWORD *)v112 = v110;
            *((_QWORD *)v112 + 1) = v111;
            v113 = *((_QWORD *)v108 + 2);
            if (v24 > v113)
              goto LABEL_148;
            v21 = v108;
            memmove(&v108[16 * v24 + 16], &v108[16 * v24 + 32], 16 * (v113 - v24));
            *((_QWORD *)v108 + 2) = v113 - 1;
            v24 = v113 - 1;
            if (v113 <= 2)
              goto LABEL_127;
          }
        }
      }
    }
LABEL_175:
    result = (double *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < 0)
    goto LABEL_150;
  if ((unint64_t)v4 >= 2)
  {
    v10 = 0;
    v11 = *a1;
    v12 = 1;
LABEL_12:
    v13 = *(_QWORD *)(v11 + 8 * v12);
    v14 = v10;
    while (1)
    {
      v15 = (double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
      if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
        break;
      result = (double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
      if ((*(_BYTE *)(v13 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
        goto LABEL_157;
      v16 = (uint64_t *)(v11 + 8 * v14);
      v17 = *v16;
      v18 = *v16 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
      if ((*(_BYTE *)(v18 + 16) & 1) != 0)
        goto LABEL_156;
      if ((*(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
        goto LABEL_154;
      v20 = v15[1] - result[1];
      v19 = (double *)(v17 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
      if (v20 * v20 + (*v15 - *result) * (*v15 - *result) < (*(double *)(v18 + 8) - v19[1])
                                                           * (*(double *)(v18 + 8) - v19[1])
                                                           + (*(double *)v18 - *v19) * (*(double *)v18 - *v19))
      {
        if (!v11)
          goto LABEL_158;
        v16[1] = v17;
        *(_QWORD *)(v11 + 8 * v14--) = v13;
        if (v14 != -1)
          continue;
      }
      ++v12;
      ++v10;
      if (v12 == v4)
        return result;
      goto LABEL_12;
    }
LABEL_155:
    __break(1u);
LABEL_156:
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    __break(1u);
LABEL_159:
    __break(1u);
LABEL_160:
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
LABEL_171:
    __break(1u);
LABEL_172:
    __break(1u);
LABEL_173:
    __break(1u);
LABEL_174:
    __break(1u);
    goto LABEL_175;
  }
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  Swift::Int v5;
  Swift::Int result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  Swift::Int v20;
  uint64_t v21;
  Swift::Int v22;
  unint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  Swift::Int v34;
  Swift::Int v35;
  uint64_t *v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t *v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  BOOL v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  unint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  unint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  Swift::Int v139;
  Swift::Int v140;
  uint64_t v141;
  Swift::Int v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *__dst;
  char *v150;
  char *v151;
  uint64_t v152;

  v5 = a1[1];
  result = _minimumMergeRunLength(_:)(v5);
  if (result >= v5)
  {
    if (v5 < 0)
    {
LABEL_208:
      __break(1u);
LABEL_209:
      __break(1u);
LABEL_210:
      __break(1u);
LABEL_211:
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      _fatalErrorMessage(_:_:file:line:flags:)();
      __break(1u);
      goto LABEL_220;
    }
    if ((unint64_t)v5 >= 2)
    {
      v11 = 0;
      v12 = *a1;
      v13 = 1;
LABEL_12:
      v14 = *(_QWORD *)(v12 + 8 * v13);
      v15 = v11;
      while (1)
      {
        v16 = v14 + *a2;
        if ((*(_BYTE *)(v16 + 16) & 1) != 0)
          goto LABEL_209;
        v17 = *(_QWORD *)(v12 + 8 * v15);
        v18 = v17 + *a2;
        if ((*(_BYTE *)(v18 + 16) & 1) != 0)
          goto LABEL_210;
        if (*(double *)(v16 + 8) < *(double *)(v18 + 8))
        {
          if (!v12)
            goto LABEL_211;
          *(_QWORD *)(v12 + 8 * v15 + 8) = v17;
          *(_QWORD *)(v12 + 8 * v15--) = v14;
          if (v15 != -1)
            continue;
        }
        ++v13;
        ++v11;
        if (v13 == v5)
          return result;
        goto LABEL_12;
      }
    }
  }
  else
  {
    if (v5 >= 0)
      v7 = v5;
    else
      v7 = v5 + 1;
    if (v5 < -1)
    {
LABEL_220:
      result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    v139 = result;
    v141 = v2;
    v137 = a1;
    if (v5 >= 2)
    {
      v8 = v7 >> 1;
      type metadata accessor for FMPFSKPatternFragmentNode();
      v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
      v10 = (char *)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
      v152 = v9;
      goto LABEL_20;
    }
    v19 = (char *)MEMORY[0x24BEE4AF8];
    v152 = MEMORY[0x24BEE4AF8];
    v10 = (char *)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v5 == 1)
    {
LABEL_20:
      v20 = 0;
      v21 = *a1;
      v138 = v21 + 16;
      v143 = v21 - 8;
      v19 = (char *)MEMORY[0x24BEE4AF8];
      v22 = v5;
      v140 = v5;
      __dst = v10;
      v147 = v21;
      while (1)
      {
        v24 = v20 + 1;
        if (v20 + 1 < v22)
        {
          v25 = *a2;
          v26 = *(_QWORD *)(v21 + 8 * v24) + *a2;
          if ((*(_BYTE *)(v26 + 16) & 1) != 0)
            goto LABEL_216;
          v27 = *(_QWORD *)(v21 + 8 * v20) + v25;
          if ((*(_BYTE *)(v27 + 16) & 1) != 0)
            goto LABEL_217;
          v28 = *(double *)(v27 + 8);
          v29 = *(double *)(v26 + 8);
          v24 = v20 + 2;
          if (v20 + 2 < v22)
          {
            v30 = (_QWORD *)(v138 + 8 * v20);
            do
            {
              v31 = *v30 + v25;
              if ((*(_BYTE *)(v31 + 16) & 1) != 0)
                goto LABEL_213;
              v32 = *(v30 - 1) + v25;
              if ((*(_BYTE *)(v32 + 16) & 1) != 0)
                goto LABEL_214;
              if (v29 < v28 == *(double *)(v31 + 8) >= *(double *)(v32 + 8))
                goto LABEL_33;
              ++v24;
              ++v30;
            }
            while (v22 != v24);
            v24 = v22;
          }
LABEL_33:
          if (v29 < v28)
          {
            if (v24 < v20)
              goto LABEL_198;
            if (v20 < v24)
            {
              v33 = (uint64_t *)(v143 + 8 * v24);
              v34 = v24;
              v35 = v20;
              v36 = (uint64_t *)(v21 + 8 * v20);
              do
              {
                if (v35 != --v34)
                {
                  if (!v21)
                    goto LABEL_215;
                  v37 = *v36;
                  *v36 = *v33;
                  *v33 = v37;
                }
                ++v35;
                --v33;
                ++v36;
              }
              while (v35 < v34);
            }
          }
        }
        if (v24 < v22)
        {
          if (__OFSUB__(v24, v20))
            goto LABEL_193;
          if (v24 - v20 < v139)
          {
            v38 = v20 + v139;
            if (__OFADD__(v20, v139))
              goto LABEL_199;
            if (v38 >= v22)
              v38 = v22;
            if (v38 < v20)
              goto LABEL_200;
            if (v24 != v38)
            {
              v39 = (uint64_t *)(v143 + 8 * v24);
              do
              {
                v40 = *(_QWORD *)(v21 + 8 * v24);
                v41 = v20;
                v42 = v39;
                do
                {
                  v43 = v40 + *a2;
                  if ((*(_BYTE *)(v43 + 16) & 1) != 0)
                    goto LABEL_205;
                  v44 = *v42;
                  v45 = *v42 + *a2;
                  if ((*(_BYTE *)(v45 + 16) & 1) != 0)
                    goto LABEL_206;
                  if (*(double *)(v43 + 8) >= *(double *)(v45 + 8))
                    break;
                  if (!v21)
                    goto LABEL_207;
                  *v42 = v40;
                  v42[1] = v44;
                  --v42;
                  ++v41;
                }
                while (v24 != v41);
                ++v24;
                ++v39;
              }
              while (v24 != v38);
              v24 = v38;
            }
          }
        }
        if (v24 < v20)
          goto LABEL_192;
        v142 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
        v10 = __dst;
        v47 = *((_QWORD *)v19 + 2);
        v46 = *((_QWORD *)v19 + 3);
        v23 = v47 + 1;
        if (v47 >= v46 >> 1)
        {
          v129 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v46 > 1), v47 + 1, 1, v19);
          v10 = __dst;
          v19 = v129;
        }
        *((_QWORD *)v19 + 2) = v23;
        v48 = v19 + 32;
        v49 = &v19[16 * v47 + 32];
        *(_QWORD *)v49 = v20;
        *((_QWORD *)v49 + 1) = v142;
        if (v47)
          break;
        v23 = 1;
LABEL_22:
        v22 = v140;
        v20 = v142;
        if (v142 >= v140)
          goto LABEL_164;
      }
      v148 = v19 + 32;
      v144 = v19;
      while (1)
      {
        v50 = v23 - 1;
        if (v23 >= 4)
        {
          v55 = &v48[16 * v23];
          v56 = *((_QWORD *)v55 - 8);
          v57 = *((_QWORD *)v55 - 7);
          v61 = __OFSUB__(v57, v56);
          v58 = v57 - v56;
          if (v61)
            goto LABEL_181;
          v60 = *((_QWORD *)v55 - 6);
          v59 = *((_QWORD *)v55 - 5);
          v61 = __OFSUB__(v59, v60);
          v53 = v59 - v60;
          v54 = v61;
          if (v61)
            goto LABEL_182;
          v62 = v23 - 2;
          v63 = &v48[16 * v23 - 32];
          v65 = *(_QWORD *)v63;
          v64 = *((_QWORD *)v63 + 1);
          v61 = __OFSUB__(v64, v65);
          v66 = v64 - v65;
          if (v61)
            goto LABEL_184;
          v61 = __OFADD__(v53, v66);
          v67 = v53 + v66;
          if (v61)
            goto LABEL_187;
          if (v67 >= v58)
          {
            v85 = &v48[16 * v50];
            v87 = *(_QWORD *)v85;
            v86 = *((_QWORD *)v85 + 1);
            v61 = __OFSUB__(v86, v87);
            v88 = v86 - v87;
            if (v61)
              goto LABEL_191;
            v78 = v53 < v88;
            goto LABEL_97;
          }
        }
        else
        {
          if (v23 != 3)
          {
            v79 = *((_QWORD *)v19 + 4);
            v80 = *((_QWORD *)v19 + 5);
            v61 = __OFSUB__(v80, v79);
            v72 = v80 - v79;
            v73 = v61;
            goto LABEL_91;
          }
          v52 = *((_QWORD *)v19 + 4);
          v51 = *((_QWORD *)v19 + 5);
          v61 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          v54 = v61;
        }
        if ((v54 & 1) != 0)
          goto LABEL_183;
        v62 = v23 - 2;
        v68 = &v48[16 * v23 - 32];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v71 = __OFSUB__(v69, v70);
        v72 = v69 - v70;
        v73 = v71;
        if (v71)
          goto LABEL_186;
        v74 = &v48[16 * v50];
        v76 = *(_QWORD *)v74;
        v75 = *((_QWORD *)v74 + 1);
        v61 = __OFSUB__(v75, v76);
        v77 = v75 - v76;
        if (v61)
          goto LABEL_189;
        if (__OFADD__(v72, v77))
          goto LABEL_190;
        if (v72 + v77 >= v53)
        {
          v78 = v53 < v77;
LABEL_97:
          if (v78)
            v50 = v62;
          goto LABEL_99;
        }
LABEL_91:
        if ((v73 & 1) != 0)
          goto LABEL_185;
        v81 = &v48[16 * v50];
        v83 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        v61 = __OFSUB__(v82, v83);
        v84 = v82 - v83;
        if (v61)
          goto LABEL_188;
        if (v84 < v72)
          goto LABEL_22;
LABEL_99:
        if (v50 - 1 >= v23)
        {
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
LABEL_190:
          __break(1u);
LABEL_191:
          __break(1u);
LABEL_192:
          __break(1u);
LABEL_193:
          __break(1u);
          goto LABEL_194;
        }
        if (!v21)
          goto LABEL_212;
        v89 = a2;
        v90 = v19;
        v151 = &v48[16 * v50 - 16];
        v91 = *(_QWORD *)v151;
        v92 = &v48[16 * v50];
        v94 = *(_QWORD *)v92;
        v93 = *((_QWORD *)v92 + 1);
        v150 = v92;
        v95 = (char *)(v21 + 8 * *(_QWORD *)v151);
        v96 = (char *)(v21 + 8 * *(_QWORD *)v92);
        v97 = v21 + 8 * v93;
        v98 = v96 - v95;
        v99 = v96 - v95 + 7;
        if (v96 - v95 >= 0)
          v99 = v96 - v95;
        v100 = v99 >> 3;
        v101 = v97 - (_QWORD)v96;
        v102 = v97 - (_QWORD)v96 + 7;
        if ((uint64_t)(v97 - (_QWORD)v96) >= 0)
          v102 = v97 - (_QWORD)v96;
        v103 = v102 >> 3;
        if (v100 >= v102 >> 3)
        {
          if (v101 < -7)
            goto LABEL_219;
          if ((unint64_t)v10 >= v97 || v10 != v96)
          {
            v146 = v93;
            v113 = *(_QWORD *)v151;
            v114 = v94;
            memmove(v10, v96, 8 * v103);
            v94 = v114;
            v93 = v146;
            v91 = v113;
            v10 = __dst;
          }
          v106 = &v10[8 * v103];
          v21 = v147;
          if (v91 >= v94 || v101 < 8)
          {
            v107 = v10;
            v19 = v90;
            a2 = v89;
            goto LABEL_152;
          }
          v115 = (char *)(v143 + 8 * v93);
          v19 = v90;
          a2 = v89;
          while (2)
          {
            v116 = *v89;
            v117 = *((_QWORD *)v106 - 1) + *v89;
            if ((*(_BYTE *)(v117 + 16) & 1) != 0)
              goto LABEL_203;
            v118 = v96 - 8;
            v119 = *((_QWORD *)v96 - 1);
            v120 = v119 + v116;
            if ((*(_BYTE *)(v119 + v116 + 16) & 1) != 0)
              goto LABEL_204;
            v121 = v115 + 8;
            if (*(double *)(v117 + 8) >= *(double *)(v120 + 8))
            {
              v119 = *((_QWORD *)v106 - 1);
              v118 = v96;
              if (v121 != v106)
              {
                v106 -= 8;
                goto LABEL_145;
              }
              v122 = v115 >= v106;
              v106 -= 8;
              if (v122)
LABEL_145:
                *(_QWORD *)v115 = v119;
            }
            else if (v121 != v96 || v115 >= v96)
            {
              goto LABEL_145;
            }
            if (v95 >= v118 || (v115 -= 8, v96 = v118, v10 >= v106))
            {
              v107 = v10;
              v96 = v118;
              goto LABEL_152;
            }
            continue;
          }
        }
        if (v98 < -7)
          goto LABEL_219;
        if (v10 != v95 || (v19 = v90, v10 >= v96))
        {
          v145 = v93;
          v104 = *(_QWORD *)v151;
          v105 = v94;
          memmove(v10, v95, 8 * v100);
          v94 = v105;
          v19 = v144;
          v93 = v145;
          v91 = v104;
          v10 = __dst;
        }
        v106 = &v10[8 * v100];
        a2 = v89;
        if (v94 < v93 && v98 >= 8)
        {
          v107 = v10;
          while (1)
          {
            v108 = *(_QWORD *)v96 + *v89;
            if ((*(_BYTE *)(v108 + 16) & 1) != 0)
              goto LABEL_201;
            v109 = *(_QWORD *)v107;
            v110 = *(_QWORD *)v107 + *v89;
            if ((*(_BYTE *)(v110 + 16) & 1) != 0)
              goto LABEL_202;
            if (*(double *)(v108 + 8) >= *(double *)(v110 + 8))
              break;
            v109 = *(_QWORD *)v96;
            v111 = v95 == v96;
            v96 += 8;
            if (!v111)
              goto LABEL_123;
LABEL_124:
            v95 += 8;
            if (v107 >= v106 || (unint64_t)v96 >= v97)
              goto LABEL_150;
          }
          v112 = v107 + 8;
          if (v95 == v107)
          {
            v107 += 8;
            if (v95 < v112)
              goto LABEL_124;
          }
          else
          {
            v107 += 8;
          }
LABEL_123:
          *(_QWORD *)v95 = v109;
          goto LABEL_124;
        }
        v107 = v10;
LABEL_150:
        v96 = v95;
        v21 = v147;
LABEL_152:
        v123 = v106 - v107;
        v124 = v106 - v107 + 7;
        if (v123 >= 0)
          v124 = v123;
        v48 = v148;
        if (v123 <= -8)
          goto LABEL_219;
        v125 = v124 >> 3;
        if (v96 != v107 || v96 >= &v107[8 * v125])
        {
          v126 = v93;
          v127 = v91;
          memmove(v96, v107, 8 * v125);
          v93 = v126;
          v91 = v127;
        }
        if (v93 < v91)
          goto LABEL_178;
        if (v50 > *((_QWORD *)v19 + 2))
          goto LABEL_179;
        *(_QWORD *)v151 = v91;
        *(_QWORD *)&v148[16 * v50 - 8] = v93;
        v128 = *((_QWORD *)v19 + 2);
        if (v50 >= (uint64_t)v128)
          goto LABEL_180;
        v23 = v128 - 1;
        memmove(v150, v150 + 16, 16 * (v128 - 1 - v50));
        *((_QWORD *)v19 + 2) = v128 - 1;
        v10 = __dst;
        if (v128 <= 2)
          goto LABEL_22;
      }
    }
    v23 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_164:
    if (v23 >= 2)
    {
      v130 = *v137;
      while (1)
      {
        v131 = v23 - 2;
        if (v23 < 2)
          break;
        if (!v130)
          goto LABEL_218;
        v132 = v10;
        v133 = *(_QWORD *)&v19[16 * v131 + 32];
        v134 = *(_QWORD *)&v19[16 * v23 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v130 + 8 * v133), (char *)(v130 + 8 * *(_QWORD *)&v19[16 * v23 + 16]), v130 + 8 * v134, v10, a2);
        if (v141)
          goto LABEL_175;
        if (v134 < v133)
          goto LABEL_195;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
        if (v131 >= *((_QWORD *)v19 + 2))
          goto LABEL_196;
        v135 = &v19[16 * v131 + 32];
        *(_QWORD *)v135 = v133;
        *((_QWORD *)v135 + 1) = v134;
        v136 = *((_QWORD *)v19 + 2);
        if (v23 > v136)
          goto LABEL_197;
        memmove(&v19[16 * v23 + 16], &v19[16 * v23 + 32], 16 * (v136 - v23));
        *((_QWORD *)v19 + 2) = v136 - 1;
        v23 = v136 - 1;
        v10 = v132;
        if (v136 <= 2)
          goto LABEL_175;
      }
LABEL_194:
      __break(1u);
LABEL_195:
      __break(1u);
LABEL_196:
      __break(1u);
LABEL_197:
      __break(1u);
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
LABEL_202:
      __break(1u);
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
LABEL_205:
      __break(1u);
LABEL_206:
      __break(1u);
LABEL_207:
      __break(1u);
      goto LABEL_208;
    }
LABEL_175:
    swift_bridgeObjectRelease();
    *(_QWORD *)((v152 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
    specialized Array._endMutation()();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  uint64_t result;
  char *v23;
  double *v24;
  double *v25;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 15;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v25 = __src;
  v24 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v18 = &v4[2 * v13];
      v23 = (char *)v18;
      v25 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v19 = (double *)(a3 - 16);
        do
        {
          v20 = v19 + 2;
          if (*(v18 - 1) >= *(v6 - 1))
          {
            v23 = (char *)(v18 - 2);
            if (v20 < v18 || v19 >= v18 || v20 != v18)
              *(_OWORD *)v19 = *((_OWORD *)v18 - 1);
            v21 = v6;
            v18 -= 2;
            if (v6 <= v7)
              break;
          }
          else
          {
            v21 = v6 - 2;
            if (v20 != v6 || v19 >= v6)
              *(_OWORD *)v19 = *(_OWORD *)v21;
            v25 = v6 - 2;
            if (v21 <= v7)
              break;
          }
          v19 -= 2;
          v6 = v21;
        }
        while (v18 > v4);
      }
LABEL_44:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v25, (const void **)&v24, &v23);
      return 1;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[2 * v10];
    v23 = (char *)v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      v15 = v4;
      while (1)
      {
        if (v6[1] >= v15[1])
        {
          v4 = v15 + 2;
          v17 = v15;
          v16 = v6;
          if (v7 == v15)
          {
            v15 += 2;
            if (v7 < v4)
              goto LABEL_22;
          }
          else
          {
            v15 += 2;
          }
        }
        else
        {
          v16 = v6 + 2;
          v17 = v6;
          if (v7 == v6 && v7 < v16)
            goto LABEL_22;
        }
        *(_OWORD *)v7 = *(_OWORD *)v17;
LABEL_22:
        v7 += 2;
        if (v15 < v14)
        {
          v6 = v16;
          if ((unint64_t)v16 < a3)
            continue;
        }
        v24 = v4;
        v25 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  double *v20;
  double v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  double *v26;
  double *v27;
  char *v28;
  uint64_t v29;
  double *v30;
  double *v31;
  char *v32;
  double v33;
  uint64_t result;
  uint64_t *v35;
  uint64_t *v36;
  char *v37;

  v4 = (uint64_t *)__dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v37 = __src;
  v36 = (uint64_t *)__dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v23 = &v4[v13];
      v35 = v23;
      v37 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v24 = (char *)(a3 - 8);
        while (1)
        {
          v25 = *(v23 - 1);
          v26 = (double *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if ((*(_BYTE *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
            break;
          v27 = (double *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          if ((*(_BYTE *)(v25 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
            goto LABEL_52;
          v28 = v6 - 8;
          v29 = *((_QWORD *)v6 - 1);
          if ((*(_BYTE *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition + 16) & 1) != 0)
            goto LABEL_53;
          if ((*(_BYTE *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
            goto LABEL_54;
          v32 = v24 + 8;
          v33 = v26[1] - v27[1];
          v31 = (double *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
          v30 = (double *)(v29 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition);
          if (v33 * v33 + (*v26 - *v27) * (*v26 - *v27) >= (v30[1] - v31[1]) * (v30[1] - v31[1])
                                                          + (*v30 - *v31) * (*v30 - *v31))
          {
            v35 = v23 - 1;
            if (v32 < (char *)v23 || v24 >= (char *)v23 || v32 != (char *)v23)
              *(_QWORD *)v24 = *(v23 - 1);
            --v23;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v32 != v6 || v24 >= v6)
              *(_QWORD *)v24 = v29;
            v37 = v6 - 8;
            v6 -= 8;
            if (v28 <= v7)
              goto LABEL_50;
          }
          v24 -= 8;
          if (v23 <= v4)
            goto LABEL_50;
        }
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
        goto LABEL_55;
      }
LABEL_50:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v37, (const void **)&v36, &v35);
      return 1;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v35 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      while (1)
      {
        v15 = *(_QWORD *)v6;
        v16 = *(_QWORD *)v6 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
        if ((*(_BYTE *)(v16 + 16) & 1) != 0)
          break;
        v17 = (double *)(v15 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
        if ((*(_BYTE *)(v15 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
          goto LABEL_56;
        v18 = *v4;
        v19 = *v4 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_composedPosition;
        if ((*(_BYTE *)(v19 + 16) & 1) != 0)
          goto LABEL_57;
        if ((*(_BYTE *)(v18 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition + 16) & 1) != 0)
          goto LABEL_58;
        v21 = *(double *)(v16 + 8) - v17[1];
        v20 = (double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_peripheralPosition);
        if (v21 * v21 + (*(double *)v16 - *v17) * (*(double *)v16 - *v17) >= (*(double *)(v19 + 8) - v20[1])
                                                                            * (*(double *)(v19 + 8) - v20[1])
                                                                            + (*(double *)v19 - *v20)
                                                                            * (*(double *)v19 - *v20))
        {
          if (v7 != (char *)v4)
            *(_QWORD *)v7 = v18;
          v36 = ++v4;
          v22 = v6;
        }
        else
        {
          v22 = v6 + 8;
          if (v7 < v6 || v7 >= v22 || v7 != v6)
            *(_QWORD *)v7 = v15;
        }
        v7 += 8;
        if (v4 < v14)
        {
          v6 = v22;
          if ((unint64_t)v22 < a3)
            continue;
        }
        v37 = v7;
        goto LABEL_50;
      }
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      __break(1u);
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
    goto LABEL_50;
  }
LABEL_59:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t *a5)
{
  char *v6;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t result;
  char *v29;
  const void *v30;
  char *v31;

  v6 = __dst;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = a2 - __src + 7;
  if (a2 - __src >= 0)
    v11 = a2 - __src;
  v12 = v11 >> 3;
  v13 = a3 - (_QWORD)a2;
  v14 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v14 = a3 - (_QWORD)a2;
  v15 = v14 >> 3;
  v31 = __src;
  v30 = __dst;
  if (v12 >= v14 >> 3)
  {
    if (v13 >= -7)
    {
      if (__dst != a2 || &a2[8 * v15] <= __dst)
        memmove(__dst, a2, 8 * v15);
      v20 = &v6[8 * v15];
      v29 = v20;
      v31 = v8;
      if (v9 < v8 && v13 >= 8)
      {
        v21 = (char *)(a3 - 8);
        while (1)
        {
          v22 = *a5;
          v23 = *((_QWORD *)v20 - 1) + *a5;
          if ((*(_BYTE *)(v23 + 16) & 1) != 0)
            break;
          v24 = v8 - 8;
          v25 = *((_QWORD *)v8 - 1);
          v26 = v25 + v22;
          if ((*(_BYTE *)(v25 + v22 + 16) & 1) != 0)
            goto LABEL_49;
          v27 = v21 + 8;
          if (*(double *)(v23 + 8) >= *(double *)(v26 + 8))
          {
            v29 = v20 - 8;
            if (v27 < v20 || v21 >= v20 || v27 != v20)
              *(_QWORD *)v21 = *((_QWORD *)v20 - 1);
            v24 = v8;
            v20 -= 8;
            if (v8 <= v9)
              goto LABEL_47;
          }
          else
          {
            if (v27 != v8 || v21 >= v8)
              *(_QWORD *)v21 = v25;
            v31 = v8 - 8;
            if (v24 <= v9)
              goto LABEL_47;
          }
          v21 -= 8;
          v8 = v24;
          if (v20 <= v6)
            goto LABEL_47;
        }
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
LABEL_47:
      specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v31, &v30, &v29);
      return 1;
    }
  }
  else if (v10 >= -7)
  {
    if (__dst != __src || &__src[8 * v12] <= __dst)
      memmove(__dst, __src, 8 * v12);
    v16 = &v6[8 * v12];
    v29 = v16;
    if ((unint64_t)v8 < a3 && v10 >= 8)
    {
      while (1)
      {
        v17 = *(_QWORD *)v8 + *a5;
        if ((*(_BYTE *)(v17 + 16) & 1) != 0)
          break;
        v18 = *(_QWORD *)v6 + *a5;
        if ((*(_BYTE *)(v18 + 16) & 1) != 0)
          goto LABEL_51;
        if (*(double *)(v17 + 8) >= *(double *)(v18 + 8))
        {
          if (v9 != v6 || v9 >= v6 + 8)
            *(_QWORD *)v9 = *(_QWORD *)v6;
          v30 = v6 + 8;
          v19 = v8;
          v6 += 8;
        }
        else
        {
          v19 = v8 + 8;
          if (v9 < v8 || v9 >= v19 || v9 != v8)
            *(_QWORD *)v9 = *(_QWORD *)v8;
        }
        v9 += 8;
        if (v6 < v16)
        {
          v8 = v19;
          if ((unint64_t)v19 < a3)
            continue;
        }
        v31 = v9;
        goto LABEL_47;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    goto LABEL_47;
  }
LABEL_52:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CGPoint>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SKNode] and conformance [A](&lazy protocol witness table cache variable for type [FMPFSKPatternFragmentNode] and conformance [A], &demangling cache variable for type metadata for [FMPFSKPatternFragmentNode]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [FMPFSKPatternFragmentNode]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for FMPFSKPatternFragmentNode();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SKNode] and conformance [A](&lazy protocol witness table cache variable for type [SKNode] and conformance [A], &demangling cache variable for type metadata for [SKNode]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SKNode]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for SKNode);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22075C8C0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x22075C8C0](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
  JUMPOUT(0x22075CA28);
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew()(_QWORD *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id specialized FMPFSKPatternNode.arrowFragmentNodesWith(spineBottom:spineTop:dotCount:ignoreTop:dotDiameter:explodedDiskRadius:peripheralDiskRadius:color:conformedToExplodedFactor:conformationFactor:startIndex:)(double *a1, unint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14)
{
  uint64_t *v14;
  __int128 *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id result;
  char *v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  double v37;
  __double2 v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  double v46;
  id v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjCClassFromMetadata;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  char v62;
  char v63;
  uint64_t v64;
  double v65;
  uint64_t *v66;
  double v67;
  double v68;
  uint64_t v69;
  void *v74;
  double v75;
  double v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  LOBYTE(v18) = a7;
  LOBYTE(v19) = a5;
  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKNode()), sel_init);
  v74 = result;
  v79 = MEMORY[0x24BEE4AF8];
  v29 = (char *)a1 - 1;
  if (__OFSUB__(a1, 1))
    goto LABEL_23;
  v17 = (uint64_t)a1 - (a2 & 1);
  v69 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType;
  if (*((_BYTE *)v14 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
  {
    a1 = (double *)&xmmword_25513FF28 + 1;
    a2 = (unint64_t)&xmmword_25513FF48 + 8;
    v15 = &xmmword_25513FF48;
    v16 = (double *)&xmmword_25513FF38 + 1;
    if (one-time initialization token for r1NoAR != -1)
    {
      result = (id)swift_once();
      if ((v17 & 0x8000000000000000) == 0)
        goto LABEL_8;
      goto LABEL_26;
    }
  }
  else
  {
    a1 = (double *)&xmmword_25513FE58 + 1;
    a2 = (unint64_t)&xmmword_25513FE78 + 8;
    v15 = &xmmword_25513FE78;
    v16 = (double *)&xmmword_25513FE68 + 1;
    if (one-time initialization token for r1OrBT != -1)
      goto LABEL_25;
  }
  if (v17 < 0)
  {
LABEL_26:
    __break(1u);
    return result;
  }
LABEL_8:
  while (v17)
  {
    v67 = *v16 * 0.5;
    v68 = *v16 * -0.5;
    if (v68 <= v67)
    {
      v64 = v17;
      v66 = v14;
      v62 = v18 & 1;
      v63 = v19 & 1;
      v61 = (a11 - a9) / (double)(uint64_t)v29;
      v59 = *(_QWORD *)v15;
      v60 = *(double *)a2;
      v57 = (a12 - a10) / (double)(uint64_t)v29;
      v58 = *a1;
      type metadata accessor for FMPFView();
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
      v17 = objc_opt_self();
      v30 = objc_opt_self();
      v19 = (void *)v30;
      v18 = 0;
      a2 = 0x800000021B0FFF90;
      v65 = a14;
      while (1)
      {
        v76 = a9;
        a9 = a10;
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v30, v68, v67);
        a11 = 1.0;
        v32 = (1.0 - v31) * a14;
        a12 = FMPFSKQuadrant.randomPositionAlongDiskWithRadius(_:defaultAngle:multiplier:clockwise:)(*(uint64_t *)&v32, 0, 0, 1, 2u, 8);
        a10 = v33;
        v35 = v34;
        v36 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
        a14 = 1.0;
        v37 = v36 == 0x20000000000000 ? 1.0 : ((double)(unint64_t)v36 * 1.11022302e-16 * 100.0 + 0.0) / 100.0;
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v36, 0.0, 3.14159265);
        specialized RandomNumberGenerator.next<A>(upperBound:)(0x7FFFFFFFFFFFFFFFLL);
        v38 = __sincos_stret(a12);
        if (__OFADD__(a8, v18))
          break;
        v77 = 0x746E656D67617246;
        v78 = 0xE900000000000023;
        v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v41 = v77;
        v40 = v78;
        v42 = objc_msgSend((id)v17, sel_bundleForClass_, ObjCClassFromMetadata);
        v43 = (void *)MEMORY[0x22075C584](0xD000000000000016, 0x800000021B0FFF90);
        v44 = objc_msgSend(v19, sel_imageNamed_inBundle_compatibleWithTraitCollection_, v43, v42, 0);

        v75 = a10;
        if (v44)
        {
          v45 = objc_msgSend((id)objc_opt_self(), sel_textureWithImage_, v44);

          v42 = v44;
        }
        else
        {
          v45 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9ED0]), sel_init);
        }
        v46 = a13 - v58 * ((1.0 - v37) * a13);

        LOBYTE(v77) = *((_BYTE *)v66 + v69);
        v16 = (double *)objc_allocWithZone((Class)type metadata accessor for FMPFSKPatternFragmentNode());
        v47 = a3;
        a1 = (double *)v45;
        v48 = a9;
        *(double *)&v54 = v38.__cosval * v46;
        *(double *)&v55 = v38.__sinval * v46;
        a14 = v65;
        v53 = FMPFSKPatternFragmentNode.init(experienceType:name:color:randomFactor:texture:imageName:minScaleFactor:maxScaleFactor:explodedDiskRadius:peripheralDiskRadius:innerPeripheralDiskRadius:explodedPosition:peripheralPosition:composedPosition:conformedToExplodedFactor:conformationFactor:scalingFactor:)((unsigned __int8 *)&v77, v41, v40, a3, v45, 0, 0, v59, v37, a13 - v58 * ((1.0 - v37) * a13), v65, v32, v49, v50, v51, v52, 0, v60, 0,
                v54,
                v55,
                0,
                v75,
                v35,
                0,
                *(uint64_t *)&v76,
                *(uint64_t *)&a9,
                0,
                a4,
                v63,
                a6,
                v62,
                0,
                0);
        objc_msgSend(v74, sel_addChild_, v53);
        v29 = v53;
        v14 = &v79;
        MEMORY[0x22075C638]();
        v15 = *(__int128 **)((v79 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if ((unint64_t)v15 >= *(_QWORD *)((v79 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        ++v18;
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

        a9 = v61 + v76;
        a10 = v57 + v48;
        if (v64 == v18)
          return v74;
      }
      __break(1u);
LABEL_23:
      __break(1u);
    }
    __break(1u);
LABEL_25:
    result = (id)swift_once();
    if (v17 < 0)
      goto LABEL_26;
  }
  return v74;
}

uint64_t specialized FMPFSKPatternNode.tapeFragmentNodesWith(spineBottom:spineTop:dotCount:dotDiameter:peripheralDiskRadius:color:conformationFactor:startIndex:)(uint64_t a1, __int128 *a2, uint64_t a3, char a4, uint64_t a5, double sinval, double a7, double a8, double cosval, double a10)
{
  uint64_t v10;
  unint64_t v11;
  objc_class *v18;
  uint64_t v19;
  double *v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  __double2 v42;
  unint64_t v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  long double v61;
  double v62;
  double v63;
  unint64_t v64;
  double v65;
  double v66;
  __double2 v67;
  double v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  __int128 *v73;
  double v74;
  double v75;
  double v76;
  double v77;
  char *v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  double v85;
  uint64_t v86;
  id v87;
  __int128 *v88;
  id v89;
  id v90;
  id v91;
  double v92;
  char v93;
  double v94;
  __int128 v95;
  __int128 v96;
  double v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  double v101;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD v112[9];

  LOBYTE(v11) = a4;
  v18 = (objc_class *)type metadata accessor for FMPFSKNode();
  v19 = (uint64_t)&selRef_tabSelectorControl_didSelectIndex_previousIndex_;
  v106 = objc_msgSend(objc_allocWithZone(v18), sel_init);
  v111 = MEMORY[0x24BEE4AF8];
  v107 = v10;
  v105 = OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType;
  if (*(_BYTE *)(v10 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType) == 1)
  {
    v20 = (double *)&xmmword_25513FF38 + 1;
    v21 = (double *)&xmmword_25513FF48 + 1;
    v22 = (uint64_t)&xmmword_25513FF48;
    if (one-time initialization token for r1NoAR != -1)
      swift_once();
  }
  else
  {
    v20 = (double *)&xmmword_25513FE68 + 1;
    v21 = (double *)&xmmword_25513FE78 + 1;
    v22 = (uint64_t)&xmmword_25513FE78;
    if (one-time initialization token for r1OrBT != -1)
      goto LABEL_82;
  }
  while (1)
  {
    if (a1 <= 1)
      v23 = 1;
    else
      v23 = a1;
    if (__OFSUB__(a1, 1))
      goto LABEL_79;
    v100 = *(_QWORD *)v22;
    v101 = *v21;
    v24 = *v20;
    v25 = (double)(a1 - 1);
    v19 = (uint64_t)objc_msgSend(objc_allocWithZone(v18), *(SEL *)(v19 + 4088));
    v26 = v107 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
    v92 = 0.0;
    if ((*(_BYTE *)(v107 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config + 64) & 1) != 0
      || (*(_BYTE *)(v26 + 80) & 1) != 0)
    {
      v99 = 1;
      if (a1 < 0)
        goto LABEL_74;
    }
    else
    {
      v99 = 0;
      v92 = -(*(double *)(v26 + 72) - *(double *)(v26 + 56)) / v25;
      if (a1 < 0)
      {
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        __break(1u);
LABEL_79:
        __break(1u);
LABEL_80:
        __break(1u);
        goto LABEL_81;
      }
    }
    v98 = v107 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_config;
    if (a1)
    {
      v27 = a8 - sinval;
      v28 = cosval - a7;
      a8 = 6.28318531 / (double)v23;
      v29 = v27 / v25;
      v30 = v28 / v25;
      v31 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x24BEE4AF8]);
      v33 = v32[2];
      v34 = 2 * v33;
      v35 = a1;
      do
      {
        v36 = v32[3];
        v37 = v33 + 1;
        if (v33 >= v36 >> 1)
          v32 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v36 > 1), v33 + 1, 1, v32);
        v32[2] = v37;
        v38 = (double *)&v32[v34];
        v38[4] = sinval;
        v38[5] = a7;
        sinval = v29 + sinval;
        a7 = v30 + a7;
        v34 += 2;
        v33 = v37;
        --v35;
      }
      while (v35);
      v110 = v31;
      v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, v31);
      v40 = v39[2];
      v41 = 2 * v40;
      a7 = -2.22044605e-16;
      do
      {
        v42 = __sincos_stret(a7);
        sinval = v42.__sinval;
        cosval = v42.__cosval;
        v43 = v39[3];
        if (v40 >= v43 >> 1)
          v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v43 > 1), v40 + 1, 1, v39);
        v39[2] = v40 + 1;
        v44 = (double *)&v39[v41];
        v44[4] = v42.__cosval * a10;
        v44[5] = v42.__sinval * a10;
        a7 = a7 - a8;
        v41 += 2;
        ++v40;
        --a1;
      }
      while (a1);
    }
    else
    {
      v39 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v32 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v110 = v39;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v110, (uint64_t (*)(uint64_t))specialized _ArrayBuffer._consumeAndCreateNew());
    v45 = (uint64_t)v110;
    v46 = v110[2];
    if (v46)
    {
      swift_bridgeObjectRetain();
      v47 = 0;
      v48 = MEMORY[0x24BEE4AF8];
      do
      {
        v51 = v45 + 16 * v47;
        if (*(double *)(v51 + 40) < 0.0)
        {
          v95 = *(_OWORD *)(v51 + 32);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v112[0] = v48;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v48 + 16) + 1, 1);
            v48 = v112[0];
          }
          v22 = *(_QWORD *)(v48 + 16);
          v49 = *(_QWORD *)(v48 + 24);
          v50 = v95;
          if (v22 >= v49 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v22 + 1, 1);
            v50 = v95;
            v48 = v112[0];
          }
          *(_QWORD *)(v48 + 16) = v22 + 1;
          *(_OWORD *)(v48 + 16 * v22 + 32) = v50;
        }
        ++v47;
      }
      while (v46 != v47);
      swift_bridgeObjectRelease();
    }
    else
    {
      v48 = MEMORY[0x24BEE4AF8];
    }
    v112[0] = v48;
    specialized MutableCollection<>.shuffle<A>(using:)();
    v20 = (double *)v112[0];
    v21 = *(double **)(v45 + 16);
    if (v21)
    {
      swift_bridgeObjectRetain();
      v22 = 0;
      v53 = MEMORY[0x24BEE4AF8];
      do
      {
        v56 = v45 + 16 * v22;
        if (*(double *)(v56 + 40) >= 0.0)
        {
          v96 = *(_OWORD *)(v56 + 32);
          v57 = swift_isUniquelyReferenced_nonNull_native();
          v112[0] = v53;
          if ((v57 & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v53 + 16) + 1, 1);
            v53 = v112[0];
          }
          a1 = *(_QWORD *)(v53 + 16);
          v54 = *(_QWORD *)(v53 + 24);
          v55 = v96;
          if (a1 >= v54 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, a1 + 1, 1);
            v55 = v96;
            v53 = v112[0];
          }
          *(_QWORD *)(v53 + 16) = a1 + 1;
          *(_OWORD *)(v53 + 16 * a1 + 32) = v55;
        }
        ++v22;
      }
      while (v21 != (double *)v22);
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = MEMORY[0x24BEE4AF8];
    }
    swift_bridgeObjectRelease();
    v112[0] = v53;
    specialized MutableCollection<>.shuffle<A>(using:)();
    v58 = v112[0];
    v112[0] = v20;
    v59 = specialized Array.append<A>(contentsOf:)(v58);
    v18 = (objc_class *)v112[0];
    v60 = *(_QWORD *)(v112[0] + 16);
    if (!v60)
      break;
    v94 = v24 * 0.5;
    v97 = v24 * -0.5;
    if (v24 * -0.5 > v24 * 0.5)
      goto LABEL_80;
    if ((unint64_t)v60 <= v32[2])
    {
      v91 = (id)v19;
      v20 = 0;
      v19 = 0;
      v93 = v11 & 1;
      sinval = 1.0;
      v21 = (double *)0x800000021B100100;
      while (1)
      {
        v61 = *(double *)((char *)v20 + (_QWORD)v18 + 32);
        a7 = *(double *)((char *)v20 + (_QWORD)v18 + 40);
        cosval = *(double *)((char *)v20 + (_QWORD)v32 + 32);
        a8 = *(double *)((char *)v20 + (_QWORD)v32 + 40);
        specialized static BinaryFloatingPoint<>.random<A>(in:using:)(v59, v97, v94);
        v63 = v62;
        v64 = specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001);
        if (__OFADD__(a5, v19))
          goto LABEL_75;
        if (v64 == 0x20000000000000)
          v65 = 1.0;
        else
          v65 = ((double)v64 * 1.11022302e-16 * 100.0 + 0.0) / 100.0;
        v66 = atan2(a7, v61);
        v67 = __sincos_stret(v66);
        v68 = (1.0 - v63) * a10;
        a7 = v68 * v67.__sinval;
        v108 = 0x746E656D67617246;
        v109 = 0xE900000000000023;
        v69._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v69);
        swift_bridgeObjectRelease();
        v70 = v108;
        v71 = v109;
        LOBYTE(v108) = *(_BYTE *)(v107 + v105);
        v72 = objc_allocWithZone((Class)type metadata accessor for FMPFSKPatternFragmentNode());
        v22 = (uint64_t)a2;
        v73 = a2;
        v78 = FMPFSKPatternFragmentNode.init(experienceType:name:color:randomFactor:texture:imageName:minScaleFactor:maxScaleFactor:explodedDiskRadius:peripheralDiskRadius:innerPeripheralDiskRadius:explodedPosition:peripheralPosition:composedPosition:conformedToExplodedFactor:conformationFactor:scalingFactor:)((unsigned __int8 *)&v108, v70, v71, a2, 0, 0xD000000000000015, 0x800000021B100100, v100, v65, v68, a10, v68, v74, v75, v76, v77, 0, v101, 0,
                COERCE__INT64(v68 * v67.__cosval),
                *(uint64_t *)&a7,
                0,
                v68 * v67.__cosval,
                a7,
                0,
                *(uint64_t *)&cosval,
                *(uint64_t *)&a8,
                0,
                0,
                0,
                a3,
                v93,
                0,
                0);
        objc_msgSend(v106, sel_addChild_, v78);
        a1 = v78;
        MEMORY[0x22075C638]();
        v11 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v11 >= *(_QWORD *)((v111 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        result = specialized Array._endMutation()();
        if ((v99 & 1) == 0
          && *(_BYTE *)(v98 + 80) != 1
          && (*(_BYTE *)(v98 + 16) & 1) == 0
          && (*(_BYTE *)(v98 + 96) & 1) == 0)
        {
          v80 = *(_QWORD *)(v98 + 8);
          v81 = v80 + 1;
          if (__OFADD__(v80, 1))
            goto LABEL_76;
          v82 = *(_QWORD *)(v98 + 88);
          v83 = v81 * v82;
          if ((unsigned __int128)(v81 * (__int128)v82) >> 64 != (v81 * v82) >> 63)
            goto LABEL_77;
          if (!v83)
            goto LABEL_78;
          if (!(v19 % v83))
          {
            v84 = round((v92 * (double)v19 + *(double *)(v98 + 72)) * 10.0) / 10.0;
            v85 = v84 * 10.0;
            if ((~COERCE__INT64(v84 * 10.0) & 0x7FF0000000000000) == 0)
            {
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              __break(1u);
              return result;
            }
            if (v85 <= -9.22337204e18)
              goto LABEL_84;
            if (v85 >= 9.22337204e18)
              goto LABEL_85;
            v86 = (uint64_t)v85;
            v22 = (uint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16F0]), sel_init);
            objc_msgSend((id)v22, sel_setNumberStyle_, 1);
            if (__ROR8__(0xCCCCCCCCCCCCCCCDLL * v86 + 0x1999999999999998, 1) <= 0x1999999999999998uLL)
            {
              objc_msgSend((id)v22, sel_setMaximumFractionDigits_, 0);
            }
            else
            {
              objc_msgSend((id)v22, sel_setMinimumFractionDigits_, 1);
              objc_msgSend((id)v22, sel_setMaximumFractionDigits_, 1);
            }
            v11 = (unint64_t)objc_msgSend(objc_allocWithZone(MEMORY[0x24BDD16E0]), sel_initWithDouble_, v84);
            v87 = objc_msgSend((id)v22, sel_stringFromNumber_, v11);

            if (v87)
            {
              v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v22 = (uint64_t)v88;

              LOBYTE(v108) = *(_BYTE *)(v107 + v105);
              outlined init with take of FMPFSKLabelNodeStyle?(v98 + 120, (uint64_t)v112);
              v89 = objc_allocWithZone((Class)type metadata accessor for FMPFSKLabelNode());
              outlined retain of FMPFSKLabelNodeStyle?((uint64_t)v112);
              v90 = FMPFSKLabelNode.init(experienceType:style:text:position:normalizedIndex:)(&v108, (uint64_t)v112, v11, v22, cosval, a8, 1.0 - (double)v19 / (double)v60);
              objc_msgSend(v91, sel_addChild_, v90);

            }
          }
        }
        ++v19;

        v20 += 2;
        if (v60 == v19)
          goto LABEL_72;
      }
    }
LABEL_81:
    __break(1u);
LABEL_82:
    swift_once();
  }
LABEL_72:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (uint64_t)v106;
}

uint64_t lazy protocol witness table accessor for type [SKNode] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22075D454](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined retain of FMPFSKLabelNodeStyle?(uint64_t a1)
{
  outlined copy of FMPFSKLabelNodeStyle?(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(a1 + 16));
  return a1;
}

Swift::Void __swiftcall FMPFSKPeripheralDotNode.updateWithDeltaTime(_:)(Swift::Double a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  double v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double *v13;
  double v14;
  double *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  double *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  double v26;
  double *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double *v31;
  double v32;
  double *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double *v42;
  double v43;
  uint64_t v44;
  double *v45;
  double v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double *v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  if (v1[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDiskRadius] == 1)
  {
    v4 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring;
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskRadiusSpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v6 = *(_QWORD *)&v2[v4];
      v7 = (double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v8 = v7[35] + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      if (vabdd_f64(v8, *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v8 = *v7 + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      v9 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDiskRadius];
      *v9 = v8;
      *((_BYTE *)v9 + 8) = 0;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_diskNode], sel_setPosition_, 0.0);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyDotScale] == 1)
  {
    v10 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring;
    v11 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotScaleSpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v11 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v12 = *(_QWORD *)&v2[v10];
      v13 = (double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v14 = *v13 + *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v13[35] + *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v14) <= *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v14 = v13[35] + *(double *)(v12 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      v15 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedDotScale];
      *v15 = v14;
      *((_BYTE *)v15 + 8) = 0;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setScale_, v14 * *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_subScale]);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyAngle] == 1)
  {
    v16 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring;
    v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_angleSpring];
    if (!FMPFFluidSpring.isStable.getter()
      && v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interactiveAngleFactor + 8] == 1)
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v17 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v18 = *(_QWORD *)&v2[v16];
      v19 = (double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v20 = *v19 + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v20) <= *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v20 = v19[35] + *(double *)(v18 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      v21 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAngle];
      *v21 = v20;
      *((_BYTE *)v21 + 8) = 0;
      if (!*(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
        objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_gimbalNode], sel_setZRotation_);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOpacity] == 1)
  {
    v22 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring;
    v23 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_opacitySpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v23 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v24 = *(_QWORD *)&v2[v22];
      v25 = (double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      if (vabdd_f64(v25[35] + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v25 + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v24+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v26 = *v25 + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      else
        v26 = v25[35] + *(double *)(v24 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      v27 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOpacity];
      *v27 = v26;
      *((_BYTE *)v27 + 8) = 0;
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotNode], sel_setAlpha_, v26);
      objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode], sel_setAlpha_, v26);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyBrightness] == 1)
  {
    v28 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightnessSpring;
    v29 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_brightnessSpring];
    if (!FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v29 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v30 = *(_QWORD *)&v2[v28];
      v31 = (double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      if (vabdd_f64(v31[35] + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v31 + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v30+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v32 = *v31 + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      else
        v32 = v31[35] + *(double *)(v30 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      v33 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedBrightness];
      *v33 = v32;
      *((_BYTE *)v33 + 8) = 0;
      v34 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_renderingColor];
      v35 = *(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotCGPathNode];
      v36 = v34;
      FMPFSKSpriteNode.setBrightness(_:with:)(v36, v32);

    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyOffset] == 1)
  {
    v37 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring;
    v38 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_xOffsetSpring];
    if (!FMPFFluidSpring.isStable.getter() || !FMPFFluidSpring.isStable.getter())
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v38 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v39 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring;
      v40 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_yOffsetSpring];
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v40 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v41 = *(_QWORD *)&v2[v37];
      v42 = (double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      if (vabdd_f64(v42[35] + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), *v42 + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v41+ OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))v43 = *v42 + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      else
        v43 = v42[35] + *(double *)(v41 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      v44 = *(_QWORD *)&v2[v39];
      v45 = (double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v46 = v45[35] + *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      if (vabdd_f64(v46, *v45 + *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o)) > *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v46 = *v45 + *(double *)(v44 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      v47 = (double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedOffset];
      *v47 = v43;
      v47[1] = v46;
      *((_BYTE *)v47 + 16) = 0;
      objc_msgSend(v2, sel_setPosition_, v43);
    }
  }
  if (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_shouldApplyRadiusFactor] == 1)
  {
    v48 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactorSpring;
    v49 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactorSpring];
    if (!FMPFFluidSpring.isStable.getter()
      && (v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_radiusFactor + 8] & 1) == 0)
    {
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v49 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v50 = *(_QWORD *)&v2[v48];
      v51 = (double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v52 = *v51 + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v52) <= *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v52 = v51[35] + *(double *)(v50 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      FMPFSKPeripheralDotNode.applyRadiusFactor(_:)(v52);
    }
  }
  v53 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring;
  v54 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_headingSpring];
  if (!FMPFFluidSpring.isStable.getter()
    && *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_perimeterRotateOnceAction])
  {
    FLSpring.step(_:)(a1);
    *(_BYTE *)(v54 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
    v55 = *(_QWORD *)&v2[v53];
    v56 = (double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
    swift_beginAccess();
    v57 = *v56 + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
    if (vabdd_f64(v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v57) <= *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
      v57 = v56[35] + *(double *)(v55 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
    *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedAbsoluteHeading] = v57;
    objc_msgSend(v2, sel_setZRotation_, v57 / 180.0 * 3.14159265);
  }
  v58 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode];
  v59 = *(_QWORD *)(v58 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode);
  v60 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_sizeSpring);
  FLSpring.step(_:)(a1);
  *(_BYTE *)(v60 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  v61 = *(_QWORD *)(v59 + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring);
  FLSpring.step(_:)(a1);
  *(_BYTE *)(v61 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
  FMPFSKBTRangeDiskNode.render()();
  FMPFSKBTRangeDotNode.update(delta:)(a1);
  v62 = *(_QWORD *)(*(_QWORD *)(v58 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode)
                  + OBJC_IVAR____TtC10TVRemoteUI18FMPFSKBTLevelsNode_ringNodes);
  if (!(v62 >> 62))
  {
    v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v63)
      goto LABEL_52;
LABEL_59:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  v63 = _CocoaArrayWrapper.endIndex.getter();
  if (!v63)
    goto LABEL_59;
LABEL_52:
  if (v63 >= 1)
  {
    v64 = 0;
    do
    {
      if ((v62 & 0xC000000000000001) != 0)
        v65 = (char *)MEMORY[0x22075C8C0](v64, v62);
      else
        v65 = (char *)*(id *)(v62 + 8 * v64 + 32);
      v66 = v65;
      ++v64;
      v67 = *(_QWORD *)&v65[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_visibilitySpring];
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v67 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v68 = *(_QWORD *)&v66[OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTLevelRingNode_collapseSpring];
      FLSpring.step(_:)(a1);
      *(_BYTE *)(v68 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      FMPFSKBTLevelRingNode.render()();

    }
    while (v63 != v64);
    goto LABEL_59;
  }
  __break(1u);
}

void FMPFSKPeripheralDotNode.applyRadiusFactor(_:)(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;

  v3 = v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_presentedRadiusFactor;
  *(double *)v3 = a1;
  *(_BYTE *)(v3 + 8) = 0;
  v4 = v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style;
  v5 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_style + 72);
  v6 = *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_pixelsPerInch);
  v7 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v7, sel_scale);
  v9 = v8;

  v10 = (1.0 - a1) * *(double *)(v4 + 48) + *(double *)(v4 + 40) * a1;
  v11 = OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode;
  v12 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_interativeRadiusBeaconNode);
  if (v12)
    objc_msgSend(v12, sel_setScale_, (1.0 - a1) * *(double *)(v4 + 80)+ v5 * v6 / v9 / *(double *)(v1 + OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_dotDiameter) * a1);
  v15 = objc_msgSend(*(id *)(v4 + 56), sel_colorWithAlphaComponent_, v10);
  v13 = *(void **)(v1 + v11);
  if (v13)
  {
    v14 = v13;
    objc_msgSend(v14, sel_setColor_, v15);

  }
}

uint64_t thunk for @escaping @callee_unowned @convention(block) () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

id TVRUITipManager.popoverPresentationConductor.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  objc_class *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  objc_super v10;

  v1 = OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor;
  v2 = *(void **)(v0 + OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor);
  }
  else
  {
    v4 = (objc_class *)type metadata accessor for TipPopoverPresentationConductor();
    v5 = objc_allocWithZone(v4);
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    v10.receiver = v5;
    v10.super_class = v4;
    v6 = objc_msgSendSuper2(&v10, sel_init);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

uint64_t TVRUITipManager.init(tipSourceViewProvider:tipType:)(void *a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t result;
  objc_super v8;

  *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_tipObservation] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_presentingViewController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_tipsViewController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_popoverPresentationController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager____lazy_storage___popoverPresentationConductor] = 0;
  if (a2 == 1)
  {
    v4 = OBJC_IVAR___TVRUITipManager_tip;
    *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_tip + 24] = &type metadata for SiriTip;
    v5 = lazy protocol witness table accessor for type SiriTip and conformance SiriTip();
LABEL_5:
    *(_QWORD *)&v2[v4 + 32] = v5;
    v8.receiver = v2;
    v8.super_class = (Class)TVRUITipManager;
    v6 = objc_msgSendSuper2(&v8, sel_init);
    TVRUITipManager.commonInit(tipSourceViewProvider:)(a1);

    return (uint64_t)v6;
  }
  if (!a2)
  {
    v4 = OBJC_IVAR___TVRUITipManager_tip;
    *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_tip + 24] = &type metadata for InfoTip;
    v5 = lazy protocol witness table accessor for type InfoTip and conformance InfoTip();
    goto LABEL_5;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id TVRUITipManager.commonInit(tipSourceViewProvider:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;

  v19 = a1;
  v1 = type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine();
  v16 = *(_QWORD *)(v1 - 8);
  v17 = v1;
  MEMORY[0x24BDAC7A8]();
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Tips.ConfigurationOption.DatastoreLocation();
  v14 = *(_QWORD *)(v4 - 8);
  v15 = v4;
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Tips.ConfigurationOption.DisplayFrequency();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8]();
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Tips.ConfigurationOption>);
  type metadata accessor for Tips.ConfigurationOption();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_21B0F8F80;
  static Tips.ConfigurationOption.DisplayFrequency.immediate.getter();
  static Tips.ConfigurationOption.displayFrequency(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  static Tips.ConfigurationOption.DatastoreLocation.tipsGroupContainer.getter();
  static Tips.ConfigurationOption.datastoreLocation(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v15);
  static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter();
  static Tips.ConfigurationOption.analyticsEngine(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v3, v17);
  static Tips.configure(_:)();
  swift_bridgeObjectRelease();
  v11 = *(void **)(v18 + OBJC_IVAR___TVRUITipManager_presentingViewController);
  *(_QWORD *)(v18 + OBJC_IVAR___TVRUITipManager_presentingViewController) = v19;

  return v19;
}

uint64_t TVRUITipManager.setupTipsObserver()()
{
  char *v0;
  char *v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD v19[2];
  _QWORD v20[5];
  uint64_t v21;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  result = MEMORY[0x24BDAC7A8]();
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR___TVRUITipManager_tipObservation;
  if (!*(_QWORD *)&v0[OBJC_IVAR___TVRUITipManager_tipObservation])
  {
    if (one-time initialization token for tip != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.tip);
    v7 = v0;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_DWORD *)v10 = 136315138;
      v21 = v11;
      v19[1] = v10 + 4;
      outlined init with copy of Tip((uint64_t)&v7[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v20);
      __swift_project_boxed_opaque_existential_1(v20, v20[3]);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
      v12 = _typeName(_:qualified:)();
      v20[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v8, v9, "Setting up tip observation for %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v11, -1, -1);
      MEMORY[0x22075D4E4](v10, -1, -1);

    }
    else
    {

    }
    v14 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v4, 1, 1, v14);
    type metadata accessor for MainActor();
    v15 = v7;
    v16 = static MainActor.shared.getter();
    v17 = (_QWORD *)swift_allocObject();
    v18 = MEMORY[0x24BEE6930];
    v17[2] = v16;
    v17[3] = v18;
    v17[4] = v15;
    *(_QWORD *)&v1[v5] = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in TVRUITipManager.setupTipsObserver(), (uint64_t)v17);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in TVRUITipManager.setupTipsObserver()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[6] = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Tips.Status?);
  v4[7] = swift_task_alloc();
  v5 = type metadata accessor for Tips.Status();
  v4[8] = v5;
  v4[9] = *(_QWORD *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>);
  v4[12] = swift_task_alloc();
  v4[13] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator);
  v4[14] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>);
  v4[15] = v6;
  v4[16] = *(_QWORD *)(v6 - 8);
  v4[17] = swift_task_alloc();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncMapSequence<AsyncStream<Tips.Status>, Bool>.Iterator);
  v4[18] = v7;
  v4[19] = *(_QWORD *)(v7 - 8);
  v4[20] = swift_task_alloc();
  v4[21] = swift_task_alloc();
  v4[22] = type metadata accessor for MainActor();
  v4[23] = static MainActor.shared.getter();
  v4[24] = dispatch thunk of Actor.unownedExecutor.getter();
  v4[25] = v8;
  return swift_task_switch();
}

uint64_t closure #1 in TVRUITipManager.setupTipsObserver()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = v0[17];
  v13 = v0[16];
  v2 = v0[15];
  v3 = (_QWORD *)(v0[6] + OBJC_IVAR___TVRUITipManager_tip);
  v4 = v3[3];
  v5 = __swift_project_boxed_opaque_existential_1(v3, v4);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = swift_task_alloc();
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v6 + 16))(v7, v5, v4);
  Tip.shouldDisplayUpdates.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v4);
  AsyncMapSequence.base.getter();
  lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status> and conformance AsyncStream<A>, &demangling cache variable for type metadata for AsyncStream<Tips.Status>, MEMORY[0x24BEE6AA8]);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncMapSequence.Iterator.transform.getter();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v1, v2);
  AsyncMapSequence.Iterator.init(_:transform:)();
  swift_task_dealloc();
  v8 = static MainActor.shared.getter();
  v0[26] = v8;
  if (v8)
  {
    swift_getObjectType();
    v9 = dispatch thunk of Actor.unownedExecutor.getter();
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  v0[27] = v9;
  v0[28] = v11;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  *(_QWORD *)(v0 + 232) = AsyncMapSequence.Iterator.baseIterator.modify();
  lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>(&lazy protocol witness table cache variable for type AsyncStream<Tips.Status>.Iterator and conformance AsyncStream<A>.Iterator, &demangling cache variable for type metadata for AsyncStream<Tips.Status>.Iterator, MEMORY[0x24BEE6A88]);
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 240) = v1;
  *v1 = v0;
  v1[1] = closure #1 in TVRUITipManager.setupTipsObserver();
  return _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (!v0)
    (*(void (**)(uint64_t, _QWORD))(v2 + 232))(v2 + 16, 0);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  _QWORD *v11;
  int *v12;

  v1 = v0[8];
  v2 = v0[9];
  v3 = v0[7];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of TaskPriority?(v3, &demangling cache variable for type metadata for Tips.Status?);
    swift_release();
    return swift_task_switch();
  }
  else
  {
    v6 = v0[20];
    v5 = v0[21];
    v7 = v0[18];
    v8 = v0[19];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(v0[10], v3, v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v5, v7);
    v9 = (int *)AsyncMapSequence.Iterator.transform.getter();
    v0[31] = v10;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    v12 = (int *)((char *)v9 + *v9);
    v11 = (_QWORD *)swift_task_alloc();
    v0[32] = v11;
    *v11 = v0;
    v11[1] = closure #1 in TVRUITipManager.setupTipsObserver();
    return ((uint64_t (*)(_QWORD *, _QWORD))v12)(v0 + 33, v0[10]);
  }
}

{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 232))(v0 + 16, 1);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 72);
  v2 = *(_QWORD *)(*v0 + 80);
  v4 = *(_QWORD *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  *(_BYTE *)(v1 + 265) = *(_BYTE *)(v1 + 264);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + 265) & 1) != 0)
    TVRUITipManager.showTip()();
  else
    specialized TVRUITipManager.hideTip(animated:completion:)(0, 0);
  v1 = static MainActor.shared.getter();
  *(_QWORD *)(v0 + 208) = v1;
  if (v1)
  {
    swift_getObjectType();
    v2 = dispatch thunk of Actor.unownedExecutor.getter();
    v4 = v3;
  }
  else
  {
    v2 = 0;
    v4 = 0;
  }
  *(_QWORD *)(v0 + 216) = v2;
  *(_QWORD *)(v0 + 224) = v4;
  return swift_task_switch();
}

{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void TVRUITipManager.showTip()()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _QWORD v29[3];
  uint64_t v30;
  uint64_t v31;

  if (one-time initialization token for tip != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.tip);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v31 = v6;
    outlined init with copy of Tip((uint64_t)&v2[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v29);
    __swift_project_boxed_opaque_existential_1(v29, v30);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    v7 = _typeName(_:qualified:)();
    v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v3, v4, "Show: %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v6, -1, -1);
    MEMORY[0x22075D4E4](v5, -1, -1);

  }
  else
  {

  }
  v9 = *(void **)&v2[OBJC_IVAR___TVRUITipManager_presentingViewController];
  if (!v9)
    goto LABEL_11;
  v10 = v9;
  v11 = objc_msgSend(v10, sel_tipSourceView);

  if (!v11
    || !objc_msgSend(v10, sel_canPresentTip)
    || (v12 = OBJC_IVAR___TVRUITipManager_tipsViewController,
        *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_tipsViewController]))
  {

LABEL_11:
    v13 = v2;
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      *(_DWORD *)v16 = 136315138;
      v31 = v17;
      outlined init with copy of Tip((uint64_t)&v13[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v29);
      __swift_project_boxed_opaque_existential_1(v29, v30);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
      v18 = _typeName(_:qualified:)();
      v29[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v14, v15, "Not showing: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v17, -1, -1);
      MEMORY[0x22075D4E4](v16, -1, -1);

    }
    else
    {

    }
    return;
  }
  outlined init with copy of Tip((uint64_t)&v2[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v29);
  if (!objc_msgSend(v10, sel_tipSourceView))
  {
    __break(1u);
    goto LABEL_20;
  }
  type metadata accessor for TipUIPopoverViewController();
  v20 = (void *)TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)();
  v21 = objc_msgSend(v20, sel_view);
  if (!v21)
  {
LABEL_20:
    __break(1u);
    return;
  }
  v22 = v21;
  v23 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  objc_msgSend(v22, sel_setTintColor_, v23);

  objc_msgSend(v20, sel_setOverrideUserInterfaceStyle_, 2);
  v24 = (void *)TipUIPopoverViewController.popoverPresentationController.getter();
  if (v24)
  {
    v25 = v24;
    objc_msgSend(v24, sel_setPermittedArrowDirections_, objc_msgSend(v10, sel_permittedArrowDirections));

  }
  TVRUITipManager.popoverPresentationConductor.getter();
  TipUIPopoverViewController.presentationDelegate.setter();
  v26 = TipUIPopoverViewController.popoverPresentationController.getter();
  v27 = *(void **)&v2[OBJC_IVAR___TVRUITipManager_popoverPresentationController];
  *(_QWORD *)&v2[OBJC_IVAR___TVRUITipManager_popoverPresentationController] = v26;

  objc_msgSend(v10, sel_presentViewController_animated_completion_, v20, 1, 0);
  v28 = *(void **)&v2[v12];
  *(_QWORD *)&v2[v12] = v20;

}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

Swift::Void __swiftcall TVRUITipManager.activate()()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  if (one-time initialization token for tip != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.tip);
  v2 = v0;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = swift_slowAlloc();
    *(_DWORD *)v5 = 136315138;
    v10 = v6;
    outlined init with copy of Tip((uint64_t)v2 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v9);
    __swift_project_boxed_opaque_existential_1(v9, v9[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    v7 = _typeName(_:qualified:)();
    v9[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v3, v4, "Activating %s", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v6, -1, -1);
    MEMORY[0x22075D4E4](v5, -1, -1);

  }
  else
  {

  }
  TVRUITipManager.setupTipsObserver()();
}

void closure #1 in TVRUITipManager.invalidate(_:completion:)(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  uint64_t v19;

  v3 = a1 + 16;
  swift_beginAccess();
  v4 = MEMORY[0x22075D574](v3);
  if (v4)
  {
    v5 = (void *)v4;
    if (one-time initialization token for tip != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.tip);
    v7 = v5;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      *(_DWORD *)v10 = 136315138;
      v19 = v11;
      outlined init with copy of Tip((uint64_t)&v7[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)v18);
      __swift_project_boxed_opaque_existential_1(v18, v18[3]);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
      v12 = _typeName(_:qualified:)();
      v18[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v8, v9, "Resetting TipsViewController: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v11, -1, -1);
      MEMORY[0x22075D4E4](v10, -1, -1);

    }
    else
    {

    }
    v14 = *(void **)&v7[OBJC_IVAR___TVRUITipManager_tipsViewController];
    *(_QWORD *)&v7[OBJC_IVAR___TVRUITipManager_tipsViewController] = 0;

    v15 = OBJC_IVAR___TVRUITipManager_tipObservation;
    if (*(_QWORD *)&v7[OBJC_IVAR___TVRUITipManager_tipObservation])
    {
      v16 = swift_retain();
      MEMORY[0x22075C6E0](v16, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
      swift_release();
    }
    *(_QWORD *)&v7[v15] = 0;
    v17 = swift_release();
    if (a2)
      ((void (*)(uint64_t))a2)(v17);

  }
  else if (a2)
  {
    a2();
  }
}

void closure #1 in TVRUITipManager.hideTip(animated:completion:)(void *a1, void (*a2)(void))
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  if (one-time initialization token for tip != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.tip);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v6, v7))
  {

    if (!a2)
      return;
    goto LABEL_7;
  }
  v8 = (uint8_t *)swift_slowAlloc();
  v9 = swift_slowAlloc();
  *(_DWORD *)v8 = 136315138;
  v13 = v9;
  outlined init with copy of Tip((uint64_t)v5 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v12);
  __swift_project_boxed_opaque_existential_1(v12, v12[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  v10 = _typeName(_:qualified:)();
  v12[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v13);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_21B042000, v6, v7, "Dismissed: %s", v8, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x22075D4E4](v9, -1, -1);
  MEMORY[0x22075D4E4](v8, -1, -1);

  if (a2)
LABEL_7:
    a2();
}

id TVRUITipManager.deinit()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  objc_super v4;

  v1 = OBJC_IVAR___TVRUITipManager_tipObservation;
  if (*(_QWORD *)&v0[OBJC_IVAR___TVRUITipManager_tipObservation])
  {
    v2 = swift_retain();
    MEMORY[0x22075C6E0](v2, MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
    swift_release();
  }
  *(_QWORD *)&v0[v1] = 0;
  swift_release();
  v4.receiver = v0;
  v4.super_class = (Class)TVRUITipManager;
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void __swiftcall TVRUITipManager.init()(TVRUITipManager *__return_ptr retstr)
{
  objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
}

void TVRUITipManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t type metadata accessor for TVRUITipManager()
{
  unint64_t result;

  result = lazy cache variable for type metadata for TVRUITipManager;
  if (!lazy cache variable for type metadata for TVRUITipManager)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for TVRUITipManager);
  }
  return result;
}

uint64_t closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  _QWORD v8[4];

  v2 = type metadata accessor for Tips.InvalidationReason();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v8[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Tip(a1 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v8);
  __swift_project_boxed_opaque_existential_1(v8, v8[3]);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BDF61F8], v2);
  Tip.invalidate(reason:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

id TipPopoverPresentationConductor.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TipPopoverPresentationConductor();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for TipPopoverPresentationConductor()
{
  return objc_opt_self();
}

uint64_t one-time initialization function for tip()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.tip);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.tip);
  return Logger.init(subsystem:category:)();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void specialized TVRUITipManager.hideTip(animated:completion:)(void (*a1)(void), uint64_t a2)
{
  void *v2;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  _QWORD aBlock[3];
  void *v20;
  void (*v21)();
  _QWORD *v22;

  if (objc_msgSend(v2, sel_isPresentingTip))
  {
    if (one-time initialization token for tip != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.tip);
    v6 = v2;
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      *(_DWORD *)v9 = 136315138;
      v18 = v10;
      outlined init with copy of Tip((uint64_t)&v6[OBJC_IVAR___TVRUITipManager_tip], (uint64_t)aBlock);
      __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v20);
      swift_getDynamicType();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      v11 = _typeName(_:qualified:)();
      aBlock[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v7, v8, "Hide tip: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v10, -1, -1);
      MEMORY[0x22075D4E4](v9, -1, -1);

    }
    else
    {

    }
    v13 = *(void **)&v6[OBJC_IVAR___TVRUITipManager_popoverPresentationController];
    if (v13)
    {
      v14 = objc_msgSend(v13, sel_presentedViewController);
      v15 = (_QWORD *)swift_allocObject();
      v15[2] = v6;
      v15[3] = a1;
      v15[4] = a2;
      v21 = partial apply for closure #1 in TVRUITipManager.hideTip(animated:completion:);
      v22 = v15;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      v20 = &block_descriptor_16;
      v16 = _Block_copy(aBlock);
      v17 = v6;
      outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)a1);
      swift_release();
      objc_msgSend(v14, sel_dismissViewControllerWithTransition_completion_, 6, v16);
      _Block_release(v16);

    }
  }
  else if (a1)
  {
    a1();
  }
}

uint64_t specialized TVRUITipManager.invalidate(_:completion:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD v16[5];
  uint64_t v17;

  if (one-time initialization token for tip != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.tip);
  v6 = v2;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    *(_DWORD *)v9 = 136315138;
    v17 = v10;
    outlined init with copy of Tip((uint64_t)v6 + OBJC_IVAR___TVRUITipManager_tip, (uint64_t)v16);
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    swift_getDynamicType();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    v11 = _typeName(_:qualified:)();
    v16[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v7, v8, "Hiding %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v10, -1, -1);
    MEMORY[0x22075D4E4](v9, -1, -1);

  }
  else
  {

  }
  v13 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = v13;
  v14[3] = a1;
  v14[4] = a2;
  swift_retain();
  outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(a1);
  specialized TVRUITipManager.hideTip(animated:completion:)(partial apply for closure #1 in TVRUITipManager.invalidate(_:completion:), (uint64_t)v14);
  swift_release();
  return swift_release();
}

void specialized TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v11[6];

  v1 = v0;
  if (one-time initialization token for tip != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.tip);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21B042000, v3, v4, "User dismissed popover", v5, 2u);
    MEMORY[0x22075D4E4](v5, -1, -1);
  }

  v6 = MEMORY[0x22075D574](v1 + OBJC_IVAR____TtC10TVRemoteUI31TipPopoverPresentationConductor_tipManager);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = swift_allocObject();
    *(_QWORD *)(v8 + 16) = v7;
    v11[4] = partial apply for closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:);
    v11[5] = v8;
    v11[0] = MEMORY[0x24BDAC760];
    v11[1] = 1107296256;
    v11[2] = thunk for @escaping @callee_guaranteed () -> ();
    v11[3] = &block_descriptor_8;
    v9 = _Block_copy(v11);
    v10 = v7;
    swift_release();
    objc_msgSend(v10, sel_invalidate_completion_, 1, v9);
    _Block_release(v9);

  }
}

uint64_t sub_21B0DE9F4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)()
{
  uint64_t v0;

  return closure #1 in TipPopoverPresentationConductor.presentationControllerDidDismiss(_:)(*(_QWORD *)(v0 + 16));
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t outlined init with copy of Tip(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_21B0DEA7C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject();
}

uint64_t _sIeyB_Ieg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_21B0DEAAC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_21B0DEAD0()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in TVRUITipManager.invalidate(_:completion:)()
{
  uint64_t v0;

  closure #1 in TVRUITipManager.invalidate(_:completion:)(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_21B0DEB10()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in TVRUITipManager.hideTip(animated:completion:)()
{
  uint64_t v0;

  closure #1 in TVRUITipManager.hideTip(animated:completion:)(*(void **)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_21B0DEB50()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TVRUITipManager.setupTipsObserver()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in TVRUITipManager.setupTipsObserver();
  return closure #1 in TVRUITipManager.setupTipsObserver()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in TVRUITipManager.setupTipsObserver()()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_21B0DEC30()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = partial apply for closure #1 in TVRUITipManager.setupTipsObserver();
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t lazy protocol witness table accessor for type AsyncStream<Tips.Status> and conformance AsyncStream<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x22075D454](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for FMPFViewStyle()
{
  return &type metadata for FMPFViewStyle;
}

char *FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(unsigned __int8 *a1, uint64_t a2, NSObject *a3, uint64_t a4, NSObject *a5, double a6, double a7)
{
  char *v7;
  char *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  id v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  double *v48;
  void *v49;
  os_log_t v50;
  NSObject *v51;
  objc_class *v52;
  char *v53;
  void *v54;
  char *v55;
  id v56;
  uint64_t v57;
  void *v58;
  void *v59;
  id v60;
  id v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  os_log_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  os_log_t v85;
  NSObject *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id aBlock[6];
  objc_super v91;

  v8 = v7;
  v85 = a3;
  v86 = a5;
  v88 = a4;
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v83 = *(_QWORD *)(v13 - 8);
  v84 = v13;
  MEMORY[0x24BDAC7A8](v13, v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v17, v18);
  v19 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v19, v20);
  LODWORD(v87) = *a1;
  v21 = &v8[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_style];
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)v21 = _Q0;
  *((_QWORD *)v21 + 2) = 0;
  v27 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode] = 0;
  v28 = &v8[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading];
  *(_QWORD *)v28 = 0;
  v28[8] = 1;
  v29 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager;
  v30 = objc_allocWithZone(MEMORY[0x24BDC1400]);
  v31 = v8;
  *(_QWORD *)&v8[v29] = objc_msgSend(v30, sel_init);
  *(_QWORD *)&v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation] = 0;
  *(_QWORD *)&v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation] = 0;
  v32 = &v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  *(_QWORD *)v32 = 0;
  v32[8] = 1;
  v33 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue;
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v16, *MEMORY[0x24BEE5750], v84);
  *(_QWORD *)&v31[v33] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v34 = &v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing];
  *(_QWORD *)v34 = 0;
  v34[8] = 1;
  v35 = &v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation];
  *(_QWORD *)v35 = 0;
  *((_QWORD *)v35 + 1) = 0;
  v35[16] = 1;
  v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches] = 0;
  v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity] = 1;
  v36 = &v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity];
  *(_QWORD *)v36 = 0;
  v36[8] = 1;
  v37 = &v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity];
  *(_QWORD *)v37 = 0;
  v37[8] = 1;
  *(_QWORD *)&v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging] = 0;
  v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_experienceType] = v87;
  v38 = &v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config];
  v39 = *(_OWORD *)(a2 + 48);
  v41 = *(_OWORD *)a2;
  v40 = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v38 + 2) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v38 + 3) = v39;
  *(_OWORD *)v38 = v41;
  *((_OWORD *)v38 + 1) = v40;
  v42 = *(_OWORD *)(a2 + 112);
  v44 = *(_OWORD *)(a2 + 64);
  v43 = *(_OWORD *)(a2 + 80);
  *((_OWORD *)v38 + 6) = *(_OWORD *)(a2 + 96);
  *((_OWORD *)v38 + 7) = v42;
  *((_OWORD *)v38 + 4) = v44;
  *((_OWORD *)v38 + 5) = v43;
  v46 = *(_OWORD *)(a2 + 144);
  v45 = *(_OWORD *)(a2 + 160);
  v47 = *(_OWORD *)(a2 + 128);
  v38[176] = *(_BYTE *)(a2 + 176);
  *((_OWORD *)v38 + 9) = v46;
  *((_OWORD *)v38 + 10) = v45;
  *((_OWORD *)v38 + 8) = v47;
  v48 = (double *)&v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_sceneSize];
  *v48 = a6;
  v48[1] = a7;
  v49 = *(void **)&v8[v27];
  v50 = v85;
  *(_QWORD *)&v8[v27] = v85;
  v87 = a2;
  outlined retain of FMPFSKPatternNodeConfig(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FMPFSKLabelNodeStyle?);
  v51 = v50;

  *(_QWORD *)&v31[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 1, 0x3F847AE147AE147BLL, 0, 0, 1);
  v52 = (objc_class *)type metadata accessor for FMPFSKScene();
  v91.receiver = v31;
  v91.super_class = v52;
  v53 = (char *)objc_msgSendSuper2(&v91, sel_initWithSize_, a6, a7);
  *(_QWORD *)&v53[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate + 8] = v86;
  swift_unknownObjectWeakAssign();
  v54 = (void *)objc_opt_self();
  v55 = v53;
  v56 = objc_msgSend(v54, sel_clearColor);
  objc_msgSend(v55, sel_setBackgroundColor_, v56);

  objc_msgSend(v55, sel_setAnchorPoint_, 0.5, 0.5);
  objc_msgSend(v55, sel_setScaleMode_, 2);
  FMPFSKScene.setupScene()();
  v57 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager;
  objc_msgSend(*(id *)&v55[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager], sel_setDeviceMotionUpdateInterval_, 0.0666666667);
  v58 = *(void **)&v55[v57];
  v59 = (void *)objc_opt_self();
  v60 = v58;
  v61 = objc_msgSend(v59, sel_mainQueue);
  v62 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  aBlock[4] = partial apply for closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:);
  aBlock[5] = v62;
  aBlock[0] = (id)MEMORY[0x24BDAC760];
  aBlock[1] = (id)1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed CMDeviceMotion?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_9;
  v63 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v60, sel_startDeviceMotionUpdatesUsingReferenceFrame_toQueue_withHandler_, 4, v61, v63);
  _Block_release(v63);

  v64 = (void *)objc_opt_self();
  aBlock[0] = objc_msgSend(v64, sel_standardUserDefaults);
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v65 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  v66 = *(void **)&v55[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation];
  *(_QWORD *)&v55[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation] = v65;

  aBlock[0] = objc_msgSend(v64, sel_standardUserDefaults);
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v67 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  v68 = *(void **)&v55[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation];
  *(_QWORD *)&v55[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation] = v67;

  if (one-time initialization token for default != -1)
    swift_once();
  v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Logger.default);
  v70 = v55;
  v71 = Logger.logObject.getter();
  v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v73 = swift_slowAlloc();
    v74 = (_QWORD *)swift_slowAlloc();
    v75 = (void *)swift_slowAlloc();
    v85 = v71;
    v86 = v51;
    v76 = v75;
    v89 = (uint64_t)v70;
    aBlock[0] = v75;
    *(_DWORD *)v73 = 138412546;
    v77 = v70;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v74 = v55;

    *(_WORD *)(v73 + 12) = 2080;
    v78 = MEMORY[0x22075C7C4](a6, a7);
    v89 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v80 = v85;
    _os_log_impl(&dword_21B042000, v85, v72, "🧭 FMPFSKScene%@: init with size={%s}", (uint8_t *)v73, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v74, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v76, -1, -1);
    MEMORY[0x22075D4E4](v73, -1, -1);

    swift_unknownObjectRelease();
    outlined retain of FMPFSKPatternNodeConfig(v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FMPFSKLabelNodeStyle?);

  }
  else
  {

    swift_unknownObjectRelease();
    outlined retain of FMPFSKPatternNodeConfig(v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined consume of FMPFSKLabelNodeStyle?);

  }
  return v70;
}

void closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(objc_class *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  CMDeviceMotion_optional v5;
  Class isa;

  v4 = a3 + 16;
  swift_beginAccess();
  v5.value.super.super.isa = (Class)MEMORY[0x22075D574](v4);
  if (v5.value.super.super.isa)
  {
    isa = v5.value.super.super.isa;
    v5.value.super.super.isa = a1;
    FMPFSKScene.handleDeviceMotionUpdate(_:)(v5);

  }
}

void thunk for @escaping @callee_guaranteed (@guaranteed CMDeviceMotion?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[23];

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  v9 = MEMORY[0x22075D574](a3 + 16);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = static DispatchWorkItemFlags.barrier.getter();
    MEMORY[0x24BDAC7A8](v11, v12);
    *(_QWORD *)&v13[-16] = v10;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);

  }
}

void closure #1 in closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  unsigned __int8 *v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;

  v3 = *(unsigned __int8 **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    v4 = v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType];
    if (v4 == 2)
      goto LABEL_5;
    if (v4 == 1)
    {
      v6 = v3;
      FMPFSKPatternNode.setupTapeChildNodes(conformationFactor:)(0, 1);
      goto LABEL_7;
    }
    if (!v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_experienceType])
    {
LABEL_5:
      v5 = v3;
      FMPFSKPatternNode.setupArrowChildNodes(conformationFactor:)(0, 1);
LABEL_7:

    }
  }
  *a2 = v3 == 0;
}

void closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchWorkItemFlags();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v9 = MEMORY[0x22075D574](a3 + 16);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
    v12 = objc_msgSend(v11, sel_fmpfDebugMode);

    v13 = static DispatchWorkItemFlags.barrier.getter();
    MEMORY[0x24BDAC7A8](v13, v14);
    *(&v15 - 2) = (uint64_t)v10;
    *((_BYTE *)&v15 - 8) = v12;
    OS_dispatch_queue.sync<A>(flags:execute:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);

  }
}

void closure #1 in closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, char a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode);
  if (v4)
    objc_msgSend(v4, sel_setHidden_, (a2 & 1) == 0);
  v5 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v5)
  {
    v6 = v5;
    FMPFSKPatternNode.applyDebugMode(_:)(a2 & 1);

  }
}

id FMPFSKScene.__deallocating_deinit()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  uint64_t v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  objc_class *v14;
  uint64_t v16;
  objc_super v17;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation];
  if (v2)
  {
    v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();

  }
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager], sel_stopDeviceMotionUpdates);
  if (one-time initialization token for default != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.default);
  v5 = v1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v16 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = objc_msgSend(v5, sel_description);
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v13 = v12;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_21B042000, v6, v7, "🧭 FMPFSKScene%s: deinit", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v9, -1, -1);
    MEMORY[0x22075D4E4](v8, -1, -1);

  }
  else
  {

  }
  v14 = (objc_class *)type metadata accessor for FMPFSKScene();
  v17.receiver = v5;
  v17.super_class = v14;
  return objc_msgSendSuper2(&v17, sel_dealloc);
}

uint64_t FMPFSKScene.setupScene()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char *v16;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchQoS();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8]();
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_sceneSize];
  v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_sceneSize + 8];
  v11 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView];
  v12 = v11;
  static DispatchWorkItemFlags.barrier.getter();
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v0;
  v13[3] = v9;
  v13[4] = v10;
  v13[5] = v11;
  aBlock[4] = partial apply for closure #1 in FMPFSKScene.setupScene();
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_61;
  v14 = _Block_copy(aBlock);
  v15 = v12;
  v16 = v0;
  static DispatchQoS.unspecified.getter();
  MEMORY[0x22075C7AC](0, v4, v8, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

void closure #1 in FMPFSKScene.setupScene()(char *a1, void *a2, double a3, double a4)
{
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  unsigned int v12;
  id v13;
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  id v20;
  id v21;
  void *ObjCClassFromMetadata;
  id v23;
  void *v24;
  id v25;
  id v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  id v52;
  id v53;
  char *v54;
  void *v55;
  UIBezierPath v56;
  void *v57;
  void *v58;
  char v60;
  _OWORD v61[11];
  char v62;

  v7 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode;
  objc_msgSend(*(id *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode], sel_removeFromParent);
  v8 = *(void **)&a1[v7];
  if (v8)
  {
    v9 = (void *)objc_opt_self();
    v10 = v8;
    v11 = objc_msgSend(v9, sel_standardUserDefaults);
    v12 = objc_msgSend(v11, sel_fmpfDebugMode);

    objc_msgSend(v10, sel_setHidden_, v12 ^ 1);
  }
  v13 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKNode()), sel_init);
  objc_msgSend(v13, sel_setZPosition_, -4.4408921e-16);
  objc_msgSend(a1, sel_addChild_, v13);
  v14 = *(void **)&a1[v7];
  *(_QWORD *)&a1[v7] = v13;
  v15 = v13;

  objc_msgSend(a1, sel_size);
  v17 = v16 * -0.5;
  objc_msgSend(a1, sel_size);
  v19 = v18 * 0.5;
  v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), (SEL)&selRef_tintColorForHints);
  objc_msgSend(v20, sel_moveToPoint_, v17, 0.0);
  objc_msgSend(v20, sel_addLineToPoint_, v19, 0.0);
  objc_msgSend(v20, sel_closePath);
  type metadata accessor for FMPFSKShapeNode();
  v57 = v20;
  v21 = objc_msgSend(v20, sel_CGPath);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  v23 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v21);

  objc_msgSend(v23, sel_setPosition_, 0.0, -0.0);
  v24 = (void *)objc_opt_self();
  v25 = v23;
  v26 = objc_msgSend(v24, sel_whiteColor);
  objc_msgSend(v25, sel_setStrokeColor_, v26);

  objc_msgSend(v25, sel_setAlpha_, 0.5);
  objc_msgSend(v15, sel_addChild_, v25);
  objc_msgSend(a1, sel_size);
  v28 = v27 * 0.5;
  objc_msgSend(a1, sel_size);
  v30 = v29 * -0.5;
  v31 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD420]), sel_init);
  objc_msgSend(v31, sel_moveToPoint_, 0.0, v28);
  objc_msgSend(v31, sel_addLineToPoint_, 0.0, v30);
  objc_msgSend(v31, sel_closePath);
  v32 = objc_msgSend(v31, sel_CGPath);
  v33 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v32);

  v34 = v33;
  v35 = objc_msgSend(v24, sel_whiteColor);
  objc_msgSend(v34, sel_setStrokeColor_, v35);

  objc_msgSend(v34, sel_setAlpha_, 0.5);
  objc_msgSend(v15, sel_addChild_, v34);
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
  objc_msgSend(a1, sel_size);
  v37 = v36;
  objc_msgSend(a1, sel_size);
  v56.super.isa = UIBezierPath.init(fmpfRectangleCentered:size:)((CGPoint)0, (CGSize)__PAIR128__(v38, v37)).super.isa;
  v39 = -[objc_class CGPath](v56.super.isa, sel_CGPath);
  v40 = objc_msgSend(ObjCClassFromMetadata, sel_shapeNodeWithPath_, v39);

  v41 = v40;
  v42 = objc_msgSend(v24, sel_whiteColor);
  objc_msgSend(v41, sel_setStrokeColor_, v42);

  objc_msgSend(v41, sel_setAlpha_, 0.5);
  v58 = v15;
  objc_msgSend(v15, sel_addChild_, v41);
  v43 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode;
  v44 = *(_BYTE **)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode];
  if (v44)
  {
    v45 = *(_QWORD *)&v44[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor];
    v46 = v44[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformationFactor + 8];
    objc_msgSend(v44, sel_removeFromParent);
  }
  else
  {
    v45 = 0;
    v46 = 1;
  }
  v60 = a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_experienceType];
  v47 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 144];
  v61[8] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 128];
  v61[9] = v47;
  v61[10] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 160];
  v62 = a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 176];
  v48 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 80];
  v61[4] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 64];
  v61[5] = v48;
  v49 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 112];
  v61[6] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 96];
  v61[7] = v49;
  v50 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 16];
  v61[0] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config];
  v61[1] = v50;
  v51 = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 48];
  v61[2] = *(_OWORD *)&a1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_config + 32];
  v61[3] = v51;
  v52 = objc_allocWithZone((Class)type metadata accessor for FMPFSKPatternNode());
  outlined retain of FMPFSKPatternNodeConfig((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))outlined copy of FMPFSKLabelNodeStyle?);
  v53 = a2;
  v54 = FMPFSKPatternNode.init(experienceType:config:size:withRingView:conformedToExplodedFactor:conformationFactor:)((unsigned __int8 *)&v60, (uint64_t)v61, a2, 0, 1, v45, v46, a3, a4);
  objc_msgSend(v54, sel_setPosition_, 0.0, -0.0);
  objc_msgSend(v54, sel_setAlpha_, 0.0);
  *(_QWORD *)&v54[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_delegate + 8] = &protocol witness table for FMPFSKScene;
  swift_unknownObjectWeakAssign();
  objc_msgSend(a1, sel_addChild_, v54);
  v55 = *(void **)&a1[v43];
  *(_QWORD *)&a1[v43] = v54;

}

Swift::Void __swiftcall FMPFSKScene.update(_:)(Swift::Double a1)
{
  _BYTE *v1;
  Swift::Double *v2;
  double v3;
  double v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  _QWORD v13[6];

  v2 = (Swift::Double *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  v3 = *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  if (v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime + 8])
    v3 = a1;
  v4 = a1 - v3;
  *v2 = a1;
  *((_BYTE *)v2 + 8) = 0;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v1;
  *(double *)(v5 + 24) = v4;
  v6 = (void *)objc_opt_self();
  v7 = v1;
  if (objc_msgSend(v6, sel_isMainThread))
  {
    v8 = *(NSObject **)&v7[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue];
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = partial apply for closure #1 in FMPFSKScene.update(_:);
    *(_QWORD *)(v9 + 24) = v5;
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    *(_QWORD *)(v10 + 24) = v9;
    v13[4] = partial apply for closure #2 in FMPFRingView.setOpacity(_:sprung:);
    v13[5] = v10;
    v13[0] = MEMORY[0x24BDAC760];
    v13[1] = 1107296256;
    v13[2] = thunk for @escaping @callee_guaranteed () -> ();
    v13[3] = &block_descriptor_73_0;
    v11 = _Block_copy(v13);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v8, v11);
    swift_release();
    _Block_release(v11);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  else
  {
    closure #1 in FMPFSKScene.update(_:)((uint64_t)v7, v4);
    swift_release();
  }
}

uint64_t closure #1 in FMPFSKScene.update(_:)(uint64_t a1, Swift::Double a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  uint64_t v16;
  Swift::Double_optional v17;

  v4 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode;
  v5 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v5)
  {
    v6 = v5;
    v17.is_nil = LOBYTE(a2);
    FMPFSKPatternNode.updateWithDeltaTime(_:)(v17);

  }
  result = MEMORY[0x22075D574](a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate);
  if (result)
  {
    FMPFView.updateWithDeltaTime(_:)(a2);
    result = swift_unknownObjectRelease();
  }
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity + 8) & 1) != 0
    || *(double *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity) >= 0.5)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity) = 1;
LABEL_13:
    v11 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring;
    v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring);
    result = FMPFFluidSpring.isStable.getter();
    if ((result & 1) == 0)
    {
      FLSpring.step(_:)(a2);
      *(_BYTE *)(v12 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 1;
      v13 = *(_QWORD *)(a1 + v11);
      v14 = (double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s);
      swift_beginAccess();
      v15 = *v14 + *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o);
      if (vabdd_f64(v14[35] + *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40), v15) <= *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring_stableValueThreshold))
        v15 = v14[35] + *(double *)(v13 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40);
      v16 = a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity;
      *(double *)v16 = v15;
      *(_BYTE *)(v16 + 8) = 0;
      result = *(_QWORD *)(a1 + v4);
      if (result)
        return (uint64_t)objc_msgSend((id)result, sel_setAlpha_);
    }
    return result;
  }
  v8 = *(_QWORD *)(a1 + v4);
  if (!v8)
  {
    *(_BYTE *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity) = 0;
    return result;
  }
  v9 = v8 + OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformationFactor;
  v10 = *(double *)v9;
  if (*(_BYTE *)(v9 + 8))
    v10 = 1.0;
  *(_BYTE *)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity) = v10 <= 0.0;
  if (v10 <= 0.0)
    goto LABEL_13;
  return result;
}

Swift::Void __swiftcall FMPFSKScene.handleDeviceMotionUpdate(_:)(CMDeviceMotion_optional a1)
{
  char *v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  objc_class *v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  void *v21;
  char *v22;
  _QWORD v23[2];
  _QWORD aBlock[6];

  isa = a1.value.super.super.isa;
  v3 = type metadata accessor for DispatchQoS();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_experienceType] != 2 || !UIAccessibilityIsReduceMotionEnabled())
    && isa)
  {
    v13 = isa;
    -[objc_class heading](v13, sel_heading);
    v15 = v14;
    v16 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading];
    if ((v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading + 8] & 1) != 0)
    {

    }
    else
    {
      v17 = v14 - *v16;
      v18 = v17 + -360.0;
      if (v17 <= 180.0)
        v18 = v15 - *v16;
      if (v17 >= -180.0)
        v19 = v18;
      else
        v19 = v17 + 360.0;
      v23[1] = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue];
      static DispatchWorkItemFlags.barrier.getter();
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = v1;
      *(double *)(v20 + 24) = v19;
      aBlock[4] = partial apply for specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:);
      aBlock[5] = v20;
      aBlock[0] = MEMORY[0x24BDAC760];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_55;
      v21 = _Block_copy(aBlock);
      v22 = v1;
      static DispatchQoS.unspecified.getter();
      MEMORY[0x22075C7AC](0, v7, v12, v21);

      _Block_release(v21);
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      swift_release();
    }
    *v16 = v15;
    *((_BYTE *)v16 + 8) = 0;
  }
}

void specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:)(uint64_t a1, Swift::Double a2)
{
  void *v2;
  id v4;

  v2 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v2)
  {
    v4 = v2;
    FMPFSKPatternNode.addSprungRelativeHeading(_:)(a2);

  }
}

id FMPFSKScene.size.setter(double a1, double a2)
{
  void *v2;
  id result;
  double v6;
  double v7;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  objc_class *v19;
  uint64_t v20;
  objc_super v21;

  result = objc_msgSend(v2, sel_size);
  if (v7 != a1 || v6 != a2)
  {
    if (one-time initialization token for default != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.default);
    v10 = v2;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v20 = v15;
      *(_DWORD *)v13 = 138412546;
      v16 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v14 = v10;

      *(_WORD *)(v13 + 12) = 2080;
      v17 = MEMORY[0x22075C7C4](a1, a2);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v11, v12, "🧭 FMPFSKScene%@: set size={%s}", (uint8_t *)v13, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v14, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v15, -1, -1);
      MEMORY[0x22075D4E4](v13, -1, -1);

    }
    else
    {

    }
    v19 = (objc_class *)type metadata accessor for FMPFSKScene();
    v21.receiver = v10;
    v21.super_class = v19;
    objc_msgSendSuper2(&v21, sel_setSize_, a1, a2);
    return (id)FMPFSKScene.setupScene()();
  }
  return result;
}

uint64_t FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_24DE30010, (uint64_t)partial apply for closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:), (uint64_t)&block_descriptor_49);
}

void closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(uint64_t a1, char a2, Swift::Double a3)
{
  char *v3;
  Swift::Double *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Double *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t i;
  char *v15;
  char v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    v5 = (Swift::Double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactor];
    *v5 = a3;
    *((_BYTE *)v5 + 8) = 0;
    if ((a2 & 1) != 0)
    {
      v6 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring];
      v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s;
      swift_beginAccess();
      if (*(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308)
      {
        v18 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(Swift::Double *)v18 = a3;
        *(_BYTE *)(v18 + 8) = 0;
        FMPFFluidSpring.ftarget.didset();
        return;
      }
    }
    v8 = *(_QWORD *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_conformedToExplodedFactorSpring];
    FLSpring.resetImmediately(toValue:)(a3);
    *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v9 = (Swift::Double *)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_presentedConformedToExplodedFactor];
    *v9 = a3;
    *((_BYTE *)v9 + 8) = 0;
    v10 = &v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_patternFragmentNodes];
    swift_beginAccess();
    v11 = *(_QWORD *)v10;
    if (v11 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v19 = v3;
      v12 = _CocoaArrayWrapper.endIndex.getter();
      if (v12)
        goto LABEL_6;
    }
    else
    {
      v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      v13 = v3;
      if (v12)
      {
LABEL_6:
        if (v12 < 1)
        {
          __break(1u);
          return;
        }
        for (i = 0; i != v12; ++i)
        {
          if ((v11 & 0xC000000000000001) != 0)
            v15 = (char *)MEMORY[0x22075C8C0](i, v11);
          else
            v15 = (char *)*(id *)(v11 + 8 * i + 32);
          v16 = *((_BYTE *)v5 + 8);
          v17 = &v15[OBJC_IVAR____TtC10TVRemoteUI25FMPFSKPatternFragmentNode_conformedToExplodedFactor];
          *(Swift::Double *)v17 = *v5;
          v17[8] = v16;

        }
      }
    }
    swift_bridgeObjectRelease_n();

  }
}

uint64_t FMPFSKScene.setPatternConformationFactor(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_24DE2FFC0, (uint64_t)partial apply for closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:), (uint64_t)&block_descriptor_43_0);
}

uint64_t FMPFSKScene.setPatternCenterFactor(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_24DE2FF70, (uint64_t)partial apply for closure #1 in FMPFSKScene.setPatternCenterFactor(_:sprung:), (uint64_t)&block_descriptor_37);
}

void closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)(uint64_t a1, char a2, void (*a3)(_QWORD, double), double a4)
{
  void *v4;
  id v8;

  v4 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v4)
  {
    v8 = v4;
    a3(a2 & 1, a4);

  }
}

Swift::Void __swiftcall FMPFSKScene.pulseBTNode(duration:)(Swift::Double duration)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  id v15;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchQoS();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v1;
  *(Swift::Double *)(v13 + 24) = duration;
  aBlock[4] = partial apply for closure #1 in FMPFSKScene.pulseBTNode(duration:);
  aBlock[5] = v13;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_31;
  v14 = _Block_copy(aBlock);
  v15 = v1;
  static DispatchQoS.unspecified.getter();
  MEMORY[0x22075C7AC](0, v7, v12, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  swift_release();
}

void closure #1 in FMPFSKScene.pulseBTNode(duration:)(uint64_t a1, Swift::Double a2)
{
  char *v2;
  void *v3;
  char *v5;
  id v6;

  v2 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v2)
  {
    v3 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v3)
    {
      v5 = v2;
      v6 = v3;
      FMPFSKBTRangeDotNode.pulse(duration:)(a2);

    }
  }
}

uint64_t FMPFSKScene.setBTRangeNodeSize(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_24DE2FED0, (uint64_t)partial apply for closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:), (uint64_t)&block_descriptor_25);
}

void closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:)(uint64_t a1, char a2, Swift::Double a3)
{
  char *v3;
  void *v4;
  char *v7;
  Swift::Bool v8;
  id v9;

  v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    v4 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v4)
    {
      v7 = v3;
      v9 = v4;
      v8 = a2 & 1;
      if (a3 <= 0.0)
        FMPFSKBTLevelsNode.hide(sprung:)(v8);
      else
        FMPFSKBTLevelsNode.show(sprung:)(v8);
      FMPFSKBTRangeDotNode.setDotNodeSizeFactor(_:sprung:)(a2 & 1, a3);

    }
  }
}

uint64_t FMPFSKScene.setBTDiskNodeSize(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_24DE2FE80, (uint64_t)partial apply for closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:), (uint64_t)&block_descriptor_19_0);
}

void closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:)(uint64_t a1, char a2, double a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    v4 = *(char **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v4)
    {
      v7 = *(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode];
      v8 = v3;
      v11 = v4;
      FMPFSKBTLevelsNode.update(diskSize:sprung:)(a2 & 1, a3);
      v9 = *(_QWORD *)(*(_QWORD *)(v7 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode)
                     + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_sizeSpring);
      if ((a2 & 1) != 0)
      {
        v10 = v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(double *)v10 = a3;
        *(_BYTE *)(v10 + 8) = 0;
        FMPFFluidSpring.ftarget.didset();
      }
      else
      {
        FLSpring.resetImmediately(toValue:)(a3);
        *(_BYTE *)(v9 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        FMPFSKBTRangeDiskNode.render()();
      }

    }
  }
}

uint64_t FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(char a1, double a2)
{
  return FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(a1, a2, (uint64_t)&unk_24DE2FE30, (uint64_t)partial apply for closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:), (uint64_t)&block_descriptor_13_0);
}

uint64_t FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(char a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];

  v22 = a4;
  v23 = a5;
  v8 = type metadata accessor for DispatchQoS();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchWorkItemFlags();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13, v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter();
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = v5;
  *(double *)(v18 + 24) = a2;
  *(_BYTE *)(v18 + 32) = a1;
  aBlock[4] = v22;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v23;
  v19 = _Block_copy(aBlock);
  v20 = v5;
  static DispatchQoS.unspecified.getter();
  MEMORY[0x22075C7AC](0, v12, v17, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return swift_release();
}

void closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(uint64_t a1, char a2, Swift::Double a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;

  v3 = *(char **)(a1 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
  if (v3)
  {
    v4 = *(char **)&v3[OBJC_IVAR____TtC10TVRemoteUI17FMPFSKPatternNode_pointeeNode];
    if (v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v4[OBJC_IVAR____TtC10TVRemoteUI23FMPFSKPeripheralDotNode_btRangingNode]
                                 + OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode)
                     + OBJC_IVAR____TtC10TVRemoteUI21FMPFSKBTRangeDiskNode_opacitySpring);
      if ((a2 & 1) != 0)
      {
        v6 = v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
        *(Swift::Double *)v6 = a3;
        *(_BYTE *)(v6 + 8) = 0;
        FMPFFluidSpring.ftarget.didset();
      }
      else
      {
        FLSpring.resetImmediately(toValue:)(a3);
        *(_BYTE *)(v5 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
        v7 = v3;
        v8 = v4;
        FMPFSKBTRangeDiskNode.render()();

      }
    }
  }
}

uint64_t type metadata accessor for FMPFSKScene()
{
  return objc_opt_self();
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for FMPFSKSceneStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMPFSKSceneStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKSceneStyle()
{
  return &type metadata for FMPFSKSceneStyle;
}

void specialized FMPFSKScene.init(coder:)()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8]();
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8]();
  type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8]();
  v6 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_style];
  __asm { FMOV            V0.2D, #0.5 }
  *(_OWORD *)v6 = _Q0;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_ringView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_axisesNode] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode] = 0;
  v12 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_previousHeading];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_motionManager;
  *(_QWORD *)&v1[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDC1400]), sel_init);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_dotCountObservation] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_debugModeObservation] = 0;
  v14 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_lastRenderTime];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v15 = OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isolationQueue;
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x24BEE5750], v2);
  *(_QWORD *)&v1[v15] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v16 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialBearing];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_initialTouchDownLocation];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v17[16] = 1;
  v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_usingDebuggingTouches] = 0;
  v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_shouldApplyOpacity] = 1;
  v18 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity];
  *(_QWORD *)v18 = 0;
  v18[8] = 1;
  v19 = &v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity];
  *(_QWORD *)v19 = 0;
  v19[8] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_altDelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v1[OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_isInteractivelyDebugging] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized FMPFSKScene.setOpacity(_:sprung:swap:)(char a1, Swift::Double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v3 = v2;
  v5 = v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacity;
  *(Swift::Double *)v5 = a2;
  *(_BYTE *)(v5 + 8) = 0;
  if ((a1 & 1) != 0
    && (v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring),
        v7 = v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__s,
        swift_beginAccess(),
        *(double *)(v7 + 280) + *(double *)(v6 + OBJC_IVAR____TtC10TVRemoteUI8FLSpring__o + 40) != 1.79769313e308))
  {
    v11 = v6 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
    *(Swift::Double *)v11 = a2;
    *(_BYTE *)(v11 + 8) = 0;
    FMPFFluidSpring.ftarget.didset();
  }
  else
  {
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_opacitySpring);
    FLSpring.resetImmediately(toValue:)(a2);
    *(_BYTE *)(v8 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    v9 = v3 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_presentedOpacity;
    *(Swift::Double *)v9 = a2;
    *(_BYTE *)(v9 + 8) = 0;
    v10 = *(void **)(v3 + OBJC_IVAR____TtC10TVRemoteUI11FMPFSKScene_patternNode);
    if (v10)
      objc_msgSend(v10, sel_setAlpha_, a2);
  }
}

uint64_t sub_21B0E1EC4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(a1, a2, v2);
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

char *keypath_get_selector_fmpfArrowDotCount()
{
  return sel_fmpfArrowDotCount;
}

id sub_21B0E1F14@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_fmpfArrowDotCount);
  *a2 = result;
  return result;
}

id sub_21B0E1F44(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFmpfArrowDotCount_, *a1);
}

void partial apply for closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(a1, a2, v2);
}

char *keypath_get_selector_fmpfDebugMode()
{
  return sel_fmpfDebugMode;
}

id sub_21B0E1F6C@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_fmpfDebugMode);
  *a2 = (_BYTE)result;
  return result;
}

id sub_21B0E1F9C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFmpfDebugMode_, *a1);
}

void partial apply for closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(a1, a2, v2);
}

void partial apply for closure #1 in closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)()
{
  uint64_t v0;

  closure #1 in closure #3 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void partial apply for closure #1 in closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(BOOL *a1@<X8>)
{
  uint64_t v1;

  closure #1 in closure #2 in FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(*(_QWORD *)(v1 + 16), a1);
}

void partial apply for closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_21B0E1FFC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setBTDiskNodeSize(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32), *(double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setBTRangeNodeSize(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_21B0E2040()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFSKScene.pulseBTNode(duration:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.pulseBTNode(duration:)(*(_QWORD *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setPatternCenterFactor(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32), (void (*)(_QWORD, double))FMPFSKPatternNode.setCenterFactor(_:sprung:), *(double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setPatternConformationFactor(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32), (void (*)(_QWORD, double))FMPFSKPatternNode.setConformationFactor(_:sprung:), *(double *)(v0 + 24));
}

void partial apply for closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 32), *(Swift::Double *)(v0 + 24));
}

void partial apply for specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:)()
{
  uint64_t v0;

  specialized closure #1 in FMPFSKScene.handleDeviceMotionUpdate(_:)(*(_QWORD *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_21B0E20DC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFSKScene.setupScene()()
{
  uint64_t v0;

  closure #1 in FMPFSKScene.setupScene()(*(char **)(v0 + 16), *(void **)(v0 + 40), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t partial apply for closure #1 in FMPFSKScene.update(_:)()
{
  uint64_t v0;

  return closure #1 in FMPFSKScene.update(_:)(*(_QWORD *)(v0 + 16), *(Swift::Double *)(v0 + 24));
}

uint64_t sub_21B0E2124()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_21B0E2148()
{
  return swift_deallocObject();
}

void one-time initialization function for default()
{
  void *v0;
  double v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;

  v0 = (void *)objc_opt_self();
  v1 = *MEMORY[0x24BEBB608];
  v2 = (void *)MEMORY[0x22075C584](0xD00000000000001BLL, 0x800000021B100680);
  v3 = objc_msgSend(v0, sel_systemFontOfSize_weight_design_, v2, 68.0, v1);

  if (v3)
  {
    v4 = (void *)MEMORY[0x22075C584](0xD00000000000001BLL, 0x800000021B100680);
    v5 = objc_msgSend(v0, sel_systemFontOfSize_weight_design_, v4, 20.0, v1);

    if (v5)
    {
      v6 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
      static FMBTDistanceViewStyle.default = (uint64_t)v3;
      *(_QWORD *)algn_25513FFE8 = v5;
      qword_25513FFF0 = (uint64_t)v6;
      unk_25513FFF8 = xmmword_21B0F9620;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id FMBTDistanceView.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  id v14;
  id v15;
  id v16;
  id v17;
  objc_super v19;

  v1 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel;
  v2 = objc_allocWithZone(MEMORY[0x24BEBD708]);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD978]), sel_init);
  v5 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v6 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer;
  *(_QWORD *)&v3[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBDB00]), sel_init);
  v7 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityView;
  *(_QWORD *)&v3[v7] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD398]), sel_initWithActivityIndicatorStyle_, 100);
  v8 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style;
  if (one-time initialization token for default != -1)
    swift_once();
  v9 = &v3[v8];
  v10 = (void *)static FMBTDistanceViewStyle.default;
  v11 = *(void **)algn_25513FFE8;
  v12 = (void *)qword_25513FFF0;
  v13 = unk_25513FFF8;
  *(_QWORD *)v9 = static FMBTDistanceViewStyle.default;
  *((_QWORD *)v9 + 1) = v11;
  *((_QWORD *)v9 + 2) = v12;
  *(_OWORD *)(v9 + 24) = v13;
  v14 = v10;
  v15 = v11;
  v16 = v12;

  v19.receiver = v3;
  v19.super_class = (Class)type metadata accessor for FMBTDistanceView();
  v17 = objc_msgSendSuper2(&v19, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  FMBTDistanceView.setup()();

  return v17;
}

id FMBTDistanceView.setup()()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  Class isa;

  v1 = v0;
  objc_msgSend(v0, sel_setOverrideUserInterfaceStyle_, 2);
  objc_msgSend(v0, sel_setAxis_, 1);
  v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel];
  v3 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel];
  v4 = v2;
  v5 = v3;
  objc_msgSend(v4, sel_setNumberOfLines_, 0);
  objc_msgSend(v4, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v6 = v5;
  objc_msgSend(v6, sel_setNumberOfLines_, 0);
  objc_msgSend(v6, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  v7 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView];
  objc_msgSend(v7, sel_setAxis_, 0);
  objc_msgSend(v7, sel_setAlignment_, 3);
  v8 = &v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style];
  objc_msgSend(v7, sel_setSpacing_, *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style + 24]);
  v9 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityView];
  v10 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  objc_msgSend(v9, sel_setColor_, v10);

  objc_msgSend(v9, sel_startAnimating);
  objc_msgSend(v9, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v11 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer];
  objc_msgSend(v11, sel_addSubview_, v9);
  objc_msgSend(v11, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  objc_msgSend(v11, sel_setHidden_, 1);
  objc_msgSend(v7, sel_addArrangedSubview_, v11);
  objc_msgSend(v7, sel_addArrangedSubview_, v6);
  v12 = v4;
  v13 = v7;
  objc_msgSend(v1, sel_addArrangedSubview_, v12);
  objc_msgSend(v1, sel_addArrangedSubview_, v13);

  objc_msgSend(v12, sel_setFont_, *(_QWORD *)v8);
  objc_msgSend(v12, sel_setTextColor_, *((_QWORD *)v8 + 2));
  objc_msgSend(v6, sel_setFont_, *((_QWORD *)v8 + 1));
  v14 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_21B0F9630;
  v16 = objc_msgSend(v11, sel_centerXAnchor);
  v17 = objc_msgSend(v9, sel_centerXAnchor);
  v18 = objc_msgSend(v16, sel_constraintEqualToAnchor_, v17);

  *(_QWORD *)(v15 + 32) = v18;
  v19 = objc_msgSend(v11, sel_centerYAnchor);
  v20 = objc_msgSend(v9, sel_centerYAnchor);
  v21 = objc_msgSend(v19, sel_constraintEqualToAnchor_, v20);

  *(_QWORD *)(v15 + 40) = v21;
  v22 = objc_msgSend(v11, sel_widthAnchor);
  v23 = objc_msgSend(v22, sel_constraintEqualToConstant_, 20.0);

  *(_QWORD *)(v15 + 48) = v23;
  v24 = objc_msgSend(v11, sel_heightAnchor);
  v25 = objc_msgSend(v24, sel_constraintEqualToConstant_, 20.0);

  *(_QWORD *)(v15 + 56) = v25;
  specialized Array._endMutation()();
  type metadata accessor for NSLayoutConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_activateConstraints_, isa);

  return objc_msgSend(v1, sel_setSpacing_, 3.0);
}

void FMBTDistanceView.update(with:nextBeacon:)(__int128 *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  void *v7;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id (*v18)();
  _QWORD *v19;

  v7 = (void *)objc_opt_self();
  v8 = *(double *)&v3[OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style + 32];
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = v3;
  outlined init with take of FMFindingState(a1, (uint64_t)(v9 + 3));
  v9[16] = a2;
  v9[17] = a3;
  v18 = partial apply for closure #1 in FMBTDistanceView.update(with:nextBeacon:);
  v19 = v9;
  v10 = MEMORY[0x24BDAC760];
  v14 = MEMORY[0x24BDAC760];
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed () -> ();
  v17 = &block_descriptor_10;
  v11 = _Block_copy(&v14);
  v12 = v3;
  outlined retain of FMFindingState((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
  swift_bridgeObjectRetain();
  swift_release();
  v18 = (id (*)())destructiveProjectEnumData for FMFindingState;
  v19 = 0;
  v14 = v10;
  v15 = 1107296256;
  v16 = thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ();
  v17 = &block_descriptor_3;
  v13 = _Block_copy(&v14);
  objc_msgSend(v7, sel_transitionWithView_duration_options_animations_completion_, v12, 5242880, v11, v13, v8);
  _Block_release(v13);
  _Block_release(v11);
}

id closure #1 in FMBTDistanceView.update(with:nextBeacon:)(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char **v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _BOOL8 v47;
  void *v48;
  double v49;
  void *v50;
  id result;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void *v64;
  void *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD v71[12];
  __int16 v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  char v80;
  char v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  char v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  char v97;
  __int128 v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char v105;

  outlined init with take of FMFindingState(a2, (uint64_t)v71);
  v6 = v71[1];
  v8 = (void *)v71[2];
  v7 = (void *)v71[3];
  v9 = v71[8];
  v68 = v71[0];
  v10 = v71[9];
  v11 = v71[10];
  v12 = v71[11];
  v13 = v72;
  v69 = a1;
  v14 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel);
  outlined init with take of FMFindingState(a2, (uint64_t)&v82);
  v65 = v8;
  v66 = v6;
  v64 = v7;
  v63 = v13;
  if ((unint64_t)(v83 - 6) >= 4)
  {
    v98 = v82;
    v100 = v84;
    v101 = v85;
    v102 = v86;
    v103 = v87;
    v99 = v83;
    v104 = v88;
    v105 = v89;
    LOBYTE(v61) = v13;
    v57 = v11;
    v59 = v12;
    v53 = v9;
    v55 = v10;
    outlined copy of FMFindingMeasurement(v68, v6, v8, v7);
    v16 = FMFindingMeasurement.name.getter();
    v18 = v17;
    outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
    v15 = (void *)MEMORY[0x22075C584](v16, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = 0;
  }
  objc_msgSend(v14, sel_setText_, v15, v53, v55, v57, v59, v61);

  v19 = *(void **)(v69 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel);
  v20 = FMFindingState.hintLabelColor.getter();
  objc_msgSend(v19, sel_setTextColor_, v20);

  if (a4)
  {
    swift_bridgeObjectRetain();
    v21._object = (void *)0x800000021B100610;
    v21._countAndFlagsBits = 0xD000000000000016;
    FMFindingLocalizedString(_:fallbackKey:tableName:)(v21, (Swift::String_optional)0, (Swift::String_optional)0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_21B0F8460;
    *(_QWORD *)(v22 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v22 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v22 + 32) = a3;
    *(_QWORD *)(v22 + 40) = a4;
    v23 = String.init(format:_:)();
    v25 = v24;
    swift_bridgeObjectRelease();
    v26 = (void *)MEMORY[0x22075C584](v23, v25);
    v27 = &selRef_setCaptionsEnabled_;
  }
  else
  {
    outlined init with take of FMFindingState(a2, (uint64_t)&v73);
    v27 = &selRef_setCaptionsEnabled_;
    if ((unint64_t)(v74 - 6) < 4)
    {
      v26 = 0;
      goto LABEL_10;
    }
    v90 = v73;
    v92 = v75;
    v93 = v76;
    v94 = v77;
    v95 = v78;
    v91 = v74;
    v96 = v79;
    v97 = v80;
    v28 = v81;
    LOBYTE(v62) = v63;
    v58 = v11;
    v60 = v12;
    v54 = v9;
    v56 = v10;
    outlined copy of FMFindingMeasurement(v68, v66, v65, v64);
    v29 = FMFindingMeasurement.hint(for:)(v28);
    v31 = v30;
    outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
    v26 = (void *)MEMORY[0x22075C584](v29, v31);
  }
  swift_bridgeObjectRelease();
LABEL_10:
  objc_msgSend(v19, v27[301], v26, v54, v56, v58, v60, v62);

  v32 = objc_msgSend(v14, sel_text);
  if (!v32)
  {
    v38 = v69;
    if ((objc_msgSend(v14, sel_isHidden) & 1) != 0)
      goto LABEL_20;
    goto LABEL_18;
  }
  v33 = v32;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v36 = v35;

  swift_bridgeObjectRelease();
  if ((v36 & 0x2000000000000000) != 0)
    v37 = HIBYTE(v36) & 0xF;
  else
    v37 = v34 & 0xFFFFFFFFFFFFLL;
  v38 = v69;
  if (objc_msgSend(v14, sel_isHidden) != (v37 == 0))
  {
    if (v37)
    {
      v39 = 0;
      v40 = 1.0;
LABEL_19:
      objc_msgSend(v14, sel_setAlpha_, v40);
      objc_msgSend(v14, sel_setHidden_, v39);
      goto LABEL_20;
    }
LABEL_18:
    v40 = 0.0;
    v39 = 1;
    goto LABEL_19;
  }
LABEL_20:
  v41 = objc_msgSend(v19, sel_text);
  if (v41)
  {
    v42 = v41;
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v44;

    swift_bridgeObjectRelease();
    v46 = HIBYTE(v45) & 0xF;
    if ((v45 & 0x2000000000000000) == 0)
      v46 = v43 & 0xFFFFFFFFFFFFLL;
    v47 = v46 == 0;
  }
  else
  {
    v47 = 1;
  }
  v48 = *(void **)(v38 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView);
  if (v47 != objc_msgSend(v48, sel_isHidden))
  {
    v49 = 1.0;
    if (v47)
      v49 = 0.0;
    objc_msgSend(v48, sel_setAlpha_, v49);
    objc_msgSend(v48, sel_setHidden_, v47);
  }
  v50 = *(void **)(v38 + OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer);
  result = objc_msgSend(v50, sel_isHidden);
  if ((a4 == 0) != (_DWORD)result)
  {
    v52 = 1.0;
    if (!a4)
      v52 = 0.0;
    objc_msgSend(v50, sel_setAlpha_, v52);
    return objc_msgSend(v50, sel_setHidden_, a4 == 0);
  }
  return result;
}

id FMFindingState.hintLabelColor.getter()
{
  __int128 *v0;
  char **v1;
  _BYTE v3[16];
  uint64_t v4;

  outlined init with take of FMFindingState(v0, (uint64_t)v3);
  if ((unint64_t)(v4 - 2) > 3)
    v1 = &selRef_clearColor;
  else
    v1 = (&off_24DE30298)[v4 - 2];
  return objc_msgSend((id)objc_opt_self(), *v1);
}

id FMBTDistanceView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMBTDistanceView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMBTDistanceView()
{
  return objc_opt_self();
}

void destroy for FMBTDistanceViewStyle(id *a1)
{

}

uint64_t initializeWithCopy for FMBTDistanceViewStyle(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(void **)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

uint64_t assignWithCopy for FMBTDistanceViewStyle(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FMBTDistanceViewStyle(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMBTDistanceViewStyle(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMBTDistanceViewStyle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FMBTDistanceViewStyle()
{
  return &type metadata for FMBTDistanceViewStyle;
}

uint64_t sub_21B0E333C()
{
  uint64_t v0;
  char *v1;

  v1 = *(char **)(v0 + 40);
  if ((unint64_t)(v1 - 1) >= 9)
  {

  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id partial apply for closure #1 in FMBTDistanceView.update(with:nextBeacon:)()
{
  uint64_t v0;

  return closure #1 in FMBTDistanceView.update(with:nextBeacon:)(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t FMFindingMeasurement.name.getter()
{
  __int128 *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;
  uint64_t countAndFlagsBits;
  Swift::String v7;
  _QWORD v8[13];

  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  strcpy((char *)&v7, "BT_DIRECTION_");
  HIWORD(v7._object) = -4864;
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v8);
  v1 = 0xE300000000000000;
  v2 = 5390662;
  switch(v8[2])
  {
    case 2:
      break;
    case 3:
      v1 = 0xE400000000000000;
      v2 = 1380009294;
      break;
    case 4:
      v1 = 0xE400000000000000;
      v2 = 1163019592;
      break;
    case 5:
      v1 = 0xE500000000000000;
      v2 = 0x444E554F46;
      break;
    default:
      v1 = 0xE700000000000000;
      v2 = 0x4E574F4E4B4E55;
      break;
  }
  v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x315F544E49485FLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(v7, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t FMFindingMeasurement.hint(for:)(char a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t countAndFlagsBits;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[13];

  v3 = 0x4953414552434544;
  if (a1 == 1)
  {
    v3 = 0x4953414552434E49;
  }
  else if (a1 != 2)
  {
    v4 = 0;
    v5 = (void *)0xE000000000000000;
    goto LABEL_6;
  }
  v17[0] = 95;
  v17[1] = 0xE100000000000000;
  v6 = 0xEA0000000000474ELL;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  v4 = 95;
  v5 = (void *)0xE100000000000000;
LABEL_6:
  outlined init with take of FMFindingMeasurement(v1, (uint64_t)v17);
  if (v17[2] == 3)
  {
    v15 = FMFindingMeasurement.hintKey.getter();
    v16 = v7;
    v8._countAndFlagsBits = v4;
    v8._object = v5;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    v9 = v15;
    v10 = v16;
  }
  else
  {
    swift_bridgeObjectRelease();
    v9 = FMFindingMeasurement.hintKey.getter();
    v10 = v11;
  }
  v12 = v10;
  countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(*(Swift::String *)&v9, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t FMFindingMeasurement.hintKey.getter()
{
  __int128 *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  Swift::String v4;
  _QWORD v6[2];
  _QWORD v7[13];

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  strcpy((char *)v6, "BT_DIRECTION_");
  HIWORD(v6[1]) = -4864;
  outlined init with take of FMFindingMeasurement(v0, (uint64_t)v7);
  v1 = 0xE300000000000000;
  v2 = 5390662;
  switch(v7[2])
  {
    case 2:
      break;
    case 3:
      v1 = 0xE400000000000000;
      v2 = 1380009294;
      break;
    case 4:
      v1 = 0xE400000000000000;
      v2 = 1163019592;
      break;
    case 5:
      v1 = 0xE500000000000000;
      v2 = 0x444E554F46;
      break;
    default:
      v1 = 0xE700000000000000;
      v2 = 0x4E574F4E4B4E55;
      break;
  }
  v3 = v1;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x325F544E49485FLL;
  v4._object = (void *)0xE700000000000000;
  String.append(_:)(v4);
  return v6[0];
}

unint64_t type metadata accessor for NSLayoutConstraint()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSLayoutConstraint;
  if (!lazy cache variable for type metadata for NSLayoutConstraint)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  }
  return result;
}

void specialized FMBTDistanceView.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;
  void *v10;
  __int128 v11;
  id v12;
  id v13;
  id v14;

  v1 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_distanceLabel;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v2 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_bottomRowStackView;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD978]), sel_init);
  v3 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_hintLabel;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v4 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityViewContainer;
  *(_QWORD *)&v0[v4] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBDB00]), sel_init);
  v5 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_connectingActivityView;
  *(_QWORD *)&v0[v5] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD398]), sel_initWithActivityIndicatorStyle_, 100);
  v6 = OBJC_IVAR____TtC10TVRemoteUI16FMBTDistanceView_style;
  if (one-time initialization token for default != -1)
    swift_once();
  v7 = &v0[v6];
  v8 = (void *)static FMBTDistanceViewStyle.default;
  v9 = *(void **)algn_25513FFE8;
  v10 = (void *)qword_25513FFF0;
  v11 = unk_25513FFF8;
  *(_QWORD *)v7 = static FMBTDistanceViewStyle.default;
  *((_QWORD *)v7 + 1) = v9;
  *((_QWORD *)v7 + 2) = v10;
  *(_OWORD *)(v7 + 24) = v11;
  v12 = v8;
  v13 = v9;
  v14 = v10;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternFragmentNodeTravelingStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_21B0E3934 + 4 * byte_21B0F9695[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_21B0E3968 + 4 * asc_21B0F9690[v4]))();
}

uint64_t sub_21B0E3968(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0E3970(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x21B0E3978);
  return result;
}

uint64_t sub_21B0E3984(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x21B0E398CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_21B0E3990(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_21B0E3998(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternFragmentNodeTravelingStyle()
{
  return &type metadata for FMPFSKPatternFragmentNodeTravelingStyle;
}

void *__swift_memcpy289_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x121uLL);
}

uint64_t getEnumTagSinglePayload for FMPFSKPatternFragmentNodeStyle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 289))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for FMPFSKPatternFragmentNodeStyle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_BYTE *)(result + 288) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 289) = v3;
  return result;
}

ValueMetadata *type metadata accessor for FMPFSKPatternFragmentNodeStyle()
{
  return &type metadata for FMPFSKPatternFragmentNodeStyle;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance FMPFSKPatternFragmentNodeTravelingStyle(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance FMPFSKPatternFragmentNodeTravelingStyle@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized FMPFSKPatternFragmentNodeTravelingStyle.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance FMPFSKPatternFragmentNodeTravelingStyle(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEF637241646E4165;
  v4 = 0xE900000000000065;
  v5 = 0x7672754364617571;
  if (v2 != 1)
  {
    v5 = 0x7261656E696CLL;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7672754364617571;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

unint64_t lazy protocol witness table accessor for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle;
  if (!lazy protocol witness table cache variable for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle)
  {
    result = MEMORY[0x22075D454](&protocol conformance descriptor for FMPFSKPatternFragmentNodeTravelingStyle, &type metadata for FMPFSKPatternFragmentNodeTravelingStyle);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FMPFSKPatternFragmentNodeTravelingStyle and conformance FMPFSKPatternFragmentNodeTravelingStyle);
  }
  return result;
}

unint64_t specialized FMPFSKPatternFragmentNodeTravelingStyle.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of FMPFSKPatternFragmentNodeTravelingStyle.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

void closure #1 in FMPFView.init(experienceType:config:distance:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = a3 + 16;
  swift_beginAccess();

}

id FMPFView.__deallocating_deinit()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  objc_super v5;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation];
  if (v2)
  {
    v3 = v2;
    dispatch thunk of NSKeyValueObservation.invalidate()();

  }
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FMPFView();
  return objc_msgSendSuper2(&v5, sel_dealloc);
}

void FMPFView.setupConstraints()()
{
  char *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  Class isa;

  v1 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView];
  objc_msgSend(v1, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v2 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_21B0F9630;
  v4 = objc_msgSend(v1, sel_topAnchor);
  v5 = objc_msgSend(v0, sel_topAnchor);
  v6 = objc_msgSend(v4, sel_constraintEqualToAnchor_, v5);

  *(_QWORD *)(v3 + 32) = v6;
  v7 = objc_msgSend(v1, sel_bottomAnchor);
  v8 = objc_msgSend(v0, sel_bottomAnchor);
  v9 = objc_msgSend(v7, sel_constraintEqualToAnchor_, v8);

  *(_QWORD *)(v3 + 40) = v9;
  v10 = objc_msgSend(v1, sel_leadingAnchor);
  v11 = objc_msgSend(v0, sel_leadingAnchor);
  v12 = objc_msgSend(v10, sel_constraintEqualToAnchor_, v11);

  *(_QWORD *)(v3 + 48) = v12;
  v13 = objc_msgSend(v1, sel_trailingAnchor);
  v14 = objc_msgSend(v0, sel_trailingAnchor);
  v15 = objc_msgSend(v13, sel_constraintEqualToAnchor_, v14);

  *(_QWORD *)(v3 + 56) = v15;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_activateConstraints_, isa);

}

void FMPFView.setUpSKScene()()
{
  unsigned __int8 *v0;
  double v1;
  double v2;
  double v3;
  double v4;
  int v5;
  __int128 *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  NSObject *v13;
  id v14;
  NSObject *v15;
  unsigned __int8 *v16;
  char *v17;
  void *v18;
  NSObject *v19;
  void *v20;
  void *v21;
  char *v22;
  uint64_t v23;
  unsigned __int8 v24;
  _BYTE v25[184];
  _OWORD v26[11];
  char v27;
  _OWORD v28[11];
  char v29;

  objc_msgSend(v0, sel_bounds);
  v2 = v1;
  v4 = v3;
  v5 = v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_experienceType];
  if (v5 == 1)
  {
    if (one-time initialization token for r1NoAR != -1)
      swift_once();
    v6 = &xmmword_25513FF38;
  }
  else
  {
    if (one-time initialization token for r1OrBT != -1)
      swift_once();
    v6 = &xmmword_25513FE68;
  }
  v7 = *(double *)v6;
  objc_msgSend(v0, sel_bounds);
  v9 = v8;
  v11 = v10;
  v12 = objc_allocWithZone((Class)type metadata accessor for FMPFRingView());
  v13 = FMPFRingView.init(sceneSize:diskRadiusScale:verticalOffset:)(0, 0, v9, v11, v7);
  v24 = v5;
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_config], (uint64_t)v25, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v25, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  if (_s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOg((uint64_t)v26) == 1)
  {
    __break(1u);
  }
  else
  {
    v28[8] = v26[8];
    v28[9] = v26[9];
    v28[10] = v26[10];
    v29 = v27;
    v28[4] = v26[4];
    v28[5] = v26[5];
    v28[6] = v26[6];
    v28[7] = v26[7];
    v28[0] = v26[0];
    v28[1] = v26[1];
    v28[2] = v26[2];
    v28[3] = v26[3];
    v14 = objc_allocWithZone((Class)type metadata accessor for FMPFSKScene());
    outlined retain of FMPFSKPatternNodeConfig?((uint64_t)v25, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of FMPFSKPatternNodeConfig?);
    v15 = v13;
    v16 = v0;
    v17 = FMPFSKScene.init(experienceType:config:size:ringView:altDelegate:)(&v24, (uint64_t)v28, v13, (uint64_t)v0, &protocol witness table for FMPFView, v2, v4);
    -[NSObject setFrame:](v15, sel_setFrame_, 0.0, 0.0, v2, v4);
    FMPFRingView.setOpacity(_:sprung:)(0, 0, 1);
    v18 = *(void **)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView];
    *(_QWORD *)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView] = v13;
    v19 = v15;

    -[NSObject setUserInteractionEnabled:](v19, sel_setUserInteractionEnabled_, 0);
    objc_msgSend(v16, sel_addSubview_, v19);
    v20 = *(void **)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView];
    objc_msgSend(v20, sel_presentScene_, v17);
    objc_msgSend(v20, sel_setAsynchronous_, 1);
    v21 = *(void **)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
    *(_QWORD *)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene] = v17;
    v22 = v17;

    if (*(_QWORD *)&v16[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastThermalState] == 3)
      v23 = 30;
    else
      v23 = 60;
    objc_msgSend(v20, sel_setPreferredFramesPerSecond_, v23);

  }
}

void FMPFView.updateConvergingBackdropColor(sprung:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  id v7;
  float v8;
  float v9;
  id v10;
  float v11;
  float v12;
  double v13;
  id v14;
  id v15;
  float v16;
  double v17;
  float v18;
  double v19;
  float v20;
  id v21;
  id v22;
  float v23;
  id v24;
  float v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Double v39;
  Swift::Double v40;
  Swift::Double toValue[2];

  v2 = v1;
  toValue[1] = *(Swift::Double *)MEMORY[0x24BDAC8D0];
  if (one-time initialization token for fmpfBlackColor != -1)
    swift_once();
  v4 = (id)static UIColor.fmpfBlackColor;
  v5 = (void *)objc_opt_self();
  v6 = v4;
  v7 = objc_msgSend(v5, sel_standardUserDefaults);
  objc_msgSend(v7, sel_fmpfBlackBackdropSigma);
  v9 = v8;

  v10 = objc_msgSend(v5, sel_standardUserDefaults);
  objc_msgSend(v10, sel_fmpfBlackBackdropAlpha);
  v12 = v11;

  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_isConvergingBackdropShown) == 1
    && (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity + 8) & 1) == 0)
  {
    v13 = *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity);
    v14 = v6;
    v15 = objc_msgSend(v5, sel_standardUserDefaults);
    objc_msgSend(v15, sel_fmpfGreenBackdropHue);
    v17 = v16;
    objc_msgSend(v15, sel_fmpfGreenBackdropSaturation);
    v19 = v18;
    objc_msgSend(v15, sel_fmpfGreenBackdropValue);
    v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD4B8]), sel_initWithHue_saturation_brightness_alpha_, v17, v19, v20, 1.0);

    v4 = UIColor.fmpfBlendWithColor(_:factor:)(v21, v13);
  }
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity) == 1)
  {
    v22 = objc_msgSend(v5, sel_standardUserDefaults);
    objc_msgSend(v22, sel_fmpfGreenBackdropSigma);
    v9 = v23;

    v24 = objc_msgSend(v5, sel_standardUserDefaults);
    objc_msgSend(v24, sel_fmpfGreenBackdropAlpha);
    v12 = v25;

  }
  if (v4)
  {
    v40 = 0.5;
    toValue[0] = 0.5;
    v38 = 0x3FE0000000000000;
    v39 = 0.5;
    v26 = v4;
    objc_msgSend(v26, sel_getRed_green_blue_alpha_, toValue, &v40, &v39, &v38);
    v27 = v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings;
    v28 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings);
    if ((a1 & 1) != 0)
    {
      v29 = v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(Swift::Double *)v29 = toValue[0];
      *(_BYTE *)(v29 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      v30 = *(_QWORD *)(v27 + 8) + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(Swift::Double *)v30 = v40;
      *(_BYTE *)(v30 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      v31 = *(_QWORD *)(v27 + 16) + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(Swift::Double *)v31 = v39;
      *(_BYTE *)(v31 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      v32 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring)
          + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(double *)v32 = v9;
      *(_BYTE *)(v32 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
      v33 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring)
          + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ftarget;
      *(double *)v33 = v12;
      *(_BYTE *)(v33 + 8) = 0;
      FMPFFluidSpring.ftarget.didset();
    }
    else
    {
      FLSpring.resetImmediately(toValue:)(toValue[0]);
      *(_BYTE *)(v28 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      v34 = *(_QWORD *)(v27 + 8);
      FLSpring.resetImmediately(toValue:)(v40);
      *(_BYTE *)(v34 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      v35 = *(_QWORD *)(v27 + 16);
      FLSpring.resetImmediately(toValue:)(v39);
      *(_BYTE *)(v35 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      v36 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring);
      FLSpring.resetImmediately(toValue:)(v9);
      *(_BYTE *)(v36 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
      v37 = *(_QWORD *)(v2 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring);
      FLSpring.resetImmediately(toValue:)(v12);
      *(_BYTE *)(v37 + OBJC_IVAR____TtC10TVRemoteUI15FMPFFluidSpring_ready) = 0;
    }

  }
}

Swift::Void __swiftcall FMPFView.thermalStateDidChange(notification:)(NSNotification notification)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  id v4;
  _OWORD v5[2];
  _BYTE v6[24];
  uint64_t v7;

  if (-[objc_class object](notification.super.isa, sel_object))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v5, (uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (v7)
  {
    type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for NSProcessInfo);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v2 = objc_msgSend(v4, sel_thermalState);
      *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastThermalState) = v2;
      if (v2 == (id)3)
        v3 = 30;
      else
        v3 = 60;
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView), sel_setPreferredFramesPerSecond_, v3);

    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v6);
  }
}

Swift::Void __swiftcall FMPFView.setup()()
{
  void *v0;
  double v1;
  double v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  objc_msgSend(v0, sel_bounds);
  if (v2 == 0.0 && v1 == 0.0)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    v3 = objc_msgSend(v0, sel_description);
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

    v7._countAndFlagsBits = v4;
    v7._object = v6;
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x800000021B100880;
    v8._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v8);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    FMPFView.setUpSKScene()();
  }
}

uint64_t type metadata accessor for FMPFView()
{
  return objc_opt_self();
}

unint64_t specialized BidirectionalCollection.suffix(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  char v4;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v4 & 1) != 0)
      result = 15;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

char *specialized FMPFView.init(experienceType:config:distance:)(unsigned __int8 *a1, uint64_t a2)
{
  char *v2;
  int v5;
  uint64_t v6;
  id v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  id v17;
  id v18;
  char *v19;
  void *v20;
  void *v21;
  char *v22;
  id v23;
  id v24;
  uint64_t v25;
  void *v26;
  id v28;
  objc_super v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[5];
  _BYTE v38[184];
  _BYTE v39[184];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  char v51;
  _BYTE v52[184];

  outlined init with take of FMPFSKPatternNodeConfig?(a2, (uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v38, (uint64_t)v52, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  v5 = *a1;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_style] = 0x3FE8000000000000;
  v6 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView;
  v7 = objc_allocWithZone(MEMORY[0x24BDE9EE8]);
  v8 = v2;
  *(_QWORD *)&v2[v6] = objc_msgSend(v7, sel_init);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_scnSceneView] = 0;
  v9 = &v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity];
  *(_QWORD *)v9 = 0;
  v9[8] = 1;
  v10 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring;
  *(_QWORD *)&v8[v10] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  v11 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring;
  *(_QWORD *)&v8[v11] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene] = 0;
  v12 = &v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedRadiusFactor];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedSprungRadiusFactor] = 2;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_locationManager] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_sceneIsRunning] = 0;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_isConvergingBackdropShown] = 0;
  v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_experienceType] = v5;
  outlined init with take of FMPFSKPatternNodeConfig?(a2, (uint64_t)v39, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  if (_s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOg((uint64_t)v39) == 1)
  {
    if (v5 == 1)
    {
      if (one-time initialization token for r1NoAR != -1)
        swift_once();
      v37[1] = unk_25513FDF0;
      v37[2] = xmmword_25513FE00;
      v37[3] = xmmword_25513FE10;
      LOBYTE(v37[4]) = byte_25513FE20;
      v34 = xmmword_25513FDB0;
      v35 = *(_OWORD *)&byte_25513FDC0;
      v36 = xmmword_25513FDD0;
      v37[0] = *(_OWORD *)&byte_25513FDE0;
      v30 = static FMPFSKPatternNodeConfig.r1NoAR;
      v31 = *(_OWORD *)&byte_25513FD80;
      v32 = xmmword_25513FD90;
      v33 = *(_OWORD *)&byte_25513FDA0;
    }
    else
    {
      LOBYTE(v40) = 1;
      v30 = xmmword_21B0F9790;
      LOBYTE(v31) = 1;
      *((_QWORD *)&v31 + 1) = 0;
      LOBYTE(v32) = 1;
      *((_QWORD *)&v32 + 1) = 0;
      LOBYTE(v33) = 1;
      *((_QWORD *)&v33 + 1) = 0;
      LOBYTE(v34) = 1;
      *((_QWORD *)&v34 + 1) = 0;
      LOBYTE(v35) = 1;
      *((_QWORD *)&v35 + 1) = 0;
      LOBYTE(v36) = 1;
      *((_QWORD *)&v36 + 1) = 0;
      LOBYTE(v37[0]) = 1;
      memset((char *)v37 + 8, 0, 57);
    }
    outlined retain of FMPFSKPatternNodeConfig((uint64_t)&v30);
    v48 = v37[1];
    v49 = v37[2];
    v50 = v37[3];
    v51 = v37[4];
    v44 = v34;
    v45 = v35;
    v46 = v36;
    v47 = v37[0];
    v40 = v30;
    v41 = v31;
    v42 = v32;
    v43 = v33;
  }
  else
  {
    outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v52, (uint64_t)&v40, (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  }
  v37[1] = v48;
  v37[2] = v49;
  v37[3] = v50;
  LOBYTE(v37[4]) = v51;
  v34 = v44;
  v35 = v45;
  v36 = v46;
  v37[0] = v47;
  v30 = v40;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  destructiveProjectEnumData for FMFindingState(&v30);
  outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)&v30, (uint64_t)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_config], (uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  outlined retain of FMPFSKPatternNodeConfig?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined copy of FMPFSKPatternNodeConfig?);
  v13 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  v14 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  v15 = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  v16 = &v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSprings];
  *(_QWORD *)v16 = v13;
  *((_QWORD *)v16 + 1) = v14;
  *((_QWORD *)v16 + 2) = v15;
  v17 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v18 = objc_msgSend(v17, sel_thermalState);

  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastThermalState] = v18;
  v29.receiver = v8;
  v29.super_class = (Class)type metadata accessor for FMPFView();
  v19 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v20 = *(void **)&v19[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView];
  v21 = (void *)objc_opt_self();
  v22 = v19;
  v23 = objc_msgSend(v21, sel_clearColor);
  objc_msgSend(v20, sel_setBackgroundColor_, v23);

  objc_msgSend(v20, sel_setAllowsTransparency_, 1);
  objc_msgSend(v22, sel_addSubview_, v20);
  FMPFView.setupConstraints()();
  v24 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v24, sel_addObserver_selector_name_object_, v22, sel_thermalStateDidChangeWithNotification_, *MEMORY[0x24BDD1168], 0);

  v28 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  swift_getKeyPath();
  swift_allocObject();
  swift_unknownObjectWeakInit();
  v25 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)();
  swift_release();
  swift_release();

  outlined retain of FMPFSKPatternNodeConfig?(a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))outlined consume of FMPFSKPatternNodeConfig?);
  v26 = *(void **)&v22[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation];
  *(_QWORD *)&v22[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation] = v25;

  return v22;
}

uint64_t _s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOg(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t outlined retain of FMPFSKPatternNodeConfig(uint64_t a1)
{
  outlined copy of FMPFSKLabelNodeStyle?(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(void **)(a1 + 136));
  return a1;
}

id outlined copy of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  id result;

  if (a17 != 1)
    return outlined copy of FMPFSKLabelNodeStyle?(a16, a17, a18);
  return result;
}

char *keypath_get_selector_fmpfEcoMode()
{
  return sel_fmpfEcoMode;
}

id sub_21B0E5368@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_fmpfEcoMode);
  *a2 = (_BYTE)result;
  return result;
}

id sub_21B0E5398(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFmpfEcoMode_, *a1);
}

uint64_t sub_21B0E53AC()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FMPFView.init(experienceType:config:distance:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in FMPFView.init(experienceType:config:distance:)(a1, a2, v2);
}

uint64_t outlined retain of FMPFSKPatternNodeConfig?(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  char v4;

  v4 = *(_BYTE *)(a1 + 176);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    v4);
  return a1;
}

void outlined consume of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  if (a17 != 1)
    outlined consume of FMPFSKLabelNodeStyle?(a16, a17, a18);
}

uint64_t outlined init with take of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void specialized FMPFView.init(coder:)()
{
  _BYTE *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_style] = 0x3FE8000000000000;
  v1 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDE9EE8]), sel_init);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_scnSceneView] = 0;
  v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropRGBAColorSpringsIntensity];
  *(_QWORD *)v2 = 0;
  v2[8] = 1;
  v3 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropSigmaSpring;
  *(_QWORD *)&v0[v3] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  v4 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_backdropAlphaSpring;
  *(_QWORD *)&v0[v4] = specialized static FMPFFluidSpring.defaultSpringWith(initialValue:stableValueThreshold:response:)(0, 0, 0x3F847AE147AE147BLL, 0, 0, 1);
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene] = 0;
  v5 = &v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedRadiusFactor];
  *(_QWORD *)v5 = 0;
  v5[8] = 1;
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_lastAskedSprungRadiusFactor] = 2;
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_locationManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ecoModeObservation] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_fmpfdelegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_sceneIsRunning] = 0;
  v0[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_isConvergingBackdropShown] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

char *FindingViewController.findingView.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  id v5;
  char *v6;
  void *v7;
  id v8;
  unsigned __int8 v10;
  _BYTE v11[184];
  _BYTE v12[184];

  v1 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView);
  }
  else
  {
    v4 = v0;
    v10 = 2;
    _s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOi0_((uint64_t)v11);
    outlined init with take of FMPFSKPatternNodeConfig?((uint64_t)v11, (uint64_t)v12);
    v5 = objc_allocWithZone((Class)type metadata accessor for FMPFView());
    v6 = specialized FMPFView.init(experienceType:config:distance:)(&v10, (uint64_t)v12);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id FindingViewController.__deallocating_deinit()
{
  void *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  objc_super v7;

  v1 = FindingViewController.findingView.getter();
  v2 = v1;
  v3 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene;
  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene])
    objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView], sel_presentScene_, 0);
  v4 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView];
  if (v4)
    objc_msgSend(v4, sel_removeFromSuperview);
  v5 = *(void **)&v2[v3];
  *(_QWORD *)&v2[v3] = 0;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for FindingViewController();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

Swift::Void __swiftcall FindingViewController.viewDidLoad()()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  char *v6;
  id v7;
  void *v8;
  objc_super v9;

  v1 = objc_msgSend(v0, sel_view);
  if (!v1)
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = v1;
  v3 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
  objc_msgSend(v2, sel_setBackgroundColor_, v3);

  v4 = objc_msgSend(v0, sel_view);
  if (!v4)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v5 = v4;
  v6 = FindingViewController.findingView.getter();
  objc_msgSend(v5, sel_addSubview_, v6);

  v7 = objc_msgSend(v0, sel_view);
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, sel_addSubview_, *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel]);

    FindingViewController.setupLabels()();
    FindingViewController.setupInstructionsView()();
    FindingViewController.setupConstraints()();
    v9.receiver = v0;
    v9.super_class = (Class)type metadata accessor for FindingViewController();
    objc_msgSendSuper2(&v9, sel_viewDidLoad);
    return;
  }
LABEL_7:
  __break(1u);
}

Swift::Void __swiftcall FindingViewController.viewIsAppearing(_:)(Swift::Bool a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(uint64_t, uint64_t);
  uint64_t v22;
  objc_super v23;

  v2 = v1;
  v23.receiver = v2;
  v23.super_class = (Class)type metadata accessor for FindingViewController();
  objc_msgSendSuper2(&v23, sel_viewIsAppearing_, a1);
  FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()();
  v4 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear;
  if (v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear] == 1)
  {
    v5 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer;
    objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer], sel_invalidate);
    v6 = *(void **)&v2[v5];
    *(_QWORD *)&v2[v5] = 0;

    FindingViewController.startNISession()();
    v7 = FindingViewController.findingView.getter();
    v8 = objc_msgSend(v2, sel_view);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, sel_bounds);
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;

      objc_msgSend(v7, sel_setFrame_, v11, v13, v15, v17);
      v18 = FindingViewController.findingView.getter();
      FMPFView.setup()();

      v19 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController];
      FMR1HapticsController.setUpHaptics()();
      v20 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v21 = (void (**)(uint64_t, uint64_t))(v19
                                                   + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
      v22 = *(_QWORD *)(v19 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
      *v21 = partial apply for closure #1 in FindingViewController.viewIsAppearing(_:);
      v21[1] = (void (*)(uint64_t, uint64_t))v20;
      outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v22);
      FindingViewController.updateHaptics()();
      v2[v4] = 0;
    }
    else
    {
      __break(1u);
    }
  }
}

void closure #1 in FindingViewController.viewIsAppearing(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  Swift::Double v10;
  void *v11;
  double v12;
  _BYTE v13[24];
  uint64_t v14;

  v4 = a3 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x22075D574](v4);
  if (v5)
  {
    v6 = (char *)v5;
    outlined init with copy of Any?(a2, (uint64_t)v13);
    if (v14)
    {
      if ((swift_dynamicCast() & 1) != 0)
      {
        v7 = FindingViewController.findingView.getter();
        v8 = *(void **)&v7[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
        if (v8)
        {
          v9 = v8;
          v10 = v12;
LABEL_9:
          FMPFSKScene.pulseBTNode(duration:)(v10);

          v7 = v6;
          v6 = v9;
          goto LABEL_10;
        }
        goto LABEL_10;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v13);
    }
    v7 = FindingViewController.findingView.getter();
    v11 = *(void **)&v7[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
    if (v11)
    {
      v9 = v11;
      v10 = 0.5;
      goto LABEL_9;
    }
LABEL_10:

  }
}

Swift::Void __swiftcall FindingViewController.viewDidDisappear(_:)(Swift::Bool a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t *v16;
  void (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id v23;
  Class isa;
  id v25;
  objc_class *v26;
  objc_super v27;

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController]
                 + OBJC_IVAR____TtC10TVRemoteUI21FMR1HapticsController_playedHapticPatternHandler);
  v10 = *v9;
  *v9 = 0;
  v9[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v10);
  FMR1HapticsController.stopHaptics()();
  FMR1HapticsController.tearDownHaptics()();
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession], sel_invalidate);
  v11 = FindingViewController.findingView.getter();
  v12 = v11;
  v13 = OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene;
  if (*(_QWORD *)&v11[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene])
    objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skSceneView], sel_presentScene_, 0);
  v14 = *(void **)&v12[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_ringView];
  if (v14)
    objc_msgSend(v14, sel_removeFromSuperview);
  v15 = *(void **)&v12[v13];
  *(_QWORD *)&v12[v13] = 0;

  v16 = (uint64_t *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  v17 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  if (v17)
  {
    v18 = swift_retain();
    v17(v18);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)v17);
    v19 = *v16;
  }
  else
  {
    v19 = 0;
  }
  *v16 = 0;
  v16[1] = 0;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?(v19);
  v20 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sleepPreventer];
  if (*(_QWORD *)(v20 + 16))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(_QWORD *)(v20 + 16) = 0;
  swift_release();
  v21 = objc_msgSend((id)objc_opt_self(), sel_sharedApplication);
  objc_msgSend(v21, sel_setIdleTimerDisabled_, 0);

  v22 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
  v23 = *(id *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData];
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  objc_msgSend(v23, sel_setSessionEndTime_, isa);

  objc_msgSend(*(id *)&v2[v22], sel_setEndingProximityMeasurement_, *(double *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement]);
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4060]), sel_init);
  objc_msgSend(v25, sel_logFindingSessionStatistics_, *(_QWORD *)&v2[v22]);

  v26 = (objc_class *)type metadata accessor for FindingViewController();
  v27.receiver = v2;
  v27.super_class = v26;
  objc_msgSendSuper2(&v27, sel_viewDidDisappear_, a1);
}

void FindingViewController.startNISession()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  Class isa;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData);
  Date.init()();
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  objc_msgSend(v7, sel_setSessionStartTime_, isa);

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x24BDDFE38]), sel_init);
  v10 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession;
  v11 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession) = v9;

  v12 = *(void **)(v1 + v10);
  if (v12)
    objc_msgSend(v12, sel_setDelegate_, v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_21B0F9240;
  v14 = objc_allocWithZone(MEMORY[0x24BDDFE30]);
  v15 = (void *)MEMORY[0x22075C584](1701995880, 0xE400000000000000);
  v16 = objc_msgSend(v14, sel_initWithName_devicePresencePreset_, v15, 1);

  *(_QWORD *)(v13 + 32) = v16;
  v17 = objc_allocWithZone(MEMORY[0x24BDDFE30]);
  v18 = (void *)MEMORY[0x22075C584](1918985582, 0xE400000000000000);
  v19 = objc_msgSend(v17, sel_initWithName_devicePresencePreset_, v18, 4);

  *(_QWORD *)(v13 + 40) = v19;
  v20 = objc_allocWithZone(MEMORY[0x24BDDFE30]);
  v21 = (void *)MEMORY[0x22075C584](7496038, 0xE300000000000000);
  v22 = objc_msgSend(v20, sel_initWithName_devicePresencePreset_, v21, 5);

  *(_QWORD *)(v13 + 48) = v22;
  v30 = v13;
  specialized Array._endMutation()();
  v23 = v30;
  v24 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_discoveryToken);
  objc_allocWithZone(MEMORY[0x24BDDFDF8]);
  v25 = v24;
  v26 = specialized @nonobjc NIDevicePresenceConfiguration.init(discoveryToken:regions:preferredUpdateRate:)((uint64_t)v25, v23, 2);

  v27 = *(void **)(v1 + v10);
  if (v27)
  {
    v28 = v27;
    objc_msgSend(v28, sel_runWithConfiguration_, v26);

  }
}

void thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

void closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  char *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  v2 = a2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state;
  v3 = *(char **)(a2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16);
  if ((unint64_t)(v3 - 6) >= 4)
  {
    v5 = *(_QWORD *)(v2 + 80);
    v4 = *(_QWORD *)(v2 + 88);
    v7 = *(_QWORD *)(v2 + 64);
    v6 = *(_QWORD *)(v2 + 72);
    v9 = *(_QWORD *)(v2 + 48);
    v8 = *(_QWORD *)(v2 + 56);
    v11 = *(_QWORD *)(v2 + 32);
    v10 = *(_QWORD *)(v2 + 40);
    v12 = *(void **)(v2 + 24);
    v14 = *(_QWORD *)v2;
    v13 = *(_QWORD *)(v2 + 8);
    v15 = *(_WORD *)(v2 + 96) | 0x300;
    *(_QWORD *)&v16 = v14;
    *((_QWORD *)&v16 + 1) = v13;
    v17 = v3;
    v18 = v12;
    v19 = v11;
    v20 = v10;
    v21 = v9;
    v22 = v8;
    v23 = v7;
    v24 = v6;
    v25 = v5;
    v26 = v4;
    v27 = v15;
    outlined copy of FMFindingMeasurement(v14, v13, v3, v12);
    FindingViewController.updateState(to:)(&v16);
    outlined consume of FMFindingState(v14, v13, v3, v12);
  }
}

uint64_t FindingViewController.restartSessionOnError()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char *v22;
  char *v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50;
  uint64_t result;
  uint64_t v52;
  _QWORD v53[5];
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD aBlock[6];
  __int128 v68;
  char *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v65 = *(_QWORD *)(v1 - 8);
  v66 = v1;
  MEMORY[0x24BDAC7A8](v1, v2);
  v64 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for DispatchQoS();
  v62 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63, v4);
  v61 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTimeInterval();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6, v8);
  v10 = (_QWORD *)((char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for DispatchTime();
  v11 = *(_QWORD *)(v60 - 8);
  v13 = MEMORY[0x24BDAC7A8](v60, v12);
  v58 = (char *)v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13, v15);
  v59 = (char *)v53 - v16;
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.findingExperience);
  v18 = v0;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v21 = 134217984;
    *(_QWORD *)&v68 = *(_QWORD *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_21B042000, v19, v20, "NISession to restart after a delay of (%ld) ms", v21, 0xCu);
    MEMORY[0x22075D4E4](v21, -1, -1);

  }
  else
  {

  }
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer], sel_invalidate);
  v22 = &v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  v23 = *(char **)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16];
  if ((unint64_t)(v23 - 6) >= 4)
  {
    v24 = *((_WORD *)v22 + 48);
    v56 = v7;
    v26 = *((_QWORD *)v22 + 10);
    v25 = *((_QWORD *)v22 + 11);
    v54 = v11;
    v27 = *((_QWORD *)v22 + 8);
    v28 = *((_QWORD *)v22 + 9);
    v30 = *((_QWORD *)v22 + 6);
    v29 = *((_QWORD *)v22 + 7);
    v32 = *((_QWORD *)v22 + 4);
    v31 = *((_QWORD *)v22 + 5);
    v55 = v10;
    v33 = (void *)*((_QWORD *)v22 + 3);
    v57 = v6;
    v35 = *(_QWORD *)v22;
    v34 = *((_QWORD *)v22 + 1);
    *(_QWORD *)&v68 = v35;
    *((_QWORD *)&v68 + 1) = v34;
    v69 = v23;
    v70 = v33;
    v71 = v32;
    v72 = v31;
    v53[0] = v32;
    v53[1] = v31;
    v73 = v30;
    v74 = v29;
    v53[2] = v30;
    v53[3] = v29;
    v53[4] = v27;
    v75 = v27;
    v76 = v28;
    v77 = v26;
    v78 = v25;
    v79 = v24 | 0x300;
    outlined copy of FMFindingMeasurement(v35, v34, v23, v33);
    FindingViewController.updateState(to:)(&v68);
    v7 = v56;
    v11 = v54;
    v36 = v34;
    v6 = v57;
    v37 = v33;
    v10 = v55;
    outlined consume of FMFindingState(v35, v36, v23, v37);
  }
  v38 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer;
  objc_msgSend(*(id *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer], sel_invalidate);
  v39 = *(void **)&v18[v38];
  *(_QWORD *)&v18[v38] = 0;

  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  v56 = static OS_dispatch_queue.main.getter();
  v40 = v58;
  static DispatchTime.now()();
  v57 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds;
  *v10 = *(_QWORD *)&v18[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds];
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, *MEMORY[0x24BEE5410], v6);
  v41 = v59;
  MEMORY[0x22075C548](v40, v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  v42 = *(void (**)(char *, uint64_t))(v11 + 8);
  v43 = v60;
  v42(v40, v60);
  v44 = swift_allocObject();
  *(_QWORD *)(v44 + 16) = v18;
  aBlock[4] = partial apply for closure #1 in FindingViewController.restartSessionOnError();
  aBlock[5] = v44;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_25_0;
  v45 = _Block_copy(aBlock);
  v46 = v18;
  swift_release();
  v47 = v61;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  v48 = v64;
  v49 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v50 = (void *)v56;
  MEMORY[0x22075C77C](v41, v47, v48, v45);
  _Block_release(v45);

  (*(void (**)(char *, uint64_t))(v65 + 8))(v48, v49);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v47, v63);
  result = ((uint64_t (*)(char *, uint64_t))v42)(v41, v43);
  v52 = *(_QWORD *)&v18[v57];
  if (v52 <= 9999)
    *(_QWORD *)&v18[v57] = v52 + 10;
  return result;
}

void FindingViewController.setupConstraints()()
{
  char *v0;
  char *v1;
  id v2;
  double v3;
  double v4;
  char *v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  char *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  char *v25;
  id v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  double *v39;
  id v40;
  id v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  double v46;
  id v47;
  id v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  Class v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  void *v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  id v71;
  Class v72;
  void *v73;
  uint64_t v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  id v79;
  id v80;
  id v81;
  id v82;
  void *v83;
  id v84;
  id v85;
  id v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  Class v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  double v97;
  void *v98;
  uint64_t v99;
  id v100;
  id v101;
  void *v102;
  id v103;
  id v104;
  id v105;
  id v106;
  void *v107;
  id v108;
  id v109;
  Class v110;
  uint64_t v111;
  uint64_t v112;
  id v113;
  id v114;
  void *v115;
  id v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  id v121;
  id v122;
  id v123;
  double v124;
  id v125;
  id v126;
  id v127;
  __int128 v128;
  id v129;
  Class v130;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(), sel_mainScreen);
  objc_msgSend(v2, sel_bounds);
  v4 = v3;

  v5 = FindingViewController.findingView.getter();
  objc_msgSend(v5, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_21B0F9630;
  v7 = FindingViewController.findingView.getter();
  v8 = objc_msgSend(v7, sel_topAnchor);

  v9 = objc_msgSend(v1, sel_view);
  if (!v9)
  {
    __break(1u);
    goto LABEL_23;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, sel_topAnchor);

  v12 = objc_msgSend(v8, sel_constraintEqualToAnchor_, v11);
  *(_QWORD *)(v6 + 32) = v12;
  v13 = FindingViewController.findingView.getter();
  v14 = objc_msgSend(v13, sel_bottomAnchor);

  v15 = objc_msgSend(v1, sel_view);
  if (!v15)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v16 = v15;
  v17 = objc_msgSend(v15, sel_bottomAnchor);

  v18 = objc_msgSend(v14, sel_constraintEqualToAnchor_, v17);
  *(_QWORD *)(v6 + 40) = v18;
  v19 = FindingViewController.findingView.getter();
  v20 = objc_msgSend(v19, sel_leadingAnchor);

  v21 = objc_msgSend(v1, sel_view);
  if (!v21)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v22 = v21;
  v23 = objc_msgSend(v21, sel_leadingAnchor);

  v24 = objc_msgSend(v20, sel_constraintEqualToAnchor_, v23);
  *(_QWORD *)(v6 + 48) = v24;
  v25 = FindingViewController.findingView.getter();
  v26 = objc_msgSend(v25, sel_trailingAnchor);

  v27 = objc_msgSend(v1, sel_view);
  if (!v27)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v28 = v27;
  v29 = (void *)objc_opt_self();
  v30 = objc_msgSend(v28, sel_trailingAnchor);

  v31 = objc_msgSend(v26, sel_constraintEqualToAnchor_, v30);
  *(_QWORD *)(v6 + 56) = v31;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for NSLayoutConstraint);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v129 = v29;
  objc_msgSend(v29, sel_activateConstraints_, isa);

  v33 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_21B0F9240;
  v35 = objc_msgSend(*(id *)&v1[v33], sel_topAnchor);
  v36 = objc_msgSend(v1, sel_view);
  if (!v36)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v37 = v36;
  v38 = objc_msgSend(v36, sel_topAnchor);

  v39 = (double *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style];
  v40 = objc_msgSend(v35, sel_constraintEqualToAnchor_constant_, v38, *(double *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style + 40]);

  *(_QWORD *)(v34 + 32) = v40;
  v41 = objc_msgSend(*(id *)&v1[v33], sel_leadingAnchor);
  v42 = objc_msgSend(v1, sel_view);
  if (!v42)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v43 = v42;
  v44 = objc_msgSend(v42, sel_safeAreaLayoutGuide);

  v45 = objc_msgSend(v44, sel_leadingAnchor);
  v46 = v39[7];
  v47 = objc_msgSend(v41, sel_constraintEqualToAnchor_constant_, v45, v46);

  *(_QWORD *)(v34 + 40) = v47;
  v48 = objc_msgSend(*(id *)&v1[v33], sel_trailingAnchor);
  v49 = objc_msgSend(v1, sel_view);
  if (!v49)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v50 = v49;
  v51 = objc_msgSend(v49, sel_safeAreaLayoutGuide);

  v52 = objc_msgSend(v51, sel_trailingAnchor);
  v53 = objc_msgSend(v48, sel_constraintEqualToAnchor_constant_, v52, -v46);

  *(_QWORD *)(v34 + 48) = v53;
  specialized Array._endMutation()();
  v54 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v54);

  v55 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_21B0F9240;
  v57 = objc_msgSend(*(id *)&v1[v55], sel_topAnchor);
  v58 = objc_msgSend(*(id *)&v1[v33], sel_bottomAnchor);
  v59 = objc_msgSend(v57, sel_constraintEqualToAnchor_constant_, v58, v39[6]);

  *(_QWORD *)(v56 + 32) = v59;
  v60 = objc_msgSend(*(id *)&v1[v55], sel_leadingAnchor);
  v61 = objc_msgSend(v1, sel_view);
  if (!v61)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v62 = v61;
  v63 = objc_msgSend(v61, sel_safeAreaLayoutGuide);

  v64 = objc_msgSend(v63, sel_leadingAnchor);
  v65 = objc_msgSend(v60, sel_constraintEqualToAnchor_constant_, v64, v46);

  *(_QWORD *)(v56 + 40) = v65;
  v66 = objc_msgSend(*(id *)&v1[v55], sel_trailingAnchor);
  v67 = objc_msgSend(v1, sel_view);
  if (!v67)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v68 = v67;
  v69 = objc_msgSend(v67, sel_safeAreaLayoutGuide);

  v70 = objc_msgSend(v69, sel_trailingAnchor);
  v71 = objc_msgSend(v66, sel_constraintEqualToAnchor_constant_, v70, -v46);

  *(_QWORD *)(v56 + 48) = v71;
  specialized Array._endMutation()();
  v72 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v72);

  v73 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel];
  objc_msgSend(v73, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_21B0F9240;
  v75 = objc_msgSend(v73, sel_bottomAnchor);
  v76 = objc_msgSend(v1, sel_view);
  if (!v76)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v77 = v76;
  v78 = objc_msgSend(v76, sel_safeAreaLayoutGuide);

  v79 = objc_msgSend(v78, (SEL)&selRef_buttonHeight + 5);
  v80 = objc_msgSend(v75, sel_constraintEqualToAnchor_constant_, v79, -v39[10]);

  *(_QWORD *)(v74 + 32) = v80;
  v81 = objc_msgSend(v73, sel_leadingAnchor);
  v82 = objc_msgSend(v1, sel_view);
  if (!v82)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v83 = v82;
  v84 = objc_msgSend(v82, sel_safeAreaLayoutGuide);

  v85 = objc_msgSend(v84, sel_leadingAnchor);
  v86 = objc_msgSend(v81, sel_constraintEqualToAnchor_constant_, v85, v46);

  *(_QWORD *)(v74 + 40) = v86;
  v87 = objc_msgSend(v73, sel_trailingAnchor);
  v88 = objc_msgSend(v1, sel_view);
  if (!v88)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v89 = v88;
  v90 = objc_msgSend(v88, sel_safeAreaLayoutGuide);

  v91 = objc_msgSend(v90, sel_trailingAnchor);
  v92 = objc_msgSend(v87, sel_constraintEqualToAnchor_constant_, v91, -v46);

  *(_QWORD *)(v74 + 48) = v92;
  specialized Array._endMutation()();
  v93 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v93);

  v94 = 16;
  if (v4 < 414.0)
    v94 = 17;
  v95 = 14;
  if (v4 < 414.0)
    v95 = 15;
  v96 = v39[v95];
  v97 = v39[v94];
  v98 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton];
  objc_msgSend(v98, sel_setTranslatesAutoresizingMaskIntoConstraints_, 0, 4, 9);
  v99 = swift_allocObject();
  *(_OWORD *)(v99 + 16) = xmmword_21B0F7C50;
  v100 = objc_msgSend(v98, sel_topAnchor);
  v101 = objc_msgSend(v1, sel_view);
  if (!v101)
    goto LABEL_34;
  v102 = v101;
  v103 = objc_msgSend(v101, sel_bottomAnchor);

  v104 = objc_msgSend(v100, sel_constraintEqualToAnchor_constant_, v103, -v97);
  *(_QWORD *)(v99 + 32) = v104;
  v105 = objc_msgSend(v98, sel_leadingAnchor);
  v106 = objc_msgSend(v1, sel_view);
  if (!v106)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v107 = v106;
  v108 = objc_msgSend(v106, sel_leadingAnchor);

  v109 = objc_msgSend(v105, sel_constraintEqualToAnchor_constant_, v108, v96);
  *(_QWORD *)(v99 + 40) = v109;
  specialized Array._endMutation()();
  v110 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v129, sel_activateConstraints_, v110);

  v111 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView], sel_setTranslatesAutoresizingMaskIntoConstraints_, 0);
  v112 = swift_allocObject();
  *(_OWORD *)(v112 + 16) = v128;
  v113 = objc_msgSend(*(id *)&v1[v111], sel_centerYAnchor);
  v114 = objc_msgSend(v1, sel_view);
  if (!v114)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v115 = v114;
  v116 = objc_msgSend(v114, sel_centerYAnchor);

  v117 = objc_msgSend(v113, sel_constraintEqualToAnchor_constant_, v116, v39[13]);
  *(_QWORD *)(v112 + 32) = v117;
  v118 = objc_msgSend(*(id *)&v1[v111], sel_centerXAnchor);
  v119 = objc_msgSend(v1, sel_view);
  if (v119)
  {
    v120 = v119;
    v121 = objc_msgSend(v119, sel_centerXAnchor);

    v122 = objc_msgSend(v118, sel_constraintEqualToAnchor_, v121);
    *(_QWORD *)(v112 + 40) = v122;
    v123 = objc_msgSend(*(id *)&v1[v111], sel_widthAnchor);
    v124 = v39[12];
    v125 = objc_msgSend(v123, sel_constraintEqualToConstant_, v124);

    *(_QWORD *)(v112 + 48) = v125;
    v126 = objc_msgSend(*(id *)&v1[v111], sel_heightAnchor);
    v127 = objc_msgSend(v126, sel_constraintLessThanOrEqualToConstant_, v124);

    *(_QWORD *)(v112 + 56) = v127;
    specialized Array._endMutation()();
    v130 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v129, sel_activateConstraints_, v130);

    return;
  }
LABEL_37:
  __break(1u);
}

id FindingViewController.setupLabels()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  double *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  void *v12;
  id result;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *object;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  void *v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  objc_class *v45;
  id v46;
  id v47;
  Swift::String v48;
  void *v49;
  char *v50;
  Swift::String v51;
  Swift::String v52;
  _QWORD v53[4];
  UIColor_optional v54;
  UIColor_optional v55;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  v3 = (double *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style];
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel], sel_setFont_, *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style]);
  objc_msgSend(*(id *)&v0[v2], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v2], sel_setNumberOfLines_, 0);
  objc_msgSend(*(id *)&v0[v2], sel_setTextAlignment_, 4);
  v4 = *(void **)&v0[v2];
  v5 = (void *)objc_opt_self();
  v6 = v4;
  v7 = objc_msgSend(v5, sel_whiteColor);
  v8 = objc_msgSend(v7, sel_colorWithAlphaComponent_, v3[4]);

  objc_msgSend(v6, sel_setTextColor_, v8);
  v9 = *(id *)&v1[v2];
  v10._countAndFlagsBits = 0x474E49444E4946;
  v10._object = (void *)0xE700000000000000;
  countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(v10, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  v12 = (void *)MEMORY[0x22075C584](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v9, sel_setText_, v12);

  result = objc_msgSend(v1, sel_view);
  if (!result)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v14 = result;
  objc_msgSend(result, sel_addSubview_, *(_QWORD *)&v1[v2]);

  v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel], sel_setFont_, *((_QWORD *)v3 + 1));
  objc_msgSend(*(id *)&v1[v15], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v1[v15], sel_setNumberOfLines_, 0);
  objc_msgSend(*(id *)&v1[v15], sel_setTextAlignment_, 4);
  v16 = *(id *)&v1[v15];
  v17 = objc_msgSend(v5, sel_whiteColor);
  objc_msgSend(v16, sel_setTextColor_, v17);

  v18 = objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_remoteInfo], sel_tvName);
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v22 = v21;

    v23 = *(id *)&v1[v15];
    v24._countAndFlagsBits = 0x4E5F45544F4D4552;
    v24._object = (void *)0xEB00000000454D41;
    FMFindingLocalizedString(_:fallbackKey:tableName:)(v24, (Swift::String_optional)0, (Swift::String_optional)0);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
    v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_21B0F8460;
    *(_QWORD *)(v25 + 56) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(v25 + 64) = lazy protocol witness table accessor for type String and conformance String();
    *(_QWORD *)(v25 + 32) = v20;
    *(_QWORD *)(v25 + 40) = v22;
    v26 = String.init(format:_:)();
    v28 = v27;
    swift_bridgeObjectRelease();
    v29 = v26;
    object = v28;
  }
  else
  {
    v23 = *(id *)&v1[v15];
    v31._countAndFlagsBits = 0x45544F4D4552;
    v31._object = (void *)0xE600000000000000;
    v32 = FMFindingLocalizedString(_:fallbackKey:tableName:)(v31, (Swift::String_optional)0, (Swift::String_optional)0);
    object = v32._object;
    v29 = v32._countAndFlagsBits;
  }
  v33 = (void *)MEMORY[0x22075C584](v29, object);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setText_, v33);

  result = objc_msgSend(v1, sel_view);
  if (!result)
    goto LABEL_12;
  v34 = result;
  objc_msgSend(result, sel_addSubview_, *(_QWORD *)&v1[v15]);

  v35 = *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton];
  v36._object = (void *)0x800000021B100CF0;
  v36._countAndFlagsBits = 0xD000000000000016;
  v37 = FMFindingLocalizedString(_:fallbackKey:tableName:)(v36, (Swift::String_optional)0, (Swift::String_optional)0);
  v38 = (Swift::String *)(v35 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_legend);
  *v38 = v37;
  swift_bridgeObjectRelease();
  v39 = *(void **)(v35 + OBJC_IVAR____TtC10TVRemoteUI15FMR1GlyphButton_label);
  v40 = v38->_object;
  if (v40)
  {
    v41 = v38->_countAndFlagsBits;
    v42 = v39;
    swift_bridgeObjectRetain();
    v43 = (void *)MEMORY[0x22075C584](v41, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    v44 = v39;
    v43 = 0;
  }
  objc_msgSend(v39, sel_setText_, v43);

  v45 = (objc_class *)objc_msgSend(v5, sel_whiteColor);
  v46 = objc_msgSend(v5, sel_whiteColor);
  v47 = objc_msgSend(v46, sel_colorWithAlphaComponent_, 0.2);

  v48._countAndFlagsBits = 0x6B72616D78;
  v48._object = (void *)0xE500000000000000;
  v54.value.super.isa = v45;
  v54.is_nil = (char)v47;
  FMR1GlyphButton.set(named:tintColor:backgroundColor:)(v48, v54, v55);

  result = objc_msgSend(v1, sel_view);
  if (result)
  {
    v49 = result;
    objc_msgSend(result, sel_addSubview_, v35);

    v53[3] = type metadata accessor for FindingViewController();
    v53[0] = v1;
    v50 = v1;
    v51._object = (void *)0x800000021B100CF0;
    v51._countAndFlagsBits = 0xD000000000000016;
    v52 = FMFindingLocalizedString(_:fallbackKey:tableName:)(v51, (Swift::String_optional)0, (Swift::String_optional)0);
    FMR1GlyphButton.setTarget(_:action:for:accessibilityActionName:)((uint64_t)v53, (uint64_t)sel_closeActionWithSender_, 64, v52._countAndFlagsBits, (uint64_t)v52._object);
    swift_bridgeObjectRelease();
    return (id)outlined destroy of Any?((uint64_t)v53);
  }
LABEL_13:
  __break(1u);
  return result;
}

void FindingViewController.setupInstructionsView()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v1 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style];
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel], sel_setFont_, *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style + 16]);
  objc_msgSend(*(id *)&v0[v1], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setNumberOfLines_, 0);
  v3 = *(void **)&v0[v1];
  v4 = (void *)objc_opt_self();
  v5 = v3;
  v6 = objc_msgSend(v4, sel_whiteColor);
  objc_msgSend(v5, sel_setTextColor_, v6);

  objc_msgSend(*(id *)&v0[v1], sel_setTextAlignment_, 1);
  objc_msgSend(*(id *)&v0[v1], sel_setAlpha_, 0.0);
  v7 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView], sel_addArrangedSubview_, *(_QWORD *)&v0[v1]);
  v8 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel], sel_setFont_, *((_QWORD *)v2 + 3));
  objc_msgSend(*(id *)&v0[v8], sel_setAdjustsFontForContentSizeCategory_, 1);
  objc_msgSend(*(id *)&v0[v8], sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(*(id *)&v0[v8], sel_setNumberOfLines_, 0);
  v9 = *(id *)&v0[v8];
  v10 = objc_msgSend(v4, sel_whiteColor);
  objc_msgSend(v9, sel_setTextColor_, v10);

  objc_msgSend(*(id *)&v0[v8], sel_setTextAlignment_, 1);
  objc_msgSend(*(id *)&v0[v8], sel_setAlpha_, 0.0);
  objc_msgSend(*(id *)&v0[v7], sel_addArrangedSubview_, *(_QWORD *)&v0[v8]);
  objc_msgSend(*(id *)&v0[v7], sel_setAxis_, 1);
  objc_msgSend(*(id *)&v0[v7], sel_setAlignment_, 3);
  objc_msgSend(*(id *)&v0[v7], sel_setDistribution_, 0);
  objc_msgSend(*(id *)&v0[v7], sel_setSpacing_, *((double *)v2 + 11));
  v11 = objc_msgSend(v0, sel_view);
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v11, sel_addSubview_, *(_QWORD *)&v0[v7]);

  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata accessor for FindingViewController()
{
  return objc_opt_self();
}

void FindingViewController.updateState(to:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  BOOL v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;
  __int128 v40[6];
  _QWORD v41[13];
  _BYTE v42[104];
  __int128 v43[7];

  v2 = v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state;
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 8);
  v5 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16);
  v6 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 24);
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 32);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 40);
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 48);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 56);
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 64);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 72);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 80);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 88);
  v15 = *(_WORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 96);
  v16 = v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState;
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 8);
  v19 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 16);
  v20 = *(void **)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 24);
  *(_QWORD *)v16 = v3;
  *(_QWORD *)(v16 + 8) = v4;
  *(_QWORD *)(v16 + 16) = v5;
  *(_QWORD *)(v16 + 24) = v6;
  *(_QWORD *)(v16 + 32) = v7;
  *(_QWORD *)(v16 + 40) = v8;
  *(_QWORD *)(v16 + 48) = v9;
  *(_QWORD *)(v16 + 56) = v10;
  *(_QWORD *)(v16 + 64) = v11;
  *(_QWORD *)(v16 + 72) = v12;
  *(_QWORD *)(v16 + 80) = v13;
  *(_QWORD *)(v16 + 88) = v14;
  *(_WORD *)(v16 + 96) = v15;
  outlined copy of FMFindingState(v3, v4, v5, v6);
  outlined consume of FMFindingState(v17, v18, v19, v20);
  v37 = *(_QWORD *)v2;
  v36 = *(_QWORD *)(v2 + 8);
  v21 = *(void **)(v2 + 24);
  v35 = *(void **)(v2 + 16);
  outlined init with take of FMFindingState(a1, v2);
  outlined retain of FMFindingState((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
  outlined consume of FMFindingState(v37, v36, v35, v21);
  outlined init with take of FMFindingState((__int128 *)v16, (uint64_t)v43);
  outlined retain of FMFindingState((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
  v22 = specialized static FMFindingState.== infix(_:_:)(v43, a1);
  outlined retain of FMFindingState((uint64_t)v43, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
  if (!v22)
  {
    if (one-time initialization token for findingExperience != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.findingExperience);
    v24 = v39;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc();
      v28 = swift_slowAlloc();
      *(_QWORD *)&v40[0] = v28;
      *(_DWORD *)v27 = 136315394;
      outlined init with take of FMFindingState((__int128 *)v16, (uint64_t)v42);
      outlined retain of FMFindingState((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
      v29 = FMFindingState.description.getter();
      v31 = v30;
      outlined retain of FMFindingState((uint64_t)v42, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, (uint64_t *)v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      outlined init with take of FMFindingState((__int128 *)v2, (uint64_t)v41);
      outlined retain of FMFindingState((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
      v32 = FMFindingState.description.getter();
      v34 = v33;
      outlined retain of FMFindingState((uint64_t)v41, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_21B042000, v25, v26, "Updated state: %s → %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x22075D4E4](v28, -1, -1);
      MEMORY[0x22075D4E4](v27, -1, -1);

    }
    else
    {

    }
    FindingViewController.updateInstructionsView()();
  }
  FindingViewController.updateFindingView(sprung:state:)(1, a1);
  outlined init with take of FMFindingState((__int128 *)v2, (uint64_t)v40);
  outlined retain of FMFindingState((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
  FMBTDistanceView.update(with:nextBeacon:)(v40, 0, 0);
  outlined retain of FMFindingState((uint64_t)v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
  FindingViewController.updateHaptics()();
}

void FindingViewController.updateFindingView(sprung:state:)(char a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v6;
  void *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  char *v12;
  void *v13;
  id v14;
  char *v15;
  void *v16;
  char *v17;
  char *v18;
  void *v19;
  double v20;
  char *v21;
  void *v22;
  id v23;
  void *v24;
  int v25;
  id v26;
  double v27;
  double v28;
  id v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double Width;
  id v39;
  double v40;
  CGFloat v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  double v49;
  char *v50;
  void *v51;
  char *v52;
  double v53;
  double v54;
  double v55;
  char *v56;
  void *v57;
  double v58;
  char *v59;
  char *v60;
  void *v61;
  double v62;
  char *v63;
  char *v64;
  void *v65;
  char *v66;
  char *v67;
  void *v68;
  char *v69;
  void *v70;
  id v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  double v76;
  char v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  char *v85;
  void *v86;
  id v87;
  char *v88;
  void *v89;
  double v90;
  char *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  _BYTE v96[16];
  double v97;
  double v98[5];
  _BYTE v99[8];
  double v100;
  double v101;
  _BYTE v102[16];
  uint64_t v103;
  CGRect v104;
  CGRect v105;

  v3 = v2;
  v6 = FindingViewController.findingView.getter();
  v7 = *(void **)&v6[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v7)
  {
    v8 = v7;
    specialized FMPFSKScene.setOpacity(_:sprung:swap:)(1, 1.0);

    v6 = v8;
  }

  v9 = FindingViewController.findingView.getter();
  v10 = *(void **)&v9[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v10)
  {
    v11 = v10;
    FMPFSKScene.setPatternConformedToExplodedFactor(_:sprung:)(0, 1.0);

    v9 = v11;
  }

  v12 = FindingViewController.findingView.getter();
  v13 = *(void **)&v12[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v13)
  {
    v14 = v13;
    FMPFSKScene.setPatternConformationFactor(_:sprung:)(a1 & 1, 1.0);

  }
  v12[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 1;
  FMPFView.updateConvergingBackdropColor(sprung:)(1);

  v15 = FindingViewController.findingView.getter();
  v16 = *(void **)&v15[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v16)
  {
    v17 = v16;
    FMPFSKScene.setPatternCenterFactor(_:sprung:)(a1 & 1, 1.0);

    v15 = v17;
  }

  v18 = FindingViewController.findingView.getter();
  FMFindingState.defaultConfiguration.getter((uint64_t)v96);
  v19 = *(void **)&v18[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v19)
  {
    v20 = v97;
    v21 = v19;
    FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(a1 & 1, v20);

    v18 = v21;
  }

  v22 = (void *)objc_opt_self();
  v23 = objc_msgSend(v22, sel_mainScreen);
  v24 = (void *)MEMORY[0x22075C584](0xD000000000000011, 0x800000021B0FDD10);
  v25 = MGGetSInt32Answer();

  v26 = objc_msgSend(v22, sel_mainScreen);
  objc_msgSend(v26, sel_nativeScale);
  v28 = v27;

  v29 = objc_msgSend(v22, sel_mainScreen);
  objc_msgSend(v29, sel_bounds);
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;

  v104.origin.x = v31;
  v104.origin.y = v33;
  v104.size.width = v35;
  v104.size.height = v37;
  Width = CGRectGetWidth(v104);
  v39 = objc_msgSend(v22, sel_mainScreen);
  objc_msgSend(v39, sel_bounds);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  v47 = v46;

  v105.origin.x = v41;
  v105.origin.y = v43;
  v105.size.width = v45;
  v105.size.height = v47;
  v48 = CGRectGetWidth(v105);
  v49 = *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement);
  v50 = FindingViewController.findingView.getter();
  v51 = *(void **)&v50[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
  if (v51)
  {
    v52 = v51;
    FMPFSKScene.setPatternCenterFactor(_:sprung:)(0, 1.0);

    v50 = v52;
  }

  outlined init with take of FMFindingState(a2, (uint64_t)v102);
  v53 = 32.0 / Width;
  v54 = (double)v25 * 1.252 / v28 / v48;
  v55 = (v53 + v54) * 0.5;
  switch(v103)
  {
    case 2:
      v72 = FindingViewController.findingView.getter();
      v73 = *(void **)&v72[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v73)
      {
        v74 = v73;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, (v49 + v49) * v55 + 0.0);

        v72 = v74;
      }

      v64 = FindingViewController.findingView.getter();
      v75 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v75)
        goto LABEL_45;
      v66 = v75;
      v76 = 0.0;
      v77 = 1;
      goto LABEL_43;
    case 3:
      v78 = FindingViewController.findingView.getter();
      v79 = *(void **)&v78[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v79)
      {
        v80 = v79;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, v55);

        v78 = v80;
      }

      v64 = FindingViewController.findingView.getter();
      v81 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v81)
        goto LABEL_45;
      v66 = v81;
      v76 = (v49 + -0.5 + v49 + -0.5) * 0.98 + 0.13;
      v77 = 1;
      goto LABEL_43;
    case 4:
    case 5:
      v67 = FindingViewController.findingView.getter();
      v68 = *(void **)&v67[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v68)
      {
        v69 = v68;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, v54);

        v67 = v69;
      }

      v64 = FindingViewController.findingView.getter();
      v70 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v70)
      {
        v71 = v70;
        FMPFSKScene.setBTDiskNodeSize(_:sprung:)(1, 1.11);

      }
      outlined retain of FMFindingState((uint64_t)a2, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
      goto LABEL_45;
    case 6:
    case 8:
    case 9:
      v56 = FindingViewController.findingView.getter();
      FMFindingState.defaultConfiguration.getter((uint64_t)v98);
      v57 = *(void **)&v56[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v57)
      {
        v58 = v98[0];
        v59 = v57;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(1, v58);

        v56 = v59;
      }

      v60 = FindingViewController.findingView.getter();
      FMFindingState.defaultConfiguration.getter((uint64_t)v99);
      v61 = *(void **)&v60[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v61)
      {
        v62 = v100;
        v63 = v61;
        FMPFSKScene.setBTDiskNodeSize(_:sprung:)(1, v62);

        v60 = v63;
      }

      v64 = FindingViewController.findingView.getter();
      v65 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v65)
        goto LABEL_45;
      v66 = v65;
      FMPFSKScene.setPatternCenterFactor(_:sprung:)(0, 0.0);
      goto LABEL_44;
    case 7:
      v82 = FindingViewController.findingView.getter();
      v83 = *(void **)&v82[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v83)
      {
        v84 = v83;
        FMPFSKScene.setPatternCenterFactor(_:sprung:)(0, 0.0);

        v82 = v84;
      }

      v85 = FindingViewController.findingView.getter();
      v86 = *(void **)&v85[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v86)
      {
        v87 = v86;
        FMPFSKScene.setPatternConformationFactor(_:sprung:)(1, 0.0);

      }
      v85[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_useGreenBackdropBlurAndOpacity] = 0;
      FMPFView.updateConvergingBackdropColor(sprung:)(1);

      v88 = FindingViewController.findingView.getter();
      FMFindingState.defaultConfiguration.getter((uint64_t)v99);
      v89 = *(void **)&v88[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v89)
      {
        v90 = v101;
        v91 = v89;
        FMPFSKScene.setBTDiskNodeOpacity(_:sprung:)(0, v90);

        v88 = v91;
      }

      v92 = FindingViewController.findingView.getter();
      v93 = *(void **)&v92[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (v93)
      {
        v94 = v93;
        FMPFSKScene.setBTRangeNodeSize(_:sprung:)(0, 0.0);

        v92 = v94;
      }

      v64 = FindingViewController.findingView.getter();
      v95 = *(void **)&v64[OBJC_IVAR____TtC10TVRemoteUI8FMPFView_skScene];
      if (!v95)
        goto LABEL_45;
      v66 = v95;
      v76 = 0.0;
      v77 = 0;
LABEL_43:
      FMPFSKScene.setBTDiskNodeSize(_:sprung:)(v77, v76);
LABEL_44:

      v64 = v66;
LABEL_45:

      return;
    default:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x21B0E91D0);
  }
}

uint64_t FMFindingState.defaultConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  void *v3;
  id v4;
  void *v5;
  int v6;
  id v7;
  double v8;
  double v9;
  id v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double Width;
  id v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  uint64_t result;
  float v31;
  double v32;
  double v34;
  _BYTE v39[16];
  uint64_t v40;
  CGRect v41;
  CGRect v42;

  v3 = (void *)objc_opt_self();
  v4 = objc_msgSend(v3, sel_mainScreen);
  v5 = (void *)MEMORY[0x22075C584](0xD000000000000011, 0x800000021B0FDD10);
  v6 = MGGetSInt32Answer();

  v7 = objc_msgSend(v3, sel_mainScreen);
  objc_msgSend(v7, sel_nativeScale);
  v9 = v8;

  v10 = objc_msgSend(v3, sel_mainScreen);
  objc_msgSend(v10, sel_bounds);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  v41.origin.x = v12;
  v41.origin.y = v14;
  v41.size.width = v16;
  v41.size.height = v18;
  Width = CGRectGetWidth(v41);
  v20 = objc_msgSend(v3, sel_mainScreen);
  objc_msgSend(v20, sel_bounds);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v27;

  v42.origin.x = v22;
  v42.origin.y = v24;
  v42.size.width = v26;
  v42.size.height = v28;
  v29 = CGRectGetWidth(v42);
  result = outlined init with take of FMFindingState(v1, (uint64_t)v39);
  v31 = 0.0;
  v32 = 0.0;
  switch(v40)
  {
    case 2:
      *((_QWORD *)&_Q2 + 1) = 0;
      *(double *)&_Q2 = 32.0 / Width;
      v34 = 1.0;
      v31 = 0.2;
      v32 = 1.0;
      break;
    case 3:
      v32 = 0.5;
      __asm { FMOV            V2.2D, #0.5 }
      *(double *)&_Q2 = (32.0 / Width + (double)v6 * 1.252 / v9 / v29) * 0.5;
      v31 = 0.5;
      goto LABEL_7;
    case 4:
      __asm { FMOV            V2.2D, #4.5; jumptable 000000021B0E939C case 4 }
      *(double *)&_Q2 = (double)v6 * 1.252 / v9 / v29;
      v34 = 1.0;
      v32 = INFINITY;
      v31 = 0.8;
      break;
    case 5:
      __asm { FMOV            V2.2D, #4.5; jumptable 000000021B0E939C case 5 }
      *(double *)&_Q2 = (double)v6 * 1.252 / v9 / v29;
LABEL_7:
      v34 = 1.0;
      break;
    default:
      _Q2 = 0uLL;
      v34 = 0.0;
      break;
  }
  *(_OWORD *)a1 = _Q2;
  *(double *)(a1 + 16) = v34;
  *(float *)(a1 + 24) = v31;
  *(double *)(a1 + 32) = v32;
  return result;
}

void FindingViewController.showInstructionsLabel(_:animated:completion:)(char a1, char a2, void (*a3)(id), uint64_t a4)
{
  char *v4;
  id v9;
  double v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  double v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;

  v9 = objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel], sel_alpha);
  if ((a1 & 1) != 0)
  {
    if (v10 != 1.0)
      goto LABEL_3;
LABEL_6:
    if (!a3)
      return;
    goto LABEL_7;
  }
  if (v10 == 0.0)
    goto LABEL_6;
LABEL_3:
  if ((a2 & 1) != 0)
  {
    v11 = (void *)objc_opt_self();
    v12 = swift_allocObject();
    *(_QWORD *)(v12 + 16) = v4;
    *(_BYTE *)(v12 + 24) = a1 & 1;
    v27 = partial apply for closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:);
    v28 = v12;
    v13 = MEMORY[0x24BDAC760];
    v23 = MEMORY[0x24BDAC760];
    v24 = 1107296256;
    v25 = thunk for @escaping @callee_guaranteed () -> ();
    v26 = &block_descriptor_13_1;
    v14 = _Block_copy(&v23);
    v15 = v4;
    swift_release();
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = a3;
    *(_QWORD *)(v16 + 24) = a4;
    v27 = partial apply for closure #2 in FindingViewController.showInstructionsLabel(_:animated:completion:);
    v28 = v16;
    v23 = v13;
    v24 = 1107296256;
    v25 = thunk for @escaping @callee_guaranteed (@unowned CHHapticEngineStoppedReason) -> ();
    v26 = &block_descriptor_19_1;
    v17 = _Block_copy(&v23);
    outlined copy of (@escaping @callee_guaranteed (@guaranteed FMR1HapticPattern?, @in_guaranteed Any?) -> ())?((uint64_t)a3);
    swift_release();
    objc_msgSend(v11, sel_animateWithDuration_animations_completion_, v14, v17, 0.5);
    _Block_release(v17);
    _Block_release(v14);
    return;
  }
  v18 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  v19 = 0.0;
  if ((a1 & 1) != 0)
    v19 = 1.0;
  objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel], sel_setAlpha_, v19);
  v20 = *(void **)&v4[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel];
  v21 = *(void **)&v4[v18];
  v22 = v20;
  objc_msgSend(v21, sel_alpha);
  objc_msgSend(v22, sel_setAlpha_);

  if (a3)
LABEL_7:
    a3(v9);
}

void closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:)(uint64_t a1, char a2)
{
  uint64_t v3;
  void *v4;
  double v5;
  void *v6;
  void *v7;
  id v8;

  v3 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  v4 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel);
  v5 = 0.0;
  if ((a2 & 1) != 0)
    v5 = 1.0;
  objc_msgSend(v4, sel_setAlpha_, v5);
  v6 = *(void **)(a1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel);
  v7 = *(void **)(a1 + v3);
  v8 = v6;
  objc_msgSend(v7, sel_alpha);
  objc_msgSend(v8, sel_setAlpha_);

}

void FindingViewController.updateInstructionsView()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void (*v17)(char *, uint64_t);
  id v18;
  void *v19;
  id v20;
  id v21[2];
  _QWORD aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWallTime();
  v3 = *(void **)(v2 - 8);
  v5 = MEMORY[0x24BDAC7A8](v2, v4);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v8);
  v10 = (char *)v21 - v9;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x24BDAC7A8](v11, v12);
  if ((*(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16) & 0xFFFFFFFFFFFFFFFELL) == 6)
  {
    v13 = swift_allocObject();
    v21[0] = v3;
    v14 = v13;
    swift_unknownObjectWeakInit();
    aBlock[4] = partial apply for closure #1 in FindingViewController.updateInstructionsView();
    aBlock[5] = v14;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_11;
    _Block_copy(aBlock);
    v21[1] = (id)MEMORY[0x24BEE4AF8];
    lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    type metadata accessor for DispatchWorkItem();
    swift_allocObject();
    v15 = DispatchWorkItem.init(flags:block:)();
    swift_release();
    swift_release();
    *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem) = v15;
    swift_retain();
    swift_release();
    type metadata accessor for SKConstraint(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v16 = (void *)static OS_dispatch_queue.main.getter();
    static DispatchWallTime.now()();
    MEMORY[0x22075C560](v7, 0.4);
    v17 = (void (*)(char *, uint64_t))*((_QWORD *)v21[0] + 1);
    v17(v7, v2);
    OS_dispatch_queue.asyncAfter(wallDeadline:execute:)();
    swift_release();

    v17(v10, v2);
  }
  else
  {
    if (*(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem))
    {
      swift_retain();
      dispatch thunk of DispatchWorkItem.cancel()();
      swift_release();
    }
    FindingViewController.showInstructionsLabel(_:animated:completion:)(0, 1, 0, 0);
    v18 = *(id *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel);
    v19 = (void *)MEMORY[0x22075C584](0, 0xE000000000000000);
    objc_msgSend(v18, sel_setText_, v19);

    v20 = *(id *)(v1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel);
    v21[0] = (id)MEMORY[0x22075C584](0, 0xE000000000000000);
    objc_msgSend(v20, sel_setText_, v21[0]);

  }
}

void closure #1 in FindingViewController.updateInstructionsView()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t countAndFlagsBits;
  void *v14;
  _QWORD aBlock[6];

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x22075D574](v1);
  if (v2)
  {
    v3 = (char *)v2;
    v4 = (void *)objc_opt_self();
    v5 = *(void **)&v3[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel];
    v6 = swift_allocObject();
    *(_QWORD *)(v6 + 16) = v3;
    aBlock[4] = partial apply for closure #1 in closure #1 in FindingViewController.updateInstructionsView();
    aBlock[5] = v6;
    aBlock[0] = MEMORY[0x24BDAC760];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_7;
    v7 = _Block_copy(aBlock);
    v8 = v5;
    v9 = v3;
    swift_release();
    objc_msgSend(v4, sel_transitionWithView_duration_options_animations_completion_, v8, 5242880, v7, 0, 1.0);
    _Block_release(v7);

    LODWORD(v7) = v9[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime];
    v10 = *(id *)&v9[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel];
    if ((_DWORD)v7 == 1)
    {
      v11 = 0x800000021B100C40;
      v12 = 0xD000000000000010;
    }
    else
    {
      v12 = 0x43524145535F5442;
      v11 = 0xEC000000474E4948;
    }
    countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(*(Swift::String *)&v12, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
    v14 = (void *)MEMORY[0x22075C584](countAndFlagsBits);
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setText_, v14);

    FindingViewController.showInstructionsLabel(_:animated:completion:)(1, 1, 0, 0);
  }
}

void closure #1 in closure #1 in FindingViewController.updateInstructionsView()(uint64_t a1)
{
  id v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  id v4;

  v1 = *(id *)(a1 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel);
  v2._object = (void *)0x800000021B100C60;
  v2._countAndFlagsBits = 0xD000000000000010;
  countAndFlagsBits = FMFindingLocalizedString(_:fallbackKey:tableName:)(v2, (Swift::String_optional)0, (Swift::String_optional)0)._countAndFlagsBits;
  v4 = (id)MEMORY[0x22075C584](countAndFlagsBits);
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setText_, v4);

}

void FindingViewController.updateHaptics()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  uint8_t *v40;
  uint8_t *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint8_t *v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;

  v1 = v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state;
  v2 = *(char **)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16);
  if ((unint64_t)(v2 - 8) >= 2)
  {
    v3 = v0;
    if (v2 == (char *)6)
    {
      if (one-time initialization token for findingExperience != -1)
        swift_once();
      v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Logger.findingExperience);
      v5 = Logger.logObject.getter();
      v6 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_21B042000, v5, v6, "FMFindingViewCtrl: Requesting scatter haptic.", v7, 2u);
        MEMORY[0x22075D4E4](v7, -1, -1);
      }

      FMR1HapticsController.startDelayedScatterHapticPlayerIfNecessary()();
    }
    else if (v2 == (char *)7)
    {
      FMR1HapticsController.stopHaptics()();
    }
    else
    {
      v8 = *(_QWORD *)(v1 + 8);
      v10 = *(void **)(v1 + 24);
      v9 = *(_QWORD *)(v1 + 32);
      v11 = *(_QWORD *)(v1 + 40);
      v12 = *(_QWORD *)(v1 + 48);
      v14 = *(_QWORD *)(v1 + 56);
      v13 = *(_QWORD *)(v1 + 64);
      v15 = *(_QWORD *)(v1 + 72);
      v16 = *(_QWORD *)(v1 + 80);
      v17 = *(_QWORD *)(v1 + 88);
      v18 = *(_WORD *)(v1 + 96);
      v72 = *(_QWORD *)v1;
      v73 = v8;
      v74 = v2;
      v75 = v10;
      v76 = v9;
      v77 = v11;
      v78 = v12;
      v79 = v14;
      v80 = v13;
      v81 = v15;
      v82 = v16;
      v83 = v17;
      v84 = v18;
      v56 = v72;
      v57 = v8;
      v55 = v2;
      switch((unint64_t)v2)
      {
        case 2uLL:
          outlined copy of FMFindingMeasurement(v72, v8, (void *)2, v10);
          goto LABEL_15;
        case 3uLL:
          v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 16);
          if ((unint64_t)(v19 - 7) >= 3 && v19 != 2)
          {
            outlined copy of FMFindingState(v72, v8, (void *)3, v10);
LABEL_15:
            v54 = v10;
            v20 = v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState;
            v21 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState + 16);
            if ((unint64_t)(v21 - 6) >= 4)
            {
              v29 = *(_QWORD *)(v20 + 88);
              v27 = *(_QWORD *)(v20 + 48);
              v28 = *(_QWORD *)(v20 + 56);
              v50 = *(_BYTE *)(v20 + 96);
              v52 = *(_QWORD *)(v20 + 72);
              v53 = *(_QWORD *)(v20 + 80);
              v51 = *(_QWORD *)(v20 + 64);
              v22 = *(_QWORD *)v20;
              v23 = *(_QWORD *)(v20 + 8);
              v24 = *(void **)(v20 + 24);
              v25 = *(_QWORD *)(v20 + 32);
              v26 = *(_QWORD *)(v20 + 40);
              outlined copy of FMFindingMeasurement(*(_QWORD *)v20, v23, (void *)v21, v24);
            }
            else
            {
              v22 = 0;
              v23 = 0;
              v24 = 0;
              v25 = 0;
              v26 = 0;
              v27 = 0;
              v28 = 0;
              v51 = 0;
              v52 = 0;
              v53 = 0;
              v29 = 0;
              v50 = 0;
              v21 = 6;
            }
            *(_QWORD *)&v60 = v22;
            *((_QWORD *)&v60 + 1) = v23;
            v61 = v21;
            v62 = v24;
            v63 = v25;
            v64 = v26;
            v65 = v27;
            v66 = v28;
            v67 = v51;
            v68 = v52;
            v69 = v53;
            v70 = v29;
            v71 = v50;
            v49 = FMFindingMeasurement.calculateTrend(from:)((uint64_t)&v60);
            outlined copy of FMFindingMeasurement(v56, v57, v2, v54);
            outlined copy of FMFindingMeasurement(v56, v57, v2, v54);
            outlined consume of FMFindingMeasurement?(v22, v23, (void *)v21, v24);
            __asm { BR              X10 }
          }
          outlined copy of FMFindingState(v72, v8, (void *)3, v10);
          if (one-time initialization token for findingExperience != -1)
            swift_once();
          v36 = type metadata accessor for Logger();
          __swift_project_value_buffer(v36, (uint64_t)static Logger.findingExperience);
          v37 = Logger.logObject.getter();
          v38 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v37, v38))
          {
            v39 = v2;
            v40 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v40 = 0;
            _os_log_impl(&dword_21B042000, v37, v38, "FMFindingViewCtrl: Playing near haptic", v40, 2u);
            v41 = v40;
            v2 = v39;
            MEMORY[0x22075D4E4](v41, -1, -1);
          }

          FMR1HapticsController.playFarNearHaptic()();
          v42 = fmin(*(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement)* *(double *)(v3 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement)* 1.8, 0.7);
          v59 = MEMORY[0x24BEE50B0];
          *(double *)&v58 = (v42 + -0.3) / -0.4 * 0.75 + 1.0;
          FMR1HapticsController.playInFOVModeTapHapticAt(hapticFactor:period:context:)((uint64_t)&v58, v42, *(double *)&v58);
          outlined consume of FMFindingState(v56, v8, v2, v10);
          outlined consume of FMFindingState(v56, v8, v55, v10);
          outlined destroy of Any?((uint64_t)&v58);
          break;
        case 4uLL:
          outlined copy of FMFindingMeasurement(v72, v8, (void *)4, v10);
          FMR1HapticsController.stopHaptics()();
          outlined init with take of FMFindingState((__int128 *)v1, (uint64_t)&v58);
          v30 = v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState;
          outlined init with take of FMFindingState((__int128 *)(v0 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState), (uint64_t)&v60);
          outlined retain of FMFindingState((uint64_t)&v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
          outlined retain of FMFindingState((uint64_t)&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
          v31 = specialized static FMFindingState.== infix(_:_:)(&v58, &v60);
          outlined retain of FMFindingState((uint64_t)&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
          outlined retain of FMFindingState((uint64_t)&v58, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
          if (v31)
          {
            v32 = v56;
            v33 = v8;
            v34 = 4;
            v35 = v10;
          }
          else
          {
            if (*(_QWORD *)(v30 + 16) == 6)
            {
              v32 = v56;
              v33 = v8;
            }
            else
            {
              v43 = v8;
              if (one-time initialization token for findingExperience != -1)
                swift_once();
              v44 = type metadata accessor for Logger();
              __swift_project_value_buffer(v44, (uint64_t)static Logger.findingExperience);
              v45 = Logger.logObject.getter();
              v46 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v45, v46))
              {
                v47 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v47 = 0;
                _os_log_impl(&dword_21B042000, v45, v46, "FMFindingViewCtrl: Playing here haptic", v47, 2u);
                v48 = v47;
                v43 = v8;
                MEMORY[0x22075D4E4](v48, -1, -1);
              }

              FMR1HapticsController.playLevelIncreasedHaptic()();
              v32 = v56;
              v33 = v43;
            }
            v34 = 4;
            v35 = v10;
          }
          goto LABEL_35;
        case 5uLL:
          outlined copy of FMFindingMeasurement(v72, v8, (void *)5, v10);
          FMR1HapticsController.startDelayedNearbyHapticPlayerIfNecessary()();
          v32 = v72;
          v33 = v8;
          v34 = 5;
          v35 = v10;
LABEL_35:
          outlined consume of FMFindingState(v32, v33, (void *)v34, v35);
          return;
        default:
          goto LABEL_15;
      }
    }
  }
}

void outlined consume of FMFindingMeasurement?(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a3 != (void *)6)
    outlined consume of FMFindingMeasurement(a1, a2, a3, a4);
}

uint64_t sub_21B0EA720()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in FindingViewController.updateInstructionsView()()
{
  uint64_t v0;

  closure #1 in FindingViewController.updateInstructionsView()(v0);
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

void partial apply for closure #1 in closure #1 in FindingViewController.updateInstructionsView()()
{
  uint64_t v0;

  closure #1 in closure #1 in FindingViewController.updateInstructionsView()(*(_QWORD *)(v0 + 16));
}

uint64_t sub_21B0EA76C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:)()
{
  uint64_t v0;

  closure #1 in FindingViewController.showInstructionsLabel(_:animated:completion:)(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_21B0EA79C()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in FindingViewController.showInstructionsLabel(_:animated:completion:)()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

id specialized FindingViewController.init(discoveryToken:remoteInfo:)(void *a1, void *a2)
{
  char *v2;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  objc_super v25;
  _OWORD v26[9];
  uint64_t v27;

  v5 = &v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView] = 0;
  v6 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style;
  v7 = one-time initialization token for default;
  v8 = v2;
  if (v7 != -1)
    swift_once();
  v26[6] = xmmword_25513FC90;
  v26[7] = unk_25513FCA0;
  v26[8] = xmmword_25513FCB0;
  v27 = qword_25513FCC0;
  v26[2] = xmmword_25513FC50;
  v26[3] = unk_25513FC60;
  v26[4] = xmmword_25513FC70;
  v26[5] = unk_25513FC80;
  v26[0] = static FMFindingViewStyle.default;
  v26[1] = *(_OWORD *)&qword_25513FC40;
  memmove(&v8[v6], &static FMFindingViewStyle.default, 0x98uLL);
  v9 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sleepPreventer;
  outlined retain of FMFindingViewStyle((uint64_t)v26);
  type metadata accessor for FMFindingSleepPreventer();
  *(_QWORD *)&v8[v9] = swift_initStaticObject();
  v10 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton;
  v11 = objc_allocWithZone((Class)type metadata accessor for FMR1GlyphButton());
  *(_QWORD *)&v8[v10] = FMR1GlyphButton.init(named:tintColor:backgroundColor:)(0, 0, 0, 0);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_pulseTimer] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession] = 0;
  v12 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController;
  *(_QWORD *)&v8[v12] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMR1HapticsController()), sel_init);
  v13 = &v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 6;
  *(_OWORD *)(v13 + 82) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 24) = 0u;
  v14 = &v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState];
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = 0;
  *((_QWORD *)v14 + 2) = 6;
  *(_OWORD *)(v14 + 82) = 0u;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel;
  *(_QWORD *)&v8[v15] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMBTDistanceView()), sel_init);
  v16 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  *(_QWORD *)&v8[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v17 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  *(_QWORD *)&v8[v17] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v18 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  *(_QWORD *)&v8[v18] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v19 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel;
  *(_QWORD *)&v8[v19] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v20 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  *(_QWORD *)&v8[v20] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD978]), sel_init);
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer] = 0;
  v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear] = 1;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_minRestartDelayMilliseconds] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_maxRestartDelayMilliseconds] = 10000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_restartBackOffIncrementMilliseconds] = 10;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimerDuration] = 0x4023000000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimerDurationSeconds] = 0x4034000000000000;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer] = 0;
  v21 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
  *(_QWORD *)&v8[v21] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4090]), sel_init);
  v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement] = 1;
  v22 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime;
  v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem] = 0;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_discoveryToken] = a1;
  *(_QWORD *)&v8[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_remoteInfo] = a2;
  v23 = a1;
  v8[v22] = objc_msgSend(a2, sel_connected) ^ 1;

  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for FindingViewController();
  return objc_msgSendSuper2(&v25, sel_initWithNibName_bundle_, 0, 0);
}

uint64_t sub_21B0EAB88()
{
  uint64_t v0;

  return swift_deallocObject();
}

void partial apply for closure #1 in FindingViewController.restartSessionOnError()()
{
  FindingViewController.startNISession()();
}

void specialized FindingViewController.init(nibName:bundle:)()
{
  _BYTE *v0;
  _BYTE *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[9];
  uint64_t v18;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_dismissedHandler];
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController____lazy_storage___findingView] = 0;
  v3 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_style;
  if (one-time initialization token for default != -1)
    swift_once();
  v17[6] = xmmword_25513FC90;
  v17[7] = unk_25513FCA0;
  v17[8] = xmmword_25513FCB0;
  v18 = qword_25513FCC0;
  v17[2] = xmmword_25513FC50;
  v17[3] = unk_25513FC60;
  v17[4] = xmmword_25513FC70;
  v17[5] = unk_25513FC80;
  v17[0] = static FMFindingViewStyle.default;
  v17[1] = *(_OWORD *)&qword_25513FC40;
  memmove(&v1[v3], &static FMFindingViewStyle.default, 0x98uLL);
  v4 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sleepPreventer;
  outlined retain of FMFindingViewStyle((uint64_t)v17);
  type metadata accessor for FMFindingSleepPreventer();
  *(_QWORD *)&v1[v4] = swift_initStaticObject();
  v5 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_closeButton;
  v6 = objc_allocWithZone((Class)type metadata accessor for FMR1GlyphButton());
  *(_QWORD *)&v1[v5] = FMR1GlyphButton.init(named:tintColor:backgroundColor:)(0, 0, 0, 0);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_pulseTimer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_niSession] = 0;
  v7 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_hapticsController;
  *(_QWORD *)&v1[v7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMR1HapticsController()), sel_init);
  v8 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 6;
  *(_OWORD *)(v8 + 82) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v9 = &v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_prevState];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *((_QWORD *)v9 + 2) = 6;
  *(_OWORD *)(v9 + 82) = 0u;
  *(_OWORD *)(v9 + 72) = 0u;
  *(_OWORD *)(v9 + 56) = 0u;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  v10 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_distanceLabel;
  *(_QWORD *)&v1[v10] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMBTDistanceView()), sel_init);
  v11 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_titleLabel;
  *(_QWORD *)&v1[v11] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v12 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_nameLabel;
  *(_QWORD *)&v1[v12] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v13 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsTopLabel;
  *(_QWORD *)&v1[v13] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v14 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabel;
  *(_QWORD *)&v1[v14] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD708]), sel_init);
  v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_instructionsLabelsStackView;
  *(_QWORD *)&v1[v15] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEBD978]), sel_init);
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer] = 0;
  v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_isFirstAppear] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_minRestartDelayMilliseconds] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_maxRestartDelayMilliseconds] = 10000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_restartBackOffIncrementMilliseconds] = 10;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimerDuration] = 0x4023000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimerDurationSeconds] = 0x4034000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer] = 0;
  v16 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
  *(_QWORD *)&v1[v16] = objc_msgSend(objc_allocWithZone(MEMORY[0x24BEB4090]), sel_init);
  v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement] = 1;
  v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_requiresAdditionalConnectionTime] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_searchingDelayWorkItem] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id specialized @nonobjc NIDevicePresenceConfiguration.init(discoveryToken:regions:preferredUpdateRate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  Class isa;
  id v7;
  id v8;
  id v9;
  id v11[2];

  v11[1] = *(id *)MEMORY[0x24BDAC8D0];
  type metadata accessor for SKConstraint(0, &lazy cache variable for type metadata for NIRegionPredicate);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v11[0] = 0;
  v7 = objc_msgSend(v3, sel_initWithDiscoveryToken_regions_preferredUpdateRate_error_, a1, isa, a3, v11);

  if (v7)
  {
    v8 = v11[0];
  }
  else
  {
    v9 = v11[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v7;
}

double _s10TVRemoteUI23FMPFSKPatternNodeConfigVSgWOi0_(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 128) = 1;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 161) = 0u;
  return result;
}

uint64_t outlined init with take of FMPFSKPatternNodeConfig?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for FMPFSKPatternNodeConfig?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized FindingViewController.sessionDidStartRunning(_:)()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  id v12;
  void *v13;
  __int128 aBlock;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[26];

  v1 = v0;
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.findingExperience);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_21B042000, v3, v4, "NISession started", v5, 2u);
    MEMORY[0x22075D4E4](v5, -1, -1);
  }

  v6 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer;
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayResetTimer], sel_invalidate);
  v7 = *(void **)&v1[v6];
  *(_QWORD *)&v1[v6] = 0;

  if (*(_QWORD *)&v1[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds])
  {
    v8 = (void *)objc_opt_self();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v1;
    *((_QWORD *)&v16 + 1) = partial apply for closure #1 in FindingViewController.sessionDidStartRunning(_:);
    *(_QWORD *)&v17 = v9;
    *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v15 = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    *(_QWORD *)&v16 = &block_descriptor_37_0;
    v10 = _Block_copy(&aBlock);
    v11 = v1;
    swift_release();
    v12 = objc_msgSend(v8, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v10, 20.0);
    _Block_release(v10);
    v13 = *(void **)&v1[v6];
    *(_QWORD *)&v1[v6] = v12;

  }
  aBlock = 0uLL;
  v15 = 7;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  memset(v19, 0, sizeof(v19));
  FindingViewController.updateState(to:)(&aBlock);
}

uint64_t specialized FindingViewController.session(_:didUpdate:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class isa;
  uint64_t v19;
  __int128 v20[6];

  v2 = v1;
  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  result = MEMORY[0x24BDAC7A8](v4, v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    v10 = (id)MEMORY[0x22075C8C0](0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    v10 = *(id *)(a1 + 32);
  }
  v11 = v10;
  objc_msgSend(v10, sel_boundedRegionRange);
  v13 = v12;

  v14 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement;
  *(double *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_currentProximityMeasurement) = v13;
  v15 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_firstMeasurement) == 1)
  {
    v16 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
    v17 = *(id *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData);
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    objc_msgSend(v17, sel_setFirstMeasurementTime_, isa);

    objc_msgSend(*(id *)(v2 + v16), sel_setStartingProximityMeasurement_, *(double *)(v2 + v14));
    *(_BYTE *)(v2 + v15) = 0;
  }
  outlined init with take of FMFindingState((__int128 *)(v2 + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state), (uint64_t)v20);
  outlined retain of FMFindingState((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined copy of FMFindingState);
  FindingViewController.updateState(to:)(v20);
  return outlined retain of FMFindingState((uint64_t)v20, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))outlined consume of FMFindingState);
}

void specialized FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(objc_class *a1, objc_class *a2)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;
  void *v17;
  objc_class *v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  int v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  objc_class *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  char *v38;
  void *v39;
  objc_class *v40;
  objc_class *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  objc_class *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint8_t *v51;
  int v52;
  id v53;
  char *v54;
  id v55;
  char *v56;
  uint8_t *v57;
  Class v58;
  uint64_t v59;
  uint64_t v60;
  objc_class *v61;
  objc_class *v62;
  objc_class *v63;
  objc_class *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  _QWORD *v68;
  objc_class *v69;
  objc_class *v70;
  char *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  int v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _DWORD *v84;
  uint64_t v85;
  id v86;
  char *v87;
  id v88;
  char *v89;
  double v90;
  double v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  Class isa;
  uint64_t v99;
  Class v100;
  Class v101;
  Class v102;
  Class v103;
  Class v104;
  Class v105;
  Class v106;
  Class v107;
  int isa_low;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  _BOOL4 v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  unint64_t v118;
  uint64_t v119;
  Class v120;
  void *v121;
  uint64_t v122;
  char *v123;
  Swift::String v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  Class v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  uint64_t v147;
  void *v148;
  char *v149;
  id v150;
  void *v151;
  uint64_t v152;
  char *v153;
  char *v154;
  unint64_t v155;
  __int128 v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  void *v166;
  uint64_t v167;
  void *v168;
  NSObject *v169;
  uint64_t v170;
  void *v171;
  Class v172;
  Class v173;
  Class v174;
  Class v175;
  Class v176;
  Class v177;
  uint64_t v178;
  Class v179;
  Class v180;
  char *v181;
  void *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  Class v188;
  Class v189;
  uint64_t v190;
  unint64_t v191;
  void (*v192)(uint64_t, void *);
  void *v193;
  void (*v194)(uint64_t);
  uint64_t v195;
  unsigned __int8 v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  __int16 v205;
  uint64_t v206;
  unint64_t v207;
  Class v208;
  Class v209;
  void *v210;
  char v211;
  Class v212;
  __int16 v213;
  Class v214;
  __int16 v215;
  char v216;
  Class v217;
  Class v218;
  char v219;
  uint64_t v220;
  char v221;
  void *v222;
  __int128 v223;
  char v224;
  uint64_t v225;
  __int16 v226;
  _QWORD v227[2];
  __int128 v228;
  char v229;
  uint64_t v230;

  v189 = a2;
  v180 = a1;
  v230 = *MEMORY[0x24BDAC8D0];
  v3 = type metadata accessor for Date();
  v155 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)&v156 = v3;
  v5 = MEMORY[0x24BDAC7A8](v3, v4);
  v154 = (char *)&v152 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5, v7);
  v153 = (char *)&v152 - v8;
  v181 = v2;
  v9 = (unsigned __int16 *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  v10 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state];
  v11 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 8];
  v12 = *(char **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 16];
  v13 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 24];
  v14 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 32];
  v15 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 40];
  v16 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 48];
  v17 = *(void **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 56];
  v18 = *(objc_class **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 64];
  v19 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 72];
  v20 = *(_QWORD *)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 80];
  v21 = *(uint8_t **)&v2[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_state + 88];
  v22 = v9[48];
  v196 = 3;
  v182 = v21;
  v183 = v20;
  v169 = v9;
  v178 = v19;
  v179 = v18;
  LODWORD(v188) = v22;
  if ((unint64_t)(v12 - 6) >= 4)
  {
    v36 = (void *)v10;
    v37 = v11;
    v38 = v12;
    v39 = v13;
    v40 = v14;
    v41 = v15;
    v42 = (uint64_t)v16;
    v43 = v17;
    outlined copy of FMFindingMeasurement(v10, (uint64_t)v11, v12, v13);
    v10 = (uint64_t)v36;
    v11 = v37;
    v12 = v38;
    v13 = v39;
    v14 = v40;
    v15 = v41;
    v16 = (objc_class *)v42;
    v17 = v43;
    v23 = v36;
    v24 = (uint64_t)v37;
    v35 = (uint64_t)v38;
    v25 = v13;
    v26 = (uint64_t)v40;
    v27 = v41;
    v28 = v42;
    v29 = v17;
    v30 = (uint64_t)v179;
    v31 = v178;
    v32 = v183;
    v33 = v21;
    v34 = v188;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 6;
  }
  v186 = v24;
  v187 = (uint64_t)v23;
  v185 = v28;
  v176 = v16;
  v177 = (Class)v17;
  v174 = v14;
  v175 = v15;
  v172 = (Class)v12;
  v173 = (Class)v13;
  v170 = v10;
  v171 = v11;
  if (v189)
  {
    v167 = v24;
    v168 = v23;
    v165 = v26;
    v166 = v25;
    v163 = v28;
    v164 = v27;
    v159 = v31;
    v160 = (uint64_t)v29;
    v161 = (uint8_t *)v32;
    v162 = v30;
    v157 = v33;
    LODWORD(v158) = v34;
    v44 = v25;
    v45 = v26;
    v46 = v27;
    v47 = v29;
    v48 = (void *)v30;
    v49 = (void *)v31;
    v50 = v32;
    v51 = v33;
    v52 = v34;
    switch(v35)
    {
      case 2:
        goto LABEL_9;
      case 3:
        outlined copy of FMFindingState(v10, (uint64_t)v11, v12, v13);
        LODWORD(v160) = v52;
        v161 = v51;
        v162 = v50;
        v163 = (uint64_t)v49;
        v164 = v48;
        v167 = v45;
        v168 = v44;
        v165 = (uint64_t)v47;
        v166 = v46;
        outlined consume of FMFindingMeasurement?(v187, v186, (void *)3, v44);
        v184 = 3;
        v196 = 3;
        break;
      case 4:
      case 5:
        v184 = v35;
        outlined copy of FMFindingState(v10, (uint64_t)v11, v12, v13);
        LODWORD(v160) = v52;
        v161 = v51;
        v162 = v50;
        v163 = (uint64_t)v49;
        v164 = v48;
        v167 = v45;
        v168 = v44;
        v165 = (uint64_t)v47;
        v166 = v46;
        outlined consume of FMFindingMeasurement?(v187, v186, (void *)v184, v44);
        v196 = 2;
        v53 = *(id *)&v181[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData];
        v54 = (char *)objc_msgSend(v53, sel_numberOfGotFartherRegionTransitions);
        if (__OFADD__(v54, 1))
          goto LABEL_76;
        objc_msgSend(v53, sel_setNumberOfGotFartherRegionTransitions_, v54 + 1);

        break;
      case 6:
        LODWORD(v160) = v34;
        v161 = v33;
        v162 = v32;
        v163 = (uint64_t)v49;
        v164 = v48;
        v165 = (uint64_t)v47;
        v166 = v46;
        v167 = v45;
        v168 = v44;
        outlined copy of FMFindingState(v10, (uint64_t)v11, v12, v13);
        v184 = 6;
        break;
      default:
        v184 = v35;
        LODWORD(v160) = v34;
        v161 = v33;
        v162 = v32;
        v163 = v32;
        v164 = v49;
        v165 = (uint64_t)v48;
        v166 = (void *)v34;
        v167 = (uint64_t)v46;
        v168 = v47;
        v196 = 0;
        outlined copy of FMFindingState(v10, (uint64_t)v11, v12, v13);
        break;
    }
  }
  else
  {
    v167 = 0;
    v168 = 0;
    v165 = 0;
    v166 = 0;
    v163 = 0;
    v164 = 0;
    v159 = 0;
    v160 = 0;
    v161 = 0;
    v162 = 0;
    v157 = 0;
    LODWORD(v158) = 0;
    v44 = v25;
LABEL_9:
    v184 = v35;
    outlined copy of FMFindingState(v10, (uint64_t)v11, v12, v13);
    outlined consume of FMFindingMeasurement?(v187, v186, (void *)v184, v44);
    v196 = 1;
    v55 = *(id *)&v181[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData];
    v56 = (char *)objc_msgSend(v55, sel_numberOfGotCloserRegionTransitions);
    if (__OFADD__(v56, 1))
    {
      __break(1u);
LABEL_76:
      __break(1u);
    }
    objc_msgSend(v55, sel_setNumberOfGotCloserRegionTransitions_, v56 + 1);

    v184 = 2;
    v186 = v167;
    v187 = (uint64_t)v168;
    v167 = v165;
    v168 = v166;
    v185 = v163;
    v165 = v160;
    v166 = v164;
    v163 = v159;
    v164 = (void *)v162;
    v57 = v161;
    v161 = v157;
    v162 = (uint64_t)v57;
    LODWORD(v160) = v158;
  }
  v58 = v180;
  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  v60 = __swift_project_value_buffer(v59, (uint64_t)static Logger.findingExperience);
  v61 = v189;
  v62 = v58;
  v63 = v61;
  v64 = v62;
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v159 = v60;
    v67 = swift_slowAlloc();
    v68 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v67 = 138412546;
    if (v58)
    {
      *(_QWORD *)&v198 = v64;
      v69 = v64;
      v58 = v180;
    }
    else
    {
      *(_QWORD *)&v198 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v68 = v58;

    *(_WORD *)(v67 + 12) = 2112;
    if (v189)
    {
      *(_QWORD *)&v198 = v63;
      v70 = v63;
      v58 = v180;
    }
    else
    {
      *(_QWORD *)&v198 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v68[1] = v189;

    _os_log_impl(&dword_21B042000, v65, v66, "#nibtfinding didUpdateRegion region:%@ previousRegion:%@", (uint8_t *)v67, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v68, -1, -1);
    MEMORY[0x22075D4E4](v67, -1, -1);

    v60 = v159;
  }
  else
  {

  }
  v71 = v181;
  FMFindingSleepPreventer.disableSleepingForAWhileWhileFinding()();
  if (v58)
  {
    v72 = -[objc_class name](v64, sel_name);
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v75 = v74;

    if (v73 == 7496038 && v75 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      outlined consume of FMFindingState(v170, (uint64_t)v171, v172, v173);
      swift_bridgeObjectRelease();
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v79 = 1;
      v80 = 2;
      goto LABEL_47;
    }
    if (v73 == 1918985582 && v75 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      v81 = v196;
      v82 = Logger.logObject.getter();
      v83 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = (_DWORD *)swift_slowAlloc();
        *(_QWORD *)&v198 = swift_slowAlloc();
        *v84 = 136315138;
        __asm { BR              X9 }
      }
      outlined consume of FMFindingState(v170, (uint64_t)v171, v172, v173);
      swift_bridgeObjectRelease();

      swift_beginAccess();
      v76 = 0;
      v79 = 0;
      v78 = v196 << 8;
      v77 = 1;
      v80 = 3;
      goto LABEL_47;
    }
    if (v73 == 1701995880 && v75 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      outlined consume of FMFindingState(v170, (uint64_t)v171, v172, v173);
      v85 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData;
      if ((objc_msgSend(*(id *)&v71[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_analyticsSessionData], sel_gotToHere) & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v77 = 0;
        v79 = 0;
        v78 = 0;
        v76 = 1;
      }
      else
      {
        v76 = 1;
        objc_msgSend(*(id *)&v71[v85], sel_setGotToHere_, 1);
        v86 = *(id *)&v71[v85];
        v87 = v153;
        Date.init()();
        v88 = objc_msgSend(*(id *)&v71[v85], sel_sessionStartTime);
        v89 = v154;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        Date.timeIntervalSince(_:)();
        v91 = v90;
        v92 = *(void (**)(char *, uint64_t))(v155 + 8);
        v93 = v89;
        v94 = v156;
        v92(v93, v156);
        v92(v87, v94);
        objc_msgSend(v86, sel_setTimeToHere_, v91);

        swift_bridgeObjectRelease();
        v77 = 0;
        v79 = 0;
        v78 = 0;
      }
      v80 = 4;
      goto LABEL_47;
    }
    swift_bridgeObjectRelease();
  }
  v95 = Logger.logObject.getter();
  v96 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v97 = 0;
    _os_log_impl(&dword_21B042000, v95, v96, "received nil region", v97, 2u);
    MEMORY[0x22075D4E4](v97, -1, -1);
  }
  outlined consume of FMFindingState(v170, (uint64_t)v171, v172, v173);

  v76 = 0;
  v77 = 0;
  v79 = 0;
  v78 = 0;
  v80 = 7;
LABEL_47:
  v198 = 0uLL;
  v199 = v80;
  v200 = 0u;
  v201 = 0u;
  v202 = 0u;
  v203 = 0u;
  v204 = 0;
  v205 = v78;
  isa = v169[2].isa;
  if ((unint64_t)isa - 6 >= 4 && (~(_BYTE)v80 & 6) != 0)
  {
    v159 = v60;
    v99 = (uint64_t)v169[1].isa;
    v188 = v169->isa;
    v100 = v169[3].isa;
    v101 = v169[4].isa;
    v102 = v169[6].isa;
    v103 = v169[7].isa;
    v104 = v169[8].isa;
    v105 = v169[9].isa;
    v106 = v169[10].isa;
    v107 = v169[11].isa;
    isa_low = LOWORD(v169[12].isa);
    v172 = v169[5].isa;
    v189 = v100;
    v176 = v104;
    v177 = v103;
    v174 = v105;
    v175 = v102;
    v179 = v107;
    v180 = v106;
    LODWORD(v178) = isa_low;
    v183 = v99;
    switch((unint64_t)isa)
    {
      case 2uLL:
        if ((v79 & 1) == 0)
          goto LABEL_57;
        v109 = 2;
        v110 = (uint64_t)v188;
        break;
      case 3uLL:
        if ((v77 & 1) == 0)
          goto LABEL_57;
        v109 = 3;
        v110 = (uint64_t)v188;
        break;
      case 4uLL:
        if ((v76 & 1) == 0)
          goto LABEL_57;
        v109 = 4;
        v110 = (uint64_t)v188;
        break;
      case 5uLL:
LABEL_57:
        v182 = v101;
        outlined copy of FMFindingMeasurement(0, 0, (void *)v80, 0);
        goto LABEL_58;
      default:
        v111 = v99;
        outlined copy of FMFindingState(0, 0, (void *)v80, 0);
        v182 = v101;
        outlined copy of FMFindingState((uint64_t)v188, v111, isa, v189);
LABEL_58:
        outlined copy of FMFindingState(0, 0, (void *)v80, 0);
        v173 = isa;
        outlined copy of FMFindingState((uint64_t)v188, v183, isa, v189);
        LODWORD(v170) = v78;
        v171 = (void *)v80;
        outlined copy of FMFindingState(0, 0, (void *)v80, 0);
        v112 = v183;
        outlined copy of FMFindingState((uint64_t)v188, v183, v173, v189);
        v113 = Logger.logObject.getter();
        LODWORD(v159) = static os_log_type_t.default.getter();
        v114 = os_log_type_enabled(v113, (os_log_type_t)v159);
        v169 = v113;
        if (v114)
        {
          v115 = swift_slowAlloc();
          v116 = swift_slowAlloc();
          v197 = v116;
          *(_DWORD *)v115 = 136315394;
          v117 = v171;
          v118 = 0xE300000000000000;
          v119 = 7496038;
          v120 = v189;
          switch((unint64_t)v171)
          {
            case 2uLL:
              break;
            case 3uLL:
              v118 = 0xE400000000000000;
              v119 = 1918985582;
              break;
            case 4uLL:
              v118 = 0xE400000000000000;
              v119 = 1701995880;
              break;
            case 5uLL:
              v118 = 0xE500000000000000;
              v119 = 0x646E756F66;
              break;
            default:
              v220 = 0;
              v221 = 0;
              v222 = v171;
              v225 = 0;
              v226 = 0;
              v223 = 0u;
              v224 = 0;
              v227[0] = 0;
              *(_DWORD *)((char *)v227 + 7) = 0;
              v228 = 0u;
              v229 = 0;
              outlined copy of FMFindingDistance?(0, 0, v171, 0);
              v124._countAndFlagsBits = FMFindingDistance.description.getter();
              v206 = 0x3A65736963657270;
              v207 = 0xE900000000000020;
              String.append(_:)(v124);
              outlined consume of FMFindingState(0, 0, v117, 0);
              swift_bridgeObjectRelease();
              v119 = v206;
              v118 = v207;
              v120 = v189;
              break;
          }
          v157 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CVarArg>);
          v125 = swift_allocObject();
          v156 = xmmword_21B0F8460;
          *(_OWORD *)(v125 + 16) = xmmword_21B0F8460;
          *(_QWORD *)(v125 + 56) = MEMORY[0x24BEE0D00];
          v155 = lazy protocol witness table accessor for type String and conformance String();
          *(_QWORD *)(v125 + 64) = v155;
          *(_QWORD *)(v125 + 32) = v119;
          *(_QWORD *)(v125 + 40) = v118;
          v126 = String.init(format:_:)();
          v206 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v126, v127, &v197);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined consume of FMFindingState(0, 0, v117, 0);
          outlined consume of FMFindingState(0, 0, v117, 0);
          *(_WORD *)(v115 + 12) = 2080;
          v128 = v173;
          v158 = v116;
          v129 = 0xE300000000000000;
          v130 = 7104878;
          v131 = 7496038;
          switch((unint64_t)v173)
          {
            case 1uLL:
              goto LABEL_68;
            case 2uLL:
              break;
            case 3uLL:
              v129 = 0xE400000000000000;
              v131 = 1918985582;
              break;
            case 4uLL:
              v129 = 0xE400000000000000;
              v131 = 1701995880;
              break;
            case 5uLL:
              v129 = 0xE500000000000000;
              v131 = 0x646E756F66;
              break;
            default:
              v206 = (uint64_t)v188;
              LOBYTE(v207) = v183 & 1;
              v208 = v173;
              v209 = v120;
              v210 = v182;
              v211 = v172 & 1;
              v212 = v175;
              v213 = (unsigned __int16)v177 & 0x101;
              v214 = v176;
              v215 = (unsigned __int16)v174 & 0x101;
              v216 = BYTE2(v174) & 1;
              v217 = v180;
              v218 = v179;
              v219 = v178 & 1;
              outlined copy of FMFindingDistance?((uint64_t)v188, v183, v173, v120);
              v130 = FMFindingDistance.description.getter();
              v129 = v132;
LABEL_68:
              v190 = 0x3A65736963657270;
              v191 = 0xE900000000000020;
              v133 = v129;
              String.append(_:)(*(Swift::String *)&v130);
              outlined consume of FMFindingState((uint64_t)v188, v183, v128, v120);
              swift_bridgeObjectRelease();
              v131 = v190;
              v129 = v191;
              break;
          }
          v134 = swift_allocObject();
          *(_OWORD *)(v134 + 16) = v156;
          v135 = v155;
          *(_QWORD *)(v134 + 56) = MEMORY[0x24BEE0D00];
          *(_QWORD *)(v134 + 64) = v135;
          *(_QWORD *)(v134 + 32) = v131;
          *(_QWORD *)(v134 + 40) = v129;
          v136 = String.init(format:_:)();
          v190 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, &v197);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v157 = (uint8_t *)v115;
          v138 = (uint64_t)v188;
          v139 = v183;
          outlined consume of FMFindingState((uint64_t)v188, v183, v173, v120);
          outlined consume of FMFindingState(v138, v139, v173, v189);
          v140 = v169;
          v141 = v157;
          _os_log_impl(&dword_21B042000, v169, (os_log_type_t)v159, "Measurement bucket changed to:%s from previous state:%s", v157, 0x16u);
          v142 = v158;
          swift_arrayDestroy();
          v143 = v142;
          v109 = (uint64_t)v173;
          MEMORY[0x22075D4E4](v143, -1, -1);
          MEMORY[0x22075D4E4](v141, -1, -1);

          v123 = v181;
          v80 = (uint64_t)v171;
        }
        else
        {
          v121 = v171;
          outlined consume of FMFindingState(0, 0, v171, 0);
          outlined consume of FMFindingState(0, 0, v121, 0);
          v122 = (uint64_t)v188;
          v109 = (uint64_t)v173;
          outlined consume of FMFindingState((uint64_t)v188, v112, v173, v189);
          v80 = (uint64_t)v171;
          outlined consume of FMFindingState(v122, v183, (void *)v109, v189);

          v123 = v181;
        }
        v144 = OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer;
        objc_msgSend(*(id *)&v123[OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_trendTimer], sel_invalidate);
        v145 = *(void **)&v123[v144];
        *(_QWORD *)&v123[v144] = 0;

        v146 = (void *)objc_opt_self();
        v147 = swift_allocObject();
        *(_QWORD *)(v147 + 16) = v123;
        v194 = partial apply for closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:);
        v195 = v147;
        v190 = MEMORY[0x24BDAC760];
        v191 = 1107296256;
        v192 = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
        v193 = &block_descriptor_31_0;
        v148 = _Block_copy(&v190);
        v149 = v123;
        swift_release();
        v150 = objc_msgSend(v146, sel_scheduledTimerWithTimeInterval_repeats_block_, 0, v148, 9.5);
        _Block_release(v148);
        v151 = *(void **)&v123[v144];
        *(_QWORD *)&v123[v144] = v150;

        outlined consume of FMFindingState(0, 0, (void *)v80, 0);
        v99 = v183;
        v110 = (uint64_t)v188;
        v100 = v189;
        break;
    }
    outlined consume of FMFindingState(v110, v99, (void *)v109, v100);
  }
  FindingViewController.updateState(to:)(&v198);
  outlined consume of FMFindingMeasurement?(v187, v186, (void *)v184, v168);
  outlined consume of FMFindingState(0, 0, (void *)v80, 0);
}

uint64_t specialized FindingViewController.session(_:didInvalidateWith:)(void *a1, const char *a2)
{
  uint64_t v4;
  id v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _QWORD *v10;
  id v11;
  uint64_t v13;

  if (one-time initialization token for findingExperience != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.findingExperience);
  v5 = a1;
  v6 = a1;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v9 = 138412290;
    v11 = a1;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v10 = v13;

    _os_log_impl(&dword_21B042000, v7, v8, a2, v9, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x22075D4E4](v10, -1, -1);
    MEMORY[0x22075D4E4](v9, -1, -1);
  }
  else
  {

  }
  return FindingViewController.restartSessionOnError()();
}

void partial apply for closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(uint64_t a1)
{
  uint64_t v1;

  closure #1 in FindingViewController.session(_:object:didUpdateRegion:previousRegion:)(a1, *(_QWORD *)(v1 + 16));
}

void partial apply for closure #1 in FindingViewController.sessionDidStartRunning(_:)()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10TVRemoteUI21FindingViewController_sessionRestartDelayMilliseconds) = 0;
}

void partial apply for closure #1 in FindingViewController.viewIsAppearing(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  closure #1 in FindingViewController.viewIsAppearing(_:)(a1, a2, v2);
}

uint64_t outlined retain of FMFindingViewStyle(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  v4 = *(void **)(a1 + 24);
  v5 = *(id *)a1;
  v6 = v2;
  v7 = v3;
  v8 = v4;
  return a1;
}

uint64_t outlined release of FMFindingViewStyle(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)a1;
  v3 = *(void **)(a1 + 8);
  v4 = *(void **)(a1 + 16);

  return a1;
}

UIBezierPath __swiftcall UIBezierPath.init(fmpfRectangleCentered:size:)(CGPoint fmpfRectangleCentered, CGSize size)
{
  double height;
  double width;
  double y;
  double x;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;

  height = size.height;
  width = size.width;
  y = fmpfRectangleCentered.y;
  x = fmpfRectangleCentered.x;
  v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  v7 = width * 0.5;
  v8 = x - width * 0.5;
  v9 = height * 0.5;
  v10 = height * 0.5 + y;
  v11 = v7 + x;
  v12 = y - v9;
  v13 = v6;
  objc_msgSend(v13, sel_moveToPoint_, v8, v10);
  objc_msgSend(v13, sel_addLineToPoint_, v11, v10);
  objc_msgSend(v13, sel_addLineToPoint_, v11, v12);
  objc_msgSend(v13, sel_addLineToPoint_, v8, v12);
  objc_msgSend(v13, sel_addLineToPoint_, v8, v10);
  objc_msgSend(v13, sel_closePath);

  return (UIBezierPath)v13;
}

id FMPFSKBTRangingNode.init()()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  objc_super v8;

  v1 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode;
  v2 = objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDiskNode());
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, sel_init);
  v4 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDotNode;
  *(_QWORD *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDotNode()), sel_init);
  v5 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode;
  *(_QWORD *)&v3[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTLevelsNode()), sel_init);

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for FMPFSKBTRangingNode();
  v6 = objc_msgSendSuper2(&v8, sel_init);
  FMPFSKBTRangingNode.setupLayout()();

  return v6;
}

void FMPFSKBTRangingNode.setupLayout()()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  Class isa;
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  Class v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  Class v23;

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode];
  v3 = *(void **)&v0[OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode];
  v4 = *(void **)&v1[OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDotNode];
  v5 = (void *)objc_opt_self();
  v6 = (void *)objc_opt_self();
  v7 = v2;
  v8 = v3;
  v22 = v4;
  objc_msgSend(v1, sel_addChild_, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_21B0F7C30;
  v10 = objc_msgSend(v6, sel_rangeWithConstantValue_, 0.0);
  v11 = objc_msgSend(v5, sel_distance_toNode_, v10, v1);

  *(_QWORD *)(v9 + 32) = v11;
  specialized Array._endMutation()();
  type metadata accessor for SKConstraint();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v7, sel_setConstraints_, isa);

  v13 = v8;
  objc_msgSend(v1, sel_addChild_, v13);
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_21B0F7C30;
  v15 = objc_msgSend(v6, sel_rangeWithConstantValue_, 0.0);
  v16 = objc_msgSend(v5, sel_distance_toNode_, v15, v1);

  *(_QWORD *)(v14 + 32) = v16;
  specialized Array._endMutation()();
  v17 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_setConstraints_, v17);

  v18 = v22;
  objc_msgSend(v1, sel_addChild_, v18);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_21B0F7C30;
  v20 = objc_msgSend(v6, sel_rangeWithConstantValue_, 0.0);
  v21 = objc_msgSend(v5, sel_distance_toNode_, v20, v1);

  *(_QWORD *)(v19 + 32) = v21;
  specialized Array._endMutation()();
  v23 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setConstraints_, v23);

}

void FMPFSKBTRangingNode.__ivar_destroyer()
{
  uint64_t v0;

}

id FMPFSKBTRangingNode.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FMPFSKBTRangingNode();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for FMPFSKBTRangingNode()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for SKConstraint()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SKConstraint;
  if (!lazy cache variable for type metadata for SKConstraint)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SKConstraint);
  }
  return result;
}

void specialized FMPFSKBTRangingNode.init(coder:)()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDiskNode;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDiskNode()), sel_init);
  v2 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_rangeDotNode;
  *(_QWORD *)&v0[v2] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTRangeDotNode()), sel_init);
  v3 = OBJC_IVAR____TtC10TVRemoteUI19FMPFSKBTRangingNode_levelRingsNode;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for FMPFSKBTLevelsNode()), sel_init);

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ResourceBundleClass.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self();
}

uint64_t __getVUITimeMetadataFactoryClass_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  return __getVUITimedMetadataPlaybackInfoClass_block_invoke_cold_1(v0);
}

uint64_t __getVUITimedMetadataPlaybackInfoClass_block_invoke_cold_1()
{
  NSObject *v0;

  v0 = abort_report_np();
  return __38__TVRUINetworkObserver_startObserving__block_invoke_cold_1(v0);
}

Swift::String __swiftcall NSLocalizedString(_:tableName:bundle:value:comment:)(Swift::String _, Swift::String_optional tableName, NSBundle bundle, Swift::String value, Swift::String comment)
{
  uint64_t v5;
  void *v6;
  Swift::String result;

  v5 = MEMORY[0x24BDCC6D8](_._countAndFlagsBits, _._object, tableName.value._countAndFlagsBits, tableName.value._object, bundle.super.isa, value._countAndFlagsBits, value._object, comment._countAndFlagsBits);
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t dispatch thunk of NSKeyValueObservation.invalidate()()
{
  return MEMORY[0x24BDCD258]();
}

uint64_t _convertErrorToNSError(_:)()
{
  return MEMORY[0x24BDCD2F0]();
}

uint64_t _convertNSErrorToError(_:)()
{
  return MEMORY[0x24BDCD2F8]();
}

uint64_t _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)()
{
  return MEMORY[0x24BDCD5A8]();
}

uint64_t URL.init(fileURLWithPath:)()
{
  return MEMORY[0x24BDCD870]();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
  MEMORY[0x24BDCD8D0](retstr);
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCD9C0]();
}

uint64_t type metadata accessor for URL()
{
  return MEMORY[0x24BDCDAC0]();
}

uint64_t Data.init(contentsOf:options:)()
{
  return MEMORY[0x24BDCDB78]();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)MEMORY[0x24BDCDCA0]();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCDCE0]();
}

uint64_t Date.timeIntervalSince(_:)()
{
  return MEMORY[0x24BDCE330]();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)MEMORY[0x24BDCE5D8]();
}

uint64_t static Date._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCE878]();
}

uint64_t Date.init()()
{
  return MEMORY[0x24BDCE8F8]();
}

uint64_t type metadata accessor for Date()
{
  return MEMORY[0x24BDCE900]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t Tip.invalidate(reason:)()
{
  return MEMORY[0x24BDF6098]();
}

uint64_t Tip.shouldDisplayUpdates.getter()
{
  return MEMORY[0x24BDF60A8]();
}

uint64_t Tip.image.getter()
{
  return MEMORY[0x24BDF60B8]();
}

uint64_t Tip.rules.getter()
{
  return MEMORY[0x24BDF60C0]();
}

uint64_t Tip.actions.getter()
{
  return MEMORY[0x24BDF60D8]();
}

uint64_t TipUIPopoverViewController.popoverPresentationController.getter()
{
  return MEMORY[0x24BDF60E8]();
}

uint64_t TipUIPopoverViewController.presentationDelegate.setter()
{
  return MEMORY[0x24BDF60F0]();
}

uint64_t type metadata accessor for TipUIPopoverViewController()
{
  return MEMORY[0x24BDF60F8]();
}

uint64_t TipUIPopoverViewController.__allocating_init(_:sourceItem:actionHandler:)()
{
  return MEMORY[0x24BDF6100]();
}

uint64_t static Tips.OptionsBuilder.buildExpression<A>(_:)()
{
  return MEMORY[0x24BDF6178]();
}

uint64_t static Tips.OptionsBuilder.buildFinalResult<A>(_:)()
{
  return MEMORY[0x24BDF6188]();
}

uint64_t static Tips.OptionsBuilder.buildPartialBlock<A, B>(accumulated:next:)()
{
  return MEMORY[0x24BDF6190]();
}

uint64_t static Tips.OptionsBuilder.buildPartialBlock<A>(first:)()
{
  return MEMORY[0x24BDF61A0]();
}

uint64_t type metadata accessor for Tips.MaxDisplayCount()
{
  return MEMORY[0x24BDF61C0]();
}

uint64_t Tips.MaxDisplayCount.init(_:)()
{
  return MEMORY[0x24BDF61D0]();
}

uint64_t type metadata accessor for Tips.UsesConstellation()
{
  return MEMORY[0x24BDF61E0]();
}

uint64_t Tips.UsesConstellation.init(_:)()
{
  return MEMORY[0x24BDF61F0]();
}

uint64_t type metadata accessor for Tips.InvalidationReason()
{
  return MEMORY[0x24BDF6200]();
}

uint64_t static Tips.ConfigurationOption.AnalyticsEngine.coreAnalytics.getter()
{
  return MEMORY[0x24BDF6208]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.AnalyticsEngine()
{
  return MEMORY[0x24BDF6210]();
}

uint64_t static Tips.ConfigurationOption.analyticsEngine(_:)()
{
  return MEMORY[0x24BDF6218]();
}

uint64_t static Tips.ConfigurationOption.DisplayFrequency.immediate.getter()
{
  return MEMORY[0x24BDF6228]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.DisplayFrequency()
{
  return MEMORY[0x24BDF6230]();
}

uint64_t static Tips.ConfigurationOption.displayFrequency(_:)()
{
  return MEMORY[0x24BDF6238]();
}

uint64_t static Tips.ConfigurationOption.DatastoreLocation.tipsGroupContainer.getter()
{
  return MEMORY[0x24BDF6240]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption.DatastoreLocation()
{
  return MEMORY[0x24BDF6248]();
}

uint64_t static Tips.ConfigurationOption.datastoreLocation(_:)()
{
  return MEMORY[0x24BDF6250]();
}

uint64_t type metadata accessor for Tips.ConfigurationOption()
{
  return MEMORY[0x24BDF6258]();
}

uint64_t type metadata accessor for Tips.Status()
{
  return MEMORY[0x24BDF62F8]();
}

uint64_t static Tips.configure(_:)()
{
  return MEMORY[0x24BDF6328]();
}

uint64_t LocalizedStringKey.init(stringLiteral:)()
{
  return MEMORY[0x24BDEEA50]();
}

uint64_t Text.init(_:tableName:bundle:comment:)()
{
  return MEMORY[0x24BDF1FC0]();
}

uint64_t Image.init(_:bundle:)()
{
  return MEMORY[0x24BDF4130]();
}

uint64_t type metadata accessor for DispatchTimeInterval()
{
  return MEMORY[0x24BEE5428]();
}

uint64_t static DispatchWorkItemFlags.barrier.getter()
{
  return MEMORY[0x24BEE5450]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t static DispatchQoS.userInitiated.getter()
{
  return MEMORY[0x24BEE54D0]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t static DispatchTime.now()()
{
  return MEMORY[0x24BEE5570]();
}

uint64_t type metadata accessor for DispatchTime()
{
  return MEMORY[0x24BEE5590]();
}

uint64_t static DispatchWallTime.now()()
{
  return MEMORY[0x24BEE55A8]();
}

uint64_t type metadata accessor for DispatchWallTime()
{
  return MEMORY[0x24BEE55B0]();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return MEMORY[0x24BEE55D8]();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return MEMORY[0x24BEE55E0]();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return MEMORY[0x24BEE55F8]();
}

uint64_t + infix(_:_:)()
{
  return MEMORY[0x24BEE5620]();
}

{
  return MEMORY[0x24BEE5628]();
}

{
  return MEMORY[0x24BEE5638]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCF830]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA08]();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return MEMORY[0x24BDCFA18]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.init(format:_:)()
{
  return MEMORY[0x24BDCFA78]();
}

uint64_t String.init<A>(describing:)()
{
  return MEMORY[0x24BEE09F0]();
}

uint64_t static String._fromSubstring(_:)()
{
  return MEMORY[0x24BEE0A50]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

uint64_t String.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE0B80]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

Swift::Bool __swiftcall String.hasSuffix(_:)(Swift::String a1)
{
  return MEMORY[0x24BEE0CD0](a1._countAndFlagsBits, a1._object);
}

uint64_t String.subscript.getter()
{
  return MEMORY[0x24BEE0DE0]();
}

uint64_t RawRepresentable<>.encode(to:)()
{
  return MEMORY[0x24BEE1000]();
}

uint64_t RawRepresentable<>.init(from:)()
{
  return MEMORY[0x24BEE1080]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)MEMORY[0x24BDCFBA8]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t static Array._allocateBufferUninitialized(minimumCapacity:)()
{
  return MEMORY[0x24BEE1190]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

NSNumber __swiftcall Bool._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFC08]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t _sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj()
{
  return MEMORY[0x24BEE68D8]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

uint64_t dispatch thunk of AsyncSequence.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6C08]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFCE8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

NSNumber __swiftcall Int._bridgeToObjectiveC()()
{
  return (NSNumber)MEMORY[0x24BDCFD28]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t CGMutablePathRef.addArc(center:radius:startAngle:endAngle:clockwise:transform:)()
{
  return MEMORY[0x24BDBD7E0]();
}

uint64_t static OS_dispatch_queue.Attributes.concurrent.getter()
{
  return MEMORY[0x24BEE5678]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t OS_dispatch_queue.asyncAfter(wallDeadline:execute:)()
{
  return MEMORY[0x24BEE56B0]();
}

uint64_t OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)()
{
  return MEMORY[0x24BEE56B8]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return MEMORY[0x24BEE5770]();
}

uint64_t OS_dispatch_queue.sync<A>(flags:execute:)()
{
  return MEMORY[0x24BEE5778]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t CGSize.debugDescription.getter()
{
  return MEMORY[0x24BDBD840]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t NSObject.hash(into:)()
{
  return MEMORY[0x24BEE5BC8]();
}

uint64_t Substring.index(_:offsetBy:limitedBy:)()
{
  return MEMORY[0x24BEE1DB8]();
}

uint64_t Substring.subscript.getter()
{
  return MEMORY[0x24BEE1E60]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return MEMORY[0x24BEE20A8]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t __CocoaSet.startIndex.getter()
{
  return MEMORY[0x24BEE22F8]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t static __CocoaSet.Index.== infix(_:_:)()
{
  return MEMORY[0x24BEE2318]();
}

uint64_t __CocoaSet.Index.age.getter()
{
  return MEMORY[0x24BEE2320]();
}

uint64_t __CocoaSet.Index.element.getter()
{
  return MEMORY[0x24BEE2328]();
}

uint64_t __CocoaSet.element(at:)()
{
  return MEMORY[0x24BEE2348]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.endIndex.getter()
{
  return MEMORY[0x24BEE2368]();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE23A0](seed);
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE2660]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE2908]();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return MEMORY[0x24BEE2938]();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return MEMORY[0x24BEE2958]();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return MEMORY[0x24BEE2980]();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE2988]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t AsyncMapSequence.base.getter()
{
  return MEMORY[0x24BEE6EB0]();
}

uint64_t AsyncMapSequence.Iterator.baseIterator.modify()
{
  return MEMORY[0x24BEE6EB8]();
}

uint64_t AsyncMapSequence.Iterator.transform.getter()
{
  return MEMORY[0x24BEE6EC0]();
}

uint64_t AsyncMapSequence.Iterator.init(_:transform:)()
{
  return MEMORY[0x24BEE6ED8]();
}

uint64_t AsyncMapSequence.transform.getter()
{
  return MEMORY[0x24BEE6EE8]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _bridgeCocoaArray<A>(_:)()
{
  return MEMORY[0x24BEE2F58]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

uint64_t _SwiftNewtypeWrapper<>._toCustomAnyHashable()()
{
  return MEMORY[0x24BEE31D0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3358]();
}

{
  return MEMORY[0x24BEE3360]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedDecodingContainer.decode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE3380]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A8]();
}

{
  return MEMORY[0x24BEE34B0]();
}

{
  return MEMORY[0x24BEE34C0]();
}

uint64_t KeyedEncodingContainer.encode<A>(_:forKey:)()
{
  return MEMORY[0x24BEE34D0]();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE3540]();
}

Swift::Int __swiftcall _minimumMergeRunLength(_:)(Swift::Int a1)
{
  return MEMORY[0x24BEE3548](a1);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t _bridgeAnythingToObjectiveC<A>(_:)()
{
  return MEMORY[0x24BEE3A20]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter()
{
  return MEMORY[0x24BEE3B90]();
}

uint64_t Error.localizedDescription.getter()
{
  return MEMORY[0x24BDD0708]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt64 a1)
{
  MEMORY[0x24BEE4318](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t _Pointer.debugDescription.getter()
{
  return MEMORY[0x24BEE49D0]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

uint64_t _typeName(_:qualified:)()
{
  return MEMORY[0x24BEE4A98]();
}

void AudioServicesPlaySystemSound(SystemSoundID inSystemSoundID)
{
  MEMORY[0x24BDB6980](*(_QWORD *)&inSystemSoundID);
}

uint64_t BSNSStringFromCGRect()
{
  return MEMORY[0x24BE0BC68]();
}

uint64_t BiomeLibrary()
{
  return MEMORY[0x24BE0C258]();
}

CFTimeInterval CACurrentMediaTime(void)
{
  CFTimeInterval result;

  MEMORY[0x24BDE5410]();
  return result;
}

CATransform3D *__cdecl CATransform3DMakeRotation(CATransform3D *__return_ptr retstr, CGFloat angle, CGFloat x, CGFloat y, CGFloat z)
{
  return (CATransform3D *)MEMORY[0x24BDE55C8](retstr, angle, x, y, z);
}

uint64_t CCUIExpandedModuleContinuousCornerRadius()
{
  return MEMORY[0x24BE19A68]();
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void *observer, CFNotificationCallback callBack, CFStringRef name, const void *object, CFNotificationSuspensionBehavior suspensionBehavior)
{
  MEMORY[0x24BDBC040](center, observer, callBack, name, object, suspensionBehavior);
}

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void)
{
  return (CFNotificationCenterRef)MEMORY[0x24BDBC050]();
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8D8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x24BDBD8E8](retstr, tx, ty);
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
  MEMORY[0x24BDBDE60](c, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
  MEMORY[0x24BDBDFD8](c, color);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x24BDBEE80]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x24BDBEE90](path, transform);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x24BDBEEA0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x24BDBEEE0](path);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

void CGPathRelease(CGPathRef path)
{
  MEMORY[0x24BDBEF48](path);
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x24BDBEFC0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x24BDBEFE0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectFromString(NSString *string)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x24BEBD238](string);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFE8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBEFF8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF000]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF008]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF010]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF018]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  CGFloat result;

  MEMORY[0x24BDBF020]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x24BDBF030]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  double v1;
  double v2;
  double v3;
  double v4;
  CGRect result;

  MEMORY[0x24BDBF038]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v2;
  result.origin.x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF040]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x24BDBF050]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x24BDBF060]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  double v3;
  double v4;
  double v5;
  double v6;
  CGRect result;

  MEMORY[0x24BDBF078]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.height = v6;
  result.size.width = v5;
  result.origin.y = v4;
  result.origin.x = v3;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  CGRect result;

  MEMORY[0x24BDBF088]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.height = v5;
  result.size.width = v4;
  result.origin.y = v3;
  result.origin.x = v2;
  return result;
}

uint64_t GestaltGetDeviceClass()
{
  return MEMORY[0x24BE293A0]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x24BED8488]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return (NSString *)MEMORY[0x24BEBD2B8]((__n128)point, *(__n128 *)&point.y);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x24BEBD2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t NSStringFromSBSHardwareButtonKind()
{
  return MEMORY[0x24BEB0A00]();
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x24BDD1280]();
}

uint64_t SBSUIHardwareButtonHintViewsSupported()
{
  return MEMORY[0x24BEB0FB0]();
}

uint64_t SBSUIRegisterHardwareButtonHintView()
{
  return MEMORY[0x24BEB0FB8]();
}

uint64_t SBSUndimScreen()
{
  return MEMORY[0x24BEB0D98]();
}

uint64_t TVRCDeviceClassificationDescription()
{
  return MEMORY[0x24BEB4110]();
}

uint64_t TVRCDeviceConnectionTypeDescription()
{
  return MEMORY[0x24BEB4118]();
}

uint64_t TVRCTouchPhaseDescription()
{
  return MEMORY[0x24BEB4140]();
}

BOOL UIAccessibilityDarkerSystemColorsEnabled(void)
{
  return MEMORY[0x24BEBDDE0]();
}

BOOL UIAccessibilityIsReduceMotionEnabled(void)
{
  return MEMORY[0x24BEBDE48]();
}

NSComparisonResult UIContentSizeCategoryCompareToCategory(UIContentSizeCategory lhs, UIContentSizeCategory rhs)
{
  return MEMORY[0x24BEBE080](lhs, rhs);
}

BOOL UIContentSizeCategoryIsAccessibilityCategory(UIContentSizeCategory category)
{
  return MEMORY[0x24BEBE0B0](category);
}

uint64_t UIEdgeInsetsMakeWithEdges()
{
  return MEMORY[0x24BEBE148]();
}

CGContextRef UIGraphicsGetCurrentContext(void)
{
  return (CGContextRef)MEMORY[0x24BEBE2A8]();
}

uint64_t UIRectCenteredIntegralRect()
{
  return MEMORY[0x24BEBE658]();
}

uint64_t UIRectGetCenter()
{
  return MEMORY[0x24BEBE6A8]();
}

uint64_t WFWiFiStateMonitorStringForState()
{
  return MEMORY[0x24BEC2908]();
}

uint64_t _AXSAppleTVRemoteForceLiveTVButtons()
{
  return MEMORY[0x24BED2030]();
}

uint64_t _AXSAppleTVRemoteUsesSimpleGestures()
{
  return MEMORY[0x24BED2038]();
}

uint64_t _AXSButtonShapesEnabled()
{
  return MEMORY[0x24BED2100]();
}

uint64_t _AXSCopyPreferredContentSizeCategoryName()
{
  return MEMORY[0x24BED2190]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

int __fpclassifyf(float a1)
{
  return MEMORY[0x24BDAC7F8](a1);
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB88](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACC10](dso, log, type, spid, name, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x24BEE4B38]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

long double atan2(long double __y, long double __x)
{
  long double result;

  MEMORY[0x24BDAD220](__y, __x);
  return result;
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

long double cosh(long double __x)
{
  long double result;

  MEMORY[0x24BDADBF0](__x);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADC60](when, queue, block);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_block_cancel(dispatch_block_t block)
{
  MEMORY[0x24BDADD10](block);
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x24BDADD18](flags, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADFE8](queue, block);
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x24BDADFF8](when, delta);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE3F0](__x, __y);
  return result;
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

long double hypot(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAE838](__x, __y);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_copyWeak(id *to, id *from)
{
  MEMORY[0x24BEDD030](to, from);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x24BEDD0C0](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x24BEDD2C0](a1);
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
  MEMORY[0x24BEDD408](self, _cmd, newValue, offset);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD458](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x24BDAF400](log);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

long double remainder(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAFB28](__x, __y);
  return result;
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

long double sinh(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE28](__x);
  return result;
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x24BEE4C40]();
}

uint64_t swift_dynamicCastObjCClass()
{
  return MEMORY[0x24BEE4C60]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getDynamicType()
{
  return MEMORY[0x24BEE4D00]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x24BEE4D18]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x24BEE4D88]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x24BEE4DA0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x24BEE4DC0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStaticObject()
{
  return MEMORY[0x24BEE4E50]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x24BEE4E68]();
}

uint64_t swift_isUniquelyReferenced_nonNull_bridgeObject()
{
  return MEMORY[0x24BEE4E90]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x24BEE4F50]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x24BEE5028]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

long double tan(long double __x)
{
  long double result;

  MEMORY[0x24BDB0138](__x);
  return result;
}

