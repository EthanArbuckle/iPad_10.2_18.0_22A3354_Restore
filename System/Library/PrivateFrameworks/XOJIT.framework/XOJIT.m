BOOL static XOJITError.Kind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void XOJITError.Kind.hash(into:)()
{
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_22();
}

void sub_24A8013D8(char *a1@<X8>)
{
  uint64_t v1;
  char v3;

  if ((XOJIT_Error_IsFailedToMaterialize(*(_QWORD *)(v1 + 16)) & 1) != 0)
  {
    v3 = 0;
  }
  else if (XOJIT_Error_IsUnsatisfiedSymbolDependencies(*(_QWORD *)(v1 + 16)))
  {
    v3 = 1;
  }
  else
  {
    v3 = 2;
  }
  *a1 = v3;
  OUTLINED_FUNCTION_22();
}

uint64_t XOJITError.deinit()
{
  uint64_t v0;

  XOJIT_Error_Destroy(*(_QWORD **)(v0 + 16));
  return v0;
}

uint64_t XOJITError.__deallocating_deinit()
{
  XOJITError.deinit();
  OUTLINED_FUNCTION_16();
  return swift_deallocClassInstance();
}

uint64_t XOJITError.description.getter()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v3;

  v1 = XOJIT_Error_ToMessage(*(char **)(v0 + 16));
  if (!v1)
    return 0x737365636375733CLL;
  v2 = v1;
  v3 = sub_24AA294D4();
  free(v2);
  return v3;
}

uint64_t sub_24A8014C8()
{
  return XOJITError.description.getter();
}

uint64_t MemoryBuffer.__allocating_init(identifier:fromFile:)()
{
  uint64_t v0;

  OUTLINED_FUNCTION_72();
  v0 = OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_50();
  return v0;
}

uint64_t MemoryBuffer.init(identifier:fromFile:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  OUTLINED_FUNCTION_72();
  *(_QWORD *)(v0 + 16) = 0;
  v1 = sub_24AA294BC();
  swift_bridgeObjectRelease();
  v2 = OUTLINED_FUNCTION_69();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v3 = XOJIT_MemoryBuffer_CreateWithIdentifierFromPath((llvm::formatv_object_base *)(v1 + 32), (llvm::formatv_object_base *)(v2 + 32), (_QWORD *)(v0 + 16));
  swift_endAccess();
  swift_release();
  OUTLINED_FUNCTION_48();
  if (v3)
  {
    OUTLINED_FUNCTION_9();
    type metadata accessor for XOJITError();
    v4 = OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_34(v4);
    OUTLINED_FUNCTION_1();
    *v5 = v4;
    OUTLINED_FUNCTION_3();
  }
  return v0;
}

uint64_t type metadata accessor for XOJITError()
{
  return objc_opt_self();
}

unint64_t sub_24A801634()
{
  unint64_t result;
  uint64_t v1;

  result = qword_25795BED8;
  if (!qword_25795BED8)
  {
    v1 = type metadata accessor for XOJITError();
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJITError, v1);
    atomic_store(result, (unint64_t *)&qword_25795BED8);
  }
  return result;
}

void MemoryBuffer.__allocating_init(fromFile:)()
{
  OUTLINED_FUNCTION_0();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_50();
  OUTLINED_FUNCTION_36();
}

uint64_t MemoryBuffer.deinit()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_60();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    XOJIT_MemoryBuffer_Destroy(v1);
  return v0;
}

uint64_t MemoryBuffer.__deallocating_deinit()
{
  MemoryBuffer.deinit();
  OUTLINED_FUNCTION_16();
  return swift_deallocClassInstance();
}

uint64_t sub_24A801700()
{
  uint64_t v0;
  uint64_t result;

  swift_beginAccess();
  result = *(_QWORD *)(v0 + 16);
  if (result)
    *(_QWORD *)(v0 + 16) = 0;
  else
    __break(1u);
  return result;
}

uint64_t sub_24A801748(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  if (result)
  {
    v3 = result;
    result = swift_retain();
    if (!a2)
      return swift_release();
    v4 = *(void (**)(uint64_t))(v3 + 32);
    if (v4)
    {
      type metadata accessor for XOJITError();
      v5 = swift_allocObject();
      *(_QWORD *)(v5 + 16) = a2;
      swift_retain();
      v4(v5);
      swift_release();
      swift_release();
      return sub_24A80535C((uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = OUTLINED_FUNCTION_2();
  XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)(a1, a2, a3);
  return v6;
}

uint64_t XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)(void *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t result;
  _QWORD v16[2];

  v7 = 0;
  v16[1] = *MEMORY[0x24BDAC8D0];
  v3[4] = 0;
  v3[2] = 0;
  v3[5] = 0;
  if (qword_25795BED0 != -1)
  {
    swift_once();
    v7 = v3[4];
  }
  v3[4] = 0;
  v3[5] = 0;
  sub_24A80535C(v7);
  v3[3] = a3;
  v16[0] = 0;
  v8 = v3[4];
  if (v8)
    v9 = sub_24A8017F4;
  else
    v9 = 0;
  if (v8)
    v10 = (uint64_t)v3;
  else
    v10 = 0;
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2))
  {
    OUTLINED_FUNCTION_12();
    result = OUTLINED_FUNCTION_66();
    __break(1u);
  }
  else
  {
    v11 = XOJIT_XOJIT_NoopMutatingCallback;
    v12 = *(_QWORD *)algn_257965308;
    swift_unknownObjectRetain();
    if (XOJIT_XOJIT_CreateFromXPCWithOOPJITType((uint64_t)v9, v10, v11, v12, a1, a2, v16))
    {
      OUTLINED_FUNCTION_9();
      type metadata accessor for XOJITError();
      v13 = OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_71(v13);
      OUTLINED_FUNCTION_1();
      *v14 = v10;
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_47();
      OUTLINED_FUNCTION_41();
    }
    else
    {
      OUTLINED_FUNCTION_47();
      OUTLINED_FUNCTION_41();
      v3[2] = v16[0];
    }
    return (uint64_t)v3;
  }
  return result;
}

uint64_t XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;

  v8 = OUTLINED_FUNCTION_2();
  v9 = (void *)OUTLINED_FUNCTION_65();
  XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(v9, v10, a3, a4, a5);
  return v8;
}

uint64_t XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  _QWORD v20[2];

  v11 = 0;
  v20[1] = *MEMORY[0x24BDAC8D0];
  v5[2] = 0;
  v5[4] = 0;
  v5[5] = 0;
  if (qword_25795BED0 != -1)
  {
    swift_once();
    v11 = v5[4];
  }
  v5[3] = a3;
  v5[4] = a4;
  v5[5] = a5;
  swift_unknownObjectRetain();
  sub_24A80536C(a4);
  sub_24A80535C(v11);
  v20[0] = 0;
  v12 = v5[4];
  if (v12)
    v13 = sub_24A8017F4;
  else
    v13 = 0;
  if (v12)
    v14 = (uint64_t)v5;
  else
    v14 = 0;
  if ((a2 & 0x8000000000000000) != 0 || HIDWORD(a2))
  {
    OUTLINED_FUNCTION_12();
    result = OUTLINED_FUNCTION_66();
    __break(1u);
  }
  else
  {
    v15 = XOJIT_XOJIT_CreateFromXPCWithOOPJITType((uint64_t)v13, v14, XOJIT_XOJIT_NoopMutatingCallback, *(uint64_t *)algn_257965308, a1, a2, v20);
    if (v15)
    {
      v16 = v15;
      OUTLINED_FUNCTION_9();
      type metadata accessor for XOJITError();
      v17 = OUTLINED_FUNCTION_0();
      *(_QWORD *)(v17 + 16) = v16;
      sub_24A801634();
      OUTLINED_FUNCTION_1();
      *v18 = v17;
      OUTLINED_FUNCTION_3();
      sub_24A80535C(a4);
      OUTLINED_FUNCTION_47();
      OUTLINED_FUNCTION_41();
    }
    else
    {
      sub_24A80535C(a4);
      OUTLINED_FUNCTION_47();
      OUTLINED_FUNCTION_41();
      v5[2] = v20[0];
    }
    return (uint64_t)v5;
  }
  return result;
}

void XOJIT.__allocating_init(fromXPCConnection:opaqueOwner:)(void *a1, uint64_t a2)
{
  OUTLINED_FUNCTION_2();
  XOJIT.init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)(a1, 1uLL, a2, 0, 0);
  OUTLINED_FUNCTION_36();
}

uint64_t XOJIT.__allocating_init()()
{
  uint64_t v0;

  v0 = OUTLINED_FUNCTION_2();
  XOJIT.init()();
  return v0;
}

_QWORD *XOJIT.init()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;

  v1 = 0;
  v0[2] = 0;
  v0[4] = 0;
  v0[5] = 0;
  if (qword_25795BED0 != -1)
  {
    swift_once();
    v1 = v0[4];
  }
  v0[3] = 0;
  v0[4] = 0;
  v0[5] = 0;
  sub_24A80535C(v1);
  v2 = v0[4];
  if (v2)
    v3 = sub_24A8017F4;
  else
    v3 = 0;
  if (v2)
    v4 = (uint64_t)v0;
  else
    v4 = 0;
  if (OUTLINED_FUNCTION_77((uint64_t)v3, v4, &XOJIT_XOJIT_NoopMutatingCallback, 0))
  {
    OUTLINED_FUNCTION_9();
    type metadata accessor for XOJITError();
    v5 = OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_34(v5);
    OUTLINED_FUNCTION_1();
    *v6 = v5;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    v0[2] = v8;
  }
  return v0;
}

void XOJIT.__allocating_init(reportError:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_2();
  XOJIT.init(reportError:)(a1, a2);
  OUTLINED_FUNCTION_36();
}

_QWORD *XOJIT.init(reportError:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v5 = 0;
  v6 = 0;
  v2[2] = 0;
  v2[4] = 0;
  v2[5] = 0;
  if (qword_25795BED0 != -1)
  {
    swift_once();
    v6 = v2[4];
    v5 = v2[5];
  }
  v2[3] = 0;
  v2[4] = a1;
  v2[5] = a2;
  sub_24A80536C(a1);
  sub_24A80535C(v6);
  v7 = v2[4];
  if (v7)
    v8 = sub_24A8017F4;
  else
    v8 = 0;
  if (v7)
    v9 = (uint64_t)v2;
  else
    v9 = 0;
  if (OUTLINED_FUNCTION_77((uint64_t)v8, v9, &XOJIT_XOJIT_NoopMutatingCallback, 0))
  {
    OUTLINED_FUNCTION_9();
    type metadata accessor for XOJITError();
    v10 = OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_71(v10);
    OUTLINED_FUNCTION_1();
    *v11 = v5;
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_67();
  }
  else
  {
    OUTLINED_FUNCTION_67();
    v2[2] = v13;
  }
  return v2;
}

uint64_t XOJIT.deinit()
{
  uint64_t v0;
  llvm::orc::ExecutionSession *v1;

  v1 = *(llvm::orc::ExecutionSession **)(v0 + 16);
  if (v1)
    XOJIT_XOJIT_Destroy(v1);
  swift_unknownObjectRelease();
  sub_24A80535C(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t XOJIT.__deallocating_deinit()
{
  XOJIT.deinit();
  return swift_deallocClassInstance();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XOJIT.endSession()()
{
  uint64_t v0;
  uint64_t v1;
  llvm::orc::ExecutionSession *v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(llvm::orc::ExecutionSession **)(v0 + 16);
  if (v2)
  {
    if (XOJIT_XOJIT_EndSession(v2))
    {
      type metadata accessor for XOJITError();
      v3 = OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_35(v3);
      OUTLINED_FUNCTION_1();
      *v4 = v1;
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_37();
  }
  else
  {
    __break(1u);
  }
}

Swift::String __swiftcall XOJIT.getTargetTriple()()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    XOJIT_XOJIT_GetTargetTriple(v1);
    v1 = sub_24AA294D4();
  }
  else
  {
    __break(1u);
  }
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t XOJIT.programJITDylib.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_24A8020B4((uint64_t (*)(void))XOJIT_XOJIT_GetProgramJITDylibRetained, a1);
}

uint64_t XOJIT.platformJITDylib.getter@<X0>(_QWORD *a1@<X8>)
{
  return sub_24A8020B4((uint64_t (*)(void))XOJIT_XOJIT_GetPlatformJITDylibRetained, a1);
}

uint64_t sub_24A8020B4@<X0>(uint64_t (*a1)(void)@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(v2 + 16);
  if (result)
  {
    v6 = a1();
    type metadata accessor for XOJIT.JITDylib.JITDylibRef();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    *a2 = v2;
    a2[1] = v7;
    return OUTLINED_FUNCTION_26();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.objectLinkingLayer.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t ObjectLinkingLayer;

  result = *(_QWORD *)(v1 + 16);
  if (result)
  {
    ObjectLinkingLayer = XOJIT_XOJIT_GetObjectLinkingLayer(result);
    *a1 = v1;
    a1[1] = ObjectLinkingLayer;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XOJIT.runProgramOnMainThread(symbol:jitDylibName:arguments:)(Swift::String symbol, Swift::String jitDylibName, Swift::OpaquePointer arguments)
{
  return sub_24A8021D8(symbol._countAndFlagsBits, (uint64_t)symbol._object, jitDylibName._countAndFlagsBits, (uint64_t)jitDylibName._object, (uint64_t)arguments._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))XOJIT_XOJIT_RunAsMain);
}

Swift::Int32 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> XOJIT.runProgramOnAnyThread(symbol:jitDylibName:arguments:)(Swift::String symbol, Swift::String jitDylibName, Swift::OpaquePointer arguments)
{
  return sub_24A8021D8(symbol._countAndFlagsBits, (uint64_t)symbol._object, jitDylibName._countAndFlagsBits, (uint64_t)jitDylibName._object, (uint64_t)arguments._rawValue, (uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))XOJIT_XOJIT_RunOnAnyThread);
}

uint64_t sub_24A8021D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, unsigned int *))
{
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t j;
  void *v28;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;

  v7 = v6;
  v33 = *MEMORY[0x24BDAC8D0];
  v32 = -1;
  v8 = *(_QWORD *)(a5 + 16);
  if (v8)
  {
    v31 = MEMORY[0x24BEE4AF8];
    sub_24A805860(0, v8, 0);
    v10 = v31;
    v11 = a5 + 40;
    do
    {
      v12 = (const char *)(OUTLINED_FUNCTION_69() + 32);
      OUTLINED_FUNCTION_46();
      v13 = strdup(v12);
      OUTLINED_FUNCTION_48();
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v31 + 16);
      v14 = *(_QWORD *)(v31 + 24);
      v16 = v15 + 1;
      if (v15 >= v14 >> 1)
        sub_24A805860((char *)(v14 > 1), v15 + 1, 1);
      v11 += 16;
      *(_QWORD *)(v31 + 16) = v16;
      *(_QWORD *)(v31 + 8 * v15 + 32) = v13;
      --v8;
    }
    while (v8);
  }
  else
  {
    v10 = MEMORY[0x24BEE4AF8];
    v16 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
  }
  v17 = *(_QWORD *)(v7 + 16);
  if (!v17)
LABEL_22:
    __break(1u);
  if (v16 >> 31)
  {
    __break(1u);
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_65();
  v18 = sub_24AA294BC() + 32;
  v19 = sub_24AA294BC();
  v20 = a6(v17, v18, v19 + 32, v16, v10 + 32, &v32);
  OUTLINED_FUNCTION_20();
  OUTLINED_FUNCTION_48();
  if (v20)
  {
    i = type metadata accessor for XOJITError();
    v22 = OUTLINED_FUNCTION_0();
    *(_QWORD *)(v22 + 16) = v20;
    sub_24A801634();
    OUTLINED_FUNCTION_1();
    *v23 = v22;
    OUTLINED_FUNCTION_3();
    v24 = *(_QWORD *)(v10 + 16);
    if (v24)
    {
      OUTLINED_FUNCTION_30();
      for (i = 0; i != v24; ++i)
      {
        v25 = *(void **)(v10 + 8 * i + 32);
        free(v25);
      }
      OUTLINED_FUNCTION_29();
    }
  }
  else
  {
    i = v32;
    v26 = *(_QWORD *)(v10 + 16);
    if (v26)
    {
      OUTLINED_FUNCTION_30();
      for (j = 0; j != v26; ++j)
      {
        v28 = *(void **)(v10 + 8 * j + 32);
        free(v28);
      }
      OUTLINED_FUNCTION_29();
    }
  }
  OUTLINED_FUNCTION_29();
  return i;
}

void XOJIT.runNewInitializers(for:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(uint64_t **)(v1 + 16);
  if (v4)
  {
    if (XOJIT_XOJIT_RunNewInitializers(v4, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16)))
    {
      type metadata accessor for XOJITError();
      v5 = OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_35(v5);
      OUTLINED_FUNCTION_1();
      *v6 = v2;
      OUTLINED_FUNCTION_3();
    }
    OUTLINED_FUNCTION_37();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24A8024A4()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t XOJIT.callOnAnyThread<A>(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  sub_24AA29420();
  swift_allocObject();
  sub_24AA29414();
  OUTLINED_FUNCTION_65();
  sub_24AA29408();
  v2 = v1;
  result = swift_release();
  if (!v0)
  {
    OUTLINED_FUNCTION_53();
    __asm { BR              X9 }
  }
  return result;
}

void sub_24A802684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    __break(1u);
  v6 = a2 - a1;
  if (!a1)
    v6 = 0;
  v12[0] = XOJIT_XOJIT_CallOnAnyThread(v5, a4, a1, v6);
  v12[1] = v7;
  if (orc_rt_CWrapperFunctionResultGetOutOfBandError(v12))
  {
    v8 = sub_24AA294D4();
    v10 = v9;
    sub_24A80762C();
    swift_allocError();
    *v11 = v8;
    v11[1] = v10;
    swift_willThrow();
  }
  orc_rt_DisposeCWrapperFunctionResult((uint64_t)v12);
}

void XOJIT.callOnAnyThread<A>(symbol:in:_:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  uint64_t v10;

  v5 = *a3;
  v4 = a3[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795BEE0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24AA2A2C0;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = v4;
  *(_BYTE *)(inited + 48) = 1;
  v9 = 1;
  v8 = 0;
  v7 = 5;
  swift_retain();
  OUTLINED_FUNCTION_45();
  XOJIT.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(inited, &v8, &v9, &v7, &v10);
  swift_setDeallocating();
  sub_24A80539C();
  if (!v3)
    XOJIT.callOnAnyThread<A>(_:_:)();
  OUTLINED_FUNCTION_23();
}

void XOJIT.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(uint64_t a1@<X0>, unsigned __int8 *a2@<X3>, unsigned __int8 *a3@<X4>, unsigned __int8 *a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  int v7;
  unsigned int v8;
  int64_t v9;
  char *v10;
  unint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  _QWORD v34[3];

  v6 = a5;
  v34[2] = *MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v33 = *a3;
  v8 = *a4;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (char *)MEMORY[0x24BEE4AF8];
  if (v9)
  {
    v30 = *a4;
    v32 = *a2;
    v34[0] = MEMORY[0x24BEE4AF8];
    sub_24A80587C(0, v9, 0);
    v10 = (char *)v34[0];
    v13 = *(_QWORD *)(v34[0] + 16);
    v14 = 16 * v13;
    v15 = (unsigned __int8 *)(a1 + 48);
    do
    {
      v16 = *v15;
      v17 = *(_QWORD *)(*((_QWORD *)v15 - 1) + 16);
      v34[0] = v10;
      v18 = *((_QWORD *)v10 + 3);
      v19 = v13 + 1;
      if (v13 >= v18 >> 1)
      {
        sub_24A80587C((char *)(v18 > 1), v13 + 1, 1);
        v10 = (char *)v34[0];
      }
      *((_QWORD *)v10 + 2) = v19;
      v20 = &v10[v14];
      *((_QWORD *)v20 + 4) = v17;
      *((_DWORD *)v20 + 10) = v16;
      v14 += 16;
      v15 += 24;
      v13 = v19;
      --v9;
    }
    while (v9);
    v6 = a5;
    v7 = v32;
    v5 = v31;
    v8 = v30;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v10 = OUTLINED_FUNCTION_79(0, *((_QWORD *)v10 + 2) + 1);
  v22 = *((_QWORD *)v10 + 2);
  v21 = *((_QWORD *)v10 + 3);
  if (v22 >= v21 >> 1)
    v10 = OUTLINED_FUNCTION_79((char *)(v21 > 1), v22 + 1);
  *((_QWORD *)v10 + 2) = v22 + 1;
  v23 = (uint64_t)&v10[16 * v22 + 32];
  *(_QWORD *)v23 = 0;
  *(_DWORD *)(v23 + 8) = 1;
  v34[0] = 0;
  v34[1] = 0;
  v24 = *(uint64_t **)(v5 + 16);
  if (!v24)
    __break(1u);
  if (v8 >= 5)
    v25 = 63;
  else
    v25 = 0;
  v26 = sub_24AA294BC();
  v27 = XOJIT_XOJIT_SymbolLookup(v24, (const std::exception_ptr *)v33, (_QWORD *)v10 + 4, (char *)(v26 + 32), v7, v25, (uint64_t)v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_20();
  if (v27)
  {
    type metadata accessor for XOJITError();
    v28 = OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_34(v28);
    OUTLINED_FUNCTION_1();
    *v29 = v28;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    *v6 = v34[0];
  }
  OUTLINED_FUNCTION_23();
}

void XOJIT.loadDylib(_:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t Dylib;
  uint64_t v7;
  uint64_t *v8;

  if (!*(_QWORD *)(v1 + 16))
    __break(1u);
  sub_24AA294BC();
  v3 = OUTLINED_FUNCTION_74();
  Dylib = XOJIT_XOJIT_LoadDylib(v3, v4, v5);
  OUTLINED_FUNCTION_9();
  if (Dylib)
  {
    type metadata accessor for XOJITError();
    v7 = OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_34(v7);
    OUTLINED_FUNCTION_1();
    *v8 = v7;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    *a1 = 0;
  }
  OUTLINED_FUNCTION_49();
}

uint64_t XOJIT.JITDylib.name.getter()
{
  uint64_t v0;

  XOJIT_JITDylib_GetName(*(_QWORD *)(*(_QWORD *)(v0 + 8) + 16));
  return sub_24AA294D4();
}

uint64_t XOJIT.JITDylib.executionSession.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t ExecutionSession;

  v2 = *v1;
  result = *(_QWORD *)(*v1 + 16);
  if (result)
  {
    ExecutionSession = XOJIT_XOJIT_GetExecutionSession();
    *a1 = v2;
    a1[1] = ExecutionSession;
    return OUTLINED_FUNCTION_26();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.JITDylib.addToLinkOrder(_:flags:)(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  return XOJIT_JITDylib_AddToLinkOrder(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 16), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16), *a2);
}

uint64_t sub_24A802BC4()
{
  return sub_24A8038FC((void (*)(_QWORD))XOJIT_JITDylib_Release);
}

void XOJIT.ObjectLinkingLayer.add(object:name:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  llvm::orc::JITDylib *v10;
  uint64_t v11;
  uint64_t v12;
  llvm::orc::JITDylib **v13;

  v8 = *(_QWORD *)(a5 + 8);
  v9 = *(_QWORD *)(v5 + 8);
  type metadata accessor for LLVMMemoryBuffer();
  swift_initStackObject();
  OUTLINED_FUNCTION_46();
  OUTLINED_FUNCTION_59(a1, a2);
  v10 = *(llvm::orc::JITDylib **)(v8 + 16);
  v11 = sub_24A807CC8();
  v12 = LLVMOrcObjectLayerAddObjectFile(v9, v10, v11);
  if (!v12)
    goto LABEL_4;
  if (LLVMGetErrorMessage(v12))
  {
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_42();
    sub_24A805CB8();
    OUTLINED_FUNCTION_1();
    *v13 = v10;
    v13[1] = (llvm::orc::JITDylib *)a2;
    OUTLINED_FUNCTION_3();
LABEL_4:
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_32();
    return;
  }
  __break(1u);
}

_BYTE *XOJIT.ObjectLinkingLayer.add(object:to:)(_BYTE *a1, uint64_t a2)
{
  return sub_24A802EC4(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))XOJIT_XOJIT_AddObjectFile);
}

uint64_t XOJIT.ObjectLinkingLayer.add(object:to:)(uint64_t a1, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_OWORD *)(v3 + 24) = *a2;
  *(_OWORD *)(v3 + 40) = *v2;
  return OUTLINED_FUNCTION_6();
}

uint64_t sub_24A802CDC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_38(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_24A802D28;
  v3 = OUTLINED_FUNCTION_43((uint64_t)sub_24A805CF4);
  return OUTLINED_FUNCTION_27(v3, v4);
}

uint64_t sub_24A802D28()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15();
  if (v0)
  {
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_5();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_8(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_24A802D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return OUTLINED_FUNCTION_6();
}

uint64_t sub_24A802D7C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_24A802E10;
  OUTLINED_FUNCTION_40();
  return sub_24AA2957C();
}

uint64_t sub_24A802E10()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 48) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  OUTLINED_FUNCTION_40();
  return OUTLINED_FUNCTION_5();
}

uint64_t sub_24A802E70()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_24A802E7C()
{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_7(*(uint64_t (**)(void))(v0 + 8));
}

_BYTE *XOJIT.ObjectLinkingLayer.linkArchive(archive:into:)(_BYTE *a1, uint64_t a2)
{
  return sub_24A802EC4(a1, a2, XOJIT_XOJIT_LinkStaticArchive);
}

_BYTE *sub_24A802EC4(_BYTE *result, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (!v4)
  {
    __break(1u);
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
  v7 = result;
  v8 = sub_24A801700();
  result = (_BYTE *)a3(v4, v6, v8);
  if (!result)
    return result;
  result = LLVMGetErrorMessage((uint64_t)result);
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_25();
  OUTLINED_FUNCTION_10();
  sub_24A805CB8();
  OUTLINED_FUNCTION_1();
  *v9 = v7;
  v9[1] = a3;
  return (_BYTE *)OUTLINED_FUNCTION_3();
}

uint64_t XOJIT.ObjectLinkingLayer.linkArchive(archive:into:)(uint64_t a1, _OWORD *a2)
{
  _OWORD *v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_OWORD *)(v3 + 24) = *a2;
  *(_OWORD *)(v3 + 40) = *v2;
  return OUTLINED_FUNCTION_6();
}

uint64_t sub_24A802F80()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OUTLINED_FUNCTION_75();
  OUTLINED_FUNCTION_38(v1);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_24A802FCC;
  v3 = OUTLINED_FUNCTION_43((uint64_t)sub_24A805D00);
  return OUTLINED_FUNCTION_27(v3, v4);
}

uint64_t sub_24A802FCC()
{
  uint64_t v0;
  uint64_t v1;

  OUTLINED_FUNCTION_15();
  if (v0)
  {
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_5();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_8(*(uint64_t (**)(void))(v1 + 8));
  }
}

uint64_t sub_24A803010()
{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_24A80303C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(a3 + 16);
  if (v8)
  {
    v10 = result;
    v11 = *(_QWORD *)(a6 + 16);
    v12 = sub_24A801700();
    return a8(v8, v11, v12, v10, a2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.JITTargetAddress.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t (*XOJIT.JITTargetAddress.rawValue.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.JITTargetAddress.init(rawValue:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t (*XOJIT.JITEvaluatedSymbol.address.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.ExecutorAddress.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t XOJIT.ExecutorAddress.rawValue.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*XOJIT.ExecutorAddress.rawValue.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

void XOJIT.ExecutorSymbolDef.address.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *XOJIT.ExecutorSymbolDef.address.setter(_QWORD *result)
{
  _QWORD *v1;

  *v1 = *result;
  return result;
}

uint64_t (*XOJIT.ExecutorSymbolDef.address.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

BOOL static XOJIT.LookupKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void XOJIT.LookupKind.hash(into:)()
{
  OUTLINED_FUNCTION_57();
  OUTLINED_FUNCTION_22();
}

void _s5XOJIT10XOJITErrorC4KindO9hashValueSivg_0()
{
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_14();
}

void sub_24A803198()
{
  OUTLINED_FUNCTION_64();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_14();
}

void XOJIT.ExecutionSession.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(uint64_t a1@<X0>, unsigned __int8 *a2@<X3>, unsigned __int8 *a3@<X4>, unsigned __int8 *a4@<X5>, _QWORD *a5@<X8>)
{
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  v5 = *a3;
  v6 = *a4;
  v9 = *a2;
  v8 = v5;
  v7 = v6;
  XOJIT.lookup(searchOrder:name:lookupFlags:lookupKind:requiredState:)(a1, &v9, &v8, &v7, a5);
}

uint64_t XOJIT.ExecutionSession.createJITDylib(name:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t JITDylib;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v4 = *v1;
  v3 = v1[1];
  v11[0] = 0;
  v5 = sub_24AA294BC();
  JITDylib = LLVMOrcExecutionSessionCreateJITDylib(v3, v11, (char *)(v5 + 32));
  result = OUTLINED_FUNCTION_20();
  if (JITDylib)
  {
    result = (uint64_t)LLVMGetErrorMessage(JITDylib);
    if (result)
    {
      OUTLINED_FUNCTION_25();
      OUTLINED_FUNCTION_10();
      sub_24A805CB8();
      OUTLINED_FUNCTION_1();
      *v8 = v3;
      v8[1] = v4;
      return OUTLINED_FUNCTION_3();
    }
    __break(1u);
  }
  else
  {
    v9 = v11[0];
    if (v11[0])
    {
      type metadata accessor for XOJIT.JITDylib.JITDylibRef();
      v10 = OUTLINED_FUNCTION_0();
      *(_QWORD *)(v10 + 16) = v9;
      *a1 = v4;
      a1[1] = v10;
      return OUTLINED_FUNCTION_45();
    }
  }
  __break(1u);
  return result;
}

uint64_t XOJIT.ExecutionSession.createBareJITDylib(name:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t BareJITDylib;
  uint64_t result;
  uint64_t v8;

  v4 = *v1;
  v3 = v1[1];
  v5 = sub_24AA294BC();
  BareJITDylib = LLVMOrcExecutionSessionCreateBareJITDylib(v3, (char *)(v5 + 32));
  result = OUTLINED_FUNCTION_20();
  if (BareJITDylib)
  {
    type metadata accessor for XOJIT.JITDylib.JITDylibRef();
    v8 = OUTLINED_FUNCTION_0();
    *(_QWORD *)(v8 + 16) = BareJITDylib;
    *a1 = v4;
    a1[1] = v8;
    return swift_retain();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void XOJIT.MachOHeaderOptions.Dylib.name.getter()
{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_22();
}

void XOJIT.MachOHeaderOptions.Dylib.name.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_56();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_21();
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.name.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.timestamp.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 16);
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.timestamp.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.timestamp.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.currentVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 20);
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.currentVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 20) = result;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.currentVersion.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.compatibilityVersion.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 24);
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.compatibilityVersion.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.Dylib.compatibilityVersion.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.Dylib.init(name:timestamp:currentVersion:compatibilityVersion:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  *(_QWORD *)a6 = result;
  *(_QWORD *)(a6 + 8) = a2;
  *(_DWORD *)(a6 + 16) = a3;
  *(_DWORD *)(a6 + 20) = a4;
  *(_DWORD *)(a6 + 24) = a5;
  return result;
}

uint64_t XOJIT.MachOHeaderOptions.idDylib.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;

  v2 = *(_DWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_DWORD *)(a1 + 24) = v2;
  return swift_bridgeObjectRetain();
}

__n128 XOJIT.MachOHeaderOptions.idDylib.setter(__n128 *a1)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int32 v3;
  __n128 result;
  __n128 v5;

  v5 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u32[2];
  swift_bridgeObjectRelease();
  result = v5;
  *v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u32[2] = v3;
  return result;
}

uint64_t (*XOJIT.MachOHeaderOptions.idDylib.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.loadDylibs.getter()
{
  return swift_bridgeObjectRetain();
}

void XOJIT.MachOHeaderOptions.loadDylibs.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 32) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*XOJIT.MachOHeaderOptions.loadDylibs.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.MachOHeaderOptions.rpaths.getter()
{
  return swift_bridgeObjectRetain();
}

void XOJIT.MachOHeaderOptions.rpaths.setter(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 40) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t (*XOJIT.MachOHeaderOptions.rpaths.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

__n128 XOJIT.MachOHeaderOptions.init(idDylib:loadDylibs:rpaths:)@<Q0>(__n128 *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, __n128 *a4@<X8>)
{
  unint64_t v4;
  unsigned __int32 v5;
  __n128 result;

  v4 = a1[1].n128_u64[0];
  v5 = a1[1].n128_u32[2];
  result = *a1;
  *a4 = *a1;
  a4[1].n128_u64[0] = v4;
  a4[1].n128_u32[2] = v5;
  a4[2].n128_u64[0] = a2;
  a4[2].n128_u64[1] = a3;
  return result;
}

uint64_t sub_24A803544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_DWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  XOJIT_MachOHeaderOptions_Create();
  *(_QWORD *)(v1 + 16) = v8;
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    OUTLINED_FUNCTION_39();
    sub_24A8036C8(v3, v2, v1, v3, v2, v4, v5, (uint64_t (*)(void))sub_24A80750C, (void (*)(uint64_t, _QWORD *))XOJIT_MachOHeaderOptions_SetIDDylib);
    OUTLINED_FUNCTION_68();
  }
  v9 = *(_QWORD *)(v6 + 16);
  if (v9)
  {
    v20 = v7;
    swift_bridgeObjectRetain();
    v10 = (int *)(v6 + 56);
    do
    {
      v11 = *((_QWORD *)v10 - 3);
      v12 = *((_QWORD *)v10 - 2);
      v13 = *((_QWORD *)v10 - 1);
      v14 = *v10;
      v10 += 8;
      swift_bridgeObjectRetain_n();
      OUTLINED_FUNCTION_39();
      sub_24A8036C8(v11, v12, v1, v11, v12, v13, v14, (uint64_t (*)(void))sub_24A807574, (void (*)(uint64_t, _QWORD *))XOJIT_MachOHeaderOptions_AddLoadDylib);
      swift_bridgeObjectRelease();
      --v9;
    }
    while (v9);
    OUTLINED_FUNCTION_70();
    v7 = v20;
  }
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_68();
  v15 = *(_QWORD *)(v7 + 16);
  if (v15)
  {
    v16 = (uint64_t *)(v7 + 40);
    do
    {
      v17 = *(v16 - 1);
      v18 = *v16;
      OUTLINED_FUNCTION_39();
      swift_bridgeObjectRetain();
      sub_24A8037FC(v17, v18, v1);
      OUTLINED_FUNCTION_70();
      v16 += 2;
      --v15;
    }
    while (v15);
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_24A8036C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t (*a8)(void), void (*a9)(uint64_t, _QWORD *))
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];
  int v18;
  _QWORD v19[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_24AA29540();
    if (v9)
    {
LABEL_7:
      OUTLINED_FUNCTION_29();
      return OUTLINED_FUNCTION_44();
    }
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v13 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v14 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v13 = sub_24AA2954C();
    }
    sub_24A807528(v13, v14, a8);
    if (v9)
      goto LABEL_7;
LABEL_10:
    OUTLINED_FUNCTION_44();
    return OUTLINED_FUNCTION_29();
  }
  v19[0] = a1;
  v19[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  v16 = *(_QWORD *)(a3 + 16);
  v17[0] = v19;
  v17[1] = a6;
  v18 = a7;
  a9(v16, v17);
  OUTLINED_FUNCTION_44();
  return OUTLINED_FUNCTION_29();
}

uint64_t sub_24A8037FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[2];

  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    sub_24AA29540();
    return swift_release();
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      v6 = a1 & 0xFFFFFFFFFFFFLL;
    }
    else
    {
      v5 = sub_24AA2954C();
    }
    sub_24A807528(v5, v6, (uint64_t (*)(void))sub_24A807548);
    return swift_release();
  }
  v8[0] = a1;
  v8[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  XOJIT_MachOHeaderOptions_AddRPath(*(_QWORD *)(a3 + 16), (char *)v8);
  return swift_release();
}

uint64_t sub_24A8038F0()
{
  return sub_24A8038FC((void (*)(_QWORD))XOJIT_MachOHeaderOptions_Destroy);
}

uint64_t sub_24A8038FC(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  OUTLINED_FUNCTION_16();
  return swift_deallocClassInstance();
}

void XOJIT.createJITDylib(name:options:)(uint64_t *a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t JITDylib;
  uint64_t *v19;
  llvm::orc::JITDylib *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  llvm::orc::JITDylib *v27[2];

  v3 = v2;
  v27[1] = *(llvm::orc::JITDylib **)MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *(_OWORD *)(a1 + 1);
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v27[0] = 0;
  if (!v8)
  {
    v15 = *(_QWORD *)(v2 + 16);
    if (v15)
    {
      v16 = 0;
      goto LABEL_9;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v22 = v5;
  v23 = v6;
  v24 = v7;
  v25 = v8;
  v26 = v9;
  type metadata accessor for XOJIT.MachOHeaderOptions.COptions();
  v10 = OUTLINED_FUNCTION_0();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24A803544((uint64_t)&v22);
  v11 = *(_QWORD *)(v3 + 16);
  if (!v11)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = XOJIT_MachOHeaderOptions_AddBuildVersionsForExecutor(*(_QWORD **)(v10 + 16), v11, 0);
  if (v12)
  {
    v13 = v12;
    type metadata accessor for XOJITError();
    v14 = OUTLINED_FUNCTION_0();
    *(_QWORD *)(v14 + 16) = v13;
LABEL_11:
    sub_24A801634();
    OUTLINED_FUNCTION_1();
    *v19 = v14;
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_9();
    return;
  }
  v15 = *(_QWORD *)(v3 + 16);
  if (!v15)
    goto LABEL_15;
  v16 = *(_QWORD *)(v10 + 16);
LABEL_9:
  v17 = sub_24AA294BC();
  JITDylib = XOJIT_XOJIT_CreateJITDylib(v15, (char *)(v17 + 32), v16, v27);
  OUTLINED_FUNCTION_20();
  if (JITDylib)
  {
    type metadata accessor for XOJITError();
    v14 = OUTLINED_FUNCTION_0();
    *(_QWORD *)(v14 + 16) = JITDylib;
    goto LABEL_11;
  }
  v20 = v27[0];
  if (v27[0])
  {
    OUTLINED_FUNCTION_9();
    type metadata accessor for XOJIT.JITDylib.JITDylibRef();
    v21 = OUTLINED_FUNCTION_0();
    *(_QWORD *)(v21 + 16) = v20;
    *a2 = v3;
    a2[1] = v21;
    OUTLINED_FUNCTION_45();
    return;
  }
LABEL_16:
  __break(1u);
}

void XOJIT.createJITDylib(name:)(_QWORD *a1@<X8>)
{
  _OWORD v1[3];

  memset(v1, 0, sizeof(v1));
  XOJIT.createJITDylib(name:options:)((uint64_t *)v1, a1);
}

uint64_t XOJIT.createBareJITDylib(name:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t BareJITDylib;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_24AA294BC();
  BareJITDylib = LLVMOrcExecutionSessionCreateBareJITDylib(v3, (char *)(v4 + 32));
  result = swift_release();
  if (BareJITDylib)
  {
    type metadata accessor for XOJIT.JITDylib.JITDylibRef();
    v7 = OUTLINED_FUNCTION_0();
    *(_QWORD *)(v7 + 16) = BareJITDylib;
    *a1 = v1;
    a1[1] = v7;
    return OUTLINED_FUNCTION_39();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.setLoadableAtPathViaRegex(jd:regex:replacement:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  size_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16);
    v4 = (char *)(sub_24AA294BC() + 32);
    v5 = OUTLINED_FUNCTION_69();
    v6 = XOJIT_XOJIT_SetLoadableAtPathViaRegex(v2, v3, v4, (const char *)(v5 + 32));
    OUTLINED_FUNCTION_20();
    result = OUTLINED_FUNCTION_44();
    if (v6)
    {
      type metadata accessor for XOJITError();
      v7 = OUTLINED_FUNCTION_0();
      OUTLINED_FUNCTION_35(v7);
      OUTLINED_FUNCTION_1();
      *v8 = v5;
      return OUTLINED_FUNCTION_3();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void XOJIT.ReplacementManager.__allocating_init(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_13();
  XOJIT.ReplacementManager.init(_:)(a1);
  OUTLINED_FUNCTION_22();
}

void XOJIT.ReplacementManager.init(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  xojit::ReplacementManager *ReplacementManager;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    ReplacementManager = XOJIT_CreateReplacementManager(v3);
    *(_QWORD *)(v1 + 16) = a1;
    *(_QWORD *)(v1 + 24) = ReplacementManager;
    OUTLINED_FUNCTION_22();
  }
  else
  {
    __break(1u);
  }
}

uint64_t XOJIT.ReplacementManager.deinit()
{
  uint64_t v0;

  XOJIT_DisposeReplacementManager(*(xojit::ReplacementManager **)(v0 + 24));
  OUTLINED_FUNCTION_76();
  return v0;
}

uint64_t XOJIT.ReplacementManager.__deallocating_deinit()
{
  XOJIT.ReplacementManager.deinit();
  OUTLINED_FUNCTION_28();
  return swift_deallocClassInstance();
}

void XOJIT.ReplacementManager.addWithReplacement(object:name:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v8 = *(_QWORD *)(a5 + 8);
  type metadata accessor for LLVMMemoryBuffer();
  swift_initStackObject();
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_59(a1, a2);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v8 + 16);
  v11 = sub_24A807CC8();
  v12 = OUTLINED_FUNCTION_58(v11);
  if (!v12)
    goto LABEL_4;
  if (LLVMGetErrorMessage(v12))
  {
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_42();
    sub_24A805CB8();
    OUTLINED_FUNCTION_1();
    *v13 = v9;
    v13[1] = v10;
    OUTLINED_FUNCTION_3();
LABEL_4:
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_32();
    return;
  }
  __break(1u);
}

uint64_t XOJIT.ReplacementManager.addWithReplacement(object:to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;

  v2 = *(_QWORD *)(v1 + 24);
  v4 = sub_24A801700();
  result = OUTLINED_FUNCTION_58(v4);
  if (result)
  {
    result = (uint64_t)LLVMGetErrorMessage(result);
    if (result)
    {
      OUTLINED_FUNCTION_25();
      OUTLINED_FUNCTION_10();
      sub_24A805CB8();
      OUTLINED_FUNCTION_1();
      *v6 = a1;
      v6[1] = v2;
      return OUTLINED_FUNCTION_3();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t XOJIT.ReplacementManager.addWithReplacement(object:to:)(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = v2;
  *(_OWORD *)(v3 + 32) = *a2;
  return OUTLINED_FUNCTION_6();
}

uint64_t sub_24A803E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v4;
  *v4 = v0;
  v4[1] = sub_24A803EA0;
  v5 = OUTLINED_FUNCTION_43((uint64_t)sub_24A805D50);
  return sub_24A802D6C(v5, v6);
}

uint64_t sub_24A803EA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    OUTLINED_FUNCTION_40();
    return OUTLINED_FUNCTION_5();
  }
  else
  {
    swift_task_dealloc();
    return OUTLINED_FUNCTION_8(*(uint64_t (**)(void))(v2 + 8));
  }
}

uint64_t sub_24A803F00()
{
  uint64_t v0;

  swift_task_dealloc();
  return OUTLINED_FUNCTION_7(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_24A803F2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a3 + 24);
  v8 = *(_QWORD *)(a5 + 16);
  v9 = sub_24A801700();
  return XOJIT_ReplacementManager_AddObjectFileAsync(v7, v8, v9, a1, a2);
}

void XOJIT.ReplacementManager.applyPendingUpdates(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = XOJIT_ReplacementManager_ApplyPendingUpdates(*(xojit::ReplacementManager **)(v1 + 24), *(void ***)(*(_QWORD *)(a1 + 8) + 16));
  if (!v3)
    goto LABEL_4;
  if (LLVMGetErrorMessage(v3))
  {
    OUTLINED_FUNCTION_25();
    OUTLINED_FUNCTION_10();
    sub_24A805CB8();
    OUTLINED_FUNCTION_1();
    *v4 = v1;
    v4[1] = v2;
    OUTLINED_FUNCTION_3();
LABEL_4:
    OUTLINED_FUNCTION_37();
    return;
  }
  __break(1u);
}

void XOJIT.ORCRuntimeBridge.__allocating_init(_:)(uint64_t a1)
{
  OUTLINED_FUNCTION_16();
  *(_QWORD *)(swift_allocObject() + 16) = a1;
  OUTLINED_FUNCTION_22();
}

uint64_t XOJIT.ORCRuntimeBridge.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void XOJIT.ORCRuntimeBridge.jit_dlopen(name:)(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t *v3;
  const char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  if (!*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    __break(1u);
  sub_24AA294BC();
  v3 = (uint64_t *)OUTLINED_FUNCTION_74();
  v6 = XOJIT_OrcRTJITDlopen(v3, v4, v5);
  OUTLINED_FUNCTION_9();
  if (v6)
  {
    type metadata accessor for XOJITError();
    v7 = OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_34(v7);
    OUTLINED_FUNCTION_1();
    *v8 = v7;
    OUTLINED_FUNCTION_3();
  }
  else
  {
    *a1 = 0;
  }
  OUTLINED_FUNCTION_49();
}

uint64_t XOJIT.ORCRuntimeBridge.deinit()
{
  uint64_t v0;

  OUTLINED_FUNCTION_76();
  return v0;
}

uint64_t XOJIT.ORCRuntimeBridge.__deallocating_deinit()
{
  OUTLINED_FUNCTION_76();
  OUTLINED_FUNCTION_16();
  return swift_deallocClassInstance();
}

uint64_t XOJIT.UVSymbolString.description.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD aBlock[7];

  aBlock[6] = *MEMORY[0x24BDAC8D0];
  v1 = *v0;
  v2 = OUTLINED_FUNCTION_13();
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  v7 = v1;
  v3 = OUTLINED_FUNCTION_13();
  *(_QWORD *)(v3 + 16) = sub_24A805D78;
  *(_QWORD *)(v3 + 24) = v2;
  aBlock[4] = sub_24A805D80;
  aBlock[5] = v3;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24A804444;
  aBlock[3] = &block_descriptor;
  v4 = _Block_copy(aBlock);
  OUTLINED_FUNCTION_53();
  swift_release();
  XOJIT_SymbolString_WithStringRepresentationsDo((uint64_t)&v7, 1, (uint64_t)v4);
  _Block_release(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_60();
  if (!*(_QWORD *)(v2 + 24))
    __break(1u);
  v5 = *(_QWORD *)(v2 + 16);
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_62();
  return v5;
}

uint64_t sub_24A804230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  v3 = (uint64_t *)(a3 + 16);
  if (!a1)
    a2 = 0;
  return sub_24A804264(a1, a2, v3);
}

uint64_t sub_24A804264(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_24AA294B0();
  MEMORY[0x24BDAC7A8](v4, v5);
  sub_24AA294A4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6A0);
  sub_24A8074D0(&qword_25795C6A8, &qword_25795C6A0, MEMORY[0x24BEE09D8]);
  result = sub_24AA29498();
  if (v7)
  {
    v8 = result;
    v9 = v7;
    swift_beginAccess();
    *a3 = v8;
    a3[1] = v9;
    return swift_bridgeObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void XOJIT.UVSymbolString.withStringRepresentationDo(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v8[0] = *v2;
  v5 = OUTLINED_FUNCTION_13();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v7[4] = sub_24A805D80;
  v7[5] = v5;
  v7[0] = MEMORY[0x24BDAC760];
  v7[1] = 1107296256;
  v7[2] = sub_24A804444;
  v7[3] = &block_descriptor_17;
  v6 = _Block_copy(v7);
  OUTLINED_FUNCTION_33();
  OUTLINED_FUNCTION_73();
  XOJIT_SymbolString_WithStringRepresentationsDo((uint64_t)v8, 1, (uint64_t)v6);
  _Block_release(v6);
}

Swift::Void __swiftcall XOJIT.UVSymbolString.retain()()
{
  uint64_t *v0;

  XOJIT_SymbolString_Retain(*v0);
}

Swift::Void __swiftcall XOJIT.UVSymbolString.release()()
{
  uint64_t *v0;

  XOJIT_SymbolString_Release(*v0);
}

uint64_t sub_24A804444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);
  return swift_release();
}

void XOJIT.UVSymbolString.hash(into:)()
{
  sub_24AA295C4();
  OUTLINED_FUNCTION_22();
}

BOOL static XOJIT.UVSymbolString.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void XOJIT.UVSymbolString.hashValue.getter()
{
  OUTLINED_FUNCTION_18();
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_14();
}

uint64_t sub_24A804504()
{
  sub_24AA295B8();
  sub_24AA295C4();
  return sub_24AA295DC();
}

void XOJIT.intern(_:)(unint64_t **a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t *v5;

  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = sub_24AA294BC();
    v5 = XOJIT_XOJIT_Intern(v2, (char *)(v4 + 32));
    OUTLINED_FUNCTION_73();
    *a1 = v5;
    OUTLINED_FUNCTION_21();
  }
  else
  {
    __break(1u);
  }
}

void XOJIT.SymbolTableStream.Record.name.getter()
{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_22();
}

void XOJIT.SymbolTableStream.Record.name.setter()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  OUTLINED_FUNCTION_56();
  *v1 = v2;
  v1[1] = v0;
  OUTLINED_FUNCTION_21();
}

uint64_t (*XOJIT.SymbolTableStream.Record.name.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

uint64_t XOJIT.SymbolTableStream.Record.address.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t XOJIT.SymbolTableStream.Record.address.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = result;
  return result;
}

uint64_t (*XOJIT.SymbolTableStream.Record.address.modify())()
{
  return XOJIT_XOJIT_GetExecutionSession;
}

void XOJIT.SymbolTableStream.Record.hash(into:)()
{
  OUTLINED_FUNCTION_46();
  sub_24AA294C8();
  OUTLINED_FUNCTION_68();
  sub_24AA295D0();
  OUTLINED_FUNCTION_21();
}

BOOL static XOJIT.SymbolTableStream.Record.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _BOOL8 result;

  v2 = a1[2];
  v3 = a2[2];
  if (*a1 == *a2 && a1[1] == a2[1])
    return v2 == v3;
  v5 = sub_24AA29570();
  result = 0;
  if ((v5 & 1) != 0)
    return v2 == v3;
  return result;
}

uint64_t XOJIT.SymbolTableStream.Record.hashValue.getter()
{
  OUTLINED_FUNCTION_18();
  swift_bridgeObjectRetain();
  sub_24AA294C8();
  swift_bridgeObjectRelease();
  sub_24AA295D0();
  return OUTLINED_FUNCTION_24();
}

uint64_t sub_24A804710()
{
  sub_24AA295B8();
  swift_bridgeObjectRetain();
  sub_24AA294C8();
  swift_bridgeObjectRelease();
  sub_24AA295D0();
  return sub_24AA295DC();
}

uint64_t sub_24A804780@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6B0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3, v5);
  OUTLINED_FUNCTION_54();
  v8 = v7 - v6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  OUTLINED_FUNCTION_55();
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12, v14);
  OUTLINED_FUNCTION_54();
  v17 = v16 - v15;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v8, *MEMORY[0x24BEE6A10], v3);
  sub_24AA294F8();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(a1, v17, v12);
  v18 = type metadata accessor for XOJIT.SymbolTableStream(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1 + *(int *)(v18 + 20), v1, v9);
}

uint64_t XOJIT.SymbolTableStream.makeAsyncIterator()()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  return sub_24AA2951C();
}

uint64_t sub_24A8048FC()
{
  uint64_t v0;

  XOJIT.SymbolTableStream.makeAsyncIterator()();
  return sub_24A807458(v0);
}

uint64_t XOJIT.listenToSymbolTableStream()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD *v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  OUTLINED_FUNCTION_55();
  sub_24A804780(a1);
  v7 = type metadata accessor for XOJIT.SymbolTableStream(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, a1 + *(int *)(v7 + 20), v4);
  type metadata accessor for XOJIT.Context(0);
  v8 = swift_allocObject();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8+ OBJC_IVAR____TtCFC5XOJIT5XOJIT25listenToSymbolTableStreamFT_VS0_17SymbolTableStreamL_7Context_continuation, v2, v4);
  v10 = *(_QWORD *)(v1 + 16);
  if (v10)
  {
    OUTLINED_FUNCTION_33();
    XOJIT_XOJIT_GetObjectLinkingLayer(v10);
    v11 = XOJIT_SymbolTableCallbackPlugin_Create((uint64_t)sub_24A804D00, (uint64_t)sub_24A804D48, v8);
    OUTLINED_FUNCTION_63((uint64_t)v11);
    return OUTLINED_FUNCTION_62();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A804A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[6];
  _QWORD v11[2];

  v11[1] = *MEMORY[0x24BDAC8D0];
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a3;
  v11[0] = a2;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = sub_24A8074A4;
  *(_QWORD *)(v7 + 24) = v6;
  v10[4] = sub_24A805D80;
  v10[5] = v7;
  v10[0] = MEMORY[0x24BDAC760];
  v10[1] = 1107296256;
  v10[2] = sub_24A804444;
  v10[3] = &block_descriptor_27;
  v8 = _Block_copy(v10);
  swift_retain();
  swift_release();
  XOJIT_SymbolString_WithStringRepresentationsDo((uint64_t)v11, 1, (uint64_t)v8);
  _Block_release(v8);
  return swift_release();
}

uint64_t sub_24A804B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1)
    a2 = 0;
  return sub_24A804B50(a1, a2, a3, a4);
}

uint64_t sub_24A804B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795C698);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9, v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_24AA294B0();
  MEMORY[0x24BDAC7A8](v14, v15);
  v22 = a1;
  v23 = a2;
  sub_24AA294A4();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6A0);
  sub_24A8074D0(&qword_25795C6A8, &qword_25795C6A0, MEMORY[0x24BEE09D8]);
  result = sub_24AA29498();
  if (v17)
  {
    v25 = v4;
    if (a3)
    {
      v18 = result;
      v19 = v17;
      swift_retain();
      v22 = v18;
      v23 = v19;
      v24 = a4;
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
      sub_24AA29504();
      v20 = *(void (**)(char *, uint64_t))(v10 + 8);
      v20(v13, v9);
      v22 = v18;
      v23 = v19;
      v24 = a4;
      sub_24AA29504();
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v20)(v13, v9);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_24A804D04(uint64_t result)
{
  if (result)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
    sub_24AA29510();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t XOJIT.addSymbolTableCallback(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  _s5XOJIT5XOJITC7ContextCMa_0();
  result = OUTLINED_FUNCTION_13();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  v6 = *(_QWORD *)(v2 + 16);
  if (v6)
  {
    v7 = result;
    OUTLINED_FUNCTION_45();
    OUTLINED_FUNCTION_33();
    XOJIT_XOJIT_GetObjectLinkingLayer(v6);
    v8 = XOJIT_SymbolTableCallbackPlugin_Create((uint64_t)sub_24A804E28, (uint64_t)sub_24A804E38, v7);
    OUTLINED_FUNCTION_63((uint64_t)v8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A804DC8(uint64_t result, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t *, uint64_t);
  uint64_t v6;

  if (result)
  {
    v5 = *(void (**)(uint64_t *, uint64_t))(result + 16);
    swift_retain();
    v6 = a2;
    v5(&v6, a3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A804E2C(uint64_t result)
{
  if (result)
    return swift_release();
  __break(1u);
  return result;
}

uint64_t sub_24A804E40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t inited;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v16;

  v16 = sub_24AA29468();
  v0 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16, v1);
  OUTLINED_FUNCTION_54();
  v4 = v3 - v2;
  v5 = (void *)objc_opt_self();
  v6 = objc_msgSend(v5, sel_standardUserDefaults);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF28);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24AA2A2C0;
  *(_QWORD *)(inited + 32) = 0xD00000000000001BLL;
  *(_QWORD *)(inited + 40) = 0x800000024AA4AC00;
  *(_QWORD *)(inited + 72) = MEMORY[0x24BEE1768];
  *(_QWORD *)(inited + 48) = 0;
  sub_24AA29480();
  v8 = (void *)sub_24AA29474();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_registerDefaults_, v8);

  v9 = objc_msgSend(v5, sel_standardUserDefaults);
  v10 = (void *)sub_24AA2948C();
  v11 = (uint64_t)objc_msgSend(v9, sel_integerForKey_, v10);

  if (v11 <= 0)
  {
    v11 = sysconf(58);
    if (v11 < 0)
    {
      sub_24AA2945C();
      v12 = sub_24AA29450();
      v13 = sub_24AA29528();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v14 = 134217984;
        sub_24AA29534();
        _os_log_impl(&dword_24A800000, v12, v13, "failed to determine cpu count; limiting to %ld threads", v14, 0xCu);
        MEMORY[0x24BD1BA40](v14, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t))(v0 + 8))(v4, v16);
      return 8;
    }
  }
  return v11;
}

uint64_t sub_24A8050D8()
{
  uint64_t v0;

  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 80) - 8) + 8))(v0 + *(_QWORD *)(*(_QWORD *)v0 + 88));
  return v0;
}

uint64_t sub_24A805104()
{
  sub_24A8050D8();
  return swift_deallocClassInstance();
}

uint64_t sub_24A805128(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t (*)()))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6B8);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6C0);
  v9 = swift_allocObject();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + *(_QWORD *)(*(_QWORD *)v9 + 88), v8, v4);
  return a2(v9, sub_24A8052E0);
}

uint64_t sub_24A8051F8(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;

  if (result)
  {
    if (a2)
    {
      type metadata accessor for XOJITError();
      v3 = swift_allocObject();
      *(_QWORD *)(v3 + 16) = a2;
      sub_24A801634();
      swift_allocError();
      *v4 = v3;
      __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6B8);
      sub_24AA294E0();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6B8);
      sub_24AA294EC();
    }
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24A8052E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCFC5XOJIT5XOJIT25listenToSymbolTableStreamFT_VS0_17SymbolTableStreamL_7Context_continuation;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_24A805338()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_24A80535C(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_24A80536C(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

uint64_t type metadata accessor for XOJIT.JITDylib.JITDylibRef()
{
  return objc_opt_self();
}

uint64_t sub_24A80539C()
{
  __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6D0);
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

char *sub_24A8053EC(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  if ((v5 & 1) != 0)
  {
    sub_24A80564C((char *)(a4 + 32), v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24A8054D8(0, v8, v12, a4);
  }
  return v10;
}

char *sub_24A8054D8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = &__dst[16 * v4];
    if (v5 >= v6 || &v5[16 * v4] <= __dst)
    {
      memcpy(__dst, v5, 16 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  result = (char *)sub_24AA29564();
  __break(1u);
  return result;
}

char *sub_24A8055C8(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_24AA29564();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

char *sub_24A80564C(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)sub_24AA29564();
    __break(1u);
  }
  else if (__dst != __src || &__src[16 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

void *sub_24A8056D0(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if ((a2 & 0x8000000000000000) == 0 && (&__dst[8 * a2] <= __src || &__src[8 * a2] <= __dst))
    return memcpy(__dst, __src, 8 * a2);
  result = (void *)sub_24AA29564();
  __break(1u);
  return result;
}

void *sub_24A805798(char *__src, uint64_t a2, char *__dst)
{
  void *result;

  if ((a2 & 0x8000000000000000) == 0 && (&__dst[16 * a2] <= __src || &__src[16 * a2] <= __dst))
    return memcpy(__dst, __src, 16 * a2);
  result = (void *)sub_24AA29564();
  __break(1u);
  return result;
}

char *sub_24A805860(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_24A805898(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_24A80587C(char *a1, int64_t a2, char a3)
{
  uint64_t *v3;
  char *result;

  result = sub_24A805978(a1, a2, a3, *v3);
  *v3 = (uint64_t)result;
  return result;
}

char *sub_24A805898(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6E0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_24A8055C8(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A8056D0(v13, v8, v12);
  }
  swift_release();
  return v10;
}

char *sub_24A805978(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25795C6C8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_24A80564C(v13, v8, v12);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_24A805798(v13, v8, v12);
  }
  swift_release();
  return v10;
}

uint64_t sub_24A805A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_24AA2942C();
  v10 = result;
  if (result)
  {
    result = sub_24AA29444();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v10 += a1 - result;
  }
  v11 = __OFSUB__(a2, a1);
  v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }
  v13 = sub_24AA29438();
  if (v13 >= v12)
    v14 = v12;
  else
    v14 = v13;
  v15 = v10 + v14;
  if (v10)
    v16 = v15;
  else
    v16 = 0;
  sub_24A802684(v10, v16, a4, a5);
  return swift_release();
}

uint64_t sub_24A805B10(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t sub_24A805B54(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_24A805B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = a1;
  v7 = a2;
  v8 = BYTE2(a2);
  v9 = BYTE3(a2);
  v10 = BYTE4(a2);
  v11 = BYTE5(a2);
  sub_24A802684((uint64_t)&v6, (uint64_t)&v6 + a3, a4, a5);
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD1B98C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_24A805CB8()
{
  unint64_t result;

  result = qword_25795BEE8;
  if (!qword_25795BEE8)
  {
    result = MEMORY[0x24BD1B9A4](&unk_24AA2AB8C, &type metadata for LLVMError);
    atomic_store(result, (unint64_t *)&qword_25795BEE8);
  }
  return result;
}

uint64_t sub_24A805CF4(uint64_t a1, uint64_t a2)
{
  return sub_24A805D0C(a1, a2, XOJIT_XOJIT_AddObjectFileAsync);
}

uint64_t sub_24A805D00(uint64_t a1, uint64_t a2)
{
  return sub_24A805D0C(a1, a2, XOJIT_XOJIT_LinkStaticArchiveAsync);
}

uint64_t sub_24A805D0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v3;

  return sub_24A80303C(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], a3);
}

uint64_t type metadata accessor for XOJIT.MachOHeaderOptions.COptions()
{
  return objc_opt_self();
}

uint64_t sub_24A805D50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_24A803F2C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_24A805D5C()
{
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t sub_24A805D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24A804230(a1, a2, v2);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_24A805D9C()
{
  swift_release();
  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t type metadata accessor for XOJIT.SymbolTableStream(uint64_t a1)
{
  return sub_24A805DE0(a1, (uint64_t *)&unk_25795C480);
}

uint64_t type metadata accessor for XOJIT.Context(uint64_t a1)
{
  return sub_24A805DE0(a1, qword_25795C570);
}

uint64_t sub_24A805DE0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t _s5XOJIT5XOJITC7ContextCMa_0()
{
  return objc_opt_self();
}

unint64_t sub_24A805E34()
{
  unint64_t result;

  result = qword_25795BF30;
  if (!qword_25795BF30)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJITError.Kind, &type metadata for XOJITError.Kind);
    atomic_store(result, (unint64_t *)&qword_25795BF30);
  }
  return result;
}

unint64_t sub_24A805E74()
{
  unint64_t result;

  result = qword_25795BF38;
  if (!qword_25795BF38)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJIT.JITDylibLookupFlags, &type metadata for XOJIT.JITDylibLookupFlags);
    atomic_store(result, (unint64_t *)&qword_25795BF38);
  }
  return result;
}

unint64_t sub_24A805EB4()
{
  unint64_t result;

  result = qword_25795BF40;
  if (!qword_25795BF40)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJIT.SymbolLookupFlags, &type metadata for XOJIT.SymbolLookupFlags);
    atomic_store(result, (unint64_t *)&qword_25795BF40);
  }
  return result;
}

unint64_t sub_24A805EF4()
{
  unint64_t result;

  result = qword_25795BF48;
  if (!qword_25795BF48)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJIT.LookupKind, &type metadata for XOJIT.LookupKind);
    atomic_store(result, (unint64_t *)&qword_25795BF48);
  }
  return result;
}

unint64_t sub_24A805F34()
{
  unint64_t result;

  result = qword_25795BF50;
  if (!qword_25795BF50)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJIT.SymbolState, &type metadata for XOJIT.SymbolState);
    atomic_store(result, (unint64_t *)&qword_25795BF50);
  }
  return result;
}

unint64_t sub_24A805F74()
{
  unint64_t result;

  result = qword_25795BF58;
  if (!qword_25795BF58)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJIT.UVSymbolString, &type metadata for XOJIT.UVSymbolString);
    atomic_store(result, (unint64_t *)&qword_25795BF58);
  }
  return result;
}

unint64_t sub_24A805FB4()
{
  unint64_t result;

  result = qword_25795BF60;
  if (!qword_25795BF60)
  {
    result = MEMORY[0x24BD1B9A4](&protocol conformance descriptor for XOJIT.SymbolTableStream.Record, &type metadata for XOJIT.SymbolTableStream.Record);
    atomic_store(result, (unint64_t *)&qword_25795BF60);
  }
  return result;
}

void sub_24A805FF0()
{
  sub_24A8074D0(&qword_25795BF68, &qword_25795BF70, MEMORY[0x24BEE6A88]);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD1B998](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t method lookup function for XOJITError()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XOJITError.kind.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for XOJITError.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 2) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v5 = v6 - 3;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJITError.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_24A80615C + 4 * byte_24AA2A2E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_24A806190 + 4 * byte_24AA2A2E0[v4]))();
}

uint64_t sub_24A806190(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A806198(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A8061A0);
  return result;
}

uint64_t sub_24A8061AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A8061B4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_24A8061B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A8061C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A8061CC(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_24A8061D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void type metadata accessor for XOJITError.Kind()
{
  OUTLINED_FUNCTION_4();
}

uint64_t type metadata accessor for MemoryBuffer()
{
  return objc_opt_self();
}

uint64_t method lookup function for MemoryBuffer()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MemoryBuffer.__allocating_init(identifier:fromFile:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t type metadata accessor for XOJIT()
{
  return objc_opt_self();
}

uint64_t method lookup function for XOJIT()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of XOJIT.__allocating_init(fromXPCConnection:oopJITLinkageType:opaqueOwner:reportError:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of XOJIT.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of XOJIT.__allocating_init(reportError:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

void type metadata accessor for XOJIT.DylibHandle()
{
  OUTLINED_FUNCTION_4();
}

uint64_t destroy for XOJIT.JITDylib()
{
  swift_release();
  return swift_release();
}

void _s5XOJIT5XOJITC8JITDylibVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_retain();
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_22();
}

_QWORD *assignWithCopy for XOJIT.JITDylib(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_OWORD *assignWithTake for XOJIT.JITDylib(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  swift_release();
  return a1;
}

void type metadata accessor for XOJIT.JITDylib()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.ObjectLinkingLayer()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.JITTargetAddress()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.JITEvaluatedSymbol()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.ExecutorAddress()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.ExecutorSymbolDef()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.JITDylibLookupFlags()
{
  OUTLINED_FUNCTION_4();
}

void type metadata accessor for XOJIT.SymbolLookupFlags()
{
  OUTLINED_FUNCTION_4();
}

uint64_t _s5XOJIT5XOJITC19JITDylibLookupFlagsOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 1) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v5 = v6 - 2;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t _s5XOJIT5XOJITC19JITDylibLookupFlagsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_24A806508 + 4 * byte_24AA2A2EF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_24A80653C + 4 * byte_24AA2A2EA[v4]))();
}

uint64_t sub_24A80653C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A806544(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A80654CLL);
  return result;
}

uint64_t sub_24A806558(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A806560);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_24A806564(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A80656C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_24A806578(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void type metadata accessor for XOJIT.LookupKind()
{
  OUTLINED_FUNCTION_4();
}

uint64_t getEnumTagSinglePayload for XOJIT.SymbolState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  BOOL v7;

  if (!a2)
  {
    v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFB)
  {
    if (a2 + 5 >= 0xFFFF00)
      v2 = 4;
    else
      v2 = 2;
    if ((a2 + 5) >> 8 < 0xFF)
      v3 = 1;
    else
      v3 = v2;
    if (v3 == 4)
    {
      v4 = *(_DWORD *)(a1 + 1);
      if (!v4)
        goto LABEL_17;
    }
    else if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
    }
    else
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
    }
    v5 = (*a1 | (v4 << 8)) - 6;
    return (v5 + 1);
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v5 = v6 - 6;
  if (!v7)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.SymbolState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_24A806664 + 4 * byte_24AA2A2F9[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_24A806698 + 4 * byte_24AA2A2F4[v4]))();
}

uint64_t sub_24A806698(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A8066A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A8066A8);
  return result;
}

uint64_t sub_24A8066B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A8066BCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_24A8066C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A8066C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for XOJIT.SymbolState()
{
  OUTLINED_FUNCTION_4();
}

_QWORD *initializeBufferWithCopyOfBuffer for XOJIT.ExecutionSession(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for XOJIT.ExecutionSession()
{
  return swift_release();
}

_QWORD *_s5XOJIT5XOJITC18ObjectLinkingLayerVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_retain();
  OUTLINED_FUNCTION_73();
  a1[1] = a2[1];
  return a1;
}

_OWORD *assignWithTake for XOJIT.ExecutionSession(_OWORD *a1, _OWORD *a2)
{
  swift_release();
  *a1 = *a2;
  return a1;
}

uint64_t _s5XOJIT5XOJITC8JITDylibVwet_0(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *((_BYTE *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_24A8067D0(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for XOJIT.ExecutionSession()
{
  OUTLINED_FUNCTION_4();
}

uint64_t destroy for XOJIT.MachOHeaderOptions()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for XOJIT.MachOHeaderOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for XOJIT.MachOHeaderOptions(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for XOJIT.MachOHeaderOptions(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.MachOHeaderOptions(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 32);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.MachOHeaderOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for XOJIT.MachOHeaderOptions()
{
  OUTLINED_FUNCTION_4();
}

uint64_t initializeBufferWithCopyOfBuffer for XOJIT.MachOHeaderOptions.Dylib(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t initializeWithCopy for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

__n128 __swift_memcpy28_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.MachOHeaderOptions.Dylib(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 28))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.MachOHeaderOptions.Dylib(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 28) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 28) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for XOJIT.MachOHeaderOptions.Dylib()
{
  OUTLINED_FUNCTION_4();
}

uint64_t type metadata accessor for XOJIT.ReplacementManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for XOJIT.ReplacementManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XOJIT.ReplacementManager.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t type metadata accessor for XOJIT.ORCRuntimeBridge()
{
  return objc_opt_self();
}

uint64_t method lookup function for XOJIT.ORCRuntimeBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of XOJIT.ORCRuntimeBridge.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for XOJIT.UVSymbolString(uint64_t a1, int a2)
{
  int v2;

  if (a2)
  {
    if (a2 == 1 || !*(_BYTE *)(a1 + 8))
    {
      if (*(_QWORD *)a1)
        v2 = -1;
      else
        v2 = 0;
    }
    else
    {
      v2 = *(_DWORD *)a1 + 1;
    }
  }
  else
  {
    v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.UVSymbolString(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_QWORD *)result = a2 - 2;
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 2)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = 0;
  }
  return result;
}

void type metadata accessor for XOJIT.UVSymbolString()
{
  OUTLINED_FUNCTION_4();
}

uint64_t *initializeBufferWithCopyOfBuffer for XOJIT.SymbolTableStream(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for XOJIT.SymbolTableStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.SymbolTableStream()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A807020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  if (*(_DWORD *)(*(_QWORD *)(v6 - 8) + 84) == (_DWORD)a2)
  {
    v7 = v6;
    v8 = a1;
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
    v8 = a1 + *(int *)(a3 + 20);
  }
  return __swift_getEnumTagSinglePayload(v8, a2, v7);
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for XOJIT.SymbolTableStream()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_24A8070A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF10);
  if (*(_DWORD *)(*(_QWORD *)(v8 - 8) + 84) == a3)
  {
    v9 = v8;
    v10 = a1;
  }
  else
  {
    v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_25795BF18);
    v10 = a1 + *(int *)(a4 + 20);
  }
  return __swift_storeEnumTagSinglePayload(v10, a2, a2, v9);
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

void sub_24A80712C()
{
  unint64_t v0;
  unint64_t v1;

  sub_24A807838(319, &qword_25795C490, (uint64_t)&type metadata for XOJIT.SymbolTableStream.Record, MEMORY[0x24BEE6A98]);
  if (v0 <= 0x3F)
  {
    sub_24A807838(319, qword_25795C498, (uint64_t)&type metadata for XOJIT.SymbolTableStream.Record, MEMORY[0x24BEE6A40]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t destroy for XOJIT.SymbolTableStream.Record()
{
  return swift_bridgeObjectRelease();
}

void _s5XOJIT5XOJITC17SymbolTableStreamV6RecordVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_22();
}

_QWORD *assignWithCopy for XOJIT.SymbolTableStream.Record(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for XOJIT.SymbolTableStream.Record(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for XOJIT.SymbolTableStream.Record(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for XOJIT.SymbolTableStream.Record(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for XOJIT.SymbolTableStream.Record()
{
  OUTLINED_FUNCTION_4();
}

uint64_t sub_24A807350()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Box(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Box);
}

uint64_t sub_24A8073CC()
{
  return type metadata accessor for XOJIT.Context(0);
}

void sub_24A8073D4()
{
  unint64_t v0;

  sub_24A807838(319, qword_25795C498, (uint64_t)&type metadata for XOJIT.SymbolTableStream.Record, MEMORY[0x24BEE6A40]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_24A807458(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for XOJIT.SymbolTableStream(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24A807494()
{
  OUTLINED_FUNCTION_28();
  return swift_deallocObject();
}

uint64_t sub_24A8074A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_24A804B20(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_24A8074AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  (*(void (**)(uint64_t, uint64_t))(v3 + 16))(a2, a3);
  OUTLINED_FUNCTION_22();
}

void sub_24A8074D0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  if (!*a1)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    atomic_store(MEMORY[0x24BD1B9A4](a3, v5), a1);
  }
  OUTLINED_FUNCTION_22();
}

uint64_t sub_24A80750C(uint64_t a1)
{
  return sub_24A807590(a1, (uint64_t (*)(uint64_t, _QWORD *))XOJIT_MachOHeaderOptions_SetIDDylib);
}

uint64_t sub_24A807528(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void sub_24A807548(char *a1)
{
  uint64_t v1;

  XOJIT_MachOHeaderOptions_AddRPath(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_24A807574(uint64_t a1)
{
  return sub_24A807590(a1, (uint64_t (*)(uint64_t, _QWORD *))XOJIT_MachOHeaderOptions_AddLoadDylib);
}

uint64_t sub_24A807590(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD *))
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD v6[2];
  int v7;

  v3 = *(_DWORD *)(v2 + 48);
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16);
  v6[0] = a1;
  v6[1] = *(_QWORD *)(v2 + 40);
  v7 = v3;
  return a2(v4, v6);
}

uint64_t sub_24A8075E4(uint64_t a1)
{
  uint64_t v1;

  return sub_24A805128(a1, *(uint64_t (**)(uint64_t, uint64_t (*)()))(v1 + 16));
}

uint64_t orc_rt_CWrapperFunctionResultGetOutOfBandError(_QWORD *a1)
{
  if (a1[1])
    return 0;
  else
    return *a1;
}

void orc_rt_DisposeCWrapperFunctionResult(uint64_t a1)
{
  unint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 9)
  {
    v2 = *(void **)a1;
LABEL_3:
    free(v2);
    return;
  }
  if (!v1)
  {
    v2 = *(void **)a1;
    if (v2)
      goto LABEL_3;
  }
}

unint64_t sub_24A80762C()
{
  unint64_t result;

  result = qword_25795C6D8;
  if (!qword_25795C6D8)
  {
    result = MEMORY[0x24BD1B9A4](&unk_24AA2AB00, &unk_251C10C60);
    atomic_store(result, (unint64_t *)&qword_25795C6D8);
  }
  return result;
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24BD1B974](a1, v6, a5);
}

_QWORD *initializeBufferWithCopyOfBuffer for LLVMError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LLVMError(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for LLVMError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LLVMError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (a2)
  {
    if (a2 < 0 && *(_BYTE *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      v2 = *(_QWORD *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF)
        LODWORD(v2) = -1;
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LLVMError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for XOJIT.CallError()
{
  OUTLINED_FUNCTION_4();
}

uint64_t sub_24A8077B8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_24A8077D8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for XOJIT_JITDylibSearchOrderElement(uint64_t a1)
{
  sub_24A807838(a1, &qword_25795C6E8, (uint64_t)&unk_251C10CE0, MEMORY[0x24BEE4D40]);
}

void type metadata accessor for XOJIT_JITDylibLookupFlags(uint64_t a1)
{
  sub_24A807838(a1, &qword_25795C6F0, (uint64_t)&unk_251C10D08, MEMORY[0x24BEE4D40]);
}

void sub_24A807838(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(a1, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
  OUTLINED_FUNCTION_22();
}

uint64_t OUTLINED_FUNCTION_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_1()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_2()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_3()
{
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_5()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_6()
{
  return swift_task_switch();
}

uint64_t OUTLINED_FUNCTION_7(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_10()
{
  uint64_t v0;

  return LLVMDisposeErrorMessage(v0);
}

uint64_t OUTLINED_FUNCTION_11()
{
  return sub_24AA295C4();
}

uint64_t OUTLINED_FUNCTION_13()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_15()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v3 = *v1;
  v4 = (uint64_t *)(v2 - 8);
  *v4 = *v1;
  *v4 = *v1;
  *(_QWORD *)(v3 + 72) = v0;
  return swift_task_dealloc();
}

uint64_t OUTLINED_FUNCTION_16()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return sub_24AA295B8();
}

uint64_t OUTLINED_FUNCTION_19()
{
  unint64_t v0;
  uint64_t v1;

  return sub_24A805B10(v1, v0);
}

uint64_t OUTLINED_FUNCTION_20()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return sub_24AA295DC();
}

uint64_t OUTLINED_FUNCTION_25()
{
  return sub_24AA294D4();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_27(uint64_t a1, uint64_t a2)
{
  return sub_24A802D6C(a1, a2);
}

uint64_t OUTLINED_FUNCTION_28()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_30()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_33()
{
  return swift_retain();
}

unint64_t OUTLINED_FUNCTION_34(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return sub_24A801634();
}

unint64_t OUTLINED_FUNCTION_35(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return sub_24A801634();
}

__n128 OUTLINED_FUNCTION_38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  *(_QWORD *)(v2 + 56) = a1;
  result = *(__n128 *)(v2 + 40);
  v4 = *(_OWORD *)(v2 + 24);
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 48) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_39()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_41()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_42()
{
  uint64_t v0;

  return LLVMDisposeErrorMessage(v0);
}

uint64_t OUTLINED_FUNCTION_43@<X0>(uint64_t a1@<X8>)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_44()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_46()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_47()
{
  return swift_unknownObjectRelease();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_50()
{
  return MemoryBuffer.init(identifier:fromFile:)();
}

uint64_t OUTLINED_FUNCTION_51(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_24A805A58(a1, a2, a3, v3, v4);
}

uint64_t OUTLINED_FUNCTION_52(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  return sub_24A805B98(a1, a2, a3, v3, v4);
}

uint64_t OUTLINED_FUNCTION_53()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_56()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_57()
{
  return sub_24AA295C4();
}

uint64_t OUTLINED_FUNCTION_58(uint64_t a1)
{
  uint64_t *v1;
  std::string::size_type v2;

  return XOJIT_ReplacementManager_AddObjectFile(v1, v2, a1);
}

uint64_t OUTLINED_FUNCTION_59(uint64_t a1, uint64_t a2)
{
  return sub_24A807CDC(a1, a2);
}

uint64_t OUTLINED_FUNCTION_60()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_61()
{
  return swift_retain_n();
}

uint64_t OUTLINED_FUNCTION_62()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_63(uint64_t a1)
{
  uint64_t v1;

  return XOJIT_ObjectLinkingLayer_AddPlugin(v1, a1);
}

uint64_t OUTLINED_FUNCTION_64()
{
  return sub_24AA295B8();
}

uint64_t OUTLINED_FUNCTION_65()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_66()
{
  return sub_24AA29558();
}

uint64_t OUTLINED_FUNCTION_67()
{
  uint64_t v0;

  return sub_24A80535C(v0);
}

uint64_t OUTLINED_FUNCTION_68()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_69()
{
  return sub_24AA294BC();
}

uint64_t OUTLINED_FUNCTION_70()
{
  return swift_bridgeObjectRelease();
}

unint64_t OUTLINED_FUNCTION_71(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  return sub_24A801634();
}

uint64_t OUTLINED_FUNCTION_73()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_74()
{
  uint64_t v0;

  return v0;
}

uint64_t OUTLINED_FUNCTION_75()
{
  return swift_task_alloc();
}

uint64_t OUTLINED_FUNCTION_76()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_77@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, uint64_t a4)
{
  return XOJIT_XOJIT_CreateInProcess(a1, a2, *a3, a3[1], &a4);
}

char *OUTLINED_FUNCTION_79(char *a1, int64_t a2)
{
  uint64_t v2;

  return sub_24A8053EC(a1, a2, 1, v2);
}

uint64_t sub_24A807CC8()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(v0 + 16);
  if (result)
    *(_QWORD *)(v0 + 16) = 0;
  else
    __break(1u);
  return result;
}

uint64_t sub_24A807CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;

  *(_QWORD *)(v2 + 16) = 0;
  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  v5 = sub_24AA294BC();
  swift_bridgeObjectRelease();
  v6 = LLVMCreateMemoryBufferWithMemoryRange(a1, v4, (char *)(v5 + 32));
  swift_release();
  *(_QWORD *)(v2 + 16) = v6;
  return v2;
}

uint64_t sub_24A807D70()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    LLVMDisposeMemoryBuffer(v1);
  return v0;
}

uint64_t sub_24A807D90()
{
  sub_24A807D70();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LLVMMemoryBuffer()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for LLVMError()
{
  return &type metadata for LLVMError;
}

_DWORD *libcd_create(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = malloc_type_calloc(1uLL, 0x100uLL, 0x10F204024BF9B0EuLL);
  *(_QWORD *)v2 = a1;
  v2[18] = 0;
  v2[4] = 0;
  v2[34] = 0;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 14) = 0;
  v3 = malloc_type_calloc(1uLL, 4uLL, 0x100004052888210uLL);
  *((_QWORD *)v2 + 20) = v3;
  *v3 = 2;
  v2[42] = 1;
  *((_QWORD *)v2 + 22) = malloc_type_calloc(1uLL, 0x1CuLL, 0x1000040F1E6FBC0uLL);
  *((_BYTE *)v2 + 224) = 0;
  return v2;
}

void libcd_free(uint64_t a1)
{
  _QWORD *i;
  _QWORD *v3;

  if (a1)
  {
    free(*(void **)(a1 + 96));
    for (i = *(_QWORD **)(a1 + 192); ; *(_QWORD *)(a1 + 104) = *i)
    {
      free(i);
      i = *(_QWORD **)(a1 + 104);
      if (!i)
        break;
    }
    while (1)
    {
      v3 = *(_QWORD **)(a1 + 112);
      if (!v3)
        break;
      *(_QWORD *)(a1 + 112) = *v3;
      free(v3);
    }
    free(*(void **)(a1 + 160));
    free(*(void **)(a1 + 176));
    libcd_reset_write_method(a1);
    libcd_reset_read_method(a1);
    free((void *)a1);
  }
}

uint64_t libcd_reset_write_method(uint64_t result)
{
  switch(*(_DWORD *)(result + 16))
  {
    case 1:
      *(_DWORD *)(result + 24) = -1;
      break;
    case 2:
    case 3:
      *(_QWORD *)(result + 32) = 0;
      goto LABEL_3;
    case 4:
LABEL_3:
      *(_QWORD *)(result + 24) = 0;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_QWORD *)(result + 8) = 0;
  return result;
}

uint64_t libcd_reset_read_method(uint64_t result)
{
  switch(*(_DWORD *)(result + 72))
  {
    case 1:
      *(_DWORD *)(result + 80) = -1;
      break;
    case 2:
    case 3:
    case 4:
      *(_QWORD *)(result + 80) = 0;
      break;
    default:
      break;
  }
  *(_DWORD *)(result + 72) = 0;
  *(_BYTE *)(result + 88) = 0;
  *(_QWORD *)(result + 64) = 0;
  return result;
}

uint64_t libcd_set_hash_types(uint64_t a1, int *a2, unsigned int a3)
{
  size_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  void *v10;
  void *v11;

  free(*(void **)(a1 + 160));
  *(_QWORD *)(a1 + 160) = 0;
  if (a3)
  {
    v6 = a3;
    v7 = a3;
    v8 = a2;
    while (1)
    {
      v9 = *v8++;
      if (!_libcd_get_hash_info(v9))
        return 1;
      if (!--v7)
        goto LABEL_7;
    }
  }
  else
  {
    v6 = 0;
LABEL_7:
    v10 = malloc_type_calloc(v6, 4uLL, 0x100004052888210uLL);
    *(_QWORD *)(a1 + 160) = v10;
    memcpy(v10, a2, 4 * v6);
    *(_DWORD *)(a1 + 168) = a3;
    v11 = malloc_type_realloc(*(void **)(a1 + 176), 28 * v6, 0x1000040F1E6FBC0uLL);
    *(_QWORD *)(a1 + 176) = v11;
    bzero(v11, 28 * v6);
    return 0;
  }
}

_QWORD *_libcd_get_hash_info(int a1)
{
  _QWORD *result;

  if (a1 < 3)
  {
    result = (_QWORD *)((char *)&_known_hash_types + 16 * a1);
    if (*result < 0x21uLL)
      return result;
    _libcd_err_log("%s: internal error, hash len (%d) is larger than max known hash len (%d)\n");
  }
  else
  {
    _libcd_err_log("%s: unknown hash type %d (>= %d)\n");
  }
  return 0;
}

size_t _libcd_read_page_mem(_QWORD *a1, int a2, uint64_t a3, size_t a4, void *a5)
{
  size_t v6;
  uint64_t v9;

  v6 = a4;
  v9 = a1[10];
  bzero(a5, a4);
  if (v6 + a3 > *a1)
    v6 = *a1 - a3;
  memcpy(a5, (const void *)(v9 + a3), v6);
  return v6;
}

size_t _libcd_write_mem(_QWORD *a1, uint64_t a2, void *__src, size_t __n)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;

  v4 = a1[3];
  v5 = a1[6] + a2;
  v6 = a1[4] - v4;
  if (v5 + __n <= v6)
  {
    v7 = __n;
    memcpy((void *)(v4 + v5), __src, __n);
    a1[5] += v7;
  }
  else
  {
    _libcd_err_log("%s: write beyond end: %zu > %zu\n", "_libcd_write_mem", v5 + __n, v6);
    return 0;
  }
  return v7;
}

uint64_t libcd_set_linkage(uint64_t a1, int a2, __int128 *a3)
{
  char v4;
  uint64_t result;
  __int128 v7;

  v4 = a2;
  if (_libcd_get_hash_info(a2))
  {
    result = 0;
    *(_BYTE *)(a1 + 224) = 1;
    *(_BYTE *)(a1 + 225) = v4;
    v7 = *a3;
    *(_DWORD *)(a1 + 242) = *((_DWORD *)a3 + 4);
    *(_OWORD *)(a1 + 226) = v7;
  }
  else
  {
    _libcd_err_log("%s: unknown linkage hash type\n", "libcd_set_linkage");
    return 1;
  }
  return result;
}

void _libcd_err_log(char *a1, ...)
{
  char *v1;
  va_list va;

  va_start(va, a1);
  v1 = 0;
  vasprintf(&v1, a1, va);
  if (v1)
  {
    fputs(v1, (FILE *)*MEMORY[0x24BDAC8D8]);
    free(v1);
  }
}

size_t libcd_cd_size(uint64_t a1, int a2)
{
  _QWORD *hash_info;
  const char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;

  hash_info = _libcd_get_hash_info(a2);
  v4 = *(const char **)(a1 + 96);
  if (v4)
    v5 = strlen(v4) + 1;
  else
    v5 = 0;
  v6 = *(const char **)(a1 + 192);
  if (v6)
    v7 = strlen(v6) + 1;
  else
    v7 = 0;
  v8 = 108;
  if (!*(_BYTE *)(a1 + 224))
    v8 = 88;
  v9 = v5 + v7 + v8;
  if (*(_BYTE *)(a1 + 224))
    v9 += 20;
  return v9
       + (*(unsigned int *)(a1 + 120)
        + (unint64_t)((unint64_t)(*(_QWORD *)a1 + 4095) >> 12))
       * *hash_info;
}

uint64_t libcd_superblob_size(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v8;

  if (*(_DWORD *)(a1 + 168))
  {
    v2 = 0;
    v3 = 12;
    do
      v3 += libcd_cd_size(a1, *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v2++));
    while (v2 < *(unsigned int *)(a1 + 168));
  }
  else
  {
    LODWORD(v2) = 0;
    v3 = 12;
  }
  for (i = *(_QWORD **)(a1 + 104); i; i = (_QWORD *)*i)
  {
    v3 += i[3];
    LODWORD(v2) = v2 + 1;
  }
  v5 = *(_QWORD *)(a1 + 128);
  v6 = v5 == 0;
  v7 = v5 + v3;
  if (v6)
    v8 = v2;
  else
    v8 = v2 + 1;
  return v7 + 8 * v8;
}

uint64_t libcd_serialize_as_type(uint64_t a1, unsigned int a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  int8x8_t *v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  _QWORD *v17;
  int8x8_t *v18;
  int8x8_t v19;
  int8x8_t *v20;
  unint64_t v21;
  uint64_t v22;
  size_t v23;
  int8x8_t *v24;
  int v25;
  char v26;
  uint64_t v27;
  int *v28;
  _DWORD v29[3];

  if (*(_QWORD *)(a1 + 64) && *(_DWORD *)(a1 + 72))
  {
    if (*(_QWORD *)(a1 + 8) && *(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(a1 + 40) = 0;
      v3 = (_QWORD *)(a1 + 104);
      v4 = *(int *)(a1 + 168) - 1;
      v5 = (_QWORD *)(a1 + 104);
      do
      {
        v5 = (_QWORD *)*v5;
        ++v4;
      }
      while (v5);
      v6 = *(_QWORD *)(a1 + 128);
      if (v6)
        v7 = v4 + 1;
      else
        v7 = v4;
      if (!v7)
      {
        _libcd_err_log("%s: nothing to serialize\n", "libcd_serialize_as_type");
        return 5;
      }
      v29[0] = bswap32(a2);
      v29[1] = bswap32(libcd_superblob_size(a1));
      v29[2] = bswap32(v7);
      if ((*(uint64_t (**)(uint64_t, _QWORD, _DWORD *, uint64_t))(a1 + 8))(a1, *(_QWORD *)(a1 + 40), v29, 12))
      {
        if (v6)
          v8 = v4 + 1;
        else
          v8 = v4;
        v9 = 8 * v8;
        v10 = 8 * v8 + 12;
        v11 = (int8x8_t *)malloc_type_calloc(v8, 8uLL, 0x100004000313F17uLL);
        if (*(_DWORD *)(a1 + 168))
        {
          v12 = 0;
          do
          {
            v13 = v12 + 4095;
            if (!v12)
              v13 = 0;
            v11[v12] = vrev32_s8((int8x8_t)__PAIR64__(v10, v13));
            v14 = *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v12++);
            v10 += libcd_cd_size(a1, v14);
          }
          while (v12 < *(unsigned int *)(a1 + 168));
        }
        else
        {
          LODWORD(v12) = 0;
        }
        v17 = (_QWORD *)*v3;
        if (*v3)
        {
          v18 = &v11[v12];
          do
          {
            v19.i32[0] = *((_DWORD *)v17 + 2);
            v19.i32[1] = v10;
            *v18++ = vrev32_s8(v19);
            v10 += *((_DWORD *)v17 + 6);
            v17 = (_QWORD *)*v17;
            LODWORD(v12) = v12 + 1;
          }
          while (v17);
        }
        if (*(_QWORD *)(a1 + 128))
        {
          v20 = &v11[v12];
          v20->i32[0] = 256;
          v20->i32[1] = bswap32(v10);
        }
        if (!(*(uint64_t (**)(uint64_t, _QWORD, int8x8_t *, uint64_t))(a1 + 8))(a1, *(_QWORD *)(a1 + 40), v11, v9))
        {
          _libcd_err_log("%s: serialize superblob indices failed\n");
LABEL_47:
          free(v11);
          return 1;
        }
        free(v11);
        if (!*(_DWORD *)(a1 + 168))
          goto LABEL_40;
        v21 = 0;
        do
        {
          v22 = _libcd_serialize_cd(a1, *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v21));
          if ((_DWORD)v22)
          {
            v15 = v22;
            _libcd_err_log("%s: serialize code directory type %d failed, error %d\n", "libcd_serialize_as_type", *(_DWORD *)(*(_QWORD *)(a1 + 160) + 4 * v21), v22);
            return v15;
          }
          ++v21;
        }
        while (v21 < *(unsigned int *)(a1 + 168));
LABEL_40:
        while (1)
        {
          v3 = (_QWORD *)*v3;
          if (!v3)
            break;
          if (!(*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 8))(a1, *(_QWORD *)(a1 + 40), v3[2], v3[3]))
          {
            _libcd_err_log("%s: serialize raw blob data, slot %#x, failed\n");
            return 1;
          }
        }
        v23 = *(_QWORD *)(a1 + 128);
        if (!v23)
          return 0;
        v24 = (int8x8_t *)malloc_type_calloc(1uLL, v23, 0xC430757BuLL);
        if (!v24)
        {
          v27 = *(_QWORD *)(a1 + 128);
          v28 = __error();
          _libcd_err_log("%s: serialize signature space(%zu) failed allocating space (%d)\n", "libcd_serialize_as_type", v27, *v28);
          return 6;
        }
        v11 = v24;
        v25 = *(_DWORD *)(a1 + 136);
        if (v25 == 4)
        {
          v26 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, int8x8_t *))(*(_QWORD *)(a1 + 144) + 16))(*(_QWORD *)(a1 + 144), a1, *(_QWORD *)(a1 + 128), v24);
        }
        else
        {
          if (v25 != 3)
          {
LABEL_53:
            if ((*(uint64_t (**)(uint64_t, _QWORD, int8x8_t *, _QWORD))(a1 + 8))(a1, *(_QWORD *)(a1 + 40), v11, *(_QWORD *)(a1 + 128)))
            {
              free(v11);
              return 0;
            }
            _libcd_err_log("%s: serialize signature space (%zu) failed\n");
            goto LABEL_47;
          }
          v26 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD, int8x8_t *))(a1 + 144))(a1, *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 128), v24);
        }
        if ((v26 & 1) == 0)
        {
          _libcd_err_log("%s: Failed to generate signature\n", "libcd_serialize_as_type");
          free(v11);
          return 4;
        }
        goto LABEL_53;
      }
      _libcd_err_log("%s: serialize superblob header failed\n");
    }
    else
    {
      _libcd_err_log("%s: No write method set\n");
    }
    return 1;
  }
  _libcd_err_log("%s: No read page method set\n", "libcd_serialize_as_type");
  return 2;
}

uint64_t _libcd_serialize_cd(uint64_t a1, int a2)
{
  size_t *hash_info;
  size_t v5;
  int8x16_t *v6;
  int8x16_t *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  const char *v12;
  unsigned int v13;
  unint64_t v14;
  unsigned int v15;
  size_t v17;
  const char *v18;
  char v19;
  unsigned int v20;
  uint64_t v21;
  __int32 *v22;
  size_t v23;
  const void *v24;
  size_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t *i;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _DWORD *v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  size_t v47;
  unsigned int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  hash_info = _libcd_get_hash_info(a2);
  v5 = libcd_cd_size(a1, a2);
  v6 = (int8x16_t *)malloc_type_calloc(1uLL, v5, 0x1B8D4971uLL);
  if (v6)
  {
    v7 = v6;
    v6->i32[0] = 34397946;
    v8 = libcd_cd_size(a1, a2);
    v9 = *(unsigned __int8 *)(a1 + 224);
    if (*(_BYTE *)(a1 + 224))
      v10 = 393728;
    else
      v10 = 262656;
    v7->i32[1] = bswap32(v8);
    v7->i32[2] = v10;
    v7->i32[3] = bswap32(*(_DWORD *)(a1 + 92));
    if (v9)
      v11 = 108;
    else
      v11 = 88;
    v12 = *(const char **)(a1 + 96);
    if (v12)
    {
      v7[1].i32[1] = v11 << 24;
      v11 = (v11 | 1) + strlen(v12);
    }
    v13 = *(_DWORD *)(a1 + 120);
    v14 = *(_QWORD *)a1;
    v15 = bswap32((unint64_t)(*(_QWORD *)a1 + 4095) >> 12);
    v7[1].i32[2] = bswap32(v13);
    v7[1].i32[3] = v15;
    if (HIDWORD(v14))
      v7[3].i64[1] = bswap64(v14);
    else
      v7[2].i32[0] = bswap32(v14);
    v17 = *hash_info;
    v7[2].i8[4] = *hash_info;
    v7[2].i8[5] = a2;
    v7[2].i8[6] = *(_BYTE *)(a1 + 184);
    v7[2].i8[7] = 12;
    v18 = *(const char **)(a1 + 192);
    if (v18)
    {
      v7[3].i32[0] = bswap32(v11);
      v11 += strlen(v18) + 1;
    }
    v7[4] = vrev64q_s8(*(int8x16_t *)(a1 + 200));
    v7[5].i64[0] = bswap64(*(_QWORD *)(a1 + 216));
    if (v9)
    {
      v7[6].i8[0] = *(_BYTE *)(a1 + 225);
      if (*(_BYTE *)(a1 + 246))
      {
        v19 = *(_BYTE *)(a1 + 247);
        v20 = bswap32(*(unsigned __int16 *)(a1 + 248)) >> 16;
      }
      else
      {
        LOWORD(v20) = 0;
        v19 = 1;
      }
      v7[6].i8[1] = v19;
      v7[6].i16[1] = v20;
      v7[6].i32[1] = bswap32(v11);
      v7[6].i32[2] = 335544320;
      v11 += 20;
      v21 = 27;
    }
    else
    {
      v21 = 22;
    }
    v7[1].i32[0] = bswap32(v11 + v13 * v17);
    v22 = &v7->i32[v21];
    if (v12)
    {
      v23 = strlen(v12) + 1;
      memcpy(v22, v12, v23);
      v22 = (__int32 *)((char *)v22 + v23);
    }
    v24 = *(const void **)(a1 + 192);
    if (v24)
    {
      v25 = strlen(*(const char **)(a1 + 192)) + 1;
      memcpy(v22, v24, v25);
      v22 = (__int32 *)((char *)v22 + v25);
    }
    if (*(_BYTE *)(a1 + 224))
    {
      v26 = *(_OWORD *)(a1 + 226);
      v22[4] = *(_DWORD *)(a1 + 242);
      *(_OWORD *)v22 = v26;
      v22 += 5;
    }
    v47 = v5;
    if (*(_DWORD *)(a1 + 120))
    {
      v27 = ((uint64_t (*)(void))hash_info[1])();
      MEMORY[0x24BDAC7A8](v27, v28);
      v30 = (char *)&v46 - v29;
      v31 = (char *)malloc_type_calloc(*(unsigned int *)(a1 + 120), *hash_info, 0x22D8E2EBuLL);
      for (i = *(uint64_t **)(a1 + 112); i; i = (uint64_t *)*i)
      {
        ccdigest_init();
        ccdigest_update();
        (*(void (**)(uint64_t, char *, char *))(v27 + 56))(v27, v30, &v31[*hash_info * (*(_DWORD *)(a1 + 120) - *((_DWORD *)i + 2))]);
      }
      memcpy(v22, v31, *hash_info * *(unsigned int *)(a1 + 120));
      free(v31);
    }
    v33 = *(_QWORD *)a1 + 4095;
    v48 = 0;
    v34 = (v33 >> 12);
    if ((v33 >> 12))
    {
      v35 = 0;
      do
      {
        v48 = _libcd_hash_page(a1, v35);
        if (v48)
          v36 = 1;
        else
          v36 = v34 - 1 == v35;
        ++v35;
      }
      while (!v36);
    }
    if (v48)
    {
      _libcd_err_log("%s: serialize page hashes failed\n", "_libcd_serialize_cd");
      free(v7);
      return v48;
    }
    else if ((*(uint64_t (**)(uint64_t, _QWORD, int8x16_t *, size_t))(a1 + 8))(a1, *(_QWORD *)(a1 + 40), v7, v47))
    {
      v37 = ((uint64_t (*)(void))hash_info[1])();
      MEMORY[0x24BDAC7A8](v37, v38);
      v40 = (char *)&v46 - v39;
      v41 = malloc_type_calloc(1uLL, *hash_info, 0xAB74758DuLL);
      if (v41)
      {
        v42 = v41;
        ccdigest_init();
        ccdigest_update();
        (*(void (**)(uint64_t, char *, _DWORD *))(v37 + 56))(v37, v40, v42);
        v43 = *(unsigned int *)(a1 + 168);
        if ((_DWORD)v43)
        {
          v44 = *(_QWORD *)(a1 + 176);
          while (*(_BYTE *)(v44 + 24))
          {
            if (*(_DWORD *)v44 == a2)
              goto LABEL_52;
            v44 += 28;
            if (!--v43)
              goto LABEL_53;
          }
          *(_DWORD *)v44 = a2;
          *(_BYTE *)(v44 + 24) = 1;
LABEL_52:
          v45 = *(_OWORD *)v42;
          *(_DWORD *)(v44 + 20) = v42[4];
          *(_OWORD *)(v44 + 4) = v45;
        }
LABEL_53:
        free(v42);
        free(v7);
        return 0;
      }
      else
      {
        _libcd_err_log("%s: Failed to allocated memory for cdhash\n", "_libcd_serialize_cd");
        free(v7);
        return 6;
      }
    }
    else
    {
      _libcd_err_log("%s: failed to write directory\n", "_libcd_serialize_cd");
      free(v7);
      return 1;
    }
  }
  else
  {
    _libcd_err_log("%s: Failed to allocate temporary memory for code directory\n", "_libcd_serialize_cd");
    return 6;
  }
}

uint64_t _libcd_hash_page(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  size_t *v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE v17[4096];
  _OWORD __src[2];
  uint64_t v19;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = (size_t *)v5;
  v8 = v7;
  v10 = v9;
  v11 = v2;
  v19 = *MEMORY[0x24BDAC8D0];
  memset(__src, 0, sizeof(__src));
  v12 = (*(uint64_t (**)(void))(v5 + 8))();
  MEMORY[0x24BDAC7A8](v12, v13);
  v15 = &v17[-v14];
  bzero(v17, 0x1000uLL);
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(v11 + 64))(v11, v10, v10 << 12, 4096, v17))
  {
    ccdigest_init();
    ccdigest_update();
    (*(void (**)(uint64_t, _BYTE *, _OWORD *))(v12 + 56))(v12, v15, __src);
    memcpy(v4, __src, *v6);
    return 0;
  }
  else
  {
    _libcd_err_log("%s: read page %d at pos %zu failed (pages: %d)\n", "_libcd_hash_page", v10, v10 << 12, v8);
    return 2;
  }
}

xojit::ReplacementManager *xojit::ReplacementManager::ReplacementManager(xojit::ReplacementManager *this, llvm::orc::ObjectLinkingLayer *a2, llvm::orc::ExecutorProcessControl *a3)
{
  xojit::ReplacementManager::Plugin *v5;
  uint64_t v6;
  xojit::ReplacementManager::Plugin *v8;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = 850045863;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((_DWORD *)this + 26) = 0;
  v5 = (xojit::ReplacementManager::Plugin *)operator new();
  v8 = xojit::ReplacementManager::Plugin::Plugin(v5, this);
  llvm::orc::ObjectLinkingLayer::addPlugin((uint64_t)a2, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return this;
}

uint64_t llvm::orc::ObjectLinkingLayer::addPlugin(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *(_QWORD **)(a1 + 176);
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(_QWORD *)(a1 + 168);
    v10 = ((uint64_t)v6 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v5 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v27 = a1 + 184;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 184, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v26 = v16;
    v17 = *a2;
    *a2 = 0;
    *(_QWORD *)v15 = v17;
    v8 = v15 + 8;
    v25.i64[1] = (uint64_t)(v15 + 8);
    v19 = *(_QWORD **)(a1 + 168);
    v18 = *(_QWORD **)(a1 + 176);
    if (v18 == v19)
    {
      v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        v20 = *--v18;
        *v18 = 0;
        *((_QWORD *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      v21 = *(int64x2_t *)(a1 + 168);
      v8 = (_QWORD *)v25.i64[1];
      v16 = v26;
    }
    *(_QWORD *)(a1 + 168) = v15;
    *(_QWORD *)(a1 + 176) = v8;
    v25 = v21;
    v22 = *(char **)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v16;
    v26 = v22;
    v24 = v21.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    *v6 = v7;
    v8 = v6 + 1;
  }
  *(_QWORD *)(a1 + 176) = v8;
  std::mutex::unlock(v4);
  return a1;
}

void xojit::ReplacementManager::~ReplacementManager(xojit::ReplacementManager *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  dispatch_semaphore_t dsema;
  _QWORD *v7;

  dsema = dispatch_semaphore_create(0);
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = (_QWORD *)operator new();
  *v3 = off_251C10F08;
  v3[1] = &dsema;
  v3[2] = "~ReplacementManager";
  v3[3] = 0;
  v3[4] = 0;
  v3[5] = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(v2 + 72) + 24);
  v7 = v3;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v4 + 16))(v4, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  dispatch_semaphore_wait(dsema, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(dsema);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::destroyAll((uint64_t)this + 88);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 11), 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

uint64_t xojit::ReplacementManager::addWithReplacement@<X0>(uint64_t *a1@<X0>, std::string::size_type a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string::size_type size;
  std::string *p_p;
  __int16 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  llvm::StringMapImpl *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  std::string *v55;
  std::string::size_type v56;
  uint64_t *v57;
  unint64_t v58;
  int64x2_t *v59;
  int64x2_t *v60;
  _QWORD *v61;
  uint64_t i64;
  unint64_t v63;
  unint64_t v64;
  std::string::size_type v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  std::string::size_type v76;
  char *v77;
  unint64_t *v78;
  unint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  std::string::size_type v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int *v99[3];
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  std::string v112;
  std::string::size_type v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  std::string __p;
  uint64_t v118;
  _OWORD v119[2];
  __int128 v120;
  _OWORD v121[3];
  uint64_t v122;
  uint64_t v123;
  unsigned int v124;
  std::string::size_type v125;
  char v126;
  uint64_t v127;

  v127 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*a1 + 8);
  v9 = *(_QWORD *)(*a3 + 8);
  v10 = *(_QWORD *)(*a3 + 16) - v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
  *(_QWORD *)&v114 = v9;
  *((_QWORD *)&v114 + 1) = v10;
  v115 = v11;
  v116 = v12;
  llvm::orc::getObjectFileInterface(v8, &v114, (uint64_t)&v122);
  if ((v126 & 1) != 0)
  {
    v31 = v122;
    v122 = 0;
    *a4 = v31;
    return llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)&v122);
  }
  v13 = *(_QWORD *)(*a1 + 8);
  v14 = v125;
  v113 = v125;
  if (v125 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v15 = (unint64_t *)(v125 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = v113;
  }
  if (v14)
  {
    v17 = *(_QWORD *)v14;
    *(_QWORD *)&v119[0] = (char *)&v119[1] + 8;
    *(_OWORD *)((char *)v119 + 8) = xmmword_24AA2AC10;
    llvm::SmallVectorImpl<char>::append<char const*,void>(v119, (_BYTE *)(v14 + 16), (_BYTE *)(v14 + 16 + v17));
    v18 = a1[10];
    a1[10] = v18 + 1;
    std::to_string(&v112, v18);
    v19 = std::string::insert(&v112, 0, "$", 1uLL);
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    llvm::SmallVectorImpl<char>::append<char const*,void>(v119, p_p, (_BYTE *)p_p + size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v112.__r_.__value_.__l.__data_);
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v13 + 72), *(uint64_t **)&v119[0], *((unint64_t *)&v119[0] + 1), (unint64_t **)&__p);
    v23 = *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v122, (uint64_t *)&v113)+ 4);
    *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v122, (uint64_t *)&__p)+ 4) = v23;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase((uint64_t)&v122, &v113);
    if (v125 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v24 = (unint64_t *)(v125 + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
    }
    v125 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v26 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 + 1, v26));
      if (__p.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v28 = (unint64_t *)(__p.__r_.__value_.__r.__words[0] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
      }
    }
    if (*(_OWORD **)&v119[0] != (_OWORD *)((char *)&v119[1] + 8))
      free(*(void **)&v119[0]);
    v30 = v113;
  }
  else
  {
    v30 = 0;
  }
  v96 = v13;
  if ((unint64_t)(v30 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v32 = (unint64_t *)(v30 + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
  }
  std::mutex::lock((std::mutex *)(a1 + 2));
  v97 = a3;
  v34 = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
  v36 = v35;
  v98 = a2;
  __p.__r_.__value_.__r.__words[0] = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct((uint64_t)(a1 + 11), (uint64_t *)&__p);
  v38 = v37;
  v39 = (llvm::StringMapImpl *)(v37 + 8);
  v120 = 0u;
  memset(v121, 0, sizeof(v121));
  v99[1] = v34;
  v99[2] = v36;
  v100 = 0;
  memset(v119, 0, sizeof(v119));
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v104 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v111 = 0;
  v40 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)(v37 + 8), (uint64_t *)v34, (unint64_t)v36);
  v41 = *(_QWORD *)(v38 + 8);
  v42 = v40;
  v43 = *(_QWORD *)(v41 + 8 * v40);
  if (v43 == -8)
  {
    --*(_DWORD *)(v38 + 24);
    goto LABEL_37;
  }
  if (!v43)
  {
LABEL_37:
    v44 = a4;
    v45 = (char *)operator new((size_t)v36 + 105, (std::align_val_t)8uLL);
    v46 = v45;
    v47 = v45 + 104;
    if (v36)
      memcpy(v45 + 104, v34, (size_t)v36);
    *((_BYTE *)v36 + (_QWORD)v47) = 0;
    v48 = v100;
    *(_QWORD *)v46 = v36;
    *((_QWORD *)v46 + 1) = v48;
    v100 = 0;
    *((_QWORD *)v46 + 2) = v101;
    v101 = 0;
    *((_DWORD *)v46 + 6) = v102;
    v102 = 0;
    *((_QWORD *)v46 + 4) = v103;
    v103 = 0;
    *((_QWORD *)v46 + 5) = v104;
    v104 = 0;
    *((_DWORD *)v46 + 12) = v105;
    v105 = 0;
    *((_QWORD *)v46 + 7) = v106;
    v106 = 0;
    *((_QWORD *)v46 + 8) = v107;
    v107 = 0;
    *((_DWORD *)v46 + 18) = v108;
    v108 = 0;
    *((_QWORD *)v46 + 10) = v109;
    v109 = 0;
    *((_QWORD *)v46 + 11) = v110;
    v110 = 0;
    *((_DWORD *)v46 + 24) = v111;
    v111 = 0;
    *(_QWORD *)(v41 + 8 * v42) = v46;
    ++*(_DWORD *)(v38 + 20);
    v49 = (uint64_t *)(*(_QWORD *)(v38 + 8) + 8 * llvm::StringMapImpl::RehashTable(v39, v42));
    a4 = v44;
    while (1)
    {
      v43 = *v49;
      if (*v49 && v43 != -8)
        break;
      ++v49;
    }
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v109);
  MEMORY[0x24BD1B398](v109, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v106);
  MEMORY[0x24BD1B398](v106, 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v103);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v100);
  MEMORY[0x24BD1B398](v100, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)&v121[1] + 8);
  MEMORY[0x24BD1B398](*((_QWORD *)&v121[1] + 1), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)v121);
  MEMORY[0x24BD1B398](*(_QWORD *)&v121[0], 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v119[1] + 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)v119);
  MEMORY[0x24BD1B398](*(_QWORD *)&v119[0], 8);
  if ((_DWORD)v123)
  {
    if (v124)
    {
      v51 = 16 * v124;
      v52 = v122;
      while ((*(_QWORD *)v52 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v52 += 16;
        v51 -= 16;
        if (!v51)
          goto LABEL_61;
      }
    }
    else
    {
      v52 = v122;
    }
    v53 = v122 + 16 * v124;
    if (v52 != v53)
    {
LABEL_54:
      *(_QWORD *)&v119[0] = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v43 + 8), *(_DWORD *)(v43 + 24), *(_QWORD *)v52, v119) & 1) != 0|| (*(_QWORD *)&v119[0] = 0, (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v43 + 32), (_QWORD *)v52, v119) & 1) != 0)|| (*(_QWORD *)&v119[0] = 0, llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v43 + 56), *(_DWORD *)(v43 + 72), *(_QWORD *)v52, v119)))
      {
        *(_BYTE *)(v52 + 9) |= 2u;
      }
      while (1)
      {
        v52 += 16;
        if (v52 == v53)
          break;
        if ((*(_QWORD *)v52 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v52 != v53)
            goto LABEL_54;
          break;
        }
      }
    }
  }
LABEL_61:
  v54 = a1[10];
  a1[10] = v54 + 1;
  std::to_string(&__p, v54);
  v55 = std::string::insert(&__p, 0, "__replacement_tag$", 0x12uLL);
  v56 = v55->__r_.__value_.__r.__words[2];
  v119[0] = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
  *(_QWORD *)&v119[1] = v56;
  v55->__r_.__value_.__l.__size_ = 0;
  v55->__r_.__value_.__r.__words[2] = 0;
  v55->__r_.__value_.__r.__words[0] = 0;
  if ((SBYTE7(v119[1]) & 0x80u) == 0)
    v57 = (uint64_t *)v119;
  else
    v57 = *(uint64_t **)&v119[0];
  if ((SBYTE7(v119[1]) & 0x80u) == 0)
    v58 = BYTE7(v119[1]);
  else
    v58 = *((_QWORD *)&v119[0] + 1);
  llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v96 + 72), v57, v58, (unint64_t **)&v112);
  if (SBYTE7(v119[1]) < 0)
    operator delete(*(void **)&v119[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = v98;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct((uint64_t)(a1 + 11), (uint64_t *)&__p);
  v60 = v59;
  v61 = (_QWORD *)v59[2].i64[1];
  v64 = v59[3].u64[0];
  i64 = (uint64_t)v59[3].i64;
  v63 = v64;
  if ((unint64_t)v61 >= v64)
  {
    v69 = v60[2].i64[0];
    v70 = ((uint64_t)v61 - v69) >> 3;
    v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 61)
      abort();
    v72 = v63 - v69;
    if (v72 >> 2 > v71)
      v71 = v72 >> 2;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
      v73 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v73 = v71;
    *(_QWORD *)&v120 = i64;
    if (v73)
      v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(i64, v73);
    else
      v74 = 0;
    v75 = &v74[8 * v70];
    *(_QWORD *)&v119[0] = v74;
    *((_QWORD *)&v119[0] + 1) = v75;
    *(_QWORD *)&v119[1] = v75;
    *((_QWORD *)&v119[1] + 1) = &v74[8 * v73];
    v76 = v112.__r_.__value_.__r.__words[0];
    *(_QWORD *)v75 = v112.__r_.__value_.__r.__words[0];
    v77 = v75;
    if (v76 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v78 = (unint64_t *)(v76 + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 + 1, v78));
      v75 = (char *)*((_QWORD *)&v119[0] + 1);
      v77 = *(char **)&v119[1];
    }
    v68 = v77 + 8;
    *(_QWORD *)&v119[1] = v77 + 8;
    v81 = (_QWORD *)v60[2].i64[0];
    v80 = (_QWORD *)v60[2].i64[1];
    if (v80 == v81)
    {
      v83 = vdupq_n_s64((unint64_t)v80);
    }
    else
    {
      do
      {
        *((_QWORD *)v75 - 1) = 0;
        v75 -= 8;
        v82 = *--v80;
        *(_QWORD *)v75 = v82;
        *v80 = 0;
      }
      while (v80 != v81);
      v83 = v60[2];
      v68 = *(_QWORD **)&v119[1];
    }
    v60[2].i64[0] = (uint64_t)v75;
    v60[2].i64[1] = (uint64_t)v68;
    *(int64x2_t *)((char *)v119 + 8) = v83;
    v84 = v60[3].i64[0];
    v60[3].i64[0] = *((_QWORD *)&v119[1] + 1);
    *((_QWORD *)&v119[1] + 1) = v84;
    *(_QWORD *)&v119[0] = v83.i64[0];
    std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)v119);
  }
  else
  {
    v65 = v112.__r_.__value_.__r.__words[0];
    *v61 = v112.__r_.__value_.__r.__words[0];
    if (v65 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v66 = (unint64_t *)(v65 + 8);
      do
        v67 = __ldaxr(v66);
      while (__stlxr(v67 + 1, v66));
    }
    v68 = v61 + 1;
  }
  v60[2].i64[1] = (uint64_t)v68;
  *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v122, (uint64_t *)&v112)+ 4) = 0x4000;
  v85 = *a1;
  v86 = operator new();
  v87 = *v97;
  *v97 = 0;
  v88 = v122;
  v122 = 0;
  v89 = v124;
  v124 = 0;
  v90 = v125;
  v125 = 0;
  v118 = 0;
  memset(&__p, 0, 20);
  *(_QWORD *)(v86 + 8) = v88;
  *(_QWORD *)&v119[0] = 0;
  v91 = v123;
  v123 = 0;
  *(_QWORD *)(v86 + 16) = v91;
  *((_QWORD *)&v119[0] + 1) = 0;
  *(_DWORD *)(v86 + 24) = v89;
  LODWORD(v119[1]) = 0;
  *(_QWORD *)(v86 + 32) = v90;
  *((_QWORD *)&v119[1] + 1) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v119);
  *(_QWORD *)v86 = &off_251C14ED8;
  *(_QWORD *)(v86 + 40) = v85;
  *(_QWORD *)(v86 + 48) = v87;
  *(_QWORD *)&v119[0] = v86;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&__p);
  v99[0] = 0;
  llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(v98, (uint64_t)v119, (uint64_t)v99, a4);
  if (v99[0])
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v99[0]);
  v92 = *(_QWORD *)&v119[0];
  *(_QWORD *)&v119[0] = 0;
  if (v92)
    (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  if (v112.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v93 = (unint64_t *)(v112.__r_.__value_.__r.__words[0] + 8);
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
  }
  std::mutex::unlock((std::mutex *)(a1 + 2));
  return llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)&v122);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  v7 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v7))
  {
    v4 = v7;
    if ((unint64_t)(*v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v5 = (unint64_t *)(*v7 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
    }
    *v4 = -16;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  std::recursive_mutex *v5;
  _QWORD v6[3];

  if (*(_DWORD *)(*(_QWORD *)a2 + 16))
  {
    v5 = *(std::recursive_mutex **)(a1 + 32);
    v6[0] = a1;
    v6[1] = a2;
    v6[2] = a3;
    std::recursive_mutex::lock(v5);
    llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(std::unique_ptr<llvm::orc::BasicObjectLayerMaterializationUnit> &&,llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>)::{lambda(void)#1}::operator()((uint64_t)v6, a4);
    std::recursive_mutex::unlock(v5);
  }
  else
  {
    *a4 = 0;
  }
}

void xojit::ReplacementManager::applyPendingUpdatesFor(xojit::ReplacementManager *this@<X0>, void **a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  llvm::orc::ExecutionSession *v7;
  _DWORD *v8;
  std::mutex *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__assoc_sub_state_vtbl *v69;
  uint64_t *v70;
  uint64_t *v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  __int128 v90;
  xojit::ReplacementManager *v91;
  __int128 v92;
  __int128 v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  uint64_t *v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t *v111;
  __int128 v112;
  void *__p;
  void *v114;
  char *v115;
  std::__assoc_sub_state_vtbl *v116;
  uint64_t v117;
  _BYTE v118[24];
  _BYTE *v119;
  uint64_t v120[3];
  char v121;
  _BYTE v122[24];
  _BYTE *v123;
  _QWORD v124[3];
  char v125;
  void **v126[3];
  char *v127;
  uint64_t v128;

  v128 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)this + 88;
  v7 = *(llvm::orc::ExecutionSession **)(*(_QWORD *)this + 8);
  v8 = operator new(0x10uLL);
  *(_QWORD *)v8 = a2;
  v8[2] = 1;
  v114 = v8 + 4;
  v115 = (char *)(v8 + 4);
  __p = v8;
  v91 = this;
  v9 = (std::mutex *)((char *)this + 16);
  std::mutex::lock((std::mutex *)((char *)this + 16));
  v126[0] = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct((uint64_t)v6, (uint64_t *)v126);
  v111 = *(uint64_t **)(v10 + 32);
  v11 = v111;
  v92 = *(_OWORD *)(v10 + 40);
  *(_OWORD *)(v10 + 32) = 0u;
  v112 = v92;
  *(_QWORD *)(v10 + 48) = 0;
  std::mutex::unlock((std::mutex *)((char *)this + 16));
  v110 = 0;
  v109 = 0u;
  if (v11 == (uint64_t *)v92)
  {
    v23 = 0;
    v22 = 0;
  }
  else
  {
    v12 = a3;
    do
    {
      v13 = *v11;
      v14 = *v11 - 1;
      if (v14 >= 0xFFFFFFFFFFFFFFE0)
      {
        v108 = *v11;
      }
      else
      {
        v15 = (unint64_t *)(v13 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
        v108 = v13;
        do
          v17 = __ldaxr(v15);
        while (__stlxr(v17 + 1, v15));
      }
      llvm::orc::SymbolLookupSet::add((uint64_t *)&v109, &v108, 1);
      if ((unint64_t)(v108 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v18 = (unint64_t *)(v108 + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
      }
      if (v14 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v20 = (unint64_t *)(v13 + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
      }
      ++v11;
    }
    while (v11 != (uint64_t *)v92);
    v23 = (uint64_t *)*((_QWORD *)&v109 + 1);
    v22 = (uint64_t *)v109;
    a3 = v12;
  }
  v107 = 0;
  v106 = 0uLL;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)&v106, v22, v23, ((char *)v23 - (char *)v22) >> 4);
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v122, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup(v7, (__int128 **)&__p, &v106, 0, 63, (uint64_t)v122, (uint64_t)v124);
  v24 = v123;
  if (v123 == v122)
  {
    v25 = 4;
    v24 = v122;
  }
  else
  {
    if (!v123)
      goto LABEL_24;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_24:
  v126[0] = (void **)&v106;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v126);
  if ((v125 & 1) != 0)
  {
    v40 = v124[0];
    v124[0] = 0;
    *a3 = v40;
    goto LABEL_119;
  }
  std::mutex::lock(v9);
  v126[0] = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct((uint64_t)v6, (uint64_t *)v126);
  v104 = *(_QWORD *)(v26 + 56);
  v27 = v104;
  v93 = *(_OWORD *)(v26 + 64);
  *(_OWORD *)(v26 + 56) = 0u;
  v105 = v93;
  v28 = *(uint64_t **)(v26 + 80);
  v102 = v28;
  *(_OWORD *)(v26 + 72) = 0u;
  v90 = *(_OWORD *)(v26 + 88);
  v103 = v90;
  *(_OWORD *)(v26 + 88) = 0u;
  std::mutex::unlock(v9);
  v101 = 0;
  v100 = 0u;
  if (v27 == (_QWORD)v93)
  {
    v39 = (uint64_t *)v90;
  }
  else
  {
    do
    {
      v29 = *(_QWORD *)(v27 + 16);
      v99 = v29;
      if ((unint64_t)(v29 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v30 = (unint64_t *)(v29 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 + 1, v30));
      }
      llvm::orc::SymbolLookupSet::add((uint64_t *)&v100, &v99, 0);
      if ((unint64_t)(v99 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v32 = (unint64_t *)(v99 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
      }
      v34 = *(_QWORD *)(v27 + 8);
      v98 = v34;
      if ((unint64_t)(v34 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v35 = (unint64_t *)(v34 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      llvm::orc::SymbolLookupSet::add((uint64_t *)&v100, &v98, 0);
      if ((unint64_t)(v98 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v37 = (unint64_t *)(v98 + 8);
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
      }
      v27 += 40;
    }
    while (v27 != (_QWORD)v93);
    v28 = v102;
    v39 = (uint64_t *)v103;
  }
  while (v28 != v39)
  {
    v41 = *v28;
    v97 = v41;
    if ((unint64_t)(v41 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v42 = (unint64_t *)(v41 + 8);
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 + 1, v42));
    }
    llvm::orc::SymbolLookupSet::add((uint64_t *)&v100, &v97, 0);
    if ((unint64_t)(v97 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v44 = (unint64_t *)(v97 + 8);
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
    }
    v28 += 2;
  }
  v95 = v100;
  v96 = v101;
  v100 = 0uLL;
  v101 = 0;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v118, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup(v7, (__int128 **)&__p, &v95, 0, 63, (uint64_t)v118, (uint64_t)v120);
  v46 = v119;
  if (v119 == v118)
  {
    v47 = 4;
    v46 = v118;
    goto LABEL_54;
  }
  if (v119)
  {
    v47 = 5;
LABEL_54:
    (*(void (**)(void))(*v46 + 8 * v47))();
  }
  v126[0] = (void **)&v95;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v126);
  if ((v121 & 1) != 0)
  {
    v63 = v120[0];
    v120[0] = 0;
    *a3 = v63;
  }
  else
  {
    v48 = v104;
    v49 = v105;
    if (v104 == (_QWORD)v105)
    {
      v50 = 0;
      v51 = 0;
      v62 = 0;
    }
    else
    {
      v94 = a3;
      v50 = 0;
      v51 = 0;
      v52 = 0;
      do
      {
        v53 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v120, (uint64_t *)(v48 + 8))[1];
        v54 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v120, (uint64_t *)(v48 + 16))[1];
        if (v51 >= v52)
        {
          v55 = (v51 - v50) >> 4;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 60)
LABEL_122:
            abort();
          if ((v52 - v50) >> 3 > v56)
            v56 = (v52 - v50) >> 3;
          if ((unint64_t)(v52 - v50) >= 0x7FFFFFFFFFFFFFF0)
            v57 = 0xFFFFFFFFFFFFFFFLL;
          else
            v57 = v56;
          if (v57)
          {
            if (v57 >> 60)
LABEL_123:
              std::__throw_bad_array_new_length[abi:nn180100]();
            v58 = (char *)operator new(16 * v57);
          }
          else
          {
            v58 = 0;
          }
          v59 = &v58[16 * v55];
          *(_QWORD *)v59 = v53;
          *((_QWORD *)v59 + 1) = v54;
          if (v51 == v50)
          {
            v61 = &v58[16 * v55];
          }
          else
          {
            v60 = &v58[16 * v55];
            do
            {
              v61 = v60 - 16;
              *((_OWORD *)v60 - 1) = *((_OWORD *)v51 - 1);
              v51 -= 16;
              v60 -= 16;
            }
            while (v51 != v50);
          }
          v52 = &v58[16 * v57];
          v51 = v59 + 16;
          if (v50)
            operator delete(v50);
          v50 = v61;
        }
        else
        {
          *(_QWORD *)v51 = v53;
          *((_QWORD *)v51 + 1) = v54;
          v51 += 16;
        }
        v48 += 40;
      }
      while (v48 != v49);
      v62 = v50;
      a3 = v94;
    }
    v64 = *(_QWORD *)(*((_QWORD *)v91 + 1) + 112);
    v65 = (v51 - v62) >> 4;
    v66 = operator new();
    *(_QWORD *)(v66 + 8) = 0;
    v67 = (unint64_t *)(v66 + 8);
    *(_QWORD *)(v66 + 16) = 0;
    *(_QWORD *)(v66 + 24) = 850045863;
    *(_OWORD *)(v66 + 32) = 0u;
    *(_OWORD *)(v66 + 48) = 0u;
    *(_OWORD *)(v66 + 64) = 0u;
    *(_QWORD *)(v66 + 80) = 0;
    *(_QWORD *)(v66 + 88) = 1018212795;
    *(_OWORD *)(v66 + 96) = 0u;
    *(_OWORD *)(v66 + 112) = 0u;
    *(_OWORD *)(v66 + 124) = 0u;
    *(_QWORD *)v66 = &off_251C10F50;
    v117 = v66;
    std::__assoc_sub_state::__attach_future[abi:nn180100](v66);
    v126[0] = (void **)&v117;
    v127 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt64s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned long long>>)::{lambda(llvm::Error)#1},llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt64s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned long long>>)::{lambda(llvm::Error)#1},void>::Callbacks
         + 2;
    (*(void (**)(uint64_t, char *, uint64_t, void ***))(*(_QWORD *)v64 + 40))(v64, v62, v65, v126);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v126);
    std::__assoc_state<llvm::MSVCPError>::move((std::__assoc_sub_state *)v66, &v116);
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 16))(v66);
    v69 = v116;
    *a3 = (uint64_t)v116;
    std::promise<llvm::MSVCPError>::~promise(&v117);
    if (!v69)
    {
      v70 = v102;
      v71 = (uint64_t *)v103;
      if (v102 == (uint64_t *)v103)
      {
        v72 = 0;
        v73 = 0;
        v85 = 0;
      }
      else
      {
        v72 = 0;
        v73 = 0;
        v74 = 0;
        do
        {
          v75 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v120, v70)[1]+ 4;
          v76 = *((_DWORD *)v70 + 2);
          if (v73 >= v74)
          {
            v77 = (v73 - v72) >> 4;
            v78 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 60)
              goto LABEL_122;
            if ((v74 - v72) >> 3 > v78)
              v78 = (v74 - v72) >> 3;
            if ((unint64_t)(v74 - v72) >= 0x7FFFFFFFFFFFFFF0)
              v79 = 0xFFFFFFFFFFFFFFFLL;
            else
              v79 = v78;
            if (v79)
            {
              if (v79 >> 60)
                goto LABEL_123;
              v80 = (char *)operator new(16 * v79);
            }
            else
            {
              v80 = 0;
            }
            v81 = &v80[16 * v77];
            *(_QWORD *)v81 = v75;
            *((_DWORD *)v81 + 2) = v76;
            v82 = v81;
            while (v73 != v72)
            {
              v83 = *((_QWORD *)v73 - 2);
              v73 -= 16;
              v84 = *((_DWORD *)v73 + 2);
              *((_QWORD *)v82 - 2) = v83;
              v82 -= 16;
              *((_DWORD *)v82 + 2) = v84;
            }
            v74 = &v80[16 * v79];
            v73 = v81 + 16;
            if (v72)
              operator delete(v72);
            v72 = v82;
          }
          else
          {
            *(_QWORD *)v73 = v75;
            *((_DWORD *)v73 + 2) = v76;
            v73 += 16;
          }
          v70 += 2;
        }
        while (v70 != v71);
        v85 = v72;
      }
      v86 = *(_QWORD *)(*((_QWORD *)v91 + 1) + 112);
      v87 = operator new();
      *(_QWORD *)(v87 + 8) = 0;
      v88 = (unint64_t *)(v87 + 8);
      *(_QWORD *)(v87 + 16) = 0;
      *(_QWORD *)(v87 + 24) = 850045863;
      *(_OWORD *)(v87 + 32) = 0u;
      *(_OWORD *)(v87 + 48) = 0u;
      *(_OWORD *)(v87 + 64) = 0u;
      *(_QWORD *)(v87 + 80) = 0;
      *(_QWORD *)(v87 + 88) = 1018212795;
      *(_OWORD *)(v87 + 96) = 0u;
      *(_OWORD *)(v87 + 112) = 0u;
      *(_OWORD *)(v87 + 124) = 0u;
      *(_QWORD *)v87 = &off_251C10F50;
      v117 = v87;
      std::__assoc_sub_state::__attach_future[abi:nn180100](v87);
      v126[0] = (void **)&v117;
      v127 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt32s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned int>>)::{lambda(llvm::Error)#1},llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt32s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned int>>)::{lambda(llvm::Error)#1},void>::Callbacks
           + 2;
      (*(void (**)(uint64_t, char *, int64_t, void ***))(*(_QWORD *)v86 + 32))(v86, v85, (v73 - v85) >> 4, v126);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v126);
      std::__assoc_state<llvm::MSVCPError>::move((std::__assoc_sub_state *)v87, &v116);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 - 1, v88));
      if (!v89)
        (*(void (**)(uint64_t))(*(_QWORD *)v87 + 16))(v87);
      *a3 = (uint64_t)v116;
      std::promise<llvm::MSVCPError>::~promise(&v117);
      if (v72)
        operator delete(v72);
    }
    if (v50)
      operator delete(v50);
  }
  llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v120);
  v126[0] = (void **)&v100;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v126);
  v126[0] = (void **)&v102;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v126);
  v126[0] = (void **)&v104;
  std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](v126);
LABEL_119:
  llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v124);
  v126[0] = (void **)&v109;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v126);
  v126[0] = (void **)&v111;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](v126);
  if (__p)
  {
    v114 = __p;
    operator delete(__p);
  }
}

uint64_t *llvm::orc::SymbolLookupSet::add(uint64_t *a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD v19[5];

  v5 = *a2;
  *a2 = 0;
  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - *a1;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v19[4] = v6;
    v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v6, v14);
    v16 = &v15[16 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[16 * v17];
    *(_QWORD *)v16 = v5;
    *((_DWORD *)v16 + 2) = a3;
    v19[2] = v16 + 16;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(a1, v19);
    v10 = a1[1];
    std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_QWORD *)v9 = v5;
    *(_DWORD *)(v9 + 8) = a3;
    v10 = v9 + 16;
  }
  a1[1] = v10;
  return a1;
}

_QWORD *llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(uint64_t a1)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = &result[v4];
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while ((*result | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++result;
      v6 -= 8;
      if (!v6)
        return v5;
    }
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a2);
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
  abort();
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void llvm::orc::ExecutorProcessControl::intern(uint64_t a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  std::mutex *v7;
  unint64_t **v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;

  v7 = *(std::mutex **)(a1 + 8);
  std::mutex::lock(v7);
  v12 = 0;
  v8 = llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::try_emplace<int>((llvm::StringMapImpl *)&v7[1], a2, a3, &v12);
  v9 = *v8;
  *a4 = *v8;
  if ((unint64_t)v9 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v10 = v9 + 1;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  std::mutex::unlock(v7);
}

unint64_t **llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::try_emplace<int>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, int *a4)
{
  uint64_t v8;
  unint64_t **i;
  unint64_t *v10;
  unint64_t *v11;
  _QWORD *v12;
  unint64_t *v13;
  char *v14;
  unint64_t v15;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (unint64_t **)(*(_QWORD *)a1 + 8 * v8);
  v10 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v10)
  {
    while (!v10 || v10 == (unint64_t *)-8)
    {
      v11 = i[1];
      ++i;
      v10 = v11;
    }
    return i;
  }
  v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = (char *)(v12 + 2);
  if (a3)
    memcpy(v12 + 2, a2, a3);
  v14[a3] = 0;
  v15 = *a4;
  *v13 = a3;
  v13[1] = v15;
  *i = v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v8));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = *(uint64_t **)result;
    v3 = *(_QWORD *)result + 16 * v1;
    do
    {
      v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        v7 = v2[1];
        if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          v4 = *v2;
        }
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v2 += 2;
    }
    while (v2 != (uint64_t *)v3);
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD **)a1;
  if ((_DWORD)v2)
  {
    v4 = &v3[v2];
    do
    {
      if ((unint64_t)(*v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(*v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      ++v3;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)a1;
  }
  MEMORY[0x24BD1B398](v3, 8);
  return a1;
}

uint64_t std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a2);
}

uint64_t *std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    *(_QWORD *)(v4 - 16) = 0;
    v4 -= 16;
    v5 = *(_QWORD *)(v2 - 16);
    v2 -= 16;
    *(_QWORD *)v4 = v5;
    *(_QWORD *)v2 = 0;
    *(_DWORD *)(v4 + 8) = *(_DWORD *)(v2 + 8);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 16);
    v3 -= 16;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

char *std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)v7 = *a2;
      if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
      }
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      a2 += 2;
      v7 += 16;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v7 = (unint64_t *)(v5 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void std::__assoc_state<llvm::MSVCPError>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__assoc_state<llvm::MSVCPError>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t std::__throw_future_error[abi:nn180100]()
{
  std::__libcpp_verbose_abort("future_error was thrown in -fno-exceptions mode");
  return std::__assoc_sub_state::__attach_future[abi:nn180100]();
}

void std::__assoc_sub_state::__attach_future[abi:nn180100](uint64_t a1)
{
  std::mutex *v2;
  int v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 136);
  if ((v3 & 2) != 0)
  {
    v6 = std::__throw_future_error[abi:nn180100]();
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt64s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned long long>>)::{lambda(llvm::Error)#1}>(v6);
  }
  else
  {
    v4 = (unint64_t *)(a1 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    *(_DWORD *)(a1 + 136) = v3 | 2;
    std::mutex::unlock(v2);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt64s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned long long>>)::{lambda(llvm::Error)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v3 = *a1;
  v5 = v2;
  std::promise<llvm::MSVCPError>::set_value(v3, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

void std::promise<llvm::MSVCPError>::set_value(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  if (!v2)
    v2 = std::__throw_future_error[abi:nn180100]();
  std::__assoc_state<llvm::MSVCPError>::set_value<llvm::MSVCPError>(v2, a2);
}

void std::__assoc_state<llvm::MSVCPError>::set_value<llvm::MSVCPError>(uint64_t a1, _QWORD *a2)
{
  std::mutex *v4;
  uint64_t v5;
  _QWORD *v6;
  std::exception_ptr v7;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v7.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v7), v5))
  {
    v6 = (_QWORD *)std::__throw_future_error[abi:nn180100]();
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v6);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 144) = *a2;
    *a2 = 0;
    *(_DWORD *)(a1 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
    std::mutex::unlock(v4);
  }
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = a1;
  v2 = a1[3];
  if (v2 >= 8)
  {
    if ((v2 & 4) != 0)
    {
      if ((v2 & 2) == 0)
        a1 = (_QWORD *)*a1;
      (*(void (**)(_QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 16))(a1);
    }
    if ((v2 & 2) == 0)
      MEMORY[0x24BD1B398](*v1, v1[2]);
  }
  return v1;
}

void std::__assoc_state<llvm::MSVCPError>::move(std::__assoc_sub_state *a1@<X0>, std::__assoc_sub_state_vtbl **a2@<X8>)
{
  void *ptr;
  std::exception_ptr v5;
  uint64_t *v6;
  std::exception_ptr v7;
  std::exception_ptr v8;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v8.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v8);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v7, &a1->__exception_);
    v5.__ptr_ = &v7;
    std::rethrow_exception(v5);
    std::promise<llvm::MSVCPError>::~promise(v6);
  }
  else
  {
    *a2 = a1[1].__vftable;
    a1[1].__vftable = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

uint64_t *std::promise<llvm::MSVCPError>::~promise(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  const std::error_category *v7;
  _BYTE v8[32];
  std::exception_ptr v9;

  v2 = *a1;
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 136) & 1) == 0)
    {
      v9.__ptr_ = 0;
      v3 = *(_QWORD *)(v2 + 16);
      std::exception_ptr::~exception_ptr(&v9);
      v2 = *a1;
      if (!v3 && *(uint64_t *)(v2 + 8) >= 1)
      {
        v7 = std::future_category();
        MEMORY[0x24BD1B17C](v8, 4, v7);
        abort();
      }
    }
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  }
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::ExecutorProcessControl::MemoryAccess::writeUInt32s(llvm::ArrayRef<llvm::orc::tpctypes::UIntWrite<unsigned int>>)::{lambda(llvm::Error)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v3 = *a1;
  v5 = v2;
  std::promise<llvm::MSVCPError>::set_value(v3, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

void std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        std::__destroy_at[abi:nn180100]<xojit::ReplacementManager::DylibState::PendingDefinition,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<xojit::ReplacementManager::DylibState::PendingDefinition,0>(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v2 = (std::__shared_weak_count *)a1[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = a1[2];
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  v8 = a1[1];
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  if ((unint64_t)(*a1 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v11 = (unint64_t *)(*a1 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
  }
}

void std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v7 = (unint64_t *)(v5 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

unsigned int *llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 1, result));
  if (result && v1 == 1)
  {
    llvm::orc::ResourceTracker::~ResourceTracker((llvm::orc::ResourceTracker *)result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::SmallVectorImpl<char>::append<char const*,void>(_QWORD *result, _BYTE *__src, _BYTE *a3)
{
  _QWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[1];
  v8 = v7 + a3 - __src;
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    v7 = v5[1];
  }
  if (__src != a3)
  {
    result = memcpy((void *)(*v5 + v7), __src, v6);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::grow(a1, v8);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v6 = *a2;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 0;
  *(_DWORD *)(v6 + 28) = 104;
  result = 0.0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_QWORD *)(v6 + 96) = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 104 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 104 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void **v19;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(104 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 104 * v10;
      do
      {
        *result = -4096;
        result += 13;
        v11 -= 104;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = 0;
      do
      {
        v13 = *(_QWORD *)(v4 + v12);
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::LookupBucketFor<llvm::orc::JITDylib *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v13, &v19);
          v14 = v19;
          v15 = v4 + v12;
          *v19 = *(void **)(v4 + v12);
          v14[1] = *(void **)(v4 + v12 + 8);
          *((_OWORD *)v14 + 1) = *(_OWORD *)(v4 + v12 + 16);
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)(v4 + v12 + 8) = 0;
          *(_DWORD *)(v15 + 24) = 0;
          v14[4] = 0;
          v14[5] = 0;
          v14[6] = 0;
          *((_OWORD *)v14 + 2) = *(_OWORD *)(v4 + v12 + 32);
          v14[6] = *(void **)(v4 + v12 + 48);
          *(_QWORD *)(v4 + v12 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0;
          *(_QWORD *)(v15 + 48) = 0;
          v14[7] = 0;
          v14[8] = 0;
          v14[9] = 0;
          *(_OWORD *)(v14 + 7) = *(_OWORD *)(v4 + v12 + 56);
          v14[9] = *(void **)(v4 + v12 + 72);
          *(_QWORD *)(v4 + v12 + 56) = 0;
          *(_QWORD *)(v15 + 64) = 0;
          *(_QWORD *)(v15 + 72) = 0;
          v14[10] = 0;
          v14[11] = 0;
          v14[12] = 0;
          v16 = v4 + v12 + 80;
          *((_OWORD *)v14 + 5) = *(_OWORD *)v16;
          v14[12] = *(void **)(v4 + v12 + 96);
          *(_QWORD *)v16 = 0;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          ++*(_DWORD *)(a1 + 8);
          v19 = (void **)v16;
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v19);
          v19 = (void **)(v4 + v12 + 56);
          std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](&v19);
          v19 = (void **)(v4 + v12 + 32);
          std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v19);
          llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::~StringMap(v4 + v12 + 8);
        }
        v12 += 104;
      }
      while (104 * v3 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    v18 = 104 * v17;
    do
    {
      *result = -4096;
      result += 13;
      v18 -= 104;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD **)(*(_QWORD *)a1 + v3);
        if (v4 != (_QWORD *)-8 && v4 != 0)
          llvm::StringMapEntry<xojit::ReplacementManager::DylibState::ObjectState>::Destroy<llvm::MallocAllocator>(v4);
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void llvm::StringMapEntry<xojit::ReplacementManager::DylibState::ObjectState>::Destroy<llvm::MallocAllocator>(_QWORD *a1)
{
  uint64_t v2;

  v2 = (uint64_t)(a1 + 1);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)(a1 + 10));
  MEMORY[0x24BD1B398](a1[10], 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll((uint64_t)(a1 + 7));
  MEMORY[0x24BD1B398](a1[7], 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)(a1 + 4));
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::destroyAll(v2);
  MEMORY[0x24BD1B398](a1[1], 8);
  JUMPOUT(0x24BD1B398);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  v7 = *a3;
  *result = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  *((_WORD *)result + 4) = 0;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -8;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -8;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      v15 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, a2, &v15);
      v10 = v15;
      if ((unint64_t)(*v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v11 = (unint64_t *)(*v15 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
      }
      *v10 = 0;
      *v10 = *a2;
      *a2 = 0;
      *((_WORD *)v10 + 4) = *((_WORD *)a2 + 4);
      ++*(_DWORD *)(v5 + 8);
      v9 = *a2;
    }
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v13 = (unint64_t *)(v9 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
    a2 += 2;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::destroyAll(uint64_t result)
{
  unsigned int v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = 104 * v1;
    v3 = (void **)(*(_QWORD *)result + 56);
    do
    {
      if (((unint64_t)*(v3 - 7) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = v3 + 3;
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v4);
        v4 = v3;
        std::vector<xojit::ReplacementManager::DylibState::PendingDefinition>::__destroy_vector::operator()[abi:nn180100](&v4);
        v4 = v3 - 3;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v4);
        result = llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::~StringMap((uint64_t)(v3 - 6));
      }
      v3 += 13;
      v2 -= 104;
    }
    while (v2);
  }
  return result;
}

xojit::ReplacementManager::Plugin *xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager::Plugin *this, xojit::ReplacementManager *a2)
{
  _QWORD *v4;

  *(_QWORD *)this = &off_251C10EA8;
  *((_QWORD *)this + 1) = a2;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  if (*(_DWORD *)(*((_QWORD *)a2 + 1) + 64) == 38)
  {
    xojit::ReplacementManager::Plugin::initializeMCDisassembler(this, (uint64_t *)&v4);
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v4);
    if (v4)
      (*(void (**)(_QWORD *))(*v4 + 8))(v4);
  }
  return this;
}

_QWORD *llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(_QWORD **a1)
{
  _QWORD *result;
  _QWORD *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  llvm::handleErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v2, &v3);
  result = v2;
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

void xojit::ReplacementManager::Plugin::initializeMCDisassembler(xojit::ReplacementManager::Plugin *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  uint64_t MCSubtargetInfo;
  uint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t (*MCRegInfo)(std::string *);
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  void *v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  uint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  uint64_t MCAsmInfo;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::MCContext *v34;
  uint64_t (*v35)(_QWORD *, _QWORD, _QWORD);
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  __int128 v39;
  void *v40[2];
  __int128 v41;
  void *v42[2];
  void *v43[2];
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47[2];
  std::string v48;
  std::string v49;
  std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  std::string v53;
  __int128 v54;
  uint64_t v55;

  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  if (*(char *)(v4 + 63) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v4 + 40), *(_QWORD *)(v4 + 48));
  else
    v53 = *(std::string *)(v4 + 40);
  v54 = *(_OWORD *)(v4 + 64);
  v55 = *(_QWORD *)(v4 + 80);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v5 = llvm::TargetRegistry::lookupTarget((uint64_t)&v53, (uint64_t)&v50);
  if (v5)
  {
    v6 = (_QWORD *)v5;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v53;
    else
      v7 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      size = v53.__r_.__value_.__l.__size_;
    MCSubtargetInfo = llvm::Target::createMCSubtargetInfo(v5, (llvm::formatv_object_base *)v7, (llvm::formatv_object_base *)size, (uint64_t)"", 0, (uint64_t)"", 0);
    v10 = *((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = MCSubtargetInfo;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      MCSubtargetInfo = *((_QWORD *)this + 2);
    }
    if (!MCSubtargetInfo)
      goto LABEL_61;
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v53;
    else
      v11 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v12 = v53.__r_.__value_.__l.__size_;
    MCRegInfo = llvm::Target::createMCRegInfo((uint64_t)v6, (llvm::formatv_object_base *)v11, (llvm::formatv_object_base *)v12);
    v14 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = MCRegInfo;
    if (v14)
    {
      std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)this + 24, v14);
      MCRegInfo = (uint64_t (*)(std::string *))*((_QWORD *)this + 3);
    }
    if (!MCRegInfo)
      goto LABEL_61;
    v15 = (uint64_t (*)(void))v6[8];
    if (v15)
      v16 = v15();
    else
      v16 = 0;
    v24 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v16;
    if (v24)
    {
      MEMORY[0x24BD1B3A4](v24, 0x10F0C40CB53E019);
      v16 = *((_QWORD *)this + 4);
    }
    if (!v16)
      goto LABEL_61;
    v25 = (uint64_t (*)(void))v6[9];
    if (v25)
      v26 = v25();
    else
      v26 = 0;
    v27 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v26;
    if (v27)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      v26 = *((_QWORD *)this + 5);
    }
    if (!v26)
    {
LABEL_61:
      std::operator+<char>();
      getErrorErrorCat();
      v49.__r_.__value_.__r.__words[0] = 3;
      v49.__r_.__value_.__l.__size_ = (std::string::size_type)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, (uint64_t *)&v49, a2);
      if ((SBYTE7(v39) & 0x80000000) == 0)
        goto LABEL_64;
      v23 = __p[0];
      goto LABEL_63;
    }
    LOWORD(__p[0]) = 2048;
    *(void **)((char *)__p + 4) = (void *)2;
    HIDWORD(__p[1]) = 2;
    v39 = 0u;
    *(_OWORD *)v40 = 0u;
    v41 = 0u;
    *(_OWORD *)v42 = 0u;
    *(_OWORD *)v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v53;
    else
      v28 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v29 = HIBYTE(v53.__r_.__value_.__r.__words[2]);
    else
      v29 = v53.__r_.__value_.__l.__size_;
    MCAsmInfo = llvm::Target::createMCAsmInfo((uint64_t)v6, *((_QWORD *)this + 3), (llvm::formatv_object_base *)v28, (llvm::formatv_object_base *)v29, (uint64_t)__p);
    v31 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = MCAsmInfo;
    if (v31)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      MCAsmInfo = *((_QWORD *)this + 6);
    }
    if (!MCAsmInfo)
      goto LABEL_75;
    v33 = *((_QWORD *)this + 2);
    v32 = *((_QWORD *)this + 3);
    v34 = (llvm::MCContext *)operator new();
    llvm::MCContext::MCContext((uint64_t)v34, (__int128 *)&v53, MCAsmInfo, v32, v33, 0, 0, 1, 0, 0);
    std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)this + 7, v34);
    v35 = (uint64_t (*)(_QWORD *, _QWORD, _QWORD))v6[16];
    if (v35)
      v36 = v35(v6, *((_QWORD *)this + 2), *((_QWORD *)this + 7));
    else
      v36 = 0;
    v37 = *((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = v36;
    if (v37)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      v36 = *((_QWORD *)this + 8);
    }
    if (v36)
    {
      *a2 = 0;
    }
    else
    {
LABEL_75:
      std::operator+<char>();
      getErrorErrorCat();
      v48.__r_.__value_.__r.__words[0] = 3;
      v48.__r_.__value_.__l.__size_ = (std::string::size_type)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)&v49, (uint64_t *)&v48, a2);
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v49.__r_.__value_.__l.__data_);
    }
    v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v46 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v49);
    if (SHIBYTE(v44) < 0)
      operator delete(v43[1]);
    if (SHIBYTE(v43[0]) < 0)
      operator delete(v42[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[1]);
    if (SHIBYTE(v40[0]) < 0)
    {
      v23 = (void *)v39;
      goto LABEL_63;
    }
  }
  else
  {
    std::operator+<char>();
    v17 = std::string::append(&v48, "': ", 3uLL);
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if (v52 >= 0)
      v19 = (const std::string::value_type *)&v50;
    else
      v19 = v50;
    if (v52 >= 0)
      v20 = HIBYTE(v52);
    else
      v20 = v51;
    v21 = std::string::append(&v49, v19, v20);
    v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    *(_QWORD *)&v39 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    v47[0] = 3;
    v47[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, v47, a2);
    if (SBYTE7(v39) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      v23 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_63:
      operator delete(v23);
    }
  }
LABEL_64:
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void xojit::ReplacementManager::Plugin::~Plugin(xojit::ReplacementManager::Plugin *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_251C10EA8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)this + 7, 0);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    MEMORY[0x24BD1B3A4](v5, 0x10F0C40CB53E019);
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)this + 24, v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)this = &off_251C10EA8;
  v2 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::unique_ptr<llvm::MCContext>::reset[abi:nn180100]((llvm::MCContext **)this + 7, 0);
  v3 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    MEMORY[0x24BD1B3A4](v5, 0x10F0C40CB53E019);
  v6 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v6)
    std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100]((uint64_t)this + 24, v6);
  v7 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  JUMPOUT(0x24BD1B3A4);
}

void xojit::ReplacementManager::Plugin::modifyPassConfig(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::mutex *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  int Key;
  __int128 *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v8 = (std::mutex *)(a1[1] + 16);
  std::mutex::lock(v8);
  v9 = a1[1] + 88;
  *(_QWORD *)&v34 = *a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(v9, (uint64_t *)&v34);
  v11 = v10;
  v12 = (uint64_t *)(v10 + 8);
  v15 = *(uint64_t **)(a3 + 96);
  v14 = a3 + 96;
  v13 = v15;
  v16 = *(char *)(v14 + 23);
  if (v16 >= 0)
    v17 = (uint64_t *)v14;
  else
    v17 = v13;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(v14 + 23);
  else
    v18 = *(_QWORD *)(v14 + 8);
  Key = llvm::StringMapImpl::FindKey(v12, v17, v18);
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(v11 + 16))
  {
    v20 = (__int128 *)*a4;
    *(_QWORD *)&v34 = a1;
    *((_QWORD *)&v34 + 1) = a2;
    v36 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
        + 2;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4, v20, &v34);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v34);
    v21 = a4[14];
    *(_QWORD *)&v32 = a1;
    *((_QWORD *)&v32 + 1) = a2;
    v33 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},void>::Callbacks
        + 2;
    v22 = a4[13];
    if (v22 >= v21)
    {
      v24 = a4[12];
      v25 = (uint64_t)(v22 - v24) >> 5;
      if ((unint64_t)(v25 + 1) >> 59)
        abort();
      v26 = v21 - v24;
      v27 = v26 >> 4;
      if (v26 >> 4 <= (unint64_t)(v25 + 1))
        v27 = v25 + 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
        v28 = 0x7FFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      v37 = a4 + 14;
      if (v28)
        v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v28);
      else
        v29 = 0;
      v30 = (uint64_t)&v29[32 * v25];
      *(_QWORD *)&v34 = v29;
      *((_QWORD *)&v34 + 1) = v30;
      v36 = &v29[32 * v28];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30, &v32);
      v35 = v30 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v34);
      v23 = a4[13];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v34);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[13], &v32);
      v23 = v22 + 32;
    }
    a4[13] = v23;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v32);
    if (a1[8] && a1[5])
    {
      v31 = (__int128 *)*a4;
      *(_QWORD *)&v34 = a1;
      v36 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#3},xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#3},void>::Callbacks
          + 2;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4, v31, &v34);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v34);
    }
  }
  std::mutex::unlock(v8);
}

void xojit::ReplacementManager::Plugin::notifyEmitted(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void xojit::ReplacementManager::Plugin::notifyFailed(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void xojit::ReplacementManager::Plugin::notifyRemovingResources(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::ObjectLinkingLayer::Plugin::getSyntheticSymbolDependencies(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
}

_QWORD **llvm::handleErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>@<X0>(_QWORD **result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *result;
  if (*result)
  {
    *result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
    {
      *a2 = 0;
      v4 = (uint64_t *)v3[1];
      v5 = (uint64_t *)v3[2];
      if (v4 != v5)
      {
        v6 = 0;
        do
        {
          v9 = v6;
          v7 = *v4;
          *v4 = 0;
          if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v7 + 48))(v7, &llvm::ErrorInfoBase::ID))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
            v7 = 0;
          }
          v8 = v7;
          llvm::ErrorList::join(&v9, &v8, &v10);
          v6 = v10;
          *a2 = v10;
          v10 = 0;
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (v9)
            (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
          ++v4;
        }
        while (v4 != v5);
      }
      return (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
    }
    else
    {
      result = (_QWORD **)(*(uint64_t (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorInfoBase::ID);
      if ((_DWORD)result)
      {
        *a2 = 0;
        return (_QWORD **)(*(uint64_t (**)(_QWORD *))(*v3 + 8))(v3);
      }
      else
      {
        *a2 = v3;
      }
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t llvm::ErrorList::join@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  int64x2_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64x2_t v54;
  char *v55;
  _QWORD *v56;

  result = *a1;
  v7 = *a2;
  if (!result)
  {
LABEL_33:
    *a3 = v7;
    *a2 = 0;
    return result;
  }
  if (!v7)
  {
    *a3 = result;
LABEL_57:
    *a1 = 0;
    return result;
  }
  if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)result + 48))(result, &llvm::ErrorList::ID))
  {
    v8 = (_QWORD *)*a1;
    if (*a2)
    {
      result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorList::ID);
      v9 = (_QWORD *)*a2;
      if ((_DWORD)result)
      {
        *a2 = 0;
        v10 = (uint64_t *)v9[1];
        v11 = (uint64_t *)v9[2];
        if (v10 == v11)
          goto LABEL_26;
        v12 = v8 + 3;
        v13 = (_QWORD *)v8[2];
        do
        {
          if ((unint64_t)v13 >= *v12)
          {
            v15 = v8[1];
            v16 = ((uint64_t)v13 - v15) >> 3;
            if ((unint64_t)(v16 + 1) >> 61)
              goto LABEL_59;
            v17 = *v12 - v15;
            v18 = v17 >> 2;
            if (v17 >> 2 <= (unint64_t)(v16 + 1))
              v18 = v16 + 1;
            if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            v56 = v8 + 3;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v8 + 3), v19);
            else
              v20 = 0;
            v21 = &v20[8 * v16];
            v22 = &v20[8 * v19];
            v55 = v22;
            v23 = *v10;
            *v10 = 0;
            *(_QWORD *)v21 = v23;
            v13 = v21 + 8;
            v54.i64[1] = (uint64_t)(v21 + 8);
            v25 = (_QWORD *)v8[1];
            v24 = (_QWORD *)v8[2];
            if (v24 == v25)
            {
              v27 = vdupq_n_s64((unint64_t)v24);
            }
            else
            {
              do
              {
                v26 = *--v24;
                *v24 = 0;
                *((_QWORD *)v21 - 1) = v26;
                v21 -= 8;
              }
              while (v24 != v25);
              v27 = *(int64x2_t *)(v8 + 1);
              v13 = (_QWORD *)v54.i64[1];
              v22 = v55;
            }
            v8[1] = v21;
            v8[2] = v13;
            v54 = v27;
            v28 = (char *)v8[3];
            v8[3] = v22;
            v55 = v28;
            v53 = v27.i64[0];
            result = std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v53);
          }
          else
          {
            v14 = *v10;
            *v10 = 0;
            *v13++ = v14;
          }
          v8[2] = v13;
          ++v10;
        }
        while (v10 != v11);
        if (v9)
LABEL_26:
          result = (*(uint64_t (**)(_QWORD *))(*v9 + 8))(v9);
LABEL_56:
        *a3 = *a1;
        goto LABEL_57;
      }
    }
    else
    {
      v9 = 0;
    }
    *a2 = 0;
    result = (uint64_t)(v8 + 3);
    v35 = v8[3];
    v36 = (_QWORD *)v8[2];
    if ((unint64_t)v36 >= v35)
    {
      v38 = v8[1];
      v39 = ((uint64_t)v36 - v38) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
LABEL_59:
        abort();
      v40 = v35 - v38;
      v41 = v40 >> 2;
      if (v40 >> 2 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
        v42 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      v56 = v8 + 3;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(result, v42);
      else
        v43 = 0;
      v44 = &v43[8 * v39];
      v45 = &v43[8 * v42];
      v55 = v45;
      *(_QWORD *)v44 = v9;
      v37 = v44 + 8;
      v54.i64[1] = (uint64_t)(v44 + 8);
      v47 = (_QWORD *)v8[1];
      v46 = (_QWORD *)v8[2];
      if (v46 == v47)
      {
        v49 = vdupq_n_s64((unint64_t)v46);
      }
      else
      {
        do
        {
          v48 = *--v46;
          *v46 = 0;
          *((_QWORD *)v44 - 1) = v48;
          v44 -= 8;
        }
        while (v46 != v47);
        v49 = *(int64x2_t *)(v8 + 1);
        v37 = (_QWORD *)v54.i64[1];
        v45 = v55;
      }
      v8[1] = v44;
      v8[2] = v37;
      v54 = v49;
      v50 = (char *)v8[3];
      v8[3] = v45;
      v55 = v50;
      v53 = v49.i64[0];
      result = std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v53);
    }
    else
    {
      *v36 = v9;
      v37 = v36 + 1;
    }
    v8[2] = v37;
    goto LABEL_56;
  }
  if (*a2 && (*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorList::ID))
  {
    v29 = (uint64_t *)(*a2 + 8);
    v30 = (uint64_t *)*v29;
    v53 = *a1;
    *a1 = 0;
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::insert(v29, v30, &v53);
    result = v53;
    v53 = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v7 = *a2;
    goto LABEL_33;
  }
  v31 = (_QWORD *)operator new();
  v32 = *a1;
  *a1 = 0;
  v51 = *a2;
  v52 = v32;
  *a2 = 0;
  v33 = llvm::ErrorList::ErrorList(v31, &v52, &v51);
  v53 = 0;
  *a3 = (uint64_t)v33;
  std::unique_ptr<llvm::ErrorList>::reset[abi:nn180100](&v53, 0);
  v34 = v51;
  v51 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  result = v52;
  v52 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::insert(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v12 = *a1;
    v13 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v13 >> 61)
      abort();
    v14 = ((uint64_t)a2 - v12) >> 3;
    v15 = v8 - v12;
    v16 = v15 >> 2;
    if (v15 >> 2 <= v13)
      v16 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    v25 = v7;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v17);
    else
      v18 = 0;
    v21 = v18;
    v22 = &v18[8 * v14];
    v23 = v22;
    v24 = &v18[8 * v17];
    std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::push_back(&v21, a3);
    v4 = (uint64_t *)std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__swap_out_circular_buffer(a1, &v21, v4);
    std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v21);
  }
  else if (a2 == (uint64_t *)v6)
  {
    v19 = *a3;
    *a3 = 0;
    *a2 = v19;
    a1[1] = (uint64_t)(a2 + 1);
  }
  else
  {
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 1));
    v10 = *a3;
    *a3 = 0;
    v11 = *v4;
    *v4 = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return v4;
}

_QWORD *std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__move_range(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      v10 = *v9;
      *v9++ = 0;
      *v8++ = v10;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(a2, v7, v6);
}

_QWORD *std::__split_buffer<std::unique_ptr<llvm::ErrorInfoBase>>::push_back(_QWORD *result, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int64x2_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = result;
  v4 = (uint64_t *)result[2];
  if (v4 == (uint64_t *)result[3])
  {
    v6 = *result;
    v5 = (uint64_t *)result[1];
    v7 = (uint64_t)v5 - *v3;
    if ((unint64_t)v5 <= *v3)
    {
      v14 = (uint64_t)v4 - v6;
      v13 = v14 == 0;
      v15 = v14 >> 2;
      if (v13)
        v16 = 1;
      else
        v16 = v15;
      v33 = v3[4];
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v33, v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)v3[1];
      v21 = v3[2] - (_QWORD)v20;
      if (v21)
      {
        v22 = v21 >> 3;
        v23 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * v22;
        v25 = &v17[8 * (v16 >> 2)];
        do
        {
          v26 = *v20;
          *v20++ = 0;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
        v27 = *(int64x2_t *)(v3 + 1);
      }
      else
      {
        v27 = vdupq_n_s64((unint64_t)v20);
        v23 = &v17[8 * (v16 >> 2)];
      }
      v30 = *v3;
      *v3 = v17;
      v3[1] = v19;
      v31 = v27;
      v28 = v3[3];
      v3[2] = v23;
      v3[3] = &v17[8 * v18];
      v32 = v28;
      result = (_QWORD *)std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v30);
      v4 = (uint64_t *)v3[2];
    }
    else
    {
      v8 = v7 >> 3;
      v9 = v7 >> 3 < -1;
      v10 = (v7 >> 3) + 2;
      if (v9)
        v11 = v10;
      else
        v11 = v8 + 1;
      v12 = v11 >> 1;
      result = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(v5, v4, &v5[-(v11 >> 1)]);
      v3[1] -= 8 * v12;
      v3[2] = v4;
    }
  }
  v29 = *a2;
  *a2 = 0;
  *v4 = v29;
  v3[2] += 8;
  return result;
}

uint64_t std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__swap_out_circular_buffer(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *--v7;
      *v7 = 0;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      v11 = *a3;
      *a3++ = 0;
      *v10++ = v11;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v12 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

_QWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v8 = *--v6;
      v7 = v8;
      *v6 = 0;
      v10 = *--a3;
      v9 = v10;
      *a3 = v7;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,std::unique_ptr<llvm::ErrorInfoBase> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *v4 = 0;
      v7 = *a3;
      *a3 = v6;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      ++v4;
      ++a3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_QWORD *llvm::ErrorList::ErrorList(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  int64x2_t v31;
  char *v32;
  uint64_t v34;
  int64x2_t v35;
  char *v36;
  _QWORD *v37;

  a1[1] = 0;
  v6 = a1 + 1;
  *a1 = off_251C12908;
  a1[2] = 0;
  a1[3] = 0;
  v7 = (uint64_t)(a1 + 3);
  v37 = a1 + 3;
  v8 = operator new(8uLL);
  v9 = v8;
  *v8 = *a2;
  v10 = v8 + 1;
  *a2 = 0;
  v11 = (_QWORD *)a1[2];
  v12 = (_QWORD *)*v6;
  if (v11 == (_QWORD *)*v6)
  {
    v15 = vdupq_n_s64((unint64_t)v11);
    v13 = v8;
  }
  else
  {
    v13 = v8;
    do
    {
      v14 = *--v11;
      *v11 = 0;
      *--v13 = v14;
    }
    while (v11 != v12);
    v15 = *(int64x2_t *)v6;
  }
  a1[1] = v13;
  a1[2] = v10;
  v35 = v15;
  v16 = (char *)a1[3];
  a1[3] = v10;
  v36 = v16;
  v34 = v15.i64[0];
  std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v34);
  v17 = a1[3];
  a1[2] = v10;
  if ((unint64_t)v10 >= v17)
  {
    v20 = ((uint64_t)v10 - *v6) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      abort();
    v21 = v17 - *v6;
    v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1))
      v22 = v20 + 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    v37 = (_QWORD *)v7;
    if (v23)
      v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v23);
    else
      v24 = 0;
    v25 = &v24[8 * v20];
    v26 = &v24[8 * v23];
    v36 = v26;
    v27 = *a3;
    *a3 = 0;
    *(_QWORD *)v25 = v27;
    v19 = v25 + 8;
    v35.i64[1] = (uint64_t)(v25 + 8);
    v29 = (_QWORD *)a1[1];
    v28 = (_QWORD *)a1[2];
    if (v28 == v29)
    {
      v31 = vdupq_n_s64((unint64_t)v28);
    }
    else
    {
      do
      {
        v30 = *--v28;
        *v28 = 0;
        *((_QWORD *)v25 - 1) = v30;
        v25 -= 8;
      }
      while (v28 != v29);
      v31 = *(int64x2_t *)v6;
      v19 = (_QWORD *)v35.i64[1];
      v26 = v36;
    }
    a1[1] = v25;
    a1[2] = v19;
    v35 = v31;
    v32 = (char *)a1[3];
    a1[3] = v26;
    v36 = v32;
    v34 = v31.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v34);
  }
  else
  {
    v18 = *a3;
    *a3 = 0;
    v9[1] = v18;
    v19 = v9 + 2;
  }
  a1[2] = v19;
  return a1;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

uint64_t *std::unique_ptr<llvm::ErrorList>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 8);
    std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v3);
    return (uint64_t *)MEMORY[0x24BD1B3A4](v2, 0xA1C4030951706);
  }
  return result;
}

void std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::make_error<llvm::StringError,std::string,std::error_code>(llvm::formatv_object_base *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::formatv_object_base *v9;
  __int16 v10;

  v6 = operator new();
  v10 = 260;
  v9 = a1;
  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(&v9, (std::string *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 1;
  *a3 = v6;
}

uint64_t llvm::Target::createMCSubtargetInfo(uint64_t a1, llvm::formatv_object_base *a2, llvm::formatv_object_base *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v7)(std::string *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  llvm::formatv_object_base *v14[4];
  __int16 v15;
  std::string __p[2];

  v7 = *(uint64_t (**)(std::string *, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 88);
  if (!v7)
    return 0;
  v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  llvm::Triple::Triple(__p, v14);
  v12 = v7(__p, a4, a5, a6, a7);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  return v12;
}

uint64_t (*llvm::Target::createMCRegInfo(uint64_t a1, llvm::formatv_object_base *a2, llvm::formatv_object_base *a3))(std::string *)
{
  uint64_t (*v3)(std::string *);
  llvm::formatv_object_base *v5[4];
  __int16 v6;
  std::string __p[2];

  v3 = *(uint64_t (**)(std::string *))(a1 + 80);
  if (v3)
  {
    v6 = 261;
    v5[0] = a2;
    v5[1] = a3;
    llvm::Triple::Triple(__p, v5);
    v3 = (uint64_t (*)(std::string *))v3(__p);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  return v3;
}

uint64_t llvm::Target::createMCAsmInfo(uint64_t a1, uint64_t a2, llvm::formatv_object_base *a3, llvm::formatv_object_base *a4, uint64_t a5)
{
  uint64_t (*v5)(uint64_t, std::string *, uint64_t);
  uint64_t v8;
  llvm::formatv_object_base *v10[4];
  __int16 v11;
  std::string __p[2];

  v5 = *(uint64_t (**)(uint64_t, std::string *, uint64_t))(a1 + 48);
  if (!v5)
    return 0;
  v11 = 261;
  v10[0] = a3;
  v10[1] = a4;
  llvm::Triple::Triple(__p, v10);
  v8 = v5(a2, __p, a5);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  return v8;
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

void std::default_delete<llvm::MCRegisterInfo>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    MEMORY[0x24BD1B398](*(_QWORD *)(a2 + 184), 4);
    MEMORY[0x24BD1B398](*(_QWORD *)(a2 + 160), 4);
    JUMPOUT(0x24BD1B3A4);
  }
}

llvm::MCContext *std::unique_ptr<llvm::MCContext>::reset[abi:nn180100](llvm::MCContext **a1, llvm::MCContext *a2)
{
  llvm::MCContext *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::MCContext::~MCContext(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

__int128 *std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  __int128 *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v11 = *a1;
    v12 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v12 >> 59)
      abort();
    v13 = ((uint64_t)a2 - v11) >> 5;
    v14 = v8 - v11;
    v15 = v14 >> 4;
    if (v14 >> 4 <= v12)
      v15 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v16 = 0x7FFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    v23 = v7;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v7, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = &v17[32 * v13];
    v21 = v20;
    v22 = &v17[32 * v16];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::push_back(&v19, a3);
    v4 = (__int128 *)std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a1, &v19, v4);
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v19);
  }
  else if (a2 == (__int128 *)v6)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)a2, a3);
    a1[1] = (uint64_t)(v4 + 2);
  }
  else
  {
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 == a3)
    {
      return a3;
    }
    else
    {
      v10 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v4);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, a3);
    }
  }
  return v4;
}

__int128 *std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__move_range(uint64_t a1, __int128 *a2, unint64_t a3, uint64_t a4)
{
  __int128 *v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v10;
  uint64_t v11;
  char v13;

  v6 = *(__int128 **)(a1 + 8);
  v7 = (__int128 *)((char *)v6 + (_QWORD)a2 - a4);
  v8 = (uint64_t)v6;
  if ((unint64_t)v7 < a3)
  {
    v10 = (__int128 *)((char *)v6 + (_QWORD)a2 - a4);
    v8 = (uint64_t)v6;
    do
    {
      v11 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v8, v10);
      v10 += 2;
      v8 = v11 + 32;
    }
    while ((unint64_t)v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::push_back(_QWORD *a1, __int128 *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t result;
  __int128 *v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = (__int128 *)a1[2];
  if (v4 == (__int128 *)a1[3])
  {
    v5 = (__int128 *)a1[1];
    v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (__int128 *)*a1)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *a1) >> 4;
      v14 = a1[4];
      v30 = a1[4];
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v14, v13);
      v16 = &v15[32 * (v13 >> 2)];
      v18 = &v15[32 * v17];
      v19 = (__int128 *)a1[1];
      v20 = a1[2] - (_QWORD)v19;
      if (v20)
      {
        v21 = &v16[v20 & 0xFFFFFFFFFFFFFFE0];
        v22 = 32 * (v20 >> 5);
        v23 = (uint64_t)v16;
        do
        {
          v23 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v23, v19)
              + 32;
          v19 += 2;
          v22 -= 32;
        }
        while (v22);
        v24 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v24 = vdupq_n_s64((unint64_t)v19);
        v21 = v16;
      }
      v27 = (__int128 *)*a1;
      *a1 = v15;
      a1[1] = v16;
      v28 = v24;
      v25 = a1[3];
      a1[2] = v21;
      a1[3] = v18;
      v29 = v25;
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v27);
      v4 = (__int128 *)a1[2];
    }
    else
    {
      v7 = v6 >> 5;
      v8 = v6 >> 5 < -1;
      v9 = (v6 >> 5) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>((uint64_t)&v27, v5, v4, &v5[-2 * (v10 >> 1)]);
      v4 = v12;
      a1[1] -= 32 * v11;
      a1[2] = v12;
    }
  }
  result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v4, a2);
  a1[2] += 32;
  return result;
}

uint64_t std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, __int128 *a3)
{
  __int128 *v3;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = (__int128 *)*a1;
  v8 = v6;
  if (v7 != a3)
  {
    v9 = a3;
    v8 = a2[1];
    do
    {
      v9 -= 2;
      v8 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v8 - 32, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = (__int128 *)a1[1];
  v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v11, v3);
      v3 += 2;
      v11 += 32;
    }
    while (v3 != v10);
    v8 = a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;

  *(_QWORD *)(a1 + 24) = 0;
  v3 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 24) = v3;
  if (*((_QWORD *)a2 + 3) >= 8uLL)
  {
    if ((v3 & 2) != 0 && (v3 & 4) != 0)
    {
      (*(void (**)(uint64_t, __int128 *))((v3 & 0xFFFFFFFFFFFFFFF8) + 8))(a1, a2);
    }
    else
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
    }
    *((_QWORD *)a2 + 3) = 0;
  }
  return a1;
}

__int128 *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 *v6;
  __int128 *v7;
  __int128 *v8;
  _QWORD *v9;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = v6 - 2;
      v8 = a4 - 2;
      if (v6 != a4)
      {
        v9 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)a4 - 4);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v9, v7);
      }
      a4 = v8;
      v6 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a2);
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *,llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)> *>(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 *v5;
  _QWORD *v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        v7 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a4);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v7, v5);
      }
      v5 += 2;
      a4 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  llvm::StringMapImpl *v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  unint64_t v34;
  unint64_t v35;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t **v68;
  uint64_t v69;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  __int16 v75;
  uint64_t *v76;
  unint64_t *v77;
  _QWORD *v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t **v92;
  _QWORD *v93;
  uint64_t v94;
  std::string *v95;
  std::string::size_type v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  char v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t **v117;
  char *v118;
  unint64_t *v119;
  unint64_t **v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  std::string *v127;
  std::string::size_type v128;
  _QWORD *v129;
  uint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t *v134;
  unint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *v143;
  unint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t SectionByName;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t ***v156;
  uint64_t ***v157;
  uint64_t **v158;
  unint64_t *v159;
  unint64_t v160;
  unint64_t *v161;
  unint64_t v162;
  uint64_t v163;
  int v164;
  char v165;
  _QWORD *v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t *v169;
  unint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t *v178;
  uint64_t v179;
  std::string *v180;
  std::string::size_type v181;
  uint64_t v182;
  unint64_t *v183;
  unint64_t v184;
  uint64_t *v185;
  unint64_t *v186;
  unint64_t v187;
  __int16 v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v191;
  char v192;
  char v193;
  uint64_t v194;
  std::string *v195;
  std::string::size_type v196;
  _QWORD *v197;
  uint64_t v198;
  unint64_t *v199;
  unint64_t v200;
  unint64_t *v201;
  unint64_t *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  __int128 *v206;
  uint64_t v207;
  unint64_t *v208;
  unint64_t v209;
  uint64_t ***v210;
  uint64_t ***v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t **v214;
  uint64_t v215;
  uint64_t v216;
  std::string *v217;
  std::string::size_type v218;
  _QWORD *v219;
  uint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t *v223;
  unint64_t *v224;
  unint64_t v225;
  uint64_t *v226;
  unint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unint64_t *v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t *v235;
  unint64_t *v236;
  unint64_t v237;
  uint64_t v238;
  int v239;
  uint64_t v240;
  unint64_t *v241;
  unint64_t *v242;
  unint64_t *v243;
  uint64_t v244;
  std::string *v245;
  uint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  size_t v249;
  uint64_t v250;
  uint64_t v251;
  _QWORD *v252;
  _QWORD **v253;
  uint64_t v254;
  _QWORD **v255;
  _QWORD **v256;
  unint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  unsigned int v263;
  uint64_t v264;
  int v265;
  unint64_t *v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  uint64_t v279;
  __int128 v280;
  unint64_t *v281;
  std::string::size_type *v282;
  std::string::size_type *v283;
  uint64_t v284;
  std::string::size_type *v285;
  std::string::size_type *v286;
  unint64_t *v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  unint64_t *v291;
  uint64_t *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t *v296;
  unint64_t *v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t Section;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  _QWORD *v305;
  unint64_t *v306;
  std::mutex *v307;
  unint64_t **v308;
  unint64_t *v309;
  unint64_t *v310;
  uint64_t v311;
  int v312;
  uint64_t v314;
  _QWORD v315[2];
  int v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int v319;
  uint64_t v320;
  uint64_t v321;
  int v322;
  void *v323;
  char *v324;
  char *v325;
  void *v326;
  char *v327;
  char *v328;
  void *v329;
  char *v330;
  char *v331;
  std::string v332;
  std::string v333;
  std::string v334;
  unint64_t *v335[4];
  __int16 v336;
  unint64_t *v337[4];
  __int16 v338;
  std::string __p;
  __int16 v340;
  uint64_t v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  __int16 v345;
  __int128 v346;
  __int128 v347;
  __int16 v348;
  _QWORD *v349;
  uint64_t *v350;
  uint64_t v351;
  unsigned int v352;
  unint64_t *v353;
  uint64_t v354;
  unsigned int v355;
  unint64_t *v356;
  uint64_t v357;
  unsigned int v358;
  __int128 v359;
  std::string *v360;
  __int128 v361;
  std::string *v362;
  __int128 v363;
  std::string *v364;
  __int128 v365;
  std::string *v366;
  __int128 v367;
  uint64_t v368;
  __int128 v369;
  uint64_t v370;
  __int128 v371;
  uint64_t v372;
  uint64_t v373;

  v373 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v4 = (uint64_t *)a1[1];
  v307 = (std::mutex *)(*(_QWORD *)(*a1 + 8) + 16);
  std::mutex::lock(v307);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 32);
  v301 = v4;
  *(_QWORD *)&v359 = *v4;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(v6 + 88, (uint64_t *)&v359);
  v9 = v8;
  v10 = (llvm::StringMapImpl *)(v8 + 1);
  v11 = *(char *)(a2 + 119);
  if (v11 >= 0)
    v12 = (uint64_t *)(a2 + 96);
  else
    v12 = *(uint64_t **)(a2 + 96);
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 119);
  else
    v13 = *(_QWORD *)(a2 + 104);
  v14 = *llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::try_emplace<>(v10, v12, v13);
  v15 = *(_QWORD *)(v5 + 8);
  v16 = *(_QWORD *)(v15 + 80);
  *(_QWORD *)(v15 + 80) = v16 + 1;
  std::to_string(&v332, v16);
  v329 = 0;
  v330 = 0;
  v331 = 0;
  v326 = 0;
  v327 = 0;
  v328 = 0;
  v323 = 0;
  v324 = 0;
  v325 = 0;
  v314 = a2;
  if (!*(_DWORD *)(a2 + 192))
    goto LABEL_191;
  v18 = *(unsigned int *)(a2 + 200);
  if ((_DWORD)v18)
  {
    v19 = 24 * v18;
    v20 = *(_QWORD **)(a2 + 184);
    while (*v20 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v20 += 3;
      v19 -= 24;
      if (!v19)
        goto LABEL_191;
    }
  }
  else
  {
    v20 = *(_QWORD **)(a2 + 184);
  }
  v21 = *(_QWORD *)(a2 + 184) + 24 * v18;
  if (v20 == (_QWORD *)v21)
  {
LABEL_191:
    v320 = 0;
    v321 = 0;
    v322 = 0;
    v317 = 0;
    v318 = 0;
    v319 = 0;
  }
  else
  {
    v305 = v9;
    do
    {
      v22 = v20[2];
      v23 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v22 + 56);
      v25 = *(_QWORD *)(v22 + 56) + 8 * *(unsigned int *)(v22 + 72);
      if ((_QWORD *)v25 != v23)
      {
        v26 = v23;
        v27 = v24;
        while (1)
        {
          v28 = (_QWORD *)*v26;
          v29 = *(_QWORD *)(*v26 + 8);
          if (!v29)
            goto LABEL_74;
          v30 = *(unint64_t **)v22;
          v31 = *(_QWORD *)(v22 + 8);
          v32 = v28[3];
          if ((v32 & 0xC00000000000000) == 0x800000000000000 && *(_BYTE *)*v28 == 108)
            goto LABEL_74;
          if ((v32 & 0x2000000000000000) != 0)
          {
            v37 = v330;
            if (v330 >= v331)
            {
              v39 = (v330 - (_BYTE *)v329) >> 3;
              if ((unint64_t)(v39 + 1) >> 61)
                goto LABEL_416;
              v40 = (v331 - (_BYTE *)v329) >> 2;
              if (v40 <= v39 + 1)
                v40 = v39 + 1;
              if ((unint64_t)(v331 - (_BYTE *)v329) >= 0x7FFFFFFFFFFFFFF8)
                v41 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v41 = v40;
              if (v41)
                v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v331, v41);
              else
                v42 = 0;
              v49 = &v42[8 * v39];
              *(_QWORD *)v49 = v28;
              v38 = v49 + 8;
              v51 = (char *)v329;
              v50 = v330;
              if (v330 != v329)
              {
                do
                {
                  v52 = *((_QWORD *)v50 - 1);
                  v50 -= 8;
                  *((_QWORD *)v49 - 1) = v52;
                  v49 -= 8;
                }
                while (v50 != v51);
                v50 = (char *)v329;
              }
              v329 = v49;
              v330 = v38;
              v331 = &v42[8 * v41];
              if (v50)
                operator delete(v50);
            }
            else
            {
              *(_QWORD *)v330 = v28;
              v38 = v37 + 8;
            }
            v330 = v38;
            goto LABEL_74;
          }
          if (v29 >= 3)
          {
            v33 = *(_WORD *)*v28 == 9311 && *(_BYTE *)(*v28 + 2) == 115;
            if (v33 && *(_WORD *)(*v28 + v29 - 2) == 30036)
              break;
          }
          if (v31 == 23)
          {
            if (bswap64(*v30) == 0x5F5F444154412C5FLL
              && bswap64(v30[1]) == 0x5F6F626A635F696DLL
              && bswap64(*(unint64_t *)((char *)v30 + 15)) == 0x6D616765696E666FLL)
            {
              goto LABEL_74;
            }
LABEL_50:
            v43 = v324;
            if (v324 < v325)
            {
              *(_QWORD *)v324 = v28;
              v44 = v43 + 8;
LABEL_73:
              v324 = v44;
              goto LABEL_74;
            }
            v45 = (v324 - (_BYTE *)v323) >> 3;
            if (!((unint64_t)(v45 + 1) >> 61))
            {
              v46 = (v325 - (_BYTE *)v323) >> 2;
              if (v46 <= v45 + 1)
                v46 = v45 + 1;
              if ((unint64_t)(v325 - (_BYTE *)v323) >= 0x7FFFFFFFFFFFFFF8)
                v47 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v47 = v46;
              if (v47)
                v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v325, v47);
              else
                v48 = 0;
              v53 = &v48[8 * v45];
              *(_QWORD *)v53 = v28;
              v44 = v53 + 8;
              v55 = (char *)v323;
              v54 = v324;
              if (v324 != v323)
              {
                do
                {
                  v56 = *((_QWORD *)v54 - 1);
                  v54 -= 8;
                  *((_QWORD *)v53 - 1) = v56;
                  v53 -= 8;
                }
                while (v54 != v55);
                v54 = (char *)v323;
              }
              v323 = v53;
              v324 = v44;
              v325 = &v48[8 * v47];
              if (v54)
                operator delete(v54);
              goto LABEL_73;
            }
LABEL_416:
            abort();
          }
          if (v31 != 16)
            goto LABEL_50;
          v35 = *v30;
          v34 = v30[1];
          if (v35 != 0x5F2C545845545F5FLL || v34 != 0x676E69727473635FLL)
            goto LABEL_50;
LABEL_74:
          while (++v26 != v27)
          {
            if ((*v26 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_78;
          }
          v26 = v27;
LABEL_78:
          if (v26 == (_QWORD *)v25)
            goto LABEL_97;
        }
        v57 = v327;
        if (v327 < v328)
        {
          *(_QWORD *)v327 = v28;
          v58 = v57 + 8;
LABEL_96:
          v327 = v58;
          goto LABEL_74;
        }
        v59 = (v327 - (_BYTE *)v326) >> 3;
        if (!((unint64_t)(v59 + 1) >> 61))
        {
          v60 = (v328 - (_BYTE *)v326) >> 2;
          if (v60 <= v59 + 1)
            v60 = v59 + 1;
          if ((unint64_t)(v328 - (_BYTE *)v326) >= 0x7FFFFFFFFFFFFFF8)
            v61 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v61 = v60;
          if (v61)
            v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v328, v61);
          else
            v62 = 0;
          v63 = &v62[8 * v59];
          *(_QWORD *)v63 = v28;
          v58 = v63 + 8;
          v65 = (char *)v326;
          v64 = v327;
          if (v327 != v326)
          {
            do
            {
              v66 = *((_QWORD *)v64 - 1);
              v64 -= 8;
              *((_QWORD *)v63 - 1) = v66;
              v63 -= 8;
            }
            while (v64 != v65);
            v64 = (char *)v326;
          }
          v326 = v63;
          v327 = v58;
          v328 = &v62[8 * v61];
          if (v64)
            operator delete(v64);
          goto LABEL_96;
        }
        goto LABEL_416;
      }
LABEL_97:
      v20 += 3;
      a2 = v314;
      v67 = v305;
      if (v20 == (_QWORD *)v21)
        break;
      while (*v20 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v20 += 3;
        if (v20 == (_QWORD *)v21)
          goto LABEL_102;
      }
    }
    while (v20 != (_QWORD *)v21);
LABEL_102:
    v320 = 0;
    v321 = 0;
    v322 = 0;
    v317 = 0;
    v318 = 0;
    v319 = 0;
    if (v329 != v330)
    {
      Section = llvm::jitlink::LinkGraph::createSection(v314, (uint64_t)"__TEXT,__stubs", 14, 5);
      v299 = llvm::jitlink::LinkGraph::createSection(v314, (uint64_t)"__DATA,__stubptrs", 17, 3);
      v68 = (unint64_t **)v329;
      v308 = (unint64_t **)v330;
      if (v329 != v330)
      {
        v303 = v14 + 80;
        do
        {
          v337[0] = *v68;
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), *(uint64_t **)v337[0], v337[0][1], v335);
          v69 = *v335[0];
          v345 = 773;
          v341 = (uint64_t)(v335[0] + 2);
          v342 = v69;
          v343 = "$";
          *(_QWORD *)&v346 = &v341;
          *(_QWORD *)&v347 = &v332;
          v348 = 1026;
          *(_QWORD *)&v359 = &v346;
          v360 = (std::string *)"$body";
          WORD4(v361) = 770;
          llvm::Twine::str((llvm::formatv_object_base **)&v359, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), (uint64_t *)p_p, size, &v353);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v72 = llvm::jitlink::LinkGraph::addDefinedSymbol(a2, v337[0][2], v337[0][3] & 0x1FFFFFFFFFFFFFFLL, (uint64_t)(v353 + 2), *v353, v337[0][4], (v337[0][3] & 0x200000000000000) != 0, 1, 1, 0);
          v73 = v72[3];
          v74 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v320, (uint64_t *)&v353);
          if ((v73 & 0x200000000000000) != 0)
            v75 = 8704;
          else
            v75 = 0x2000;
          *((_WORD *)v74 + 4) = v75;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct(&v317, v337)[1] = v72;
          v76 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v14 + 8, (uint64_t *)v335)+ 1;
          if (*v76)
          {
            v77 = v337[0];
            if ((v337[0][3] & 0xC00000000000000) == 0x800000000000000)
            {
              v78 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v303, (uint64_t *)v335);
              v79 = v337[0];
              v80 = (unint64_t *)v78[1];
              v81 = *v80;
              *v337[0] = (unint64_t)(v80 + 2);
              v79[1] = v81;
              v77 = v337[0];
            }
            llvm::jitlink::LinkGraph::makeExternal(a2, (uint64_t)v77);
            v82 = v335[0];
            if ((unint64_t)v335[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v83 = v335[0] + 1;
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 + 1, v83));
            }
            v85 = (unint64_t *)*v76;
            if ((unint64_t)(*v76 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v86 = v85 + 1;
              do
                v87 = __ldaxr(v86);
              while (__stlxr(v87 + 1, v86));
            }
            v88 = v353;
            if ((unint64_t)v353 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v89 = v353 + 1;
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 + 1, v89));
            }
            v92 = (unint64_t **)v67[8];
            v91 = v67[9];
            if ((unint64_t)v92 >= v91)
            {
              v111 = (_QWORD *)v67[7];
              v112 = 0xCCCCCCCCCCCCCCCDLL * (v92 - (unint64_t **)v111) + 1;
              if (v112 > 0x666666666666666)
                goto LABEL_416;
              v113 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v91 - (_QWORD)v111) >> 3);
              if (2 * v113 > v112)
                v112 = 2 * v113;
              if (v113 >= 0x333333333333333)
                v114 = 0x666666666666666;
              else
                v114 = v112;
              if (v114 > 0x666666666666666)
                std::__throw_bad_array_new_length[abi:nn180100]();
              v115 = 5 * v114;
              v116 = (char *)operator new(40 * v114);
              v117 = (unint64_t **)&v116[8 * (v92 - (unint64_t **)v111)];
              *v117 = v82;
              v117[1] = v85;
              v118 = &v116[8 * v115];
              v93 = v117 + 5;
              v117[3] = 0;
              v117[4] = 0;
              v117[2] = v88;
              if (v92 == v111)
              {
                v67 = v305;
                v305[7] = v117;
                v305[8] = v93;
                v305[9] = v118;
              }
              else
              {
                v67 = v305;
                do
                {
                  *(v117 - 5) = 0;
                  v117 -= 5;
                  v119 = *(v92 - 5);
                  v92 -= 5;
                  *v117 = v119;
                  *v92 = 0;
                  v117[1] = 0;
                  v117[1] = v92[1];
                  v92[1] = 0;
                  v117[2] = 0;
                  v117[2] = v92[2];
                  v92[2] = 0;
                  *(_OWORD *)(v117 + 3) = *(_OWORD *)(v92 + 3);
                  v92[3] = 0;
                  v92[4] = 0;
                }
                while (v92 != v111);
                v92 = (unint64_t **)v305[7];
                v120 = (unint64_t **)v305[8];
                v305[7] = v117;
                v305[8] = v93;
                v305[9] = v118;
                while (v120 != v92)
                {
                  v120 -= 5;
                  std::__destroy_at[abi:nn180100]<xojit::ReplacementManager::DylibState::PendingDefinition,0>(v120);
                }
              }
              if (v92)
                operator delete(v92);
            }
            else
            {
              *v92 = v82;
              v92[1] = v85;
              v93 = v92 + 5;
              v92[3] = 0;
              v92[4] = 0;
              v92[2] = v88;
            }
            v67[8] = v93;
          }
          else
          {
            v94 = *v335[0];
            v345 = 773;
            v341 = (uint64_t)(v335[0] + 2);
            v342 = v94;
            v343 = "$";
            *(_QWORD *)&v346 = &v341;
            *(_QWORD *)&v347 = &v332;
            v348 = 1026;
            *(_QWORD *)&v359 = &v346;
            v360 = (std::string *)"$stub_ptr";
            WORD4(v361) = 770;
            llvm::Twine::str((llvm::formatv_object_base **)&v359, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v95 = &__p;
            else
              v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v96 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v96 = __p.__r_.__value_.__l.__size_;
            llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), (uint64_t *)v95, v96, &v356);
            if ((unint64_t)(*v76 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v97 = (unint64_t *)(*v76 + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
            }
            *v76 = (uint64_t)v356;
            v356 = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v356 = 0;
            *(_QWORD *)&v359 = &v356;
            *((_QWORD *)&v359 + 1) = 8;
            *(_QWORD *)&v346 = -8;
            v341 = 8;
            __p.__r_.__value_.__r.__words[0] = 0;
            v99 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, v299, (uint64_t *)&v359, (uint64_t *)&v346, (unint64_t *)&v341, (uint64_t *)&__p);
            llvm::jitlink::Block::addEdge(v99, 2, 0, (uint64_t)v72, 0);
            v100 = *v76 + 16;
            v101 = *(_QWORD *)*v76;
            v102 = *(unsigned int *)(v314 + 168);
            v103 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v314, 40, 3);
            *v103 = v100;
            v103[1] = v101;
            a2 = v314;
            v103[2] = v99;
            v103[3] = 0x400000000000000;
            v103[4] = v102;
            v104 = v99[2] + 56;
            *(_QWORD *)&v346 = v103;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v104, &v346, (uint64_t)&v359);
            *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v320, v76)+ 4) = 0;
            if (*(_DWORD *)(v314 + 144) == 38)
            {
              *(_QWORD *)&v359 = &llvm::jitlink::x86_64::PointerJumpStubContent;
              *((_QWORD *)&v359 + 1) = 6;
              *(_QWORD *)&v346 = -6;
              v341 = 1;
              __p.__r_.__value_.__r.__words[0] = 0;
              v105 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v314, Section, (uint64_t *)&v359, (uint64_t *)&v346, (unint64_t *)&v341, (uint64_t *)&__p);
              v106 = v105;
              v107 = 7;
              v108 = 2;
              v109 = (uint64_t)v103;
              v110 = -4;
            }
            else
            {
              *(_QWORD *)&v359 = &llvm::jitlink::aarch64::PointerJumpStubContent;
              *((_QWORD *)&v359 + 1) = 12;
              *(_QWORD *)&v346 = -12;
              v341 = 4;
              __p.__r_.__value_.__r.__words[0] = 0;
              v106 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v314, Section, (uint64_t *)&v359, (uint64_t *)&v346, (unint64_t *)&v341, (uint64_t *)&__p);
              llvm::jitlink::Block::addEdge(v106, 12, 0, (uint64_t)v103, 0);
              v105 = v106;
              v107 = 13;
              v108 = 4;
              v109 = (uint64_t)v103;
              v110 = 0;
            }
            llvm::jitlink::Block::addEdge(v105, v107, v108, v109, v110);
            v121 = v337[0];
            v122 = v106[4];
            v123 = *(_QWORD *)(v337[0][2] + 16);
            v124 = v337[0][3] & 0xFE00000000000000;
            v337[0][2] = (unint64_t)v106;
            v121[3] = v124;
            v121[4] = v122;
            if (v106[2] != v123)
            {
              *(_QWORD *)&v359 = v121;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v123 + 56, &v359);
              v125 = v106[2] + 56;
              *(_QWORD *)&v346 = v121;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v125, &v346, (uint64_t)&v359);
              v124 = v337[0][3];
            }
            if ((v124 & 0xC00000000000000) != 0x800000000000000)
              goto LABEL_183;
            v126 = *v335[0];
            v345 = 773;
            v341 = (uint64_t)(v335[0] + 2);
            v342 = v126;
            v343 = "$";
            *(_QWORD *)&v346 = &v341;
            *(_QWORD *)&v347 = &v332;
            v348 = 1026;
            *(_QWORD *)&v359 = &v346;
            v360 = (std::string *)"$promoted";
            WORD4(v361) = 770;
            llvm::Twine::str((llvm::formatv_object_base **)&v359, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = &__p;
            else
              v127 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v128 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v128 = __p.__r_.__value_.__l.__size_;
            llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), (uint64_t *)v127, v128, &v356);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            v129 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v303, (uint64_t *)v335);
            v130 = v129[1];
            if ((unint64_t)(v130 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v131 = (unint64_t *)(v130 + 8);
              do
                v132 = __ldaxr(v131);
              while (__stlxr(v132 - 1, v131));
            }
            v133 = v356;
            v129[1] = v356;
            if ((unint64_t)v133 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v134 = v133 + 1;
              do
                v135 = __ldaxr(v134);
              while (__stlxr(v135 + 1, v134));
            }
            *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v320, (uint64_t *)&v356)+ 4) = 0x2000;
            v136 = v356 + 2;
            v137 = *v356;
            v138 = v106[4];
            v139 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v314, 40, 3);
            *v139 = v136;
            v139[1] = v137;
            v139[2] = v106;
            v139[3] = 0x2400000000000000;
            v139[4] = v138;
            v140 = v106[2] + 56;
            *(_QWORD *)&v346 = v139;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v140, &v346, (uint64_t)&v359);
            if ((unint64_t)v356 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v141 = v356 + 1;
              do
                v142 = __ldaxr(v141);
              while (__stlxr(v142 - 1, v141));
            }
          }
          a2 = v314;
LABEL_183:
          if ((unint64_t)v353 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v143 = v353 + 1;
            do
              v144 = __ldaxr(v143);
            while (__stlxr(v144 - 1, v143));
          }
          if ((unint64_t)v335[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v145 = v335[0] + 1;
            do
              v146 = __ldaxr(v145);
            while (__stlxr(v146 - 1, v145));
          }
          ++v68;
        }
        while (v68 != v308);
      }
    }
  }
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"__LD,__compact_unwind", 21, v17);
  if (SectionByName)
  {
    v148 = SectionByName;
    v149 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
    v151 = *(_QWORD *)(v148 + 32) + 8 * *(unsigned int *)(v148 + 48);
    if ((_QWORD *)v151 != v149)
    {
      v152 = v149;
      v153 = v150;
      do
      {
        v154 = *(_QWORD **)(*v152 + 40);
        v155 = *(_QWORD **)(*v152 + 48);
        while (v154 != v155)
        {
          *(_QWORD *)&v346 = *v154;
          *(_QWORD *)&v359 = 0;
          if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(&v317, &v346, &v359))
          {
            if ((_QWORD)v359 != v317 + 16 * v319)
              *v154 = *(_QWORD *)(v359 + 8);
          }
          v154 += 4;
        }
        while (++v152 != v153)
        {
          if ((*v152 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_205;
        }
        v152 = v153;
LABEL_205:
        ;
      }
      while (v152 != (_QWORD *)v151);
    }
  }
  v157 = (uint64_t ***)v326;
  v156 = (uint64_t ***)v327;
  if (v326 != v327)
  {
    v311 = v14 + 80;
    do
    {
      v158 = *v157;
      llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), **v157, (unint64_t)(*v157)[1], v337);
      *(unint64_t **)&v359 = v337[0];
      if ((unint64_t)v337[0] - 1 >= 0xFFFFFFFFFFFFFFE0)
      {
        *((unint64_t **)&v359 + 1) = v337[0];
      }
      else
      {
        v159 = v337[0] + 1;
        do
          v160 = __ldaxr(v159);
        while (__stlxr(v160 + 1, v159));
        *((unint64_t **)&v359 + 1) = v337[0];
        if ((unint64_t)v337[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v161 = v337[0] + 1;
          do
            v162 = __ldaxr(v161);
          while (__stlxr(v162 + 1, v161));
        }
      }
      *(_QWORD *)&v346 = 0;
      v163 = v359;
      v164 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v14 + 56), *(_DWORD *)(v14 + 72), v359, &v346);
      v165 = v164;
      v166 = (_QWORD *)v346;
      if (v164)
      {
        v167 = *((_QWORD *)&v359 + 1);
      }
      else
      {
        v168 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(v14 + 56, (uint64_t *)&v359, (_QWORD *)v346);
        v166 = v168;
        if ((unint64_t)(*v168 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v169 = (unint64_t *)(*v168 + 8);
          do
            v170 = __ldaxr(v169);
          while (__stlxr(v170 - 1, v169));
          v163 = v359;
        }
        v167 = 0;
        *v168 = v163;
        v168[1] = *((_QWORD *)&v359 + 1);
        v359 = 0uLL;
        v163 = 0;
      }
      if ((unint64_t)(v167 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v171 = (unint64_t *)(v167 + 8);
        do
          v172 = __ldaxr(v171);
        while (__stlxr(v172 - 1, v171));
        v163 = v359;
      }
      if ((unint64_t)(v163 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v173 = (unint64_t *)(v163 + 8);
        do
          v174 = __ldaxr(v173);
        while (__stlxr(v174 - 1, v173));
      }
      v175 = (unint64_t)v158[4];
      if (v175 <= 7)
      {
        v191 = *v337[0];
        v345 = 1283;
        v341 = (uint64_t)"expected async function pointer ";
        v343 = (const char *)(v337[0] + 2);
        v344 = v191;
        *(_QWORD *)&v346 = &v341;
        *(_QWORD *)&v347 = " to have size 8; got ";
        v348 = 770;
        std::to_string(&__p, v175);
        v192 = v348;
        if ((_BYTE)v348)
        {
          if (v348 == 1)
          {
            *(_QWORD *)&v359 = &__p;
            v193 = 1;
            v192 = 4;
          }
          else
          {
            if (HIBYTE(v348) == 1)
            {
              v206 = (__int128 *)v346;
            }
            else
            {
              v192 = 2;
              v206 = &v346;
            }
            *(_QWORD *)&v359 = v206;
            *((_QWORD *)&v359 + 1) = *((_QWORD *)&v346 + 1);
            v360 = &__p;
            v193 = 4;
          }
        }
        else
        {
          v193 = 1;
        }
        BYTE8(v361) = v192;
        BYTE9(v361) = v193;
        getErrorErrorCat();
        v207 = operator new();
        *(_QWORD *)v207 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v359, (std::string *)(v207 + 8));
        *(_QWORD *)(v207 + 32) = 3;
        *(_QWORD *)(v207 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v207 + 48) = 1;
        *a3 = v207;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v176 = (unint64_t)v158[3] & 0xC00000000000000;
        if ((v165 & 1) != 0)
        {
          if (v176 == 0x800000000000000)
          {
            v177 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v311, (uint64_t *)v337)[1];
            v178 = (uint64_t *)*v177;
            *v158 = v177 + 2;
            v158[1] = v178;
          }
          v179 = *v337[0];
          v345 = 773;
          v341 = (uint64_t)(v337[0] + 2);
          v342 = v179;
          v343 = "$";
          *(_QWORD *)&v346 = &v341;
          *(_QWORD *)&v347 = &v332;
          v348 = 1026;
          *(_QWORD *)&v359 = &v346;
          v360 = (std::string *)"$impl";
          WORD4(v361) = 770;
          llvm::Twine::str((llvm::formatv_object_base **)&v359, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v180 = &__p;
          else
            v180 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v181 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v181 = __p.__r_.__value_.__l.__size_;
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), (uint64_t *)v180, v181, v335);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v182 = v166[1];
          if ((unint64_t)(v182 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v183 = (unint64_t *)(v182 + 8);
            do
              v184 = __ldaxr(v183);
            while (__stlxr(v184 - 1, v183));
          }
          v185 = (uint64_t *)v335[0];
          v166[1] = v335[0];
          if ((unint64_t)v185 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v186 = (unint64_t *)(v185 + 1);
            do
              v187 = __ldaxr(v186);
            while (__stlxr(v187 + 1, v186));
            v185 = (uint64_t *)v335[0];
          }
          v188 = *((_BYTE *)llvm::jitlink::LinkGraph::addDefinedSymbol(v314, (uint64_t)v158[2], (unint64_t)v158[3] & 0x1FFFFFFFFFFFFFFLL, (uint64_t)(v185 + 2), *v185, (uint64_t)v158[4], ((unint64_t)v158[3] & 0x200000000000000) != 0, 1, 0, 1)+ 31) & 2;
          *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v320, (uint64_t *)v335)+ 4) = v188 << 8;
          llvm::jitlink::LinkGraph::makeExternal(v314, (uint64_t)v158);
          if ((unint64_t)v335[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v189 = v335[0] + 1;
            do
              v190 = __ldaxr(v189);
            while (__stlxr(v190 - 1, v189));
          }
        }
        else if (v176 == 0x800000000000000)
        {
          v194 = *v337[0];
          v345 = 773;
          v341 = (uint64_t)(v337[0] + 2);
          v342 = v194;
          v343 = "$";
          *(_QWORD *)&v346 = &v341;
          *(_QWORD *)&v347 = &v332;
          v348 = 1026;
          *(_QWORD *)&v359 = &v346;
          v360 = (std::string *)"$promoted";
          WORD4(v361) = 770;
          llvm::Twine::str((llvm::formatv_object_base **)&v359, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v195 = &__p;
          else
            v195 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v196 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v196 = __p.__r_.__value_.__l.__size_;
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), (uint64_t *)v195, v196, v335);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v197 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v311, (uint64_t *)v337);
          v198 = v197[1];
          if ((unint64_t)(v198 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v199 = (unint64_t *)(v198 + 8);
            do
              v200 = __ldaxr(v199);
            while (__stlxr(v200 - 1, v199));
          }
          v201 = v335[0];
          v197[1] = v335[0];
          if ((unint64_t)v201 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v202 = v201 + 1;
            do
              v203 = __ldaxr(v202);
            while (__stlxr(v203 + 1, v202));
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v320, (uint64_t *)v335);
          llvm::jitlink::LinkGraph::addDefinedSymbol(v314, (uint64_t)v158[2], (unint64_t)v158[3] & 0x1FFFFFFFFFFFFFFLL, (uint64_t)(v335[0] + 2), *v335[0], (uint64_t)v158[4], 0, 1, 0, 1);
          if ((unint64_t)v335[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v204 = v335[0] + 1;
            do
              v205 = __ldaxr(v204);
            while (__stlxr(v205 - 1, v204));
          }
        }
      }
      if ((unint64_t)v337[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v208 = v337[0] + 1;
        do
          v209 = __ldaxr(v208);
        while (__stlxr(v209 - 1, v208));
      }
      if (v175 <= 7)
        goto LABEL_386;
      ++v157;
    }
    while (v157 != v156);
  }
  v210 = (uint64_t ***)v323;
  v211 = (uint64_t ***)v324;
  if (v323 != v324)
  {
    v212 = v14 + 32;
    v213 = v14 + 80;
    do
    {
      v214 = *v210;
      llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), **v210, (unint64_t)(*v210)[1], v337);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(v212, (uint64_t *)v337, (uint64_t)&v359);
      v215 = (unint64_t)v214[3] & 0xC00000000000000;
      if ((_BYTE)v360)
      {
        if (v215 == 0x800000000000000)
        {
          v216 = *v337[0];
          v345 = 773;
          v341 = (uint64_t)(v337[0] + 2);
          v342 = v216;
          v343 = "$";
          *(_QWORD *)&v346 = &v341;
          *(_QWORD *)&v347 = &v332;
          v348 = 1026;
          *(_QWORD *)&v359 = &v346;
          v360 = (std::string *)"$promoted";
          WORD4(v361) = 770;
          llvm::Twine::str((llvm::formatv_object_base **)&v359, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v217 = &__p;
          else
            v217 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v218 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v218 = __p.__r_.__value_.__l.__size_;
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), (uint64_t *)v217, v218, v335);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v219 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v213, (uint64_t *)v337);
          v220 = v219[1];
          if ((unint64_t)(v220 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v221 = (unint64_t *)(v220 + 8);
            do
              v222 = __ldaxr(v221);
            while (__stlxr(v222 - 1, v221));
          }
          v223 = v335[0];
          v219[1] = v335[0];
          if ((unint64_t)v223 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v224 = v223 + 1;
            do
              v225 = __ldaxr(v224);
            while (__stlxr(v225 + 1, v224));
          }
          *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v320, (uint64_t *)v335)+ 4) = 0;
          v226 = v214[2];
          v227 = v335[0] + 2;
          v228 = *v335[0];
          v229 = v226[4];
          v230 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v314, 40, 3);
          *v230 = v227;
          v230[1] = v228;
          v230[2] = v226;
          v230[3] = 0x400000000000000;
          v230[4] = v229;
          v231 = v226[2] + 56;
          *(_QWORD *)&v346 = v230;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v231, &v346, (uint64_t)&v359);
          if ((unint64_t)v335[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v232 = v335[0] + 1;
            do
              v233 = __ldaxr(v232);
            while (__stlxr(v233 - 1, v232));
          }
        }
      }
      else
      {
        if (v215 == 0x800000000000000)
        {
          v234 = (_QWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(v213, (uint64_t *)v337)[1];
          v235 = (uint64_t *)*v234;
          *v214 = v234 + 2;
          v214[1] = v235;
        }
        llvm::jitlink::LinkGraph::makeExternal(v314, (uint64_t)v214);
      }
      if ((unint64_t)v337[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v236 = v337[0] + 1;
        do
          v237 = __ldaxr(v236);
        while (__stlxr(v237 - 1, v236));
      }
      ++v210;
    }
    while (v210 != v211);
  }
  v238 = v320;
  v320 = 0;
  v239 = v322;
  v322 = 0;
  *(_QWORD *)&v359 = v238;
  v315[0] = 0;
  v240 = v321;
  v321 = 0;
  *((_QWORD *)&v359 + 1) = v240;
  v315[1] = 0;
  LODWORD(v360) = v239;
  v316 = 0;
  llvm::orc::ExecutionSession::OL_defineMaterializing(v301, (int32x2_t *)&v359, a3);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v359);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v315);
  if (*a3)
    goto LABEL_386;
  v304 = 0;
  v242 = 0;
  v312 = 0;
  v243 = 0;
  v244 = 0;
  v245 = (std::string *)*(unsigned int *)(v314 + 168);
  v359 = llvm::orc::MachOObjCCatListSectionName;
  v361 = llvm::orc::MachOObjCCatList2SectionName;
  v360 = v245;
  v362 = v245;
  v363 = llvm::orc::MachOObjCClassListSectionName;
  v365 = llvm::orc::MachOObjCNLCatListSectionName;
  v364 = v245;
  v366 = v245;
  v367 = llvm::orc::MachOSwift5ProtoSectionName;
  v369 = llvm::orc::MachOSwift5ProtosSectionName;
  v368 = 4;
  v370 = 4;
  v371 = llvm::orc::MachOSwift5TypesSectionName;
  v372 = 4;
  v354 = 0;
  v353 = 0;
  v355 = 0;
  v357 = 0;
  v356 = 0;
  v358 = 0;
  v351 = 0;
  v350 = 0;
  v352 = 0;
  do
  {
    v246 = (uint64_t *)&v359 + 3 * v244;
    v247 = *v246;
    v248 = v246[1];
    v249 = v246[2];
    v250 = llvm::jitlink::LinkGraph::findSectionByName(v314, *v246, v248, v241);
    if (!v250)
      goto LABEL_373;
    v251 = v250;
    v306 = (unint64_t *)v248;
    v309 = (unint64_t *)v247;
    v252 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v250 + 32);
    v254 = *(_QWORD *)(v251 + 32) + 8 * *(unsigned int *)(v251 + 48);
    if ((_QWORD *)v254 == v252)
      goto LABEL_344;
    v255 = (_QWORD **)v252;
    v256 = v253;
    do
    {
      v349 = 0;
      v349 = *v255;
      v257 = v349[4];
      v259 = (char *)v349[5];
      v258 = (char *)v349[6];
      if (v257 != ((v258 - v259) >> 5) * v249)
      {
        v336 = 1283;
        v335[0] = (unint64_t *)"unexpected block size for section ";
        v335[2] = v309;
        v335[3] = v306;
        v337[0] = (unint64_t *)v335;
        v337[2] = (unint64_t *)": ";
        v338 = 770;
        std::to_string(&v334, v257);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v337;
        __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v334;
        v340 = 1026;
        v341 = (uint64_t)&__p;
        v343 = "; expected ";
        v345 = 770;
        std::to_string(&v333, ((uint64_t)(v349[6] - v349[5]) >> 5) * v249);
        *(_QWORD *)&v346 = &v341;
        *(_QWORD *)&v347 = &v333;
        v348 = 1026;
        getErrorErrorCat();
        v290 = operator new();
        *(_QWORD *)v290 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v346, (std::string *)(v290 + 8));
        *(_QWORD *)(v290 + 32) = 3;
        *(_QWORD *)(v290 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v290 + 48) = 1;
        *a3 = v290;
        if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v333.__r_.__value_.__l.__data_);
        if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v334.__r_.__value_.__l.__data_);
        v291 = v353;
        goto LABEL_385;
      }
      if (v259 != v258)
      {
        v260 = 0;
        do
        {
          v261 = *(_QWORD *)v259;
          v259 += 32;
          if ((*(_BYTE *)(*(_QWORD *)(v261 + 16) + 8) & 3) == 0)
            ++v260;
        }
        while (v259 != v258);
        if (v260)
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v356, &v349, (uint64_t)&v346);
          v262 = v349;
          if (v260 != (uint64_t)(v349[6] - v349[5]) >> 5)
          {
            *(_QWORD *)&v346 = 0;
            v263 = v355;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>((uint64_t)v243, v355, (uint64_t)v349, &v346) & 1) == 0)
            {
              if (4 * (int)v354 + 4 >= 3 * v263)
              {
                v265 = 2 * v263;
              }
              else
              {
                if (v263 + ~(_DWORD)v354 - HIDWORD(v354) > v263 >> 3)
                {
LABEL_332:
                  v264 = v346;
                  LODWORD(v354) = v354 + 1;
                  if (*(_QWORD *)v346 != -4096)
                    --HIDWORD(v354);
                  *(_QWORD *)v346 = v262;
                  *(_QWORD *)(v264 + 8) = v260;
                  goto LABEL_335;
                }
                v265 = v263;
              }
              llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::grow((uint64_t)&v353, v265);
              *(_QWORD *)&v346 = 0;
              v243 = v353;
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>((uint64_t)v353, v355, (uint64_t)v262, &v346);
              goto LABEL_332;
            }
          }
        }
      }
LABEL_335:
      while (++v255 != v256)
      {
        if (((unint64_t)*v255 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_339;
      }
      v255 = v256;
LABEL_339:
      ;
    }
    while (v255 != (_QWORD **)v254);
    v242 = v353;
    v312 = v354;
    v304 = v355;
LABEL_344:
    if (v312)
    {
      v266 = v242;
      v267 = v304;
      if (v304)
      {
        v268 = 16 * v304;
        v266 = v242;
        while ((*v266 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v266 += 2;
          v268 -= 16;
          if (!v268)
            goto LABEL_363;
        }
        v267 = v304;
      }
      v269 = &v242[2 * v267];
      if (v266 != v269)
      {
        v270 = (uint64_t *)*v266;
        v302 = v244;
        v310 = v242;
        do
        {
          v271 = (((v270[6] - v270[5]) >> 5) - v266[1]) * v249;
          v272 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v314, v271, 0);
          v273 = *v270;
          v274 = v270[1];
          *(_QWORD *)&v346 = v272;
          *((_QWORD *)&v346 + 1) = v271;
          v341 = v273;
          __p.__r_.__value_.__r.__words[0] = 1 << (v274 >> 3);
          v337[0] = (unint64_t *)(v274 >> 8);
          v275 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v314, v251, (uint64_t *)&v346, &v341, (unint64_t *)&__p, (uint64_t *)v337);
          v276 = v270[5];
          v277 = v270[6];
          if (v276 != v277)
          {
            v278 = v275;
            v279 = 0;
            do
            {
              if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v276 + 16) + 8) & 3) != 0)
              {
                v280 = *(_OWORD *)(v276 + 16);
                v346 = *(_OWORD *)v276;
                v347 = v280;
                DWORD2(v346) = v279;
                llvm::jitlink::Block::addEdge(v278, &v346);
                memcpy((void *)(v272 + v279), (const void *)(v270[3] + *(unsigned int *)(v276 + 8)), v249);
                v279 += v249;
              }
              v276 += 32;
            }
            while (v276 != v277);
          }
          v266 += 2;
          v244 = v302;
          v242 = v310;
          if (v266 == v269)
            break;
          while (1)
          {
            v270 = (uint64_t *)*v266;
            if ((*v266 | 0x1000) != 0xFFFFFFFFFFFFF000)
              break;
            v266 += 2;
            if (v266 == v269)
              goto LABEL_363;
          }
        }
        while (v266 != v269);
      }
    }
LABEL_363:
    v281 = v242;
    v282 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v251 + 56);
    v284 = *(_QWORD *)(v251 + 56) + 8 * *(unsigned int *)(v251 + 72);
    if ((std::string::size_type *)v284 != v282)
    {
      v285 = v282;
      v286 = v283;
      do
      {
        __p.__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = *v285;
        *(_QWORD *)&v346 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 16);
        v341 = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v356, &v346, &v341))llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v350, &__p, (uint64_t)&v346);
        while (++v285 != v286)
        {
          if ((*v285 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_371;
        }
        v285 = v286;
LABEL_371:
        ;
      }
      while (v285 != (std::string::size_type *)v284);
    }
    v242 = v281;
    v243 = v281;
LABEL_373:
    ++v244;
  }
  while (v244 != 7);
  v287 = v242;
  if ((_DWORD)v351)
  {
    if (v352)
    {
      v288 = 8 * v352;
      v289 = v350;
      while ((*v289 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v289;
        v288 -= 8;
        if (!v288)
          goto LABEL_402;
      }
    }
    else
    {
      v289 = v350;
    }
    v292 = &v350[v352];
    if (v289 != v292)
    {
      v293 = *v289;
LABEL_398:
      v294 = *(_QWORD *)(*(_QWORD *)(v293 + 16) + 16) + 56;
      *(_QWORD *)&v346 = v293;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v294, &v346);
      while (++v289 != v292)
      {
        v293 = *v289;
        if ((*v289 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v289 != v292)
            goto LABEL_398;
          break;
        }
      }
    }
  }
LABEL_402:
  if ((_DWORD)v357)
  {
    if (v358)
    {
      v295 = 8 * v358;
      v296 = v356;
      while ((*v296 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        ++v296;
        v295 -= 8;
        if (!v295)
          goto LABEL_415;
      }
    }
    else
    {
      v296 = v356;
    }
    v297 = &v356[v358];
    if (v296 != v297)
    {
      v298 = (_QWORD *)*v296;
LABEL_411:
      llvm::jitlink::LinkGraph::removeBlock(v314, v298);
      while (++v296 != v297)
      {
        v298 = (_QWORD *)*v296;
        if ((*v296 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v296 != v297)
            goto LABEL_411;
          break;
        }
      }
    }
  }
LABEL_415:
  *a3 = 0;
  v291 = v287;
LABEL_385:
  MEMORY[0x24BD1B398](v350, 8);
  MEMORY[0x24BD1B398](v356, 8);
  MEMORY[0x24BD1B398](v291, 8);
LABEL_386:
  MEMORY[0x24BD1B398](v317, 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v320);
  if (v323)
  {
    v324 = (char *)v323;
    operator delete(v323);
  }
  if (v326)
  {
    v327 = (char *)v326;
    operator delete(v326);
  }
  if (v329)
  {
    v330 = (char *)v329;
    operator delete(v329);
  }
  if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332.__r_.__value_.__l.__data_);
  std::mutex::unlock(v307);
}

uint64_t llvm::jitlink::LinkGraph::createSection(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  int v9;
  unint64_t *v10;
  llvm::jitlink::Section *v11;
  uint64_t v12;
  __int128 v14;
  llvm::jitlink::Section *v15;
  _QWORD v16[3];

  v8 = operator new();
  v9 = *(_DWORD *)(a1 + 192);
  *(_QWORD *)v8 = a2;
  *(_QWORD *)(v8 + 8) = a3;
  *(_DWORD *)(v8 + 16) = a4;
  *(_DWORD *)(v8 + 20) = 0;
  *(_DWORD *)(v8 + 24) = v9;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = 0;
  *(_DWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_DWORD *)(v8 + 72) = 0;
  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  v15 = (llvm::jitlink::Section *)v8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::try_emplace<std::unique_ptr<llvm::jitlink::Section>>(a1 + 184, &v14, (uint64_t *)&v15, v10, (uint64_t)v16);
  v11 = v15;
  v12 = *(_QWORD *)(v16[0] + 16);
  v15 = 0;
  if (v11)
  {
    llvm::jitlink::Section::~Section(v11);
    MEMORY[0x24BD1B3A4]();
  }
  return v12;
}

_QWORD *llvm::jitlink::LinkGraph::addDefinedSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10)
{
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  char v24[31];

  v17 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  v18 = v17;
  *v17 = a4;
  v17[1] = a5;
  v19 = 0x1000000000000000;
  if (!a10)
    v19 = 0;
  v20 = 0x2000000000000000;
  if (!a9)
    v20 = 0;
  v17[2] = a2;
  v17[3] = ((unint64_t)(a7 & 1) << 57) | ((unint64_t)(a8 & 3) << 58) | v19 & 0xFE00000000000000 | v20 & 0xFE00000000000000 | a3 & 0x1FFFFFFFFFFFFFFLL;
  v17[4] = a6;
  v21 = *(_QWORD *)(a2 + 16) + 56;
  v23 = v18;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v21, &v23, (uint64_t)v24);
  return v18;
}

void llvm::jitlink::Block::addEdge(_QWORD *a1, char a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;

  v12 = a1[7];
  v10 = (uint64_t)(a1 + 7);
  v11 = v12;
  v13 = *(_QWORD *)(v10 - 8);
  if (v13 >= v12)
  {
    v15 = a1[5];
    v16 = (uint64_t)(v13 - v15) >> 5;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59)
      abort();
    v18 = v11 - v15;
    if (v18 >> 4 > v17)
      v17 = v18 >> 4;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0)
      v19 = 0x7FFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v10, v19);
    else
      v20 = 0;
    v21 = &v20[32 * v16];
    v22 = &v20[32 * v19];
    *(_QWORD *)v21 = a4;
    *((_DWORD *)v21 + 2) = a3;
    *((_QWORD *)v21 + 2) = a5;
    v21[24] = a2;
    v14 = v21 + 32;
    v24 = (char *)a1[5];
    v23 = (char *)a1[6];
    if (v23 != v24)
    {
      do
      {
        v25 = *((_OWORD *)v23 - 2);
        *(_OWORD *)(v21 - 23) = *(_OWORD *)(v23 - 23);
        *((_OWORD *)v21 - 2) = v25;
        v21 -= 32;
        v23 -= 32;
      }
      while (v23 != v24);
      v23 = (char *)a1[5];
    }
    a1[5] = v21;
    a1[6] = v14;
    a1[7] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)v13 = a4;
    *(_DWORD *)(v13 + 8) = a3;
    *(_QWORD *)(v13 + 16) = a5;
    v14 = (char *)(v13 + 32);
    *(_BYTE *)(v13 + 24) = a2;
  }
  a1[6] = v14;
}

uint64_t llvm::jitlink::LinkGraph::makeExternal(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v12;
  _QWORD v13[3];

  v4 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v4 + 8) & 2) != 0)
  {
    v13[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(a1 + 232, v13);
    v9 = *(_QWORD **)(a2 + 16);
    v10 = v9[1] & 0xFFFFFFFFFFFFFFFDLL;
    *v9 = 0;
    v9[1] = v10;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 16) + 56;
    v13[0] = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v5, v13);
    v6 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
    v7 = v6[1] & 0xFFFFFFFFFFFFFFFCLL;
    *v6 = 0;
    v6[1] = v7;
    v8 = *(_QWORD *)(a2 + 24) & 0xE200000000000000;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v8;
  }
  v12 = a2;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 208, &v12, (uint64_t)v13);
}

uint64_t llvm::jitlink::LinkGraph::findSectionByName(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  int v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;

  v7[0] = a2;
  v7[1] = a3;
  v8 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 184), (uint64_t)v7, &v8, a4);
  result = 0;
  if (v5)
  {
    if (v8 != *(_QWORD *)(a1 + 184) + 24 * *(unsigned int *)(a1 + 200))
      return *(_QWORD *)(v8 + 16);
  }
  return result;
}

uint64_t *llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  char *v11;
  char *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (uint64_t *)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == -8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = (char *)operator new(a3 + 105, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = v11 + 104;
  if (a3)
    memcpy(v11 + 104, a2, a3);
  v13[a3] = 0;
  *(_QWORD *)v12 = a3;
  *(_OWORD *)(v12 + 8) = 0u;
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *i = (uint64_t)v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (uint64_t *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6)); !*i || *i == -8; ++i)
    ;
  return i;
}

BOOL llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(char *a1, size_t __n, void *__s2, uint64_t a4)
{
  if (__s2 == (void *)-2)
    return a1 + 2 == 0;
  if (__s2 == (void *)-1)
    return a1 + 1 == 0;
  if (__n != a4)
    return 0;
  if (__n)
    return memcmp(a1, __s2, __n) == 0;
  return 1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::try_emplace<std::unique_ptr<llvm::jitlink::Section>>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v14, a4);
  v10 = v14;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v14);
    v10 = (_QWORD *)result;
    *(_OWORD *)result = *a2;
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)(result + 16) = v12;
    v11 = 1;
  }
  v13 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v13;
  *(_BYTE *)(a5 + 16) = v11;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 isEqual;
  _BOOL4 v17;
  uint64_t v18;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8), (uint64_t)a3, a4);
    v10 = v7 + 24 * v9;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v10, *(_QWORD *)(v10 + 8)))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (*(_QWORD *)v10 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = *(_QWORD *)v10 == -2;
        if (v14)
          v12 = v10;
        v18 = v12;
        v15 = v13 + 1;
        v9 = (v9 + v13) & v8;
        v10 = v7 + 24 * v9;
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v10, *(_QWORD *)(v10 + 8));
        v12 = v18;
        v17 = isEqual;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  llvm::jitlink::Section **v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(llvm::jitlink::Section ***)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::moveFromOldBuckets((llvm::jitlink::Section *)a1, v4, &v4[3 * v3], v10);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    do
    {
      *result = xmmword_24AA2AC20;
      result = (_OWORD *)((char *)result + 24);
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

llvm::jitlink::Section *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::moveFromOldBuckets(llvm::jitlink::Section *result, llvm::jitlink::Section **a2, llvm::jitlink::Section **a3, unint64_t *a4)
{
  llvm::jitlink::Section *v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  llvm::jitlink::Section **v9;
  _OWORD *v10;
  llvm::jitlink::Section *v11;
  llvm::jitlink::Section **v12;
  _OWORD *v13;

  v5 = result;
  *((_QWORD *)result + 1) = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_24AA2AC20;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    v9 = a2 + 2;
    do
    {
      if ((unint64_t)*(v9 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v13 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v5, (uint64_t)(v9 - 2), &v13, a4);
        v10 = v13;
        *v13 = *((_OWORD *)v9 - 1);
        v11 = *v9;
        *v9 = 0;
        *((_QWORD *)v10 + 2) = v11;
        ++*((_DWORD *)v5 + 2);
        result = std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100](v9, 0);
      }
      v12 = v9 + 1;
      v9 += 3;
    }
    while (v12 != a3);
  }
  return result;
}

llvm::jitlink::Section *std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100](llvm::jitlink::Section **a1, llvm::jitlink::Section *a2)
{
  llvm::jitlink::Section *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::jitlink::Section::~Section(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

unint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  unint64_t result;

  *(_QWORD *)(a1 + 80) += a2;
  v5 = (1 << a3) - 1;
  v6 = -(1 << a3);
  if (*(_QWORD *)a1)
    v7 = ((v5 + *(_QWORD *)a1) & (unint64_t)v6) - *(_QWORD *)a1 + a2 > *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  else
    v7 = 1;
  if (v7)
  {
    v8 = v5 + a2;
    if ((unint64_t)(v5 + a2) > 0x1000)
    {
      v9 = operator new(v5 + a2, (std::align_val_t)8uLL);
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)(a1 + 64), (uint64_t)v9, v8);
      return ((unint64_t)v9 + v5) & v6;
    }
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::StartNewSlab(a1);
    result = (v5 + *(_QWORD *)a1) & v6;
  }
  else
  {
    result = (v5 + *(_QWORD *)a1) & v6;
  }
  *(_QWORD *)a1 = result + a2;
  return result;
}

unsigned int *llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + 1, 16);
    LODWORD(v6) = v5[2];
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++v5[2];
  return result;
}

unsigned int *llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::StartNewSlab(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  unsigned int *result;

  v2 = (unsigned int *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 24) >> 7;
  if (v3 >= 0x1E)
    LOBYTE(v3) = 30;
  v4 = 4096 << v3;
  v5 = (char *)operator new(4096 << v3, (std::align_val_t)8uLL);
  result = llvm::SmallVectorTemplateBase<void *,true>::push_back(v2, (uint64_t)v5);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &v5[v4];
  return result;
}

unsigned int *llvm::SmallVectorTemplateBase<void *,true>::push_back(unsigned int *result, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v4 + 1, 8);
    LODWORD(v4) = v3[2];
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = a2;
  ++v3[2];
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::jitlink::Symbol *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v13;

  v13 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v13);
  v5 = v13;
  if ((v4 & 1) == 0)
  {
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, a2, v13);
    v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v7 = (unint64_t *)(*v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    v9 = *a2;
    *v6 = *a2;
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    v6[1] = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (uint64_t *)(v4 + 16 * v3);
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v22 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          if ((unint64_t)(*v22 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v16 = (unint64_t *)(*v22 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
          }
          *v15 = 0;
          *v15 = *v13;
          *v13 = 0;
          v15[1] = 0;
          v15[1] = v13[1];
          v13[1] = 0;
          ++*(_DWORD *)(a1 + 8);
          v14 = *v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v18 = (unint64_t *)(v14 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
        }
        v13 += 2;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 16 * v20;
    do
    {
      *result = -8;
      result += 2;
      v21 -= 16;
    }
    while (v21);
  }
  return result;
}

_QWORD *llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v21;
  char v22[31];

  v11 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  v12 = v11;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  v11[2] = a2;
  v11[3] = v13;
  v11[4] = v14;
  v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  v18 = __clz(__rbit64(v16));
  if (v16)
    v19 = (8 * (v18 & 0x1F)) | 1;
  else
    v19 = 1;
  *v11 = v15;
  v11[1] = v19 | (v17 << 8);
  v21 = v11;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 32, &v21, (uint64_t)v22);
  return v12;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v4))
  {
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::detail::DenseSetEmpty&>(a1, v10, a2);
    v7 = (_QWORD *)result;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::detail::DenseSetEmpty&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  v7 = *a3;
  *result = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -8;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -8;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      v15 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, a2, &v15);
      v10 = v15;
      if ((unint64_t)(*v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v11 = (unint64_t *)(*v15 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
      }
      v9 = 0;
      *v10 = 0;
      *v10 = *a2;
      *a2 = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v13 = (unint64_t *)(v9 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(unsigned int *)(a1 + 16);
  v3 = *(_QWORD **)a1;
  if ((_DWORD)v2)
  {
    v4 = &v3[2 * v2];
    do
    {
      if ((unint64_t)(*v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(*v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v3 += 2;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)a1;
  }
  MEMORY[0x24BD1B398](v3, 8);
  return a1;
}

void llvm::jitlink::Block::addEdge(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;

  v6 = a1[7];
  v4 = (uint64_t)(a1 + 7);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v10 = a1[5];
    v11 = ((uint64_t)v7 - v10) >> 5;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 59)
      abort();
    v13 = v5 - v10;
    if (v13 >> 4 > v12)
      v12 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[32 * v11];
    v17 = &v15[32 * v14];
    v18 = a2[1];
    *(_OWORD *)v16 = *a2;
    *((_OWORD *)v16 + 1) = v18;
    v9 = v16 + 32;
    v20 = (char *)a1[5];
    v19 = (char *)a1[6];
    if (v19 != v20)
    {
      do
      {
        v21 = *((_OWORD *)v19 - 2);
        *(_OWORD *)(v16 - 23) = *(_OWORD *)(v19 - 23);
        *((_OWORD *)v16 - 2) = v21;
        v16 -= 32;
        v19 -= 32;
      }
      while (v19 != v20);
      v19 = (char *)a1[5];
    }
    a1[5] = v16;
    a1[6] = v9;
    a1[7] = v17;
    if (v19)
      operator delete(v19);
  }
  else
  {
    v8 = a2[1];
    *v7 = *a2;
    v7[1] = v8;
    v9 = v7 + 2;
  }
  a1[6] = v9;
}

void llvm::jitlink::LinkGraph::removeBlock(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  _QWORD *v5;

  v3 = a2[2] + 32;
  v5 = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v3, &v5);
  v4 = (void *)a2[5];
  if (v4)
  {
    a2[6] = v4;
    operator delete(v4);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = v13[1];
          *v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -4096;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

_QWORD *llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  char v22[31];

  v11 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  v12 = v11;
  v13 = *a3;
  v14 = a3[1];
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  v11[2] = a2;
  v11[3] = v13;
  v11[4] = v14;
  v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  v18 = (8 * (__clz(__rbit64(v16)) & 0x1F)) | 5;
  v19 = 5;
  if (v16)
    v19 = v18;
  *v11 = v15;
  v11[1] = v19 | (v17 << 8);
  v21 = v11;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 32, &v21, (uint64_t)v22);
  return v12;
}

uint64_t std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  __int128 *v4;
  __int128 *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (__int128 *)*a1;
  v4 = (__int128 *)a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 2;
    result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(result - 32, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2}>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::mutex *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  llvm::StringMapImpl *v11;
  int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  size_t v23;
  uint64_t *v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  size_t *v30;
  char *v31;
  int v32;
  uint64_t *v33;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int Key;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  int v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _BYTE *v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  std::mutex *v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  unsigned int v98[2];
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  _QWORD v103[8];
  _OWORD v104[3];
  __n128 v105;
  _OWORD v106[3];
  __n128 v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;

  v5 = *a1;
  v6 = (_QWORD *)a1[1];
  v7 = (std::mutex *)(*(_QWORD *)(*a1 + 8) + 16);
  std::mutex::lock(v7);
  v8 = *(_QWORD *)(v5 + 8) + 88;
  *(_QWORD *)&v106[0] = *v6;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>,llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,xojit::ReplacementManager::DylibState>>::FindAndConstruct(v8, (uint64_t *)v106);
  v10 = v9;
  v11 = (llvm::StringMapImpl *)(v9 + 1);
  v12 = *(char *)(a2 + 119);
  if (v12 >= 0)
    v13 = (uint64_t *)(a2 + 96);
  else
    v13 = *(uint64_t **)(a2 + 96);
  if (v12 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 119);
  else
    v14 = *(_QWORD *)(a2 + 104);
  v15 = llvm::StringMap<xojit::ReplacementManager::DylibState::ObjectState,llvm::MallocAllocator>::try_emplace<>(v11, v13, v14);
  v16 = *v15;
  if (!*(_DWORD *)(*v15 + 64))
  {
    *a3 = 0;
    goto LABEL_115;
  }
  v110 = 0;
  v111 = 0;
  v112 = 0x1000000000;
  v17 = *(unsigned int *)(v16 + 72);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    v19 = *(_QWORD **)(v16 + 56);
    while ((*v19 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v19 += 2;
      v18 -= 16;
      if (!v18)
        goto LABEL_40;
    }
  }
  else
  {
    v19 = *(_QWORD **)(v16 + 56);
  }
  v20 = *(_QWORD *)(v16 + 56) + 16 * v17;
  if (v19 != (_QWORD *)v20)
  {
    v21 = (unint64_t *)*v19;
LABEL_17:
    v22 = (unint64_t *)v19[1];
    if (v21 == v22)
      goto LABEL_37;
    v25 = *v22;
    v24 = (uint64_t *)(v22 + 2);
    v23 = v25;
    v26 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v110, v24, v25);
    v27 = v110;
    v28 = v110[v26];
    if (v28 == -8)
    {
      LODWORD(v112) = v112 - 1;
    }
    else if (v28)
    {
      goto LABEL_31;
    }
    v97 = v26;
    v99 = v16;
    v101 = v10;
    v29 = operator new(v23 + 17, (std::align_val_t)8uLL);
    v30 = v29;
    v31 = (char *)(v29 + 2);
    if (v23)
      memcpy(v29 + 2, v24, v23);
    v31[v23] = 0;
    *v30 = v23;
    v30[1] = 0;
    v27[v97] = v30;
    ++HIDWORD(v111);
    v32 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v110, v97);
    v33 = &v110[v32];
    v16 = v99;
    v10 = v101;
    while (1)
    {
      v28 = *v33;
      if (*v33 && v28 != -8)
        break;
      ++v33;
    }
LABEL_31:
    v35 = *(_QWORD *)(v28 + 8);
    if ((unint64_t)(v35 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v36 = (unint64_t *)(v35 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
    }
    v38 = (unint64_t *)*v19;
    *(_QWORD *)(v28 + 8) = *v19;
    if ((unint64_t)v38 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v39 = v38 + 1;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 + 1, v39));
    }
LABEL_37:
    while (1)
    {
      v19 += 2;
      if (v19 == (_QWORD *)v20)
        break;
      v21 = (unint64_t *)*v19;
      if ((*v19 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        if (v19 != (_QWORD *)v20)
          goto LABEL_17;
        break;
      }
    }
  }
LABEL_40:
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)a2, v106);
  v104[0] = v106[0];
  v104[1] = v106[1];
  v41 = v107;
  v104[2] = v106[2];
  v105 = v107;
  v42 = v108;
  v43 = v109;
  v44 = v107.n128_u64[0];
  *(_QWORD *)v98 = v109;
  v100 = v108;
  if (*(_QWORD *)&v106[0] != v108 || v107.n128_u64[0] != v109)
  {
    do
    {
      v45 = *(_QWORD *)v44;
      v46 = *(_QWORD *)(*(_QWORD *)v44 + 8);
      if (!v46 || (*(_BYTE *)(v45 + 31) & 0x20) != 0)
        goto LABEL_97;
      Key = llvm::StringMapImpl::FindKey((uint64_t *)&v110, *(uint64_t **)v45, v46);
      v48 = Key;
      if (Key == -1)
        v48 = v111;
      if (v48 == v111)
        goto LABEL_97;
      v49 = v110;
      v50 = *(_QWORD *)(v110[v48] + 8);
      v51 = v50 - 1;
      v52 = v50;
      if ((unint64_t)(v50 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v53 = (unint64_t *)(v50 + 8);
        do
          v54 = __ldaxr(v53);
        while (__stlxr(v54 + 1, v53));
        v52 = *(_QWORD *)(v49[v48] + 8);
      }
      v103[0] = 0;
      v55 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v16 + 80), *(_DWORD *)(v16 + 96), v52, v103);
      v56 = v103[0];
      if (v55)
        v57 = v103[0] == *(_QWORD *)(v16 + 80) + 16 * *(unsigned int *)(v16 + 96);
      else
        v57 = 1;
      if (v57)
      {
        v58 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 16) + 24) + (*(_QWORD *)(v45 + 24) & 0x1FFFFFFFFFFFFFFLL) + 4);
        if (v51 > 0xFFFFFFFFFFFFFFDFLL)
        {
          v59 = 0;
          goto LABEL_73;
        }
      }
      else
      {
        if (v51 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v60 = (unint64_t *)(v50 + 8);
          do
            v61 = __ldaxr(v60);
          while (__stlxr(v61 - 1, v60));
        }
        v50 = *(_QWORD *)(v56 + 8);
        if ((unint64_t)(v50 - 1) >= 0xFFFFFFFFFFFFFFE0)
        {
          v59 = 0;
          v58 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 16) + 24) + (*(_QWORD *)(v45 + 24) & 0x1FFFFFFFFFFFFFFLL) + 4);
          goto LABEL_73;
        }
        v62 = (unint64_t *)(v50 + 8);
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 + 1, v62));
        v58 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 16) + 24) + (*(_QWORD *)(v45 + 24) & 0x1FFFFFFFFFFFFFFLL) + 4);
      }
      v64 = (unint64_t *)(v50 + 8);
      do
        v65 = __ldaxr(v64);
      while (__stlxr(v65 + 1, v64));
      v59 = 1;
LABEL_73:
      v67 = (char *)v10[11];
      v66 = v10[12];
      if ((unint64_t)v67 < v66)
      {
        *(_QWORD *)v67 = v50;
        *((_DWORD *)v67 + 2) = v58;
        v68 = v67 + 16;
        goto LABEL_94;
      }
      v69 = v16;
      v70 = v10;
      v71 = (_BYTE *)v10[10];
      v72 = (v67 - v71) >> 4;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 60)
        abort();
      v74 = a3;
      v75 = v7;
      v102 = v59;
      v76 = v66 - (_QWORD)v71;
      if (v76 >> 3 > v73)
        v73 = v76 >> 3;
      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0)
        v77 = 0xFFFFFFFFFFFFFFFLL;
      else
        v77 = v73;
      if (v77 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v78 = (char *)operator new(16 * v77);
      v79 = &v78[16 * v72];
      v80 = &v78[16 * v77];
      *(_QWORD *)v79 = v50;
      *((_DWORD *)v79 + 2) = v58;
      v68 = v79 + 16;
      if (v67 == v71)
      {
        v10 = v70;
        v70[10] = v79;
        v70[11] = v68;
        v70[12] = v80;
        v7 = v75;
        a3 = v74;
        v16 = v69;
LABEL_44:
        v43 = *(_QWORD *)v98;
        v42 = v100;
        if (!v67)
          goto LABEL_93;
        goto LABEL_92;
      }
      v16 = v69;
      do
      {
        *((_QWORD *)v79 - 2) = 0;
        v79 -= 16;
        v81 = *((_QWORD *)v67 - 2);
        v67 -= 16;
        *(_QWORD *)v79 = v81;
        *(_QWORD *)v67 = 0;
        *((_DWORD *)v79 + 2) = *((_DWORD *)v67 + 2);
      }
      while (v67 != v71);
      v10 = v70;
      v67 = (char *)v70[10];
      v82 = (char *)v70[11];
      v70[10] = v79;
      v70[11] = v68;
      v70[12] = v80;
      v7 = v75;
      a3 = v74;
      if (v82 == v67)
        goto LABEL_44;
      v43 = *(_QWORD *)v98;
      v42 = v100;
      do
      {
        v84 = *((_QWORD *)v82 - 2);
        v82 -= 16;
        v83 = v84;
        if ((unint64_t)(v84 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v85 = (unint64_t *)(v83 + 8);
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
        }
      }
      while (v82 != v67);
      if (!v67)
        goto LABEL_93;
LABEL_92:
      operator delete(v67);
LABEL_93:
      v59 = v102;
LABEL_94:
      v10[11] = v68;
      if (v59)
      {
        v87 = (unint64_t *)(v50 + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
      }
LABEL_97:
      v41 = llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v104, (uint64_t)v103);
      v44 = v105.n128_u64[0];
    }
    while (*(_QWORD *)&v104[0] != v42 || v105.n128_u64[0] != v43);
  }
  *a3 = 0;
  if (HIDWORD(v111))
  {
    v90 = v111;
    if ((_DWORD)v111)
    {
      v91 = 0;
      do
      {
        v92 = v110[v91];
        if (v92 != -8 && v92 != 0)
        {
          v94 = *(_QWORD *)(v92 + 8);
          if ((unint64_t)(v94 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v95 = (unint64_t *)(v94 + 8);
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
          }
          MEMORY[0x24BD1B398](v41);
        }
        ++v91;
      }
      while (v91 != v90);
    }
  }
  free(v110);
LABEL_115:
  std::mutex::unlock(v7);
}

double llvm::jitlink::LinkGraph::defined_symbols@<D0>(llvm::jitlink::LinkGraph *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  char v11;
  _QWORD v12[2];
  char v13;
  __int128 v14;
  char v15;
  _QWORD v16[2];
  char v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;

  v3 = (_QWORD *)*((_QWORD *)this + 23);
  v4 = *((unsigned int *)this + 50);
  v5 = &v3[3 * v4];
  if (*((_DWORD *)this + 48))
  {
    if ((_DWORD)v4)
    {
      v6 = 24 * v4;
      while (*v3 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v3 += 3;
        v6 -= 24;
        if (!v6)
          goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    v3 = v5;
  }
  v16[0] = v3;
  v16[1] = v5;
  v17 = 1;
  *(_QWORD *)&v14 = v5;
  *((_QWORD *)&v14 + 1) = v5;
  v15 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::nested_collection_iterator((uint64_t)v18, v16, &v14);
  v12[0] = v5;
  v12[1] = v5;
  v13 = 1;
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::nested_collection_iterator((uint64_t)(a2 + 4), v12, &v10);
  v7 = v18[1];
  *a2 = v18[0];
  a2[1] = v7;
  result = *(double *)&v19;
  v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  return result;
}

__n128 llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v4 = *(_QWORD **)(a1 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_QWORD *)(a1 + 48) = v5;
  while (v5 != v4 && (*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
    *(_QWORD *)(a1 + 48) = ++v5;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::moveToNonEmptyInnerOrEnd((_QWORD *)a1);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  result = *(__n128 *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

uint64_t llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::nested_collection_iterator(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)a1 = v4;
  v5 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  if (*a2 == *(_QWORD *)a3)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(_QWORD *)(*a2 + 16) + 56);
  }
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::moveToNonEmptyInnerOrEnd((_QWORD *)a1);
  return a1;
}

_QWORD *llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::moveToNonEmptyInnerOrEnd(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *result;
  if (*result != result[3])
  {
    v2 = result;
    v3 = result + 6;
    do
    {
      v4 = *(_QWORD *)(v1 + 16);
      result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4 + 56);
      if (*v3 != *(_QWORD *)(v4 + 56) + 8 * *(unsigned int *)(v4 + 72))
        break;
      v5 = (_QWORD *)v2[1];
      v6 = (_QWORD *)(*v2 + 24);
      *v2 = v6;
      if (v6 != v5)
      {
        while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v6 += 3;
          *v2 = v6;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      if (v6 == (_QWORD *)v2[3])
      {
        *v3 = 0;
        v3[1] = 0;
        return result;
      }
      result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6[2] + 56);
      v1 = *v2;
      v7 = v2[3];
      v2[6] = result;
      v2[7] = v8;
    }
    while (v1 != v7);
  }
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<xojit::ReplacementManager::Plugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#3}>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15[8];
  _QWORD *v16;
  _OWORD v17[3];
  __int128 v18;
  _OWORD v19[3];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  v4 = *a2;
  llvm::jitlink::LinkGraph::defined_symbols(this, v19);
  v17[0] = v19[0];
  v17[1] = v19[1];
  v17[2] = v19[2];
  v18 = v20;
  v5 = v21;
  v6 = v22;
  v7 = (_QWORD **)v20;
  if (*(_QWORD *)&v19[0] != v21 || (_QWORD)v20 != v22)
  {
    while (1)
    {
      if ((*((_BYTE *)*v7 + 31) & 0x20) != 0)
      {
        llvm::orc::addFunctionPointerRelocationsToCurrentSymbol(*v7, (uint64_t)this, *(_QWORD **)(v4 + 64), *(_QWORD *)(v4 + 40), (uint64_t *)&v16);
        v8 = v16;
        if (v16)
          break;
      }
LABEL_20:
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v17, (uint64_t)v15);
      v7 = (_QWORD **)v18;
      if (*(_QWORD *)&v17[0] == v5 && (_QWORD)v18 == v6)
        goto LABEL_25;
    }
    v16 = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v8 + 48))(v8, &llvm::ErrorList::ID))
    {
      v10 = (uint64_t *)v8[1];
      v9 = (uint64_t *)v8[2];
      if (v10 != v9)
      {
        v11 = 0;
        do
        {
          v24[0] = v11;
          v12 = *v10;
          *v10 = 0;
          if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v12 + 48))(v12, &llvm::ErrorInfoBase::ID))
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
            v12 = 0;
          }
          v23 = v12;
          llvm::ErrorList::join(v24, &v23, v15);
          v11 = v15[0];
          v15[0] = 0;
          if (v23)
            (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
          if (v24[0])
            (*(void (**)(uint64_t))(*(_QWORD *)v24[0] + 8))(v24[0]);
          ++v10;
        }
        while (v10 != v9);
      }
    }
    else if (!(*(unsigned int (**)(_QWORD *, void *))(*v8 + 48))(v8, &llvm::ErrorInfoBase::ID))
    {
      goto LABEL_18;
    }
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
LABEL_18:
    if (v16)
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    goto LABEL_20;
  }
LABEL_25:
  *a3 = 0;
}

uint64_t llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C10F08;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C10F08;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::RTTIExtends<llvm::orc::GenericNamedTask,llvm::orc::Task>::dynamicClassID()
{
  return &llvm::orc::GenericNamedTask::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::GenericNamedTask,llvm::orc::Task>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::GenericNamedTask::ID || v3;
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 16));
}

intptr_t llvm::orc::GenericNamedTaskImpl<xojit::ReplacementManager::~ReplacementManager()::$_0>::run(uint64_t a1)
{
  return dispatch_semaphore_signal(**(dispatch_semaphore_t **)(a1 + 8));
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, char *__s)
{
  size_t v4;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  return llvm::raw_ostream::operator<<(a1, __s, v4);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *this, const void *a2, size_t __n)
{
  void *v5;
  uint64_t v6;

  v6 = *((_QWORD *)this + 3);
  v5 = (void *)*((_QWORD *)this + 4);
  if (__n <= v6 - (uint64_t)v5)
  {
    if (__n)
    {
      memcpy(v5, a2, __n);
      *((_QWORD *)this + 4) += __n;
    }
  }
  else
  {
    llvm::raw_ostream::write(this, (const char *)a2, __n);
  }
  return this;
}

uint64_t llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected(uint64_t a1)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    v5 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 24);
    if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v3 = (unint64_t *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(a1);
  }
  return a1;
}

std::__shared_weak_count_vtbl *llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(std::unique_ptr<llvm::orc::BasicObjectLayerMaterializationUnit> &&,llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>)::{lambda(void)#1}::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  llvm::orc::JITDylib *v4;
  std::__shared_weak_count_vtbl *result;
  unsigned int **v6;
  unsigned int *v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl **v9;
  std::__shared_weak_count_vtbl *v10;
  std::__shared_weak_count_vtbl *v11;
  unsigned int *v12;

  v4 = *(llvm::orc::JITDylib **)a1;
  result = (std::__shared_weak_count_vtbl *)llvm::orc::JITDylib::defineImpl(*(llvm::orc::JITDylib **)a1, **(llvm::orc::MaterializationUnit ***)(a1 + 8), a2);
  if (!*a2)
  {
    if (!**(_QWORD **)(a1 + 16))
    {
      llvm::orc::JITDylib::getDefaultResourceTracker(v4, &v12);
      v6 = *(unsigned int ***)(a1 + 16);
      v7 = *v6;
      *v6 = v12;
      if (v7)
        llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v7);
    }
    v8 = *(_QWORD *)(*((_QWORD *)v4 + 4) + 80);
    if (!v8
      || (result = (std::__shared_weak_count_vtbl *)(*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 32))(v8, **(_QWORD **)(a1 + 16), **(_QWORD **)(a1 + 8)), !*a2))
    {
      v9 = *(std::__shared_weak_count_vtbl ***)(a1 + 8);
      v10 = *v9;
      *v9 = 0;
      v11 = v10;
      llvm::orc::JITDylib::installMaterializationUnit((uint64_t)v4, &v11, **(_QWORD **)(a1 + 16));
      result = v11;
      v11 = 0;
      if (result)
        result = (std::__shared_weak_count_vtbl *)(*((uint64_t (**)(std::__shared_weak_count_vtbl *))result->~__shared_weak_count
                                                   + 1))(result);
      *a2 = 0;
    }
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(a1);
  }
  return a1;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD **)a1;
  if (v2)
  {
    v4 = &v3[3 * v2];
    do
    {
      if ((unint64_t)(*v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(*v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v3 += 3;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)a1;
  }
  MEMORY[0x24BD1B398](v3, 8);
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  v7 = *a3;
  *result = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::moveFromOldBuckets(a1, v4, &v4[3 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -8;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -8;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      v15 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, a2, &v15);
      v10 = v15;
      if ((unint64_t)(*v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v11 = (unint64_t *)(*v15 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
      }
      *v10 = 0;
      *v10 = *a2;
      *a2 = 0;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 1);
      ++*(_DWORD *)(v5 + 8);
      v9 = *a2;
    }
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v13 = (unint64_t *)(v9 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
    a2 += 3;
  }
  return result;
}

void `anonymous namespace'::LogManager::~LogManager(void **this)
{
  os_release(*this);
}

{
  os_release(*this);
}

_QWORD *xojit::XOJIT::Create@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8;
  unsigned int **v9;
  uint64_t v10;
  _QWORD *result;
  unsigned int *v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  unsigned int **v17;
  unsigned int *v18;
  _QWORD v19[4];
  __int128 v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v8 = atomic_load(&xojit::XOJIT::Create(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>)::Once);
  if (v8 != -1)
  {
    v18 = (unsigned int *)&v16;
    v17 = &v18;
    std::__call_once(&xojit::XOJIT::Create(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>)::Once, &v17, (void (__cdecl *)(void *))std::__call_once_proxy[abi:nn180100]<std::tuple<xojit::XOJIT::Create(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>)::$_0 &&>>);
  }
  v18 = 0;
  v9 = (unsigned int **)operator new();
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20, a1);
  v10 = *a2;
  *a2 = 0;
  v15 = v10;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v19, a3);
  xojit::XOJIT::XOJIT((uint64_t)v9, v20, &v15, v19, &v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v19);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v20);
  v12 = v18;
  v13 = *(_BYTE *)(a4 + 8);
  if (v18)
  {
    v14 = v13 | 1;
    xojit::XOJIT::~XOJIT(v9);
    result = (_QWORD *)MEMORY[0x24BD1B3A4]();
    v9 = (unsigned int **)v12;
  }
  else
  {
    v14 = v13 & 0xFE;
  }
  *(_BYTE *)(a4 + 8) = v14;
  *(_QWORD *)a4 = v9;
  return result;
}

void xojit::XOJIT::~XOJIT(unsigned int **this)
{
  unsigned int *v2;
  unsigned int *v3;
  void **v4;
  void **v5;

  llvm::orc::ExecutionSession::endSession((llvm::orc::ExecutionSession *)this, &v5);
  if (v5)
  {
    v4 = v5;
    llvm::orc::ExecutionSession::reportError((uint64_t)this, (uint64_t *)&v4);
    if (v4)
      (*((void (**)(void **))*v4 + 1))(v4);
  }
  v2 = this[69];
  if (v2)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  v3 = this[68];
  if (v3)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v3);
  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer((llvm::orc::ObjectLinkingLayer *)(this + 44));
  llvm::orc::ExecutionSession::~ExecutionSession((llvm::orc::ExecutionSession *)this);
}

uint64_t llvm::orc::ExecutionSession::reportError(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = (_QWORD *)(a1 + 88);
  v6 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 112);
  if ((v4 & 2) == 0)
    v3 = (_QWORD *)*v3;
  (*(void (**)(_QWORD *, uint64_t *))(v4 & 0xFFFFFFFFFFFFFFF8))(v3, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

uint64_t xojit::XOJIT::XOJIT(uint64_t a1, __int128 *a2, uint64_t *a3, _QWORD *a4, unsigned int **a5)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unsigned int **v14;
  unsigned int *BareJITDylib;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int *v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void *v40[2];
  char v41;
  _BYTE v42[32];
  void *v43[2];
  __int128 v44;
  __int128 v45;
  _OWORD v46[3];
  void *v47[2];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t size;
  uint64_t v52;
  void *__p[2];
  char v54;
  uint64_t v55;
  uint8_t buf[8];
  __int128 v57;
  char *v58;
  __int128 v59[2];
  __int128 v60;
  char *v61;
  __int128 v62[2];
  uint64_t v63;
  char v64;
  __int128 v65[2];
  __int128 v66[2];
  __int128 v67;
  char *v68;
  __int16 v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v9 = *a3;
  *a3 = 0;
  v55 = v9;
  llvm::orc::ExecutionSession::ExecutionSession(a1, &v55);
  v10 = v55;
  v55 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = &off_251C15220;
  *(_QWORD *)(a1 + 360) = a1;
  *(_QWORD *)(a1 + 368) = &unk_251C15278;
  *(_QWORD *)(a1 + 376) = 850045863;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 120);
  *(_QWORD *)(a1 + 448) = 0;
  *(_WORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  llvm::orc::ExecutionSession::registerResourceManager(a1, a1 + 368);
  *(_OWORD *)(a1 + 544) = 0u;
  if (*((_QWORD *)a2 + 3) <= 7uLL)
  {
    v68 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_0,xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_0,void>::Callbacks
        + 2;
    if (&v67 != a2)
    {
      v11 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a2);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v11, &v67);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
  }
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v65, a2);
  if ((__int128 *)(a1 + 88) != v65)
  {
    v12 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 88));
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v12, v65);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v65);
  v13 = a4[3];
  if (v13 < 8)
    goto LABEL_14;
  if ((v13 & 2) == 0)
    a4 = (_QWORD *)*a4;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(v13 & 0xFFFFFFFFFFFFFFF8))(&v67, a4, a1);
  if (!(_QWORD)v67)
  {
LABEL_14:
    v14 = (unsigned int **)(a1 + 544);
    std::string::basic_string[abi:nn180100]<0>(__p, "Platform");
    BareJITDylib = (unsigned int *)llvm::orc::ExecutionSession::createBareJITDylib(a1, (uint64_t *)__p);
    do
      v16 = __ldxr(BareJITDylib);
    while (__stxr(v16 + 1, BareJITDylib));
    v17 = *v14;
    *v14 = BareJITDylib;
    if (v17)
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v17);
    if (v54 < 0)
      operator delete(__p[0]);
    memset(v62, 0, sizeof(v62));
    *(_QWORD *)&v60 = a1;
    v61 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::orc::JITDylib &,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::CallbacksHolder<xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_1,xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_1,void>::Callbacks
        + 2;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v67, v62);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v66, &v60);
    llvm::orc::EPCDynamicLibrarySearchGenerator::Load(a1, &v67, v66, (uint64_t)&v63);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v66);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v60);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v62);
    if ((v64 & 1) != 0)
    {
      v34 = v63;
      *a5 = (unsigned int *)v63;
      if (v34)
        return a1;
LABEL_60:
      *a5 = 0;
      return a1;
    }
    v18 = (uint64_t)*v14;
    v19 = v63;
    v63 = 0;
    v52 = v19;
    llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(v18, &v52);
    v20 = v52;
    v52 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    size = 0;
    v21 = getsectiondata((const mach_header_64 *)&dword_24A800000, "__TEXT", "__orc_runtime", &size);
    v22 = size;
    v69 = 261;
    *(_QWORD *)&v67 = "orc_rt.a";
    *((_QWORD *)&v67 + 1) = 8;
    *(_QWORD *)&v66[0] = &v67;
    v23 = operator new(24, (unsigned __int8 **)v66);
    *(_QWORD *)v23 = off_251C12C18;
    *((_QWORD *)v23 + 1) = v21;
    *((_QWORD *)v23 + 2) = &v21[v22];
    v50 = v23;
    memset(v59, 0, sizeof(v59));
    llvm::orc::StaticLibraryDefinitionGenerator::Create(a1 + 352, (uint64_t *)&v50, v59, (uint64_t)&v67);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v59);
    v24 = (uint64_t)v50;
    v50 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if ((BYTE8(v67) & 1) != 0)
    {
      *a5 = (unsigned int *)v67;
      goto LABEL_59;
    }
    v25 = *(_QWORD *)(a1 + 544);
    v26 = v67;
    *(_QWORD *)&v67 = 0;
    v49 = v26;
    *(_OWORD *)v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    *(_OWORD *)v47 = 0u;
    v48 = 0;
    *(_QWORD *)&v57 = llvm::orc::MachOPlatform::buildSimpleMachOHeaderMU;
    v58 = (char *)llvm::detail::UniqueFunctionBase<std::unique_ptr<llvm::orc::MaterializationUnit>,llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions>::CallbacksHolder<std::unique_ptr<llvm::orc::MaterializationUnit> (*)(llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions),std::unique_ptr<llvm::orc::MaterializationUnit> (*)(llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions),void>::Callbacks
        + 2;
    v42[0] = 0;
    v42[24] = 0;
    llvm::orc::MachOPlatform::Create((llvm::orc::ExecutionSession *)a1, a1 + 352, v25, &v49, (uint64_t)v43, &v57, (uint64_t)v42, (uint64_t)v66);
    std::__optional_destruct_base<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t)v42);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v57);
    if (v47[0])
    {
      v47[1] = v47[0];
      operator delete(v47[0]);
    }
    *(_QWORD *)buf = (char *)&v46[1] + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
    *(_QWORD *)buf = v46;
    std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100]((void ***)buf);
    if (BYTE8(v45) && SBYTE7(v44) < 0)
      operator delete(v43[0]);
    v27 = v49;
    v49 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v28 = *(unsigned int **)&v66[0];
    if ((BYTE8(v66[0]) & 1) == 0)
    {
      *(_QWORD *)(a1 + 344) = *(_QWORD *)&v66[0];
      *(_QWORD *)&v66[0] = 0;
      v29 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = v28;
      if (v29)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        v30 = *(_QWORD *)&v66[0];
        *(_QWORD *)&v66[0] = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      }
      std::string::basic_string[abi:nn180100]<0>(v40, "Program");
      llvm::orc::ExecutionSession::createJITDylib(a1, (uint64_t)v40, (uint64_t)v66);
      if (v41 < 0)
        operator delete(v40[0]);
      v28 = *(unsigned int **)&v66[0];
      if ((BYTE8(v66[0]) & 1) == 0)
      {
        if (*(_QWORD *)&v66[0])
        {
          do
            v31 = __ldxr(v28);
          while (__stxr(v31 + 1, v28));
        }
        v32 = *(unsigned int **)(a1 + 552);
        *(_QWORD *)(a1 + 552) = v28;
        if (v32)
          llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v32);
        v33 = getenv("XOJIT_DEBUGGER_SUPPORT");
        if (!v33 || strcmp(v33, "1"))
          goto LABEL_46;
        llvm::orc::GDBJITDebugInfoRegistrationPlugin::Create((llvm::orc::GDBJITDebugInfoRegistrationPlugin *)a1, *(llvm::orc::ExecutionSession **)(a1 + 544), (llvm::orc::JITDylib *)(*(_QWORD *)(a1 + 72) + 40), (uint64_t)v66);
        if ((BYTE8(v66[0]) & 1) == 0)
        {
          {
            *(_WORD *)buf = 0;
            _os_log_debug_impl(&dword_24A800000, v35, OS_LOG_TYPE_DEBUG, "XOJIT_DEBUGGER_SUPPORT=1 installing JIT'd code debugging plugin", buf, 2u);
          }
          v39 = *(_QWORD *)&v66[0];
          llvm::orc::ObjectLinkingLayer::addPlugin(a1 + 352, &v39);
          v36 = v39;
          v39 = 0;
          if (v36)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
LABEL_46:
          llvm::orc::JITDylib::addToLinkOrder(*(_QWORD **)(a1 + 552), *(_QWORD *)(a1 + 544), 0);
          goto LABEL_57;
        }
        v28 = *(unsigned int **)&v66[0];
      }
    }
    *a5 = v28;
LABEL_57:
    v37 = v67;
    *(_QWORD *)&v67 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
LABEL_59:
    if (*a5)
      return a1;
    goto LABEL_60;
  }
  *a5 = (unsigned int *)v67;
  return a1;
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::recursive_mutex *v3;
  _QWORD v5[2];

  v2 = *a2;
  v3 = *(std::recursive_mutex **)(a1 + 32);
  v5[0] = a1;
  v5[1] = a2;
  std::recursive_mutex::lock(v3);
  llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>)::{lambda(void)#1}::operator()(v5);
  std::recursive_mutex::unlock(v3);
  return v2;
}

void llvm::orc::MachOPlatform::buildSimpleMachOHeaderMU(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::make_unique[abi:nn180100]<llvm::orc::SimpleMachOHeaderMU,llvm::orc::MachOPlatform &,llvm::orc::SymbolStringPtr &,llvm::orc::MachOPlatform::HeaderOptions>(a1, (uint64_t *)(a1 + 64), a2, a3);
}

void xojit::XOJIT::runProgramOnMainThread(uint64_t *a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, const void *a4@<X3>, size_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  size_t *v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  size_t *v41;
  const void *v42;
  size_t v43;
  llvm::formatv_object_base **v44;
  __int128 *v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t *v56;
  llvm::formatv_object_base *v57[2];
  llvm::formatv_object_base *v58;
  __int128 v59;
  uint64_t v60[2];
  char v61;
  uint64_t v62;
  char v63;
  llvm::formatv_object_base *v64;
  unint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v60[0] = a1[68];
  llvm::orc::ExecutorProcessControl::intern(a1[9], (uint64_t *)"___xojit_executor_run_program_on_main_thread", 0x2CuLL, &v56);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, v60, 1uLL, (uint64_t *)&v56, 63, (uint64_t)&v62);
  if ((unint64_t)v56 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v16 = v56 + 1;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
  }
  if ((v63 & 1) != 0)
  {
    v24 = v62;
    *(_BYTE *)(a8 + 8) |= 1u;
    *(_QWORD *)a8 = v24;
    return;
  }
  v64 = (llvm::formatv_object_base *)a1[68];
  llvm::orc::ExecutorProcessControl::intern(a1[9], (uint64_t *)"___xojit_executor_run_program_wrapper", 0x25uLL, &v55);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, (uint64_t *)&v64, 1uLL, (uint64_t *)&v55, 63, (uint64_t)v60);
  if ((unint64_t)v55 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v18 = v55 + 1;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
  }
  if ((v61 & 1) == 0)
  {
    v54 = -1;
    if (a7)
    {
      v20 = 16 * a7;
      v21 = (uint64_t *)(a6 + 8);
      v22 = 8;
      do
      {
        v23 = *v21;
        v21 += 2;
        v22 += v23 + 8;
        v20 -= 16;
      }
      while (v20);
    }
    else
    {
      v22 = 8;
    }
    v26 = v62;
    v27 = a1[9];
    v28 = a3 + a5 + v22;
    v29 = v28 + 24;
    if (v28 + 24 < 9)
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v64);
      goto LABEL_41;
    }
    v51 = v27;
    v52 = v62;
    v30 = v60[0];
    v31 = malloc_type_malloc(v28 + 24, 0xBCDE199DuLL);
    v32 = (char *)v31;
    *v31 = v30;
    if ((v29 & 0xFFFFFFFFFFFFFFF8) == 8)
      goto LABEL_39;
    v31[1] = a5;
    v33 = v31 + 2;
    v34 = v29 - 16;
    if (a5)
    {
      v35 = v34 >= a5;
      v34 -= a5;
      if (!v35)
        goto LABEL_39;
      memcpy(v31 + 2, a4, a5);
      v33 = (size_t *)&v32[a5 + 16];
    }
    v36 = v34 - 8;
    if (v34 >= 8)
    {
      *v33 = a3;
      v37 = v33 + 1;
      if (a3)
      {
        v35 = v36 >= a3;
        v36 -= a3;
        if (!v35)
          goto LABEL_39;
        v38 = v37;
        memcpy(v37, a2, a3);
        v37 = (_QWORD *)((char *)v38 + a3);
      }
      v39 = v36 - 8;
      if (v36 >= 8)
      {
        *v37 = a7;
        if (!a7)
        {
LABEL_37:
          v64 = (llvm::formatv_object_base *)v32;
          v65 = v29;
LABEL_40:
          v27 = v51;
          v26 = v52;
LABEL_41:
          if (v65)
          {
            if (v65 <= 8)
              v44 = &v64;
            else
              v44 = (llvm::formatv_object_base **)v64;
          }
          else
          {
            v57[0] = v64;
            if (v64)
            {
              getErrorErrorCat();
              *(_QWORD *)&v59 = 3;
              *((_QWORD *)&v59 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
              llvm::make_error<llvm::StringError,char const*&,std::error_code>(v57, (uint64_t *)&v59, &v53);
              goto LABEL_59;
            }
            v44 = &v64;
          }
          llvm::orc::ExecutorProcessControl::callWrapper(v27, v26, (uint64_t)v44, v65, &v59);
          if (*((_QWORD *)&v59 + 1))
          {
            if (*((_QWORD *)&v59 + 1) <= 8uLL)
              v45 = &v59;
            else
              v45 = (__int128 *)v59;
          }
          else
          {
            v58 = (llvm::formatv_object_base *)v59;
            if ((_QWORD)v59)
            {
              getErrorErrorCat();
              v57[0] = (llvm::formatv_object_base *)3;
              v57[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
              llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v58, (uint64_t *)v57, &v53);
LABEL_54:
              if (*((_QWORD *)&v59 + 1) < 9uLL)
              {
                if (*((_QWORD *)&v59 + 1) || (v46 = (void *)v59) == 0)
                {
LABEL_59:
                  if (v65 < 9)
                  {
                    if (v65)
                      goto LABEL_64;
                    v47 = (char *)v64;
                    if (!v64)
                      goto LABEL_64;
                  }
                  else
                  {
                    v47 = (char *)v64;
                  }
                  free(v47);
LABEL_64:
                  v48 = v53;
                  if (v53)
                  {
                    *(_BYTE *)(a8 + 8) |= 1u;
                    *(_QWORD *)a8 = v48;
                  }
                  else
                  {
                    *(_BYTE *)(a8 + 8) &= ~1u;
                    *(_DWORD *)a8 = v54;
                  }
                  if ((v61 & 1) != 0)
                  {
                    v49 = v60[0];
                    v60[0] = 0;
                    if (v49)
                      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
                  }
                  goto LABEL_70;
                }
              }
              else
              {
                v46 = (void *)v59;
              }
              free(v46);
              goto LABEL_59;
            }
            v45 = &v59;
          }
          llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize(&v54, v45, *((unint64_t *)&v59 + 1), &v53);
          goto LABEL_54;
        }
        v40 = a6 + 16 * a7;
        v41 = v37 + 1;
        while (1)
        {
          v35 = v39 >= 8;
          v39 -= 8;
          if (!v35)
            break;
          v42 = *(const void **)a6;
          v43 = *(_QWORD *)(a6 + 8);
          *v41++ = v43;
          if (v43)
          {
            v35 = v39 >= v43;
            v39 -= v43;
            if (!v35)
              break;
            memcpy(v41, v42, v43);
            v41 = (size_t *)((char *)v41 + v43);
          }
          a6 += 16;
          if (a6 == v40)
            goto LABEL_37;
        }
      }
    }
LABEL_39:
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v64);
    free(v32);
    goto LABEL_40;
  }
  v25 = v60[0];
  v60[0] = 0;
  *(_BYTE *)(a8 + 8) |= 1u;
  *(_QWORD *)a8 = v25;
LABEL_70:
  if ((v63 & 1) != 0)
  {
    v50 = v62;
    v62 = 0;
    if (v50)
      (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  }
}

_QWORD *std::string::basic_string[abi:nn180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::make_unique[abi:nn180100]<llvm::orc::SimpleMachOHeaderMU,llvm::orc::MachOPlatform &,llvm::orc::SymbolStringPtr &,llvm::orc::MachOPlatform::HeaderOptions>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void *v15[2];
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void *__p[2];
  uint64_t v25;
  uint64_t v26;
  void **v27;

  v8 = operator new();
  v26 = *a2;
  if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v9 = (unint64_t *)(v26 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  LOBYTE(v15[0]) = 0;
  v19 = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    *(_OWORD *)v15 = *(_OWORD *)a3;
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v16 = v11;
    v17 = v12;
    v18 = *(_DWORD *)(a3 + 32);
    v19 = 1;
  }
  v20 = *(_OWORD *)(a3 + 48);
  v21 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v22 = *(_OWORD *)(a3 + 72);
  v23 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a3 + 96);
  v25 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *a4 = llvm::orc::SimpleMachOHeaderMU::SimpleMachOHeaderMU(v8, a1, &v26, (__int128 *)v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v27 = (void **)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v27);
  v27 = (void **)&v20;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v27);
  if (v19 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v13 = (unint64_t *)(v26 + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
}

uint64_t std::__optional_destruct_base<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,false>::~__optional_destruct_base[abi:nn180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(a1);
    MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(uint64_t **)result;
    v3 = *(_QWORD *)result + 24 * v1;
    do
    {
      v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        v7 = v2[1];
        if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 - 1, v8));
          v4 = *v2;
        }
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v2 += 3;
    }
    while (v2 != (uint64_t *)v3);
  }
  return result;
}

void std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 17) < 0)
      operator delete(*(void **)(i - 40));
  }
  a1[1] = v2;
}

unsigned int *llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(unsigned int *result)
{
  unsigned int v1;

  do
    v1 = __ldaxr(result);
  while (__stlxr(v1 - 1, result));
  if (result && v1 == 1)
  {
    llvm::orc::JITDylib::~JITDylib((llvm::orc::JITDylib *)result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t result;
  std::string *p_p;
  uint64_t v6;
  std::string __p;
  uint8_t buf[4];
  std::string *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    v6 = v2;
    llvm::toString(&v6, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136315138;
    v9 = p_p;
    _os_log_error_impl(&dword_24A800000, v3, OS_LOG_TYPE_ERROR, "error: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    result = v6;
    if (v6)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else if (v2)
  {
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

char **llvm::toString@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  std::string::size_type v6;
  uint64_t v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  char *v11;
  uint64_t v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  char **v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v20 = 0x200000000;
  v18 = *a1;
  v19 = (char *)v21;
  *a1 = 0;
  v17 = &v19;
  llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v18, (uint64_t *)&v17);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v3 = v19;
  v4 = v20;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = v4 - 1;
    do
    {
      if (v3[v5 + 23] < 0)
        v7 = *(_QWORD *)&v3[v5 + 8];
      else
        v7 = v3[v5 + 23];
      v6 += v7;
      v5 += 24;
    }
    while (24 * v4 != v5);
    std::string::reserve(a2, v6);
    v8 = v3[23];
    v9 = v8 >= 0 ? v3 : *(const std::string::value_type **)v3;
    v10 = v8 >= 0 ? v3[23] : *((_QWORD *)v3 + 1);
    std::string::append(a2, v9, v10);
    if ((_DWORD)v4 != 1)
    {
      v11 = v3 + 24;
      v12 = 24 * v4 - 24;
      do
      {
        std::string::append(a2, "\n", 1uLL);
        v13 = v11[23];
        if (v13 >= 0)
          v14 = v11;
        else
          v14 = *(const std::string::value_type **)v11;
        if (v13 >= 0)
          v15 = v11[23];
        else
          v15 = *((_QWORD *)v11 + 1);
        std::string::append(a2, v14, v15);
        v11 += 24;
        v12 -= 24;
      }
      while (v12);
    }
  }
  return llvm::SmallVector<std::string,2u>::~SmallVector(&v19);
}

uint64_t llvm::handleAllErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t)&v3, a2, &v4);
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t llvm::handleErrors<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      v6 = (uint64_t *)v4[1];
      v7 = (uint64_t *)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v14 = v8;
          v9 = *v6;
          *v6 = 0;
          v12 = v9;
          llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(&v12, a2, &v13);
          llvm::ErrorList::join(&v14, &v13, &v15);
          v8 = v15;
          *a3 = v15;
          v15 = 0;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          v10 = v12;
          v12 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          if (v14)
            (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      v11 = v4;
      llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>((uint64_t *)&v11, a2, a3);
      result = (uint64_t)v11;
      v11 = 0;
      if (result)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::handleErrorImpl<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)*a1 + 48))(*a1, &llvm::ErrorInfoBase::ID);
  v7 = *a1;
  *a1 = 0;
  if ((_DWORD)result)
  {
    v8 = v7;
    llvm::ErrorHandlerTraits<void (&)(llvm::ErrorInfoBase &)>::apply<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(a2, &v8, a3);
    result = v8;
    v8 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    *a3 = v7;
  }
  return result;
}

void llvm::ErrorHandlerTraits<void (&)(llvm::ErrorInfoBase &)>::apply<llvm::toString(llvm::Error)::{lambda(llvm::ErrorInfoBase const&)#1}>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *__p[2];
  char v9;

  v4 = *a1;
  (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)*a2 + 24))(__p, *a2);
  v5 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(v4, (unint64_t)__p, 1);
  v6 = *(_QWORD *)v4 + 24 * *(unsigned int *)(v4 + 8);
  v7 = *(_OWORD *)v5;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  *(_OWORD *)v6 = v7;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)v5 = 0;
  ++*(_DWORD *)(v4 + 8);
  if (v9 < 0)
    operator delete(__p[0]);
  *a3 = 0;
}

unint64_t llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 24 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::string,false>::grow(a1, v5);
    }
  }
  return a2;
}

void llvm::SmallVectorTemplateBase<std::string,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 24, &v6);
  llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow((__int128 **)a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::SmallVectorTemplateBase<std::string,false>::moveElementsForGrow(__int128 **a1, uint64_t a2)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 24 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      a2 += 24;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      v3 = (__int128 *)((char *)v3 + 24);
      v4 -= 24;
    }
    while (v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 24 * v6;
      do
      {
        if (*((char *)v7 + v8 - 1) < 0)
          operator delete(*(void **)((char *)v7 + v8 - 24));
        v8 -= 24;
      }
      while (v8);
    }
  }
}

char **llvm::SmallVector<std::string,2u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 24 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 24;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::orc::JITDylib &,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::CallImpl<xojit::XOJIT::XOJIT(llvm::unique_function<void ()(llvm::Error)>,std::unique_ptr<llvm::orc::ExecutorProcessControl>,llvm::unique_function<llvm::Error ()(xojit::XOJIT&)>,llvm::Error&)::$_1>@<X0>(uint64_t *a1@<X0>, llvm::orc::JITDylib *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::jitlink::LinkGraph *v11;
  llvm::jitlink::LinkGraph *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::jitlink::LinkGraph *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  int v22;
  llvm::jitlink::LinkGraph *v23;
  uint64_t v24[2];
  int v25;
  llvm::jitlink::LinkGraph *v26;

  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v7 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = 0;
  v8 = *a1;
  v9 = *(_QWORD *)(*a1 + 72) + 40;
  v24[0] = v6;
  v21[0] = 0;
  v10 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v24[1] = v10;
  v21[1] = 0;
  v25 = v7;
  v22 = 0;
  llvm::jitlink::absoluteSymbolsLinkGraph(v9, v24, (uint64_t *)&v26);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)v24);
  v11 = v26;
  v26 = 0;
  v23 = v11;
  llvm::orc::ObjectLinkingLayer::add(v8 + 352, a2, &v23, a4);
  v12 = v23;
  v23 = 0;
  if (v12)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v12);
    MEMORY[0x24BD1B3A4](v13, 0x10B2C40C7701500, v14, v15);
  }
  v16 = v26;
  v26 = 0;
  if (v16)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v16);
    MEMORY[0x24BD1B3A4](v17, 0x10B2C40C7701500, v18, v19);
  }
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)v21);
}

unsigned int *llvm::orc::ObjectLinkingLayer::add@<X0>(uint64_t a1@<X0>, llvm::orc::JITDylib *a2@<X1>, llvm::jitlink::LinkGraph **a3@<X2>, uint64_t *a4@<X8>)
{
  llvm::jitlink::LinkGraph *v7;
  llvm::jitlink::LinkGraph *v8;
  uint64_t v9;
  unsigned int *result;
  llvm::jitlink::LinkGraph *v11;
  unsigned int *v12;

  llvm::orc::JITDylib::getDefaultResourceTracker(a2, &v12);
  v7 = *a3;
  *a3 = 0;
  v11 = v7;
  llvm::orc::ObjectLinkingLayer::add(a1, &v12, (uint64_t *)&v11, a4);
  v8 = v11;
  v11 = 0;
  if (v8)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v8);
    MEMORY[0x24BD1B3A4](v9);
  }
  result = v12;
  if (v12)
    return llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v12);
  return result;
}

void llvm::jitlink::LinkGraph::~LinkGraph(llvm::jitlink::LinkGraph *this)
{
  void **v2;

  v2 = (void **)((char *)this + 256);
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](&v2);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 29), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 26), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::destroyAll((llvm::jitlink::LinkGraph *)((char *)this + 184));
  MEMORY[0x24BD1B398](*((_QWORD *)this + 23), 8);
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this);
}

void std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 14;
        std::__destroy_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,0>(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[8];
  if (v2 != a1 + 11)
    free(v2);
  v3 = (_QWORD *)a1[1];
  if (v3 != a1 + 4)
    free(v3);
}

llvm::jitlink::Section *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::destroyAll(llvm::jitlink::Section *result)
{
  uint64_t v1;
  uint64_t v2;
  llvm::jitlink::Section **v3;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    v3 = (llvm::jitlink::Section **)(*(_QWORD *)result + 16);
    do
    {
      if ((unint64_t)*(v3 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
        result = std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100](v3, 0);
      v3 += 3;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = 8 * v2;
    do
    {
      v5 = *v3++;
      MEMORY[0x24BD1B398](v5, 8);
      v4 -= 8;
    }
    while (v4);
  }
  v6 = *(uint64_t **)(a1 + 64);
  v7 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v7)
  {
    v8 = 16 * v7;
    do
    {
      v9 = *v6;
      v6 += 2;
      MEMORY[0x24BD1B398](v9, 8);
      v8 -= 16;
    }
    while (v8);
    v6 = *(uint64_t **)(a1 + 64);
  }
  if (v6 != (uint64_t *)(a1 + 80))
    free(v6);
  v10 = *(void **)(a1 + 16);
  if (v10 != (void *)(a1 + 32))
    free(v10);
  return a1;
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::EPCDynamicLibrarySearchGenerator>(std::unique_ptr<llvm::orc::EPCDynamicLibrarySearchGenerator>)::{lambda(void)#1}::operator()(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = (_QWORD *)*a1;
  v2 = (uint64_t *)a1[1];
  v3 = *v2;
  if (*v2)
  {
    v4 = (_QWORD *)operator new();
    v5 = *v2;
    *v4 = &off_251C10F80;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
  }
  else
  {
    v4 = 0;
  }
  *v2 = 0;
  result = (uint64_t)(v1 + 25);
  v7 = v1[25];
  v8 = (_QWORD *)v1[24];
  if ((unint64_t)v8 >= v7)
  {
    v10 = v1[23];
    v11 = ((uint64_t)v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v27 = v1 + 25;
    v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(result, v14);
    v17 = &v15[16 * v11];
    *(_QWORD *)v17 = v3;
    *((_QWORD *)v17 + 1) = v4;
    v19 = (_QWORD *)v1[23];
    v18 = (_QWORD *)v1[24];
    if (v18 == v19)
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v18 = 0;
        v18[1] = 0;
      }
      while (v18 != v19);
      v22 = *(int64x2_t *)(v1 + 23);
    }
    v9 = v17 + 16;
    v1[23] = v20;
    v1[24] = v17 + 16;
    v25 = v22;
    v23 = v1[25];
    v1[25] = &v15[16 * v16];
    v26 = v23;
    v24 = v22.i64[0];
    result = std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *v8 = v3;
    v8[1] = v4;
    v9 = v8 + 2;
  }
  v1[24] = v9;
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__shared_ptr_pointer<llvm::orc::EPCDynamicLibrarySearchGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_pointer<llvm::orc::EPCDynamicLibrarySearchGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void llvm::detail::UniqueFunctionBase<std::unique_ptr<llvm::orc::MaterializationUnit>,llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions>::CallImpl<std::unique_ptr<llvm::orc::MaterializationUnit> (*)(llvm::orc::MachOPlatform &,llvm::orc::MachOPlatform::HeaderOptions)>(void (**a1)(uint64_t, void **), uint64_t a2, uint64_t a3)
{
  void (*v3)(uint64_t, void **);
  uint64_t v4;
  uint64_t v5;
  void *v6[2];
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  void **v17;

  v3 = *a1;
  LOBYTE(v6[0]) = 0;
  v10 = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    *(_OWORD *)v6 = *(_OWORD *)a3;
    v4 = *(_QWORD *)(a3 + 16);
    v5 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v7 = v4;
    v8 = v5;
    v9 = *(_DWORD *)(a3 + 32);
    v10 = 1;
  }
  v11 = *(_OWORD *)(a3 + 48);
  v12 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v13 = *(_OWORD *)(a3 + 72);
  v14 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a3 + 96);
  v16 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v3(a2, v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v17 = (void **)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v17);
  v17 = (void **)&v11;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v17);
  if (v10)
  {
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
  }
}

void llvm::make_error<llvm::StringError,char const*&,std::error_code>(llvm::formatv_object_base **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  llvm::formatv_object_base *v12;
  char v13;
  char v14;

  v6 = operator new();
  v7 = v6;
  v8 = *a1;
  v14 = 1;
  if (*(_BYTE *)v8)
  {
    v12 = v8;
    v9 = 3;
  }
  else
  {
    v9 = 1;
  }
  v13 = v9;
  v11 = *a2;
  v10 = a2[1];
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(&v12, (std::string *)(v6 + 8));
  *(_QWORD *)(v7 + 32) = v11;
  *(_QWORD *)(v7 + 40) = v10;
  *(_BYTE *)(v7 + 48) = 1;
  *a3 = v7;
}

void llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5[2];

  if (a3 <= 7)
  {
    getErrorErrorCat();
    v5[0] = 3;
    v5[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Error deserializing return value from blob in call", v5, a4);
  }
  else
  {
    *a1 = *a2;
    *a4 = 0;
  }
}

char *llvm::orc::shared::WrapperFunctionResult::createOutOfBandError@<X0>(llvm::orc::shared::WrapperFunctionResult *this@<X0>, char **a2@<X8>)
{
  size_t v5;
  char *v6;
  char *result;

  a2[1] = 0;
  v5 = strlen((const char *)this);
  v6 = (char *)malloc_type_malloc(v5 + 1, 0x586EBFFAuLL);
  result = strcpy(v6, (const char *)this);
  *a2 = result;
  return result;
}

uint64_t llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::StringRef,void>::serialize(_QWORD *a1, const void *a2, size_t __n)
{
  uint64_t v5;
  void *v6;
  size_t v8;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = __n;
  v5 = a1[1];
  v6 = (void *)(*a1 + 8);
  *a1 = v6;
  a1[1] = v5 - 8;
  if (__n)
  {
    if (v5 - 8 < __n)
      return 0;
    memcpy(v6, a2, __n);
    v8 = a1[1] - __n;
    *a1 += __n;
    a1[1] = v8;
  }
  return 1;
}

uint64_t *llvm::orc::ExecutorProcessControl::callWrapper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v10 = operator new();
  *(_QWORD *)(v10 + 8) = 0;
  v11 = (unint64_t *)(v10 + 8);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 850045863;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 1018212795;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 124) = 0u;
  *(_QWORD *)v10 = &off_251C10FB8;
  v14 = v10;
  std::__assoc_sub_state::__attach_future[abi:nn180100](v10);
  v15[0] = &v14;
  v15[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallbacksHolder<llvm::orc::ExecutorProcessControl::callWrapper(llvm::orc::ExecutorAddr,llvm::ArrayRef<char>)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1},llvm::orc::ExecutorProcessControl::callWrapper(llvm::orc::ExecutorAddr,llvm::ArrayRef<char>)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1},void>::Callbacks
         + 2;
  (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, v15, a3, a4);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move(v10, a5);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  return std::promise<llvm::MSVCPError>::~promise(&v14);
}

void std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::__on_zero_shared(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  if ((*(_BYTE *)(a1 + 136) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 152);
    if (v2 >= 9)
    {
      v3 = *(void **)(a1 + 144);
LABEL_4:
      free(v3);
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    }
    if (!v2)
    {
      v3 = *(void **)(a1 + 144);
      if (v3)
        goto LABEL_4;
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::ExecutorProcessControl::callWrapper(llvm::orc::ExecutorAddr,llvm::ArrayRef<char>)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1}>(uint64_t **a1, uint64_t a2)
{
  void *v2;
  BOOL v3;
  void *v4[2];

  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::promise<llvm::orc::shared::WrapperFunctionResult>::set_value(*a1, (uint64_t)v4);
  if (v4[1] >= (void *)9)
  {
    v2 = v4[0];
LABEL_7:
    free(v2);
    return;
  }
  v2 = v4[0];
  if (v4[1])
    v3 = 1;
  else
    v3 = v4[0] == 0;
  if (!v3)
    goto LABEL_7;
}

void std::promise<llvm::orc::shared::WrapperFunctionResult>::set_value(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  if (!v2)
    v2 = std::__throw_future_error[abi:nn180100]();
  std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::set_value<llvm::orc::shared::WrapperFunctionResult>(v2, a2);
}

void std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::set_value<llvm::orc::shared::WrapperFunctionResult>(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  std::exception_ptr v8;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if ((*(_BYTE *)(a1 + 136) & 1) != 0
    || (v8.__ptr_ = 0, v5 = *(_QWORD *)(a1 + 16), std::exception_ptr::~exception_ptr(&v8), v5))
  {
    v6 = std::__throw_future_error[abi:nn180100]();
    std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move(v6, v7);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a1 + 136) |= 5u;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
    std::mutex::unlock(v4);
  }
}

void std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  std::exception_ptr v5;
  std::exception_ptr v6;
  std::exception_ptr v7;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)a1, &__lk);
  v4 = *(_QWORD *)(a1 + 16);
  v7.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v7);
  if (v4)
  {
    std::exception_ptr::exception_ptr(&v6, (const std::exception_ptr *)(a1 + 16));
    v5.__ptr_ = &v6;
    std::rethrow_exception(v5);
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>();
  }
  else
  {
    *a2 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
}

void llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>(llvm::formatv_object_base *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  llvm::formatv_object_base *v11;
  char v12;
  char v13;

  v6 = operator new();
  v7 = v6;
  v13 = 1;
  if (*(_BYTE *)a1)
  {
    v11 = a1;
    v8 = 3;
  }
  else
  {
    v8 = 1;
  }
  v12 = v8;
  v10 = *a2;
  v9 = a2[1];
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(&v11, (std::string *)(v6 + 8));
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 48) = 1;
  *a3 = v7;
}

uint64_t _GLOBAL__sub_I_XOJIT_cpp()
{
}

uint64_t XOJIT_XOJIT_LoadDylib(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 72) + 16))(&v5);
  if ((v6 & 1) != 0)
    return v5;
  result = 0;
  *a3 = v5;
  return result;
}

unsigned int *XOJIT_XOJIT_GetPlatformJITDylibRetained(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(unsigned int **)(a1 + 544);
  if (v1)
  {
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    do
      v3 = __ldxr(v1);
    while (__stxr(v3 + 1, v1));
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v1);
  }
  else
  {
    do
      v4 = __ldxr(0);
    while (__stxr(v4 + 1, 0));
  }
  return v1;
}

uint64_t XOJIT_OrcRTJITDlopen(uint64_t *a1, const char *a2, _QWORD *a3)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  char v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  unsigned int **v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  void *p_p;
  __int128 *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  void *__p;
  _QWORD *v43;
  unint64_t v44;
  llvm::formatv_object_base *v45[2];
  llvm::formatv_object_base *v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v6 = (unsigned int *)a1[68];
  if (!v6)
  {
    v8 = 0;
LABEL_7:
    v10 = 1;
    goto LABEL_8;
  }
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v6);
  v8 = (unsigned int *)a1[68];
  if (!v8)
    goto LABEL_7;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  v10 = 0;
LABEL_8:
  __p = 0;
  v43 = 0;
  v44 = 0;
  std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(&__p, 1uLL);
  v11 = v43;
  if ((unint64_t)v43 >= v44)
  {
    v13 = ((char *)v43 - (_BYTE *)__p) >> 4;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 60)
      abort();
    v15 = v44 - (_QWORD)__p;
    if ((uint64_t)(v44 - (_QWORD)__p) >> 3 > v14)
      v14 = v15 >> 3;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v16 = 0xFFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v44, v16);
    else
      v17 = 0;
    v18 = (unsigned int **)&v17[16 * v13];
    v19 = &v17[16 * v16];
    *v18 = v8;
    v18[1] = 0;
    v12 = v18 + 2;
    v21 = __p;
    v20 = v43;
    if (v43 != __p)
    {
      do
      {
        *((_OWORD *)v18 - 1) = *((_OWORD *)v20 - 1);
        v18 -= 2;
        v20 -= 2;
      }
      while (v20 != v21);
      v20 = __p;
    }
    __p = v18;
    v43 = v12;
    v44 = (unint64_t)v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v43 = v8;
    v11[1] = 0;
    v12 = v11 + 2;
  }
  v43 = v12;
  llvm::orc::ExecutorProcessControl::intern(a1[9], (uint64_t *)"___orc_rt_jit_dlopen_wrapper", 0x1CuLL, &v41);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, (__int128 **)&__p, (uint64_t *)&v41, 63, (uint64_t)&v48);
  if ((unint64_t)v41 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v22 = v41 + 1;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
  }
  if (__p)
  {
    v43 = __p;
    operator delete(__p);
  }
  if ((v10 & 1) == 0)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v8);
  if ((v49 & 1) != 0)
    return v48;
  v24 = a1[9];
  v40 = 0;
  v25 = v48;
  if (a2)
  {
    v26 = strlen(a2);
    v27 = v26 + 12;
    if (v26 + 12 <= 8)
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&__p);
      goto LABEL_42;
    }
    v28 = v26;
    v29 = malloc_type_malloc(v26 + 12, 0xBCDE199DuLL);
    v30 = v29;
    *v29 = v28;
    v31 = v29 + 1;
    if (v28)
    {
      if (v28 > 0xFFFFFFFFFFFFFFFBLL)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&__p);
        free(v30);
        goto LABEL_42;
      }
      memcpy(v29 + 1, a2, v28);
      v31 = (_DWORD *)((char *)v31 + v28);
    }
  }
  else
  {
    v27 = 12;
    v30 = malloc_type_malloc(0xCuLL, 0xBCDE199DuLL);
    *v30 = 0;
    v31 = v30 + 1;
  }
  *v31 = 0;
  __p = v30;
  v43 = (_QWORD *)v27;
LABEL_42:
  if (v43)
  {
    if ((unint64_t)v43 <= 8)
      p_p = &__p;
    else
      p_p = __p;
  }
  else
  {
    v45[0] = (llvm::formatv_object_base *)__p;
    if (__p)
    {
      getErrorErrorCat();
      *(_QWORD *)&v47 = 3;
      *((_QWORD *)&v47 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(v45, (uint64_t *)&v47, &v39);
      goto LABEL_60;
    }
    p_p = &__p;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(v24, v25, (uint64_t)p_p, (uint64_t)v43, &v47);
  if (*((_QWORD *)&v47 + 1))
  {
    if (*((_QWORD *)&v47 + 1) <= 8uLL)
      v34 = &v47;
    else
      v34 = (__int128 *)v47;
    goto LABEL_50;
  }
  v46 = (llvm::formatv_object_base *)v47;
  if (!(_QWORD)v47)
  {
    v34 = &v47;
LABEL_50:
    llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize(&v40, v34, *((unint64_t *)&v47 + 1), &v39);
    goto LABEL_55;
  }
  getErrorErrorCat();
  v45[0] = (llvm::formatv_object_base *)3;
  v45[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v46, (uint64_t *)v45, &v39);
LABEL_55:
  if (*((_QWORD *)&v47 + 1) >= 9uLL)
  {
    v35 = (void *)v47;
LABEL_59:
    free(v35);
    goto LABEL_60;
  }
  if (!*((_QWORD *)&v47 + 1))
  {
    v35 = (void *)v47;
    if ((_QWORD)v47)
      goto LABEL_59;
  }
LABEL_60:
  if ((unint64_t)v43 < 9)
  {
    if (v43)
      goto LABEL_65;
    v36 = __p;
    if (!__p)
      goto LABEL_65;
  }
  else
  {
    v36 = __p;
  }
  free(v36);
LABEL_65:
  v32 = v39;
  if (!v39)
    *a3 = v40;
  if ((v49 & 1) != 0)
  {
    v37 = v48;
    v48 = 0;
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  return v32;
}

uint64_t XOJIT_XOJIT_RunAsMain(uint64_t *a1, char *__s, const char *a3, int a4, const char **a5, _DWORD *a6)
{
  uint64_t v12;
  size_t v13;
  size_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[7];

  v22[6] = *MEMORY[0x24BDAC8D0];
  v20 = v22;
  v21 = 0x300000000;
  if (a4 >= 4)
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v20, v22, a4, 16);
  if (a4 >= 1)
  {
    v12 = a4;
    do
    {
      if (*a5)
        v13 = strlen(*a5);
      else
        v13 = 0;
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v20, (uint64_t)*a5++, v13);
      --v12;
    }
    while (v12);
  }
  if (__s)
  {
    v14 = strlen(__s);
    if (a3)
    {
LABEL_11:
      v15 = strlen(a3);
      goto LABEL_14;
    }
  }
  else
  {
    v14 = 0;
    if (a3)
      goto LABEL_11;
  }
  v15 = 0;
LABEL_14:
  xojit::XOJIT::runProgramOnMainThread(a1, __s, v14, a3, v15, (uint64_t)v20, v21, (uint64_t)&v18);
  if ((v19 & 1) != 0)
  {
    v16 = v18;
  }
  else
  {
    v16 = 0;
    *a6 = v18;
  }
  if (v20 != v22)
    free(v20);
  return v16;
}

uint64_t XOJIT_XOJIT_RunOnAnyThread(uint64_t *a1, const char *a2, const char *a3, int a4, uint64_t a5, _DWORD *a6)
{
  unsigned int *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::vector<std::string>::pointer end;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  std::string *v23;
  __int128 v24;
  std::vector<std::string>::pointer v25;
  std::vector<std::string>::pointer begin;
  std::string *v27;
  __int128 v28;
  int64x2_t v29;
  std::string *v30;
  std::string *value;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  size_t v35;
  std::vector<std::string>::pointer v36;
  uint64_t v37;
  std::string::size_type size;
  uint64_t v39;
  size_t v40;
  size_t v41;
  std::string *v42;
  std::__split_buffer<std::string>::pointer *p_begin;
  char *v44;
  BOOL v45;
  char *v46;
  _QWORD *v47;
  std::vector<std::string>::pointer v48;
  std::vector<std::string>::pointer v49;
  void **v50;
  _QWORD *words;
  std::__split_buffer<std::string>::pointer v52;
  void *v53;
  uint64_t v54;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  void *__p[2];
  std::string::size_type v60;
  std::vector<std::string> v61;
  unint64_t *v62;
  llvm::formatv_object_base *first;
  void *v64[2];
  uint64_t v65;
  char v66;
  std::__split_buffer<std::string> v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  v12 = (unsigned int *)a1[68];
  if (v12)
  {
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v67.__first_ = (std::__split_buffer<std::string>::pointer)v12;
  llvm::orc::ExecutorProcessControl::intern(a1[9], (uint64_t *)"___xojit_executor_run_program_wrapper", 0x25uLL, &v62);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, (uint64_t *)&v67, 1uLL, (uint64_t *)&v62, 63, (uint64_t)&v65);
  if ((unint64_t)v62 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v14 = v62 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
  }
  if (v12)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v12);
  if ((v66 & 1) != 0)
    return v65;
  v56 = a6;
  memset(&v61, 0, sizeof(v61));
  std::vector<std::string>::reserve(&v61, a4);
  if (a4 >= 1)
  {
    v16 = 0;
    do
    {
      std::string::basic_string[abi:nn180100]<0>(__p, *(char **)(a5 + 8 * v16));
      end = v61.__end_;
      if (v61.__end_ >= v61.__end_cap_.__value_)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61.__end_ - (char *)v61.__begin_) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 3) > v20)
          v20 = 0x5555555555555556 * (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v61.__end_cap_.__value_ - (char *)v61.__begin_) >> 3) >= 0x555555555555555)
          v21 = 0xAAAAAAAAAAAAAAALL;
        else
          v21 = v20;
        v67.__end_cap_.__value_ = (std::allocator<std::string> *)&v61.__end_cap_;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)&v61.__end_cap_, v21);
        else
          v22 = 0;
        v23 = (std::string *)&v22[24 * v19];
        v24 = *(_OWORD *)__p;
        v23->__r_.__value_.__r.__words[2] = v60;
        *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v24;
        __p[1] = 0;
        v60 = 0;
        __p[0] = 0;
        begin = v61.__begin_;
        v25 = v61.__end_;
        if (v61.__end_ == v61.__begin_)
        {
          v29 = vdupq_n_s64((unint64_t)v61.__end_);
          v27 = (std::string *)&v22[24 * v19];
        }
        else
        {
          v27 = (std::string *)&v22[24 * v19];
          do
          {
            v28 = *(_OWORD *)&v25[-1].__r_.__value_.__l.__data_;
            v27[-1].__r_.__value_.__r.__words[2] = v25[-1].__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27[-1].__r_.__value_.__l.__data_ = v28;
            --v27;
            v25[-1].__r_.__value_.__l.__size_ = 0;
            v25[-1].__r_.__value_.__r.__words[2] = 0;
            v25[-1].__r_.__value_.__r.__words[0] = 0;
            --v25;
          }
          while (v25 != begin);
          v29 = *(int64x2_t *)&v61.__begin_;
        }
        v30 = v23 + 1;
        v61.__begin_ = v27;
        v61.__end_ = v23 + 1;
        *(int64x2_t *)&v67.__begin_ = v29;
        value = v61.__end_cap_.__value_;
        v61.__end_cap_.__value_ = (std::string *)&v22[24 * v21];
        v67.__end_cap_.__value_ = value;
        v67.__first_ = (std::__split_buffer<std::string>::pointer)v29.i64[0];
        std::__split_buffer<std::string>::~__split_buffer(&v67);
        v61.__end_ = v30;
        if (SHIBYTE(v60) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v18 = *(_OWORD *)__p;
        v61.__end_->__r_.__value_.__r.__words[2] = v60;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v18;
        v61.__end_ = end + 1;
      }
      ++v16;
    }
    while (v16 != a4);
  }
  v58 = -1;
  v32 = v65;
  if (a3)
    v33 = strlen(a3);
  else
    v33 = 0;
  if (a2)
    v35 = strlen(a2);
  else
    v35 = 0;
  v36 = v61.__begin_;
  v37 = 8;
  while (v36 != v61.__end_)
  {
    size = HIBYTE(v36->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0)
      size = v36->__r_.__value_.__l.__size_;
    v37 += size + 8;
    ++v36;
  }
  v39 = a1[9];
  v40 = v33 + v35 + v37;
  v41 = v40 + 16;
  v67.__first_ = 0;
  v67.__begin_ = (std::__split_buffer<std::string>::pointer)(v40 + 16);
  if (v40 + 16 < 9)
  {
    v42 = (std::string *)&v67;
    __p[0] = &v67;
    __p[1] = (void *)(v40 + 16);
    if (v40 != -8)
      goto LABEL_61;
    p_begin = &v67.__begin_;
  }
  else
  {
    v42 = (std::string *)malloc_type_malloc(v40 + 16, 0xBCDE199DuLL);
    p_begin = (std::__split_buffer<std::string>::pointer *)&v42->__r_.__value_.__l.__size_;
    v67.__first_ = v42;
  }
  v42->__r_.__value_.__r.__words[0] = v33;
  v44 = (char *)(v41 - 8);
  __p[0] = p_begin;
  __p[1] = (void *)(v41 - 8);
  if (v33)
  {
    v45 = (unint64_t)v44 >= v33;
    v44 -= v33;
    if (!v45)
      goto LABEL_61;
    memcpy(p_begin, a3, v33);
    p_begin = (std::__split_buffer<std::string>::pointer *)((char *)p_begin + v33);
    __p[0] = p_begin;
    __p[1] = v44;
  }
  v45 = (unint64_t)v44 >= 8;
  v46 = v44 - 8;
  if (!v45)
    goto LABEL_61;
  *p_begin = (std::__split_buffer<std::string>::pointer)v35;
  v47 = p_begin + 1;
  __p[0] = v47;
  __p[1] = v46;
  if (v35)
  {
    v45 = (unint64_t)v46 >= v35;
    v46 -= v35;
    if (!v45)
      goto LABEL_61;
    memcpy(v47, a2, v35);
    v47 = (_QWORD *)((char *)v47 + v35);
    __p[0] = v47;
    __p[1] = v46;
  }
  if ((unint64_t)v46 < 8)
  {
LABEL_61:
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v64);
    if (v67.__begin_ > (std::__split_buffer<std::string>::pointer)8 || !v67.__begin_ && v67.__first_)
      free(v67.__first_);
    goto LABEL_65;
  }
  *v47 = 0xAAAAAAAAAAAAAAABLL * (((char *)v61.__end_ - (char *)v61.__begin_) >> 3);
  __p[0] = (char *)__p[0] + 8;
  __p[1] = v46 - 8;
  v49 = v61.__begin_;
  v48 = v61.__end_;
  while (v49 != v48)
  {
    if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(__p, (uint64_t)v49))goto LABEL_61;
    ++v49;
  }
  *(_OWORD *)v64 = *(_OWORD *)&v67.__first_;
LABEL_65:
  if (v64[1])
  {
    if (v64[1] <= (void *)8)
      v50 = v64;
    else
      v50 = (void **)v64[0];
  }
  else
  {
    __p[0] = v64[0];
    if (v64[0])
    {
      getErrorErrorCat();
      v67.__first_ = (std::__split_buffer<std::string>::pointer)3;
      v67.__begin_ = (std::__split_buffer<std::string>::pointer)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)__p, (uint64_t *)&v67, &v57);
      goto LABEL_83;
    }
    v50 = v64;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(v39, v32, (uint64_t)v50, (uint64_t)v64[1], &v67);
  if (v67.__begin_)
  {
    if (v67.__begin_ <= (std::__split_buffer<std::string>::pointer)8)
      words = &v67;
    else
      words = v67.__first_->__r_.__value_.__r.__words;
    goto LABEL_73;
  }
  first = (llvm::formatv_object_base *)v67.__first_;
  if (!v67.__first_)
  {
    words = &v67;
LABEL_73:
    llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize(&v58, words, (unint64_t)v67.__begin_, &v57);
    goto LABEL_78;
  }
  getErrorErrorCat();
  __p[0] = (void *)3;
  __p[1] = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&first, (uint64_t *)__p, &v57);
LABEL_78:
  if (v67.__begin_ >= (std::__split_buffer<std::string>::pointer)9)
  {
    v52 = v67.__first_;
LABEL_82:
    free(v52);
    goto LABEL_83;
  }
  if (!v67.__begin_)
  {
    v52 = v67.__first_;
    if (v67.__first_)
      goto LABEL_82;
  }
LABEL_83:
  if (v64[1] < (void *)9)
  {
    if (v64[1])
      goto LABEL_88;
    v53 = v64[0];
    if (!v64[0])
      goto LABEL_88;
  }
  else
  {
    v53 = v64[0];
  }
  free(v53);
LABEL_88:
  v34 = v57;
  if (!v57)
    *v56 = v58;
  v67.__first_ = (std::__split_buffer<std::string>::pointer)&v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v67);
  if ((v66 & 1) != 0)
  {
    v54 = v65;
    v65 = 0;
    if (v54)
      (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  }
  return v34;
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *value;
  int64_t v5;
  char *v6;
  uint64_t v7;
  std::string *end;
  std::vector<std::string>::pointer begin;
  std::string *v10;
  __int128 v11;
  int64x2_t v12;
  std::string *v13;
  std::__split_buffer<std::string> v14;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v5 = this->__end_ - this->__begin_;
    v14.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    begin = this->__begin_;
    end = this->__end_;
    if (end == this->__begin_)
    {
      v12 = vdupq_n_s64((unint64_t)end);
      v10 = (std::string *)&v6[24 * v5];
    }
    else
    {
      v10 = (std::string *)&v6[24 * v5];
      do
      {
        v11 = *(_OWORD *)&end[-1].__r_.__value_.__l.__data_;
        v10[-1].__r_.__value_.__r.__words[2] = end[-1].__r_.__value_.__r.__words[2];
        *(_OWORD *)&v10[-1].__r_.__value_.__l.__data_ = v11;
        --v10;
        end[-1].__r_.__value_.__l.__size_ = 0;
        end[-1].__r_.__value_.__r.__words[2] = 0;
        end[-1].__r_.__value_.__r.__words[0] = 0;
        --end;
      }
      while (end != begin);
      v12 = *(int64x2_t *)&this->__begin_;
    }
    this->__begin_ = v10;
    this->__end_ = (std::vector<std::string>::pointer)&v6[24 * v5];
    *(int64x2_t *)&v14.__begin_ = v12;
    v13 = this->__end_cap_.__value_;
    this->__end_cap_.__value_ = (std::string *)&v6[24 * v7];
    v14.__end_cap_.__value_ = v13;
    v14.__first_ = (std::__split_buffer<std::string>::pointer)v12.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v14);
  }
}

char *XOJIT_XOJIT_CallOnAnyThread(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  size_t v4;
  char **p_dst;
  __int128 *p_s;
  const char *v7;
  size_t v8;
  char *v9;
  void *v10;
  __int128 __s;
  char *__dst;
  size_t v14;

  llvm::orc::ExecutorProcessControl::callWrapper(*(_QWORD *)(a1 + 72), a2, a3, a4, &__s);
  v4 = *((_QWORD *)&__s + 1);
  if (*((_QWORD *)&__s + 1))
  {
    __dst = 0;
    v14 = 0;
    if (*((_QWORD *)&__s + 1) > 8uLL)
    {
      p_dst = (char **)malloc_type_malloc(*((size_t *)&__s + 1), 0xB91D0188uLL);
      __dst = (char *)p_dst;
      v14 = v4;
      v4 = *((_QWORD *)&__s + 1);
      if (*((_QWORD *)&__s + 1) <= 8uLL)
        p_s = &__s;
      else
        p_s = (__int128 *)__s;
      goto LABEL_9;
    }
  }
  else
  {
    v7 = (const char *)__s;
    if ((_QWORD)__s)
    {
      v8 = strlen((const char *)__s);
      v9 = (char *)malloc_type_malloc(v8 + 1, 0xBD88B51uLL);
      __dst = strcpy(v9, v7);
      v14 = 0;
      goto LABEL_10;
    }
  }
  __dst = 0;
  v14 = *((_QWORD *)&__s + 1);
  p_s = &__s;
  p_dst = &__dst;
LABEL_9:
  memcpy(p_dst, p_s, v4);
LABEL_10:
  if (*((_QWORD *)&__s + 1) >= 9uLL)
  {
    v10 = (void *)__s;
LABEL_14:
    free(v10);
    return __dst;
  }
  if (!*((_QWORD *)&__s + 1))
  {
    v10 = (void *)__s;
    if ((_QWORD)__s)
      goto LABEL_14;
  }
  return __dst;
}

uint64_t XOJIT_XOJIT_RunNewInitializers(uint64_t *a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  llvm::formatv_object_base **v8;
  __int128 *v9;
  void *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  llvm::formatv_object_base *v16[2];
  llvm::formatv_object_base *v17;
  __int128 v18;
  _QWORD v19[2];
  char v20;
  llvm::formatv_object_base *v21;
  unint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = (unsigned int *)a1[68];
  if (v4)
  {
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v21 = (llvm::formatv_object_base *)v4;
    llvm::orc::ExecutionSession::lookup(a1, (uint64_t *)&v21, 1uLL, (uint64_t *)"___orc_rt_jit_dlopen_wrapper", 0x1CuLL, 63, (uint64_t)v19);
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v4);
  }
  else
  {
    v21 = 0;
    llvm::orc::ExecutionSession::lookup(a1, (uint64_t *)&v21, 1uLL, (uint64_t *)"___orc_rt_jit_dlopen_wrapper", 0x1CuLL, 63, (uint64_t)v19);
  }
  if ((v20 & 1) != 0)
    return v19[0];
  v15 = 1;
  v14 = 0;
  v6 = v19[0];
  v7 = a1[9];
  llvm::orc::shared::detail::serializeViaSPSToWrapperFunctionResult<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>,std::string,int>(a2 + 8, &v15, (char **)&v21);
  if (v22)
  {
    if (v22 <= 8)
      v8 = &v21;
    else
      v8 = (llvm::formatv_object_base **)v21;
  }
  else
  {
    v16[0] = v21;
    if (v21)
    {
      getErrorErrorCat();
      *(_QWORD *)&v18 = 3;
      *((_QWORD *)&v18 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(v16, (uint64_t *)&v18, &v13);
      goto LABEL_25;
    }
    v8 = &v21;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(v7, v6, (uint64_t)v8, v22, &v18);
  if (*((_QWORD *)&v18 + 1))
  {
    if (*((_QWORD *)&v18 + 1) <= 8uLL)
      v9 = &v18;
    else
      v9 = (__int128 *)v18;
    goto LABEL_14;
  }
  v17 = (llvm::formatv_object_base *)v18;
  if (!(_QWORD)v18)
  {
    v9 = &v18;
LABEL_14:
    llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize(&v14, v9, *((unint64_t *)&v18 + 1), &v13);
    goto LABEL_20;
  }
  getErrorErrorCat();
  v16[0] = (llvm::formatv_object_base *)3;
  v16[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v17, (uint64_t *)v16, &v13);
LABEL_20:
  if (*((_QWORD *)&v18 + 1) >= 9uLL)
  {
    v11 = (void *)v18;
LABEL_24:
    free(v11);
    goto LABEL_25;
  }
  if (!*((_QWORD *)&v18 + 1))
  {
    v11 = (void *)v18;
    if ((_QWORD)v18)
      goto LABEL_24;
  }
LABEL_25:
  if (v22 < 9)
  {
    if (v22)
      return v13;
    v12 = (char *)v21;
    if (!v21)
      return v13;
  }
  else
  {
    v12 = (char *)v21;
  }
  free(v12);
  return v13;
}

xojit::ReplacementManager *XOJIT_CreateReplacementManager(uint64_t a1)
{
  llvm::orc::ExecutorProcessControl *v2;
  xojit::ReplacementManager *v3;

  v2 = *(llvm::orc::ExecutorProcessControl **)(a1 + 72);
  v3 = (xojit::ReplacementManager *)operator new();
  return xojit::ReplacementManager::ReplacementManager(v3, (llvm::orc::ObjectLinkingLayer *)(a1 + 352), v2);
}

xojit::ReplacementManager *XOJIT_DisposeReplacementManager(xojit::ReplacementManager *result)
{
  if (result)
  {
    xojit::ReplacementManager::~ReplacementManager(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t XOJIT_ReplacementManager_AddObjectFile(uint64_t *a1, std::string::size_type a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v6 = a3;
  xojit::ReplacementManager::addWithReplacement(a1, a2, &v6, &v7);
  v3 = v6;
  v4 = v7;
  v6 = 0;
  v7 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return v4;
}

uint64_t XOJIT_ReplacementManager_AddObjectFileAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;

  v10 = *(_QWORD *)(a2 + 32);
  v11 = llvm::orc::GenericNamedTask::DefaultDescription;
  v12 = (_QWORD *)operator new();
  *v12 = off_251C11048;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a5;
  v12[5] = a4;
  v12[6] = v11;
  v12[7] = 0;
  v12[8] = 0;
  v12[9] = 0;
  v13 = *(_QWORD *)(*(_QWORD *)(v10 + 72) + 24);
  v15 = v12;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v13 + 16))(v13, &v15);
  result = (uint64_t)v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t XOJIT_ReplacementManager_ApplyPendingUpdates(xojit::ReplacementManager *a1, void **a2)
{
  uint64_t v3;

  xojit::ReplacementManager::applyPendingUpdatesFor(a1, a2, &v3);
  return v3;
}

_QWORD *XOJIT_Error_Destroy(_QWORD *a1)
{
  _QWORD *result;
  _QWORD *v2;

  v2 = a1;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v2);
  result = v2;
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

uint64_t XOJIT_Error_IsFailedToMaterialize(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 48))(result, &llvm::orc::FailedToMaterialize::ID);
  return result;
}

uint64_t XOJIT_Error_IsUnsatisfiedSymbolDependencies(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)result + 48))(result, &llvm::orc::UnsatisfiedSymbolDependencies::ID);
  return result;
}

char *XOJIT_Error_ToMessage(char *a1)
{
  char *v1;
  char *v2;
  void (**v4)(llvm::raw_string_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  char *v12;
  char __s1[8];
  uint64_t v14;
  uint64_t v15;

  v1 = a1;
  if (a1)
  {
    *(_QWORD *)__s1 = 0;
    v14 = 0;
    v15 = 0;
    v5 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v7 = 0;
    v8 = 0;
    v6 = 0;
    v4 = &off_251C13AC0;
    v12 = __s1;
    llvm::raw_ostream::SetUnbuffered(&v4);
    (*(void (**)(char *, void (***)(llvm::raw_string_ostream *__hidden)))(*(_QWORD *)v1 + 16))(v1, &v4);
    v4 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v11 == 1 && v6)
      MEMORY[0x24BD1B380](v6, 0x1000C8077774924);
    if (SHIBYTE(v15) < 0)
    {
      v2 = *(char **)__s1;
      v1 = strdup(*(const char **)__s1);
      operator delete(v2);
    }
    else
    {
      return strdup(__s1);
    }
  }
  return v1;
}

char *XOJIT_Error_DestroyToMessage(uint64_t a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  std::string __s1;

  if (!a1)
    return 0;
  v4 = a1;
  llvm::toString(&v4, &__s1);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if ((SHIBYTE(__s1.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return strdup((const char *)&__s1);
  v2 = (void *)__s1.__r_.__value_.__r.__words[0];
  v1 = strdup(__s1.__r_.__value_.__l.__data_);
  operator delete(v2);
  return v1;
}

uint64_t XOJIT_MemoryBuffer_CreateWithIdentifierFromPath(llvm::formatv_object_base *a1, llvm::formatv_object_base *a2, _QWORD *a3)
{
  llvm::formatv_object_base *v5;
  char v6;
  llvm::sys::Process *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::formatv_object_base *v15[4];
  __int16 v16;
  _QWORD v17[2];
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a1)
    v5 = a1;
  else
    v5 = a2;
  v6 = 1;
  HIBYTE(v16) = 1;
  if (*(_BYTE *)a2)
  {
    v15[0] = a2;
    v6 = 3;
  }
  LOBYTE(v16) = v6;
  llvm::sys::fs::openNativeFileForRead((uint64_t)v15, 0, 0, (uint64_t)&v19);
  if ((v20 & 1) != 0)
    return v19;
  v7 = (llvm::sys::Process *)v19;
  v8 = 1;
  HIBYTE(v16) = 1;
  if (*(_BYTE *)v5)
  {
    v15[0] = v5;
    v8 = 3;
  }
  LOBYTE(v16) = v8;
  getOpenFileImpl<llvm::MemoryBuffer>(v19, (const llvm::Twine *)v15, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0, 1, 0, 0, (uint64_t)v17);
  llvm::sys::Process::SafelyCloseFileDescriptor(v7);
  if ((v18 & 1) != 0)
  {
    v16 = 773;
    v15[0] = (llvm::formatv_object_base *)"Could not create MemoryBuffer for path ";
    v15[1] = (llvm::formatv_object_base *)39;
    v15[2] = a2;
    v11 = v17[0];
    v12 = v17[1];
    v9 = operator new();
    *(_QWORD *)v9 = off_251C127D0;
    llvm::Twine::str(v15, (std::string *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = v11;
    *(_QWORD *)(v9 + 40) = v12;
    *(_BYTE *)(v9 + 48) = 1;
    if ((v18 & 1) != 0)
      return v9;
  }
  else
  {
    v9 = 0;
    v10 = v17[0];
    v17[0] = 0;
    *a3 = v10;
  }
  v13 = v17[0];
  v17[0] = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  return v9;
}

uint64_t XOJIT_MemoryBuffer_Destroy(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t XOJIT_SymbolString_Retain(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return result;
}

uint64_t XOJIT_SymbolString_Release(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  return result;
}

uint64_t XOJIT_SymbolString_WithStringRepresentationsDo(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  if (a2)
  {
    v4 = a2;
    v5 = (_QWORD *)result;
    do
    {
      v6 = (_QWORD *)*v5++;
      result = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD *, _QWORD))(a3 + 16))(a3, v6, v6 + 2, *v6);
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t XOJIT_XOJIT_CreateInProcess(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v10 = (char *)operator new(0x70uLL);
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &off_251C11158;
  *((_OWORD *)v10 + 2) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 5) = 0u;
  *(_OWORD *)(v10 + 92) = 0u;
  *((_DWORD *)v10 + 27) = 16;
  v28 = (std::__shared_weak_count *)v10;
  *((_QWORD *)v10 + 3) = 850045863;
  v27 = v10 + 24;
  v11 = _xojit_defaultConcurrency();
  v12 = operator new();
  *(_QWORD *)v12 = &off_251C155C0;
  *(_QWORD *)(v12 + 8) = 850045863;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_QWORD *)(v12 + 64) = 0;
  *(_BYTE *)(v12 + 72) = 1;
  *(_OWORD *)(v12 + 80) = xmmword_24AA2AC60;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = v11;
  *(_QWORD *)(v12 + 144) = 1;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_QWORD *)(v12 + 200) = 0;
  v25 = 0;
  v26 = v12;
  llvm::orc::SelfExecutorProcessControl::Create(&v27, &v26, &v25, (uint64_t)&v37);
  v13 = v25;
  v25 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = v26;
  v26 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ((v38 & 1) != 0)
    return v37;
  if (a1)
  {
    *(_QWORD *)&v32 = a1;
    *((_QWORD *)&v32 + 1) = a2;
    v18 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<createErrorReporter(XOJIT_XOJIT_ErrorReporterCallback)::$_0,createErrorReporter(XOJIT_XOJIT_ErrorReporterCallback)::$_0,void>::Callbacks
        + 2;
  }
  else
  {
    v18 = 0;
    v32 = 0uLL;
    v33 = 0;
  }
  v34 = v18;
  v20 = v37;
  v37 = 0;
  v24 = v20;
  if (a3)
  {
    *(_QWORD *)&v29 = a3;
    *((_QWORD *)&v29 + 1) = a4;
    v21 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,xojit::XOJIT &>::CallbacksHolder<wrapCallback(XOJIT_XOJIT_MutatingCallback)::$_0,wrapCallback(XOJIT_XOJIT_MutatingCallback)::$_0,void>::Callbacks
        + 2;
  }
  else
  {
    v21 = 0;
    v29 = 0uLL;
    v30 = 0;
  }
  v31 = v21;
  xojit::XOJIT::Create(&v32, &v24, &v29, (uint64_t)&v35);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v29);
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v32);
  v19 = v35;
  if ((v36 & 1) == 0)
  {
    *a5 = v35;
    v19 = 0;
  }
  v35 = 0;
  llvm::Expected<std::unique_ptr<xojit::XOJIT>>::~Expected((uint64_t)&v35);
  v22 = v37;
  v37 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  return v19;
}

uint64_t XOJIT_XOJIT_CreateFromXPCWithOOPJITType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, int a6, _QWORD *a7)
{
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  xojit::createXPCEPC(a5, a6, &v17, (uint64_t)&v26);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if ((v27 & 1) != 0)
    return v26;
  if (a1)
  {
    *(_QWORD *)&v21 = a1;
    *((_QWORD *)&v21 + 1) = a2;
    v12 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<createErrorReporter(XOJIT_XOJIT_ErrorReporterCallback)::$_0,createErrorReporter(XOJIT_XOJIT_ErrorReporterCallback)::$_0,void>::Callbacks
        + 2;
  }
  else
  {
    v12 = 0;
    v21 = 0uLL;
    v22 = 0;
  }
  v23 = v12;
  v16 = v26;
  if (a3)
  {
    *(_QWORD *)&v18 = a3;
    *((_QWORD *)&v18 + 1) = a4;
    v14 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,xojit::XOJIT &>::CallbacksHolder<wrapCallback(XOJIT_XOJIT_MutatingCallback)::$_0,wrapCallback(XOJIT_XOJIT_MutatingCallback)::$_0,void>::Callbacks
        + 2;
  }
  else
  {
    v14 = 0;
    v18 = 0uLL;
    v19 = 0;
  }
  v20 = v14;
  xojit::XOJIT::Create(&v21, &v16, &v18, (uint64_t)&v24);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v18);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v21);
  v13 = v24;
  if ((v25 & 1) == 0)
  {
    *a7 = v24;
    v13 = 0;
  }
  v24 = 0;
  llvm::Expected<std::unique_ptr<xojit::XOJIT>>::~Expected((uint64_t)&v24);
  return v13;
}

void XOJIT_XOJIT_Destroy(llvm::orc::ExecutionSession *a1)
{
  void **v2;
  void **v3;

  llvm::orc::ExecutionSession::endSession(a1, &v3);
  if (v3)
  {
    v2 = v3;
    v3 = 0;
    llvm::orc::ExecutionSession::reportError((uint64_t)a1, (uint64_t *)&v2);
    if (v2)
      (*((void (**)(void **))*v2 + 1))(v2);
    if (v3)
      (*((void (**)(void **))*v3 + 1))(v3);
  }
  if (a1)
  {
    xojit::XOJIT::~XOJIT((unsigned int **)a1);
    MEMORY[0x24BD1B3A4]();
  }
}

void **XOJIT_XOJIT_EndSession(llvm::orc::ExecutionSession *a1)
{
  void **v2;

  llvm::orc::ExecutionSession::endSession(a1, &v2);
  return v2;
}

uint64_t XOJIT_XOJIT_GetTargetTriple(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 72);
  result = v1 + 40;
  if (*(char *)(v1 + 63) < 0)
    return *(_QWORD *)result;
  return result;
}

unsigned int *XOJIT_XOJIT_GetProgramJITDylibRetained(uint64_t a1)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(unsigned int **)(a1 + 552);
  if (v1)
  {
    do
      v2 = __ldxr(v1);
    while (__stxr(v2 + 1, v1));
    do
      v3 = __ldxr(v1);
    while (__stxr(v3 + 1, v1));
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v1);
  }
  else
  {
    do
      v4 = __ldxr(0);
    while (__stxr(v4 + 1, 0));
  }
  return v1;
}

uint64_t XOJIT_XOJIT_CreateJITDylib(uint64_t a1, char *__s, uint64_t a3, llvm::orc::JITDylib **a4)
{
  __int128 *v8;
  __int128 *v9;
  unint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::string *v18;
  uint64_t v19;
  __int128 *v20;
  std::string *v21;
  std::string *v22;
  std::string *i;
  char *v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  llvm::orc::JITDylib *BareJITDylib;
  _QWORD *v36;
  std::string::size_type v37;
  uint64_t v38;
  unsigned int v39;
  llvm::orc::JITDylib **v41;
  void *v42[2];
  std::string::size_type v43;
  uint64_t v44;
  int v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *v51[2];
  char *v52;
  uint64_t v53;
  void *v54[2];
  char v55;
  std::string v56;
  uint64_t v57;
  int v58;
  char v59;
  void *__p[2];
  _OWORD v61[2];
  void *__dst[2];
  char *v63;
  void **v64[2];

  v56.__r_.__value_.__s.__data_[0] = 0;
  v59 = 0;
  *(_OWORD *)__p = 0u;
  memset(v61, 0, sizeof(v61));
  *(_OWORD *)__dst = 0u;
  v63 = 0;
  if (a3)
  {
    if (*(_BYTE *)(a3 + 40))
    {
      if (*(char *)(a3 + 23) < 0)
        std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
      else
        v56 = *(std::string *)a3;
      v57 = *(_QWORD *)(a3 + 24);
      v58 = *(_DWORD *)(a3 + 32);
      v59 = 1;
    }
    if (&v56 != (std::string *)a3)
    {
      v41 = a4;
      v9 = *(__int128 **)(a3 + 48);
      v8 = *(__int128 **)(a3 + 56);
      v10 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 3);
      v11 = *(_QWORD *)&v61[0];
      v12 = (void **)__p[0];
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v61[0] - (unint64_t)__p[0]) >> 3) >= v10)
      {
        if (0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3) >= v10)
        {
          v22 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,0>(*(std::string **)(a3 + 48), *(std::string **)(a3 + 56), (std::string *)__p[0]);
          for (i = (std::string *)__p[1]; i != v22; i = (std::string *)((char *)i - 40))
          {
            if (i[-1].__r_.__value_.__s.__data_[7] < 0)
              operator delete((void *)i[-2].__r_.__value_.__l.__size_);
          }
          __p[1] = v22;
          goto LABEL_32;
        }
        v21 = (std::string *)((char *)v9 + 8 * (((char *)__p[1] - (char *)__p[0]) >> 3));
        std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,0>(*(std::string **)(a3 + 48), v21, (std::string *)__p[0]);
        v18 = (std::string *)__p[1];
        v20 = (__int128 *)v21;
      }
      else
      {
        if (__p[0])
        {
          v13 = (void **)__p[1];
          v14 = __p[0];
          if (__p[1] != __p[0])
          {
            do
            {
              if (*((char *)v13 - 17) < 0)
                operator delete(*(v13 - 5));
              v13 -= 5;
            }
            while (v13 != v12);
            v14 = __p[0];
          }
          __p[1] = v12;
          operator delete(v14);
          v11 = 0;
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v61[0] = 0;
        }
        if (v10 > 0x666666666666666)
          goto LABEL_70;
        v15 = 0xCCCCCCCCCCCCCCCDLL * (v11 >> 3);
        v16 = 2 * v15;
        if (2 * v15 <= v10)
          v16 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v8 - (char *)v9) >> 3);
        v17 = v15 >= 0x333333333333333 ? 0x666666666666666 : v16;
        if (v17 > 0x666666666666666)
          goto LABEL_70;
        v18 = (std::string *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v17);
        __p[0] = v18;
        __p[1] = v18;
        *(_QWORD *)&v61[0] = (char *)v18 + 40 * v19;
        v20 = v9;
      }
      __p[1] = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*>(v20, v8, v18);
LABEL_32:
      std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>((std::vector<std::string> *)((char *)v61 + 8), *(std::string **)(a3 + 72), *(__int128 **)(a3 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 80) - *(_QWORD *)(a3 + 72)) >> 3));
      v24 = *(char **)(a3 + 96);
      v25 = *(_BYTE **)(a3 + 104);
      v26 = v25 - v24;
      v27 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 2);
      v28 = (uint64_t)v63;
      v29 = (char *)__dst[0];
      if (0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)__dst[0]) >> 2) >= v27)
      {
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__dst[1] - (char *)__dst[0]) >> 2) < v27)
        {
          v34 = &v24[4 * (((char *)__dst[1] - (char *)__dst[0]) >> 2)];
          if (__dst[1] != __dst[0])
          {
            memmove(__dst[0], v24, (char *)__dst[1] - (char *)__dst[0]);
            v29 = (char *)__dst[1];
          }
          a4 = v41;
          v26 = v25 - v34;
          if (v25 != v34)
            memmove(v29, v34, v25 - v34);
          goto LABEL_51;
        }
LABEL_48:
        if (v25 != v24)
          memmove(v29, v24, v25 - v24);
        a4 = v41;
LABEL_51:
        __dst[1] = &v29[v26];
        goto LABEL_52;
      }
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete(__dst[0]);
        v28 = 0;
        __dst[0] = 0;
        __dst[1] = 0;
        v63 = 0;
      }
      if (v27 <= 0x1555555555555555)
      {
        v30 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 2);
        v31 = 2 * v30;
        if (2 * v30 <= v27)
          v31 = 0xAAAAAAAAAAAAAAABLL * ((v25 - v24) >> 2);
        v32 = v30 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v31;
        if (v32 <= 0x1555555555555555)
        {
          v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts>>(v32);
          __dst[0] = v29;
          __dst[1] = v29;
          v63 = &v29[12 * v33];
          goto LABEL_48;
        }
      }
LABEL_70:
      abort();
    }
  }
LABEL_52:
  std::string::basic_string[abi:nn180100]<0>(v54, __s);
  BareJITDylib = (llvm::orc::JITDylib *)llvm::orc::ExecutionSession::createBareJITDylib(a1, (uint64_t *)v54);
  if (v55 < 0)
    operator delete(v54[0]);
  v36 = *(_QWORD **)(a1 + 344);
  LOBYTE(v42[0]) = 0;
  v46 = 0;
  if (v59)
  {
    *(_OWORD *)v42 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
    v37 = v56.__r_.__value_.__r.__words[2];
    memset(&v56, 0, sizeof(v56));
    v43 = v37;
    v44 = v57;
    v45 = v58;
    v46 = 1;
  }
  v47 = *(_OWORD *)__p;
  v48 = *(_QWORD *)&v61[0];
  __p[1] = 0;
  memset(v61, 0, sizeof(v61));
  __p[0] = 0;
  v49 = *(_OWORD *)((char *)v61 + 8);
  v50 = *((_QWORD *)&v61[1] + 1);
  *(_OWORD *)v51 = *(_OWORD *)__dst;
  v52 = v63;
  __dst[0] = 0;
  __dst[1] = 0;
  v63 = 0;
  llvm::orc::MachOPlatform::setupJITDylib(v36, BareJITDylib, (uint64_t)v42, &v53);
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
  v64[0] = (void **)&v49;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v64);
  v64[0] = (void **)&v47;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](v64);
  if (v46 && SHIBYTE(v43) < 0)
    operator delete(v42[0]);
  v38 = v53;
  if (!v53)
  {
    do
      v39 = __ldxr((unsigned int *)BareJITDylib);
    while (__stxr(v39 + 1, (unsigned int *)BareJITDylib));
    *a4 = BareJITDylib;
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  v64[0] = (void **)v61 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v64);
  v64[0] = __p;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](v64);
  if (v59 && SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
  return v38;
}

uint64_t XOJIT_XOJIT_SetLoadableAtPathViaRegex(uint64_t a1, size_t a2, char *__s, const char *a4)
{
  uint64_t v7;
  size_t v8;
  size_t v9;
  uint64_t v11;

  v7 = *(_QWORD *)(a1 + 344);
  if (!__s)
  {
    v8 = 0;
    if (a4)
      goto LABEL_3;
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v8 = strlen(__s);
  if (!a4)
    goto LABEL_5;
LABEL_3:
  v9 = strlen(a4);
LABEL_6:
  llvm::orc::MachOPlatform::setLoadableAtPathRegexMatcher(v7, a2, (uint64_t)__s, v8, (uint64_t)a4, v9, &v11);
  return v11;
}

unsigned int *XOJIT_JITDylib_Release(unsigned int *result)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;

  if (result)
  {
    v1 = result;
    do
      v2 = __ldxr(result);
    while (__stxr(v2 + 1, result));
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(result);
    return llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v1);
  }
  else
  {
    do
      v3 = __ldaxr(0);
    while (__stlxr(v3 - 1, 0));
  }
  return result;
}

uint64_t XOJIT_JITDylib_GetName(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t XOJIT_XOJIT_RemoveJITDylibAndRelease(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int **v6;
  unsigned int **v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int **v12[3];
  unsigned int ***v13;

  if (a2)
  {
    do
      v4 = __ldxr(a2);
    while (__stxr(v4 + 1, a2));
  }
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(a2);
  do
    v5 = __ldxr(a2);
  while (__stxr(v5 + 1, a2));
  v6 = (unsigned int **)operator new(8uLL);
  v12[0] = v6;
  *v6 = a2;
  v7 = v6 + 1;
  v12[2] = v7;
  do
    v8 = __ldxr(a2);
  while (__stxr(v8 + 1, a2));
  v12[1] = v7;
  llvm::orc::ExecutionSession::removeJITDylibs(a1, v12, &v11);
  v13 = v12;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v13);
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(a2);
  v9 = v11;
  v11 = 0;
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(a2);
  return v9;
}

uint64_t XOJIT_XOJIT_AddObjectFile(uint64_t a1, llvm::orc::JITDylib *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  llvm::orc::ObjectLayer::add(a1 + 352, a2, &v5, &v6);
  v3 = v6;
  v6 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v3;
}

uint64_t XOJIT_XOJIT_AddObjectFileAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  v10 = llvm::orc::GenericNamedTask::DefaultDescription;
  v11 = (_QWORD *)operator new();
  *v11 = off_251C11090;
  v11[1] = a1;
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a5;
  v11[5] = a4;
  v11[6] = v10;
  v11[7] = 0;
  v11[8] = 0;
  v11[9] = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  v14 = v11;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 16))(v12, &v14);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t XOJIT_XOJIT_LinkStaticArchive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9[2];
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  memset(v9, 0, sizeof(v9));
  llvm::orc::StaticLibraryDefinitionGenerator::Create(a1 + 352, &v8, v9, (uint64_t)&v10);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v9);
  v4 = v8;
  v8 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  result = v10;
  if ((v11 & 1) == 0)
  {
    v10 = 0;
    v7 = result;
    llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(a2, &v7);
    v6 = v7;
    v7 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    result = v10;
    v10 = 0;
    if (result)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return 0;
    }
  }
  return result;
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::recursive_mutex *v3;
  _QWORD v5[2];

  v2 = *a2;
  v3 = *(std::recursive_mutex **)(a1 + 32);
  v5[0] = a1;
  v5[1] = a2;
  std::recursive_mutex::lock(v3);
  llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(std::unique_ptr<llvm::orc::StaticLibraryDefinitionGenerator>)::{lambda(void)#1}::operator()(v5);
  std::recursive_mutex::unlock(v3);
  return v2;
}

uint64_t XOJIT_XOJIT_LinkStaticArchiveAsync(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;

  v10 = llvm::orc::GenericNamedTask::DefaultDescription;
  v11 = (_QWORD *)operator new();
  *v11 = off_251C110D8;
  v11[1] = a1;
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a5;
  v11[5] = a4;
  v11[6] = v10;
  v11[7] = 0;
  v11[8] = 0;
  v11[9] = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
  v14 = v11;
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 16))(v12, &v14);
  result = (uint64_t)v14;
  v14 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

__int128 *XOJIT_XOJIT_SymbolLookup(uint64_t *a1, const std::exception_ptr *a2, _QWORD *a3, char *__s, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  int v32;
  int v33;
  void ***v34;
  __int128 v38;
  uint64_t v39;
  unint64_t *v40;
  __int128 v41;
  uint64_t v42;
  void *__p;
  char *v44;
  char *v45;
  void **v46;
  _BYTE v47[24];
  _BYTE *v48;
  __int128 *v49;
  int v50;
  unsigned int v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v44 = 0;
  v45 = 0;
  v10 = *a3;
  if (*a3)
  {
    v11 = a3;
    v12 = 0;
    do
    {
      v13 = *((_DWORD *)v11 + 2);
      if (v12 >= v45)
      {
        v14 = (v12 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v14 + 1) >> 60)
          abort();
        v15 = (v45 - (_BYTE *)__p) >> 3;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v45 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v45, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v14];
        *(_QWORD *)v18 = v10;
        *((_DWORD *)v18 + 2) = v13;
        v20 = (char *)__p;
        v19 = v44;
        v21 = v18;
        if (v44 != __p)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 16;
            v19 -= 16;
          }
          while (v19 != v20);
          v19 = (char *)__p;
        }
        v12 = v18 + 16;
        __p = v21;
        v44 = v18 + 16;
        v45 = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v12 = v10;
        *((_DWORD *)v12 + 2) = v13;
        v12 += 16;
      }
      v44 = v12;
      v22 = v11[2];
      v11 += 2;
      v10 = v22;
    }
    while (v22);
  }
  v41 = 0uLL;
  v42 = 0;
  if (__s)
    v23 = strlen(__s);
  else
    v23 = 0;
  llvm::orc::ExecutorProcessControl::intern(a1[9], (uint64_t *)__s, v23, &v40);
  llvm::orc::SymbolLookupSet::add((uint64_t *)&v41, (uint64_t *)&v40, a5);
  if ((unint64_t)v40 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v24 = v40 + 1;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
  }
  v38 = v41;
  v39 = v42;
  v41 = 0uLL;
  v42 = 0;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v47, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, (__int128 **)&__p, &v38, a2, 63, (uint64_t)v47, (uint64_t)&v49);
  v26 = v48;
  if (v48 == v47)
  {
    v27 = 4;
    v26 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_31;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_31:
  v46 = (void **)&v38;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v46);
  if ((v52 & 1) != 0)
  {
    v31 = v49;
    v49 = 0;
  }
  else if (v50)
  {
    v28 = v49;
    if (v51)
    {
      v29 = 24 * v51;
      v30 = a7;
      while ((*(_QWORD *)v28 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v28 = (__int128 *)((char *)v28 + 24);
        v29 -= 24;
        if (!v29)
        {
          v28 = (__int128 *)((char *)v49 + 24 * v51);
          break;
        }
      }
    }
    else
    {
      v30 = a7;
    }
    v31 = 0;
    *(_QWORD *)v30 = *((_QWORD *)v28 + 1);
    v32 = *((unsigned __int8 *)v28 + 17);
    if ((v32 & 0x10) != 0)
      v33 = (4 * v32) & 8 | (2 * (v32 & 1));
    else
      v33 = (4 * v32) & 8 | (2 * (v32 & 1)) | 4;
    *(_DWORD *)(v30 + 8) = v33;
    *(_DWORD *)(v30 + 12) = 0;
  }
  else
  {
    v31 = 0;
  }
  v34 = (void ***)llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v49);
  v49 = &v41;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v34);
  if (__p)
  {
    v44 = (char *)__p;
    operator delete(__p);
  }
  return v31;
}

uint64_t XOJIT_XOJIT_GetObjectLinkingLayer(uint64_t a1)
{
  return a1 + 352;
}

unint64_t *XOJIT_XOJIT_Intern(uint64_t a1, char *__s)
{
  size_t v4;
  unint64_t *v6;

  if (__s)
    v4 = strlen(__s);
  else
    v4 = 0;
  llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(a1 + 72), (uint64_t *)__s, v4, &v6);
  return v6;
}

uint64_t XOJIT_ObjectLinkingLayer_AddPlugin(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;

  v3 = a2;
  llvm::orc::ObjectLinkingLayer::addPlugin(a1, &v3);
  result = v3;
  v3 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *XOJIT_SymbolTableCallbackPlugin_Create(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_251C10FE8;
  result[1] = a1;
  result[2] = a2;
  result[3] = a3;
  return result;
}

double XOJIT_MachOHeaderOptions_Create()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_QWORD *)(v0 + 112) = 0;
  return result;
}

uint64_t XOJIT_MachOHeaderOptions_Destroy(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void **v3;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 96);
    if (v2)
    {
      *(_QWORD *)(v1 + 104) = v2;
      operator delete(v2);
    }
    v3 = (void **)(v1 + 72);
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v3);
    v3 = (void **)(v1 + 48);
    std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v3);
    if (*(_BYTE *)(v1 + 40))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
    return MEMORY[0x24BD1B3A4](v1, 0x1032C40F5F4C4DBLL);
  }
  return result;
}

double XOJIT_MachOHeaderOptions_SetIDDylib(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  std::string::basic_string[abi:nn180100]<0>(&v7, *(char **)a2);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 16);
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    v5 = v9;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v5;
    *(_DWORD *)(a1 + 32) = v10;
  }
  else
  {
    result = *(double *)&v7;
    *(_OWORD *)a1 = v7;
    v6 = v9;
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = v10;
    *(_BYTE *)(a1 + 40) = 1;
  }
  return result;
}

void XOJIT_MachOHeaderOptions_AddLoadDylib(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  void **v17;
  void **v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  void **v22;
  unint64_t v23;
  int v24;
  void *__p[2];
  uint64_t v26;
  uint64_t v27;
  int v28;

  std::string::basic_string[abi:nn180100]<0>(__p, *(char **)a2);
  v27 = *(_QWORD *)(a2 + 8);
  v28 = *(_DWORD *)(a2 + 16);
  v4 = a1[7];
  v5 = a1[8];
  if (v4 >= v5)
  {
    v8 = a1[6];
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v8) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0x666666666666666)
      abort();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - v8) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x333333333333333)
      v12 = 0x666666666666666;
    else
      v12 = v10;
    if (v12)
      v12 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v12);
    else
      v13 = 0;
    v14 = v12 + 40 * v9;
    v15 = *(_OWORD *)__p;
    *(_QWORD *)(v14 + 16) = v26;
    *(_OWORD *)v14 = v15;
    __p[1] = 0;
    v26 = 0;
    __p[0] = 0;
    v16 = v27;
    *(_DWORD *)(v14 + 32) = v28;
    *(_QWORD *)(v14 + 24) = v16;
    v17 = (void **)a1[6];
    v18 = (void **)a1[7];
    if (v18 == v17)
    {
      v23 = v14 + 40;
      a1[6] = v14;
      a1[7] = v14 + 40;
      a1[8] = v12 + 40 * v13;
    }
    else
    {
      v19 = v14;
      do
      {
        v20 = *(_OWORD *)(v18 - 5);
        *(_QWORD *)(v19 - 24) = *(v18 - 3);
        *(_OWORD *)(v19 - 40) = v20;
        *(v18 - 4) = 0;
        *(v18 - 3) = 0;
        *(v18 - 5) = 0;
        v21 = (uint64_t)*(v18 - 2);
        *(_DWORD *)(v19 - 8) = *((_DWORD *)v18 - 2);
        *(_QWORD *)(v19 - 16) = v21;
        v19 -= 40;
        v18 -= 5;
      }
      while (v18 != v17);
      v18 = (void **)a1[6];
      v22 = (void **)a1[7];
      v23 = v14 + 40;
      a1[6] = v19;
      a1[7] = v14 + 40;
      a1[8] = v12 + 40 * v13;
      while (v22 != v18)
      {
        if (*((char *)v22 - 17) < 0)
          operator delete(*(v22 - 5));
        v22 -= 5;
      }
    }
    if (v18)
      operator delete(v18);
    v24 = SHIBYTE(v26);
    a1[7] = v23;
    if (v24 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v26;
    *(_OWORD *)v4 = v6;
    v7 = v27;
    *(_DWORD *)(v4 + 32) = v28;
    *(_QWORD *)(v4 + 24) = v7;
    a1[7] = v4 + 40;
  }
}

void XOJIT_MachOHeaderOptions_AddRPath(uint64_t a1, char *a2)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  std::string *v20;
  int v21;
  void *__p[2];
  uint64_t v23;
  std::__split_buffer<std::string> v24;

  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 >= v3)
  {
    v6 = *(_QWORD *)(a1 + 72);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v6) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    v24.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 88);
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(a1 + 88, v10);
    else
      v11 = 0;
    v12 = &v11[24 * v7];
    v13 = *(_OWORD *)__p;
    *((_QWORD *)v12 + 2) = v23;
    *(_OWORD *)v12 = v13;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    v15 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(a1 + 80);
    if (v14 == v15)
    {
      v18 = vdupq_n_s64(v14);
      v16 = &v11[24 * v7];
    }
    else
    {
      v16 = &v11[24 * v7];
      do
      {
        v17 = *(_OWORD *)(v14 - 24);
        *((_QWORD *)v16 - 1) = *(_QWORD *)(v14 - 8);
        *(_OWORD *)(v16 - 24) = v17;
        v16 -= 24;
        *(_QWORD *)(v14 - 16) = 0;
        *(_QWORD *)(v14 - 8) = 0;
        *(_QWORD *)(v14 - 24) = 0;
        v14 -= 24;
      }
      while (v14 != v15);
      v18 = *(int64x2_t *)(a1 + 72);
    }
    v19 = v12 + 24;
    *(_QWORD *)(a1 + 72) = v16;
    *(_QWORD *)(a1 + 80) = v12 + 24;
    *(int64x2_t *)&v24.__begin_ = v18;
    v20 = *(std::string **)(a1 + 88);
    *(_QWORD *)(a1 + 88) = &v11[24 * v10];
    v24.__end_cap_.__value_ = v20;
    v24.__first_ = (std::__split_buffer<std::string>::pointer)v18.i64[0];
    std::__split_buffer<std::string>::~__split_buffer(&v24);
    v21 = SHIBYTE(v23);
    *(_QWORD *)(a1 + 80) = v19;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5 = *(_OWORD *)__p;
    *(_QWORD *)(v4 + 16) = v23;
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(a1 + 80) = v4 + 24;
  }
}

uint64_t XOJIT_MachOHeaderOptions_AddBuildVersionsForExecutor(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const std::string::value_type *v14;
  const std::string::value_type *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  int v33;
  std::string v35;
  void *__p[2];
  std::string::size_type v37;
  void **v38;
  __int16 v39;

  v5 = llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts::fromTriple(*(_QWORD *)(a2 + 72) + 40, a3);
  if ((v6 & 0xFF00000000) != 0)
  {
    v7 = v5;
    v8 = v6;
    v10 = a1[13];
    v9 = a1[14];
    if (v10 >= v9)
    {
      v22 = a1[12];
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v22) >> 2);
      v24 = v23 + 1;
      if (v23 + 1 > 0x1555555555555555)
        abort();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v22) >> 2);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0xAAAAAAAAAAAAAAALL)
        v26 = 0x1555555555555555;
      else
        v26 = v24;
      if (v26)
        v26 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts>>(v26);
      else
        v27 = 0;
      v28 = v26 + 12 * v23;
      v29 = v26 + 12 * v27;
      *(_QWORD *)v28 = v7;
      *(_DWORD *)(v28 + 8) = v8;
      v11 = v28 + 12;
      v31 = (_DWORD *)a1[12];
      v30 = (_DWORD *)a1[13];
      if (v30 != v31)
      {
        do
        {
          v32 = *(_QWORD *)(v30 - 3);
          v30 -= 3;
          v33 = v30[2];
          *(_QWORD *)(v28 - 12) = v32;
          v28 -= 12;
          *(_DWORD *)(v28 + 8) = v33;
        }
        while (v30 != v31);
        v30 = (_DWORD *)a1[12];
      }
      a1[12] = v28;
      a1[13] = v11;
      a1[14] = v29;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_QWORD *)v10 = v5;
      *(_DWORD *)(v10 + 8) = v6;
      v11 = v10 + 12;
    }
    v21 = 0;
    a1[13] = v11;
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v35, "Could not identify build version for ");
    v12 = *(_QWORD *)(a2 + 72);
    v15 = *(const std::string::value_type **)(v12 + 40);
    v13 = v12 + 40;
    v14 = v15;
    v16 = *(char *)(v13 + 23);
    if (v16 >= 0)
      v17 = (const std::string::value_type *)v13;
    else
      v17 = v14;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v13 + 23);
    else
      v18 = *(_QWORD *)(v13 + 8);
    v19 = std::string::append(&v35, v17, v18);
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v37 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    v21 = operator new();
    v39 = 260;
    v38 = __p;
    *(_QWORD *)v21 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)&v38, (std::string *)(v21 + 8));
    *(_QWORD *)(v21 + 32) = 3;
    *(_QWORD *)(v21 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v21 + 48) = 1;
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  return v21;
}

void std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a2);
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

_QWORD *llvm::raw_ostream::SetUnbuffered(_QWORD *this)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = this;
  v2 = this + 2;
  if (this[4] != this[2])
    this = (_QWORD *)llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)this);
  if (*((_DWORD *)v1 + 14) == 1)
  {
    this = (_QWORD *)*v2;
    if (*v2)
      this = (_QWORD *)MEMORY[0x24BD1B380](this, 0x1000C8077774924);
  }
  *((_DWORD *)v1 + 14) = 0;
  v2[1] = 0;
  v2[2] = 0;
  *v2 = 0;
  return this;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<createErrorReporter(XOJIT_XOJIT_ErrorReporterCallback)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  return (*(uint64_t (**)(_QWORD, uint64_t))a1)(*(_QWORD *)(a1 + 8), v2);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,xojit::XOJIT &>::CallImpl<wrapCallback(XOJIT_XOJIT_MutatingCallback)::$_0>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))a1)(a2, *(_QWORD *)(a1 + 8));
  *a3 = result;
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*,llvm::orc::MachOPlatform::HeaderOptions::Dylib*>(__int128 *a1, __int128 *a2, std::string *this)
{
  __int128 *v5;
  __int128 v6;
  std::string::size_type v7;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v5, *((_QWORD *)v5 + 1));
      }
      else
      {
        v6 = *v5;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v6;
      }
      v7 = *((_QWORD *)v5 + 3);
      LODWORD(this[1].__r_.__value_.__r.__words[1]) = *((_DWORD *)v5 + 8);
      this[1].__r_.__value_.__r.__words[0] = v7;
      v5 = (__int128 *)((char *)v5 + 40);
      this = (std::string *)((char *)this + 40);
    }
    while (v5 != a2);
  }
  return this;
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,llvm::orc::MachOPlatform::HeaderOptions::Dylib *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v5;
  int v6;

  if (__str != a2)
  {
    v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      v6 = v5[1].__r_.__value_.__r.__words[1];
      this[1].__r_.__value_.__r.__words[0] = v5[1].__r_.__value_.__r.__words[0];
      LODWORD(this[1].__r_.__value_.__r.__words[1]) = v6;
      this = (std::string *)((char *)this + 40);
      v5 = (std::string *)((char *)v5 + 40);
    }
    while (v5 != a2);
  }
  return this;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(40 * a1);
}

void std::vector<std::string>::__assign_with_size[abi:nn180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *end;
  int v13;
  __int128 *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::vector<std::string>::pointer v18;

  v8 = (_DWORD)this + 16;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:nn180100](this, v11);
    end = this->__end_;
    v13 = v8;
    v14 = (__int128 *)__str;
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v15 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v15, begin);
    end = this->__end_;
    v13 = v8;
    v14 = (__int128 *)v15;
LABEL_11:
    this->__end_ = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(v13, v14, a3, end);
    return;
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  v17 = v16;
  v18 = this->__end_;
  if (v18 != v16)
  {
    do
    {
      if (SHIBYTE(v18[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18[-1].__r_.__value_.__l.__data_);
      --v18;
    }
    while (v18 != v17);
  }
  this->__end_ = v17;
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:nn180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

char *std::vector<std::string>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(int a1, __int128 *a2, __int128 *a3, std::string *this)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        this->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      ++this;
    }
    while (v6 != a3);
  }
  return this;
}

std::string *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(12 * a1);
}

void std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__clear[abi:nn180100]((unsigned int *)v2);
    operator delete(**a1);
  }
}

unsigned int *std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__clear[abi:nn180100](unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;

  v1 = result;
  v2 = *(_QWORD *)result;
  for (i = *((_QWORD *)result + 1); i != v2; i -= 8)
  {
    v4 = *(unsigned int **)(i - 8);
    result = v4;
    if (v4)
      result = llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(result);
  }
  *((_QWORD *)v1 + 1) = v2;
  return result;
}

void SymbolTableCallbackPlugin::~SymbolTableCallbackPlugin(SymbolTableCallbackPlugin *this)
{
  *(_QWORD *)this = &off_251C10FE8;
  (*((void (**)(_QWORD))this + 2))(*((_QWORD *)this + 3));
}

{
  *(_QWORD *)this = &off_251C10FE8;
  (*((void (**)(_QWORD))this + 2))(*((_QWORD *)this + 3));
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *SymbolTableCallbackPlugin::modifyPassConfig(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  __int128 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v5 = a4[14];
  *(_QWORD *)&v21 = *(_QWORD *)(*(_QWORD *)a2 + 32);
  *((_QWORD *)&v21 + 1) = a1;
  v22 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<SymbolTableCallbackPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},SymbolTableCallbackPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
      + 2;
  v6 = a4[13];
  if (v6 >= v5)
  {
    v8 = a4 + 12;
    v9 = a4[12];
    v10 = (uint64_t)(v6 - v9) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      abort();
    v11 = v5 - v9;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v20 = a4 + 14;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v13);
    else
      v14 = 0;
    v16 = v14;
    v17 = &v14[32 * v10];
    v19 = &v14[32 * v13];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v17, &v21);
    v18 = v17 + 32;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(v8, &v16);
    v7 = a4[13];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v16);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[13], &v21);
    v7 = v6 + 32;
  }
  a4[13] = v7;
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v21);
}

void SymbolTableCallbackPlugin::notifyEmitted(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void SymbolTableCallbackPlugin::notifyFailed(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void SymbolTableCallbackPlugin::notifyRemovingResources(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<SymbolTableCallbackPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, _QWORD *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20[8];
  _OWORD v21[3];
  __int128 v22;
  _OWORD v23[3];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2[1];
  llvm::jitlink::LinkGraph::defined_symbols(this, v23);
  v21[0] = v23[0];
  v21[1] = v23[1];
  v21[2] = v23[2];
  v22 = v24;
  v8 = v25;
  v9 = v26;
  v10 = (uint64_t *)v24;
  if (*(_QWORD *)&v23[0] != v25 || (_QWORD)v24 != v26)
  {
    do
    {
      v11 = *v10;
      v12 = *(_QWORD *)(*v10 + 8);
      if (v12)
      {
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*a2 + 72), *(uint64_t **)v11, v12, v20);
        (*(void (**)(_QWORD, unint64_t *, uint64_t))(v6 + 8))(*(_QWORD *)(v6 + 24), v20[0], (*(_QWORD *)(v11 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v11 + 16));
        if ((unint64_t)v20[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v13 = v20[0] + 1;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v21, (uint64_t)v20);
      v10 = (uint64_t *)v22;
    }
    while (*(_QWORD *)&v21[0] != v8 || (_QWORD)v22 != v9);
  }
  result = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)this, (uint64_t)"__TEXT,__swift5_entry", 21, v7);
  if (result)
  {
    llvm::jitlink::SectionRange::SectionRange((unint64_t **)v23, result);
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*a2 + 72), (uint64_t *)"__swift5_entry_relative_start", 0x1DuLL, (unint64_t **)v21);
    if (*(_QWORD *)&v23[0])
      v17 = **(_QWORD **)&v23[0];
    else
      v17 = 0;
    result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(v6 + 8))(*(_QWORD *)(v6 + 24), *(_QWORD *)&v21[0], v17);
    if ((unint64_t)(*(_QWORD *)&v21[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v18 = (unint64_t *)(*(_QWORD *)&v21[0] + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
    }
  }
  *a3 = 0;
  return result;
}

unint64_t **llvm::jitlink::SectionRange::SectionRange(unint64_t **a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t *v12;
  unint64_t v13;

  v4 = a2 + 32;
  *a1 = 0;
  a1[1] = 0;
  if ((_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48)) != llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 32))
  {
    v5 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4);
    v6 = (unint64_t *)*v5;
    *a1 = (unint64_t *)*v5;
    a1[1] = v6;
    v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4);
    v9 = *(_QWORD *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48);
    if ((_QWORD *)v9 != v7)
    {
      v10 = *a1;
      v11 = a1[1];
      do
      {
        v12 = (unint64_t *)*v7;
        v13 = *(_QWORD *)*v7;
        if (v13 < *v10)
        {
          *a1 = v12;
          v10 = v12;
        }
        if (v13 > *v11)
        {
          a1[1] = v12;
          v11 = v12;
        }
        while (++v7 != v8)
        {
          if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_12;
        }
        v7 = v8;
LABEL_12:
        ;
      }
      while (v7 != (_QWORD *)v9);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<llvm::orc::SymbolStringPool>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C11158;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::SymbolStringPool>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C11158;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::orc::SymbolStringPool>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v1;

  v1 = (std::mutex *)(a1 + 24);
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(a1 + 88);
  std::mutex::~mutex(v1);
}

uint64_t llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
          MEMORY[0x24BD1B398]();
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  char *v7;
  uint64_t v8;
  _BOOL8 v9;
  BOOL v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  if (a1[1] < 8uLL)
    return 0;
  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)*a1 = v2;
  v3 = (_BYTE *)(*a1 + 8);
  v4 = a1[1] - 8;
  *a1 = v3;
  a1[1] = v4;
  v5 = *(char *)(a2 + 23);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (char *)a2;
  else
    v7 = *(char **)a2;
  if (v6)
    v8 = *(_QWORD *)(a2 + 8);
  else
    v8 = *(unsigned __int8 *)(a2 + 23);
  v9 = v8 == 0;
  if (v8)
    v10 = v4 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = v8 - 1;
    do
    {
      v12 = *v7++;
      *v3 = v12;
      v3 = (_BYTE *)(*a1 + 1);
      v13 = a1[1] - 1;
      *a1 = v3;
      a1[1] = v13;
      v9 = v11 == 0;
      if (!v11)
        break;
      --v11;
    }
    while (v13);
  }
  return v9;
}

void llvm::orc::shared::detail::serializeViaSPSToWrapperFunctionResult<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>,std::string,int>(uint64_t a1@<X0>, _DWORD *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  _QWORD v9[2];
  __int128 v10;

  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 12;
  *(_QWORD *)&v10 = 0;
  *((_QWORD *)&v10 + 1) = v6 + 12;
  if ((unint64_t)(v6 + 12) <= 8)
  {
    v8 = &v10;
  }
  else
  {
    v8 = (__int128 *)malloc_type_malloc(v6 + 12, 0xBCDE199DuLL);
    *(_QWORD *)&v10 = v8;
  }
  v9[0] = v8;
  v9[1] = v7;
  if (llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>::serialize<std::string,int>(v9, a1, a2))
  {
    *(_OWORD *)a3 = v10;
  }
  else
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", a3);
    if (*((_QWORD *)&v10 + 1) > 8uLL || !*((_QWORD *)&v10 + 1) && (_QWORD)v10)
      free((void *)v10);
  }
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,int>::serialize<std::string,int>(_QWORD *a1, uint64_t a2, _DWORD *a3)
{
  _BOOL8 result;
  uint64_t v6;

  result = llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(a1, a2);
  if (result)
  {
    if (a1[1] < 4uLL)
    {
      return 0;
    }
    else
    {
      *(_DWORD *)*a1 = *a3;
      v6 = a1[1] - 4;
      *a1 += 4;
      a1[1] = v6;
      return 1;
    }
  }
  return result;
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C11048;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C11048;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_ReplacementManager_AddObjectFileAsync::$_0>::run(_QWORD *a1)
{
  uint64_t *v2;
  std::string::size_type v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v2 = (uint64_t *)a1[1];
  v3 = a1[2];
  v9 = a1[3];
  xojit::ReplacementManager::addWithReplacement(v2, v3, &v9, &v10);
  v4 = v9;
  v9 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v6 = (void (*)(uint64_t, uint64_t))a1[4];
  v5 = a1[5];
  v7 = v10;
  v10 = 0;
  v6(v5, v7);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<xojit::XOJIT>>::~Expected(uint64_t a1)
{
  char v2;
  unsigned int **v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(unsigned int ***)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*((void (**)(unsigned int **))*v3 + 1))(v3);
  }
  else if (v3)
  {
    xojit::XOJIT::~XOJIT(v3);
    MEMORY[0x24BD1B3A4]();
  }
  return a1;
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C11090;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C11090;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_AddObjectFileAsync::$_0>::run(_QWORD *a1)
{
  llvm::orc::JITDylib *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v2 = (llvm::orc::JITDylib *)a1[2];
  v3 = a1[3];
  v4 = a1[1] + 352;
  v9 = v3;
  llvm::orc::ObjectLayer::add(v4, v2, &v9, &v10);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v6 = (void (*)(uint64_t, uint64_t))a1[4];
  v5 = a1[5];
  v7 = v10;
  v10 = 0;
  v6(v5, v7);
  result = v10;
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(std::unique_ptr<llvm::orc::StaticLibraryDefinitionGenerator>)::{lambda(void)#1}::operator()(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = (_QWORD *)*a1;
  v2 = (uint64_t *)a1[1];
  v3 = *v2;
  if (*v2)
  {
    v4 = (_QWORD *)operator new();
    v5 = *v2;
    *v4 = &off_251C11120;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
  }
  else
  {
    v4 = 0;
  }
  *v2 = 0;
  result = (uint64_t)(v1 + 25);
  v7 = v1[25];
  v8 = (_QWORD *)v1[24];
  if ((unint64_t)v8 >= v7)
  {
    v10 = v1[23];
    v11 = ((uint64_t)v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v27 = v1 + 25;
    v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(result, v14);
    v17 = &v15[16 * v11];
    *(_QWORD *)v17 = v3;
    *((_QWORD *)v17 + 1) = v4;
    v19 = (_QWORD *)v1[23];
    v18 = (_QWORD *)v1[24];
    if (v18 == v19)
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v18 = 0;
        v18[1] = 0;
      }
      while (v18 != v19);
      v22 = *(int64x2_t *)(v1 + 23);
    }
    v9 = v17 + 16;
    v1[23] = v20;
    v1[24] = v17 + 16;
    v25 = v22;
    v23 = v1[25];
    v1[25] = &v15[16 * v16];
    v26 = v23;
    v24 = v22.i64[0];
    result = std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *v8 = v3;
    v8[1] = v4;
    v9 = v8 + 2;
  }
  v1[24] = v9;
  return result;
}

void std::__shared_ptr_pointer<llvm::orc::StaticLibraryDefinitionGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_pointer<llvm::orc::StaticLibraryDefinitionGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C110D8;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C110D8;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

uint64_t llvm::orc::GenericNamedTaskImpl<XOJIT_XOJIT_LinkStaticArchiveAsync::$_0>::run(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  __int128 v14[2];
  uint64_t v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[1] + 352;
  v13 = v3;
  memset(v14, 0, sizeof(v14));
  llvm::orc::StaticLibraryDefinitionGenerator::Create(v4, &v13, v14, (uint64_t)&v15);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
  v5 = v13;
  v13 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if ((v16 & 1) != 0)
  {
    v9 = (void (*)(uint64_t, uint64_t))a1[4];
    v8 = a1[5];
    v10 = v15;
    v15 = 0;
    v9(v8, v10);
  }
  else
  {
    v6 = v15;
    v15 = 0;
    v12 = v6;
    llvm::orc::JITDylib::addGenerator<llvm::orc::StaticLibraryDefinitionGenerator>(v2, &v12);
    v7 = v12;
    v12 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    ((void (*)(_QWORD, _QWORD))a1[4])(a1[5], 0);
  }
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void xojit::XOJITXPC::~XOJITXPC(xojit::XOJITXPC *this)
{
  std::mutex *v1;

  *(_QWORD *)this = &off_251C11190;
  v1 = (std::mutex *)((char *)this + 8);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 11);
  std::mutex::~mutex(v1);
}

{
  std::mutex *v1;

  *(_QWORD *)this = &off_251C11190;
  v1 = (std::mutex *)((char *)this + 8);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 11);
  std::mutex::~mutex(v1);
  JUMPOUT(0x24BD1B3A4);
}

void xojit::XOJITXPC::start(xojit::XOJITXPC *this@<X0>, _QWORD *a2@<X8>)
{
  _xpc_connection_s *v4;
  _QWORD handler[5];

  v4 = (_xpc_connection_s *)*((_QWORD *)this + 9);
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 0x40000000;
  handler[2] = ___ZN5xojit8XOJITXPC5startEv_block_invoke;
  handler[3] = &__block_descriptor_tmp;
  handler[4] = this;
  xpc_connection_set_event_handler(v4, handler);
  xpc_connection_resume(*((xpc_connection_t *)this + 9));
  *a2 = 0;
}

void xojit::XOJITXPC::sendMessage(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, const void *a5@<X4>, size_t a6@<X5>, uint64_t *a7@<X8>)
{
  xpc_object_t empty;
  _xpc_connection_s *v15;
  uint64_t v16[2];

  empty = xpc_dictionary_create_empty();
  xpc_dictionary_set_uint64(empty, "opc", 0);
  xpc_dictionary_set_uint64(empty, "opd", a2);
  xpc_dictionary_set_uint64(empty, "seq", a3);
  xpc_dictionary_set_uint64(empty, "tag", a4);
  xpc_dictionary_set_data(empty, "buf", a5, a6);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v15 = *(_xpc_connection_s **)(a1 + 72);
  if (v15)
  {
    xpc_connection_send_message(v15, empty);
    std::mutex::unlock((std::mutex *)(a1 + 8));
    *a7 = 0;
  }
  else
  {
    getErrorErrorCat();
    v16[0] = 3;
    v16[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"XPC connection closed", v16, a7);
    std::mutex::unlock((std::mutex *)(a1 + 8));
  }
  xpc_release(empty);
}

void xojit::XOJITXPC::disconnect(xojit::XOJITXPC *this)
{
  std::mutex *v2;
  _xpc_connection_s *v3;

  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = (_xpc_connection_s *)*((_QWORD *)this + 9);
  if (v3)
    xpc_connection_cancel(v3);
  std::mutex::unlock(v2);
}

void xojit::XOJITXPC::setHandler(uint64_t a1, __int128 *a2)
{
  std::mutex *v4;
  _QWORD *v5;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if ((__int128 *)(a1 + 88) != a2)
  {
    v5 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 88));
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v5, a2);
  }
  std::mutex::unlock(v4);
}

void llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>(uint64_t *a1, llvm::formatv_object_base *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  llvm::formatv_object_base *v11;
  char v12;
  char v13;

  v6 = operator new();
  v7 = v6;
  v13 = 1;
  if (*(_BYTE *)a2)
  {
    v11 = a2;
    v8 = 3;
  }
  else
  {
    v8 = 1;
  }
  v12 = v8;
  v10 = *a3;
  v9 = a3[1];
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(&v11, (std::string *)(v6 + 8));
  *(_QWORD *)(v7 + 32) = v10;
  *(_QWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 48) = 1;
  *a1 = v7;
}

void llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>(llvm::formatv_object_base **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = operator new();
  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(a1, (std::string *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 1;
  *a3 = v6;
}

uint64_t xojit::createXPCEPC@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  NSObject *global_queue;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  int *v19;
  char *v20;
  _QWORD v21[4];
  uint64_t v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v17 = a1;
  v16 = a2;
  v6 = *a3;
  if (!*a3)
  {
    global_queue = dispatch_get_global_queue(25, 0);
    v8 = _xojit_defaultConcurrency();
    v9 = operator new();
    v6 = v9;
    *(_QWORD *)v9 = &off_251C11398;
    *(_QWORD *)(v9 + 8) = global_queue;
    *(_QWORD *)(v9 + 24) = 850045863;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    v10 = v8 ? v8 : -1;
    *(_QWORD *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 88) = v10;
    *(_OWORD *)(v9 + 96) = 0uLL;
    *(_OWORD *)(v9 + 112) = 0uLL;
    *(_OWORD *)(v9 + 128) = 0uLL;
    *(_QWORD *)(v9 + 144) = 0;
    dispatch_retain(global_queue);
    *(_QWORD *)(v6 + 16) = dispatch_group_create();
    v11 = *a3;
    *a3 = v6;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v6 = *a3;
    }
  }
  v14 = 0;
  v15 = 0x40000000;
  *a3 = 0;
  v13 = v6;
  *(_QWORD *)&v18 = &v14;
  *((_QWORD *)&v18 + 1) = &v15;
  v19 = &v16;
  v20 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallbacksHolder<xojit::createXPCEPC(_xpc_connection_s *,unsigned int,std::unique_ptr<llvm::orc::TaskDispatcher>)::$_0,xojit::createXPCEPC(_xpc_connection_s *,unsigned int,std::unique_ptr<llvm::orc::TaskDispatcher>)::$_0,void>::Callbacks
      + 2;
  v21[0] = xojit::createMemAccess;
  v21[3] = (char *)&llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallbacksHolder<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::ExecutorProcessControl&),llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::ExecutorProcessControl&),void>::Callbacks
         + 2;
  llvm::orc::SimpleRemoteEPC::Create<xojit::XOJITXPC,_xpc_connection_s *&,xojit::XOJITXPC*&>(&v13, &v18, &v17, &v14, (uint64_t)&v22);
  *(_BYTE *)(a4 + 8) = *(_BYTE *)(a4 + 8) & 0xFE | v23 & 1;
  *(_QWORD *)a4 = v22;
  v22 = 0;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v21);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v18);
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *llvm::orc::SimpleRemoteEPC::Create<xojit::XOJITXPC,_xpc_connection_s *&,xojit::XOJITXPC*&>@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, void **a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::unique_lock<std::mutex> v24[2];
  _QWORD v25[5];

  v25[4] = *MEMORY[0x24BDAC8D0];
  v10 = operator new();
  v11 = (char *)operator new(0x70uLL);
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &off_251C11158;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *((_OWORD *)v11 + 4) = 0u;
  *((_OWORD *)v11 + 5) = 0u;
  *(_OWORD *)(v11 + 92) = 0u;
  *((_DWORD *)v11 + 27) = 16;
  *((_QWORD *)v11 + 3) = 850045863;
  v12 = *a1;
  *a1 = 0;
  *(_QWORD *)(v10 + 16) = v11;
  *(_QWORD *)(v10 + 24) = v12;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 76) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_QWORD *)(v10 + 144) = 0x2000000000;
  *(_QWORD *)(v10 + 152) = 0;
  *(_QWORD *)(v10 + 160) = 0;
  *(_QWORD *)(v10 + 168) = 0x1000000000;
  *(_QWORD *)v10 = &off_251C15408;
  *(_QWORD *)(v10 + 8) = v11 + 24;
  *(_QWORD *)(v10 + 176) = &unk_251C15470;
  *(_QWORD *)(v10 + 184) = 850045863;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_QWORD *)(v10 + 248) = 1018212795;
  *(_QWORD *)(v10 + 240) = 0;
  *(_OWORD *)(v10 + 281) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_OWORD *)(v10 + 272) = 0u;
  *(_OWORD *)(v10 + 380) = 0u;
  *(_OWORD *)(v10 + 352) = 0u;
  *(_OWORD *)(v10 + 368) = 0u;
  *(_OWORD *)(v10 + 320) = 0u;
  *(_OWORD *)(v10 + 336) = 0u;
  *(_OWORD *)(v10 + 304) = 0u;
  v13 = *a3;
  v14 = operator new();
  *(_QWORD *)v14 = &off_251C11190;
  *(_QWORD *)(v14 + 8) = 850045863;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_QWORD *)(v14 + 64) = 0;
  *(_QWORD *)(v14 + 72) = v13;
  *(_QWORD *)(v14 + 80) = v10 + 176;
  *(_QWORD *)(v14 + 112) = 0;
  *a4 = v14;
  xpc_retain(v13);
  v15 = *(_QWORD *)(v10 + 312);
  *(_QWORD *)(v10 + 312) = v14;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v24, a2);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, a2 + 2);
  llvm::orc::SimpleRemoteEPC::setup(v10, v24, &v21);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v24);
  v17 = v21;
  if (v21)
  {
    v21 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v10 + 64))(&v19, v10);
    v22 = v19;
    v23 = v17;
    v19 = 0;
    llvm::ErrorList::join(&v23, &v22, &v20);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    *(_BYTE *)(a5 + 8) |= 1u;
    v18 = v19;
    *(_QWORD *)a5 = v20;
    v20 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_QWORD *)a5 = v10;
  }
  return result;
}

uint64_t xojit::createMemAccess@<X0>(xojit *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[16];

  v12[15] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  v12[0] = &v9;
  v12[1] = "__xojit_memaccess_write_uint8s";
  v12[2] = 30;
  v12[3] = (char *)&v9 + 8;
  v12[4] = "__xojit_memaccess_write_uint16s";
  v12[5] = 31;
  v12[6] = &v10;
  v12[7] = "__xojit_memaccess_write_uint32s";
  v12[8] = 31;
  v12[9] = (char *)&v10 + 8;
  v12[10] = "__xojit_memaccess_write_uint64s";
  v12[11] = 31;
  v12[12] = &v11;
  v12[13] = "__xojit_memaccess_write_buffers";
  v12[14] = 31;
  llvm::orc::ExecutorProcessControl::getBootstrapSymbols((uint64_t)this, (uint64_t)v12, 5, &v8);
  result = v8;
  if (v8)
  {
    v6 = *(_BYTE *)(a2 + 8) | 1;
  }
  else
  {
    result = operator new();
    v7 = v10;
    *(_OWORD *)(result + 16) = v9;
    *(_OWORD *)(result + 32) = v7;
    *(_QWORD *)(result + 48) = v11;
    *(_QWORD *)result = &off_251C111E8;
    *(_QWORD *)(result + 8) = this;
    v6 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)a2 = result;
  return result;
}

void llvm::orc::ExecutorProcessControl::getBootstrapSymbols(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  int Key;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  llvm::formatv_object_base *v13[4];
  __int16 v14;

  if (a3)
  {
    v6 = (uint64_t *)(a1 + 152);
    v7 = (unint64_t *)(a2 + 16);
    v8 = 24 * a3;
    while (1)
    {
      Key = llvm::StringMapImpl::FindKey(v6, (uint64_t *)*(v7 - 1), *v7);
      if (Key == -1 || Key == (unint64_t)*(unsigned int *)(a1 + 160))
        break;
      *(_QWORD *)*(v7 - 2) = *(_QWORD *)(*(_QWORD *)(*v6 + 8 * Key) + 8);
      v7 += 3;
      v8 -= 24;
      if (!v8)
        goto LABEL_6;
    }
    v12 = 1283;
    v11[0] = "Symbol \"";
    v11[2] = *(v7 - 1);
    v11[3] = *v7;
    v13[0] = (llvm::formatv_object_base *)v11;
    v13[2] = (llvm::formatv_object_base *)"\" not found in bootstrap symbols map";
    v14 = 770;
    getErrorErrorCat();
    v10 = operator new();
    *(_QWORD *)v10 = off_251C127D0;
    llvm::Twine::str(v13, (std::string *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v10 + 48) = 1;
    *a4 = v10;
  }
  else
  {
LABEL_6:
    *a4 = 0;
  }
}

void llvm::orc::EPCGenericMemoryAccess::~EPCGenericMemoryAccess(llvm::orc::EPCGenericMemoryAccess *this)
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::orc::EPCGenericMemoryAccess::writeUInt8sAsync(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  unint64_t v18;
  void *v19;
  llvm::formatv_object_base *v20;
  void *v21;
  void *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[2];
  llvm::formatv_object_base *v28;
  __int128 v29;
  char *v30;
  llvm::formatv_object_base *v31;
  __int128 v32[2];
  llvm::formatv_object_base *v33;
  __int128 v34[2];
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (llvm::formatv_object_base *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v25, a4);
  v9 = 9 * ((a3 - 1) & 0xFFFFFFFFFFFFFFFLL);
  if (a3)
    v10 = v9 + 17;
  else
    v10 = 8;
  if (a3)
  {
    v11 = malloc_type_malloc(v9 + 17, 0xBCDE199DuLL);
    v12 = v11;
    *v11 = a3;
    v13 = a2 + 16 * a3;
    v14 = v9 + 9;
    v15 = 8;
    while (1)
    {
      v16 = (char *)v11 + v15;
      *(_QWORD *)v16 = *(_QWORD *)a2;
      v16[8] = *(_BYTE *)(a2 + 8);
      a2 += 16;
      if (a2 == v13)
        break;
      v14 -= 9;
      v15 += 9;
      if (v14 <= 7)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v23);
        free(v12);
        if (v24)
          goto LABEL_19;
        v31 = (llvm::formatv_object_base *)v23;
        if (!v23)
          goto LABEL_19;
        getErrorErrorCat();
        v35 = 3;
        *(_QWORD *)&v36[0] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v31, &v35, (uint64_t *)&v28);
        v33 = v28;
        v28 = 0;
        if ((v26 & 2) != 0)
          v17 = &v25;
        else
          v17 = (__int128 *)v25;
        (*(void (**)(__int128 *, llvm::formatv_object_base **))(v26 & 0xFFFFFFFFFFFFFFF8))(v17, &v33);
        if (v33)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v33 + 8))(v33);
        if (v28)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v28 + 8))(v28);
        goto LABEL_23;
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v23 = v12;
  v24 = v10;
LABEL_19:
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v27, &v25);
  v18 = v24;
  if (v24 <= 8)
    v19 = &v23;
  else
    v19 = v23;
  v31 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v32, v27);
  v33 = v31;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, v32);
  v35 = (uint64_t)v33;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36, v34);
  v20 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
  v28 = v20;
  v29 = xmmword_24AA2ACA0;
  *(_QWORD *)v20 = v35;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20 + 8, v36);
  v30 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v36);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v32);
  (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void *, unint64_t))(*v6 + 56))(v6, v7, &v28, v19, v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v28);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
LABEL_23:
  if (v24 >= 9)
  {
    v21 = v23;
LABEL_27:
    free(v21);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
  }
  if (!v24)
  {
    v21 = v23;
    if (v23)
      goto LABEL_27;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
}

_QWORD *llvm::orc::EPCGenericMemoryAccess::writeUInt16sAsync(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  unint64_t v18;
  void *v19;
  llvm::formatv_object_base *v20;
  void *v21;
  void *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[2];
  llvm::formatv_object_base *v28;
  __int128 v29;
  char *v30;
  llvm::formatv_object_base *v31;
  __int128 v32[2];
  llvm::formatv_object_base *v33;
  __int128 v34[2];
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = (llvm::formatv_object_base *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v25, a4);
  v9 = 10 * ((a3 - 1) & 0xFFFFFFFFFFFFFFFLL);
  if (a3)
    v10 = v9 + 18;
  else
    v10 = 8;
  if (a3)
  {
    v11 = malloc_type_malloc(v9 + 18, 0xBCDE199DuLL);
    v12 = v11;
    *v11 = a3;
    v13 = a2 + 16 * a3;
    v14 = v9 + 10;
    v15 = 8;
    while (1)
    {
      v16 = (char *)v11 + v15;
      *(_QWORD *)v16 = *(_QWORD *)a2;
      *((_WORD *)v16 + 4) = *(_WORD *)(a2 + 8);
      a2 += 16;
      if (a2 == v13)
        break;
      v14 -= 10;
      v15 += 10;
      if (v14 <= 7)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v23);
        free(v12);
        if (v24)
          goto LABEL_19;
        v31 = (llvm::formatv_object_base *)v23;
        if (!v23)
          goto LABEL_19;
        getErrorErrorCat();
        v35 = 3;
        *(_QWORD *)&v36[0] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v31, &v35, (uint64_t *)&v28);
        v33 = v28;
        v28 = 0;
        if ((v26 & 2) != 0)
          v17 = &v25;
        else
          v17 = (__int128 *)v25;
        (*(void (**)(__int128 *, llvm::formatv_object_base **))(v26 & 0xFFFFFFFFFFFFFFF8))(v17, &v33);
        if (v33)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v33 + 8))(v33);
        if (v28)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v28 + 8))(v28);
        goto LABEL_23;
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v23 = v12;
  v24 = v10;
LABEL_19:
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v27, &v25);
  v18 = v24;
  if (v24 <= 8)
    v19 = &v23;
  else
    v19 = v23;
  v31 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v32, v27);
  v33 = v31;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, v32);
  v35 = (uint64_t)v33;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36, v34);
  v20 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
  v28 = v20;
  v29 = xmmword_24AA2ACA0;
  *(_QWORD *)v20 = v35;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20 + 8, v36);
  v30 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v36);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v32);
  (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void *, unint64_t))(*v6 + 56))(v6, v7, &v28, v19, v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v28);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
LABEL_23:
  if (v24 >= 9)
  {
    v21 = v23;
LABEL_27:
    free(v21);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
  }
  if (!v24)
  {
    v21 = v23;
    if (v23)
      goto LABEL_27;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
}

_QWORD *llvm::orc::EPCGenericMemoryAccess::writeUInt32sAsync(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 *v17;
  unint64_t v18;
  void *v19;
  llvm::formatv_object_base *v20;
  void *v21;
  void *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[2];
  llvm::formatv_object_base *v28;
  __int128 v29;
  char *v30;
  llvm::formatv_object_base *v31;
  __int128 v32[2];
  llvm::formatv_object_base *v33;
  __int128 v34[2];
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (llvm::formatv_object_base *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v25, a4);
  v9 = 12 * ((a3 - 1) & 0xFFFFFFFFFFFFFFFLL);
  if (a3)
    v10 = v9 + 20;
  else
    v10 = 8;
  if (a3)
  {
    v11 = malloc_type_malloc(v9 + 20, 0xBCDE199DuLL);
    v12 = v11;
    *v11 = a3;
    v13 = a2 + 16 * a3;
    v14 = v9 + 12;
    v15 = 8;
    while (1)
    {
      v16 = (char *)v11 + v15;
      *(_QWORD *)v16 = *(_QWORD *)a2;
      *((_DWORD *)v16 + 2) = *(_DWORD *)(a2 + 8);
      a2 += 16;
      if (a2 == v13)
        break;
      v14 -= 12;
      v15 += 12;
      if (v14 <= 7)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v23);
        free(v12);
        if (v24)
          goto LABEL_19;
        v31 = (llvm::formatv_object_base *)v23;
        if (!v23)
          goto LABEL_19;
        getErrorErrorCat();
        v35 = 3;
        *(_QWORD *)&v36[0] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v31, &v35, (uint64_t *)&v28);
        v33 = v28;
        v28 = 0;
        if ((v26 & 2) != 0)
          v17 = &v25;
        else
          v17 = (__int128 *)v25;
        (*(void (**)(__int128 *, llvm::formatv_object_base **))(v26 & 0xFFFFFFFFFFFFFFF8))(v17, &v33);
        if (v33)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v33 + 8))(v33);
        if (v28)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v28 + 8))(v28);
        goto LABEL_23;
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v23 = v12;
  v24 = v10;
LABEL_19:
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v27, &v25);
  v18 = v24;
  if (v24 <= 8)
    v19 = &v23;
  else
    v19 = v23;
  v31 = v8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v32, v27);
  v33 = v31;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v34, v32);
  v35 = (uint64_t)v33;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36, v34);
  v20 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
  v28 = v20;
  v29 = xmmword_24AA2ACA0;
  *(_QWORD *)v20 = v35;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20 + 8, v36);
  v30 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v36);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v32);
  (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void *, unint64_t))(*v6 + 56))(v6, v7, &v28, v19, v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v28);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
LABEL_23:
  if (v24 >= 9)
  {
    v21 = v23;
LABEL_27:
    free(v21);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
  }
  if (!v24)
  {
    v21 = v23;
    if (v23)
      goto LABEL_27;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v25);
}

_QWORD *llvm::orc::EPCGenericMemoryAccess::writeUInt64sAsync(uint64_t a1, _QWORD *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  size_t v9;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  void **v14;
  llvm::formatv_object_base *v15;
  void *v16;
  __int128 *v18;
  void *v19[2];
  __int128 v20;
  uint64_t v21;
  __int128 v22[2];
  llvm::formatv_object_base *v23;
  __int128 v24;
  char *v25;
  llvm::formatv_object_base *v26;
  __int128 v27[2];
  llvm::formatv_object_base *v28;
  __int128 v29[2];
  uint64_t v30[5];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = (llvm::formatv_object_base *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v20, a4);
  v9 = (16 * a3) | 8;
  v30[0] = 0;
  v30[1] = v9;
  if (v9 == 8)
  {
    v10 = v30;
  }
  else
  {
    v10 = (uint64_t *)malloc_type_malloc(v9, 0xBCDE199DuLL);
    v30[0] = (uint64_t)v10;
  }
  *v10 = a3;
  if (a3)
  {
    if (!(16 * a3))
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v19);
      goto LABEL_10;
    }
    v11 = &a2[2 * a3];
    v12 = v10 + 2;
    do
    {
      *(v12 - 1) = *a2;
      *v12 = a2[1];
      v12 += 2;
      a2 += 2;
    }
    while (a2 != v11);
  }
  *(_OWORD *)v19 = *(_OWORD *)v30;
LABEL_10:
  if (v19[1] || (v26 = (llvm::formatv_object_base *)v19[0]) == 0)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v22, &v20);
    v13 = v19[1];
    if (v19[1] <= (void *)8)
      v14 = v19;
    else
      v14 = (void **)v19[0];
    v26 = v8;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v27, v22);
    v28 = v26;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v29, v27);
    v30[0] = (uint64_t)v28;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v30[1], v29);
    v15 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
    v23 = v15;
    v24 = xmmword_24AA2ACA0;
    *(_QWORD *)v15 = v30[0];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15 + 8, (__int128 *)&v30[1]);
    v25 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v30[1]);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v29);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
    (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void **, void *))(*v6 + 56))(v6, v7, &v23, v14, v13);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v23);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v22);
  }
  else
  {
    getErrorErrorCat();
    v30[0] = 3;
    v30[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v26, v30, (uint64_t *)&v23);
    v28 = v23;
    v23 = 0;
    if ((v21 & 2) != 0)
      v18 = &v20;
    else
      v18 = (__int128 *)v20;
    (*(void (**)(__int128 *, llvm::formatv_object_base **))(v21 & 0xFFFFFFFFFFFFFFF8))(v18, &v28);
    if (v28)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v28 + 8))(v28);
    if (v23)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v23 + 8))(v23);
  }
  if (v19[1] >= (void *)9)
  {
    v16 = v19[0];
LABEL_19:
    free(v16);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v20);
  }
  if (!v19[1])
  {
    v16 = v19[0];
    if (v19[0])
      goto LABEL_19;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v20);
}

_QWORD *llvm::orc::EPCGenericMemoryAccess::writeBuffersAsync(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  _QWORD *v6;
  uint64_t v7;
  llvm::formatv_object_base *v8;
  llvm::formatv_object_base *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void **v20;
  llvm::formatv_object_base *v21;
  void *v22;
  __int128 *v24;
  void *v25[2];
  __int128 v26;
  uint64_t v27;
  __int128 v28[2];
  llvm::formatv_object_base *v29;
  __int128 v30;
  char *v31;
  llvm::formatv_object_base *v32;
  __int128 v33[2];
  llvm::formatv_object_base *v34;
  __int128 v35[2];
  _OWORD v36[2];
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = (llvm::formatv_object_base *)v6[3];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v26, a4);
  if (a3)
  {
    v9 = (llvm::formatv_object_base *)((char *)v36 + 8);
    v10 = &a2[3 * a3];
    v11 = 24 * a3;
    v12 = a2 + 2;
    v13 = 8;
    do
    {
      v14 = *v12;
      v12 += 3;
      v13 += v14 + 16;
      v11 -= 24;
    }
    while (v11);
    *(_QWORD *)&v36[0] = 0;
    *((_QWORD *)&v36[0] + 1) = v13;
    if (v13 < 9)
    {
      v15 = v36;
      v34 = (llvm::formatv_object_base *)v36;
      *(_QWORD *)&v35[0] = v13;
      if (v13 != 8)
      {
LABEL_13:
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v25);
        if (*((_QWORD *)&v36[0] + 1) > 8uLL || !*((_QWORD *)&v36[0] + 1) && *(_QWORD *)&v36[0])
          free(*(void **)&v36[0]);
        goto LABEL_17;
      }
      v16 = 0;
    }
    else
    {
      v15 = malloc_type_malloc(v13, 0xBCDE199DuLL);
      v9 = (llvm::formatv_object_base *)(v15 + 1);
      *(_QWORD *)&v36[0] = v15;
      v16 = v13 - 8;
    }
    *v15 = a3;
    v34 = v9;
    *(_QWORD *)&v35[0] = v16;
    while (1)
    {
      v18 = *a2;
      v17 = (uint64_t)(a2 + 1);
      if ((llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::StringRef>(&v34, v18, v17) & 1) == 0)goto LABEL_13;
      a2 = (uint64_t *)(v17 + 16);
      if (a2 == v10)
        goto LABEL_12;
    }
  }
  v36[0] = xmmword_24AA2ACB0;
LABEL_12:
  *(_OWORD *)v25 = v36[0];
LABEL_17:
  if (v25[1] || (v32 = (llvm::formatv_object_base *)v25[0]) == 0)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v28, &v26);
    v19 = v25[1];
    if (v25[1] <= (void *)8)
      v20 = v25;
    else
      v20 = (void **)v25[0];
    v32 = v8;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, v28);
    v34 = v32;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v35, v33);
    *(_QWORD *)&v36[0] = v34;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36 + 8, v35);
    v21 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
    v29 = v21;
    v30 = xmmword_24AA2ACA0;
    *(_QWORD *)v21 = *(_QWORD *)&v36[0];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v21 + 8, (_OWORD *)((char *)v36 + 8));
    v31 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_S1I_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v36 + 1);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v35);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v33);
    (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void **, void *))(*v6 + 56))(v6, v7, &v29, v20, v19);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v29);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v28);
  }
  else
  {
    getErrorErrorCat();
    *(_QWORD *)&v36[0] = 3;
    *((_QWORD *)&v36[0] + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v32, (uint64_t *)v36, (uint64_t *)&v29);
    v34 = v29;
    v29 = 0;
    if ((v27 & 2) != 0)
      v24 = &v26;
    else
      v24 = (__int128 *)v26;
    (*(void (**)(__int128 *, llvm::formatv_object_base **))(v27 & 0xFFFFFFFFFFFFFFF8))(v24, &v34);
    if (v34)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v34 + 8))(v34);
    if (v29)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v29 + 8))(v29);
  }
  if (v25[1] >= (void *)9)
  {
    v22 = v25[0];
LABEL_26:
    free(v22);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v26);
  }
  if (!v25[1])
  {
    v22 = v25[0];
    if (v25[0])
      goto LABEL_26;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v26);
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C11230;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11230;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11230;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEhEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIhEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(_QWORD *a1)
{
  _QWORD *v2;
  llvm::formatv_object_base *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12;

  v2 = a1 + 1;
  v3 = (llvm::formatv_object_base *)a1[5];
  v4 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v4)
  {
    v11 = v3;
    if (v3)
    {
      getErrorErrorCat();
      v9[0] = 3;
      v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, v9, &v10);
      v12 = v10;
      v10 = 0;
      v8 = a1[4];
      if ((v8 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_22:
      free(v3);
      return;
    }
  }
  v9[0] = 0;
  v5 = a1[4];
  if ((v5 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v9);
  if (v9[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  v7 = v6;
  if (v4 > 8 || (v7 & 1) == 0)
    goto LABEL_22;
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C11278;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteItEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11278;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11278;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEtEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteItEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(_QWORD *a1)
{
  _QWORD *v2;
  llvm::formatv_object_base *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12;

  v2 = a1 + 1;
  v3 = (llvm::formatv_object_base *)a1[5];
  v4 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v4)
  {
    v11 = v3;
    if (v3)
    {
      getErrorErrorCat();
      v9[0] = 3;
      v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, v9, &v10);
      v12 = v10;
      v10 = 0;
      v8 = a1[4];
      if ((v8 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_22:
      free(v3);
      return;
    }
  }
  v9[0] = 0;
  v5 = a1[4];
  if ((v5 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v9);
  if (v9[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  v7 = v6;
  if (v4 > 8 || (v7 & 1) == 0)
    goto LABEL_22;
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C112C0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C112C0;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C112C0;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEjEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIjEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(_QWORD *a1)
{
  _QWORD *v2;
  llvm::formatv_object_base *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12;

  v2 = a1 + 1;
  v3 = (llvm::formatv_object_base *)a1[5];
  v4 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v4)
  {
    v11 = v3;
    if (v3)
    {
      getErrorErrorCat();
      v9[0] = 3;
      v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, v9, &v10);
      v12 = v10;
      v10 = 0;
      v8 = a1[4];
      if ((v8 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_22:
      free(v3);
      return;
    }
  }
  v9[0] = 0;
  v5 = a1[4];
  if ((v5 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v9);
  if (v9[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  v7 = v6;
  if (v4 > 8 || (v7 & 1) == 0)
    goto LABEL_22;
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C11308;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSG_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISL_E9callAsyncIS18_SP_JSU_EEEvS15_SW_DpRKT1_EUlSN_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11308;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11308;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrEyEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSC_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes9UIntWriteIyEEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISH_E9callAsyncIS14_SL_JSQ_EEEvS11_SS_DpRKT1_EUlSJ_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(_QWORD *a1)
{
  _QWORD *v2;
  llvm::formatv_object_base *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12;

  v2 = a1 + 1;
  v3 = (llvm::formatv_object_base *)a1[5];
  v4 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v4)
  {
    v11 = v3;
    if (v3)
    {
      getErrorErrorCat();
      v9[0] = 3;
      v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, v9, &v10);
      v12 = v10;
      v10 = 0;
      v8 = a1[4];
      if ((v8 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_22:
      free(v3);
      return;
    }
  }
  v9[0] = 0;
  v5 = a1[4];
  if ((v5 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v9);
  if (v9[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  v7 = v6;
  if (v4 > 8 || (v7 & 1) == 0)
    goto LABEL_22;
}

uint64_t llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::StringRef>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = a2;
  v3 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v3;
  return llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::StringRef,void>::serialize(a1, *(const void **)a3, *(_QWORD *)(a3 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C11350;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPvS1J_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSEmptyENS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSC_IcEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncIFvSH_ES8_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS2_8tpctypes11BufferWriteEEEEEEvOT0_NS2_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNSA_ISM_E9callAsyncIS18_SQ_JSU_EEEvS15_SW_DpRKT1_EUlSO_SB_E_JSU_EEEvS15_SW_S1E_EUlS4_E_EENS7_18IncomingWFRHandlerES15_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11350;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11350;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSEmptyENS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS8_IcEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncIFvSD_ES3_NS_15unique_functionIFvNS_5ErrorEEEEJNS_8ArrayRefINS0_8tpctypes11BufferWriteEEEEEEvOT0_NS0_12ExecutorAddrEOT1_DpRKT2_EUlOT_PKcmE_ZNS6_ISI_E9callAsyncIS14_SM_JSQ_EEEvS11_SS_DpRKT1_EUlSK_S7_E_JSQ_EEEvS11_SS_S1A_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES11_ENUlS1C_E_clES1C_EUlvE_E3runEv(_QWORD *a1)
{
  _QWORD *v2;
  llvm::formatv_object_base *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  char v7;
  uint64_t v8;
  uint64_t v9[2];
  uint64_t v10;
  llvm::formatv_object_base *v11;
  uint64_t v12;

  v2 = a1 + 1;
  v3 = (llvm::formatv_object_base *)a1[5];
  v4 = a1[6];
  a1[5] = 0;
  a1[6] = 0;
  if (!v4)
  {
    v11 = v3;
    if (v3)
    {
      getErrorErrorCat();
      v9[0] = 3;
      v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, v9, &v10);
      v12 = v10;
      v10 = 0;
      v8 = a1[4];
      if ((v8 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v12);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
LABEL_22:
      free(v3);
      return;
    }
  }
  v9[0] = 0;
  v5 = a1[4];
  if ((v5 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v9);
  if (v9[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v9[0] + 8))(v9[0]);
  if (v4)
    v6 = 1;
  else
    v6 = v3 == 0;
  v7 = v6;
  if (v4 > 8 || (v7 & 1) == 0)
    goto LABEL_22;
}

void llvm::SmallVectorImpl<char>::resizeImpl<false>(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (a1[2] < a2)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, a2, 1);
        v2 = a1[1];
      }
      if (a2 != v2)
        bzero((void *)(*a1 + v2), a2 - v2);
    }
    a1[1] = a2;
  }
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, const void **a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;

  if ((const void **)a1 != a2)
  {
    v5 = a2 + 3;
    v4 = *a2;
    if (v4 == v5)
    {
      v6 = (unint64_t)a2[1];
      v7 = *(_QWORD *)(a1 + 8);
      if (v7 >= v6)
      {
        if (v6)
          memmove(*(void **)a1, v4, (size_t)a2[1]);
      }
      else
      {
        if (*(_QWORD *)(a1 + 16) >= v6)
        {
          if (v7)
            memmove(*(void **)a1, v4, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_QWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v6, 1);
          v7 = 0;
        }
        v8 = (char *)a2[1];
        if ((char *)v7 != v8)
          memcpy((void *)(*(_QWORD *)a1 + v7), (char *)*a2 + v7, &v8[(_QWORD)*a2] - ((char *)*a2 + v7));
      }
      *(_QWORD *)(a1 + 8) = v6;
      a2[1] = 0;
    }
    else
    {
      llvm::SmallVectorImpl<char>::assignRemote(a1, (uint64_t)a2);
    }
  }
  return a1;
}

__n128 llvm::SmallVectorImpl<char>::assignRemote(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  __n128 result;

  v5 = (void *)(a1 + 24);
  v4 = *(void **)a1;
  if (v4 != v5)
    free(v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = a2 + 24;
  return result;
}

void `anonymous namespace'::GCDTaskDispatcher::~GCDTaskDispatcher(_anonymous_namespace_::GCDTaskDispatcher *this)
{
  *(_QWORD *)this = &off_251C11398;
  dispatch_release(*((dispatch_object_t *)this + 2));
  dispatch_release(*((dispatch_object_t *)this + 1));
  std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100]((_QWORD *)this + 13);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
}

{
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::GCDTaskDispatcher::dispatch(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  unint64_t v5;
  NSObject *v6;
  NSObject *v7;
  _QWORD block[5];

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  std::deque<std::unique_ptr<llvm::orc::Task>>::push_back((_QWORD *)(a1 + 104), a2);
  v5 = *(_QWORD *)(a1 + 96);
  if (v5 < *(_QWORD *)(a1 + 88))
  {
    *(_QWORD *)(a1 + 96) = v5 + 1;
    v7 = *(NSObject **)(a1 + 8);
    v6 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x24BDAC760];
    block[1] = 0x40000000;
    block[2] = ___ZN12_GLOBAL__N_117GCDTaskDispatcher8dispatchENSt3__110unique_ptrIN4llvm3orc4TaskENS1_14default_deleteIS5_EEEE_block_invoke;
    block[3] = &__block_descriptor_tmp_26;
    block[4] = a1;
    dispatch_group_async(v6, v7, block);
  }
  std::mutex::unlock(v4);
}

intptr_t `anonymous namespace'::GCDTaskDispatcher::shutdown(dispatch_group_t *this)
{
  return dispatch_group_wait(this[2], 0xFFFFFFFFFFFFFFFFLL);
}

uint64_t std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 >> 9];
    v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if ((char *)++v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (uint64_t *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
  }
  else
  {
    if (v12 != 2)
      goto LABEL_18;
    v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    v14 = *v2++;
    operator delete(v14);
  }
  return std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::deque<std::unique_ptr<llvm::orc::Task>>::push_back(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<std::unique_ptr<llvm::orc::Task>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  v9 = *(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  v10 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void ___ZN12_GLOBAL__N_117GCDTaskDispatcher8dispatchENSt3__110unique_ptrIN4llvm3orc4TaskENS1_14default_deleteIS5_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)(v1 + 24));
  while (*(_QWORD *)(v1 + 144))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 112) + ((*(_QWORD *)(v1 + 136) >> 6) & 0x3FFFFFFFFFFFFF8));
    v3 = *(_QWORD *)(v1 + 136) & 0x1FFLL;
    v4 = *(_QWORD *)(v2 + 8 * v3);
    *(_QWORD *)(v2 + 8 * v3) = 0;
    std::deque<std::unique_ptr<llvm::orc::Task>>::pop_front((_QWORD *)(v1 + 104));
    std::mutex::unlock((std::mutex *)(v1 + 24));
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    std::mutex::lock((std::mutex *)(v1 + 24));
  }
  --*(_QWORD *)(v1 + 96);
  std::mutex::unlock((std::mutex *)(v1 + 24));
}

uint64_t std::deque<std::unique_ptr<llvm::orc::Task>>::pop_front(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8));
  v4 = *(_QWORD *)(v3 + 8 * (v2 & 0x1FF));
  *(_QWORD *)(v3 + 8 * (v2 & 0x1FF)) = 0;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v2 = a1[4];
  }
  v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  return std::deque<std::unique_ptr<llvm::orc::Task>>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)a1, 1);
}

void std::deque<std::unique_ptr<llvm::orc::Task>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v29 = 1;
      else
        v29 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v5, v29);
      v31 = &v30[8 * (v29 >> 2)];
      v33 = &v30[8 * v32];
      v34 = (uint64_t *)a1[1];
      v8 = v31;
      v35 = a1[2] - (_QWORD)v34;
      if (v35)
      {
        v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        v36 = 8 * (v35 >> 3);
        v37 = &v30[8 * (v29 >> 2)];
        do
        {
          v38 = *v34++;
          *(_QWORD *)v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_front((uint64_t)a1, &v54);
    v40 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v41 = *v40;
    v9 = (char *)(v40 + 1);
    v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_29;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 3), v46);
      v31 = &v30[8 * (v46 >> 2)];
      v33 = &v30[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v31;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v30[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_back(&v54, &v53);
  v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    v28 = (char *)a1[2];
  }
  v42 = (char *)*a1;
  v43 = v54;
  v44 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(_QWORD *)&v55 = v28;
  *((_QWORD *)&v55 + 1) = v45;
  if (v28 != v27)
    *(_QWORD *)&v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v42)
    operator delete(v42);
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::unique_ptr<llvm::orc::Task> *,std::allocator<std::unique_ptr<llvm::orc::Task> *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::unique_ptr<llvm::orc::Task>>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

void llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<xojit::createXPCEPC(_xpc_connection_s *,unsigned int,std::unique_ptr<llvm::orc::TaskDispatcher>)::$_0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  size_t v11;
  const std::error_category *v12;
  uint64_t v13;
  void *v14;
  size_t size;
  void **v16;
  std::string *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  int *v22;
  char *v23;
  const char *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  int v29;
  _xpc_connection_s *v30;
  int v31;
  const std::error_category *v32;
  const char *v33;
  char *v34;
  std::string::size_type v35;
  int v36;
  const std::error_category *v37;
  char *v38;
  int v39;
  int v40;
  __int128 v41;
  __int128 v42;
  char *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  const char *v50;
  char *v51;
  char *v52;
  __int16 v53;
  __int16 v54;
  std::string v55;
  std::error_code v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  void *__p[2];
  __int128 v61;
  __int128 v62;
  char v63;
  int v64[2];
  void *v65;
  __int128 v66;
  char v67;
  _BYTE buf[32];
  __int128 v69;
  __int128 *v70;
  const char *v71;
  uint64_t v72;
  char *v73;
  const char *v74;
  uint64_t v75;
  __int128 *v76;
  const char *v77;
  uint64_t v78;
  char *v79;
  const char *v80;
  uint64_t v81;
  std::string v82;
  uint64_t v83;

  v83 = *MEMORY[0x24BDAC8D0];
  v4 = **(unsigned int **)(a1 + 16);
  if (v4 >= 3)
  {
    *(_QWORD *)buf = "Unrecognized OOP-JIT type ";
    *(_QWORD *)&buf[16] = v4;
    LOWORD(v69) = 2051;
    getErrorErrorCat();
    v5 = (char *)operator new();
    *(_QWORD *)v5 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)buf, (std::string *)(v5 + 8));
    *((_QWORD *)v5 + 4) = 3;
    *((_QWORD *)v5 + 5) = &getErrorErrorCat(void)::ErrorErrorCat;
    v5[48] = 1;
LABEL_12:
    v10 = -1;
    goto LABEL_13;
  }
  v7 = **(_QWORD **)a1;
  v8 = **(_QWORD **)(a1 + 8);
  v54 = 0;
  llvm::orc::ExecutorProcessControl::getBootstrapMapValue<BOOL,BOOL>((uint64_t *)buf, a2, (uint64_t *)"IsSandboxed", (llvm::formatv_object_base *)0xB, (uint64_t)&v54);
  v5 = *(char **)buf;
  if (*(_QWORD *)buf)
    goto LABEL_12;
  if (!HIBYTE(v54))
  {
    getErrorErrorCat();
    *(_QWORD *)buf = 3;
    *(_QWORD *)&buf[8] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Bootstrap map missing IsSandboxed value", (uint64_t *)buf, (uint64_t *)__p);
LABEL_11:
    v5 = (char *)__p[0];
    goto LABEL_12;
  }
  v53 = 0;
  llvm::orc::ExecutorProcessControl::getBootstrapMapValue<BOOL,BOOL>((uint64_t *)buf, a2, (uint64_t *)"UseOOPJIT", (llvm::formatv_object_base *)9, (uint64_t)&v53);
  v5 = *(char **)buf;
  if (*(_QWORD *)buf)
    goto LABEL_12;
  if (!HIBYTE(v53))
  {
    getErrorErrorCat();
    *(_QWORD *)buf = 3;
    *(_QWORD *)&buf[8] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>((uint64_t *)__p, (llvm::formatv_object_base *)"Bootstrap map missing UseOOPJIT value", (uint64_t *)buf);
    goto LABEL_11;
  }
  v9 = v54;
  v82.__r_.__value_.__r.__words[2] = 0;
  if (!(_BYTE)v54 || *(_DWORD *)(a2 + 80) == 23)
  {
    *(_QWORD *)buf = &buf[24];
    *(_OWORD *)&buf[8] = xmmword_24AA2AC90;
    llvm::sys::path::system_temp_directory(1, buf);
    llvm::SmallVectorImpl<char>::append<char const*,void>(buf, "/OOPJit/", "");
    std::string::basic_string[abi:nn180100](__p, *(void **)buf, *(size_t *)&buf[8]);
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v82.__r_.__value_.__r.__words[2] = v61;
    if (*(_BYTE **)buf != &buf[24])
      free(*(void **)buf);
  }
  else
  {
    *((_BYTE *)&v82.__r_.__value_.__s + 23) = 20;
    LODWORD(v82.__r_.__value_.__r.__words[2]) = 796158282;
    *(_OWORD *)&v82.__r_.__value_.__l.__data_ = *(_OWORD *)"/private/var/OOPJit/";
  }
  v11 = strlen(*((const char **)&oop_jit_conversion + v4));
  std::string::append(&v82, *((const std::string::value_type **)&oop_jit_conversion + v4), v11);
  LOWORD(v69) = 260;
  *(_QWORD *)buf = &v82;
  *(_QWORD *)&v56.__val_ = llvm::sys::fs::create_directories(buf, 1, 511);
  v56.__cat_ = v12;
  if (v56.__val_)
  {
    *(_QWORD *)&v57 = "Could not create oop-jit code file directory ";
    *((_QWORD *)&v57 + 1) = 45;
    *(_QWORD *)&v58 = &v82;
    LOWORD(v59) = 1029;
    __p[0] = &v57;
    *(_QWORD *)&v61 = ": ";
    LOWORD(v62) = 770;
    std::error_code::message(&v55, &v56);
    *(_QWORD *)buf = __p;
    *(_QWORD *)&buf[16] = &v55;
    LOWORD(v69) = 1026;
    getErrorErrorCat();
    v13 = operator new();
    *(_QWORD *)v13 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)buf, (std::string *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = 3;
    *(_QWORD *)(v13 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v13 + 48) = 1;
    v67 |= 1u;
    *(_QWORD *)v64 = v13;
    if ((SHIBYTE(v55.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_43;
    v14 = (void *)v55.__r_.__value_.__r.__words[0];
    goto LABEL_42;
  }
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    size = v82.__r_.__value_.__l.__size_;
  std::string::basic_string[abi:nn180100]((uint64_t)__p, size + 7);
  if ((SBYTE7(v61) & 0x80u) == 0)
    v16 = __p;
  else
    v16 = (void **)__p[0];
  if (size)
  {
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &v82;
    else
      v17 = (std::string *)v82.__r_.__value_.__r.__words[0];
    memmove(v16, v17, size);
  }
  strcpy((char *)v16 + size, "/XXXXXX");
  if ((SBYTE7(v61) & 0x80u) == 0)
    v18 = (char *)__p;
  else
    v18 = (char *)__p[0];
  v19 = mkdtemp(v18);
  if (!v19)
  {
    v22 = __error();
    v23 = strerror(*v22);
    LOWORD(v69) = 773;
    v24 = "Could not create code file directory for session: ";
    v25 = 50;
LABEL_39:
    *(_QWORD *)buf = v24;
    *(_QWORD *)&buf[8] = v25;
    *(_QWORD *)&buf[16] = v23;
    getErrorErrorCat();
    v27 = operator new();
    *(_QWORD *)v27 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)buf, (std::string *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v27 + 48) = 1;
    v67 |= 1u;
    *(_QWORD *)v64 = v27;
    goto LABEL_40;
  }
  v20 = v19;
  v21 = open(v19, 0x100000);
  if (v21 == -1)
  {
    v26 = __error();
    v23 = strerror(*v26);
    LOWORD(v69) = 773;
    v24 = "Could not open temporary path for code files: ";
    v25 = 46;
    goto LABEL_39;
  }
  v67 &= ~1u;
  v64[0] = v21;
  std::string::basic_string[abi:nn180100]<0>(&v65, v20);
LABEL_40:
  if ((SBYTE7(v61) & 0x80000000) == 0)
    goto LABEL_43;
  v14 = __p[0];
LABEL_42:
  operator delete(v14);
LABEL_43:
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if ((v67 & 1) != 0)
  {
    v5 = *(char **)v64;
    *(_QWORD *)v64 = 0;
    goto LABEL_49;
  }
  v58 = 0u;
  v59 = 0u;
  v57 = 0u;
  *(_QWORD *)buf = &v57;
  *(_QWORD *)&buf[8] = "__xojit_xpcmemmgr_instance";
  *(_QWORD *)&buf[16] = 26;
  *(_QWORD *)&buf[24] = (char *)&v57 + 8;
  *(_QWORD *)&v69 = "__xojit_xpcmemmgr_acquire_slab";
  *((_QWORD *)&v69 + 1) = 30;
  v70 = &v58;
  v71 = "__xojit_xpcmemmgr_release_slab";
  v72 = 30;
  v73 = (char *)&v58 + 8;
  v74 = "__xojit_xpcmemmgr_deallocate";
  v75 = 28;
  v76 = &v59;
  v77 = "__xojit_xpcmemmgr_make_read_only";
  v78 = 32;
  v79 = (char *)&v59 + 8;
  v80 = "__xojit_xpcmemmgr_apply_sandbox_extension";
  v81 = 41;
  llvm::orc::ExecutorProcessControl::getBootstrapSymbols(a2, (uint64_t)buf, 6, (uint64_t *)&v82);
  v5 = (char *)v82.__r_.__value_.__r.__words[0];
  if (!v82.__r_.__value_.__r.__words[0])
  {
    v63 = 0;
    *(_OWORD *)__p = v57;
    v61 = v58;
    v62 = v59;
    v29 = v53;
    if (v53 | v9)
    {
      std::mutex::lock((std::mutex *)(v7 + 8));
      v30 = *(_xpc_connection_s **)(v7 + 72);
      if (!v30)
      {
        std::mutex::unlock((std::mutex *)(v7 + 8));
        getErrorErrorCat();
        *(_QWORD *)buf = 3;
        *(_QWORD *)&buf[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Connection closed", (uint64_t *)buf, (uint64_t *)&v57);
        v5 = (char *)v57;
        *(_QWORD *)&v57 = 0;
        goto LABEL_47;
      }
      xpc_connection_get_pid(v30);
      std::mutex::unlock((std::mutex *)(v7 + 8));
      std::mutex::lock((std::mutex *)(v7 + 8));
      if (!*(_QWORD *)(v7 + 72))
      {
        std::mutex::unlock((std::mutex *)(v7 + 8));
        getErrorErrorCat();
        *(_QWORD *)&v57 = 3;
        *((_QWORD *)&v57 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Connection closed", (uint64_t *)&v57, (uint64_t *)&v55);
        v5 = (char *)v55.__r_.__value_.__r.__words[0];
        v55.__r_.__value_.__r.__words[0] = 0;
        goto LABEL_47;
      }
      xpc_connection_get_audit_token();
      std::mutex::unlock((std::mutex *)(v7 + 8));
      if (csops_audittoken())
      {
        v31 = *__error();
        v32 = std::generic_category();
        LODWORD(v57) = v31;
        *((_QWORD *)&v57 + 1) = v32;
        llvm::make_error<llvm::StringError,std::error_code,char const(&)[30]>((uint64_t *)&v55, (uint64_t *)&v57);
        v5 = (char *)v55.__r_.__value_.__r.__words[0];
        goto LABEL_47;
      }
      if (v9)
      {
        v57 = *(_OWORD *)buf;
        v58 = *(_OWORD *)&buf[16];
        v33 = (const char *)sandbox_extension_issue_file_to_process();
        if (!v33)
        {
          v36 = *__error();
          v37 = std::generic_category();
          LODWORD(v55.__r_.__value_.__l.__data_) = v36;
          v55.__r_.__value_.__l.__size_ = (std::string::size_type)v37;
          llvm::make_error<llvm::StringError,std::error_code,char const(&)[41]>((uint64_t *)&v56.__val_, (uint64_t *)&v55);
          v5 = *(char **)&v56.__val_;
          goto LABEL_47;
        }
        v34 = (char *)v33;
        v52 = 0;
        *(_QWORD *)&v56.__val_ = v33;
        v56.__cat_ = (const std::error_category *)strlen(v33);
        v55.__r_.__value_.__r.__words[0] = a2;
        v55.__r_.__value_.__l.__size_ = *((_QWORD *)&v62 + 1);
        llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>),llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef>(llvm::orc::ExecutorAddr,llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &&)::{lambda(char const*,unsigned long)#1},llvm::Error,llvm::orc::ExecutorAddr,llvm::StringRef>((uint64_t *)&v51, (uint64_t *)&v55, (uint64_t *)&v52, (uint64_t *)__p, (uint64_t)&v56);
        if (v51)
        {
          v35 = (std::string::size_type)v52;
          v52 = 0;
          v55.__r_.__value_.__r.__words[0] = v35;
          llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v55);
          if (v55.__r_.__value_.__r.__words[0])
            (*(void (**)(std::string::size_type))(*(_QWORD *)v55.__r_.__value_.__l.__data_ + 8))(v55.__r_.__value_.__r.__words[0]);
          v5 = v51;
          if (v52)
            (*(void (**)(char *))(*(_QWORD *)v52 + 8))(v52);
          goto LABEL_71;
        }
        v5 = v52;
        if (v52)
        {
LABEL_71:
          free(v34);
          goto LABEL_47;
        }
        free(v34);
      }
    }
    v5 = (char *)operator new();
    *((_OWORD *)v5 + 5) = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
    *((_DWORD *)v5 + 24) = v82.__r_.__value_.__r.__words[2];
    v38 = (char *)v65;
    *((_QWORD *)v5 + 14) = v66;
    *(_QWORD *)(v5 + 119) = *(_QWORD *)((char *)&v66 + 7);
    v39 = SHIBYTE(v66);
    v66 = 0uLL;
    v65 = 0;
    v40 = v64[0];
    v41 = *(_OWORD *)__p;
    v42 = v61;
    *(_OWORD *)(v5 + 56) = v62;
    *(_OWORD *)(v5 + 40) = v42;
    *(_OWORD *)(v5 + 24) = v41;
    *(_QWORD *)v5 = &off_251C11400;
    *((_QWORD *)v5 + 1) = a2;
    *((_QWORD *)v5 + 2) = v7;
    *((_QWORD *)v5 + 9) = v8;
    v43 = v38;
    *((_WORD *)v5 + 50) = v4;
    v5[102] = v9;
    v5[103] = v29;
    *((_QWORD *)v5 + 13) = v38;
    v5[127] = v39;
    *((_DWORD *)v5 + 32) = v40;
    *((_QWORD *)v5 + 17) = 850045863;
    *((_QWORD *)v5 + 28) = 0;
    *((_QWORD *)v5 + 29) = 0;
    *((_DWORD *)v5 + 60) = 0;
    *((_OWORD *)v5 + 9) = 0u;
    *((_OWORD *)v5 + 10) = 0u;
    *((_OWORD *)v5 + 11) = 0u;
    *((_OWORD *)v5 + 12) = 0u;
    *((_QWORD *)v5 + 31) = 850045863;
    *(_OWORD *)(v5 + 204) = 0u;
    *((_OWORD *)v5 + 17) = 0u;
    *((_OWORD *)v5 + 18) = 0u;
    *((_OWORD *)v5 + 16) = 0u;
    *(_OWORD *)(v5 + 297) = 0u;
    *((_QWORD *)v5 + 41) = 0;
    *((_QWORD *)v5 + 42) = 0;
    *((_QWORD *)v5 + 40) = 1;
    *((_DWORD *)v5 + 86) = 0;
    {
      v47 = *(_QWORD *)(a2 + 40);
      v46 = a2 + 40;
      v45 = v47;
      if (*(char *)(v46 + 23) >= 0)
        v45 = v46;
      v48 = "true";
      if (v39 >= 0)
        v49 = v5 + 104;
      else
        v49 = v43;
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = v45;
      if (v29)
        v50 = "true";
      else
        v50 = "false";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v49;
      if (!v9)
        v48 = "false";
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = v50;
      LOWORD(v69) = 2080;
      *(_QWORD *)((char *)&v69 + 2) = v48;
      _os_log_debug_impl(&dword_24A800000, v44, OS_LOG_TYPE_DEBUG, "Starting with triple %s, code file path %s, use OOP-JIT %s, use sandbox %s", buf, 0x2Au);
    }
    *(_QWORD *)buf = v5;
                        + 2;
    xojit::XOJITXPC::setHandler(v7, (__int128 *)buf);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(buf);
    v10 = 0;
    goto LABEL_50;
  }
LABEL_47:
  close(v64[0]);
LABEL_49:
  v10 = -1;
LABEL_50:
  if ((v67 & 1) != 0)
  {
    v28 = *(char **)v64;
    *(_QWORD *)v64 = 0;
    if (v28)
      (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
  }
  else if (SHIBYTE(v66) < 0)
  {
    operator delete(v65);
  }
LABEL_13:
  *(_BYTE *)(a3 + 8) = *(_BYTE *)(a3 + 8) & 0xFE | v10 & 1;
  *(_QWORD *)a3 = v5;
}

void llvm::orc::ExecutorProcessControl::getBootstrapMapValue<BOOL,BOOL>(uint64_t *a1, uint64_t a2, uint64_t *a3, llvm::formatv_object_base *a4, uint64_t a5)
{
  int Key;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  llvm::formatv_object_base *v14[4];
  __int16 v15;

  if (*(_BYTE *)(a5 + 1))
    *(_BYTE *)(a5 + 1) = 0;
  Key = llvm::StringMapImpl::FindKey((uint64_t *)(a2 + 128), a3, (unint64_t)a4);
  if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a2 + 136))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * Key);
    v12 = *(unsigned __int8 **)(v11 + 8);
    if (*(unsigned __int8 **)(v11 + 16) == v12)
    {
      v15 = 1283;
      v14[0] = (llvm::formatv_object_base *)"Could not deserialize value for key ";
      v14[2] = (llvm::formatv_object_base *)a3;
      v14[3] = a4;
      getErrorErrorCat();
      v13 = operator new();
      *(_QWORD *)v13 = off_251C127D0;
      llvm::Twine::str(v14, (std::string *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 3;
      *(_QWORD *)(v13 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v13 + 48) = 1;
      *a1 = v13;
      return;
    }
    *(_WORD *)a5 = *v12 | 0x100;
  }
  *a1 = 0;
}

void llvm::make_error<llvm::StringError,std::error_code,char const(&)[30]>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::formatv_object_base *v7;
  __int16 v8;

  v4 = operator new();
  v6 = *a2;
  v5 = a2[1];
  v7 = (llvm::formatv_object_base *)"failed to get executor cdhash";
  v8 = 259;
  *(_QWORD *)v4 = off_251C127D0;
  llvm::Twine::str(&v7, (std::string *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  *a1 = v4;
}

void llvm::make_error<llvm::StringError,std::error_code,char const(&)[41]>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::formatv_object_base *v7;
  __int16 v8;

  v4 = operator new();
  v6 = *a2;
  v5 = a2[1];
  v7 = (llvm::formatv_object_base *)"failed to create sandbox extension token";
  v8 = 259;
  *(_QWORD *)v4 = off_251C127D0;
  llvm::Twine::str(&v7, (std::string *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v6;
  *(_QWORD *)(v4 + 40) = v5;
  *(_BYTE *)(v4 + 48) = 0;
  *a1 = v4;
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>),llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef>(llvm::orc::ExecutorAddr,llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &&)::{lambda(char const*,unsigned long)#1},llvm::Error,llvm::orc::ExecutorAddr,llvm::StringRef>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  _UNKNOWN **v11;
  void *v12;
  void **v13;
  void **v14;
  void *v15;
  void *v16;
  llvm::formatv_object_base *v17;
  void *v18[2];
  uint64_t v19;
  _UNKNOWN **v20;
  void *v21[2];

  *a3 = 0;
  v10 = *(_QWORD *)(a5 + 8);
  v11 = (_UNKNOWN **)(v10 + 16);
  v21[0] = 0;
  v21[1] = (void *)(v10 + 16);
  if ((unint64_t)(v10 + 16) <= 8)
  {
    v12 = v21;
  }
  else
  {
    v12 = malloc_type_malloc(v10 + 16, 0xBCDE199DuLL);
    v21[0] = v12;
  }
  v19 = (uint64_t)v12;
  v20 = v11;
  if (llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::StringRef>(&v19, *a4, a5))
  {
    *(_OWORD *)v18 = *(_OWORD *)v21;
  }
  else
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v18);
    if (v21[1] > (void *)8 || !v21[1] && v21[0])
      free(v21[0]);
  }
  if (v18[1])
  {
    if (v18[1] <= (void *)8)
      v13 = v18;
    else
      v13 = (void **)v18[0];
  }
  else
  {
    v19 = (uint64_t)v18[0];
    if (v18[0])
    {
      getErrorErrorCat();
      v21[0] = (void *)3;
      v21[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v19, (uint64_t *)v21, a1);
      goto LABEL_28;
    }
    v13 = v18;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(*a2, a2[1], (uint64_t)v13, (uint64_t)v18[1], v21);
  if (v21[1])
  {
    if (v21[1] <= (void *)8)
      v14 = v21;
    else
      v14 = (void **)v21[0];
    goto LABEL_18;
  }
  v17 = (llvm::formatv_object_base *)v21[0];
  if (!v21[0])
  {
    v14 = v21;
LABEL_18:
    llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(a3, (uint64_t)v14, (uint64_t)v21[1], a1);
    goto LABEL_23;
  }
  getErrorErrorCat();
  v19 = 3;
  v20 = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v17, &v19, a1);
LABEL_23:
  if (v21[1] >= (void *)9)
  {
    v15 = v21[0];
LABEL_27:
    free(v15);
    goto LABEL_28;
  }
  if (!v21[1])
  {
    v15 = v21[0];
    if (v21[0])
      goto LABEL_27;
  }
LABEL_28:
  if (v18[1] >= (void *)9)
  {
    v16 = v18[0];
LABEL_32:
    free(v16);
    return;
  }
  if (!v18[1])
  {
    v16 = v18[0];
    if (v18[0])
      goto LABEL_32;
  }
}

void llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  void *__p[2];
  uint64_t v8;
  _BYTE v9[8];
  __int128 v10;
  uint64_t v11;
  _QWORD v12[2];
  llvm::formatv_object_base *v13[4];
  __int16 v14;

  v12[0] = a2;
  v12[1] = a3;
  v9[0] = 0;
  v11 = 0;
  v10 = 0uLL;
  if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(v12, (uint64_t)v9))
  {
    *(_OWORD *)__p = v10;
    v8 = v11;
    v10 = 0uLL;
    v11 = 0;
    if (v9[0])
    {
      getErrorErrorCat();
      v6 = operator new();
      v14 = 260;
      v13[0] = (llvm::formatv_object_base *)__p;
      *(_QWORD *)v6 = off_251C127D0;
      llvm::Twine::str(v13, (std::string *)(v6 + 8));
      *(_QWORD *)(v6 + 32) = 3;
      *(_QWORD *)(v6 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v6 + 48) = 1;
    }
    else
    {
      v6 = 0;
    }
    *a1 = v6;
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
    *a4 = 0;
  }
  else
  {
    getErrorErrorCat();
    v13[0] = (llvm::formatv_object_base *)3;
    v13[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Error deserializing return value from blob in call", (uint64_t *)v13, a4);
  }
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  *(_BYTE *)a2 = v3;
  return !v3
      || llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)a1, (std::string *)(a2 + 8));
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize(uint64_t a1, std::string *this)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  std::string::size_type v7;
  uint64_t v8;
  std::string::value_type v9;
  _BOOL8 v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = v2 >= 8;
  v4 = v2 - 8;
  if (!v3)
    return 0;
  v7 = **(_QWORD **)a1;
  *(_QWORD *)a1 += 8;
  *(_QWORD *)(a1 + 8) = v4;
  std::string::reserve(this, v7);
  if (!v7)
    return 1;
  do
  {
    v8 = *(_QWORD *)(a1 + 8);
    v10 = v8 != 0;
    if (!v8)
      break;
    v9 = *(_BYTE *)(*(_QWORD *)a1)++;
    *(_QWORD *)(a1 + 8) = v8 - 1;
    std::string::push_back(this, v9);
    --v7;
  }
  while (v7);
  return v10;
}

void `anonymous namespace'::XPCMemoryManager::~XPCMemoryManager(_anonymous_namespace_::XPCMemoryManager *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  __int16 v15;

  *(_QWORD *)this = &off_251C11400;
  close(*((_DWORD *)this + 32));
  v15 = 260;
  v14 = (char *)this + 104;
  llvm::sys::fs::remove_directories((llvm::sys::fs *)&v14, (const llvm::Twine *)1);
  v2 = *((unsigned int *)this + 86);
  v3 = *((_QWORD *)this + 41);
  if ((_DWORD)v2)
  {
    v4 = 40 * v2;
    v5 = (_QWORD *)(v3 + 8);
    do
    {
      if (*(v5 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v5 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v5);
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
    v3 = *((_QWORD *)this + 41);
  }
  MEMORY[0x24BD1B398](v3, 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 248));
  v6 = *((unsigned int *)this + 60);
  v7 = *((_QWORD *)this + 28);
  if ((_DWORD)v6)
  {
    v8 = 32 * v6;
    v9 = (void **)(v7 + 8);
    do
    {
      if (((unint64_t)*(v9 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      v9 += 4;
      v8 -= 32;
    }
    while (v8);
    v7 = *((_QWORD *)this + 28);
  }
  MEMORY[0x24BD1B398](v7, 8);
  v10 = *((unsigned int *)this + 54);
  v11 = *((_QWORD *)this + 25);
  if ((_DWORD)v10)
  {
    v12 = 16 * v10;
    v13 = (uint64_t *)(v11 + 8);
    do
    {
      if ((*(v13 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      v13 += 2;
      v12 -= 16;
    }
    while (v12);
    v11 = *((_QWORD *)this + 25);
  }
  MEMORY[0x24BD1B398](v11, 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 136));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
}

{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::XPCMemoryManager::allocate(uint64_t a1, uint64_t a2, llvm::jitlink::LinkGraph *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _UNKNOWN **v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[2];
  uint64_t v32;
  _QWORD v33[4];
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  llvm::jitlink::BasicLayout::BasicLayout((llvm::jitlink::BasicLayout *)&v40, a3);
  if (v42)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = v41;
    while (1)
    {
      v12 = *v11;
      v13 = v12 & 7;
      if (v13 >= 4 && v13 != 5)
      {
        getErrorErrorCat();
        v27 = 3;
        v28 = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"XPCMemoryManager only supports R-X text memory", &v27, &v29);
        v39 = -1;
        v38 = v29;
        v29 = 0;
        v23 = a4[3];
        if ((v23 & 2) == 0)
          a4 = (uint64_t *)*a4;
        (*(void (**)(uint64_t *, uint64_t *))(v23 & 0xFFFFFFFFFFFFFFF8))(a4, &v38);
        v24 = v38;
        v38 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        v19 = v29;
        if (!v29)
          return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v41);
        goto LABEL_28;
      }
      if ((v12 & 1) == 0)
        break;
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
      if (!(v15 >> v11[8]))
      {
        getErrorErrorCat();
        v27 = 3;
        v28 = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Segment alignment exceeds page size", &v27, &v25);
        v35 = -1;
        v34 = v25;
        v25 = 0;
        v21 = a4[3];
        if ((v21 & 2) == 0)
          a4 = (uint64_t *)*a4;
        (*(void (**)(uint64_t *, uint64_t *))(v21 & 0xFFFFFFFFFFFFFFF8))(a4, &v34);
        v22 = v34;
        v34 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v19 = v25;
        if (!v25)
          return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v41);
LABEL_28:
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v41);
      }
      v16 = *((_QWORD *)v11 + 3) + *((_QWORD *)v11 + 2);
      if (v12 > 7)
      {
        if (v13 >= 4)
          v9 += v16;
        else
          v8 += (v15 + v16 - 1) / v15 * v15;
      }
      else if (v13 >= 4)
      {
        v10 += v16;
      }
      else
      {
        v7 += (v15 + v16 - 1) / v15 * v15;
      }
      v11 += 104;
      if (v11 == &v41[104 * v42])
        goto LABEL_20;
    }
    getErrorErrorCat();
    v27 = 3;
    v28 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Non-readable data segments not currently supported", &v27, &v26);
    v37 = -1;
    v36 = v26;
    v26 = 0;
    v17 = a4[3];
    if ((v17 & 2) == 0)
      a4 = (uint64_t *)*a4;
    (*(void (**)(uint64_t *, uint64_t *))(v17 & 0xFFFFFFFFFFFFFFF8))(a4, &v36);
    v18 = v36;
    v36 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v26;
    if (v26)
      goto LABEL_28;
  }
  else
  {
    v10 = 0;
    v9 = 0;
    v8 = 0;
    v7 = 0;
LABEL_20:
    v30[0] = v7;
    v30[1] = v8;
    v30[2] = v10;
    v30[3] = v9;
    v30[4] = v40;
    v31[0] = &v32;
    v31[1] = 0x400000000;
    if (v42)
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)v31, (uint64_t)&v41);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, (__int128 *)a4);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v33);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)v31);
  }
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v41);
}

void `anonymous namespace'::XPCMemoryManager::deallocate(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  __int128 *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  unint64_t v36;
  _QWORD *v37;
  char *v38;
  BOOL v39;
  void *v40;
  void **v41;
  _OWORD *v42;
  __int128 v43;
  __int128 *v44;
  void *v45;
  void *__p;
  char *v47;
  char *v48;
  uint64_t v49;
  void *v50[2];
  void *v51[2];
  void *__dst[2];
  __int128 v53;
  uint64_t v54;
  void *v55[2];
  __int128 v56;
  __int128 v57[2];
  _OWORD *v58;
  __int128 v59;
  char *v60;
  _BYTE v61[40];
  __int128 v62[2];
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  __int128 v66[2];
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70[2];
  uint64_t v71;

  v3 = (__int128 *)a3;
  v71 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    __p = 0;
    v47 = 0;
    v48 = 0;
    std::vector<llvm::orc::ExecutorAddr>::reserve(&__p, v5 - v4);
    v8 = *a2;
    v9 = a2[1];
    if (*a2 == v9)
    {
      v12 = v47;
    }
    else
    {
      v10 = v47;
      do
      {
        v11 = *v8;
        *v8 = -1;
        if (v10 >= v48)
        {
          v13 = (char *)__p;
          v14 = (v10 - (_BYTE *)__p) >> 3;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            abort();
          v16 = v48 - (_BYTE *)__p;
          if ((v48 - (_BYTE *)__p) >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v48, v17);
            v13 = (char *)__p;
            v10 = v47;
          }
          else
          {
            v18 = 0;
          }
          v19 = &v18[8 * v14];
          *(_QWORD *)v19 = v11;
          v12 = v19 + 8;
          while (v10 != v13)
          {
            v20 = *((_QWORD *)v10 - 1);
            v10 -= 8;
            *((_QWORD *)v19 - 1) = v20;
            v19 -= 8;
          }
          __p = v19;
          v47 = v12;
          v48 = &v18[8 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *(_QWORD *)v10 = v11;
          v12 = v10 + 8;
        }
        v47 = v12;
        ++v8;
        v10 = v12;
      }
      while (v8 != v9);
    }
    v22 = (_QWORD *)a1[1];
    v23 = a1[6];
    v51[0] = a1;
    v51[1] = 0;
    __dst[0] = 0;
    __dst[1] = 0;
    v24 = __p;
    v25 = v12 - (_BYTE *)__p;
    if (v12 != __p)
    {
      std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&v51[1], v25 >> 3);
      v26 = (char *)__dst[0];
      memmove(__dst[0], v24, v25);
      __dst[0] = &v26[v25];
    }
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v53, v3);
    v27 = v47 - (_BYTE *)__p - 8;
    v28 = v22[3];
    v29 = (v27 & 0xFFFFFFFFFFFFFFF8) + 24;
    if (v47 == __p)
      v30 = 16;
    else
      v30 = (v27 & 0xFFFFFFFFFFFFFFF8) + 24;
    *(_QWORD *)&v67 = 0;
    *((_QWORD *)&v67 + 1) = v30;
    if (v30 < 9)
    {
      if ((v27 & 0xFFFFFFFFFFFFFFF8) == 0xFFFFFFFFFFFFFFE8)
      {
        llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v50);
        goto LABEL_50;
      }
      v32 = (char *)&v67 + 8;
      v31 = &v67;
    }
    else
    {
      v31 = (__int128 *)malloc_type_malloc(v30, 0xBCDE199DuLL);
      v32 = (char *)v31 + 8;
      *(_QWORD *)&v67 = v31;
      v29 = v30;
    }
    *(_QWORD *)v31 = a1[3];
    if ((v29 & 0xFFFFFFFFFFFFFFF8) != 8)
    {
      v33 = (char *)__p;
      *((_QWORD *)v31 + 1) = (v47 - (_BYTE *)__p) >> 3;
      v34 = v47;
      v35 = v33 == v47;
      if (v29 - 16 >= 8 && v33 != v47)
      {
        v36 = v29 - 24;
        v37 = v32 + 8;
        v38 = v33 + 8;
        do
        {
          *v37++ = *((_QWORD *)v38 - 1);
          v35 = v38 == v34;
          if (v38 == v34)
            break;
          v38 += 8;
          v39 = v36 > 7;
          v36 -= 8;
        }
        while (v39);
      }
      if (v35)
      {
        *(_OWORD *)v50 = v67;
        goto LABEL_50;
      }
      v30 = *((_QWORD *)&v67 + 1);
    }
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v50);
    if (v30 > 8 || !v30 && (_QWORD)v67)
      free((void *)v67);
LABEL_50:
    if (v50[1] || (*(void **)v61 = v50[0]) == 0)
    {
      *(_OWORD *)v55 = *(_OWORD *)v51;
      v56 = *(_OWORD *)__dst;
      __dst[0] = 0;
      __dst[1] = 0;
      v51[1] = 0;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v57, &v53);
      *(_OWORD *)&v61[8] = *(_OWORD *)v55;
      v40 = v50[1];
      if (v50[1] <= (void *)8)
        v41 = v50;
      else
        v41 = (void **)v50[0];
      *(_QWORD *)v61 = v28;
      *(_OWORD *)&v61[24] = v56;
      v55[1] = 0;
      v56 = 0uLL;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v62, v57);
      v63 = *(_OWORD *)v61;
      v64 = *(_OWORD *)&v61[16];
      v65 = *(_QWORD *)&v61[32];
      memset(&v61[16], 0, 24);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v66, v62);
      v67 = v63;
      v68 = v64;
      v69 = v65;
      v64 = 0uLL;
      v65 = 0;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v70, v66);
      v42 = operator new(0x48uLL, (std::align_val_t)8uLL);
      v58 = v42;
      v59 = xmmword_24AA2ACC0;
      v43 = v68;
      *v42 = v67;
      v42[1] = v43;
      *((_QWORD *)v42 + 4) = v69;
      v68 = 0uLL;
      v69 = 0;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v42 + 40, v70);
      v60 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_S1K_vE9CallbacksE
          + 4;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v70);
      if ((_QWORD)v68)
      {
        *((_QWORD *)&v68 + 1) = v68;
        operator delete((void *)v68);
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v66);
      if ((_QWORD)v64)
      {
        *((_QWORD *)&v64 + 1) = v64;
        operator delete((void *)v64);
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v62);
      if (*(_QWORD *)&v61[16])
      {
        *(_QWORD *)&v61[24] = *(_QWORD *)&v61[16];
        operator delete(*(void **)&v61[16]);
      }
      (*(void (**)(_QWORD *, uint64_t, _OWORD **, void **, void *))(*v22 + 56))(v22, v23, &v58, v41, v40);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v58);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v57);
      if (v55[1])
      {
        *(void **)&v56 = v55[1];
        operator delete(v55[1]);
      }
    }
    else
    {
      getErrorErrorCat();
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)v61, (uint64_t *)&v67, (uint64_t *)v55);
      if (v55[0])
      {
        *(void **)&v63 = v55[0];
        v55[0] = 0;
      }
      else
      {
        *(_QWORD *)&v63 = 0;
      }
      if ((v54 & 2) != 0)
        v44 = &v53;
      else
        v44 = (__int128 *)v53;
      (*(void (**)(__int128 *, __int128 *))(v54 & 0xFFFFFFFFFFFFFFF8))(v44, &v63);
      if ((_QWORD)v63)
        (*(void (**)(_QWORD))(*(_QWORD *)v63 + 8))(v63);
      if (v55[0])
        (*(void (**)(void *))(*(_QWORD *)v55[0] + 8))(v55[0]);
    }
    if (v50[1] < (void *)9)
    {
      if (v50[1])
        goto LABEL_78;
      v45 = v50[0];
      if (!v50[0])
        goto LABEL_78;
    }
    else
    {
      v45 = v50[0];
    }
    free(v45);
LABEL_78:
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v53);
    if (v51[1])
    {
      __dst[0] = v51[1];
      operator delete(v51[1]);
    }
    if (__p)
    {
      v47 = (char *)__p;
      operator delete(__p);
    }
    return;
  }
  v49 = 0;
  v21 = *(_QWORD *)(a3 + 24);
  if ((v21 & 2) == 0)
    v3 = *(__int128 **)a3;
  (*(void (**)(__int128 *, uint64_t *))(v21 & 0xFFFFFFFFFFFFFFF8))(v3, &v49);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,void *>::CallImpl<`anonymous namespace'::XPCMemoryManager::XPCMemoryManager(llvm::orc::SimpleRemoteEPC &,xojit::XOJITXPC &,unsigned long long,`anonymous namespace'::CodeDirectoryHash,unsigned int,BOOL,BOOL,std::string,int,`anonymous namespace'::XPCMemoryManager::SymbolAddrs)::$_0>(xpc_object_t xdict@<X1>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t uint64;
  uint64_t v7;
  int v8;
  llvm::formatv_object_base *v9;
  BOOL v10;
  const char *string;
  uint64_t v12;
  _QWORD *v13;
  llvm::formatv_object_base *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  llvm::formatv_object_base *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  llvm::formatv_object_base *v32;
  uint64_t v33;
  llvm::formatv_object_base *v34;
  char v35;
  _QWORD *v36;
  char v37;
  unint64_t v38;
  llvm::formatv_object_base *v39;
  uint64_t v40;
  const char *v41;
  __int16 v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (xdict)
  {
    uint64 = xpc_dictionary_get_uint64(xdict, "id");
    if (!uint64)
    {
      getErrorErrorCat();
      v39 = (llvm::formatv_object_base *)3;
      v40 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Received invalid id=0 in finalize response", (uint64_t *)&v39, a3);
      return;
    }
    v7 = uint64;
    v38 = 0;
    std::mutex::lock((std::mutex *)(v4 + 248));
    v39 = 0;
    v8 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(v4 + 328), *(_DWORD *)(v4 + 344), v7, &v39);
    v9 = v39;
    if (v8)
      v10 = v39 == (llvm::formatv_object_base *)(*(_QWORD *)(v4 + 328) + 40 * *(unsigned int *)(v4 + 344));
    else
      v10 = 1;
    if (!v10)
    {
      if (&v36 != (_QWORD **)((char *)v39 + 8))
      {
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v36);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v36, (__int128 *)((char *)v9 + 8));
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v9 + 1);
      *(_QWORD *)v9 = -2;
      *(int32x2_t *)(v4 + 336) = vadd_s32(*(int32x2_t *)(v4 + 336), (int32x2_t)0x1FFFFFFFFLL);
    }
    std::mutex::unlock((std::mutex *)(v4 + 248));
    if (v38 <= 7)
    {
      getErrorErrorCat();
      v20 = operator new();
      v39 = (llvm::formatv_object_base *)"Unrecognized finalize id";
      v42 = 259;
      *(_QWORD *)v20 = off_251C127D0;
      llvm::Twine::str(&v39, (std::string *)(v20 + 8));
      *(_QWORD *)(v20 + 32) = 3;
      *(_QWORD *)(v20 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    }
    else
    {
      string = xpc_dictionary_get_string(xdict, "err");
      if (string)
      {
        v42 = 773;
        v39 = (llvm::formatv_object_base *)"finalization failed: ";
        v40 = 21;
        v41 = string;
        getErrorErrorCat();
        v12 = operator new();
        *(_QWORD *)v12 = off_251C127D0;
        llvm::Twine::str(&v39, (std::string *)(v12 + 8));
        *(_QWORD *)(v12 + 32) = 3;
        *(_QWORD *)(v12 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v12 + 48) = 1;
        v35 = -1;
        v34 = (llvm::formatv_object_base *)v12;
        if ((v38 & 2) != 0)
          v13 = &v36;
        else
          v13 = v36;
        (*(void (**)(_QWORD *, llvm::formatv_object_base **))(v38 & 0xFFFFFFFFFFFFFFF8))(v13, &v34);
        if ((v35 & 1) == 0)
          goto LABEL_49;
        v14 = v34;
        v34 = 0;
        if (!v14)
          goto LABEL_49;
        goto LABEL_48;
      }
      v28 = (llvm::formatv_object_base *)xpc_dictionary_get_uint64(xdict, "fa");
      if (v28)
      {
        LOBYTE(v40) = 0;
        v39 = v28;
        if ((v38 & 2) != 0)
          v29 = &v36;
        else
          v29 = v36;
        (*(void (**)(_QWORD *, llvm::formatv_object_base **))(v38 & 0xFFFFFFFFFFFFFFF8))(v29, &v39);
        if ((v40 & 1) == 0)
          goto LABEL_49;
        v14 = v39;
        v39 = 0;
        if (!v14)
          goto LABEL_49;
LABEL_48:
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v14 + 8))(v14);
LABEL_49:
        v20 = 0;
        goto LABEL_50;
      }
      getErrorErrorCat();
      v39 = (llvm::formatv_object_base *)3;
      v40 = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Finalize message missing finalized address", (uint64_t *)&v39, &v33);
      v35 = -1;
      v30 = v33;
      v33 = 0;
      v34 = (llvm::formatv_object_base *)v30;
      if ((v38 & 2) != 0)
        v31 = &v36;
      else
        v31 = v36;
      (*(void (**)(_QWORD *, llvm::formatv_object_base **))(v38 & 0xFFFFFFFFFFFFFFF8))(v31, &v34);
      if ((v35 & 1) != 0)
      {
        v32 = v34;
        v34 = 0;
        if (v32)
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v32 + 8))(v32);
      }
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      getErrorErrorCat();
      v20 = operator new();
      v39 = (llvm::formatv_object_base *)"Received finalize message without err or finalize addr";
      v42 = 259;
      *(_QWORD *)v20 = off_251C127D0;
      llvm::Twine::str(&v39, (std::string *)(v20 + 8));
      *(_QWORD *)(v20 + 32) = 3;
      *(_QWORD *)(v20 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    }
    *(_BYTE *)(v20 + 48) = 1;
LABEL_50:
    *a3 = v20;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v36);
    return;
  }
  std::mutex::lock((std::mutex *)(v4 + 248));
  *(_BYTE *)(v4 + 312) = 1;
  MEMORY[0x24BD1B398](0, 8);
  v15 = *(_QWORD **)(v4 + 328);
  v16 = *(_DWORD *)(v4 + 336);
  *(_QWORD *)(v4 + 328) = 0;
  *(_QWORD *)(v4 + 336) = 0;
  v17 = *(unsigned int *)(v4 + 344);
  *(_DWORD *)(v4 + 344) = 0;
  std::mutex::unlock((std::mutex *)(v4 + 248));
  if (v16)
  {
    v18 = v15;
    if ((_DWORD)v17)
    {
      v19 = 40 * v17;
      v18 = v15;
      while (*v18 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v18 += 5;
        v19 -= 40;
        if (!v19)
          goto LABEL_36;
      }
    }
    v21 = &v15[5 * v17];
    if (v18 != v21)
    {
LABEL_28:
      v22 = v18 + 1;
      getErrorErrorCat();
      v23 = operator new();
      v39 = (llvm::formatv_object_base *)"disconnected";
      v42 = 259;
      *(_QWORD *)v23 = off_251C127D0;
      llvm::Twine::str(&v39, (std::string *)(v23 + 8));
      *(_QWORD *)(v23 + 32) = 3;
      *(_QWORD *)(v23 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v23 + 48) = 1;
      v37 |= 1u;
      v36 = (_QWORD *)v23;
      v24 = v18[4];
      if ((v24 & 2) == 0)
        v22 = (_QWORD *)*v22;
      (*(void (**)(_QWORD *, _QWORD **))(v24 & 0xFFFFFFFFFFFFFFF8))(v22, &v36);
      if ((v37 & 1) != 0)
      {
        v25 = v36;
        v36 = 0;
        if (v25)
          (*(void (**)(_QWORD *))(*v25 + 8))(v25);
      }
      while (1)
      {
        v18 += 5;
        if (v18 == v21)
          break;
        if (*v18 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v18 != v21)
            goto LABEL_28;
          break;
        }
      }
    }
  }
LABEL_36:
  if ((_DWORD)v17)
  {
    v26 = 40 * v17;
    v27 = v15 + 1;
    do
    {
      if (*(v27 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v27 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v27);
      v27 += 5;
      v26 -= 40;
    }
    while (v26);
  }
  MEMORY[0x24BD1B398](v15, 8);
  *a3 = 0;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void **std::vector<`anonymous namespace'::XPCMemoryManager::ReserveRequest>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v3 - 4);
        llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)(v3 - 464));
        v3 -= 504;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(uint64_t a1)
{
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 8));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  return a1;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(void **)(v2 - 24);
      if (v4)
      {
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
      }
      v5 = *(void **)(v2 - 48);
      if (v5)
      {
        *(_QWORD *)(v2 - 40) = v5;
        operator delete(v5);
      }
      v2 -= 104;
    }
    while (v2 != a1);
  }
}

uint64_t *std::unique_ptr<`anonymous namespace'::XPCMemoryManager::JDLayout>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(*(_QWORD **)(v2 + 24));
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(*a1);
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void `anonymous namespace'::XPCMemoryManager::reserve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t **v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t ***v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unsigned int v62;
  unint64_t v63;
  unint64_t v64;
  unsigned __int8 *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  BOOL v79;
  __int128 v80;
  __int128 v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  std::unique_lock<std::mutex> v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  mach_vm_size_t size[2];
  __int128 v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD v112[3];
  uint64_t v113;
  uint64_t *v114;
  char v115;
  __int128 v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[96];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  _BYTE v124[24];
  uint64_t v125;
  _BYTE v126[96];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v102.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 136);
  v102.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 136));
  *(_QWORD *)v124 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, v124))
  {
    v6 = *(_QWORD *)v124;
    v7 = *(_QWORD *)(a1 + 200);
    v8 = *(unsigned int *)(a1 + 216);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 200);
    v8 = *(unsigned int *)(a1 + 216);
    v6 = v7 + 16 * v8;
  }
  if (v6 != v7 + 16 * v8)
  {
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
    v10 = *(_QWORD *)a3 + (v9 - 1 + *(_QWORD *)(a3 + 16)) / v9 * v9;
    v11 = *(_QWORD *)(a3 + 8) + (*(_QWORD *)(a3 + 24) + v9 - 1) / v9 * v9;
    if (!(v10 | v11))
    {
      v12 = 0;
      v13 = 0;
LABEL_7:
      v14 = 1;
      v15 = v12;
      goto LABEL_84;
    }
    v24 = *(_QWORD **)(v6 + 8);
    v26 = *v24;
    v25 = (uint64_t **)(v24 + 3);
    v12 = v26;
    v100 = *(_QWORD *)(v6 + 8);
    v28 = (uint64_t ***)(v100 + 16);
    v27 = *(uint64_t **)(v100 + 16);
    if (v27 != (uint64_t *)v25)
    {
      v29 = 0;
      v13 = 0;
      while (1)
      {
        v30 = v27[4] - v12;
        if (v10)
          v31 = v29 == 0;
        else
          v31 = 0;
        v32 = !v31;
        if (v31 && v10 <= v30)
        {
          v33 = std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v28, (uint64_t **)v27, v12, v12, v10);
          if (v13 || !v11)
          {
            v29 = v12;
LABEL_65:
            if (!v10)
              goto LABEL_71;
            goto LABEL_66;
          }
          v27 = v33;
          v13 = 0;
          v29 = v12;
        }
        else if (!v13 && v11 && v11 <= v30)
        {
          v34 = std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v28, (uint64_t **)v27, v12, v12, v11);
          if ((v32 & 1) != 0)
          {
            v13 = v12;
            if (v10)
              goto LABEL_66;
LABEL_71:
            v56 = v12;
            v12 = v29;
            v55 = v100;
            goto LABEL_72;
          }
          v27 = v34;
          v29 = 0;
          v13 = v12;
        }
        v35 = (uint64_t *)v27[1];
        v36 = (uint64_t **)v27;
        if (v35)
        {
          do
          {
            v37 = (uint64_t **)v35;
            v35 = (uint64_t *)*v35;
          }
          while (v35);
        }
        else
        {
          do
          {
            v37 = (uint64_t **)v36[2];
            v31 = *v37 == (uint64_t *)v36;
            v36 = v37;
          }
          while (!v31);
        }
        v12 += v27[5];
        v27 = (uint64_t *)v37;
        if (v37 == v25)
          goto LABEL_65;
      }
    }
    v13 = 0;
    v29 = 0;
    if (!v10)
      goto LABEL_71;
LABEL_66:
    if (v29)
      goto LABEL_71;
    v55 = v100;
    if (v10 <= *(_QWORD *)(v100 + 8) - v12)
    {
      std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v28, v25, v12, v12, v10);
      v56 = v12 + v10;
    }
    else
    {
      v56 = v12;
      v12 = 0;
    }
LABEL_72:
    if (!v13 && v11)
    {
      if (v11 <= *(_QWORD *)(v55 + 8) - v56)
      {
        std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(v28, v25, v56, v56, v11);
        v13 = v56;
        if (!v10)
          goto LABEL_80;
        goto LABEL_77;
      }
      v13 = 0;
    }
    if (!v10)
      goto LABEL_80;
LABEL_77:
    if (!v12)
    {
      getErrorErrorCat();
      *(_QWORD *)v124 = 3;
      *(_QWORD *)&v124[8] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Could not find space for standard segs", (uint64_t *)v124, (uint64_t *)&v116);
      v15 = v116;
      goto LABEL_83;
    }
LABEL_80:
    if (v13 || !v11)
      goto LABEL_7;
    getErrorErrorCat();
    *(_QWORD *)v124 = 3;
    *(_QWORD *)&v124[8] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Could not find space for finalize segs", (uint64_t *)v124, (uint64_t *)&v114);
    v15 = (uint64_t)v114;
LABEL_83:
    v14 = 0;
    v12 = 0;
LABEL_84:
    std::unique_lock<std::mutex>::unlock(&v102);
    v57 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)size = *(_OWORD *)a3;
    v107 = v57;
    v108 = *(_QWORD *)(a3 + 32);
    v109 = &v111;
    v110 = 0x400000000;
    if (*(_DWORD *)(a3 + 48))
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v109, a3 + 40);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v112, (__int128 *)(a3 + 472));
    if ((v14 & 1) == 0)
    {
      v124[8] = -1;
      *(_QWORD *)v124 = v15;
      if ((v113 & 2) != 0)
        v75 = v112;
      else
        v75 = (_QWORD *)v112[0];
      (*(void (**)(_QWORD *, _BYTE *))(v113 & 0xFFFFFFFFFFFFFFF8))(v75, v124);
      v76 = *(_QWORD *)v124;
      *(_QWORD *)v124 = 0;
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      v15 = 0;
      goto LABEL_135;
    }
    v117 = v119;
    v118 = 0x400000000;
    v122 = 0u;
    v123 = 0u;
    *(_QWORD *)&v116 = v15;
    *((_QWORD *)&v116 + 1) = v13;
    if ((v124[16] & 1) != 0
      || (v120 = *(_OWORD *)v124,
    {
      v115 = -1;
      v114 = *(uint64_t **)v124;
      if ((v113 & 2) != 0)
        v77 = v112;
      else
        v77 = (_QWORD *)v112[0];
      (*(void (**)(_QWORD *, uint64_t **))(v113 & 0xFFFFFFFFFFFFFFF8))(v77, &v114);
      v74 = (uint64_t)v114;
      v114 = 0;
      if (!v74)
      {
LABEL_133:
        if (v117 != v119)
          free(v117);
LABEL_135:
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v112);
        llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v109);
        if ((v14 & 1) == 0)
        {
          if (v15)
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
          if (v12)
            (*(void (**)(unint64_t))(*(_QWORD *)v12 + 8))(v12);
        }
        goto LABEL_140;
      }
    }
    else
    {
      v97 = v15;
      v121 = *(_OWORD *)v124;
      v98 = v108;
      if ((_DWORD)v110)
      {
        v99 = v120;
        v101 = v121;
        v58 = *((_QWORD *)&v116 + 1);
        v59 = v116;
        v60 = 104 * v110;
        v61 = (unint64_t *)(v109 + 5);
        do
        {
          v62 = *((unsigned __int8 *)v61 - 40);
          v63 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
          v64 = (*(v61 - 3) + *(v61 - 2) + v63 - 1) / v63 * v63;
          v65 = llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v117, *((_BYTE *)v61 - 40));
          if (v62 > 7)
          {
            *(_QWORD *)v65 = v58;
            *((_QWORD *)v65 + 1) = v64 + v58;
            *(v61 - 1) = v58;
            if ((v62 & 4) != 0)
            {
              v69 = *(v61 - 3);
              if (v69)
              {
                v70 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v98, *(v61 - 3), 0);
                *(_QWORD *)&v123 = v70;
                *((_QWORD *)&v123 + 1) = v69;
              }
              else
              {
                v70 = v123;
              }
              *v61 = v70;
            }
            else
            {
              *v61 = v101;
              v101 += v64;
            }
            v58 += v64;
            v66 = v59;
          }
          else
          {
            v66 = v64 + v59;
            *(_QWORD *)v65 = v59;
            *((_QWORD *)v65 + 1) = v64 + v59;
            *(v61 - 1) = v59;
            if ((v62 & 4) != 0)
            {
              v67 = *(v61 - 3);
              if (v67)
              {
                v68 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v98, *(v61 - 3), 0);
                *(_QWORD *)&v122 = v68;
                *((_QWORD *)&v122 + 1) = v67;
              }
              else
              {
                v68 = v122;
              }
              *v61 = v68;
            }
            else
            {
              *v61 = v99;
              v99 += v64;
            }
          }
          v61 += 13;
          v59 = v66;
          v60 -= 104;
        }
        while (v60);
      }
      llvm::jitlink::BasicLayout::apply(&v108, &v105);
      v71 = v105;
      if (v105)
      {
        v105 = 0;
        *(_QWORD *)v124 = v71;
        v114 = v103;
        v103 = 0;
        llvm::ErrorList::join((uint64_t *)v124, (uint64_t *)&v114, &v104);
        if (v114)
          (*(void (**)(uint64_t *))(*v114 + 8))(v114);
        if (*(_QWORD *)v124)
          (*(void (**)(_QWORD))(**(_QWORD **)v124 + 8))(*(_QWORD *)v124);
        v124[8] = -1;
        *(_QWORD *)v124 = v104;
        v104 = 0;
        if ((v113 & 2) != 0)
          v72 = v112;
        else
          v72 = (_QWORD *)v112[0];
        (*(void (**)(_QWORD *, _BYTE *))(v113 & 0xFFFFFFFFFFFFFFF8))(v72, v124);
        v73 = *(_QWORD *)v124;
        *(_QWORD *)v124 = 0;
        v15 = v97;
        if (v73)
          (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
        if (v104)
          (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
        if (v103)
          (*(void (**)(uint64_t *))(*v103 + 8))(v103);
        v74 = v105;
        if (!v105)
          goto LABEL_133;
      }
      else
      {
        v78 = operator new();
        *(_OWORD *)v124 = v116;
        *(_QWORD *)&v124[16] = v126;
        v125 = 0x400000000;
        if ((_DWORD)v118)
        {
          llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=((uint64_t)&v124[16], (char **)&v117);
          v79 = (_DWORD)v125 == 0;
        }
        else
        {
          v79 = 1;
        }
        v127 = v120;
        v128 = v121;
        v129 = v122;
        v130 = v123;
        *(_QWORD *)v78 = &off_251C11430;
        *(_QWORD *)(v78 + 8) = a1;
        *(_QWORD *)(v78 + 16) = v98;
        *(_OWORD *)(v78 + 24) = *(_OWORD *)v124;
        *(_QWORD *)(v78 + 40) = v78 + 56;
        *(_QWORD *)(v78 + 48) = 0x400000000;
        if (!v79)
          llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=(v78 + 40, (char **)&v124[16]);
        v80 = v128;
        *(_OWORD *)(v78 + 152) = v127;
        *(_OWORD *)(v78 + 168) = v80;
        v81 = v130;
        *(_OWORD *)(v78 + 184) = v129;
        *(_OWORD *)(v78 + 200) = v81;
        v15 = v97;
        if (*(_BYTE **)&v124[16] != v126)
          free(*(void **)&v124[16]);
        v124[8] = 0;
        *(_QWORD *)v124 = v78;
        if ((v113 & 2) != 0)
          v82 = v112;
        else
          v82 = (_QWORD *)v112[0];
        (*(void (**)(_QWORD *, _BYTE *))(v113 & 0xFFFFFFFFFFFFFFF8))(v82, v124);
        v74 = *(_QWORD *)v124;
        *(_QWORD *)v124 = 0;
        if (!v74)
          goto LABEL_133;
      }
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
    goto LABEL_133;
  }
  v114 = 0;
  v17 = v114;
  if ((v16 & 1) == 0)
  {
    *(_QWORD *)&v116 = v114;
    v18 = *(_DWORD *)(a1 + 232);
    v19 = *(unsigned int *)(a1 + 240);
    if (4 * v18 + 4 >= (3 * v19))
    {
      v20 = 2 * v19;
    }
    else
    {
      v20 = *(_DWORD *)(a1 + 240);
      if ((int)v19 + ~v18 - *(_DWORD *)(a1 + 236) > v19 >> 3)
      {
LABEL_11:
        *(_DWORD *)(a1 + 232) = v18 + 1;
        if (*v17 != -4096)
          --*(_DWORD *)(a1 + 236);
        *v17 = a2;
        v17[1] = 0;
        v17[2] = 0;
        v17[3] = 0;
        goto LABEL_14;
      }
    }
    v83 = *(_QWORD *)(a1 + 224);
    v84 = (v20 - 1) | ((unint64_t)(v20 - 1) >> 1);
    v85 = v84 | (v84 >> 2) | ((v84 | (v84 >> 2)) >> 4);
    v86 = ((v85 | (v85 >> 8)) >> 16) | v85 | (v85 >> 8);
    if ((v86 + 1) > 0x40)
      v87 = v86 + 1;
    else
      v87 = 64;
    *(_DWORD *)(a1 + 240) = v87;
    v88 = operator new(32 * v87, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 224) = v88;
    if (v83)
    {
      *(_QWORD *)(a1 + 232) = 0;
      v89 = *(unsigned int *)(a1 + 240);
      if ((_DWORD)v89)
      {
        v90 = 32 * v89;
        do
        {
          *v88 = -4096;
          v88 += 4;
          v90 -= 32;
        }
        while (v90);
      }
      if ((_DWORD)v19)
      {
        v91 = 32 * v19;
        v92 = v83;
        do
        {
          v93 = *(_QWORD *)v92;
          if ((*(_QWORD *)v92 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            *(_QWORD *)v124 = 0;
            v94 = *(_QWORD **)v124;
            **(_QWORD **)v124 = v93;
            v94[1] = 0;
            v94[2] = 0;
            v94[3] = 0;
            *(_OWORD *)(v94 + 1) = *(_OWORD *)(v92 + 8);
            v94[3] = *(_QWORD *)(v92 + 24);
            *(_QWORD *)(v92 + 8) = 0;
            *(_QWORD *)(v92 + 16) = 0;
            *(_QWORD *)(v92 + 24) = 0;
            ++*(_DWORD *)(a1 + 232);
          }
          v92 += 32;
          v91 -= 32;
        }
        while (v91);
      }
      MEMORY[0x24BD1B398](v83, 8);
      v88 = *(_QWORD **)(a1 + 224);
      LODWORD(v95) = *(_DWORD *)(a1 + 240);
    }
    else
    {
      *(_QWORD *)(a1 + 232) = 0;
      v95 = *(unsigned int *)(a1 + 240);
      if ((_DWORD)v95)
      {
        v96 = 0;
        do
        {
          v88[v96] = -4096;
          v96 += 4;
        }
        while (4 * v95 != v96);
      }
    }
    v18 = *(_DWORD *)(a1 + 232);
    v17 = (uint64_t *)v116;
    goto LABEL_11;
  }
LABEL_14:
  v22 = v17[2];
  v21 = v17[3];
  if (v22 < v21)
  {
    v23 = v22 + 504;
    goto LABEL_60;
  }
  v38 = v17[1];
  v39 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v22 - v38) >> 3);
  if (v39 + 1 > 0x82082082082082)
    abort();
  v40 = 0xEFBEFBEFBEFBEFBFLL * ((uint64_t)(v21 - v38) >> 3);
  v41 = 2 * v40;
  if (2 * v40 <= v39 + 1)
    v41 = v39 + 1;
  if (v40 >= 0x41041041041041)
    v42 = 0x82082082082082;
  else
    v42 = v41;
  if (v42)
  {
    if (v42 > 0x82082082082082)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v43 = (char *)operator new(504 * v42);
  }
  else
  {
    v43 = 0;
  }
  v44 = (uint64_t)&v43[504 * v39];
  v45 = &v43[504 * v42];
  v23 = v44 + 504;
  v47 = (char *)v17[1];
  v46 = (char *)v17[2];
  if (v46 != v47)
  {
    do
    {
      v44 -= 504;
      v46 -= 504;
    }
    while (v46 != v47);
    v46 = (char *)v17[1];
    v48 = (char *)v17[2];
    v17[1] = v44;
    v17[2] = v23;
    for (v17[3] = (uint64_t)v45; v48 != v46; v48 -= 504)
    {
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v48 - 4);
      llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)(v48 - 464));
    }
    if (!v46)
      goto LABEL_60;
    goto LABEL_59;
  }
  v17[1] = v44;
  v17[2] = v23;
  v17[3] = (uint64_t)v45;
  if (v46)
LABEL_59:
    operator delete(v46);
LABEL_60:
  v17[2] = v23;
  if (v23 - v17[1] == 504)
  {
    std::unique_lock<std::mutex>::unlock(&v102);
    v49 = *(_QWORD *)(a1 + 72);
    v50 = *(_QWORD **)(a1 + 8);
    v51 = *(_QWORD *)(a1 + 32);
    v52 = v50[3];
    v53 = malloc_type_malloc(0x10uLL, 0xBCDE199DuLL);
    *v53 = *(_QWORD *)(a1 + 24);
    v53[1] = v49;
    v54 = operator new(0x20uLL, (std::align_val_t)8uLL);
    *(_OWORD *)&v124[8] = xmmword_24AA2ACD0;
    *v54 = v52;
    v54[1] = a1;
    v54[2] = a2;
    v54[3] = v49;
    *(_QWORD *)v124 = v54;
    v125 = (uint64_t)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS2_12ExecutorAddrEyEEEvOT0_SP_OT1_DpRKT2_EUlOT_PKcmE_SO_JSP_yEEEvSZ_SR_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerESZ_EUlS4_E_S19_vE9CallbacksE;
    (*(void (**)(_QWORD *, uint64_t, _BYTE *, _QWORD *, uint64_t))(*v50 + 56))(v50, v51, v124, v53, 16);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v124);
    free(v53);
  }
LABEL_140:
  if (v102.__owns_)
    std::mutex::unlock(v102.__m_);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>();
  }
}

uint64_t *std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::__emplace_hint_unique_key_args<llvm::orc::ExecutorAddr,std::pair<llvm::orc::ExecutorAddr,unsigned long long>>(uint64_t ***a1, uint64_t **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t **v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t **v17;
  BOOL v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = (uint64_t *)a2;
  v9 = (uint64_t **)(a1 + 1);
  if (a1 + 1 == (uint64_t ***)a2 || (v10 = (unint64_t)a2[4], v10 > a3))
  {
    v11 = (uint64_t)*a2;
    if (*a1 == a2)
    {
      v13 = a2;
LABEL_16:
      if (v11)
        v19 = (uint64_t *)v13;
      else
        v19 = (uint64_t *)a2;
      if (v11)
        v15 = v13 + 1;
      else
        v15 = a2;
      v7 = *v15;
      if (*v15)
        return v7;
      v7 = v19;
      goto LABEL_42;
    }
    if (v11)
    {
      v12 = *a2;
      do
      {
        v13 = (uint64_t **)v12;
        v12 = (uint64_t *)v12[1];
      }
      while (v12);
    }
    else
    {
      v17 = a2;
      do
      {
        v13 = (uint64_t **)v17[2];
        v18 = *v13 == (uint64_t *)v17;
        v17 = v13;
      }
      while (v18);
    }
    if ((unint64_t)v13[4] < a3)
      goto LABEL_16;
    v20 = *v9;
    v15 = (uint64_t **)(a1 + 1);
    v7 = (uint64_t *)(a1 + 1);
    if (*v9)
    {
      while (1)
      {
        while (1)
        {
          v7 = v20;
          v21 = v20[4];
          if (v21 <= a3)
            break;
          v20 = (uint64_t *)*v20;
          v15 = (uint64_t **)v7;
          if (!*v7)
            goto LABEL_42;
        }
        if (v21 >= a3)
          return v7;
        v20 = (uint64_t *)v20[1];
        if (!v20)
          goto LABEL_30;
      }
    }
LABEL_42:
    v25 = v7;
    v7 = (uint64_t *)operator new(0x30uLL);
    v7[4] = a4;
    v7[5] = a5;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v25;
    *v15 = v7;
    v26 = **a1;
    v27 = v7;
    if (v26)
    {
      *a1 = (uint64_t **)v26;
      v27 = *v15;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>((uint64_t *)a1[1], v27);
    a1[2] = (uint64_t **)((char *)a1[2] + 1);
    return v7;
  }
  if (v10 >= a3)
    return v7;
  v15 = a2 + 1;
  v14 = a2[1];
  if (v14)
  {
    do
    {
      v15 = (uint64_t **)v14;
      v14 = (uint64_t *)*v14;
      v7 = (uint64_t *)v15;
      v16 = v15;
    }
    while (v14);
  }
  else
  {
    v16 = a2;
    do
    {
      v22 = (uint64_t *)v16;
      v16 = (uint64_t **)v16[2];
    }
    while (*v16 != v22);
  }
  if (v16 == v9)
    goto LABEL_42;
  if ((unint64_t)v16[4] > a3)
    goto LABEL_42;
  v23 = *v9;
  v15 = (uint64_t **)(a1 + 1);
  v7 = (uint64_t *)(a1 + 1);
  if (!*v9)
    goto LABEL_42;
  while (1)
  {
    while (1)
    {
      v7 = v23;
      v24 = v23[4];
      if (v24 <= a3)
        break;
      v23 = (uint64_t *)*v23;
      v15 = (uint64_t **)v7;
      if (!*v7)
        goto LABEL_42;
    }
    if (v24 >= a3)
      return v7;
    v23 = (uint64_t *)v23[1];
    if (!v23)
    {
LABEL_30:
      v15 = (uint64_t **)(v7 + 1);
      goto LABEL_42;
    }
  }
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void `anonymous namespace'::XPCMemoryManager::allocateWorkingMemPages(_anonymous_namespace_::XPCMemoryManager *this, mach_vm_size_t size)
{
  mach_error_t v4;
  mach_vm_address_t v5;
  llvm::formatv_object_base *v6[4];
  __int16 v7;
  mach_vm_address_t address;

  if (size)
  {
    address = 0;
    v4 = mach_vm_allocate(*MEMORY[0x24BDAEC58], &address, size, 1);
    if (v4)
    {
      v7 = 773;
      v6[0] = (llvm::formatv_object_base *)"mach_vm_allocate failed with error code ";
      v6[1] = (llvm::formatv_object_base *)40;
      v6[2] = (llvm::formatv_object_base *)mach_error_string(v4);
      getErrorErrorCat();
      v5 = operator new();
      *(_QWORD *)v5 = off_251C127D0;
      llvm::Twine::str(v6, (std::string *)(v5 + 8));
      *(_QWORD *)(v5 + 32) = 3;
      *(_QWORD *)(v5 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v5 + 48) = 1;
      *((_BYTE *)this + 16) |= 1u;
    }
    else
    {
      v5 = address;
      *((_BYTE *)this + 16) &= ~1u;
      *((_QWORD *)this + 1) = size;
    }
    *(_QWORD *)this = v5;
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_BYTE *)this + 16) &= ~1u;
  }
}

unsigned __int8 *llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[](uint64_t a1, unsigned __int8 a2)
{
  unint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  _BYTE *v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unsigned int v21;
  unint64_t v22;
  _BOOL4 v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  char v30[8];
  uint64_t v31;
  uint64_t v32;

  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    goto LABEL_20;
  v4 = *(unsigned __int8 **)a1;
  v5 = *(_QWORD *)a1 + 24 * v3;
  v6 = *(unsigned __int8 **)a1;
  do
  {
    v7 = v3 >> 1;
    v8 = &v6[24 * (v3 >> 1)];
    v10 = *v8;
    v9 = v8 + 24;
    v3 += ~(v3 >> 1);
    if (v10 < a2)
      v6 = v9;
    else
      v3 = v7;
  }
  while (v3);
  if (v6 == (unsigned __int8 *)v5)
  {
LABEL_20:
    v31 = 0;
    v32 = 0;
    v30[0] = a2;
    v26 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(a1, (unint64_t)v30);
    v27 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v28 = *(_OWORD *)v26;
    *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
    *(_OWORD *)v27 = v28;
    LODWORD(v27) = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v27;
    v6 = (unsigned __int8 *)(*(_QWORD *)a1 + 24 * v27 - 24);
  }
  else if (*v6 != a2)
  {
    v31 = 0;
    v32 = 0;
    v30[0] = a2;
    v11 = (_BYTE *)(v6 - v4);
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v4) >> 3);
    v13 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(a1, (unint64_t)v30);
    v14 = *(unsigned __int8 **)a1;
    v6 = &v11[*(_QWORD *)a1];
    v15 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    *(_QWORD *)(v15 + 16) = *(_QWORD *)(v15 - 8);
    *(_OWORD *)v15 = *(_OWORD *)(v15 - 24);
    v16 = *(unsigned __int8 **)a1;
    v17 = *(_DWORD *)(a1 + 8);
    v18 = *(_QWORD *)a1 + 24 * v17 - 24;
    if ((unsigned __int8 *)v18 != v6)
    {
      v19 = *(_QWORD *)a1 + 24 * v17 - 24;
      do
      {
        v20 = *(_BYTE *)(v19 - 24);
        v19 -= 24;
        *(_BYTE *)v18 = v20;
        *(_OWORD *)(v18 + 8) = *(_OWORD *)(v18 - 16);
        v18 = v19;
      }
      while ((unsigned __int8 *)v19 != v6);
      v17 = *(_DWORD *)(a1 + 8);
      v16 = *(unsigned __int8 **)a1;
    }
    v21 = v17 + 1;
    *(_DWORD *)(a1 + 8) = v21;
    v22 = (unint64_t)&v16[24 * v21];
    v24 = v13 >= (unint64_t)v6 && v13 < v22;
    v25 = v13 + 24 * v24;
    *v6 = *(_BYTE *)v25;
    *(_OWORD *)&v14[24 * v12 + 8] = *(_OWORD *)(v25 + 8);
  }
  return v6 + 8;
}

uint64_t `anonymous namespace'::XPCMemoryManager::abandon(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  mach_vm_address_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t __base[3];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v5 = (mach_vm_address_t *)(a3 + 144);
  *(_OWORD *)__base = *(_OWORD *)a3;
  v9 = v7;
  llvm::ErrorList::join(&v9, &v8, a1);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 24);
    }
  }
  return v2;
}

void `anonymous namespace'::XPCMemoryManager::release(uint64_t a1, unint64_t *__base, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t **v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  BOOL v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  BOOL v26;

  v3 = a3;
  v4 = __base;
  if (a3 >= 2)
    qsort(__base, a3 & 0x1FFFFFFFFFFFFFFFLL, 8uLL, (int (__cdecl *)(const void *, const void *))llvm::array_pod_sort_comparator<llvm::orc::ExecutorAddr>);
  if (!*v4)
  {
    do
    {
      --v3;
      v6 = v4[1];
      ++v4;
    }
    while (!v6);
  }
  std::mutex::lock((std::mutex *)(a1 + 136));
  while (v3)
  {
    if (*(_DWORD *)(a1 + 208))
    {
      v7 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v7)
      {
        v8 = 16 * v7;
        v9 = *(_QWORD **)(a1 + 200);
        while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          v8 -= 16;
          if (!v8)
            goto LABEL_11;
        }
      }
      else
      {
        v9 = *(_QWORD **)(a1 + 200);
      }
      v10 = *(_QWORD *)(a1 + 200) + 16 * v7;
LABEL_15:
      if (v9 != (_QWORD *)v10)
      {
        if (!v3)
          goto LABEL_42;
        v11 = (unint64_t *)v9[1];
        v12 = (uint64_t **)(v11 + 3);
        v13 = v4 - 1;
        v14 = v3;
        while (1)
        {
          v15 = v13[v3];
          if (*v11 > v15 || v11[1] <= v15)
            break;
          v16 = *v12;
          if (!*v12)
            goto LABEL_31;
          v17 = *v4;
          v18 = (uint64_t *)(v11 + 3);
          v19 = *v12;
          do
          {
            v20 = v19[4];
            v21 = v20 >= v17;
            if (v20 >= v17)
              v22 = (uint64_t **)v19;
            else
              v22 = (uint64_t **)(v19 + 1);
            if (v21)
              v18 = v19;
            v19 = *v22;
          }
          while (*v22);
          if (v18 == (uint64_t *)v12 || v17 < v18[4])
LABEL_31:
            v18 = (uint64_t *)(v11 + 3);
          v23 = (uint64_t *)v18[1];
          v24 = v18;
          if (v23)
          {
            do
            {
              v25 = v23;
              v23 = (uint64_t *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              v25 = (uint64_t *)v24[2];
              v26 = *v25 == (_QWORD)v24;
              v24 = v25;
            }
            while (!v26);
          }
          if ((uint64_t *)v11[2] == v18)
            v11[2] = (unint64_t)v25;
          --v11[4];
          std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(v16, v18);
          operator delete(v18);
          ++v4;
          if (!--v14)
          {
            v3 = 0;
            goto LABEL_42;
          }
        }
        v3 = v14;
LABEL_42:
        while (1)
        {
          v9 += 2;
          if (v9 == (_QWORD *)v10)
            break;
          if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_15;
        }
      }
    }
LABEL_11:
    ;
  }
  std::mutex::unlock((std::mutex *)(a1 + 136));
}

void `anonymous namespace'::XPCMemoryManager::deallocateWorkingMemPages(uint64_t *a1, mach_vm_address_t *a2)
{
  mach_vm_address_t v4;
  mach_error_t v5;
  uint64_t v6;
  llvm::formatv_object_base *v7[4];
  __int16 v8;

  v4 = *a2;
  if (v4)
  {
    v5 = mach_vm_deallocate(*MEMORY[0x24BDAEC58], v4, a2[1]);
    if (v5)
    {
      v8 = 773;
      v7[0] = (llvm::formatv_object_base *)"Error deallocating working memory: ";
      v7[1] = (llvm::formatv_object_base *)35;
      v7[2] = (llvm::formatv_object_base *)mach_error_string(v5);
      getErrorErrorCat();
      v6 = operator new();
      *(_QWORD *)v6 = off_251C127D0;
      llvm::Twine::str(v7, (std::string *)(v6 + 8));
      *(_QWORD *)(v6 + 32) = 3;
      *(_QWORD *)(v6 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v6 + 48) = 1;
      *a1 = v6;
      return;
    }
    *a2 = 0;
    a2[1] = 0;
  }
  *a1 = 0;
}

uint64_t llvm::array_pod_sort_comparator<llvm::orc::ExecutorAddr>(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t *std::__tree_remove[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 != v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v18 = v7[1];
      *(_QWORD *)v12 = v18;
      if (v18)
        *(_QWORD *)(v18 + 16) = v12;
      v7[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(_QWORD *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12)
        result = v7;
      v7 = *(uint64_t **)v12;
    }
    v19 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v19 + 24))
      goto LABEL_68;
    v20 = (uint64_t *)v7[1];
    if (v20 && !*((_BYTE *)v20 + 24))
    {
      if (v19 && !*((_BYTE *)v19 + 24))
      {
LABEL_68:
        v20 = v7;
      }
      else
      {
        *((_BYTE *)v20 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v26 = *v20;
        v7[1] = *v20;
        if (v26)
          *(_QWORD *)(v26 + 16) = v7;
        v20[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
        *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        v19 = v7;
      }
      v23 = v20[2];
      *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v19 + 24) = 1;
      v24 = *(uint64_t **)v23;
      v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
      *(_QWORD *)v23 = v27;
      if (v27)
        *(_QWORD *)(v27 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v13 = *(uint64_t **)(v12 + 8);
    v14 = *v13;
    *(_QWORD *)(v12 + 8) = *v13;
    if (v14)
      *(_QWORD *)(v14 + 16) = v12;
    v13[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
    *v13 = v12;
    *(_QWORD *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7)
      result = v7;
    v7 = *(uint64_t **)(*v7 + 8);
  }
  v15 = (_QWORD *)*v7;
  if (!*v7 || *((_BYTE *)v15 + 24))
  {
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_59;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
    goto LABEL_49;
  }
  v16 = (uint64_t *)v7[1];
  if (v16 && !*((_BYTE *)v16 + 24))
  {
LABEL_59:
    v15 = v7;
  }
  else
  {
    *((_BYTE *)v15 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v22 = v15[1];
    *v7 = v22;
    if (v22)
      *(_QWORD *)(v22 + 16) = v7;
    v15[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    v16 = v7;
  }
  v23 = v15[2];
  *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v16 + 24) = 1;
  v24 = *(uint64_t **)(v23 + 8);
  v25 = *v24;
  *(_QWORD *)(v23 + 8) = *v24;
  if (v25)
    *(_QWORD *)(v25 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  *v24 = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=(uint64_t a1, char **a2)
{
  char *v4;
  char **v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  if ((char **)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if (*a2 != (char *)(a2 + 2))
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (char *)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = *(char **)a1;
        v11 = &v4[24 * v8];
        do
        {
          *v10 = *v4;
          *(_OWORD *)(v10 + 8) = *(_OWORD *)(v4 + 8);
          v4 += 24;
          v10 += 24;
        }
        while (v4 != v11);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v12 = &v4[24 * v9];
        v13 = *(char **)a1;
        do
        {
          *v13 = *v4;
          *(_OWORD *)(v13 + 8) = *(_OWORD *)(v4 + 8);
          v4 += 24;
          v13 += 24;
        }
        while (v4 != v12);
LABEL_18:
        v14 = *v7;
        if (v9 != v14)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v9), &(*a2)[24 * v9], &(*a2)[24 * v14] - &(*a2)[24 * v9]);
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void `anonymous namespace'::XPCMemoryManager::InFlightAlloc::~InFlightAlloc(mach_vm_address_t *this)
{
  NSObject *v2;
  mach_vm_address_t *v3;
  std::string *p_p;
  uint64_t v5;
  std::string __p;
  std::string::size_type v7;
  uint64_t v8;
  _BYTE buf[24];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  *this = (mach_vm_address_t)&off_251C11430;
  __p.__r_.__value_.__r.__words[0] = v7;
  llvm::ErrorList::join((uint64_t *)&__p, (uint64_t *)buf, &v8);
  if (*(_QWORD *)buf)
    (*(void (**)(_QWORD))(**(_QWORD **)buf + 8))(*(_QWORD *)buf);
  if (__p.__r_.__value_.__r.__words[0])
    (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))(__p.__r_.__value_.__r.__words[0]);
  if (v8)
  {
    v5 = v8;
    v8 = 0;
    llvm::toString(&v5, &__p);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    {
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = p_p;
      _os_log_debug_impl(&dword_24A800000, v2, OS_LOG_TYPE_DEBUG, "InFlightAlloc destruction of working memory failed %s", buf, 0xCu);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  v3 = (mach_vm_address_t *)this[5];
  if (v3 != this + 7)
    free(v3);
}

{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::XPCMemoryManager::InFlightAlloc::abandon(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = a2[3];
  if ((v4 & 2) == 0)
    a2 = (_QWORD *)*a2;
  (*(void (**)(_QWORD *, uint64_t *))(v4 & 0xFFFFFFFFFFFFFFF8))(a2, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void `anonymous namespace'::XPCMemoryManager::InFlightAlloc::finalize(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char *v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  __int128 v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  unsigned int v29;
  int v30;
  char *v31;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  unint64_t i;
  BOOL v75;
  xpc_object_t v76;
  uint64_t v77;
  unsigned __int8 *p_bytes;
  void *v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 *v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  unint64_t v97;
  unsigned __int8 *v98;
  unsigned __int8 *v99;
  unsigned int v100;
  NSObject *v101;
  xpc_object_t empty;
  uint64_t v103;
  _xpc_connection_s *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  xpc_object_t object;
  xpc_object_t v111;
  xpc_object_t v112;
  xpc_object_t xarray;
  uint64_t v114[2];
  uint64_t value;
  int v116;
  __int128 v117;
  unint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  void *v123;
  uint64_t v124;
  _BYTE v125[96];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  void *v131;
  uint64_t v132;
  _OWORD v133[10];
  void *v134;
  char v135;
  void *v136;
  char v137;
  void *v138;
  char v139;
  void *v140;
  char v141;
  void *bytes;
  _BYTE length[24];
  char v144;
  void *v145;
  char v146;
  void *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint8_t buf[8];
  const void *v154[6];
  char v155;
  void *v156;
  void *v157;
  __int128 v158;
  _BYTE v159[24];
  _QWORD *v160;
  __int128 v161;
  _QWORD v162[3];
  uint64_t v163;
  __int128 v164;
  _QWORD v165[6];

  v165[3] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  v122 = *(_OWORD *)(a1 + 24);
  v123 = v125;
  v124 = 0x400000000;
  if (*(_DWORD *)(a1 + 48))
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=((uint64_t)&v123, (char **)(a1 + 40));
  v6 = *(_OWORD *)(a1 + 168);
  v126 = *(_OWORD *)(a1 + 152);
  v127 = v6;
  v7 = *(_OWORD *)(a1 + 200);
  v128 = *(_OWORD *)(a1 + 184);
  v129 = v7;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v120, a2);
  value = 0;
  std::mutex::lock((std::mutex *)(v4 + 248));
  if (!*(_BYTE *)(v4 + 312))
  {
    v11 = *(_QWORD *)(v4 + 320);
    v10 = *(_QWORD *)(v4 + 328);
    *(_QWORD *)(v4 + 320) = v11 + 1;
    value = v11;
    bytes = 0;
    v12 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(v10, *(_DWORD *)(v4 + 344), v11, &bytes);
    v13 = (char *)bytes;
    if ((v12 & 1) != 0)
    {
LABEL_17:
      if (v13 + 8 != (char *)&v120)
      {
        v16 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v13 + 1);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v16, &v120);
      }
      std::mutex::unlock((std::mutex *)(v4 + 248));
      v114[0] = v4;
      v114[1] = (uint64_t)&value;
      if ((v141 & 1) != 0)
      {
        v69 = v140;
        v140 = 0;
        bytes = v69;
        if (bytes)
          (*(void (**)(void *))(*(_QWORD *)bytes + 8))(bytes);
        goto LABEL_166;
      }
      if ((v139 & 1) != 0)
      {
        v70 = v138;
        v138 = 0;
        bytes = v70;
        if (bytes)
          (*(void (**)(void *))(*(_QWORD *)bytes + 8))(bytes);
        goto LABEL_165;
      }
      v17 = v128;
      v18 = (uint64_t *)llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v123, 5u);
      if ((v137 & 1) != 0)
      {
        v71 = v136;
        v136 = 0;
        bytes = v71;
        if (bytes)
          (*(void (**)(void *))(*(_QWORD *)bytes + 8))(bytes);
        goto LABEL_164;
      }
      v19 = v129;
      v20 = (uint64_t *)llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v123, 0xDu);
      if ((v135 & 1) != 0)
      {
        v72 = v134;
        v134 = 0;
        bytes = v72;
        goto LABEL_161;
      }
      v130 = v122;
      v131 = v133;
      v132 = 0x400000000;
      if ((_DWORD)v124)
        llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=((uint64_t)&v131, (uint64_t *)&v123);
      v21 = 0;
      v133[6] = v126;
      v133[7] = v127;
      v133[8] = v128;
      v133[9] = v129;
      v117 = *(_OWORD *)(v5 + 256);
      v118 = *(_QWORD *)(v5 + 272);
      *(_QWORD *)(v5 + 264) = 0;
      *(_QWORD *)(v5 + 272) = 0;
      *(_QWORD *)(v5 + 256) = 0;
      v116 = 185139969;
      v22 = xmmword_24AA2ACE0;
      while (1)
      {
        v23 = v132;
        if ((_DWORD)v132)
        {
          v24 = *((unsigned __int8 *)&v116 + v21);
          v25 = (unsigned __int8 *)v131;
          do
          {
            v26 = v23 >> 1;
            v27 = &v25[24 * (v23 >> 1)];
            v29 = *v27;
            v28 = v27 + 24;
            v23 += ~(v23 >> 1);
            if (v29 < v24)
              v25 = v28;
            else
              v23 = v26;
          }
          while (v23);
          if (v25 != (unsigned __int8 *)((char *)v131 + 24 * v132))
          {
            v30 = *v25;
            v31 = v30 == v24 ? (char *)v25 : (char *)v131 + 24 * v132;
            if (v30 == v24 && (v24 & 7) == 1)
              break;
          }
        }
LABEL_58:
        if (++v21 == 4)
        {
          v73 = v117;
          for (i = 8; v73 != *((_QWORD *)&v117 + 1); v73 += 112)
            i += *(_QWORD *)(v73 + 16) + *(_QWORD *)(v73 + 72) + 32;
          bytes = &length[16];
          *(_OWORD *)length = xmmword_24AA2ACF0;
          llvm::SmallVectorImpl<char>::resizeImpl<false>(&bytes, i);
          v156 = bytes;
          v157 = *(void **)length;
          v75 = llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>>,std::vector<llvm::orc::shared::AllocActionCallPair>,void>::serialize(&v156, &v117);
          if (v75)
          {
            v76 = xpc_data_create(bytes, *(size_t *)length);
          }
          else
          {
            getErrorErrorCat();
            v163 = 3;
            *(_QWORD *)&v164 = &getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Could not serialize allocation actions", &v163, (uint64_t *)&v160);
            v76 = v160;
            v160 = 0;
          }
          if (bytes != &length[16])
            free(bytes);
          bytes = &v117;
          std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100]((void ***)&bytes);
          if (v131 != v133)
            free(v131);
          if (v75)
          {
            LOBYTE(bytes) = 3;
            *(_QWORD *)length = v140;
            length[8] = 11;
            *(_QWORD *)&length[16] = v138;
            v144 = 5;
            v145 = v136;
            v146 = 13;
            v147 = v134;
            xarray = xpc_array_create(0, 0);
            v112 = xpc_array_create(0, 0);
            v111 = xpc_array_create(0, 0);
            object = xpc_array_create(0, 0);
            v77 = 0;
            p_bytes = (unsigned __int8 *)&bytes;
            while (1)
            {
              v79 = *(void **)&length[16 * v77];
              if (v79)
                break;
LABEL_153:
              ++v77;
              p_bytes = &length[16 * v77 - 8];
              if (v77 == 4)
              {
                {
                  *(_WORD *)buf = 0;
                  _os_log_debug_impl(&dword_24A800000, v101, OS_LOG_TYPE_DEBUG, "Sending finalize message", buf, 2u);
                }
                empty = xpc_dictionary_create_empty();
                xpc_dictionary_set_uint64(empty, "opc", 1uLL);
                xpc_dictionary_set_uint64(empty, "id", value);
                xpc_dictionary_set_value(empty, "groups", xarray);
                xpc_dictionary_set_value(empty, "bases", v112);
                xpc_dictionary_set_value(empty, "sizes", v111);
                xpc_dictionary_set_value(empty, "sources", object);
                xpc_dictionary_set_value(empty, "aa", v76);
                v103 = *(_QWORD *)(v4 + 16);
                std::mutex::lock((std::mutex *)(v103 + 8));
                v104 = *(_xpc_connection_s **)(v103 + 72);
                if (v104)
                  xpc_connection_send_message(v104, empty);
                std::mutex::unlock((std::mutex *)(v103 + 8));
                xpc_release(empty);
                xpc_release(object);
                xpc_release(v111);
                xpc_release(v112);
                xpc_release(xarray);
                if (v76)
                  xpc_release(v76);
                goto LABEL_163;
              }
            }
            v80 = *p_bytes;
            if ((v80 & 4) == 0)
            {
              v81 = v124;
              if ((_DWORD)v124)
              {
                v82 = v80 & 0xF8 | 1;
                v83 = (char *)v123;
                v84 = (char *)v123 + 24 * v124;
                v85 = (char *)v123;
                v86 = v124;
                do
                {
                  v87 = v86 >> 1;
                  v88 = (unsigned __int8 *)&v85[24 * (v86 >> 1)];
                  v90 = *v88;
                  v89 = v88 + 24;
                  v86 += ~(v86 >> 1);
                  if (v90 < v82)
                    v85 = (char *)v89;
                  else
                    v86 = v87;
                }
                while (v86);
                if (v85 == v84 || *v85 != v82)
                {
                  v91 = 0;
                  v92 = 0;
                }
                else
                {
                  v92 = *((_QWORD *)v85 + 1);
                  v91 = *((_QWORD *)v85 + 2);
                }
                v96 = v80 & 0xF8 | 3;
                do
                {
                  v97 = v81 >> 1;
                  v98 = (unsigned __int8 *)&v83[24 * (v81 >> 1)];
                  v100 = *v98;
                  v99 = v98 + 24;
                  v81 += ~(v81 >> 1);
                  if (v100 < v96)
                    v83 = (char *)v99;
                  else
                    v81 = v97;
                }
                while (v81);
                if (v83 != v84 && *v83 == v96)
                {
                  if (!v92)
                    v92 = *((_QWORD *)v83 + 1);
                  v94 = (uint64_t *)(v83 + 16);
LABEL_139:
                  v91 = *v94;
                }
              }
              else
              {
                v91 = 0;
                v92 = 0;
              }
              xpc_array_set_uint64(xarray, 0xFFFFFFFFFFFFFFFFLL, v80);
              xpc_array_set_uint64(v112, 0xFFFFFFFFFFFFFFFFLL, v92);
              xpc_array_set_uint64(v111, 0xFFFFFFFFFFFFFFFFLL, v91 - v92);
              xpc_array_set_value(object, 0xFFFFFFFFFFFFFFFFLL, v79);
              goto LABEL_153;
            }
            v93 = llvm::orc::AllocGroupSmallMap<llvm::orc::ExecutorAddrRange>::operator[]((uint64_t)&v123, *p_bytes);
            v95 = *(_QWORD *)v93;
            v94 = (uint64_t *)(v93 + 8);
            v92 = v95;
            goto LABEL_139;
          }
          bytes = v76;
LABEL_161:
          if (bytes)
            (*(void (**)(void *))(*(_QWORD *)bytes + 8))(bytes);
LABEL_163:
LABEL_164:
LABEL_165:
LABEL_166:
          goto LABEL_167;
        }
      }
      v33 = *(void **)(v4 + 56);
      v163 = (uint64_t)v165;
      v164 = v22;
      llvm::SmallVectorImpl<char>::resizeImpl<false>(&v163, 0x10uLL);
      v34 = v164;
      if ((unint64_t)v164 < 8
        || (v35 = v163, *(_QWORD *)v163 = *((_QWORD *)v31 + 1), (v34 & 0xFFFFFFFFFFFFFFF8) == 8))
      {
        getErrorErrorCat();
        bytes = (void *)3;
        *(_QWORD *)length = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", (uint64_t *)&bytes, &v119);
        v155 |= 1u;
        *(_QWORD *)buf = v119;
        v119 = 0;
      }
      else
      {
        *(_QWORD *)(v35 + 8) = *((_QWORD *)v31 + 2);
        v160 = v162;
        v161 = xmmword_24AA2ACE0;
        if ((_QWORD)v164)
        {
          llvm::SmallVectorImpl<char>::operator=((uint64_t)&v160, (const void **)&v163);
          bytes = v33;
          *(_QWORD *)length = &v144;
          *(_OWORD *)&length[8] = xmmword_24AA2ACE0;
          if ((_QWORD)v161)
            llvm::SmallVectorImpl<char>::operator=((uint64_t)length, (const void **)&v160);
        }
        else
        {
          bytes = v33;
          *(_QWORD *)length = &v144;
          *(_OWORD *)&length[8] = xmmword_24AA2ACE0;
        }
        llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>((uint64_t)buf, (uint64_t)&bytes);
        if (*(char **)length != &v144)
          free(*(void **)length);
        if (v160 != v162)
          free(v160);
      }
      if ((_QWORD *)v163 != v165)
        free((void *)v163);
      v156 = *(void **)buf;
      v157 = v159;
      v158 = xmmword_24AA2ACE0;
      if (v154[1])
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v157, v154);
      llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)buf);
      if (v24 > 7)
      {
        v37 = v117;
        bytes = v156;
        *(_QWORD *)length = &v144;
        *(_OWORD *)&length[8] = xmmword_24AA2ACE0;
        if ((_QWORD)v158)
          llvm::SmallVectorImpl<char>::operator=((uint64_t)length, (uint64_t)&v157);
        v152 = 0;
        v149 = 0;
        v151 = 0u;
        v147 = 0;
        v148 = &v151;
        v150 = 24;
        v38 = v37 - v117;
        v39 = 0x6DB6DB6DB6DB6DB7 * ((v37 - (uint64_t)v117) >> 4);
        v40 = (_QWORD *)v37;
        v41 = (char *)*((_QWORD *)&v117 + 1);
        if (*((_QWORD *)&v117 + 1) >= v118)
        {
          v48 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v117 + 1) - v117) >> 4) + 1;
          if (v48 > 0x249249249249249)
            abort();
          v107 = v37;
          v109 = v117;
          if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v118 - v117) >> 4) > v48)
            v48 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(v118 - v117) >> 4);
          if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v118 - v117) >> 4)) >= 0x124924924924924)
            v49 = 0x249249249249249;
          else
            v49 = v48;
          v162[1] = &v118;
          if (v49)
          {
            v50 = 0x6DB6DB6DB6DB6DB7 * ((v37 - (uint64_t)v117) >> 4);
            v51 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>((uint64_t)&v118, v49);
            v39 = v50;
            v52 = v51;
          }
          else
          {
            v52 = 0;
          }
          v53 = (uint64_t)&v52[14 * v39];
          v160 = v52;
          *(_QWORD *)&v161 = v53;
          *((_QWORD *)&v161 + 1) = v53;
          v162[0] = &v52[14 * v49];
          if (v39 == v49)
          {
            if (v38 < 1)
            {
              v106 = (char *)&v52[14 * v49];
              if (v109 == v107)
                v55 = 1;
              else
                v55 = 2 * v39;
              v165[1] = &v118;
              v56 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>((uint64_t)&v118, v55);
              v57 = v55 >> 2;
              v58 = v4;
              v59 = (char *)&v56[14 * v57];
              v160 = v56;
              *(_QWORD *)&v161 = v59;
              v163 = (uint64_t)v52;
              *(_QWORD *)&v164 = v53;
              *((_QWORD *)&v161 + 1) = v59;
              v162[0] = &v56[14 * v60];
              *((_QWORD *)&v164 + 1) = v53;
              v165[0] = v106;
              std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v163);
              v53 = (uint64_t)v59;
              v4 = v58;
            }
            else
            {
              v54 = v39 + 2;
              if (v39 >= -1)
                v54 = v39 + 1;
              v53 -= 112 * (v54 >> 1);
              *(_QWORD *)&v161 = v53;
              *((_QWORD *)&v161 + 1) = v53;
            }
          }
          std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v53, (uint64_t)&bytes);
          v61 = v161;
          v62 = *((_QWORD *)&v161 + 1) + 112;
          *((_QWORD *)&v161 + 1) += 112;
          v63 = v117;
          if ((_QWORD *)v117 != v40)
          {
            v64 = (uint64_t)v40;
            do
            {
              v61 -= 112;
              v64 -= 112;
              std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v61, v64);
            }
            while (v64 != v63);
            v62 = *((_QWORD *)&v161 + 1);
          }
          v65 = (_QWORD *)*((_QWORD *)&v117 + 1);
          if (*((_QWORD **)&v117 + 1) != v40)
          {
            do
            {
              v66 = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v62, (uint64_t)v40);
              v40 += 14;
              v62 = v66 + 112;
            }
            while (v40 != v65);
            v40 = (_QWORD *)*((_QWORD *)&v117 + 1);
          }
          v67 = (_QWORD *)v117;
          v68 = v118;
          *(_QWORD *)&v117 = v61;
          *((_QWORD *)&v117 + 1) = v62;
          v118 = v162[0];
          *((_QWORD *)&v161 + 1) = v40;
          v162[0] = v68;
          v160 = v67;
          *(_QWORD *)&v161 = v67;
          std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v160);
        }
        else if (v37 == *((_QWORD *)&v117 + 1))
        {
          std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v37, (uint64_t)&bytes);
          *((_QWORD *)&v117 + 1) = v37 + 112;
        }
        else
        {
          v105 = 0x6DB6DB6DB6DB6DB7 * ((v37 - (uint64_t)v117) >> 4);
          v108 = v117;
          v42 = *((_QWORD *)&v117 + 1) - 112;
          v43 = *((_QWORD *)&v117 + 1);
          v44 = *((_QWORD *)&v117 + 1) - 112;
          if (*((_QWORD *)&v117 + 1) >= 0x70uLL)
          {
            do
            {
              v45 = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(v43, v44);
              v44 += 112;
              v43 = v45 + 112;
            }
            while (v44 < (unint64_t)v41);
          }
          *((_QWORD *)&v117 + 1) = v43;
          if (v41 != (char *)(v40 + 14))
          {
            v46 = 0;
            do
            {
              *(_QWORD *)&v41[v46 - 112] = *(_QWORD *)(v42 + v46 - 112);
              llvm::SmallVectorImpl<char>::operator=((uint64_t)&v41[v46 - 104], (const void **)(v42 + v46 - 104));
              *(_QWORD *)&v41[v46 - 56] = *(_QWORD *)(v42 + v46 - 56);
              llvm::SmallVectorImpl<char>::operator=((uint64_t)&v41[v46 - 48], (const void **)(v42 + v46 - 48));
              v46 -= 112;
            }
            while (-16 * ((v41 - (char *)(v40 + 14)) >> 4) != v46);
          }
          *v40 = bytes;
          llvm::SmallVectorImpl<char>::operator=((uint64_t)(v40 + 1), (const void **)length);
          v47 = v108 + 112 * v105;
          *(_QWORD *)(v47 + 56) = v147;
          llvm::SmallVectorImpl<char>::operator=(v47 + 64, (const void **)&v148);
        }
        if (v148 != &v151)
          free(v148);
        v36 = *(void **)length;
        if (*(char **)length == &v144)
          goto LABEL_55;
      }
      else
      {
        bytes = v156;
        *(_QWORD *)length = &v144;
        *(_OWORD *)&length[8] = xmmword_24AA2ACE0;
        if ((_QWORD)v158)
          llvm::SmallVectorImpl<char>::operator=((uint64_t)length, (uint64_t)&v157);
        v152 = 0;
        v149 = 0;
        v151 = 0u;
        v147 = 0;
        v148 = &v151;
        v150 = 24;
        std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100]((uint64_t *)&v117, (uint64_t)&bytes);
        if (v148 != &v151)
          free(v148);
        v36 = *(void **)length;
        if (*(char **)length == &v144)
          goto LABEL_55;
      }
      free(v36);
LABEL_55:
      if (v157 != v159)
        free(v157);
      v22 = xmmword_24AA2ACE0;
      goto LABEL_58;
    }
    v14 = *(_DWORD *)(v4 + 336);
    v15 = *(_DWORD *)(v4 + 344);
    if (4 * v14 + 4 >= 3 * v15)
    {
      v15 *= 2;
    }
    else if (v15 + ~v14 - *(_DWORD *)(v4 + 340) > v15 >> 3)
    {
LABEL_14:
      ++*(_DWORD *)(v4 + 336);
      if (*(_QWORD *)v13 != -1)
        --*(_DWORD *)(v4 + 340);
      *(_QWORD *)v13 = value;
      *(_OWORD *)(v13 + 8) = 0u;
      *(_OWORD *)(v13 + 24) = 0u;
      goto LABEL_17;
    }
    llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::grow(v4 + 328, v15);
    bytes = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(v4 + 328), *(_DWORD *)(v4 + 344), value, &bytes);
    v13 = (char *)bytes;
    goto LABEL_14;
  }
  getErrorErrorCat();
  *(_QWORD *)&v130 = 3;
  *((_QWORD *)&v130 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const(&)[38],std::error_code>((uint64_t *)buf, (llvm::formatv_object_base *)"finalization rejected due to shutdown", (uint64_t *)&v130);
  length[0] = -1;
  bytes = *(void **)buf;
  if ((v121 & 2) != 0)
    v8 = &v120;
  else
    v8 = (__int128 *)v120;
  (*(void (**)(__int128 *, void **))(v121 & 0xFFFFFFFFFFFFFFF8))(v8, &bytes);
  if ((length[0] & 1) != 0)
  {
    v9 = bytes;
    bytes = 0;
    if (v9)
      (*(void (**)(void *))(*(_QWORD *)v9 + 8))(v9);
  }
  std::mutex::unlock((std::mutex *)(v4 + 248));
LABEL_167:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v120);
  if (v123 != v125)
    free(v123);
}

void `anonymous namespace'::XPCMemoryManager::createXPCMemPort(uint64_t a1, memory_object_offset_t offset, memory_object_size_t a3)
{
  mach_error_t memory_entry_64;
  uint64_t v5;
  char v6;
  llvm::formatv_object_base *v7[4];
  __int16 v8;
  memory_object_size_t size;
  mach_port_t object_handle;

  if (offset)
  {
    object_handle = 0;
    size = a3;
    memory_entry_64 = mach_make_memory_entry_64(*MEMORY[0x24BDAEC58], &size, offset, 4194375, &object_handle, 0);
    if (memory_entry_64)
    {
      v8 = 773;
      v7[0] = (llvm::formatv_object_base *)"Failed to create mach port for memory: ";
      v7[1] = (llvm::formatv_object_base *)39;
      v7[2] = (llvm::formatv_object_base *)mach_error_string(memory_entry_64);
      getErrorErrorCat();
      v5 = operator new();
      *(_QWORD *)v5 = off_251C127D0;
      llvm::Twine::str(v7, (std::string *)(v5 + 8));
      *(_QWORD *)(v5 + 32) = 3;
      *(_QWORD *)(v5 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v5 + 48) = 1;
      v6 = *(_BYTE *)(a1 + 8) | 1;
    }
    else
    {
      v5 = xpc_mach_send_create();
      v6 = *(_BYTE *)(a1 + 8) & 0xFE;
    }
    *(_BYTE *)(a1 + 8) = v6;
    *(_QWORD *)a1 = v5;
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_QWORD *)a1 = 0;
  }
}

_QWORD *`anonymous namespace'::XPCMemoryManager::finalize(llvm::jitlink::LinkGraph &,`anonymous namespace'::XPCMemoryManager::InFlightAllocInfo,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>)::$_2::operator()(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v15 = 0;
  std::mutex::lock((std::mutex *)(v4 + 248));
  v5 = (uint64_t *)a1[1];
  v11 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(v4 + 328), *(_DWORD *)(v4 + 344), *v5, &v11))v6 = v11;
  else
    v6 = *(_QWORD *)(v4 + 328) + 40 * *(unsigned int *)(v4 + 344);
  if (v14 != (_QWORD *)(v6 + 8))
  {
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v14, (__int128 *)(v6 + 8));
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(v6 + 8));
  *(_QWORD *)v6 = -2;
  *(int32x2_t *)(v4 + 336) = vadd_s32(*(int32x2_t *)(v4 + 336), (int32x2_t)0x1FFFFFFFFLL);
  std::mutex::unlock((std::mutex *)(v4 + 248));
  v7 = *a2;
  *a2 = 0;
  v13 |= 1u;
  v12 = v7;
  if ((v15 & 2) != 0)
    v8 = v14;
  else
    v8 = (_QWORD *)v14[0];
  (*(void (**)(_QWORD *, uint64_t *))(v15 & 0xFFFFFFFFFFFFFFF8))(v8, &v12);
  if ((v13 & 1) != 0)
  {
    v9 = v12;
    v12 = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
}

void `anonymous namespace'::XPCMemoryManager::createXPCCodeFile(uint64_t a1, uint64_t a2, _BYTE *__src, unint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10;
  int v11;
  char *v12;
  int v13;
  int *v14;
  char *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;
  void *v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  unsigned int v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  xpc_object_t v33;
  int *v34;
  char *v35;
  std::error_code v36;
  __int16 v37;
  std::string v38;
  __int16 v39;
  void *__p[2];
  std::string::size_type v41;
  __int16 v42;
  uint64_t v43;
  void *v44[2];
  char v45;
  llvm::formatv_object_base *v46[4];
  __int16 v47;
  void *v48;
  __int128 v49;
  _WORD v50[24];
  std::error_code v51;
  void *v52;
  __int128 v53;
  _QWORD v54[67];

  v54[64] = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    v52 = v54;
    v53 = xmmword_24AA2AD00;
    v10 = a6 - a5;
    if ((unint64_t)(a6 - a5) >= 0x201)
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v52, v54, a6 - a5, 1);
    *(_QWORD *)&v53 = 0;
    llvm::SmallVectorImpl<char>::append<char const*,void>(&v52, __src, &__src[a4]);
    if (v10 > a4)
      llvm::SmallVectorImpl<char>::append(&v52, v10 - a4, 0);
    std::string::basic_string[abi:nn180100]<0>(v44, "cf.XXXXXX");
    v11 = 1000;
    while (1)
    {
      v12 = v45 >= 0 ? (char *)v44 : (char *)v44[0];
      v13 = mkstempsat_np(*(_DWORD *)(a2 + 128), v12, 0);
      if (v13 != -1)
        break;
      if (!--v11)
      {
        v14 = __error();
        v15 = strerror(*v14);
        v50[4] = 773;
        v48 = "Could not create file for text section: ";
        *(_QWORD *)&v49 = 40;
        *((_QWORD *)&v49 + 1) = v15;
        getErrorErrorCat();
        v16 = operator new();
        *(_QWORD *)v16 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v48, (std::string *)(v16 + 8));
        *(_QWORD *)(v16 + 32) = 3;
        *(_QWORD *)(v16 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v16 + 48) = 1;
        *(_BYTE *)(a1 + 8) |= 1u;
        *(_QWORD *)a1 = v16;
        goto LABEL_21;
      }
    }
    v17 = v13;
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&v48, v13, 0, 0, 0);
    llvm::raw_ostream::write((llvm::raw_ostream *)&v48, (const char *)v52, v53);
    v36 = v51;
    if (v51.__val_)
    {
      std::error_code::message(&v38, &v36);
      v18 = std::string::insert(&v38, 0, "Error writing file for text section: ", 0x25uLL);
      v19 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v41 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      v20 = operator new();
      v47 = 260;
      v46[0] = (llvm::formatv_object_base *)__p;
      *(_QWORD *)v20 = off_251C127D0;
      llvm::Twine::str(v46, (std::string *)(v20 + 8));
      *(_QWORD *)(v20 + 32) = 3;
      *(_QWORD *)(v20 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v20 + 48) = 1;
      *(_BYTE *)(a1 + 8) |= 1u;
      *(_QWORD *)a1 = v20;
      if (SHIBYTE(v41) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v48);
    }
    else
    {
      llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&v48);
      if (!*(_BYTE *)(a2 + 103))
        goto LABEL_37;
      v21 = libcd_create(v53);
      v36.__val_ = 2;
      v22 = 1;
      libcd_set_hash_types((uint64_t)v21, &v36.__val_, 1u);
      v38.__r_.__value_.__r.__words[0] = 0x8000000010BDEFALL;
      v23 = malloc_type_malloc(0x20uLL, 0x1070040E5421EB9uLL);
      v23[2] = 0x10000;
      *((_QWORD *)v23 + 2) = &v38;
      *((_QWORD *)v23 + 3) = 8;
      *(_QWORD *)v23 = *((_QWORD *)v21 + 13);
      *((_QWORD *)v21 + 13) = v23;
      v24 = v52;
      libcd_reset_read_method((uint64_t)v21);
      v21[18] = 2;
      *((_QWORD *)v21 + 8) = _libcd_read_page_mem;
      *((_QWORD *)v21 + 10) = v24;
      *((_BYTE *)v21 + 88) = 1;
      v21[23] = 2;
      *((_QWORD *)v21 + 12) = strdup("ADHOC");
      v25 = v53;
      *((_QWORD *)v21 + 25) = 0;
      *((_QWORD *)v21 + 26) = v25;
      *((_QWORD *)v21 + 27) = 0;
      libcd_set_linkage((uint64_t)v21, 2, (__int128 *)(a2 + 80));
      if (*(_WORD *)(a2 + 100) == 1)
        *(_DWORD *)((char *)v21 + 246) = 66049;
      v26 = libcd_superblob_size((uint64_t)v21);
      v27 = (char *)operator new[]();
      bzero(v27, v26);
      libcd_reset_write_method((uint64_t)v21);
      v21[4] = 2;
      *((_QWORD *)v21 + 1) = _libcd_write_mem;
      *((_QWORD *)v21 + 3) = v27;
      *((_QWORD *)v21 + 4) = &v27[v26];
      *((_BYTE *)v21 + 56) = 1;
      v28 = libcd_serialize_as_type((uint64_t)v21, 0xFADE0CC0);
      if (v28)
      {
        v29 = v28 > 6 ? "Unrecognized libcd serialize return value" : off_251C114E0[v28 - 1];
        v50[4] = 773;
        v48 = "Could not create signature for text section: ";
        *(_QWORD *)&v49 = 45;
        *((_QWORD *)&v49 + 1) = v29;
        getErrorErrorCat();
        v30 = operator new();
        *(_QWORD *)v30 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)&v48, (std::string *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v30 + 48) = 1;
        *(_BYTE *)(a1 + 8) |= 1u;
        *(_QWORD *)a1 = v30;
      }
      else
      {
        v48 = 0;
        *(_QWORD *)&v49 = v27;
        *((_QWORD *)&v49 + 1) = v26;
        memset(v50, 0, 32);
        if (fcntl(v17, 59, &v48) == -1)
        {
          v34 = __error();
          v35 = strerror(*v34);
          v47 = 773;
          v46[0] = (llvm::formatv_object_base *)"Could not register signature for text section: ";
          v46[1] = (llvm::formatv_object_base *)47;
          v46[2] = (llvm::formatv_object_base *)v35;
          getErrorErrorCat();
          __p[0] = (void *)3;
          __p[1] = &getErrorErrorCat(void)::ErrorErrorCat;
          llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>(v46, (uint64_t *)__p, &v43);
          *(_BYTE *)(a1 + 8) |= 1u;
          *(_QWORD *)a1 = v43;
          v43 = 0;
        }
        else
        {
          v22 = 0;
        }
      }
      MEMORY[0x24BD1B380](v27, 0x1000C8077774924);
      libcd_free((uint64_t)v21);
      if (!v22)
      {
LABEL_37:
        if (*(char *)(a2 + 127) < 0)
        {
          v31 = *(char **)(a2 + 104);
          v32 = *(_QWORD *)(a2 + 112);
        }
        else
        {
          v31 = (char *)(a2 + 104);
          v32 = *(unsigned __int8 *)(a2 + 127);
        }
        v48 = v50;
        v49 = xmmword_24AA2ACF0;
        llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(&v48, v31, &v31[v32]);
        v47 = 260;
        v46[0] = (llvm::formatv_object_base *)v44;
        v42 = 257;
        v39 = 257;
        v37 = 257;
        llvm::sys::path::append(&v48, 0, (unsigned __int8 *)v46, (unsigned __int8 *)__p, (unsigned __int8 *)&v38, (unsigned __int8 *)&v36);
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v48, 0);
        *(_QWORD *)&v49 = v49 - 1;
        v33 = xpc_string_create((const char *)v48);
        *(_BYTE *)(a1 + 8) &= ~1u;
        *(_QWORD *)a1 = v33;
        if (v48 != v50)
          free(v48);
      }
    }
    close(v17);
LABEL_21:
    if (v45 < 0)
      operator delete(v44[0]);
    if (v52 != v54)
      free(v52);
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_QWORD *)a1 = 0;
  }
}

uint64_t llvm::Expected<`anonymous namespace'::XPCMemoryManager::XPCCodeFile>::~Expected(uint64_t a1)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(void **)a1;
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    if (v3)
      (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    xpc_release(v3);
  }
  return a1;
}

_QWORD *llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = (__int128 *)(v4 + 8);
      do
      {
        v14 = *((_QWORD *)v13 - 1);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *((_QWORD *)v13 - 1);
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v15 + 1), v13);
          ++*(_DWORD *)(a1 + 8);
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v13);
        }
        v13 = (__int128 *)((char *)v13 + 40);
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 40 * v16;
    do
    {
      *result = -1;
      result += 5;
      v17 -= 40;
    }
    while (v17);
  }
  return result;
}

_QWORD *llvm::SmallVectorImpl<char>::append(_QWORD *result, size_t __len, int __c)
{
  _QWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[1];
  if (v6 + __len > result[2])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v6 + __len, 1);
    v6 = v5[1];
    if (!__len)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (__len)
  {
LABEL_3:
    result = memset((void *)(*v5 + v6), __c, __len);
    v6 = v5[1];
  }
LABEL_4:
  v5[1] = v6 + __len;
  return result;
}

_QWORD *llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(_QWORD *result, char *a2, char *a3)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;
  char v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[1];
  v8 = v7 + a3 - a2;
  if (result[2] < v8)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v8, 1);
    v7 = v5[1];
  }
  if (v4 != a3)
  {
    v9 = (_BYTE *)(*v5 + v7);
    do
    {
      v10 = *v4++;
      *v9++ = v10;
    }
    while (v4 != a3);
    v7 = v5[1];
  }
  v5[1] = v7 + v6;
  return result;
}

_QWORD *llvm::SmallVectorTemplateBase<char,true>::push_back(_QWORD *result, char a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if ((unint64_t)(v4 + 1) > result[2])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v4 + 1, 1);
    v4 = v3[1];
  }
  *(_BYTE *)(*v3 + v4) = a2;
  ++v3[1];
  return result;
}

uint64_t std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - *a1) >> 4);
    if ((unint64_t)(v10 + 1) > 0x249249249249249)
      abort();
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 4);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x124924924924924)
      v13 = 0x249249249249249;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[112 * v10];
    v18 = &v14[112 * v13];
    std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>((uint64_t)v16, a2);
    v17 = v16 + 112;
    std::vector<llvm::orc::shared::AllocActionCallPair>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 112;
  }
  a1[1] = v9;
  return result;
}

uint64_t llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)(a1 + 56) &= ~1u;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  v3 = a1 + 8;
  *(_OWORD *)(a1 + 16) = xmmword_24AA2ACE0;
  if (*(_QWORD *)(a2 + 16))
    llvm::SmallVectorImpl<char>::operator=(v3, (const void **)(a2 + 8));
  return a1;
}

uint64_t *llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  if ((a1[7] & 1) != 0)
  {
    v3 = *a1;
    *a1 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    v2 = (uint64_t *)a1[1];
    if (v2 != a1 + 4)
      free(v2);
  }
  return a1;
}

uint64_t std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  v4 = a1 + 8;
  v5 = xmmword_24AA2ACE0;
  *(_OWORD *)(a1 + 16) = xmmword_24AA2ACE0;
  if (*(_QWORD *)(a2 + 16))
  {
    llvm::SmallVectorImpl<char>::operator=(v4, (const void **)(a2 + 8));
    v5 = xmmword_24AA2ACE0;
  }
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = a1 + 88;
  *(_QWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 72) = v5;
  if (*(_QWORD *)(a2 + 72))
    llvm::SmallVectorImpl<char>::operator=(a1 + 64, (const void **)(a2 + 64));
  return a1;
}

uint64_t std::vector<llvm::orc::shared::AllocActionCallPair>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 112;
    result = std::construct_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair,llvm::orc::shared::AllocActionCallPair*>(result - 112, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(112 * a2);
}

uint64_t std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 112;
    std::__destroy_at[abi:nn180100]<llvm::orc::shared::AllocActionCallPair,0>((_QWORD *)(i - 112));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::SmallVectorImpl<char>::operator=(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, v4);
    }
    else
    {
      if (*(_QWORD *)(a1 + 16) >= v4)
      {
        if (v5)
          memmove(*(void **)a1, *(const void **)a2, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v4, 1);
        v5 = 0;
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + v5), (const void *)(*(_QWORD *)a2 + v5), *(_QWORD *)a2 + v6 - (*(_QWORD *)a2 + v5));
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>>,std::vector<llvm::orc::shared::AllocActionCallPair>,void>::serialize(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _BOOL8 result;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  v3 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v3;
  v4 = (_QWORD *)*a2;
  v5 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 == v5)
    return 1;
  do
  {
    result = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>::serialize<llvm::orc::shared::WrapperFunctionCall,llvm::orc::shared::WrapperFunctionCall>(a1, v4, v4 + 7);
    if (!result)
      break;
    v4 += 14;
  }
  while (v4 != v5);
  return result;
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>::serialize<llvm::orc::shared::WrapperFunctionCall,llvm::orc::shared::WrapperFunctionCall>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::SmallVector<char,24u>>(a1, a2, (uint64_t)(a2 + 1));
  if (result)
    return llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::SmallVector<char,24u>>(a1, a3, (uint64_t)(a3 + 1));
  return result;
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>::serialize<llvm::orc::ExecutorAddr,llvm::SmallVector<char,24u>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = *a2;
  v3 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v3;
  return llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::SmallVector<char,24u>,void>::serialize(a1, a3);
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,llvm::SmallVector<char,24u>,void>::serialize(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = *(_QWORD *)(a2 + 8);
  v2 = (_BYTE *)(*a1 + 8);
  v3 = a1[1] - 8;
  *a1 = v2;
  a1[1] = v3;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = v4 == 0;
  if (v4 && v3)
  {
    v6 = *(char **)a2;
    v7 = v4 - 1;
    do
    {
      v8 = *v6++;
      *v2 = v8;
      v2 = (_BYTE *)(*a1 + 1);
      v9 = a1[1] - 1;
      *a1 = v2;
      a1[1] = v9;
      v5 = v7 == 0;
      if (!v7)
        break;
      --v7;
    }
    while (v9);
  }
  return v5;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::ExecutorAddrRange>>::operator=(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v6 = *a2;
        v7 = *a2 + 24 * v4;
        v8 = *(_QWORD *)a1;
        do
        {
          *(_BYTE *)v8 = *(_BYTE *)v6;
          *(_OWORD *)(v8 + 8) = *(_OWORD *)(v6 + 8);
          v6 += 24;
          v8 += 24;
        }
        while (v6 != v7);
      }
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        v9 = *a2;
        v10 = *a2 + 24 * v5;
        v11 = *(_QWORD *)a1;
        do
        {
          *(_BYTE *)v11 = *(_BYTE *)v9;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)(v9 + 8);
          v9 += 24;
          v11 += 24;
        }
        while (v9 != v10);
LABEL_14:
        v12 = *((unsigned int *)a2 + 2);
        if (v5 != v12)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v5), (const void *)(*a2 + 24 * v5), *a2 + 24 * v12 - (*a2 + 24 * v5));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 24);
    }
    v5 = 0;
    goto LABEL_14;
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::JITLinkDylib const*,std::vector<`anonymous namespace'::XPCMemoryManager::ReserveRequest>,llvm::DenseMapInfo<llvm::jitlink::JITLinkDylib const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::JITLinkDylib const*,std::vector<`anonymous namespace'::XPCMemoryManager::ReserveRequest>>>,llvm::jitlink::JITLinkDylib const*,std::vector<`anonymous namespace'::XPCMemoryManager::ReserveRequest>,llvm::DenseMapInfo<llvm::jitlink::JITLinkDylib const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::JITLinkDylib const*,std::vector<`anonymous namespace'::XPCMemoryManager::ReserveRequest>>>::LookupBucketFor<llvm::jitlink::JITLinkDylib const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

uint64_t std::allocator_traits<std::allocator<`anonymous namespace'::XPCMemoryManager::ReserveRequest>>::construct[abi:nn180100]<`anonymous namespace'::XPCMemoryManager::ReserveRequest,`anonymous namespace'::XPCMemoryManager::ReserveRequest,void,void>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  v5 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0x400000000;
  if (*(_DWORD *)(a2 + 48))
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(v5, a2 + 40);
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1 + 472, (__int128 *)(a2 + 472));
}

void **`anonymous namespace'::XPCMemoryManager::acquireSlab(llvm::jitlink::JITLinkDylib const*,unsigned long long)::$_0::operator()(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _OWORD *v36;
  _OWORD v37[2];
  uint64_t v38;
  _QWORD v39[2];
  uint64_t v40;
  _QWORD v41[5];

  v41[4] = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = *a2;
  if (*a2)
  {
    if ((a3[1] & 1) != 0)
    {
      *a3 = 0;
      v6 = *a2;
    }
    *a2 = 0;
    goto LABEL_18;
  }
  if ((a3[1] & 1) != 0)
  {
    v6 = *a3;
    *a3 = 0;
LABEL_18:
    *(_QWORD *)&v37[0] = v6;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)v37);
    if (*(_QWORD *)&v37[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v37[0] + 8))(*(_QWORD *)&v37[0]);
  }
  v7 = (_QWORD *)operator new();
  v7[4] = 0;
  v7[3] = 0;
  v7[2] = v7 + 3;
  v8 = a1[2] + *a3;
  *v7 = *a3;
  v7[1] = v8;
  std::mutex::lock((std::mutex *)(v5 + 136));
  v34 = 0;
  v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(v5 + 200), *(_DWORD *)(v5 + 216), a1[1], &v34);
  v10 = v34;
  if ((v9 & 1) == 0)
  {
    v35 = v34;
    v11 = *(_DWORD *)(v5 + 208);
    v12 = *(unsigned int *)(v5 + 216);
    if (4 * v11 + 4 >= (3 * v12))
    {
      v13 = 2 * v12;
    }
    else
    {
      v13 = *(_DWORD *)(v5 + 216);
      if ((int)v12 + ~v11 - *(_DWORD *)(v5 + 212) > v12 >> 3)
      {
LABEL_9:
        *(_DWORD *)(v5 + 208) = v11 + 1;
        if (*v10 != -4096)
          --*(_DWORD *)(v5 + 212);
        *v10 = a1[1];
        v10[1] = 0;
        goto LABEL_12;
      }
    }
    v19 = *(_QWORD *)(v5 + 200);
    v20 = (v13 - 1) | ((unint64_t)(v13 - 1) >> 1);
    v21 = v20 | (v20 >> 2) | ((v20 | (v20 >> 2)) >> 4);
    v22 = ((v21 | (v21 >> 8)) >> 16) | v21 | (v21 >> 8);
    if ((v22 + 1) > 0x40)
      v23 = v22 + 1;
    else
      v23 = 64;
    *(_DWORD *)(v5 + 216) = v23;
    v24 = operator new(16 * v23, (std::align_val_t)8uLL);
    *(_QWORD *)(v5 + 200) = v24;
    if (v19)
    {
      *(_QWORD *)(v5 + 208) = 0;
      v25 = *(unsigned int *)(v5 + 216);
      if ((_DWORD)v25)
      {
        v26 = 16 * v25;
        do
        {
          *v24 = -4096;
          v24 += 2;
          v26 -= 16;
        }
        while (v26);
      }
      if ((_DWORD)v12)
      {
        v27 = 16 * v12;
        v28 = (uint64_t *)(v19 + 8);
        do
        {
          v29 = *(v28 - 1);
          if ((v29 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            *(_QWORD *)&v37[0] = 0;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(v5 + 200), *(_DWORD *)(v5 + 216), v29, v37);
            v30 = *(_QWORD *)&v37[0];
            **(_QWORD **)&v37[0] = v29;
            v31 = *v28;
            *v28 = 0;
            *(_QWORD *)(v30 + 8) = v31;
            ++*(_DWORD *)(v5 + 208);
          }
          v28 += 2;
          v27 -= 16;
        }
        while (v27);
      }
      MEMORY[0x24BD1B398](v19, 8);
      v24 = *(_QWORD **)(v5 + 200);
      LODWORD(v32) = *(_DWORD *)(v5 + 216);
    }
    else
    {
      *(_QWORD *)(v5 + 208) = 0;
      v32 = *(unsigned int *)(v5 + 216);
      if ((_DWORD)v32)
      {
        v33 = 0;
        do
        {
          v24[v33] = -4096;
          v33 += 2;
        }
        while (2 * v32 != v33);
      }
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>((uint64_t)v24, v32, a1[1], &v35);
    v11 = *(_DWORD *)(v5 + 208);
    v10 = v35;
    goto LABEL_9;
  }
LABEL_12:
  *(_QWORD *)&v37[0] = 0;
  std::mutex::unlock((std::mutex *)(v5 + 136));
  v14 = a1[1];
  v15 = v35;
  v16 = v36;
  if (v35 != (_QWORD *)v36)
  {
    do
    {
      v17 = v15[1];
      v37[0] = *v15;
      v37[1] = v17;
      v38 = *((_QWORD *)v15 + 4);
      v39[0] = &v40;
      v39[1] = 0x400000000;
      if (*((_DWORD *)v15 + 12))
        llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)v39, (uint64_t)v15 + 40);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v41, (_OWORD *)((char *)v15 + 472));
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v41);
      llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)v39);
      v15 = (_OWORD *)((char *)v15 + 504);
    }
    while (v15 != v16);
  }
}

void **`anonymous namespace'::XPCMemoryManager::failReserveRequests(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9[2];
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = v12;
  if (v11 != v12)
  {
    v3 = v11 + 472;
    do
    {
      getErrorErrorCat();
      v9[0] = 3;
      v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Allocation failed. Could not reserve memory range for JD", v9, &v10);
      v14 |= 1u;
      v13 = v10;
      v10 = 0;
      v4 = v3[3];
      v5 = v3;
      if ((v4 & 2) == 0)
        v5 = (_QWORD *)*v3;
      (*(void (**)(_QWORD *, uint64_t *))(v4 & 0xFFFFFFFFFFFFFFF8))(v5, &v13);
      v6 = v13;
      v13 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      v7 = v3 + 4;
      v3 += 63;
    }
    while (v7 != v2);
  }
}

void `anonymous namespace'::XPCMemoryManager::takePendingReserveRequests(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::mutex *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (std::mutex *)(a2 + 136);
  std::mutex::lock((std::mutex *)(a2 + 136));
  v10 = 0;
  {
    v7 = v10;
    v8 = *(_QWORD *)(a2 + 224);
    v9 = *(unsigned int *)(a2 + 240);
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 224);
    v9 = *(unsigned int *)(a2 + 240);
    v7 = v8 + 32 * v9;
  }
  if (v7 == v8 + 32 * v9)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)(v7 + 8);
    a1[2] = *(_QWORD *)(v7 + 24);
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)v7 = -8192;
    *(int32x2_t *)(a2 + 232) = vadd_s32(*(int32x2_t *)(a2 + 232), (int32x2_t)0x1FFFFFFFFLL);
  }
  std::mutex::unlock(v6);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS2_12ExecutorAddrEyEEEvOT0_SP_OT1_DpRKT2_EUlOT_PKcmE_SO_JSP_yEEEvSZ_SR_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerESZ_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v4 = *a1;
  v7 = *(_OWORD *)(a1 + 1);
  v8 = a1[3];
  v5 = operator new();
  *(_QWORD *)v5 = off_251C11460;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v8;
  *(_QWORD *)(v5 + 32) = v2;
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  result = v9;
  v9 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11460;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 32);
LABEL_5:
    free(v3);
    return a1;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 32);
    if (v3)
      goto LABEL_5;
  }
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C11460;
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 32)) == 0)
LABEL_8:
      JUMPOUT(0x24BD1B3A4);
  }
  else
  {
    v3 = *(void **)(a1 + 32);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 48));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZN12_GLOBAL__N_116XPCMemoryManager11acquireSlabEPKNS_7jitlink12JITLinkDylibEyE3__0JNS0_12ExecutorAddrEyEEEvOT0_SL_OT1_DpRKT2_EUlOT_PKcmE_SK_JSL_yEEEvSV_SN_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESV_ENUlS13_E_clES13_EUlvE_E3runEv(uint64_t a1)
{
  uint64_t *v1;
  void **v2;
  uint64_t v3;
  llvm::formatv_object_base *v4;
  uint64_t v5;
  llvm::formatv_object_base *v6;
  uint64_t v7;
  void *v8;
  void *v9[2];
  llvm::formatv_object_base *v10;
  llvm::formatv_object_base *v11;
  llvm::formatv_object_base *v12;
  char v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)(a1 + 8);
  *(_OWORD *)v9 = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v17 = 0;
  v16 = 0;
  if (v9[1])
  {
    if (v9[1] <= (void *)8)
      v2 = v9;
    else
      v2 = (void **)v9[0];
  }
  else
  {
    v11 = (llvm::formatv_object_base *)v9[0];
    if (v9[0])
    {
      getErrorErrorCat();
      v14 = 3;
      v15 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, &v14, (uint64_t *)&v10);
      v13 = 0;
      v12 = 0;
      if ((v13 & 1) != 0 && v12)
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v12 + 8))(v12);
      v4 = v10;
      if (v10)
        goto LABEL_27;
      goto LABEL_28;
    }
    v2 = v9;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(&v16, (uint64_t)v2, (uint64_t)v9[1], (uint64_t *)&v12);
  if (v12)
  {
    v11 = v12;
    v12 = 0;
    LOBYTE(v15) = v17 & 1;
    v3 = v16;
    if ((v17 & 1) != 0)
      v16 = 0;
    v14 = v3;
    if ((v15 & 1) != 0 && v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v6 = v11;
    if (!v11)
      goto LABEL_26;
LABEL_25:
    (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_26;
  }
  v12 = 0;
  LOBYTE(v15) = v17 & 1;
  v5 = v16;
  if ((v17 & 1) != 0)
    v16 = 0;
  v14 = v5;
  if ((v15 & 1) != 0)
  {
    v6 = (llvm::formatv_object_base *)v14;
    if (v14)
      goto LABEL_25;
  }
LABEL_26:
  v4 = v12;
  if (v12)
LABEL_27:
    (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v4 + 8))(v4);
LABEL_28:
  if ((v17 & 1) != 0)
  {
    v7 = v16;
    v16 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (v9[1] >= (void *)9)
  {
    v8 = v9[0];
LABEL_35:
    free(v8);
    return;
  }
  if (!v9[1])
  {
    v8 = v9[0];
    if (v9[0])
      goto LABEL_35;
  }
}

void llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  __int128 v7;
  void *__p[2];
  uint64_t v9;
  _BYTE v10[40];
  uint64_t v11[2];
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v11[0] = a2;
  v11[1] = a3;
  v10[0] = 0;
  memset(&v10[8], 0, 32);
  if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::detail::SPSSerializableExpected<llvm::orc::ExecutorAddr>,void>::deserialize(v11, (uint64_t)v10))
  {
    v7 = *(_OWORD *)v10;
    *(_OWORD *)__p = *(_OWORD *)&v10[16];
    v9 = *(_QWORD *)&v10[32];
    memset(&v10[16], 0, 24);
    llvm::orc::shared::detail::fromSPSSerializable<llvm::orc::ExecutorAddr>((uint64_t)&v7, (uint64_t)&v12);
    llvm::Expected<llvm::orc::ExecutorAddr>::moveAssign<llvm::orc::ExecutorAddr>(a1, &v12);
    if ((v13 & 1) != 0)
    {
      v6 = v12;
      v12 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
    *a4 = 0;
  }
  else
  {
    getErrorErrorCat();
    v12 = 3;
    v13 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Error deserializing return value from blob in call", &v12, a4);
  }
  if ((v10[39] & 0x80000000) != 0)
    operator delete(*(void **)&v10[16]);
}

void llvm::orc::shared::detail::fromSPSSerializable<llvm::orc::ExecutorAddr>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  llvm::formatv_object_base *v4;
  llvm::formatv_object_base *v5;
  __int16 v6;

  if (*(_BYTE *)a1)
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    v3 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v4 = (llvm::formatv_object_base *)(a1 + 16);
    getErrorErrorCat();
    v3 = operator new();
    v6 = 260;
    v5 = v4;
    *(_QWORD *)v3 = off_251C127D0;
    llvm::Twine::str(&v5, (std::string *)(v3 + 8));
    *(_QWORD *)(v3 + 32) = 3;
    *(_QWORD *)(v3 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v3 + 48) = 1;
    *(_BYTE *)(a2 + 8) |= 1u;
  }
  *(_QWORD *)a2 = v3;
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::detail::SPSSerializableExpected<llvm::orc::ExecutorAddr>,void>::deserialize(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = *a1;
  v4 = *(unsigned __int8 *)(*a1)++;
  a1[1] = v2 - 1;
  *(_BYTE *)a2 = v4;
  if (v4)
  {
    if ((unint64_t)(v2 - 1) >= 8)
    {
      v5 = *(_QWORD *)(v3 + 1);
      *a1 = v3 + 9;
      a1[1] = v2 - 9;
      *(_QWORD *)(a2 + 8) = v5;
      return 1;
    }
    return 0;
  }
  return llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)a1, (std::string *)(a2 + 16));
}

_BYTE *llvm::Expected<llvm::orc::ExecutorAddr>::moveAssign<llvm::orc::ExecutorAddr>(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[8];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[8];
      }
    }
    v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    v6 = *(_QWORD *)a2;
    if ((v5 & 1) != 0)
      *(_QWORD *)a2 = 0;
    *(_QWORD *)v3 = v6;
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  char v13;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_QWORD *)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::assignRemote(a1, a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(_DWORD *)(a1 + 8);
    if (v7 >= v6)
    {
      v8 = *(_QWORD *)a1;
      if ((_DWORD)v6)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *>((uint64_t)&v12, v4, v4 + 104 * v6, v8);
        v10 = v9;
        v8 = *(_QWORD *)a1;
        v7 = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v10 = *(_QWORD *)a1;
      }
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(v10, v8 + 104 * v7);
      goto LABEL_15;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if (v7)
      {
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *>((uint64_t)&v13, v4, v4 + 104 * v7, *(_QWORD *)a1);
LABEL_12:
        llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::uninitialized_move<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*>(*(_QWORD *)a2 + 104 * v7, *(_QWORD *)a2 + 104 * *(unsigned int *)(a2 + 8), *(_QWORD *)a1 + 104 * v7);
LABEL_15:
        *(_DWORD *)(a1 + 8) = v6;
        llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(_QWORD *)a2, *(_QWORD *)a2 + 104 * *(unsigned int *)(a2 + 8));
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 104 * v7);
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(a1, v6);
    }
    v7 = 0;
    goto LABEL_12;
  }
  return a1;
}

double llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::assignRemote(uint64_t a1, uint64_t a2)
{
  double result;

  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 8));
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 104, &v6);
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::moveElementsForGrow(a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::uninitialized_move<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;

  while (result != a2)
  {
    *(_BYTE *)a3 = *(_BYTE *)result;
    v3 = *(_OWORD *)(result + 8);
    v4 = *(_OWORD *)(result + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(result + 40);
    *(_OWORD *)(a3 + 24) = v4;
    *(_OWORD *)(a3 + 8) = v3;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 56) = 0;
    *(_OWORD *)(a3 + 56) = *(_OWORD *)(result + 56);
    *(_QWORD *)(a3 + 72) = *(_QWORD *)(result + 72);
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = 0;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 80) = *(_OWORD *)(result + 80);
    *(_QWORD *)(a3 + 96) = *(_QWORD *)(result + 96);
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
    *(_QWORD *)(result + 96) = 0;
    result += 104;
    a3 += 104;
  }
  return result;
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_BYTE *)a4 = *(_BYTE *)v5;
    v7 = *(_OWORD *)(v5 + 8);
    v8 = *(_OWORD *)(v5 + 24);
    *(_OWORD *)(a4 + 40) = *(_OWORD *)(v5 + 40);
    *(_OWORD *)(a4 + 24) = v8;
    *(_OWORD *)(a4 + 8) = v7;
    std::vector<llvm::jitlink::Block *>::__move_assign(a4 + 56, (__n128 *)(v5 + 56));
    std::vector<llvm::jitlink::Block *>::__move_assign(a4 + 80, (__n128 *)(v5 + 80));
    a4 += 104;
    v5 += 104;
  }
  while (v5 != v6);
  return v6;
}

__n128 std::vector<llvm::jitlink::Block *>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::moveElementsForGrow(uint64_t a1, uint64_t a2)
{
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::uninitialized_move<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*,std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>*>(*(_QWORD *)a1, *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 8), a2);
  llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::destroy_range(*(_QWORD *)a1, *(_QWORD *)a1 + 104 * *(unsigned int *)(a1 + 8));
}

void std::vector<llvm::orc::ExecutorAddr>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>,std::vector<llvm::orc::ExecutorAddr>,void>::serialize(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  unint64_t v7;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = (uint64_t)(a2[1] - *a2) >> 3;
  v2 = (_QWORD *)(*a1 + 8);
  v3 = a1[1] - 8;
  *a1 = v2;
  a1[1] = v3;
  v4 = a2[1];
  v5 = *a2 == v4;
  if (*a2 != v4 && v3 >= 8)
  {
    v6 = *a2 + 8;
    do
    {
      *v2 = *(_QWORD *)(v6 - 8);
      v2 = (_QWORD *)(*a1 + 8);
      v7 = a1[1] - 8;
      *a1 = v2;
      a1[1] = v7;
      v5 = v6 == v4;
      if (v6 == v4)
        break;
      v6 += 8;
    }
    while (v7 > 7);
  }
  return v5;
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *__p[2];
  __int128 v12;
  __int128 v13[2];
  void *v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  v5 = *(_OWORD *)(a1 + 3);
  *(_OWORD *)__p = *(_OWORD *)(a1 + 1);
  v12 = v5;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v13, (__int128 *)(a1 + 5));
  v14[0] = v2;
  v14[1] = v3;
  v6 = operator new();
  *(_QWORD *)v6 = off_251C114A8;
  v7 = v12;
  *(_OWORD *)(v6 + 8) = *(_OWORD *)__p;
  *(_OWORD *)(v6 + 24) = v7;
  __p[1] = 0;
  v12 = 0uLL;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v6 + 40, v13);
  *(_OWORD *)(v6 + 72) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(v6 + 88) = "WFR handler task";
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  v10 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (v14[1] < (void *)9)
  {
    if (v14[1])
      goto LABEL_8;
    v9 = v14[0];
    if (!v14[0])
      goto LABEL_8;
  }
  else
  {
    v9 = v14[0];
  }
  free(v9);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v13);
  if (__p[1])
  {
    *(void **)&v12 = __p[1];
    operator delete(__p[1]);
  }
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_EEvPvS1L_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  a1[4] = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 5), (__int128 *)(a2 + 40));
}

void _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSL_9allocatorISP_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrENSM_ISY_NSQ_ISY_EEEEEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_S10_EEEvS1A_S12_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1A_EUlS4_E_EEvPv(_QWORD *a1)
{
  void *v2;

  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a1 + 5);
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_251C114A8;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 72);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 72);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 40));
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = off_251C114A8;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 < 9)
  {
    if (v2)
      goto LABEL_8;
    v3 = *(void **)(a1 + 72);
    if (!v3)
      goto LABEL_8;
  }
  else
  {
    v3 = *(void **)(a1 + 72);
  }
  free(v3);
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 40));
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
  }
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 88));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZN12_GLOBAL__N_116XPCMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSH_9allocatorISL_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrENSI_ISU_NSM_ISU_EEEEEEEvOT0_SU_OT1_DpRKT2_EUlOT_PKcmE_ST_JSU_SW_EEEvS16_SY_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES16_ENUlS1E_E_clES1E_EUlvE_E3runEv(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  uint64_t v14[2];
  uint64_t v15;
  llvm::formatv_object_base *v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)v13 = *(_OWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v17 = 0;
  if (v13[1])
  {
    if (v13[1] <= (void *)8)
      v2 = v13;
    else
      v2 = (void **)v13[0];
  }
  else
  {
    v16 = (llvm::formatv_object_base *)v13[0];
    if (v13[0])
    {
      getErrorErrorCat();
      v14[0] = 3;
      v14[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v16, v14, &v15);
      v17 = 0;
      if (v15)
      {
        v8 = (_QWORD *)(a1 + 40);
        v18 = v15;
        v15 = 0;
      }
      else
      {
        v8 = (_QWORD *)(a1 + 40);
        v18 = 0;
      }
      v12 = *(_QWORD *)(a1 + 64);
      if ((v12 & 2) == 0)
        v8 = (_QWORD *)*v8;
      (*(void (**)(_QWORD *, uint64_t *))(v12 & 0xFFFFFFFFFFFFFFF8))(v8, &v18);
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      v6 = v15;
      if (v15)
        goto LABEL_11;
      goto LABEL_12;
    }
    v2 = v13;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v17, (uint64_t)v2, (uint64_t)v13[1], &v18);
  v3 = v18;
  if (v18)
  {
    v17 = 0;
    v18 = 0;
    v4 = (_QWORD *)(a1 + 40);
    v14[0] = v3;
    v5 = *(_QWORD *)(a1 + 64);
    if ((v5 & 2) == 0)
      v4 = (_QWORD *)*v4;
    (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v4, v14);
    if (v14[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v14[0] + 8))(v14[0]);
    v6 = v18;
    if (v18)
LABEL_11:
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v9 = v17;
    v17 = 0;
    if (!v9)
    v10 = (_QWORD *)(a1 + 40);
    v14[0] = v9;
    v11 = *(_QWORD *)(a1 + 64);
    if ((v11 & 2) == 0)
      v10 = (_QWORD *)*v10;
    (*(void (**)(_QWORD *, uint64_t *))(v11 & 0xFFFFFFFFFFFFFFF8))(v10, v14);
    v6 = v14[0];
    if (v14[0])
      goto LABEL_11;
  }
LABEL_12:
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (v13[1] >= (void *)9)
  {
    v7 = v13[0];
LABEL_18:
    free(v7);
    return;
  }
  if (!v13[1])
  {
    v7 = v13[0];
    if (v13[0])
      goto LABEL_18;
  }
}

char *std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::ExecutorProcessControl&)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t _GLOBAL__sub_I_XPCExecutorProcessControl_cpp()
{
}

_QWORD *llvm::detail::IEEEFloat::assign(_QWORD *this, uint64_t *a2)
{
  char v2;
  char v3;
  int v4;
  _BOOL4 v6;

  v2 = *((_BYTE *)this + 20) & 0xF7 | *((_BYTE *)a2 + 20) & 8;
  *((_BYTE *)this + 20) = v2;
  v3 = *((_BYTE *)a2 + 20);
  v4 = v3 & 7;
  *((_BYTE *)this + 20) = v2 & 0xF8 | v3 & 7;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  v6 = (v3 & 6) != 0 && v4 != 3;
  if (v4 == 1 || v6)
    return llvm::detail::IEEEFloat::copySignificand(this, a2);
  return this;
}

_QWORD *llvm::detail::IEEEFloat::copySignificand(uint64_t *a1, uint64_t *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *a1;
  result = a1 + 1;
  v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F)
    result = (_QWORD *)*result;
  v5 = *(_DWORD *)(*a2 + 8) - 64;
  v8 = (uint64_t *)a2[1];
  v6 = a2 + 1;
  v7 = v8;
  if (v5 >= 0xFFFFFF80)
    v9 = v6;
  else
    v9 = v7;
  if (v4 <= 0xFFFFFFBF)
  {
    v10 = (unint64_t)(v4 + 64) >> 6;
    do
    {
      v11 = *v9++;
      *result++ = v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::makeNaN(llvm::detail::IEEEFloat *this, int a2, int a3, const llvm::APInt *a4)
{
  const llvm::APInt *v4;
  char v7;
  char v8;
  int *v9;
  int v10;
  int v11;
  unsigned int v12;
  const llvm::APInt *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::APInt **v25;
  const llvm::APInt *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int i;
  unsigned int v30;
  unint64_t v31;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  int v36;

  v4 = a4;
  v7 = *((_BYTE *)this + 20) & 0xF0;
  if (a3)
    v8 = 9;
  else
    v8 = 1;
  *((_BYTE *)this + 20) = v7 | v8;
  v9 = *(int **)this;
  v10 = *(_DWORD *)(*(_QWORD *)this + 16);
  if (v10 == 1)
  {
    if (v9[5] == 2)
      v11 = v9[1] - 1;
    else
      v11 = *v9;
  }
  else
  {
    v11 = *v9 + 1;
  }
  *((_DWORD *)this + 4) = v11;
  v12 = v9[2];
  v13 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if (v12 - 64 <= 0xFFFFFF7F)
    v13 = *(const llvm::APInt **)v13;
  v14 = v12 + 64;
  v15 = (v12 + 64) >> 6;
  v36 = 1;
  v35 = 0;
  if (v10 == 1)
  {
    if (v9[5] == 2)
    {
      *((_BYTE *)this + 20) = v7 | 9;
      v16 = v9[2] - 1;
      v17 = 0;
      v18 = 0;
    }
    else
    {
      v16 = v12 - 1;
      v17 = -1;
      v18 = 1;
    }
    llvm::APInt::APInt((llvm::APInt *)&v33, v16, v17, v18);
    a2 = 0;
    result = v33;
    v35 = v33;
    v21 = v34;
    v36 = v34;
    v4 = (const llvm::APInt *)&v35;
    v20 = v34;
  }
  else
  {
    if (!a4)
    {
      *(_QWORD *)v13 = 0;
      if (v14 >= 0x80)
        bzero((char *)v13 + 8, 8 * (v15 - 2) + 8);
      result = 0;
      v30 = v12 - 2;
      v21 = 1;
      v27 = v12;
      if ((a2 & 1) != 0)
        goto LABEL_32;
LABEL_42:
      if (v9[5] == 2)
        goto LABEL_44;
      goto LABEL_43;
    }
    result = 0;
    v20 = *((_DWORD *)a4 + 2);
    v21 = 1;
  }
  v22 = ((unint64_t)v20 + 63) >> 6;
  if (v15 > v22)
  {
    *(_QWORD *)v13 = 0;
    if (v14 >= 0x80)
    {
      v23 = result;
      bzero((char *)v13 + 8, 8 * (v15 - 2) + 8);
      result = v23;
    }
  }
  if (v20 >= 0x41)
    v4 = *(const llvm::APInt **)v4;
  if (v15 >= v22)
    v24 = v22;
  else
    v24 = v15;
  if ((_DWORD)v24)
  {
    v25 = (const llvm::APInt **)v13;
    do
    {
      v26 = *(const llvm::APInt **)v4;
      v4 = (const llvm::APInt *)((char *)v4 + 8);
      *v25++ = v26;
      --v24;
    }
    while (v24);
  }
  v9 = *(int **)this;
  v27 = *(_DWORD *)(*(_QWORD *)this + 8);
  v28 = (v27 - 1) >> 6;
  *((_QWORD *)v13 + v28) &= ~(-1 << (v27 - 1));
  for (i = v28 + 1; (_DWORD)v15 != i; ++i)
    *((_QWORD *)v13 + i) = 0;
  v30 = v27 - 2;
  if (!a2)
    goto LABEL_42;
LABEL_32:
  *((_QWORD *)v13 + (v30 >> 6)) &= ~(1 << v30);
  if (v12 <= 0xFFFFFFBF)
  {
    v31 = *(_QWORD *)v13;
    if (*(_QWORD *)v13)
      goto LABEL_44;
    while (v15 - 1 != v31)
    {
      if (*((_QWORD *)v13 + ++v31))
      {
        if (v31 >= v15)
          break;
        goto LABEL_44;
      }
    }
  }
  v30 = v27 - 3;
LABEL_43:
  *((_QWORD *)v13 + (v30 >> 6)) |= 1 << v30;
LABEL_44:
  if (v9 == (int *)&llvm::semX87DoubleExtended)
    *((_QWORD *)v13 + ((v27 - 1) >> 6)) |= 1 << (v27 - 1);
  if (v21 >= 0x41)
  {
    if (result)
      return MEMORY[0x24BD1B380](result, 0x1000C8000313F17);
  }
  return result;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::operator=(llvm::detail::IEEEFloat *this, llvm::detail::IEEEFloat *a2)
{
  uint64_t v4;
  uint64_t v5;

  if (this != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)this != *(_QWORD *)a2)
    {
      if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
      {
        v5 = *((_QWORD *)this + 1);
        if (v5)
        {
          MEMORY[0x24BD1B380](v5, 0x1000C8000313F17);
          v4 = *(_QWORD *)a2;
        }
      }
      *(_QWORD *)this = v4;
      if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80)
        *((_QWORD *)this + 1) = operator new[]();
    }
    llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
  }
  return this;
}

uint64_t llvm::detail::IEEEFloat::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;

  if ((*(_DWORD *)(*(_QWORD *)a1 + 8) - 64) <= 0xFFFFFF7F)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4)
      MEMORY[0x24BD1B380](v4, 0x1000C8000313F17);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a1 + 20) & 0xF8 | *(_BYTE *)(a2 + 20) & 7;
  *(_BYTE *)(a1 + 20) = v5;
  *(_BYTE *)(a1 + 20) = v5 & 0xF7 | *(_BYTE *)(a2 + 20) & 8;
  *(_QWORD *)a2 = &llvm::semBogus;
  return a1;
}

BOOL llvm::detail::IEEEFloat::isDenormal(llvm::detail::IEEEFloat *this)
{
  BOOL v1;
  int v2;
  _QWORD *v3;

  v1 = (*((_BYTE *)this + 20) & 6) == 0 || (*((_BYTE *)this + 20) & 7) == 3;
  if (v1 || *((_DWORD *)this + 4) != *(_DWORD *)(*(_QWORD *)this + 4))
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)this + 8);
  v3 = (_QWORD *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F)
    v3 = (_QWORD *)*v3;
  return ((v3[(v2 - 1) >> 6] >> (v2 - 1)) & 1) == 0;
}

BOOL llvm::detail::IEEEFloat::isSignificandAllOnes(llvm::detail::IEEEFloat *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  v1 = (uint64_t *)((char *)this + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v1 = (uint64_t *)*v1;
  v4 = v3 + 63;
  v5 = (v4 >> 6) - 1;
  if (v4 >> 6 == 1)
  {
    v5 = 0;
    return (v1[v5] | (-1 << v4)) == -1;
  }
  else
  {
    v6 = (v4 >> 6) - 1;
    v7 = v1;
    while (1)
    {
      v8 = *v7++;
      if (v8 != -1)
        break;
      if (!--v6)
        return (v1[v5] | (-1 << v4)) == -1;
    }
    return 0;
  }
}

void llvm::detail::IEEEFloat::compare(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

uint64_t sub_24A824A24()
{
  unsigned int v0;

  return ~(v0 >> 2) & 2;
}

BOOL llvm::detail::IEEEFloat::bitwiseIsEqual(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  char *v10;
  char *v11;

  if (this == a2)
    return 1;
  if (*(_QWORD *)this != *(_QWORD *)a2)
    return 0;
  v2 = *((unsigned __int8 *)this + 20);
  v3 = *((unsigned __int8 *)a2 + 20);
  if ((v2 & 7) != (v3 & 7) || ((v3 ^ v2) & 8) != 0)
    return 0;
  v4 = 1;
  if ((v2 & 7) == 0 || (v2 & 7) == 3)
    return v4;
  if ((v2 & 6) != 0 && *((_DWORD *)this + 4) != *((_DWORD *)a2 + 4))
    return 0;
  v5 = *(_DWORD *)(*(_QWORD *)this + 8);
  v6 = v5 - 64;
  v7 = (_QWORD *)((char *)this + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    v7 = (_QWORD *)*v7;
  v8 = v5 + 64;
  v11 = (char *)*((_QWORD *)a2 + 1);
  v9 = (char *)a2 + 8;
  v10 = v11;
  if (v6 < 0xFFFFFF80)
    v9 = v10;
  return memcmp(v7, v9, (v8 >> 3) & 0x1FFFFFF8) == 0;
}

uint64_t *llvm::detail::IEEEFloat::IEEEFloat(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = a2;
  v6 = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
  {
    a1[1] = operator new[]();
    v6 = *a1;
  }
  *((_BYTE *)a1 + 20) = *((_BYTE *)a1 + 20) & 0xF0 | 2;
  v7 = *(_DWORD *)(v6 + 8);
  v8 = a1 + 1;
  if ((v7 - 64) >= 0xFFFFFF80)
  {
    *v8 = 0;
  }
  else
  {
    v9 = (_QWORD *)*v8;
    *v9 = 0;
    bzero(v9 + 1, 8 * (((v7 + 64) >> 6) - 2) + 8);
    v8 = (_QWORD *)*v8;
  }
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 8) - 1;
  *v8 = a3;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, 1, 0);
  return a1;
}

uint64_t llvm::detail::IEEEFloat::normalize(llvm::detail::IEEEFloat *this, int a2, int a3)
{
  uint64_t result;
  _DWORD *v8;
  char *v9;
  int v10;
  char *v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  int v23;
  char v24;
  unsigned int v25;
  int v26;
  int v27;
  llvm::detail::IEEEFloat *v28;
  int v29;
  char v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  int v35;
  int v36;

  if ((*((_BYTE *)this + 20) & 6) == 0 || (*((_BYTE *)this + 20) & 7) == 3)
    return 0;
  v9 = (char *)this + 8;
  v8 = *(_DWORD **)this;
  v10 = *(_DWORD *)(*(_QWORD *)this + 8);
  v11 = (char *)this + 8;
  if ((v10 - 64) <= 0xFFFFFF7F)
    v11 = *(char **)v9;
  v12 = (v10 + 64) >> 6;
  v13 = 64 - (v12 << 6);
  v14 = v12 - 1;
  while (1)
  {
    v15 = *(_QWORD *)&v11[8 * v14];
    if (v15)
      break;
    v13 += 64;
    if (--v14 == -1)
      goto LABEL_14;
  }
  v16 = (__clz(v15) - v13) ^ 0x3F;
  v17 = v16 + 1;
  if (v16 == -1)
  {
LABEL_14:
    v17 = 0;
    goto LABEL_15;
  }
  v25 = v17 - v10;
  v26 = *((_DWORD *)this + 4);
  v27 = v26 + v25;
  if ((signed int)(v26 + v25) > *v8)
    goto LABEL_33;
  v31 = v8[1];
  v32 = v31 - v26;
  if (v27 >= v31)
    v33 = v25;
  else
    v33 = v32;
  if ((v33 & 0x80000000) != 0)
  {
    llvm::detail::IEEEFloat::shiftSignificandLeft(this, -v33);
    return 0;
  }
  if (v33)
  {
    v34 = llvm::detail::IEEEFloat::shiftSignificandRight(this, v33);
    if (v34 == 2)
      v35 = 3;
    else
      v35 = v34;
    if (v34)
      v36 = v35;
    else
      v36 = 1;
    if (a3)
      a3 = v36;
    else
      a3 = v34;
    if (v17 >= v33)
      v17 -= v33;
    else
      v17 = 0;
    v8 = *(_DWORD **)this;
  }
LABEL_15:
  if (v8[4] == 1 && v8[5] == 1 && *((_DWORD *)this + 4) == *v8 && llvm::detail::IEEEFloat::isSignificandAllOnes(this))
    goto LABEL_33;
  if (!a3)
  {
    if (!v17)
    {
      v24 = *((_BYTE *)this + 20) & 0xF8 | 3;
      *((_BYTE *)this + 20) = v24;
      if (v8[5] == 2)
      {
        result = 0;
        *((_BYTE *)this + 20) = v24 & 0xF3;
        return result;
      }
    }
    return 0;
  }
  if ((llvm::detail::IEEEFloat::roundAwayFromZero((uint64_t)this, a2) & 1) == 0)
  {
    v18 = v8[2];
    goto LABEL_35;
  }
  if (!v17)
    *((_DWORD *)this + 4) = v8[1];
  llvm::detail::IEEEFloat::incrementSignificand(this);
  v8 = *(_DWORD **)this;
  v18 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v18 - 64) <= 0xFFFFFF7F)
    v9 = *(char **)v9;
  v19 = (v18 + 64) >> 6;
  v20 = 64 - (v19 << 6);
  v21 = v19 - 1;
  while (1)
  {
    v22 = *(_QWORD *)&v9[8 * v21];
    if (v22)
      break;
    v20 += 64;
    if (--v21 == -1)
    {
      v23 = -1;
      goto LABEL_59;
    }
  }
  v23 = (__clz(v22) - v20) ^ 0x3F;
LABEL_59:
  if (v23 == v18)
  {
    if (*((_DWORD *)this + 4) == *v8)
    {
      if ((*((_BYTE *)this + 20) & 8) != 0)
        v29 = 3;
      else
        v29 = 2;
      v28 = this;
      return llvm::detail::IEEEFloat::handleOverflow(v28, v29);
    }
    llvm::detail::IEEEFloat::shiftSignificandRight(this, 1u);
    return 16;
  }
  v17 = v23 + 1;
  if (v8[4] == 1 && v8[5] == 1 && *((_DWORD *)this + 4) == *v8 && llvm::detail::IEEEFloat::isSignificandAllOnes(this))
  {
LABEL_33:
    v28 = this;
    v29 = a2;
    return llvm::detail::IEEEFloat::handleOverflow(v28, v29);
  }
LABEL_35:
  if (v17 == v18)
    return 16;
  if (!v17)
  {
    v30 = *((_BYTE *)this + 20) & 0xF8 | 3;
    *((_BYTE *)this + 20) = v30;
    if (v8[5] == 2)
      *((_BYTE *)this + 20) = v30 & 0xF3;
  }
  return 24;
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, uint64_t a2)
{
  *(_QWORD *)this = a2;
  if ((*(_DWORD *)(a2 + 8) + 64) >= 0x80)
    *((_QWORD *)this + 1) = operator new[]();
  llvm::detail::IEEEFloat::makeZero(this, 0);
  return this;
}

void llvm::detail::IEEEFloat::makeZero(llvm::detail::IEEEFloat *this, int a2)
{
  char v2;
  char v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;

  v2 = *((_BYTE *)this + 20) & 0xF0;
  if (a2)
    v3 = 8;
  else
    v3 = 0;
  *((_BYTE *)this + 20) = v2 | v3 | 3;
  v4 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 20) == 2)
    *((_BYTE *)this + 20) = v2 | 3;
  v5 = *(_DWORD *)(v4 + 8);
  *((_DWORD *)this + 4) = *(_DWORD *)(v4 + 4) - 1;
  if ((v5 - 64) >= 0xFFFFFF80)
  {
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v6 = (_QWORD *)*((_QWORD *)this + 1);
    *v6 = 0;
    bzero(v6 + 1, 8 * (((v5 + 64) >> 6) - 2) + 8);
  }
}

llvm::detail::IEEEFloat *llvm::detail::IEEEFloat::IEEEFloat(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)this = *(_QWORD *)a2;
  if ((*(_DWORD *)(v4 + 8) + 64) >= 0x80)
    *((_QWORD *)this + 1) = operator new[]();
  llvm::detail::IEEEFloat::assign(this, (uint64_t *)a2);
  return this;
}

uint64_t *llvm::detail::IEEEFloat::incrementSignificand(llvm::detail::IEEEFloat *this)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;

  v2 = *(_QWORD *)this;
  result = (uint64_t *)((char *)this + 8);
  v3 = *(unsigned int *)(v2 + 8);
  if ((v3 - 64) > 0xFFFFFF7F)
  {
    if (v3 > 0xFFFFFFBF)
      return result;
  }
  else
  {
    result = (uint64_t *)*result;
  }
  v4 = __CFADD__((*result)++, 1);
  if (v4)
  {
    v5 = (unint64_t)(v3 + 64) >> 6;
    v6 = result + 1;
    v7 = v5 - 1;
    do
    {
      if (!v7)
        break;
      --v7;
      v4 = __CFADD__((*v6++)++, 1);
    }
    while (v4);
  }
  return result;
}

_QWORD *llvm::detail::IEEEFloat::addSignificand(llvm::detail::IEEEFloat *this, uint64_t **a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _BOOL8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _BOOL4 v15;

  v3 = *(_QWORD *)this;
  result = (_QWORD *)((char *)this + 8);
  v4 = *(unsigned int *)(v3 + 8);
  if ((v4 - 64) <= 0xFFFFFF7F)
    result = (_QWORD *)*result;
  v5 = *((_DWORD *)*a2 + 2) - 64;
  v8 = a2[1];
  v6 = (char *)(a2 + 1);
  v7 = v8;
  if (v5 >= 0xFFFFFF80)
    v9 = (uint64_t *)v6;
  else
    v9 = v7;
  if (v4 <= 0xFFFFFFBF)
  {
    v10 = 0;
    v11 = (unint64_t)(v4 + 64) >> 6;
    do
    {
      v12 = *v9++;
      v13 = v12 + *result;
      v14 = __CFADD__(v12, *result);
      v15 = (unint64_t)(v13 + 1) <= *result;
      if (v10)
      {
        ++v13;
        v10 = v15;
      }
      else
      {
        v10 = v14;
      }
      *result++ = v13;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t *llvm::detail::IEEEFloat::subtractSignificand(llvm::detail::IEEEFloat *this, unint64_t **a2, uint64_t a3)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BOOL4 v14;
  unint64_t v15;

  v4 = *(_QWORD *)this;
  result = (uint64_t *)((char *)this + 8);
  v5 = *(unsigned int *)(v4 + 8);
  if ((v5 - 64) <= 0xFFFFFF7F)
    result = (uint64_t *)*result;
  v6 = *((_DWORD *)*a2 + 2) - 64;
  v9 = a2[1];
  v7 = (char *)(a2 + 1);
  v8 = v9;
  if (v6 >= 0xFFFFFF80)
    v10 = (unint64_t *)v7;
  else
    v10 = v8;
  if (v5 <= 0xFFFFFFBF)
  {
    v11 = (unint64_t)(v5 + 64) >> 6;
    do
    {
      v12 = *v10++;
      v13 = *result - v12;
      v14 = *result < v12;
      v15 = *result + ~v12;
      if (a3)
      {
        a3 = v15 >= *result;
      }
      else
      {
        v15 = v13;
        a3 = v14;
      }
      *result++ = v15;
      --v11;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(unint64_t *a1, uint64_t a2, const llvm::detail::IEEEFloat *a3)
{
  __int128 *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t *v8;
  llvm::APInt *v9;
  unsigned int v10;
  unint64_t *v11;
  int v12;
  uint64_t v13;
  const unint64_t **v14;
  int v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::APInt *v22;
  unsigned int v23;
  int v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unint64_t *v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  llvm::APInt *v32;
  unint64_t v33;
  unint64_t *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t **v40;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  v5 = (__int128 *)*a1;
  v6 = *(_DWORD *)(*a1 + 8);
  v36 = 2 * v6;
  v7 = 2 * v6 + 64;
  v8 = (unint64_t *)(v7 >> 6);
  if (v7 < 0x140)
  {
    v9 = (llvm::APInt *)&v47;
    v10 = *(_DWORD *)(*a1 + 8);
  }
  else
  {
    v9 = (llvm::APInt *)operator new[]();
    v5 = (__int128 *)*a1;
    v10 = *(_DWORD *)(*a1 + 8);
  }
  v11 = a1 + 1;
  v40 = (unint64_t **)(a1 + 1);
  if (v10 - 64 <= 0xFFFFFF7F)
    v11 = *v40;
  v37 = v6;
  v12 = (2 * v6) | 1;
  v13 = (v10 + 64) >> 6;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
    v14 = (const unint64_t **)(a2 + 8);
  else
    v14 = *(const unint64_t ***)(a2 + 8);
  llvm::APInt::tcFullMultiply(v9, v11, v14, (const unint64_t *)((v10 + 64) >> 6), (const unint64_t *)((v10 + 64) >> 6));
  v15 = 64 - ((_DWORD)v8 << 6);
  v16 = (_DWORD)v8 - 1;
  v38 = v10;
  v39 = v7;
  while (1)
  {
    v17 = *((_QWORD *)v9 + v16);
    if (v17)
      break;
    v15 += 64;
    if (--v16 == -1)
    {
      v18 = 0;
      goto LABEL_14;
    }
  }
  v18 = ((__clz(v17) - v15) ^ 0x3F) + 1;
LABEL_14:
  v19 = *(_DWORD *)(a2 + 16) + *((_DWORD *)a1 + 4) + 2;
  *((_DWORD *)a1 + 4) = v19;
  if ((*((_BYTE *)a3 + 20) & 7) == 3)
  {
    v20 = 0;
  }
  else
  {
    v35 = *v40;
    if (v36 != v18)
    {
      llvm::APInt::tcShiftLeft(v9, v8, v36 - v18);
      *((_DWORD *)a1 + 4) = v19 - (v36 - v18);
    }
    v21 = *((_QWORD *)v5 + 2);
    v44 = *v5;
    v45 = v21;
    DWORD2(v44) = v12;
    v22 = v9;
    if ((_DWORD)v8 == 1)
      v22 = *(llvm::APInt **)v9;
    *a1 = (unint64_t)&v44;
    a1[1] = (unint64_t)v22;
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v42, a3);
    llvm::detail::IEEEFloat::convert(&v42, (uint64_t)&v44, 0, &v46);
    llvm::detail::IEEEFloat::shiftSignificandRight((llvm::detail::IEEEFloat *)&v42, 1u);
    v20 = llvm::detail::IEEEFloat::addOrSubtractSignificand((llvm::detail::IEEEFloat *)a1, (const llvm::detail::IEEEFloat *)&v42, 0);
    v23 = (_DWORD)v8 - 1;
    if ((_DWORD)v8 == 1)
      *(_QWORD *)v9 = *v40;
    *a1 = (unint64_t)v5;
    a1[1] = (unint64_t)v35;
    v24 = 64 - ((_DWORD)v8 << 6);
    while (1)
    {
      v25 = *((_QWORD *)v9 + v23);
      if (v25)
        break;
      v24 += 64;
      if (--v23 == -1)
      {
        v18 = 0;
        goto LABEL_27;
      }
    }
    v18 = ((__clz(v25) - v24) ^ 0x3F) + 1;
LABEL_27:
    if ((*(_DWORD *)(v42 + 8) - 64) <= 0xFFFFFF7F && v43)
      MEMORY[0x24BD1B380](v43, 0x1000C8000313F17);
    v19 = *((_DWORD *)a1 + 4);
  }
  v26 = v19 + ~v37;
  *((_DWORD *)a1 + 4) = v26;
  v27 = v18 - v37;
  if (v18 > v37)
  {
    v28 = (unint64_t *)((v18 + 63) >> 6);
    v29 = llvm::lostFractionThroughTruncation(v9, v28, v18 - v37);
    llvm::APInt::tcShiftRight(v9, v28, v27);
    if (v29 == 2)
      v30 = 3;
    else
      v30 = v29;
    if (v29)
      v31 = v30;
    else
      v31 = 1;
    if ((_DWORD)v20)
      v20 = v31;
    else
      v20 = v29;
    *((_DWORD *)a1 + 4) = v27 + v26;
  }
  if (v38 <= 0xFFFFFFBF)
  {
    v32 = v9;
    do
    {
      v33 = *(_QWORD *)v32;
      v32 = (llvm::APInt *)((char *)v32 + 8);
      *v11++ = v33;
      --v13;
    }
    while (v13);
  }
  if (v39 >= 0x140)
    MEMORY[0x24BD1B380](v9, 0x1000C8000313F17);
  return v20;
}

uint64_t llvm::detail::IEEEFloat::convert(uint64_t *a1, uint64_t a2, int a3, _BYTE *a4)
{
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  signed int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  _BOOL4 v23;
  unsigned int v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  _BOOL4 v32;
  unsigned int v33;
  _QWORD *v34;
  int v35;
  unsigned int v37;
  _QWORD *v38;
  int v39;
  int v40;
  unint64_t v41;
  int v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  BOOL v46;
  _BOOL4 v47;
  llvm::APInt *v49;
  unsigned int v50;
  int v51;
  int v53;
  uint64_t v54;
  signed int v56;
  int v57;
  int v58;
  llvm *v59;
  char v60;
  int v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t isSignaling;

  v7 = *a1;
  isSignaling = llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)a1);
  v8 = 0;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = v9 + 64;
  v11 = *(_DWORD *)(v7 + 8);
  v12 = v9 - v11;
  if ((_UNKNOWN *)a2 != &llvm::semX87DoubleExtended && (_UNKNOWN *)v7 == &llvm::semX87DoubleExtended)
  {
    if ((*((_BYTE *)a1 + 20) & 7) != 1)
    {
LABEL_10:
      v8 = 0;
      goto LABEL_11;
    }
    if (v11 - 64 > 0xFFFFFF7F)
    {
      v13 = a1[1];
      if (v13 < 0)
        goto LABEL_8;
    }
    else
    {
      v13 = *(_QWORD *)a1[1];
      if (v13 < 0)
      {
LABEL_8:
        if ((v13 & 0x4000000000000000) == 0)
          goto LABEL_9;
        goto LABEL_10;
      }
    }
LABEL_9:
    v8 = 1;
  }
LABEL_11:
  v65 = v8;
  v14 = (unint64_t *)(v10 >> 6);
  v15 = (unint64_t *)((v11 + 64) >> 6);
  if ((v12 & 0x80000000) == 0)
  {
LABEL_12:
    v16 = 0;
    goto LABEL_13;
  }
  v35 = *((_BYTE *)a1 + 20) & 7;
  if ((*((_BYTE *)a1 + 20) & 6) != 0 && v35 != 3)
  {
    v37 = v11 - 64;
    v38 = a1 + 1;
    if (v11 - 64 <= 0xFFFFFF7F)
      v38 = (_QWORD *)*v38;
    v39 = 64 - ((_DWORD)v15 << 6);
    v40 = (_DWORD)v15 - 1;
    while (1)
    {
      v41 = v38[v40];
      if (v41)
        break;
      v39 += 64;
      if (--v40 == -1)
      {
        v42 = -1;
        goto LABEL_100;
      }
    }
    v42 = (__clz(v41) - v39) ^ 0x3F;
LABEL_100:
    v56 = v42 + 1 - v11;
    v57 = *((_DWORD *)a1 + 4);
    v58 = *(_DWORD *)(a2 + 4);
    if (v56 + v57 < v58)
      v56 = v58 - v57;
    if (v56 <= v12)
      v56 = v12;
    if (v56 < 0)
    {
      v12 -= v56;
    }
    else
    {
      if (v42 + 1 > -v12)
      {
LABEL_109:
        v64 = v7;
        goto LABEL_110;
      }
      v56 = v42 + v12;
      v12 = -v42;
    }
    *((_DWORD *)a1 + 4) = v56 + v57;
    if ((v12 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_109;
  }
  if (v35 != 1 || *(_DWORD *)(v7 + 16) == 1)
    goto LABEL_12;
  v64 = v7;
  v37 = v11 - 64;
LABEL_110:
  v59 = (llvm *)(a1 + 1);
  if (v37 <= 0xFFFFFF7F)
    v59 = *(llvm **)v59;
  v16 = llvm::lostFractionThroughTruncation(v59, v15, -v12);
  llvm::APInt::tcShiftRight(v59, v15, -v12);
  v7 = v64;
LABEL_13:
  if (v14 <= v15)
  {
    if ((_DWORD)v14 == 1 && (_DWORD)v15 != 1)
    {
      v30 = *((_BYTE *)a1 + 20) & 7;
      v32 = (*((_BYTE *)a1 + 20) & 6) != 0 && v30 != 3;
      v33 = *(_DWORD *)(*a1 + 8) - 64;
      if (v30 == 1 || v32)
      {
        v43 = a1 + 1;
        if (v33 <= 0xFFFFFF7F)
          v43 = (_QWORD *)*v43;
        v34 = (_QWORD *)*v43;
      }
      else
      {
        v34 = 0;
      }
      if (v33 <= 0xFFFFFF7F)
      {
        v44 = a1[1];
        if (v44)
          MEMORY[0x24BD1B380](v44, 0x1000C8000313F17);
      }
      a1[1] = (uint64_t)v34;
    }
  }
  else
  {
    v63 = v16;
    v17 = a3;
    v18 = v7;
    v19 = (_QWORD *)operator new[]();
    v20 = v19;
    *v19 = 0;
    if (v10 >= 0x80)
      bzero(v19 + 1, 8 * ((_DWORD)v14 - 2) + 8);
    v21 = *((_BYTE *)a1 + 20) & 7;
    v23 = (*((_BYTE *)a1 + 20) & 6) != 0 && v21 != 3;
    v24 = *(_DWORD *)(*a1 + 8) - 64;
    if (v21 == 1 || v23)
    {
      v25 = a1 + 1;
      if (v24 <= 0xFFFFFF7F)
        v25 = (uint64_t *)*v25;
      if (v11 <= 0xFFFFFFBF)
      {
        v26 = v20;
        do
        {
          v27 = *v25++;
          *v26++ = v27;
          v15 = (unint64_t *)((char *)v15 - 1);
        }
        while (v15);
      }
    }
    if (v24 <= 0xFFFFFF7F)
    {
      v28 = a1[1];
      if (v28)
        MEMORY[0x24BD1B380](v28, 0x1000C8000313F17);
    }
    a1[1] = (uint64_t)v20;
    v7 = v18;
    a3 = v17;
    v16 = v63;
  }
  *a1 = a2;
  if (v12 >= 1)
  {
    v45 = *((_BYTE *)a1 + 20) & 7;
    v46 = (*((_BYTE *)a1 + 20) & 6) == 0 || v45 == 3;
    v47 = !v46;
    if (v45 == 1 || v47)
    {
      v49 = (llvm::APInt *)(a1 + 1);
      if ((*(_DWORD *)(a2 + 8) - 64) <= 0xFFFFFF7F)
        v49 = *(llvm::APInt **)v49;
      llvm::APInt::tcShiftLeft(v49, v14, v12);
    }
  }
  v50 = *((unsigned __int8 *)a1 + 20);
  v51 = v50 & 7;
  if ((v50 & 6) != 0 && v51 != 3)
  {
    isSignaling = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, a3, v16);
    *a4 = (_DWORD)isSignaling != 0;
    return isSignaling;
  }
  if ((v50 & 7) == 0)
  {
    if (*(_DWORD *)(*a1 + 16) == 1)
    {
      llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (v50 >> 3) & 1, 0);
      *a4 = 1;
      return 16;
    }
    goto LABEL_97;
  }
  if (v51 == 3)
  {
    if (*(_DWORD *)(*a1 + 20) == 2)
    {
      v53 = (*(_DWORD *)(v7 + 20) != 2) & (v50 >> 3);
      *a4 = v53;
      if (v53)
        v54 = 16;
      else
        v54 = 0;
      isSignaling = v54;
      *((_BYTE *)a1 + 20) &= ~8u;
      return isSignaling;
    }
LABEL_97:
    isSignaling = 0;
    *a4 = 0;
    return isSignaling;
  }
  if (v51 != 1)
    goto LABEL_97;
  if (*(_DWORD *)(*a1 + 16) == 1)
  {
    *a4 = *(_DWORD *)(v7 + 16) != 1;
    llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, (*((unsigned __int8 *)a1 + 20) >> 3) & 1, 0);
    return isSignaling;
  }
  if (*(_DWORD *)(v7 + 20) == 2 && *(_DWORD *)(*a1 + 20) != 2)
    llvm::detail::IEEEFloat::makeNaN((llvm::detail::IEEEFloat *)a1, 0, 0, 0);
  if (v16)
    v60 = 1;
  else
    v60 = v65;
  *a4 = v60;
  if ((v65 & 1) == 0 && (_UNKNOWN *)*a1 == &llvm::semX87DoubleExtended)
    *(_QWORD *)a1[1] |= 0x8000000000000000;
  if (!(_DWORD)isSignaling)
    return 0;
  if (*(_DWORD *)(*a1 + 16) == 1)
    return 1;
  v61 = *(_DWORD *)(*a1 + 8);
  v62 = a1 + 1;
  if ((v61 - 64) <= 0xFFFFFF7F)
    v62 = (_QWORD *)*v62;
  isSignaling = 1;
  v62[(v61 - 2) >> 6] |= 1 << (v61 - 2);
  return isSignaling;
}

uint64_t llvm::detail::IEEEFloat::shiftSignificandRight(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  int v3;
  llvm *v4;
  unint64_t *v5;
  uint64_t v6;

  *((_DWORD *)this + 4) += a2;
  v3 = *(_DWORD *)(*(_QWORD *)this + 8);
  v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  if ((v3 - 64) <= 0xFFFFFF7F)
    v4 = *(llvm **)v4;
  v5 = (unint64_t *)((v3 + 64) >> 6);
  v6 = llvm::lostFractionThroughTruncation(v4, v5, a2);
  llvm::APInt::tcShiftRight(v4, v5, a2);
  return v6;
}

uint64_t llvm::detail::IEEEFloat::addOrSubtractSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2, int a3)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v12;
  llvm::APInt *v13;
  int v14;
  _BOOL8 v15;
  unsigned int v16;
  uint64_t *v17;
  llvm::APInt *v18;
  int v19;

  v5 = *((_DWORD *)this + 4);
  v6 = *((_DWORD *)a2 + 4);
  v7 = v5 - v6;
  if ((((((*((_BYTE *)a2 + 20) ^ *((_BYTE *)this + 20)) & 8) == 0) ^ a3) & 1) != 0)
  {
    if (v7 < 1)
    {
      v10 = llvm::detail::IEEEFloat::shiftSignificandRight(this, v6 - v5);
      llvm::detail::IEEEFloat::addSignificand(this, (uint64_t **)a2);
      return v10;
    }
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v17, a2);
    v8 = llvm::detail::IEEEFloat::shiftSignificandRight((llvm::detail::IEEEFloat *)&v17, v5 - v6);
    llvm::detail::IEEEFloat::addSignificand(this, &v17);
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v17, a2);
    if (v5 == v6)
    {
      v9 = 0;
    }
    else if (v7 < 1)
    {
      v9 = llvm::detail::IEEEFloat::shiftSignificandRight(this, ~v7);
      v12 = *((_DWORD *)v17 + 2);
      if ((v12 - 64) >= 0xFFFFFF80)
        v13 = (llvm::APInt *)&v18;
      else
        v13 = v18;
      llvm::APInt::tcShiftLeft(v13, (unint64_t *)((v12 + 64) >> 6), 1u);
      --v19;
    }
    else
    {
      v9 = llvm::detail::IEEEFloat::shiftSignificandRight((llvm::detail::IEEEFloat *)&v17, v7 - 1);
      llvm::detail::IEEEFloat::shiftSignificandLeft(this, 1u);
    }
    v14 = llvm::detail::IEEEFloat::compareAbsoluteValue(this, (const llvm::detail::IEEEFloat *)&v17);
    v15 = v9 != 0;
    if (v14)
    {
      llvm::detail::IEEEFloat::subtractSignificand(this, (unint64_t **)&v17, v15);
    }
    else
    {
      llvm::detail::IEEEFloat::subtractSignificand((llvm::detail::IEEEFloat *)&v17, (unint64_t **)this, v15);
      llvm::detail::IEEEFloat::copySignificand((uint64_t *)this, (uint64_t *)&v17);
      *((_BYTE *)this + 20) ^= 8u;
    }
    if (v9 == 3)
      v16 = 1;
    else
      v16 = v9;
    if (v9 == 1)
      v8 = 3;
    else
      v8 = v16;
  }
  if ((*((_DWORD *)v17 + 2) - 64) <= 0xFFFFFF7F)
  {
    if (v18)
      MEMORY[0x24BD1B380](v18, 0x1000C8000313F17);
  }
  return v8;
}

uint64_t llvm::detail::IEEEFloat::multiplySignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v6, *(_QWORD *)this);
  v4 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (const llvm::detail::IEEEFloat *)&v6);
  if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F && v7)
    MEMORY[0x24BD1B380](v7, 0x1000C8000313F17);
  return v4;
}

uint64_t llvm::detail::IEEEFloat::divideSignificand(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  _QWORD *v4;
  unsigned int v5;
  char *v6;
  unsigned int v7;
  unint64_t v8;
  llvm::APInt *v9;
  llvm::APInt *v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  llvm::APInt *v35;
  llvm::APInt *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _BOOL4 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)((char *)this + 8);
  v5 = *(_DWORD *)(*(_QWORD *)this + 8);
  if (v5 - 64 <= 0xFFFFFF7F)
    v4 = (_QWORD *)*v4;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) - 64) >= 0xFFFFFF80)
    v6 = (char *)a2 + 8;
  else
    v6 = (char *)*((_QWORD *)a2 + 1);
  v7 = v5 + 64;
  v8 = (v5 + 64) >> 6;
  if (v5 + 64 >= 0xC0)
  {
    v9 = (llvm::APInt *)operator new[]();
    v10 = (llvm::APInt *)((char *)v9 + 8 * v8);
LABEL_10:
    v12 = 0;
    if (v8 <= 1)
      v13 = 1;
    else
      v13 = (v5 + 64) >> 6;
    v14 = 8 * v13;
    do
    {
      *(_QWORD *)((char *)v9 + v12) = v4[v12 / 8];
      *(_QWORD *)((char *)v10 + v12) = *(_QWORD *)&v6[v12];
      v4[v12 / 8] = 0;
      v12 += 8;
    }
    while (v14 != v12);
    v11 = *(_DWORD *)(*(_QWORD *)this + 8);
    goto LABEL_16;
  }
  v9 = (llvm::APInt *)v48;
  v10 = (llvm::APInt *)&v48[v8];
  if (v5 <= 0xFFFFFFBF)
    goto LABEL_10;
  v11 = *(_DWORD *)(*(_QWORD *)this + 8);
LABEL_16:
  v15 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 4) = v15;
  v16 = 64 - ((_DWORD)v8 << 6);
  v17 = v8 - 1;
  v18 = v8 - 1;
  while (1)
  {
    v19 = *((_QWORD *)v10 + v18);
    if (v19)
      break;
    v16 += 64;
    if (--v18 == -1)
    {
      v20 = 0;
      goto LABEL_21;
    }
  }
  v20 = (__clz(v19) - v16) ^ 0xFFFFFFC0;
LABEL_21:
  v21 = v11 + v20;
  if (v11 + v20)
  {
    *((_DWORD *)this + 4) = v21 + v15;
    llvm::APInt::tcShiftLeft(v10, (unint64_t *)(v7 >> 6), v21);
  }
  v22 = 64 - ((_DWORD)v8 << 6);
  while (1)
  {
    v23 = *((_QWORD *)v9 + v17);
    if (v23)
      break;
    v22 += 64;
    if (--v17 == -1)
    {
      v24 = 0;
      goto LABEL_28;
    }
  }
  v24 = (__clz(v23) - v22) ^ 0xFFFFFFC0;
LABEL_28:
  v25 = v11 + v24;
  if (v11 + v24)
  {
    *((_DWORD *)this + 4) -= v25;
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), v25);
  }
  v26 = (char *)v10 - 8;
  v27 = 8 * ((v5 + 64) >> 6);
  while (v27)
  {
    v28 = *(_QWORD *)((char *)v9 + v27 - 8);
    v29 = *(_QWORD *)&v26[v27];
    v27 -= 8;
    if (v28 != v29)
    {
      if (v28 <= v29)
      {
        --*((_DWORD *)this + 4);
        llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
      }
      break;
    }
  }
  v30 = 8 * v8;
  if (!v11)
    goto LABEL_51;
  do
  {
    v31 = 8 * v8;
    while (v31)
    {
      v32 = *(_QWORD *)((char *)v9 + v31 - 8);
      v33 = *(_QWORD *)&v26[v31];
      v31 -= 8;
      if (v32 != v33)
      {
        if (v32 <= v33)
        {
          --v11;
          goto LABEL_48;
        }
        break;
      }
    }
    if (v5 <= 0xFFFFFFBF)
    {
      v34 = 0;
      v35 = v9;
      v36 = v10;
      v37 = v7 >> 6;
      do
      {
        v38 = *(_QWORD *)v36;
        v36 = (llvm::APInt *)((char *)v36 + 8);
        v39 = *(_QWORD *)v35 - v38;
        v40 = *(_QWORD *)v35 < v38;
        v41 = *(_QWORD *)v35 + ~v38;
        if (v34)
        {
          v34 = v41 >= *(_QWORD *)v35;
        }
        else
        {
          v41 = v39;
          v34 = v40;
        }
        *(_QWORD *)v35 = v41;
        v35 = (llvm::APInt *)((char *)v35 + 8);
        --v37;
      }
      while (v37);
    }
    --v11;
    v4[v11 >> 6] |= 1 << v11;
LABEL_48:
    llvm::APInt::tcShiftLeft(v9, (unint64_t *)(v7 >> 6), 1u);
  }
  while (v11);
  do
  {
LABEL_51:
    if (!v30)
    {
      v44 = 2;
      goto LABEL_64;
    }
    v42 = *(_QWORD *)((char *)v9 + v30 - 8);
    v43 = *(_QWORD *)&v26[v30];
    v30 -= 8;
  }
  while (v42 == v43);
  if (v42 <= v43)
  {
    if (v5 > 0xFFFFFFBF)
      return 0;
    v45 = *(_QWORD *)v9;
    if (*(_QWORD *)v9)
    {
      v44 = 1;
    }
    else
    {
      while (v8 - 1 != v45)
      {
        if (*((_QWORD *)v9 + ++v45))
          goto LABEL_63;
      }
      v45 = v7 >> 6;
LABEL_63:
      v44 = v45 < v8;
    }
  }
  else
  {
    v44 = 3;
  }
LABEL_64:
  if (v7 >= 0xC0)
    MEMORY[0x24BD1B380](v9, 0x1000C8000313F17, v25);
  return v44;
}

void llvm::detail::IEEEFloat::shiftSignificandLeft(llvm::detail::IEEEFloat *this, unsigned int a2)
{
  llvm::APInt *v4;
  uint64_t v5;
  int v6;

  v5 = *(_QWORD *)this;
  v4 = (llvm::detail::IEEEFloat *)((char *)this + 8);
  v6 = *(_DWORD *)(v5 + 8);
  if ((v6 - 64) <= 0xFFFFFF7F)
    v4 = *(llvm::APInt **)v4;
  llvm::APInt::tcShiftLeft(v4, (unint64_t *)((v6 + 64) >> 6), a2);
  *((_DWORD *)this + 4) -= a2;
}

uint64_t llvm::detail::IEEEFloat::compareAbsoluteValue(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  uint64_t i;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = *((_DWORD *)this + 4) - *((_DWORD *)a2 + 4);
  if (v2)
  {
    if (v2 < 1)
      return v2 >= 0;
    else
      return 2;
  }
  else
  {
    v4 = *(_QWORD *)this;
    v3 = (_QWORD *)((char *)this + 8);
    v5 = *(_DWORD *)(v4 + 8);
    if ((v5 - 64) <= 0xFFFFFF7F)
      v3 = (_QWORD *)*v3;
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8) - 64;
    v9 = (char *)*((_QWORD *)a2 + 1);
    v7 = (char *)a2 + 8;
    v8 = v9;
    if (v6 >= 0xFFFFFF80)
      v10 = v7;
    else
      v10 = v8;
    v11 = (v5 + 64) >> 6;
    v12 = v10 - 8;
    for (i = 8 * v11; ; i -= 8)
    {
      v14 = i;
      if (!i)
        break;
      v15 = v3[(unint64_t)i / 8 - 1];
      v16 = *(_QWORD *)&v12[i];
      if (v15 != v16)
      {
        if (v15 > v16)
          return 2;
        return v14 == 0;
      }
    }
    return v14 == 0;
  }
}

uint64_t llvm::detail::IEEEFloat::handleOverflow(llvm::detail::IEEEFloat *this, int a2)
{
  char v3;
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  llvm::detail **v8;
  llvm::detail *v9;
  uint64_t v10;

  switch(a2)
  {
    case 1:
    case 4:
      goto LABEL_5;
    case 2:
      v3 = *((_BYTE *)this + 20);
      if ((v3 & 8) != 0)
        goto LABEL_10;
      goto LABEL_5;
    case 3:
      v3 = *((_BYTE *)this + 20);
      if ((v3 & 8) == 0)
        goto LABEL_10;
LABEL_5:
      v4 = *((unsigned __int8 *)this + 20);
      if (*(_DWORD *)(*(_QWORD *)this + 16) == 1)
        llvm::detail::IEEEFloat::makeNaN(this, 0, (v4 >> 3) & 1, 0);
      else
        *((_BYTE *)this + 20) = v4 & 0xF8;
      result = 20;
      break;
    default:
      v3 = *((_BYTE *)this + 20);
LABEL_10:
      *((_BYTE *)this + 20) = v3 & 0xF8 | 2;
      v6 = *(_QWORD *)this;
      *((_DWORD *)this + 4) = **(_DWORD **)this;
      v7 = *(_DWORD *)(v6 + 8);
      v8 = (llvm::detail **)((char *)this + 8);
      v9 = (llvm::detail::IEEEFloat *)((char *)this + 8);
      if (v7 - 64 <= 0xFFFFFF7F)
        v9 = *v8;
      llvm::detail::tcSetLeastSignificantBits(v9, (unint64_t *)((v7 + 64) >> 6), v7);
      v10 = *(_QWORD *)this;
      if (*(_DWORD *)(*(_QWORD *)this + 16) == 1 && *(_DWORD *)(v10 + 20) == 1)
      {
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
          v8 = (llvm::detail **)*v8;
        *v8 = (llvm::detail *)((unint64_t)*v8 & 0xFFFFFFFFFFFFFFFELL);
      }
      result = 16;
      break;
  }
  return result;
}

void llvm::detail::tcSetLeastSignificantBits(llvm::detail *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;

  v3 = a3;
  v4 = a2;
  v6 = a3 - 65;
  if (a3 < 0x41)
  {
    v7 = 0;
    if (!a3)
      goto LABEL_6;
    goto LABEL_5;
  }
  memset(this, 255, 8 * (v6 >> 6) + 8);
  v7 = (v6 >> 6) + 1;
  v8 = v3 - (v6 & 0xFFFFFFC0);
  LOBYTE(v3) = v8 - 64;
  if (v8 != 64)
LABEL_5:
    *((_QWORD *)this + v7++) = 0xFFFFFFFFFFFFFFFFLL >> -(char)v3;
LABEL_6:
  if (v7 < v4)
    bzero((char *)this + 8 * v7, 8 * (~v7 + v4) + 8);
}

uint64_t llvm::detail::IEEEFloat::roundAwayFromZero(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_24A826434 + 4 * byte_24AA2AD24[a2]))();
}

uint64_t sub_24A826434(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v6;

  if (a3 == 3)
    return 1;
  if (a3 != 2 || (*((_BYTE *)a1 + 20) & 7) == 3)
    return 0;
  v6 = *a1;
  v5 = a1 + 1;
  if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F)
    v5 = (_QWORD *)*v5;
  return (v5[a4 >> 6] >> a4) & 1;
}

void llvm::detail::IEEEFloat::addOrSubtractSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

BOOL sub_24A826508(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  uint64_t *v15;
  int v16;
  _QWORD *v17;
  _BOOL8 result;

  llvm::detail::IEEEFloat::assign(v14, v15);
  if (!llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)v14))
    return llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)v15);
  if (*(_DWORD *)(*v14 + 16) == 1)
    return 1;
  v16 = *(_DWORD *)(*v14 + 8);
  v17 = v14 + 1;
  if ((v16 - 64) <= 0xFFFFFF7F)
    v17 = (_QWORD *)*v17;
  result = 1;
  v17[(v16 - 2) >> 6] |= 1 << (v16 - 2);
  return result;
}

BOOL llvm::detail::IEEEFloat::isSignaling(llvm::detail::IEEEFloat *this)
{
  int v2;
  _QWORD *v3;

  if ((*((_BYTE *)this + 20) & 7) != 1 || *(_DWORD *)(*(_QWORD *)this + 16) == 1)
    return 0;
  v2 = *(_DWORD *)(*(_QWORD *)this + 8);
  v3 = (_QWORD *)((char *)this + 8);
  if ((v2 - 64) <= 0xFFFFFF7F)
    v3 = (_QWORD *)*v3;
  return ((v3[(v2 - 2) >> 6] >> (v2 - 2)) & 1) == 0;
}

void llvm::detail::IEEEFloat::multiplySpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

uint64_t sub_24A8266CC@<X0>(char a1@<W8>)
{
  uint64_t v1;
  uint64_t result;

  result = 0;
  *(_BYTE *)(v1 + 20) = a1 & 0xF8;
  return result;
}

void llvm::detail::IEEEFloat::divideSpecials(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X12 }
}

BOOL sub_24A8267DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  _QWORD *v16;
  _BOOL8 result;

  llvm::detail::IEEEFloat::assign((_QWORD *)v12, (uint64_t *)v13);
  v14 = *(_BYTE *)(v12 + 20) & 0xF7;
  *(_BYTE *)(v12 + 20) = v14;
  *(_BYTE *)(v12 + 20) = *(_BYTE *)(v13 + 20) & 8 ^ v14;
  if (!llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)v12))
    return llvm::detail::IEEEFloat::isSignaling((llvm::detail::IEEEFloat *)v13);
  if (*(_DWORD *)(*(_QWORD *)v12 + 16) == 1)
    return 1;
  v15 = *(_DWORD *)(*(_QWORD *)v12 + 8);
  v16 = (_QWORD *)(v12 + 8);
  if ((v15 - 64) <= 0xFFFFFF7F)
    v16 = (_QWORD *)*v16;
  result = 1;
  v16[(v15 - 2) >> 6] |= 1 << (v15 - 2);
  return result;
}

void llvm::detail::IEEEFloat::addOrSubtract(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3, int a4)
{
  int v8;
  int v9;
  char v10;
  char v11;

  llvm::detail::IEEEFloat::addOrSubtractSpecials(a1, a2);
  if (v8 == 2)
  {
    v9 = llvm::detail::IEEEFloat::addOrSubtractSignificand(a1, a2, a4);
    llvm::detail::IEEEFloat::normalize(a1, a3, v9);
  }
  v10 = *((_BYTE *)a1 + 20);
  if ((v10 & 7) == 3)
  {
    v11 = *((_BYTE *)a2 + 20);
    if ((v11 & 7) != 3 || a4 != ((v11 ^ v10) & 8) >> 3)
    {
      v10 = v10 & 0xF7 | (8 * (a3 == 3));
      *((_BYTE *)a1 + 20) = v10;
    }
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
      *((_BYTE *)a1 + 20) = v10 & 0xF7;
  }
}

void llvm::detail::IEEEFloat::multiply(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  char v6;
  int v7;

  *((_BYTE *)a1 + 20) ^= *((_BYTE *)a2 + 20) & 8;
  llvm::detail::IEEEFloat::multiplySpecials(a1, a2);
  v6 = *((_BYTE *)a1 + 20);
  if ((v6 & 7) == 3)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
      *((_BYTE *)a1 + 20) = v6 & 0xF7;
  }
  else if ((*((_BYTE *)a1 + 20) & 6) != 0)
  {
    v7 = llvm::detail::IEEEFloat::multiplySignificand(a1, a2);
    llvm::detail::IEEEFloat::normalize(a1, a3, v7);
  }
}

void llvm::detail::IEEEFloat::divide(llvm::detail::IEEEFloat *a1, const llvm::detail::IEEEFloat *a2, int a3)
{
  char v6;
  int v7;

  *((_BYTE *)a1 + 20) ^= *((_BYTE *)a2 + 20) & 8;
  llvm::detail::IEEEFloat::divideSpecials(a1, a2);
  v6 = *((_BYTE *)a1 + 20);
  if ((v6 & 7) == 3)
  {
    if (*(_DWORD *)(*(_QWORD *)a1 + 20) == 2)
      *((_BYTE *)a1 + 20) = v6 & 0xF7;
  }
  else if ((*((_BYTE *)a1 + 20) & 6) != 0)
  {
    v7 = llvm::detail::IEEEFloat::divideSignificand(a1, a2);
    llvm::detail::IEEEFloat::normalize(a1, a3, v7);
  }
}

void llvm::detail::IEEEFloat::mod(llvm::detail::IEEEFloat *this, const llvm::detail::IEEEFloat *a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24A826B28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  llvm::detail::IEEEFloat *v29;
  llvm::detail *v30;
  uint64_t v31;
  char v32;
  BOOL v33;
  const llvm::detail::IEEEFloat *v34;
  char v35;
  int v36;
  const llvm::detail::IEEEFloat *v37;
  int v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;

  llvm::detail::IEEEFloat::makeNaN(v29, 0, 0, 0);
  v31 = 1;
  v32 = *((_BYTE *)v29 + 20);
  v33 = (v32 & 6) == 0 || (v32 & 7) == 3;
  if (v33 || (*((_BYTE *)v30 + 20) & 6) == 0 || (*((_BYTE *)v30 + 20) & 7) == 3)
  {
    v35 = *((_BYTE *)v29 + 20);
  }
  else
  {
    v35 = *((_BYTE *)v29 + 20);
    if (llvm::detail::IEEEFloat::compareAbsoluteValue(v29, v30))
    {
      do
      {
        v36 = llvm::detail::ilogb(v29, v34);
        v38 = v36 - llvm::detail::ilogb(v30, v37);
        llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v47, v30);
        llvm::detail::scalbn(&v47, v38, 1, &v49);
        if ((*(_DWORD *)(v47 + 8) - 64) <= 0xFFFFFF7F && v48)
          MEMORY[0x24BD1B380](v48, 0x1000C8000313F17);
        v39 = v51;
        if ((v51 & 7) == 1
          || !llvm::detail::IEEEFloat::compareAbsoluteValue(v29, (const llvm::detail::IEEEFloat *)&v49))
        {
          llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v43, v30);
          llvm::detail::scalbn(&v43, v38 - 1, 1, &v45);
          llvm::detail::IEEEFloat::operator=((uint64_t)&v49, (uint64_t)&v45);
          if ((*(_DWORD *)(v45 + 8) - 64) <= 0xFFFFFF7F && v46)
            MEMORY[0x24BD1B380](v46, 0x1000C8000313F17);
          if ((*(_DWORD *)(v43 + 8) - 64) <= 0xFFFFFF7F && v44)
            MEMORY[0x24BD1B380](v44, 0x1000C8000313F17);
          v39 = v51;
        }
        v51 = v39 & 0xF7 | *((_BYTE *)v29 + 20) & 8;
        llvm::detail::IEEEFloat::addOrSubtract(v29, (const llvm::detail::IEEEFloat *)&v49, 1, 1);
        v31 = v40;
        if ((*(_DWORD *)(v49 + 8) - 64) <= 0xFFFFFF7F && v50)
          MEMORY[0x24BD1B380](v50, 0x1000C8000313F17);
        v35 = *((_BYTE *)v29 + 20);
      }
      while ((v35 & 6) != 0
           && (v35 & 7) != 3
           && (*((_BYTE *)v30 + 20) & 6) != 0
           && (*((_BYTE *)v30 + 20) & 7) != 3
           && llvm::detail::IEEEFloat::compareAbsoluteValue(v29, v30));
    }
  }
  if ((v35 & 7) == 3)
  {
    v41 = v35 & 0xF7 | v32 & 8;
    *((_BYTE *)v29 + 20) = v41;
    if (*(_DWORD *)(*(_QWORD *)v29 + 20) == 2)
      v41 = v35 & 0xF7;
    *((_BYTE *)v29 + 20) = v41;
  }
  return v31;
}

uint64_t llvm::detail::ilogb(llvm::detail *this, const llvm::detail::IEEEFloat *a2)
{
  int v2;
  uint64_t v3;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v2 = *((_BYTE *)this + 20) & 7;
  if ((*((_BYTE *)this + 20) & 7) == 0)
    return 0x7FFFFFFFLL;
  if (v2 == 1)
    return 0x80000000;
  if (v2 == 3)
    return 2147483649;
  if (!llvm::detail::IEEEFloat::isDenormal(this))
    return *((unsigned int *)this + 4);
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v7, this);
  v5 = *(_DWORD *)(*(_QWORD *)this + 8) - 1;
  v9 += v5;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)&v7, 1, 0);
  v3 = (v9 - v5);
  if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  return v3;
}

uint64_t llvm::detail::scalbn@<X0>(_BYTE *a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v10;

  v6 = **(_DWORD **)a1 + *(_DWORD *)(*(_QWORD *)a1 + 8) + ~*(_DWORD *)(*(_QWORD *)a1 + 4);
  v7 = -2 - v6;
  if (v6 + 1 < a2)
    v8 = v6 + 1;
  else
    v8 = a2;
  if (v7 > a2)
    v8 = v7;
  *((_DWORD *)a1 + 4) += v8;
  llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)a1, a3, 0);
  if ((a1[20] & 7) == 1 && *(_DWORD *)(*(_QWORD *)a1 + 16) != 1)
  {
    v9 = *(_DWORD *)(*(_QWORD *)a1 + 8);
    v10 = a1 + 8;
    if ((v9 - 64) <= 0xFFFFFF7F)
      v10 = (_QWORD *)*v10;
    v10[(v9 - 2) >> 6] |= 1 << (v9 - 2);
  }
  *a4 = &llvm::semBogus;
  return llvm::detail::IEEEFloat::operator=((uint64_t)a4, (uint64_t)a1);
}

void llvm::detail::IEEEFloat::fusedMultiplyAdd(llvm::detail::IEEEFloat *this, llvm::detail::IEEEFloat *a2, llvm::detail::IEEEFloat *a3, int a4)
{
  char v8;
  int v9;
  int v10;
  BOOL v11;
  BOOL v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = *((_BYTE *)a2 + 20) & 8 ^ v8;
  v9 = v8 & 6;
  v10 = v8 & 7;
  if (v9)
    v11 = v10 == 3;
  else
    v11 = 1;
  if (v11
    || ((*((_BYTE *)a2 + 20) & 6) != 0 ? (v12 = (*((_BYTE *)a2 + 20) & 7) == 3) : (v12 = 1),
        v12 || (*((_BYTE *)a3 + 20) & 6) == 0))
  {
    llvm::detail::IEEEFloat::multiplySpecials(this, a2);
    if (!v17)
      llvm::detail::IEEEFloat::addOrSubtract(this, a3, a4, 0);
  }
  else
  {
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v18, a3);
    v13 = llvm::detail::IEEEFloat::multiplySignificand((unint64_t *)this, (uint64_t)a2, (const llvm::detail::IEEEFloat *)&v18);
    if ((*(_DWORD *)(v18 + 8) - 64) <= 0xFFFFFF7F && v19)
      MEMORY[0x24BD1B380](v19, 0x1000C8000313F17);
    v14 = llvm::detail::IEEEFloat::normalize(this, a4, v13);
    if (v13)
      v14 |= 0x10u;
    v15 = *((unsigned __int8 *)this + 20);
    if ((v15 & 7) == 3 && (v14 & 8) == 0 && ((*((unsigned __int8 *)a3 + 20) ^ v15) & 8) != 0)
    {
      v16 = v15 & 0xF7;
      *((_BYTE *)this + 20) = v16 | (8 * (a4 == 3));
      if (*(_DWORD *)(*(_QWORD *)this + 20) != 2)
        v16 |= 8 * (a4 == 3);
      *((_BYTE *)this + 20) = v16;
    }
  }
}

llvm::APInt **llvm::APInt::operator<<=(llvm::APInt **this, unsigned int a2)
{
  uint64_t v3;
  llvm::APInt *v4;

  v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    llvm::APInt::tcShiftLeft(*this, (unint64_t *)((unint64_t)(v3 + 63) >> 6), a2);
    llvm::APInt::clearUnusedBits((uint64_t)this);
    return this;
  }
  else
  {
    if ((_DWORD)v3 == a2)
      v4 = 0;
    else
      v4 = (llvm::APInt *)((_QWORD)*this << a2);
    *this = v4;
    return (llvm::APInt **)llvm::APInt::clearUnusedBits((uint64_t)this);
  }
}

uint64_t llvm::detail::IEEEFloat::convertFromAPInt(llvm::APInt *this, char **a2, int a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char v11;
  char *v12;
  char *v13;
  unsigned int v14;
  char *v15;
  llvm *v16;
  uint64_t v17;
  char *v19;
  unsigned int v20;
  char *v21;
  unsigned int v22;

  v8 = *((unsigned int *)a2 + 2);
  v9 = v8 + 63;
  v22 = *((_DWORD *)a2 + 2);
  if (v8 > 0x40)
  {
    v10 = (char *)operator new[]();
    memcpy(v10, *a2, (v9 >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v10 = *a2;
  }
  v21 = v10;
  v11 = *((_BYTE *)this + 20);
  *((_BYTE *)this + 20) = v11 & 0xF7;
  if (!a3)
    goto LABEL_15;
  v12 = &v10[8 * ((v8 - 1) >> 6)];
  if (v8 < 0x41)
    v12 = (char *)&v21;
  if (((*(_QWORD *)v12 >> (v8 - 1)) & 1) != 0)
  {
    *((_BYTE *)this + 20) = v11 | 8;
    v20 = v8;
    v13 = v10;
    if (v8 >= 0x41)
    {
      v13 = (char *)operator new[]();
      memcpy(v13, v10, (v9 >> 3) & 0x3FFFFFF8);
    }
    v19 = v13;
    llvm::APInt::flipAllBits((uint64_t)&v19);
    llvm::APInt::operator++((uint64_t)&v19);
    v14 = v20;
    v15 = v19;
    v20 = 0;
    if (v8 > 0x40 && v10)
    {
      MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
      v21 = v15;
      v22 = v14;
      if (v20 >= 0x41 && v19)
        MEMORY[0x24BD1B380](v19, 0x1000C8000313F17);
    }
    else
    {
      v21 = v19;
      v22 = v14;
    }
    v10 = v15;
  }
  else
  {
LABEL_15:
    v14 = v8;
  }
  if (v14 >= 0x41)
    v16 = (llvm *)v10;
  else
    v16 = (llvm *)&v21;
  v17 = llvm::detail::IEEEFloat::convertFromUnsignedParts(this, v16, (unint64_t *)((unint64_t)(v8 + 63) >> 6), a4);
  if (v14 >= 0x41 && v10)
    MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
  return v17;
}

uint64_t llvm::detail::IEEEFloat::convertToSignExtendedInteger(unsigned int *a1, llvm::APInt *this, uint64_t a3, unsigned int a4, int a5, int a6, _BYTE *a7)
{
  unsigned int v7;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  int v15;
  llvm *v17;
  const unint64_t *v18;
  unsigned int v19;
  const unint64_t *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t *v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  llvm::APInt *v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unint64_t *v39;

  *a7 = 0;
  v7 = a1[5] & 7;
  if (v7 < 2)
    return 1;
  v13 = a4 + 63;
  v14 = (a4 + 63) >> 6;
  if (v7 == 3)
  {
    *(_QWORD *)this = 0;
    if (v13 >= 0x80)
      bzero((char *)this + 8, 8 * (v14 - 2) + 8);
    LOBYTE(v15) = ((*((unsigned __int8 *)a1 + 20) >> 3) & 1) == 0;
    goto LABEL_7;
  }
  v17 = (llvm *)(a1 + 2);
  v18 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)a1 + 8);
  if (((_DWORD)v18 - 64) <= 0xFFFFFF7F)
    v17 = *(llvm **)v17;
  v19 = a1[4];
  if ((v19 & 0x80000000) != 0)
  {
    *(_QWORD *)this = 0;
    if (v13 >= 0x80)
      bzero((char *)this + 8, 8 * (v14 - 2) + 8);
    v39 = (unint64_t *)(v13 >> 6);
    v21 = (_DWORD)v18 + ~v19;
    if (!v21)
      goto LABEL_28;
  }
  else
  {
    if (v19 >= a4)
      return 1;
    v39 = (unint64_t *)(v13 >> 6);
    v20 = (const unint64_t *)(v19 + 1);
    v21 = (_DWORD)v18 - (_DWORD)v20;
    if (v18 <= v20)
    {
      v22 = (unint64_t *)(v13 >> 6);
      llvm::APInt::tcExtract(this, v39, (uint64_t)v17, v18, 0);
      llvm::APInt::tcShiftLeft(this, v39, (_DWORD)v20 - *(_DWORD *)(*(_QWORD *)a1 + 8));
      v26 = 1;
      goto LABEL_32;
    }
    llvm::APInt::tcExtract(this, v39, (uint64_t)v17, v20, (_DWORD)v18 - (_DWORD)v20);
    if (!v21)
      goto LABEL_28;
  }
  if (!llvm::lostFractionThroughTruncation(v17, (const unint64_t *)((*(_DWORD *)(*(_QWORD *)a1 + 8) + 64) >> 6), v21))
  {
LABEL_28:
    v26 = 1;
LABEL_31:
    v22 = v39;
    goto LABEL_32;
  }
  if (!llvm::detail::IEEEFloat::roundAwayFromZero((uint64_t)a1, a6))
  {
    v26 = 0;
    goto LABEL_31;
  }
  v22 = v39;
  if (v13 < 0x40)
    return 1;
  v33 = __CFADD__((*(_QWORD *)this)++, 1);
  if (v33)
  {
    v23 = 0;
    v24 = (char *)this + 8;
    while ((unint64_t *)((char *)v39 - 1) != v23)
    {
      v25 = *(_QWORD *)&v24[8 * (_QWORD)v23];
      *(_QWORD *)&v24[8 * (_QWORD)v23] = v25 + 1;
      v23 = (unint64_t *)((char *)v23 + 1);
      if (v25 != -1)
      {
        if (v23 >= v39)
          return 1;
        goto LABEL_27;
      }
    }
    return 1;
  }
LABEL_27:
  v26 = 0;
LABEL_32:
  v27 = 64 - ((_DWORD)v22 << 6);
  v28 = (_DWORD)v22 - 1;
  while (1)
  {
    v29 = *((_QWORD *)this + v28);
    if (v29)
      break;
    v27 += 64;
    if (--v28 == -1)
    {
      v30 = -1;
      goto LABEL_37;
    }
  }
  v30 = (__clz(v29) - v27) ^ 0x3F;
LABEL_37:
  v31 = v30 + 1;
  if ((a1[5] & 8) == 0)
  {
    v32 = (a5 ^ 1) + a4;
    v33 = v31 >= v32;
    if (v31 < v32)
      v15 = v26;
    else
      v15 = 0;
    if (v33)
      result = 1;
    else
      result = 16;
    if (v15 == 1)
      goto LABEL_7;
    return result;
  }
  if ((a5 & 1) == 0)
  {
    if (v30 == -1)
      goto LABEL_59;
    return 1;
  }
  if (v31 == a4)
  {
    if (v13 < 0x40)
    {
LABEL_52:
      v38 = -1;
    }
    else
    {
      v34 = 0;
      v35 = this;
      while (1)
      {
        v37 = *(_QWORD *)v35;
        v35 = (llvm::APInt *)((char *)v35 + 8);
        v36 = v37;
        if (v37)
          break;
        v34 -= 64;
        if (!(((unint64_t)v22 << 6) + v34))
          goto LABEL_52;
      }
      v38 = __clz(__rbit64(v36)) - v34;
    }
    if (v38 != v30)
      return 1;
    goto LABEL_59;
  }
  if (v31 > a4)
    return 1;
LABEL_59:
  llvm::APInt::tcNegate(this, v22);
  if ((v26 & 1) != 0)
  {
    LOBYTE(v15) = 1;
LABEL_7:
    result = 0;
    *a7 = v15;
    return result;
  }
  return 16;
}

uint64_t llvm::lostFractionThroughTruncation(llvm *this, const unint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  llvm *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;

  if (!(_DWORD)a2)
    return 0;
  v3 = 0;
  v4 = this;
  while (1)
  {
    v6 = *(_QWORD *)v4;
    v4 = (llvm *)((char *)v4 + 8);
    v5 = v6;
    if (v6)
      break;
    v3 -= 64;
    if (!(((unint64_t)a2 << 6) + v3))
      return 0;
  }
  v7 = __clz(__rbit64(v5));
  if (v7 - (int)v3 >= a3)
    return 0;
  if (v7 - a3 + 1 == (_DWORD)v3)
    return 2;
  if (a3 <= (_DWORD)a2 << 6 && ((*((_QWORD *)this + ((a3 - 1) >> 6)) >> (a3 - 1)) & 1) != 0)
    return 3;
  return 1;
}

uint64_t llvm::detail::IEEEFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, unsigned int a4, int a5, int a6, _BYTE *a7)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;

  v11 = llvm::detail::IEEEFloat::convertToSignExtendedInteger((unsigned int *)a1, a2, a3, a4, a5, a6, a7);
  if ((_DWORD)v11 == 1)
  {
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
      v12 = a5;
    else
      v12 = a4 - a5;
    if ((*(_BYTE *)(a1 + 20) & 7) == 1)
      v13 = 0;
    else
      v13 = v12;
    llvm::detail::tcSetLeastSignificantBits(a2, (unint64_t *)((a4 + 63) >> 6), v13);
    if ((*(_BYTE *)(a1 + 20) & 8) != 0 && a5)
      llvm::APInt::tcShiftLeft(a2, (unint64_t *)((a4 + 63) >> 6), a4 - 1);
  }
  return v11;
}

uint64_t llvm::detail::IEEEFloat::convertFromUnsignedParts(llvm::APInt *this, llvm *a2, unint64_t *a3, int a4)
{
  int v7;
  unsigned int v8;
  unint64_t v9;
  int v10;
  const unint64_t *v11;
  llvm::APInt *v12;
  const unint64_t *v13;
  unsigned int v14;
  int v15;

  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
  v7 = 64 - ((_DWORD)a3 << 6);
  v8 = (_DWORD)a3 - 1;
  while (1)
  {
    v9 = *((_QWORD *)a2 + v8);
    if (v9)
      break;
    v7 += 64;
    if (--v8 == -1)
    {
      v10 = -1;
      goto LABEL_6;
    }
  }
  v10 = (__clz(v9) - v7) ^ 0x3F;
LABEL_6:
  v11 = (const unint64_t *)(v10 + 1);
  v12 = (llvm::APInt *)((char *)this + 8);
  v13 = (const unint64_t *)*(unsigned int *)(*(_QWORD *)this + 8);
  if (((_DWORD)v13 - 64) <= 0xFFFFFF7F)
    v12 = *(llvm::APInt **)v12;
  v14 = (_DWORD)v11 - (_DWORD)v13;
  if (v11 >= v13)
  {
    *((_DWORD *)this + 4) = v10;
    v15 = llvm::lostFractionThroughTruncation(a2, a3, (int)v11 - (int)v13);
    llvm::APInt::tcExtract(v12, (unint64_t *)(((_DWORD)v13 + 64) >> 6), (uint64_t)a2, v13, v14);
  }
  else
  {
    *((_DWORD *)this + 4) = (_DWORD)v13 - 1;
    llvm::APInt::tcExtract(v12, (unint64_t *)(((_DWORD)v13 + 64) >> 6), (uint64_t)a2, v11, 0);
    v15 = 0;
  }
  return llvm::detail::IEEEFloat::normalize(this, a4, v15);
}

void llvm::skipLeadingZeroesAndAnyDot(llvm *this, const char *a2, const char *a3, const char **a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  int v9;
  llvm::formatv_object_base *v10;
  __int16 v11;

  *a4 = a3;
  if (a2 == a3)
    goto LABEL_13;
  v5 = a3 - a2;
  while (1)
  {
    v6 = *(unsigned __int8 *)a2;
    if (v6 != 48)
      break;
    if (++a2 == a3)
      goto LABEL_5;
  }
  if (v6 != 46)
  {
LABEL_13:
    *((_BYTE *)this + 8) &= ~1u;
    *(_QWORD *)this = a2;
  }
  else
  {
    *a4 = a2;
    if (v5 != 1)
    {
      v8 = a2 + 1;
      while (v8 != a3)
      {
        v9 = *(unsigned __int8 *)v8++;
        if (v9 != 48)
        {
          a2 = v8 - 1;
          goto LABEL_13;
        }
      }
LABEL_5:
      a2 = a3;
      goto LABEL_13;
    }
    v10 = (llvm::formatv_object_base *)"Significand has no digits";
    v11 = 259;
    getErrorErrorCat();
    v7 = operator new();
    *(_QWORD *)v7 = off_251C127D0;
    llvm::Twine::str(&v10, (std::string *)(v7 + 8));
    *(_QWORD *)(v7 + 32) = 3;
    *(_QWORD *)(v7 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v7 + 48) = 1;
    *((_BYTE *)this + 8) |= 1u;
    *(_QWORD *)this = v7;
  }
}

uint64_t llvm::detail::IEEEFloat::roundSignificandWithExponent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  int v6;
  llvm *v7;
  unsigned __int8 *v8;
  _BOOL4 v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t *v15;
  llvm::APInt *v16;
  llvm::APInt *v17;
  uint64_t v18;
  unsigned int v19;
  int *v20;
  unint64_t v21;
  unint64_t *v22;
  const unint64_t *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  _BOOL4 v39;
  unsigned int v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  int v53;
  llvm::APInt *v54;
  int v55;
  llvm *v56;
  int v57;
  unsigned int v59;
  int v60;
  _BOOL4 v61;
  llvm *v62;
  _DWORD v63[3];
  uint64_t v64;
  uint64_t v65;
  unint64_t v66[600];
  uint64_t v67;
  uint64_t v68;
  int v69;
  __int128 v70;
  __int128 v71;
  _BYTE v72[28];
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v5 = v4;
  v63[0] = v6;
  v62 = v7;
  v8 = (unsigned __int8 *)v2;
  v76 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v63[1] = 0xFFFF800100007FFFLL;
  v64 = 0;
  v65 = 0;
  v10 = v4 == 1 || v4 == 4;
  v60 = v3;
  v61 = v10;
  v11 = (*(_DWORD *)(*(_QWORD *)v2 + 8) + 74) >> 6;
  if (v3 >= 0)
    v12 = v3;
  else
    v12 = -v3;
  v73 = 390625;
  memset(v72, 0, sizeof(v72));
  v71 = 0u;
  v70 = 0u;
  v13 = 1;
  v69 = 1;
  v66[0] = llvm::powerOf5(unsigned long long *,unsigned int)::firstEightPowers[v12 & 7];
  if (v12 < 8)
    goto LABEL_30;
  v59 = v4;
  v14 = v12 >> 3;
  v15 = v66;
  v16 = (llvm::APInt *)&v67;
  v17 = (llvm::APInt *)&v73;
  v18 = 1;
  v19 = -1;
  v20 = &v69;
  do
  {
    v21 = *v20;
    if ((_DWORD)v21)
    {
      if ((v14 & 1) == 0)
        goto LABEL_14;
    }
    else
    {
      v23 = (const unint64_t *)*(&v69 + v19);
      llvm::APInt::tcFullMultiply(v17, (unint64_t *)v17 - (_QWORD)v23, (const unint64_t **)v17 - (_QWORD)v23, v23, v23);
      v24 = 2 * (_DWORD)v23 - 1;
      if (*((_QWORD *)v17 + v24))
        v21 = (2 * (_DWORD)v23);
      else
        v21 = v24;
      *v20 = v21;
      if ((v14 & 1) == 0)
      {
LABEL_14:
        v22 = v15;
        goto LABEL_23;
      }
    }
    llvm::APInt::tcFullMultiply(v16, v15, (const unint64_t **)v17, (const unint64_t *)v18, (const unint64_t *)v21);
    v25 = v21 + v18 - 1;
    if (*((_QWORD *)v16 + v25))
      v18 = (v21 + v18);
    else
      v18 = v25;
    v22 = (unint64_t *)v16;
    v16 = (llvm::APInt *)v15;
    v15 = v22;
LABEL_23:
    v17 = (llvm::APInt *)((char *)v17 + 8 * v21);
    ++v19;
    ++v20;
    v26 = v14 >= 2;
    v14 >>= 1;
  }
  while (v26);
  if (v22 == v66)
  {
    v5 = v59;
    v13 = v18;
  }
  else
  {
    v5 = v59;
    v13 = v18;
    if ((_DWORD)v18)
    {
      v27 = v18;
      v28 = v66;
      do
      {
        v29 = *v22++;
        *v28++ = v29;
        --v27;
      }
      while (v27);
    }
  }
  do
  {
LABEL_30:
    LODWORD(v64) = (v11 << 6) - 1;
    v30 = v64 - *(_DWORD *)(*(_QWORD *)v8 + 8);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v73, (uint64_t)&v63[1]);
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)&v73, (v8[20] >> 3) & 1);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v67, (uint64_t)&v63[1]);
    v31 = llvm::detail::IEEEFloat::convertFromUnsignedParts((llvm::APInt *)&v73, v62, (unint64_t *)v63[0], 1);
    v32 = v13;
    v33 = llvm::detail::IEEEFloat::convertFromUnsignedParts((llvm::APInt *)&v67, (llvm *)v66, (unint64_t *)v13, 1);
    v75 += v60;
    if (v60 < 0)
    {
      v34 = llvm::detail::IEEEFloat::divideSignificand((llvm::detail::IEEEFloat *)&v73, (const llvm::detail::IEEEFloat *)&v67);
      v37 = *(_DWORD *)(*(_QWORD *)v8 + 4);
      v36 = v30;
      v38 = v37 - v75;
      if (v37 > v75)
      {
        v36 = v38 + v30;
        if (v38 + v30 >= v64)
          v30 = v64;
        else
          v30 += v38;
      }
      v35 = 2 * ((v33 | v34) != 0);
    }
    else
    {
      v34 = llvm::detail::IEEEFloat::multiplySignificand((llvm::detail::IEEEFloat *)&v73, (const llvm::detail::IEEEFloat *)&v67);
      v35 = v33 != 0;
      v36 = v30;
    }
    v39 = v34 != 0;
    if (v31)
      ++v35;
    v40 = 2 * v39;
    v41 = v39 | (2 * v35);
    if (v35)
      v42 = v41;
    else
      v42 = v40;
    if ((*(_DWORD *)(v73 + 8) - 64) >= 0xFFFFFF80)
      v43 = (uint64_t *)&v74;
    else
      v43 = v74;
    v44 = (v30 - 1) >> 6;
    v45 = v43[v44] & (0xFFFFFFFFFFFFFFFFLL >> ((v30 - 1) & 0x3F ^ 0x3F));
    v46 = 1 << (v30 - 1);
    if (!v61)
      v46 = 0;
    if (v30 - 1 > 0x3F)
    {
      if (v45 == v46)
      {
        v48 = v44 - 1;
        while (v48)
        {
          if (v43[v48--])
            goto LABEL_60;
        }
        v47 = *v43;
      }
      else if (v45 == v46 - 1)
      {
        v50 = v44 - 1;
        while (v50)
        {
          v51 = v43[v50--];
          if (v51 != -1)
            goto LABEL_60;
        }
        v47 = -*v43;
      }
      else
      {
LABEL_60:
        v47 = -1;
      }
    }
    else
    {
      v47 = v45 - v46;
      if ((uint64_t)(v45 - v46) < 0)
        v47 = v46 - v45;
    }
    v52 = 2 * v47;
    if (2 * v47 >= v42)
    {
      v53 = *(_DWORD *)(*(_QWORD *)v8 + 8);
      v54 = (llvm::APInt *)(v8 + 8);
      if ((v53 - 64) <= 0xFFFFFF7F)
        v54 = (llvm::APInt *)*((_QWORD *)v8 + 1);
      llvm::APInt::tcExtract(v54, (unint64_t *)((v53 + 64) >> 6), (uint64_t)v43, (const unint64_t *)(v64 - v30), v30);
      *((_DWORD *)v8 + 4) = v75 + v30 + *(_DWORD *)(*(_QWORD *)v8 + 8) - v64;
      v55 = *(_DWORD *)(v73 + 8);
      if ((v55 - 64) >= 0xFFFFFF80)
        v56 = (llvm *)&v74;
      else
        v56 = (llvm *)v74;
      v57 = llvm::lostFractionThroughTruncation(v56, (const unint64_t *)((v55 + 64) >> 6), v36);
      v59 = llvm::detail::IEEEFloat::normalize((llvm::detail::IEEEFloat *)v8, v5, v57);
    }
    if ((*(_DWORD *)(v67 + 8) - 64) <= 0xFFFFFF7F && v68)
      MEMORY[0x24BD1B380](v68, 0x1000C8000313F17);
    if ((*(_DWORD *)(v73 + 8) - 64) <= 0xFFFFFF7F && v74)
      MEMORY[0x24BD1B380](v74, 0x1000C8000313F17);
    v11 *= 2;
    v26 = v52 >= v42;
    v13 = v32;
  }
  while (!v26);
  return v59;
}

void llvm::detail::IEEEFloat::makeInf(llvm::detail::IEEEFloat *this, int a2)
{
  _DWORD *v2;
  char v3;
  int v4;
  _QWORD *v5;

  v2 = *(_DWORD **)this;
  if (*(_DWORD *)(*(_QWORD *)this + 16) == 1)
  {
    llvm::detail::IEEEFloat::makeNaN(this, 0, a2, 0);
  }
  else
  {
    if (a2)
      v3 = 8;
    else
      v3 = 0;
    *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF0 | v3;
    *((_DWORD *)this + 4) = *v2 + 1;
    v4 = v2[2];
    if ((v4 - 64) >= 0xFFFFFF80)
    {
      *((_QWORD *)this + 1) = 0;
    }
    else
    {
      v5 = (_QWORD *)*((_QWORD *)this + 1);
      *v5 = 0;
      bzero(v5 + 1, 8 * (((v4 + 64) >> 6) - 2) + 8);
    }
  }
}

void llvm::detail::IEEEFloat::convertFromString(llvm::detail::IEEEFloat *this@<X0>, char *a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t v7;
  char *v8;
  char v10;
  int v11;
  const char *v12;
  int v14;
  int v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v26;
  const char *v27;
  int v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  const char *v35;
  int v36;
  _QWORD *v37;
  int *v38;
  char *v39;
  int v40;
  _BOOL4 v41;
  BOOL v42;
  _BOOL4 v43;
  char v44;
  int v45;
  int v46;
  _DWORD *v47;
  llvm::APInt *v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  unsigned int v53;
  const char *v54;
  char *v55;
  char v56;
  unint64_t v57;
  unsigned int v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  unsigned int v75;
  int v76;
  _QWORD *v77;
  char *v78;
  int v79;
  char v80;
  unsigned int v81;
  char *v82;
  unsigned int v83;
  const char *v84;
  int v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  int v89;
  int v90;
  int v91;
  char *v92;
  llvm::formatv_object_base *v93;
  unint64_t v94;
  __int16 v95;
  char *v96;
  unsigned int v97;
  uint64_t v98;

  v98 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v12 = "Invalid string length";
    goto LABEL_33;
  }
  v7 = a3;
  v8 = a2;
  if (a3 < 3)
    goto LABEL_3;
  if (a3 == 8)
  {
    if (*(_QWORD *)a2 == 0x5954494E49464E49)
    {
LABEL_50:
      v26 = 0;
      goto LABEL_51;
    }
LABEL_35:
    v14 = *a2;
    if (v14 != 45)
    {
      v15 = 0;
      v17 = a2;
      v16 = a3;
      goto LABEL_134;
    }
    v17 = a2 + 1;
    if (a3 == 9)
    {
      if (*(_QWORD *)v17 != 0x5954494E49464E49)
      {
LABEL_133:
        v16 = a3 - 1;
        v14 = *v17;
        v15 = 1;
        goto LABEL_134;
      }
    }
    else
    {
      if (a3 != 4)
        goto LABEL_133;
      if ((*(_WORD *)v17 != 28265 || a2[3] != 102) && (*(_WORD *)v17 != 28233 || a2[3] != 102))
        goto LABEL_133;
    }
    v26 = 1;
LABEL_51:
    llvm::detail::IEEEFloat::makeInf(this, v26);
    goto LABEL_52;
  }
  if (a3 == 4)
  {
    if (*(_DWORD *)a2 == 1718503723)
      goto LABEL_50;
    goto LABEL_35;
  }
  if (a3 != 3)
    goto LABEL_35;
  if (*(_WORD *)a2 == 28265 && a2[2] == 102)
    goto LABEL_50;
  v14 = *a2;
  if (v14 == 45)
    goto LABEL_3;
  v15 = 0;
  v16 = 3;
  v17 = a2;
LABEL_134:
  if ((v14 | 0x20) == 0x73)
  {
    if (v16 < 4)
      goto LABEL_3;
    ++v17;
    --v16;
    v67 = 1;
  }
  else
  {
    v67 = 0;
  }
  v68 = *(_WORD *)v17 == 24942 && v17[2] == 110;
  if (v68 || (*(_WORD *)v17 == 24910 ? (v69 = v17[2] == 78) : (v69 = 0), v69))
  {
    v70 = 3;
    if (v16 < 3)
      v70 = v16;
    v71 = &v17[v70];
    v72 = v16 - v70;
    v93 = (llvm::formatv_object_base *)&v17[v70];
    v94 = v16 - v70;
    if (v16 == v70)
    {
      llvm::detail::IEEEFloat::makeNaN(this, v67, v15, 0);
    }
    else
    {
      v73 = *v71;
      if (v73 == 40)
      {
        if (v72 < 3)
          goto LABEL_3;
        v74 = v72 - 1;
        if (v71[v72 - 1] != 41)
          goto LABEL_3;
        if (v74 >= v72)
          v74 = v16 - v70;
        v72 = v74 - 1;
        v93 = (llvm::formatv_object_base *)(v71 + 1);
        v94 = v74 - 1;
        v73 = *++v71;
      }
      if (v73 == 48)
      {
        if (v72 >= 2 && __tolower(v71[1]) == 120)
        {
          v93 = (llvm::formatv_object_base *)(v71 + 2);
          v94 = v72 - 2;
          v75 = 16;
        }
        else
        {
          v75 = 8;
        }
      }
      else
      {
        v75 = 10;
      }
      v97 = 1;
      v96 = 0;
      if ((llvm::StringRef::getAsInteger((llvm::StringRef *)&v93, v75, (llvm::APInt *)&v96) & 1) != 0)
      {
        if (v97 >= 0x41 && v96)
          MEMORY[0x24BD1B380](v96, 0x1000C8000313F17);
        goto LABEL_3;
      }
      llvm::detail::IEEEFloat::makeNaN(this, v67, v15, (const llvm::APInt *)&v96);
      if (v97 >= 0x41 && v96)
        MEMORY[0x24BD1B380](v96, 0x1000C8000313F17);
    }
LABEL_52:
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = 0;
    return;
  }
LABEL_3:
  v10 = *((_BYTE *)this + 20) & 0xF7 | (8 * (*v8 == 45));
  *((_BYTE *)this + 20) = v10;
  v11 = *v8;
  if (v11 == 45 || v11 == 43)
  {
    if (!--v7)
    {
      v12 = "String has no digits";
      goto LABEL_33;
    }
    ++v8;
  }
  if (v7 < 2 || *v8 != 48 || (v8[1] | 0x20) != 0x78)
  {
    v18 = &v8[v7];
    v92 = &v8[v7];
    llvm::skipLeadingZeroesAndAnyDot((llvm *)&v96, v8, &v8[v7], (const char **)&v92);
    v19 = (uint64_t)v96;
    if ((v97 & 1) != 0)
    {
LABEL_178:
      *(_BYTE *)(a5 + 8) |= 1u;
      *(_QWORD *)a5 = v19;
      return;
    }
    v20 = v92;
    if (v96 == v18)
      goto LABEL_59;
    v21 = v96;
    while (1)
    {
      v22 = *v21;
      if (v22 == 46)
      {
        if (v20 != v18)
        {
          v27 = "String contains multiple dots";
          goto LABEL_177;
        }
        v92 = v21;
        if (v21 + 1 == v18)
        {
          v28 = 0;
          v29 = v18;
          goto LABEL_101;
        }
        v22 = v21[1];
        v20 = v21++;
      }
      if (((char)v22 - 58) < 0xFFFFFFF6)
        break;
      if (++v21 == v18)
        goto LABEL_59;
    }
    if (v21 == v18)
    {
LABEL_59:
      v28 = 0;
      v29 = v18;
    }
    else
    {
      if ((v22 | 0x20) != 0x65)
      {
        v27 = "Invalid character in significand";
LABEL_177:
        v93 = (llvm::formatv_object_base *)v27;
        v95 = 259;
        getErrorErrorCat();
        v19 = operator new();
        *(_QWORD *)v19 = off_251C127D0;
        llvm::Twine::str(&v93, (std::string *)(v19 + 8));
        *(_QWORD *)(v19 + 32) = 3;
        *(_QWORD *)(v19 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v19 + 48) = 1;
        goto LABEL_178;
      }
      if (v21 == v8 || v20 != v18 && v21 - v8 == 1)
      {
        v27 = "Significand has no digits";
        goto LABEL_177;
      }
      v78 = v21 + 1;
      if (v21 + 1 == v18 || ((v79 = *v78, v79 == 45) || v79 == 43) && v21 + 2 == v18)
      {
        v28 = 0;
      }
      else
      {
        if (v79 == 45 || (v80 = *v78, v79 == 43))
        {
          v78 = v21 + 2;
          if (v21 + 2 != v18)
          {
            v80 = *v78;
            goto LABEL_187;
          }
          v27 = "Exponent has no digits";
          goto LABEL_177;
        }
LABEL_187:
        v81 = v80 - 48;
        if (v81 > 9)
        {
LABEL_188:
          v27 = "Invalid character in exponent";
          goto LABEL_177;
        }
        v82 = v78 + 1;
        do
        {
          if (v82 == v18)
            goto LABEL_209;
          v83 = *v82 - 48;
          if (v83 >= 0xA)
            goto LABEL_188;
          v81 = v83 + 10 * v81;
          ++v82;
        }
        while (v81 >> 6 < 0x177);
        v81 = 24000;
LABEL_209:
        if (v79 == 45)
          v28 = -v81;
        else
          v28 = v81;
      }
      if (v20 == v18)
      {
        v92 = v21;
        v29 = v21;
LABEL_101:
        v20 = v21;
      }
      else
      {
        v29 = v21;
      }
    }
    if (v29 == v96)
    {
      v34 = 0;
      v33 = v96;
    }
    else
    {
      if (v29 == v8)
      {
LABEL_67:
        v33 = v8;
      }
      else
      {
        while (1)
        {
          v30 = v29 - 1;
          do
          {
            if (v30 == v8)
              goto LABEL_67;
            v32 = *v30--;
            v31 = v32;
          }
          while (v32 == 48);
          if (v31 != 46)
            break;
          v29 = v30 + 1;
        }
        v33 = v30 + 1;
      }
      v40 = (_DWORD)v20 - (_DWORD)v33;
      v41 = v20 > v96;
      v42 = v20 >= v33;
      v43 = v20 > v33;
      if (v42)
        v41 = 0;
      v34 = v28 + v40 - v43 + (_DWORD)v33 - (_DWORD)v96 - v41;
    }
    if (v96 == v18 || (*v96 - 58) <= 0xFFFFFFF5)
    {
      v44 = *((_BYTE *)this + 20) & 0xF8 | 3;
      *((_BYTE *)this + 20) = v44;
      v45 = 0;
      if (*(_DWORD *)(*(_QWORD *)this + 20) == 2)
        *((_BYTE *)this + 20) = v44 & 0xF3;
      goto LABEL_175;
    }
    if (v34 >= 51085)
      goto LABEL_81;
    v47 = *(_DWORD **)this;
    if (v34 < -51082 || 28738 * v34 + 28738 <= 8651 * (v47[1] - v47[2]))
    {
      *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
      v76 = v47[2];
      if ((v76 - 64) >= 0xFFFFFF80)
      {
        *((_QWORD *)this + 1) = 0;
      }
      else
      {
        v77 = (_QWORD *)*((_QWORD *)this + 1);
        *v77 = 0;
        bzero(v77 + 1, 8 * (((v76 + 64) >> 6) - 2) + 8);
      }
      v46 = llvm::detail::IEEEFloat::normalize(this, a4, 1);
      goto LABEL_174;
    }
    if (42039 * v34 - 42039 >= 12655 * *v47)
    {
LABEL_81:
      v46 = llvm::detail::IEEEFloat::handleOverflow(this, a4);
LABEL_174:
      v45 = v46;
      goto LABEL_175;
    }
    v48 = (llvm::APInt *)operator new[]();
    v49 = 0;
LABEL_86:
    v50 = 0;
    v51 = 1;
    while (1)
    {
      v52 = *v8;
      if (v52 == 46)
      {
        if (++v8 == v18)
        {
          v8 = v18;
LABEL_95:
          llvm::APInt::tcMultiplyPart(v48, (unint64_t *)v48, (const unint64_t *)v51, v50, v49, v49 + 1, 0);
          if (*((_QWORD *)v48 + v49))
            ++v49;
          if (v8 > v33)
          {
            *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF8 | 2;
            v45 = llvm::detail::IEEEFloat::roundSignificandWithExponent((uint64_t)this, (uint64_t)v48);
            MEMORY[0x24BD1B380](v48, 0x1000C8000313F17);
LABEL_175:
            *(_BYTE *)(a5 + 8) &= ~1u;
            *(_DWORD *)a5 = v45;
            return;
          }
          goto LABEL_86;
        }
        LOBYTE(v52) = *v8;
      }
      v53 = (char)v52 - 48;
      if (v53 > 9)
      {
        MEMORY[0x24BD1B380](v48, 0x1000C8000313F17, v51, v50);
LABEL_190:
        v12 = "Invalid character in significand";
        goto LABEL_33;
      }
      ++v8;
      v51 *= 10;
      v50 = 10 * v50 + v53;
      if (v8 > v33 || v51 >= 0x1999999999999999)
        goto LABEL_95;
    }
  }
  if (v7 == 2)
  {
    v12 = "Invalid string";
    goto LABEL_33;
  }
  v35 = v8 + 2;
  *((_BYTE *)this + 20) = v10 & 0xF8 | 2;
  v36 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v36 - 64) >= 0xFFFFFF80)
  {
    v39 = (char *)this + 8;
    *((_DWORD *)this + 4) = 0;
    v38 = (int *)((char *)this + 16);
    *((_QWORD *)this + 1) = 0;
  }
  else
  {
    v37 = (_QWORD *)*((_QWORD *)this + 1);
    *v37 = 0;
    bzero(v37 + 1, 8 * (((v36 + 64) >> 6) - 2) + 8);
    *((_DWORD *)this + 4) = 0;
    v38 = (int *)((char *)this + 16);
    v39 = (char *)*((_QWORD *)this + 1);
  }
  v54 = &v8[v7];
  v92 = 0;
  llvm::skipLeadingZeroesAndAnyDot((llvm *)&v96, v35, v54, (const char **)&v92);
  v55 = v96;
  if ((v97 & 1) != 0)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v55;
    return;
  }
  if (v96 == v54)
  {
LABEL_201:
    v12 = "Hex strings require an exponent";
    goto LABEL_33;
  }
  v56 = 0;
  v57 = 0;
  v58 = (v36 & 0xFFFFFFC0) + 64;
  v59 = v92;
  v60 = v96;
  while (1)
  {
    v61 = *v60;
    if ((_DWORD)v61 == 46)
    {
      if (v59 != v54)
      {
        v12 = "String contains multiple dots";
        goto LABEL_33;
      }
      v92 = v60;
      v59 = v60++;
      goto LABEL_118;
    }
    v62 = llvm::hexDigitValue(char)::LUT[v61];
    if ((_DWORD)v62 == -1)
      break;
    ++v60;
    if (v58)
    {
      v58 -= 4;
      *(_QWORD *)&v39[8 * (v58 >> 6)] |= v62 << v58;
    }
    else
    {
      if ((v56 & 1) == 0)
      {
        if ((unint64_t)(v61 - 57) > 0xFFFFFFFFFFFFFFF6)
        {
          if ((v62 & 0xFFFFFFF7) != 0)
          {
            v57 = v57 & 0xFFFFFFFF00000000 | 1;
          }
          else
          {
            v63 = v60;
            if (v60 == v54)
            {
LABEL_202:
              v12 = "Invalid trailing hexadecimal fraction!";
              goto LABEL_33;
            }
            while (1)
            {
              v64 = *v63;
              if ((_DWORD)v64 != 48 && (_DWORD)v64 != 46)
                break;
              if (++v63 == v54)
                goto LABEL_202;
            }
            v65 = v57 & 0xFFFFFFFF00000000;
            if (llvm::hexDigitValue(char)::LUT[v64] == -1)
            {
              v57 = v65 | (2 * ((_DWORD)v61 != 48));
            }
            else
            {
              if ((_DWORD)v61 == 48)
                v66 = 1;
              else
                v66 = 3;
              v57 = v66 | v65;
            }
          }
        }
        else
        {
          v57 = v57 & 0xFFFFFFFF00000000 | 3;
        }
      }
      v58 = 0;
      v56 = 1;
    }
LABEL_118:
    if (v60 == v54)
      goto LABEL_201;
  }
  if (v60 == v54)
    goto LABEL_201;
  if ((v61 | 0x20) != 0x70)
    goto LABEL_190;
  if (v60 == v35 || v59 != v54 && v60 - v35 == 1)
  {
    v12 = "Significand has no digits";
    goto LABEL_33;
  }
  if (v60 == v55)
  {
LABEL_237:
    v91 = llvm::detail::IEEEFloat::normalize(this, a4, v57);
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v91;
    return;
  }
  if (v59 == v54)
  {
    v92 = v60;
    LODWORD(v59) = (_DWORD)v60;
  }
  v84 = v60 + 1;
  if (v60 + 1 == v54 || ((v85 = *(unsigned __int8 *)v84, v85 == 45) || v85 == 43) && (v84 = v60 + 2, v60 + 2 == v54))
  {
    v12 = "Exponent has no digits";
    goto LABEL_33;
  }
  if (v84 == v54)
  {
    v86 = 0;
LABEL_228:
    v88 = *(_DWORD *)(*(_QWORD *)this + 8)
        - (v36 & 0xFFFFFFC0)
        + 4 * ((_DWORD)v59 - (_DWORD)v55 + (((_DWORD)v59 - (_DWORD)v55) >> 31))
        - 65;
    if (v88 != (__int16)v88 || (v85 != 45 ? (v89 = v86) : (v89 = -v86), v90 = v89 + v88, v90 != (__int16)v90))
    {
LABEL_233:
      if (v85 == 45)
        v90 = -32768;
      else
        v90 = 0x7FFF;
    }
    *v38 = v90;
    goto LABEL_237;
  }
  v86 = 0;
  while (1)
  {
    v87 = *v84 - 48;
    if (v87 >= 0xA)
      break;
    v86 = v87 + 10 * v86;
    if (v86 >= 0x8000)
      goto LABEL_233;
    if (++v84 == v54)
      goto LABEL_228;
  }
  v12 = "Invalid character in exponent";
LABEL_33:
  v93 = (llvm::formatv_object_base *)v12;
  v95 = 259;
  getErrorErrorCat();
  v23 = operator new();
  *(_QWORD *)v23 = off_251C127D0;
  llvm::Twine::str(&v93, (std::string *)(v23 + 8));
  *(_QWORD *)(v23 + 32) = 3;
  *(_QWORD *)(v23 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v23 + 48) = 1;
  *(_BYTE *)(a5 + 8) |= 1u;
  *(_QWORD *)a5 = v23;
}

unint64_t llvm::detail::hash_value(llvm::hashing::detail::hash_state **this, const llvm::detail::IEEEFloat *a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int *v9;
  llvm::hashing::detail::hash_state *v11;
  llvm::hashing::detail::hash_state *v12;
  llvm::hashing::detail::hash_state *v13;
  llvm::hashing::detail::hash_state *v14;
  int *v15;
  int v16;
  int *v17;
  unint64_t v18;
  char v19;
  char v20;
  _BYTE v21[63];
  char v22[64];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 6;
  v6 = v4 & 7;
  v7 = (v4 >> 3) & 1;
  if (v5)
    v8 = v6 == 3;
  else
    v8 = 1;
  if (v8)
  {
    if (v6 == 1)
      LOBYTE(v7) = 0;
    LOBYTE(v18) = v7;
    v9 = (int *)((char *)*this + 8);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v20);
    v20 = v6;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int>((llvm::hashing::detail::hash_combine_recursive_helper *)&v20, 0, v21, v22, (char *)&v18, v9);
  }
  else
  {
    v19 = v7;
    v11 = *this;
    v14 = this[1];
    v12 = (llvm::hashing::detail::hash_state *)(this + 1);
    v13 = v14;
    v15 = (int *)((char *)v12 + 8);
    LODWORD(v14) = *((_DWORD *)v11 + 2);
    v17 = (int *)((char *)v11 + 8);
    v16 = (int)v14;
    if (((_DWORD)v14 - 64) < 0xFFFFFF80)
      v12 = v13;
    v18 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(v12, (uint64_t)v12 + 8 * ((v16 + 64) >> 6), a3, a4);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)&v20);
    v20 = v6;
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int,int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)&v20, 0, v21, v22, &v19, v17, v15, (uint64_t *)&v18);
  }
}

uint64_t llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      v11 = 0;
      v7 = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v13 = *(_QWORD *)this;
        v12 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v13 + 8) - 64) <= 0xFFFFFF7F)
          v12 = (unint64_t *)*v12;
        v7 = *v12;
      }
      else
      {
        v7 = 0x8000000000000000;
      }
      v11 = 0x7FFFLL;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 0x3FFF;
    v10 = *(_QWORD *)this;
    v9 = (unint64_t *)((char *)this + 8);
    if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
      v9 = (unint64_t *)*v9;
    v7 = *v9;
    if ((_DWORD)v8 == 1)
      v8 = v7 >> 63;
    v11 = v8 & 0x7FFF;
  }
  v15[0] = v7;
  v15[1] = v11 & 0xFFFFFFFFFFFF7FFFLL | (((v4 >> 3) & 1) << 15);
  *((_DWORD *)a2 + 2) = 80;
  return llvm::APInt::initFromArray(a2, v15, 2u);
}

uint64_t llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)this + 16);
  v14 = *(_OWORD *)*(_QWORD *)this;
  v15 = v3;
  DWORD1(v14) = -1022;
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v12, this);
  llvm::detail::IEEEFloat::convert(&v12, (uint64_t)&v14, 1, &v16);
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v9, (const llvm::detail::IEEEFloat *)&v12);
  llvm::detail::IEEEFloat::convert(&v9, (uint64_t)&llvm::semIEEEdouble, 1, &v16);
  llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt((llvm::detail::IEEEFloat *)&v9, (uint64_t)&v7);
  if (v8 > 0x40)
  {
    v17 = *(_QWORD *)v7;
    MEMORY[0x24BD1B380]();
  }
  else
  {
    v17 = v7;
  }
  if ((v11 & 6) != 0 && (v11 & 7) != 3 && v16)
  {
    llvm::detail::IEEEFloat::convert(&v9, (uint64_t)&v14, 1, &v16);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)&v7, (const llvm::detail::IEEEFloat *)&v12);
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)&v7, (const llvm::detail::IEEEFloat *)&v9, 1, 1);
    llvm::detail::IEEEFloat::convert(&v7, (uint64_t)&llvm::semIEEEdouble, 1, &v16);
    llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt((llvm::detail::IEEEFloat *)&v7, (uint64_t)&v5);
    if (v6 > 0x40)
    {
      v18 = (_QWORD *)*v5;
      MEMORY[0x24BD1B380]();
    }
    else
    {
      v18 = v5;
    }
    if ((*(_DWORD *)(v7 + 8) - 64) <= 0xFFFFFF7F && v8)
      MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  }
  else
  {
    v18 = 0;
  }
  *((_DWORD *)a2 + 2) = 128;
  result = llvm::APInt::initFromArray(a2, &v17, 2u);
  if ((*(_DWORD *)(v9 + 8) - 64) <= 0xFFFFFF7F)
  {
    result = v10;
    if (v10)
      result = MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
  }
  if ((*(_DWORD *)(v12 + 8) - 64) <= 0xFFFFFF7F)
  {
    result = v13;
    if (v13)
      return MEMORY[0x24BD1B380](v13, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      v7 = 0;
      LOWORD(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v10 = *(_QWORD *)this;
        v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
          v9 = (unint64_t *)*v9;
        v7 = *v9;
      }
      else
      {
        v7 = 0;
      }
      LOWORD(v8) = 2047;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 1023;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 52) & 1;
  }
  *(_DWORD *)(a2 + 8) = 64;
  *(_QWORD *)a2 = (v4 << 60) & 0x8000000000000000 | v7 & 0xFFFFFFFFFFFFFLL | ((unint64_t)(v8 & 0x7FF) << 52);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      v7 = 0;
      v8 = 0;
      LOWORD(v9) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v12 = *(_QWORD *)this;
        v11 = (_QWORD *)((char *)this + 8);
        if ((*(_DWORD *)(v12 + 8) - 64) <= 0xFFFFFF7F)
          v11 = (_QWORD *)*v11;
        v7 = (_QWORD *)*v11;
        v8 = v11[1];
      }
      else
      {
        v7 = 0;
        v8 = 0;
      }
      LOWORD(v9) = 0x7FFF;
    }
  }
  else
  {
    LODWORD(v9) = *((_DWORD *)this + 4) + 0x3FFF;
    v10 = (_QWORD *)((char *)this + 8);
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
    {
      v7 = (_QWORD *)*((_QWORD *)this + 1);
      v8 = *((_QWORD *)this + 2);
    }
    else
    {
      v10 = (_QWORD *)*v10;
      v7 = (_QWORD *)*v10;
      v8 = v10[1];
    }
    if ((_DWORD)v9 == 1)
      v9 = HIWORD(v10[1]) & 1;
  }
  v14[0] = v7;
  v14[1] = (v4 << 60) & 0x8000000000000000 | v8 & 0xFFFFFFFFFFFFLL | ((unint64_t)(v9 & 0x7FFF) << 48);
  *((_DWORD *)a2 + 2) = 128;
  return llvm::APInt::initFromArray(a2, v14, 2u);
}

uint64_t llvm::detail::IEEEFloat::convertFloatAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LODWORD(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v10 = *(_QWORD *)this;
        v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
          v9 = (unint64_t *)*v9;
        v7 = *v9;
      }
      else
      {
        LODWORD(v7) = 0;
      }
      LOBYTE(v8) = -1;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 127;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 23) & 1;
  }
  *(_DWORD *)(a2 + 8) = 32;
  *(_QWORD *)a2 = v7 & 0x7FFFFF | (((v4 >> 3) & 1) << 31) | ((unint64_t)v8 << 23);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertBFloatAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v10 = *(_QWORD *)this;
        v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
          v9 = (unint64_t *)*v9;
        v7 = *v9;
      }
      else
      {
        LOBYTE(v7) = 0;
      }
      LOBYTE(v8) = -1;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 127;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 7) & 1;
  }
  *(_DWORD *)(a2 + 8) = 16;
  *(_QWORD *)a2 = v7 & 0x7F | (((v4 >> 3) & 1) << 15) | ((unint64_t)v8 << 7);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertHalfAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOWORD(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v10 = *(_QWORD *)this;
        v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
          v9 = (unint64_t *)*v9;
        v7 = *v9;
      }
      else
      {
        LOWORD(v7) = 0;
      }
      LOBYTE(v8) = 31;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 15;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 10) & 1;
  }
  *(_DWORD *)(a2 + 8) = 16;
  *(_QWORD *)a2 = v7 & 0x3FF | (((v4 >> 3) & 1) << 15) | ((unint64_t)(v8 & 0x1F) << 10);
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E5M2APFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      if ((v4 & 7) != 0)
      {
        v10 = *(_QWORD *)this;
        v9 = (unint64_t *)((char *)this + 8);
        if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
          v9 = (unint64_t *)*v9;
        v7 = *v9;
      }
      else
      {
        LOBYTE(v7) = 0;
      }
      LOBYTE(v8) = 31;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 15;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 2) & 1;
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v4) & 0x80 | v7 & 3 | (4 * (v8 & 0x1F));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      v10 = *(_QWORD *)this;
      v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
        v9 = (unint64_t *)*v9;
      LOBYTE(v8) = 0;
      v7 = *v9;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 16;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 2) & 1;
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v4) & 0x80 | v7 & 3 | (4 * (v8 & 0x1F));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      v10 = *(_QWORD *)this;
      v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
        v9 = (unint64_t *)*v9;
      v7 = *v9;
      LOBYTE(v8) = 15;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 7;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 3) & 1;
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v4) & 0x80 | v7 & 7 | (8 * (v8 & 0xF));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      v10 = *(_QWORD *)this;
      v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
        v9 = (unint64_t *)*v9;
      LOBYTE(v8) = 0;
      v7 = *v9;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 8;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 3) & 1;
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v4) & 0x80 | v7 & 7 | (8 * (v8 & 0xF));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;

  v4 = *((unsigned __int8 *)this + 20);
  v5 = v4 & 7;
  if ((v4 & 6) == 0 || v5 == 3)
  {
    if (v5 == 3)
    {
      LOBYTE(v7) = 0;
      LOBYTE(v8) = 0;
    }
    else
    {
      v10 = *(_QWORD *)this;
      v9 = (unint64_t *)((char *)this + 8);
      if ((*(_DWORD *)(v10 + 8) - 64) <= 0xFFFFFF7F)
        v9 = (unint64_t *)*v9;
      LOBYTE(v8) = 0;
      v7 = *v9;
    }
  }
  else
  {
    LODWORD(v8) = *((_DWORD *)this + 4) + 11;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) > 0xFFFFFF7F)
      v7 = *((_QWORD *)this + 1);
    else
      v7 = **((_QWORD **)this + 1);
    if ((_DWORD)v8 == 1)
      v8 = (v7 >> 3) & 1;
  }
  *(_DWORD *)(a2 + 8) = 8;
  *(_QWORD *)a2 = (16 * v4) & 0x80 | v7 & 7 | (8 * (v8 & 0xF));
  return llvm::APInt::clearUnusedBits(a2);
}

uint64_t llvm::detail::IEEEFloat::bitcastToAPInt@<X0>(llvm::detail::IEEEFloat *this@<X0>, llvm::APInt *a2@<X8>)
{
  void *v2;

  v2 = *(void **)this;
  if (*(_UNKNOWN **)this == &llvm::semIEEEhalf)
    return llvm::detail::IEEEFloat::convertHalfAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semBFloat)
    return llvm::detail::IEEEFloat::convertBFloatAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semIEEEsingle)
    return llvm::detail::IEEEFloat::convertFloatAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semIEEEdouble)
    return llvm::detail::IEEEFloat::convertDoubleAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semIEEEquad)
    return llvm::detail::IEEEFloat::convertQuadrupleAPFloatToAPInt(this, a2);
  if (v2 == &llvm::semPPCDoubleDoubleLegacy)
    return llvm::detail::IEEEFloat::convertPPCDoubleDoubleAPFloatToAPInt(this, a2);
  if (v2 == &llvm::semFloat8E5M2)
    return llvm::detail::IEEEFloat::convertFloat8E5M2APFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semFloat8E5M2FNUZ)
    return llvm::detail::IEEEFloat::convertFloat8E5M2FNUZAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semFloat8E4M3FN)
    return llvm::detail::IEEEFloat::convertFloat8E4M3FNAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semFloat8E4M3FNUZ)
    return llvm::detail::IEEEFloat::convertFloat8E4M3FNUZAPFloatToAPInt(this, (uint64_t)a2);
  if (v2 == &llvm::semFloat8E4M3B11FNUZ)
    return llvm::detail::IEEEFloat::convertFloat8E4M3B11FNUZAPFloatToAPInt(this, (uint64_t)a2);
  return llvm::detail::IEEEFloat::convertF80LongDoubleAPFloatToAPInt(this, a2);
}

double llvm::detail::IEEEFloat::convertToDouble(llvm::detail::IEEEFloat *this)
{
  double v1;
  double *v3;
  unsigned int v4;

  llvm::detail::IEEEFloat::bitcastToAPInt(this, (llvm::APInt *)&v3);
  if (v4 <= 0x40)
    return *(double *)&v3;
  v1 = *v3;
  MEMORY[0x24BD1B380]();
  return v1;
}

void llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  char v10;
  BOOL v12;
  BOOL v13;
  int *v14;
  int v15;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3;
  v5 = *((_QWORD *)v3 + 1);
  v6 = v5 & 0x7FFF;
  *(_QWORD *)this = &llvm::semX87DoubleExtended;
  v7 = operator new[]();
  *((_QWORD *)this + 1) = v7;
  v8 = (_QWORD *)((char *)this + 8);
  v9 = (v5 >> 12) & 8;
  v10 = *((_BYTE *)this + 20) & 0xF7 | v9;
  *((_BYTE *)this + 20) = *((_BYTE *)this + 20) & 0xF7 | (v5 >> 12) & 8;
  if (v6 | v4)
  {
    if (v4 == 0x8000000000000000 && v6 == 0x7FFF)
    {
      llvm::detail::IEEEFloat::makeInf(this, v9 != 0);
    }
    else
    {
      v12 = v4 != 0x8000000000000000 && v6 == 0x7FFF;
      if (!v12 && (v4 < 0 || ((v5 & 0x7FFF) != 0 ? (v13 = v6 == 0x7FFF) : (v13 = 1), v13)))
      {
        *((_BYTE *)this + 20) = v10 & 0xF8 | 2;
        *((_DWORD *)this + 4) = v6 - 0x3FFF;
        if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) < 0xFFFFFF80)
          v8 = (_QWORD *)v7;
        *v8 = v4;
        v8[1] = 0;
        if ((v5 & 0x7FFF) == 0)
          *((_DWORD *)this + 4) = -16382;
      }
      else
      {
        *((_BYTE *)this + 20) = v10 & 0xF8 | 1;
        v14 = *(int **)this;
        if (*(_DWORD *)(*(_QWORD *)this + 16) == 1)
        {
          if (v14[5] == 2)
            v15 = v14[1] - 1;
          else
            v15 = *v14;
        }
        else
        {
          v15 = *v14 + 1;
        }
        *((_DWORD *)this + 4) = v15;
        if ((v14[2] - 64) < 0xFFFFFF80)
          v8 = (_QWORD *)v7;
        *v8 = v4;
        v8[1] = 0;
      }
    }
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero(this, v9 != 0);
  }
}

void llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  const llvm::APInt *v3;
  const llvm::APInt *v4;
  const llvm::APInt *v5;
  const llvm::APInt *v7;
  int v8;
  const llvm::APInt *v9;
  uint64_t v10;
  char v11;

  if (*((_DWORD *)a2 + 2) >= 0x41u)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(const llvm::APInt **)v3;
  v5 = (const llvm::APInt *)*((_QWORD *)v3 + 1);
  LODWORD(v10) = 64;
  v9 = v4;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(this, &v9);
  llvm::detail::IEEEFloat::convert((uint64_t *)this, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v11);
  if ((*((_BYTE *)this + 20) & 6) != 0 && (*((_BYTE *)this + 20) & 7) != 3)
  {
    v8 = 64;
    v7 = v5;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v9, &v7);
    llvm::detail::IEEEFloat::convert((uint64_t *)&v9, (uint64_t)&llvm::semPPCDoubleDoubleLegacy, 1, &v11);
    llvm::detail::IEEEFloat::addOrSubtract(this, (const llvm::detail::IEEEFloat *)&v9, 1, 0);
    if ((*((_DWORD *)v9 + 2) - 64) <= 0xFFFFFF7F)
    {
      if (v10)
        MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
    }
  }
}

void llvm::detail::IEEEFloat::initFromDoubleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0xFFFFFFFFFFFFFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 52) & 0x7FF;
  *(_QWORD *)this = &llvm::semIEEEdouble;
  v7 = (v5 >> 60) & 8;
  v8 = *((_BYTE *)this + 20) & 0xF7 | v7;
  *((_BYTE *)this + 20) = v8;
  if (v6 == 2047 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 2047 && v4 != 0)
  {
    *((_BYTE *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 1024;
LABEL_18:
    *((_QWORD *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((_BYTE *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 1023;
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x10000000000000uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -1022;
}

void llvm::detail::IEEEFloat::initFromQuadrupleAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v3;
  const llvm::APInt *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;

  v3 = *((unsigned int *)a2 + 2);
  v4 = *a2;
  if (v3 < 0x41)
    v4 = (const llvm::APInt *)a2;
  v16 = *(_OWORD *)v4;
  *((_QWORD *)&v16 + 1) &= 0xFFFFFFFFFFFFuLL;
  v5 = *((_QWORD *)v4 + ((v3 + 63) >> 6) - 1);
  *(_QWORD *)this = &llvm::semIEEEquad;
  v6 = operator new[]();
  v7 = 0;
  *((_QWORD *)this + 1) = v6;
  v8 = (char *)this + 8;
  v9 = (v5 >> 60) & 8;
  v10 = *((_BYTE *)this + 20) & 0xF7 | v9;
  *((_BYTE *)this + 20) = v10;
  do
  {
    v11 = *(_QWORD *)((char *)&v16 + v7);
    if (v11)
      v12 = 1;
    else
      v12 = v7 == 8;
    v7 += 8;
  }
  while (!v12);
  v13 = HIWORD(v5) & 0x7FFF;
  if (v13 != 0x7FFF || v11)
  {
    if (v13 == 0x7FFF && v11)
    {
      *((_BYTE *)this + 20) = v10 & 0xF8 | 1;
      *((_DWORD *)this + 4) = 0x4000;
      if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) < 0xFFFFFF80)
        v8 = (char *)v6;
      *(_OWORD *)v8 = v16;
    }
    else if (v11 | v13)
    {
      *((_BYTE *)this + 20) = v10 & 0xF8 | 2;
      *((_DWORD *)this + 4) = v13 - 0x3FFF;
      v14 = *(_QWORD *)this;
      if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) >= 0xFFFFFF80)
        v15 = (_OWORD *)((char *)this + 8);
      else
        v15 = (_OWORD *)v6;
      *v15 = v16;
      if (v13)
      {
        if ((*(_DWORD *)(v14 + 8) - 64) <= 0xFFFFFF7F)
          v8 = *(char **)v8;
        *((_QWORD *)v8 + 1) |= 0x1000000000000uLL;
      }
      else
      {
        *((_DWORD *)this + 4) = -16382;
      }
    }
    else
    {
      llvm::detail::IEEEFloat::makeZero(this, v9 != 0);
    }
  }
  else
  {
    llvm::detail::IEEEFloat::makeInf(this, v9 != 0);
  }
}

void llvm::detail::IEEEFloat::initFromFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x7FFFFFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 23);
  *(_QWORD *)this = &llvm::semIEEEsingle;
  v7 = (v5 >> 28) & 8;
  v8 = *((_BYTE *)this + 20) & 0xF7 | v7;
  *((_BYTE *)this + 20) = v8;
  if (v6 == 255 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 255 && v4 != 0)
  {
    *((_BYTE *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 128;
LABEL_18:
    *((_QWORD *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((_BYTE *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 127;
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x800000uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -126;
}

void llvm::detail::IEEEFloat::initFromBFloatAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x7FLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 7);
  *(_QWORD *)this = &llvm::semBFloat;
  v7 = (v5 >> 12) & 8;
  v8 = *((_BYTE *)this + 20) & 0xF7 | v7;
  *((_BYTE *)this + 20) = v8;
  if (v6 == 255 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 255 && v4 != 0)
  {
    *((_BYTE *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 128;
LABEL_18:
    *((_QWORD *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((_BYTE *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 127;
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x80uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -126;
}

void llvm::detail::IEEEFloat::initFromHalfAPInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 0x3FFLL;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 10) & 0x1F;
  *(_QWORD *)this = &llvm::semIEEEhalf;
  v7 = (v5 >> 12) & 8;
  v8 = *((_BYTE *)this + 20) & 0xF7 | v7;
  *((_BYTE *)this + 20) = v8;
  if (v6 == 31 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 31 && v4 != 0)
  {
    *((_BYTE *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 16;
LABEL_18:
    *((_QWORD *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((_BYTE *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 15;
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    v4 |= 0x400uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -14;
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(llvm::detail::IEEEFloat *this, const llvm::APInt **a2)
{
  unint64_t v2;
  const llvm::APInt *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *((unsigned int *)a2 + 2);
  if (v2 >= 0x41)
    v3 = *a2;
  else
    v3 = (const llvm::APInt *)a2;
  v4 = *(_QWORD *)v3 & 3;
  v5 = *((_QWORD *)v3 + ((v2 + 63) >> 6) - 1);
  v6 = (v5 >> 2) & 0x1F;
  *(_QWORD *)this = &llvm::semFloat8E5M2;
  v7 = (v5 >> 4) & 8;
  v8 = *((_BYTE *)this + 20) & 0xF7 | v7;
  *((_BYTE *)this + 20) = v8;
  if (v6 == 31 && v4 == 0)
  {
    llvm::detail::IEEEFloat::makeInf(this, v7 != 0);
    return;
  }
  if (v6 == 31 && v4 != 0)
  {
    *((_BYTE *)this + 20) = v8 & 0xF8 | 1;
    *((_DWORD *)this + 4) = 16;
LABEL_18:
    *((_QWORD *)this + 1) = v4;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero(this, v7 != 0);
    return;
  }
  *((_BYTE *)this + 20) = v8 & 0xF8 | 2;
  *((_DWORD *)this + 4) = v6 - 15;
  *((_QWORD *)this + 1) = v4;
  if (v6)
  {
    v4 |= 4uLL;
    goto LABEL_18;
  }
  *((_DWORD *)this + 4) = -14;
}

void llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *(unsigned int *)(a2 + 8);
  v3 = *(_QWORD **)a2;
  if (v2 < 0x41)
    v3 = (_QWORD *)a2;
  v4 = v3[((v2 + 63) >> 6) - 1];
  v5 = *v3 & 3;
  v6 = (v4 >> 2) & 0x1F;
  *(_QWORD *)a1 = &llvm::semFloat8E5M2FNUZ;
  v7 = (v4 >> 4) & 8;
  v8 = *(_BYTE *)(a1 + 20) & 0xF7 | v7;
  *(_BYTE *)(a1 + 20) = v8;
  if (v6 | v5)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 2;
    *(_DWORD *)(a1 + 16) = v6 - 16;
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
      *(_QWORD *)(a1 + 8) = v5 | 4;
    else
      *(_DWORD *)(a1 + 16) = -15;
  }
  else if (v7)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = -16;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, 0);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;
  uint64_t v10;

  v2 = *(unsigned int *)(a2 + 8);
  if (v2 >= 0x41)
    v3 = *(_QWORD **)a2;
  else
    v3 = (_QWORD *)a2;
  v4 = *v3 & 7;
  v5 = v3[((v2 + 63) >> 6) - 1];
  v6 = (v5 >> 3) & 0xF;
  *(_QWORD *)a1 = &llvm::semFloat8E4M3FN;
  v7 = (v5 >> 4) & 8;
  v8 = *(_BYTE *)(a1 + 20) & 0xF7 | v7;
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a1 + 20) & 0xF7 | (v5 >> 4) & 8;
  if (v6 == 15 && v4 == 7)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = 8;
    v10 = 7;
LABEL_13:
    *(_QWORD *)(a1 + 8) = v10;
    return;
  }
  if (!(v6 | v4))
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, v7 != 0);
    return;
  }
  *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 2;
  *(_DWORD *)(a1 + 16) = v6 - 7;
  *(_QWORD *)(a1 + 8) = v4;
  if (v6)
  {
    v10 = v4 | 8;
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 16) = -6;
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *(unsigned int *)(a2 + 8);
  v3 = *(_QWORD **)a2;
  if (v2 < 0x41)
    v3 = (_QWORD *)a2;
  v4 = v3[((v2 + 63) >> 6) - 1];
  v5 = *v3 & 7;
  v6 = (v4 >> 3) & 0xF;
  *(_QWORD *)a1 = &llvm::semFloat8E4M3FNUZ;
  v7 = (v4 >> 4) & 8;
  v8 = *(_BYTE *)(a1 + 20) & 0xF7 | v7;
  *(_BYTE *)(a1 + 20) = v8;
  if (v6 | v5)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 2;
    *(_DWORD *)(a1 + 16) = v6 - 8;
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
      *(_QWORD *)(a1 + 8) = v5 | 8;
    else
      *(_DWORD *)(a1 + 16) = -7;
  }
  else if (v7)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = -8;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, 0);
  }
}

void llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v8;

  v2 = *(unsigned int *)(a2 + 8);
  v3 = *(_QWORD **)a2;
  if (v2 < 0x41)
    v3 = (_QWORD *)a2;
  v4 = v3[((v2 + 63) >> 6) - 1];
  v5 = *v3 & 7;
  v6 = (v4 >> 3) & 0xF;
  *(_QWORD *)a1 = &llvm::semFloat8E4M3B11FNUZ;
  v7 = (v4 >> 4) & 8;
  v8 = *(_BYTE *)(a1 + 20) & 0xF7 | v7;
  *(_BYTE *)(a1 + 20) = v8;
  if (v6 | v5)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 2;
    *(_DWORD *)(a1 + 16) = v6 - 11;
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
      *(_QWORD *)(a1 + 8) = v5 | 8;
    else
      *(_DWORD *)(a1 + 16) = -10;
  }
  else if (v7)
  {
    *(_BYTE *)(a1 + 20) = v8 & 0xF8 | 1;
    *(_DWORD *)(a1 + 16) = -11;
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    llvm::detail::IEEEFloat::makeZero((llvm::detail::IEEEFloat *)a1, 0);
  }
}

void llvm::detail::IEEEFloat::initFromAPInt(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &llvm::semIEEEhalf)
  {
    llvm::detail::IEEEFloat::initFromHalfAPInt(a1, a3);
  }
  else if (a2 == &llvm::semBFloat)
  {
    llvm::detail::IEEEFloat::initFromBFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEsingle)
  {
    llvm::detail::IEEEFloat::initFromFloatAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEdouble)
  {
    llvm::detail::IEEEFloat::initFromDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semX87DoubleExtended)
  {
    llvm::detail::IEEEFloat::initFromF80LongDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semIEEEquad)
  {
    llvm::detail::IEEEFloat::initFromQuadrupleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semPPCDoubleDoubleLegacy)
  {
    llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E5M2)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2APInt(a1, a3);
  }
  else if (a2 == &llvm::semFloat8E5M2FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E5M2FNUZAPInt((uint64_t)a1, (uint64_t)a3);
  }
  else if (a2 == &llvm::semFloat8E4M3FN)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNAPInt((uint64_t)a1, (uint64_t)a3);
  }
  else if (a2 == &llvm::semFloat8E4M3FNUZ)
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3FNUZAPInt((uint64_t)a1, (uint64_t)a3);
  }
  else
  {
    llvm::detail::IEEEFloat::initFromFloat8E4M3B11FNUZAPInt((uint64_t)a1, (uint64_t)a3);
  }
}

void llvm::detail::IEEEFloat::toString(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4, int a5)
{
  int v9;
  char *v10;
  char *v11;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  signed int v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  llvm::APInt *v32;
  unsigned int v33;
  _QWORD *v34;
  unsigned int **v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  char *v41;
  size_t v42;
  _BYTE *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  char v55;
  char v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int v63;
  void *v64;
  __int128 v65;
  uint64_t v66;
  unsigned int **v67;
  unsigned int v68;
  llvm::APInt *v69;
  unsigned int v70;
  llvm::APInt *v71;
  unsigned int v72;
  void *__dst;
  __int128 v74;
  _QWORD v75[33];

  v75[32] = *MEMORY[0x24BDAC8D0];
  v9 = *(_BYTE *)(a1 + 20) & 7;
  if (v9 == 3)
  {
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 45);
    if (a4)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
      return;
    }
    if (!a5)
    {
      llvm::SmallVectorImpl<char>::append<char const*,void>(a2, "0.0", "");
      if (a3 >= 2)
        llvm::SmallVectorImpl<char>::append(a2, a3 - 1, 48);
      v10 = "e+00";
      goto LABEL_63;
    }
    v10 = "0.0E+0";
    v11 = "";
LABEL_64:
    llvm::SmallVectorImpl<char>::append<char const*,void>(a2, v10, v11);
    return;
  }
  if (v9 == 1)
  {
    v10 = "NaN";
    v11 = "";
    goto LABEL_64;
  }
  if ((*(_BYTE *)(a1 + 20) & 7) == 0)
  {
    if ((*(_BYTE *)(a1 + 20) & 8) != 0)
      v10 = "-Inf";
    else
      v10 = "+Inf";
LABEL_63:
    v11 = v10 + 4;
    goto LABEL_64;
  }
  if ((*(_BYTE *)(a1 + 20) & 8) != 0)
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 45);
  v13 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  v14 = (_QWORD *)(a1 + 8);
  if ((v13 - 64) <= 0xFFFFFF7F)
    v14 = (_QWORD *)*v14;
  v15 = *(_DWORD *)(a1 + 16);
  v70 = *(_DWORD *)(*(_QWORD *)a1 + 8);
  llvm::APInt::initFromArray((llvm::APInt *)&v69, v14, (v13 + 63) >> 6);
  if (!a3)
    a3 = 59 * *(_DWORD *)(*(_QWORD *)a1 + 8) / 0xC4u + 2;
  v16 = v70;
  if (v70 > 0x40)
  {
    v18 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v69);
    llvm::APInt::tcShiftRight(v69, (unint64_t *)((unint64_t)(v16 + 63) >> 6), v18);
  }
  else
  {
    v17 = __clz(__rbit64((unint64_t)v69));
    if (v70 >= v17)
      v18 = v17;
    else
      v18 = v70;
    if (v70 > v17)
      v69 = (llvm::APInt *)((unint64_t)v69 >> v18);
    else
      v69 = 0;
  }
  v19 = v15 - v13 + v18;
  v20 = v19 + 1;
  if (v19 != -1)
  {
    if (v20 < 1)
    {
      v21 = -v20;
      v22 = *(_DWORD *)(*(_QWORD *)a1 + 8) + (-137 * v20 + 136) / 59;
      llvm::APInt::zext((llvm::APInt *)&v69, v22, (llvm::APInt *)&__dst);
      if (v70 >= 0x41 && v69)
        MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
      v69 = (llvm::APInt *)__dst;
      v70 = v74;
      llvm::APInt::APInt((llvm::APInt *)&__dst, v22, 5, 0);
      if ((v21 & 1) != 0)
LABEL_38:
        llvm::APInt::operator*=((uint64_t)&v69, (const unint64_t ***)&__dst);
      while (v21 >= 2)
      {
        v21 >>= 1;
        llvm::APInt::operator*=((uint64_t)&__dst, (const unint64_t ***)&__dst);
        if ((v21 & 1) != 0)
          goto LABEL_38;
      }
      if (v74 >= 0x41 && __dst)
        MEMORY[0x24BD1B380](__dst, 0x1000C8000313F17);
    }
    else
    {
      llvm::APInt::zext((llvm::APInt *)&v69, *(_DWORD *)(*(_QWORD *)a1 + 8) + v20, (llvm::APInt *)&__dst);
      if (v70 >= 0x41 && v69)
        MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
      v69 = (llvm::APInt *)__dst;
      v70 = v74;
      llvm::APInt::operator<<=(&v69, v20);
      v20 = 0;
    }
  }
  v23 = v70;
  if (v70 > 0x40)
    v24 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v69);
  else
    v24 = v70 + __clz((unint64_t)v69) - 64;
  v25 = (196 * a3 + 58) / 0x3B;
  if (v23 - v24 > v25)
  {
    v26 = 59 * (v23 - v24 - v25);
    if (v26 >= 0xC4)
    {
      v27 = 59 * (v23 - v24 - v25);
      v28 = v26 / 0xC4;
      llvm::APInt::APInt((llvm::APInt *)&__dst, v23, 1, 0);
      llvm::APInt::APInt((llvm::APInt *)&v64, v70, 10, 0);
      v29 = v27 / 0xC4;
      if ((v28 & 1) == 0)
        goto LABEL_52;
LABEL_51:
      llvm::APInt::operator*=((uint64_t)&__dst, (const unint64_t ***)&v64);
LABEL_52:
      while (v29 >= 2)
      {
        v29 >>= 1;
        llvm::APInt::operator*=((uint64_t)&v64, (const unint64_t ***)&v64);
        if ((v29 & 1) != 0)
          goto LABEL_51;
      }
      llvm::APInt::udiv((llvm::APInt *)&v69, (const llvm::APInt *)&__dst, (llvm::APInt *)&v71);
      if (v70 >= 0x41 && v69)
        MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
      v69 = v71;
      v30 = v72;
      v70 = v72;
      if (v72 > 0x40)
        v31 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v69);
      else
        v31 = v72 + __clz((unint64_t)v71) - 64;
      llvm::APInt::trunc((llvm::APInt *)&v69, v30 - v31, (llvm::APInt *)&v71);
      if (v70 >= 0x41 && v69)
        MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
      v69 = v71;
      v70 = v72;
      if (v65 >= 0x41 && v64)
        MEMORY[0x24BD1B380](v64, 0x1000C8000313F17);
      v20 += v28;
      if (v74 >= 0x41 && __dst)
        MEMORY[0x24BD1B380](__dst, 0x1000C8000313F17);
      v23 = v70;
    }
  }
  __dst = v75;
  v74 = xmmword_24AA2ACF0;
  if (v23 <= 3)
  {
    v69 = (llvm::APInt *)(v69 & 0xF);
    v23 = 4;
    v70 = 4;
  }
  llvm::APInt::APInt((llvm::APInt *)&v71, v23, 10, 0);
  llvm::APInt::APInt((llvm::APInt *)&v67, v23, 0, 0);
  LOBYTE(v23) = 1;
  while (1)
  {
    v33 = v70;
    if (v70 >= 0x41)
    {
      if (v33 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v69) > 0x40)
        goto LABEL_84;
      v34 = v69;
    }
    else
    {
      v34 = &v69;
    }
    if (!*v34)
      break;
LABEL_84:
    llvm::APInt::udivrem((llvm::APInt *)&v69, (const llvm::APInt *)&v71, (const llvm::APInt *)&v69, (llvm::APInt *)&v67, v32);
    if (v68 >= 0x41)
      v35 = v67;
    else
      v35 = (unsigned int **)&v67;
    v36 = *(unsigned int *)v35;
    v23 = v23 & (v36 == 0);
    if (v23 == 1)
      ++v20;
    else
      llvm::SmallVectorTemplateBase<char,true>::push_back(&__dst, v36 + 48);
  }
  v37 = v74;
  v38 = v74 - a3;
  if (v74 <= a3)
    goto LABEL_107;
  v39 = __dst;
  if (*((char *)__dst + (v38 - 1)) >= 53)
  {
    v44 = a3;
    while (1)
    {
      v45 = v38;
      v46 = *((unsigned __int8 *)__dst + v38);
      if (v46 != 57)
        break;
      LODWORD(v38) = v45 + 1;
      if (!--v44)
        goto LABEL_123;
    }
    *((_BYTE *)__dst + v45) = v46 + 1;
    if (v44)
    {
      v20 += v45;
      v39 = __dst;
      v41 = (char *)__dst + v45;
      v42 = v74 - v45;
      if ((_QWORD)v74 == v45)
        goto LABEL_98;
      goto LABEL_105;
    }
LABEL_123:
    v20 += v37;
    *(_QWORD *)&v74 = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&__dst, 49);
    v37 = v74;
    if (a4)
      goto LABEL_108;
    goto LABEL_124;
  }
  if (v38 < v74)
  {
    v40 = a3;
    while (*((_BYTE *)__dst + v38) == 48)
    {
      ++v38;
      if (!--v40)
      {
        LODWORD(v38) = v74;
        break;
      }
    }
  }
  v20 += v38;
  v41 = (char *)__dst + v38;
  v42 = v74 - v38;
  if ((_QWORD)v74 == v38)
  {
LABEL_98:
    v43 = v39;
  }
  else
  {
LABEL_105:
    memmove(v39, v41, v42);
    v43 = __dst;
  }
  v37 = (_DWORD)v39 + v42 - (_DWORD)v43;
  *(_QWORD *)&v74 = &v39[v42] - v43;
LABEL_107:
  if (a4)
  {
LABEL_108:
    if ((v20 & 0x80000000) == 0)
    {
      if (v20 <= a4 && v20 + v37 <= a3)
      {
        if (v37)
        {
          v47 = v37;
          v48 = v37 - 1;
          do
          {
            llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((_BYTE *)__dst + v48--));
            --v47;
          }
          while (v47);
        }
        for (; v20; --v20)
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
        goto LABEL_151;
      }
      goto LABEL_124;
    }
    v49 = v20 + v37;
    if (((v20 + v37 - 1) & 0x80000000) != 0 && 1 - v49 > a4)
      goto LABEL_124;
    if (v49 < 1)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
      if (v49)
      {
        do
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
        while (!__CFADD__(v49++, 1));
        v49 = 0;
      }
    }
    else
    {
      v50 = v37 - 1;
      v51 = v20 + v37;
      do
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((_BYTE *)__dst + v50--));
        --v51;
      }
      while (v51);
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
    }
    if (v49 != v37)
    {
      v63 = ~v49 + v37;
      do
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((_BYTE *)__dst + v63--));
      while (v63 != -1);
    }
  }
  else
  {
LABEL_124:
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((_BYTE *)__dst + v37 - 1));
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 46);
    v52 = v37 - 1;
    if (v37 == 1 && (a5 & 1) != 0)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 48);
    }
    else if (v37 != 1)
    {
      v53 = v37 - 2;
      do
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((_BYTE *)__dst + v53--));
      while (v53 != -1);
    }
    v54 = v52 + v20;
    if ((a5 & 1) != 0)
    {
      v55 = 69;
    }
    else
    {
      if (a3 > v52)
        llvm::SmallVectorImpl<char>::append(a2, a3 - v37 + 1, 48);
      v55 = 101;
    }
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v55);
    if (v54 < 0)
      v56 = 45;
    else
      v56 = 43;
    if (v54 >= 0)
      v57 = v54;
    else
      v57 = -v54;
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v56);
    v64 = &v66;
    v65 = xmmword_24AA2B110;
    do
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v64, (v57 % 0xA) | 0x30);
      v58 = v57 > 9;
      v57 /= 0xAu;
    }
    while (v58);
    v59 = v65;
    if ((a5 & 1) == 0 && (unint64_t)v65 <= 1)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v64, 48);
      v59 = v65;
    }
    v60 = v59;
    if (v59)
    {
      v61 = v59 - 1;
      do
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, *((_BYTE *)v64 + v61--));
        --v60;
      }
      while (v60);
    }
    if (v64 != &v66)
      free(v64);
  }
LABEL_151:
  if (v68 >= 0x41 && v67)
    MEMORY[0x24BD1B380](v67, 0x1000C8000313F17);
  if (v72 >= 0x41 && v71)
    MEMORY[0x24BD1B380](v71, 0x1000C8000313F17);
  if (__dst != v75)
    free(__dst);
  if (v70 >= 0x41 && v69)
    MEMORY[0x24BD1B380](v69, 0x1000C8000313F17);
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2)
{
  _OWORD *v3;

  *a1 = a2;
  v3 = (_OWORD *)operator new[]();
  *v3 = xmmword_24AA2B120;
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)v3 + 24), (uint64_t)&llvm::semIEEEdouble);
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)((char *)v3 + 56), (uint64_t)&llvm::semIEEEdouble);
  a1[1] = v3 + 1;
  return a1;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v5;
  _OWORD *v6;
  llvm::detail::IEEEFloat *v7;
  llvm::detail::IEEEFloat *v8;
  const llvm::APInt **v9;
  const llvm::APInt *v10;
  const llvm::APInt **v11;
  const llvm::APInt *v12;
  const llvm::APInt *v14;
  int v15;
  const llvm::APInt *v16;
  int v17;

  *a1 = a2;
  v5 = (_OWORD *)operator new[]();
  v6 = v5 + 1;
  v7 = (llvm::detail::IEEEFloat *)((char *)v5 + 24);
  *v5 = xmmword_24AA2B120;
  v8 = (llvm::detail::IEEEFloat *)((char *)v5 + 56);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v9 = *(const llvm::APInt ***)a3;
  else
    v9 = (const llvm::APInt **)a3;
  v10 = *v9;
  v17 = 64;
  v16 = v10;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v7, &v16);
  if (*(_DWORD *)(a3 + 8) >= 0x41u)
    v11 = *(const llvm::APInt ***)a3;
  else
    v11 = (const llvm::APInt **)a3;
  v12 = v11[1];
  v15 = 64;
  v14 = v12;
  llvm::detail::IEEEFloat::initFromDoubleAPInt(v8, &v14);
  a1[1] = v6;
  return a1;
}

_QWORD *llvm::detail::DoubleAPFloat::DoubleAPFloat(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = a2;
  v7 = operator new[]();
  *(_OWORD *)v7 = xmmword_24AA2B120;
  v8 = (_QWORD *)(v7 + 24);
  if (*(_UNKNOWN **)(a3 + 8) == &llvm::semPPCDoubleDouble)
  {
    v9 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(v7 + 24) = &llvm::semPPCDoubleDouble;
    *(_QWORD *)(v7 + 32) = v9;
    *(_QWORD *)(a3 + 8) = &llvm::semBogus;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    *v8 = &llvm::semBogus;
    llvm::detail::IEEEFloat::operator=((uint64_t)v8, a3 + 8);
  }
  if (*(_UNKNOWN **)(a4 + 8) == &llvm::semPPCDoubleDouble)
  {
    v10 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(v7 + 56) = &llvm::semPPCDoubleDouble;
    *(_QWORD *)(v7 + 64) = v10;
    *(_QWORD *)(a4 + 8) = &llvm::semBogus;
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(v7 + 56) = &llvm::semBogus;
    llvm::detail::IEEEFloat::operator=(v7 + 56, a4 + 8);
  }
  a1[1] = v7 + 16;
  return a1;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::DoubleAPFloat(llvm::detail::DoubleAPFloat *this, const llvm::detail::DoubleAPFloat *a2)
{
  _OWORD *v4;
  _OWORD *v5;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((_QWORD *)a2 + 1))
  {
    v4 = (_OWORD *)operator new[]();
    v5 = v4 + 1;
    *v4 = xmmword_24AA2B120;
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)((char *)v4 + 24), (const llvm::APFloat::Storage *)(*((_QWORD *)a2 + 1) + 8));
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)((char *)v4 + 56), (const llvm::APFloat::Storage *)(*((_QWORD *)a2 + 1) + 40));
  }
  else
  {
    v5 = 0;
  }
  *((_QWORD *)this + 1) = v5;
  return this;
}

llvm::detail::DoubleAPFloat *llvm::detail::DoubleAPFloat::operator=(llvm::detail::DoubleAPFloat *this, llvm::detail::DoubleAPFloat *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_QWORD *)this == *(_QWORD *)a2 && (v6 = *((_QWORD *)a2 + 1)) != 0)
  {
    llvm::APFloat::Storage::operator=(*((_QWORD *)this + 1) + 8, (llvm::detail::DoubleAPFloat *)(v6 + 8));
    llvm::APFloat::Storage::operator=(*((_QWORD *)this + 1) + 40, (llvm::detail::DoubleAPFloat *)(*((_QWORD *)a2 + 1) + 40));
  }
  else if (this != a2)
  {
    v4 = (char *)this + 8;
    v5 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>((uint64_t)v4, v5);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(this, a2);
  }
  return this;
}

void llvm::APFloat::add(uint64_t a1, uint64_t a2, int a3)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;

  v4 = *(void **)(a1 + 8);
  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v4 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::addWithSpecial((int)v3, v3, (llvm::detail::DoubleAPFloat *)(a2 + 8), v3, a3);
  else
    llvm::detail::IEEEFloat::addOrSubtract(v3, (const llvm::detail::IEEEFloat *)(a2 + 8), a3, 0);
}

void llvm::APFloat::makeZero(llvm::APFloat *this, int a2)
{
  llvm::APFloat *v2;
  int v3;
  uint64_t v4;

  v2 = this;
  if (*((_UNKNOWN **)this + 1) == &llvm::semPPCDoubleDouble)
  {
    do
    {
      llvm::APFloat::makeZero(*((llvm::APFloat **)v2 + 2), a2 & 1);
      v3 = 0;
      LOBYTE(a2) = 0;
      v4 = *((_QWORD *)v2 + 2);
      v2 = (llvm::APFloat *)(v4 + 32);
    }
    while (*(_UNKNOWN **)(v4 + 40) == &llvm::semPPCDoubleDouble);
  }
  else
  {
    v3 = a2;
  }
  llvm::detail::IEEEFloat::makeZero((llvm::APFloat *)((char *)v2 + 8), v3);
}

uint64_t llvm::APFloat::compareAbsoluteValue(llvm::APFloat *this, const llvm::APFloat *a2)
{
  llvm::detail::IEEEFloat *v3;
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  unsigned int v16;

  v4 = (void *)*((_QWORD *)this + 1);
  v3 = (llvm::APFloat *)((char *)this + 8);
  if (v4 != &llvm::semPPCDoubleDouble)
    return llvm::detail::IEEEFloat::compareAbsoluteValue(v3, (const llvm::APFloat *)((char *)a2 + 8));
  v6 = *((_QWORD *)this + 2);
  v7 = *((_QWORD *)a2 + 2);
  result = llvm::APFloat::compareAbsoluteValue((llvm::APFloat *)v6, (const llvm::APFloat *)v7);
  if ((_DWORD)result == 1)
  {
    v8 = v6 + 32;
    v9 = v7 + 32;
    result = llvm::APFloat::compareAbsoluteValue((llvm::APFloat *)(v6 + 32), (const llvm::APFloat *)(v7 + 32));
    if ((result & 1) == 0)
    {
      v10 = v6;
      if (*(_UNKNOWN **)(v6 + 8) == &llvm::semPPCDoubleDouble)
        v10 = *(_QWORD *)(v6 + 16);
      v11 = *(unsigned __int8 *)(v10 + 28);
      if (*(_UNKNOWN **)(v6 + 40) == &llvm::semPPCDoubleDouble)
        v8 = *(_QWORD *)(v6 + 48);
      v12 = v11 ^ *(unsigned __int8 *)(v8 + 28);
      v13 = v7;
      if (*(_UNKNOWN **)(v7 + 8) == &llvm::semPPCDoubleDouble)
        v13 = *(_QWORD *)(v7 + 16);
      v14 = (v12 >> 3) & 1;
      v15 = *(unsigned __int8 *)(v13 + 28);
      if (*(_UNKNOWN **)(v7 + 40) == &llvm::semPPCDoubleDouble)
        v9 = *(_QWORD *)(v7 + 48);
      v16 = ((v15 ^ *(unsigned __int8 *)(v9 + 28)) >> 3) & 1;
      if (((v14 ^ 1) & 1) != 0 || v16)
      {
        if (((v14 ^ 1) & v16 & 1) != 0)
        {
          return 2;
        }
        else if ((v14 | v16) == 1 && (v14 & v16 & 1) != 0)
        {
          return (2 - result);
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

void llvm::APFloat::subtract(uint64_t a1, uint64_t a2, int a3)
{
  llvm::detail::DoubleAPFloat *v3;
  llvm::detail::DoubleAPFloat *v4;
  int v6;

  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v4 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::changeSign(*(_QWORD *)(a1 + 16));
    v6 = llvm::APFloat::changeSign(*(_QWORD *)(a1 + 16) + 32);
    llvm::detail::DoubleAPFloat::addWithSpecial(v6, (int)v3, v4, v3);
    llvm::APFloat::changeSign(*(_QWORD *)(a1 + 16));
    llvm::APFloat::changeSign(*(_QWORD *)(a1 + 16) + 32);
  }
  else
  {
    llvm::detail::IEEEFloat::addOrSubtract((llvm::detail::IEEEFloat *)(a1 + 8), (const llvm::detail::IEEEFloat *)(a2 + 8), a3, 1);
  }
}

uint64_t llvm::APFloat::changeSign(uint64_t this)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  int v4;
  char v5;

  v1 = this;
  for (i = *(_QWORD *)(this + 8); (_UNKNOWN *)i == &llvm::semPPCDoubleDouble; i = *(_QWORD *)(v3 + 40))
  {
    this = llvm::APFloat::changeSign(*(llvm::APFloat **)(v1 + 16));
    v3 = *(_QWORD *)(v1 + 16);
    v1 = v3 + 32;
  }
  v4 = *(_DWORD *)(i + 20);
  v5 = *(_BYTE *)(v1 + 28);
  if (v4 != 2 || (v5 & 5 | 2) != 3)
    *(_BYTE *)(v1 + 28) = v5 ^ 8;
  return this;
}

uint64_t llvm::detail::DoubleAPFloat::addWithSpecial(int a1, llvm::detail::DoubleAPFloat *a2, llvm::detail::DoubleAPFloat *a3, llvm::detail::DoubleAPFloat *this, int a5)
{
  uint64_t v9;
  const llvm::APFloat::Storage *v10;
  void *v11;
  uint64_t v12;
  llvm::detail::DoubleAPFloat *v13;
  llvm::detail::DoubleAPFloat *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  char v38;
  int v39;
  uint64_t v40;
  char v41;
  int v42;
  int v43;
  int v44;
  char *v45;
  char *v46;
  int v47;
  char v48;
  llvm::detail::DoubleAPFloat *v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  char v55;
  _BYTE v56[24];
  char v57[8];
  _BYTE v58[24];
  char v59;
  _BYTE v60[24];
  char v61[8];
  _BYTE v62[24];
  char v63;
  _QWORD v64[2];
  char v65;
  char v66[8];
  _BYTE v67[24];
  char v68[8];
  void *v69;
  uint64_t v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v9 = *((_QWORD *)a2 + 1);
  v10 = (const llvm::APFloat::Storage *)(v9 + 8);
  v11 = *(void **)(v9 + 8);
  v12 = v9;
  if (v11 == &llvm::semPPCDoubleDouble)
    v12 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v12 + 28) & 7) == 1)
    goto LABEL_4;
  v15 = *((_QWORD *)a3 + 1);
  v16 = *(void **)(v15 + 8);
  v17 = v15;
  if (v16 == &llvm::semPPCDoubleDouble)
    v17 = *(_QWORD *)(v15 + 16);
  if ((*(_BYTE *)(v17 + 28) & 7) == 1)
    goto LABEL_11;
  v18 = v9;
  if (v11 == &llvm::semPPCDoubleDouble)
    v18 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v18 + 28) & 7) == 3)
  {
LABEL_11:
    v13 = this;
    v14 = a3;
    goto LABEL_12;
  }
  v21 = *((_QWORD *)a3 + 1);
  if (v16 == &llvm::semPPCDoubleDouble)
    v21 = *(_QWORD *)(v15 + 16);
  if ((*(_BYTE *)(v21 + 28) & 7) == 3)
    goto LABEL_4;
  v22 = v9;
  if (v11 == &llvm::semPPCDoubleDouble)
    v22 = *(_QWORD *)(v9 + 16);
  if ((*(_BYTE *)(v22 + 28) & 7) != 0)
    goto LABEL_31;
  v23 = *((_QWORD *)a3 + 1);
  if (v16 == &llvm::semPPCDoubleDouble)
    v23 = *(_QWORD *)(v15 + 16);
  if ((*(_BYTE *)(v23 + 28) & 7) != 0)
    goto LABEL_31;
  v24 = v9;
  if (v11 == &llvm::semPPCDoubleDouble)
    v24 = *(_QWORD *)(v9 + 16);
  v25 = *(unsigned __int8 *)(v24 + 28);
  v26 = *((_QWORD *)a3 + 1);
  if (v16 == &llvm::semPPCDoubleDouble)
    v26 = *(_QWORD *)(v15 + 16);
  if (((v25 >> 3) & 1) == (*(_BYTE *)(v26 + 28) & 8) >> 3)
  {
LABEL_31:
    if (v11 == &llvm::semPPCDoubleDouble)
      v9 = *(_QWORD *)(v9 + 16);
    if ((*(_BYTE *)(v9 + 28) & 7) != 0)
    {
      if (v16 == &llvm::semPPCDoubleDouble)
        v15 = *(_QWORD *)(v15 + 16);
      if ((*(_BYTE *)(v15 + 28) & 7) == 0)
        goto LABEL_11;
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v62, v10);
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v60, (const llvm::APFloat::Storage *)(*((_QWORD *)a2 + 1) + 40));
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v58, (const llvm::APFloat::Storage *)(*((_QWORD *)a3 + 1) + 8));
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v56, (const llvm::APFloat::Storage *)(*((_QWORD *)a3 + 1) + 40));
      llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)&v69, (const llvm::APFloat::Storage *)v62);
      v19 = llvm::APFloat::add((int)v68, (int)v57, a5);
      if (v69 == &llvm::semPPCDoubleDouble)
        v28 = *(_BYTE *)(v70 + 28);
      else
        v28 = v71;
      if ((v28 & 6) != 0)
      {
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v67, (const llvm::APFloat::Storage *)v62);
        llvm::APFloat::subtract((uint64_t)v66, (uint64_t)v68, a5);
        v30 = v29;
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v64, (const llvm::APFloat::Storage *)v67);
        v31 = llvm::APFloat::add((int)&v63, (int)v57, a5);
        v32 = llvm::APFloat::add((int)v66, (int)v68, a5);
        llvm::APFloat::subtract((uint64_t)v66, (uint64_t)v61, a5);
        v34 = v33;
        llvm::APFloat::changeSign((uint64_t)v66);
        v35 = llvm::APFloat::add((int)&v63, (int)v66, a5);
        v36 = llvm::APFloat::add((int)&v63, (int)&v59, a5);
        v37 = v30 | v31 | v32 | v34 | v35 | v36 | llvm::APFloat::add((int)&v63, (int)&v55, a5) | v19;
        if ((_UNKNOWN *)v64[0] == &llvm::semPPCDoubleDouble)
          v38 = *(_BYTE *)(v64[1] + 28);
        else
          v38 = v65;
        if ((v38 & 7) != 3 || (v38 & 8) != 0)
        {
          llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)&v69);
          v19 = llvm::APFloat::add(*((_QWORD *)this + 1), (int)&v63, a5) | v37;
          v40 = *((_QWORD *)this + 1);
          if (*(_UNKNOWN **)(v40 + 8) == &llvm::semPPCDoubleDouble)
            v41 = *(_BYTE *)(*(_QWORD *)(v40 + 16) + 28);
          else
            v41 = *(_BYTE *)(v40 + 28);
          if ((v41 & 7u) < 2)
          {
            llvm::APFloat::makeZero((llvm::APFloat *)(v40 + 32), 0);
            v39 = 0;
            v37 = v19;
          }
          else
          {
            llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)(v40 + 40), &v69);
            llvm::APFloat::subtract(*((_QWORD *)this + 1) + 32, *((_QWORD *)this + 1), a5);
            v37 = v42 | llvm::APFloat::add(*((_QWORD *)this + 1) + 32, (int)&v63, a5) | v19;
            v39 = 1;
          }
        }
        else
        {
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)(*((_QWORD *)this + 1) + 8), &v69);
          llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 1) + 32), 0);
          v19 = 0;
          v39 = 0;
        }
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v64);
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v67);
        if (!v39)
          goto LABEL_72;
      }
      else
      {
        if ((v28 & 7) != 0)
          goto LABEL_71;
        v43 = llvm::APFloat::compareAbsoluteValue((llvm::APFloat *)v61, (const llvm::APFloat *)v57);
        llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)&v69, (llvm::detail::DoubleAPFloat *)v56);
        v44 = llvm::APFloat::add((int)v68, (int)&v59, a5);
        v45 = v43 == 2 ? v57 : v61;
        v46 = v43 == 2 ? v61 : v57;
        v54 = (int)v45;
        v47 = llvm::APFloat::add((int)v68, (int)v45, a5);
        v19 = v47 | v44 | llvm::APFloat::add((int)v68, (int)v46, a5);
        v48 = v69 == &llvm::semPPCDoubleDouble ? *(_BYTE *)(v70 + 28) : v71;
        if ((v48 & 7u) < 2)
        {
LABEL_71:
          llvm::APFloat::Storage::operator=((llvm::APFloat::Storage *)(*((_QWORD *)this + 1) + 8), &v69);
          llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 1) + 32), 0);
          goto LABEL_72;
        }
        llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)&v69);
        llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v67, (const llvm::APFloat::Storage *)v60);
        v53 = llvm::APFloat::add((int)v66, (int)&v55, a5);
        if (v43 == 2)
          v49 = (llvm::detail::DoubleAPFloat *)v62;
        else
          v49 = (llvm::detail::DoubleAPFloat *)v58;
        llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 40), v49);
        llvm::APFloat::subtract(*((_QWORD *)this + 1) + 32, (uint64_t)v68, a5);
        v51 = v50;
        v52 = llvm::APFloat::add(*((_QWORD *)this + 1) + 32, v54, a5);
        v37 = v53 | v51 | v52 | llvm::APFloat::add(*((_QWORD *)this + 1) + 32, (int)v66, a5) | v19;
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v67);
      }
      v19 = v37;
LABEL_72:
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)&v69);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v56);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v58);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v60);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v62);
      return v19;
    }
LABEL_4:
    v13 = this;
    v14 = a2;
LABEL_12:
    llvm::detail::DoubleAPFloat::operator=(v13, v14);
    return 0;
  }
  v27 = *((_QWORD *)this + 1);
  if (*(_UNKNOWN **)(v27 + 8) == &llvm::semPPCDoubleDouble)
    v27 = *(_QWORD *)(v27 + 16);
  llvm::detail::DoubleAPFloat::makeNaN((llvm::APFloat **)this, 0, (*(_BYTE *)(v27 + 28) & 8) != 0, 0);
  return 1;
}

void llvm::detail::DoubleAPFloat::makeNaN(llvm::APFloat **this, char a2, char a3, const llvm::APInt *a4)
{
  llvm::APFloat::makeNaN(this[1], a2, a3, a4);
  llvm::APFloat::makeZero((llvm::APFloat *)((char *)this[1] + 32), 0);
}

uint64_t llvm::detail::DoubleAPFloat::multiply(llvm::detail::DoubleAPFloat *this, llvm::detail::DoubleAPFloat *a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v4;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  llvm::detail::DoubleAPFloat *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  char v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  llvm::APFloat::Storage *v28;
  int v29;
  char v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _BYTE v37[8];
  _BYTE v38[24];
  _BYTE v39[8];
  _QWORD v40[2];
  char v41;
  _BYTE v42[8];
  _BYTE v43[24];
  _BYTE v44[8];
  _QWORD v45[2];
  char v46;
  _BYTE v47[8];
  _BYTE v48[24];
  _BYTE v49[8];
  _BYTE v50[24];
  _BYTE v51[24];
  _QWORD v52[5];

  v4 = a2;
  v52[3] = *MEMORY[0x24BDAC8D0];
  v6 = *((_QWORD *)this + 1);
  v7 = *(void **)(v6 + 8);
  v8 = v6;
  if (v7 == &llvm::semPPCDoubleDouble)
    v8 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v8 + 28) & 7) == 1)
  {
LABEL_4:
    v9 = this;
    a2 = this;
LABEL_9:
    llvm::detail::DoubleAPFloat::operator=(v9, a2);
    return 0;
  }
  v10 = *((_QWORD *)a2 + 1);
  v11 = *(void **)(v10 + 8);
  v12 = v10;
  if (v11 == &llvm::semPPCDoubleDouble)
    v12 = *(_QWORD *)(v10 + 16);
  if ((*(_BYTE *)(v12 + 28) & 7) == 1)
    goto LABEL_8;
  v15 = v6;
  if (v7 == &llvm::semPPCDoubleDouble)
    v15 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v15 + 28) & 7) == 3)
  {
    v16 = *((_QWORD *)a2 + 1);
    if (v11 == &llvm::semPPCDoubleDouble)
      v16 = *(_QWORD *)(v10 + 16);
    if ((*(_BYTE *)(v16 + 28) & 7) == 0)
      goto LABEL_24;
  }
  v17 = v6;
  if (v7 == &llvm::semPPCDoubleDouble)
    v17 = *(_QWORD *)(v6 + 16);
  if ((*(_BYTE *)(v17 + 28) & 7) == 0)
  {
    v18 = *((_QWORD *)a2 + 1);
    if (v11 == &llvm::semPPCDoubleDouble)
      v18 = *(_QWORD *)(v10 + 16);
    if ((*(_BYTE *)(v18 + 28) & 7) == 3)
    {
LABEL_24:
      llvm::APFloat::makeNaN((llvm::APFloat *)v6, 0, 0, 0);
      llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 1) + 32), 0);
      return 0;
    }
  }
  if (v7 == &llvm::semPPCDoubleDouble)
    v19 = *(_BYTE *)(*(_QWORD *)(v6 + 16) + 28);
  else
    v19 = *(_BYTE *)(v6 + 28);
  v20 = v19 & 7;
  if (v20 == 3 || !v20)
    goto LABEL_4;
  if (v11 == &llvm::semPPCDoubleDouble)
    v10 = *(_QWORD *)(v10 + 16);
  v21 = *(_BYTE *)(v10 + 28) & 7;
  if (v21 == 3 || !v21)
  {
LABEL_8:
    v9 = this;
    goto LABEL_9;
  }
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v52, (const llvm::APFloat::Storage *)(v6 + 8));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v51, (const llvm::APFloat::Storage *)(*((_QWORD *)this + 1) + 40));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v50, (const llvm::APFloat::Storage *)(*((_QWORD *)v4 + 1) + 8));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v48, (const llvm::APFloat::Storage *)(*((_QWORD *)v4 + 1) + 40));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v45, (const llvm::APFloat::Storage *)v52);
  v13 = llvm::APFloat::multiply(v44, v49, a3);
  if ((_UNKNOWN *)v45[0] == &llvm::semPPCDoubleDouble)
    v22 = *(_BYTE *)(v45[1] + 28);
  else
    v22 = v46;
  if ((v22 & 6) != 0 && (v22 & 7) != 3)
  {
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v43, (const llvm::APFloat::Storage *)v52);
    llvm::APFloat::changeSign((uint64_t)v44);
    llvm::APFloat::fusedMultiplyAdd((uint64_t)v42, (uint64_t)v49, (uint64_t)v44, a3);
    v36 = v23;
    llvm::APFloat::changeSign((uint64_t)v44);
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v40, (const llvm::APFloat::Storage *)v52);
    v35 = llvm::APFloat::multiply(v39, v47, a3);
    llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v38, (const llvm::APFloat::Storage *)v51);
    v34 = llvm::APFloat::multiply(v37, v49, a3);
    llvm::APFloat::add((uint64_t)v39, (uint64_t)v37, a3);
    v25 = v24;
    llvm::APFloat::add((uint64_t)v42, (uint64_t)v39, a3);
    v27 = v26;
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v38);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v40);
    llvm::APFloat::Storage::Storage(v28, (const llvm::APFloat::Storage *)v45);
    llvm::APFloat::add((uint64_t)v39, (uint64_t)v42, a3);
    v13 = v36 | v35 | v34 | v25 | v27 | v29 | v13;
    llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)v40);
    if ((_UNKNOWN *)v40[0] == &llvm::semPPCDoubleDouble)
      v30 = *(_BYTE *)(v40[1] + 28);
    else
      v30 = v41;
    if ((v30 & 7u) < 2)
    {
      llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 1) + 32), 0);
    }
    else
    {
      llvm::APFloat::subtract((uint64_t)v44, (uint64_t)v39, a3);
      v32 = v31;
      llvm::APFloat::add((uint64_t)v44, (uint64_t)v42, a3);
      v13 = v32 | v33 | v13;
      llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 40), (llvm::detail::DoubleAPFloat *)v45);
    }
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v40);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v43);
  }
  else
  {
    llvm::APFloat::Storage::operator=((llvm::detail::IEEEFloat *)(*((_QWORD *)this + 1) + 8), (llvm::detail::DoubleAPFloat *)v45);
    llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 1) + 32), 0);
  }
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v45);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v48);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v50);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v51);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v52);
  return v13;
}

void llvm::APFloat::multiply(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::DoubleAPFloat *v3;
  void *v4;
  llvm::detail::DoubleAPFloat *v5;

  v4 = *(void **)(a1 + 8);
  v3 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v5 = (llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v4 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::multiply(v3, v5, a3);
  else
    llvm::detail::IEEEFloat::multiply(v3, v5, a3);
}

void llvm::APFloat::fusedMultiplyAdd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::detail::IEEEFloat *v4;
  void *v5;
  llvm::APFloat **v6;
  llvm::APFloat **v7;

  v5 = *(void **)(a1 + 8);
  v4 = (llvm::detail::IEEEFloat *)(a1 + 8);
  v6 = (llvm::APFloat **)(a2 + 8);
  v7 = (llvm::APFloat **)(a3 + 8);
  if (v5 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::fusedMultiplyAdd((uint64_t)v4, v6, v7, a4);
  else
    llvm::detail::IEEEFloat::fusedMultiplyAdd(v4, (llvm::detail::IEEEFloat *)v6, (llvm::detail::IEEEFloat *)v7, a4);
}

uint64_t llvm::detail::DoubleAPFloat::divide(uint64_t a1, llvm::APFloat **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const llvm::APInt *v10;
  unsigned int v11;
  _OWORD v12[2];
  _BYTE v13[8];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::APFloat **)a1, (llvm::APInt *)v12);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v14, (const llvm::APInt **)v12);
  if (DWORD2(v12[0]) >= 0x41 && *(_QWORD *)&v12[0])
    MEMORY[0x24BD1B380](*(_QWORD *)&v12[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v10);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v12 + 8), &v10);
  v6 = llvm::APFloat::divide(v13, v12, a3);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)((char *)v12 + 8));
  if (v11 >= 0x41 && v10)
    MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v10, (llvm::APFloat *)v13);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v12, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&v10);
  v7 = a1 + 8;
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v12 == (_OWORD *)a1)
  {
    if (v8)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v7, v8);
  }
  else
  {
    if (v8)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v7, v8);
    *(_OWORD *)a1 = v12[0];
    *(_QWORD *)&v12[0] = &llvm::semBogus;
    *((_QWORD *)&v12[0] + 1) = 0;
  }
  if (v11 >= 0x41 && v10)
    MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v14);
  return v6;
}

uint64_t llvm::detail::DoubleAPFloat::bitcastToAPInt@<X0>(llvm::APFloat **this@<X0>, llvm::APInt *a2@<X8>)
{
  uint64_t *v4;
  _QWORD *v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  llvm::APFloat::bitcastToAPInt((uint64_t *)&v8, this[1]);
  if (v9 >= 0x41)
    v4 = v8;
  else
    v4 = (uint64_t *)&v8;
  v10 = *v4;
  llvm::APFloat::bitcastToAPInt((uint64_t *)&v6, (llvm::APFloat *)((char *)this[1] + 32));
  if (v7 > 0x40)
  {
    v11 = (_QWORD *)*v6;
    MEMORY[0x24BD1B380]();
  }
  else
  {
    v11 = v6;
  }
  if (v9 >= 0x41 && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  *((_DWORD *)a2 + 2) = 128;
  return llvm::APInt::initFromArray(a2, &v10, 2u);
}

void llvm::APFloat::divide(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::detail::IEEEFloat *v3;
  void *v4;
  llvm::APFloat **v5;

  v4 = *(void **)(a1 + 8);
  v3 = (llvm::detail::IEEEFloat *)(a1 + 8);
  v5 = (llvm::APFloat **)(a2 + 8);
  if (v4 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::divide((uint64_t)v3, v5, a3);
  else
    llvm::detail::IEEEFloat::divide(v3, (const llvm::detail::IEEEFloat *)v5, a3);
}

uint64_t *llvm::APFloat::bitcastToAPInt@<X0>(llvm::APInt *__return_ptr a1@<X8>, llvm::APFloat *this@<X0>)
{
  llvm::APFloat **v2;
  void *v3;

  v3 = (void *)*((_QWORD *)this + 1);
  v2 = (llvm::APFloat **)((char *)this + 8);
  if (v3 == &llvm::semPPCDoubleDouble)
    return (uint64_t *)llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, a1);
  else
    return (uint64_t *)llvm::detail::IEEEFloat::bitcastToAPInt((llvm::detail::IEEEFloat *)v2, a1);
}

_QWORD *llvm::detail::DoubleAPFloat::operator=(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = (uint64_t)(a1 + 1);
    v5 = a1[1];
    a1[1] = 0;
    if (v5)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v4, v5);
    *a1 = *a2;
    v6 = a2[1];
    a2[1] = 0;
    a1[1] = v6;
    *a2 = &llvm::semBogus;
  }
  return a1;
}

uint64_t llvm::detail::DoubleAPFloat::mod(llvm::APFloat **this, llvm::APFloat **a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  const llvm::APInt *v8;
  unsigned int v9;
  _OWORD v10[2];
  _BYTE v11[8];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(this, (llvm::APInt *)v10);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v12, (const llvm::APInt **)v10);
  if (DWORD2(v10[0]) >= 0x41 && *(_QWORD *)&v10[0])
    MEMORY[0x24BD1B380](*(_QWORD *)&v10[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v8);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v10 + 8), &v8);
  v4 = llvm::APFloat::mod((llvm::APFloat *)v11, (const llvm::APFloat *)v10);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)((char *)v10 + 8));
  if (v9 >= 0x41 && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v8, (llvm::APFloat *)v11);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&v8);
  v5 = (char *)(this + 1);
  v6 = (uint64_t)this[1];
  this[1] = 0;
  if (v10 == (_OWORD *)this)
  {
    if (v6)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>((uint64_t)v5, v6);
  }
  else
  {
    if (v6)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>((uint64_t)v5, v6);
    *(_OWORD *)this = v10[0];
    *(_QWORD *)&v10[0] = &llvm::semBogus;
    *((_QWORD *)&v10[0] + 1) = 0;
  }
  if (v9 >= 0x41 && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v12);
  return v4;
}

void llvm::APFloat::mod(llvm::APFloat *this, const llvm::APFloat *a2)
{
  llvm::APFloat **v2;
  void *v3;
  llvm::APFloat **v4;

  v3 = (void *)*((_QWORD *)this + 1);
  v2 = (llvm::APFloat **)((char *)this + 8);
  v4 = (llvm::APFloat **)((char *)a2 + 8);
  if (v3 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::mod(v2, v4);
  else
    llvm::detail::IEEEFloat::mod((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)v4);
}

uint64_t llvm::detail::DoubleAPFloat::fusedMultiplyAdd(uint64_t a1, llvm::APFloat **a2, llvm::APFloat **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const llvm::APInt *v12;
  unsigned int v13;
  const llvm::APInt *v14;
  unsigned int v15;
  uint64_t v16;
  _DWORD v17[6];
  _OWORD v18[2];
  _BYTE v19[8];
  _QWORD v20[4];

  v20[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::APFloat **)a1, (llvm::APInt *)v18);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v20, (const llvm::APInt **)v18);
  if (DWORD2(v18[0]) >= 0x41 && *(_QWORD *)&v18[0])
    MEMORY[0x24BD1B380](*(_QWORD *)&v18[0], 0x1000C8000313F17);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a2, (llvm::APInt *)&v14);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)((char *)v18 + 8), &v14);
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a3, (llvm::APInt *)&v12);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v17, &v12);
  v8 = llvm::APFloat::fusedMultiplyAdd(v19, v18, &v16, a4);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v17);
  if (v13 >= 0x41 && v12)
    MEMORY[0x24BD1B380](v12, 0x1000C8000313F17);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)((char *)v18 + 8));
  if (v15 >= 0x41 && v14)
    MEMORY[0x24BD1B380](v14, 0x1000C8000313F17);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v16, (llvm::APFloat *)v19);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(v18, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&v16);
  v9 = a1 + 8;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v18 == (_OWORD *)a1)
  {
    if (v10)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v9, v10);
  }
  else
  {
    if (v10)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v9, v10);
    *(_OWORD *)a1 = v18[0];
    *(_QWORD *)&v18[0] = &llvm::semBogus;
    *((_QWORD *)&v18[0] + 1) = 0;
  }
  if (v17[0] >= 0x41u && v16)
    MEMORY[0x24BD1B380](v16, 0x1000C8000313F17);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v20);
  return v8;
}

void llvm::APFloat::makeInf(llvm::APFloat *this, char a2)
{
  llvm::detail::IEEEFloat *v3;
  void *v4;

  v4 = (void *)*((_QWORD *)this + 1);
  v3 = (llvm::APFloat *)((char *)this + 8);
  if (v4 == &llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::makeInf(*((llvm::APFloat **)this + 2), a2);
    llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 2) + 32), 0);
  }
  else
  {
    llvm::detail::IEEEFloat::makeInf(v3, a2);
  }
}

void llvm::APFloat::makeNaN(llvm::APFloat *this, char a2, char a3, const llvm::APInt *a4)
{
  llvm::detail::IEEEFloat *v5;
  void *v6;

  v6 = (void *)*((_QWORD *)this + 1);
  v5 = (llvm::APFloat *)((char *)this + 8);
  if (v6 == &llvm::semPPCDoubleDouble)
  {
    llvm::APFloat::makeNaN(*((llvm::APFloat **)this + 2), a2, a3, a4);
    llvm::APFloat::makeZero((llvm::APFloat *)(*((_QWORD *)this + 2) + 32), 0);
  }
  else
  {
    llvm::detail::IEEEFloat::makeNaN(v5, a2, a3, a4);
  }
}

uint64_t llvm::detail::DoubleAPFloat::compare(llvm::APFloat **this, const llvm::APFloat **a2)
{
  uint64_t result;

  result = llvm::APFloat::compare(this[1], a2[1]);
  if ((_DWORD)result == 1)
    return llvm::APFloat::compare((llvm::APFloat *)((char *)this[1] + 32), (const llvm::APFloat *)((char *)a2[1] + 32));
  return result;
}

void llvm::APFloat::compare(llvm::APFloat *this, const llvm::APFloat *a2)
{
  llvm::APFloat **v2;
  void *v3;
  const llvm::APFloat **v4;

  v3 = (void *)*((_QWORD *)this + 1);
  v2 = (llvm::APFloat **)((char *)this + 8);
  v4 = (const llvm::APFloat **)((char *)a2 + 8);
  if (v3 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::compare(v2, v4);
  else
    llvm::detail::IEEEFloat::compare((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)v4);
}

uint64_t llvm::detail::DoubleAPFloat::bitwiseIsEqual(llvm::APFloat **this, const llvm::APFloat **a2)
{
  uint64_t result;

  result = llvm::APFloat::bitwiseIsEqual(this[1], a2[1]);
  if ((_DWORD)result)
    return llvm::APFloat::bitwiseIsEqual((llvm::APFloat *)((char *)this[1] + 32), (const llvm::APFloat *)((char *)a2[1] + 32));
  return result;
}

uint64_t llvm::APFloat::bitwiseIsEqual(llvm::APFloat *this, const llvm::APFloat *a2)
{
  llvm::APFloat **v2;
  void *v3;
  void *v4;
  const llvm::APFloat **v5;
  void *v6;

  v4 = (void *)*((_QWORD *)this + 1);
  v2 = (llvm::APFloat **)((char *)this + 8);
  v3 = v4;
  v6 = (void *)*((_QWORD *)a2 + 1);
  v5 = (const llvm::APFloat **)((char *)a2 + 8);
  if (v3 != v6)
    return 0;
  if (v3 == &llvm::semPPCDoubleDouble)
    return llvm::detail::DoubleAPFloat::bitwiseIsEqual(v2, v5);
  return llvm::detail::IEEEFloat::bitwiseIsEqual((llvm::detail::IEEEFloat *)v2, (const llvm::detail::IEEEFloat *)v5);
}

unint64_t llvm::detail::hash_value(llvm::detail *this, const llvm::detail::DoubleAPFloat *a2)
{
  llvm *v3;
  const llvm::APFloat *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[8];
  char v11[56];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = (llvm *)*((_QWORD *)this + 1);
  if (v3)
  {
    v9 = llvm::hash_value(v3, a2);
    v8 = llvm::hash_value((llvm *)(*((_QWORD *)this + 1) + 32), v4);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v10, 0, v10, v11, &v9, &v8);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v10);
    v6 = v12 ^ HIDWORD(*(_QWORD *)this);
    v7 = 0x9DDFEA08EB382D69 * ((8 * *(_QWORD *)this + 8) ^ v6);
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  }
}

unint64_t llvm::hash_value(llvm *this, const llvm::APFloat *a2, uint64_t a3, unint64_t *a4)
{
  llvm::detail *v4;
  void *v5;

  v5 = (void *)*((_QWORD *)this + 1);
  v4 = (llvm *)((char *)this + 8);
  if (v5 == &llvm::semPPCDoubleDouble)
    return llvm::detail::hash_value(v4, a2);
  else
    return llvm::detail::hash_value((llvm::hashing::detail::hash_state **)v4, a2, a3, a4);
}

void llvm::detail::DoubleAPFloat::convertFromString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  __int128 v12;
  _BYTE v13[8];
  _QWORD v14[4];

  v14[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v14, (uint64_t)&llvm::semPPCDoubleDoubleLegacy);
  llvm::APFloat::convertFromString(v13, a2, a3, a4);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v10, (llvm::APFloat *)v13);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v12, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&v10);
  v8 = a1 + 8;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (&v12 == (__int128 *)a1)
  {
    if (v9)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v8, v9);
  }
  else
  {
    if (v9)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v8, v9);
    *(_OWORD *)a1 = v12;
    *(_QWORD *)&v12 = &llvm::semBogus;
    *((_QWORD *)&v12 + 1) = 0;
  }
  if (v11 >= 0x41 && v10)
    MEMORY[0x24BD1B380](v10, 0x1000C8000313F17);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v14);
}

void llvm::APFloat::convertFromString(uint64_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  llvm::detail::IEEEFloat *v5;
  void *v6;

  v6 = *(void **)(a1 + 8);
  v5 = (llvm::detail::IEEEFloat *)(a1 + 8);
  if (v6 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::convertFromString((uint64_t)v5, (uint64_t)a2, a3, a4);
  else
    llvm::detail::IEEEFloat::convertFromString(v5, a2, a3, a4, a5);
}

uint64_t llvm::detail::DoubleAPFloat::convertToInteger(llvm::APFloat **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  const llvm::APInt *v15;
  unsigned int v16;
  _BYTE v17[8];
  _QWORD v18[4];

  v18[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v15);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v18, &v15);
  v13 = llvm::APFloat::convertToInteger(v17, a2, a3, a4, a5, a6, a7);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v18);
  if (v16 >= 0x41 && v15)
    MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
  return v13;
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, llvm::APInt *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  llvm::APFloat **v7;
  void *v8;

  v8 = *(void **)(a1 + 8);
  v7 = (llvm::APFloat **)(a1 + 8);
  if (v8 == &llvm::semPPCDoubleDouble)
    return llvm::detail::DoubleAPFloat::convertToInteger(v7, (uint64_t)a2, a3, a4, a5, a6, (uint64_t)a7);
  else
    return llvm::detail::IEEEFloat::convertToInteger((uint64_t)v7, a2, a3, a4, a5, a6, a7);
}

uint64_t llvm::detail::DoubleAPFloat::convertFromAPInt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned int v13;
  __int128 v14;
  _BYTE v15[8];
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v16, (uint64_t)&llvm::semPPCDoubleDoubleLegacy);
  v8 = llvm::APFloat::convertFromAPInt(v15, a2, a3, a4);
  llvm::APFloat::bitcastToAPInt((llvm::APInt *)&v12, (llvm::APFloat *)v15);
  llvm::detail::DoubleAPFloat::DoubleAPFloat(&v14, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&v12);
  v9 = a1 + 8;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (&v14 == (__int128 *)a1)
  {
    if (v10)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v9, v10);
  }
  else
  {
    if (v10)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(v9, v10);
    *(_OWORD *)a1 = v14;
    *(_QWORD *)&v14 = &llvm::semBogus;
    *((_QWORD *)&v14 + 1) = 0;
  }
  if (v13 >= 0x41 && v12)
    MEMORY[0x24BD1B380](v12, 0x1000C8000313F17);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v16);
  return v8;
}

uint64_t llvm::APFloat::convertFromAPInt(uint64_t a1, char **a2, uint64_t a3, uint64_t a4)
{
  llvm::APInt *v4;
  void *v5;

  v5 = *(void **)(a1 + 8);
  v4 = (llvm::APInt *)(a1 + 8);
  if (v5 == &llvm::semPPCDoubleDouble)
    return llvm::detail::DoubleAPFloat::convertFromAPInt((uint64_t)v4, (uint64_t)a2, a3, a4);
  else
    return llvm::detail::IEEEFloat::convertFromAPInt(v4, a2, a3, a4);
}

void llvm::detail::DoubleAPFloat::toString(llvm::APFloat **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  const llvm::APInt *v9;
  unsigned int v10;
  _BYTE v11[8];
  _QWORD v12[4];

  v12[3] = *MEMORY[0x24BDAC8D0];
  llvm::detail::DoubleAPFloat::bitcastToAPInt(a1, (llvm::APInt *)&v9);
  llvm::detail::IEEEFloat::initFromPPCDoubleDoubleAPInt((llvm::detail::IEEEFloat *)v12, &v9);
  llvm::APFloat::toString(v11, a2, a3, a4, a5);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v12);
  if (v10 >= 0x41)
  {
    if (v9)
      MEMORY[0x24BD1B380](v9, 0x1000C8000313F17);
  }
}

void llvm::APFloat::toString(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  llvm::APFloat **v5;
  void *v6;

  v6 = *(void **)(a1 + 8);
  v5 = (llvm::APFloat **)(a1 + 8);
  if (v6 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::toString(v5, (uint64_t)a2, a3, a4, a5);
  else
    llvm::detail::IEEEFloat::toString((uint64_t)v5, a2, a3, a4, a5);
}

_QWORD *llvm::APFloat::Storage::Storage(_QWORD *a1, uint64_t *a2, void *a3)
{
  uint64_t v4;
  _DWORD *v6;
  uint64_t v7;
  _BYTE v8[8];
  _BYTE v9[24];
  _BYTE v10[8];
  _QWORD v11[4];

  v11[3] = *MEMORY[0x24BDAC8D0];
  if (a3 == &llvm::semPPCDoubleDouble)
  {
    v4 = *a2;
    v6 = &llvm::semBogus;
    llvm::detail::IEEEFloat::operator=((uint64_t)&v6, (uint64_t)a2);
    llvm::APFloat::APFloat(v10, &v6, v4);
    llvm::detail::IEEEFloat::IEEEFloat((llvm::detail::IEEEFloat *)v9, (uint64_t)&llvm::semIEEEdouble);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)v10, (uint64_t)v8);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v9);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v11);
    if ((v6[2] - 64) <= 0xFFFFFF7F && v7)
      MEMORY[0x24BD1B380](v7, 0x1000C8000313F17);
  }
  else
  {
    *a1 = &llvm::semBogus;
    llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
  }
  return a1;
}

uint64_t llvm::APFloat::APFloat(uint64_t a1, void *a2, char *a3, unint64_t a4)
{
  char v7;
  _QWORD *v8;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::APFloat::Storage::Storage<>((llvm::detail::IEEEFloat *)(a1 + 8), a2);
  llvm::APFloat::convertFromString(a1, a3, a4, 1, (uint64_t)&v11);
  v7 = v12;
  if ((v12 & 1) != 0)
  {
    v8 = v11;
    v11 = 0;
  }
  else
  {
    v8 = 0;
  }
  v10 = v8;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v10);
  if (v10)
    (*(void (**)(_QWORD *))(*v10 + 8))(v10);
  if ((v7 & 1) != 0 && v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  return a1;
}

uint64_t llvm::APFloat::convert(uint64_t a1, void *a2, int a3, _BYTE *a4)
{
  void *v4;
  llvm::APFloat::Storage *v5;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE v16[8];
  void *v17[4];

  v17[3] = *(void **)MEMORY[0x24BDAC8D0];
  v5 = (llvm::APFloat::Storage *)(a1 + 8);
  v4 = *(void **)(a1 + 8);
  if (v4 == a2)
  {
    v8 = 0;
    *a4 = 0;
  }
  else
  {
    if (v4 == &llvm::semPPCDoubleDouble)
    {
      v8 = llvm::detail::IEEEFloat::convert((uint64_t *)(*(_QWORD *)(a1 + 16) + 8), (uint64_t)a2, a3, a4);
      v10 = (uint64_t)v5;
      if (*(_UNKNOWN **)(a1 + 8) == &llvm::semPPCDoubleDouble)
        v10 = *(_QWORD *)(a1 + 16) + 8;
      v12 = &llvm::semBogus;
      llvm::detail::IEEEFloat::operator=((uint64_t)&v12, v10);
      llvm::APFloat::APFloat((uint64_t)v16, (uint64_t)&v12, a2);
      llvm::APFloat::Storage::operator=(v5, v17);
      llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v17);
      if ((v12[2] - 64) > 0xFFFFFF7F)
        return v8;
      v11 = v13;
      if (!v13)
        return v8;
      goto LABEL_13;
    }
    if (a2 != &llvm::semPPCDoubleDouble)
      return llvm::detail::IEEEFloat::convert((uint64_t *)(a1 + 8), (uint64_t)a2, a3, a4);
    v8 = llvm::detail::IEEEFloat::convert((uint64_t *)(a1 + 8), (uint64_t)&llvm::semPPCDoubleDoubleLegacy, a3, a4);
    llvm::detail::IEEEFloat::bitcastToAPInt(v5, (llvm::APInt *)&v14);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v17, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)&v14);
    llvm::APFloat::Storage::operator=(v5, v17);
    llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v17);
    if (v15 >= 0x41)
    {
      v11 = v14;
      if (v14)
LABEL_13:
        MEMORY[0x24BD1B380](v11, 0x1000C8000313F17);
    }
  }
  return v8;
}

llvm::detail::IEEEFloat *llvm::APFloat::getAllOnesValue@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  llvm::detail::IEEEFloat *result;
  const llvm::APInt *v5;
  unsigned int v6;

  llvm::APInt::APInt((llvm::APInt *)&v5, a1[3], -1, 1);
  result = llvm::APFloat::Storage::Storage<llvm::APInt const&>((llvm::detail::IEEEFloat *)(a2 + 8), a1, &v5);
  if (v6 >= 0x41)
  {
    result = v5;
    if (v5)
      return (llvm::detail::IEEEFloat *)MEMORY[0x24BD1B380](v5, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::APFloat::convertToInteger(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned int *)(a2 + 8);
  v13 = v15;
  v14 = 0x400000000;
  llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>((uint64_t)&v13, (unint64_t)(v8 + 63) >> 6);
  v9 = llvm::APFloat::convertToInteger(a1, (llvm::APInt *)v13, v14, v8, *(_BYTE *)(a2 + 12) == 0, a3, a4);
  v12 = v8;
  llvm::APInt::initFromArray((llvm::APInt *)&v11, v13, v14);
  if (*(_DWORD *)(a2 + 8) >= 0x41u && *(_QWORD *)a2)
    MEMORY[0x24BD1B380](*(_QWORD *)a2, 0x1000C8000313F17);
  *(_QWORD *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v12;
  v12 = 0;
  if (v13 != v15)
    free(v13);
  return v9;
}

double llvm::APFloat::convertToDouble(void **this)
{
  llvm::detail::IEEEFloat *v1;
  double v2;
  char v4;
  _BYTE v5[8];
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (this[1] == &llvm::semIEEEdouble)
    return llvm::detail::IEEEFloat::convertToDouble((llvm::detail::IEEEFloat *)(this + 1));
  llvm::APFloat::Storage::Storage((llvm::APFloat::Storage *)v6, (const llvm::APFloat::Storage *)(this + 1));
  llvm::APFloat::convert((uint64_t)v5, &llvm::semIEEEdouble, 1, &v4);
  if ((_UNKNOWN *)v6[0] == &llvm::semPPCDoubleDouble)
    v1 = (llvm::detail::IEEEFloat *)(v6[1] + 8);
  else
    v1 = (llvm::detail::IEEEFloat *)v6;
  v2 = llvm::detail::IEEEFloat::convertToDouble(v1);
  llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)v6);
  return v2;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, unsigned int a2, uint64_t a3, int a4)
{
  *((_DWORD *)this + 2) = a2;
  if (a2 > 0x40)
  {
    llvm::APInt::initSlowCase(this, a3, a4);
  }
  else
  {
    *(_QWORD *)this = a3;
    llvm::APInt::clearUnusedBits((uint64_t)this);
  }
  return this;
}

uint64_t llvm::APInt::clearUnusedBits(uint64_t this)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(this + 8);
  if ((_DWORD)v1)
  {
    v2 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
    if (v1 >= 0x41)
    {
      v3 = (_QWORD *)(*(_QWORD *)this + 8 * (((unint64_t)(v1 + 63) >> 6) - 1));
      goto LABEL_5;
    }
  }
  else
  {
    v2 = 0;
  }
  v3 = (_QWORD *)this;
LABEL_5:
  *v3 &= v2;
  return this;
}

uint64_t llvm::APInt::flipAllBits(uint64_t this)
{
  if (*(_DWORD *)(this + 8) > 0x40u)
    return llvm::APInt::flipAllBitsSlowCase(this);
  *(_QWORD *)this = ~*(_QWORD *)this;
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t llvm::APFloat::APFloat(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  _DWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v7 = &llvm::semBogus;
  llvm::detail::IEEEFloat::operator=((uint64_t)&v7, a2);
  llvm::APFloat::Storage::Storage(v5, (uint64_t *)&v7, a3);
  if ((v7[2] - 64) <= 0xFFFFFF7F && v8)
    MEMORY[0x24BD1B380](v8, 0x1000C8000313F17);
  return a1;
}

llvm::APFloat::Storage *llvm::APFloat::Storage::operator=(llvm::APFloat::Storage *a1, void **a2)
{
  void *v4;
  void *v6;

  v4 = *a2;
  if (*(_UNKNOWN **)a1 == &llvm::semPPCDoubleDouble)
  {
    if (v4 == &llvm::semPPCDoubleDouble)
    {
      llvm::detail::DoubleAPFloat::operator=(a1, a2);
      return a1;
    }
  }
  else if (v4 != &llvm::semPPCDoubleDouble)
  {
LABEL_8:
    llvm::detail::IEEEFloat::operator=((uint64_t)a1, (uint64_t)a2);
    return a1;
  }
  if (a1 != (llvm::APFloat::Storage *)a2)
  {
    llvm::APFloat::Storage::~Storage(a1);
    if (*a2 == &llvm::semPPCDoubleDouble)
    {
      *(_QWORD *)a1 = &llvm::semPPCDoubleDouble;
      v6 = a2[1];
      a2[1] = 0;
      *((_QWORD *)a1 + 1) = v6;
      *a2 = &llvm::semBogus;
      return a1;
    }
    *(_QWORD *)a1 = &llvm::semBogus;
    goto LABEL_8;
  }
  return a1;
}

void llvm::APFloat::Storage::~Storage(llvm::APFloat::Storage *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;

  if (*(_UNKNOWN **)this == &llvm::semPPCDoubleDouble)
  {
    v3 = (char *)this + 8;
    v4 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
      std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>((uint64_t)v3, v4);
  }
  else if ((*(_DWORD *)(*(_QWORD *)this + 8) - 64) <= 0xFFFFFF7F)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      MEMORY[0x24BD1B380](v2, 0x1000C8000313F17);
  }
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage<llvm::APInt const&>(llvm::detail::IEEEFloat *a1, void *a2, const llvm::APInt **a3)
{
  if (a2 == &llvm::semPPCDoubleDouble)
    llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&llvm::semPPCDoubleDouble, (uint64_t)a3);
  else
    llvm::detail::IEEEFloat::initFromAPInt(a1, a2, a3);
  return a1;
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage(llvm::APFloat::Storage *this, const llvm::APFloat::Storage *a2)
{
  if (*(_UNKNOWN **)a2 == &llvm::semPPCDoubleDouble)
    return llvm::detail::DoubleAPFloat::DoubleAPFloat(this, a2);
  else
    return llvm::detail::IEEEFloat::IEEEFloat(this, a2);
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::operator=(llvm::detail::IEEEFloat *result, llvm::detail::DoubleAPFloat *a2)
{
  void *v3;
  llvm::APFloat::Storage *v4;

  v3 = *(void **)a2;
  if (*(_UNKNOWN **)result == &llvm::semPPCDoubleDouble)
  {
    if (v3 == &llvm::semPPCDoubleDouble)
      return llvm::detail::DoubleAPFloat::operator=(result, a2);
  }
  else if (v3 != &llvm::semPPCDoubleDouble)
  {
    return llvm::detail::IEEEFloat::operator=(result, a2);
  }
  if (result != a2)
  {
    llvm::APFloat::Storage::~Storage(result);
    return llvm::APFloat::Storage::Storage(v4, a2);
  }
  return result;
}

void std::default_delete<llvm::APFloat []>::operator()[abi:nn180100]<llvm::APFloat>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 - 8);
    if (v2)
    {
      v3 = a2 - 24;
      v4 = 32 * v2;
      do
      {
        llvm::APFloat::Storage::~Storage((llvm::APFloat::Storage *)(v3 + v4));
        v4 -= 32;
      }
      while (v4);
    }
    JUMPOUT(0x24BD1B380);
  }
}

llvm::detail::IEEEFloat *llvm::APFloat::Storage::Storage<>(llvm::detail::IEEEFloat *a1, void *a2)
{
  if (a2 == &llvm::semPPCDoubleDouble)
    return (llvm::detail::IEEEFloat *)llvm::detail::DoubleAPFloat::DoubleAPFloat(a1, (uint64_t)&llvm::semPPCDoubleDouble);
  else
    return llvm::detail::IEEEFloat::IEEEFloat(a1, (uint64_t)a2);
}

uint64_t llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper(uint64_t this)
{
  _QWORD *v1;
  unsigned __int8 v2;
  int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)(this + 112) = 0;
  *(_OWORD *)(this + 80) = 0u;
  *(_OWORD *)(this + 96) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(_OWORD *)(this + 16) = 0u;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)this = 0u;
  v1 = &unk_25795C000;
  if ((v2 & 1) == 0)
  {
    v6 = this;
    v1 = &unk_25795C000;
    v4 = v3;
    this = v6;
    if (v4)
    {
      v5 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v5 = 0xFF51AFD7ED558CCDLL;
      llvm::hashing::detail::get_execution_seed(void)::seed = v5;
      v1 = (_QWORD *)&unk_25795C000;
      this = v6;
    }
  }
  *(_QWORD *)(this + 120) = v1[278];
  return this;
}

_BYTE *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>(uint64_t a1, uint64_t *a2, _BYTE *__dst, unint64_t a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  char __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(_QWORD *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(_QWORD *)(a1 + 112) = v15;
      v11 = 64;
    }
    *a2 = v11;
    if (a1 + 1 - v8 <= a4)
    {
      memcpy((void *)a1, &__src + v8, 1 - v8);
      a1 += 1 - v8;
    }
  }
  return (_BYTE *)a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, int *a6)
{
  _BYTE *v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;

  v12 = a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  v13 = v12;
  v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

_QWORD *llvm::hashing::detail::hash_state::create@<X0>(llvm::hashing::detail::hash_state *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X3>, llvm::hashing::detail::hash_state *a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = a2;
  v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69 * (a2 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
  *((_QWORD *)a5 + 2) = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  *((_QWORD *)a5 + 3) = __ROR8__(a2 ^ 0xB492B66FBE98F273, 49);
  v6 = a2 ^ (a2 >> 47);
  *((_QWORD *)a5 + 4) = 0xB492B66FBE98F273 * a2;
  *((_QWORD *)a5 + 5) = v6;
  *((_QWORD *)a5 + 6) = 0x9DDFEA08EB382D69
                      * ((0x9DDFEA08EB382D69
                        * (a2 ^ (((0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))))) ^ ((0x9DDFEA08EB382D69 * (a2 ^ (((0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))) ^ a2) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (0xB492B66FBE98F273 * a2))))) >> 47));
  return llvm::hashing::detail::hash_state::mix(a5, this, a3, a4);
}

_QWORD *llvm::hashing::detail::hash_state::mix(llvm::hashing::detail::hash_state *this, llvm::hashing::detail::hash_state *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  _QWORD *result;
  uint64_t v20;

  v6 = *((_QWORD *)this + 1);
  v7 = *((_QWORD *)this + 3);
  v8 = 0xB492B66FBE98F273 * __ROR8__(v6 + *(_QWORD *)this + v7 + *((_QWORD *)a2 + 1), 37);
  v9 = *((_QWORD *)this + 4);
  *(_QWORD *)this = v8;
  v10 = __ROR8__(v9 + v6 + *((_QWORD *)a2 + 6), 42);
  v11 = (unint64_t *)((char *)this + 48);
  v12 = *((_QWORD *)this + 6) ^ v8;
  *(_QWORD *)this = v12;
  *((_QWORD *)this + 1) = 0xB492B66FBE98F273 * v10;
  v13 = 0xB492B66FBE98F273 * v10 + v7 + *((_QWORD *)a2 + 5);
  v15 = (char *)this + 40;
  v14 = *((_QWORD *)this + 5);
  v16 = __ROR8__(v14 + *((_QWORD *)this + 2), 33);
  *((_QWORD *)this + 1) = v13;
  *((_QWORD *)this + 2) = 0xB492B66FBE98F273 * v16;
  *((_QWORD *)this + 3) = 0xB492B66FBE98F273 * v9;
  *((_QWORD *)this + 4) = v14 + v12;
  llvm::hashing::detail::hash_state::mix_32_bytes(a2, (char *)this + 24, (unint64_t *)this + 4, a4);
  v17 = *((_QWORD *)this + 1);
  *(_QWORD *)v15 = *v11 + *((_QWORD *)this + 2);
  *v11 = *((_QWORD *)a2 + 2) + v17;
  result = llvm::hashing::detail::hash_state::mix_32_bytes((_QWORD *)a2 + 4, v15, v11, v18);
  v20 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = *(_QWORD *)this;
  *(_QWORD *)this = v20;
  return result;
}

_QWORD *llvm::hashing::detail::hash_state::mix_32_bytes(_QWORD *this, char *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)a2 + *this;
  *(_QWORD *)a2 = v4;
  v5 = this[3];
  *a3 = __ROR8__(v5 + *a3 + v4, 21);
  v6 = *(_QWORD *)a2;
  v7 = this[1] + *(_QWORD *)a2 + this[2];
  *(_QWORD *)a2 = v7;
  *a3 += v6 + __ROR8__(v7, 44);
  *(_QWORD *)a2 += v5;
  return this;
}

_DWORD *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>(uint64_t a1, uint64_t *a2, _DWORD *__dst, unint64_t a4, int a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  int __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(_QWORD *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(_QWORD *)(a1 + 112) = v15;
      v11 = 64;
    }
    *a2 = v11;
    if (a1 + 4 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 4 - v8);
      a1 += 4 - v8;
    }
  }
  return (_DWORD *)a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine(llvm::hashing::detail::hash_combine_recursive_helper *this, uint64_t a2, char *a3, char *a4)
{
  uint64_t v7;
  unint64_t *v8;

  if (!a2)
    return llvm::hashing::detail::hash_short(this, a3 - (char *)this, *((_QWORD *)this + 15));
  std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,char *,char *>((char *)this, a3, a4);
  llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + 64), this, v7, v8);
  return llvm::hashing::detail::hash_state::finalize((llvm::hashing::detail::hash_combine_recursive_helper *)((char *)this + 64), (unint64_t)&a3[a2 - (_QWORD)this]);
}

unint64_t llvm::hashing::detail::hash_short(llvm::hashing::detail *this, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  if (a2 - 4 <= 4)
  {
    v3 = *(unsigned int *)((char *)this + a2 - 4) ^ a3;
    v4 = 0x9DDFEA08EB382D69 * (v3 ^ (a2 + 8 * *(unsigned int *)this));
    v5 = v3 ^ (v4 >> 47) ^ v4;
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 - 9 <= 7)
  {
    v7 = *(_QWORD *)((char *)this + a2 - 8);
    v8 = __ROR8__(v7 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v8 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                  * (*(_QWORD *)this ^ a3 ^ v8)))) ^ ((0x9DDFEA08EB382D69 * (v8 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)this ^ a3 ^ v8)))) >> 47))) ^ v7;
  }
  if (a2 - 17 <= 0xF)
  {
    v9 = *((_QWORD *)this + 1);
    v10 = 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)this + a2 - 8);
    v11 = __ROR8__(0xB492B66FBE98F273 * *(_QWORD *)this - v9, 43)
        - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)this + a2 - 16)
        + __ROR8__(v10 ^ a3, 30);
    v12 = a3 + a2 + __ROR8__(v9 ^ 0xC949D7C7509E6557, 20) - 0x4B6D499041670D8DLL * *(_QWORD *)this - v10;
    v5 = v12 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v12));
    return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v5) ^ ((0x9DDFEA08EB382D69 * v5) >> 47));
  }
  if (a2 >= 0x21)
  {
    v13 = (char *)this + a2;
    v14 = *(_QWORD *)((char *)this + a2 - 16);
    v15 = *(_QWORD *)((char *)this + a2 - 8);
    v16 = *(_QWORD *)this - 0x3C5A37A36834CED9 * (v14 + a2);
    v18 = *((_QWORD *)this + 2);
    v17 = *((_QWORD *)this + 3);
    v19 = __ROR8__(v16 + v17, 52);
    v20 = v16 + *((_QWORD *)this + 1);
    v21 = __ROR8__(v20, 7);
    v22 = v20 + v18;
    v23 = v21 + __ROR8__(*(_QWORD *)this - 0x3C5A37A36834CED9 * (v14 + a2), 37) + v19;
    v24 = *(_QWORD *)((char *)this + a2 - 32) + v18;
    v25 = __ROR8__(v24 + v15, 52);
    v26 = v23 + __ROR8__(v22, 31);
    v27 = __ROR8__(v24, 37);
    v28 = *((_QWORD *)v13 - 3) + v24;
    v29 = __ROR8__(v28, 7);
    v30 = v28 + v14;
    v31 = __ROR8__(v30, 31);
    v32 = ((0xC3A5C85C97CB3127
          * ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) ^ ((0xC3A5C85C97CB3127 * (v30 + v15 + v26) - 0x651E95C4D06FBFB1 * (v22 + v17 + v27 + v25 + v29 + v31)) >> 47))) ^ a3)
        + v26;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  if (a2)
  {
    v32 = (0x9AE16A3B2F90404FLL
         * (*(unsigned __int8 *)this | ((unint64_t)*((unsigned __int8 *)this + (a2 >> 1)) << 8))) ^ (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)this + a2 - 1))) ^ a3;
    return 0x9AE16A3B2F90404FLL * (v32 ^ (v32 >> 47));
  }
  return a3 ^ 0x9AE16A3B2F90404FLL;
}

unint64_t llvm::hashing::detail::hash_state::finalize(llvm::hashing::detail::hash_state *this, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0x9DDFEA08EB382D69
     * (*((_QWORD *)this + 5) ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 5) ^ *((_QWORD *)this + 3))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((_QWORD *)this + 5) ^ *((_QWORD *)this + 3))));
  v3 = 0x9DDFEA08EB382D69
     * (*((_QWORD *)this + 6) ^ ((0x9DDFEA08EB382D69 * (*((_QWORD *)this + 6) ^ *((_QWORD *)this + 4))) >> 47) ^ (0x9DDFEA08EB382D69 * (*((_QWORD *)this + 6) ^ *((_QWORD *)this + 4))));
  v4 = *(_QWORD *)this - 0x4B6D499041670D8DLL * (a2 ^ (a2 >> 47)) - 0x622015F714C7D297 * (v3 ^ (v3 >> 47));
  v5 = 0x9DDFEA08EB382D69
     * (v4 ^ (*((_QWORD *)this + 2)
            - 0x4B6D499041670D8DLL * (*((_QWORD *)this + 1) ^ (*((_QWORD *)this + 1) >> 47))
            - 0x622015F714C7D297 * (v2 ^ (v2 >> 47))));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
}

char *std::__rotate[abi:nn180100]<std::_ClassicAlgPolicy,char *,char *>(char *__src, char *a2, char *a3)
{
  char *v4;
  char v6;
  int64_t v7;
  char v8;
  size_t v9;

  v4 = a3;
  if (__src != a2)
  {
    if (a2 == a3)
    {
      return __src;
    }
    else if (__src + 1 == a2)
    {
      v6 = *__src;
      v7 = a3 - a2;
      memmove(__src, a2, a3 - a2);
      v4 = &__src[v7];
      *v4 = v6;
    }
    else if (a2 + 1 == a3)
    {
      v8 = *(a3 - 1);
      v4 = __src + 1;
      v9 = a3 - 1 - __src;
      if (a3 - 1 != __src)
        memmove(__src + 1, __src, v9);
      *__src = v8;
    }
    else
    {
      return std::__rotate_gcd[abi:nn180100]<std::_ClassicAlgPolicy,char *>(__src, a2, a3);
    }
  }
  return v4;
}

_BYTE *std::__rotate_gcd[abi:nn180100]<std::_ClassicAlgPolicy,char *>(_BYTE *a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  char v13;
  char v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  BOOL v19;
  char v20;
  uint64_t v21;

  v3 = a2 - a1;
  if (a2 - a1 == a3 - a2)
  {
    if (a1 != a2 && a2 != a3)
    {
      v4 = 0;
      do
      {
        v5 = a1[v4];
        a1[v4] = a2[v4];
        v6 = (uint64_t)&a1[v4 + 1];
        a2[v4] = v5;
        v7 = (uint64_t)&a2[++v4];
      }
      while ((_BYTE *)v6 != a2 && v7 != (_QWORD)a3);
    }
  }
  else
  {
    v9 = a3 - a2;
    v10 = a2 - a1;
    do
    {
      v11 = v10;
      v10 = v9;
      v9 = v11 % v9;
    }
    while (v9);
    if (v10)
    {
      v12 = &a1[v10];
      do
      {
        v14 = *--v12;
        v13 = v14;
        v15 = &v12[v3];
        v16 = v12;
        do
        {
          v17 = v16;
          v16 = v15;
          *v17 = *v15;
          v18 = a3 - v15;
          v19 = __OFSUB__(v3, v18);
          v21 = v3 - v18;
          v20 = (v21 < 0) ^ v19;
          v15 = &a1[v21];
          if (v20)
            v15 = &v16[v3];
        }
        while (v15 != v12);
        *v16 = v13;
      }
      while (v12 != a1);
    }
    return &a1[a3 - a2];
  }
  return a2;
}

unint64_t llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(llvm::hashing::detail::hash_state *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unsigned __int8 v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  llvm::hashing::detail::hash_state *v12;
  unint64_t v13;
  _BYTE v14[56];

  {
    v13 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v13 = 0xFF51AFD7ED558CCDLL;
    llvm::hashing::detail::get_execution_seed(void)::seed = v13;
  }
  v7 = a2 - (_QWORD)this;
  if ((unint64_t)(a2 - (_QWORD)this) <= 0x40)
    return llvm::hashing::detail::hash_short(this, a2 - (_QWORD)this, llvm::hashing::detail::get_execution_seed(void)::seed);
  llvm::hashing::detail::hash_state::create(this, llvm::hashing::detail::get_execution_seed(void)::seed, llvm::hashing::detail::get_execution_seed(void)::seed, a4, (llvm::hashing::detail::hash_state *)v14);
  v11 = (v7 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v7 & 0xFFFFFFFFFFFFFFC0) != 0x40)
  {
    v12 = (llvm::hashing::detail::hash_state *)((char *)this + 64);
    do
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)v14, v12, v9, v10);
      v12 = (llvm::hashing::detail::hash_state *)((char *)v12 + 64);
      v11 -= 64;
    }
    while (v11);
  }
  if ((v7 & 0x3F) != 0)
    llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)v14, (llvm::hashing::detail::hash_state *)(a2 - 64), v9, v10);
  return llvm::hashing::detail::hash_state::finalize((llvm::hashing::detail::hash_state *)v14, v7);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<unsigned char,unsigned int,int,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _BYTE *a3, char *a4, char *a5, int *a6, int *a7, uint64_t *a8)
{
  _BYTE *v13;
  _DWORD *v14;
  unint64_t v16;
  unint64_t v17;

  v16 = a2;
  v13 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned char>((uint64_t)a1, (uint64_t *)&v16, a3, (unint64_t)a4, *a5);
  v17 = v16;
  v14 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v17, v13, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(a1, v17, v14, a4, a7, a8);
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _DWORD *a3, char *a4, int *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;

  v12 = a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned int>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  v13 = v12;
  v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

_QWORD *llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>(uint64_t a1, uint64_t *a2, _QWORD *__dst, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  __int128 v12;
  _OWORD v14[3];
  uint64_t v15;
  uint64_t __src;

  __src = a5;
  if ((unint64_t)(__dst + 1) <= a4)
  {
    *__dst = a5;
    return __dst + 1;
  }
  else
  {
    v8 = a4 - (_QWORD)__dst;
    memcpy(__dst, &__src, a4 - (_QWORD)__dst);
    if (*a2)
    {
      llvm::hashing::detail::hash_state::mix((llvm::hashing::detail::hash_state *)(a1 + 64), (llvm::hashing::detail::hash_state *)a1, v9, v10);
      v11 = *a2 + 64;
    }
    else
    {
      llvm::hashing::detail::hash_state::create((llvm::hashing::detail::hash_state *)a1, *(_QWORD *)(a1 + 120), v9, v10, (llvm::hashing::detail::hash_state *)v14);
      v12 = v14[1];
      *(_OWORD *)(a1 + 64) = v14[0];
      *(_OWORD *)(a1 + 80) = v12;
      *(_OWORD *)(a1 + 96) = v14[2];
      *(_QWORD *)(a1 + 112) = v15;
      v11 = 64;
    }
    *a2 = v11;
    if (a1 + 8 - v8 <= a4)
    {
      memcpy((void *)a1, (char *)&__src + v8, 8 - v8);
      a1 += 8 - v8;
    }
  }
  return (_QWORD *)a1;
}

unint64_t llvm::hashing::detail::hash_combine_recursive_helper::combine<llvm::hash_code,llvm::hash_code>(llvm::hashing::detail::hash_combine_recursive_helper *a1, unint64_t a2, _QWORD *a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  _QWORD *v9;
  char *v10;
  unint64_t v12;
  unint64_t v13;

  v12 = a2;
  v9 = llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v12, a3, (unint64_t)a4, *a5);
  v13 = v12;
  v10 = (char *)llvm::hashing::detail::hash_combine_recursive_helper::combine_data<unsigned long>((uint64_t)a1, (uint64_t *)&v13, v9, (unint64_t)a4, *a6);
  return llvm::hashing::detail::hash_combine_recursive_helper::combine(a1, v13, v10, a4);
}

void llvm::SmallVectorImpl<unsigned long long>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 8);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t llvm::APInt::initSlowCase(llvm::APInt *this, uint64_t a2, int a3)
{
  size_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v6 = (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8;
  v7 = (_QWORD *)operator new[]();
  bzero(v7, v6);
  *(_QWORD *)this = v7;
  *v7 = a2;
  if (a2 < 0)
  {
    if (a3)
    {
      v8 = *((unsigned int *)this + 2);
      if (v8 >= 0x41)
      {
        v9 = 8 * ((unint64_t)(v8 + 63) >> 6);
        v10 = 8;
        do
        {
          *(_QWORD *)(*(_QWORD *)this + v10) = -1;
          v10 += 8;
        }
        while (v9 != v10);
      }
    }
  }
  return llvm::APInt::clearUnusedBits((uint64_t)this);
}

uint64_t llvm::APInt::initFromArray(llvm::APInt *this, _QWORD *a2, unsigned int a3)
{
  uint64_t v5;
  size_t v7;
  void *v8;
  unint64_t v9;

  v5 = *((unsigned int *)this + 2);
  if (v5 > 0x40)
  {
    v7 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v8 = (void *)operator new[]();
    bzero(v8, v7);
    *(_QWORD *)this = v8;
    v9 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
    if (v9 >= a3)
      LODWORD(v9) = a3;
    memcpy(v8, a2, (8 * v9));
  }
  else
  {
    *(_QWORD *)this = *a2;
  }
  return llvm::APInt::clearUnusedBits((uint64_t)this);
}

uint64_t llvm::APInt::reallocate(uint64_t this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = this;
  v4 = *(unsigned int *)(this + 8);
  if (((unint64_t)(v4 + 63) >> 6) == (((unint64_t)a2 + 63) >> 6))
  {
    *(_DWORD *)(this + 8) = a2;
  }
  else
  {
    if (v4 >= 0x41)
    {
      this = *(_QWORD *)this;
      if (*(_QWORD *)v3)
        this = MEMORY[0x24BD1B380]();
    }
    *(_DWORD *)(v3 + 8) = a2;
    if (a2 >= 0x41)
    {
      this = operator new[]();
      *(_QWORD *)v3 = this;
    }
  }
  return this;
}

const llvm::APInt *llvm::APInt::assignSlowCase(const llvm::APInt *this, const llvm::APInt *a2)
{
  const llvm::APInt *v3;
  uint64_t v4;

  if (this != a2)
  {
    v3 = this;
    this = (const llvm::APInt *)llvm::APInt::reallocate((uint64_t)this, *((_DWORD *)a2 + 2));
    v4 = *((unsigned int *)v3 + 2);
    if (v4 > 0x40)
      return (const llvm::APInt *)memcpy(*(void **)v3, *(const void **)a2, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
    else
      *(_QWORD *)v3 = *(_QWORD *)a2;
  }
  return this;
}

uint64_t llvm::APInt::operator++(uint64_t this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;

  v1 = *(unsigned int *)(this + 8);
  if (v1 > 0x40)
  {
    v2 = *(uint64_t **)this;
    v3 = **(_QWORD **)this;
    **(_QWORD **)this = v3 + 1;
    if (v3 == -1)
    {
      v4 = (unint64_t)(v1 + 63) >> 6;
      v5 = v2 + 1;
      v6 = v4 - 1;
      do
      {
        if (!v6)
          break;
        --v6;
      }
      while (__CFADD__((*v5++)++, 1));
    }
  }
  else
  {
    ++*(_QWORD *)this;
  }
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t llvm::APInt::operator+=(uint64_t this, _QWORD **a2)
{
  uint64_t v2;
  _BOOL8 v3;
  _QWORD *v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;

  v2 = *(unsigned int *)(this + 8);
  if (v2 > 0x40)
  {
    v3 = 0;
    v4 = *(_QWORD **)this;
    v5 = *a2;
    v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v7 = *v5++;
      v8 = v7 + *v4;
      v9 = __CFADD__(v7, *v4);
      v10 = (unint64_t)(v8 + 1) <= *v4;
      if (v3)
      {
        ++v8;
        v3 = v10;
      }
      else
      {
        v3 = v9;
      }
      *v4++ = v8;
      --v6;
    }
    while (v6);
  }
  else
  {
    *(_QWORD *)this += *a2;
  }
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t llvm::APInt::operator-=(uint64_t this, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v9;
  unint64_t v10;

  v2 = *(unsigned int *)(this + 8);
  if (v2 > 0x40)
  {
    v3 = 0;
    v4 = *(unint64_t **)this;
    v5 = *a2;
    v6 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v7 = *v5++;
      v8 = *v4 - v7;
      v9 = *v4 < v7;
      v10 = *v4 + ~v7;
      if (v3)
      {
        v3 = v10 >= *v4;
      }
      else
      {
        v10 = v8;
        v3 = v9;
      }
      *v4++ = v10;
      --v6;
    }
    while (v6);
  }
  else
  {
    *(_QWORD *)this -= *a2;
  }
  return llvm::APInt::clearUnusedBits(this);
}

llvm::APInt *llvm::APInt::operator*@<X0>(uint64_t a1@<X0>, const unint64_t ***a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6;
  llvm::APInt *v8;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  if (v6 <= 0x40)
    return llvm::APInt::APInt(a3, v6, (_QWORD)*a2 * *(_QWORD *)a1, 0);
  v8 = (llvm::APInt *)operator new[]();
  v9 = *(unsigned int *)(a1 + 8);
  *((_DWORD *)a3 + 2) = v9;
  *(_QWORD *)a3 = v8;
  llvm::APInt::tcMultiply(v8, *(unint64_t **)a1, *a2, (const unint64_t *)((unint64_t)(v9 + 63) >> 6));
  return (llvm::APInt *)llvm::APInt::clearUnusedBits((uint64_t)a3);
}

uint64_t llvm::APInt::tcMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t **a3, const unint64_t *a4)
{
  unsigned int v4;
  llvm::APInt *v7;
  uint64_t v8;
  uint64_t v9;
  const unint64_t *v10;

  v4 = a4;
  v7 = this;
  *(_QWORD *)this = 0;
  if (a4 < 2)
  {
    if (!(_DWORD)a4)
      return 0;
  }
  else
  {
    bzero((char *)this + 8, 8 * ((_DWORD)a4 - 2) + 8);
  }
  LODWORD(v8) = 0;
  v9 = v4;
  do
  {
    v10 = *a3++;
    v8 = llvm::APInt::tcMultiplyPart(v7, a2, v10, 0, v4, v9, 1) | v8;
    v7 = (llvm::APInt *)((char *)v7 + 8);
    --v9;
  }
  while (v9);
  return v8;
}

uint64_t llvm::APInt::operator*=(uint64_t a1, const unint64_t ***a2)
{
  uint64_t v4;
  int v5;

  llvm::APInt::operator*(a1, a2, (llvm::APInt *)&v4);
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x24BD1B380](*(_QWORD *)a1, 0x1000C8000313F17);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t llvm::APInt::tcMultiplyPart(llvm::APInt *this, unint64_t *a2, const unint64_t *a3, uint64_t a4, unsigned int a5, unsigned int a6, int a7)
{
  uint64_t v7;
  unint64_t *v8;
  llvm::APInt *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v22;
  unint64_t v23;

  if (a5 >= a6)
    v7 = a6;
  else
    v7 = a5;
  if ((_DWORD)v7)
  {
    v8 = a2;
    v9 = this;
    do
    {
      v10 = 0;
      v12 = *v8++;
      v11 = v12;
      if (a3 && v11)
      {
        v13 = v11 * (unint64_t)a3;
        v14 = HIDWORD(v11);
        v15 = v11 * (unint64_t)HIDWORD(a3);
        v16 = HIDWORD(v15) + HIDWORD(v11) * (unint64_t)HIDWORD(a3);
        v17 = v11 * (_QWORD)a3;
        v18 = __CFADD__(v17, a4);
        a4 += v17;
        v19 = v18;
        if (v17 >= v13 + (v15 << 32))
          v10 = (__PAIR128__(v19, v13)
               + __PAIR128__(v16 + ((v14 * (unint64_t)a3) >> 32), v15 << 32)) >> 64;
        else
          v10 = ((__PAIR128__(v19, v13)
                + __PAIR128__(v16 + ((v14 * (unint64_t)a3) >> 32), v15 << 32)) >> 64)
              + 1;
      }
      if (a7)
      {
        if (__CFADD__(a4, *(_QWORD *)v9))
          ++v10;
        a4 += *(_QWORD *)v9;
      }
      *(_QWORD *)v9 = a4;
      v9 = (llvm::APInt *)((char *)v9 + 8);
      a4 = v10;
      --v7;
    }
    while (v7);
  }
  else
  {
    v10 = a4;
  }
  if (a5 < a6)
  {
    v20 = 0;
    *((_QWORD *)this + a5) = v10;
    return v20;
  }
  if (v10)
    return 1;
  v20 = 0;
  if (a3 && a6 < a5)
  {
    v22 = &a2[a6];
    v23 = a5 - (unint64_t)a6;
    while (!*v22++)
    {
      if (!--v23)
        return 0;
    }
    return 1;
  }
  return v20;
}

uint64_t llvm::APInt::compare(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v4 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v4)
        return 0;
      v5 = *(_QWORD *)(*(_QWORD *)this - 8 + v4);
      v6 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v4);
      v4 -= 8;
    }
    while (v5 == v6);
    if (v5 > v6)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
  else if (*(_QWORD *)this < *(_QWORD *)a2)
  {
    return 0xFFFFFFFFLL;
  }
  else
  {
    return *(_QWORD *)this > *(_QWORD *)a2;
  }
}

uint64_t llvm::APInt::compareSigned(llvm::APInt *this, const llvm::APInt *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _BOOL4 v7;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  const llvm::APInt *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    v9 = *(_QWORD *)(*(_QWORD *)this + 8 * ((v2 - 1) >> 6)) & (1 << (v2 - 1));
    v10 = *((_DWORD *)a2 + 2);
    v11 = v10 - 1;
    if (v10 >= 0x41)
      v12 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * (v11 >> 6));
    else
      v12 = a2;
    if ((v9 != 0) == ((*(_QWORD *)v12 >> v11) & 1))
    {
      v13 = ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8;
      do
      {
        if (!v13)
          return 0;
        v14 = *(_QWORD *)(*(_QWORD *)this - 8 + v13);
        v15 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v13);
        v13 -= 8;
      }
      while (v14 == v15);
      if (v14 > v15)
        return 1;
      else
        return 0xFFFFFFFFLL;
    }
    else if (v9)
    {
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v3 = -v2;
    v4 = (uint64_t)(*(_QWORD *)this << v3) >> v3;
    v5 = (uint64_t)(*(_QWORD *)a2 << v3) >> v3;
    v6 = v4 < v5;
    v7 = v4 > v5;
    if (v6)
      return 0xFFFFFFFFLL;
    else
      return v7;
  }
}

_QWORD *llvm::APInt::setBitsSlowCase(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a2 >> 6;
  v4 = a3 >> 6;
  v5 = -1 << a2;
  if ((a3 & 0x3F) != 0)
  {
    v6 = 0xFFFFFFFFFFFFFFFFLL >> -(a3 & 0x3F);
    if ((_DWORD)v4 == v3)
      v5 &= v6;
    else
      *(_QWORD *)(*this + 8 * v4) |= v6;
  }
  *(_QWORD *)(*this + 8 * v3) |= v5;
  v7 = v3 + 1;
  if (v7 < v4)
  {
    do
      *(_QWORD *)(*this + 8 * v7++) = -1;
    while (v4 != v7);
  }
  return this;
}

uint64_t llvm::APInt::flipAllBitsSlowCase(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;

  v1 = *(unsigned int *)(this + 8);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD **)this;
    v3 = (unint64_t)(v1 + 63) >> 6;
    do
    {
      *v2 = ~*v2;
      ++v2;
      --v3;
    }
    while (v3);
  }
  return llvm::APInt::clearUnusedBits(this);
}

void llvm::APInt::zext(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  llvm::APInt *v4;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;

  v4 = this;
  if (a2 > 0x40)
  {
    if (*((_DWORD *)this + 2) == a2)
    {
      llvm::APInt::APInt(a3, this);
    }
    else
    {
      v6 = ((unint64_t)a2 + 63) >> 6;
      v7 = (char *)operator new[]();
      v8 = v7;
      *((_DWORD *)a3 + 2) = a2;
      *(_QWORD *)a3 = v7;
      v9 = *((unsigned int *)v4 + 2);
      if (v9 >= 0x41)
        v4 = *(llvm::APInt **)v4;
      v10 = (unint64_t)(v9 + 63) >> 6;
      memcpy(v7, v4, 8 * v10);
      bzero(&v8[8 * v10], (8 * (v6 - v10)));
    }
  }
  else
  {
    llvm::APInt::APInt(a3, a2, *(_QWORD *)this, 0);
  }
}

llvm::APInt *llvm::APInt::operator=(llvm::APInt *this, const llvm::APInt *a2)
{
  if (*((_DWORD *)this + 2) > 0x40u || *((_DWORD *)a2 + 2) > 0x40u)
  {
    llvm::APInt::assignSlowCase(this, a2);
  }
  else
  {
    *(_QWORD *)this = *(_QWORD *)a2;
    *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  }
  return this;
}

unint64_t llvm::hash_value(llvm::hashing::detail::hash_state **this, const llvm::APInt *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  int *v6;
  unint64_t v8;
  _DWORD v9[16];
  char v10[64];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = (int *)(this + 1);
  v5 = *((unsigned int *)this + 2);
  if (v5 > 0x40)
  {
    v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*this, (uint64_t)*this + (((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8), a3, a4);
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v9);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, v9, v10, v6, (uint64_t *)&v8);
  }
  else
  {
    llvm::hashing::detail::hash_combine_recursive_helper::hash_combine_recursive_helper((uint64_t)v9);
    return llvm::hashing::detail::hash_combine_recursive_helper::combine<int,llvm::hash_code>((llvm::hashing::detail::hash_combine_recursive_helper *)v9, 0, v9, v10, v6, (uint64_t *)this);
  }
}

BOOL llvm::APInt::operator==(uint64_t a1, const void **a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 > 0x40)
    return memcmp(*(const void **)a1, *a2, ((unint64_t)(v2 + 63) >> 3) & 0x3FFFFFF8) == 0;
  else
    return *(_QWORD *)a1 == (_QWORD)*a2;
}

void llvm::APInt::getHiBits(llvm::APInt *this@<X0>, int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unsigned int v3;
  llvm::APInt **v4;

  v3 = *((_DWORD *)this + 2) - a2;
  v4 = (llvm::APInt **)llvm::APInt::APInt(a3, this);
  llvm::APInt::lshrInPlace(v4, v3);
}

uint64_t llvm::APInt::getLoBits@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  llvm::APInt::APInt(a3, *((_DWORD *)this + 2), 0, 0);
  llvm::APInt::setBits(a3, 0, a2);
  return llvm::APInt::operator&=((uint64_t)a3, (_QWORD **)this);
}

uint64_t llvm::APInt::operator&=(uint64_t result, _QWORD **a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 8);
  if (v2 > 0x40)
  {
    v3 = *(_QWORD **)result;
    v4 = *a2;
    v5 = (unint64_t)(v2 + 63) >> 6;
    do
    {
      v6 = *v4++;
      *v3++ &= v6;
      --v5;
    }
    while (v5);
  }
  else
  {
    *(_QWORD *)result &= (unint64_t)*a2;
  }
  return result;
}

uint64_t llvm::APInt::countLeadingZerosSlowCase(llvm::APInt *this)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  unint64_t v5;
  int v6;

  v1 = *((unsigned int *)this + 2);
  v2 = (unint64_t)(v1 + 63) >> 6;
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = (_DWORD)v2 << 6;
    while (1)
    {
      v5 = *(_QWORD *)(*(_QWORD *)this - 8 + 8 * v2);
      if (v5)
        break;
      --v2;
      v3 += 64;
      if (v2 + 1 <= 1)
        goto LABEL_8;
    }
    v4 = __clz(v5) + v3;
  }
  else
  {
    v4 = 0;
  }
LABEL_8:
  if ((v1 & 0x3F) != 0)
    v6 = v1 | 0xFFFFFFC0;
  else
    v6 = 0;
  return (v4 + v6);
}

unint64_t llvm::APInt::countLeadingOnesSlowCase(llvm::APInt *this)
{
  uint64_t v1;
  char v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t result;
  int v8;
  uint64_t v9;

  v1 = *((unsigned int *)this + 2);
  v2 = 64 - (v1 & 0x3F);
  v3 = *((_DWORD *)this + 2) & 0x3F;
  if ((v1 & 0x3F) == 0)
  {
    v3 = 64;
    v2 = 0;
  }
  v4 = (unint64_t)(v1 + 63) >> 6;
  v5 = *(_QWORD *)this;
  result = __clz(~(*(_QWORD *)(*(_QWORD *)this + 8 * v4 - 8) << v2));
  if (v4 >= 2 && v3 == (_DWORD)result)
  {
    result = (v3 + ((_DWORD)v4 << 6) - 64);
    v8 = v4 - 1;
    while (1)
    {
      v9 = *(_QWORD *)(v5 + 8 * --v8);
      if (v9 != -1)
        break;
      v3 += 64;
      if (v8 <= 0)
        return result;
    }
    return __clz(~v9) + v3;
  }
  return result;
}

uint64_t llvm::APInt::countTrailingZerosSlowCase(unint64_t **this)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unsigned int v5;
  unint64_t v6;

  v1 = *((unsigned int *)this + 2);
  v2 = (unint64_t)(v1 + 63) >> 6;
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = *this;
    v5 = (_DWORD)v2 << 6;
    v6 = v2 << 6;
    while (!*v4)
    {
      ++v4;
      v3 += 64;
      if (v6 == v3)
        goto LABEL_8;
    }
    v5 = __clz(__rbit64(*v4)) + v3;
  }
  else
  {
    v5 = 0;
  }
LABEL_8:
  if (v1 >= v5)
    return v5;
  else
    return v1;
}

uint64_t llvm::APInt::countTrailingOnesSlowCase(llvm::APInt *this)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;

  v1 = ((unint64_t)*((unsigned int *)this + 2) + 63) >> 6;
  if (!(_DWORD)v1)
    return 0;
  v2 = 0;
  v3 = *(_QWORD **)this;
  result = ((_DWORD)v1 << 6);
  v5 = v1 << 6;
  while (*v3 == -1)
  {
    ++v3;
    v2 += 64;
    if (v5 == v2)
      return result;
  }
  return __clz(__rbit64(~*v3)) + v2;
}

void llvm::APInt::byteSwap(llvm::APInt *this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;

  v4 = *((_DWORD *)this + 2);
  if (v4 == 32)
  {
    v5 = bswap32(*(_DWORD *)this);
    v6 = 32;
    goto LABEL_5;
  }
  if (v4 == 16)
  {
    v5 = bswap32(*(unsigned __int16 *)this) >> 16;
    v6 = 16;
LABEL_5:
    *((_DWORD *)a2 + 2) = v6;
    *(_QWORD *)a2 = v5;
    llvm::APInt::clearUnusedBits((uint64_t)a2);
    return;
  }
  if (v4 > 0x40)
  {
    llvm::APInt::APInt(a2, (v4 + 63) & 0xFFFFFFC0, 0, 0);
    v7 = *((unsigned int *)this + 2);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = ((unint64_t)(v7 + 63) >> 6) - 1;
      do
      {
        *(_QWORD *)(*(_QWORD *)a2 + v8) = bswap64(*(_QWORD *)(*(_QWORD *)this + 8 * v9--));
        v8 += 8;
      }
      while (v9 != -1);
    }
    v10 = *((_DWORD *)a2 + 2);
    if (v10 != (_DWORD)v7)
    {
      llvm::APInt::lshrInPlace((llvm::APInt **)a2, v10 - v7);
      *((_DWORD *)a2 + 2) = *((_DWORD *)this + 2);
    }
  }
  else
  {
    llvm::APInt::APInt(a2, v4, bswap64(*(_QWORD *)this) >> -(char)v4, 0);
  }
}

void llvm::APInt::lshrInPlace(llvm::APInt **this, unsigned int a2)
{
  uint64_t v2;

  v2 = *((unsigned int *)this + 2);
  if (v2 > 0x40)
  {
    llvm::APInt::tcShiftRight(*this, (unint64_t *)((unint64_t)(v2 + 63) >> 6), a2);
  }
  else if ((_DWORD)v2 == a2)
  {
    *this = 0;
  }
  else
  {
    *this = (llvm::APInt *)((unint64_t)*this >> a2);
  }
}

llvm::APInt *llvm::APInt::trunc@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  uint64_t *v4;
  unsigned int v6;
  llvm::APInt *result;
  uint64_t v8;
  int v9;

  v4 = (uint64_t *)this;
  v6 = *((_DWORD *)this + 2);
  if (a2 > 0x40)
  {
    if (v6 == a2)
    {
      return llvm::APInt::APInt(a3, this);
    }
    else
    {
      result = (llvm::APInt *)operator new[]();
      v8 = 0;
      *((_DWORD *)a3 + 2) = a2;
      *(_QWORD *)a3 = result;
      do
      {
        *(_QWORD *)(*(_QWORD *)a3 + v8) = *(_QWORD *)(*v4 + v8);
        v8 += 8;
      }
      while (8 * (a2 >> 6) != v8);
      v9 = -a2 & 0x3F;
      if (v9)
        *(_QWORD *)(*(_QWORD *)a3 + 8 * (a2 >> 6)) = *(_QWORD *)(*v4 + 8 * (a2 >> 6)) & (0xFFFFFFFFFFFFFFFFLL >> v9);
    }
  }
  else
  {
    if (v6 >= 0x41)
      v4 = *(uint64_t **)this;
    return llvm::APInt::APInt(a3, a2, *v4, 0);
  }
  return result;
}

llvm::APInt *llvm::APInt::sext@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  llvm::APInt *v4;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::APInt *v11;
  unint64_t v12;
  unsigned int v13;
  int v14;

  v4 = this;
  if (a2 <= 0x40)
    return llvm::APInt::APInt(a3, a2, (uint64_t)(*(_QWORD *)this << -*((_BYTE *)this + 8)) >> -*((_BYTE *)this + 8), 0);
  if (*((_DWORD *)this + 2) == a2)
    return llvm::APInt::APInt(a3, this);
  v7 = ((unint64_t)a2 + 63) >> 6;
  v8 = (_QWORD *)operator new[]();
  v9 = v8;
  *((_DWORD *)a3 + 2) = a2;
  *(_QWORD *)a3 = v8;
  v10 = *((unsigned int *)v4 + 2);
  v11 = v4;
  if (v10 >= 0x41)
    v11 = *(llvm::APInt **)v4;
  v12 = (unint64_t)(v10 + 63) >> 6;
  memcpy(v8, v11, 8 * v12);
  v9[(v12 - 1)] = (uint64_t)(v9[(v12 - 1)] << -(char)v10) >> -(char)v10;
  v13 = v10 - 1;
  if (v10 >= 0x41)
    v4 = (llvm::APInt *)(*(_QWORD *)v4 + 8 * (v13 >> 6));
  if (((*(_QWORD *)v4 >> v13) & 1) != 0)
    v14 = -1;
  else
    v14 = 0;
  memset(&v9[v12], v14, (8 * (v7 - v12)));
  return (llvm::APInt *)llvm::APInt::clearUnusedBits((uint64_t)a3);
}

llvm::APInt *llvm::APInt::sextOrTrunc@<X0>(llvm::APInt *this@<X0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unsigned int v3;

  v3 = *((_DWORD *)this + 2);
  if (v3 < a2)
    return llvm::APInt::sext(this, a2, a3);
  if (v3 > a2)
    return llvm::APInt::trunc(this, a2, a3);
  return llvm::APInt::APInt(a3, this);
}

uint64_t llvm::APInt::ashrInPlace(uint64_t this, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char v4;

  v2 = *(_DWORD *)(this + 8);
  if (v2 > 0x40)
    return llvm::APInt::ashrSlowCase(this, a2);
  v3 = (uint64_t)(*(_QWORD *)this << -(char)v2) >> -(char)v2;
  if (v2 == a2)
    v4 = 63;
  else
    v4 = a2;
  *(_QWORD *)this = v3 >> v4;
  return llvm::APInt::clearUnusedBits(this);
}

uint64_t *llvm::APInt::getLimitedValue(uint64_t ***this, unint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;

  v4 = *((_DWORD *)this + 2);
  if (v4 >= 0x41)
  {
    if (v4 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)this) > 0x40)
      return (uint64_t *)a2;
    v5 = **this;
  }
  else
  {
    v5 = (uint64_t *)*this;
  }
  if ((unint64_t)v5 <= a2)
    return v5;
  return (uint64_t *)a2;
}

uint64_t llvm::APInt::ashrSlowCase(uint64_t this, unsigned int a2)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  if (a2)
  {
    v2 = (_QWORD *)this;
    v3 = *(unsigned int *)(this + 8);
    v4 = v3 - 1;
    v5 = (_QWORD *)this;
    if (v3 >= 0x41)
      v5 = (_QWORD *)(*(_QWORD *)this + 8 * (v4 >> 6));
    v6 = *v5 & (1 << v4);
    v7 = a2 >> 6;
    v8 = (unint64_t)(v3 + 63) >> 6;
    v9 = v8 - (a2 >> 6);
    if ((_DWORD)v8 != a2 >> 6)
    {
      v10 = (v8 - 1);
      *(_QWORD *)(*(_QWORD *)this + 8 * v10) = (uint64_t)(*(_QWORD *)(*(_QWORD *)this
                                                                                   + 8 * v10) << -(char)v3) >> -(char)v3;
      v11 = a2 & 0x3F;
      if ((a2 & 0x3F) != 0)
      {
        v12 = v9 - 1;
        if (v9 == 1)
        {
          v12 = 0;
        }
        else
        {
          v13 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)this + 8 * v13) = (*(_QWORD *)(*(_QWORD *)this
                                                                + 8 * ((a2 >> 6) + v13 + 1)) << (64 - v11)) | (*(_QWORD *)(*(_QWORD *)this + 8 * ((a2 >> 6) + v13)) >> v11);
            ++v13;
          }
          while (v12 != v13);
        }
        *(_QWORD *)(*(_QWORD *)this + 8 * v12) = *(_QWORD *)(*(_QWORD *)this + 8 * v10) >> v11;
        *(_QWORD *)(*(_QWORD *)this + 8 * v12) = (uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8 * v12) << v11) >> v11;
      }
      else
      {
        memmove(*(void **)this, (const void *)(*(_QWORD *)this + 8 * v7), 8 * v9);
      }
    }
    if (v6)
      v14 = -1;
    else
      v14 = 0;
    memset((void *)(*v2 + 8 * v9), v14, 8 * v7);
    return llvm::APInt::clearUnusedBits((uint64_t)v2);
  }
  return this;
}

void llvm::APInt::tcShiftRight(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;

  if (a3)
  {
    if (a3 >> 6 >= a2)
      v4 = a2;
    else
      v4 = a3 >> 6;
    v5 = a2 - v4;
    v6 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        v7 = *((_QWORD *)this + v4) >> v6;
        *(_QWORD *)this = v7;
        if ((_DWORD)v5 != 1)
        {
          v8 = v4 + 1;
          v9 = (_QWORD *)((char *)this + 8);
          v10 = 1 - v5;
          do
          {
            *(v9 - 1) = (*((_QWORD *)this + v8) << (64 - v6)) | v7;
            v7 = *((_QWORD *)this + v8) >> v6;
            *v9++ = v7;
            ++v8;
          }
          while (!__CFADD__(v10++, 1));
        }
      }
    }
    else
    {
      memmove(this, (char *)this + 8 * v4, (8 * v5));
    }
    bzero((char *)this + 8 * v5, 8 * v4);
  }
}

void llvm::APInt::tcShiftLeft(llvm::APInt *this, unint64_t *a2, unsigned int a3)
{
  unsigned int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t v11;

  if (a3)
  {
    if (a3 >> 6 >= a2)
      v4 = a2;
    else
      v4 = a3 >> 6;
    v5 = a3 & 0x3F;
    if ((a3 & 0x3F) != 0)
    {
      if (a3 >> 6 < a2)
      {
        v6 = a2 - 1;
        v7 = *((_QWORD *)this + v6 - v4) << (a3 & 0x3F);
        v8 = (char *)this + 8 * v6;
        *(_QWORD *)v8 = v7;
        if (v6 > v4)
        {
          v9 = (unint64_t *)((char *)this + 8 * a2 + 8 * (uint64_t)-v4 - 16);
          v10 = (_QWORD *)((char *)this + 8 * ((_DWORD)a2 - 2));
          do
          {
            v11 = *v9--;
            *(_QWORD *)v8 = (v11 >> (64 - v5)) | v7;
            v7 = *((_QWORD *)this + v6 - v4 - 1) << v5;
            v8 = (char *)this + 8 * (v6 - 1);
            *v10-- = v7;
            --v6;
          }
          while (v4 < v6);
        }
      }
    }
    else
    {
      memmove((char *)this + 8 * v4, this, 8 * (a2 - v4));
    }
    bzero(this, 8 * v4);
  }
}

void llvm::APInt::udiv(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  const unint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const unint64_t *v14;
  unint64_t *v15;

  v6 = *((_DWORD *)this + 2);
  if (v6 <= 0x40)
  {
    v7 = *(_QWORD *)this / *(_QWORD *)a2;
    v8 = a3;
    v9 = v6;
LABEL_14:
    llvm::APInt::APInt(v8, v9, v7, 0);
    return;
  }
  v10 = (const unint64_t *)(((unint64_t)(v6 - llvm::APInt::countLeadingZerosSlowCase(this))
                                  + 63) >> 6);
  v11 = *((_DWORD *)a2 + 2);
  if (v11 > 0x40)
  {
    v12 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (!(_DWORD)v10)
    {
LABEL_13:
      v8 = a3;
      v9 = v6;
      v7 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    v12 = v11 + __clz(*(_QWORD *)a2) - 64;
    if (!(_DWORD)v10)
      goto LABEL_13;
  }
  v13 = v11 - v12;
  if ((_DWORD)v13 == 1)
  {
    llvm::APInt::APInt(a3, this);
    return;
  }
  v14 = (const unint64_t *)((unint64_t)(v13 + 63) >> 6);
  if (v10 < v14 || (llvm::APInt::compare(this, a2) & 0x80000000) != 0)
    goto LABEL_13;
  if (llvm::APInt::operator==((uint64_t)this, (const void **)a2))
  {
    v9 = *((_DWORD *)this + 2);
    v8 = a3;
    v7 = 1;
    goto LABEL_14;
  }
  v9 = *((_DWORD *)this + 2);
  if ((_DWORD)v10 == 1)
  {
    v7 = **(_QWORD **)this / **(_QWORD **)a2;
    v8 = a3;
    goto LABEL_14;
  }
  llvm::APInt::APInt(a3, v9, 0, 0);
  llvm::APInt::divide(*(llvm::APInt **)this, v10, *(uint64_t **)a2, v14, *(unint64_t **)a3, 0, v15);
}

void llvm::APInt::udivrem(llvm::APInt *this, const llvm::APInt *a2, const llvm::APInt *a3, llvm::APInt *a4, llvm::APInt *a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t *v20;
  llvm::APInt *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;

  v9 = *((unsigned int *)this + 2);
  if (v9 <= 0x40)
  {
    v10 = *(_QWORD *)this % *(_QWORD *)a2;
    llvm::APInt::APInt((llvm::APInt *)&v27, v9, *(_QWORD *)this / *(_QWORD *)a2, 0);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
      MEMORY[0x24BD1B380](*(_QWORD *)a3, 0x1000C8000313F17);
    *(_QWORD *)a3 = v27;
    *((_DWORD *)a3 + 2) = v28;
    v11 = v9;
    v12 = v10;
LABEL_23:
    llvm::APInt::APInt((llvm::APInt *)&v27, v11, v12, 0);
    if (*((_DWORD *)a4 + 2) >= 0x41u)
    {
      if (*(_QWORD *)a4)
        MEMORY[0x24BD1B380](*(_QWORD *)a4, 0x1000C8000313F17);
    }
    *(_QWORD *)a4 = v27;
    *((_DWORD *)a4 + 2) = v28;
    return;
  }
  v13 = ((unint64_t)(v9 - llvm::APInt::countLeadingZerosSlowCase(this)) + 63) >> 6;
  v14 = *((_DWORD *)a2 + 2);
  if (v14 <= 0x40)
  {
    v15 = v14 + __clz(*(_QWORD *)a2) - 64;
    if ((_DWORD)v13)
      goto LABEL_8;
LABEL_18:
    v18 = v9;
    v19 = 0;
LABEL_19:
    llvm::APInt::APInt((llvm::APInt *)&v27, v18, v19, 0);
    if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
      MEMORY[0x24BD1B380](*(_QWORD *)a3, 0x1000C8000313F17);
    *(_QWORD *)a3 = v27;
    *((_DWORD *)a3 + 2) = v28;
    v11 = v9;
    v12 = 0;
    goto LABEL_23;
  }
  v15 = llvm::APInt::countLeadingZerosSlowCase(a2);
  if (!(_DWORD)v13)
    goto LABEL_18;
LABEL_8:
  v16 = v14 - v15;
  v17 = (unint64_t)(v16 + 63) >> 6;
  if ((_DWORD)v16 == 1)
  {
    llvm::APInt::operator=(a3, this);
    llvm::APInt::APInt((llvm::APInt *)&v27, v9, 0, 0);
    if (*((_DWORD *)a4 + 2) >= 0x41u && *(_QWORD *)a4)
      MEMORY[0x24BD1B380](*(_QWORD *)a4, 0x1000C8000313F17);
    *(_QWORD *)a4 = v27;
    *((_DWORD *)a4 + 2) = v28;
  }
  if (v13 >= v17 && (llvm::APInt::compare(this, a2) & 0x80000000) == 0)
  {
    if (!llvm::APInt::operator==((uint64_t)this, (const void **)a2))
    {
      llvm::APInt::reallocate((uint64_t)a3, v9);
      llvm::APInt::reallocate((uint64_t)a4, v9);
      v21 = *(llvm::APInt **)this;
      if ((_DWORD)v13 == 1)
      {
        v22 = *(_QWORD *)v21;
        v23 = **(_QWORD **)a2;
        v24 = *(_QWORD *)v21 / v23;
        llvm::APInt::operator=(a3, v24);
        llvm::APInt::operator=(a4, v22 - v24 * v23);
      }
      else
      {
        llvm::APInt::divide(v21, (const unint64_t *)v13, *(uint64_t **)a2, (const unint64_t *)v17, *(unint64_t **)a3, *(unint64_t **)a4, v20);
        v25 = (void *)(*(_QWORD *)a3 + 8 * v13);
        v26 = (unint64_t)(v9 + 63) >> 6;
        bzero(v25, (8 * (v26 - v13)));
        bzero((void *)(*(_QWORD *)a4 + 8 * v17), (8 * (v26 - v17)));
      }
      return;
    }
    v18 = v9;
    v19 = 1;
    goto LABEL_19;
  }
  llvm::APInt::operator=(a4, this);
  llvm::APInt::APInt((llvm::APInt *)&v27, v9, 0, 0);
  if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
    MEMORY[0x24BD1B380](*(_QWORD *)a3, 0x1000C8000313F17);
  *(_QWORD *)a3 = v27;
  *((_DWORD *)a3 + 2) = v28;
}

void llvm::APInt::divide(llvm::APInt *this, const unint64_t *a2, uint64_t *a3, const unint64_t *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  unint64_t *v7;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  size_t v16;
  unsigned int *v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  BOOL v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  int *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  int *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  size_t v73;
  int v74;
  unsigned int v75;
  const unint64_t *v76;
  _DWORD v77[128];
  uint64_t v78;

  v7 = a6;
  v78 = *MEMORY[0x24BDAC8D0];
  v11 = (2 * (_DWORD)a4);
  v12 = (2 * (_DWORD)a2);
  v75 = a2;
  v76 = a4;
  if (a6)
    v13 = 4;
  else
    v13 = 3;
  v74 = v12 - 2 * (_DWORD)a4;
  v14 = (v13 * v11 + 2 * v74) | 1;
  v15 = (2 * (_DWORD)a2) | 1u;
  v16 = 4 * v15;
  if (v14 > 0x80)
  {
    v73 = 4 * v15;
    v21 = (_DWORD *)operator new[]();
    v17 = (unsigned int *)operator new[]();
    v19 = (_DWORD *)operator new[]();
    if (v7)
      v22 = (_DWORD *)operator new[]();
    else
      v22 = 0;
    v16 = v73;
  }
  else
  {
    v17 = &v77[v15];
    v18 = v11 + v15;
    v19 = &v77[v18];
    v20 = &v77[(v18 + v12)];
    v21 = v77;
    if (a6)
      v22 = v20;
    else
      v22 = 0;
  }
  bzero(v21, v16);
  if (v75)
  {
    v23 = 0;
    do
    {
      v24 = *(_QWORD *)this;
      this = (llvm::APInt *)((char *)this + 8);
      v21[v23] = v24;
      v21[(v23 + 1)] = HIDWORD(v24);
      v23 += 2;
    }
    while (2 * v75 != v23);
  }
  v21[v12] = 0;
  bzero(v17, 4 * v11);
  if ((_DWORD)v76)
  {
    v25 = 0;
    v26 = 2 * v76;
    do
    {
      v27 = *a3++;
      v17[v25] = v27;
      v17[(v25 + 1)] = HIDWORD(v27);
      v25 += 2;
    }
    while (v26 != v25);
  }
  bzero(v19, 4 * v12);
  if (v7)
    bzero(v22, 4 * v11);
  if ((_DWORD)v11)
  {
    while (!v17[v11 - 1])
    {
      if (!--v11)
        goto LABEL_26;
    }
    LODWORD(v12) = v12 - v11;
  }
  else
  {
    LODWORD(v12) = v74;
  }
LABEL_26:
  if ((_DWORD)v11 + (_DWORD)v12)
  {
    v28 = (v11 + v12);
    while (!v21[v28 - 1])
    {
      LODWORD(v12) = v12 - 1;
      if (!(--v28 * 4))
      {
        LODWORD(v12) = -(int)v11;
        break;
      }
    }
  }
  v29 = (v11 - 1);
  if ((_DWORD)v11 != 1)
  {
    v37 = __clz(v17[v29]);
    v38 = v12 + v11;
    if (!v37)
    {
      v42 = 0;
      goto LABEL_56;
    }
    if (v38)
    {
      v39 = 0;
      v40 = v21;
      v41 = (v12 + v11);
      do
      {
        v42 = *v40 >> (32 - v37);
        *v40 = (*v40 << v37) | v39;
        ++v40;
        v39 = v42;
        --v41;
      }
      while (v41);
      if (!(_DWORD)v11)
      {
LABEL_56:
        v21[v38] = v42;
        v47 = (v11 - 2);
        v48 = (int)v12;
        do
        {
          v49 = (v11 + v48);
          v50 = v21[(v49 - 1)] | ((unint64_t)v21[v49] << 32);
          v51 = v17[v29];
          v52 = v50 / v51;
          v53 = v50 % v51;
          if (v50 / v51 == 0x100000000
            || (v54 = v50 / v51, v52 * v17[v47] > (v21[(v49 - 2)] | (v53 << 32))))
          {
            v54 = v52 - 1;
            v55 = v53 + v51;
            if (!HIDWORD(v55)
              && (v52 == 0x100000001 || v54 * v17[v47] > (v21[(v49 - 2)] | (v55 << 32))))
            {
              v54 = v52 - 2;
            }
          }
          if ((_DWORD)v11)
          {
            v56 = 0;
            v57 = 0;
            do
            {
              v58 = v54 * v17[v56];
              v59 = v21[(v48 + v56)] - (v57 + v58);
              v21[(v48 + v56)] = v59;
              v60 = HIDWORD(v58) - HIDWORD(v59);
              v57 = v60;
              ++v56;
            }
            while (v11 != v56);
            v61 = v21[v49];
            v21[v49] = v61 - v60;
            v19[v48] = v54;
            if (v60 > v61)
            {
              v62 = 0;
              LOBYTE(v63) = 0;
              v19[v48] = v54 - 1;
              do
              {
                v64 = v17[v62];
                v65 = v21[(v48 + v62)];
                if (v64 >= v65)
                  v66 = v21[(v48 + v62)];
                else
                  v66 = v17[v62];
                v67 = v64 + (v63 & 1) + v65;
                v21[(v48 + v62)] = v67;
                if (v67 >= v66)
                  v63 = v63 & (v67 == v66);
                else
                  v63 = 1;
                ++v62;
              }
              while (v11 != v62);
              v21[v49] += v63;
            }
          }
          else
          {
            v19[v48] = v54;
          }
          v35 = v48-- <= 0;
        }
        while (!v35);
        if (v22)
        {
          if (v37)
          {
            if ((v29 & 0x80000000) == 0)
            {
              v68 = 0;
              do
              {
                v69 = v21[v29];
                v22[v29] = (v69 >> v37) | v68;
                v68 = v69 << (32 - v37);
                v35 = v29-- <= 0;
              }
              while (!v35);
            }
          }
          else if ((v29 & 0x80000000) == 0)
          {
            do
            {
              v22[v29] = v21[v29];
              v35 = v29-- <= 0;
            }
            while (!v35);
          }
        }
        goto LABEL_89;
      }
    }
    else
    {
      v42 = 0;
      if (!(_DWORD)v11)
        goto LABEL_56;
    }
    v43 = 0;
    v44 = v11;
    v45 = (int *)v17;
    do
    {
      v46 = *v45 >> (32 - v37);
      *v45 = (*v45 << v37) | v43;
      ++v45;
      v43 = v46;
      --v44;
    }
    while (v44);
    goto LABEL_56;
  }
  v30 = 0;
  if ((v12 & 0x80000000) == 0)
  {
    v31 = *v17;
    v32 = v12;
    do
    {
      v33 = v30;
      v30 = v21[v32];
      v34 = v30 | (v33 << 32);
      if (v34)
      {
        if (v34 >= v31)
        {
          if (v34 == v31)
          {
            v30 = 0;
            v19[v32] = 1;
          }
          else
          {
            v36 = v34 / v31;
            v19[v32] = v36;
            v30 = (v30 - v31 * v36);
          }
          goto LABEL_41;
        }
      }
      else
      {
        v30 = 0;
      }
      v19[v32] = 0;
LABEL_41:
      v35 = v32-- <= 0;
    }
    while (!v35);
  }
  if (v22)
    *v22 = v30;
LABEL_89:
  if (v75 && a5)
  {
    v70 = 0;
    do
    {
      *a5++ = v19[v70] | ((unint64_t)v19[(v70 + 1)] << 32);
      v70 += 2;
    }
    while (2 * v75 != v70);
  }
  if ((_DWORD)v76 && v7)
  {
    v71 = 0;
    v72 = 2 * v76;
    do
    {
      *v7++ = v22[v71] | ((unint64_t)v22[(v71 + 1)] << 32);
      v71 += 2;
    }
    while (v72 != v71);
  }
  if (v21 != v77)
  {
    MEMORY[0x24BD1B380](v21, 0x1000C8052888210);
    MEMORY[0x24BD1B380](v17, 0x1000C8052888210);
    MEMORY[0x24BD1B380](v19, 0x1000C8052888210);
    if (v22)
      MEMORY[0x24BD1B380](v22, 0x1000C8052888210);
  }
}

void llvm::APInt::sdiv(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  llvm::APInt *v8;
  unint64_t v9;
  unsigned int v10;
  char v11;
  const llvm::APInt *v12;
  uint64_t v13;
  llvm::APInt *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;

  v6 = *((_DWORD *)this + 2);
  v7 = v6 - 1;
  v8 = this;
  if (v6 >= 0x41)
    v8 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v7 >> 6));
  v9 = *(_QWORD *)v8;
  v10 = *((_DWORD *)a2 + 2);
  v11 = v10 - 1;
  if (v10 >= 0x41)
    v12 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v10 - 1) >> 6));
  else
    v12 = a2;
  v13 = (1 << v11) & *(_QWORD *)v12;
  if (((v9 >> v7) & 1) != 0)
  {
    if (v13)
    {
      v14 = llvm::APInt::APInt((llvm::APInt *)&v28, this);
      llvm::APInt::flipAllBits((uint64_t)v14);
      llvm::APInt::operator++((uint64_t)&v28);
      v31 = v29;
      v30 = v28;
      v29 = 0;
      llvm::APInt::APInt((llvm::APInt *)&v24, a2);
      llvm::APInt::flipAllBits((uint64_t)&v24);
      llvm::APInt::operator++((uint64_t)&v24);
      v27 = v25;
      v26 = v24;
      v25 = 0;
      llvm::APInt::udiv((llvm::APInt *)&v30, (const llvm::APInt *)&v26, a3);
      if (v27 >= 0x41 && v26)
        MEMORY[0x24BD1B380](v26, 0x1000C8000313F17);
      if (v25 >= 0x41 && v24)
        MEMORY[0x24BD1B380](v24, 0x1000C8000313F17);
      if (v31 >= 0x41 && v30)
        MEMORY[0x24BD1B380](v30, 0x1000C8000313F17);
      if (v29 < 0x41)
        return;
      v15 = v28;
      if (!v28)
        return;
LABEL_32:
      MEMORY[0x24BD1B380](v15, 0x1000C8000313F17);
      return;
    }
    llvm::APInt::APInt((llvm::APInt *)&v20, this);
    llvm::APInt::flipAllBits((uint64_t)&v20);
    llvm::APInt::operator++((uint64_t)&v20);
    v31 = v21;
    v30 = v20;
    v21 = 0;
    llvm::APInt::udiv((llvm::APInt *)&v30, a2, (llvm::APInt *)&v22);
    llvm::APInt::flipAllBits((uint64_t)&v22);
    llvm::APInt::operator++((uint64_t)&v22);
    *((_DWORD *)a3 + 2) = v23;
    *(_QWORD *)a3 = v22;
    v23 = 0;
    if (v31 >= 0x41 && v30)
      MEMORY[0x24BD1B380](v30, 0x1000C8000313F17);
    if (v21 >= 0x41)
    {
      v15 = v20;
      if (v20)
        goto LABEL_32;
    }
  }
  else
  {
    if (!v13)
    {
      llvm::APInt::udiv(this, a2, a3);
      return;
    }
    llvm::APInt::APInt((llvm::APInt *)&v16, a2);
    llvm::APInt::flipAllBits((uint64_t)&v16);
    llvm::APInt::operator++((uint64_t)&v16);
    v31 = v17;
    v30 = v16;
    v17 = 0;
    llvm::APInt::udiv(this, (const llvm::APInt *)&v30, (llvm::APInt *)&v18);
    llvm::APInt::flipAllBits((uint64_t)&v18);
    llvm::APInt::operator++((uint64_t)&v18);
    *((_DWORD *)a3 + 2) = v19;
    *(_QWORD *)a3 = v18;
    v19 = 0;
    if (v31 >= 0x41 && v30)
      MEMORY[0x24BD1B380](v30, 0x1000C8000313F17);
    if (v17 >= 0x41)
    {
      v15 = v16;
      if (v16)
        goto LABEL_32;
    }
  }
}

void llvm::APInt::urem(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  const unint64_t *v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  const unint64_t *v14;
  unint64_t *v15;

  v6 = *((_DWORD *)this + 2);
  if (v6 <= 0x40)
  {
    v7 = *(_QWORD *)this % *(_QWORD *)a2;
    v8 = a3;
    v9 = v6;
LABEL_10:
    llvm::APInt::APInt(v8, v9, v7, 0);
    return;
  }
  v10 = (const unint64_t *)(((unint64_t)(v6 - llvm::APInt::countLeadingZerosSlowCase(this))
                                  + 63) >> 6);
  v11 = *((_DWORD *)a2 + 2);
  if (v11 > 0x40)
  {
    v12 = llvm::APInt::countLeadingZerosSlowCase(a2);
    if (!(_DWORD)v10)
    {
LABEL_8:
      v8 = a3;
      v9 = v6;
LABEL_9:
      v7 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    v12 = v11 + __clz(*(_QWORD *)a2) - 64;
    if (!(_DWORD)v10)
      goto LABEL_8;
  }
  v13 = v11 - v12;
  if ((_DWORD)v13 == 1)
    goto LABEL_8;
  v14 = (const unint64_t *)((unint64_t)(v13 + 63) >> 6);
  if (v10 < v14 || (llvm::APInt::compare(this, a2) & 0x80000000) != 0)
  {
    llvm::APInt::APInt(a3, this);
  }
  else
  {
    if (llvm::APInt::operator==((uint64_t)this, (const void **)a2))
    {
      v9 = *((_DWORD *)this + 2);
      v8 = a3;
      goto LABEL_9;
    }
    v9 = *((_DWORD *)this + 2);
    if ((_DWORD)v10 == 1)
    {
      v7 = **(_QWORD **)this % **(_QWORD **)a2;
      v8 = a3;
      goto LABEL_10;
    }
    llvm::APInt::APInt(a3, v9, 0, 0);
    llvm::APInt::divide(*(llvm::APInt **)this, v10, *(uint64_t **)a2, v14, 0, *(unint64_t **)a3, v15);
  }
}

void llvm::APInt::srem(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, llvm::APInt *a3@<X8>)
{
  unsigned int v6;
  unsigned int v7;
  llvm::APInt *v8;
  unint64_t v9;
  unsigned int v10;
  char v11;
  const llvm::APInt *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int v30;

  v6 = *((_DWORD *)this + 2);
  v7 = v6 - 1;
  v8 = this;
  if (v6 >= 0x41)
    v8 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v7 >> 6));
  v9 = *(_QWORD *)v8;
  v10 = *((_DWORD *)a2 + 2);
  v11 = v10 - 1;
  if (v10 >= 0x41)
    v12 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v10 - 1) >> 6));
  else
    v12 = a2;
  v13 = (1 << v11) & *(_QWORD *)v12;
  if (((v9 >> v7) & 1) != 0)
  {
    if (v13)
    {
      llvm::APInt::APInt((llvm::APInt *)&v25, this);
      llvm::APInt::flipAllBits((uint64_t)&v25);
      llvm::APInt::operator++((uint64_t)&v25);
      v28 = v26;
      v27 = v25;
      v26 = 0;
      llvm::APInt::APInt((llvm::APInt *)&v21, a2);
      llvm::APInt::flipAllBits((uint64_t)&v21);
      llvm::APInt::operator++((uint64_t)&v21);
      v24 = v22;
      v23 = v21;
      v22 = 0;
      llvm::APInt::urem((llvm::APInt *)&v27, (const llvm::APInt *)&v23, (llvm::APInt *)&v29);
      llvm::APInt::flipAllBits((uint64_t)&v29);
      llvm::APInt::operator++((uint64_t)&v29);
      *((_DWORD *)a3 + 2) = v30;
      *(_QWORD *)a3 = v29;
      v30 = 0;
      if (v24 >= 0x41 && v23)
        MEMORY[0x24BD1B380](v23, 0x1000C8000313F17);
      if (v22 >= 0x41 && v21)
        MEMORY[0x24BD1B380](v21, 0x1000C8000313F17);
      if (v28 >= 0x41 && v27)
        MEMORY[0x24BD1B380](v27, 0x1000C8000313F17);
      if (v26 < 0x41)
        return;
      v14 = v25;
      if (!v25)
        return;
LABEL_32:
      MEMORY[0x24BD1B380](v14, 0x1000C8000313F17);
      return;
    }
    llvm::APInt::APInt((llvm::APInt *)&v17, this);
    llvm::APInt::flipAllBits((uint64_t)&v17);
    llvm::APInt::operator++((uint64_t)&v17);
    v28 = v18;
    v27 = v17;
    v18 = 0;
    llvm::APInt::urem((llvm::APInt *)&v27, a2, (llvm::APInt *)&v19);
    llvm::APInt::flipAllBits((uint64_t)&v19);
    llvm::APInt::operator++((uint64_t)&v19);
    *((_DWORD *)a3 + 2) = v20;
    *(_QWORD *)a3 = v19;
    v20 = 0;
    if (v28 >= 0x41 && v27)
      MEMORY[0x24BD1B380](v27, 0x1000C8000313F17);
    if (v18 >= 0x41)
    {
      v14 = v17;
      if (v17)
        goto LABEL_32;
    }
  }
  else
  {
    if (!v13)
    {
      llvm::APInt::urem(this, a2, a3);
      return;
    }
    llvm::APInt::APInt((llvm::APInt *)&v15, a2);
    llvm::APInt::flipAllBits((uint64_t)&v15);
    llvm::APInt::operator++((uint64_t)&v15);
    v28 = v16;
    v27 = v15;
    v16 = 0;
    llvm::APInt::urem(this, (const llvm::APInt *)&v27, a3);
    if (v28 >= 0x41 && v27)
      MEMORY[0x24BD1B380](v27, 0x1000C8000313F17);
    if (v16 >= 0x41)
    {
      v14 = v15;
      if (v15)
        goto LABEL_32;
    }
  }
}

llvm::APInt *llvm::APInt::operator=(llvm::APInt *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((unsigned int *)this + 2);
  if (v3 > 0x40)
  {
    **(_QWORD **)this = a2;
    bzero((void *)(*(_QWORD *)this + 8), (((unint64_t)(v3 + 63) >> 3) - 8) & 0xFFFFFFF8);
    return this;
  }
  else
  {
    *(_QWORD *)this = a2;
    return (llvm::APInt *)llvm::APInt::clearUnusedBits((uint64_t)this);
  }
}

uint64_t llvm::APInt::sadd_ov@<X0>(llvm::APInt *this@<X0>, const llvm::APInt *a2@<X1>, BOOL *a3@<X2>, uint64_t a4@<X8>)
{
  llvm::APInt *v6;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  llvm::APInt *v13;
  _BOOL4 v14;
  unsigned int v15;
  char v16;
  const llvm::APInt *v17;
  BOOL v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;

  v6 = this;
  llvm::APInt::APInt((llvm::APInt *)&v23, this);
  result = llvm::APInt::operator+=((uint64_t)&v23, (_QWORD **)a2);
  v9 = v24;
  *(_DWORD *)(a4 + 8) = v24;
  v10 = v23;
  *(_QWORD *)a4 = v23;
  v24 = 0;
  v11 = *((_DWORD *)v6 + 2);
  v12 = v11 - 1;
  v13 = v6;
  if (v11 >= 0x41)
    v13 = (llvm::APInt *)(*(_QWORD *)v6 + 8 * (v12 >> 6));
  v14 = (*(_QWORD *)v13 & (1 << v12)) == 0;
  v15 = *((_DWORD *)a2 + 2);
  v16 = v15 - 1;
  if (v15 >= 0x41)
    v17 = (const llvm::APInt *)(*(_QWORD *)a2 + 8 * ((v15 - 1) >> 6));
  else
    v17 = a2;
  if (((v14 ^ (((*(_QWORD *)v17 >> v16) & 1) == 0)) & 1) != 0)
  {
    v18 = 0;
  }
  else
  {
    v19 = v9 - 1;
    v20 = (_QWORD *)(v10 + 8 * ((v9 - 1) >> 6));
    if (v9 >= 0x41)
      v21 = v20;
    else
      v21 = (_QWORD *)a4;
    v22 = *v21 & (1 << v19);
    if (v11 >= 0x41)
      v6 = (llvm::APInt *)(*(_QWORD *)v6 + 8 * (v12 >> 6));
    v18 = (v22 == 0) ^ ((*(_QWORD *)v6 & (1 << v12)) == 0);
  }
  *a3 = v18;
  return result;
}

BOOL llvm::APInt::isMinSignedValue(llvm::APInt *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 2);
  if (v1 > 0x40)
  {
    if (((*(_QWORD *)(*(_QWORD *)this + 8 * ((v1 - 1) >> 6)) >> (v1 - 1)) & 1) == 0)
      return 0;
    return llvm::APInt::countTrailingZerosSlowCase((unint64_t **)this) == v1 - 1;
  }
  else
  {
    return *(_QWORD *)this == 1 << (v1 - 1);
  }
}

BOOL llvm::APInt::isAllOnes(llvm::APInt *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 2);
  if (!v1)
    return 1;
  if (v1 > 0x40)
    return llvm::APInt::countTrailingOnesSlowCase(this) == v1;
  else
    return *(_QWORD *)this == 0xFFFFFFFFFFFFFFFFLL >> -(char)v1;
}

uint64_t llvm::APInt::smul_ov@<X0>(llvm::APInt *this@<X0>, const unint64_t ***a2@<X1>, BOOL *a3@<X2>, llvm::APInt *a4@<X8>)
{
  uint64_t result;
  unsigned int v9;
  const unint64_t **v10;
  void *__s1;
  unsigned int v12;

  result = (uint64_t)llvm::APInt::operator*((uint64_t)this, a2, a4);
  v9 = *((_DWORD *)a2 + 2);
  v10 = (const unint64_t **)a2;
  if (v9 >= 0x41)
  {
    result = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a2);
    if (v9 - result > 0x40)
      goto LABEL_5;
    v10 = *a2;
  }
  if (!*v10)
  {
    *a3 = 0;
    return result;
  }
LABEL_5:
  llvm::APInt::sdiv(a4, (const llvm::APInt *)a2, (llvm::APInt *)&__s1);
  if (v12 > 0x40)
  {
    if (!memcmp(__s1, *(const void **)this, (((unint64_t)v12 + 63) >> 3) & 0x3FFFFFF8))
    {
LABEL_7:
      result = llvm::APInt::isMinSignedValue(this);
      if ((_DWORD)result)
        result = llvm::APInt::isAllOnes((llvm::APInt *)a2);
      goto LABEL_11;
    }
  }
  else if (__s1 == *(void **)this)
  {
    goto LABEL_7;
  }
  result = 1;
LABEL_11:
  *a3 = result;
  if (v12 >= 0x41)
  {
    result = (uint64_t)__s1;
    if (__s1)
      return MEMORY[0x24BD1B380](__s1, 0x1000C8000313F17);
  }
  return result;
}

unint64_t llvm::APInt::countl_one(llvm::APInt *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 2);
  if (v1 > 0x40)
    return llvm::APInt::countLeadingOnesSlowCase(this);
  if (v1)
    return __clz(~(*(_QWORD *)this << -(char)v1));
  return 0;
}

void llvm::APInt::toString(llvm::APInt *this, uint64_t a2, unsigned int a3, int a4, int a5)
{
  llvm::APInt *v8;
  unint64_t v9;
  char *v10;
  unsigned int v11;
  unint64_t v12;
  char v13;
  unsigned __int8 *v14;
  int v15;
  _BYTE *v16;
  BOOL v17;
  char v18;
  unsigned __int8 *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  unint64_t v44;
  char v45;
  unint64_t v46;
  llvm::APInt *v47;
  unsigned int v48;
  uint64_t v49;
  llvm::APInt *v50;
  unsigned int v51;
  _BYTE v52[7];
  uint64_t v53;

  v8 = this;
  v53 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    HIDWORD(v9) = a3;
    LODWORD(v9) = a3 - 2;
    v10 = off_251C11510[(int)(v9 >> 1)];
  }
  else
  {
    v10 = "";
  }
  v11 = *((_DWORD *)this + 2);
  if (v11 <= 0x40)
  {
    v12 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if (a4)
      {
        v12 = (uint64_t)(v12 << -(char)v11) >> -(char)v11;
        if ((v12 & 0x8000000000000000) != 0)
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, 45);
          v12 = -(uint64_t)v12;
        }
      }
      v13 = *v10;
      if (*v10)
      {
        v14 = (unsigned __int8 *)(v10 + 1);
        do
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, v13);
          v15 = *v14++;
          v13 = v15;
        }
        while (v15);
      }
      v16 = v52;
      if (v12)
      {
        v16 = v52;
        do
        {
          *--v16 = llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL)const::Digits[v12 % a3];
          v17 = v12 >= a3;
          v12 /= a3;
        }
        while (v17);
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>((_QWORD *)a2, v16, v52);
      return;
    }
    goto LABEL_17;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) == v11)
  {
LABEL_17:
    v18 = *v10;
    if (*v10)
    {
      v19 = (unsigned __int8 *)(v10 + 1);
      do
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, v18);
        v20 = *v19++;
        v18 = v20;
      }
      while (v20);
    }
    llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, 48);
    return;
  }
  llvm::APInt::APInt((llvm::APInt *)&v47, v8);
  if (a4)
  {
    v21 = *((_DWORD *)v8 + 2);
    v22 = v21 - 1;
    if (v21 >= 0x41)
      v8 = (llvm::APInt *)(*(_QWORD *)v8 + 8 * (v22 >> 6));
    if (((*(_QWORD *)v8 >> v22) & 1) != 0)
    {
      llvm::APInt::flipAllBits((uint64_t)&v47);
      llvm::APInt::operator++((uint64_t)&v47);
      llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, 45);
    }
  }
  v23 = *v10;
  if (*v10)
  {
    v24 = (unsigned __int8 *)(v10 + 1);
    do
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, v23);
      v25 = *v24++;
      v23 = v25;
    }
    while (v25);
  }
  v26 = *(unsigned int *)(a2 + 8);
  if (a3 == 2 || a3 == 8)
  {
    if (a3 == 8)
      v27 = 3;
    else
      v27 = 1;
    goto LABEL_36;
  }
  if (a3 == 16)
  {
    v27 = 4;
LABEL_36:
    v28 = a3 - 1;
    v29 = v27;
    while (1)
    {
      LODWORD(v30) = v48;
      if (v48 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47) == (_DWORD)v30)
          goto LABEL_73;
        v31 = *(_QWORD *)v47;
      }
      else
      {
        LODWORD(v31) = (_DWORD)v47;
        if (!v47)
          goto LABEL_73;
      }
      llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL)const::Digits[v31 & v28]);
      if (v48 > 0x40)
      {
        llvm::APInt::tcShiftRight(v47, (unint64_t *)(((unint64_t)v48 + 63) >> 6), v29);
      }
      else if (v48 == v29)
      {
        v47 = 0;
      }
      else
      {
        v47 = (llvm::APInt *)((unint64_t)v47 >> v29);
      }
    }
  }
  while (1)
  {
    v30 = v48;
    if (v48 <= 0x40)
    {
      if (!v47)
        break;
      v49 = a3;
      v32 = (unint64_t)v47 / a3;
      v46 = (unint64_t)v47 % a3;
      v33 = v48;
LABEL_50:
      llvm::APInt::APInt((llvm::APInt *)&v50, v33, v32, 0);
      if (v48 >= 0x41 && v47)
        MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
      v47 = v50;
LABEL_63:
      v48 = v51;
      goto LABEL_64;
    }
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47) == (_DWORD)v30)
      break;
    v46 = 0;
    v49 = a3;
    v34 = v30 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v47);
    v35 = (unint64_t)(v34 + 63) >> 6;
    if (!(_DWORD)v35)
    {
      v36 = v30;
      v37 = 0;
LABEL_59:
      llvm::APInt::APInt((llvm::APInt *)&v50, v36, v37, 0);
      if (v48 >= 0x41 && v47)
        MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
      v46 = 0;
      v47 = v50;
      goto LABEL_63;
    }
    if (a3 == 1)
    {
      llvm::APInt::operator=((llvm::APInt *)&v47, (const llvm::APInt *)&v47);
      v46 = 0;
      goto LABEL_64;
    }
    if (v34 <= 0x40)
    {
      if (*(_QWORD *)v47 < (unint64_t)a3)
      {
        v46 = *(_QWORD *)v47;
        v33 = v30;
        v32 = 0;
        goto LABEL_50;
      }
      if (*(_QWORD *)v47 == a3)
      {
        v36 = v30;
        v37 = 1;
        goto LABEL_59;
      }
    }
    llvm::APInt::reallocate((uint64_t)&v47, v30);
    if ((_DWORD)v35 == 1)
    {
      v39 = *(_QWORD *)v47;
      v40 = *(_QWORD *)v47 / (unint64_t)a3;
      llvm::APInt::operator=((llvm::APInt *)&v47, v40);
      v46 = v39 - v40 * a3;
    }
    else
    {
      llvm::APInt::divide(v47, (const unint64_t *)v35, &v49, (const unint64_t *)1, (unint64_t *)v47, &v46, v38);
      bzero((char *)v47 + 8 * v35, 8 * (((unint64_t)(v30 + 63) >> 6) - v35));
    }
LABEL_64:
    llvm::SmallVectorTemplateBase<char,true>::push_back((_QWORD *)a2, llvm::APInt::toString(llvm::SmallVectorImpl<char> &,unsigned int,BOOL,BOOL)const::Digits[v46]);
  }
LABEL_73:
  v41 = *(_QWORD *)(a2 + 8);
  v42 = (_BYTE *)(*(_QWORD *)a2 + v41 - 1);
  if (v26 != v41 && (unint64_t)v42 > *(_QWORD *)a2 + v26)
  {
    v44 = v26 + *(_QWORD *)a2 + 1;
    do
    {
      v45 = *(_BYTE *)(v44 - 1);
      *(_BYTE *)(v44 - 1) = *v42;
      *v42-- = v45;
      v17 = v44++ >= (unint64_t)v42;
    }
    while (!v17);
    LODWORD(v30) = v48;
  }
  if (v30 >= 0x41 && v47)
    MEMORY[0x24BD1B380](v47, 0x1000C8000313F17);
}

void llvm::APInt::print(llvm::APInt *this, llvm::raw_ostream *a2, int a3)
{
  void *v4;
  __int128 v5;
  _QWORD v6[6];

  v6[5] = *MEMORY[0x24BDAC8D0];
  v4 = v6;
  v5 = xmmword_24AA2B130;
  llvm::APInt::toString(this, (uint64_t)&v4, 0xAu, a3, 0);
  llvm::raw_ostream::write(a2, (const char *)v4, v5);
  if (v4 != v6)
    free(v4);
}

void llvm::APInt::tcExtract(llvm::APInt *this, unint64_t *a2, uint64_t a3, const unint64_t *a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v7;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t *v12;
  llvm::APInt *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unint64_t v19;

  v5 = a4;
  v7 = a2;
  v9 = (_DWORD)a4 + 63;
  v10 = ((_DWORD)a4 + 63) >> 6;
  v11 = a5 >> 6;
  if (((_DWORD)a4 + 63) >= 0x40)
  {
    v12 = (uint64_t *)(a3 + 8 * v11);
    v13 = this;
    v14 = v9 >> 6;
    do
    {
      v15 = *v12++;
      *(_QWORD *)v13 = v15;
      v13 = (llvm::APInt *)((char *)v13 + 8);
      --v14;
    }
    while (v14);
  }
  v16 = a5 & 0x3F;
  llvm::APInt::tcShiftRight(this, (unint64_t *)(v9 >> 6), v16);
  v17 = (v9 & 0xFFFFFFC0) - v16;
  if (v17 >= v5)
  {
    if (v17 <= v5 || (v5 & 0x3F) == 0)
      goto LABEL_10;
    v18 = v10 - 1;
    v19 = *((_QWORD *)this + v10 - 1) & (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
  }
  else
  {
    v18 = v10 - 1;
    v19 = ((*(_QWORD *)(a3 + 8 * (v11 + v10)) & (0xFFFFFFFFFFFFFFFFLL >> (v17 - v5))) << v17) | *((_QWORD *)this + v10 - 1);
  }
  *((_QWORD *)this + v18) = v19;
LABEL_10:
  if (v10 < v7)
    bzero((char *)this + ((v9 >> 3) & 0x1FFFFFF8), 8 * (~v10 + v7) + 8);
}

_QWORD *llvm::APInt::tcNegate(_QWORD *this, unint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  _QWORD *v4;
  uint64_t v5;

  if ((_DWORD)a2)
  {
    v2 = 0;
    do
    {
      this[v2] = ~this[v2];
      ++v2;
    }
    while (a2 != v2);
    v3 = __CFADD__((*this)++, 1);
    if (v3)
    {
      v4 = this + 1;
      v5 = a2 - 1;
      do
      {
        if (!v5)
          break;
        --v5;
        v3 = __CFADD__((*v4++)++, 1);
      }
      while (v3);
    }
  }
  return this;
}

void llvm::APInt::tcFullMultiply(llvm::APInt *this, unint64_t *a2, const unint64_t **a3, const unint64_t *a4, const unint64_t *a5)
{
  llvm::APInt *v7;
  const unint64_t *v8;
  unint64_t *v9;
  const unint64_t *v10;

  v7 = this;
  do
  {
    v8 = a5;
    a5 = a4;
    v9 = (unint64_t *)a3;
    a3 = (const unint64_t **)a2;
    a2 = v9;
    a4 = v8;
  }
  while (a5 > v8);
  *(_QWORD *)this = 0;
  if (v8 >= 2)
    bzero((char *)this + 8, 8 * ((_DWORD)v8 - 2) + 8);
  if ((_DWORD)a5)
  {
    a5 = (const unint64_t *)a5;
    do
    {
      v10 = *a3++;
      llvm::APInt::tcMultiplyPart(v7, v9, v10, 0, v8, (_DWORD)v8 + 1, 1);
      v7 = (llvm::APInt *)((char *)v7 + 8);
      a5 = (const unint64_t *)((char *)a5 - 1);
    }
    while (a5);
  }
}

_QWORD *llvm::APInt::setBits(_QWORD *this, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 != a3)
  {
    if (a2 > 0x3F || a3 > 0x40)
    {
      return llvm::APInt::setBitsSlowCase(this, a2, a3);
    }
    else
    {
      v3 = 0xFFFFFFFFFFFFFFFFLL >> (a2 - a3) << a2;
      if (*((_DWORD *)this + 2) > 0x40u)
        *(_QWORD *)*this |= v3;
      else
        *this |= v3;
    }
  }
  return this;
}

unsigned int *llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(unsigned int *result, int a2)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[2];
  if (v4 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v4 + 1, 4);
    LODWORD(v4) = v3[2];
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = a2;
  ++v3[2];
  return result;
}

llvm::APInt *llvm::APInt::APInt(llvm::APInt *this, const llvm::APInt *a2)
{
  unsigned int v4;
  void *v5;

  v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 2) = v4;
  if (v4 > 0x40)
  {
    v5 = (void *)operator new[]();
    *(_QWORD *)this = v5;
    memcpy(v5, *(const void **)a2, (((unint64_t)*((unsigned int *)this + 2) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)this = *(_QWORD *)a2;
  }
  return this;
}

uint64_t llvm::APInt::getNumSignBits(llvm::APInt *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = *((_DWORD *)this + 2);
  v2 = v1 - 1;
  if (v1 <= 0x40)
  {
    if (((*(_QWORD *)this >> v2) & 1) == 0)
      return v1 + __clz(*(_QWORD *)this) - 64;
    return llvm::APInt::countl_one(this);
  }
  if (((*(_QWORD *)(*(_QWORD *)this + 8 * (v2 >> 6)) >> v2) & 1) != 0)
    return llvm::APInt::countl_one(this);
  return llvm::APInt::countLeadingZerosSlowCase(this);
}

llvm::APInt **llvm::APInt::shl@<X0>(llvm::APInt *this@<X0>, uint64_t ***a2@<X1>, unsigned int *a3@<X8>)
{
  unsigned int LimitedValue;

  llvm::APInt::APInt((llvm::APInt *)a3, this);
  LimitedValue = llvm::APInt::getLimitedValue(a2, a3[2]);
  return llvm::APInt::operator<<=((llvm::APInt **)a3, LimitedValue);
}

char *llvm::ARMAttributeParser::stringAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a1 + 120);
  if (v6)
  {
    v7 = 24 * v6;
    v8 = &str_2;
    v9 = *(_QWORD *)(a1 + 112);
    while (*(_DWORD *)v9 != (_DWORD)a2)
    {
      v9 += 24;
      v7 -= 24;
      if (!v7)
      {
        v10 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 112);
  }
  if (v9 == *(_QWORD *)(a1 + 112) + 24 * v6)
  {
    v10 = 0;
    v8 = &str_2;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(v9 + 16);
    v13 = 4;
    if (v12 < 4)
      v13 = v12;
    v8 = (void *)(v11 + v13);
    v10 = v12 - v13;
  }
LABEL_12:
  result = llvm::DataExtractor::getCStrRef((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v16 = *(_QWORD *)(a1 + 104);
  if (v16)
  {
    v17 = result;
    v18 = v15;
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v16 + 224))(*(_QWORD *)(a1 + 104), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), "Tag", 3, a2);
    if (v10)
      (*(void (**)(_QWORD, const char *, uint64_t, void *, unint64_t))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), "TagName", 7, v8, v10);
    (*(void (**)(_QWORD, const char *, uint64_t, char *, uint64_t))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), "Value", 5, v17, v18);
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 232))(v16);
  }
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::CPU_arch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "CPU_arch", a2, (uint64_t)CPU_arch_strings, 0x17uLL, a3);
}

_QWORD *llvm::ARMAttributeParser::CPU_arch_profile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *result;

  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v7 = "Unknown";
  v8 = 7;
  v9 = "Microcontroller";
  v10 = 15;
  v11 = "Real-time";
  v12 = 9;
  v13 = "Classic";
  if (ULEB128 != 83)
    v13 = "Unknown";
  if (ULEB128 != 82)
  {
    v12 = 7;
    v11 = v13;
  }
  if (ULEB128 != 77)
  {
    v10 = v12;
    v9 = v11;
  }
  if (ULEB128 == 65)
  {
    v8 = 11;
    v7 = "Application";
  }
  if (!ULEB128)
  {
    v8 = 4;
    v7 = "None";
  }
  if (ULEB128 <= 76)
    v14 = v8;
  else
    v14 = v10;
  if (ULEB128 <= 76)
    v15 = (uint64_t)v7;
  else
    v15 = (uint64_t)v9;
  result = llvm::ELFAttributeParser::printAttribute((_QWORD *)a1, a2, ULEB128, v15, v14);
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::ARM_ISA_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ARM_ISA_use", a2, (uint64_t)llvm::ARMAttributeParser::ARM_ISA_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::THUMB_ISA_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "THUMB_ISA_use", a2, (uint64_t)llvm::ARMAttributeParser::THUMB_ISA_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::FP_arch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "FP_arch", a2, (uint64_t)llvm::ARMAttributeParser::FP_arch(llvm::ARMBuildAttrs::AttrType)::strings, 9uLL, a3);
}

void llvm::ARMAttributeParser::WMMX_arch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "WMMX_arch", a2, (uint64_t)llvm::ARMAttributeParser::WMMX_arch(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::Advanced_SIMD_arch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "Advanced_SIMD_arch", a2, (uint64_t)llvm::ARMAttributeParser::Advanced_SIMD_arch(llvm::ARMBuildAttrs::AttrType)::strings, 5uLL, a3);
}

void llvm::ARMAttributeParser::MVE_arch(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "MVE_arch", a2, (uint64_t)llvm::ARMAttributeParser::MVE_arch(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::PCS_config(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "PCS_config", a2, (uint64_t)llvm::ARMAttributeParser::PCS_config(llvm::ARMBuildAttrs::AttrType)::strings, 8uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_R9_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_R9_use", a2, (uint64_t)llvm::ARMAttributeParser::ABI_PCS_R9_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_RW_data(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_RW_data", a2, (uint64_t)llvm::ARMAttributeParser::ABI_PCS_RW_data(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_RO_data(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_RO_data", a2, (uint64_t)llvm::ARMAttributeParser::ABI_PCS_RO_data(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_GOT_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_GOT_use", a2, (uint64_t)llvm::ARMAttributeParser::ABI_PCS_GOT_use(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_PCS_wchar_t(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_PCS_wchar_t", a2, (uint64_t)llvm::ARMAttributeParser::ABI_PCS_wchar_t(llvm::ARMBuildAttrs::AttrType)::strings, 5uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_rounding(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_rounding", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_rounding(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_denormal(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_denormal", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_denormal(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_exceptions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_exceptions", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_exceptions(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_user_exceptions(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_user_exceptions", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_user_exceptions(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_number_model(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_number_model", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_number_model(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_align_needed(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t ULEB128;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  void *v15;
  char v16;
  void *p_p;
  uint64_t v18;
  std::string v19;
  void *__p;
  __int128 v21;
  std::string v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v7 = ULEB128;
  __p = 0;
  v21 = 0uLL;
  if (ULEB128 <= 3)
  {
    v8 = llvm::ARMAttributeParser::ABI_align_needed(llvm::ARMBuildAttrs::AttrType)::strings[ULEB128];
LABEL_13:
    MEMORY[0x24BD1B104](&__p, v8);
    goto LABEL_14;
  }
  if (ULEB128 > 0xC)
  {
    v8 = "Invalid";
    goto LABEL_13;
  }
  v9 = 0;
  v10 = 1 << ULEB128;
  do
  {
    v22.__r_.__value_.__s.__data_[v9-- + 20] = (v10 % 0xA) | 0x30;
    v11 = v10 > 9;
    v10 /= 0xAuLL;
  }
  while (v11);
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v19, &v22.__r_.__value_.__s.__data_[v9 + 21], &v22.__r_.__value_.__s.__data_[21], -v9);
  v12 = std::string::insert(&v19, 0, "8-byte alignment, ");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v22, "-byte extended alignment");
  v15 = (void *)v14->__r_.__value_.__r.__words[0];
  v23[0] = v14->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
  v16 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
  __p = v15;
  *(_QWORD *)&v21 = v23[0];
  *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)((char *)v23 + 7);
  HIBYTE(v21) = v16;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
LABEL_14:
  if (v21 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v21 >= 0)
    v18 = HIBYTE(v21);
  else
    v18 = v21;
  llvm::ELFAttributeParser::printAttribute((_QWORD *)a1, a2, v7, (uint64_t)p_p, v18);
  *a3 = 0;
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void llvm::ARMAttributeParser::ABI_align_preserved(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t ULEB128;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  void **v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  std::string *p_p;
  std::string::size_type size;
  void *v22[2];
  unsigned __int8 v23;
  void *v24[2];
  unsigned __int8 v25;
  std::string v26;
  std::string __p;
  _QWORD v28[2];
  std::string v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v7 = ULEB128;
  memset(&__p, 0, sizeof(__p));
  if (ULEB128 > 3)
  {
    if (ULEB128 > 0xC)
    {
      MEMORY[0x24BD1B104](&__p, "Invalid");
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(&v26, "8-byte stack alignment, ");
      v8 = 0;
      v9 = 1 << v7;
      do
      {
        v29.__r_.__value_.__s.__data_[v8-- + 20] = (v9 % 0xA) | 0x30;
        v10 = v9 > 9;
        v9 /= 0xAuLL;
      }
      while (v10);
      std::string::__init_with_size[abi:nn180100]<char *,char *>(v24, &v29.__r_.__value_.__s.__data_[v8 + 21], &v29.__r_.__value_.__s.__data_[21], -v8);
      if ((v25 & 0x80u) == 0)
        v11 = v24;
      else
        v11 = (void **)v24[0];
      if ((v25 & 0x80u) == 0)
        v12 = v25;
      else
        v12 = (std::string::size_type)v24[1];
      v13 = std::string::append(&v26, (const std::string::value_type *)v11, v12);
      v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::string::basic_string[abi:nn180100]<0>(v22, "-byte data alignment");
      if ((v23 & 0x80u) == 0)
        v15 = v22;
      else
        v15 = (void **)v22[0];
      if ((v23 & 0x80u) == 0)
        v16 = v23;
      else
        v16 = (std::string::size_type)v22[1];
      v17 = std::string::append(&v29, (const std::string::value_type *)v15, v16);
      v18 = v17->__r_.__value_.__r.__words[0];
      v28[0] = v17->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = v18;
      __p.__r_.__value_.__l.__size_ = v28[0];
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v28 + 7);
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = v19;
      if ((char)v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if ((char)v25 < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::basic_string[abi:nn180100]<0>(&v29, llvm::ARMAttributeParser::ABI_align_preserved(llvm::ARMBuildAttrs::AttrType)::strings[ULEB128]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = v29;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::ELFAttributeParser::printAttribute((_QWORD *)a1, a2, v7, (uint64_t)p_p, size);
  *a3 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void llvm::ARMAttributeParser::ABI_enum_size(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_enum_size", a2, (uint64_t)llvm::ARMAttributeParser::ABI_enum_size(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_HardFP_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_HardFP_use", a2, (uint64_t)llvm::ARMAttributeParser::ABI_HardFP_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_VFP_args(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_VFP_args", a2, (uint64_t)llvm::ARMAttributeParser::ABI_VFP_args(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::ABI_WMMX_args(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_WMMX_args", a2, (uint64_t)llvm::ARMAttributeParser::ABI_WMMX_args(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::ABI_optimization_goals(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_optimization_goals", a2, (uint64_t)llvm::ARMAttributeParser::ABI_optimization_goals(llvm::ARMBuildAttrs::AttrType)::strings, 7uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_optimization_goals(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_optimization_goals", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_optimization_goals(llvm::ARMBuildAttrs::AttrType)::strings, 7uLL, a3);
}

char *llvm::ARMAttributeParser::compatibility@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  llvm::formatv_object_base **v7;
  uint64_t *v8;
  unint64_t ULEB128;
  char *result;
  size_t v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  _DWORD *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v6 = (uint64_t *)(a1 + 128);
  v7 = (llvm::formatv_object_base **)(a1 + 152);
  v8 = (uint64_t *)(a1 + 160);
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  result = llvm::DataExtractor::getCStrRef(v6, v7, v8);
  v12 = *(_QWORD *)(a1 + 104);
  if (v12)
  {
    v13 = result;
    v14 = v11;
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v12 + 224))(*(_QWORD *)(a1 + 104), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), "Tag", 3, a2);
    v15 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 104) + 264))(*(_QWORD *)(a1 + 104));
    v16 = v15;
    v17 = (_DWORD *)*((_QWORD *)v15 + 4);
    if (*((_QWORD *)v15 + 3) - (_QWORD)v17 > 6uLL)
    {
      *(_DWORD *)((char *)v17 + 3) = 540697973;
      *v17 = 1970037078;
      *((_QWORD *)v15 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v15, "Value: ", 7uLL);
    }
    write_unsigned<unsigned long>(v16, ULEB128, 0, 0, 0);
    v18 = (_WORD *)*((_QWORD *)v16 + 4);
    if (*((_QWORD *)v16 + 3) - (_QWORD)v18 > 1uLL)
    {
      *v18 = 8236;
      *((_QWORD *)v16 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v16, ", ", 2uLL);
    }
    v19 = llvm::raw_ostream::operator<<(v16, v13, v14);
    v20 = (_BYTE *)*((_QWORD *)v19 + 4);
    if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
    {
      llvm::raw_ostream::write(v19, 10);
    }
    else
    {
      *((_QWORD *)v19 + 4) = v20 + 1;
      *v20 = 10;
    }
    v21 = *(_QWORD *)(a1 + 120);
    if (v21)
    {
      v22 = 24 * v21;
      v23 = &str_2;
      v24 = *(_QWORD *)(a1 + 112);
      while (*(_DWORD *)v24 != (_DWORD)a2)
      {
        v24 += 24;
        v22 -= 24;
        if (!v22)
        {
          v25 = 0;
          goto LABEL_22;
        }
      }
    }
    else
    {
      v24 = *(_QWORD *)(a1 + 112);
    }
    if (v24 == *(_QWORD *)(a1 + 112) + 24 * v21)
    {
      v25 = 0;
      v23 = &str_2;
    }
    else
    {
      v26 = *(_QWORD *)(v24 + 8);
      v27 = *(_QWORD *)(v24 + 16);
      v28 = 4;
      if (v27 < 4)
        v28 = v27;
      v23 = (void *)(v26 + v28);
      v25 = v27 - v28;
    }
LABEL_22:
    (*(void (**)(_QWORD, const char *, uint64_t, void *, unint64_t))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), "TagName", 7, v23, v25);
    (*(void (**)(void))(**(_QWORD **)(a1 + 104) + 208))();
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 232))(v12);
  }
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::CPU_unaligned_access(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "CPU_unaligned_access", a2, (uint64_t)llvm::ARMAttributeParser::CPU_unaligned_access(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::FP_HP_extension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "FP_HP_extension", a2, (uint64_t)llvm::ARMAttributeParser::FP_HP_extension(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::ABI_FP_16bit_format(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "ABI_FP_16bit_format", a2, (uint64_t)llvm::ARMAttributeParser::ABI_FP_16bit_format(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::MPextension_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "MPextension_use", a2, (uint64_t)llvm::ARMAttributeParser::MPextension_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::DIV_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "DIV_use", a2, (uint64_t)llvm::ARMAttributeParser::DIV_use(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::DSP_extension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "DSP_extension", a2, (uint64_t)llvm::ARMAttributeParser::DSP_extension(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::T2EE_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "T2EE_use", a2, (uint64_t)llvm::ARMAttributeParser::T2EE_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::Virtualization_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "Virtualization_use", a2, (uint64_t)llvm::ARMAttributeParser::Virtualization_use(llvm::ARMBuildAttrs::AttrType)::strings, 4uLL, a3);
}

void llvm::ARMAttributeParser::PAC_extension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "PAC_extension", a2, (uint64_t)llvm::ARMAttributeParser::PAC_extension(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::BTI_extension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "BTI_extension", a2, (uint64_t)llvm::ARMAttributeParser::BTI_extension(llvm::ARMBuildAttrs::AttrType)::strings, 3uLL, a3);
}

void llvm::ARMAttributeParser::PACRET_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "PACRET_use", a2, (uint64_t)llvm::ARMAttributeParser::PACRET_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

void llvm::ARMAttributeParser::BTI_use(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute(a1, "BTI_use", a2, (uint64_t)llvm::ARMAttributeParser::BTI_use(llvm::ARMBuildAttrs::AttrType)::strings, 2uLL, a3);
}

_QWORD *llvm::ARMAttributeParser::nodefaults@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  _QWORD *result;

  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  result = llvm::ELFAttributeParser::printAttribute((_QWORD *)a1, a2, ULEB128, (uint64_t)"Unspecified Tags UNDEFINED", 26);
  *a3 = 0;
  return result;
}

void llvm::ARMAttributeParser::also_compatible_with(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  char *CStrRef;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ULEB128;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  const std::error_category *v15;
  std::string *p_p;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  size_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  size_t v57;
  const std::error_category *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  llvm::raw_ostream *v64;
  uint64_t v65;
  llvm::raw_ostream *v66;
  uint64_t v67;
  llvm::raw_ostream *v68;
  llvm::raw_ostream *v69;
  _BYTE *v70;
  llvm::formatv_object_base *v71;
  uint64_t v73[4];
  __int16 v74;
  std::string __p;
  uint64_t v76;
  __int16 v77;
  uint64_t v78;
  unint64_t v79;
  __int128 v80;
  const char *v81;
  __int16 v82;
  uint64_t v83;
  void (**v84)(llvm::raw_ostream *__hidden);
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  int v91;
  void **v92;
  std::string v93;
  llvm::formatv_object_base *v94;
  uint64_t v95[2];
  _QWORD *v96;
  __int128 v97;
  _QWORD v98[3];

  v98[1] = *MEMORY[0x24BDAC8D0];
  v96 = v98;
  v97 = xmmword_24AA2ACB0;
  v85 = 0;
  v89 = 0;
  v90 = 0;
  v91 = 1;
  v87 = 0;
  v88 = 0;
  v86 = 0;
  v84 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  v92 = (void **)&v96;
  llvm::raw_ostream::SetUnbuffered(&v84);
  v5 = *(_QWORD *)(a1 + 152);
  CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v5;
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v83 = ULEB128;
  v11 = *(_QWORD *)(a1 + 120);
  if (!v11)
  {
LABEL_5:
    v15 = std::generic_category();
    *(_QWORD *)&v80 = &v83;
    v81 = " is not a valid tag number";
    v82 = 780;
    llvm::Twine::str((llvm::formatv_object_base **)&v80, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v17 = 33;
LABEL_9:
    v73[0] = v17;
    v73[1] = (uint64_t)v15;
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)p_p;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v93, v73, v95);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v18 = v95[0];
LABEL_12:
    v19 = 1;
    goto LABEL_36;
  }
  v12 = ULEB128;
  v13 = *(_DWORD **)(a1 + 112);
  v14 = 24 * v11;
  while (ULEB128 != *v13)
  {
    v13 += 6;
    v14 -= 24;
    if (!v14)
      goto LABEL_5;
  }
  if ((unint64_t)(ULEB128 - 4) > 0x3F)
  {
LABEL_66:
    v52 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
    v53 = *(_QWORD *)(a1 + 120);
    if (v53)
    {
      v54 = 24 * v53;
      v55 = &str_2;
      v56 = *(_QWORD *)(a1 + 112);
      while (*(_DWORD *)v56 != v12)
      {
        v56 += 24;
        v54 -= 24;
        if (!v54)
        {
          v57 = 0;
          goto LABEL_88;
        }
      }
    }
    else
    {
      v56 = *(_QWORD *)(a1 + 112);
    }
    if (v56 == *(_QWORD *)(a1 + 112) + 24 * v53)
    {
      v57 = 0;
      v55 = &str_2;
    }
    else
    {
      v55 = *(const void **)(v56 + 8);
      v57 = *(_QWORD *)(v56 + 16);
    }
LABEL_88:
    v64 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v84, v55, v57);
    v65 = *((_QWORD *)v64 + 4);
    if ((unint64_t)(*((_QWORD *)v64 + 3) - v65) > 2)
    {
      *(_BYTE *)(v65 + 2) = 32;
      *(_WORD *)v65 = 15648;
      *((_QWORD *)v64 + 4) += 3;
    }
    else
    {
      v64 = llvm::raw_ostream::write(v64, " = ", 3uLL);
    }
    write_unsigned<unsigned long>(v64, v52, 0, 0, 0);
    goto LABEL_35;
  }
  if (((1 << (ULEB128 - 4)) & 0x8000000010000003) != 0)
  {
    v20 = llvm::DataExtractor::getCStrRef((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
    v22 = v21;
    v23 = *(_QWORD *)(a1 + 120);
    if (v23)
    {
      v24 = 24 * v23;
      v25 = &str_2;
      v26 = *(_QWORD *)(a1 + 112);
      while (*(_DWORD *)v26 != v12)
      {
        v26 += 24;
        v24 -= 24;
        if (!v24)
        {
          v27 = 0;
          goto LABEL_31;
        }
      }
    }
    else
    {
      v26 = *(_QWORD *)(a1 + 112);
    }
    if (v26 == *(_QWORD *)(a1 + 112) + 24 * v23)
    {
      v27 = 0;
      v25 = &str_2;
    }
    else
    {
      v25 = *(const void **)(v26 + 8);
      v27 = *(_QWORD *)(v26 + 16);
    }
LABEL_31:
    v33 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v84, v25, v27);
    v34 = *((_QWORD *)v33 + 4);
    if ((unint64_t)(*((_QWORD *)v33 + 3) - v34) > 2)
    {
      *(_BYTE *)(v34 + 2) = 32;
      *(_WORD *)v34 = 15648;
      *((_QWORD *)v33 + 4) += 3;
    }
    else
    {
      v33 = llvm::raw_ostream::write(v33, " = ", 3uLL);
    }
    llvm::raw_ostream::operator<<(v33, v20, v22);
    goto LABEL_35;
  }
  if (ULEB128 != 6)
  {
    if (ULEB128 == 65)
    {
      v15 = std::generic_category();
      v28 = *(_QWORD *)(a1 + 120);
      if (v28)
      {
        v29 = 24 * v28;
        v30 = &str_2;
        v31 = *(_QWORD *)(a1 + 112);
        while (*(_DWORD *)v31 != 65)
        {
          v31 += 24;
          v29 -= 24;
          if (!v29)
          {
            v32 = 0;
            goto LABEL_83;
          }
        }
      }
      else
      {
        v31 = *(_QWORD *)(a1 + 112);
      }
      if (v31 == *(_QWORD *)(a1 + 112) + 24 * v28)
      {
        v32 = 0;
        v30 = &str_2;
      }
      else
      {
        v30 = *(void **)(v31 + 8);
        v32 = *(_QWORD *)(v31 + 16);
      }
LABEL_83:
      v82 = 773;
      *(_QWORD *)&v80 = v30;
      *((_QWORD *)&v80 + 1) = v32;
      v81 = " cannot be recursively defined";
      llvm::Twine::str((llvm::formatv_object_base **)&v80, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v17 = 22;
      goto LABEL_9;
    }
    goto LABEL_66;
  }
  v45 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v79 = v45;
  if (v45 >= 0x17)
  {
    v58 = std::generic_category();
    v73[0] = (uint64_t)&v79;
    v73[2] = (uint64_t)" is not a valid ";
    v74 = 780;
    v59 = *(_QWORD *)(a1 + 120);
    if (v59)
    {
      v60 = 24 * v59;
      v61 = &str_2;
      v62 = *(_QWORD *)(a1 + 112);
      while (*(_DWORD *)v62 != 6)
      {
        v62 += 24;
        v60 -= 24;
        if (!v60)
        {
          v63 = 0;
          goto LABEL_107;
        }
      }
    }
    else
    {
      v62 = *(_QWORD *)(a1 + 112);
    }
    if (v62 == *(_QWORD *)(a1 + 112) + 24 * v59)
    {
      v63 = 0;
      v61 = &str_2;
    }
    else
    {
      v61 = *(void **)(v62 + 8);
      v63 = *(_QWORD *)(v62 + 16);
    }
LABEL_107:
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v61;
    v76 = v63;
    v77 = 1282;
    *(_QWORD *)&v80 = &__p;
    v81 = " value";
    v82 = 770;
    llvm::Twine::str((llvm::formatv_object_base **)&v80, &v93);
    if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v71 = (llvm::formatv_object_base *)&v93;
    else
      v71 = (llvm::formatv_object_base *)v93.__r_.__value_.__r.__words[0];
    v95[0] = 33;
    v95[1] = (uint64_t)v58;
    v94 = v71;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v94, v95, &v78);
    if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v93.__r_.__value_.__l.__data_);
    v18 = v78;
    goto LABEL_12;
  }
  v46 = v45;
  v47 = *(_QWORD *)(a1 + 120);
  if (v47)
  {
    v48 = 24 * v47;
    v49 = &str_2;
    v50 = *(_QWORD *)(a1 + 112);
    while (*(_DWORD *)v50 != 6)
    {
      v50 += 24;
      v48 -= 24;
      if (!v48)
      {
        v51 = 0;
        goto LABEL_99;
      }
    }
  }
  else
  {
    v50 = *(_QWORD *)(a1 + 112);
  }
  if (v50 == *(_QWORD *)(a1 + 112) + 24 * v47)
  {
    v51 = 0;
    v49 = &str_2;
  }
  else
  {
    v49 = *(const void **)(v50 + 8);
    v51 = *(_QWORD *)(v50 + 16);
  }
LABEL_99:
  v66 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v84, v49, v51);
  v67 = *((_QWORD *)v66 + 4);
  if ((unint64_t)(*((_QWORD *)v66 + 3) - v67) > 2)
  {
    *(_BYTE *)(v67 + 2) = 32;
    *(_WORD *)v67 = 15648;
    *((_QWORD *)v66 + 4) += 3;
  }
  else
  {
    v66 = llvm::raw_ostream::write(v66, " = ", 3uLL);
  }
  write_unsigned<unsigned long>(v66, v46, 0, 0, 0);
  if (!CPU_arch_strings[v46])
    goto LABEL_35;
  v68 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v84, " (", 2uLL);
  v69 = llvm::raw_ostream::operator<<(v68, CPU_arch_strings[v46]);
  v70 = (_BYTE *)*((_QWORD *)v69 + 4);
  if ((unint64_t)v70 >= *((_QWORD *)v69 + 3))
  {
    llvm::raw_ostream::write(v69, 41);
LABEL_35:
    v18 = 0;
    v19 = 0;
    goto LABEL_36;
  }
  v18 = 0;
  v19 = 0;
  *((_QWORD *)v69 + 4) = v70 + 1;
  *v70 = 41;
LABEL_36:
  *(_QWORD *)&v80 = CStrRef;
  *((_QWORD *)&v80 + 1) = v8;
  LODWORD(__p.__r_.__value_.__l.__data_) = a2;
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>(a1 + 64, (unsigned int *)&__p, &__p, &v80);
  v35 = *(_QWORD *)(a1 + 104);
  if (v35)
  {
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v35 + 224))(*(_QWORD *)(a1 + 104), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), "Tag", 3, a2);
    v36 = *(_QWORD *)(a1 + 120);
    if (v36)
    {
      v37 = 24 * v36;
      v38 = &str_2;
      v39 = *(_QWORD *)(a1 + 112);
      while (*(_DWORD *)v39 != (_DWORD)a2)
      {
        v39 += 24;
        v37 -= 24;
        if (!v37)
        {
          v40 = 0;
          goto LABEL_48;
        }
      }
    }
    else
    {
      v39 = *(_QWORD *)(a1 + 112);
    }
    if (v39 == *(_QWORD *)(a1 + 112) + 24 * v36)
    {
      v40 = 0;
      v38 = &str_2;
    }
    else
    {
      v41 = *(_QWORD *)(v39 + 8);
      v42 = *(_QWORD *)(v39 + 16);
      v43 = 4;
      if (v42 < 4)
        v43 = v42;
      v38 = (void *)(v41 + v43);
      v40 = v42 - v43;
    }
LABEL_48:
    (*(void (**)(_QWORD, const char *, uint64_t, void *, unint64_t))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), "TagName", 7, v38, v40);
    (*(void (**)(_QWORD, const char *, uint64_t, char *, uint64_t))(**(_QWORD **)(a1 + 104) + 344))(*(_QWORD *)(a1 + 104), "Value", 5, CStrRef, v8);
    if ((_QWORD)v97)
      (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), "Description", 11, v96);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 232))(v35);
  }
  *(_QWORD *)(a1 + 152) = v9;
  if (v19)
    v44 = v18;
  else
    v44 = 0;
  *a3 = v44;
  v84 = off_251C13948;
  if (v91 == 1 && v86)
    MEMORY[0x24BD1B380](v86, 0x1000C8077774924);
  if (v96 != v98)
    free(v96);
}

uint64_t llvm::ARMAttributeParser::handler@<X0>(uint64_t this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;

  v6 = 0;
  *a2 = 0;
  while (llvm::ARMAttributeParser::displayRoutines[v6] != a3)
  {
    v6 += 6;
    if (v6 == 264)
      goto LABEL_9;
  }
  v7 = &llvm::ARMAttributeParser::displayRoutines[v6];
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)v7 + 1);
  v8 = *((_QWORD *)v7 + 2);
  v10 = (_QWORD *)(this + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v10 + v9);
  this = v9(v10);
  if (!*a4)
  {
    *a2 = 1;
LABEL_9:
    *a4 = 0;
  }
  return this;
}

void llvm::ARMAttributeParser::~ARMAttributeParser(llvm::ARMAttributeParser *this)
{
  llvm::ELFAttributeParser::~ELFAttributeParser(this);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::string::__init_with_size[abi:nn180100]<char *,char *>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v7 = result;
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v7[1] = a4;
    v7[2] = v9 | 0x8000000000000000;
    *v7 = result;
    v7 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v7 = v10;
    v7 = (_QWORD *)((char *)v7 + 1);
  }
  *(_BYTE *)v7 = 0;
  return result;
}

char *std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>(uint64_t a1, unsigned int *a2, _DWORD *a3, _OWORD *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v9 <= v8)
        v4 = v8 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v12 = (char *)operator new(0x28uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_DWORD *)v12 + 4) = *a3;
  *(_OWORD *)(v12 + 24) = *a4;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__rehash<true>(a1, v19);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v9 <= v8)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & v8;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v12 = *v21;
LABEL_38:
    *v21 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9)
        v22 %= v9;
    }
    else
    {
      v22 &= v9 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void llvm::ELFAttributeParser::~ELFAttributeParser(llvm::ELFAttributeParser *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &unk_251C11EC8;
  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = *((_QWORD *)this + 20);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::~__hash_table((uint64_t)this + 64);
  std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::~__hash_table((uint64_t)this + 24);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

llvm::raw_ostream *llvm::BinaryStreamError::log(llvm::BinaryStreamError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  size_t v8;

  v5 = (const char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 8;
  v4 = v5;
  v6 = v3[23];
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = v3[23];
  else
    v8 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v7, v8);
}

uint64_t llvm::BinaryStreamError::convertToErrorCode(llvm::BinaryStreamError *this)
{
  getErrorErrorCat();
  return 3;
}

void llvm::BinaryStreamError::~BinaryStreamError(void **this)
{
  *this = off_251C11EF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C11EF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::ErrorInfoBase::message(llvm::ErrorInfoBase *this@<X0>, std::string *a2@<X8>)
{
  __int128 v4;
  void (**v5)(llvm::raw_string_ostream *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14[2];
  uint64_t v15;

  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = &off_251C13AC0;
  v13 = v14;
  llvm::raw_ostream::SetUnbuffered(&v5);
  (*(void (**)(llvm::ErrorInfoBase *, void (***)(llvm::raw_string_ostream *__hidden)))(*(_QWORD *)this + 16))(this, &v5);
  if (*((char *)v13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, (const std::string::value_type *)*v13, (std::string::size_type)v13[1]);
  }
  else
  {
    v4 = *(_OWORD *)v13;
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)v13[2];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
  v5 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v12 == 1 && v7)
    MEMORY[0x24BD1B380](v7, 0x1000C8077774924);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void *llvm::ErrorInfo<llvm::BinaryStreamError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::BinaryStreamError::ID;
}

BOOL llvm::ErrorInfo<llvm::BinaryStreamError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::BinaryStreamError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::BinaryStreamReader::readULEB128(llvm::BinaryStreamReader *this@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD v13[2];
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v13[1] = 0;
  v14 = v16;
  v15 = xmmword_24AA2B140;
  v13[0] = 0;
  v6 = (char *)this + 8;
  do
  {
    llvm::BinaryStreamRef::readBytes((uint64_t)v6, *((_QWORD *)this + 7), 1, (uint64_t)v13, a3);
    if (*a3)
    {
      v10 = v14;
      goto LABEL_14;
    }
    ++*((_QWORD *)this + 7);
    *a3 = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v14, *(_BYTE *)v13[0]);
  }
  while (*(char *)v13[0] < 0);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = v14;
  while ((_QWORD)v15 != v7)
  {
    v11 = *((_BYTE *)v14 + v7);
    v12 = v11 & 0x7F;
    if (v9 >= 0x40 && (v11 & 0x7F) != 0)
      break;
    if ((unint64_t)(v12 << v9) >> v9 != v12)
      break;
    v8 += v12 << v9;
    v9 += 7;
    ++v7;
    if ((v11 & 0x80) == 0)
      goto LABEL_13;
  }
  v8 = 0;
LABEL_13:
  *a2 = v8;
  *a3 = 0;
LABEL_14:
  if (v10 != v16)
    free(v10);
}

void llvm::BinaryStreamReader::readSLEB128(llvm::BinaryStreamReader *this@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD *v18;
  __int128 v19;
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v17[1] = 0;
  v18 = v20;
  v19 = xmmword_24AA2B140;
  v17[0] = 0;
  v6 = (char *)this + 8;
  do
  {
    llvm::BinaryStreamRef::readBytes((uint64_t)v6, *((_QWORD *)this + 7), 1, (uint64_t)v17, a3);
    if (*a3)
    {
      v10 = v18;
      goto LABEL_25;
    }
    ++*((_QWORD *)this + 7);
    *a3 = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v18, *(_BYTE *)v17[0]);
  }
  while (*(char *)v17[0] < 0);
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = v18;
  do
  {
    if ((_QWORD)v19 == v7)
    {
LABEL_23:
      v16 = 0;
      goto LABEL_24;
    }
    v11 = *((_BYTE *)v18 + v7);
    v12 = v11 & 0x7F;
    if (v9 < 0x40)
    {
      if (v9 == 63 && (_DWORD)v12 != 127 && (_DWORD)v12 != 0)
        goto LABEL_23;
    }
    else if (((v8 >> 63) & 0x7F) != v12)
    {
      goto LABEL_23;
    }
    v8 |= v12 << v9;
    v9 += 7;
    ++v7;
  }
  while (v11 < 0);
  v14 = (v11 & 0x40) == 0 || v9 > 0x3F;
  v15 = -1 << v9;
  if (v14)
    v15 = 0;
  v16 = v8 | v15;
LABEL_24:
  *a2 = v16;
  *a3 = 0;
LABEL_25:
  if (v10 != v20)
    free(v10);
}

std::string *llvm::BinaryStreamReader::skip@<X0>(std::string *this@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v4;
  char *v6;
  std::string::size_type size;
  uint64_t v8;

  v4 = this;
  if (this[2].__r_.__value_.__s.__data_[0])
  {
    v6 = (char *)this[1].__r_.__value_.__r.__words[2];
  }
  else
  {
    this = (std::string *)this[1].__r_.__value_.__l.__data_;
    if (this)
    {
      this = (std::string *)(*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 40))(this);
      v6 = (char *)this - v4[1].__r_.__value_.__l.__size_;
    }
    else
    {
      v6 = 0;
    }
  }
  size = v4[2].__r_.__value_.__l.__size_;
  if ((unint64_t)&v6[-size] >= a2)
  {
    v8 = 0;
    v4[2].__r_.__value_.__l.__size_ = size + a2;
  }
  else
  {
    v8 = operator new();
    *(_QWORD *)v8 = off_251C11EF0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 32) = 1;
    MEMORY[0x24BD1B104](v8 + 8, "Stream Error: ");
    this = std::string::append((std::string *)(v8 + 8), "The stream is too short to perform the requested operation.");
  }
  *a3 = v8;
  return this;
}

void llvm::BinaryStreamReader::~BinaryStreamReader(llvm::BinaryStreamReader *this)
{
  *(_QWORD *)this = &off_251C11F40;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_251C11F40;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::BinaryStreamRef::BinaryStreamRef(_QWORD *a1, std::__shared_weak_count_vtbl *a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v8 = (std::__shared_weak_count *)operator new(0x40uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_251C11F60;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_251C11F98;
  v8[1].__shared_owners_ = (uint64_t)&off_251C11FE0;
  LODWORD(v8[1].__shared_weak_owners_) = a4;
  v8[2].__vftable = a2;
  v8[2].__shared_owners_ = a3;
  *a1 = v8 + 1;
  a1[1] = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a1[2] = v8 + 1;
  a1[3] = 0;
  a1[4] = a3;
  a1[5] = 1;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  return a1;
}

std::string *llvm::BinaryStreamRef::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *result;

  result = llvm::BinaryStreamRefBase<llvm::BinaryStreamRef,llvm::BinaryStream>::checkOffsetForRead((std::string *)a1, a2, a3, a5);
  if (!*a5)
    return (std::string *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16)
                                                                                                + 24))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24) + a2, a3, a4);
  return result;
}

std::string *llvm::BinaryStreamRefBase<llvm::BinaryStreamRef,llvm::BinaryStream>::checkOffsetForRead@<X0>(std::string *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  std::string *v6;
  char *size;
  uint64_t v9;
  std::string *v10;
  const std::string::value_type *v11;
  char *v12;

  v6 = result;
  if (result[1].__r_.__value_.__s.__data_[16])
  {
    size = (char *)result[1].__r_.__value_.__l.__size_;
  }
  else
  {
    result = (std::string *)result->__r_.__value_.__r.__words[2];
    if (result)
    {
      result = (std::string *)(*(uint64_t (**)(std::string *))(result->__r_.__value_.__r.__words[0] + 40))(result);
      size = (char *)result - v6[1].__r_.__value_.__r.__words[0];
    }
    else
    {
      size = 0;
    }
  }
  if ((unint64_t)size >= a2)
  {
    if (v6[1].__r_.__value_.__s.__data_[16])
    {
      v12 = (char *)v6[1].__r_.__value_.__l.__size_;
    }
    else
    {
      result = (std::string *)v6->__r_.__value_.__r.__words[2];
      if (result)
      {
        result = (std::string *)(*(uint64_t (**)(std::string *))(result->__r_.__value_.__r.__words[0] + 40))(result);
        v12 = (char *)result - v6[1].__r_.__value_.__r.__words[0];
      }
      else
      {
        v12 = 0;
      }
    }
    if ((unint64_t)v12 >= a3 + a2)
    {
      v9 = 0;
      goto LABEL_17;
    }
    v9 = operator new();
    *(_QWORD *)v9 = off_251C11EF0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (std::string *)(v9 + 8);
    *(_DWORD *)(v9 + 32) = 1;
    MEMORY[0x24BD1B104](v9 + 8, "Stream Error: ");
    v11 = "The stream is too short to perform the requested operation.";
  }
  else
  {
    v9 = operator new();
    *(_QWORD *)v9 = off_251C11EF0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (std::string *)(v9 + 8);
    *(_DWORD *)(v9 + 32) = 3;
    MEMORY[0x24BD1B104](v9 + 8, "Stream Error: ");
    v11 = "The specified offset is invalid for the current stream.";
  }
  result = std::string::append(v10, v11);
LABEL_17:
  *a4 = v9;
  return result;
}

_QWORD *llvm::WritableBinaryStreamRef::WritableBinaryStreamRef(_QWORD *a1, std::__shared_weak_count_vtbl *a2, std::__shared_weak_count_vtbl *a3, int a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;

  v8 = (std::__shared_weak_count *)operator new(0x58uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_251C12028;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)&off_251C12060;
  v8->__shared_weak_owners_ = 0;
  v8[1].__shared_owners_ = (uint64_t)&off_251C120B8;
  v8[1].__shared_weak_owners_ = (uint64_t)a2;
  v8[2].__vftable = a3;
  v8[2].__shared_owners_ = (uint64_t)&off_251C11FE0;
  LODWORD(v8[2].__shared_weak_owners_) = a4;
  v8[3].__vftable = a2;
  v8[3].__shared_owners_ = (uint64_t)a3;
  *a1 = v8 + 1;
  a1[1] = v8;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a1[2] = v8 + 1;
  a1[3] = 0;
  a1[4] = a3;
  a1[5] = 1;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v9);
  }
  return a1;
}

uint64_t llvm::WritableBinaryStreamRef::writeBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t result;

  result = llvm::WritableBinaryStreamRef::checkOffsetForWrite((llvm::WritableBinaryStreamRef *)a1, a2, a4, a5);
  if (!*a5)
    return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24) + a2, a3, a4);
  return result;
}

uint64_t llvm::WritableBinaryStreamRef::checkOffsetForWrite@<X0>(llvm::WritableBinaryStreamRef *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  unint64_t v9;
  uint64_t v10;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
  if ((result & 2) == 0)
    return (uint64_t)llvm::BinaryStreamRefBase<llvm::BinaryStreamRef,llvm::BinaryStream>::checkOffsetForRead((std::string *)this, a2, a3, a4);
  if (*((_BYTE *)this + 40))
  {
    v9 = *((_QWORD *)this + 4);
  }
  else
  {
    result = *((_QWORD *)this + 2);
    if (result)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
      v9 = result - *((_QWORD *)this + 3);
    }
    else
    {
      v9 = 0;
    }
  }
  if (v9 >= a2)
  {
    *a4 = 0;
  }
  else
  {
    v10 = operator new();
    *(_QWORD *)v10 = off_251C11EF0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 32) = 3;
    MEMORY[0x24BD1B104](v10 + 8, "Stream Error: ");
    result = (uint64_t)std::string::append((std::string *)(v10 + 8), "The specified offset is invalid for the current stream.");
    *a4 = v10;
  }
  return result;
}

void std::__shared_ptr_emplace<`anonymous namespace'::ArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C11F60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C11F60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::ArrayRefImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::ArrayRefImpl::~ArrayRefImpl(_anonymous_namespace_::ArrayRefImpl *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::ArrayRefImpl::getEndian(_anonymous_namespace_::ArrayRefImpl *this)
{
  return *((unsigned int *)this + 4);
}

std::string *`anonymous namespace'::ArrayRefImpl::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *result;

  result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 8), a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(_QWORD *)(a1 + 24) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

std::string *`anonymous namespace'::ArrayRefImpl::readLongestContiguousChunk@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string *result;
  unint64_t v9;

  result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 1), a2, 1, a4);
  if (!*a4)
  {
    v9 = a1[4] - a2;
    *a3 = a1[3] + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::ArrayRefImpl::getLength(_anonymous_namespace_::ArrayRefImpl *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::BinaryStream::getFlags(llvm::BinaryStream *this)
{
  return 0;
}

void llvm::BinaryByteStream::~BinaryByteStream(llvm::BinaryByteStream *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::BinaryByteStream::getEndian(llvm::BinaryByteStream *this)
{
  return *((unsigned int *)this + 2);
}

std::string *llvm::BinaryByteStream::readBytes@<X0>(llvm::BinaryStream *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *result;

  result = llvm::BinaryStream::checkOffsetForRead(a1, a2, a3, a5);
  if (!*a5)
  {
    *a4 = *((_QWORD *)a1 + 2) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

std::string *llvm::BinaryByteStream::readLongestContiguousChunk@<X0>(llvm::BinaryStream *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string *result;
  unint64_t v9;

  result = llvm::BinaryStream::checkOffsetForRead(a1, a2, 1, a4);
  if (!*a4)
  {
    v9 = *((_QWORD *)a1 + 3) - a2;
    *a3 = *((_QWORD *)a1 + 2) + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t llvm::BinaryByteStream::getLength(llvm::BinaryByteStream *this)
{
  return *((_QWORD *)this + 3);
}

std::string *llvm::BinaryStream::checkOffsetForRead@<X0>(llvm::BinaryStream *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  std::string *v9;
  const std::string::value_type *v10;
  std::string *result;

  if ((*(uint64_t (**)(llvm::BinaryStream *))(*(_QWORD *)this + 40))(this) >= a2)
  {
    result = (std::string *)(*(uint64_t (**)(llvm::BinaryStream *))(*(_QWORD *)this + 40))(this);
    if ((unint64_t)result >= a3 + a2)
    {
      v8 = 0;
      goto LABEL_7;
    }
    v8 = operator new();
    *(_QWORD *)v8 = off_251C11EF0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (std::string *)(v8 + 8);
    *(_DWORD *)(v8 + 32) = 1;
    MEMORY[0x24BD1B104](v8 + 8, "Stream Error: ");
    v10 = "The stream is too short to perform the requested operation.";
  }
  else
  {
    v8 = operator new();
    *(_QWORD *)v8 = off_251C11EF0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (std::string *)(v8 + 8);
    *(_DWORD *)(v8 + 32) = 3;
    MEMORY[0x24BD1B104](v8 + 8, "Stream Error: ");
    v10 = "The specified offset is invalid for the current stream.";
  }
  result = std::string::append(v9, v10);
LABEL_7:
  *a4 = v8;
  return result;
}

void std::__shared_ptr_emplace<`anonymous namespace'::MutableArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C12028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MutableArrayRefImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C12028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::MutableArrayRefImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::MutableArrayRefImpl::~MutableArrayRefImpl(_anonymous_namespace_::MutableArrayRefImpl *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::MutableArrayRefImpl::getEndian(_anonymous_namespace_::MutableArrayRefImpl *this)
{
  return *((unsigned int *)this + 10);
}

std::string *`anonymous namespace'::MutableArrayRefImpl::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *result;

  result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 32), a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(_QWORD *)(a1 + 48) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

std::string *`anonymous namespace'::MutableArrayRefImpl::readLongestContiguousChunk@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string *result;
  unint64_t v9;

  result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 4), a2, 1, a4);
  if (!*a4)
  {
    v9 = a1[7] - a2;
    *a3 = a1[6] + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t `anonymous namespace'::MutableArrayRefImpl::getLength(_anonymous_namespace_::MutableArrayRefImpl *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::WritableBinaryStream::getFlags(llvm::WritableBinaryStream *this)
{
  return 1;
}

char *`anonymous namespace'::MutableArrayRefImpl::writeBytes@<X0>(char *result@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, llvm::WritableBinaryStream *a5@<X8>)
{
  _QWORD *v9;

  if (a4)
  {
    v9 = result;
    result = (char *)llvm::WritableBinaryStream::checkOffsetForWrite(a5, (llvm::BinaryStream *)(result + 8), a2, a4);
    if (*(_QWORD *)a5)
      return result;
    result = (char *)memcpy((void *)(v9[2] + a2), a3, a4);
  }
  *(_QWORD *)a5 = 0;
  return result;
}

void `anonymous namespace'::MutableArrayRefImpl::commit(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void llvm::MutableBinaryByteStream::~MutableBinaryByteStream(llvm::MutableBinaryByteStream *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::MutableBinaryByteStream::getEndian(llvm::MutableBinaryByteStream *this)
{
  return *((unsigned int *)this + 8);
}

std::string *llvm::MutableBinaryByteStream::readBytes@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  std::string *result;

  result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 24), a2, a3, a5);
  if (!*a5)
  {
    *a4 = *(_QWORD *)(a1 + 40) + a2;
    a4[1] = a3;
    *a5 = 0;
  }
  return result;
}

std::string *llvm::MutableBinaryByteStream::readLongestContiguousChunk@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string *result;
  unint64_t v9;

  result = llvm::BinaryStream::checkOffsetForRead((llvm::BinaryStream *)(a1 + 3), a2, 1, a4);
  if (!*a4)
  {
    v9 = a1[6] - a2;
    *a3 = a1[5] + a2;
    a3[1] = v9;
    *a4 = 0;
  }
  return result;
}

uint64_t llvm::MutableBinaryByteStream::getLength(llvm::MutableBinaryByteStream *this)
{
  return *((_QWORD *)this + 6);
}

llvm::BinaryStream *llvm::MutableBinaryByteStream::writeBytes@<X0>(llvm::BinaryStream *result@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, llvm::WritableBinaryStream *a5@<X8>)
{
  llvm::BinaryStream *v9;

  if (a4)
  {
    v9 = result;
    result = (llvm::BinaryStream *)llvm::WritableBinaryStream::checkOffsetForWrite(a5, result, a2, a4);
    if (*(_QWORD *)a5)
      return result;
    result = (llvm::BinaryStream *)memcpy((void *)(*((_QWORD *)v9 + 1) + a2), a3, a4);
  }
  *(_QWORD *)a5 = 0;
  return result;
}

void llvm::MutableBinaryByteStream::commit(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

std::string *llvm::WritableBinaryStream::checkOffsetForWrite(llvm::WritableBinaryStream *this, llvm::BinaryStream *a2, unint64_t a3, uint64_t a4)
{
  std::string *result;
  uint64_t v9;

  if (((*(uint64_t (**)(llvm::BinaryStream *))(*(_QWORD *)a2 + 48))(a2) & 2) == 0)
    return llvm::BinaryStream::checkOffsetForRead(a2, a3, a4, (uint64_t *)this);
  result = (std::string *)(*(uint64_t (**)(llvm::BinaryStream *))(*(_QWORD *)a2 + 40))(a2);
  if ((unint64_t)result >= a3)
  {
    *(_QWORD *)this = 0;
  }
  else
  {
    v9 = operator new();
    *(_QWORD *)v9 = off_251C11EF0;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_DWORD *)(v9 + 32) = 3;
    MEMORY[0x24BD1B104](v9 + 8, "Stream Error: ");
    result = std::string::append((std::string *)(v9 + 8), "The specified offset is invalid for the current stream.");
    *(_QWORD *)this = v9;
  }
  return result;
}

void llvm::BinaryStreamWriter::~BinaryStreamWriter(llvm::BinaryStreamWriter *this)
{
  *(_QWORD *)this = &off_251C12110;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_251C12110;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _DWORD *v17;
  int v18;

  v18 = 0;
  v8 = llvm::cl::parser<unsigned int>::parse(a1, a1, a3, a4, a5, a6, &v18);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v18;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v18);
    return v8;
  }
  v11 = std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::parser<unsigned int>::parse(v11, v12, v13, v14, v15, v16, v17);
}

uint64_t llvm::cl::parser<unsigned int>::parse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, _DWORD *a7)
{
  uint64_t v11;
  uint64_t result;
  llvm::raw_ostream *v13;
  unint64_t v14[4];
  __int16 v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  __int16 v19;

  v14[0] = 0;
  v16 = (unint64_t *)a5;
  v17 = a6;
  v11 = llvm::consumeUnsignedInteger((llvm *)&v16, 0, v14, a4);
  if ((v11 & 1) != 0 || v17 || HIDWORD(v14[0]))
  {
    v15 = 1283;
    v14[0] = (unint64_t)"'";
    v14[2] = a5;
    v14[3] = a6;
    v16 = v14;
    v18 = "' value invalid for uint argument!";
    v19 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v11);
    llvm::cl::Option::error(a2, (llvm::Twine *)&v16, 0, 0, v13);
    return 1;
  }
  else
  {
    result = 0;
    *a7 = v14[0];
  }
  return result;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

uint64_t llvm::cl::basic_parser_impl::getOptionWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3 == 1)
    v4 = 7;
  else
    v4 = v3 + 7;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (v5)
  {
    v6 = 6;
    if ((*(_WORD *)(a2 + 10) & 0x400) == 0)
      v6 = 3;
    v7 = *(_QWORD *)(a2 + 56);
    if (!v7)
      v7 = v5;
    v4 += v6 + v7;
  }
  return v4;
}

llvm::raw_ostream *llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionInfo(uint64_t a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *llvm::cl::basic_parser_impl::printOptionInfo(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  llvm *v7;
  size_t v8;
  llvm *v9;
  size_t v10;
  unsigned int v11;
  int v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  _WORD *v16;
  const char *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm *v20;
  size_t v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  uint64_t v24;
  llvm *v25;
  size_t v26;
  llvm::raw_ostream *v27;
  _DWORD *v28;
  const char *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm *v33;
  size_t v34;
  _WORD *v35;
  uint64_t v36;
  uint64_t v37;
  int OptionWidth;
  __int128 v40;
  uint64_t v41;

  v6 = (llvm::raw_ostream *)llvm::outs(this);
  v40 = *((_OWORD *)a2 + 1);
  v41 = 2;
  v7 = (llvm *)(*(uint64_t (**)(llvm::cl::basic_parser_impl *))(*(_QWORD *)this + 16))(this);
  if (v8)
  {
    v9 = v7;
    v10 = v8;
    v11 = *((unsigned __int16 *)a2 + 5);
    if ((v11 & 0x400) != 0)
    {
      v15 = (llvm::raw_ostream *)llvm::outs(v7);
      v16 = (_WORD *)*((_QWORD *)v15 + 4);
      if (*((_QWORD *)v15 + 3) - (_QWORD)v16 > 1uLL)
      {
        *v16 = 15392;
        *((_QWORD *)v15 + 4) += 2;
      }
      else
      {
        v15 = llvm::raw_ostream::write(v15, " <", 2uLL);
      }
      v24 = *((_QWORD *)a2 + 7);
      if (v24)
        v25 = (llvm *)*((_QWORD *)a2 + 6);
      else
        v25 = v9;
      if (v24)
        v26 = *((_QWORD *)a2 + 7);
      else
        v26 = v10;
      v27 = llvm::raw_ostream::operator<<(v15, v25, v26);
      v28 = (_DWORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v28 <= 3uLL)
      {
        v29 = ">...";
        v30 = 4;
LABEL_40:
        llvm::raw_ostream::write(v27, v29, v30);
        goto LABEL_44;
      }
      *v28 = 774778430;
      v31 = *((_QWORD *)v27 + 4) + 4;
LABEL_43:
      *((_QWORD *)v27 + 4) = v31;
      goto LABEL_44;
    }
    v12 = (v11 >> 3) & 3;
    if (!v12)
    {
      v7 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
      v12 = (int)v7;
    }
    v13 = (llvm::raw_ostream *)llvm::outs(v7);
    if (v12 == 1)
    {
      v14 = *((_QWORD *)v13 + 4);
      if ((unint64_t)(*((_QWORD *)v13 + 3) - v14) > 2)
      {
        *(_BYTE *)(v14 + 2) = 60;
        *(_WORD *)v14 = 15707;
        *((_QWORD *)v13 + 4) += 3;
      }
      else
      {
        v13 = llvm::raw_ostream::write(v13, "[=<", 3uLL);
      }
      v32 = *((_QWORD *)a2 + 7);
      if (v32)
        v33 = (llvm *)*((_QWORD *)a2 + 6);
      else
        v33 = v9;
      if (v32)
        v34 = *((_QWORD *)a2 + 7);
      else
        v34 = v10;
      v27 = llvm::raw_ostream::operator<<(v13, v33, v34);
      v35 = (_WORD *)*((_QWORD *)v27 + 4);
      if (*((_QWORD *)v27 + 3) - (_QWORD)v35 <= 1uLL)
      {
        v29 = ">]";
        v30 = 2;
        goto LABEL_40;
      }
      *v35 = 23870;
      v31 = *((_QWORD *)v27 + 4) + 2;
      goto LABEL_43;
    }
    if (*((_QWORD *)a2 + 3) == 1)
      v17 = " <";
    else
      v17 = "=<";
    v18 = llvm::raw_ostream::operator<<(v13, v17, 2uLL);
    v19 = *((_QWORD *)a2 + 7);
    if (v19)
      v20 = (llvm *)*((_QWORD *)a2 + 6);
    else
      v20 = v9;
    if (v19)
      v21 = *((_QWORD *)a2 + 7);
    else
      v21 = v10;
    v22 = llvm::raw_ostream::operator<<(v18, v20, v21);
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
    if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
    {
      llvm::raw_ostream::write(v22, 62);
    }
    else
    {
      *((_QWORD *)v22 + 4) = v23 + 1;
      *v23 = 62;
    }
  }
LABEL_44:
  v36 = *((_QWORD *)a2 + 4);
  v37 = *((_QWORD *)a2 + 5);
  OptionWidth = llvm::cl::basic_parser_impl::getOptionWidth((uint64_t)this, (uint64_t)a2);
  return llvm::cl::Option::printHelpStr(v36, v37, a3, OptionWidth);
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  unsigned int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *(_DWORD *)(a1 + 128);
LABEL_5:
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = &off_251C12458;
    llvm::cl::parser<unsigned int>::printOptionDiff((llvm::cl::basic_parser_impl *)a1, (const llvm::cl::Option *)a1, v3, (uint64_t)&v4, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 148))
  {
    v3 = *(_DWORD *)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void llvm::cl::Option::addArgument(llvm::cl::Option *this)
{
  if (!atomic_load(GlobalParser))
  *((_WORD *)this + 5) |= 0x4000u;
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  llvm::raw_ostream *v13;
  unint64_t v14[4];
  __int16 v15;
  unint64_t *v16;
  unint64_t v17;
  const char *v18;
  __int16 v19;

  v14[0] = 0;
  v16 = (unint64_t *)a5;
  v17 = a6;
  v10 = llvm::consumeSignedInteger((llvm *)&v16, 0, v14, a4);
  if ((v10 & 1) != 0 || v17 || v14[0] != SLODWORD(v14[0]))
  {
    v15 = 1283;
    v14[0] = (unint64_t)"'";
    v14[2] = a5;
    v14[3] = a6;
    v16 = v14;
    v18 = "' value invalid for integer argument!";
    v19 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
    llvm::cl::Option::error(a1, (llvm::Twine *)&v16, 0, 0, v13);
    return 1;
  }
  else
  {
    LODWORD(v16) = v14[0];
    *(_DWORD *)(a1 + 128) = v14[0];
    *(_WORD *)(a1 + 12) = a2;
    v11 = *(_QWORD *)(a1 + 184);
    if (v11)
    {
      (*(void (**)(uint64_t, unint64_t **))(*(_QWORD *)v11 + 48))(v11, &v16);
      return 0;
    }
    else
    {
      std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::opt<int,false,llvm::cl::parser<int>>::getValueExpectedFlagDefault();
    }
  }
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<int,false,llvm::cl::parser<int>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<int,false,llvm::cl::parser<int>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  int v3;
  int v4;
  int v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  const char *v9;
  size_t v10;
  llvm *v11;
  int v12;
  size_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _WORD *v20;
  void (**v21)(llvm::raw_string_ostream *__hidden);
  int v22;
  llvm *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  void **v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;

  if (a3)
  {
    v3 = *(_DWORD *)(a1 + 128);
    v4 = *(_DWORD *)(a1 + 144);
    v5 = *(unsigned __int8 *)(a1 + 148);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 148))
      return;
    v3 = *(_DWORD *)(a1 + 128);
    v4 = *(_DWORD *)(a1 + 144);
    if (v4 == v3)
      return;
    v5 = 1;
  }
  llvm::cl::basic_parser_impl::printOptionName((llvm::cl::basic_parser_impl *)a1, (const llvm::cl::Option *)a1, a2);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v22 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = &off_251C13AC0;
  v29 = (void **)&v30;
  llvm::raw_ostream::SetUnbuffered(&v21);
  v6 = llvm::write_integer((llvm::raw_ostream *)&v21, v3, 0, 0);
  v21 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v28 == 1)
  {
    v6 = v23;
    if (v23)
      v6 = (llvm *)MEMORY[0x24BD1B380](v23, 0x1000C8077774924);
  }
  v7 = (llvm::raw_ostream *)llvm::outs(v6);
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8253;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, "= ", 2uLL);
  }
  if (v32 >= 0)
    v9 = (const char *)&v30;
  else
    v9 = v30;
  if (v32 >= 0)
    v10 = HIBYTE(v32);
  else
    v10 = v31;
  v11 = llvm::raw_ostream::write(v7, v9, v10);
  if (SHIBYTE(v32) < 0)
  {
    v12 = v31;
    if (v31 < 8)
      goto LABEL_20;
LABEL_22:
    v13 = 0;
    goto LABEL_23;
  }
  v12 = HIBYTE(v32);
  if (HIBYTE(v32) > 7u)
    goto LABEL_22;
LABEL_20:
  v13 = (8 - v12);
LABEL_23:
  v14 = (llvm::raw_ostream *)llvm::outs(v11);
  v15 = llvm::raw_ostream::indent(v14, v13);
  v16 = *((_QWORD *)v15 + 4);
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) > 0xA)
  {
    *(_DWORD *)(v16 + 7) = 540701804;
    *(_QWORD *)v16 = *(_QWORD *)" (default: ";
    *((_QWORD *)v15 + 4) += 11;
  }
  else
  {
    v15 = llvm::raw_ostream::write(v15, " (default: ", 0xBuLL);
  }
  v17 = (llvm::raw_ostream *)llvm::outs(v15);
  if (v5)
  {
    v17 = llvm::write_integer(v17, v4, 0, 0);
  }
  else
  {
    v18 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 0xB)
    {
      *(_DWORD *)(v18 + 8) = 712273013;
      *(_QWORD *)v18 = *(_QWORD *)"*no default*";
      *((_QWORD *)v17 + 4) += 12;
    }
    else
    {
      v17 = llvm::raw_ostream::write(v17, "*no default*", 0xCuLL);
    }
  }
  v19 = (llvm::raw_ostream *)llvm::outs(v17);
  v20 = (_WORD *)*((_QWORD *)v19 + 4);
  if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 1uLL)
  {
    *v20 = 2601;
    *((_QWORD *)v19 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v19, ")\n", 2uLL);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(v30);
}

uint64_t llvm::cl::opt<int,false,llvm::cl::parser<int>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *std::function<void ()(int const&)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(int const&)>::swap[abi:nn180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, __int16 a2, int a3, int a4, void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  v8 = llvm::cl::parser<std::string>::parse((int)a1 + 192, a1, a3, a4, a5, a6, (uint64_t)&__str);
  if ((v8 & 1) == 0)
  {
    std::string::operator=((std::string *)(a1 + 128), &__str);
    *(_WORD *)(a1 + 12) = a2;
    v9 = *(_QWORD *)(a1 + 224);
    if (!v9)
    {
      v11 = std::__throw_bad_function_call[abi:nn180100]();
      return llvm::cl::parser<std::string>::parse(v11, v12, v13, v14, v15, v16, v17);
    }
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 48))(v9, &__str);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v8;
}

uint64_t llvm::cl::parser<std::string>::parse(int a1, int a2, int a3, int a4, void *__src, size_t __len, uint64_t a7)
{
  __int128 __dst;
  uint64_t v10;

  if (__src)
  {
    std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  }
  else
  {
    __dst = 0uLL;
    v10 = 0;
  }
  if (*(char *)(a7 + 23) < 0)
    operator delete(*(void **)a7);
  *(_OWORD *)a7 = __dst;
  *(_QWORD *)(a7 + 16) = v10;
  return 0;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

uint64_t llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 192, a1);
}

llvm::raw_ostream *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

unsigned __int8 *llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::printOptionValue(unsigned __int8 *result, int a2, char a3)
{
  unsigned __int8 *v4;
  int v5;
  const void *v6;
  size_t v7;

  v4 = result;
  if ((a3 & 1) != 0
    || (result = (unsigned __int8 *)llvm::cl::OptionValueCopy<std::string>::compare((uint64_t)(result + 152), result + 128), (_DWORD)result))
  {
    v5 = (char)v4[151];
    if (v5 >= 0)
      v6 = v4 + 128;
    else
      v6 = (const void *)*((_QWORD *)v4 + 16);
    if (v5 >= 0)
      v7 = v4[151];
    else
      v7 = *((_QWORD *)v4 + 17);
    return (unsigned __int8 *)llvm::cl::parser<std::string>::printOptionDiff((llvm::cl::basic_parser_impl *)result, (const llvm::cl::Option *)v4, v6, v7, (uint64_t)(v4 + 152), a2);
  }
  return result;
}

uint64_t llvm::cl::OptionValueCopy<std::string>::compare(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const void **v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0)
    v3 = *(unsigned __int8 *)(a1 + 31);
  else
    v3 = *(_QWORD *)(a1 + 16);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  v6 = (const void **)(a1 + 8);
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*v6, a2, *(_QWORD *)(a1 + 16)) != 0;
  if (!*(_BYTE *)(a1 + 31))
    return 0;
  v7 = v2 - 1;
  do
  {
    v9 = *(unsigned __int8 *)v6;
    v6 = (const void **)((char *)v6 + 1);
    v8 = v9;
    v10 = *a2++;
    result = v8 != v10;
  }
  while (v8 == v10 && v7-- != 0);
  return result;
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::setDefault(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  v2 = (std::string *)(a1 + 128);
  if (*(_BYTE *)(a1 + 184))
  {
    std::string::operator=(v2, (const std::string *)(a1 + 160));
  }
  else
  {
    memset(&__str, 0, sizeof(__str));
    std::string::operator=(v2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  llvm *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;

  v18 = 0;
  v8 = llvm::cl::parser<BOOL>::parse((llvm *)a1, a1, a3, a4, a5, a6, &v18);
  if ((v8 & 1) != 0)
    return v8;
  *(_BYTE *)(a1 + 128) = v18;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v18);
    return v8;
  }
  v11 = (llvm *)std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::parser<BOOL>::parse(v11, v12, v13, v14, v15, v16, v17);
}

uint64_t llvm::cl::parser<BOOL>::parse(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, _BYTE *a7)
{
  int v8;
  uint64_t result;
  llvm::raw_ostream *v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;

  switch(a6)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v8 = *a5;
      if (v8 == 48)
        goto LABEL_22;
      if (v8 != 49)
        goto LABEL_21;
LABEL_8:
      result = 0;
      *a7 = 1;
      break;
    case 4:
      if (*(_DWORD *)a5 == 1702195828 || *(_DWORD *)a5 == 1163219540 || *(_DWORD *)a5 == 1702195796)
        goto LABEL_8;
      goto LABEL_21;
    case 5:
      if ((*(_DWORD *)a5 != 1936482662 || a5[4] != 101)
        && (*(_DWORD *)a5 != 1397506374 || a5[4] != 69)
        && (*(_DWORD *)a5 != 1936482630 || a5[4] != 101))
      {
        goto LABEL_21;
      }
LABEL_22:
      result = 0;
      *a7 = 0;
      return result;
    default:
LABEL_21:
      v15 = 1283;
      v14[0] = "'";
      v14[2] = a5;
      v14[3] = a6;
      v16[0] = v14;
      v16[2] = "' is invalid value for BOOLean argument! Try 0 or 1";
      v17 = 770;
      v13 = (llvm::raw_ostream *)llvm::errs(a1);
      llvm::cl::Option::error(a2, (llvm::Twine *)v16, 0, 0, v13);
      result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

uint64_t llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  __int16 v5;

  if (a3)
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
LABEL_5:
    v5 = *(_WORD *)(a1 + 144);
    v4 = &off_251C12500;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm::cl::basic_parser_impl *)a1, (const llvm::cl::Option *)a1, v3 != 0, (uint64_t)&v4, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 145))
  {
    v3 = *(unsigned __int8 *)(a1 + 128);
    if (*(unsigned __int8 *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

_BYTE *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::setDefault(_BYTE *result)
{
  char v1;

  v1 = result[145];
  if (v1)
    v1 = result[144];
  result[128] = v1;
  return result;
}

void llvm::cl::AddLiteralOption(unint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *i;
  uint64_t *v13;
  uint64_t v14;

  if (!atomic_load(GlobalParser))
  v7 = GlobalParser[0];
  LODWORD(v8) = *(_DWORD *)(a1 + 108);
  if ((_DWORD)v8 == *(_DWORD *)(a1 + 112))
  {
    if (!atomic_load(llvm::cl::TopLevelSubCommand))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 96);
    if (v10 == *(_QWORD *)(a1 + 88))
      v8 = v8;
    else
      v8 = *(unsigned int *)(a1 + 104);
    if ((_DWORD)v8)
    {
      v11 = 8 * v8;
      for (i = *(uint64_t **)(a1 + 96); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v11 -= 8;
        if (!v11)
          return;
      }
    }
    else
    {
      i = *(uint64_t **)(a1 + 96);
    }
    v13 = (uint64_t *)(v10 + 8 * v8);
    if (i != v13)
    {
      v14 = *i;
LABEL_18:
      while (++i != v13)
      {
        v14 = *i;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        {
          if (i != v13)
            goto LABEL_18;
          return;
        }
      }
    }
  }
}

void `anonymous namespace'::CommandLineParser::addOption(_anonymous_namespace_::CommandLineParser *this, llvm::cl::Option *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  uint64_t v12;

  if ((a3 & 1) == 0 && (*((_WORD *)a2 + 5) & 0x2000) != 0)
  {
    llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)this + 16, (uint64_t)a2);
  }
  else if (*((_DWORD *)a2 + 27) == *((_DWORD *)a2 + 28))
  {
    if (!atomic_load(llvm::cl::TopLevelSubCommand))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 12);
    v7 = 104;
    if (v6 == *((_QWORD *)a2 + 11))
      v7 = 108;
    v8 = *(unsigned int *)((char *)a2 + v7);
    if ((_DWORD)v8)
    {
      v9 = 8 * v8;
      for (i = (uint64_t *)*((_QWORD *)a2 + 12); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v9 -= 8;
        if (!v9)
          return;
      }
    }
    else
    {
      i = (uint64_t *)*((_QWORD *)a2 + 12);
    }
    v11 = (uint64_t *)(v6 + 8 * v8);
    if (i != v11)
    {
      v12 = *i;
LABEL_18:
      while (++i != v11)
      {
        v12 = *i;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        {
          if (i != v11)
            goto LABEL_18;
          return;
        }
      }
    }
  }
}

uint64_t llvm::cl::Option::setArgStr(uint64_t result, uint64_t *a2, unint64_t a3)
{
  unint64_t v5;
  unint64_t v7;
  unsigned int **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int *v19;
  unsigned int **v20;
  unsigned int *v21;

  v5 = result;
  if ((*(_WORD *)(result + 10) & 0x4000) != 0)
  {
    if (!atomic_load(GlobalParser))
    v7 = GlobalParser[0];
    if (*(_DWORD *)(v5 + 108) == *(_DWORD *)(v5 + 112))
    {
      if (!atomic_load(llvm::cl::TopLevelSubCommand))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    }
    else
    {
      if (!atomic_load((unint64_t *)&llvm::cl::AllSubCommands))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
      result = (uint64_t)llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)(v5 + 88), (const void *)llvm::cl::AllSubCommands);
      v10 = *(unsigned int ***)(v5 + 96);
      v11 = 104;
      if (v10 == *(unsigned int ***)(v5 + 88))
        v11 = 108;
      v12 = *(unsigned int *)(v5 + v11);
      if ((unsigned int **)result == &v10[v12])
      {
        v18 = (unsigned int **)result;
        if ((_DWORD)v12)
        {
          while ((unint64_t)*v10 >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (++v10 == (unsigned int **)result)
              goto LABEL_8;
          }
        }
        if (v10 != (unsigned int **)result)
        {
          v19 = *v10;
LABEL_29:
          while (++v10 != v18)
          {
            v19 = *v10;
            if ((unint64_t)*v10 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v10 != v18)
                goto LABEL_29;
              break;
            }
          }
        }
      }
      else
      {
        v13 = *(_QWORD *)(v7 + 280);
        v14 = 288;
        if (v13 == *(_QWORD *)(v7 + 272))
          v14 = 292;
        v15 = *(unsigned int *)(v7 + v14);
        if ((_DWORD)v15)
        {
          v16 = 8 * v15;
          v17 = *(unsigned int ***)(v7 + 280);
          while ((unint64_t)*v17 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v17;
            v16 -= 8;
            if (!v16)
              goto LABEL_8;
          }
        }
        else
        {
          v17 = *(unsigned int ***)(v7 + 280);
        }
        v20 = (unsigned int **)(v13 + 8 * v15);
        if (v17 != v20)
        {
          v21 = *v17;
LABEL_37:
          while (++v17 != v20)
          {
            v21 = *v17;
            if ((unint64_t)*v17 < 0xFFFFFFFFFFFFFFFELL)
            {
              if (v17 != v20)
                goto LABEL_37;
              break;
            }
          }
        }
      }
    }
  }
LABEL_8:
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  if (a3 == 1)
    *(_WORD *)(v5 + 10) |= 0x1000u;
  return result;
}

uint64_t *llvm::cl::Option::addCategory(llvm::cl::OptionCategory ***this, llvm::cl::OptionCategory *a2)
{
  uint64_t *result;
  uint64_t *v5;
  llvm::cl::OptionCategory **v6;
  unsigned int *v7;
  llvm::cl::OptionCategory **v8;
  uint64_t v9;
  uint64_t v10;
  llvm::cl::OptionCategory **v11;

  result = llvm::cl::getGeneralCategory((llvm::cl *)this);
  if (a2 != (llvm::cl::OptionCategory *)&llvm::cl::getGeneralCategory(void)::GeneralCategory
    && (v5 = (uint64_t *)*this[8],
        result = llvm::cl::getGeneralCategory((llvm::cl *)result),
        v5 == &llvm::cl::getGeneralCategory(void)::GeneralCategory))
  {
    *this[8] = a2;
  }
  else
  {
    v8 = this[8];
    v7 = (unsigned int *)(this + 8);
    v6 = v8;
    v9 = v7[2];
    if ((_DWORD)v9)
    {
      v10 = 8 * v9;
      v11 = v6;
      while (*v11 != a2)
      {
        ++v11;
        v10 -= 8;
        if (!v10)
        {
          v11 = &v6[v9];
          break;
        }
      }
    }
    else
    {
      v11 = v6;
    }
    if (v9 == v11 - v6)
      return (uint64_t *)llvm::SmallVectorTemplateBase<void *,true>::push_back(v7, (uint64_t)a2);
  }
  return result;
}

uint64_t *llvm::cl::getGeneralCategory(llvm::cl *this)
{
  unsigned __int8 v1;

  {
    llvm::cl::getGeneralCategory(void)::GeneralCategory = (uint64_t)"General options";
    unk_257965330 = 15;
    qword_257965338 = (uint64_t)&str_6_0;
    unk_257965340 = 0;
    llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&llvm::cl::getGeneralCategory(void)::GeneralCategory);
  }
  return &llvm::cl::getGeneralCategory(void)::GeneralCategory;
}

const void **llvm::cl::OptionCategory::registerCategory(llvm::cl::OptionCategory *this)
{
  _BYTE v4[24];

  if (!atomic_load(GlobalParser))
  return llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert((llvm::SmallPtrSetImplBase *)(GlobalParser[0] + 112), this, (uint64_t)v4);
}

void `anonymous namespace'::CommandLineParser::registerSubCommand(uint64_t a1, void *a2)
{
  uint64_t v6;
  _QWORD *i;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  __int16 v12;
  int v13;
  int v14;
  BOOL v15;
  _QWORD *v16;
  BOOL v17;
  _BYTE v18[24];

  llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert((uint64_t)v18, (llvm::SmallPtrSetImplBase *)(a1 + 272), a2);
  if (!atomic_load((unint64_t *)&llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if ((void *)llvm::cl::AllSubCommands != a2)
  {
    if (!atomic_load((unint64_t *)&llvm::cl::AllSubCommands))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    v6 = *(unsigned int *)(llvm::cl::AllSubCommands + 136);
    if ((_DWORD)v6)
    {
      for (i = *(_QWORD **)(llvm::cl::AllSubCommands + 128); !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = *(_QWORD **)(llvm::cl::AllSubCommands + 128);
    }
    v9 = *(_QWORD *)(llvm::cl::AllSubCommands + 128) + 8 * v6;
    if (i != (_QWORD *)v9)
    {
      v10 = (_QWORD *)*i;
      do
      {
        v11 = v10[1];
        v12 = *(_WORD *)(v11 + 10);
        if ((v12 & 7) == 4
          || ((v13 = v12 & 0x180, v14 = v12 & 0x800, v13 != 128) ? (v15 = v14 == 0) : (v15 = 0),
              !v15 || *(_QWORD *)(v11 + 24)))
        {
        }
        else
        {
        }
        do
        {
          v16 = (_QWORD *)i[1];
          ++i;
          v10 = v16;
          if (v16)
            v17 = v10 + 1 == 0;
          else
            v17 = 1;
        }
        while (v17);
      }
      while (i != (_QWORD *)v9);
    }
  }
}

void tokenizeWindowsCommandLineImpl(uint64_t a1, unint64_t a2, uint64_t *a3, void (*a4)(uint64_t, _BYTE *, size_t), uint64_t a5, int a6, void (*a7)(uint64_t), uint64_t a8, char a9)
{
  int v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  _BYTE *v20;
  _BYTE *v21;
  int v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  unsigned int v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  size_t v35;
  _BYTE *v36;
  _QWORD *v37;
  size_t v38;
  _BYTE *v39;
  _BYTE *v40;
  unint64_t v41;
  unint64_t v43;
  void *v47;
  __int128 v48;
  _QWORD v49[18];

  v49[16] = *MEMORY[0x24BDAC8D0];
  v47 = v49;
  v48 = xmmword_24AA2AC90;
  if (!a2)
    return;
  v13 = 0;
  v14 = 0;
  v15 = a9;
  v43 = a2 - 1;
  do
  {
    if (v13 == 2)
    {
      v22 = *(unsigned __int8 *)(a1 + v14);
      if (v22 != 34)
      {
        if ((v22 != 92) | v15 & 1)
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v47, v22);
        }
        else
        {
          v14 = parseBackslash(a1, a2, v14, &v47);
          v15 = 0;
        }
LABEL_29:
        v13 = 2;
        goto LABEL_44;
      }
      if (v14 < v43 && *(_BYTE *)(a1 + v14 + 1) == 34)
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v47, 34);
        v13 = 2;
        ++v14;
        goto LABEL_44;
      }
      goto LABEL_43;
    }
    if (v13 == 1)
    {
      v17 = *(unsigned __int8 *)(a1 + v14);
      if (v17 > 0x22)
        goto LABEL_30;
      if (((1 << v17) & 0x100002601) == 0)
      {
        if (v17 == 34)
          goto LABEL_29;
LABEL_30:
        if (((_DWORD)v17 != 92) | v15 & 1)
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back(&v47, v17);
        }
        else
        {
          v14 = parseBackslash(a1, a2, v14, &v47);
          v15 = 0;
        }
LABEL_43:
        v13 = 1;
        goto LABEL_44;
      }
      v18 = v47;
      v19 = v48;
      v20 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a3, v48 + 1, 0);
      v21 = v20;
      if (v19)
        memcpy(v20, v18, v19);
      v21[v19] = 0;
      a4(a5, v21, v19);
      *(_QWORD *)&v48 = 0;
      if (*(_BYTE *)(a1 + v14) == 10)
      {
        a7(a8);
        v13 = 0;
LABEL_18:
        v15 = a9;
        goto LABEL_44;
      }
      v13 = 0;
      v15 = 0;
    }
    else
    {
      if (v14 >= a2)
      {
        v13 = 0;
        goto LABEL_44;
      }
      while (1)
      {
        v16 = *(unsigned __int8 *)(a1 + v14);
        if (v16 > 0x20)
          break;
        if (((1 << v16) & 0x100002201) == 0)
        {
          if (v16 != 10)
            break;
          a7(a8);
        }
        if (a2 == ++v14)
        {
          v13 = 0;
          v14 = a2;
          goto LABEL_44;
        }
      }
      v23 = v14;
      if ((v15 & 1) != 0)
      {
        if (v14 < a2)
        {
          v23 = v14;
          while (1)
          {
            v24 = *(unsigned __int8 *)(a1 + v23);
            v25 = v24 > 0x22;
            v26 = (1 << v24) & 0x500002601;
            if (!v25 && v26 != 0)
              break;
            if (++v23 >= a2)
              goto LABEL_54;
          }
        }
      }
      else if (v14 < a2)
      {
        while (1)
        {
          v28 = *(unsigned __int8 *)(a1 + v23);
          v29 = v28 > 0x22 || ((1 << v28) & 0x500002601) == 0;
          if (!v29 || v28 == 92)
            break;
          if (++v23 >= a2)
          {
LABEL_54:
            v23 = a2;
            break;
          }
        }
      }
      if (a2 >= v14)
        v30 = v14;
      else
        v30 = a2;
      if (v30 <= v23)
        v31 = v23;
      else
        v31 = v14;
      if (v31 >= a2)
        v32 = a2;
      else
        v32 = v31;
      v33 = (_BYTE *)(a1 + v30);
      if (v23 >= a2)
        goto LABEL_67;
      v34 = *(unsigned __int8 *)(a1 + v23);
      if (v34 > 0x22)
        goto LABEL_78;
      if (((1 << v34) & 0x100002601) != 0)
      {
LABEL_67:
        v35 = v32 - v30;
        if (a6)
        {
          v41 = v32;
          v36 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a3, v35 + 1, 0);
          v33 = v36;
          if (v41 != v30)
            memcpy(v36, (const void *)(a1 + v30), v35);
          v33[v35] = 0;
        }
        a4(a5, v33, v35);
        if (v23 < a2 && *(_BYTE *)(a1 + v23) == 10)
        {
          a7(a8);
          v13 = 0;
          v14 = v23;
          goto LABEL_18;
        }
        v13 = 0;
        v15 = 0;
      }
      else
      {
        if (v34 != 34)
        {
LABEL_78:
          llvm::SmallVectorImpl<char>::append<char const*,void>(&v47, (_BYTE *)(a1 + v30), (_BYTE *)(a1 + v32));
          v14 = parseBackslash(a1, a2, v23, &v47);
          goto LABEL_43;
        }
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v47, (_BYTE *)(a1 + v30), (_BYTE *)(a1 + v32));
        v13 = 2;
      }
      v14 = v23;
    }
LABEL_44:
    ++v14;
  }
  while (v14 < a2);
  v37 = v47;
  if (v13)
  {
    v38 = v48;
    v39 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a3, v48 + 1, 0);
    v40 = v39;
    if (v38)
      memcpy(v39, v37, v38);
    v40[v38] = 0;
    a4(a5, v40, v38);
    v37 = v47;
  }
  if (v37 != v49)
    free(v37);
}

uint64_t *llvm::operator+@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v3;
  int v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v3 = *((unsigned __int8 *)result + 32);
  if (!*((_BYTE *)result + 32) || (v4 = *((unsigned __int8 *)a2 + 32), !*((_BYTE *)a2 + 32)))
  {
    *(_WORD *)(a3 + 32) = 256;
    return result;
  }
  if (v3 == 1)
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v5;
    v6 = a2[4];
LABEL_8:
    *(_QWORD *)(a3 + 32) = v6;
    return result;
  }
  if (v4 == 1)
  {
    v7 = *((_OWORD *)result + 1);
    *(_OWORD *)a3 = *(_OWORD *)result;
    *(_OWORD *)(a3 + 16) = v7;
    v6 = result[4];
    goto LABEL_8;
  }
  v8 = (uint64_t *)*result;
  v9 = result[1];
  if (*((_BYTE *)result + 33) != 1)
  {
    LOBYTE(v3) = 2;
    v8 = result;
  }
  v10 = a2[1];
  if (*((_BYTE *)a2 + 33) == 1)
  {
    v11 = (uint64_t *)*a2;
  }
  else
  {
    LOBYTE(v4) = 2;
    v11 = a2;
  }
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v11;
  *(_QWORD *)(a3 + 24) = v10;
  *(_BYTE *)(a3 + 32) = v3;
  *(_BYTE *)(a3 + 33) = v4;
  return result;
}

unsigned int *llvm::SmallVectorImpl<char const*>::append<char const* const*,void>(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  unsigned int *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 8);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, const char *a2)
{
  size_t v2;
  size_t v3;

  v2 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v3 = v2;
  }
  return llvm::raw_ostream::write(a1, a2, v3);
}

uint64_t llvm::cl::Option::error(uint64_t a1, llvm::Twine *a2, uint64_t a3, uint64_t a4, llvm::raw_ostream *a5)
{
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD v17[3];

  if (!a3)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
      goto LABEL_3;
LABEL_14:
    llvm::raw_ostream::operator<<(a5, *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40));
    goto LABEL_17;
  }
  v7 = a4;
  v8 = a3;
  if (!a4)
    goto LABEL_14;
LABEL_3:
  if (!atomic_load(GlobalParser))
  v10 = *(char *)(GlobalParser[0] + 23);
  if (v10 >= 0)
    v11 = (const char *)GlobalParser[0];
  else
    v11 = *(const char **)GlobalParser[0];
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(GlobalParser[0] + 23);
  else
    v12 = *(_QWORD *)(GlobalParser[0] + 8);
  llvm::raw_ostream::write(a5, v11, v12);
  v13 = *((_QWORD *)a5 + 4);
  if ((unint64_t)(*((_QWORD *)a5 + 3) - v13) > 9)
  {
    *(_WORD *)(v13 + 8) = 8293;
    *(_QWORD *)v13 = *(_QWORD *)": for the ";
    *((_QWORD *)a5 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(a5, ": for the ", 0xAuLL);
  }
  v17[0] = v8;
  v17[1] = v7;
  v17[2] = 0;
LABEL_17:
  v14 = *((_QWORD *)a5 + 4);
  if ((unint64_t)(*((_QWORD *)a5 + 3) - v14) > 8)
  {
    *(_BYTE *)(v14 + 8) = 32;
    *(_QWORD *)v14 = *(_QWORD *)" option: ";
    *((_QWORD *)a5 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a5, " option: ", 9uLL);
  }
  llvm::Twine::print(a2, a5);
  v15 = (_BYTE *)*((_QWORD *)a5 + 4);
  if (*((_BYTE **)a5 + 3) == v15)
  {
    llvm::raw_ostream::write(a5, "\n", 1uLL);
  }
  else
  {
    *v15 = 10;
    ++*((_QWORD *)a5 + 4);
  }
  return 1;
}

llvm::raw_ostream *`anonymous namespace'::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  void *v10;
  __int128 i;
  _QWORD v12[2];

  v12[1] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v10 = v12;
  for (i = xmmword_24AA2ACB0; v5; --v5)
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v10, 32);
  if (v4 <= 1)
    v6 = "-";
  else
    v6 = "--";
  v7 = 1;
  if (v4 > 1)
    v7 = 2;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v10, v6, &v6[v7]);
  v8 = llvm::raw_ostream::write(a1, (const char *)v10, i);
  llvm::raw_ostream::operator<<(v8, *(const void **)a2, *(_QWORD *)(a2 + 8));
  if (v10 != v12)
    free(v10);
  return a1;
}

uint64_t llvm::cl::Option::addOccurrence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    ++*(_WORD *)(a1 + 8);
  return (**(uint64_t (***)(uint64_t))a1)(a1);
}

llvm::raw_ostream *llvm::cl::Option::printHelpStr(uint64_t a1, uint64_t a2, size_t a3, int a4)
{
  llvm *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  uint64_t v9;
  llvm::raw_ostream *result;
  _BYTE *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  _BYTE *v15;
  _OWORD v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19[2];
  char v20;

  v19[0] = a1;
  v19[1] = a2;
  LOBYTE(v16[0]) = 10;
  llvm::StringRef::split(v19, (char *)v16, 1uLL, (uint64_t)&v17);
  v7 = (llvm::raw_ostream *)llvm::outs(v6);
  v8 = llvm::raw_ostream::indent(v7, (a3 - a4));
  v9 = *((_QWORD *)v8 + 4);
  if ((unint64_t)(*((_QWORD *)v8 + 3) - v9) > 2)
  {
    *(_BYTE *)(v9 + 2) = 32;
    *(_WORD *)v9 = 11552;
    *((_QWORD *)v8 + 4) += 3;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, " - ", 3uLL);
  }
  result = llvm::raw_ostream::operator<<(v8, (const void *)v17, *((size_t *)&v17 + 1));
  v11 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v11)
  {
    result = llvm::raw_ostream::write(result, "\n", 1uLL);
  }
  else
  {
    *v11 = 10;
    ++*((_QWORD *)result + 4);
  }
  while (*((_QWORD *)&v18 + 1))
  {
    v20 = 10;
    llvm::StringRef::split((uint64_t *)&v18, &v20, 1uLL, (uint64_t)v16);
    v17 = v16[0];
    v18 = v16[1];
    v13 = (llvm::raw_ostream *)llvm::outs(v12);
    v14 = llvm::raw_ostream::indent(v13, a3);
    result = llvm::raw_ostream::operator<<(v14, (const void *)v17, *((size_t *)&v17 + 1));
    v15 = (_BYTE *)*((_QWORD *)result + 4);
    if (*((_BYTE **)result + 3) == v15)
    {
      result = llvm::raw_ostream::write(result, "\n", 1uLL);
    }
    else
    {
      *v15 = 10;
      ++*((_QWORD *)result + 4);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::cl::basic_parser_impl::printOptionName(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, int a3)
{
  llvm::raw_ostream *v5;
  llvm *v6;
  llvm::raw_ostream *v7;
  __int128 v9;
  uint64_t v10;

  v5 = (llvm::raw_ostream *)llvm::outs(this);
  v9 = *((_OWORD *)a2 + 1);
  v10 = 2;
  v7 = (llvm::raw_ostream *)llvm::outs(v6);
  return llvm::raw_ostream::indent(v7, (a3 - *((_DWORD *)a2 + 6)));
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse(llvm *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, int *a7)
{
  int v8;
  uint64_t result;
  int v10;
  llvm::raw_ostream *v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;

  switch(a6)
  {
    case 0:
      goto LABEL_8;
    case 1:
      v8 = *a5;
      if (v8 == 48)
        goto LABEL_22;
      if (v8 != 49)
        goto LABEL_21;
LABEL_8:
      result = 0;
      v10 = 1;
LABEL_23:
      *a7 = v10;
      break;
    case 4:
      if (*(_DWORD *)a5 == 1702195828 || *(_DWORD *)a5 == 1163219540 || *(_DWORD *)a5 == 1702195796)
        goto LABEL_8;
      goto LABEL_21;
    case 5:
      if ((*(_DWORD *)a5 != 1936482662 || a5[4] != 101)
        && (*(_DWORD *)a5 != 1397506374 || a5[4] != 69)
        && (*(_DWORD *)a5 != 1936482630 || a5[4] != 101))
      {
        goto LABEL_21;
      }
LABEL_22:
      result = 0;
      v10 = 2;
      goto LABEL_23;
    default:
LABEL_21:
      v16 = 1283;
      v15[0] = "'";
      v15[2] = a5;
      v15[3] = a6;
      v17[0] = v15;
      v17[2] = "' is invalid value for BOOLean argument! Try 0 or 1";
      v18 = 770;
      v14 = (llvm::raw_ostream *)llvm::errs(a1);
      llvm::cl::Option::error(a2, (llvm::Twine *)v17, 0, 0, v14);
      result = 1;
      break;
  }
  return result;
}

uint64_t llvm::cl::parser<unsigned long long>::parse(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6, _QWORD *a7)
{
  llvm *v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  unint64_t v15[4];
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  const char *v19;
  __int16 v20;

  v15[0] = 0;
  v17 = (unint64_t *)a5;
  v18 = a6;
  v11 = (llvm *)llvm::consumeUnsignedInteger((llvm *)&v17, 0, v15, a4);
  if (v18)
    v12 = 1;
  else
    v12 = v11;
  if ((v12 & 1) != 0)
  {
    v16 = 1283;
    v15[0] = (unint64_t)"'";
    v15[2] = a5;
    v15[3] = a6;
    v17 = v15;
    v19 = "' value invalid for ullong argument!";
    v20 = 770;
    v13 = (llvm::raw_ostream *)llvm::errs(v11);
    llvm::cl::Option::error(a2, (llvm::Twine *)&v17, 0, 0, v13);
  }
  else
  {
    *a7 = v15[0];
  }
  return v12;
}

BOOL parseDouble(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  const char *v8;
  double v9;
  int v10;
  llvm *v11;
  llvm::raw_ostream *v12;
  _QWORD v14[4];
  __int16 v15;
  char *v16;
  void *v17;
  __int128 v18;
  _WORD v19[16];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v15 = 261;
  v14[0] = a2;
  v14[1] = a3;
  v17 = v19;
  v18 = xmmword_24AA2AC10;
  v8 = llvm::Twine::toNullTerminatedStringRef((uint64_t)v14, (const char **)&v17);
  v16 = 0;
  v9 = strtod(v8, &v16);
  v10 = *v16;
  if (!*v16)
    *a4 = v9;
  v11 = (llvm *)v17;
  if (v17 != v19)
    free(v17);
  if (v10)
  {
    v15 = 1283;
    v14[0] = "'";
    v14[2] = a2;
    v14[3] = a3;
    v17 = v14;
    *((_QWORD *)&v18 + 1) = "' value invalid for floating point argument!";
    v19[4] = 770;
    v12 = (llvm::raw_ostream *)llvm::errs(v11);
    llvm::cl::Option::error(a1, (llvm::Twine *)&v17, 0, 0, v12);
  }
  return v10 != 0;
}

unint64_t llvm::cl::generic_parser_base::getOptionWidth(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2)
{
  uint64_t v3;
  unint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *((_QWORD *)a2 + 3);
  if (v3)
  {
    if (v3 == 1)
      v5 = 15;
    else
      v5 = v3 + 15;
    v6 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    if (v6)
    {
      v7 = v6;
      v8 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v8);
        v10 = v9;
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 32))(this, v8);
        v12 = v11;
        v13 = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
        if (!v13)
          v13 = (*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
        if (v13 != 1 || v10 != 0 || v12 != 0)
        {
          v16 = v10 + 8;
          if (!v10)
            v16 = 15;
          if (v5 <= v16)
            v5 = v16;
        }
        v8 = (v8 + 1);
      }
      while (v7 != (_DWORD)v8);
    }
  }
  else
  {
    v17 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    if (v17)
    {
      v18 = v17;
      v19 = 0;
      v5 = 0;
      do
      {
        (*(void (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v19);
        if (v5 <= v20 + 8)
          v5 = v20 + 8;
        v19 = (v19 + 1);
      }
      while (v18 != (_DWORD)v19);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t llvm::cl::generic_parser_base::printOptionInfo(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, size_t a3)
{
  llvm *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  _WORD *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  llvm *v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  int v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  size_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::raw_ostream *v40;
  uint64_t v41;
  llvm *v42;
  int v43;
  llvm *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  uint64_t v47;
  _WORD *v48;
  _DWORD *v49;
  llvm *v50;
  llvm::raw_ostream *v51;
  _BYTE *v52;
  _BYTE *v53;
  int v54;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  uint64_t v59[2];
  char v60;

  if (*((_QWORD *)a2 + 3))
  {
    v5 = (llvm *)((*((unsigned __int16 *)a2 + 5) >> 3) & 3);
    if (!(_DWORD)v5)
      v5 = (llvm *)(*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
    if ((_DWORD)v5 == 1)
    {
      v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
      if ((_DWORD)v5)
      {
        v6 = (int)v5;
        v7 = 0;
        while (1)
        {
          v5 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v7);
          if (!v8)
            break;
          v7 = (v7 + 1);
          if (v6 == (_DWORD)v7)
            goto LABEL_28;
        }
        v23 = (llvm::raw_ostream *)llvm::outs(v5);
        v57 = *((_OWORD *)a2 + 1);
        *(_QWORD *)&v58 = 2;
        v24 = *((_QWORD *)a2 + 3);
        if (v24 == 1)
          v25 = 7;
        else
          v25 = v24 + 7;
        v5 = llvm::cl::Option::printHelpStr(*((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), a3, v25);
      }
    }
LABEL_28:
    v26 = (llvm::raw_ostream *)llvm::outs(v5);
    v57 = *((_OWORD *)a2 + 1);
    *(_QWORD *)&v58 = 2;
    v28 = (_QWORD *)*((_QWORD *)v27 + 4);
    if (*((_QWORD *)v27 + 3) - (_QWORD)v28 > 7uLL)
    {
      *v28 = 0x3E65756C61763C3DLL;
      *((_QWORD *)v27 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v27, "=<value>", 8uLL);
    }
    v29 = *((_QWORD *)a2 + 3);
    if (v29 == 1)
      v30 = 15;
    else
      v30 = v29 + 15;
    llvm::cl::Option::printHelpStr(*((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), a3, v30);
    result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    v54 = result;
    if ((_DWORD)result)
    {
      v31 = 0;
      do
      {
        v32 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v31);
        v34 = v33;
        v35 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 32))(this, v31);
        v37 = v36;
        result = (*((unsigned __int16 *)a2 + 5) >> 3) & 3;
        if (!(_DWORD)result)
          result = (*(uint64_t (**)(const llvm::cl::Option *))(*(_QWORD *)a2 + 8))(a2);
        if ((_DWORD)result == 1 && v34 == 0 && v37 == 0)
          goto LABEL_69;
        v40 = (llvm::raw_ostream *)llvm::outs((llvm *)result);
        v41 = *((_QWORD *)v40 + 4);
        if ((unint64_t)(*((_QWORD *)v40 + 3) - v41) > 4)
        {
          *(_BYTE *)(v41 + 4) = 61;
          *(_DWORD *)v41 = 538976288;
          *((_QWORD *)v40 + 4) += 5;
        }
        else
        {
          v40 = llvm::raw_ostream::write(v40, "    =", 5uLL);
        }
        v42 = llvm::raw_ostream::operator<<(v40, v32, v34);
        if (v34)
        {
          v43 = v34 + 8;
          if (v37)
            goto LABEL_50;
        }
        else
        {
          v42 = (llvm *)llvm::outs(v42);
          v49 = (_DWORD *)*((_QWORD *)v42 + 4);
          if (*((_QWORD *)v42 + 3) - (_QWORD)v49 > 6uLL)
          {
            *(_DWORD *)((char *)v49 + 3) = 1048147056;
            *v49 = 1886217532;
            *((_QWORD *)v42 + 4) += 7;
          }
          else
          {
            v42 = llvm::raw_ostream::write(v42, "<empty>", 7uLL);
          }
          v43 = 15;
          if (v37)
          {
LABEL_50:
            v59[0] = v35;
            v59[1] = v37;
            LOBYTE(v56[0]) = 10;
            llvm::StringRef::split(v59, (char *)v56, 1uLL, (uint64_t)&v57);
            v45 = (llvm::raw_ostream *)llvm::outs(v44);
            v46 = llvm::raw_ostream::indent(v45, (a3 - v43));
            v47 = *((_QWORD *)v46 + 4);
            if ((unint64_t)(*((_QWORD *)v46 + 3) - v47) > 2)
            {
              *(_BYTE *)(v47 + 2) = 32;
              *(_WORD *)v47 = 11552;
              v48 = (_WORD *)(*((_QWORD *)v46 + 4) + 3);
              *((_QWORD *)v46 + 4) = v48;
            }
            else
            {
              v46 = llvm::raw_ostream::write(v46, " - ", 3uLL);
              v48 = (_WORD *)*((_QWORD *)v46 + 4);
            }
            if (*((_QWORD *)v46 + 3) - (_QWORD)v48 > 1uLL)
            {
              *v48 = 8224;
              *((_QWORD *)v46 + 4) += 2;
            }
            else
            {
              v46 = llvm::raw_ostream::write(v46, "  ", 2uLL);
            }
            while (1)
            {
              result = (uint64_t)llvm::raw_ostream::operator<<(v46, (const void *)v57, *((size_t *)&v57 + 1));
              v52 = *(_BYTE **)(result + 32);
              if (*(_BYTE **)(result + 24) == v52)
              {
                result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, "\n", 1uLL);
              }
              else
              {
                *v52 = 10;
                ++*(_QWORD *)(result + 32);
              }
              if (!*((_QWORD *)&v58 + 1))
                break;
              v60 = 10;
              llvm::StringRef::split((uint64_t *)&v58, &v60, 1uLL, (uint64_t)v56);
              v57 = v56[0];
              v58 = v56[1];
              v51 = (llvm::raw_ostream *)llvm::outs(v50);
              v46 = llvm::raw_ostream::indent(v51, (a3 + 2));
            }
            goto LABEL_69;
          }
        }
        result = (uint64_t)llvm::outs(v42);
        v53 = *(_BYTE **)(result + 32);
        if ((unint64_t)v53 >= *(_QWORD *)(result + 24))
        {
          result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, 10);
        }
        else
        {
          *(_QWORD *)(result + 32) = v53 + 1;
          *v53 = 10;
        }
LABEL_69:
        v31 = (v31 + 1);
      }
      while ((_DWORD)v31 != v54);
    }
  }
  else
  {
    if (*((_QWORD *)a2 + 5))
    {
      v9 = (llvm::raw_ostream *)llvm::outs(this);
      v10 = (_WORD *)*((_QWORD *)v9 + 4);
      if (*((_QWORD *)v9 + 3) - (_QWORD)v10 > 1uLL)
      {
        *v10 = 8224;
        *((_QWORD *)v9 + 4) += 2;
      }
      else
      {
        v9 = llvm::raw_ostream::write(v9, "  ", 2uLL);
      }
      v11 = llvm::raw_ostream::operator<<(v9, *((const void **)a2 + 4), *((_QWORD *)a2 + 5));
      v12 = (_BYTE *)*((_QWORD *)v11 + 4);
      if ((unint64_t)v12 >= *((_QWORD *)v11 + 3))
      {
        llvm::raw_ostream::write(v11, 10);
      }
      else
      {
        *((_QWORD *)v11 + 4) = v12 + 1;
        *v12 = 10;
      }
    }
    result = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
    if ((_DWORD)result)
    {
      v14 = result;
      v15 = 0;
      do
      {
        v16 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v15);
        v18 = v17;
        v19 = (llvm::raw_ostream *)llvm::outs(v16);
        v20 = (_DWORD *)*((_QWORD *)v19 + 4);
        if (*((_QWORD *)v19 + 3) - (_QWORD)v20 > 3uLL)
        {
          *v20 = 538976288;
          *((_QWORD *)v19 + 4) += 4;
        }
        else
        {
          v19 = llvm::raw_ostream::write(v19, "    ", 4uLL);
        }
        *(_QWORD *)&v57 = v16;
        *((_QWORD *)&v57 + 1) = v18;
        *(_QWORD *)&v58 = 2;
        v21 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 32))(this, v15);
        result = (uint64_t)llvm::cl::Option::printHelpStr(v21, v22, a3, (int)v18 + 8);
        v15 = (v15 + 1);
      }
      while (v14 != (_DWORD)v15);
    }
  }
  return result;
}

llvm::raw_ostream *llvm::cl::generic_parser_base::printGenericOptionDiff(llvm::cl::generic_parser_base *this, const llvm::cl::Option *a2, const llvm::cl::GenericOptionValue *a3, const llvm::cl::GenericOptionValue *a4, int a5)
{
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v17;
  size_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  const void *v23;
  size_t v24;
  llvm *v25;
  unint64_t v26;
  size_t v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::raw_ostream *v33;
  const void *v34;
  size_t v35;
  llvm::raw_ostream *v36;
  __int128 v38;
  uint64_t v39;

  v10 = (llvm::raw_ostream *)llvm::outs(this);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8224;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, "  ", 2uLL);
  }
  v38 = *((_OWORD *)a2 + 1);
  v39 = 2;
  v13 = (llvm::raw_ostream *)llvm::outs(v12);
  llvm::raw_ostream::indent(v13, (a5 - *((_DWORD *)a2 + 6)));
  v14 = (*(uint64_t (**)(llvm::cl::generic_parser_base *))(*(_QWORD *)this + 16))(this);
  if ((_DWORD)v14)
  {
    v15 = v14;
    v16 = 0;
    v17 = "= *unknown option value*\n";
    v18 = 25;
    while (1)
    {
      v19 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 48))(this, v16);
      v14 = (**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a3)(a3, v19);
      if ((v14 & 1) == 0)
        break;
      v16 = (v16 + 1);
      if (v15 == (_DWORD)v16)
        goto LABEL_24;
    }
    v20 = (llvm::raw_ostream *)llvm::outs((llvm *)v14);
    v21 = v20;
    v22 = (_WORD *)*((_QWORD *)v20 + 4);
    if (*((_QWORD *)v20 + 3) - (_QWORD)v22 > 1uLL)
    {
      *v22 = 8253;
      *((_QWORD *)v20 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v20, "= ", 2uLL);
    }
    v23 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v16);
    llvm::raw_ostream::operator<<(v21, v23, v24);
    v25 = (llvm *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v16);
    if (v26 <= 8)
      v27 = 8 - v26;
    else
      v27 = 0;
    v28 = (llvm::raw_ostream *)llvm::outs(v25);
    v29 = llvm::raw_ostream::indent(v28, v27);
    v30 = *((_QWORD *)v29 + 4);
    if ((unint64_t)(*((_QWORD *)v29 + 3) - v30) > 0xA)
    {
      *(_DWORD *)(v30 + 7) = 540701804;
      *(_QWORD *)v30 = *(_QWORD *)" (default: ";
      *((_QWORD *)v29 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(v29, " (default: ", 0xBuLL);
    }
    v31 = 0;
    v17 = ")\n";
    v18 = 2;
    while (1)
    {
      v32 = (*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 48))(this, v31);
      v14 = (**(uint64_t (***)(const llvm::cl::GenericOptionValue *, uint64_t))a4)(a4, v32);
      if ((v14 & 1) == 0)
        break;
      v31 = (v31 + 1);
      if (v15 == (_DWORD)v31)
        goto LABEL_24;
    }
    v33 = (llvm::raw_ostream *)llvm::outs((llvm *)v14);
    v34 = (const void *)(*(uint64_t (**)(llvm::cl::generic_parser_base *, uint64_t))(*(_QWORD *)this + 24))(this, v31);
    v14 = (uint64_t)llvm::raw_ostream::operator<<(v33, v34, v35);
    v17 = ")\n";
    v18 = 2;
  }
  else
  {
    v17 = "= *unknown option value*\n";
    v18 = 25;
  }
LABEL_24:
  v36 = (llvm::raw_ostream *)llvm::outs((llvm *)v14);
  return llvm::raw_ostream::operator<<(v36, v17, v18);
}

void llvm::cl::parser<BOOL>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  int v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  void (**v23)(llvm::raw_string_ostream *__hidden);
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_251C13AC0;
  v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  v7 = llvm::write_integer((llvm::raw_ostream *)&v23, a3, 0, 0);
  v23 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v30 == 1)
  {
    v7 = v25;
    if (v25)
      v7 = (llvm *)MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
  }
  v8 = (llvm::raw_ostream *)llvm::outs(v7);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8253;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0)
    v10 = (const char *)&v32;
  else
    v10 = v32;
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = v33;
  v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    v13 = v33;
    if (v33 < 8)
      goto LABEL_15;
  }
  else
  {
    v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_15:
      v14 = (8 - v13);
      goto LABEL_18;
    }
  }
  v14 = 0;
LABEL_18:
  v15 = (llvm::raw_ostream *)llvm::outs(v12);
  v16 = llvm::raw_ostream::indent(v15, v14);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(_QWORD *)v17 = *(_QWORD *)" (default: ";
    *((_QWORD *)v16 + 4) += 11;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  v18 = *(unsigned __int8 *)(a4 + 9);
  v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    v19 = llvm::write_integer(v19, *(unsigned __int8 *)(a4 + 8), 0, 0);
  }
  else
  {
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(_QWORD *)v20 = *(_QWORD *)"*no default*";
      *((_QWORD *)v19 + 4) += 12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  v21 = (llvm::raw_ostream *)llvm::outs(v19);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2601;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, int a3, uint64_t a4, int a5)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  int v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  void (**v23)(llvm::raw_string_ostream *__hidden);
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_251C13AC0;
  v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  v7 = llvm::write_integer((llvm::raw_ostream *)&v23, a3, 0, 0);
  v23 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v30 == 1)
  {
    v7 = v25;
    if (v25)
      v7 = (llvm *)MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
  }
  v8 = (llvm::raw_ostream *)llvm::outs(v7);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8253;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0)
    v10 = (const char *)&v32;
  else
    v10 = v32;
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = v33;
  v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    v13 = v33;
    if (v33 < 8)
      goto LABEL_15;
  }
  else
  {
    v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_15:
      v14 = (8 - v13);
      goto LABEL_18;
    }
  }
  v14 = 0;
LABEL_18:
  v15 = (llvm::raw_ostream *)llvm::outs(v12);
  v16 = llvm::raw_ostream::indent(v15, v14);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(_QWORD *)v17 = *(_QWORD *)" (default: ";
    *((_QWORD *)v16 + 4) += 11;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  v18 = *(unsigned __int8 *)(a4 + 12);
  v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    v19 = llvm::write_integer(v19, *(int *)(a4 + 8), 0, 0);
  }
  else
  {
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(_QWORD *)v20 = *(_QWORD *)"*no default*";
      *((_QWORD *)v19 + 4) += 12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  v21 = (llvm::raw_ostream *)llvm::outs(v19);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2601;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void llvm::cl::parser<unsigned int>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, unsigned int a3, uint64_t a4, int a5)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  int v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  void (**v23)(llvm::raw_string_ostream *__hidden);
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_251C13AC0;
  v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  v7 = write_unsigned<unsigned long>((llvm::raw_ostream *)&v23, a3, 0, 0, 0);
  v23 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v30 == 1)
  {
    v7 = v25;
    if (v25)
      v7 = (llvm *)MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
  }
  v8 = (llvm::raw_ostream *)llvm::outs(v7);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8253;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0)
    v10 = (const char *)&v32;
  else
    v10 = v32;
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = v33;
  v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    v13 = v33;
    if (v33 < 8)
      goto LABEL_15;
  }
  else
  {
    v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_15:
      v14 = (8 - v13);
      goto LABEL_18;
    }
  }
  v14 = 0;
LABEL_18:
  v15 = (llvm::raw_ostream *)llvm::outs(v12);
  v16 = llvm::raw_ostream::indent(v15, v14);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(_QWORD *)v17 = *(_QWORD *)" (default: ";
    *((_QWORD *)v16 + 4) += 11;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  v18 = *(unsigned __int8 *)(a4 + 12);
  v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    v19 = write_unsigned<unsigned long>(v19, *(unsigned int *)(a4 + 8), 0, 0, 0);
  }
  else
  {
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(_QWORD *)v20 = *(_QWORD *)"*no default*";
      *((_QWORD *)v19 + 4) += 12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  v21 = (llvm::raw_ostream *)llvm::outs(v19);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2601;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void llvm::cl::parser<unsigned long long>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, unint64_t a3, uint64_t a4, int a5)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  int v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  void (**v23)(llvm::raw_string_ostream *__hidden);
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a5);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_251C13AC0;
  v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  v7 = write_unsigned<unsigned long>((llvm::raw_ostream *)&v23, a3, 0, 0, 0);
  v23 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v30 == 1)
  {
    v7 = v25;
    if (v25)
      v7 = (llvm *)MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
  }
  v8 = (llvm::raw_ostream *)llvm::outs(v7);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8253;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0)
    v10 = (const char *)&v32;
  else
    v10 = v32;
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = v33;
  v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    v13 = v33;
    if (v33 < 8)
      goto LABEL_15;
  }
  else
  {
    v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_15:
      v14 = (8 - v13);
      goto LABEL_18;
    }
  }
  v14 = 0;
LABEL_18:
  v15 = (llvm::raw_ostream *)llvm::outs(v12);
  v16 = llvm::raw_ostream::indent(v15, v14);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(_QWORD *)v17 = *(_QWORD *)" (default: ";
    *((_QWORD *)v16 + 4) += 11;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  v18 = *(unsigned __int8 *)(a4 + 16);
  v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    v19 = write_unsigned<unsigned long>(v19, *(_QWORD *)(a4 + 8), 0, 0, 0);
  }
  else
  {
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(_QWORD *)v20 = *(_QWORD *)"*no default*";
      *((_QWORD *)v19 + 4) += 12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  v21 = (llvm::raw_ostream *)llvm::outs(v19);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2601;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void llvm::cl::parser<double>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, uint64_t a3, int a4, double a5)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  int v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  void (**v23)(llvm::raw_string_ostream *__hidden);
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a4);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_251C13AC0;
  v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  llvm::write_double((llvm::raw_ostream *)&v23, 0, 0, 0, a5);
  v23 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v30 == 1)
  {
    v7 = v25;
    if (v25)
      v7 = (llvm *)MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
  }
  v8 = (llvm::raw_ostream *)llvm::outs(v7);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8253;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0)
    v10 = (const char *)&v32;
  else
    v10 = v32;
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = v33;
  v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    v13 = v33;
    if (v33 < 8)
      goto LABEL_15;
  }
  else
  {
    v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_15:
      v14 = (8 - v13);
      goto LABEL_18;
    }
  }
  v14 = 0;
LABEL_18:
  v15 = (llvm::raw_ostream *)llvm::outs(v12);
  v16 = llvm::raw_ostream::indent(v15, v14);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(_QWORD *)v17 = *(_QWORD *)" (default: ";
    *((_QWORD *)v16 + 4) += 11;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  v18 = *(unsigned __int8 *)(a3 + 16);
  v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    llvm::write_double(v19, 0, 0, 0, *(double *)(a3 + 8));
  }
  else
  {
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(_QWORD *)v20 = *(_QWORD *)"*no default*";
      *((_QWORD *)v19 + 4) += 12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  v21 = (llvm::raw_ostream *)llvm::outs(v19);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2601;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

void llvm::cl::parser<float>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, uint64_t a3, int a4, float a5)
{
  llvm *v7;
  llvm::raw_ostream *v8;
  _WORD *v9;
  const char *v10;
  size_t v11;
  llvm *v12;
  int v13;
  size_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  int v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  _WORD *v22;
  void (**v23)(llvm::raw_string_ostream *__hidden);
  int v24;
  llvm *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  int v30;
  void **v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;

  llvm::cl::basic_parser_impl::printOptionName(a1, a2, a4);
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v24 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v23 = &off_251C13AC0;
  v31 = (void **)&v32;
  llvm::raw_ostream::SetUnbuffered(&v23);
  llvm::write_double((llvm::raw_ostream *)&v23, 0, 0, 0, a5);
  v23 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v30 == 1)
  {
    v7 = v25;
    if (v25)
      v7 = (llvm *)MEMORY[0x24BD1B380](v25, 0x1000C8077774924);
  }
  v8 = (llvm::raw_ostream *)llvm::outs(v7);
  v9 = (_WORD *)*((_QWORD *)v8 + 4);
  if (*((_QWORD *)v8 + 3) - (_QWORD)v9 > 1uLL)
  {
    *v9 = 8253;
    *((_QWORD *)v8 + 4) += 2;
  }
  else
  {
    v8 = llvm::raw_ostream::write(v8, "= ", 2uLL);
  }
  if (v34 >= 0)
    v10 = (const char *)&v32;
  else
    v10 = v32;
  if (v34 >= 0)
    v11 = HIBYTE(v34);
  else
    v11 = v33;
  v12 = llvm::raw_ostream::write(v8, v10, v11);
  if (SHIBYTE(v34) < 0)
  {
    v13 = v33;
    if (v33 < 8)
      goto LABEL_15;
  }
  else
  {
    v13 = HIBYTE(v34);
    if (HIBYTE(v34) <= 7u)
    {
LABEL_15:
      v14 = (8 - v13);
      goto LABEL_18;
    }
  }
  v14 = 0;
LABEL_18:
  v15 = (llvm::raw_ostream *)llvm::outs(v12);
  v16 = llvm::raw_ostream::indent(v15, v14);
  v17 = *((_QWORD *)v16 + 4);
  if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 0xA)
  {
    *(_DWORD *)(v17 + 7) = 540701804;
    *(_QWORD *)v17 = *(_QWORD *)" (default: ";
    *((_QWORD *)v16 + 4) += 11;
  }
  else
  {
    v16 = llvm::raw_ostream::write(v16, " (default: ", 0xBuLL);
  }
  v18 = *(unsigned __int8 *)(a3 + 12);
  v19 = (llvm::raw_ostream *)llvm::outs(v16);
  if (v18)
  {
    llvm::write_double(v19, 0, 0, 0, *(float *)(a3 + 8));
  }
  else
  {
    v20 = *((_QWORD *)v19 + 4);
    if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0xB)
    {
      *(_DWORD *)(v20 + 8) = 712273013;
      *(_QWORD *)v20 = *(_QWORD *)"*no default*";
      *((_QWORD *)v19 + 4) += 12;
    }
    else
    {
      v19 = llvm::raw_ostream::write(v19, "*no default*", 0xCuLL);
    }
  }
  v21 = (llvm::raw_ostream *)llvm::outs(v19);
  v22 = (_WORD *)*((_QWORD *)v21 + 4);
  if (*((_QWORD *)v21 + 3) - (_QWORD)v22 > 1uLL)
  {
    *v22 = 2601;
    *((_QWORD *)v21 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v21, ")\n", 2uLL);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(v32);
}

llvm::raw_ostream *llvm::cl::parser<std::string>::printOptionDiff(llvm::cl::basic_parser_impl *a1, const llvm::cl::Option *a2, const void *a3, size_t a4, uint64_t a5, int a6)
{
  llvm *v9;
  llvm::raw_ostream *v10;
  _WORD *v11;
  llvm *v12;
  size_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  int v17;
  llvm::raw_ostream *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  int v22;
  const char *v23;
  size_t v24;
  uint64_t v25;
  llvm::raw_ostream *result;
  _WORD *v27;

  v9 = llvm::cl::basic_parser_impl::printOptionName(a1, a2, a6);
  v10 = (llvm::raw_ostream *)llvm::outs(v9);
  v11 = (_WORD *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 1uLL)
  {
    *v11 = 8253;
    *((_QWORD *)v10 + 4) += 2;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, "= ", 2uLL);
  }
  v12 = llvm::raw_ostream::operator<<(v10, a3, a4);
  if (a4 >= 8)
    v13 = 0;
  else
    v13 = (8 - a4);
  v14 = (llvm::raw_ostream *)llvm::outs(v12);
  v15 = llvm::raw_ostream::indent(v14, v13);
  v16 = *((_QWORD *)v15 + 4);
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) > 0xA)
  {
    *(_DWORD *)(v16 + 7) = 540701804;
    *(_QWORD *)v16 = *(_QWORD *)" (default: ";
    *((_QWORD *)v15 + 4) += 11;
  }
  else
  {
    v15 = llvm::raw_ostream::write(v15, " (default: ", 0xBuLL);
  }
  v17 = *(unsigned __int8 *)(a5 + 32);
  v18 = (llvm::raw_ostream *)llvm::outs(v15);
  if (v17)
  {
    v21 = *(const char **)(a5 + 8);
    v20 = a5 + 8;
    v19 = v21;
    v22 = *(char *)(v20 + 23);
    if (v22 >= 0)
      v23 = (const char *)v20;
    else
      v23 = v19;
    if (v22 >= 0)
      v24 = *(unsigned __int8 *)(v20 + 23);
    else
      v24 = *(_QWORD *)(v20 + 8);
    goto LABEL_19;
  }
  v25 = *((_QWORD *)v18 + 4);
  if ((unint64_t)(*((_QWORD *)v18 + 3) - v25) <= 0xB)
  {
    v23 = "*no default*";
    v24 = 12;
LABEL_19:
    v18 = llvm::raw_ostream::write(v18, v23, v24);
    goto LABEL_21;
  }
  *(_DWORD *)(v25 + 8) = 712273013;
  *(_QWORD *)v25 = *(_QWORD *)"*no default*";
  *((_QWORD *)v18 + 4) += 12;
LABEL_21:
  result = (llvm::raw_ostream *)llvm::outs(v18);
  v27 = (_WORD *)*((_QWORD *)result + 4);
  if (*((_QWORD *)result + 3) - (_QWORD)v27 <= 1uLL)
    return llvm::raw_ostream::write(result, ")\n", 2uLL);
  *v27 = 2601;
  *((_QWORD *)result + 4) += 2;
  return result;
}

double llvm::cl::basic_parser_impl::printOptionNoValue(llvm::cl::basic_parser_impl *this, const llvm::cl::Option *a2, int a3)
{
  llvm *v3;
  llvm::raw_ostream *v4;
  void *v5;
  double result;

  v3 = llvm::cl::basic_parser_impl::printOptionName(this, a2, a3);
  v4 = (llvm::raw_ostream *)llvm::outs(v3);
  v5 = (void *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v5 > 0x1DuLL)
  {
    qmemcpy(v5, "= *cannot print option value*\n", 30);
    result = *(double *)"t option value*\n";
    *((_QWORD *)v4 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(v4, "= *cannot print option value*\n", 0x1EuLL);
  }
  return result;
}

uint64_t llvm::cl::Option::getValueExpectedFlagDefault(llvm::cl::Option *this)
{
  return 1;
}

BOOL llvm::cl::OptionValueCopy<llvm::cl::BOOLOrDefault>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t llvm::cl::OptionValueCopy<std::string>::compare(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
    return llvm::cl::OptionValueCopy<std::string>::compare(a1, (unsigned __int8 *)(a2 + 8));
  else
    return 0;
}

void llvm::cl::parser<BOOL>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<BOOL>::getValueName()
{
  return 0;
}

void llvm::cl::parser<llvm::cl::BOOLOrDefault>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::cl::parser<llvm::cl::BOOLOrDefault>::getValueName()
{
  return 0;
}

void llvm::cl::parser<int>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

const char *llvm::cl::parser<int>::getValueName()
{
  return "int";
}

void llvm::cl::parser<unsigned int>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

const char *llvm::cl::parser<unsigned int>::getValueName()
{
  return "uint";
}

void llvm::cl::parser<unsigned long long>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

const char *llvm::cl::parser<unsigned long long>::getValueName()
{
  return "ulong";
}

void llvm::cl::parser<double>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

const char *llvm::cl::parser<double>::getValueName()
{
  return "number";
}

void llvm::cl::parser<float>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

const char *llvm::cl::parser<float>::getValueName()
{
  return "number";
}

void llvm::cl::parser<std::string>::~parser()
{
  JUMPOUT(0x24BD1B3A4);
}

const char *llvm::cl::parser<std::string>::getValueName()
{
  return "string";
}

void llvm::cl::opt<unsigned int,false,llvm::cl::parser<unsigned int>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C12270;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C12270;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void llvm::cl::opt<int,false,llvm::cl::parser<int>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C122D8;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C122D8;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void llvm::cl::opt<std::string,false,llvm::cl::parser<std::string>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251C12340;
  v2 = (char *)this + 200;
  v3 = (char *)*((_QWORD *)this + 28);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C12570;
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251C12340;
  v2 = (char *)this + 200;
  v3 = (char *)*((_QWORD *)this + 28);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  *((_QWORD *)this + 19) = &off_251C12570;
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  llvm::cl::Option::~Option(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C123A8;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C123A8;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void `anonymous namespace'::CommandLineParser::addLiteralOption(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *i;
  uint64_t *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  unint64_t v23;

  if (!*(_QWORD *)(a2 + 24))
  {
    v23 = a2;
    v10 = llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>((llvm::StringMapImpl *)(a3 + 128), a4, a5, &v23);
    if ((v10 & 1) == 0)
    {
      v19 = (llvm::raw_ostream *)llvm::errs((llvm *)v10);
      v20 = llvm::raw_ostream::operator<<(v19, (const char *)a1);
      v21 = llvm::raw_ostream::operator<<(v20, ": CommandLine Error: Option '");
      v22 = llvm::raw_ostream::operator<<(v21, a4, a5);
      llvm::raw_ostream::operator<<(v22, "' registered more than once!\n");
      llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const llvm::Twine *)1);
    }
    if (!atomic_load((unint64_t *)&llvm::cl::AllSubCommands))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
    if (llvm::cl::AllSubCommands == a3)
    {
      v12 = *(_QWORD *)(a1 + 280);
      v13 = 288;
      if (v12 == *(_QWORD *)(a1 + 272))
        v13 = 292;
      v14 = *(unsigned int *)(a1 + v13);
      if ((_DWORD)v14)
      {
        v15 = 8 * v14;
        for (i = *(uint64_t **)(a1 + 280); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
        {
          v15 -= 8;
          if (!v15)
            return;
        }
      }
      else
      {
        i = *(uint64_t **)(a1 + 280);
      }
      v17 = (uint64_t *)(v12 + 8 * v14);
      if (i != v17)
      {
        v18 = *i;
LABEL_17:
        if (v18 != a3)
        while (++i != v17)
        {
          v18 = *i;
          if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
          {
            if (i != v17)
              goto LABEL_17;
            return;
          }
        }
      }
    }
  }
}

uint64_t llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3, unint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t *v13;
  char *v14;
  unint64_t v15;
  _QWORD *i;

  v8 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  v9 = *(_QWORD *)a1;
  v10 = v8;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v8);
  if (v11 == -8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v11)
  {
    return 0;
  }
  v12 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v13 = v12;
  v14 = (char *)(v12 + 2);
  if (a3)
    memcpy(v12 + 2, a2, a3);
  v14[a3] = 0;
  v15 = *a4;
  *v13 = a3;
  v13[1] = v15;
  *(_QWORD *)(v9 + 8 * v10) = v13;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v10));
        !*i || *i == -8;
  return 1;
}

void `anonymous namespace'::CommandLineParser::addOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  int Key;
  llvm::raw_ostream *v8;
  int v9;
  const char *v10;
  size_t v11;
  llvm::raw_ostream *v12;
  void *v13;
  int v14;
  void *v15;
  __int16 v16;
  unsigned int *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *i;
  uint64_t *v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  const char *v27;
  __int16 v28;
  __int128 v29;
  uint64_t v30;

  v5 = a1;
  v6 = *(_QWORD *)(a2 + 24);
  if (!v6)
    goto LABEL_14;
  if ((*(_WORD *)(a2 + 10) & 0x2000) != 0)
  {
    Key = llvm::StringMapImpl::FindKey((uint64_t *)(a3 + 128), *(uint64_t **)(a2 + 16), v6);
    if (Key != -1 && Key != (unint64_t)*(unsigned int *)(a3 + 136))
      return;
  }
  v29 = *(_OWORD *)(a2 + 16);
  v30 = a2;
  a1 = llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>((llvm::StringMapImpl *)(a3 + 128), (uint64_t *)v29, *((unint64_t *)&v29 + 1), (unint64_t *)&v30);
  if ((a1 & 1) != 0)
  {
LABEL_14:
    v14 = 0;
  }
  else
  {
    v8 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
    v9 = *(char *)(v5 + 23);
    if (v9 >= 0)
      v10 = (const char *)v5;
    else
      v10 = *(const char **)v5;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v5 + 23);
    else
      v11 = *(_QWORD *)(v5 + 8);
    v12 = llvm::raw_ostream::write(v8, v10, v11);
    v13 = (void *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 0x1CuLL)
    {
      qmemcpy(v13, ": CommandLine Error: Option '", 29);
      *((_QWORD *)v12 + 4) += 29;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v12, ": CommandLine Error: Option '", 0x1DuLL);
    }
    a1 = (uint64_t)llvm::raw_ostream::operator<<(v12, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    v15 = *(void **)(a1 + 32);
    if (*(_QWORD *)(a1 + 24) - (_QWORD)v15 > 0x1CuLL)
    {
      qmemcpy(v15, "' registered more than once!\n", 29);
      *(_QWORD *)(a1 + 32) += 29;
    }
    else
    {
      a1 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a1, "' registered more than once!\n", 0x1DuLL);
    }
    v14 = 1;
  }
  v16 = *(_WORD *)(a2 + 10);
  if ((v16 & 0x180) == 0x80)
  {
    v17 = (unsigned int *)(a3 + 32);
    goto LABEL_28;
  }
  if ((*(_WORD *)(a2 + 10) & 0x800) != 0)
  {
    v17 = (unsigned int *)(a3 + 80);
LABEL_28:
    llvm::SmallVectorTemplateBase<void *,true>::push_back(v17, a2);
    if ((v14 & 1) == 0)
      goto LABEL_29;
LABEL_52:
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const llvm::Twine *)1);
  }
  if ((v16 & 7) == 4)
  {
    if (*(_QWORD *)(a3 + 152))
    {
      v27 = "Cannot specify more than one option with cl::ConsumeAfter!";
      v28 = 259;
      v26 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
      llvm::cl::Option::error(a2, (llvm::Twine *)&v27, 0, 0, v26);
      *(_QWORD *)(a3 + 152) = a2;
    }
    else
    {
      *(_QWORD *)(a3 + 152) = a2;
      if ((v14 & 1) == 0)
        goto LABEL_29;
    }
    goto LABEL_52;
  }
  if (v14)
    goto LABEL_52;
LABEL_29:
  if (!atomic_load((unint64_t *)&llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if (llvm::cl::AllSubCommands == a3)
  {
    v19 = *(_QWORD *)(v5 + 280);
    v20 = 288;
    if (v19 == *(_QWORD *)(v5 + 272))
      v20 = 292;
    v21 = *(unsigned int *)(v5 + v20);
    if ((_DWORD)v21)
    {
      v22 = 8 * v21;
      for (i = *(uint64_t **)(v5 + 280); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v22 -= 8;
        if (!v22)
          return;
      }
    }
    else
    {
      i = *(uint64_t **)(v5 + 280);
    }
    v24 = (uint64_t *)(v19 + 8 * v21);
    if (i != v24)
    {
      v25 = *i;
LABEL_43:
      if (v25 != a3)
      while (++i != v24)
      {
        v25 = *i;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        {
          if (i != v24)
            goto LABEL_43;
          return;
        }
      }
    }
  }
}

const void **llvm::SmallPtrSetImplBase::find_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  const void **v4;
  const void **result;
  uint64_t v6;
  uint64_t v7;

  v4 = (const void **)*((_QWORD *)this + 1);
  if (v4 == *(const void ***)this)
  {
    v6 = *((unsigned int *)this + 5);
    result = &v4[v6];
    if ((_DWORD)v6)
    {
      v7 = 8 * v6;
      while (*v4 != a2)
      {
        ++v4;
        v7 -= 8;
        if (!v7)
          return result;
      }
      return v4;
    }
  }
  else
  {
    result = llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
    if (*result != a2)
      return &v4[*((unsigned int *)this + 4)];
  }
  return result;
}

uint64_t `anonymous namespace'::CommandLineParser::updateArgStr(const char *a1, unint64_t a2, uint64_t *a3, unint64_t a4, unsigned int *a5)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t result;
  unint64_t *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  unint64_t v16;

  v8 = (uint64_t *)(a5 + 32);
  v16 = a2;
  v9 = llvm::StringMap<llvm::cl::Option *,llvm::MallocAllocator>::try_emplace<llvm::cl::Option *>((llvm::StringMapImpl *)(a5 + 32), a3, a4, &v16);
  if ((v9 & 1) == 0)
  {
    v12 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
    v13 = llvm::raw_ostream::operator<<(v12, a1);
    v14 = llvm::raw_ostream::operator<<(v13, ": CommandLine Error: Option '");
    v15 = llvm::raw_ostream::operator<<(v14, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    llvm::raw_ostream::operator<<(v15, "' registered more than once!\n");
    llvm::report_fatal_error((llvm *)"inconsistency in registered CommandLine options", (const llvm::Twine *)1);
  }
  result = llvm::StringMapImpl::FindKey(v8, *(uint64_t **)(a2 + 16), *(_QWORD *)(a2 + 24));
  if ((_DWORD)result != -1 && (int)result != (unint64_t)a5[34])
  {
    v11 = *(unint64_t **)(*v8 + 8 * (int)result);
    llvm::StringMapImpl::RemoveKey((uint64_t)v8, (uint64_t *)((char *)v11 + a5[37]), *v11);
    JUMPOUT(0x24BD1B398);
  }
  return result;
}

const void **llvm::SmallPtrSetImpl<llvm::cl::OptionCategory *>::insert@<X0>(llvm::SmallPtrSetImplBase *a1@<X0>, const void *a2@<X1>, uint64_t a3@<X8>)
{
  const void **result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;

  result = llvm::SmallPtrSetImplBase::insert_imp(a1, a2);
  v7 = *((_QWORD *)a1 + 1);
  v8 = 16;
  if (v7 == *(_QWORD *)a1)
    v8 = 20;
  v9 = (const void **)(v7 + 8 * *(unsigned int *)((char *)a1 + v8));
  if (v9 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        result = v9;
        break;
      }
    }
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v6;
  return result;
}

const void **llvm::SmallPtrSetImplBase::insert_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  if (v2 != *(_QWORD *)this)
    return llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  v5 = *((unsigned int *)this + 5);
  if (!(_DWORD)v5)
  {
LABEL_12:
    if (v5 < *((_DWORD *)this + 4))
    {
      *((_DWORD *)this + 5) = v5 + 1;
      *(_QWORD *)(v2 + 8 * v5) = a2;
      return (const void **)(*(_QWORD *)this + 8 * v5);
    }
    return llvm::SmallPtrSetImplBase::insert_imp_big(this, a2);
  }
  v6 = 0;
  v7 = 8 * v5;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  while ((const void *)*v3 != a2)
  {
    if (*v3 == -2)
      v6 = v3;
    ++v3;
    v7 -= 8;
    if (!v7)
    {
      if (!v6)
        goto LABEL_12;
      *v6 = a2;
      --*((_DWORD *)this + 6);
      return (const void **)v6;
    }
  }
  return (const void **)v3;
}

const void **llvm::SmallPtrSetImpl<llvm::cl::SubCommand *>::insert(uint64_t a1, llvm::SmallPtrSetImplBase *this, void *a3)
{
  const void **result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  const void **v9;

  result = llvm::SmallPtrSetImplBase::insert_imp(this, a3);
  v7 = *((_QWORD *)this + 1);
  v8 = 16;
  if (v7 == *(_QWORD *)this)
    v8 = 20;
  v9 = (const void **)(v7 + 8 * *(unsigned int *)((char *)this + v8));
  if (v9 != result)
  {
    while ((unint64_t)*result >= 0xFFFFFFFFFFFFFFFELL)
    {
      if (++result == v9)
      {
        result = v9;
        break;
      }
    }
  }
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v6;
  return result;
}

BOOL llvm::SmallPtrSetImplBase::erase_imp(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  const void **imp;
  uint64_t v4;
  uint64_t v5;
  const void **v6;

  imp = llvm::SmallPtrSetImplBase::find_imp(this, a2);
  v4 = *((_QWORD *)this + 1);
  v5 = 16;
  if (v4 == *(_QWORD *)this)
    v5 = 20;
  v6 = (const void **)(v4 + 8 * *(unsigned int *)((char *)this + v5));
  if (imp != v6)
  {
    *imp = (const void *)-2;
    ++*((_DWORD *)this + 6);
  }
  return imp != v6;
}

uint64_t parseBackslash(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  v6 = 0;
  v7 = a2 - 1;
  v8 = a2 - a3;
  do
  {
    if (!(a3 - a2 + 1 + v6))
      goto LABEL_8;
    v9 = *(unsigned __int8 *)(a1 + a3 + 1 + v6++);
  }
  while (v9 == 92);
  if (v9 != 34)
  {
    v7 = a3 + v6 - 1;
    v8 = v6;
LABEL_8:
    llvm::SmallVectorImpl<char>::append(a4, v8, 92);
    return v7;
  }
  llvm::SmallVectorImpl<char>::append(a4, v6 >> 1, 92);
  v7 = a3 + v6;
  if ((v6 & 1) != 0)
    llvm::SmallVectorTemplateBase<char,true>::push_back(a4, 34);
  else
    --v7;
  return v7;
}

__n128 llvm::StringRef::split@<Q0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  __n128 result;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v7 = llvm::StringRef::find(a1, a2, a3, 0);
  if (v7 == -1)
  {
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    result = *(__n128 *)a1;
    *(_OWORD *)a4 = *(_OWORD *)a1;
  }
  else
  {
    v10 = *a1;
    v9 = a1[1];
    if (v7 >= v9)
      v11 = a1[1];
    else
      v11 = v7;
    v12 = v7 + a3;
    if (v9 < v7 + a3)
      v12 = a1[1];
    *(_QWORD *)a4 = v10;
    *(_QWORD *)(a4 + 8) = v11;
    *(_QWORD *)(a4 + 16) = v10 + v12;
    *(_QWORD *)(a4 + 24) = v9 - v12;
  }
  return result;
}

uint64_t llvm::StringRef::compare(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3;
  size_t v4;
  int v5;
  unsigned int v7;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 8);
  if (a3 >= v4)
    a3 = *(_QWORD *)(a1 + 8);
  if (a3)
  {
    v5 = memcmp(*(const void **)a1, a2, a3);
    if (v5)
      return (v5 >> 31) | 1u;
  }
  if (v4 < v3)
    v7 = -1;
  else
    v7 = 1;
  if (v4 == v3)
    return 0;
  else
    return v7;
}

uint64_t llvm::cl::Option::Option(uint64_t a1, char a2, char a3)
{
  unsigned int *v4;

  *(_QWORD *)a1 = &unk_251C12498;
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 10) = a2 & 7 | (32 * (a3 & 3)) | *(_WORD *)(a1 + 10) & 0x8000;
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v4 = (unsigned int *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 88) = a1 + 120;
  *(_QWORD *)(a1 + 96) = a1 + 120;
  *(_QWORD *)(a1 + 104) = 1;
  *(_DWORD *)(a1 + 112) = 0;
  llvm::cl::getGeneralCategory((llvm::cl *)a1);
  llvm::SmallVectorTemplateBase<void *,true>::push_back(v4, (uint64_t)&llvm::cl::getGeneralCategory(void)::GeneralCategory);
  return a1;
}

void llvm::cl::Option::~Option(llvm::cl::Option *this)
{
  void *v2;
  char *v3;

  *(_QWORD *)this = &unk_251C12498;
  v2 = (void *)*((_QWORD *)this + 12);
  if (v2 != *((void **)this + 11))
    free(v2);
  v3 = (char *)*((_QWORD *)this + 8);
  if (v3 != (char *)this + 80)
    free(v3);
}

BOOL llvm::cl::OptionValueCopy<BOOL>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 9) && *(_BYTE *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C12410;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C12410;
}

uint64_t std::__throw_bad_function_call[abi:nn180100]()
{
  llvm::SmallPtrSetImplBase *v0;

  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return llvm::SmallPtrSetImplBase::clear(v0);
}

void *llvm::SmallPtrSetImplBase::clear(llvm::SmallPtrSetImplBase *this)
{
  void *result;
  uint64_t v3;

  result = (void *)*((_QWORD *)this + 1);
  if (result != *(void **)this)
  {
    v3 = *((unsigned int *)this + 4);
    if (v3 >= 0x21 && 4 * (*((_DWORD *)this + 5) - *((_DWORD *)this + 6)) < v3)
      return llvm::SmallPtrSetImplBase::shrink_and_clear((void **)this);
    result = memset(result, 255, 8 * v3);
  }
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

BOOL llvm::cl::OptionValueCopy<unsigned int>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

BOOL llvm::cl::OptionValueCopy<int>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *std::__function::__value_func<void ()(int const&)>::swap[abi:nn180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

uint64_t llvm::object_creator<`anonymous namespace'::CommandLineParser>::call()
{
  uint64_t v0;

  v0 = operator new();
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)(v0 + 64) = v0 + 80;
  *(_QWORD *)(v0 + 72) = 0x400000000;
  *(_QWORD *)(v0 + 112) = v0 + 144;
  *(_QWORD *)(v0 + 120) = v0 + 144;
  *(_QWORD *)(v0 + 128) = 16;
  *(_DWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 272) = v0 + 304;
  *(_QWORD *)(v0 + 280) = v0 + 304;
  *(_QWORD *)(v0 + 288) = 4;
  *(_DWORD *)(v0 + 296) = 0;
  *(_QWORD *)(v0 + 336) = 0;
  if (!atomic_load(llvm::cl::TopLevelSubCommand))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)llvm::cl::TopLevelSubCommand, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  if (!atomic_load((unint64_t *)&llvm::cl::AllSubCommands))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&llvm::cl::AllSubCommands, (void *(*)(void))llvm::object_creator<llvm::cl::SubCommand>::call, (void (*)(void *))llvm::object_deleter<llvm::cl::SubCommand>::call);
  return v0;
}

uint64_t llvm::object_deleter<`anonymous namespace'::CommandLineParser>::call(uint64_t result)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (result)
  {
    v1 = result;
    v2 = *(void **)(result + 280);
    if (v2 != *(void **)(v1 + 272))
      free(v2);
    v3 = *(void **)(v1 + 120);
    if (v3 != *(void **)(v1 + 112))
      free(v3);
    v4 = *(void **)(v1 + 64);
    if (v4 != (void *)(v1 + 80))
      free(v4);
    v5 = *(void **)(v1 + 40);
    if (v5)
    {
      *(_QWORD *)(v1 + 48) = v5;
      operator delete(v5);
    }
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

double llvm::object_creator<llvm::cl::SubCommand>::call()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_QWORD *)(v0 + 32) = v0 + 48;
  *(_DWORD *)(v0 + 44) = 4;
  *(_QWORD *)(v0 + 80) = v0 + 96;
  *(_DWORD *)(v0 + 92) = 4;
  *(_QWORD *)(v0 + 128) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0x1000000000;
  *(_QWORD *)(v0 + 152) = 0;
  return result;
}

uint64_t llvm::object_deleter<llvm::cl::SubCommand>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;

  if (result)
  {
    v1 = result;
    if (*(_DWORD *)(result + 140))
    {
      v2 = *(unsigned int *)(result + 136);
      if ((_DWORD)v2)
      {
        v3 = 0;
        v4 = 8 * v2;
        do
        {
          v5 = *(_QWORD *)(*(_QWORD *)(v1 + 128) + v3);
          if (v5 != -8 && v5 != 0)
            MEMORY[0x24BD1B398]();
          v3 += 8;
        }
        while (v4 != v3);
      }
    }
    free(*(void **)(v1 + 128));
    v7 = *(void **)(v1 + 80);
    if (v7 != (void *)(v1 + 96))
      free(v7);
    v8 = *(void **)(v1 + 32);
    if (v8 != (void *)(v1 + 48))
      free(v8);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

unsigned int *llvm::function_ref<void ()(llvm::StringRef)>::callback_fn<llvm::cl::TokenizeWindowsCommandLineNoCopy(llvm::StringRef,llvm::StringSaver &,llvm::SmallVectorImpl<llvm::StringRef> &)::$_0>(unsigned int **a1, uint64_t a2, uint64_t a3)
{
  return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(*a1, a2, a3);
}

uint64_t llvm::ConvertUTF32toUTF8(unsigned int **a1, unint64_t a2, uint64_t *a3, unint64_t a4, int a5)
{
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int16 v12;
  unsigned int v13;
  unint64_t v14;

  v5 = *a1;
  v6 = *a3;
  if ((unint64_t)*a1 >= a2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *a1;
    while (1)
    {
      v10 = *v5++;
      v9 = v10;
      if (!a5 && (v9 & 0xFFFFF800) == 0xD800)
      {
        v7 = 3;
        goto LABEL_32;
      }
      if (v9 >= 0x110000)
        v11 = 65533;
      else
        v11 = v9;
      if (v9 >= 0x110000)
        v12 = 3;
      else
        v12 = 4;
      if (v9 >= 0x110000)
        v13 = 3;
      else
        v13 = v7;
      if (v9 < 0x10000)
      {
        v11 = v9;
        v12 = 3;
        v13 = v7;
      }
      if (v9 < 0x800)
      {
        v11 = v9;
        v12 = 2;
        v13 = v7;
      }
      if (v9 >= 0x80)
      {
        v7 = v13;
      }
      else
      {
        v11 = v9;
        v12 = 1;
        v7 = v7;
      }
      v14 = v6 + v12;
      if (v14 > a4)
        break;
      switch(v12)
      {
        case 1u:
          goto LABEL_26;
        case 2u:
          goto LABEL_25;
        case 3u:
          goto LABEL_24;
        case 4u:
          *(_BYTE *)--v14 = v11 & 0x3F | 0x80;
          v11 >>= 6;
LABEL_24:
          *(_BYTE *)--v14 = v11 & 0x3F | 0x80;
          v11 >>= 6;
LABEL_25:
          *(_BYTE *)--v14 = v11 & 0x3F | 0x80;
          v11 >>= 6;
LABEL_26:
          *(_BYTE *)--v14 = llvm::firstByteMark[v12] | v11;
          break;
        default:
          break;
      }
      v6 = v14 + v12;
      v8 = v5;
      if ((unint64_t)v5 >= a2)
        goto LABEL_33;
    }
    v7 = 2;
LABEL_32:
    v5 = v8;
  }
LABEL_33:
  *a1 = v5;
  *a3 = v6;
  return v7;
}

BOOL llvm::isLegalUTF8(llvm *this, const unsigned __int8 *a2)
{
  char *v2;
  unsigned int v3;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  v2 = (char *)this + (int)a2;
  switch((int)a2)
  {
    case 1:
      v3 = *(unsigned __int8 *)this;
      goto LABEL_3;
    case 2:
      goto LABEL_7;
    case 3:
      goto LABEL_6;
    case 4:
      v5 = *--v2;
      if (v5 > -65)
        return 0;
LABEL_6:
      v6 = *--v2;
      if (v6 > -65)
        return 0;
LABEL_7:
      v7 = *(v2 - 1);
      if (v7 > -65)
        return 0;
      v8 = v7;
      v3 = *(unsigned __int8 *)this;
      if (v3 > 0xEF)
      {
        if (v3 == 240)
        {
          if (v8 >= 0x90)
          {
            v3 = 240;
            return v3 < 0xF5;
          }
          return 0;
        }
        if (v3 == 244)
        {
          if (v8 <= 0x8F)
          {
            v3 = 244;
            return v3 < 0xF5;
          }
          return 0;
        }
      }
      else
      {
        if (v3 == 224)
        {
          if (v8 >= 0xA0)
          {
            v3 = 224;
            return v3 < 0xF5;
          }
          return 0;
        }
        if (v3 == 237)
        {
          if (v8 <= 0x9F)
          {
            v3 = 237;
            return v3 < 0xF5;
          }
          return 0;
        }
      }
LABEL_3:
      if ((char)v3 >= -62)
        return v3 < 0xF5;
      return 0;
    default:
      return 0;
  }
}

BOOL llvm::isLegalUTF8String(llvm **this, const unsigned __int8 **a2, const unsigned __int8 *a3)
{
  llvm *v3;
  uint64_t v6;
  _BOOL8 result;

  v3 = *this;
  if (*this == (llvm *)a2)
    return 1;
  while (1)
  {
    v6 = llvm::trailingBytesForUTF8[*(unsigned __int8 *)v3] + 1;
    if ((char *)a2 - (char *)v3 < v6)
      break;
    result = llvm::isLegalUTF8(v3, (const unsigned __int8 *)(llvm::trailingBytesForUTF8[*(unsigned __int8 *)v3] + 1));
    if (!result)
      return result;
    v3 = (llvm *)((char *)v3 + v6);
    *this = v3;
    if (v3 == (llvm *)a2)
      return 1;
  }
  return 0;
}

uint64_t llvm::ConvertUTF8toUTF32Impl(char **a1, char *a2, unsigned int **a3, unint64_t a4, int a5, int a6)
{
  char *v6;
  unsigned int *v7;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v26;
  int v27;
  BOOL v28;
  char *v29;

  v6 = *a1;
  v7 = *a3;
  if (*a1 >= a2)
  {
    v10 = 0;
    goto LABEL_64;
  }
  v10 = 0;
  if (a5)
    v11 = a6 == 0;
  else
    v11 = 0;
  v12 = !v11;
  while (1)
  {
    v13 = *v6;
    if (a2 - v6 <= (unsigned __int16)llvm::trailingBytesForUTF8[v13])
    {
      if ((v12 & 1) != 0)
      {
        v10 = 1;
        goto LABEL_64;
      }
      goto LABEL_28;
    }
    if ((unint64_t)v7 >= a4)
    {
      v10 = 2;
      goto LABEL_64;
    }
    v14 = (unsigned __int16)llvm::trailingBytesForUTF8[v13];
    v15 = (unsigned __int16)llvm::trailingBytesForUTF8[v13] + 1;
    if (llvm::isLegalUTF8((llvm *)v6, (const unsigned __int8 *)v15))
      break;
    if (!a5)
      goto LABEL_66;
LABEL_28:
    if (v6 == a2)
    {
      v26 = 0;
      goto LABEL_48;
    }
    if ((v13 + 62) < 0x1Eu || v6 + 1 == a2)
    {
LABEL_34:
      v26 = 1;
      goto LABEL_48;
    }
    v27 = v6[1];
    if ((_DWORD)v13 == 224)
    {
      v26 = 1;
      if ((v27 & 0xFFFFFFE0) == 0xFFFFFFA0)
        v26 = 2;
      goto LABEL_48;
    }
    if ((v13 + 31) <= 0xBu)
      goto LABEL_44;
    if ((_DWORD)v13 == 237)
    {
      v28 = v27 < -96;
      goto LABEL_45;
    }
    if ((v13 & 0xFE) == 0xEE)
    {
LABEL_44:
      v28 = v27 < -64;
LABEL_45:
      v26 = 1;
LABEL_46:
      if (v28)
        ++v26;
      goto LABEL_48;
    }
    v29 = v6 + 2;
    if ((_DWORD)v13 == 240)
    {
      if ((v27 + 112) > 0x2F)
        goto LABEL_34;
    }
    else if ((v13 + 15) > 2u)
    {
      if ((_DWORD)v13 != 244)
        goto LABEL_34;
      v26 = 1;
      if (v27 > -113)
        goto LABEL_48;
    }
    else if (v27 > -65)
    {
      goto LABEL_34;
    }
    if (v29 != a2)
    {
      v28 = *v29 < -64;
      v26 = 2;
      goto LABEL_46;
    }
    v26 = 2;
LABEL_48:
    v6 += v26;
LABEL_49:
    v10 = 3;
    v23 = 65533;
LABEL_50:
    *v7++ = v23;
    if (v6 >= a2)
      goto LABEL_64;
  }
  v16 = 0;
  v17 = v14;
  switch((int)v14)
  {
    case 0:
      goto LABEL_17;
    case 1:
      goto LABEL_16;
    case 2:
      goto LABEL_15;
    case 3:
      goto LABEL_14;
    case 4:
      goto LABEL_13;
    case 5:
      v16 = (_DWORD)v13 << 6;
      v18 = *++v6;
      LODWORD(v13) = v18;
LABEL_13:
      v19 = *++v6;
      v16 = (v16 + (_DWORD)v13) << 6;
      LODWORD(v13) = v19;
LABEL_14:
      v20 = *++v6;
      v16 = (v16 + (_DWORD)v13) << 6;
      LODWORD(v13) = v20;
LABEL_15:
      v21 = *++v6;
      v16 = (v16 + (_DWORD)v13) << 6;
      LODWORD(v13) = v21;
LABEL_16:
      v22 = *++v6;
      v17 = (v16 + (_DWORD)v13) << 6;
      LODWORD(v13) = v22;
LABEL_17:
      ++v6;
      v16 = v17 + v13;
      break;
    default:
      break;
  }
  v23 = v16 - llvm::offsetsFromUTF8[v14];
  if (HIWORD(v23) > 0x10u)
    goto LABEL_49;
  v24 = (v23 & 0xFFFFF800) == 55296;
  if ((v23 & 0xFFFFF800) == 0xD800)
    v23 = 65533;
  if (a5 || !v24)
    goto LABEL_50;
  v6 -= v15;
LABEL_66:
  v10 = 3;
LABEL_64:
  *a1 = v6;
  *a3 = v7;
  return v10;
}

_QWORD *llvm::SmallVectorTemplateBase<unsigned short,true>::push_back(_QWORD *result, __int16 a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if ((unint64_t)(v4 + 1) > result[2])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v4 + 1, 2);
    v4 = v3[1];
  }
  *(_WORD *)(*v3 + 2 * v4) = a2;
  ++v3[1];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(2 * a2);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(4 * a2);
}

BOOL llvm::DataExtractor::prepareRead(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  const std::error_category *v10;
  unint64_t v11;
  llvm::formatv_object_base *v12;
  uint64_t v13;
  llvm::formatv_object_base *v14;
  void (**v16)(llvm::raw_string_ostream *__hidden);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  void *__p[2];
  uint64_t v26;
  uint64_t (**v27)(llvm::format_object_base *__hidden);
  const char *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v7 = a3 + a2;
  if (__CFADD__(a3, a2))
  {
    v8 = 0;
    if (!a4)
      return v8;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8) > (unint64_t)(v7 - 1);
    if (!a4)
      return v8;
  }
  if (!v8)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = std::generic_category();
    v11 = *(_QWORD *)(a1 + 8);
    __p[0] = 0;
    __p[1] = 0;
    v26 = 0;
    v17 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v16 = &off_251C13AC0;
    v24 = __p;
    llvm::raw_ostream::SetUnbuffered(&v16);
    if (v9 >= a2)
    {
      v27 = &off_251C125C0;
      v28 = "unexpected end of data at offset 0x%zx while reading [0x%llx, 0x%llx)";
      v29 = v11;
      v30 = a2;
      v31 = v7;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, (uint64_t)&v27);
      v14 = (llvm::formatv_object_base *)v24;
      v13 = operator new();
      LOWORD(v31) = 260;
      v27 = (uint64_t (**)(llvm::format_object_base *__hidden))v14;
      *(_QWORD *)v13 = off_251C127D0;
      llvm::Twine::str((llvm::formatv_object_base **)&v27, (std::string *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 92;
    }
    else
    {
      v27 = &off_251C125E0;
      v28 = "offset 0x%llx is beyond the end of data at 0x%zx";
      v29 = a2;
      v30 = v11;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, (uint64_t)&v27);
      v12 = (llvm::formatv_object_base *)v24;
      v13 = operator new();
      LOWORD(v31) = 260;
      v27 = (uint64_t (**)(llvm::format_object_base *__hidden))v12;
      *(_QWORD *)v13 = off_251C127D0;
      llvm::Twine::str((llvm::formatv_object_base **)&v27, (std::string *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 22;
    }
    *(_QWORD *)(v13 + 40) = v10;
    *(_BYTE *)(v13 + 48) = 1;
    v16 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v23 == 1 && v18)
      MEMORY[0x24BD1B380](v18, 0x1000C8077774924);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    *a4 = v13;
  }
  return v8;
}

uint64_t llvm::DataExtractor::getU<unsigned char>(_QWORD *a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  unint64_t v7;

  if (a3 && *a3)
    return 0;
  v7 = *a2;
  result = llvm::DataExtractor::prepareRead((uint64_t)a1, *a2, 1, a3);
  if ((_DWORD)result)
  {
    result = *(unsigned __int8 *)(*a1 + v7);
    ++*a2;
  }
  if (a3)
  {
    if (!*a3)
      *a3 = 0;
  }
  return result;
}

uint64_t llvm::DataExtractor::getU<unsigned int>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t result;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  if (a3 && *a3)
    return 0;
  v7 = *a2;
  result = llvm::DataExtractor::prepareRead(a1, *a2, 4, a3);
  if ((_DWORD)result)
  {
    v8 = *(_DWORD *)(*(_QWORD *)a1 + v7);
    v9 = bswap32(v8);
    if (*(_BYTE *)(a1 + 16) == 1)
      result = v8;
    else
      result = v9;
    *a2 += 4;
  }
  if (a3)
  {
    if (!*a3)
      *a3 = 0;
  }
  return result;
}

char *llvm::DataExtractor::getCStrRef(uint64_t *a1, llvm::formatv_object_base **a2, uint64_t *a3)
{
  llvm::formatv_object_base *v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  BOOL v11;
  const std::error_category *v12;
  llvm::formatv_object_base *v13;
  uint64_t v14;
  void (**v16)(llvm::raw_string_ostream *__hidden);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  void *__p[2];
  uint64_t v26;
  llvm::formatv_object_base *v27[4];
  __int16 v28;

  if (a3 && *a3)
    return 0;
  v5 = *a2;
  v6 = a1[1];
  if (v6 <= (unint64_t)*a2
    || ((v7 = *a1, v8 = (char *)v5 + *a1, v9 = (char *)memchr(v8, 0, v6 - (_QWORD)*a2), v10 = &v9[-v7], v9)
      ? (v11 = v10 + 1 == 0)
      : (v11 = 1),
        v11))
  {
    if (a3)
    {
      v12 = std::generic_category();
      __p[0] = 0;
      __p[1] = 0;
      v26 = 0;
      v17 = 0;
      v21 = 0;
      v22 = 0;
      v23 = 1;
      v19 = 0;
      v20 = 0;
      v18 = 0;
      v16 = &off_251C13AC0;
      v24 = __p;
      llvm::raw_ostream::SetUnbuffered(&v16);
      v27[0] = (llvm::formatv_object_base *)&off_251C12600;
      v27[1] = (llvm::formatv_object_base *)"no null terminated string at offset 0x%llx";
      v27[2] = v5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, (uint64_t)v27);
      v13 = (llvm::formatv_object_base *)v24;
      v14 = operator new();
      v28 = 260;
      v27[0] = v13;
      *(_QWORD *)v14 = off_251C127D0;
      llvm::Twine::str(v27, (std::string *)(v14 + 8));
      *(_QWORD *)(v14 + 32) = 92;
      *(_QWORD *)(v14 + 40) = v12;
      *(_BYTE *)(v14 + 48) = 1;
      v16 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
      if (v23 == 1 && v18)
        MEMORY[0x24BD1B380](v18, 0x1000C8077774924);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      v8 = 0;
      goto LABEL_16;
    }
    return 0;
  }
  *a2 = (llvm::formatv_object_base *)(v10 + 1);
  if (a3 && !*a3)
  {
    v14 = 0;
LABEL_16:
    *a3 = v14;
  }
  return v8;
}

uint64_t llvm::StringRef::trim(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t first_not_of;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  first_not_of = llvm::StringRef::find_first_not_of(a1, a2, a3, 0);
  v8 = *a1;
  v7 = a1[1];
  if (first_not_of >= v7)
    v9 = a1[1];
  else
    v9 = first_not_of;
  v10 = v8 + v9;
  v12[0] = v8 + v9;
  v12[1] = v7 - v9;
  llvm::StringRef::find_last_not_of(v12, a2, a3, 0xFFFFFFFFFFFFFFFFLL);
  return v10;
}

uint64_t llvm::DataExtractor::getULEB128(uint64_t *a1, llvm::formatv_object_base **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  const char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const std::error_category *v16;
  llvm::formatv_object_base *v17;
  void (**v18)(llvm::raw_string_ostream *__hidden);
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  void *__p[2];
  uint64_t v28;
  llvm::formatv_object_base *v29[4];
  __int16 v30;

  v5 = *a1;
  v6 = a1[1];
  if (a3 && *a3)
    return 0;
  v7 = 0;
  result = 0;
  v9 = 0;
  v10 = (char *)*a2 + v5;
  v11 = v6 - (_QWORD)*a2;
  v12 = "malformed uleb128, extends past end";
  do
  {
    if (v11 == v7)
      goto LABEL_13;
    v13 = v10[v7];
    v14 = v13 & 0x7F;
    if (v9 >= 0x40 && (v13 & 0x7F) != 0 || (unint64_t)(v14 << v9) >> v9 != v14)
    {
      v12 = "uleb128 too big for uint64";
LABEL_13:
      if (!a3)
        return 0;
      v16 = std::generic_category();
      __p[0] = 0;
      __p[1] = 0;
      v28 = 0;
      v19 = 0;
      v23 = 0;
      v24 = 0;
      v25 = 1;
      v21 = 0;
      v22 = 0;
      v20 = 0;
      v18 = &off_251C13AC0;
      v26 = __p;
      llvm::raw_ostream::SetUnbuffered(&v18);
      v29[0] = (llvm::formatv_object_base *)&off_251C12620;
      v29[1] = (llvm::formatv_object_base *)"unable to decode LEB128 at offset 0x%8.8llx: %s";
      v29[2] = *a2;
      v29[3] = (llvm::formatv_object_base *)v12;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v18, (uint64_t)v29);
      v17 = (llvm::formatv_object_base *)v26;
      v15 = operator new();
      v30 = 260;
      v29[0] = v17;
      *(_QWORD *)v15 = off_251C127D0;
      llvm::Twine::str(v29, (std::string *)(v15 + 8));
      *(_QWORD *)(v15 + 32) = 92;
      *(_QWORD *)(v15 + 40) = v16;
      *(_BYTE *)(v15 + 48) = 1;
      v18 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
      if (v25 == 1 && v20)
        MEMORY[0x24BD1B380](v20, 0x1000C8077774924);
      if (SHIBYTE(v28) < 0)
        operator delete(__p[0]);
      result = 0;
LABEL_20:
      *a3 = v15;
      return result;
    }
    result += v14 << v9;
    v9 += 7;
    ++v7;
  }
  while (v13 < 0);
  *a2 = (llvm::formatv_object_base *)((char *)*a2 + v7);
  if (a3 && !*a3)
  {
    v15 = 0;
    goto LABEL_20;
  }
  return result;
}

uint64_t llvm::format_object<unsigned long,unsigned long long,unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t llvm::format_object<unsigned long long,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t llvm::format_object<unsigned long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t llvm::format_object<unsigned long long,char const*>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t *llvm::DebugCounter::instance(llvm::DebugCounter *this)
{
  unsigned __int8 v1;
  _anonymous_namespace_::DebugCounterOwner *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
    }
  }
  return &llvm::DebugCounter::instance(void)::O;
}

void *`anonymous namespace'::DebugCounterOwner::DebugCounterOwner(_anonymous_namespace_::DebugCounterOwner *this)
{
  llvm *v1;
  char v3;
  uint64_t *v4;
  int v5;
  __n128 v6;
  int v7;

  llvm::DebugCounter::instance(void)::O = 0;
  unk_257965370 = 0;
  dword_257965378 = 0;
  qword_257965390 = 0;
  qword_257965398 = 0;
  qword_257965388 = 0;
  qword_257965380 = (uint64_t)&qword_257965388;
  qword_2579653A0 = 0;
  unk_2579653A8 = 0;
  byte_2579653B0 = 0;
  v7 = 1;
  v6.n128_u64[0] = (unint64_t)"Comma separated list of debug counter skip and count";
  v6.n128_u64[1] = 52;
  v5 = 1;
  v4 = &llvm::DebugCounter::instance(void)::O;
  llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>((llvm::cl::Option *)qword_2579653B8, "debug-counter", &v7, &v6, &v5, &v4);
  qword_2579653B8[0] = (uint64_t)&off_251C12640;
  v7 = 1;
  v3 = 0;
  v4 = (uint64_t *)&v3;
  v5 = 0;
  v6.n128_u64[0] = (unint64_t)"Print out debug counter info after all counters accumulated";
  v6.n128_u64[1] = 59;
  v1 = llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>((llvm::cl::Option *)&unk_2579654A0, "print-debug-counter", &v7, (_BYTE **)&v4, &v5, &v6);
  return llvm::errs(v1);
}

void `anonymous namespace'::DebugCounterOwner::~DebugCounterOwner(_anonymous_namespace_::DebugCounterOwner *this)
{
  llvm::cl::Option *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _anonymous_namespace_::DebugCounterOwner *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  v2 = (_anonymous_namespace_::DebugCounterOwner *)((char *)this + 312);
  *((_QWORD *)this + 39) = off_251C123A8;
  v3 = (char *)this + 472;
  v4 = (char *)*((_QWORD *)this + 62);
  if (v4 == v3)
  {
    v5 = 4;
    v4 = v3;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
LABEL_6:
  llvm::cl::Option::~Option(v2);
  *((_QWORD *)this + 10) = &off_251C126A8;
  v6 = (_anonymous_namespace_::DebugCounterOwner *)*((_QWORD *)this + 38);
  if (v6 == (_anonymous_namespace_::DebugCounterOwner *)((char *)this + 280))
  {
    v7 = 4;
    v6 = (_anonymous_namespace_::DebugCounterOwner *)((char *)this + 280);
  }
  else
  {
    if (!v6)
      goto LABEL_11;
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
LABEL_11:
  v8 = (void *)*((_QWORD *)this + 31);
  if (v8)
  {
    *((_QWORD *)this + 32) = v8;
    operator delete(v8);
  }
  v13 = (void **)((char *)this + 216);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v13);
  llvm::cl::Option::~Option((_anonymous_namespace_::DebugCounterOwner *)((char *)this + 80));
  v13 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v13);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 24, *((char **)this + 4));
  v9 = *((unsigned int *)this + 4);
  v10 = *(_QWORD *)this;
  if ((_DWORD)v9)
  {
    v11 = v10 + 40;
    v12 = v9 << 6;
    do
    {
      if (*(_DWORD *)(v11 - 40) <= 0xFFFFFFFD && *(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      v11 += 64;
      v12 -= 64;
    }
    while (v12);
    v10 = *(_QWORD *)this;
  }
  MEMORY[0x24BD1B398](v10, 8);
}

llvm::raw_ostream *llvm::DebugCounter::push_back(llvm::raw_ostream *result, void **a2)
{
  size_t v2;
  int v3;
  uint64_t *v5;
  void *v6;
  llvm *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  char *v12;
  int v14;
  int v15;
  llvm::raw_ostream *v17;
  uint64_t v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  size_t v25;
  void *v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::DebugCounter *v36;
  int v37;
  void *p_p;
  uint64_t v39;
  uint64_t v40;
  int v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  void *__p;
  size_t v46;
  unint64_t v47;
  void *__src;
  size_t v49;
  void *v50;
  size_t v51;
  unint64_t v52;

  v2 = *((unsigned __int8 *)a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = (size_t)a2[1];
  if (v2)
  {
    v5 = (uint64_t *)result;
    if (v3 >= 0)
      v6 = a2;
    else
      v6 = *a2;
    __p = v6;
    v46 = v2;
    LOBYTE(v52) = 61;
    llvm::StringRef::split((uint64_t *)&__p, (char *)&v52, 1uLL, (uint64_t)&__src);
    if (v51)
    {
      v52 = 0;
      __p = v50;
      v46 = v51;
      v9 = llvm::consumeSignedInteger((llvm *)&__p, 0, &v52, v8);
      if ((v9 & 1) == 0 && !v46)
      {
        if (v49 < 5)
        {
LABEL_20:
          v17 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
          v18 = *((_QWORD *)v17 + 4);
          if ((unint64_t)(*((_QWORD *)v17 + 3) - v18) > 0x13)
          {
            *(_DWORD *)(v18 + 16) = 540701295;
            *(_OWORD *)v18 = *(_OWORD *)"DebugCounter Error: ";
            *((_QWORD *)v17 + 4) += 20;
          }
          else
          {
            v17 = llvm::raw_ostream::write(v17, "DebugCounter Error: ", 0x14uLL);
          }
          result = llvm::raw_ostream::operator<<(v17, __src, v49);
          v31 = (void *)*((_QWORD *)result + 4);
          if (*((_QWORD *)result + 3) - (_QWORD)v31 <= 0x22uLL)
          {
            v27 = " does not end with -skip or -count\n";
            v28 = 35;
            return llvm::raw_ostream::write(result, v27, v28);
          }
          qmemcpy(v31, " does not end with -skip or -count\n", 35);
          v29 = *((_QWORD *)result + 4) + 35;
          goto LABEL_45;
        }
        v10 = v52;
        v11 = __src;
        v12 = (char *)__src + v49;
        if (*(_DWORD *)((char *)__src + v49 - 5) != 1768649517 || *((char *)__src + v49 - 1) != 112)
        {
          if (v49 < 6)
            goto LABEL_20;
          v14 = *(_DWORD *)(v12 - 6);
          v15 = *((unsigned __int16 *)v12 - 1);
          if (v14 != 1970234157 || v15 != 29806)
            goto LABEL_20;
          if (v49 >= v49 - 6)
            v32 = v49 - 6;
          else
            v32 = v49;
          if (v32 <= 0x7FFFFFFFFFFFFFF7)
          {
            if (v32 >= 0x17)
            {
              v39 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v32 | 7) != 0x17)
                v39 = v32 | 7;
              v40 = v39 + 1;
              p_p = operator new(v39 + 1);
              v46 = v32;
              v47 = v40 | 0x8000000000000000;
              __p = p_p;
            }
            else
            {
              HIBYTE(v47) = v32;
              p_p = &__p;
              if (!v32)
              {
LABEL_76:
                *((_BYTE *)p_p + v32) = 0;
                v36 = (llvm::DebugCounter *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)(v5 + 3), (const void **)&__p);
                if (v5 + 4 == (uint64_t *)v36)
                  v41 = 0;
                else
                  v41 = *((_DWORD *)v36 + 14);
                if (SHIBYTE(v47) < 0)
                  operator delete(__p);
                LODWORD(v52) = v41;
                if (v41)
                {
                  llvm::DebugCounter::instance(v36);
                  byte_2579653B0 = 1;
                  result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v5, &v52);
                  *((_QWORD *)result + 3) = v10;
                  goto LABEL_83;
                }
                goto LABEL_84;
              }
            }
            memmove(p_p, v11, v32);
            goto LABEL_76;
          }
LABEL_85:
          abort();
        }
        if (v49 >= v49 - 5)
          v32 = v49 - 5;
        else
          v32 = v49;
        if (v32 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_85;
        if (v32 >= 0x17)
        {
          v34 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v32 | 7) != 0x17)
            v34 = v32 | 7;
          v35 = v34 + 1;
          v33 = operator new(v34 + 1);
          v46 = v32;
          v47 = v35 | 0x8000000000000000;
          __p = v33;
        }
        else
        {
          HIBYTE(v47) = v32;
          v33 = &__p;
          if (!v32)
          {
LABEL_58:
            *((_BYTE *)v33 + v32) = 0;
            v36 = (llvm::DebugCounter *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)(v5 + 3), (const void **)&__p);
            if (v5 + 4 == (uint64_t *)v36)
              v37 = 0;
            else
              v37 = *((_DWORD *)v36 + 14);
            if (SHIBYTE(v47) < 0)
              operator delete(__p);
            LODWORD(v52) = v37;
            if (v37)
            {
              llvm::DebugCounter::instance(v36);
              byte_2579653B0 = 1;
              result = (llvm::raw_ostream *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(v5, &v52);
              *((_QWORD *)result + 2) = v10;
LABEL_83:
              *((_BYTE *)result + 32) = 1;
              return result;
            }
LABEL_84:
            v42 = (llvm::raw_ostream *)llvm::errs(v36);
            v43 = llvm::raw_ostream::operator<<(v42, "DebugCounter Error: ", 0x14uLL);
            v44 = llvm::raw_ostream::operator<<(v43, v11, v32);
            return llvm::raw_ostream::operator<<(v44, " is not a registered counter\n", 0x1DuLL);
          }
        }
        memmove(v33, v11, v32);
        goto LABEL_58;
      }
      v21 = (llvm::raw_ostream *)llvm::errs((llvm *)v9);
      v22 = *((_QWORD *)v21 + 4);
      if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 0x13)
      {
        *(_DWORD *)(v22 + 16) = 540701295;
        *(_OWORD *)v22 = *(_OWORD *)"DebugCounter Error: ";
        *((_QWORD *)v21 + 4) += 20;
      }
      else
      {
        v21 = llvm::raw_ostream::write(v21, "DebugCounter Error: ", 0x14uLL);
      }
      result = llvm::raw_ostream::operator<<(v21, v50, v51);
      v30 = *((_QWORD *)result + 4);
      if ((unint64_t)(*((_QWORD *)result + 3) - v30) <= 0x10)
      {
        v27 = " is not a number\n";
        v28 = 17;
        return llvm::raw_ostream::write(result, v27, v28);
      }
      *(_BYTE *)(v30 + 16) = 10;
      *(_OWORD *)v30 = *(_OWORD *)" is not a number\n";
      v29 = *((_QWORD *)result + 4) + 17;
    }
    else
    {
      v19 = (llvm::raw_ostream *)llvm::errs(v7);
      v20 = *((_QWORD *)v19 + 4);
      if ((unint64_t)(*((_QWORD *)v19 + 3) - v20) > 0x13)
      {
        *(_DWORD *)(v20 + 16) = 540701295;
        *(_OWORD *)v20 = *(_OWORD *)"DebugCounter Error: ";
        *((_QWORD *)v19 + 4) += 20;
      }
      else
      {
        v19 = llvm::raw_ostream::write(v19, "DebugCounter Error: ", 0x14uLL);
      }
      v23 = *((char *)a2 + 23);
      if (v23 >= 0)
        v24 = (const char *)a2;
      else
        v24 = (const char *)*a2;
      if (v23 >= 0)
        v25 = *((unsigned __int8 *)a2 + 23);
      else
        v25 = (size_t)a2[1];
      result = llvm::raw_ostream::write(v19, v24, v25);
      v26 = (void *)*((_QWORD *)result + 4);
      if (*((_QWORD *)result + 3) - (_QWORD)v26 <= 0x19uLL)
      {
        v27 = " does not have an = in it\n";
        v28 = 26;
        return llvm::raw_ostream::write(result, v27, v28);
      }
      qmemcpy(v26, " does not have an = in it\n", 26);
      v29 = *((_QWORD *)result + 4) + 26;
    }
LABEL_45:
    *((_QWORD *)result + 4) = v29;
  }
  return result;
}

llvm::cl::Option *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::list<char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(llvm::cl::Option *a1, char *a2, _WORD *a3, _OWORD *a4, _WORD *a5, _QWORD *a6)
{
  uint64_t v12;

  v12 = llvm::cl::Option::Option((uint64_t)a1, 1, 0);
  *(_BYTE *)(v12 + 160) = 0;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_QWORD *)v12 = &off_251C126A8;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 192) = &off_251C12590;
  *(_QWORD *)(v12 + 200) = &off_251C12710;
  *(_QWORD *)(v12 + 224) = v12 + 200;
  llvm::cl::apply<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>,char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::handleOccurrence(uint64_t a1, int a2, int a3, int a4, void *a5, size_t a6)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _DWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v24;

  __p[0] = 0;
  __p[1] = 0;
  v24 = 0;
  if (*(_BYTE *)(a1 + 160))
  {
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
    *(_BYTE *)(a1 + 160) = 0;
  }
  v8 = llvm::cl::parser<std::string>::parse((int)a1 + 192, a1, a3, a4, a5, a6, (uint64_t)__p);
  if ((v8 & 1) == 0)
  {
    llvm::DebugCounter::push_back(*(llvm::raw_ostream **)(a1 + 128), __p);
    v9 = *(_QWORD *)(a1 + 184);
    *(_WORD *)(a1 + 12) = a2;
    v10 = *(char **)(a1 + 176);
    if ((unint64_t)v10 >= v9)
    {
      v12 = *(char **)(a1 + 168);
      v13 = (v10 - v12) >> 2;
      v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 62)
        goto LABEL_26;
      v15 = v9 - (_QWORD)v12;
      if (v15 >> 1 > v14)
        v14 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v14;
      if (v16)
      {
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>(a1 + 184, v16);
        v12 = *(char **)(a1 + 168);
        v10 = *(char **)(a1 + 176);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[4 * v13];
      v19 = &v17[4 * v16];
      *(_DWORD *)v18 = a2;
      v11 = v18 + 4;
      while (v10 != v12)
      {
        v20 = *((_DWORD *)v10 - 1);
        v10 -= 4;
        *((_DWORD *)v18 - 1) = v20;
        v18 -= 4;
      }
      *(_QWORD *)(a1 + 168) = v18;
      *(_QWORD *)(a1 + 176) = v11;
      *(_QWORD *)(a1 + 184) = v19;
      if (v12)
        operator delete(v12);
    }
    else
    {
      *(_DWORD *)v10 = a2;
      v11 = v10 + 4;
    }
    *(_QWORD *)(a1 + 176) = v11;
    v21 = *(_QWORD *)(a1 + 224);
    if (v21)
    {
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 48))(v21, __p);
      goto LABEL_22;
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_26:
    abort();
  }
LABEL_22:
  if (SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  return v8;
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getValueExpectedFlagDefault()
{
  return 2;
}

void `anonymous namespace'::DebugCounterList::~DebugCounterList(_anonymous_namespace_::DebugCounterList *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_251C126A8;
  v2 = (char *)this + 200;
  v3 = (char *)*((_QWORD *)this + 28);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v6);
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void **v6;

  *(_QWORD *)this = &off_251C126A8;
  v2 = (char *)this + 200;
  v3 = (char *)*((_QWORD *)this + 28);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (void *)*((_QWORD *)this + 21);
  if (v5)
  {
    *((_QWORD *)this + 22) = v5;
    operator delete(v5);
  }
  v6 = (void **)((char *)this + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v6);
  llvm::cl::Option::~Option(this);
  MEMORY[0x24BD1B3A4]();
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 192, a1);
}

void `anonymous namespace'::DebugCounterList::printOptionInfo(_anonymous_namespace_::DebugCounterList *this, size_t a2)
{
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm::raw_ostream *v6;
  const void **v7;
  uint64_t i;
  uint64_t v9;
  int v10;
  uint64_t v11;
  llvm *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  int v20;
  std::string *v21;
  size_t size;
  llvm *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  std::string *p_p;
  size_t v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;
  std::string v31;
  std::string __p;
  _BYTE v33[32];
  std::string v34;
  int v35;
  uint64_t v36;

  v4 = (llvm::raw_ostream *)llvm::outs(this);
  v5 = *((_QWORD *)v4 + 4);
  if ((unint64_t)(*((_QWORD *)v4 + 3) - v5) > 2)
  {
    *(_BYTE *)(v5 + 2) = 45;
    *(_WORD *)v5 = 8224;
    *((_QWORD *)v4 + 4) += 3;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v4, "  -", 3uLL);
  }
  llvm::raw_ostream::operator<<(v4, *((const void **)this + 2), *((_QWORD *)this + 3));
  v6 = llvm::cl::Option::printHelpStr(*((_QWORD *)this + 4), *((_QWORD *)this + 5), a2, *((_QWORD *)this + 3) + 6);
  llvm::DebugCounter::instance(v6);
  v7 = (const void **)qword_257965398;
  for (i = qword_2579653A0; v7 != (const void **)i; v7 += 3)
  {
    v9 = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>((uint64_t)&qword_257965380, v7);
    if ((uint64_t *)v9 == &qword_257965388)
      v10 = 0;
    else
      v10 = *(_DWORD *)(v9 + 56);
    v35 = v10;
    v11 = qword_257965398;
    v36 = 0;
    v12 = (llvm *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>(&llvm::DebugCounter::instance(void)::O, &v35, &v36);
    if ((_DWORD)v12)
    {
      v13 = *(_OWORD *)(v36 + 17);
      *(_OWORD *)v33 = *(_OWORD *)(v36 + 8);
      *(_OWORD *)&v33[9] = v13;
      if (*(char *)(v36 + 63) < 0)
      {
        std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)(v36 + 40), *(_QWORD *)(v36 + 48));
      }
      else
      {
        v14 = *(_OWORD *)(v36 + 40);
        v34.__r_.__value_.__r.__words[2] = *(_QWORD *)(v36 + 56);
        *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v14;
      }
    }
    else
    {
      *(_OWORD *)v33 = 0u;
      *(_OWORD *)&v33[16] = 0xFFFFFFFFFFFFFFFFLL;
      memset(&v34, 0, sizeof(v34));
    }
    v15 = v11 + 24 * (v10 - 1);
    if (*(char *)(v15 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
    }
    else
    {
      v16 = *(_OWORD *)v15;
      v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v16;
    }
    __p = v34;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      v17 = v31.__r_.__value_.__r.__words[1];
    v18 = (llvm::raw_ostream *)llvm::outs(v12);
    v19 = *((_QWORD *)v18 + 4);
    if ((unint64_t)(*((_QWORD *)v18 + 3) - v19) > 4)
    {
      *(_BYTE *)(v19 + 4) = 61;
      *(_DWORD *)v19 = 538976288;
      *((_QWORD *)v18 + 4) += 5;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, "    =", 5uLL);
    }
    v20 = a2 - v17;
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = &v31;
    else
      v21 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      size = v31.__r_.__value_.__l.__size_;
    v23 = llvm::raw_ostream::write(v18, (const char *)v21, size);
    v24 = (llvm::raw_ostream *)llvm::outs(v23);
    v25 = llvm::raw_ostream::indent(v24, (v20 - 8));
    v26 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v26) > 4)
    {
      *(_BYTE *)(v26 + 4) = 32;
      *(_DWORD *)v26 = 538979616;
      *((_QWORD *)v25 + 4) += 5;
    }
    else
    {
      v25 = llvm::raw_ostream::write(v25, " -   ", 5uLL);
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v28 = __p.__r_.__value_.__l.__size_;
    v29 = llvm::raw_ostream::write(v25, (const char *)p_p, v28);
    v30 = (_BYTE *)*((_QWORD *)v29 + 4);
    if ((unint64_t)v30 >= *((_QWORD *)v29 + 3))
    {
      llvm::raw_ostream::write(v29, 10);
    }
    else
    {
      *((_QWORD *)v29 + 4) = v30 + 1;
      *v30 = 10;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
  }
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::setDefault(llvm::raw_ostream *result)
{
  uint64_t v1;
  uint64_t v2;
  llvm::raw_ostream *v3;

  *((_QWORD *)result + 22) = *((_QWORD *)result + 21);
  v1 = *((_QWORD *)result + 17);
  v2 = *((_QWORD *)result + 18);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      result = llvm::DebugCounter::push_back(*((llvm::raw_ostream **)v3 + 16), (void **)(v1 + 8));
      v1 += 40;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t llvm::cl::apply<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>,char [14],llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(uint64_t a1, char *__s, _WORD *a3, _OWORD *a4, _WORD *a5, _QWORD *a6)
{
  size_t v12;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v12);
  return llvm::cl::apply<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(a1, a3, a4, a5, a6);
}

void llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v6;

  *(_QWORD *)a1 = &off_251C126A8;
  v2 = (_QWORD *)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    *(_QWORD *)(a1 + 176) = v5;
    operator delete(v5);
  }
  v6 = (void **)(a1 + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v6);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
}

uint64_t llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::~list(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void **v7;

  *(_QWORD *)a1 = &off_251C126A8;
  v2 = (_QWORD *)(a1 + 200);
  v3 = *(_QWORD **)(a1 + 224);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 168);
  if (v5)
  {
    *(_QWORD *)(a1 + 176) = v5;
    operator delete(v5);
  }
  v7 = (void **)(a1 + 136);
  std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](&v7);
  llvm::cl::Option::~Option((llvm::cl::Option *)a1);
  return MEMORY[0x24BD1B3A4]();
}

llvm::raw_ostream *llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 192), a1, a2);
}

void std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C12710;
  return result;
}

void std::__function::__func<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1},std::allocator<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>::{lambda(std::string const&)#1}>,void ()(std::string const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C12710;
}

uint64_t llvm::cl::apply<llvm::cl::list<std::string,llvm::DebugCounter,llvm::cl::parser<std::string>>,llvm::cl::OptionHidden,llvm::cl::desc,llvm::cl::MiscFlags,llvm::cl::LocationClass<llvm::DebugCounter>>(uint64_t result, _WORD *a2, _OWORD *a3, _WORD *a4, _QWORD *a5)
{
  uint64_t v5;
  __int16 v6;
  llvm::raw_ostream *v7;
  const char *v8;
  __int16 v9;

  v5 = result;
  v6 = *(_WORD *)(result + 10) & 0xFF9F | (32 * (*a2 & 3));
  *(_WORD *)(result + 10) = v6;
  *(_OWORD *)(result + 32) = *a3;
  *(_WORD *)(result + 10) = ((*a4 & 0x1F) << 9) | v6;
  if (*(_QWORD *)(result + 128))
  {
    v8 = "cl::location(x) specified more than once!";
    v9 = 259;
    v7 = (llvm::raw_ostream *)llvm::errs((llvm *)result);
    return llvm::cl::Option::error(v5, (llvm::Twine *)&v8, 0, 0, v7);
  }
  else
  {
    *(_QWORD *)(result + 128) = *a5;
  }
  return result;
}

void std::vector<llvm::cl::OptionValue<std::string>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::cl::OptionValue<std::string>>::__base_destruct_at_end[abi:nn180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void std::vector<llvm::cl::OptionValue<std::string>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_QWORD *)(v5 - 40) = &off_251C12570;
      v5 -= 40;
      if (*(char *)(v5 + 31) < 0)
        operator delete(*(void **)(v4 - 32));
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + (v6 << 6));
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + (v6 << 6));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

llvm::cl::Option *llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>::opt<char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>(llvm::cl::Option *a1, char *a2, _WORD *a3, _BYTE **a4, _WORD *a5, __n128 *a6)
{
  uint64_t v12;

  v12 = llvm::cl::Option::Option((uint64_t)a1, 0, 0);
  *(_BYTE *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_251C12500;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = off_251C123A8;
  *(_QWORD *)(v12 + 152) = &off_251C12520;
  *(_QWORD *)(v12 + 160) = &off_251C12410;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 llvm::cl::apply<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>,char [20],llvm::cl::OptionHidden,llvm::cl::initializer<BOOL>,llvm::cl::NumOccurrencesFlag,llvm::cl::desc>(uint64_t a1, char *__s, _WORD *a3, _BYTE **a4, _WORD *a5, __n128 *a6)
{
  size_t v12;
  __int16 v13;
  _BYTE *v14;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (uint64_t *)__s, v12);
  v13 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v13;
  v14 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v14;
  *(_WORD *)(a1 + 10) = v13 & 0xFFF8 | *a5 & 7;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t *v8;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = a1 + 8;
  do
  {
    v7 = std::less<std::string>::operator()[abi:nn180100](v5, (const void **)(v3 + 32), a2);
    v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      v8 = (uint64_t *)v3;
      v6 = v3;
    }
    v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:nn180100](v5, a2, (const void **)(v6 + 32)))
    return v2;
  return v6;
}

BOOL std::less<std::string>::operator()[abi:nn180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  int v10;

  v3 = *((char *)a3 + 23);
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a2 + 23);
  else
    v5 = (size_t)a2[1];
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = *a2;
  if (v3 >= 0)
    v7 = *((unsigned __int8 *)a3 + 23);
  else
    v7 = (size_t)a3[1];
  if (v3 >= 0)
    v8 = a3;
  else
    v8 = *a3;
  if (v7 >= v5)
    v9 = v5;
  else
    v9 = v7;
  v10 = memcmp(v6, v8, v9);
  if (v10)
    return v10 < 0;
  else
    return v5 < v7;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *inserted = *a2;
    *(_OWORD *)(inserted + 6) = 0u;
    *(_OWORD *)(inserted + 2) = 0u;
    *((_QWORD *)inserted + 3) = -1;
    *((_QWORD *)inserted + 6) = 0;
    *((_QWORD *)inserted + 7) = 0;
    *((_QWORD *)inserted + 5) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::moveFromOldBuckets(a1, v4, v4 + (v3 << 6));
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    do
    {
      *result = -1;
      result += 16;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  __int128 v10;
  __int128 v11;
  _DWORD *v12;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = v6 << 6;
    do
    {
      *v7 = -1;
      v7 += 16;
      v8 -= 64;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>,unsigned int,llvm::DebugCounter::CounterInfo,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::DebugCounter::CounterInfo>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)a2, &v12);
      v9 = v12;
      *v12 = *(_DWORD *)a2;
      v10 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)((char *)v9 + 17) = *(_OWORD *)(a2 + 17);
      *(_OWORD *)(v9 + 2) = v10;
      v11 = *(_OWORD *)(a2 + 40);
      *((_QWORD *)v9 + 7) = *(_QWORD *)(a2 + 56);
      *(_OWORD *)(v9 + 10) = v11;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      ++*(_DWORD *)(a1 + 8);
      if (*(char *)(a2 + 63) < 0)
        operator delete(*(void **)(a2 + 40));
    }
    a2 += 64;
  }
}

void llvm::ELFAttributeParser::parseStringAttribute(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t ULEB128;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  const std::error_category *v16;
  int v17;
  const char *v18;
  char v19;
  llvm::formatv_object_base *v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  char v24;
  char v25;
  llvm::formatv_object_base *v26[4];
  __int16 v27;
  unint64_t v28;
  std::string v29;
  llvm::formatv_object_base *v30;
  uint64_t v31[2];

  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)(a1 + 128), (llvm::formatv_object_base **)(a1 + 152), (uint64_t *)(a1 + 160));
  v13 = ULEB128;
  v28 = ULEB128;
  if (ULEB128 >= a5)
  {
    llvm::ELFAttributeParser::printAttribute((_QWORD *)a1, a3, ULEB128, (uint64_t)&str_1, 0);
    v16 = std::generic_category();
    v17 = *a2;
    v18 = "unknown ";
    if (*a2)
    {
      v21[0] = "unknown ";
      v21[2] = a2;
      v22 = 771;
      v19 = 2;
    }
    else
    {
      v21[0] = "unknown ";
      v22 = 259;
      v19 = 3;
    }
    if (v17)
      v18 = (const char *)v21;
    v23[0] = v18;
    v23[2] = " value: ";
    v24 = v19;
    v25 = 3;
    v26[0] = (llvm::formatv_object_base *)v23;
    v26[2] = (llvm::formatv_object_base *)&v28;
    v27 = 3074;
    llvm::Twine::str(v26, &v29);
    if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = (llvm::formatv_object_base *)&v29;
    else
      v20 = (llvm::formatv_object_base *)v29.__r_.__value_.__r.__words[0];
    v31[0] = 22;
    v31[1] = (uint64_t)v16;
    v30 = v20;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v30, v31, a6);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    v14 = *(_QWORD *)(a4 + 8 * ULEB128);
    if (v14)
      v15 = strlen(*(const char **)(a4 + 8 * ULEB128));
    else
      v15 = 0;
    llvm::ELFAttributeParser::printAttribute((_QWORD *)a1, a3, v13, v14, v15);
    *a6 = 0;
  }
}

_QWORD *llvm::ELFAttributeParser::printAttribute(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v20 = a2 | (unint64_t)(a3 << 32);
  result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>((uint64_t)(a1 + 3), (unsigned int *)&v20, &v20);
  v11 = a1[13];
  if (v11)
  {
    v12 = a1[15];
    if (v12)
    {
      v13 = 24 * v12;
      v14 = &str_2;
      v15 = a1[14];
      while (*(_DWORD *)v15 != (_DWORD)a2)
      {
        v15 += 24;
        v13 -= 24;
        if (!v13)
        {
          v16 = 0;
          goto LABEL_13;
        }
      }
    }
    else
    {
      v15 = a1[14];
    }
    if (v15 == a1[14] + 24 * v12)
    {
      v16 = 0;
      v14 = &str_2;
    }
    else
    {
      v17 = *(_QWORD *)(v15 + 8);
      v18 = *(_QWORD *)(v15 + 16);
      v19 = 4;
      if (v18 < 4)
        v19 = v18;
      v14 = (void *)(v17 + v19);
      v16 = v18 - v19;
    }
LABEL_13:
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v11 + 224))(a1[13], "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 24))(a1[13], "Tag", 3, a2);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 24))(a1[13], "Value", 5, a3);
    if (v16)
      (*(void (**)(_QWORD, const char *, uint64_t, void *, unint64_t))(*(_QWORD *)a1[13] + 208))(a1[13], "TagName", 7, v14, v16);
    if (a5)
      (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[13] + 208))(a1[13], "Description", 11, a4, a5);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 232))(v11);
  }
  return result;
}

void llvm::ELFAttributeParser::integerAttribute(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t ULEB128;
  uint64_t *v15;
  unint64_t v16;
  uint8x8_t v17;
  uint64_t **v18;
  uint64_t *i;
  unint64_t v20;
  _QWORD *v21;
  float v22;
  float v23;
  _BOOL8 v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;

  v7 = *((_QWORD *)this + 15);
  if (v7)
  {
    v8 = 24 * v7;
    v9 = *((_QWORD *)this + 14);
    while (*(_DWORD *)v9 != (_DWORD)a2)
    {
      v9 += 24;
      v8 -= 24;
      if (!v8)
      {
        v33 = &str_2;
        v10 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 14);
  }
  if (v9 == *((_QWORD *)this + 14) + 24 * v7)
  {
    v10 = 0;
    v33 = &str_2;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(v9 + 16);
    v13 = 4;
    if (v12 < 4)
      v13 = v12;
    v33 = (void *)(v11 + v13);
    v10 = v12 - v13;
  }
LABEL_12:
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)this + 16, (llvm::formatv_object_base **)this + 19, (uint64_t *)this + 20);
  v15 = (uint64_t *)((char *)this + 24);
  v16 = *((_QWORD *)this + 4);
  if (v16)
  {
    v17 = (uint8x8_t)vcnt_s8((int8x8_t)v16);
    v17.i16[0] = vaddlv_u8(v17);
    if (v17.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v16 <= a2)
        v3 = a2 % v16;
    }
    else
    {
      v3 = ((_DWORD)v16 - 1) & a2;
    }
    v18 = *(uint64_t ***)(*v15 + 8 * v3);
    if (v18)
    {
      for (i = *v18; i; i = (uint64_t *)*i)
      {
        v20 = i[1];
        if (v20 == a2)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a2)
            goto LABEL_51;
        }
        else
        {
          if (v17.u32[0] > 1uLL)
          {
            if (v20 >= v16)
              v20 %= v16;
          }
          else
          {
            v20 &= v16 - 1;
          }
          if (v20 != v3)
            break;
        }
      }
    }
  }
  v21 = operator new(0x18uLL);
  v21[1] = a2;
  *((_DWORD *)v21 + 4) = a2;
  *((_DWORD *)v21 + 5) = ULEB128;
  v22 = (float)(unint64_t)(*((_QWORD *)this + 6) + 1);
  v23 = *((float *)this + 14);
  if (!v16 || (float)(v23 * (float)v16) < v22)
  {
    v24 = 1;
    if (v16 >= 3)
      v24 = (v16 & (v16 - 1)) != 0;
    v25 = v24 | (2 * v16);
    v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26)
      v27 = v26;
    else
      v27 = v25;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>((uint64_t)this + 24, v27);
    v16 = *((_QWORD *)this + 4);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v16 <= a2)
        v3 = a2 % v16;
      else
        v3 = a2;
    }
    else
    {
      v3 = ((_DWORD)v16 - 1) & a2;
    }
  }
  v28 = *v15;
  v29 = *(_QWORD **)(*v15 + 8 * v3);
  if (v29)
  {
    *v21 = *v29;
LABEL_49:
    *v29 = v21;
    goto LABEL_50;
  }
  v30 = *((_QWORD *)this + 5);
  *v21 = v30;
  *((_QWORD *)this + 5) = v21;
  *(_QWORD *)(v28 + 8 * v3) = (char *)this + 40;
  if (v30)
  {
    v31 = *(_QWORD *)(v30 + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v31 >= v16)
        v31 %= v16;
    }
    else
    {
      v31 &= v16 - 1;
    }
    v29 = (_QWORD *)(*v15 + 8 * v31);
    goto LABEL_49;
  }
LABEL_50:
  ++*((_QWORD *)this + 6);
LABEL_51:
  v32 = *((_QWORD *)this + 13);
  if (v32)
  {
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v32 + 224))(*((_QWORD *)this + 13), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), "Tag", 3, a2);
    if (v10)
      (*(void (**)(_QWORD, const char *, uint64_t, void *, unint64_t))(**((_QWORD **)this + 13) + 208))(*((_QWORD *)this + 13), "TagName", 7, v33, v10);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 16))(*((_QWORD *)this + 13), "Value", 5, ULEB128);
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 232))(v32);
  }
  *a3 = 0;
}

char *llvm::ELFAttributeParser::stringAttribute@<X0>(llvm::ELFAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *CStrRef;
  uint64_t v15;
  uint64_t v16;
  char *result;
  uint64_t v18;
  unsigned int v19;
  __int128 v20;

  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = 24 * v6;
    v8 = &str_2;
    v9 = *((_QWORD *)this + 14);
    while (*(_DWORD *)v9 != (_DWORD)a2)
    {
      v9 += 24;
      v7 -= 24;
      if (!v7)
      {
        v10 = 0;
        goto LABEL_12;
      }
    }
  }
  else
  {
    v9 = *((_QWORD *)this + 14);
  }
  if (v9 == *((_QWORD *)this + 14) + 24 * v6)
  {
    v10 = 0;
    v8 = &str_2;
  }
  else
  {
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD *)(v9 + 16);
    v13 = 4;
    if (v12 < 4)
      v13 = v12;
    v8 = (void *)(v11 + v13);
    v10 = v12 - v13;
  }
LABEL_12:
  CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)this + 16, (llvm::formatv_object_base **)this + 19, (uint64_t *)this + 20);
  v16 = v15;
  *(_QWORD *)&v20 = CStrRef;
  *((_QWORD *)&v20 + 1) = v15;
  v19 = a2;
  result = std::__hash_table<std::__hash_value_type<unsigned int,llvm::StringRef>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,llvm::StringRef>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,llvm::StringRef>>>::__emplace_unique_key_args<unsigned int,unsigned int &,llvm::StringRef&>((uint64_t)this + 64, &v19, &v19, &v20);
  v18 = *((_QWORD *)this + 13);
  if (v18)
  {
    (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v18 + 224))(*((_QWORD *)this + 13), "Attribute", 9);
    (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**((_QWORD **)this + 13) + 24))(*((_QWORD *)this + 13), "Tag", 3, a2);
    if (v10)
      (*(void (**)(_QWORD, const char *, uint64_t, void *, unint64_t))(**((_QWORD **)this + 13) + 208))(*((_QWORD *)this + 13), "TagName", 7, v8, v10);
    (*(void (**)(_QWORD, const char *, uint64_t, char *, uint64_t))(**((_QWORD **)this + 13) + 208))(*((_QWORD *)this + 13), "Value", 5, CStrRef, v16);
    result = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 232))(v18);
  }
  *a3 = 0;
  return result;
}

void llvm::ELFAttributeParser::parseAttributeList(llvm::ELFAttributeParser *this, _QWORD *a2, unsigned int a3)
{
  llvm::formatv_object_base *v4;
  llvm::formatv_object_base **v5;
  unint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t ULEB128;
  const std::error_category *v11;
  llvm::formatv_object_base *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  llvm::formatv_object_base *v17[4];
  __int16 v18;
  char v19;
  unint64_t v20;
  llvm::formatv_object_base *v21;
  std::string v22;
  llvm::formatv_object_base *v23;
  uint64_t v24[2];

  v5 = (llvm::formatv_object_base **)(a2 + 19);
  v4 = (llvm::formatv_object_base *)a2[19];
  v6 = (unint64_t)v4 + a3;
  v21 = v4;
  if ((unint64_t)v4 >= v6)
  {
LABEL_11:
    *(_QWORD *)this = 0;
  }
  else
  {
    v8 = a2 + 16;
    v9 = a2 + 20;
    while (1)
    {
      ULEB128 = llvm::DataExtractor::getULEB128(v8, v5, v9);
      v20 = ULEB128;
      v19 = 0;
      (*(void (**)(_QWORD *, unint64_t, char *))*a2)(a2, ULEB128, &v19);
      if (*(_QWORD *)this)
        break;
      if (!v19)
      {
        if (ULEB128 <= 0x1F)
        {
          v11 = std::generic_category();
          v13[0] = "invalid tag 0x";
          v13[2] = &v20;
          v14 = 3587;
          v15[0] = v13;
          v15[2] = " at offset 0x";
          v16 = 770;
          v17[0] = (llvm::formatv_object_base *)v15;
          v17[2] = (llvm::formatv_object_base *)&v21;
          v18 = 3586;
          llvm::Twine::str(v17, &v22);
          if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v12 = (llvm::formatv_object_base *)&v22;
          else
            v12 = (llvm::formatv_object_base *)v22.__r_.__value_.__r.__words[0];
          v24[0] = 22;
          v24[1] = (uint64_t)v11;
          v23 = v12;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v23, v24, (uint64_t *)this);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v22.__r_.__value_.__l.__data_);
          return;
        }
        if ((ULEB128 & 1) != 0)
          llvm::ELFAttributeParser::stringAttribute((llvm::ELFAttributeParser *)a2, ULEB128, this);
        else
          llvm::ELFAttributeParser::integerAttribute((llvm::ELFAttributeParser *)a2, ULEB128, this);
        if (*(_QWORD *)this)
          return;
      }
      v21 = *v5;
      if ((unint64_t)v21 >= v6)
        goto LABEL_11;
    }
  }
}

std::string::__raw *llvm::ELFAttributeParser::parse@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  std::string **v9;
  unsigned int v10;
  std::string *v11;
  unsigned int v12;
  const std::error_category *v13;
  unint64_t v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  _QWORD *v22;
  uint64_t v23;
  char *CStrRef;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  std::string::__raw *v29;
  _QWORD **p_p_p;
  size_t v31;
  BOOL v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  uint64_t ULEB128;
  BOOL v43;
  uint64_t v44;
  BOOL v45;
  const std::error_category *v46;
  std::string *v47;
  const std::error_category *v48;
  std::string *v49;
  void *v50;
  const std::error_category *v51;
  std::string *v52;
  _DWORD *v53;
  int v54;
  BOOL v55;
  int v56;
  llvm::raw_ostream *v57;
  _WORD *v58;
  std::string *v59;
  llvm::formatv_object_base **v60;
  llvm::formatv_object_base *v61;
  void *v62;
  std::string *v63;
  std::string::__raw *result;
  const std::error_category *v65;
  unint64_t v66;
  char *v67;
  char v68;
  std::string *v69;
  std::string *v70;
  unint64_t v71;
  int v72;
  unint64_t v73;
  __int128 v75;
  uint64_t v76;
  unint64_t v77;
  void *v78[2];
  unint64_t v79;
  __int16 v80;
  std::string v81;
  __int16 v82;
  std::string __p;
  uint64_t v84;
  const std::error_category *v85;
  std::string v86;
  uint64_t v87;
  std::string *p_p;
  std::string::size_type size;
  __int128 v90;
  __int16 v91;
  int v92;
  __int16 v93;
  uint64_t v94;

  v5 = a3;
  v94 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 136) = a3;
  v7 = a1 + 128;
  *(_WORD *)(a1 + 144) = a4 == 1;
  v8 = (unint64_t *)(a1 + 152);
  v9 = (std::string **)(a1 + 160);
  v10 = llvm::DataExtractor::getU<unsigned char>((_QWORD *)(a1 + 128), (unint64_t *)(a1 + 152), (uint64_t *)(a1 + 160));
  if (v10 != 65)
  {
    v12 = v10;
    v13 = std::generic_category();
    if (v12)
    {
      v14 = v12;
      v15 = (char *)&v90 + 1;
      do
      {
        *--v15 = llvm::hexdigit(unsigned int,BOOL)::LUT[v14 & 0xF];
        v16 = v14 > 0xF;
        v14 >>= 4;
      }
      while (v16);
    }
    else
    {
      v15 = (char *)&v90;
      LOBYTE(v90) = 48;
    }
    std::string::__init_with_size[abi:nn180100]<char *,char *>(&v86, v15, (char *)&v90 + 1, (char *)&v90 + 1 - v15);
    v59 = std::string::insert(&v86, 0, "unrecognized format-version: 0x");
    v60 = (llvm::formatv_object_base **)v59->__r_.__value_.__r.__words[2];
    *(_OWORD *)v78 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
    v79 = (unint64_t)v60;
    v59->__r_.__value_.__l.__size_ = 0;
    v59->__r_.__value_.__r.__words[2] = 0;
    v59->__r_.__value_.__r.__words[0] = 0;
    v91 = 260;
    p_p = (std::string *)v78;
    llvm::Twine::str((llvm::formatv_object_base **)&p_p, &v81);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = (llvm::formatv_object_base *)&v81;
    else
      v61 = (llvm::formatv_object_base *)v81.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 22;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v13;
    v84 = (uint64_t)v61;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v84, (uint64_t *)&__p, a5);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79) < 0)
      operator delete(v78[0]);
    if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_105;
    v62 = (void *)v86.__r_.__value_.__r.__words[0];
LABEL_104:
    operator delete(v62);
    goto LABEL_105;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 152))
  {
LABEL_3:
    v11 = *v9;
LABEL_4:
    *a5 = (uint64_t)v11;
    *v9 = 0;
    goto LABEL_105;
  }
  v72 = 0;
  v71 = v5;
  while (1)
  {
    v17 = llvm::DataExtractor::getU<unsigned int>(v7, (unint64_t *)(v7 + 24), (uint64_t *)(v7 + 32));
    v11 = *v9;
    if (*v9)
      goto LABEL_4;
    v18 = v17;
    v19 = *(_QWORD *)(a1 + 104);
    if (v19)
    {
      v20 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 264))(v19);
      v21 = v20;
      v22 = (_QWORD *)*((_QWORD *)v20 + 4);
      if (*((_QWORD *)v20 + 3) - (_QWORD)v22 > 7uLL)
      {
        *v22 = 0x206E6F6974636553;
        *((_QWORD *)v20 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v20, "Section ", 8uLL);
      }
      write_unsigned<unsigned long>(v21, ++v72, 0, 0, 0);
      v23 = *((_QWORD *)v21 + 4);
      if ((unint64_t)(*((_QWORD *)v21 + 3) - v23) > 2)
      {
        *(_BYTE *)(v23 + 2) = 10;
        *(_WORD *)v23 = 31520;
        *((_QWORD *)v21 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v21, " {\n", 3uLL);
      }
      ++*(_DWORD *)(*(_QWORD *)(a1 + 104) + 16);
    }
    if (v18 <= 3 || (v73 = *v8 + v18 - 4, v73 > v5))
    {
      v65 = std::generic_category();
      v78[0] = "invalid section length ";
      v79 = v18;
      v80 = 2051;
      v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
      v81.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
      v82 = 770;
      v66 = *v8 - 4;
      if (*v8 == 4)
      {
        v67 = (char *)&v90;
        LOBYTE(v90) = 48;
      }
      else
      {
        v67 = (char *)&v90 + 1;
        do
        {
          *--v67 = llvm::hexdigit(unsigned int,BOOL)::LUT[v66 & 0xF];
          v16 = v66 > 0xF;
          v66 >>= 4;
        }
        while (v16);
      }
      std::string::__init_with_size[abi:nn180100]<char *,char *>(&__p, v67, (char *)&v90 + 1, (char *)&v90 + 1 - v67);
      v68 = v82;
      if (v82 == 1)
      {
        p_p = &__p;
        v90 = v75;
        v91 = 260;
        v92 = v76;
        v93 = WORD2(v76);
      }
      else if ((_BYTE)v82)
      {
        if (HIBYTE(v82) != 1)
          v68 = 2;
        v69 = &v81;
        if (HIBYTE(v82) == 1)
          v69 = (std::string *)v81.__r_.__value_.__r.__words[0];
        p_p = v69;
        size = v81.__r_.__value_.__l.__size_;
        *(_QWORD *)&v90 = &__p;
        LOBYTE(v91) = v68;
        HIBYTE(v91) = 4;
      }
      else
      {
        v91 = 256;
      }
      llvm::Twine::str((llvm::formatv_object_base **)&p_p, &v86);
      if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v70 = &v86;
      else
        v70 = (std::string *)v86.__r_.__value_.__r.__words[0];
      v84 = 22;
      v85 = v65;
      v77 = (unint64_t)v70;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v77, &v84, a5);
      if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v86.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        break;
      v62 = (void *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_104;
    }
    CStrRef = llvm::DataExtractor::getCStrRef((uint64_t *)v7, (llvm::formatv_object_base **)(v7 + 24), (uint64_t *)(v7 + 32));
    v26 = v25;
    v27 = *(_QWORD *)(a1 + 104);
    if (v27)
    {
      (*(void (**)(uint64_t, const char *, uint64_t, uint64_t))(*(_QWORD *)v27 + 24))(v27, "SectionLength", 13, v18);
      (*(void (**)(_QWORD, const char *, uint64_t, char *, unint64_t))(**(_QWORD **)(a1 + 104) + 208))(*(_QWORD *)(a1 + 104), "Vendor", 6, CStrRef, v26);
    }
    std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(&p_p, CStrRef, (uint64_t (*)(_QWORD))llvm::toLower, &CStrRef[v26], (uint64_t)llvm::toLower, v26);
    v28 = SBYTE7(v90);
    v29 = (std::string::__raw *)p_p;
    if ((SBYTE7(v90) & 0x80u) == 0)
      p_p_p = (_QWORD **)&p_p;
    else
      p_p_p = (_QWORD **)p_p;
    if ((SBYTE7(v90) & 0x80u) == 0)
      v31 = BYTE7(v90);
    else
      v31 = size;
    if (v31 == *(_QWORD *)(a1 + 16))
    {
      if (v31)
      {
        v32 = memcmp(p_p_p, *(const void **)(a1 + 8), v31) != 0;
        if ((v28 & 0x80000000) == 0)
          goto LABEL_71;
        goto LABEL_32;
      }
      v32 = 0;
      if (SBYTE7(v90) < 0)
        goto LABEL_32;
LABEL_71:
      if (v32)
        goto LABEL_72;
      while (1)
      {
LABEL_33:
        if (*v8 >= v73)
        {
          *a5 = 0;
          goto LABEL_84;
        }
        v33 = llvm::DataExtractor::getU<unsigned char>((_QWORD *)v7, (unint64_t *)(v7 + 24), (uint64_t *)(v7 + 32));
        v34 = llvm::DataExtractor::getU<unsigned int>(v7, (unint64_t *)(v7 + 24), (uint64_t *)(v7 + 32));
        v11 = *v9;
        if (*v9)
          goto LABEL_4;
        v35 = v34;
        v36 = *(_QWORD *)(a1 + 104);
        if (v36)
        {
          v37 = 0;
          while (LODWORD((&tagNames)[v37 + 4]) != v33)
          {
            v37 += 5;
            if (v37 == 15)
            {
              (*(void (**)(uint64_t, const char *, uint64_t, _QWORD))(*(_QWORD *)v36 + 312))(v36, "Tag", 3, v33);
              goto LABEL_41;
            }
          }
          (*(void (**)(uint64_t, const char *, uint64_t, char *, char *, _QWORD))(*(_QWORD *)v36 + 320))(v36, "Tag", 3, (&tagNames)[v37], (&tagNames)[v37 + 1], v33);
LABEL_41:
          (*(void (**)(_QWORD, const char *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 24))(*(_QWORD *)(a1 + 104), "Size", 4, v35);
        }
        if (v35 <= 4)
        {
          v51 = std::generic_category();
          v78[0] = "invalid attribute size ";
          v79 = v35;
          v80 = 2051;
          v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
          v81.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
          v82 = 770;
          *(_QWORD *)&v75 = *v8 - 5;
          p_p = &v81;
          *(_QWORD *)&v90 = &v75;
          v91 = 3586;
          llvm::Twine::str((llvm::formatv_object_base **)&p_p, &v86);
          v52 = &v86;
          if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v52 = (std::string *)v86.__r_.__value_.__r.__words[0];
          __p.__r_.__value_.__r.__words[0] = 22;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
          v84 = (uint64_t)v52;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v84, (uint64_t *)&__p, a5);
          if ((SHIBYTE(v86.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_83;
          v50 = (void *)v86.__r_.__value_.__r.__words[0];
LABEL_76:
          operator delete(v50);
          goto LABEL_83;
        }
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
        *(_OWORD *)&v86.__r_.__value_.__r.__words[1] = xmmword_24AA2ACB0;
        if (v33 == 1)
        {
          v38 = 0;
          v39 = 0;
          v40 = 14;
          v41 = "FileAttributes";
        }
        else
        {
          if (v33 == 2)
          {
            v38 = 8;
            v39 = "Sections";
            v40 = 17;
            v41 = "SectionAttributes";
          }
          else
          {
            if (v33 != 3)
            {
              v46 = std::generic_category();
              v77 = v33;
              v78[0] = "unrecognized tag 0x";
              v79 = (unint64_t)&v77;
              v80 = 3587;
              v81.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
              v81.__r_.__value_.__r.__words[2] = (std::string::size_type)" at offset 0x";
              v82 = 770;
              v76 = *v8 - 5;
              p_p = &v81;
              *(_QWORD *)&v90 = &v76;
              v91 = 3586;
              llvm::Twine::str((llvm::formatv_object_base **)&p_p, &__p);
              v47 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v84 = 22;
              v85 = v46;
              *(_QWORD *)&v75 = v47;
              llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v75, &v84, a5);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__p.__r_.__value_.__l.__data_);
              v45 = 1;
              goto LABEL_66;
            }
            v38 = 7;
            v39 = "Symbols";
            v40 = 16;
            v41 = "SymbolAttributes";
          }
          ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (llvm::formatv_object_base **)(v7 + 24), (uint64_t *)(v7 + 32));
          if (!*v9 && ULEB128)
          {
            do
            {
              llvm::SmallVectorTemplateBase<char,true>::push_back(&v86, ULEB128);
              ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)v7, (llvm::formatv_object_base **)(v7 + 24), (uint64_t *)(v7 + 32));
              if (*v9)
                v43 = 1;
              else
                v43 = ULEB128 == 0;
            }
            while (!v43);
          }
        }
        v44 = *(_QWORD *)(a1 + 104);
        if (v44)
        {
          (*(void (**)(_QWORD, const char *, uint64_t))(*(_QWORD *)v44 + 224))(*(_QWORD *)(a1 + 104), v41, v40);
          if (v86.__r_.__value_.__l.__size_)
            (*(void (**)(_QWORD, const char *, uint64_t, std::string::size_type))(**(_QWORD **)(a1 + 104)
                                                                                          + 152))(*(_QWORD *)(a1 + 104), v39, v38, v86.__r_.__value_.__r.__words[0]);
          llvm::ELFAttributeParser::parseAttributeList((llvm::ELFAttributeParser *)a5, (_QWORD *)a1, v35 - 5);
          v45 = *a5 != 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v44 + 232))(v44);
        }
        else
        {
          llvm::ELFAttributeParser::parseAttributeList((llvm::ELFAttributeParser *)a5, (_QWORD *)a1, v35 - 5);
          v45 = *a5 != 0;
        }
LABEL_66:
        if ((uint64_t *)v86.__r_.__value_.__l.__data_ != &v87)
          free(v86.__r_.__value_.__l.__data_);
        if (v45)
          goto LABEL_83;
      }
    }
    v32 = 1;
    if ((SBYTE7(v90) & 0x80000000) == 0)
      goto LABEL_71;
LABEL_32:
    operator delete(v29);
    if (!v32)
      goto LABEL_33;
LABEL_72:
    v48 = std::generic_category();
    v91 = 1283;
    p_p = (std::string *)"unrecognized vendor-name: ";
    *(_QWORD *)&v90 = CStrRef;
    *((_QWORD *)&v90 + 1) = v26;
    llvm::Twine::str((llvm::formatv_object_base **)&p_p, &v81);
    v49 = &v81;
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v49 = (std::string *)v81.__r_.__value_.__r.__words[0];
    v78[0] = (void *)22;
    v78[1] = (void *)v48;
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v86, (uint64_t *)v78, a5);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    {
      v50 = (void *)v81.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_83:
    if (*a5)
      break;
LABEL_84:
    v53 = *(_DWORD **)(a1 + 104);
    v5 = v71;
    if (v53)
    {
      v54 = v53[4];
      v55 = __OFSUB__(v54, 1);
      v56 = v54 - 1;
      if ((v56 < 0) ^ v55 | (v56 == 0))
        v56 = 0;
      v53[4] = v56;
      v57 = (llvm::raw_ostream *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v53 + 264))(v53);
      v58 = (_WORD *)*((_QWORD *)v57 + 4);
      if (*((_QWORD *)v57 + 3) - (_QWORD)v58 > 1uLL)
      {
        *v58 = 2685;
        *((_QWORD *)v57 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v57, "}\n", 2uLL);
      }
    }
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 152))
      goto LABEL_3;
  }
LABEL_105:
  v63 = *v9;
  *v9 = 0;
  p_p = v63;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>((_QWORD **)&p_p);
  result = (std::string::__raw *)p_p;
  if (p_p)
    return (std::string::__raw *)(*(uint64_t (**)(std::string *))(p_p->__r_.__value_.__r.__words[0] + 8))(p_p);
  return result;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int,unsigned int>>(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void llvm::logAllUnhandledErrors(_QWORD **a1, llvm::raw_ostream *a2, llvm::Twine *a3)
{
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (*a1)
  {
    llvm::Twine::print(a3, a2);
    v5 = *a1;
    *a1 = 0;
    v11 = a2;
    if (v5)
    {
      if ((*(unsigned int (**)(_QWORD *, void *))(*v5 + 48))(v5, &llvm::ErrorList::ID))
      {
        v12 = 0;
        v6 = (uint64_t *)v5[1];
        v7 = (uint64_t *)v5[2];
        if (v6 != v7)
        {
          v8 = 0;
          do
          {
            v15 = v8;
            v9 = *v6;
            *v6 = 0;
            v13 = v9;
            llvm::handleErrorImpl<llvm::logAllUnhandledErrors(llvm::Error,llvm::raw_ostream &,llvm::Twine)::$_0>(&v14, &v13, &v11);
            llvm::ErrorList::join(&v15, &v14, (uint64_t *)&v16);
            v8 = (uint64_t)v16;
            v16 = 0;
            if (v14)
              (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
            v10 = v13;
            v13 = 0;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            ++v6;
          }
          while (v6 != v7);
          v12 = v8;
        }
        (*(void (**)(_QWORD *))(*v5 + 8))(v5);
      }
      else
      {
        v16 = v5;
        llvm::handleErrorImpl<llvm::logAllUnhandledErrors(llvm::Error,llvm::raw_ostream &,llvm::Twine)::$_0>(&v12, &v16, &v11);
        if (v16)
          (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      }
    }
    else
    {
      v12 = 0;
    }
  }
}

uint64_t llvm::ErrorList::convertToErrorCode(llvm::ErrorList *this)
{
  getErrorErrorCat();
  return 1;
}

void getErrorErrorCat(void)
{
  unsigned __int8 v0;

  if ((v0 & 1) == 0)
  {
    {
    }
  }
}

uint64_t llvm::FileError::convertToErrorCode(llvm::FileError *this)
{
  uint64_t v1;
  _UNKNOWN **v2;
  _UNKNOWN **v3;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 32))(*((_QWORD *)this + 6));
  v3 = v2;
  getErrorErrorCat();
  if (v3 == &getErrorErrorCat(void)::ErrorErrorCat && v1 == 3)
  {
    getErrorErrorCat();
    return 2;
  }
  return v1;
}

uint64_t llvm::errorToErrorCode(_QWORD **a1)
{
  const std::error_category *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const std::error_category *v10;
  uint64_t v11;
  const std::error_category *v12;
  std::string v14;
  uint64_t v15[4];
  __int16 v16;
  std::error_code v17;
  uint64_t v18;

  v17.__val_ = 0;
  v2 = std::system_category();
  v17.__cat_ = v2;
  v3 = *a1;
  *a1 = 0;
  if (!v3)
    goto LABEL_15;
  if (!(*(unsigned int (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorList::ID))
  {
    if ((*(unsigned int (**)(_QWORD *, void *))(*v3 + 48))(v3, &llvm::ErrorInfoBase::ID))
    {
      v11 = (*(uint64_t (**)(_QWORD *))(*v3 + 32))(v3);
      v6 = v11;
      v2 = v12;
      *(_QWORD *)&v17.__val_ = v11;
      v17.__cat_ = v12;
      (*(void (**)(_QWORD *))(*v3 + 8))(v3);
      goto LABEL_18;
    }
LABEL_15:
    v6 = 0;
    goto LABEL_18;
  }
  v4 = (uint64_t *)v3[1];
  v5 = (uint64_t *)v3[2];
  if (v4 == v5)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v14.__r_.__value_.__r.__words[0] = v7;
      v8 = *v4;
      *v4 = 0;
      if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v8 + 48))(v8, &llvm::ErrorInfoBase::ID))
      {
        v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
        v6 = v9;
        v2 = v10;
        *(_QWORD *)&v17.__val_ = v9;
        v17.__cat_ = v10;
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
        v8 = 0;
      }
      v18 = v8;
      llvm::ErrorList::join((uint64_t *)&v14, &v18, v15);
      v7 = v15[0];
      v15[0] = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
      if (v14.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)v14.__r_.__value_.__l.__data_ + 8))(v14.__r_.__value_.__r.__words[0]);
      ++v4;
    }
    while (v4 != v5);
  }
  (*(void (**)(_QWORD *))(*v3 + 8))(v3);
LABEL_18:
  getErrorErrorCat();
  if (v2 == (const std::error_category *)&getErrorErrorCat(void)::ErrorErrorCat && v6 == 3)
  {
    std::error_code::message(&v14, &v17);
    v16 = 260;
    v15[0] = (uint64_t)&v14;
    llvm::report_fatal_error((llvm *)v15, (const llvm::Twine *)1);
  }
  return *(_QWORD *)&v17.__val_;
}

void llvm::StringError::log(const std::error_code *this, llvm::raw_ostream *a2)
{
  int cat_high;
  const char *p_cat;
  size_t v6;
  std::string *v7;
  size_t size;
  std::string *v9;
  size_t v10;
  std::string v11;

  if (LOBYTE(this[3].__val_))
  {
    cat_high = SHIBYTE(this[1].__cat_);
    if (cat_high >= 0)
      p_cat = (const char *)&this->__cat_;
    else
      p_cat = (const char *)this->__cat_;
    if (cat_high >= 0)
      v6 = HIBYTE(this[1].__cat_);
    else
      v6 = *(_QWORD *)&this[1].__val_;
    llvm::raw_ostream::write(a2, p_cat, v6);
  }
  else
  {
    std::error_code::message(&v11, this + 2);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v11;
    else
      v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      size = v11.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a2, (const char *)v7, size);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(this[1].__cat_) < 0)
    {
      if (!*(_QWORD *)&this[1].__val_)
        return;
    }
    else if (!HIBYTE(this[1].__cat_))
    {
      return;
    }
    std::operator+<char>();
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v11;
    else
      v9 = (std::string *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
    else
      v10 = v11.__r_.__value_.__l.__size_;
    llvm::raw_ostream::write(a2, (const char *)v9, v10);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
}

uint64_t llvm::StringError::convertToErrorCode(llvm::StringError *this)
{
  return *((_QWORD *)this + 4);
}

void llvm::report_fatal_error(_QWORD **a1)
{
  _WORD v2[20];
  _QWORD *v3;
  void (**v4)(llvm::raw_string_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD v13[3];

  memset(v13, 0, sizeof(v13));
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v4 = &off_251C13AC0;
  v12 = v13;
  llvm::raw_ostream::SetUnbuffered(&v4);
  v3 = *a1;
  *a1 = 0;
  v2[16] = 257;
  llvm::logAllUnhandledErrors(&v3, (llvm::raw_ostream *)&v4, (llvm::Twine *)v2);
  if (v3)
    (*(void (**)(_QWORD *))(*v3 + 8))(v3);
  llvm::raw_string_ostream::~raw_string_ostream((llvm::raw_string_ostream *)&v4);
  LOWORD(v8) = 260;
  v4 = (void (**)(llvm::raw_string_ostream *__hidden))v13;
  llvm::report_fatal_error((llvm *)&v4, (const llvm::Twine *)1);
}

void llvm::raw_string_ostream::~raw_string_ostream(llvm::raw_string_ostream *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x24BD1B380](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x24BD1B380](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x24BD1B3A4);
}

_BYTE *LLVMGetErrorMessage(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v6;
  std::string __src;

  v6 = a1;
  llvm::toString(&v6, &__src);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v1 = (_BYTE *)operator new[]();
  v2 = v1;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
  {
    v4 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
    memcpy(v1, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
    v2[*((_QWORD *)&v4 + 1)] = 0;
    operator delete((void *)v4);
  }
  else
  {
    v3 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
    memcpy(v1, &__src, HIBYTE(__src.__r_.__value_.__r.__words[2]));
    v2[v3] = 0;
  }
  return v2;
}

uint64_t LLVMDisposeErrorMessage(uint64_t result)
{
  if (result)
    JUMPOUT(0x24BD1B380);
  return result;
}

void llvm::ErrorList::~ErrorList(llvm::ErrorList *this)
{
  void **v1;

  v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v2;

  v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v2);
  MEMORY[0x24BD1B3A4](this, 0xA1C4030951706);
}

llvm::raw_ostream *llvm::ErrorList::log(llvm::raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *i;
  _BYTE *v7;

  v3 = (uint64_t)this;
  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 10;
    *(_OWORD *)v4 = *(_OWORD *)"Multiple errors:\n";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    this = llvm::raw_ostream::write(a2, "Multiple errors:\n", 0x11uLL);
  }
  v5 = *(_QWORD **)(v3 + 8);
  for (i = *(_QWORD **)(v3 + 16); v5 != i; ++v5)
  {
    this = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(*(_QWORD *)*v5 + 16))(*v5, a2);
    v7 = (_BYTE *)*((_QWORD *)a2 + 4);
    if (*((_BYTE **)a2 + 3) == v7)
    {
      this = llvm::raw_ostream::write(a2, "\n", 1uLL);
    }
    else
    {
      *v7 = 10;
      ++*((_QWORD *)a2 + 4);
    }
  }
  return this;
}

void *llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ErrorList::ID;
}

BOOL llvm::ErrorInfo<llvm::ErrorList,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ErrorList::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::ECError::~ECError(llvm::ECError *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::ECError::log(llvm::ECError *this, llvm::raw_ostream *a2)
{
  std::string *v3;
  size_t size;
  std::string v5;

  std::error_code::message(&v5, (const std::error_code *)((char *)this + 8));
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v5;
  else
    v3 = (std::string *)v5.__r_.__value_.__r.__words[0];
  if ((v5.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v5.__r_.__value_.__r.__words[2]);
  else
    size = v5.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(a2, (const char *)v3, size);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

uint64_t llvm::ECError::convertToErrorCode(llvm::ECError *this)
{
  return *((_QWORD *)this + 1);
}

void *llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::ECError::ID;
}

BOOL llvm::ErrorInfo<llvm::ECError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::ECError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::FileError::~FileError(llvm::FileError *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::FileError::log(llvm::FileError *this, llvm::raw_ostream *a2)
{
  _BYTE *v4;
  int v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;

  v4 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v4)
  {
    llvm::raw_ostream::write(a2, "'", 1uLL);
  }
  else
  {
    *v4 = 39;
    ++*((_QWORD *)a2 + 4);
  }
  v5 = *((char *)this + 31);
  if (v5 >= 0)
    v6 = (char *)this + 8;
  else
    v6 = (const char *)*((_QWORD *)this + 1);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 31);
  else
    v7 = *((_QWORD *)this + 2);
  llvm::raw_ostream::write(a2, v6, v7);
  v8 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v8) > 2)
  {
    *(_BYTE *)(v8 + 2) = 32;
    *(_WORD *)v8 = 14887;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "': ", 3uLL);
  }
  if (*((_BYTE *)this + 40))
  {
    v9 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v9) > 4)
    {
      *(_BYTE *)(v9 + 4) = 32;
      *(_DWORD *)v9 = 1701734764;
      *((_QWORD *)a2 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(a2, "line ", 5uLL);
    }
    write_unsigned<unsigned long>(a2, *((_QWORD *)this + 4), 0, 0, 0);
    v10 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v10 > 1uLL)
    {
      *v10 = 8250;
      *((_QWORD *)a2 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(a2, ": ", 2uLL);
    }
  }
  return (*(uint64_t (**)(_QWORD, llvm::raw_ostream *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), a2);
}

void *llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::FileError::ID;
}

BOOL llvm::ErrorInfo<llvm::FileError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::FileError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::StringError::~StringError(void **this)
{
  *this = off_251C127D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C127D0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::StringError::ID;
}

BOOL llvm::ErrorInfo<llvm::StringError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::StringError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void `anonymous namespace'::ErrorErrorCategory::~ErrorErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24BD1B3A4);
}

const char *`anonymous namespace'::ErrorErrorCategory::name(_anonymous_namespace_::ErrorErrorCategory *this)
{
  return "Error";
}

_QWORD *`anonymous namespace'::ErrorErrorCategory::message@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a2, off_251C12948[a1 - 1]);
}

uint64_t llvm::handleErrorImpl<llvm::logAllUnhandledErrors(llvm::Error,llvm::raw_ostream &,llvm::Twine)::$_0>(_QWORD *a1, _QWORD *a2, llvm::raw_ostream **a3)
{
  uint64_t result;
  uint64_t v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;

  result = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorInfoBase::ID);
  v7 = *a2;
  *a2 = 0;
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)v7 + 16))(v7, *a3);
    v8 = *a3;
    v9 = (_BYTE *)*((_QWORD *)*a3 + 4);
    if (*((_BYTE **)*a3 + 3) == v9)
    {
      llvm::raw_ostream::write(v8, "\n", 1uLL);
    }
    else
    {
      *v9 = 10;
      ++*((_QWORD *)v8 + 4);
    }
    *a1 = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    *a1 = v7;
  }
  return result;
}

void llvm::report_fatal_error(llvm *this, const llvm::Twine *a2)
{
  char v2;
  llvm *v3;
  char v4;
  char v5;

  v2 = 1;
  v5 = 1;
  if (*(_BYTE *)this)
  {
    v3 = this;
    v2 = 3;
  }
  v4 = v2;
  llvm::report_fatal_error((llvm *)&v3, a2);
}

{
  int v2;
  _QWORD *v4;
  void (**v5)(llvm::raw_ostream *__hidden);
  int v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  char v10;
  uint64_t v11;
  int v12;
  void **v13;
  void *v14;
  __int128 v15;
  _BYTE v16[64];

  v2 = (int)a2;
  std::mutex::lock(&ErrorHandlerMutex);
  std::mutex::unlock(&ErrorHandlerMutex);
  v13 = &v14;
  v14 = v16;
  v15 = xmmword_24AA2B2D0;
  v6 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 1;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  v5 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  llvm::raw_ostream::SetUnbuffered(&v5);
  v4 = v9;
  if ((unint64_t)(v8 - v9) > 0xB)
  {
    *((_DWORD *)v9 + 2) = 540693071;
    *v4 = *(_QWORD *)"LLVM ERROR: ";
    v9 += 12;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "LLVM ERROR: ", 0xCuLL);
  }
  llvm::Twine::print(this, (llvm::raw_ostream *)&v5);
  if (v8 == v9)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v5, "\n", 1uLL);
  else
    *v9++ = 10;
  write(2, *v13, (size_t)v13[1]);
  v5 = off_251C13948;
  if (v12 == 1 && v7)
    MEMORY[0x24BD1B380](v7, 0x1000C8077774924);
  if (v14 != v16)
    free(v14);
  RemoveFilesToRemove();
  if (v2)
    abort();
  exit(1);
}

void llvm::report_bad_alloc_error(llvm *this, const char *a2)
{
  size_t v3;

  std::mutex::lock(&BadAllocErrorHandlerMutex);
  std::mutex::unlock(&BadAllocErrorHandlerMutex);
  write(2, "LLVM ERROR: out of memory\n", 0x1AuLL);
  v3 = strlen((const char *)this);
  write(2, this, v3);
  write(2, "\n", 1uLL);
  abort();
}

uint64_t _GLOBAL__sub_I_ErrorHandling_cpp()
{
  void (*v0)(void *);

  v0 = (void (*)(void *))MEMORY[0x24BEDB380];
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &ErrorHandlerMutex, &dword_24A800000);
  return __cxa_atexit(v0, &BadAllocErrorHandlerMutex, &dword_24A800000);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *this, int a2)
{
  int v2;
  _BYTE *v4;
  uint64_t v5;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  const char *v10;
  llvm::raw_ostream *v11;
  _BYTE *v12;
  uint64_t v13;

  v2 = a2;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 < *((_QWORD *)this + 3))
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 40;
    if (a2)
      goto LABEL_3;
LABEL_13:
    v13 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v13) > 4)
    {
      *(_BYTE *)(v13 + 4) = 41;
      *(_DWORD *)v13 = 1701736302;
      *((_QWORD *)this + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(this, "none)", 5uLL);
    }
    return this;
  }
  llvm::raw_ostream::write(this, 40);
  if (!v2)
    goto LABEL_13;
LABEL_3:
  v5 = 0;
  v6 = 1;
  do
  {
    v7 = NoFPClassName[v5];
    if ((v7 & ~v2) == 0)
    {
      v9 = *(const void **)&NoFPClassName[v5 + 2];
      v8 = *(_QWORD *)&NoFPClassName[v5 + 4];
      if (v6)
        v10 = 0;
      else
        v10 = " ";
      v11 = llvm::raw_ostream::operator<<(this, v10, v6 == 0);
      llvm::raw_ostream::operator<<(v11, v9, v8);
      v6 = 0;
      v2 &= ~v7 & 0x3FF;
    }
    v5 += 6;
  }
  while (v5 != 96);
  v12 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v12 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 41);
  }
  else
  {
    *((_QWORD *)this + 4) = v12 + 1;
    *v12 = 41;
  }
  return this;
}

unsigned int *llvm::FoldingSetNodeID::AddString(unsigned int *a1, _BYTE *a2, unsigned int a3)
{
  unint64_t v6;
  unsigned int *result;
  unsigned int i;
  int v9;
  unsigned int v10;

  v6 = a1[2] + (((unint64_t)a3 + 3) >> 2) + 1;
  if (v6 > a1[3])
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, a1 + 4, v6, 4);
  result = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, a3);
  if (a3)
  {
    if ((a2 & 3) != 0)
    {
      for (i = 4; i <= a3; i += 4)
        result = llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, (a2[i - 1] << 24) | (a2[i - 2] << 16) | (a2[i - 3] << 8) | a2[i - 4]);
    }
    else
    {
      result = llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(a1, a2, &a2[a3 & 0xFFFFFFFC]);
      i = (a3 & 0xFFFFFFFC) + 4;
    }
    v9 = 0;
    v10 = i - a3;
    if (i - a3 != 3)
    {
      if (v10 != 2)
      {
        if (v10 != 1)
          return result;
        v9 = a2[a3 - 3] << 16;
      }
      v9 |= a2[a3 - 2] << 8;
    }
    return llvm::SmallVectorTemplateBase<unsigned int,true>::push_back(a1, v9 | a2[a3 - 1]);
  }
  return result;
}

unsigned int *llvm::SmallVectorImpl<unsigned int>::append<unsigned int const*,void>(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  unsigned int *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 2);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v8, 4);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 4 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 2);
  return result;
}

_QWORD *AllocateBuckets(int a1)
{
  int v2;
  _QWORD *result;

  v2 = a1 + 1;
  result = malloc_type_calloc((a1 + 1), 8uLL, 0x6D9A4F0CuLL);
  if (!result && (v2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  result[a1] = -1;
  return result;
}

void llvm::FoldingSetBase::GrowBucketCount(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD **)a1;
  v7 = *(unsigned int *)(a1 + 8);
  *(_QWORD *)a1 = AllocateBuckets(a2);
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  v14 = v16;
  v15 = 0x2000000000;
  if (!(_DWORD)v7)
    goto LABEL_14;
  for (i = 0; i != v7; ++i)
  {
    v9 = (_QWORD *)v6[i];
    if (v9)
      v10 = (v6[i] & 1) == 0;
    else
      v10 = 0;
    if (v10)
    {
      do
      {
        v11 = (_QWORD *)*v9;
        *v9 = 0;
        (*(void (**)(uint64_t, _QWORD *, _QWORD **))(a3 + 16))(a1, v9, &v14);
        llvm::FoldingSetBase::InsertNode(a1);
        LODWORD(v15) = 0;
        if (v11)
          v12 = (v11 & 1) == 0;
        else
          v12 = 0;
        v9 = v11;
      }
      while (v12);
    }
  }
  v13 = v14;
  free(v6);
  v6 = v13;
  if (v13 != v16)
LABEL_14:
    free(v6);
}

void llvm::FoldingSetBase::InsertNode(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  uint64_t v10;
  void *v11[2];
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 12) + 1;
  if (v8 > 2 * v7)
  {
    llvm::FoldingSetBase::GrowBucketCount(a1, 2 * v7, a4);
    v11[0] = v12;
    v11[1] = (void *)0x2000000000;
    a3 = *(_QWORD *)a1
       + 8
       * ((*(_DWORD *)(a1 + 8) - 1) & (*(unsigned int (**)(uint64_t, uint64_t *, void **))(a4 + 16))(a1, a2, v11));
    if (v11[0] != v12)
      free(v11[0]);
    v8 = *(_DWORD *)(a1 + 12) + 1;
  }
  *(_DWORD *)(a1 + 12) = v8;
  v10 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
    v10 = a3 | 1;
  *a2 = v10;
  *(_QWORD *)a3 = a2;
}

_QWORD *llvm::FoldingSetBase::FindNodeOrInsertPos(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  _QWORD **v9;
  _QWORD *v10;
  void *v13;
  uint64_t v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8), (uint64_t)a3, (unint64_t *)a4);
  v9 = (_QWORD **)(*(_QWORD *)a1 + 8 * ((*(_DWORD *)(a1 + 8) - 1) & v8));
  v10 = *v9;
  *a3 = 0;
  v13 = v15;
  v14 = 0x2000000000;
  while (v10 && (v10 & 1) == 0)
  {
    if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, unint64_t, void **))(a4 + 8))(a1, v10, a2, v8, &v13) & 1) != 0)goto LABEL_9;
    LODWORD(v14) = 0;
    v10 = (_QWORD *)*v10;
  }
  v10 = 0;
  *a3 = v9;
LABEL_9:
  if (v13 != v15)
    free(v13);
  return v10;
}

uint64_t llvm::formatted_raw_ostream::UpdatePosition(uint64_t this, char *__src, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  int v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;

  v3 = __src;
  v4 = this;
  v5 = (_QWORD *)(this + 88);
  v6 = *(_QWORD *)(this + 96);
  if (!v6)
    goto LABEL_15;
  v7 = (llvm::trailingBytesForUTF8[*(unsigned __int8 *)*v5] + 1) - v6;
  v8 = a3 - v7;
  if (a3 < v7)
  {
    v9 = &__src[a3];
    return (uint64_t)llvm::SmallVectorImpl<char>::append<char const*,void>(v5, v3, v9);
  }
  v10 = &__src[v7];
  llvm::SmallVectorImpl<char>::append<char const*,void>((_QWORD *)(this + 88), __src, &__src[v7]);
  v11 = *(char **)(v4 + 88);
  v12 = *(_QWORD *)(v4 + 96);
  this = llvm::sys::unicode::columnWidthUTF8((uint64_t)v11, v12);
  if ((_DWORD)this != -1)
    *(_DWORD *)(v4 + 72) += this;
  if (v12 <= 1)
  {
    v13 = *v11;
    switch(v13)
    {
      case 9:
        v14 = (-*(_DWORD *)(v4 + 72) & 7) + *(_DWORD *)(v4 + 72);
        goto LABEL_13;
      case 13:
        v14 = 0;
        goto LABEL_13;
      case 10:
        v14 = 0;
        ++*(_DWORD *)(v4 + 76);
LABEL_13:
        *(_DWORD *)(v4 + 72) = v14;
        break;
    }
  }
  *(_QWORD *)(v4 + 96) = 0;
  a3 = v8;
  v3 = (char *)v10;
LABEL_15:
  if (a3 < 1)
    return this;
  v15 = &v3[a3];
  while (1)
  {
    v16 = (llvm::trailingBytesForUTF8[*v3] + 1);
    if (v16 > (int)v15 - (int)v3)
      break;
    this = llvm::sys::unicode::columnWidthUTF8((uint64_t)v3, (llvm::trailingBytesForUTF8[*v3] + 1));
    if ((_DWORD)this != -1)
      *(_DWORD *)(v4 + 72) += this;
    if (v16 > 1)
      goto LABEL_28;
    v17 = *v3;
    switch(v17)
    {
      case 9:
        v18 = (-*(_DWORD *)(v4 + 72) & 7) + *(_DWORD *)(v4 + 72);
        goto LABEL_27;
      case 13:
        v18 = 0;
        goto LABEL_27;
      case 10:
        v18 = 0;
        ++*(_DWORD *)(v4 + 76);
LABEL_27:
        *(_DWORD *)(v4 + 72) = v18;
        break;
    }
LABEL_28:
    v3 += v16;
    if (v3 >= v15)
      return this;
  }
  v9 = v15;
  *(_QWORD *)(v4 + 96) = 0;
  return (uint64_t)llvm::SmallVectorImpl<char>::append<char const*,void>(v5, v3, v9);
}

uint64_t llvm::formatted_raw_ostream::ComputePosition(llvm::formatted_raw_ostream *this, char *a2, uint64_t a3)
{
  char *v5;
  const char *v6;
  uint64_t result;

  v5 = (char *)*((_QWORD *)this + 10);
  v6 = &a2[a3];
  if (v5 < a2 || v5 > v6)
    v5 = a2;
  else
    a3 = v6 - v5;
  result = llvm::formatted_raw_ostream::UpdatePosition((uint64_t)this, v5, a3);
  *((_QWORD *)this + 10) = v6;
  return result;
}

llvm::raw_ostream *llvm::formatted_raw_ostream::PadToColumn(char **this, int a2)
{
  int v4;
  size_t v5;

  llvm::formatted_raw_ostream::ComputePosition((llvm::formatted_raw_ostream *)this, this[2], this[4] - this[2]);
  llvm::formatted_raw_ostream::ComputePosition((llvm::formatted_raw_ostream *)this, this[2], this[4] - this[2]);
  v4 = a2 - *((_DWORD *)this + 18);
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  return llvm::raw_ostream::indent((llvm::raw_ostream *)this, v5);
}

llvm::raw_ostream *llvm::formatted_raw_ostream::write_impl(llvm::raw_ostream **this, char *a2, size_t a3)
{
  llvm::raw_ostream *result;

  llvm::formatted_raw_ostream::ComputePosition((llvm::formatted_raw_ostream *)this, a2, a3);
  result = llvm::raw_ostream::write(this[8], a2, a3);
  this[10] = 0;
  return result;
}

void llvm::formatted_raw_ostream::~formatted_raw_ostream(llvm::formatted_raw_ostream *this)
{
  llvm::formatted_raw_ostream::~formatted_raw_ostream(this);
  JUMPOUT(0x24BD1B3A4);
}

{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251C12AF0;
  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  llvm::formatted_raw_ostream::releaseStream(this);
  v2 = (char *)*((_QWORD *)this + 11);
  if (v2 != (char *)this + 112)
    free(v2);
  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
      MEMORY[0x24BD1B380](v3, 0x1000C8077774924);
  }
}

uint64_t llvm::formatted_raw_ostream::changeColor(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64));
  return a1;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::resetColor(llvm::formatted_raw_ostream *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 32))(*((_QWORD *)this + 8));
  return this;
}

llvm::formatted_raw_ostream *llvm::formatted_raw_ostream::reverseColor(llvm::formatted_raw_ostream *this)
{
  (*(void (**)(_QWORD))(**((_QWORD **)this + 8) + 40))(*((_QWORD *)this + 8));
  return this;
}

uint64_t llvm::formatted_raw_ostream::is_displayed(llvm::formatted_raw_ostream *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 8) + 48))(*((_QWORD *)this + 8));
}

uint64_t llvm::raw_ostream::has_colors(llvm::raw_ostream *this)
{
  return (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 48))(this);
}

uint64_t llvm::raw_ostream::enable_colors(uint64_t this, char a2)
{
  *(_BYTE *)(this + 40) = a2;
  return this;
}

uint64_t llvm::formatted_raw_ostream::current_pos(llvm::formatted_raw_ostream *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  return (*(uint64_t (**)(_QWORD *))(*v1 + 80))(v1) + v1[4] - v1[2];
}

_QWORD *llvm::formatted_raw_ostream::setStream(llvm::formatted_raw_ostream *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  _QWORD *result;

  llvm::formatted_raw_ostream::releaseStream(this);
  *((_QWORD *)this + 8) = a2;
  v4 = *((_QWORD *)a2 + 2);
  if (*((_DWORD *)a2 + 14))
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
    v6 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a2 + 88))(a2);
  else
    v6 = *((_QWORD *)a2 + 3) - v4;
  if (v6)
    llvm::raw_ostream::SetBufferSize(this, v6);
  else
    llvm::raw_ostream::SetUnbuffered(this);
  result = llvm::raw_ostream::SetUnbuffered(*((_QWORD **)this + 8));
  *((_QWORD *)this + 10) = 0;
  return result;
}

llvm::raw_ostream *llvm::formatted_raw_ostream::releaseStream(llvm::formatted_raw_ostream *this)
{
  llvm::raw_ostream *result;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  result = (llvm::raw_ostream *)*((_QWORD *)this + 8);
  if (result)
  {
    v3 = *((_QWORD *)this + 2);
    if (*((_DWORD *)this + 14))
      v4 = v3 == 0;
    else
      v4 = 0;
    if (v4)
    {
      v5 = (*(uint64_t (**)(llvm::formatted_raw_ostream *))(*(_QWORD *)this + 88))(this);
      result = (llvm::raw_ostream *)*((_QWORD *)this + 8);
      if (v5)
        return (llvm::raw_ostream *)llvm::raw_ostream::SetBufferSize(result, v5);
    }
    else
    {
      v5 = *((_QWORD *)this + 3) - v3;
      if (v5)
        return (llvm::raw_ostream *)llvm::raw_ostream::SetBufferSize(result, v5);
    }
    return (llvm::raw_ostream *)llvm::raw_ostream::SetUnbuffered(result);
  }
  return result;
}

uint64_t llvm::raw_ostream::SetBufferSize(llvm::raw_ostream *this, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  if (*((_QWORD *)this + 4) != *((_QWORD *)this + 2))
    llvm::raw_ostream::flush_nonempty(this);
  result = operator new[]();
  v5 = result;
  if (*((_DWORD *)this + 14) == 1)
  {
    result = *((_QWORD *)this + 2);
    if (result)
      result = MEMORY[0x24BD1B380](result, 0x1000C8077774924);
  }
  *((_QWORD *)this + 2) = v5;
  *((_QWORD *)this + 3) = v5 + a2;
  *((_QWORD *)this + 4) = v5;
  *((_DWORD *)this + 14) = 1;
  return result;
}

_BYTE *llvm::formatv_object_base::splitLiteralAndReplacement@<X0>(_BYTE *result@<X0>, size_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v3;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _BYTE *v17;
  size_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  int v29;
  _BYTE *v30;
  unint64_t v31;
  unint64_t *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44[2];
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47[3];
  uint64_t v48;

  v3 = result;
  v48 = *MEMORY[0x24BDAC8D0];
  if (!a2)
  {
    *(_OWORD *)((char *)v47 + 3) = 0uLL;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_DWORD *)a3 = 2;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 8) = result;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_8;
  }
  if (*result != 123)
  {
    result = memchr(result, 123, a2);
    v9 = result - v3;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    if (!result)
      v9 = -1;
    *(uint64_t *)((char *)&v47[1] + 3) = 0;
    if (a2 < v9)
      v9 = a2;
    goto LABEL_13;
  }
  v6 = 1;
  while (a2 != v6)
  {
    v7 = result[v6++];
    if (v7 != 123)
    {
      v8 = v6 - 1;
      goto LABEL_15;
    }
  }
  v8 = -1;
LABEL_15:
  if (a2 < v8)
    v8 = a2;
  if (v8 < 2)
  {
    result = memchr(result, 125, a2);
    if (result)
    {
      v12 = result;
      v13 = (_BYTE *)(result - v3);
      if (result - v3 != -1)
      {
        if (a2 >= 2)
        {
          result = memchr(v3 + 1, 123, a2 - 1);
          v9 = result - v3;
          if (!result)
            v9 = -1;
          if (v9 < (unint64_t)v13)
          {
            if (a2 < v9)
              v9 = a2;
            *(_QWORD *)(a3 + 24) = 0;
            *(_QWORD *)(a3 + 32) = 0;
            *(uint64_t *)((char *)&v47[1] + 3) = 0;
LABEL_13:
            *(uint64_t *)((char *)v47 + 3) = 0;
            *(_DWORD *)a3 = 2;
            *(_QWORD *)(a3 + 8) = v3;
            *(_QWORD *)(a3 + 16) = v9;
            *(_DWORD *)(a3 + 40) = 2;
            *(_BYTE *)(a3 + 44) = 0;
            *(_OWORD *)(a3 + 45) = *(_OWORD *)v47;
            *(_DWORD *)(a3 + 60) = *(_DWORD *)((char *)&v47[1] + 7);
            *(_QWORD *)(a3 + 64) = &v3[v9];
            *(_QWORD *)(a3 + 72) = a2 - v9;
            return result;
          }
        }
        if (v12 == v3)
          v14 = 1;
        else
          v14 = (unint64_t)v13;
        if (v14 >= a2)
          v14 = a2;
        v15 = v14 - 1;
        if (a2 >= (unint64_t)(v13 + 1))
          v16 = (size_t)(v13 + 1);
        else
          v16 = a2;
        v17 = &v3[v16];
        v18 = a2 - v16;
        v47[0] = (uint64_t)(v3 + 1);
        v47[1] = v15;
        v45 = (_BYTE *)llvm::StringRef::trim(v47, "{}", 2);
        v46 = v19;
        v45 = (_BYTE *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        v46 = v20;
        v44[0] = 0;
        result = (_BYTE *)llvm::consumeUnsignedInteger((llvm *)&v45, 0, (unint64_t *)v44, v21);
        if ((_DWORD)result)
        {
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          LOWORD(v44[0]) = 0;
          BYTE2(v44[0]) = 0;
          v28 = 0uLL;
          v29 = 2;
LABEL_66:
          *(_DWORD *)a3 = v24;
          *(_DWORD *)(a3 + 4) = 0;
          *(_OWORD *)(a3 + 8) = v28;
          *(_QWORD *)(a3 + 24) = v22;
          *(_QWORD *)(a3 + 32) = v23;
          *(_DWORD *)(a3 + 40) = v29;
          *(_BYTE *)(a3 + 44) = v27;
          *(_WORD *)(a3 + 45) = v44[0];
          *(_BYTE *)(a3 + 47) = BYTE2(v44[0]);
          *(_QWORD *)(a3 + 48) = v26;
          *(_QWORD *)(a3 + 56) = v25;
          *(_QWORD *)(a3 + 64) = v17;
          *(_QWORD *)(a3 + 72) = v18;
          return result;
        }
        v22 = v44[0];
        v30 = (_BYTE *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        v45 = v30;
        v46 = v31;
        if (v31 && *v30 == 44)
        {
          v33 = v30 + 1;
          v27 = 32;
          v29 = 2;
          v34 = v31 - 1;
          v45 = v30 + 1;
          v46 = v31 - 1;
          if (v31 != 1)
          {
            v35 = v31 - 2;
            if (v31 == 2)
              goto LABEL_58;
            v38 = (char)v30[2];
            v36 = (uint64_t)(v30 + 2);
            v37 = v38;
            if (v38 != 43)
            {
              if (v37 == 45)
              {
                v29 = 0;
              }
              else
              {
                if (v37 != 61)
                {
                  v43 = *v33;
                  if (v43 != 43)
                  {
                    if (v43 == 45)
                    {
                      v29 = 0;
                    }
                    else
                    {
                      if (v43 != 61)
                      {
LABEL_58:
                        v44[0] = 0;
                        if (llvm::consumeUnsignedInteger((llvm *)&v45, 0, (unint64_t *)v44, v32))
                          v23 = 0;
                        else
                          v23 = v44[0];
                        goto LABEL_61;
                      }
                      v29 = 1;
                    }
                  }
LABEL_57:
                  v45 = (_BYTE *)v36;
                  v46 = v35;
                  goto LABEL_58;
                }
                v29 = 1;
              }
            }
            v27 = *v33;
            v39 = 2;
            if (v34 < 2)
              v39 = v31 - 1;
            v36 = (uint64_t)&v33[v39];
            v35 = v34 - v39;
            goto LABEL_57;
          }
          v23 = 0;
        }
        else
        {
          v23 = 0;
          v27 = 32;
          v29 = 2;
        }
LABEL_61:
        v40 = (_BYTE *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        v45 = v40;
        v46 = v41;
        if (v41 && *v40 == 58)
        {
          v44[0] = (uint64_t)(v40 + 1);
          v44[1] = v41 - 1;
          v26 = llvm::StringRef::trim(v44, " \t\n\v\f\r", 6);
          v25 = v42;
          v45 = 0;
          v46 = 0;
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        result = (_BYTE *)llvm::StringRef::trim((uint64_t *)&v45, " \t\n\v\f\r", 6);
        v24 = 1;
        v28 = *(_OWORD *)v47;
        goto LABEL_66;
      }
    }
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(uint64_t *)((char *)&v47[1] + 3) = 0;
    *(uint64_t *)((char *)v47 + 3) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_DWORD *)a3 = 2;
    *(_QWORD *)(a3 + 8) = v3;
    *(_QWORD *)(a3 + 16) = a2;
LABEL_8:
    *(_DWORD *)(a3 + 40) = 2;
    *(_BYTE *)(a3 + 44) = 0;
    *(_OWORD *)(a3 + 45) = *(_OWORD *)v47;
    *(_DWORD *)(a3 + 60) = *(_DWORD *)((char *)&v47[1] + 7);
    return result;
  }
  v10 = v8 >> 1;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(uint64_t *)((char *)&v47[1] + 3) = 0;
  if (a2 < v8 >> 1)
    v10 = a2;
  v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (a2 < v11)
    v11 = a2;
  *(uint64_t *)((char *)v47 + 3) = 0;
  *(_DWORD *)a3 = 2;
  *(_QWORD *)(a3 + 8) = result;
  *(_QWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 40) = 2;
  *(_BYTE *)(a3 + 44) = 0;
  *(_OWORD *)(a3 + 45) = *(_OWORD *)v47;
  *(_DWORD *)(a3 + 60) = 0;
  *(_QWORD *)(a3 + 64) = &result[v11];
  *(_QWORD *)(a3 + 72) = a2 - v11;
  return result;
}

__n128 llvm::formatv_object_base::parseFormatString@<Q0>(_BYTE *a1@<X0>, size_t a2@<X1>, _QWORD *a3@<X8>)
{
  __n128 result;
  size_t v5;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;
  _BYTE *v14;
  size_t v15;
  _BYTE v16[48];
  __int128 v17;

  *a3 = a3 + 2;
  a3[1] = 0x200000000;
  *(_DWORD *)v16 = 0;
  result.n128_u64[0] = 0;
  memset(&v16[8], 0, 32);
  *(_DWORD *)&v16[40] = 2;
  v16[44] = 0;
  v17 = 0uLL;
  if (a2)
  {
    v5 = a2;
    do
    {
      llvm::formatv_object_base::splitLiteralAndReplacement(a1, v5, (uint64_t)v11);
      *(_OWORD *)v16 = v11[0];
      *(_OWORD *)&v16[16] = v11[1];
      result.n128_u64[0] = v12;
      *(_OWORD *)&v16[32] = v12;
      v17 = v13;
      a1 = v14;
      v5 = v15;
      if (LODWORD(v11[0]))
      {
        v7 = llvm::SmallVectorTemplateCommon<llvm::ReplacementItem,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::ReplacementItem,true>>((uint64_t)a3, (unint64_t)v16, 1);
        v8 = *a3 + ((unint64_t)*((unsigned int *)a3 + 2) << 6);
        result = *(__n128 *)v7;
        v9 = *(_OWORD *)(v7 + 16);
        v10 = *(_OWORD *)(v7 + 48);
        *(_OWORD *)(v8 + 32) = *(_OWORD *)(v7 + 32);
        *(_OWORD *)(v8 + 48) = v10;
        *(__n128 *)v8 = result;
        *(_OWORD *)(v8 + 16) = v9;
        ++*((_DWORD *)a3 + 2);
      }
    }
    while (v5);
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<llvm::ReplacementItem,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<llvm::ReplacementItem,true>>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + (v4 << 6);
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 64);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 64);
    }
  }
  return v3;
}

uint64_t llvm::object_deleter<llvm::cl::opt<BOOL,false,llvm::cl::parser<BOOL>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

unint64_t llvm::json::Object::getInteger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(a1, (uint64_t)v6);
  if (*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16) == v4)
    return 0;
  else
    return llvm::json::Value::getAsInteger((llvm::json::Value *)(v4 + 24));
}

unint64_t llvm::json::Value::getAsInteger(llvm::json::Value *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  BOOL v5;
  long double __y;

  v1 = *(unsigned __int16 *)this;
  if (v1 == 3)
  {
    v2 = *((_QWORD *)this + 1);
  }
  else
  {
    if (v1 != 2
      || (__y = *((double *)this + 1), modf(__y, &__y) != 0.0)
      || (__y >= -9.22337204e18 ? (v5 = __y > 9.22337204e18) : (v5 = 1), v5))
    {
      v3 = 0;
      LOBYTE(v2) = 0;
      return v2 | v3;
    }
    v2 = (uint64_t)__y;
  }
  v3 = v2 & 0xFFFFFFFFFFFFFF00;
  return v2 | v3;
}

uint64_t llvm::json::Object::getString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(a1, (uint64_t)v14);
  if (*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16) == result)
    goto LABEL_11;
  v7 = *(unsigned __int16 *)(result + 24);
  if (v7 == 6)
  {
    v9 = *(_QWORD *)(result + 32);
    result += 32;
    v8 = v9;
    v10 = *(char *)(result + 23);
    v11 = v10 < 0;
    if (v10 >= 0)
      v8 = result;
    v12 = *(unsigned __int8 *)(result + 23);
    if (v11)
      v12 = *(_QWORD *)(result + 8);
    *(_QWORD *)a4 = v8;
    *(_QWORD *)(a4 + 8) = v12;
    goto LABEL_10;
  }
  if (v7 != 5)
  {
LABEL_11:
    v13 = 0;
    *(_BYTE *)a4 = 0;
    goto LABEL_12;
  }
  *(_OWORD *)a4 = *(_OWORD *)(result + 32);
LABEL_10:
  v13 = 1;
LABEL_12:
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

uint64_t llvm::json::Object::getObject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  _QWORD v6[2];
  uint64_t v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v6, &v7);
  result = 0;
  if (v4 && v7 != *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16))
  {
    if (*(_WORD *)(v7 + 24) == 7)
      return v7 + 32;
    else
      return 0;
  }
  return result;
}

uint64_t llvm::json::Object::getArray(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[2];

  v6[0] = a2;
  v6[1] = a3;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(a1, (uint64_t)v6);
  if (*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16) == v4)
    return 0;
  if (*(_WORD *)(v4 + 24) == 8)
    return v4 + 32;
  return 0;
}

uint64_t llvm::json::Value::moveFrom(uint64_t result, unsigned __int16 *a2)
{
  int v2;
  __int128 v3;
  __int128 v4;
  int v5;
  int v6;

  v2 = *a2;
  *(_WORD *)result = v2;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      v3 = *(_OWORD *)(a2 + 4);
      *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 3);
      goto LABEL_3;
    case 5:
      v3 = *(_OWORD *)(a2 + 4);
LABEL_3:
      *(_OWORD *)(result + 8) = v3;
      return result;
    case 6:
      v4 = *(_OWORD *)(a2 + 4);
      *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 3);
      *(_OWORD *)(result + 8) = v4;
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 1) = 0;
      goto LABEL_8;
    case 7:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      *(_DWORD *)(result + 16) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      v5 = *(_DWORD *)(result + 20);
      *(_DWORD *)(result + 20) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v5;
      v6 = *(_DWORD *)(result + 24);
      *(_DWORD *)(result + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v6;
      goto LABEL_8;
    case 8:
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 4);
      *(_QWORD *)(result + 24) = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *((_QWORD *)a2 + 3) = 0;
LABEL_8:
      *a2 = 0;
      break;
    default:
      return result;
  }
  return result;
}

void llvm::json::Value::copyFrom(llvm::json::Value *this, const llvm::json::Value *a2)
{
  int v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  char *v6;
  char *v7;

  v2 = *(unsigned __int16 *)a2;
  *(_WORD *)this = v2;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      v3 = *(_OWORD *)((char *)a2 + 8);
      *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
      goto LABEL_3;
    case 5:
      v3 = *(_OWORD *)((char *)a2 + 8);
LABEL_3:
      *(_OWORD *)((char *)this + 8) = v3;
      break;
    case 6:
      v4 = (std::string *)((char *)this + 8);
      if (*((char *)a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
      }
      else
      {
        v5 = *(_OWORD *)((char *)a2 + 8);
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      break;
    case 7:
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      v6 = (char *)this + 8;
      *((_DWORD *)v6 + 4) = 0;
      llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom((uint64_t)v6, (uint64_t)a2 + 8);
      break;
    case 8:
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
      v7 = (char *)this + 8;
      *((_QWORD *)v7 + 2) = 0;
      std::vector<llvm::json::Value>::__init_with_size[abi:nn180100]<llvm::json::Value*,llvm::json::Value*>(v7, *((const llvm::json::Value **)a2 + 1), *((const llvm::json::Value **)a2 + 2), (uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 5);
      break;
    default:
      return;
  }
}

void llvm::json::Value::destroy(void **this)
{
  int v1;
  void **v2;

  v1 = *(unsigned __int16 *)this;
  if (v1 == 8)
  {
    v2 = this + 1;
    std::vector<llvm::json::Value>::__destroy_vector::operator()[abi:nn180100](&v2);
  }
  else
  {
    if (v1 == 7)
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll(this + 1);
      JUMPOUT(0x24BD1B398);
    }
    if (v1 == 6 && *((char *)this + 31) < 0)
      operator delete(this[1]);
  }
}

void llvm::json::parse(llvm *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  llvm *v14;
  llvm *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  void *v18[5];

  v18[4] = *(void **)MEMORY[0x24BDAC8D0];
  LOBYTE(v12) = 0;
  v13 = 0;
  v14 = a1;
  v15 = a1;
  v16 = (unsigned __int8 *)a1 + a2;
  v17 = 0;
  LOWORD(v18[0]) = 0;
  if (!llvm::json::isUTF8(a1, a2, (unsigned __int8 *)&v17))
  {
    v15 = (llvm *)((char *)a1 + v17);
    v10 = "Invalid UTF-8 sequence";
LABEL_11:
    goto LABEL_12;
  }
  {
    v5 = (unsigned __int8 *)v15;
    if (v15 == (llvm *)v16)
      goto LABEL_9;
    while (1)
    {
      v6 = *v5;
      v7 = v6 > 0x20;
      v8 = (1 << v6) & 0x100002600;
      if (v7 || v8 == 0)
        break;
      v15 = (llvm *)++v5;
      if (v5 == v16)
        goto LABEL_9;
    }
    if (v5 == v16)
    {
LABEL_9:
      *(_BYTE *)(a3 + 32) &= ~1u;
      llvm::json::Value::moveFrom(a3, (unsigned __int16 *)v18);
      goto LABEL_13;
    }
    v10 = "Text after end of document";
    goto LABEL_11;
  }
LABEL_12:
  v11 = v12;
  v12 = 0;
  *(_BYTE *)(a3 + 32) |= 1u;
  *(_QWORD *)a3 = v11;
LABEL_13:
  llvm::json::Value::destroy(v18);
  if (v13)
  {
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
}

uint64_t llvm::json::`anonymous namespace'::Parser::parseValue(llvm::json::_anonymous_namespace_::Parser *this, void **a2)
{
  char v2;
  char *v4;
  unsigned __int8 *v5;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  const char *v11;
  int v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  uint64_t *v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned int v23;
  unint64_t v25;
  _WORD *v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned __int8 *v40;
  int v41;
  unsigned int v42;
  uint64_t v43;
  char *v45;
  int v46;
  unsigned __int8 *v47;
  unsigned int v48;
  _BYTE *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 *v56;
  unsigned int v57;
  uint64_t v58;
  llvm::json::_anonymous_namespace_::Parser *v60;
  const char *v61;
  int v62;
  char *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  unsigned int v66;
  uint64_t v67;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v74;
  _BYTE *v75;
  int v76;
  unsigned int v77;
  char *i;
  int v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v83;
  std::string::size_type v84;
  unint64_t v85;
  double v86;
  __int16 v87;
  std::string v88;
  char *__endptr[3];
  std::string __p;
  uint64_t v91;
  std::string v92;
  void *v93;
  __int128 v94;
  _QWORD v95[4];

  v95[3] = *MEMORY[0x24BDAC8D0];
  v4 = (char *)*((_QWORD *)this + 3);
  v5 = (unsigned __int8 *)*((_QWORD *)this + 4);
  if (v4 == (char *)v5)
    goto LABEL_7;
  while (1)
  {
    v7 = *v4;
    v8 = v7 > 0x20;
    v9 = (1 << v7) & 0x100002600;
    if (v8 || v9 == 0)
      break;
    *((_QWORD *)this + 3) = ++v4;
    if (v4 == (char *)v5)
      goto LABEL_7;
  }
  if (v4 == (char *)v5)
  {
LABEL_7:
    v11 = "Unexpected EOF";
    goto LABEL_8;
  }
  *((_QWORD *)this + 3) = v4 + 1;
  v13 = *v4;
  if (v13 <= 109)
  {
    if (v13 == 34)
    {
      memset(&v92, 0, sizeof(v92));
      v2 = v18;
      if (v18)
      {
        __p = v92;
        memset(&v92, 0, sizeof(v92));
        llvm::json::Value::Value((uint64_t)&v93, (uint64_t *)&__p);
        llvm::json::Value::destroy(a2);
        llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v93);
        llvm::json::Value::destroy(&v93);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      return v2 & 1;
    }
    if (v13 != 91)
    {
      if (v13 == 102)
      {
        LOWORD(v93) = 1;
        LOBYTE(v94) = 0;
        llvm::json::Value::destroy(a2);
        llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v93);
        llvm::json::Value::destroy(&v93);
        v14 = (_BYTE *)*((_QWORD *)this + 3);
        v15 = (_BYTE *)*((_QWORD *)this + 4);
        if (v14 == v15
          || (*((_QWORD *)this + 3) = v14 + 1, *v14 != 97)
          || v14 + 1 == v15
          || (*((_QWORD *)this + 3) = v14 + 2, v14[1] != 108)
          || v14 + 2 == v15
          || (*((_QWORD *)this + 3) = v14 + 3, v14[2] != 115)
          || v14 + 3 == v15
          || (*((_QWORD *)this + 3) = v14 + 4, v14[3] != 101))
        {
          v11 = "Invalid JSON value (false?)";
          goto LABEL_8;
        }
        goto LABEL_165;
      }
      goto LABEL_141;
    }
    LOWORD(v93) = 8;
    v95[0] = 0;
    v94 = 0uLL;
    memset(&v92, 0, sizeof(v92));
    llvm::json::Value::destroy(a2);
    llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v93);
    llvm::json::Value::destroy(&v93);
    __endptr[0] = (char *)&v92;
    std::vector<llvm::json::Value>::__destroy_vector::operator()[abi:nn180100]((void ***)__endptr);
    v20 = *(unsigned __int16 *)a2;
    v19 = (uint64_t *)(a2 + 1);
    if (v20 != 8)
      v19 = 0;
    v21 = (unsigned __int8 *)*((_QWORD *)this + 3);
    v22 = (unsigned __int8 *)*((_QWORD *)this + 4);
    if (v21 == v22)
      goto LABEL_177;
    while (1)
    {
      v23 = *v21;
      if (v23 > 0x20 || ((1 << v23) & 0x100002600) == 0)
        break;
      *((_QWORD *)this + 3) = ++v21;
      if (v21 == v22)
        goto LABEL_47;
    }
    if (v21 == v22 || v23 != 93)
    {
LABEL_177:
      while (1)
      {
LABEL_47:
        v26 = (_WORD *)v19[1];
        v25 = v19[2];
        if ((unint64_t)v26 >= v25)
        {
          v28 = ((uint64_t)v26 - *v19) >> 5;
          if ((unint64_t)(v28 + 1) >> 59)
            abort();
          v29 = v25 - *v19;
          v30 = v29 >> 4;
          if (v29 >> 4 <= (unint64_t)(v28 + 1))
            v30 = v28 + 1;
          v31 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v30;
          v95[1] = v19 + 2;
          v32 = v31
              ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(v19 + 2), v31): 0;
          v33 = &v32[32 * v28];
          v93 = v32;
          *(_QWORD *)&v94 = v33;
          v95[0] = &v32[32 * v31];
          *(_WORD *)v33 = 0;
          *((_QWORD *)&v94 + 1) = v33 + 32;
          std::vector<llvm::json::Value>::__swap_out_circular_buffer(v19, &v93);
          v27 = (_WORD *)v19[1];
          std::__split_buffer<llvm::json::Value>::~__split_buffer((uint64_t)&v93);
        }
        else
        {
          *v26 = 0;
          v27 = v26 + 16;
        }
        v19[1] = (uint64_t)v27;
        v2 = v34;
        if (!v34)
          return v2 & 1;
        v36 = (unsigned __int8 *)*((_QWORD *)this + 3);
        v35 = (unsigned __int8 *)*((_QWORD *)this + 4);
        while (1)
        {
          if (v36 == v35)
            goto LABEL_173;
          v37 = *v36;
          v8 = v37 > 0x20;
          v38 = (1 << v37) & 0x100002600;
          if (v8 || v38 == 0)
            break;
          *((_QWORD *)this + 3) = ++v36;
        }
        if (v36 == v35)
          goto LABEL_173;
        v40 = v36 + 1;
        *((_QWORD *)this + 3) = v36 + 1;
        v41 = (char)*v36;
        if (v41 != 44)
        {
          if (v41 == 93)
            return v2 & 1;
LABEL_173:
          v11 = "Expected , or ] after array element";
          goto LABEL_8;
        }
        while (v40 != v35)
        {
          v42 = *v40;
          v8 = v42 > 0x20;
          v43 = (1 << v42) & 0x100002600;
          if (v8 || v43 == 0)
            break;
          *((_QWORD *)this + 3) = ++v40;
        }
      }
    }
LABEL_164:
    *((_QWORD *)this + 3) = v21 + 1;
LABEL_165:
    v2 = 1;
    return v2 & 1;
  }
  switch(v13)
  {
    case '{':
      LOWORD(v93) = 7;
      v94 = 0uLL;
      memset(&v92, 0, sizeof(v92));
      LODWORD(v95[0]) = 0;
      llvm::json::Value::destroy(a2);
      llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v93);
      llvm::json::Value::destroy(&v93);
      llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll((uint64_t)&v92);
      MEMORY[0x24BD1B398](v92.__r_.__value_.__r.__words[0], 8);
      v46 = *(unsigned __int16 *)a2;
      v45 = (char *)(a2 + 1);
      if (v46 != 7)
        v45 = 0;
      v21 = (unsigned __int8 *)*((_QWORD *)this + 3);
      v47 = (unsigned __int8 *)*((_QWORD *)this + 4);
      if (v21 != v47)
      {
        while (1)
        {
          v48 = *v21;
          if (v48 > 0x20 || ((1 << v48) & 0x100002600) == 0)
            break;
          *((_QWORD *)this + 3) = ++v21;
          if (v21 == v47)
            goto LABEL_83;
        }
        if (v21 != v47 && v48 == 125)
          goto LABEL_164;
      }
      while (1)
      {
LABEL_83:
        v50 = (_BYTE *)*((_QWORD *)this + 3);
        if (v50 == *((_BYTE **)this + 4) || (*((_QWORD *)this + 3) = v50 + 1, *v50 != 34))
        {
          v11 = "Expected object key";
          goto LABEL_8;
        }
        memset(&v92, 0, sizeof(v92));
          goto LABEL_103;
        v52 = (unsigned __int8 *)*((_QWORD *)this + 3);
        v51 = (unsigned __int8 *)*((_QWORD *)this + 4);
        while (1)
        {
          if (v52 == v51)
            goto LABEL_101;
          v53 = *v52;
          v8 = v53 > 0x20;
          v54 = (1 << v53) & 0x100002600;
          if (v8 || v54 == 0)
            break;
          *((_QWORD *)this + 3) = ++v52;
        }
        if (v52 == v51)
          break;
        v56 = v52 + 1;
        *((_QWORD *)this + 3) = v52 + 1;
        if (*v52 != 58)
          break;
        while (v56 != v51)
        {
          v57 = *v56;
          v8 = v57 > 0x20;
          v58 = (1 << v57) & 0x100002600;
          if (v8 || v58 == 0)
            break;
          *((_QWORD *)this + 3) = ++v56;
        }
        v88 = v92;
        memset(&v92, 0, sizeof(v92));
        llvm::json::ObjectKey::ObjectKey(__endptr, (uint64_t)&v88);
        v91 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::try_emplace<decltype(nullptr)>((uint64_t)v45, (uint64_t)__endptr, (uint64_t)&v93);
        v63 = __endptr[0];
        __endptr[0] = 0;
        if (v63)
          std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)__endptr, (uint64_t)v63);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (v62)
        {
          v65 = (unsigned __int8 *)*((_QWORD *)this + 3);
          v64 = (unsigned __int8 *)*((_QWORD *)this + 4);
          while (1)
          {
            if (v65 == v64)
              goto LABEL_131;
            v66 = *v65;
            v8 = v66 > 0x20;
            v67 = (1 << v66) & 0x100002600;
            if (v8 || v67 == 0)
              break;
            *((_QWORD *)this + 3) = ++v65;
          }
          if (v65 == v64)
          {
LABEL_131:
            v60 = this;
            v61 = "Expected , or } after object property";
            goto LABEL_102;
          }
          v69 = v65 + 1;
          *((_QWORD *)this + 3) = v65 + 1;
          v70 = (char)*v65;
          if (v70 == 125)
          {
            LOBYTE(v62) = 0;
            v2 = 1;
          }
          else
          {
            if (v70 != 44)
              goto LABEL_131;
            if (v69 != v64)
            {
              while (1)
              {
                v71 = *v69;
                v8 = v71 > 0x20;
                v72 = (1 << v71) & 0x100002600;
                if (v8 || v72 == 0)
                  break;
                *((_QWORD *)this + 3) = ++v69;
                LOBYTE(v62) = 1;
                if (v69 == v64)
                  goto LABEL_105;
              }
            }
            LOBYTE(v62) = 1;
          }
          goto LABEL_105;
        }
LABEL_104:
        v2 = 0;
LABEL_105:
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if ((v62 & 1) == 0)
          return v2 & 1;
      }
LABEL_101:
      v60 = this;
      v61 = "Expected : after object key";
LABEL_102:
LABEL_103:
      LOBYTE(v62) = 0;
      goto LABEL_104;
    case 't':
      LOWORD(v93) = 1;
      LOBYTE(v94) = 1;
      llvm::json::Value::destroy(a2);
      llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v93);
      llvm::json::Value::destroy(&v93);
      v74 = (_BYTE *)*((_QWORD *)this + 3);
      v75 = (_BYTE *)*((_QWORD *)this + 4);
      if (v74 == v75
        || (*((_QWORD *)this + 3) = v74 + 1, *v74 != 114)
        || v74 + 1 == v75
        || (*((_QWORD *)this + 3) = v74 + 2, v74[1] != 117)
        || v74 + 2 == v75
        || (*((_QWORD *)this + 3) = v74 + 3, v74[2] != 101))
      {
        v11 = "Invalid JSON value (true?)";
        goto LABEL_8;
      }
      goto LABEL_165;
    case 'n':
      LOWORD(v93) = 0;
      llvm::json::Value::destroy(a2);
      llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v93);
      llvm::json::Value::destroy(&v93);
      v16 = (_BYTE *)*((_QWORD *)this + 3);
      v17 = (_BYTE *)*((_QWORD *)this + 4);
      if (v16 == v17
        || (*((_QWORD *)this + 3) = v16 + 1, *v16 != 117)
        || v16 + 1 == v17
        || (*((_QWORD *)this + 3) = v16 + 2, v16[1] != 108)
        || v16 + 2 == v17
        || (*((_QWORD *)this + 3) = v16 + 3, v16[2] != 108))
      {
        v11 = "Invalid JSON value (null?)";
        goto LABEL_8;
      }
      goto LABEL_165;
  }
LABEL_141:
  v76 = v13;
  v77 = v13 - 43;
  if (v77 <= 0x3A && ((1 << v77) & 0x400000004007FEDLL) != 0)
  {
    v93 = v95;
    v94 = xmmword_24AA2ACE0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v93, v76);
    for (i = (char *)*((_QWORD *)this + 3); i != *((char **)this + 4); i = (char *)*((_QWORD *)this + 3))
    {
      v79 = *i;
      if ((v79 - 48) >= 0xA)
      {
        v80 = v79 - 43;
        v8 = v80 > 0x3A;
        v81 = (1 << v80) & 0x40000000400000DLL;
        if (v8 || v81 == 0)
          break;
      }
      *((_QWORD *)this + 3) = i + 1;
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v93, *i);
    }
    __endptr[0] = 0;
    *__error() = 0;
    llvm::SmallVectorTemplateBase<char,true>::push_back(&v93, 0);
    *(_QWORD *)&v94 = v94 - 1;
    v83 = strtoll((const char *)v93, __endptr, 10);
    if (__endptr[0] == (char *)v93 + (_QWORD)v94 && (v84 = v83, *__error() != 34))
    {
      v87 = 3;
    }
    else
    {
      if (v76 == 45
        || (*__error() = 0,
            llvm::SmallVectorTemplateBase<char,true>::push_back(&v93, 0),
            *(_QWORD *)&v94 = v94 - 1,
            v85 = strtoull((const char *)v93, __endptr, 10),
            __endptr[0] != (char *)v93 + (_QWORD)v94)
        || (v84 = v85, *__error() == 34))
      {
        llvm::SmallVectorTemplateBase<char,true>::push_back(&v93, 0);
        *(_QWORD *)&v94 = v94 - 1;
        v86 = strtod((const char *)v93, __endptr);
        LOWORD(v92.__r_.__value_.__l.__data_) = 2;
        *(double *)&v92.__r_.__value_.__l.__size_ = v86;
        llvm::json::Value::destroy(a2);
        llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v92);
        llvm::json::Value::destroy((void **)&v92.__r_.__value_.__l.__data_);
        if (__endptr[0] != (char *)v93 + (_QWORD)v94)
        {
          v2 = 0;
          goto LABEL_169;
        }
LABEL_168:
        v2 = 1;
LABEL_169:
        if (v93 != v95)
          free(v93);
        return v2 & 1;
      }
      v87 = 4;
    }
    LOWORD(v92.__r_.__value_.__l.__data_) = v87;
    v92.__r_.__value_.__l.__size_ = v84;
    llvm::json::Value::destroy(a2);
    llvm::json::Value::moveFrom((uint64_t)a2, (unsigned __int16 *)&v92);
    llvm::json::Value::destroy((void **)&v92.__r_.__value_.__l.__data_);
    goto LABEL_168;
  }
  v11 = "Invalid JSON value";
LABEL_8:
  v2 = 0;
  return v2 & 1;
}

BOOL llvm::json::isUTF8(llvm *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6;
  const unsigned __int8 **v7;
  _BOOL8 result;
  _BOOL4 isLegalUTF8String;
  llvm *v10;

  if (!a2)
    return 1;
  v6 = 0;
  v7 = (const unsigned __int8 **)((char *)a1 + a2);
  while ((*((char *)a1 + v6) & 0x80000000) == 0)
  {
    if (a2 == ++v6)
      return 1;
  }
  v10 = a1;
  isLegalUTF8String = llvm::isLegalUTF8String(&v10, v7, a3);
  result = isLegalUTF8String;
  if (!isLegalUTF8String)
  {
    if (a3)
      *(_QWORD *)a3 = v10 - a1;
  }
  return result;
}

void llvm::json::fixUTF8(char *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  unsigned int *begin;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::vector<unsigned int>::pointer v14;
  unsigned int *v15;
  char *v16;
  std::vector<unsigned int> v17;

  memset(&v17, 0, sizeof(v17));
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:nn180100](&v17, a2);
    end = v17.__end_;
    bzero(v17.__end_, 4 * a2);
    v7 = &end[a2];
    v17.__end_ = v7;
    begin = v17.__begin_;
  }
  else
  {
    v7 = 0;
    begin = 0;
  }
  v15 = begin;
  v16 = a1;
  llvm::ConvertUTF8toUTF32Impl(&v16, &a1[a2], &v15, (unint64_t)v7, 1, 0);
  std::vector<unsigned int>::resize(&v17, v15 - v17.__begin_);
  std::string::basic_string[abi:nn180100]((_QWORD *)a3, (char *)v17.__end_ - (char *)v17.__begin_, 0);
  v14 = v17.__begin_;
  if (*(char *)(a3 + 23) < 0)
  {
    v10 = (char *)v17.__end_ - (char *)v17.__begin_;
    v11 = *(_QWORD *)a3;
    v9 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    v9 = *(unsigned __int8 *)(a3 + 23);
    v10 = (char *)v17.__end_ - (char *)v17.__begin_;
    v11 = a3;
  }
  v13 = v11;
  llvm::ConvertUTF32toUTF8(&v14, (unint64_t)v17.__begin_ + v10, &v13, v11 + v9, 0);
  if (*(char *)(a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = *(_QWORD *)a3;
  std::string::resize((std::string *)a3, v13 - v12, 0);
  if (v17.__begin_)
  {
    v17.__end_ = v17.__begin_;
    operator delete(v17.__begin_);
  }
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  char **v12;
  size_t *v13;
  char *v14;
  char *v15;
  BOOL isEqual;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21[3];
  char *v22[3];

  v4 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v4)
  {
    v6 = *a1;
    llvm::json::ObjectKey::ObjectKey(v22, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
    llvm::json::ObjectKey::ObjectKey(v21, (char *)0xFFFFFFFFFFFFFFFELL, 0);
    v9 = v4 - 1;
    v10 = (v4 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8), v7, v8);
    v11 = v6 + 56 * v10;
    v12 = (char **)(v11 + 8);
    v13 = (size_t *)(v11 + 16);
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)(v11 + 8), *(_QWORD *)(v11 + 16)))
    {
      v4 = 1;
    }
    else
    {
      v20 = 0;
      v19 = 1;
      v4 = 1;
      while (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v11 + 8), *(_QWORD *)(v11 + 16), v22[1], (uint64_t)v22[2]))
      {
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*v12, *v13, v21[1], (uint64_t)v21[2]);
        v18 = v20;
        if (isEqual && v20 == 0)
          v18 = v11;
        v20 = v18;
        v10 = (v10 + v19) & v9;
        v11 = v6 + 56 * v10;
        v12 = (char **)(v11 + 8);
        v13 = (size_t *)(v11 + 16);
        ++v19;
        if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)(v11 + 8), *(_QWORD *)(v11 + 16)))
        {
          goto LABEL_4;
        }
      }
      v4 = 0;
      if (v20)
        v11 = v20;
    }
LABEL_4:
    *a3 = v11;
    v14 = v21[0];
    v21[0] = 0;
    if (v14)
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v21, (uint64_t)v14);
    v15 = v22[0];
    v22[0] = 0;
    if (v15)
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v22, (uint64_t)v15);
  }
  else
  {
    *a3 = 0;
  }
  return v4;
}

char **llvm::json::ObjectKey::ObjectKey(char **a1, char *a2, unint64_t a3)
{
  _OWORD *v6;
  char *v8;
  uint64_t v9;
  char *v10;
  void *__p[2];
  char v12;
  char *v13;
  __int128 v14;

  *a1 = 0;
  a1[1] = a2;
  v6 = a1 + 1;
  a1[2] = (char *)a3;
  if (!llvm::json::isUTF8((llvm *)a2, a3, 0))
  {
    llvm::json::fixUTF8(a2, a3, (uint64_t)__p);
    llvm::json::ObjectKey::ObjectKey(&v13, (uint64_t)__p);
    v8 = v13;
    v13 = 0;
    v9 = (uint64_t)*a1;
    *a1 = v8;
    if (v9)
    {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)a1, v9);
      v10 = v13;
      *v6 = v14;
      v13 = 0;
      if (v10)
        std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)&v13, (uint64_t)v10);
    }
    else
    {
      *v6 = v14;
      v13 = 0;
    }
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return a1;
}

char **llvm::json::ObjectKey::ObjectKey(char **a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  int v10;
  BOOL v11;
  char *v12;
  int v14;
  char *v15;
  unint64_t v16;
  char **v17;
  __int128 v18;
  __int128 v19;
  char *v20;

  v4 = (char *)operator new();
  v5 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v4 + 2) = v5;
  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = v4;
  v6 = HIBYTE(v5);
  v7 = *((_QWORD *)v4 + 1);
  if ((v6 & 0x80u) == 0)
  {
    v8 = v6;
  }
  else
  {
    v4 = *(char **)v4;
    v8 = v7;
  }
  if (!llvm::json::isUTF8((llvm *)v4, v8, 0))
  {
    v14 = (*a1)[23];
    if (v14 >= 0)
      v15 = *a1;
    else
      v15 = *(char **)*a1;
    if (v14 >= 0)
      v16 = (*a1)[23];
    else
      v16 = *((_QWORD *)*a1 + 1);
    llvm::json::fixUTF8(v15, v16, (uint64_t)&v19);
    v17 = (char **)*a1;
    if ((*a1)[23] < 0)
      operator delete(*v17);
    v18 = v19;
    v17[2] = v20;
    *(_OWORD *)v17 = v18;
  }
  v9 = (char **)*a1;
  v10 = (*a1)[23];
  v11 = v10 < 0;
  if (v10 < 0)
    v9 = *(char ***)*a1;
  v12 = (char *)(*a1)[23];
  if (v11)
    v12 = (char *)*((_QWORD *)*a1 + 1);
  a1[1] = (char *)v9;
  a1[2] = v12;
  return a1;
}

void std::default_delete<std::string>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x24BD1B3A4);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::find_as<llvm::StringRef>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
}

void std::vector<llvm::json::Value>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  llvm::json::Value *v2;
  llvm::json::Value *v4;
  void *v5;

  v1 = *a1;
  v2 = (llvm::json::Value *)**a1;
  if (v2)
  {
    v4 = (llvm::json::Value *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (llvm::json::Value *)((char *)v4 - 32);
        llvm::json::Value::destroy(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8[3];
  char *v9[3];

  if (*(_DWORD *)(a1 + 16))
  {
    llvm::json::ObjectKey::ObjectKey(v9, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
    llvm::json::ObjectKey::ObjectKey(v8, (char *)0xFFFFFFFFFFFFFFFELL, 0);
    v2 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v2)
    {
      v3 = *(_QWORD *)a1;
      v4 = 56 * v2;
      do
      {
        if (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v3 + 8), *(_QWORD *)(v3 + 16), v9[1], (uint64_t)v9[2])&& !llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v3 + 8), *(_QWORD *)(v3 + 16), v8[1], (uint64_t)v8[2]))
        {
          llvm::json::Value::destroy((void **)(v3 + 24));
        }
        v5 = *(_QWORD *)v3;
        *(_QWORD *)v3 = 0;
        if (v5)
          std::default_delete<std::string>::operator()[abi:nn180100](v3, v5);
        v3 += 56;
        v4 -= 56;
      }
      while (v4);
    }
    v6 = v8[0];
    v8[0] = 0;
    if (v6)
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v8, (uint64_t)v6);
    v7 = v9[0];
    v9[0] = 0;
    if (v7)
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v9, (uint64_t)v7);
  }
}

uint64_t llvm::json::Value::Value(uint64_t a1, uint64_t *a2)
{
  int v4;
  llvm *v5;
  uint64_t v6;
  __int128 v7;
  int v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;

  *(_WORD *)a1 = 6;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = (llvm *)a2;
  else
    v5 = (llvm *)*a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  if (!llvm::json::isUTF8(v5, v6, 0))
  {
    v9 = *((char *)a2 + 23);
    if (v9 >= 0)
      v10 = (char *)a2;
    else
      v10 = (char *)*a2;
    if (v9 >= 0)
      v11 = *((unsigned __int8 *)a2 + 23);
    else
      v11 = a2[1];
    llvm::json::fixUTF8(v10, v11, (uint64_t)&v12);
    if (*((char *)a2 + 23) < 0)
      operator delete((void *)*a2);
    *(_OWORD *)a2 = v12;
    a2[2] = v13;
  }
  v7 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = a2[2];
  *(_OWORD *)(a1 + 8) = v7;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return a1;
}

uint64_t llvm::json::`anonymous namespace'::Parser::parseError(llvm::json::_anonymous_namespace_::Parser *this, const char *a2)
{
  unint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v4 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  v6 = v5 - v4;
  if (v5 <= v4)
  {
    v8 = 1;
    v10 = v5 - v4;
  }
  else
  {
    v7 = v4 + 1;
    v8 = 1;
    v9 = v5 - v4;
    do
    {
      if (*(_BYTE *)(v7 - 1) == 10)
      {
        ++v8;
        LODWORD(v4) = v7;
      }
      ++v7;
      --v9;
    }
    while (v9);
    v10 = v5 - v4;
  }
  result = operator new();
  v12 = result;
  *(_QWORD *)result = &off_251C12B68;
  *(_QWORD *)(result + 8) = a2;
  *(_DWORD *)(result + 16) = v8;
  *(_DWORD *)(result + 20) = v10;
  *(_DWORD *)(result + 24) = v6;
  if (*((_BYTE *)this + 8))
  {
    result = *(_QWORD *)this;
    if (*(_QWORD *)this)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  *(_QWORD *)this = v12;
  *((_BYTE *)this + 8) = 1;
  return result;
}

void llvm::json::ParseError::~ParseError(llvm::json::ParseError *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::json::ParseError::log(llvm::json::ParseError *this, llvm::raw_ostream *a2)
{
  _QWORD v2[4];
  _QWORD v3[2];
  _QWORD v4[2];
  _QWORD v5[2];
  _QWORD v6[2];
  _QWORD v7[4];

  v2[0] = "[{0}:{1}, byte={2}]: {3}";
  v2[1] = 24;
  v2[2] = v7;
  v2[3] = 4;
  v3[0] = &off_251C12BB8;
  v3[1] = (char *)this + 16;
  v4[0] = &off_251C12BB8;
  v4[1] = (char *)this + 20;
  v5[0] = &off_251C12BB8;
  v5[1] = (char *)this + 24;
  v6[0] = &off_251C12BE8;
  v6[1] = (char *)this + 8;
  v7[0] = v3;
  v7[1] = v4;
  v7[2] = v5;
  v7[3] = v6;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)v2, a2);
}

uint64_t llvm::json::ParseError::convertToErrorCode(llvm::json::ParseError *this)
{
  getErrorErrorCat();
  return 3;
}

void *llvm::ErrorInfo<llvm::json::ParseError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::json::ParseError::ID;
}

BOOL llvm::ErrorInfo<llvm::json::ParseError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::json::ParseError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::detail::provider_format_adapter<unsigned int const&>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned int const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned int,void>::format(unsigned int *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;

  v16 = a3;
  v17 = a4;
  v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      v12 = 0;
      v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78)
            goto LABEL_19;
          goto LABEL_16;
        }
LABEL_17:
        v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100)
        goto LABEL_17;
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6))
      v14 = 0;
    else
      v14 = v18;
    return write_unsigned_impl<unsigned int>(a2, *a1, v14, v12, 0);
  }
  v7 = v15;
  v18 = 0;
  v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  v9 = v18;
  if (v8)
    v9 = 0;
  if ((v7 & 0xFFFFFFFE) == 2)
    v10 = v9 + 2;
  else
    v10 = v9;
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

uint64_t llvm::detail::HelperFunctions::consumeHexStyle(const void **a1, int *a2)
{
  int v3;
  int v5;
  uint64_t v6;

  if (!a1[1])
    return 0;
  v3 = *(unsigned __int8 *)*a1;
  if ((v3 - 65) < 0x1A)
    LOBYTE(v3) = v3 + 32;
  if (v3 != 120)
    return 0;
  if ((llvm::StringRef::consume_front(a1, "x-", 2uLL) & 1) != 0)
  {
    v5 = 1;
  }
  else if ((llvm::StringRef::consume_front(a1, "X-", 2uLL) & 1) != 0)
  {
    v5 = 0;
  }
  else if ((llvm::StringRef::consume_front(a1, "x+", 2uLL) & 1) != 0
         || (llvm::StringRef::consume_front(a1, "x", 1uLL) & 1) != 0)
  {
    v5 = 3;
  }
  else
  {
    v5 = 2;
    if ((llvm::StringRef::consume_front(a1, "X+", 2uLL) & 1) == 0)
    {
      v6 = 1;
      if (!llvm::StringRef::consume_front(a1, "X", 1uLL))
        return v6;
      v5 = 2;
    }
  }
  *a2 = v5;
  return 1;
}

uint64_t llvm::StringRef::consume_front(const void **a1, const void *a2, size_t __n)
{
  size_t v3;
  char *v6;
  size_t v8;

  v3 = (size_t)a1[1];
  if (v3 < __n)
    return 0;
  v6 = (char *)*a1;
  if (__n)
  {
    if (memcmp(*a1, a2, __n))
      return 0;
  }
  if (v3 >= __n)
    v8 = __n;
  else
    v8 = v3;
  *a1 = &v6[v8];
  a1[1] = (const void *)(v3 - v8);
  return 1;
}

void llvm::detail::provider_format_adapter<char const* const&>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<char const* const&>::format(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  return llvm::format_provider<char const*,void>::format(*(const char ***)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<char const*,void>::format(const char **a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  int v6;
  int v7;
  unint64_t v8;
  const char *v9;
  size_t v10;
  size_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;

  if (a4)
  {
    v13 = 0;
    v14 = a3;
    v15 = a4;
    v6 = llvm::consumeUnsignedInteger((llvm *)&v14, (llvm::StringRef *)0xA, &v13, a4);
    if (v15)
      v7 = 1;
    else
      v7 = v6;
    if (v7)
      v8 = -1;
    else
      v8 = v13;
  }
  else
  {
    v8 = -1;
  }
  v9 = *a1;
  if (v9)
    v10 = strlen(v9);
  else
    v10 = 0;
  if (v10 >= v8)
    v11 = v8;
  else
    v11 = v10;
  return llvm::raw_ostream::operator<<(a2, v9, v11);
}

uint64_t llvm::json::`anonymous namespace'::Parser::parseString(llvm::json::_anonymous_namespace_::Parser *a1, std::string *this)
{
  char *v4;
  unsigned __int8 *v5;
  int v6;
  const char *v8;
  int v9;

  v4 = (char *)*((_QWORD *)a1 + 3);
  v5 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  if (v4 == (char *)v5)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    *((_QWORD *)a1 + 3) = v4 + 1;
    v6 = *v4;
    if (v6 == 34)
      return 1;
    ++v4;
  }
  v8 = "Invalid escape sequence";
  while (1)
  {
    if (v4 == (char *)v5)
    {
      v8 = "Unterminated string";
      goto LABEL_33;
    }
    if (v6 < 0x20u)
      break;
    if (v6 == 92)
    {
      *((_QWORD *)a1 + 3) = v4 + 1;
      v9 = *v4;
      if (v9 > 97)
      {
        switch(v9)
        {
          case 'n':
            LOBYTE(v6) = 10;
            break;
          case 'o':
          case 'p':
          case 'q':
          case 's':
            goto LABEL_33;
          case 'r':
            LOBYTE(v6) = 13;
            break;
          case 't':
            LOBYTE(v6) = 9;
            break;
          case 'u':
              return 0;
            goto LABEL_11;
          default:
            if (v9 == 102)
            {
              LOBYTE(v6) = 12;
            }
            else
            {
              if (v9 != 98)
                goto LABEL_33;
              LOBYTE(v6) = 8;
            }
            break;
        }
      }
      else
      {
        LOBYTE(v6) = v9;
        if (v9 != 34 && v9 != 47 && v9 != 92)
          goto LABEL_33;
      }
    }
    std::string::push_back(this, v6);
LABEL_11:
    v4 = (char *)*((_QWORD *)a1 + 3);
    v5 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
    if (v4 == (char *)v5)
    {
      v6 = 0;
    }
    else
    {
      *((_QWORD *)a1 + 3) = v4 + 1;
      v6 = *v4++;
    }
    if (v6 == 34)
      return 1;
  }
  v8 = "Control character in string";
LABEL_33:
  return 0;
}

uint64_t llvm::json::`anonymous namespace'::Parser::parseUnicode(llvm::json::_anonymous_namespace_::Parser *a1, std::string *this)
{
  char *v3;
  char *v4;
  char v5;
  char v6;
  uint64_t v7;
  unsigned __int16 v8;
  uint64_t v9;
  __int16 v10;
  unsigned __int16 v11;
  uint64_t v12;
  unsigned __int16 v14;
  unsigned __int16 v15;
  unsigned int v16;
  _BYTE *v17;
  std::string::value_type *v18;
  llvm::json::_anonymous_namespace_::Parser *v19;
  unsigned __int16 v20;
  char v21;
  char v22;
  char v23;
  char v24;
  std::string::value_type v25[2];
  char v26;
  __int16 v27;
  char v28;
  std::string::value_type __s[2];
  char v30;

  v3 = (char *)*((_QWORD *)a1 + 3);
  v4 = (char *)*((_QWORD *)a1 + 4);
  if (v3 == v4)
  {
    v5 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 3) = v3 + 1;
    v5 = *v3++;
  }
  v21 = v5;
  if (v3 == v4)
  {
    v22 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 3) = v3 + 1;
    v22 = *v3;
    if (v3 + 1 != v4)
    {
      *((_QWORD *)a1 + 3) = v3 + 2;
      v23 = v3[1];
      if (v3 + 2 == v4)
      {
        v6 = 0;
      }
      else
      {
        *((_QWORD *)a1 + 3) = v3 + 3;
        v6 = v3[2];
      }
      goto LABEL_10;
    }
  }
  v6 = 0;
  v23 = 0;
LABEL_10:
  v7 = 0;
  v8 = 0;
  v24 = v6;
  do
  {
    v9 = *(&v21 + v7);
    if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v9 + 60) & 0x10000) == 0)
    {
      return 0;
    }
    if (v9 <= 0x39)
      v10 = v9 - 48;
    else
      v10 = (v9 & 0xFFDF) - 55;
    v8 = v10 | (16 * v8);
    ++v7;
  }
  while (v7 != 4);
  if ((unsigned __int16)((unsigned __int16)(v8 + 0x2000) >> 11) >= 0x1Fu)
  {
    while ((unsigned __int16)(v8 >> 10) < 0x37u)
    {
      v17 = (_BYTE *)*((_QWORD *)a1 + 3);
      if ((unint64_t)(v17 + 2) > *((_QWORD *)a1 + 4) || *v17 != 92 || v17[1] != 117)
      {
        v27 = -16401;
        v28 = -67;
        v18 = (std::string::value_type *)&v27;
        goto LABEL_33;
      }
      *((_QWORD *)a1 + 3) = v17 + 2;
      v20 = 0;
      v19 = a1;
      if (!(_DWORD)v12)
        return v12;
      if ((unsigned __int16)((unsigned __int16)(v20 + 0x2000) >> 10) >= 0x3Fu)
      {
        return v12;
      }
      *(_WORD *)__s = -16401;
      v30 = -67;
      v14 = v20;
      v15 = v20 + 0x2000;
      std::string::append(this, __s, 3uLL);
      v11 = v14;
      v16 = v15 >> 11;
      v8 = v14;
      a1 = v19;
      if (v16 < 0x1F)
        goto LABEL_18;
    }
    *(_WORD *)v25 = -16401;
    v26 = -67;
    v18 = v25;
LABEL_33:
    std::string::append(this, v18, 3uLL);
  }
  else
  {
    v11 = v8;
LABEL_18:
  }
  return 1;
}

uint64_t llvm::json::`anonymous namespace'::Parser::parseUnicode(std::string &)::$_1::operator()(llvm::json::_anonymous_namespace_::Parser *a1, _WORD *a2)
{
  char *v2;
  char *v3;
  char v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  char v13;
  char v14;
  char v15;
  char v16;

  *a2 = 0;
  v2 = (char *)*((_QWORD *)a1 + 3);
  v3 = (char *)*((_QWORD *)a1 + 4);
  if (v2 == v3)
  {
    v4 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 3) = v2 + 1;
    v4 = *v2++;
  }
  v13 = v4;
  if (v2 == v3)
  {
    v14 = 0;
  }
  else
  {
    *((_QWORD *)a1 + 3) = v2 + 1;
    v14 = *v2;
    if (v2 + 1 != v3)
    {
      *((_QWORD *)a1 + 3) = v2 + 2;
      v15 = v2[1];
      if (v2 + 2 == v3)
      {
        v5 = 0;
      }
      else
      {
        *((_QWORD *)a1 + 3) = v2 + 3;
        v5 = v2[2];
      }
      goto LABEL_11;
    }
  }
  v5 = 0;
  v15 = 0;
LABEL_11:
  v6 = 0;
  v7 = 0;
  v16 = v5;
  v8 = MEMORY[0x24BDAC740];
  while (1)
  {
    v9 = *(&v13 + v6);
    v10 = *(_DWORD *)(v8 + 4 * v9 + 60);
    if ((v10 & 0x10000) == 0)
      break;
    if (v9 <= 0x39)
      v11 = v9 - 48;
    else
      v11 = (v9 & 0xFFFFFFDF) - 55;
    v7 = v11 | (16 * v7);
    *a2 = v7;
    if (++v6 == 4)
      return HIWORD(v10) & 1;
  }
  return HIWORD(v10) & 1;
}

void llvm::json::`anonymous namespace'::encodeUtf8(unsigned int a1, std::string *this)
{
  char v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  if (a1 > 0x7F)
  {
    if (a1 > 0x7FF)
    {
      if (HIWORD(a1))
      {
        v6 = (a1 >> 12) & 0x3F | 0xFFFFFF80;
        v7 = (a1 >> 6) & 0x3F | 0xFFFFFF80;
        v8 = a1 & 0x3F | 0x80;
        std::string::push_back(this, (a1 >> 18) | 0xF0);
        std::string::push_back(this, v6);
        std::string::push_back(this, v7);
        LOBYTE(a1) = v8;
      }
      else
      {
        v4 = (a1 >> 6) & 0x3F | 0xFFFFFF80;
        v5 = a1 & 0x3F | 0x80;
        std::string::push_back(this, (a1 >> 12) | 0xE0);
        std::string::push_back(this, v4);
        LOBYTE(a1) = v5;
      }
    }
    else
    {
      v3 = a1 & 0x3F | 0x80;
      std::string::push_back(this, (a1 >> 6) | 0xC0);
      LOBYTE(a1) = v3;
    }
  }
  std::string::push_back(this, a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::initEmpty(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  __int128 *v5;
  __int128 *v6[3];

  *(_QWORD *)(a1 + 8) = 0;
  llvm::json::ObjectKey::ObjectKey((char **)v6, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)a1;
    v4 = 56 * v2;
    do
    {
      *v3 = 0;
      v3[1] = 0;
      v3[2] = 0;
      llvm::json::ObjectKey::operator=(v3, v6);
      v3 += 7;
      v4 -= 56;
    }
    while (v4);
  }
  v5 = v6[0];
  v6[0] = 0;
  if (v5)
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v6, (uint64_t)v5);
}

uint64_t *llvm::json::ObjectKey::operator=(uint64_t *a1, __int128 **a2)
{
  std::string *v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  if (*a2)
  {
    v4 = (std::string *)operator new();
    v5 = (uint64_t)v4;
    v6 = *a2;
    if (*((char *)*a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
    }
    else
    {
      v7 = *v6;
      v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
      *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
    }
    v8 = *a1;
    *a1 = v5;
    if (v8)
    {
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)a1, v8);
      v5 = *a1;
    }
    v9 = *(char *)(v5 + 23);
    v10 = v9 < 0;
    v11 = *(_QWORD *)v5;
    if (v9 >= 0)
      v11 = v5;
    v12 = *(unsigned __int8 *)(v5 + 23);
    if (v10)
      v12 = *(_QWORD *)(v5 + 8);
    a1[1] = v11;
    a1[2] = v12;
  }
  else
  {
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  }
  return a1;
}

uint64_t *std::vector<llvm::json::Value>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = (unsigned __int16 *)*result;
  v4 = (unsigned __int16 *)result[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 32;
    v4 -= 16;
    result = (uint64_t *)llvm::json::Value::moveFrom(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<llvm::json::Value>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 32;
    llvm::json::Value::destroy((void **)(i - 32));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  char **v12;
  size_t *v13;
  char *v14;
  char *v15;
  BOOL isEqual;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21[3];
  char *v22[3];

  v4 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v4)
  {
    v6 = *a1;
    llvm::json::ObjectKey::ObjectKey(v22, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
    llvm::json::ObjectKey::ObjectKey(v21, (char *)0xFFFFFFFFFFFFFFFELL, 0);
    v9 = v4 - 1;
    v10 = (v4 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a2 + 8), *(_QWORD *)(a2 + 8) + *(_QWORD *)(a2 + 16), v7, v8);
    v11 = v6 + 56 * v10;
    v12 = (char **)(v11 + 8);
    v13 = (size_t *)(v11 + 16);
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(_QWORD *)(a2 + 16), *(void **)(v11 + 8), *(_QWORD *)(v11 + 16)))
    {
      v4 = 1;
    }
    else
    {
      v20 = 0;
      v19 = 1;
      v4 = 1;
      while (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(v11 + 8), *(_QWORD *)(v11 + 16), v22[1], (uint64_t)v22[2]))
      {
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*v12, *v13, v21[1], (uint64_t)v21[2]);
        v18 = v20;
        if (isEqual && v20 == 0)
          v18 = v11;
        v20 = v18;
        v10 = (v10 + v19) & v9;
        v11 = v6 + 56 * v10;
        v12 = (char **)(v11 + 8);
        v13 = (size_t *)(v11 + 16);
        ++v19;
        if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(_QWORD *)(a2 + 16), *(void **)(v11 + 8), *(_QWORD *)(v11 + 16)))
        {
          goto LABEL_4;
        }
      }
      v4 = 0;
      if (v20)
        v11 = v20;
    }
LABEL_4:
    *a3 = v11;
    v14 = v21[0];
    v21[0] = 0;
    if (v14)
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v21, (uint64_t)v14);
    v15 = v22[0];
    v22[0] = 0;
    if (v15)
      std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v22, (uint64_t)v15);
  }
  else
  {
    *a3 = 0;
  }
  return v4;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucketImpl<llvm::json::ObjectKey>(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  int v6;
  unsigned int v7;
  char *v9;
  char *v11[3];

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::grow(a1, v7);
  v11[0] = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>((uint64_t *)a1, a3, v11);
  a4 = v11[0];
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  llvm::json::ObjectKey::ObjectKey(v11, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
  if (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*((char **)a4 + 1), *((_QWORD *)a4 + 2), v11[1], (uint64_t)v11[2]))--*(_DWORD *)(a1 + 12);
  v9 = v11[0];
  v11[0] = 0;
  if (v9)
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v11, (uint64_t)v9);
  return a4;
}

void llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(56 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::moveFromOldBuckets(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x24BD1B398);
  }
  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::initEmpty(a1);
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12[3];
  char *v13[3];
  uint64_t v14;

  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::initEmpty(a1);
  llvm::json::ObjectKey::ObjectKey(v13, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
  llvm::json::ObjectKey::ObjectKey(v12, (char *)0xFFFFFFFFFFFFFFFELL, 0);
  while (a2 != a3)
  {
    if (!llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(_QWORD *)(a2 + 16), v13[1], (uint64_t)v13[2])&& !llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a2 + 8), *(_QWORD *)(a2 + 16), v12[1], (uint64_t)v12[2]))
    {
      v14 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>((uint64_t *)a1, a2, &v14);
      v6 = v14;
      v7 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = v7;
      if (v8)
        std::default_delete<std::string>::operator()[abi:nn180100](v6, v8);
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(a2 + 8);
      llvm::json::Value::moveFrom(v6 + 24, (unsigned __int16 *)(a2 + 24));
      ++*(_DWORD *)(a1 + 8);
      llvm::json::Value::destroy((void **)(a2 + 24));
    }
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    if (v9)
      std::default_delete<std::string>::operator()[abi:nn180100](a2, v9);
    a2 += 56;
  }
  v10 = v12[0];
  v12[0] = 0;
  if (v10)
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v12, (uint64_t)v10);
  v11 = v13[0];
  v13[0] = 0;
  if (v11)
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v13, (uint64_t)v11);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::try_emplace<decltype(nullptr)>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  char *v7;
  char v8;
  uint64_t v9;
  char *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::LookupBucketFor<llvm::json::ObjectKey>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucket<llvm::json::ObjectKey,decltype(nullptr)>(a1, v10, a2);
    v7 = (char *)result;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

char *llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucket<llvm::json::ObjectKey,decltype(nullptr)>(uint64_t a1, char *a2, uint64_t a3)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::InsertIntoBucketImpl<llvm::json::ObjectKey>(a1, a3, a3, a2);
  v5 = v4;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  v7 = *(_QWORD *)v4;
  *(_QWORD *)v4 = v6;
  if (v7)
    std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v4, v7);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)(a3 + 8);
  *((_WORD *)v5 + 12) = 0;
  return v5;
}

void llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::destroyAll(a1);
  MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
  v4 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v4;
  if ((_DWORD)v4)
  {
    *(_QWORD *)a1 = operator new(56 * v4, (std::align_val_t)8uLL);
    llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>>(a1, (_QWORD *)a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>,llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>::copyFrom<llvm::DenseMap<llvm::json::ObjectKey,llvm::json::Value,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::json::ObjectKey,llvm::json::Value>>>(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  __int128 **v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  _BOOL4 isEqual;
  char *v16;
  char *v17;
  char *v18[3];
  char *v19[3];

  *(_QWORD *)(a1 + 8) = a2[1];
  if (*(_DWORD *)(a1 + 16))
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (uint64_t *)(*(_QWORD *)a1 + v4);
      v7 = (__int128 **)(*a2 + v4);
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      llvm::json::ObjectKey::operator=(v6, v7);
      v8 = *(_QWORD *)a1 + v4;
      v9 = *(char **)(v8 + 8);
      v10 = *(_QWORD *)(v8 + 16);
      llvm::json::ObjectKey::ObjectKey(v19, (char *)0xFFFFFFFFFFFFFFFFLL, 0);
      if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(v9, v10, v19[1], (uint64_t)v19[2]))
      {
        v11 = 0;
      }
      else
      {
        v12 = *(_QWORD *)a1 + v4;
        v13 = *(char **)(v12 + 8);
        v14 = *(_QWORD *)(v12 + 16);
        llvm::json::ObjectKey::ObjectKey(v18, (char *)0xFFFFFFFFFFFFFFFELL, 0);
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(v13, v14, v18[1], (uint64_t)v18[2]);
        v16 = v18[0];
        v18[0] = 0;
        if (v16)
          std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v18, (uint64_t)v16);
        v11 = !isEqual;
      }
      v17 = v19[0];
      v19[0] = 0;
      if (v17)
        std::default_delete<std::string>::operator()[abi:nn180100]((uint64_t)v19, (uint64_t)v17);
      if (v11)
        llvm::json::Value::copyFrom((llvm::json::Value *)(*(_QWORD *)a1 + v4 + 24), (const llvm::json::Value *)(*a2 + v4 + 24));
      ++v5;
      v4 += 56;
    }
    while (v5 < *(unsigned int *)(a1 + 16));
  }
}

char *std::vector<llvm::json::Value>::__init_with_size[abi:nn180100]<llvm::json::Value*,llvm::json::Value*>(char *result, const llvm::json::Value *a2, const llvm::json::Value *a3, unint64_t a4)
{
  char *v6;
  llvm::json::Value *v7;

  if (a4)
  {
    v6 = result;
    result = std::vector<llvm::json::Value>::__vallocate[abi:nn180100](result, a4);
    v7 = (llvm::json::Value *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      result = (char *)llvm::json::Value::copyFrom(v7, a2);
      a2 = (const llvm::json::Value *)((char *)a2 + 32);
      v7 = (llvm::json::Value *)((char *)v7 + 32);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

char *std::vector<llvm::json::Value>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

char *std::vector<unsigned int>::__vallocate[abi:nn180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      abort();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *std::string::basic_string[abi:nn180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t llvm::APInt::operator=(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x24BD1B380]();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  return a1;
}

void llvm::ManagedStaticBase::RegisterManagedStatic(llvm::ManagedStaticBase *this, void *(*a2)(void), void (*a3)(void *))
{
  unsigned __int8 v6;
  uint64_t v7;

  {
    MEMORY[0x24BD1B224](&getManagedStaticMutex(void)::m);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB0A8], &getManagedStaticMutex(void)::m, &dword_24A800000);
  }
  std::recursive_mutex::lock(&getManagedStaticMutex(void)::m);
  if (!*(_QWORD *)this)
  {
    atomic_store((uint64_t)a2(), (unint64_t *)this);
    v7 = StaticList;
    *((_QWORD *)this + 1) = a3;
    *((_QWORD *)this + 2) = v7;
    StaticList = (uint64_t)this;
  }
  std::recursive_mutex::unlock(&getManagedStaticMutex(void)::m);
}

char *operator new(uint64_t a1, unsigned __int8 **a2)
{
  const void *v3;
  const void *v4;
  size_t v5;
  size_t v6;
  char *v7;
  size_t *v8;
  void *v9;
  void *v11;
  __int128 v12;
  _QWORD v13[33];

  v13[32] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef(*a2, (uint64_t)&v11);
  v4 = v3;
  v6 = v5;
  v7 = (char *)operator new(a1 + v5 + 9);
  v8 = (size_t *)&v7[a1];
  *v8 = v6;
  v9 = v8 + 1;
  if (v6)
    memcpy(v9, v4, v6);
  *((_BYTE *)v9 + v6) = 0;
  if (v11 != v13)
    free(v11);
  return v7;
}

void getMemBufferCopyImpl(const void *a1@<X0>, size_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  const std::error_category *v8;
  uint64_t v9;

  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(a2, a3, 0, &v9);
  v7 = v9;
  if (v9)
  {
    if (a2)
      memmove(*(void **)(v9 + 8), a1, a2);
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v7;
  }
  else
  {
    v8 = std::generic_category();
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = 12;
    *(_QWORD *)(a4 + 8) = v8;
  }
}

void llvm::Twine::toStringRef(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  BOOL v5;

  if (a1[33] != 1 || ((v2 = a1[32], v3 = v2 > 5, v4 = (1 << v2) & 0x3A, !v3) ? (v5 = v4 == 0) : (v5 = 1), v5))
    llvm::Twine::toVector((llvm::Twine *)a1, a2);
  else
    llvm::Twine::getSingleStringRef((llvm::Twine *)a1);
}

_QWORD *getFileAux<llvm::MemoryBuffer>@<X0>(const llvm::Twine *a1@<X0>, size_t a2@<X1>, off_t a3@<X2>, int a4@<W3>, int a5@<W4>, char a6@<W5>, __int16 a7@<W6>, uint64_t a8@<X8>)
{
  int v15;
  llvm::sys::Process *v16;
  _QWORD *result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21[2];
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a4)
    v15 = 3;
  else
    v15 = 0;
  llvm::sys::fs::openNativeFileForRead((uint64_t)a1, v15, 0, (uint64_t)v21);
  if ((v22 & 1) != 0)
  {
    v20 = *(_QWORD **)v21;
    v18 = llvm::errorToErrorCode(&v20);
    *(_BYTE *)(a8 + 16) |= 1u;
    *(_QWORD *)a8 = v18;
    *(_QWORD *)(a8 + 8) = v19;
    result = v20;
    if (v20)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v20 + 8))(v20);
  }
  else
  {
    v16 = (llvm::sys::Process *)v21[0];
    getOpenFileImpl<llvm::MemoryBuffer>(v21[0], a1, 0xFFFFFFFFFFFFFFFFLL, a2, a3, a5, a6, a7, a8);
    return (_QWORD *)llvm::sys::Process::SafelyCloseFileDescriptor(v16);
  }
  return result;
}

void llvm::WritableMemoryBuffer::getNewUninitMemBuffer(size_t a1@<X0>, unsigned __int8 *a2@<X1>, __int16 a3@<W2>, _QWORD *a4@<X8>)
{
  size_t v7;
  const void *v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  _QWORD v20[33];

  v20[32] = *MEMORY[0x24BDAC8D0];
  v18 = v20;
  v19 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef(a2, (uint64_t)&v18);
  v9 = v8;
  v10 = v7 + 33;
  if ((a3 & 0xFF00) != 0)
    v11 = 1 << a3;
  else
    v11 = 16;
  v12 = a1 + v11 + v10 + 1;
  if (v12 <= a1)
  {
    v15 = 0;
  }
  else
  {
    v13 = v7;
    v14 = operator new(v12, MEMORY[0x24BEDB6B8]);
    v15 = v14;
    if (v14)
    {
      v14[3] = v13;
      v16 = (char *)(v14 + 4);
      if (v13)
        memcpy(v14 + 4, v9, v13);
      v16[v13] = 0;
      v17 = ((unint64_t)v15 + v10 + v11 - 1) & -v11;
      *(_BYTE *)(v17 + a1) = 0;
      *v15 = off_251C12C50;
      v15[1] = v17;
      v15[2] = v17 + a1;
    }
  }
  *a4 = v15;
  if (v18 != v20)
    free(v18);
}

void getOpenFileImpl<llvm::MemoryBuffer>(uint64_t a1@<X0>, const llvm::Twine *a2@<X1>, size_t a3@<X2>, size_t a4@<X3>, off_t a5@<X4>, int a6@<W5>, char a7@<W6>, __int16 a8@<W7>, uint64_t a9@<X8>)
{
  unsigned __int8 v17;
  int v18;
  BOOL v19;
  char v20;
  char *v21;
  llvm::sys::Process *PageSizeEstimate;
  unint64_t v23;
  int v24;
  llvm::sys::Process *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  unint64_t v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  const std::error_category *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  llvm::sys::Process *v41;
  _QWORD *v42;
  __int128 v43;
  _QWORD v44[7];
  stat v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v17 = atomic_load((unsigned __int8 *)&qword_25795E250);
  if ((v17 & 1) == 0)
  {
    v40 = a3;
    v41 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_25795E250);
    a3 = v40;
    if ((_DWORD)v41)
    {
      _MergedGlobals = llvm::sys::Process::getPageSizeEstimate(v41);
      __cxa_guard_release(&qword_25795E250);
      a3 = v40;
    }
  }
  if (a4 == -1)
  {
    a4 = a3;
    if (a3 == -1)
    {
      v43 = 0u;
      memset(v44, 0, 28);
      v26 = fstat(a1, &v45);
      v27 = llvm::sys::fs::fillStatus(v26, &v45.st_dev, (uint64_t)&v43);
      if ((_DWORD)v27)
      {
        *(_BYTE *)(a9 + 16) |= 1u;
        *(_QWORD *)a9 = v27;
        *(_QWORD *)(a9 + 8) = v28;
        return;
      }
      if (LODWORD(v44[3]) != 2 && LODWORD(v44[3]) != 5)
      {
        getMemoryBufferForStream(a1, a2);
        llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>::moveConstruct<std::unique_ptr<llvm::WritableMemoryBuffer>>((std::error_category *)a9, (uint64_t)&v45);
        if ((v45.st_uid & 1) == 0)
        {
          v37 = *(_QWORD *)&v45.st_dev;
          *(_QWORD *)&v45.st_dev = 0;
          if (v37)
            goto LABEL_43;
        }
        return;
      }
      a4 = v44[2];
      a3 = v44[2];
    }
  }
  v18 = _MergedGlobals;
  if (a6 && (a7 & 1) != 0)
    goto LABEL_25;
  v19 = a4 >= 0x4000 && a4 >= _MergedGlobals;
  v20 = !v19;
  if (v19 && a6)
  {
    if (a3 != -1)
    {
LABEL_16:
      if (a4 + a5 != a3 || (a3 & (v18 - 1)) == 0)
        goto LABEL_25;
LABEL_20:
      std::system_category();
      *(_QWORD *)&v45.st_dev = a2;
      v21 = operator new(48, (unsigned __int8 **)&v45);
      *(_QWORD *)v21 = &off_251C12C88;
      PageSizeEstimate = (llvm::sys::Process *)llvm::sys::Process::getPageSizeEstimate((llvm::sys::Process *)v21);
      v23 = (((int)PageSizeEstimate - 1) & (unint64_t)a5) + a4;
      v24 = llvm::sys::Process::getPageSizeEstimate(PageSizeEstimate);
      *((_QWORD *)v21 + 3) = v23;
      *((_QWORD *)v21 + 4) = 0;
      *((_DWORD *)v21 + 10) = 0;
      v25 = (llvm::sys::Process *)llvm::sys::fs::mapped_file_region::init((size_t *)v21 + 3, a1, -v24 & (unint64_t)a5, 0);
      if (!(_DWORD)v25)
      {
        v38 = *((_QWORD *)v21 + 4);
        v39 = v38 + ((int)(llvm::sys::Process::getPageSizeEstimate(v25) - 1) & (unint64_t)a5);
        *((_QWORD *)v21 + 1) = v39;
        *((_QWORD *)v21 + 2) = v39 + a4;
        *(_BYTE *)(a9 + 16) &= ~1u;
        *(_QWORD *)a9 = v21;
        return;
      }
      *((_QWORD *)v21 + 3) = 0;
      *((_QWORD *)v21 + 4) = 0;
      *((_DWORD *)v21 + 10) = 0;
      (*(void (**)(char *))(*(_QWORD *)v21 + 8))(v21);
      goto LABEL_25;
    }
    v43 = 0u;
    memset(v44, 0, 28);
    v29 = fstat(a1, &v45);
    if (!llvm::sys::fs::fillStatus(v29, &v45.st_dev, (uint64_t)&v43))
    {
      a3 = v44[2];
      goto LABEL_16;
    }
  }
  else if ((v20 & 1) == 0)
  {
    goto LABEL_20;
  }
LABEL_25:
  llvm::WritableMemoryBuffer::getNewUninitMemBuffer(a4, (unsigned __int8 *)a2, a8, &v43);
  if (!(_QWORD)v43)
  {
    v36 = std::generic_category();
    *(_BYTE *)(a9 + 16) |= 1u;
    *(_QWORD *)a9 = 12;
    *(_QWORD *)(a9 + 8) = v36;
    return;
  }
  v30 = *(char **)(v43 + 8);
  v31 = *(_QWORD *)(v43 + 16) - (_QWORD)v30;
  do
  {
    if (!v31)
      goto LABEL_40;
    llvm::sys::fs::readNativeFileSlice(a1, v30, v31, a5, (uint64_t)&v45);
    if ((v45.st_ino & 1) != 0)
    {
      v33 = *(_QWORD **)&v45.st_dev;
      *(_QWORD *)&v45.st_dev = 0;
      v42 = v33;
      v34 = llvm::errorToErrorCode(&v42);
      *(_BYTE *)(a9 + 16) |= 1u;
      *(_QWORD *)a9 = v34;
      *(_QWORD *)(a9 + 8) = v35;
      if (v42)
        (*(void (**)(_QWORD *))(*v42 + 8))(v42);
      v32 = 1;
    }
    else
    {
      if (*(_QWORD *)&v45.st_dev)
      {
        v32 = 0;
        v31 -= *(_QWORD *)&v45.st_dev;
        v30 += *(_QWORD *)&v45.st_dev;
        a5 += *(_QWORD *)&v45.st_dev;
        continue;
      }
      bzero(v30, v31);
      if ((v45.st_ino & 1) == 0)
        goto LABEL_40;
      v32 = 3;
    }
    if (*(_QWORD *)&v45.st_dev)
      (*(void (**)(_QWORD))(**(_QWORD **)&v45.st_dev + 8))(*(_QWORD *)&v45.st_dev);
  }
  while (!v32);
  if (v32 == 3)
  {
LABEL_40:
    *(_BYTE *)(a9 + 16) &= ~1u;
    *(_QWORD *)a9 = v43;
    return;
  }
  v37 = v43;
  if ((_QWORD)v43)
LABEL_43:
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
}

void getMemoryBufferForStream(uint64_t a1, const llvm::Twine *a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  __int128 v12;
  _QWORD v13[2049];

  v2 = MEMORY[0x24BDAC7A8](a1, a2);
  v4 = v3;
  v6 = v5;
  v13[2048] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = xmmword_24AA2B320;
  llvm::sys::fs::readNativeFileToEOF(v2, &v11, 0x4000uLL, &v10);
  if (v10)
  {
    v9 = v10;
    v7 = llvm::errorToErrorCode(&v9);
    *(_BYTE *)(v6 + 16) |= 1u;
    *(_QWORD *)v6 = v7;
    *(_QWORD *)(v6 + 8) = v8;
    if (v9)
      (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  }
  else
  {
    getMemBufferCopyImpl(v11, v12, v4, v6);
  }
  if (v11 != v13)
    free(v11);
}

void llvm::Twine::getSingleStringRef(llvm::Twine *this)
{
  __asm { BR              X10 }
}

const char *sub_24A8435CC(const char **a1)
{
  const char *v1;

  v1 = *a1;
  if (*a1)
    strlen(*a1);
  return v1;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::MemoryBuffer>::getBufferKind()
{
  return 0;
}

uint64_t llvm::sys::Process::getPageSizeEstimate(llvm::sys::Process *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  llvm::sys::Process::getPageSize((uint64_t)&v3);
  if ((v4 & 1) == 0)
    return v3;
  v2 = v3;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v2);
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
  return 4096;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 32;
}

uint64_t `anonymous namespace'::MemoryBufferMem<llvm::WritableMemoryBuffer>::getBufferKind()
{
  return 0;
}

_QWORD *`anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(_QWORD *a1)
{
  void *v2;

  *a1 = &off_251C12C88;
  v2 = (void *)a1[4];
  if (v2)
    munmap(v2, a1[3]);
  return a1;
}

void `anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::~MemoryBufferMMapFile(_QWORD *__p)
{
  void *v2;

  *__p = &off_251C12C88;
  v2 = (void *)__p[4];
  if (v2)
    munmap(v2, __p[3]);
  operator delete(__p);
}

uint64_t `anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferIdentifier(uint64_t a1)
{
  return a1 + 56;
}

void *`anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::dontNeedIfMmap(uint64_t a1)
{
  void *result;

  result = *(void **)(a1 + 32);
  if (result)
    return (void *)posix_madvise(result, *(_QWORD *)(a1 + 24), 4);
  return result;
}

uint64_t `anonymous namespace'::MemoryBufferMMapFile<llvm::MemoryBuffer>::getBufferKind()
{
  return 1;
}

std::error_category *llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>>::moveConstruct<std::unique_ptr<llvm::WritableMemoryBuffer>>(std::error_category *result, uint64_t a2)
{
  std::error_category *v2;
  char v3;
  std::error_category_vtbl *v4;
  std::error_category_vtbl *v5;

  v2 = result;
  v3 = (char)result[2].__vftable;
  if ((*(_BYTE *)(a2 + 16) & 1) != 0)
  {
    LOBYTE(result[2].__vftable) = v3 | 1;
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
    {
      v5 = *(std::error_category_vtbl **)a2;
      result = *(std::error_category **)(a2 + 8);
    }
    else
    {
      result = (std::error_category *)std::system_category();
      v5 = 0;
    }
    v2->__vftable = v5;
    v2[1].__vftable = (std::error_category_vtbl *)result;
  }
  else
  {
    LOBYTE(result[2].__vftable) = v3 & 0xFE;
    v4 = *(std::error_category_vtbl **)a2;
    *(_QWORD *)a2 = 0;
    result->__vftable = v4;
  }
  return result;
}

_QWORD *llvm::SmallVectorImpl<char>::resizeImpl<true>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;

  v2 = result[1];
  if (v2 != a2)
  {
    v4 = result;
    if (v2 <= a2 && result[2] < a2)
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, a2, 1);
    v4[1] = a2;
  }
  return result;
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unsigned int a2, size_t a3, int a4)
{
  int v4;

  if ((a2 & 0x80000000) != 0)
  {
    a2 = -a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *write_unsigned<unsigned long>(llvm::raw_ostream *a1, unint64_t a2, size_t a3, int a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;
  _BYTE *v12;
  size_t v13;
  _BYTE *v14;
  const char *v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  if (!HIDWORD(a2))
    return write_unsigned_impl<unsigned int>(a1, a2, a3, a4, a5);
  v8 = 0;
  v9 = 127;
  do
  {
    v16[v9] = (a2 % 0xA) | 0x30;
    v8 += 0x100000000;
    --v9;
    v10 = a2 > 9;
    a2 /= 0xAuLL;
  }
  while (v10);
  v11 = v8 >> 32;
  if (a5)
  {
    v12 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v12 >= *((_QWORD *)a1 + 3))
    {
      a1 = llvm::raw_ostream::write(a1, 45);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v12 + 1;
      *v12 = 45;
    }
  }
  if (a4 != 1 && v11 < a3)
  {
    v13 = v11;
    do
    {
      v14 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v14 >= *((_QWORD *)a1 + 3))
      {
        a1 = llvm::raw_ostream::write(a1, 48);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v14 + 1;
        *v14 = 48;
      }
      ++v13;
    }
    while (v13 < a3);
  }
  v15 = (char *)&v17 - v11;
  if (a4 == 1)
    return writeWithCommas(a1, v15, v11);
  else
    return llvm::raw_ostream::write(a1, v15, v11);
}

llvm::raw_ostream *llvm::write_integer(llvm::raw_ostream *a1, unint64_t a2, size_t a3, int a4)
{
  int v4;

  if ((a2 & 0x8000000000000000) != 0)
  {
    a2 = -(uint64_t)a2;
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  return write_unsigned<unsigned long>(a1, a2, a3, a4, v4);
}

llvm::raw_ostream *llvm::write_hex(llvm::raw_ostream *a1, unint64_t a2, int a3, unint64_t a4, char a5)
{
  unsigned int v5;
  __int128 v6;
  size_t v7;
  char *v8;
  BOOL v9;
  _OWORD v11[8];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (a5)
  {
    if (a4 > 0x7F)
      LODWORD(a4) = 128;
  }
  else
  {
    LODWORD(a4) = 0;
  }
  v5 = (67 - __clz(a2)) >> 2;
  if (v5 <= 1)
    v5 = 1;
  *(_QWORD *)&v6 = 0x3030303030303030;
  *((_QWORD *)&v6 + 1) = 0x3030303030303030;
  v11[6] = v6;
  v11[7] = v6;
  v11[4] = v6;
  v11[5] = v6;
  LODWORD(v7) = v5 + 2 * ((a3 & 0xFFFFFFFE) == 2);
  v11[2] = v6;
  v11[3] = v6;
  if (v7 <= a4)
    v7 = a4;
  else
    v7 = v7;
  v11[0] = v6;
  v11[1] = v6;
  if ((a3 & 0xFFFFFFFE) == 2)
    BYTE1(v11[0]) = 120;
  if (a2)
  {
    v8 = (char *)&v11[-1] + v7 + 15;
    do
    {
      *v8-- = llvm::hexdigit(unsigned int,BOOL)::LUT[a2 & 0xF] | (32 * ((a3 & 0xFFFFFFFD) != 0));
      v9 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v9);
  }
  return llvm::raw_ostream::write(a1, (const char *)v11, v7);
}

void llvm::write_double(llvm::raw_ostream *this, unsigned int a2, unint64_t a3, char a4, double a5)
{
  uint64_t v6;
  unint64_t v7;
  size_t v9;
  const char *v10;
  char v12;
  char v13;
  char *v14;
  size_t v15;
  _BYTE *v16;
  size_t v17;
  void (**v18)(llvm::raw_ostream *__hidden);
  int v19;
  uint64_t v20;
  unint64_t v21;
  _WORD *v22;
  char v23;
  uint64_t v24;
  int v25;
  void **v26;
  char __str[32];
  char *v28;
  __int128 v29;
  _QWORD v30[2];

  v30[1] = *MEMORY[0x24BDAC8D0];
  v6 = 2;
  if (a2 < 2)
    v6 = 6;
  if (a4)
    v7 = a3;
  else
    v7 = v6;
  if (fabs(a5) == INFINITY)
  {
    if (a5 >= 0.0)
      v9 = 3;
    else
      v9 = 4;
    if (a5 >= 0.0)
      v10 = "INF";
    else
      v10 = "-INF";
    llvm::raw_ostream::operator<<(this, v10, v9);
  }
  else
  {
    v28 = (char *)v30;
    v29 = xmmword_24AA2ACB0;
    if (a2 == 1)
      v12 = 69;
    else
      v12 = 102;
    v19 = 0;
    v23 = 0;
    if (a2)
      v13 = v12;
    else
      v13 = 101;
    v24 = 0;
    v25 = 1;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    v18 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    v26 = (void **)&v28;
    llvm::raw_ostream::SetUnbuffered(&v18);
    if (v21 - (unint64_t)v22 > 1)
      *v22++ = 11813;
    else
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, "%.", 2uLL);
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v18, v7, 0, 0, 0);
    v14 = (char *)v22;
    if ((unint64_t)v22 >= v21)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v18, v13);
    }
    else
    {
      v22 = (_WORD *)((char *)v22 + 1);
      *v14 = v13;
    }
    if (a2 == 3)
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v28, 0);
      *(_QWORD *)&v29 = v29 - 1;
      snprintf(__str, 0x20uLL, v28, a5 * 100.0);
      v15 = strlen(__str);
      llvm::raw_ostream::operator<<(this, __str, v15);
      v16 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v16 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 37);
      }
      else
      {
        *((_QWORD *)this + 4) = v16 + 1;
        *v16 = 37;
      }
    }
    else
    {
      llvm::SmallVectorTemplateBase<char,true>::push_back(&v28, 0);
      *(_QWORD *)&v29 = v29 - 1;
      snprintf(__str, 0x20uLL, v28, *(_QWORD *)&a5);
      v17 = strlen(__str);
      llvm::raw_ostream::operator<<(this, __str, v17);
    }
    v18 = off_251C13948;
    if (v25 == 1 && v20)
      MEMORY[0x24BD1B380](v20, 0x1000C8077774924);
    if (v28 != (char *)v30)
      free(v28);
  }
}

llvm::raw_ostream *write_unsigned_impl<unsigned int>(llvm::raw_ostream *a1, unsigned int a2, size_t a3, int a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  size_t v10;
  _BYTE *v11;
  size_t v12;
  _BYTE *v13;
  const char *v14;
  _BYTE v16[128];
  uint64_t v17;

  v7 = 0;
  v17 = *MEMORY[0x24BDAC8D0];
  v8 = 127;
  do
  {
    v16[v8] = (a2 % 0xA) | 0x30;
    v7 += 0x100000000;
    --v8;
    v9 = a2 > 9;
    a2 /= 0xAu;
  }
  while (v9);
  v10 = v7 >> 32;
  if (a5)
  {
    v11 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)a1 + 3))
    {
      a1 = llvm::raw_ostream::write(a1, 45);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v11 + 1;
      *v11 = 45;
    }
  }
  if (a4 != 1 && v10 < a3)
  {
    v12 = v10;
    do
    {
      v13 = (_BYTE *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v13 >= *((_QWORD *)a1 + 3))
      {
        a1 = llvm::raw_ostream::write(a1, 48);
      }
      else
      {
        *((_QWORD *)a1 + 4) = v13 + 1;
        *v13 = 48;
      }
      ++v12;
    }
    while (v12 < a3);
  }
  v14 = (char *)&v17 - v10;
  if (a4 == 1)
    return writeWithCommas(a1, v14, v10);
  else
    return llvm::raw_ostream::write(a1, v14, v10);
}

llvm::raw_ostream *writeWithCommas(llvm::raw_ostream *a1, const char *a2, size_t a3)
{
  size_t v3;
  unint64_t v5;
  unint64_t v6;
  size_t v7;
  llvm::raw_ostream *result;
  uint64_t v9;
  const char *v10;
  _BYTE *v11;

  v3 = a3;
  v5 = (a3 - 1) / 3;
  v6 = (a3 - 1) % 3;
  v7 = a3 - (v6 + 1);
  if (a3 >= v6 + 1)
    a3 = v6 + 1;
  result = llvm::raw_ostream::write(a1, a2, a3);
  if (v7)
  {
    v9 = -3 * v5;
    v10 = &a2[v3];
    do
    {
      v11 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v11 >= *((_QWORD *)result + 3))
      {
        result = llvm::raw_ostream::write(result, 44);
      }
      else
      {
        *((_QWORD *)result + 4) = v11 + 1;
        *v11 = 44;
      }
      result = llvm::raw_ostream::write(result, &v10[v9], 3uLL);
      v9 += 3;
    }
    while (v9);
  }
  return result;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, unint64_t *a4, unint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<unsigned long long>::parse(a1 + 160, a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getValueExpectedFlagDefault()
{
  return 2;
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C12CC0;
  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C12CC0;
  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 24);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 160), a1, a2);
}

void llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if (a3)
  {
    v3 = *(_QWORD *)(a1 + 128);
LABEL_5:
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &off_251C12D28;
    v5[1] = v4;
    llvm::cl::parser<unsigned long long>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, v3, (uint64_t)v5, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v3 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::setDefault(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

BOOL llvm::cl::OptionValueCopy<unsigned long long>::compare(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8);
}

void std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C12D48;
  return result;
}

void std::__function::__func<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1},std::allocator<llvm::cl::opt<unsigned long long,false,llvm::cl::parser<unsigned long long>>::{lambda(unsigned long long const&)#1}>,void ()(unsigned long long const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C12D48;
}

uint64_t llvm::Regex::Regex(uint64_t a1, char *a2, uint64_t a3, unsigned int a4)
{
  _OWORD *v8;

  v8 = (_OWORD *)operator new();
  *v8 = 0u;
  v8[1] = 0u;
  *(_QWORD *)a1 = v8;
  *((_QWORD *)v8 + 2) = &a2[a3];
  *(_DWORD *)(a1 + 8) = llvm_regcomp((uint64_t)v8, a2, ((4 * a4) & 8 | (2 * (a4 & 1)) | (a4 >> 2) & 1) ^ 0x21);
  return a1;
}

void llvm::Regex::~Regex(llvm::Regex *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  if (v2)
  {
    llvm_regfree(v2);
    if (*(_QWORD *)this)
      MEMORY[0x24BD1B3A4](*(_QWORD *)this, 0x1070C404B019E81);
  }
}

size_t `anonymous namespace'::RegexErrorToString(int a1, uint64_t a2, uint64_t a3)
{
  size_t v6;
  _BYTE *v7;

  v6 = llvm_regerror(a1, a2, 0, 0);
  std::string::resize((std::string *)a3, v6 - 1, 0);
  if (*(char *)(a3 + 23) >= 0)
    v7 = (_BYTE *)a3;
  else
    v7 = *(_BYTE **)a3;
  return llvm_regerror(a1, a2, v7, v6);
}

uint64_t llvm::Regex::match(uint64_t a1, char *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v21[2];
  _QWORD v22[17];

  v22[16] = *MEMORY[0x24BDAC8D0];
  if (!a5)
  {
    if (*(_DWORD *)(a1 + 8))
      return 0;
    goto LABEL_9;
  }
  if ((*(char *)(a5 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a5 + 23))
      goto LABEL_5;
    goto LABEL_4;
  }
  if (*(_QWORD *)(a5 + 8))
LABEL_4:
    MEMORY[0x24BD1B104](a5, &str_6);
LABEL_5:
  v10 = *(_DWORD *)(a1 + 8);
  if (v10)
  {
    return 0;
  }
LABEL_9:
  if (a4)
    v12 = *(_DWORD *)(*(_QWORD *)a1 + 8) + 1;
  else
    v12 = 0;
  v21[0] = v22;
  v21[1] = (void *)0x800000000;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  llvm::SmallVectorImpl<llvm_regmatch_t>::resizeImpl<false>((uint64_t)v21, v13);
  v14 = v21[0];
  *(_QWORD *)v21[0] = 0;
  v14[1] = a3;
  v15 = llvm_regexec(*(_QWORD *)a1, a2, v12, v14, 4);
  if (v15)
  {
    if (v15 != 1 && a5)
    v11 = 0;
  }
  else
  {
    if (a4)
    {
      a4[2] = 0;
      if (v12)
      {
        v16 = 0;
        do
        {
          v17 = *(_QWORD *)((char *)v21[0] + v16);
          if (v17 == -1)
          {
            v18 = 0;
            v19 = 0;
          }
          else
          {
            v18 = (uint64_t)&a2[v17];
            v19 = *(_QWORD *)((char *)v21[0] + v16 + 8) - v17;
          }
          llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a4, v18, v19);
          v16 += 16;
        }
        while (16 * v12 != v16);
      }
    }
    v11 = 1;
  }
  if (v21[0] != v22)
    free(v21[0]);
  return v11;
}

void llvm::SmallVectorImpl<llvm_regmatch_t>::resizeImpl<false>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), a2, 16);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 16 * v2), 16 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void llvm::RISCVAttributeParser::stackAlign(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ULEB128;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  BOOL v10;
  std::string *v11;
  std::string::size_type v12;
  void **v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  void **v17;
  uint64_t v18;
  void *__p[2];
  unsigned __int8 v20;
  std::string v21;
  std::string v22;
  void *v23[2];
  _QWORD v24[2];

  v24[1] = *MEMORY[0x24BDAC8D0];
  ULEB128 = llvm::DataExtractor::getULEB128((uint64_t *)this + 16, (llvm::formatv_object_base **)this + 19, (uint64_t *)this + 20);
  v7 = ULEB128;
  if (ULEB128)
  {
    v8 = (char *)v24 + 5;
    v9 = ULEB128;
    do
    {
      *--v8 = (v9 % 0xA) | 0x30;
      v10 = v9 > 9;
      v9 /= 0xAuLL;
    }
    while (v10);
  }
  else
  {
    v8 = (char *)v24 + 4;
    BYTE4(v24[0]) = 48;
  }
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v21, v8, (char *)v24 + 5, (char *)v24 + 5 - v8);
  v11 = std::string::insert(&v21, 0, "Stack alignment is ");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:nn180100]<0>(__p, "-bytes");
  if ((v20 & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v14 = v20;
  else
    v14 = (std::string::size_type)__p[1];
  v15 = std::string::append(&v22, (const std::string::value_type *)v13, v14);
  v16 = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)v23 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v24[0] = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v24[0] >= 0)
    v17 = v23;
  else
    v17 = (void **)v23[0];
  if (v24[0] >= 0)
    v18 = HIBYTE(v24[0]);
  else
    v18 = (uint64_t)v23[1];
  llvm::ELFAttributeParser::printAttribute(this, a2, v7, (uint64_t)v17, v18);
  *a3 = 0;
  if (SHIBYTE(v24[0]) < 0)
    operator delete(v23[0]);
}

void llvm::RISCVAttributeParser::unalignedAccess(llvm::RISCVAttributeParser *this@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::ELFAttributeParser::parseStringAttribute((uint64_t)this, "Unaligned_access", a2, (uint64_t)llvm::RISCVAttributeParser::unalignedAccess::strings, 2uLL, a3);
}

uint64_t llvm::RISCVAttributeParser::handler@<X0>(uint64_t this@<X0>, BOOL *a2@<X2>, uint64_t a3@<X1>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *);
  _QWORD *v10;

  v6 = 0;
  *a2 = 0;
  while (llvm::RISCVAttributeParser::displayRoutines[v6] != a3)
  {
    v6 += 6;
    if (v6 == 36)
      goto LABEL_9;
  }
  v7 = &llvm::RISCVAttributeParser::displayRoutines[v6];
  v9 = (uint64_t (*)(_QWORD *))*((_QWORD *)v7 + 1);
  v8 = *((_QWORD *)v7 + 2);
  v10 = (_QWORD *)(this + (v8 >> 1));
  if ((v8 & 1) != 0)
    v9 = *(uint64_t (**)(_QWORD *))(*v10 + v9);
  this = v9(v10);
  if (!*a4)
  {
    *a2 = 1;
LABEL_9:
    *a4 = 0;
  }
  return this;
}

void llvm::RISCVAttributeParser::~RISCVAttributeParser(llvm::RISCVAttributeParser *this)
{
  llvm::ELFAttributeParser::~ELFAttributeParser(this);
  JUMPOUT(0x24BD1B3A4);
}

BOOL llvm::RISCVISAInfo::compareExtension(uint64_t a1, uint64_t a2)
{
  unsigned int ExtensionRank;
  unsigned int v5;
  int v6;
  int v7;
  size_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;

  ExtensionRank = getExtensionRank((char *)a1);
  v5 = getExtensionRank((char *)a2);
  if (ExtensionRank != v5)
    return ExtensionRank < v5;
  v6 = *(char *)(a2 + 23);
  v7 = *(char *)(a1 + 23);
  if (v7 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  if (v7 >= 0)
    v9 = (const void *)a1;
  else
    v9 = *(const void **)a1;
  if (v6 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  if (v6 >= 0)
    v11 = (const void *)a2;
  else
    v11 = *(const void **)a2;
  if (v10 >= v8)
    v12 = v8;
  else
    v12 = v10;
  v13 = memcmp(v9, v11, v12);
  if (v13)
    return v13 < 0;
  else
    return v8 < v10;
}

uint64_t getExtensionRank(char *a1)
{
  char *v1;
  int v2;

  if (a1[23] >= 0)
    v1 = a1;
  else
    v1 = *(char **)a1;
  v2 = *v1;
  switch(v2)
  {
    case 's':
      return 64;
    case 'x':
      return 256;
    case 'z':
      return singleLetterExtensionRank(v1[1]) | 0x80;
  }
  return singleLetterExtensionRank((char)v2);
}

void llvm::RISCVISAInfo::parseNormalizedArchString(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  int *v16;
  uint64_t **v17;
  char **v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t *v22;
  char *v23;
  unint64_t *v24;
  int v25;
  unint64_t v26;
  size_t v27;
  char *v28;
  BOOL v29;
  char *v30;
  int v31;
  uint64_t *v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t **v44;
  uint64_t *v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  uint64_t *v50;
  uint64_t **v51;
  void *v52;
  void *v53;
  void *v54;
  int v55;
  uint64_t *v56;
  int v57;
  BOOL v58;
  unint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t *v71;
  uint64_t **v72;
  const std::error_category *v73;
  const std::error_category *v74;
  const std::error_category *v75;
  const std::error_category *v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD v85[2];
  void *__p[2];
  uint64_t *v87;
  llvm::formatv_object_base *v88;
  void *v89;
  uint64_t v90;
  _QWORD v91[18];

  v91[16] = *MEMORY[0x24BDAC8D0];
  if (!a2)
    goto LABEL_9;
  v6 = 0;
  v7 = MEMORY[0x24BDAC740];
  do
  {
    v8 = *(char *)(a1 + v6);
    if ((v8 & 0x80000000) != 0)
    {
      if (__maskrune(v8, 0x8000uLL))
      {
LABEL_10:
        v89 = (void *)22;
        v90 = (uint64_t)std::generic_category();
        __p[0] = "string must be lowercase";
        llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)__p, (uint64_t *)&v89, &v84);
        *(_BYTE *)(a3 + 8) |= 1u;
        v9 = v84;
        goto LABEL_11;
      }
    }
    else if ((*(_DWORD *)(v7 + 4 * v8 + 60) & 0x8000) != 0)
    {
      goto LABEL_10;
    }
    ++v6;
  }
  while (a2 != v6);
  if (a2 < 5)
    goto LABEL_9;
  v10 = *(_DWORD *)a1 == 842233458 && *(_BYTE *)(a1 + 4) == 105;
  if (v10 || (*(_DWORD *)a1 == 842233458 ? (v11 = *(_BYTE *)(a1 + 4) == 101) : (v11 = 0), v11))
  {
    v14 = 32;
LABEL_31:
    v15 = operator new();
    *(_QWORD *)(v15 + 4) = 0;
    v16 = (int *)(v15 + 4);
    *(_DWORD *)v15 = v14;
    *(_QWORD *)(v15 + 32) = 0;
    v17 = (uint64_t **)(v15 + 32);
    *(_QWORD *)(v15 + 40) = 0;
    *(_QWORD *)(v15 + 12) = 0;
    *(_QWORD *)(v15 + 24) = v15 + 32;
    v82 = v15;
    v85[0] = a1 + 4;
    v85[1] = a2 - 4;
    v89 = v91;
    v90 = 0x800000000;
    llvm::StringRef::split((unsigned int *)v85, (unsigned int *)&v89, 95, -1, 1);
    if ((_DWORD)v90)
    {
      v18 = (char **)v89;
      v77 = (char **)((char *)v89 + 16 * v90);
      while (1)
      {
        v19 = *v18;
        v20 = v18[1];
        LOBYTE(v88) = 112;
        __p[0] = v19;
        __p[1] = v20;
        v21 = std::string_view::rfind[abi:nn180100]((unsigned __int8 **)__p, (unsigned __int8 *)&v88, 1uLL, 0xFFFFFFFFFFFFFFFFLL);
        if (v21 == -1
          || (v21 >= (unint64_t)v20 ? (v23 = v20) : (v23 = (char *)v21), (unint64_t)v20 <= v21 + 1))
        {
          v73 = std::generic_category();
          __p[0] = (void *)22;
          __p[1] = (void *)v73;
          v88 = (llvm::formatv_object_base *)"extension lacks version in expected format";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v88, (uint64_t *)__p, &v81);
          *(_BYTE *)(a3 + 8) |= 1u;
          *(_QWORD *)a3 = v81;
          v81 = 0;
          goto LABEL_149;
        }
        v88 = 0;
        __p[0] = &v19[v21 + 1];
        __p[1] = &v20[-v21 - 1];
        if ((llvm::consumeUnsignedInteger((llvm *)__p, (llvm::StringRef *)0xA, (unint64_t *)&v88, v22) & 1) != 0
          || __p[1]
          || (v25 = (int)v88, (unint64_t)v88 >> 32))
        {
          v74 = std::generic_category();
          __p[0] = (void *)22;
          __p[1] = (void *)v74;
          v88 = (llvm::formatv_object_base *)"failed to parse minor version number";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v88, (uint64_t *)__p, &v80);
          *(_BYTE *)(a3 + 8) |= 1u;
          *(_QWORD *)a3 = v80;
          v80 = 0;
          goto LABEL_149;
        }
        if (!v23)
          break;
        v26 = 0;
        v27 = (size_t)v23;
        while (v19[v27 - 1] - 48 <= 9)
        {
          if (v27 >= v27 - 1)
            --v27;
          ++v26;
          if (!v27)
            goto LABEL_49;
        }
        if (!v26)
          break;
LABEL_49:
        v28 = &v23[-v26];
        if (v23 < &v23[-v26])
          v28 = v23;
        v29 = (unint64_t)v23 > v26;
        v30 = &v28[(_QWORD)v19];
        if (!v29)
        {
          v30 = v19;
          v28 = 0;
        }
        v88 = 0;
        __p[0] = v30;
        __p[1] = (void *)(v23 - v28);
        if ((llvm::consumeUnsignedInteger((llvm *)__p, (llvm::StringRef *)0xA, (unint64_t *)&v88, v24) & 1) != 0
          || __p[1]
          || (v31 = (int)v88, (unint64_t)v88 >> 32))
        {
          v75 = std::generic_category();
          __p[0] = (void *)22;
          __p[1] = (void *)v75;
          v88 = (llvm::formatv_object_base *)"failed to parse major version number";
          llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v88, (uint64_t *)__p, &v78);
          *(_BYTE *)(a3 + 8) |= 1u;
          *(_QWORD *)a3 = v78;
          v78 = 0;
          goto LABEL_149;
        }
        std::string::basic_string[abi:nn180100](__p, v19, v27);
        v32 = *v17;
        v33 = (uint64_t **)(v15 + 32);
        v34 = (uint64_t **)(v15 + 32);
        if (*v17)
        {
          while (1)
          {
            while (1)
            {
              v34 = (uint64_t **)v32;
              v35 = (uint64_t)(v32 + 4);
              if (!llvm::RISCVISAInfo::compareExtension((uint64_t)__p, (uint64_t)(v32 + 4)))
                break;
              v32 = *v34;
              v33 = v34;
              if (!*v34)
                goto LABEL_63;
            }
            if (!llvm::RISCVISAInfo::compareExtension(v35, (uint64_t)__p))
              break;
            v32 = v34[1];
            if (!v32)
            {
              v33 = v34 + 1;
              goto LABEL_63;
            }
          }
        }
        else
        {
LABEL_63:
          v36 = (uint64_t *)v34;
          v34 = (uint64_t **)operator new(0x40uLL);
          *((_OWORD *)v34 + 2) = *(_OWORD *)__p;
          v37 = v87;
          __p[0] = 0;
          __p[1] = 0;
          v87 = 0;
          v34[6] = v37;
          v34[7] = 0;
          *v34 = 0;
          v34[1] = 0;
          v34[2] = v36;
          *v33 = (uint64_t *)v34;
          v38 = **(_QWORD **)(v15 + 24);
          v39 = (uint64_t *)v34;
          if (v38)
          {
            *(_QWORD *)(v15 + 24) = v38;
            v39 = *v33;
          }
          std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v15 + 32), v39);
          ++*(_QWORD *)(v15 + 40);
        }
        *((_DWORD *)v34 + 14) = v31;
        *((_DWORD *)v34 + 15) = v25;
        if (SHIBYTE(v87) < 0)
          operator delete(__p[0]);
        v18 += 2;
        if (v18 == v77)
          goto LABEL_69;
      }
      v76 = std::generic_category();
      __p[0] = (void *)22;
      __p[1] = (void *)v76;
      v88 = (llvm::formatv_object_base *)"extension lacks version in expected format";
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v88, (uint64_t *)__p, &v79);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v79;
      v79 = 0;
      goto LABEL_149;
    }
LABEL_69:
    *v16 = 0;
    std::string::basic_string[abi:nn180100]<0>(__p, "d");
    v41 = std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(*v17, (uint64_t)__p);
    if (SHIBYTE(v87) < 0)
      operator delete(__p[0]);
    if (v41)
    {
      v42 = 64;
    }
    else
    {
      std::string::basic_string[abi:nn180100]<0>(__p, "f");
      v43 = std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(*v17, (uint64_t)__p);
      if (SHIBYTE(v87) < 0)
        operator delete(__p[0]);
      if (!v43)
        goto LABEL_78;
      v42 = 32;
    }
    *v16 = v42;
LABEL_78:
    v44 = *(uint64_t ***)(v15 + 24);
    if (v44 != v17)
    {
      v45 = *(uint64_t **)(v15 + 24);
      do
      {
        v46 = (_QWORD *)v45[4];
        v47 = *((char *)v45 + 55);
        if (v47 >= 0)
          v46 = v45 + 4;
        v48 = v45[5];
        if (v47 >= 0)
          v48 = *((unsigned __int8 *)v45 + 55);
        if (v48 >= 3 && *(_WORD *)v46 == 30330 && *((_BYTE *)v46 + 2) == 108)
        {
          v52 = (void *)(v48 - 3);
          if (v48 != 3 && *((_BYTE *)v46 + v48 - 1) == 98)
          {
            v53 = (char *)v46 + 3;
            v54 = (void *)(v48 - 4);
            v88 = 0;
            if (v52 < v54)
              v54 = v52;
            __p[0] = v53;
            __p[1] = v54;
            if ((llvm::consumeUnsignedInteger((llvm *)__p, (llvm::StringRef *)0xA, (unint64_t *)&v88, v40) & 1) == 0
              && !__p[1]
              && !((unint64_t)v88 >> 32))
            {
              if (*(_DWORD *)(v15 + 8) <= v88)
                v55 = (int)v88;
              else
                v55 = *(_DWORD *)(v15 + 8);
              *(_DWORD *)(v15 + 8) = v55;
            }
          }
        }
        v50 = (uint64_t *)v45[1];
        if (v50)
        {
          do
          {
            v51 = (uint64_t **)v50;
            v50 = (uint64_t *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            v51 = (uint64_t **)v45[2];
            v10 = *v51 == v45;
            v45 = (uint64_t *)v51;
          }
          while (!v10);
        }
        v45 = (uint64_t *)v51;
      }
      while (v51 != v17);
      do
      {
        v56 = v44[4];
        v57 = *((char *)v44 + 55);
        v58 = v57 < 0;
        if (v57 >= 0)
          v56 = (uint64_t *)(v44 + 4);
        v59 = *((unsigned __int8 *)v44 + 55);
        if (v58)
          v59 = (unint64_t)v44[5];
        v60 = (unsigned __int8 *)(v59 - 3);
        if (v59 >= 3 && *(_WORD *)v56 == 30330 && *((_BYTE *)v56 + 2) == 101)
        {
          v62 = (unsigned __int8 *)v56 + 3;
          v63 = (unsigned __int8 *)(v59 - 4);
          v64 = v63[(_QWORD)v62];
          if (v64 == 102)
          {
            v65 = *(_DWORD *)(v15 + 16);
            if (v65 <= 0x20)
              v65 = 32;
            *(_DWORD *)(v15 + 16) = v65;
            v64 = v63[(_QWORD)v62];
          }
          if (v64 == 100)
          {
            v66 = *(_DWORD *)(v15 + 16);
            if (v66 <= 0x40)
              v66 = 64;
            *(_DWORD *)(v15 + 16) = v66;
          }
          v88 = 0;
          if (v60 >= v63)
            v60 = v63;
          __p[0] = v62;
          __p[1] = v60;
          v67 = llvm::consumeUnsignedInteger((llvm *)__p, (llvm::StringRef *)0xA, (unint64_t *)&v88, v40);
          if (__p[1])
            v68 = 1;
          else
            v68 = v67;
          v69 = v88;
          if ((unint64_t)v88 >= 0x100000000)
            v69 = 0;
          if (v68)
            v70 = 0;
          else
            v70 = v69;
          if (*(_DWORD *)(v15 + 12) > v70)
            v70 = *(_DWORD *)(v15 + 12);
          *(_DWORD *)(v15 + 12) = v70;
        }
        v71 = v44[1];
        if (v71)
        {
          do
          {
            v72 = (uint64_t **)v71;
            v71 = (uint64_t *)*v71;
          }
          while (v71);
        }
        else
        {
          do
          {
            v72 = (uint64_t **)v44[2];
            v10 = *v72 == (uint64_t *)v44;
            v44 = v72;
          }
          while (!v10);
        }
        v44 = v72;
      }
      while (v72 != v17);
    }
    *(_BYTE *)(a3 + 8) &= ~1u;
    v82 = 0;
    *(_QWORD *)a3 = v15;
LABEL_149:
    if (v89 != v91)
      free(v89);
    std::unique_ptr<llvm::RISCVISAInfo>::reset[abi:nn180100](&v82, 0);
    return;
  }
  v12 = *(_DWORD *)a1 == 875984498 && *(_BYTE *)(a1 + 4) == 105;
  if (v12 || (*(_DWORD *)a1 == 875984498 ? (v13 = *(_BYTE *)(a1 + 4) == 101) : (v13 = 0), v13))
  {
    v14 = 64;
    goto LABEL_31;
  }
LABEL_9:
  v89 = (void *)22;
  v90 = (uint64_t)std::generic_category();
  __p[0] = "arch string must begin with valid base ISA";
  llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)__p, (uint64_t *)&v89, &v83);
  *(_BYTE *)(a3 + 8) |= 1u;
  v9 = v83;
LABEL_11:
  *(_QWORD *)a3 = v9;
}

_QWORD *llvm::consumeError(_QWORD **a1)
{
  _QWORD *result;
  _QWORD *v2;

  v2 = *a1;
  *a1 = 0;
  llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v2);
  result = v2;
  if (v2)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v2 + 8))(v2);
  return result;
}

void llvm::RISCVISAInfo::toFeatureVector(llvm::RISCVISAInfo *this@<X0>, std::string **a2@<X8>)
{
  _QWORD *v2;
  char *v3;
  std::allocator<std::string> *v5;
  char v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  size_t size;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  _BOOL4 v14;
  uint64_t i;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *v25;
  std::string *v26;
  unint64_t v27;
  std::string *v28;
  std::string *v29;
  __int128 v30;
  int64x2_t v31;
  std::string *v32;
  char *v33;
  char *v34;
  void *__p[2];
  std::string::size_type v36;
  std::string v37;
  std::__split_buffer<std::string> v38;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  v3 = (char *)this + 32;
  if (v2 != (_QWORD *)((char *)this + 32))
  {
    v5 = (std::allocator<std::string> *)(a2 + 2);
    do
    {
      if (*((char *)v2 + 55) < 0)
        std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v2[4], v2[5]);
      else
        v37 = *(std::string *)(v2 + 4);
      v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v37.__r_.__value_.__l.__size_ != 1)
          goto LABEL_12;
        v7 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) != 1)
          goto LABEL_12;
        v7 = &v37;
      }
      if (v7->__r_.__value_.__s.__data_[0] != 105)
      {
LABEL_12:
        v8 = 0;
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v9 = &v37;
        else
          v9 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        else
          size = v37.__r_.__value_.__l.__size_;
        do
        {
          if (v11)
            break;
          v12 = v8 == 144;
          v8 += 2;
        }
        while (!v12);
        if (v11)
          goto LABEL_27;
        v13 = 0;
        do
        {
          if (v14)
            break;
          v12 = v13 == 34;
          v13 += 2;
        }
        while (!v12);
        if (v14)
        {
LABEL_27:
          for (i = 0; i != 36; i += 2)
          {
              break;
          }
          std::operator+<char>();
          v17 = (unint64_t)a2[1];
          v16 = (unint64_t)a2[2];
          if (v17 >= v16)
          {
            v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)*a2) >> 3);
            v19 = v18 + 1;
            if (v18 + 1 > 0xAAAAAAAAAAAAAAALL)
              abort();
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (_QWORD)*a2) >> 3);
            if (2 * v20 > v19)
              v19 = 2 * v20;
            if (v20 >= 0x555555555555555)
              v21 = 0xAAAAAAAAAAAAAAALL;
            else
              v21 = v19;
            v38.__end_cap_.__value_ = v5;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v5, v21);
              v24 = v23;
            }
            else
            {
              v22 = 0;
              v24 = 0;
            }
            v26 = (std::string *)&v22[24 * v18];
            if (SHIBYTE(v36) < 0)
            {
              std::string::__init_copy_ctor_external(v26, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              v26->__r_.__value_.__r.__words[2] = v36;
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
            }
            v28 = *a2;
            v27 = (unint64_t)a2[1];
            if ((std::string *)v27 == *a2)
            {
              v31 = vdupq_n_s64(v27);
              v29 = v26;
            }
            else
            {
              v29 = v26;
              do
              {
                v30 = *(_OWORD *)(v27 - 24);
                v29[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v27 - 8);
                *(_OWORD *)&v29[-1].__r_.__value_.__l.__data_ = v30;
                --v29;
                *(_QWORD *)(v27 - 16) = 0;
                *(_QWORD *)(v27 - 8) = 0;
                *(_QWORD *)(v27 - 24) = 0;
                v27 -= 24;
              }
              while ((std::string *)v27 != v28);
              v31 = *(int64x2_t *)a2;
            }
            v25 = v26 + 1;
            *a2 = v29;
            a2[1] = v25;
            *(int64x2_t *)&v38.__begin_ = v31;
            v32 = a2[2];
            a2[2] = (std::string *)&v22[24 * v24];
            v38.__end_cap_.__value_ = v32;
            v38.__first_ = (std::__split_buffer<std::string>::pointer)v31.i64[0];
            std::__split_buffer<std::string>::~__split_buffer(&v38);
          }
          else
          {
            if (SHIBYTE(v36) < 0)
            {
              std::string::__init_copy_ctor_external(a2[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
            }
            else
            {
              *(_QWORD *)(v17 + 16) = v36;
              *(_OWORD *)v17 = *(_OWORD *)__p;
            }
            v25 = (std::string *)(v17 + 24);
          }
          a2[1] = v25;
          if (SHIBYTE(v36) < 0)
            operator delete(__p[0]);
          v6 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        }
      }
      if (v6 < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      v33 = (char *)v2[1];
      if (v33)
      {
        do
        {
          v34 = v33;
          v33 = *(char **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          v34 = (char *)v2[2];
          v12 = *(_QWORD *)v34 == (_QWORD)v2;
          v2 = v34;
        }
        while (!v12);
      }
      v2 = v34;
    }
    while (v34 != v3);
  }
}

uint64_t singleLetterExtensionRank(int __c)
{
  _BYTE *v3;

  if (__c == 105)
    return 0;
  if (__c == 101)
    return 1;
  v3 = memchr("mafdqlcbkjtpvnh", __c, 0xFuLL);
  if (!v3 || v3 - "mafdqlcbkjtpvnh" == -1)
    return (__c - 80);
  else
    return (v3 - "mafdqlcbkjtpvnh") + 2;
}

BOOL `anonymous namespace'::FindByName::operator()(const void *a1, size_t a2, char *__s)
{
  if (__s)
  {
    if (strlen(__s) != a2)
      return 0;
    if (!a2)
      return 1;
    return memcmp(__s, a1, a2) == 0;
  }
  else
  {
    return a2 == 0;
  }
}

_QWORD *llvm::utostr@<X0>(llvm *this@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  char *v5;
  BOOL v6;
  char v8;
  uint64_t v9;

  v4 = (unint64_t)this;
  v9 = *MEMORY[0x24BDAC8D0];
  if (!this)
  {
    v5 = &v8;
    v8 = 48;
    if (!a2)
      return std::string::__init_with_size[abi:nn180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
    goto LABEL_5;
  }
  v5 = (char *)&v9;
  do
  {
    *--v5 = (v4 % 0xA) | 0x30;
    v6 = v4 > 9;
    v4 /= 0xAuLL;
  }
  while (v6);
  if (a2)
LABEL_5:
    *--v5 = 45;
  return std::string::__init_with_size[abi:nn180100]<char *,char *>(a3, v5, (char *)&v9, (char *)&v9 - v5);
}

uint64_t std::__tree<std::__value_type<std::string,llvm::RISCVExtensionInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,llvm::RISCVExtensionInfo>,llvm::RISCVISAInfo::ExtensionComparator,true>,std::allocator<std::__value_type<std::string,llvm::RISCVExtensionInfo>>>::__count_unique<std::string>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  if (a1)
  {
    v3 = a1;
    v4 = 1;
    do
    {
      if (!llvm::RISCVISAInfo::compareExtension(a2, (uint64_t)(v3 + 4)))
      {
        if (!llvm::RISCVISAInfo::compareExtension((uint64_t)(v3 + 4), a2))
          return v4;
        ++v3;
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t *std::unique_ptr<llvm::RISCVISAInfo>::reset[abi:nn180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy(v2 + 24, *(char **)(v2 + 32));
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 4 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 4);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

{
  const void *v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(a1, a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 4 * v6);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        memmove(*(void **)a1, v4, 4 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 4);
    }
    v7 = 0;
LABEL_12:
    v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8)
      memcpy((void *)(*(_QWORD *)a1 + 4 * v7), (const void *)(*(_QWORD *)a2 + 4 * v7), *(_QWORD *)a2 + 4 * v8 - (*(_QWORD *)a2 + 4 * v7));
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

void *llvm::SmallPtrSetImplBase::shrink_and_clear(void **this)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  void *v5;

  free(this[1]);
  v2 = *((_DWORD *)this + 5) - *((_DWORD *)this + 6);
  v3 = 1 << (33 - __clz(v2 - 1));
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = 0;
  if (v2 <= 0x10)
    v4 = 32;
  else
    v4 = v3;
  *((_DWORD *)this + 4) = v4;
  v5 = malloc_type_malloc(8 * v4, 0x4065EBACuLL);
  if (!v5)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  this[1] = v5;
  return memset(v5, 255, 8 * *((unsigned int *)this + 4));
}

const void **llvm::SmallPtrSetImplBase::insert_imp_big(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v4;
  unsigned int v5;
  const void **result;

  v4 = *((_DWORD *)this + 5);
  v5 = *((_DWORD *)this + 4);
  if (3 * v5 <= 4 * (v4 - *((_DWORD *)this + 6)))
  {
    if (v5 >= 0x40)
      v5 *= 2;
    else
      v5 = 128;
  }
  else if (v5 - v4 >= v5 >> 3)
  {
    goto LABEL_3;
  }
  llvm::SmallPtrSetImplBase::Grow(this, v5);
LABEL_3:
  result = llvm::SmallPtrSetImplBase::FindBucketFor(this, a2);
  if (*result != a2)
  {
    if (*result == (const void *)-2)
      --*((_DWORD *)this + 6);
    else
      ++*((_DWORD *)this + 5);
    *result = a2;
  }
  return result;
}

void llvm::SmallPtrSetImplBase::Grow(llvm::SmallPtrSetImplBase *this, unsigned int a2)
{
  const void **v4;
  const void **v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  const void **v11;
  const void *v12;

  v5 = *(const void ***)this;
  v4 = (const void **)*((_QWORD *)this + 1);
  v6 = 16;
  if (v4 == *(const void ***)this)
    v6 = 20;
  v7 = *(unsigned int *)((char *)this + v6);
  v8 = 8 * a2;
  v9 = malloc_type_malloc(v8, 0x4065EBACuLL);
  if (!v9 && (a2 || (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)this + 1) = v9;
  *((_DWORD *)this + 4) = a2;
  memset(v9, 255, v8);
  if ((_DWORD)v7)
  {
    v10 = 8 * v7;
    v11 = v4;
    do
    {
      if ((unint64_t)*v11 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = *v11;
        *llvm::SmallPtrSetImplBase::FindBucketFor(this, *v11) = v12;
      }
      ++v11;
      v10 -= 8;
    }
    while (v10);
  }
  if (v4 != v5)
    free(v4);
  *(_QWORD *)((char *)this + 20) = (*((_DWORD *)this + 5) - *((_DWORD *)this + 6));
}

const void **llvm::SmallPtrSetImplBase::FindBucketFor(llvm::SmallPtrSetImplBase *this, const void *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  const void **result;
  const void *v6;
  const void **v7;
  int v8;
  BOOL v9;
  unsigned int v10;

  v2 = *((_DWORD *)this + 4) - 1;
  v3 = *((_QWORD *)this + 1);
  v4 = v2 & ((a2 >> 4) ^ (a2 >> 9));
  result = (const void **)(v3 + 8 * v4);
  v6 = *result;
  if (*result == (const void *)-1)
  {
    v7 = 0;
LABEL_3:
    if (v7)
      return v7;
  }
  else
  {
    v7 = 0;
    v8 = 1;
    while (v6 != a2)
    {
      if (v7)
        v9 = 0;
      else
        v9 = v6 == (const void *)-2;
      if (v9)
        v7 = result;
      v10 = v4 + v8++;
      v4 = v10 & v2;
      result = (const void **)(v3 + 8 * v4);
      v6 = *result;
      if (*result == (const void *)-1)
        goto LABEL_3;
    }
  }
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::mallocForGrow(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  unint64_t New;
  unint64_t v10;
  void *result;

  New = getNewCapacity<unsigned int>(a3, *(unsigned int *)(a1 + 12));
  *a5 = New;
  v10 = New * a4;
  result = malloc_type_malloc(New * a4, 0x4065EBACuLL);
  if (!result && (v10 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  if (result == a2)
    return llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, *a5, 0);
  return result;
}

unint64_t getNewCapacity<unsigned int>(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  if (HIDWORD(result))
    report_size_overflow(result);
  if (a2 == 0xFFFFFFFFLL)
    report_at_maximum_capacity(0xFFFFFFFFuLL);
  v2 = (2 * a2) | 1;
  v3 = 0xFFFFFFFFLL;
  if (v2 < 0xFFFFFFFF)
    v3 = (2 * a2) | 1;
  if (v2 >= result)
    return v3;
  return result;
}

void *llvm::SmallVectorBase<unsigned int>::replaceAllocation(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  void *v9;

  v8 = a4 * a3;
  v9 = malloc_type_malloc(a4 * a3, 0x4065EBACuLL);
  if (!v9 && (v8 || (v9 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  if (a5)
    memcpy(v9, a2, a5 * a3);
  free(a2);
  return v9;
}

void *llvm::SmallVectorBase<unsigned int>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  unint64_t New;
  unint64_t v8;
  void *result;
  void *v10;

  New = getNewCapacity<unsigned int>(a3, *(unsigned int *)(a1 + 12));
  v8 = New * a4;
  if (*(void **)a1 != a2)
  {
    result = malloc_type_realloc(*(void **)a1, New * a4, 0x1DB68EDCuLL);
    v10 = result;
    if (result || !v8 && (result = malloc_type_malloc(1uLL, 0x4065EBACuLL), (v10 = result) != 0))
    {
      if (v10 == a2)
      {
        result = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, New, *(unsigned int *)(a1 + 8));
        v10 = result;
      }
      goto LABEL_13;
    }
LABEL_14:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v10 = malloc_type_malloc(New * a4, 0x4065EBACuLL);
  if (!v10)
  {
    if (v8)
      goto LABEL_14;
    v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
    if (!v10)
      goto LABEL_14;
  }
  if (v10 == a2)
    v10 = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, New, 0);
  result = memcpy(v10, *(const void **)a1, *(unsigned int *)(a1 + 8) * a4);
LABEL_13:
  *(_QWORD *)a1 = v10;
  *(_DWORD *)(a1 + 12) = New;
  return result;
}

void *llvm::SmallVectorBase<unsigned long long>::grow_pod(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *result;
  void *v13;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 == -1)
    report_at_maximum_capacity(0xFFFFFFFFFFFFFFFFLL);
  v8 = (2 * v4) | 1;
  if (v8 <= a3)
    v9 = a3;
  else
    v9 = v8;
  v10 = *(void **)a1;
  v11 = v9 * a4;
  if (v10 != a2)
  {
    result = malloc_type_realloc(v10, v9 * a4, 0x1DB68EDCuLL);
    v13 = result;
    if (result || !v11 && (result = malloc_type_malloc(1uLL, 0x4065EBACuLL), (v13 = result) != 0))
    {
      if (v13 == a2)
      {
        result = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, v9, *(_QWORD *)(a1 + 8));
        v13 = result;
      }
      goto LABEL_17;
    }
LABEL_19:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v13 = malloc_type_malloc(v9 * a4, 0x4065EBACuLL);
  if (!v13)
  {
    if (v11)
      goto LABEL_19;
    v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
    if (!v13)
      goto LABEL_19;
  }
  if (v13 == a2)
    v13 = llvm::SmallVectorBase<unsigned int>::replaceAllocation(a1, a2, a4, v9, 0);
  result = memcpy(v13, *(const void **)a1, *(_QWORD *)(a1 + 8) * a4);
LABEL_17:
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

void report_size_overflow(unint64_t a1)
{
  BOOL v1;
  std::string v2;
  __int16 v3;
  std::string v4;
  std::string v5;
  std::string v6;
  std::string v7;
  std::string v8;

  std::to_string(&v5, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector unable to grow. Requested capacity (", &v5, &v6);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v6, ") is larger than maximum value for size type (", &v7);
  std::to_string(&v4, 0xFFFFFFFFuLL);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v7, (const std::string::value_type *)&v4, &v2);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>(&v2, ")", &v8);
  std::string::~string(&v2);
  std::string::~string(&v4);
  std::string::~string(&v7);
  std::string::~string(&v6);
  std::string::~string(&v5);
  v3 = 260;
  v2.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  llvm::report_fatal_error((llvm *)&v2, (const llvm::Twine *)1, v1);
}

void report_at_maximum_capacity(unint64_t a1)
{
  BOOL v1;
  std::string v2;
  __int16 v3;
  std::string v4;

  std::to_string(&v2, a1);
  std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>("SmallVector capacity unable to grow. Already at maximum size ", &v2, &v4);
  std::string::~string(&v2);
  v3 = 260;
  v2.__r_.__value_.__r.__words[0] = (std::string::size_type)&v4;
  llvm::report_fatal_error((llvm *)&v2, (const llvm::Twine *)1, v1);
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string *a1@<X0>, const std::string::value_type *a2@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::append(a1, a2);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

{
  std::string::size_type v4;
  std::string::size_type v5;
  __n128 *v6;
  __n128 result;

  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  v6 = (__n128 *)std::string::append(a1, a2, v5);
  result = *v6;
  *a3 = *(std::string *)v6->n128_u8;
  v6->n128_u64[0] = 0;
  v6->n128_u64[1] = 0;
  v6[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:nn180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(std::string::value_type *__s@<X0>, std::string *this@<X1>, std::string *a3@<X8>)
{
  __n128 *v4;
  __n128 result;

  v4 = (__n128 *)std::string::insert(this, 0, __s);
  result = *v4;
  *a3 = *(std::string *)v4->n128_u8;
  v4->n128_u64[0] = 0;
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  return result;
}

void llvm::SourceMgr::~SourceMgr(llvm::SourceMgr *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v6;

  v2 = (unsigned int *)*((_QWORD *)this + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)this;
  std::vector<llvm::SourceMgr::SrcBuffer>::__destroy_vector::operator()[abi:nn180100](&v6);
}

uint64_t llvm::SourceMgr::AddIncludeFile(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::SourceMgr::OpenIncludeFile(a1, a2, a4, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v10 = v11;
    v11 = 0;
    v6 = llvm::SourceMgr::AddNewSourceBuffer(a1, &v10, a3);
    v7 = v10;
    v10 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if ((v12 & 1) == 0)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return v6;
}

void llvm::SourceMgr::OpenIncludeFile(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v7;
  BOOL v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v31[32];
  __int16 v32;
  unsigned __int8 v33[32];
  __int16 v34;
  unsigned __int128 __dst;
  uint64_t v36;
  __int16 v37;
  _QWORD v38[2];
  char v39;
  __int16 v40;
  void *v41;
  __int128 v42;
  _WORD v43[32];
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v7 = *(char *)(a2 + 23);
  v8 = v7 < 0;
  v9 = *(_BYTE **)a2;
  if (v7 >= 0)
    v9 = (_BYTE *)a2;
  v10 = *(unsigned __int8 *)(a2 + 23);
  if (v8)
    v10 = *(_QWORD *)(a2 + 8);
  v11 = a1[8];
  v43[4] = 261;
  v41 = v9;
  *(_QWORD *)&v42 = v10;
  if (v11)
    llvm::vfs::FileSystem::getBufferForFile(v11, (uint64_t)&v41, -1, 1, 0, 0, a4);
  else
    getFileAux<llvm::MemoryBuffer>((const llvm::Twine *)&v41, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, 0, a4);
  v12 = *(char *)(a2 + 23);
  v13 = v12 < 0;
  if (v12 >= 0)
    v14 = (_BYTE *)a2;
  else
    v14 = *(_BYTE **)a2;
  v15 = *(unsigned __int8 *)(a2 + 23);
  if (v13)
    v15 = *(_QWORD *)(a2 + 8);
  v41 = v43;
  v42 = xmmword_24AA2B2D0;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v41, v14, &v14[v15]);
  v16 = -1431655765 * ((a1[4] - a1[3]) >> 3);
  if ((_DWORD)v16)
  {
    v17 = 0;
    v18 = 24 * v16;
    do
    {
      if ((*(_BYTE *)(a4 + 16) & 1) == 0)
        break;
      v19 = a1[3] + v17;
      v20 = *(char *)(v19 + 23);
      v21 = *(_QWORD *)(v19 + 8);
      if (v20 >= 0)
        v22 = (_BYTE *)(a1[3] + v17);
      else
        v22 = *(_BYTE **)v19;
      v23 = *(unsigned __int8 *)(v19 + 23);
      if (v20 < 0)
        v23 = v21;
      *(_QWORD *)&v42 = 0;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&v41, v22, &v22[v23]);
      v37 = 260;
      *(_QWORD *)&__dst = a2;
      v40 = 257;
      v34 = 257;
      v32 = 257;
      llvm::sys::path::append(&v41, 0, (unsigned __int8 *)&__dst, (unsigned __int8 *)v38, v33, v31);
      v24 = a1[8];
      v37 = 261;
      __dst = __PAIR128__(v42, (unint64_t)v41);
      if (v24)
        llvm::vfs::FileSystem::getBufferForFile(v24, (uint64_t)&__dst, -1, 1, 0, 0, (uint64_t)v38);
      else
        getFileAux<llvm::MemoryBuffer>((const llvm::Twine *)&__dst, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, 0, (uint64_t)v38);
      if (v38 == (_QWORD *)a4)
      {
        if ((v39 & 1) == 0)
          goto LABEL_33;
      }
      else
      {
        v25 = *(_BYTE *)(a4 + 16);
        if ((v25 & 1) == 0)
        {
          v26 = *(_QWORD *)a4;
          *(_QWORD *)a4 = 0;
          if (v26)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
            v25 = *(_BYTE *)(a4 + 16);
          }
        }
        if ((v39 & 1) == 0)
        {
          *(_BYTE *)(a4 + 16) = v25 & 0xFE;
          v27 = v38[0];
          v38[0] = 0;
          *(_QWORD *)a4 = v27;
LABEL_33:
          v29 = v38[0];
          v38[0] = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          goto LABEL_35;
        }
        *(_BYTE *)(a4 + 16) = v25 | 1;
        v28 = v38[1];
        *(_QWORD *)a4 = v38[0];
        *(_QWORD *)(a4 + 8) = v28;
      }
LABEL_35:
      v17 += 24;
    }
    while (v18 != v17);
  }
  if ((*(_BYTE *)(a4 + 16) & 1) == 0)
  {
    std::string::basic_string[abi:nn180100](&__dst, v41, v42);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v36;
  }
  if (v41 != v43)
    free(v41);
}

uint64_t llvm::SourceMgr::AddNewSourceBuffer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];

  v20 = 0;
  v21 = 0;
  v5 = *a2;
  *a2 = 0;
  v22 = a3;
  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v12 = v11 + 1;
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v12;
    v23[4] = v6;
    v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v6, v14);
    v16 = &v15[24 * v11];
    v23[0] = v15;
    v23[1] = v16;
    v23[3] = &v15[24 * v17];
    v20 = 0;
    *(_QWORD *)v16 = v5;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = a3;
    v21 = 0;
    v23[2] = v16 + 24;
    std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(a1, v23);
    v10 = (_QWORD *)a1[1];
    std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)v23);
  }
  else
  {
    *v9 = v5;
    v9[1] = 0;
    v10 = v9 + 3;
    v9[2] = a3;
  }
  a1[1] = (uint64_t)v10;
  v18 = -1431655765 * (((unint64_t)v10 - *a1) >> 3);
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v20);
  return v18;
}

uint64_t llvm::SourceMgr::FindBufferContainingLoc(uint64_t *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = -1431655765 * ((unint64_t)(a1[1] - *a1) >> 3);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  while (*(_QWORD *)(*(_QWORD *)v2 + 8) > a2 || *(_QWORD *)(*(_QWORD *)v2 + 16) < a2)
  {
    ++v4;
    v2 += 24;
    if (v3 == v4)
      return 0;
  }
  return (v4 + 1);
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumber(uint64_t this, uint64_t a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8);
  if (v2 <= 0xFF)
    return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned char>(this, a2);
  if (!(v2 >> 16))
    return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned short>(this, a2);
  if (HIDWORD(v2))
    return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned long long>(this, a2);
  return llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned int>(this, a2);
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned char>(uint64_t a1, char a2)
{
  unint64_t *Offset;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unint64_t v11;

  Offset = GetOrCreateOffsetCache<unsigned char>((unint64_t **)(a1 + 8), *(_QWORD *)a1);
  v5 = Offset[1];
  v6 = v5 - *Offset;
  if (v5 == *Offset)
  {
    v7 = *Offset;
  }
  else
  {
    v7 = *Offset;
    do
    {
      v8 = (unsigned __int8 *)(v7 + (v6 >> 1));
      v10 = *v8;
      v9 = v8 + 1;
      v11 = v6 >> 1;
      v6 += ~(v6 >> 1);
      if (v10 < (a2 - *(_DWORD *)(*(_QWORD *)a1 + 8)))
        v7 = (unint64_t)v9;
      else
        v6 = v11;
    }
    while (v6);
  }
  return v7 - *Offset + 1;
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned short>(uint64_t a1, __int16 a2)
{
  char **Offset;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unsigned __int16 *v9;
  unsigned int v10;

  Offset = GetOrCreateOffsetCache<unsigned short>((char ***)(a1 + 8), *(_QWORD *)a1);
  v5 = Offset[1];
  if (v5 != *Offset)
  {
    v6 = (v5 - *Offset) >> 1;
    v5 = *Offset;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[2 * (v6 >> 1)];
      v10 = *(unsigned __int16 *)v8;
      v9 = (unsigned __int16 *)(v8 + 2);
      v6 += ~(v6 >> 1);
      if (v10 < (unsigned __int16)(a2 - *(_DWORD *)(*(_QWORD *)a1 + 8)))
        v5 = (char *)v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  return ((unint64_t)(v5 - *Offset) >> 1) + 1;
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned int>(uint64_t a1, int a2)
{
  char **Offset;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  char *v9;
  unsigned int v10;

  Offset = GetOrCreateOffsetCache<unsigned int>((char ***)(a1 + 8), *(_QWORD *)a1);
  v5 = Offset[1];
  if (v5 != *Offset)
  {
    v6 = (v5 - *Offset) >> 2;
    v5 = *Offset;
    do
    {
      v7 = v6 >> 1;
      v8 = (unsigned int *)&v5[4 * (v6 >> 1)];
      v10 = *v8;
      v9 = (char *)(v8 + 1);
      v6 += ~(v6 >> 1);
      if (v10 < a2 - *(_DWORD *)(*(_QWORD *)a1 + 8))
        v5 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  return ((unint64_t)(v5 - *Offset) >> 2) + 1;
}

uint64_t llvm::SourceMgr::SrcBuffer::getLineNumberSpecialized<unsigned long long>(uint64_t a1, uint64_t a2)
{
  char **Offset;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  char *v9;
  unint64_t v10;

  Offset = GetOrCreateOffsetCache<unsigned long long>((char ***)(a1 + 8), *(_QWORD *)a1);
  v5 = Offset[1];
  if (v5 != *Offset)
  {
    v6 = (v5 - *Offset) >> 3;
    v5 = *Offset;
    do
    {
      v7 = v6 >> 1;
      v8 = &v5[8 * (v6 >> 1)];
      v10 = *(_QWORD *)v8;
      v9 = v8 + 8;
      v6 += ~(v6 >> 1);
      if (v10 < a2 - *(_QWORD *)(*(_QWORD *)a1 + 8))
        v5 = v9;
      else
        v6 = v7;
    }
    while (v6);
  }
  return ((unint64_t)(v5 - *Offset) >> 3) + 1;
}

void llvm::SourceMgr::SrcBuffer::~SrcBuffer(llvm::SourceMgr::SrcBuffer *this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    goto LABEL_9;
  v3 = *(_QWORD *)(*(_QWORD *)this + 16) - *(_QWORD *)(*(_QWORD *)this + 8);
  if (v3 > 0xFF && v3 >> 16)
  {
    v4 = *(void **)v2;
    if (!*(_QWORD *)v2)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
LABEL_7:
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }
LABEL_8:
  MEMORY[0x24BD1B3A4](v2, 0x10C402FEFCB83);
  *((_QWORD *)this + 1) = 0;
LABEL_9:
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

unint64_t llvm::SourceMgr::getLineAndColumn(uint64_t *a1, char *a2, int BufferContainingLoc)
{
  uint64_t v5;
  unsigned int LineNumber;
  char *v7;
  _QWORD v9[2];

  if (!BufferContainingLoc)
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a1, (unint64_t)a2);
  v5 = *a1 + 24 * (BufferContainingLoc - 1);
  LineNumber = llvm::SourceMgr::SrcBuffer::getLineNumber(v5, (uint64_t)a2);
  v7 = &a2[-*(_QWORD *)(*(_QWORD *)v5 + 8)];
  v9[0] = *(_QWORD *)(*(_QWORD *)v5 + 8);
  v9[1] = v7;
  return LineNumber | ((unint64_t)(v7
                                        - llvm::StringRef::find_last_of(v9, "\n\r", 2, 0xFFFFFFFFFFFFFFFFLL)) << 32);
}

llvm::raw_ostream *llvm::SourceMgr::PrintIncludeStack(llvm::raw_ostream *result, char *a2, llvm::raw_ostream *a3)
{
  uint64_t *v5;
  int BufferContainingLoc;
  void *v7;
  uint64_t v8;
  const void *v9;
  size_t v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  _BYTE *v13;
  unsigned int LineAndColumn;
  _WORD *v15;

  if (a2)
  {
    v5 = (uint64_t *)result;
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc((uint64_t *)result, (unint64_t)a2);
    llvm::SourceMgr::PrintIncludeStack(v5, *(_QWORD *)(*v5 + 24 * (BufferContainingLoc - 1) + 16), a3);
    v7 = (void *)*((_QWORD *)a3 + 4);
    if (*((_QWORD *)a3 + 3) - (_QWORD)v7 > 0xDuLL)
    {
      qmemcpy(v7, "Included from ", 14);
      *((_QWORD *)a3 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(a3, "Included from ", 0xEuLL);
    }
    v8 = *(_QWORD *)(*v5 + 24 * (BufferContainingLoc - 1));
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    v11 = llvm::raw_ostream::operator<<(a3, v9, v10);
    v12 = v11;
    v13 = (_BYTE *)*((_QWORD *)v11 + 4);
    if (*((_BYTE **)v11 + 3) == v13)
    {
      llvm::raw_ostream::write(v11, ":", 1uLL);
    }
    else
    {
      *v13 = 58;
      ++*((_QWORD *)v11 + 4);
    }
    LineAndColumn = llvm::SourceMgr::getLineAndColumn(v5, a2, BufferContainingLoc);
    result = write_unsigned<unsigned long>(v12, LineAndColumn, 0, 0, 0);
    v15 = (_WORD *)*((_QWORD *)v12 + 4);
    if (*((_QWORD *)v12 + 3) - (_QWORD)v15 > 1uLL)
    {
      *v15 = 2618;
      *((_QWORD *)v12 + 4) += 2;
    }
    else
    {
      return llvm::raw_ostream::write(v12, ":\n", 2uLL);
    }
  }
  return result;
}

void llvm::SourceMgr::GetMessage(uint64_t *a1@<X0>, char *a2@<X1>, int a3@<W2>, llvm::formatv_object_base **a4@<X3>, unint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  int BufferContainingLoc;
  _QWORD *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  unsigned __int8 *v22;
  char *v23;
  int v24;
  size_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v32;
  unint64_t LineAndColumn;
  int v34;
  int v35;
  size_t v36;
  std::string *p_p;
  size_t size;
  size_t v39;
  llvm::formatv_object_base **v40;
  std::string __p;
  void *v46;
  uint64_t v47;
  _QWORD v48[6];

  v48[4] = *MEMORY[0x24BDAC8D0];
  v46 = v48;
  v47 = 0x400000000;
  if (a2)
  {
    v40 = a4;
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(a1, (unint64_t)a2);
    v14 = *(_QWORD **)(*a1 + 24 * (BufferContainingLoc - 1));
    v15 = (char *)(*(uint64_t (**)(_QWORD *))(*v14 + 16))(v14);
    v39 = v16;
    v17 = (char *)v14[1];
    v18 = a2;
    while (v18 != v17)
    {
      v20 = *--v18;
      v19 = v20;
      if (v20 == 13 || v19 == 10)
      {
        v17 = v18 + 1;
        break;
      }
    }
    v22 = (unsigned __int8 *)v14[2];
    v23 = a2;
    if (v22 != (unsigned __int8 *)a2)
    {
      while (1)
      {
        v24 = *v23;
        if (v24 == 10 || v24 == 13)
          break;
        if (++v23 == (char *)v22)
        {
          v23 = (char *)v14[2];
          break;
        }
      }
    }
    v26 = v23 - v17;
    if (a6)
    {
      v27 = &a5[2 * a6];
      do
      {
        v29 = *a5;
        v28 = a5[1];
        if (*a5)
          v30 = v29 > (unint64_t)v23;
        else
          v30 = 1;
        if (!v30 && v28 >= (unint64_t)v17)
        {
          if (v29 < (unint64_t)v17)
            LODWORD(v29) = (_DWORD)v17;
          v32 = (v29 - (_DWORD)v17);
          if (v28 > (unint64_t)v23)
            LODWORD(v28) = (_DWORD)v23;
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v46, v32 | ((unint64_t)(v28 - (_DWORD)v17) << 32));
        }
        a5 += 2;
      }
      while (a5 != v27);
    }
    LineAndColumn = llvm::SourceMgr::getLineAndColumn(a1, a2, BufferContainingLoc);
    v34 = LineAndColumn;
    v35 = HIDWORD(LineAndColumn) - 1;
    v36 = v39;
    a4 = v40;
  }
  else
  {
    v26 = 0;
    v17 = 0;
    v34 = 0;
    v35 = -1;
    v36 = 9;
    v15 = "<unknown>";
  }
  llvm::Twine::str(a4, &__p);
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  llvm::SMDiagnostic::SMDiagnostic(a9, (uint64_t)a1, (uint64_t)a2, v15, v36, v34, v35, a3, p_p, size, v17, v26, v46, v47, a7, a8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v46 != v48)
    free(v46);
}

void llvm::SourceMgr::PrintMessage(llvm::SourceMgr *this, llvm::raw_ostream *a2, const llvm::SMDiagnostic *a3, int a4)
{
  void (*v6)(const llvm::SMDiagnostic *, _QWORD);
  unint64_t v9;
  int BufferContainingLoc;

  v6 = (void (*)(const llvm::SMDiagnostic *, _QWORD))*((_QWORD *)this + 6);
  if (v6)
  {
    v6(a3, *((_QWORD *)this + 7));
  }
  else
  {
    v9 = *((_QWORD *)a3 + 1);
    if (v9)
    {
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc((uint64_t *)this, v9);
      llvm::SourceMgr::PrintIncludeStack(this, *(char **)(*(_QWORD *)this + 24 * (BufferContainingLoc - 1) + 16), a2);
    }
    llvm::SMDiagnostic::print(a3, 0, (char **)a2, a4, 1);
  }
}

void llvm::SMDiagnostic::print(llvm::SMDiagnostic *this, const char *a2, char **a3, int a4, int a5)
{
  int v10;
  size_t v11;
  std::string::size_type v12;
  _WORD *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  _DWORD *v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  _BYTE *v22;
  std::string::size_type v23;
  _WORD *v24;
  int v25;
  const char *v26;
  size_t v27;
  _BYTE *v28;
  _QWORD *v29;
  int v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  std::string *p_b;
  std::string::size_type size;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  llvm::raw_ostream *v45;
  int v46;
  size_t v47;
  size_t v48;
  size_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v53;
  uint64_t v54;
  std::string::size_type v55;
  std::string::size_type v56;
  uint64_t v57;
  size_t v58;
  std::string *v59;
  const void *v60;
  int v61;
  uint64_t v62;
  std::string *v63;
  std::string *v64;
  _BYTE *v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *v68;
  char *v69;
  int v70;
  std::string::size_type v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  int v78;
  unint64_t v79;
  _QWORD *v80;
  std::string *v81;
  char v82;
  char *v83;
  std::string *v84;
  char v85;
  char *v86;
  _BYTE *v87;
  std::string::size_type v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  int v93;
  char v94;
  std::string::size_type v95;
  std::string *v96;
  char v97;
  char *v98;
  std::string *v99;
  std::string *v100;
  char v101;
  char *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  int v106;
  llvm::SMDiagnostic *v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  std::string v111;
  std::string __b;
  llvm::raw_ostream *v113;
  size_t v114;

  if (a4)
    v10 = 0;
  else
    v10 = 2;
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  if (a2 && *a2)
  {
    v11 = strlen(a2);
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, a2, v11);
    v12 = __b.__r_.__value_.__r.__words[0];
    v13 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
    if (*(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v13 > 1uLL)
    {
      *v13 = 8250;
      *(_QWORD *)(v12 + 32) += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
    }
  }
  v14 = *((unsigned __int8 *)this + 39);
  if (*((char *)this + 39) < 0)
  {
    v16 = *((_QWORD *)this + 3);
    if (!v16)
      goto LABEL_38;
    if (v16 != 1)
      goto LABEL_19;
    v15 = (_BYTE *)*((_QWORD *)this + 2);
  }
  else
  {
    if (!*((_BYTE *)this + 39))
      goto LABEL_38;
    v15 = (char *)this + 16;
    if (v14 != 1)
      goto LABEL_19;
  }
  if (*v15 != 45)
  {
LABEL_19:
    v17 = (llvm::raw_ostream *)__b.__r_.__value_.__r.__words[0];
    if ((v14 & 0x80u) == 0)
      v19 = (char *)this + 16;
    else
      v19 = (const char *)*((_QWORD *)this + 2);
    if ((v14 & 0x80u) == 0)
      v20 = *((unsigned __int8 *)this + 39);
    else
      v20 = *((_QWORD *)this + 3);
    goto LABEL_25;
  }
  v17 = (llvm::raw_ostream *)__b.__r_.__value_.__r.__words[0];
  v18 = *(_DWORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v18 <= 6uLL)
  {
    v19 = "<stdin>";
    v20 = 7;
LABEL_25:
    llvm::raw_ostream::write(v17, v19, v20);
    goto LABEL_26;
  }
  *(_DWORD *)((char *)v18 + 3) = 1047423332;
  *v18 = 1685353276;
  *((_QWORD *)v17 + 4) += 7;
LABEL_26:
  if (*((_DWORD *)this + 10) != -1)
  {
    v21 = *(_BYTE **)(__b.__r_.__value_.__r.__words[0] + 32);
    if ((unint64_t)v21 >= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24))
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
    }
    else
    {
      *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 32) = v21 + 1;
      *v21 = 58;
    }
    llvm::write_integer((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 10), 0, 0);
    if (*((_DWORD *)this + 11) != -1)
    {
      v22 = *(_BYTE **)(__b.__r_.__value_.__r.__words[0] + 32);
      if ((unint64_t)v22 >= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24))
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 58);
      }
      else
      {
        *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 32) = v22 + 1;
        *v22 = 58;
      }
      llvm::write_integer((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, *((int *)this + 11) + 1, 0, 0);
    }
  }
  v23 = __b.__r_.__value_.__r.__words[0];
  v24 = *(_WORD **)(__b.__r_.__value_.__r.__words[0] + 32);
  if (*(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24) - (_QWORD)v24 > 1uLL)
  {
    *v24 = 8250;
    *(_QWORD *)(v23 + 32) += 2;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, ": ", 2uLL);
  }
LABEL_38:
  llvm::WithColor::resetColor((llvm::WithColor *)&__b);
  if (a5)
  {
    switch(*((_DWORD *)this + 12))
    {
      case 0:
        llvm::WithColor::error((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      case 1:
        llvm::WithColor::warning((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      case 2:
        llvm::WithColor::remark((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      case 3:
        llvm::WithColor::note((llvm::raw_ostream *)a3, "", 0, a4 ^ 1);
        break;
      default:
        break;
    }
  }
  __b.__r_.__value_.__r.__words[0] = (std::string::size_type)a3;
  LODWORD(__b.__r_.__value_.__r.__words[1]) = v10;
  llvm::WithColor::changeColor(&__b, 8, 1, 0);
  v25 = *((char *)this + 79);
  if (v25 >= 0)
    v26 = (char *)this + 56;
  else
    v26 = (const char *)*((_QWORD *)this + 7);
  if (v25 >= 0)
    v27 = *((unsigned __int8 *)this + 79);
  else
    v27 = *((_QWORD *)this + 8);
  llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, v26, v27);
  v28 = *(_BYTE **)(__b.__r_.__value_.__r.__words[0] + 32);
  if ((unint64_t)v28 >= *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 24))
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__b.__r_.__value_.__l.__data_, 10);
  }
  else
  {
    *(_QWORD *)(__b.__r_.__value_.__r.__words[0] + 32) = v28 + 1;
    *v28 = 10;
  }
  llvm::WithColor::resetColor((llvm::WithColor *)&__b);
  if (*((_DWORD *)this + 10) == -1 || *((_DWORD *)this + 11) == -1)
    return;
  v29 = (_QWORD *)((char *)this + 80);
  v30 = *((char *)this + 103);
  if (v30 >= 0)
    v31 = (char *)this + 80;
  else
    v31 = (char *)*((_QWORD *)this + 10);
  if (v30 >= 0)
    v32 = *((unsigned __int8 *)this + 103);
  else
    v32 = *((_QWORD *)this + 11);
  if (!v32)
  {
LABEL_65:
    std::string::basic_string[abi:nn180100](&__b, v32 + 1, 32);
    v34 = (unsigned int *)*((_QWORD *)this + 13);
    v35 = (unsigned int *)*((_QWORD *)this + 14);
    while (v34 != v35)
    {
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_b = &__b;
      size = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __b.__r_.__value_.__l.__size_;
      if (size >= v34[1])
        size = v34[1];
      v38 = size - *v34;
      if (v38 >= 1)
        memset((char *)p_b + *v34, 126, v38);
      v34 += 2;
    }
    memset(&v111, 0, sizeof(v111));
    v39 = *((unsigned int *)this + 34);
    if (*((char *)this + 103) < 0)
      v40 = *((_QWORD *)this + 11);
    else
      v40 = *((unsigned __int8 *)this + 103);
    v41 = *((int *)this + 11);
    if ((_DWORD)v39)
    {
      v104 = v32;
      v105 = (char *)this + 80;
      v106 = v10;
      v107 = this;
      v108 = 0;
      v42 = *((_QWORD *)this + 1) - v41;
      v109 = v42;
      v110 = v42 + v40;
      v43 = 40 * v39;
      v44 = *((_QWORD *)this + 16) + 24;
      do
      {
        v45 = *(llvm::raw_ostream **)(v44 - 8);
        v46 = *(char *)(v44 + 15);
        if (v46 >= 0)
          v45 = (llvm::raw_ostream *)(v44 - 8);
        v47 = *(_QWORD *)v44;
        v48 = *(unsigned __int8 *)(v44 + 15);
        if (v46 >= 0)
          v49 = *(unsigned __int8 *)(v44 + 15);
        else
          v49 = *(_QWORD *)v44;
        v113 = v45;
        v114 = v49;
        if (llvm::StringRef::find_first_of(&v113, "\n\r\t", 3, 0) == -1)
        {
          v50 = *(_QWORD *)(v44 - 24);
          v51 = *(_QWORD *)(v44 - 16);
          if (v110 >= v50 && v42 <= v51)
          {
            if (v42 <= v50)
              v53 = (v50 - v42);
            else
              v53 = 0;
            if (v108 > v53)
              v54 = (v108 + 1);
            else
              v54 = v53;
            v55 = (v54 + v49);
            v56 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v56 = v111.__r_.__value_.__l.__size_;
            v108 = (v54 + v49);
            if (v56 < v55)
            {
              v57 = v54;
              std::string::resize(&v111, v55, 32);
              v54 = v57;
              v48 = *(unsigned __int8 *)(v44 + 15);
              v47 = *(_QWORD *)v44;
              LOBYTE(v46) = *(_BYTE *)(v44 + 15);
            }
            if ((v46 & 0x80u) == 0)
              v58 = v48;
            else
              v58 = v47;
            if (v58)
            {
              v59 = &v111;
              if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v59 = (std::string *)v111.__r_.__value_.__r.__words[0];
              if ((v46 & 0x80u) == 0)
                v60 = (const void *)(v44 - 8);
              else
                v60 = *(const void **)(v44 - 8);
              memmove((char *)v59 + v54, v60, v58);
            }
            if (v110 <= v51)
              v61 = v110;
            else
              v61 = v51;
            v62 = (v61 - v109);
            v63 = &__b;
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v63 = (std::string *)__b.__r_.__value_.__r.__words[0];
            if ((uint64_t)(v62 - v53) >= 1)
              memset((char *)v63 + v53, 126, v62 - v53);
            v42 = v109;
          }
        }
        v44 += 40;
        v43 -= 40;
      }
      while (v43);
      this = v107;
      LODWORD(v41) = *((_DWORD *)v107 + 11);
      v10 = v106;
      v32 = v104;
      v29 = v105;
    }
    if (v32 >= v41)
    {
      v66 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v66 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v65 = (char *)v66 + (int)v41;
    }
    else
    {
      v64 = &__b;
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v64 = (std::string *)__b.__r_.__value_.__r.__words[0];
      v65 = (char *)v64 + v32;
    }
    *v65 = 94;
    v67 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    v68 = &__b;
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      v67 = __b.__r_.__value_.__l.__size_;
      v68 = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    v69 = (char *)&v68[-1].__r_.__value_.__r.__words[2] + 7;
    while (v67)
    {
      v70 = v69[v67--];
      if (v70 != 32)
      {
        v71 = v67 + 1;
        goto LABEL_136;
      }
    }
    v71 = 0;
LABEL_136:
    std::string::erase(&__b, v71, 0xFFFFFFFFFFFFFFFFLL);
    v72 = *((_BYTE *)this + 103);
    if (v72 >= 0)
      v73 = (uint64_t)v29;
    else
      v73 = *((_QWORD *)this + 10);
    if (v72 >= 0)
      v74 = *((unsigned __int8 *)this + 103);
    else
      v74 = *((_QWORD *)this + 11);
    printSourceLine((llvm::raw_ostream *)a3, v73, v74);
    v113 = (llvm::raw_ostream *)a3;
    LODWORD(v114) = v10;
    llvm::WithColor::changeColor(&v113, 2, 1, 0);
    v75 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v75 = __b.__r_.__value_.__r.__words[1];
    v76 = v75;
    if (v75)
    {
      v77 = 0;
      v78 = 0;
      do
      {
        if (*((char *)this + 103) < 0)
          v79 = *((_QWORD *)this + 11);
        else
          v79 = *((unsigned __int8 *)this + 103);
        if (v79 <= v77)
          goto LABEL_161;
        v80 = v29;
        if ((*((_BYTE *)this + 103) & 0x80) != 0)
          v80 = (_QWORD *)*v29;
        if (*((_BYTE *)v80 + v77) == 9)
        {
          do
          {
            if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v81 = &__b;
            else
              v81 = (std::string *)__b.__r_.__value_.__r.__words[0];
            v82 = v81->__r_.__value_.__s.__data_[v77];
            v83 = (char *)*((_QWORD *)v113 + 4);
            if ((unint64_t)v83 >= *((_QWORD *)v113 + 3))
            {
              llvm::raw_ostream::write(v113, v82);
            }
            else
            {
              *((_QWORD *)v113 + 4) = v83 + 1;
              *v83 = v82;
            }
            ++v78;
          }
          while ((v78 & 7) != 0);
        }
        else
        {
LABEL_161:
          if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v84 = &__b;
          else
            v84 = (std::string *)__b.__r_.__value_.__r.__words[0];
          v85 = v84->__r_.__value_.__s.__data_[v77];
          v86 = (char *)*((_QWORD *)v113 + 4);
          if ((unint64_t)v86 >= *((_QWORD *)v113 + 3))
          {
            llvm::raw_ostream::write(v113, v85);
          }
          else
          {
            *((_QWORD *)v113 + 4) = v86 + 1;
            *v86 = v85;
          }
          ++v78;
        }
        ++v77;
      }
      while (v77 != v76);
    }
    v87 = (_BYTE *)*((_QWORD *)v113 + 4);
    if ((unint64_t)v87 >= *((_QWORD *)v113 + 3))
    {
      llvm::raw_ostream::write(v113, 10);
    }
    else
    {
      *((_QWORD *)v113 + 4) = v87 + 1;
      *v87 = 10;
    }
    llvm::WithColor::resetColor((llvm::WithColor *)&v113);
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    {
      v88 = v111.__r_.__value_.__l.__size_;
      if (!v111.__r_.__value_.__l.__size_)
      {
LABEL_211:
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
        goto LABEL_213;
      }
    }
    else
    {
      v88 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
      if (!*((_BYTE *)&v111.__r_.__value_.__s + 23))
      {
LABEL_213:
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__b.__r_.__value_.__l.__data_);
        return;
      }
    }
    v89 = 0;
    v90 = 0;
    while (1)
    {
      if (*((char *)this + 103) < 0)
        v91 = *((_QWORD *)this + 11);
      else
        v91 = *((unsigned __int8 *)this + 103);
      if (v90 >= v91)
      {
        v94 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        v95 = v111.__r_.__value_.__r.__words[0];
      }
      else
      {
        v92 = v29;
        if ((*((_BYTE *)this + 103) & 0x80) != 0)
          v92 = (_QWORD *)*v29;
        v93 = *((unsigned __int8 *)v92 + v90);
        v94 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
        v95 = v111.__r_.__value_.__r.__words[0];
        if (v93 == 9)
        {
          do
          {
            if (v94 >= 0)
              v96 = &v111;
            else
              v96 = (std::string *)v95;
            v97 = v96->__r_.__value_.__s.__data_[v90];
            v98 = a3[4];
            if (v98 >= a3[3])
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)a3, v97);
            }
            else
            {
              a3[4] = v98 + 1;
              *v98 = v97;
            }
            v94 = HIBYTE(v111.__r_.__value_.__r.__words[2]);
            v95 = v111.__r_.__value_.__r.__words[0];
            if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = &v111;
            else
              v99 = (std::string *)v111.__r_.__value_.__r.__words[0];
            if (v99->__r_.__value_.__s.__data_[v90] != 32)
              ++v90;
            ++v89;
          }
          while ((v89 & 7) != 0 && v90 != v88);
          goto LABEL_206;
        }
      }
      if (v94 >= 0)
        v100 = &v111;
      else
        v100 = (std::string *)v95;
      v101 = v100->__r_.__value_.__s.__data_[v90];
      v102 = a3[4];
      if (v102 >= a3[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a3, v101);
      }
      else
      {
        a3[4] = v102 + 1;
        *v102 = v101;
      }
      ++v89;
LABEL_206:
      if (++v90 >= v88)
      {
        v103 = a3[4];
        if (v103 >= a3[3])
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)a3, 10);
        }
        else
        {
          a3[4] = v103 + 1;
          *v103 = 10;
        }
        goto LABEL_211;
      }
    }
  }
  v33 = 0;
  while ((v31[v33] & 0x80000000) == 0)
  {
    if (v32 == ++v33)
      goto LABEL_65;
  }
  printSourceLine((llvm::raw_ostream *)a3, (uint64_t)v31, v32);
}

void llvm::SourceMgr::PrintMessage(uint64_t *a1, llvm::raw_ostream *a2, char *a3, int a4, llvm::formatv_object_base **a5, unint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  _BYTE v13[16];
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  void *v21;
  char *v22[23];

  v22[22] = *(char **)MEMORY[0x24BDAC8D0];
  llvm::SourceMgr::GetMessage(a1, a3, a4, a5, a6, a7, a9, a10, (uint64_t)v13);
  llvm::SourceMgr::PrintMessage((llvm::SourceMgr *)a1, a2, (const llvm::SMDiagnostic *)v13, a11);
  llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(v22);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
}

uint64_t llvm::SMDiagnostic::SMDiagnostic(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, int a6, int a7, int a8, void *__srca, size_t __lena, void *a11, size_t a12, const void *a13, unint64_t a14, uint64_t a15, uint64_t a16)
{
  void *v22;
  size_t v23;
  size_t v24;
  void *v25;
  size_t v26;
  size_t v27;
  void *v28;
  size_t v29;
  size_t v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  std::string *v35;
  __int128 *v36;
  __int128 v37;
  __int128 *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (__len >= 0x17)
  {
    v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v23 = __len | 7;
    v24 = v23 + 1;
    v22 = operator new(v23 + 1);
    *(_QWORD *)(a1 + 24) = __len;
    *(_QWORD *)(a1 + 32) = v24 | 0x8000000000000000;
    *(_QWORD *)(a1 + 16) = v22;
    goto LABEL_8;
  }
  v22 = (void *)(a1 + 16);
  *(_BYTE *)(a1 + 39) = __len;
  if (__len)
LABEL_8:
    memmove(v22, __src, __len);
  *((_BYTE *)v22 + __len) = 0;
  *(_DWORD *)(a1 + 40) = a6;
  *(_DWORD *)(a1 + 44) = a7;
  *(_DWORD *)(a1 + 48) = a8;
  if (__lena > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (__lena >= 0x17)
  {
    v26 = (__lena & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__lena | 7) != 0x17)
      v26 = __lena | 7;
    v27 = v26 + 1;
    v25 = operator new(v26 + 1);
    *(_QWORD *)(a1 + 64) = __lena;
    *(_QWORD *)(a1 + 72) = v27 | 0x8000000000000000;
    *(_QWORD *)(a1 + 56) = v25;
    goto LABEL_16;
  }
  v25 = (void *)(a1 + 56);
  *(_BYTE *)(a1 + 79) = __lena;
  if (__lena)
LABEL_16:
    memmove(v25, __srca, __lena);
  *((_BYTE *)v25 + __lena) = 0;
  if (a12 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_42;
  if (a12 >= 0x17)
  {
    v29 = (a12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a12 | 7) != 0x17)
      v29 = a12 | 7;
    v30 = v29 + 1;
    v28 = operator new(v29 + 1);
    *(_QWORD *)(a1 + 88) = a12;
    *(_QWORD *)(a1 + 96) = v30 | 0x8000000000000000;
    *(_QWORD *)(a1 + 80) = v28;
    goto LABEL_24;
  }
  v28 = (void *)(a1 + 80);
  *(_BYTE *)(a1 + 103) = a12;
  if (a12)
LABEL_24:
    memmove(v28, a11, a12);
  *((_BYTE *)v28 + a12) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  if (!a14)
    goto LABEL_28;
  if (a14 >> 61)
LABEL_42:
    abort();
  v31 = (char *)operator new(8 * a14);
  *(_QWORD *)(a1 + 104) = v31;
  *(_QWORD *)(a1 + 112) = v31;
  *(_QWORD *)(a1 + 120) = &v31[8 * a14];
  memcpy(v31, a13, 8 * a14);
  *(_QWORD *)(a1 + 112) = &v31[8 * a14];
LABEL_28:
  v32 = a1 + 144;
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x400000000;
  if (0xCCCCCCCCCCCCCCCDLL * ((40 * a16) >> 3) < 5)
  {
    v33 = 0;
    v34 = 0;
    if (!a16)
      goto LABEL_38;
  }
  else
  {
    llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::grow(a1 + 128, 0xCCCCCCCCCCCCCCCDLL * ((40 * a16) >> 3));
    v33 = *(_DWORD *)(a1 + 136);
    v32 = *(_QWORD *)(a1 + 128);
    v34 = v33;
    if (!a16)
      goto LABEL_38;
  }
  v35 = (std::string *)(v32 + 40 * v34 + 16);
  v36 = (__int128 *)(a15 + 16);
  do
  {
    *(_OWORD *)&v35[-1].__r_.__value_.__r.__words[1] = *(v36 - 1);
    if (*((char *)v36 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v35, *(const std::string::value_type **)v36, *((_QWORD *)v36 + 1));
    }
    else
    {
      v37 = *v36;
      v35->__r_.__value_.__r.__words[2] = *((_QWORD *)v36 + 2);
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v37;
    }
    v38 = v36 - 1;
    v35 = (std::string *)((char *)v35 + 40);
    v36 = (__int128 *)((char *)v36 + 40);
  }
  while ((__int128 *)((char *)v38 + 40) != (__int128 *)(a15 + 40 * a16));
  v33 = *(_DWORD *)(a1 + 136);
  v32 = *(_QWORD *)(a1 + 128);
LABEL_38:
  v40 = v33 - 858993459 * ((40 * a16) >> 3);
  v39 = (_DWORD)v40 == 0;
  *(_DWORD *)(a1 + 136) = v40;
  v41 = v32 + 40 * v40;
  v42 = 126 - 2 * __clz(v40);
  if (v39)
    v43 = 0;
  else
    v43 = v42;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(v32, v41, v43, 1);
  return a1;
}

llvm::raw_ostream *printSourceLine(llvm::raw_ostream *result, uint64_t a2, unint64_t a3)
{
  llvm::raw_ostream *v4;
  unsigned int v6;
  int v7;
  unint64_t v8;
  char *v9;
  char *v10;
  unint64_t v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  _BYTE *v16;

  v4 = result;
  if ((_DWORD)a3)
  {
    v6 = 0;
    v7 = 0;
    while (1)
    {
      v8 = v6;
      if (a3 <= v6)
        break;
      v9 = (char *)memchr((void *)(a2 + v6), 9, a3 - v6);
      v10 = &v9[-a2];
      if (!v9 || v10 + 1 == 0)
        break;
      if (a3 >= v8)
        v12 = v8;
      else
        v12 = a3;
      if (v12 <= (unint64_t)v10)
        v13 = &v9[-a2];
      else
        v13 = (char *)v8;
      if ((unint64_t)v13 >= a3)
        v13 = (char *)a3;
      result = llvm::raw_ostream::operator<<(v4, (const void *)(a2 + v12), (size_t)&v13[-v12]);
      v7 = v7 - v8 + (_DWORD)v10;
      do
      {
        v14 = (_BYTE *)*((_QWORD *)v4 + 4);
        if ((unint64_t)v14 >= *((_QWORD *)v4 + 3))
        {
          result = llvm::raw_ostream::write(v4, 32);
        }
        else
        {
          *((_QWORD *)v4 + 4) = v14 + 1;
          *v14 = 32;
        }
        ++v7;
      }
      while ((v7 & 7) != 0);
      v6 = (_DWORD)v10 + 1;
      if ((_DWORD)v10 + 1 == (_DWORD)a3)
        goto LABEL_27;
    }
    if (a3 >= v8)
      v15 = v8;
    else
      v15 = a3;
    result = llvm::raw_ostream::operator<<(v4, (const void *)(a2 + v15), a3 - v15);
  }
LABEL_27:
  v16 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v16 >= *((_QWORD *)v4 + 3))
    return llvm::raw_ostream::write(v4, 10);
  *((_QWORD *)v4 + 4) = v16 + 1;
  *v16 = 10;
  return result;
}

uint64_t *std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      v7 = v2 + v5;
      v8 = *(_OWORD *)(v2 + v5 - 24);
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v6 - 24) = v8;
      *(_QWORD *)(v6 - 8) = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v7 - 16) = 0;
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v9 = *result;
  *result = v4;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char **llvm::SmallVector<llvm::SMFixIt,4u>::~SmallVector(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void std::vector<llvm::SourceMgr::SrcBuffer>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)(v4 - 24));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unint64_t *GetOrCreateOffsetCache<unsigned char>(unint64_t **a1, uint64_t a2)
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  char *v18;
  _BYTE *v19;
  _BYTE *v20;
  char v21;

  v2 = *a1;
  if (!*a1)
  {
    v2 = (unint64_t *)operator new();
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    v5 = *(_QWORD *)(a2 + 8);
    v6 = *(_QWORD *)(a2 + 16) - v5;
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      if (v6 <= 1)
        v9 = 1;
      else
        v9 = v6;
      do
      {
        if (*(_BYTE *)(v5 + v8) == 10)
        {
          v10 = v2[2];
          if ((unint64_t)v7 >= v10)
          {
            v12 = *v2;
            v13 = &v7[-*v2];
            v14 = (unint64_t)(v13 + 1);
            if ((uint64_t)(v13 + 1) < 0)
              abort();
            v15 = v10 - v12;
            if (2 * v15 > v14)
              v14 = 2 * v15;
            if (v15 >= 0x3FFFFFFFFFFFFFFFLL)
              v16 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v16 = v14;
            if (v16)
              v17 = (char *)operator new(v16);
            else
              v17 = 0;
            v18 = &v13[(_QWORD)v17];
            v19 = &v13[(_QWORD)v17];
            *v19 = v8;
            v11 = v19 + 1;
            if (v7 != (_BYTE *)v12)
            {
              v20 = &v7[~v12];
              do
              {
                v21 = *--v7;
                (v20--)[(_QWORD)v17] = v21;
              }
              while (v7 != (_BYTE *)v12);
              v7 = (_BYTE *)*v2;
              v18 = v17;
            }
            *v2 = (unint64_t)v18;
            v2[1] = (unint64_t)v11;
            v2[2] = (unint64_t)&v17[v16];
            if (v7)
              operator delete(v7);
          }
          else
          {
            *v7 = v8;
            v11 = v7 + 1;
          }
          v2[1] = (unint64_t)v11;
          v7 = v11;
        }
        ++v8;
      }
      while (v8 != v9);
    }
    *a1 = v2;
  }
  return v2;
}

char **GetOrCreateOffsetCache<unsigned short>(char ***a1, uint64_t a2)
{
  char **v2;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  __int16 v21;

  v2 = *a1;
  if (!*a1)
  {
    v5 = (_QWORD *)operator new();
    v2 = (char **)v5;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16) - v6;
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = v5 + 2;
      if (v7 <= 1)
        v11 = 1;
      else
        v11 = v7;
      do
      {
        if (*(_BYTE *)(v6 + v9) == 10)
        {
          if ((unint64_t)v8 >= *v10)
          {
            v13 = *v2;
            v14 = v8 - *v2;
            if (v14 <= -3)
              abort();
            v15 = v14 >> 1;
            v16 = *v10 - (_QWORD)v13;
            if (v16 <= (v14 >> 1) + 1)
              v17 = v15 + 1;
            else
              v17 = *v10 - (_QWORD)v13;
            if (v16 >= 0x7FFFFFFFFFFFFFFELL)
              v18 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v18 = v17;
            if (v18)
            {
              v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>((uint64_t)(v2 + 2), v18);
              v13 = *v2;
              v8 = v2[1];
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[2 * v15];
            *(_WORD *)v20 = v9;
            v12 = v20 + 2;
            while (v8 != v13)
            {
              v21 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *((_WORD *)v20 - 1) = v21;
              v20 -= 2;
            }
            *v2 = v20;
            v2[1] = v12;
            v2[2] = &v19[2 * v18];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_WORD *)v8 = v9;
            v12 = v8 + 2;
          }
          v2[1] = v12;
          v8 = v12;
        }
        ++v9;
      }
      while (v9 != v11);
    }
    *a1 = v2;
  }
  return v2;
}

char **GetOrCreateOffsetCache<unsigned int>(char ***a1, uint64_t a2)
{
  char **v2;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;

  v2 = *a1;
  if (!*a1)
  {
    v5 = (_QWORD *)operator new();
    v2 = (char **)v5;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16) - v6;
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = v5 + 2;
      if (v7 <= 1)
        v11 = 1;
      else
        v11 = v7;
      do
      {
        if (*(_BYTE *)(v6 + v9) == 10)
        {
          if ((unint64_t)v8 >= *v10)
          {
            v13 = *v2;
            v14 = (v8 - *v2) >> 2;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 62)
              abort();
            v16 = *v10 - (_QWORD)v13;
            if (v16 >> 1 > v15)
              v15 = v16 >> 1;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
              v17 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned int>>((uint64_t)(v2 + 2), v17);
              v13 = *v2;
              v8 = v2[1];
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[4 * v14];
            *(_DWORD *)v19 = v9;
            v12 = v19 + 4;
            while (v8 != v13)
            {
              v20 = *((_DWORD *)v8 - 1);
              v8 -= 4;
              *((_DWORD *)v19 - 1) = v20;
              v19 -= 4;
            }
            *v2 = v19;
            v2[1] = v12;
            v2[2] = &v18[4 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_DWORD *)v8 = v9;
            v12 = v8 + 4;
          }
          v2[1] = v12;
          v8 = v12;
        }
        ++v9;
      }
      while (v9 != v11);
    }
    *a1 = v2;
  }
  return v2;
}

char **GetOrCreateOffsetCache<unsigned long long>(char ***a1, uint64_t a2)
{
  char **v2;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = *a1;
  if (!*a1)
  {
    v5 = (_QWORD *)operator new();
    v2 = (char **)v5;
    v5[1] = 0;
    v5[2] = 0;
    *v5 = 0;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16) - v6;
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = v5 + 2;
      if (v7 <= 1)
        v11 = 1;
      else
        v11 = v7;
      do
      {
        if (*(_BYTE *)(v6 + v9) == 10)
        {
          if ((unint64_t)v8 >= *v10)
          {
            v13 = *v2;
            v14 = (v8 - *v2) >> 3;
            v15 = v14 + 1;
            if ((unint64_t)(v14 + 1) >> 61)
              abort();
            v16 = *v10 - (_QWORD)v13;
            if (v16 >> 2 > v15)
              v15 = v16 >> 2;
            if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
              v17 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v17 = v15;
            if (v17)
            {
              v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v2 + 2), v17);
              v13 = *v2;
              v8 = v2[1];
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[8 * v14];
            *(_QWORD *)v19 = v9;
            v12 = v19 + 8;
            while (v8 != v13)
            {
              v20 = *((_QWORD *)v8 - 1);
              v8 -= 8;
              *((_QWORD *)v19 - 1) = v20;
              v19 -= 8;
            }
            *v2 = v19;
            v2[1] = v12;
            v2[2] = &v18[8 * v17];
            if (v13)
              operator delete(v13);
          }
          else
          {
            *(_QWORD *)v8 = v9;
            v12 = v8 + 8;
          }
          v2[1] = v12;
          v8 = v12;
        }
        ++v9;
      }
      while (v9 != v11);
    }
    *a1 = v2;
  }
  return v2;
}

void llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::grow(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  int v5;
  uint64_t v6;

  v6 = 0;
  v3 = a1 + 16;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, (void *)(a1 + 16), a2, 40, &v6);
  llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::moveElementsForGrow((uint64_t *)a1, (uint64_t)v4);
  v5 = v6;
  if (*(_QWORD *)a1 != v3)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v5;
}

void llvm::SmallVectorTemplateBase<llvm::SMFixIt,false>::moveElementsForGrow(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      v3 += 40;
      a2 += 40;
    }
    while (v3 != v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 40 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 1) < 0)
          operator delete(*(void **)(v7 + v8 - 24));
        v8 -= 40;
      }
      while (v8);
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  void **v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  int v32;
  __int128 v33;
  BOOL v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _BOOL4 v39;
  unint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  __int128 *v45;
  void **v46;
  unint64_t v47;
  __int128 v48;
  int v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void **v63;
  BOOL v64;
  _OWORD *v65;
  uint64_t v66;
  __int128 v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  int64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  _OWORD *v91;
  __int128 *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  BOOL v103;
  _QWORD *v104;
  unint64_t v105;
  _QWORD *v106;
  char v107;
  unint64_t v108;
  void **v109;
  BOOL v110;
  __int128 v111;
  __int128 *v112;
  __int128 *v113;
  uint64_t v114;
  __int128 *v115;
  char v116;
  unint64_t v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _QWORD v121[2];
  __int128 v122;
  uint64_t v123;

  v123 = *MEMORY[0x24BDAC8D0];
LABEL_2:
  v113 = (__int128 *)(a2 - 80);
  v115 = (__int128 *)(a2 - 40);
  v112 = (__int128 *)(a2 - 120);
  v8 = a1;
  v117 = a2;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (llvm::SMFixIt::operator<(v115, (_QWORD *)v8))
        {
          v118 = *(_OWORD *)v8;
          v51 = *(_QWORD *)(v8 + 16);
          *(_QWORD *)&v122 = *(_QWORD *)(v8 + 24);
          *(_QWORD *)((char *)&v122 + 7) = *(_QWORD *)(v8 + 31);
          v52 = *(_BYTE *)(v8 + 39);
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          *(_OWORD *)v8 = *v115;
          v53 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 16) = v53;
          *v115 = v118;
          *(_QWORD *)(a2 - 24) = v51;
          v54 = v122;
          *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)&v122 + 7);
          *(_QWORD *)(a2 - 16) = v54;
          *(_BYTE *)(a2 - 1) = v52;
        }
        return;
      case 3uLL:
        std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)v8, (__int128 *)(v8 + 40), v115);
        return;
      case 4uLL:
        std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v8, v8 + 40, v8 + 80, (uint64_t)v115);
        return;
      case 5uLL:
        std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v8, v8 + 40, v8 + 80, v8 + 120, (uint64_t)v115);
        return;
      default:
        if (v9 <= 959)
        {
          if ((a4 & 1) != 0)
          {
            if (v8 != a2)
            {
              v55 = (_QWORD *)(v8 + 40);
              if (v8 + 40 != a2)
              {
                v56 = 0;
                v57 = v8;
                do
                {
                  v58 = v55;
                  if (llvm::SMFixIt::operator<(v55, (_QWORD *)v57))
                  {
                    v118 = *(_OWORD *)v58;
                    v120 = *(_QWORD *)(v57 + 72);
                    v119 = *(_OWORD *)(v57 + 56);
                    *(_QWORD *)(v57 + 64) = 0;
                    *(_QWORD *)(v57 + 72) = 0;
                    *(_QWORD *)(v57 + 56) = 0;
                    v59 = *((_BYTE *)v58 + 39);
                    v60 = v56;
                    while (1)
                    {
                      v61 = v60;
                      v62 = v8 + v60;
                      *(_OWORD *)(v62 + 40) = *(_OWORD *)v62;
                      v63 = (void **)(v62 + 56);
                      if (v59 < 0)
                        operator delete(*v63);
                      *(_OWORD *)v63 = *(_OWORD *)(v62 + 16);
                      *(_QWORD *)(v62 + 72) = *(_QWORD *)(v62 + 32);
                      *(_BYTE *)(v62 + 39) = 0;
                      *(_BYTE *)(v62 + 16) = 0;
                      if (!v61)
                        break;
                      v60 = v61 - 40;
                      v64 = llvm::SMFixIt::operator<(&v118, (_QWORD *)(v61 - 40 + v8));
                      v59 = 0;
                      if (!v64)
                      {
                        v65 = (_OWORD *)(v8 + v61);
                        goto LABEL_77;
                      }
                    }
                    v65 = (_OWORD *)v8;
LABEL_77:
                    *v65 = v118;
                    v66 = v8 + v61;
                    v67 = v119;
                    *(_QWORD *)(v66 + 32) = v120;
                    *(_OWORD *)(v66 + 16) = v67;
                    a2 = v117;
                  }
                  v55 = v58 + 5;
                  v56 += 40;
                  v57 = (unint64_t)v58;
                }
                while (v58 + 5 != (_QWORD *)a2);
              }
            }
          }
          else if (v8 != a2)
          {
            v104 = (_QWORD *)(v8 + 40);
            if (v8 + 40 != a2)
            {
              v105 = v8 - 40;
              do
              {
                v106 = v104;
                if (llvm::SMFixIt::operator<(v104, (_QWORD *)a1))
                {
                  v118 = *(_OWORD *)v106;
                  v120 = *(_QWORD *)(a1 + 72);
                  v119 = *(_OWORD *)(a1 + 56);
                  *(_QWORD *)(a1 + 64) = 0;
                  *(_QWORD *)(a1 + 72) = 0;
                  *(_QWORD *)(a1 + 56) = 0;
                  v107 = *((_BYTE *)v106 + 39);
                  v108 = v105;
                  do
                  {
                    *(_OWORD *)(v108 + 80) = *(_OWORD *)(v108 + 40);
                    v109 = (void **)(v108 + 96);
                    if (v107 < 0)
                      operator delete(*v109);
                    *(_OWORD *)v109 = *(_OWORD *)(v108 + 56);
                    *(_QWORD *)(v108 + 112) = *(_QWORD *)(v108 + 72);
                    *(_BYTE *)(v108 + 79) = 0;
                    *(_BYTE *)(v108 + 56) = 0;
                    v110 = llvm::SMFixIt::operator<(&v118, (_QWORD *)v108);
                    v107 = 0;
                    v108 -= 40;
                  }
                  while (v110);
                  *(_OWORD *)(v108 + 80) = v118;
                  v111 = v119;
                  *(_QWORD *)(v108 + 112) = v120;
                  *(_OWORD *)(v108 + 96) = v111;
                  a2 = v117;
                }
                v104 = v106 + 5;
                v105 += 40;
                a1 = (uint64_t)v106;
              }
              while (v106 + 5 != (_QWORD *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v68 = (v10 - 2) >> 1;
            v69 = v68;
            do
            {
              v70 = v69;
              if (v68 >= v69)
              {
                v71 = (2 * v69) | 1;
                v72 = a1 + 40 * v71;
                if (2 * v69 + 2 < (uint64_t)v10
                  && llvm::SMFixIt::operator<((_QWORD *)(a1 + 40 * v71), (_QWORD *)(v72 + 40)))
                {
                  v72 += 40;
                  v71 = 2 * v70 + 2;
                }
                v73 = a1 + 40 * v70;
                if (!llvm::SMFixIt::operator<((_QWORD *)v72, (_QWORD *)v73))
                {
                  v118 = *(_OWORD *)v73;
                  v74 = a1 + 40 * v70;
                  v75 = *(_OWORD *)(v74 + 16);
                  v120 = *(_QWORD *)(v74 + 32);
                  v119 = v75;
                  *(_QWORD *)(v74 + 24) = 0;
                  *(_QWORD *)(v74 + 32) = 0;
                  *(_QWORD *)(v74 + 16) = 0;
                  do
                  {
                    v76 = v72;
                    *(_OWORD *)v73 = *(_OWORD *)v72;
                    v77 = *(_OWORD *)(v72 + 16);
                    *(_QWORD *)(v73 + 32) = *(_QWORD *)(v72 + 32);
                    *(_OWORD *)(v73 + 16) = v77;
                    *(_BYTE *)(v72 + 39) = 0;
                    *(_BYTE *)(v72 + 16) = 0;
                    if (v68 < v71)
                      break;
                    v78 = (2 * v71) | 1;
                    v72 = a1 + 40 * v78;
                    v79 = 2 * v71 + 2;
                    if (v79 < (uint64_t)v10 && llvm::SMFixIt::operator<((_QWORD *)(a1 + 40 * v78), (_QWORD *)(v72 + 40)))
                    {
                      v72 += 40;
                      v78 = v79;
                    }
                    v73 = v76;
                    v71 = v78;
                  }
                  while (!llvm::SMFixIt::operator<((_QWORD *)v72, &v118));
                  *(_OWORD *)v76 = v118;
                  v80 = v119;
                  *(_QWORD *)(v76 + 32) = v120;
                  *(_OWORD *)(v76 + 16) = v80;
                }
              }
              v69 = v70 - 1;
            }
            while (v70);
            v81 = v9 / 0x28uLL;
            v82 = v117;
            do
            {
              v83 = 0;
              v122 = *(_OWORD *)a1;
              v114 = *(_QWORD *)(a1 + 16);
              v121[0] = *(_QWORD *)(a1 + 24);
              *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(a1 + 31);
              v116 = *(_BYTE *)(a1 + 39);
              *(_QWORD *)(a1 + 24) = 0;
              *(_QWORD *)(a1 + 32) = 0;
              v84 = v81 - 2;
              if (v81 < 2)
                v84 = v81 - 1;
              v85 = v84 >> 1;
              v86 = a1;
              *(_QWORD *)(a1 + 16) = 0;
              do
              {
                v87 = v86 + 40 * v83 + 40;
                v88 = (2 * v83) | 1;
                v89 = 2 * v83 + 2;
                if (v89 < v81
                  && llvm::SMFixIt::operator<((_QWORD *)(v86 + 40 * v83 + 40), (_QWORD *)(v86 + 40 * v83 + 80)))
                {
                  v87 += 40;
                  v88 = v89;
                }
                *(_OWORD *)v86 = *(_OWORD *)v87;
                v90 = *(_OWORD *)(v87 + 16);
                *(_QWORD *)(v86 + 32) = *(_QWORD *)(v87 + 32);
                *(_OWORD *)(v86 + 16) = v90;
                *(_BYTE *)(v87 + 39) = 0;
                *(_BYTE *)(v87 + 16) = 0;
                v86 = v87;
                v83 = v88;
              }
              while (v88 <= v85);
              v91 = (_OWORD *)(v82 - 40);
              if (v87 == v82 - 40)
              {
                v94 = v82 - 40;
                *(_OWORD *)v87 = v122;
                *(_QWORD *)(v87 + 16) = v114;
                *(_QWORD *)(v87 + 24) = v121[0];
                *(_QWORD *)(v87 + 31) = *(_QWORD *)((char *)v121 + 7);
                *(_BYTE *)(v87 + 39) = v116;
              }
              else
              {
                v92 = (__int128 *)(v87 + 16);
                *(_OWORD *)v87 = *v91;
                v93 = *(_QWORD *)(v82 - 8);
                *(_OWORD *)(v87 + 16) = *(_OWORD *)(v82 - 24);
                *(_QWORD *)(v87 + 32) = v93;
                v94 = v82 - 40;
                *v91 = v122;
                *(_QWORD *)(v82 - 24) = v114;
                v95 = v121[0];
                *(_QWORD *)(v82 - 9) = *(_QWORD *)((char *)v121 + 7);
                *(_QWORD *)(v82 - 16) = v95;
                *(_BYTE *)(v82 - 1) = v116;
                v96 = v87 - a1 + 40;
                if (v96 >= 41)
                {
                  v97 = (v96 / 0x28uLL - 2) >> 1;
                  v98 = a1 + 40 * v97;
                  if (llvm::SMFixIt::operator<((_QWORD *)v98, (_QWORD *)v87))
                  {
                    v118 = *(_OWORD *)v87;
                    v99 = *v92;
                    v120 = *(_QWORD *)(v87 + 32);
                    v119 = v99;
                    *(_QWORD *)(v87 + 24) = 0;
                    *(_QWORD *)(v87 + 32) = 0;
                    *(_QWORD *)v92 = 0;
                    do
                    {
                      v100 = v98;
                      *(_OWORD *)v87 = *(_OWORD *)v98;
                      v101 = *(_OWORD *)(v98 + 16);
                      *(_QWORD *)(v87 + 32) = *(_QWORD *)(v98 + 32);
                      *(_OWORD *)(v87 + 16) = v101;
                      *(_BYTE *)(v98 + 39) = 0;
                      *(_BYTE *)(v98 + 16) = 0;
                      if (!v97)
                        break;
                      v97 = (v97 - 1) >> 1;
                      v98 = a1 + 40 * v97;
                      v87 = v100;
                    }
                    while (llvm::SMFixIt::operator<((_QWORD *)v98, &v118));
                    *(_OWORD *)v100 = v118;
                    v102 = v119;
                    *(_QWORD *)(v100 + 32) = v120;
                    *(_OWORD *)(v100 + 16) = v102;
                  }
                }
              }
              v103 = v81-- <= 2;
              v82 = v94;
            }
            while (!v103);
          }
          return;
        }
        v11 = v8 + 40 * (v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(a1 + 40 * (v10 >> 1)), (__int128 *)a1, v115);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (__int128 *)(a1 + 40 * (v10 >> 1)), v115);
          v12 = a1 + 40 * (v10 >> 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(a1 + 40), (__int128 *)(v12 - 40), v113);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(a1 + 80), (__int128 *)(a1 + 40 + 40 * (v10 >> 1)), v112);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)(v12 - 40), (__int128 *)v12, (__int128 *)(a1 + 40 + 40 * (v10 >> 1)));
          v118 = *(_OWORD *)a1;
          *(_QWORD *)((char *)&v122 + 7) = *(_QWORD *)(a1 + 31);
          v13 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v122 = *(_QWORD *)(a1 + 24);
          v14 = *(_BYTE *)(a1 + 39);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          v15 = *(_QWORD *)(v12 + 32);
          v16 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v11;
          *(_OWORD *)(a1 + 16) = v16;
          *(_QWORD *)(a1 + 32) = v15;
          *(_OWORD *)v11 = v118;
          *(_QWORD *)(v12 + 16) = v13;
          v17 = v122;
          *(_QWORD *)(v12 + 31) = *(_QWORD *)((char *)&v122 + 7);
          *(_QWORD *)(v12 + 24) = v17;
          *(_BYTE *)(v11 + 39) = v14;
        }
        --a3;
        if ((a4 & 1) == 0 && !llvm::SMFixIt::operator<((_QWORD *)(a1 - 40), (_QWORD *)a1))
        {
          v35 = *(_OWORD *)(a1 + 16);
          v118 = *(_OWORD *)a1;
          v36 = *(_QWORD *)(a1 + 32);
          v119 = v35;
          v120 = v36;
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          if (llvm::SMFixIt::operator<(&v118, v115))
          {
            v8 = a1;
            v37 = v117;
            do
              v8 += 40;
            while (!llvm::SMFixIt::operator<(&v118, (_QWORD *)v8));
          }
          else
          {
            v38 = (_QWORD *)(a1 + 40);
            v37 = v117;
            do
            {
              v8 = (unint64_t)v38;
              if ((unint64_t)v38 >= v117)
                break;
              v39 = llvm::SMFixIt::operator<(&v118, v38);
              v38 = (_QWORD *)(v8 + 40);
            }
            while (!v39);
          }
          v40 = v37;
          if (v8 < v37)
          {
            v40 = v37;
            do
              v40 -= 40;
            while (llvm::SMFixIt::operator<(&v118, (_QWORD *)v40));
          }
          while (v8 < v40)
          {
            v122 = *(_OWORD *)v8;
            v41 = *(_QWORD *)(v8 + 16);
            v121[0] = *(_QWORD *)(v8 + 24);
            *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(v8 + 31);
            v42 = *(_BYTE *)(v8 + 39);
            *(_QWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 32) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_OWORD *)v8 = *(_OWORD *)v40;
            v43 = *(_OWORD *)(v40 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v40 + 32);
            *(_OWORD *)(v8 + 16) = v43;
            *(_OWORD *)v40 = v122;
            v44 = v121[0];
            *(_QWORD *)(v40 + 16) = v41;
            *(_QWORD *)(v40 + 24) = v44;
            *(_QWORD *)(v40 + 31) = *(_QWORD *)((char *)v121 + 7);
            *(_BYTE *)(v40 + 39) = v42;
            do
              v8 += 40;
            while (!llvm::SMFixIt::operator<(&v118, (_QWORD *)v8));
            do
              v40 -= 40;
            while (llvm::SMFixIt::operator<(&v118, (_QWORD *)v40));
          }
          v45 = (__int128 *)(v8 - 40);
          if (v8 - 40 == a1)
          {
            v49 = *(char *)(v8 - 1);
            *(_OWORD *)a1 = v118;
            v47 = v8 - 24;
            if (v49 < 0)
              operator delete(*(void **)v47);
          }
          else
          {
            v46 = (void **)(a1 + 16);
            *(_OWORD *)a1 = *v45;
            if (*(char *)(a1 + 39) < 0)
              operator delete(*v46);
            v47 = v8 - 24;
            v48 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)v46 = v48;
            *(_BYTE *)(v8 - 1) = 0;
            *(_BYTE *)(v8 - 24) = 0;
            *v45 = v118;
          }
          a4 = 0;
          v50 = v119;
          *(_QWORD *)(v47 + 16) = v120;
          *(_OWORD *)v47 = v50;
          a2 = v117;
          continue;
        }
        v18 = 0;
        v19 = *(_OWORD *)(a1 + 16);
        v118 = *(_OWORD *)a1;
        v20 = (void **)(a1 + 16);
        v21 = *(_QWORD *)(a1 + 32);
        v119 = v19;
        v120 = v21;
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        do
          v18 += 40;
        while (llvm::SMFixIt::operator<((_QWORD *)(v18 + a1), &v118));
        v22 = a1 + v18;
        v23 = (_QWORD *)v117;
        if (v18 == 40)
        {
          v23 = (_QWORD *)v117;
          do
          {
            if (v22 >= (unint64_t)v23)
              break;
            v23 -= 5;
          }
          while (!llvm::SMFixIt::operator<(v23, &v118));
        }
        else
        {
          do
            v23 -= 5;
          while (!llvm::SMFixIt::operator<(v23, &v118));
        }
        v8 = a1 + v18;
        if (v22 < (unint64_t)v23)
        {
          v24 = v23;
          do
          {
            v122 = *(_OWORD *)v8;
            v25 = *(_QWORD *)(v8 + 16);
            v121[0] = *(_QWORD *)(v8 + 24);
            *(_QWORD *)((char *)v121 + 7) = *(_QWORD *)(v8 + 31);
            v26 = *(_BYTE *)(v8 + 39);
            *(_QWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 32) = 0;
            *(_QWORD *)(v8 + 16) = 0;
            *(_OWORD *)v8 = *(_OWORD *)v24;
            v27 = *((_OWORD *)v24 + 1);
            *(_QWORD *)(v8 + 32) = v24[4];
            *(_OWORD *)(v8 + 16) = v27;
            *(_OWORD *)v24 = v122;
            v28 = v121[0];
            v24[2] = v25;
            v24[3] = v28;
            *(_QWORD *)((char *)v24 + 31) = *(_QWORD *)((char *)v121 + 7);
            *((_BYTE *)v24 + 39) = v26;
            do
              v8 += 40;
            while (llvm::SMFixIt::operator<((_QWORD *)v8, &v118));
            do
              v24 -= 5;
            while (!llvm::SMFixIt::operator<(v24, &v118));
          }
          while (v8 < (unint64_t)v24);
        }
        v29 = (__int128 *)(v8 - 40);
        if (v8 - 40 == a1)
        {
          v32 = *(char *)(v8 - 1);
          *(_OWORD *)a1 = v118;
          v30 = v8 - 24;
          if (v32 < 0)
            operator delete(*(void **)v30);
        }
        else
        {
          *(_OWORD *)a1 = *v29;
          if (*(char *)(a1 + 39) < 0)
            operator delete(*v20);
          v30 = v8 - 24;
          v31 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)v20 = v31;
          *(_BYTE *)(v8 - 1) = 0;
          *(_BYTE *)(v8 - 24) = 0;
          *v29 = v118;
        }
        v33 = v119;
        *(_QWORD *)(v30 + 16) = v120;
        *(_OWORD *)v30 = v33;
        a2 = v117;
        if (v22 < (unint64_t)v23)
        {
LABEL_34:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *,false>(a1, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v34 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, v8 - 40);
        if (!std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(v8, v117))
        {
          if (v34)
            continue;
          goto LABEL_34;
        }
        a2 = v8 - 40;
        if (!v34)
          goto LABEL_2;
        return;
    }
  }
}

BOOL std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(__int128 *a1, __int128 *a2, __int128 *a3)
{
  BOOL v6;
  _BOOL8 result;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v6 = llvm::SMFixIt::operator<(a2, a1);
  result = llvm::SMFixIt::operator<(a3, a2);
  if (v6)
  {
    v8 = a1 + 1;
    v9 = (_QWORD *)a1 + 3;
    if (result)
    {
      v23 = *a1;
      v10 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v28 = *v9;
      *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)((char *)a1 + 31);
      v11 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *v8 = 0;
      *a1 = *a3;
      v12 = *((_QWORD *)a3 + 4);
      *(_OWORD *)v8 = a3[1];
      *((_QWORD *)a1 + 4) = v12;
      *a3 = v23;
      *((_QWORD *)a3 + 2) = v10;
      *((_QWORD *)a3 + 3) = v28;
      *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v28 + 7);
      *((_BYTE *)a3 + 39) = v11;
    }
    else
    {
      v26 = *a1;
      v19 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v31 = *v9;
      *(_QWORD *)((char *)&v31 + 7) = *(_QWORD *)((char *)a1 + 31);
      v20 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *v8 = 0;
      *a1 = *a2;
      v21 = *((_QWORD *)a2 + 4);
      *(_OWORD *)v8 = a2[1];
      *((_QWORD *)a1 + 4) = v21;
      *a2 = v26;
      *((_QWORD *)a2 + 2) = v19;
      *((_QWORD *)a2 + 3) = v31;
      *(_QWORD *)((char *)a2 + 31) = *(_QWORD *)((char *)&v31 + 7);
      *((_BYTE *)a2 + 39) = v20;
      result = llvm::SMFixIt::operator<(a3, a2);
      if (result)
      {
        v27 = *a2;
        *(_QWORD *)&v32 = *((_QWORD *)a2 + 3);
        *(_QWORD *)((char *)&v32 + 7) = *(_QWORD *)((char *)a2 + 31);
        *((_QWORD *)a2 + 3) = 0;
        *((_QWORD *)a2 + 4) = 0;
        *((_QWORD *)a2 + 2) = 0;
        *a2 = *a3;
        v22 = *((_QWORD *)a3 + 4);
        a2[1] = a3[1];
        *((_QWORD *)a2 + 4) = v22;
        *a3 = v27;
        *((_QWORD *)a3 + 2) = v19;
        *((_QWORD *)a3 + 3) = v32;
        *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v32 + 7);
        *((_BYTE *)a3 + 39) = v20;
      }
    }
  }
  else if (result)
  {
    v24 = *a2;
    v13 = *((_QWORD *)a2 + 2);
    *(_QWORD *)&v29 = *((_QWORD *)a2 + 3);
    *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)((char *)a2 + 31);
    v14 = *((_BYTE *)a2 + 39);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *a2 = *a3;
    v15 = *((_QWORD *)a3 + 4);
    a2[1] = a3[1];
    *((_QWORD *)a2 + 4) = v15;
    *a3 = v24;
    *((_QWORD *)a3 + 2) = v13;
    *((_QWORD *)a3 + 3) = v29;
    *(_QWORD *)((char *)a3 + 31) = *(_QWORD *)((char *)&v29 + 7);
    *((_BYTE *)a3 + 39) = v14;
    result = llvm::SMFixIt::operator<(a2, a1);
    if (result)
    {
      v25 = *a1;
      v16 = *((_QWORD *)a1 + 2);
      *(_QWORD *)&v30 = *((_QWORD *)a1 + 3);
      *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)((char *)a1 + 31);
      v17 = *((_BYTE *)a1 + 39);
      *((_QWORD *)a1 + 3) = 0;
      *((_QWORD *)a1 + 4) = 0;
      *((_QWORD *)a1 + 2) = 0;
      *a1 = *a2;
      v18 = *((_QWORD *)a2 + 4);
      a1[1] = a2[1];
      *((_QWORD *)a1 + 4) = v18;
      *a2 = v25;
      *((_QWORD *)a2 + 2) = v16;
      *((_QWORD *)a2 + 3) = v30;
      *(_QWORD *)((char *)a2 + 31) = *(_QWORD *)((char *)&v30 + 7);
      *((_BYTE *)a2 + 39) = v17;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  _OWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (_OWORD *)(a2 - 40);
      if (!llvm::SMFixIt::operator<((_QWORD *)(a2 - 40), (_QWORD *)a1))
        return 1;
      v20 = *(_OWORD *)a1;
      v7 = *(_QWORD *)(a1 + 16);
      v23[0] = *(_QWORD *)(a1 + 24);
      *(_QWORD *)((char *)v23 + 7) = *(_QWORD *)(a1 + 31);
      v8 = *(_BYTE *)(a1 + 39);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_OWORD *)a1 = *v6;
      v9 = *(_QWORD *)(a2 - 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(a1 + 32) = v9;
      *v6 = v20;
      v10 = v23[0];
      *(_QWORD *)(a2 - 24) = v7;
      *(_QWORD *)(a2 - 16) = v10;
      *(_QWORD *)(a2 - 9) = *(_QWORD *)((char *)v23 + 7);
      result = 1;
      *(_BYTE *)(a2 - 1) = v8;
      return result;
    case 3uLL:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      v11 = (_QWORD *)(a1 + 80);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80));
      v12 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    if (llvm::SMFixIt::operator<((_QWORD *)v12, v11))
    {
      v15 = *(_OWORD *)(v12 + 16);
      v20 = *(_OWORD *)v12;
      v21 = v15;
      v22 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)(v12 + 24) = 0;
      *(_QWORD *)(v12 + 32) = 0;
      v16 = v13;
      while (1)
      {
        v17 = a1 + v16;
        v18 = *(_OWORD *)(a1 + v16 + 96);
        *(_OWORD *)(v17 + 120) = *(_OWORD *)(a1 + v16 + 80);
        *(_OWORD *)(v17 + 136) = v18;
        *(_QWORD *)(v17 + 152) = *(_QWORD *)(a1 + v16 + 112);
        *(_BYTE *)(v17 + 119) = 0;
        *(_BYTE *)(v17 + 96) = 0;
        if (v16 == -80)
          break;
        v16 -= 40;
        if (!llvm::SMFixIt::operator<(&v20, (_QWORD *)(v17 + 40)))
        {
          v19 = (_OWORD *)(a1 + v16 + 120);
          goto LABEL_12;
        }
      }
      v19 = (_OWORD *)a1;
LABEL_12:
      *v19 = v20;
      *(_OWORD *)(v17 + 96) = v21;
      *(_QWORD *)(v17 + 112) = v22;
      if (++v14 == 8)
        return v12 + 40 == a2;
    }
    v11 = (_QWORD *)v12;
    v13 += 40;
    v12 += 40;
    if (v12 == a2)
      return 1;
  }
}

BOOL llvm::SMFixIt::operator<(_QWORD *a1, _QWORD *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  size_t v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = *a1 >= *a2;
  if (*a1 != *a2)
    return !v2;
  v3 = a1[1];
  v4 = a2[1];
  v2 = v3 >= v4;
  if (v3 != v4)
    return !v2;
  v8 = (_QWORD *)a2[2];
  v6 = a2 + 2;
  v7 = v8;
  v9 = *((char *)v6 + 23);
  v12 = (_QWORD *)a1[2];
  v10 = a1 + 2;
  v11 = v12;
  v13 = *((char *)v10 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)v10 + 23);
  else
    v14 = v10[1];
  if (v13 < 0)
    v10 = v11;
  if (v9 >= 0)
    v15 = *((unsigned __int8 *)v6 + 23);
  else
    v15 = v6[1];
  if (v9 < 0)
    v6 = v7;
  if (v15 >= v14)
    v16 = v14;
  else
    v16 = v15;
  v17 = memcmp(v10, v6, v16);
  if (v17)
    return v17 < 0;
  else
    return v14 < v15;
}

BOOL std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result = llvm::SMFixIt::operator<((_QWORD *)a4, (_QWORD *)a3);
  if (result)
  {
    v18 = *(_OWORD *)a3;
    v9 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)&v21 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)((char *)&v21 + 7) = *(_QWORD *)(a3 + 31);
    v10 = *(_BYTE *)(a3 + 39);
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_OWORD *)a3 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 32);
    *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
    *(_QWORD *)(a3 + 32) = v11;
    *(_OWORD *)a4 = v18;
    *(_QWORD *)(a4 + 16) = v9;
    *(_QWORD *)(a4 + 24) = v21;
    *(_QWORD *)(a4 + 31) = *(_QWORD *)((char *)&v21 + 7);
    *(_BYTE *)(a4 + 39) = v10;
    result = llvm::SMFixIt::operator<((_QWORD *)a3, (_QWORD *)a2);
    if (result)
    {
      v19 = *(_OWORD *)a2;
      v12 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)&v22 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)(a2 + 31);
      v13 = *(_BYTE *)(a2 + 39);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      v14 = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(a2 + 32) = v14;
      *(_OWORD *)a3 = v19;
      *(_QWORD *)(a3 + 16) = v12;
      *(_QWORD *)(a3 + 24) = v22;
      *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)&v22 + 7);
      *(_BYTE *)(a3 + 39) = v13;
      result = llvm::SMFixIt::operator<((_QWORD *)a2, (_QWORD *)a1);
      if (result)
      {
        v20 = *(_OWORD *)a1;
        v15 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)&v23 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)((char *)&v23 + 7) = *(_QWORD *)(a1 + 31);
        v16 = *(_BYTE *)(a1 + 39);
        *(_QWORD *)(a1 + 24) = 0;
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v17 = *(_QWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_QWORD *)(a1 + 32) = v17;
        *(_OWORD *)a2 = v20;
        *(_QWORD *)(a2 + 16) = v15;
        *(_QWORD *)(a2 + 24) = v23;
        *(_QWORD *)(a2 + 31) = *(_QWORD *)((char *)&v23 + 7);
        *(_BYTE *)(a2 + 39) = v16;
      }
    }
  }
  return result;
}

BOOL std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,llvm::SMFixIt *>(a1, a2, a3, a4);
  result = llvm::SMFixIt::operator<((_QWORD *)a5, (_QWORD *)a4);
  if (result)
  {
    v23 = *(_OWORD *)a4;
    v11 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)&v27 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)((char *)&v27 + 7) = *(_QWORD *)(a4 + 31);
    v12 = *(_BYTE *)(a4 + 39);
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 32) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_OWORD *)a4 = *(_OWORD *)a5;
    v13 = *(_QWORD *)(a5 + 32);
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(a5 + 16);
    *(_QWORD *)(a4 + 32) = v13;
    *(_OWORD *)a5 = v23;
    *(_QWORD *)(a5 + 16) = v11;
    *(_QWORD *)(a5 + 24) = v27;
    *(_QWORD *)(a5 + 31) = *(_QWORD *)((char *)&v27 + 7);
    *(_BYTE *)(a5 + 39) = v12;
    result = llvm::SMFixIt::operator<((_QWORD *)a4, (_QWORD *)a3);
    if (result)
    {
      v24 = *(_OWORD *)a3;
      v14 = *(_QWORD *)(a3 + 16);
      *(_QWORD *)&v28 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)((char *)&v28 + 7) = *(_QWORD *)(a3 + 31);
      v15 = *(_BYTE *)(a3 + 39);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_OWORD *)a3 = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 32);
      *(_OWORD *)(a3 + 16) = *(_OWORD *)(a4 + 16);
      *(_QWORD *)(a3 + 32) = v16;
      *(_OWORD *)a4 = v24;
      *(_QWORD *)(a4 + 16) = v14;
      *(_QWORD *)(a4 + 24) = v28;
      *(_QWORD *)(a4 + 31) = *(_QWORD *)((char *)&v28 + 7);
      *(_BYTE *)(a4 + 39) = v15;
      result = llvm::SMFixIt::operator<((_QWORD *)a3, (_QWORD *)a2);
      if (result)
      {
        v25 = *(_OWORD *)a2;
        v17 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)&v29 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)((char *)&v29 + 7) = *(_QWORD *)(a2 + 31);
        v18 = *(_BYTE *)(a2 + 39);
        *(_QWORD *)(a2 + 16) = 0;
        *(_QWORD *)(a2 + 32) = 0;
        *(_QWORD *)(a2 + 24) = 0;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        v19 = *(_QWORD *)(a3 + 32);
        *(_OWORD *)(a2 + 16) = *(_OWORD *)(a3 + 16);
        *(_QWORD *)(a2 + 32) = v19;
        *(_OWORD *)a3 = v25;
        *(_QWORD *)(a3 + 16) = v17;
        *(_QWORD *)(a3 + 24) = v29;
        *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)&v29 + 7);
        *(_BYTE *)(a3 + 39) = v18;
        result = llvm::SMFixIt::operator<((_QWORD *)a2, (_QWORD *)a1);
        if (result)
        {
          v26 = *(_OWORD *)a1;
          v20 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)&v30 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)((char *)&v30 + 7) = *(_QWORD *)(a1 + 31);
          v21 = *(_BYTE *)(a1 + 39);
          *(_QWORD *)(a1 + 24) = 0;
          *(_QWORD *)(a1 + 32) = 0;
          *(_QWORD *)(a1 + 16) = 0;
          *(_OWORD *)a1 = *(_OWORD *)a2;
          v22 = *(_QWORD *)(a2 + 32);
          *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
          *(_QWORD *)(a1 + 32) = v22;
          *(_OWORD *)a2 = v26;
          *(_QWORD *)(a2 + 16) = v20;
          *(_QWORD *)(a2 + 24) = v30;
          *(_QWORD *)(a2 + 31) = *(_QWORD *)((char *)&v30 + 7);
          *(_BYTE *)(a2 + 39) = v21;
        }
      }
    }
  }
  return result;
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C13488;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C13488;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char v11;

  v11 = 0;
  v8 = llvm::cl::parser<BOOL>::parse((llvm *)(a1 + 152), a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  **(_BYTE **)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getValueExpectedFlagDefault()
{
  return 1;
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  __int16 v5;

  if (a3)
  {
    v3 = **(unsigned __int8 **)(a1 + 128);
LABEL_5:
    v5 = *(_WORD *)(a1 + 144);
    v4 = &off_251C12500;
    llvm::cl::parser<BOOL>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, v3 != 0, (uint64_t)&v4, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 145))
  {
    v3 = **(unsigned __int8 **)(a1 + 128);
    if (*(unsigned __int8 *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::setDefault(uint64_t result)
{
  char v1;

  v1 = *(_BYTE *)(result + 145);
  if (v1)
    v1 = *(_BYTE *)(result + 144);
  **(_BYTE **)(result + 128) = v1;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C134F0;
  return result;
}

void std::__function::__func<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1},std::allocator<llvm::cl::opt<BOOL,true,llvm::cl::parser<BOOL>>::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C134F0;
}

uint64_t llvm::cl::opt_storage<BOOL,true,false>::setLocation(llvm *a1, uint64_t a2, _BYTE *a3)
{
  llvm::raw_ostream *v4;
  uint64_t result;
  const char *v7;
  __int16 v8;

  if (*(_QWORD *)a1)
  {
    v7 = "cl::location(x) specified more than once!";
    v8 = 259;
    v4 = (llvm::raw_ostream *)llvm::errs(a1);
    return llvm::cl::Option::error(a2, (llvm::Twine *)&v7, 0, 0, v4);
  }
  else
  {
    result = 0;
    *(_QWORD *)a1 = a3;
    *((_BYTE *)a1 + 17) = 1;
    *((_BYTE *)a1 + 16) = *a3;
  }
  return result;
}

unint64_t llvm::getToken@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  unint64_t first_not_of;
  unint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  first_not_of = llvm::StringRef::find_first_not_of(v17, a3, a4, 0);
  result = llvm::StringRef::find_first_of(v17, a3, a4, first_not_of);
  if (a2 >= first_not_of)
    v12 = first_not_of;
  else
    v12 = a2;
  if (v12 <= result)
    v13 = result;
  else
    v13 = first_not_of;
  if (v13 >= a2)
    v13 = a2;
  v14 = a1 + v12;
  v15 = v13 - v12;
  if (a2 >= result)
    v16 = result;
  else
    v16 = a2;
  *a5 = v14;
  a5[1] = v15;
  a5[2] = a1 + v16;
  a5[3] = a2 - v16;
  return result;
}

double llvm::SplitString(uint64_t a1, unint64_t a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5)
{
  double result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  llvm::getToken(a1, a2, a4, a5, &v12);
  v9 = *((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    do
    {
      llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a3, v12, v9);
      llvm::getToken(v13, *((unint64_t *)&v13 + 1), a4, a5, &v10);
      v12 = v10;
      result = *(double *)&v11;
      v13 = v11;
      v9 = *((_QWORD *)&v10 + 1);
    }
    while (*((_QWORD *)&v10 + 1));
  }
  return result;
}

llvm::raw_ostream *llvm::printEscapedString(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *a3)
{
  uint64_t v4;
  char *v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  llvm::raw_ostream *v11;
  char v12;
  char v13;
  char *v14;
  char *v15;

  if (a2)
  {
    v4 = a2;
    v5 = (char *)result;
    do
    {
      v6 = *v5;
      if (v6 == 92)
      {
        v7 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v7 >= *((_QWORD *)a3 + 3))
        {
          result = llvm::raw_ostream::write(a3, 92);
        }
        else
        {
          *((_QWORD *)a3 + 4) = v7 + 1;
          *v7 = 92;
        }
        v10 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((unint64_t)v10 >= *((_QWORD *)a3 + 3))
        {
          v11 = a3;
          v12 = 92;
LABEL_24:
          result = llvm::raw_ostream::write(v11, v12);
          goto LABEL_25;
        }
        *((_QWORD *)a3 + 4) = v10 + 1;
        *v10 = 92;
      }
      else
      {
        v9 = *((_QWORD *)a3 + 3);
        v8 = (_BYTE *)*((_QWORD *)a3 + 4);
        if ((_DWORD)v6 == 34 || (v6 - 32) > 0x5Eu)
        {
          if ((unint64_t)v8 >= v9)
          {
            result = llvm::raw_ostream::write(a3, 92);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v8 + 1;
            *v8 = 92;
          }
          v13 = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 >> 4];
          v14 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v14 >= *((_QWORD *)a3 + 3))
          {
            result = llvm::raw_ostream::write(a3, v13);
          }
          else
          {
            *((_QWORD *)a3 + 4) = v14 + 1;
            *v14 = v13;
          }
          v12 = llvm::hexdigit(unsigned int,BOOL)::LUT[v6 & 0xF];
          v15 = (char *)*((_QWORD *)a3 + 4);
          if ((unint64_t)v15 >= *((_QWORD *)a3 + 3))
          {
            v11 = a3;
            goto LABEL_24;
          }
          *((_QWORD *)a3 + 4) = v15 + 1;
          *v15 = v12;
        }
        else
        {
          if ((unint64_t)v8 >= v9)
          {
            v11 = a3;
            v12 = *v5;
            goto LABEL_24;
          }
          *((_QWORD *)a3 + 4) = v8 + 1;
          *v8 = v6;
        }
      }
LABEL_25:
      ++v5;
      --v4;
    }
    while (v4);
  }
  return result;
}

_QWORD *llvm::StringMapImpl::init(llvm::StringMapImpl *this, unsigned int a2)
{
  unsigned int v3;
  _QWORD *result;

  if (a2)
    v3 = a2;
  else
    v3 = 16;
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = 0;
  result = malloc_type_calloc(v3 + 1, 0xCuLL, 0x6D9A4F0CuLL);
  if (!result && (v3 != -1 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  result[v3] = 2;
  *(_QWORD *)this = result;
  *((_DWORD *)this + 2) = v3;
  return result;
}

_QWORD *createTable(int a1)
{
  int v2;
  _QWORD *result;

  v2 = a1 + 1;
  result = malloc_type_calloc((a1 + 1), 0xCuLL, 0x6D9A4F0CuLL);
  if (!result && (v2 || (result = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  result[a1] = 2;
  return result;
}

uint64_t llvm::StringMapImpl::LookupBucketFor(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  if (!*((_DWORD *)a1 + 2))
    llvm::StringMapImpl::init(a1, 0x10u);
  v6 = llvm::xxHash64(a2, a3);
  v7 = *((unsigned int *)a1 + 2);
  v8 = v7 - 1;
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)a1 + 8 * v7 + 8;
  v11 = 0xFFFFFFFFLL;
  v12 = 1;
  v13 = v6;
  while (1)
  {
    v14 = v13 & v8;
    v15 = *(_QWORD **)(v9 + 8 * v14);
    if (!v15)
      break;
    if (v15 == (_QWORD *)-8)
    {
      if ((_DWORD)v11 == -1)
        v11 = v14;
      else
        v11 = v11;
    }
    else if (*(_DWORD *)(v10 + 4 * v14) == (_DWORD)v6 && a3 == *v15)
    {
      v24 = v12;
      v22 = v9;
      v23 = v11;
      v21 = v8;
      v20 = v10;
      v25 = v14;
      v19 = v6;
      if (!a3)
        return v14;
      v16 = memcmp(a2, (char *)v15 + *((unsigned int *)a1 + 5), a3);
      v6 = v19;
      v10 = v20;
      v14 = v25;
      v8 = v21;
      v9 = v22;
      v11 = v23;
      v12 = v24;
      if (!v16)
        return v14;
    }
    v13 = v12 + v14;
    ++v12;
  }
  v17 = (int)v11;
  if ((_DWORD)v11 == -1)
  {
    v17 = v14;
    v14 = v14;
  }
  else
  {
    v14 = v11;
  }
  *(_DWORD *)(v10 + 4 * v17) = v6;
  return v14;
}

uint64_t llvm::StringMapImpl::FindKey(uint64_t *a1, uint64_t *a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  int i;
  _QWORD *v13;
  int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;

  if (*((_DWORD *)a1 + 2))
  {
    v6 = llvm::xxHash64(a2, a3);
    v7 = *((unsigned int *)a1 + 2);
    v8 = v7 - 1;
    LODWORD(result) = (v7 - 1) & v6;
    v10 = *a1;
    v11 = *a1 + 8 * v7 + 8;
    for (i = 1; ; ++i)
    {
      v13 = *(_QWORD **)(v10 + 8 * result);
      if (!v13)
        break;
      if (v13 != (_QWORD *)-8 && *(_DWORD *)(v11 + 4 * result) == (_DWORD)v6 && a3 == *v13)
      {
        v19 = i;
        v17 = v10;
        v18 = v11;
        v16 = v8;
        v15 = v6;
        v20 = result;
        if (!a3)
          return result;
        v14 = memcmp(a2, (char *)v13 + *((unsigned int *)a1 + 5), a3);
        result = v20;
        v6 = v15;
        v8 = v16;
        v10 = v17;
        v11 = v18;
        i = v19;
        if (!v14)
          return result;
      }
      LODWORD(result) = (result + i) & v8;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::StringMapImpl::RemoveKey(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  int Key;
  int v5;
  uint64_t result;

  Key = llvm::StringMapImpl::FindKey((uint64_t *)a1, a2, a3);
  if (Key == -1)
    return 0;
  v5 = Key;
  result = *(_QWORD *)(*(_QWORD *)a1 + 8 * Key);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v5) = -8;
  *(int32x2_t *)(a1 + 12) = vadd_s32(*(int32x2_t *)(a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
  return result;
}

uint64_t llvm::StringMapImpl::RehashTable(llvm::StringMapImpl *this, uint64_t a2)
{
  int v4;
  unsigned int v5;
  _QWORD *Table;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v5 = *((_DWORD *)this + 2);
  v4 = *((_DWORD *)this + 3);
  if (3 * v5 < 4 * v4)
  {
    v5 *= 2;
  }
  else if (v5 - (v4 + *((_DWORD *)this + 4)) > v5 >> 3)
  {
    return a2;
  }
  Table = createTable(v5);
  v8 = *(_DWORD **)this;
  v9 = *((unsigned int *)this + 2);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = v5 - 1;
    v12 = a2;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)this + 8 * v10);
      if (v13 != -8 && v13 != 0)
      {
        v15 = v8[2 * v9 + 2 + v10];
        v16 = v15 & v11;
        if (Table[v16])
        {
          v17 = 1;
          do
          {
            v18 = v16 + v17++;
            v16 = v18 & v11;
          }
          while (Table[v16]);
        }
        Table[v16] = v13;
        *((_DWORD *)&Table[v5 + 1] + v16) = v15;
        if (v10 == v12)
          a2 = v16;
        else
          a2 = a2;
      }
      ++v10;
    }
    while (v10 != v9);
    v8 = *(_DWORD **)this;
  }
  free(v8);
  *(_QWORD *)this = Table;
  *((_DWORD *)this + 2) = v5;
  *((_DWORD *)this + 4) = 0;
  return a2;
}

_BYTE *llvm::UniqueStringSaver::save(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  _QWORD *v5;
  __int128 v6;
  _BYTE *v7;
  _BYTE *v8;
  __int128 v10;
  _QWORD *v11;
  char v12;

  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a3;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(a1 + 1), &v10, a4, (uint64_t)&v11);
  v5 = v11;
  if (!v12)
    return (_BYTE *)*v11;
  v6 = v10;
  v7 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*a1, *((_QWORD *)&v10 + 1) + 1, 0);
  v8 = v7;
  if (*((_QWORD *)&v6 + 1))
    memcpy(v7, (const void *)v6, *((size_t *)&v6 + 1));
  v8[*((_QWORD *)&v6 + 1)] = 0;
  *v5 = v8;
  v5[1] = *((_QWORD *)&v6 + 1);
  return v8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, unint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v11, a3);
  v8 = v11;
  if ((result & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v11);
    v8 = (_QWORD *)result;
    *(_OWORD *)result = *a2;
    v9 = 1;
  }
  v10 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v9;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  BOOL v14;
  int v15;
  _BOOL4 isEqual;
  _BOOL4 v17;
  uint64_t v18;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8), (uint64_t)a3, a4);
    v10 = v7 + 16 * v9;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v10, *(_QWORD *)(v10 + 8)))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      while (*(_QWORD *)v10 != -1)
      {
        if (v12)
          v14 = 0;
        else
          v14 = *(_QWORD *)v10 == -2;
        if (v14)
          v12 = v10;
        v18 = v12;
        v15 = v13 + 1;
        v9 = (v9 + v13) & v8;
        v10 = v7 + 16 * v9;
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v10, *(_QWORD *)(v10 + 8));
        v12 = v18;
        v17 = isEqual;
        result = 1;
        v13 = v15;
        if (v17)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _OWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_OWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(a1, v4, &v4[v3], v10);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 16 * v11;
    do
    {
      *result++ = xmmword_24AA2AC20;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::moveFromOldBuckets(uint64_t result, _OWORD *a2, _OWORD *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;

  v6 = result;
  *(_QWORD *)(result + 8) = 0;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(_OWORD **)result;
    v9 = 16 * v7;
    do
    {
      *v8++ = xmmword_24AA2AC20;
      v9 -= 16;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>,llvm::StringRef,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseSetPair<llvm::StringRef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v6, (uint64_t)a2, &v10, a4);
      *v10 = *a2;
      ++*(_DWORD *)(v6 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t ascii_strncasecmp(const char *a1, const char *a2, uint64_t a3)
{
  unsigned __int8 v3;
  int v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  int v7;
  unsigned __int8 v8;

  if (!a3)
    return 0;
  while (1)
  {
    v4 = *(unsigned __int8 *)a1++;
    v3 = v4;
    v5 = v4 + 32;
    if ((v4 - 65) < 0x1A)
      v3 = v5;
    v7 = *(unsigned __int8 *)a2++;
    v6 = v7;
    v8 = v7 + 32;
    if ((v7 - 65) < 0x1A)
      v6 = v8;
    if (v3 != v6)
      break;
    if (!--a3)
      return 0;
  }
  if (v3 < v6)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t llvm::toLower(llvm *this)
{
  if (((_DWORD)this - 65) >= 0x1A)
    return (char)this;
  else
    return (char)((_BYTE)this + 32);
}

uint64_t llvm::toUpper(llvm *this)
{
  if (((_DWORD)this - 97) >= 0x1A)
    return (char)this;
  else
    return (char)((_BYTE)this - 32);
}

uint64_t llvm::StringRef::find(uint64_t *a1, char *a2, size_t a3, unint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  int v17;
  uint64_t v18;
  _OWORD v19[14];
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v6 = v5 - a4;
  if (v5 < a4)
    return -1;
  v7 = a4;
  if (!a3)
    return v7;
  if (v6 < a3)
    return -1;
  v10 = *a1;
  v11 = (unsigned __int8 *)(*a1 + a4);
  v12 = a3 - 1;
  if (a3 == 1)
  {
    v13 = memchr((void *)(*a1 + a4), *a2, v6);
    if (v13)
      return (uint64_t)v13 - v10;
    else
      return -1;
  }
  v14 = (unint64_t)&v11[v6 - a3 + 1];
  if (a3 == 2)
  {
    result = -1;
    while (*(unsigned __int16 *)(v10 + v7) != *(unsigned __int16 *)a2)
    {
      ++v7;
      if (v10 + v7 >= v14)
        return result;
    }
    return v7;
  }
  if (a3 > 0xFF || v6 <= 0xF)
  {
    while (memcmp((const void *)(v10 + v7), a2, a3))
    {
      ++v7;
      result = -1;
      if (v10 + v7 >= v14)
        return result;
    }
    return v7;
  }
  v15 = 0;
  v20 = vdupq_n_s8(a3);
  v21 = v20;
  v19[12] = v20;
  v19[13] = v20;
  v19[10] = v20;
  v19[11] = v20;
  v19[8] = v20;
  v19[9] = v20;
  v19[6] = v20;
  v19[7] = v20;
  v19[4] = v20;
  v19[5] = v20;
  v19[2] = v20;
  v19[3] = v20;
  v16 = a3 - 1;
  v19[0] = v20;
  v19[1] = v20;
  do
    *((_BYTE *)v19 + a2[v15++]) = v16--;
  while (v12 != v15);
  v17 = a2[v12];
  while (1)
  {
    v18 = v11[v12];
    if ((_DWORD)v18 == v17 && !memcmp(v11, a2, v12))
      break;
    v11 += *((unsigned __int8 *)v19 + v18);
    if ((unint64_t)v11 >= v14)
      return -1;
  }
  return (uint64_t)&v11[-v10];
}

uint64_t std::string_view::rfind[abi:nn180100](unsigned __int8 **a1, unsigned __int8 *a2, unint64_t a3, unint64_t a4)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned __int8 *v15;

  v4 = *a1;
  v5 = a1[1];
  if ((unint64_t)v5 >= a4)
    v6 = (unsigned __int8 *)a4;
  else
    v6 = a1[1];
  v7 = v5 - v6;
  v8 = &v6[a3];
  if (v7 <= a3)
    v8 = a1[1];
  v9 = &v8[(_QWORD)v4];
  if (a3 && v8)
  {
    v10 = *a1;
    v11 = &v8[(_QWORD)v4];
    do
    {
      if (*v10 == *a2)
      {
        v12 = 1;
        while (a3 != v12)
        {
          if (&v10[v12] == v9)
            goto LABEL_19;
          v13 = v10[v12];
          v14 = a2[v12++];
          if (v13 != v14)
            goto LABEL_10;
        }
        v11 = v10;
      }
LABEL_10:
      ++v10;
    }
    while (v10 != v9);
  }
  else
  {
    v11 = &v8[(_QWORD)v4];
  }
LABEL_19:
  v15 = (unsigned __int8 *)(v11 - v4);
  if (v11 != v9 || a3 == 0)
    return (uint64_t)v15;
  else
    return -1;
}

uint64_t llvm::StringRef::find_first_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) == 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t llvm::StringRef::find_first_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  __int128 v7;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v7 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  v5 = a1[1];
  if (v5 <= a4)
    return -1;
  while (((*(_QWORD *)((char *)&v7 + (((unint64_t)*(unsigned __int8 *)(*a1 + a4) >> 3) & 0x18)) >> *(_BYTE *)(*a1 + a4)) & 1) != 0)
  {
    if (v5 == ++a4)
      return -1;
  }
  return a4;
}

uint64_t llvm::StringRef::find_last_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) != 0)
      return v6;
  }
  return -1;
}

uint64_t llvm::StringRef::find_last_not_of(_QWORD *a1, unsigned __int8 *a2, uint64_t a3, unint64_t a4)
{
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v10;

  for (; a3; --a3)
  {
    v4 = *a2++;
    *(_QWORD *)((char *)&v10 + (((unint64_t)v4 >> 3) & 0x18)) |= 1 << v4;
  }
  if (a1[1] >= a4)
    v5 = a4;
  else
    v5 = a1[1];
  while (v5)
  {
    v6 = v5 - 1;
    v7 = *(unsigned __int8 *)(*a1 + v5 - 1);
    v8 = *(_QWORD *)((char *)&v10 + ((v7 >> 3) & 0x18)) >> v7;
    v5 = v6;
    if ((v8 & 1) == 0)
      return v6;
  }
  return -1;
}

unsigned int *llvm::StringRef::split(unsigned int *result, unsigned int *a2, char *a3, size_t a4, int a5, int a6)
{
  unint64_t v8;
  int v9;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __int128 v16;

  v16 = *(_OWORD *)result;
  v8 = *((_QWORD *)&v16 + 1);
  if (a5)
  {
    v9 = a5;
    do
    {
      result = (unsigned int *)llvm::StringRef::find((uint64_t *)&v16, a3, a4, 0);
      if (result == (unsigned int *)-1)
        break;
      v12 = result;
      v13 = v16;
      if (result || a6)
      {
        if ((unint64_t)result >= v8)
          v14 = v8;
        else
          v14 = (uint64_t)result;
        result = llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, v16, v14);
      }
      v15 = (unint64_t)v12 + a4;
      if (v8 < (unint64_t)v12 + a4)
        v15 = v8;
      v8 -= v15;
      *(_QWORD *)&v16 = v13 + v15;
      *((_QWORD *)&v16 + 1) = v8;
      --v9;
    }
    while (v9);
  }
  if ((a6 & 1) != 0 || v8)
    return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, v16, v8);
  return result;
}

unsigned int *llvm::StringRef::split(unsigned int *result, unsigned int *a2, int __c, int a4, int a5)
{
  unsigned int *v7;
  unint64_t v8;
  int v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v7 = *(unsigned int **)result;
  v8 = *((_QWORD *)result + 1);
  if (a4)
  {
    v9 = a4;
    while (v8)
    {
      result = (unsigned int *)memchr(v7, __c, v8);
      if (!result)
        return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v8);
      v11 = (char *)result - (char *)v7;
      if ((char *)result - (char *)v7 == -1)
        return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v8);
      if (result != v7 || a5)
      {
        if (v11 >= v8)
          v12 = v8;
        else
          v12 = (char *)result - (char *)v7;
        result = llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v12);
      }
      if (v8 >= v11 + 1)
        v13 = v11 + 1;
      else
        v13 = v8;
      v7 = (unsigned int *)((char *)v7 + v13);
      v8 -= v13;
      if (!--v9)
        goto LABEL_16;
    }
    if (a5)
    {
      v8 = 0;
      return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v8);
    }
  }
  else
  {
LABEL_16:
    if ((a5 & 1) != 0 || v8)
      return llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back(a2, (uint64_t)v7, v8);
  }
  return result;
}

uint64_t llvm::consumeUnsignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t result;

  if (!(_DWORD)a2)
    LODWORD(a2) = GetAutoSenseRadix((uint64_t)this);
  v6 = *((_QWORD *)this + 1);
  if (!v6)
    return 1;
  v7 = 0;
  v8 = *(unsigned __int8 **)this;
  *a3 = 0;
  v9 = v6;
  do
  {
    if ((char)*v8 < 48)
      break;
    v10 = *v8;
    if (v10 >= 0x3A)
    {
      if (v10 < 0x61)
      {
        if (v10 - 65 > 0x19)
          break;
        v11 = -55;
      }
      else
      {
        if (v10 >= 0x7B)
          break;
        v11 = -87;
      }
    }
    else
    {
      v11 = -48;
    }
    v12 = v11 + v10;
    if (v12 >= a2)
      break;
    v13 = v7 * a2 + v12;
    *a3 = v13;
    if (v13 / a2 < v7)
      return 1;
    ++v8;
    v7 = v13;
    --v9;
  }
  while (v9);
  if (v6 == v9)
    return 1;
  result = 0;
  *(_QWORD *)this = v8;
  *((_QWORD *)this + 1) = v9;
  return result;
}

uint64_t GetAutoSenseRadix(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _WORD *v3;
  _WORD *v4;
  int v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 < 2)
    return 10;
  v3 = *(_WORD **)a1;
  if (**(_WORD **)a1 == 30768 || *v3 == 22576)
  {
    v4 = v3 + 1;
    v2 = 16;
LABEL_14:
    v6 = -2;
    goto LABEL_15;
  }
  if (*v3 == 25136 || *v3 == 16944)
  {
    v4 = v3 + 1;
    v2 = 2;
    goto LABEL_14;
  }
  if (*v3 == 28464)
  {
    v4 = v3 + 1;
    v2 = 8;
    goto LABEL_14;
  }
  if (*(_BYTE *)v3 == 48)
  {
    v5 = *((unsigned __int8 *)v3 + 1);
    v4 = (_WORD *)((char *)v3 + 1);
    if ((v5 - 48) <= 9)
    {
      v2 = 8;
      v6 = -1;
LABEL_15:
      *(_QWORD *)a1 = v4;
      *(_QWORD *)(a1 + 8) = v1 + v6;
      return v2;
    }
  }
  return 10;
}

uint64_t llvm::consumeSignedInteger(llvm *this, llvm::StringRef *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  char v10;
  __int128 v11;
  unint64_t v12;

  v12 = 0;
  v6 = *((_QWORD *)this + 1);
  if (v6 && **(_BYTE **)this == 45)
  {
    *(_QWORD *)&v11 = *(_QWORD *)this + 1;
    *((_QWORD *)&v11 + 1) = v6 - 1;
    LODWORD(result) = llvm::consumeUnsignedInteger((llvm *)&v11, a2, &v12, a4);
    v8 = v12;
    if (v12 > 0x8000000000000000)
      result = 1;
    else
      result = result;
    if ((result & 1) == 0)
    {
      *(_OWORD *)this = v11;
      v9 = -(uint64_t)v8;
LABEL_11:
      *a3 = v9;
    }
  }
  else
  {
    v10 = llvm::consumeUnsignedInteger(this, a2, &v12, a4);
    result = 1;
    if ((v10 & 1) == 0)
    {
      v9 = v12;
      if ((v12 & 0x8000000000000000) == 0)
      {
        result = 0;
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t llvm::StringRef::getAsInteger(llvm::StringRef *this, unsigned int a2, llvm::APInt *a3)
{
  unsigned int AutoSenseRadix;
  uint64_t v5;
  _BYTE *i;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  const unint64_t **v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  const unint64_t **v20;
  unsigned int v21;
  const unint64_t **v22;
  unsigned int v23;
  const unint64_t **v24;
  int v25;
  __int128 v26;

  AutoSenseRadix = a2;
  v26 = *(_OWORD *)this;
  if (!a2)
    AutoSenseRadix = GetAutoSenseRadix((uint64_t)&v26);
  v5 = *((_QWORD *)&v26 + 1);
  if (!*((_QWORD *)&v26 + 1))
    return 1;
  for (i = (_BYTE *)v26; *i == 48; ++i)
  {
    if (!--v5)
    {
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x24BD1B380](*(_QWORD *)a3, 0x1000C8000313F17);
      v7 = 0;
      *(_QWORD *)a3 = 0;
      *((_DWORD *)a3 + 2) = 64;
      return v7;
    }
  }
  v8 = 0;
  do
  {
    v9 = v8;
    v10 = 1 << v8++;
  }
  while (v10 < AutoSenseRadix);
  v11 = *((_DWORD *)a3 + 2);
  v12 = v9 * v5 > v11;
  if (v9 * v5 >= v11)
  {
    v11 = v9 * v5;
    if (v12)
    {
      llvm::APInt::zext(a3, v11, (llvm::APInt *)&v24);
      if (*((_DWORD *)a3 + 2) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x24BD1B380](*(_QWORD *)a3, 0x1000C8000313F17);
      *(_QWORD *)a3 = v24;
      *((_DWORD *)a3 + 2) = v25;
    }
  }
  v13 = 1;
  v25 = 1;
  v24 = 0;
  v23 = 1;
  v22 = 0;
  if (v10 == AutoSenseRadix)
  {
    v14 = 0;
  }
  else
  {
    llvm::APInt::APInt((llvm::APInt *)&v20, v11, AutoSenseRadix, 0);
    v14 = v20;
    v24 = v20;
    v13 = v21;
    v25 = v21;
    llvm::APInt::APInt((llvm::APInt *)&v20, v11, 0, 0);
    v22 = v20;
    v23 = v21;
  }
  llvm::APInt::operator=(a3, 0);
  v15 = 0;
  while ((char)i[v15] >= 48)
  {
    v16 = i[v15];
    if (v16 >= 0x3A)
    {
      if (v16 < 0x61)
      {
        if (v16 - 65 > 0x19)
          break;
        v17 = -55;
      }
      else
      {
        if (v16 >= 0x7B)
          break;
        v17 = -87;
      }
    }
    else
    {
      v17 = -48;
    }
    v18 = v17 + v16;
    if (v18 >= AutoSenseRadix)
      break;
    if (v10 == AutoSenseRadix)
    {
      llvm::APInt::operator<<=((llvm::APInt **)a3, v9);
      if (*((_DWORD *)a3 + 2) > 0x40u)
      {
        **(_QWORD **)a3 |= v18;
      }
      else
      {
        *(_QWORD *)a3 |= v18;
        llvm::APInt::clearUnusedBits((uint64_t)a3);
      }
    }
    else
    {
      llvm::APInt::operator*=((uint64_t)a3, &v24);
      llvm::APInt::operator=((llvm::APInt *)&v22, v18);
      llvm::APInt::operator+=((uint64_t)a3, &v22);
    }
    if (v5 == ++v15)
    {
      v7 = 0;
      goto LABEL_42;
    }
  }
  v7 = 1;
LABEL_42:
  if (v23 >= 0x41 && v22)
    MEMORY[0x24BD1B380](v22, 0x1000C8000313F17);
  if (v13 >= 0x41 && v14)
    MEMORY[0x24BD1B380](v14, 0x1000C8000313F17);
  return v7;
}

llvm::APFloat *llvm::APFloat::APFloat(llvm::APFloat *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  const llvm::APInt *v6;
  int v7;

  v7 = 64;
  v6 = *(const llvm::APInt **)&a2;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v4, &v6);
  *((_QWORD *)this + 1) = &llvm::semBogus;
  llvm::detail::IEEEFloat::operator=((uint64_t)this + 8, (uint64_t)&v4);
  if ((*(_DWORD *)(v4 + 8) - 64) <= 0xFFFFFF7F && v5)
    MEMORY[0x24BD1B380](v5, 0x1000C8000313F17);
  return this;
}

_QWORD *std::string::__init_with_size[abi:nn180100]<llvm::mapped_iterator<char const*,char (*)(char),char>,llvm::mapped_iterator<char const*,char (*)(char),char>>(_QWORD *result, char *a2, uint64_t (*a3)(_QWORD), char *a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  if (a6 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v10 = result;
  if (a6 > 0x16)
  {
    v11 = (a6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a6 | 7) != 0x17)
      v11 = a6 | 7;
    v12 = v11 + 1;
    result = operator new(v11 + 1);
    v10[1] = a6;
    v10[2] = v12 | 0x8000000000000000;
    *v10 = result;
    v10 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a6;
  }
  while (a2 != a4)
  {
    v13 = *a2++;
    result = (_QWORD *)a3(v13);
    *(_BYTE *)v10 = (_BYTE)result;
    v10 = (_QWORD *)((char *)v10 + 1);
  }
  *(_BYTE *)v10 = 0;
  return result;
}

uint64_t llvm::format_object<long long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void llvm::Twine::str(llvm::formatv_object_base **this@<X0>, std::string *a2@<X8>)
{
  int v3;
  llvm::formatv_object_base *v4;
  __int128 v5;
  void *v6;
  size_t v7;
  void *v8;
  __int128 v9;
  _QWORD v10[33];

  v10[32] = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned __int8 *)this + 32);
  if (v3 == 6)
  {
    if (*((_BYTE *)this + 33) == 1)
    {
      llvm::formatv_object_base::str(*this, a2);
      return;
    }
  }
  else if (v3 == 4 && *((_BYTE *)this + 33) == 1)
  {
    v4 = *this;
    if (*((char *)*this + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *(_OWORD *)v4;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v5;
    }
    return;
  }
  v8 = v10;
  v9 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef((unsigned __int8 *)this, (uint64_t)&v8);
  if (v6)
  {
    std::string::basic_string[abi:nn180100](a2, v6, v7);
  }
  else
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
  }
  if (v8 != v10)
    free(v8);
}

void llvm::formatv_object_base::str(llvm::formatv_object_base *this@<X0>, _QWORD *a2@<X8>)
{
  void (**v3)(llvm::raw_string_ostream *__hidden);
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v3 = &off_251C13AC0;
  v11 = a2;
  llvm::raw_ostream::SetUnbuffered(&v3);
  llvm::formatv_object_base::format(this, (llvm::raw_ostream *)&v3);
  if (v7 != v5)
    llvm::raw_ostream::flush_nonempty((llvm::raw_ostream *)&v3);
  v3 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v10 == 1)
  {
    if (v5)
      MEMORY[0x24BD1B380](v5, 0x1000C8077774924);
  }
}

void llvm::Twine::toVector(llvm::Twine *a1, uint64_t a2)
{
  void (**v3)(llvm::raw_ostream *__hidden);
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 1;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  v3 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
  v11 = a2;
  llvm::raw_ostream::SetUnbuffered(&v3);
  llvm::Twine::print(a1, (llvm::raw_ostream *)&v3);
  v3 = off_251C13948;
  if (v10 == 1)
  {
    if (v5)
      MEMORY[0x24BD1B380](v5, 0x1000C8077774924);
  }
}

void llvm::Twine::print(llvm::Twine *this, llvm::raw_ostream *a2)
{
  int v4;

  llvm::Twine::printOneChild((int)this, a2, *(size_t **)this, *((_QWORD *)this + 1), *((unsigned __int8 *)this + 32));
  llvm::Twine::printOneChild(v4, a2, *((size_t **)this + 2), *((_QWORD *)this + 3), *((unsigned __int8 *)this + 33));
}

const char *llvm::Twine::toNullTerminatedStringRef(uint64_t a1, const char **a2)
{
  unsigned int v3;
  const char *v4;

  if (*(_BYTE *)(a1 + 33) != 1)
    goto LABEL_7;
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 < 2)
    goto LABEL_7;
  if (v3 != 4)
  {
    if (v3 == 3)
    {
      v4 = *(const char **)a1;
      if (*(_QWORD *)a1)
        strlen(*(const char **)a1);
      return v4;
    }
LABEL_7:
    llvm::Twine::toVector((llvm::Twine *)a1, (uint64_t)a2);
    llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 0);
    v4 = *a2;
    --a2[1];
    return v4;
  }
  v4 = *(const char **)a1;
  if (*(char *)(*(_QWORD *)a1 + 23) < 0)
    return *(const char **)v4;
  return v4;
}

void llvm::Twine::printOneChild(int a1, llvm::raw_ostream *a2, size_t *this, size_t __n, int a5)
{
  unint64_t v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  const char *v9;
  size_t v10;
  _BYTE *v11;

  switch(a5)
  {
    case 2:
      llvm::Twine::print((llvm::Twine *)this, a2);
      return;
    case 3:
      llvm::raw_ostream::operator<<(a2, (char *)this);
      return;
    case 4:
      v7 = *((char *)this + 23);
      v8 = v7 < 0;
      if (v7 >= 0)
        v9 = (const char *)this;
      else
        v9 = (const char *)*this;
      if (v8)
        v10 = this[1];
      else
        v10 = *((unsigned __int8 *)this + 23);
      llvm::raw_ostream::write(a2, v9, v10);
      return;
    case 5:
      llvm::raw_ostream::operator<<(a2, this, __n);
      return;
    case 6:
      llvm::formatv_object_base::format((llvm::formatv_object_base *)this, a2);
      return;
    case 7:
      v11 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v11 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, (char)this);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v11 + 1;
        *v11 = (_BYTE)this;
      }
      return;
    case 8:
      v5 = this;
      goto LABEL_21;
    case 9:
      v6 = (int)this;
      goto LABEL_16;
    case 10:
    case 12:
      v5 = *this;
LABEL_21:
      write_unsigned<unsigned long>(a2, v5, 0, 0, 0);
      return;
    case 11:
    case 13:
      v6 = *this;
LABEL_16:
      llvm::write_integer(a2, v6, 0, 0);
      break;
    case 14:
      llvm::write_hex(a2, *this, 1, 0, 0);
      break;
    default:
      return;
  }
}

llvm::raw_ostream *llvm::reportInvalidSizeRequest(llvm *this, const char *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  void *v6;
  llvm::raw_ostream *result;
  _BYTE *v8;

  if (!atomic_load(ScalableErrorAsWarning))
  if (!*(_BYTE *)(ScalableErrorAsWarning[0] + 128))
    llvm::report_fatal_error((llvm *)"Invalid size request on a scalable vector.", (const llvm::Twine *)1);
  v4 = (llvm::raw_ostream *)llvm::errs(this);
  v5 = llvm::WithColor::warning(v4, &str_1_8, 0, 0);
  v6 = (void *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v6 > 0x2AuLL)
  {
    qmemcpy(v6, "Invalid size request on a scalable vector; ", 43);
    *((_QWORD *)v5 + 4) += 43;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, "Invalid size request on a scalable vector; ", 0x2BuLL);
  }
  result = llvm::raw_ostream::operator<<(v5, (char *)this);
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v8)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v8 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t `anonymous namespace'::CreateScalableErrorAsWarning::call(_anonymous_namespace_::CreateScalableErrorAsWarning *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = operator new();
  v2 = llvm::cl::Option::Option(v1, 0, 0);
  *(_BYTE *)(v2 + 128) = 0;
  *(_QWORD *)(v2 + 136) = &off_251C12500;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)v2 = off_251C123A8;
  *(_QWORD *)(v2 + 152) = &off_251C12520;
  *(_QWORD *)(v2 + 160) = &off_251C12410;
  *(_QWORD *)(v2 + 184) = v2 + 160;
  llvm::cl::Option::setArgStr(v2, (uint64_t *)"treat-scalable-fixed-error-as-warning", 0x25uLL);
  *(_WORD *)(v1 + 10) = *(_WORD *)(v1 + 10) & 0xFF9F | 0x20;
  *(_QWORD *)(v1 + 32) = "Treat issues where a fixed-width property is requested from a scalable type as a warning, instead of an error";
  *(_QWORD *)(v1 + 40) = 109;
  llvm::cl::Option::addArgument((llvm::cl::Option *)v1);
  return v1;
}

BOOL llvm::sys::UnicodeCharSet::contains(llvm::sys::UnicodeCharSet *this, unsigned int a2)
{
  unint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(unsigned int **)this;
  v4 = *(_QWORD *)this + 8 * v2;
  do
  {
    v5 = v2 >> 1;
    v6 = &v3[2 * (v2 >> 1)];
    v7 = v6[1];
    v8 = v6 + 2;
    v2 += ~(v2 >> 1);
    if (v7 < a2)
      v3 = v8;
    else
      v2 = v5;
  }
  while (v2);
  return v3 != (unsigned int *)v4 && *v3 <= a2;
}

uint64_t llvm::sys::unicode::columnWidthUTF8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;

  if (a2)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    while (1)
    {
      v6 = (char *)(a1 + v4);
      v7 = llvm::trailingBytesForUTF8[*(unsigned __int8 *)(a1 + v4)];
      if (llvm::trailingBytesForUTF8[*(unsigned __int8 *)(a1 + v4)])
      {
        if (v7 == -1)
          return 4294967294;
        v8 = (v7 + 1);
        v4 += v8;
        if (v4 > a2)
          return 4294967294;
        v12 = &v14;
        v13 = v6;
        if (llvm::ConvertUTF8toUTF32Impl(&v13, &v6[v8], &v12, (unint64_t)&v15, 0, 0))
          return 4294967294;
        v9 = v14;
        if (v14 != 173
          && !llvm::sys::UnicodeCharSet::contains((llvm::sys::UnicodeCharSet *)&llvm::sys::unicode::isPrintable(int)::Printables, v14))
        {
          return 0xFFFFFFFFLL;
        }
        if (llvm::sys::UnicodeCharSet::contains((llvm::sys::UnicodeCharSet *)&llvm::sys::unicode::charWidth(int)::CombiningCharacters, v9))
        {
          v10 = 0;
        }
        else if (llvm::sys::UnicodeCharSet::contains((llvm::sys::UnicodeCharSet *)&llvm::sys::unicode::charWidth(int)::DoubleWidthCharacters, v9))
        {
          v10 = 2;
        }
        else
        {
          v10 = 1;
        }
        v5 = (v10 + v5);
      }
      else
      {
        if (*(unsigned __int8 *)(a1 + v4) - 32 > 0x5E)
          return 0xFFFFFFFFLL;
        v5 = (v5 + 1);
        ++v4;
      }
      if (v4 >= a2)
        return v5;
    }
  }
  return 0;
}

llvm::raw_ostream *llvm::VersionTuple::getAsString@<X0>(llvm::VersionTuple *this@<X0>, _QWORD *a2@<X8>)
{
  llvm::raw_ostream *result;
  void (**v4)(llvm::raw_string_ostream *__hidden);
  int v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 1;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  v4 = &off_251C13AC0;
  v12 = a2;
  llvm::raw_ostream::SetUnbuffered(&v4);
  result = llvm::operator<<((llvm::raw_ostream *)&v4, this);
  v4 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
  if (v11 == 1)
  {
    result = v6;
    if (v6)
      return (llvm::raw_ostream *)MEMORY[0x24BD1B380](v6, 0x1000C8077774924);
  }
  return result;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, _QWORD *a2)
{
  unint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;

  write_unsigned<unsigned long>(a1, *(unsigned int *)a2, 0, 0, 0);
  if ((*a2 & 0x8000000000000000) != 0)
  {
    v4 = HIDWORD(*a2) & 0x7FFFFFFFLL;
    v5 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v5 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 46);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v5 + 1;
      *v5 = 46;
    }
    write_unsigned<unsigned long>(a1, v4, 0, 0, 0);
  }
  v6 = a2[1];
  if ((v6 & 0x80000000) != 0)
  {
    v7 = a2[1] & 0x7FFFFFFFLL;
    v8 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 46);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v8 + 1;
      *v8 = 46;
    }
    write_unsigned<unsigned long>(a1, v7, 0, 0, 0);
    v6 = a2[1];
  }
  if (v6 < 0)
  {
    v9 = (_BYTE *)*((_QWORD *)a1 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)a1 + 3))
    {
      llvm::raw_ostream::write(a1, 46);
    }
    else
    {
      *((_QWORD *)a1 + 4) = v9 + 1;
      *v9 = 46;
    }
    write_unsigned<unsigned long>(a1, HIDWORD(v6) & 0x7FFFFFFF & (v6 >> 63), 0, 0, 0);
  }
  return a1;
}

uint64_t llvm::VersionTuple::tryParse(unint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v4;
  char v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;

  v11 = a2;
  v12 = a3;
  v9 = 0;
  v10 = 0;
  if ((parseInt(&v11, (int *)&v10 + 1) & 1) != 0)
    return 1;
  v4 = v12;
  if (!v12)
  {
    v8 = HIDWORD(v10);
LABEL_15:
    result = 0;
    *a1 = v8;
    a1[1] = v4;
    return result;
  }
  if (*v11 != 46)
    return 1;
  ++v11;
  --v12;
  if ((parseInt(&v11, (int *)&v10) & 1) != 0)
    return 1;
  v4 = v12;
  if (!v12)
  {
    v7 = HIDWORD(v10) | ((unint64_t)v10 << 32);
    goto LABEL_18;
  }
  if (*v11 != 46)
    return 1;
  ++v11;
  --v12;
  if ((parseInt(&v11, (int *)&v9 + 1) & 1) != 0)
    return 1;
  if (!v12)
  {
    v8 = HIDWORD(v10) | ((unint64_t)v10 << 32) | 0x8000000000000000;
    v4 = HIDWORD(v9) | 0x80000000;
    goto LABEL_15;
  }
  if (*v11 != 46)
    return 1;
  ++v11;
  --v12;
  v5 = parseInt(&v11, (int *)&v9);
  result = 1;
  if ((v5 & 1) == 0 && !v12)
  {
    v7 = HIDWORD(v10) | ((unint64_t)v10 << 32);
    v4 = HIDWORD(v9) | ((unint64_t)v9 << 32) | 0x8000000080000000;
LABEL_18:
    v8 = v7 | 0x8000000000000000;
    goto LABEL_15;
  }
  return result;
}

uint64_t parseInt(unsigned __int8 **a1, int *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  int v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;

  v2 = a1[1];
  if (!v2)
    return 1;
  v3 = (uint64_t)*a1;
  v4 = *a1 + 1;
  v5 = **a1;
  *a1 = v4;
  a1[1] = v2 - 1;
  if ((v5 - 58) < 0xFFFFFFF6)
    return 1;
  v7 = v5 - 48;
  *a2 = v7;
  if (v2 != (unsigned __int8 *)1)
  {
    v8 = (unsigned __int8 *)(v3 + 2);
    v9 = v2 - 2;
    do
    {
      v10 = *v4;
      if ((v10 - 58) < 0xFFFFFFF6)
        break;
      ++v4;
      *a1 = v8;
      a1[1] = v9;
      v7 = v10 + 10 * v7 - 48;
      *a2 = v7;
      ++v8;
      --v9;
    }
    while (v9 != (unsigned __int8 *)-1);
  }
  return 0;
}

_QWORD *llvm::vfs::FileSystem::getBufferForFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 24))(v19);
  if ((v20 & 1) != 0)
  {
    v14 = v19[0];
    v15 = v19[1];
  }
  else
  {
    if (!a6)
    {
LABEL_5:
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19[0] + 32))(v19[0], a2, a3, a4, a5);
      goto LABEL_9;
    }
    result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v19[0] + 40))(&v16);
    if ((v18 & 1) == 0)
    {
      *(_QWORD *)a6 = v16;
      *(_BYTE *)(a6 + 8) = v17;
      goto LABEL_5;
    }
    v14 = v16;
    v15 = v17;
  }
  *(_BYTE *)(a7 + 16) |= 1u;
  *(_QWORD *)a7 = v14;
  *(_QWORD *)(a7 + 8) = v15;
LABEL_9:
  if ((v20 & 1) == 0)
  {
    result = (_QWORD *)v19[0];
    v19[0] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void std::vector<llvm::StringRef>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

llvm::sys::fs::directory_iterator *llvm::sys::fs::directory_iterator::directory_iterator(llvm::sys::fs::directory_iterator *this, const llvm::Twine *a2, std::error_code *a3, char a4)
{
  char *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  const std::error_category *v14;
  void *v16;
  __int128 v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 16) = a4;
  v7 = (char *)operator new(0x70uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = &off_251C13588;
  *((_QWORD *)v7 + 7) = 0;
  *(_OWORD *)(v7 + 40) = 0u;
  *((_DWORD *)v7 + 14) = 9;
  v7[60] = 1;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *(_OWORD *)(v7 + 92) = 0u;
  *((_DWORD *)v7 + 27) = 0xFFFF;
  *(_QWORD *)&v17 = v7;
  *(_OWORD *)(v7 + 24) = 0u;
  v16 = v7 + 24;
  std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100]((uint64_t)this, (__int128 *)&v16);
  v8 = (std::__shared_weak_count *)v17;
  if ((_QWORD)v17)
  {
    v9 = (unint64_t *)(v17 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v16 = v18;
  v17 = xmmword_24AA2AC90;
  v11 = *(_QWORD *)this;
  llvm::Twine::toStringRef((unsigned __int8 *)a2, (uint64_t)&v16);
  *(_QWORD *)&a3->__val_ = llvm::sys::fs::detail::directory_iterator_construct(v11, v12, v13, *((_BYTE *)this + 16));
  a3->__cat_ = v14;
  if (v16 != v18)
    free(v16);
  return this;
}

uint64_t std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C13588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C13588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::sys::fs::detail::DirIterState>::__on_zero_shared(uint64_t a1)
{
  llvm::sys::fs::detail::DirIterState::~DirIterState((void **)(a1 + 24));
}

void llvm::sys::fs::detail::DirIterState::~DirIterState(void **this)
{
  llvm::sys::fs::detail::directory_iterator_destruct((uint64_t)this);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

BOOL llvm::sys::fs::directory_iterator::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v5;
  unsigned __int8 *v6;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  _BYTE v10[28];
  int v11;

  v2 = *a1;
  v3 = *a2;
  if (*a1 == *a2)
    return 1;
  if (v3)
  {
    if (v2)
      return llvm::sys::fs::directory_entry::operator==((unsigned __int8 *)(v2 + 8), (unsigned __int8 *)(v3 + 8));
    v6 = (unsigned __int8 *)(v3 + 8);
  }
  else
  {
    v6 = (unsigned __int8 *)(v2 + 8);
  }
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  DWORD2(v8) = 9;
  BYTE12(v8) = 1;
  v9 = 0u;
  memset(v10, 0, sizeof(v10));
  v11 = 0xFFFF;
  v5 = llvm::sys::fs::directory_entry::operator==(v6, (unsigned __int8 *)__p);
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
  return v5;
}

BOOL llvm::sys::fs::directory_entry::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t llvm::FileError::build@<X0>(llvm::formatv_object_base **a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v15 = *a4;
  v16 = 0;
  *a4 = 0;
  v14 = &v16;
  llvm::handleAllErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>(&v15, &v14);
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v9 = operator new();
  v10 = v16;
  v16 = 0;
  v13 = v10;
  *a5 = llvm::FileError::FileError(v9, a1, a2, a3, &v13);
  v11 = v13;
  v13 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::handleAllErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>(uint64_t *a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  *a1 = 0;
  llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>((uint64_t)&v3, a2, &v4);
  result = v3;
  if (v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return result;
}

uint64_t llvm::handleErrors<llvm::FileError::build(llvm::Twine const&,std::optional<unsigned long>,llvm::Error)::{lambda(std::unique_ptr<llvm::ErrorInfoBase>)#1}>@<X0>(uint64_t result@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD **)result;
  if (*(_QWORD *)result)
  {
    *(_QWORD *)result = 0;
    if ((*(unsigned int (**)(_QWORD *, void *))(*v4 + 48))(v4, &llvm::ErrorList::ID))
    {
      *a3 = 0;
      v6 = (uint64_t *)v4[1];
      v7 = (uint64_t *)v4[2];
      if (v6 != v7)
      {
        v8 = 0;
        do
        {
          v12 = v8;
          v9 = *v6;
          *v6 = 0;
          if ((*(unsigned int (**)(uint64_t, void *))(*(_QWORD *)v9 + 48))(v9, &llvm::ErrorInfoBase::ID))
          {
            v10 = **a2;
            **a2 = v9;
            if (v10)
              (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
            v9 = 0;
          }
          v11 = v9;
          llvm::ErrorList::join(&v12, &v11, &v13);
          v8 = v13;
          *a3 = v13;
          v13 = 0;
          if (v11)
            (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          ++v6;
        }
        while (v6 != v7);
      }
      return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD *, void *))(*v4 + 48))(v4, &llvm::ErrorInfoBase::ID);
      if ((_DWORD)result)
      {
        result = **a2;
        **a2 = (uint64_t)v4;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v4 = 0;
      }
      *a3 = v4;
    }
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::FileError::FileError(uint64_t a1, llvm::formatv_object_base **this, uint64_t a3, char a4, uint64_t *a5)
{
  void **v9;
  uint64_t v10;
  uint64_t v11;
  std::string v13;

  *(_QWORD *)(a1 + 8) = 0;
  v9 = (void **)(a1 + 8);
  *(_QWORD *)a1 = off_251C128B8;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  llvm::Twine::str(this, &v13);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v9);
  *(std::string *)v9 = v13;
  v10 = *a5;
  *a5 = 0;
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = a4;
  return a1;
}

unint64_t **llvm::StringMap<std::nullopt_t,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t **i;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  unint64_t *v11;
  char *v12;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (unint64_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == (unint64_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v10 = operator new(a3 + 9, (std::align_val_t)8uLL);
  v11 = v10;
  v12 = (char *)(v10 + 1);
  if (a3)
    memcpy(v10 + 1, a2, a3);
  v12[a3] = 0;
  *v11 = a3;
  *i = v11;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t DefaultAutoDetectFunction(const llvm::raw_ostream *a1)
{
  if (!atomic_load(UseColor))
  if (!*(_DWORD *)(UseColor[0] + 128))
    return (*(uint64_t (**)(const llvm::raw_ostream *))(*(_QWORD *)a1 + 56))(a1);
  if (!atomic_load(UseColor))
  return *(_DWORD *)(UseColor[0] + 128) == 1;
}

llvm::raw_ostream *llvm::WithColor::error(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  llvm::raw_ostream *v6;
  _WORD *v7;
  _DWORD *v8;
  _DWORD *v9;

  if (!a3)
  {
LABEL_4:
    if (a4)
      goto LABEL_5;
    goto LABEL_8;
  }
  v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 1uLL)
  {
    llvm::raw_ostream::write(v6, ": ", 2uLL);
    goto LABEL_4;
  }
  *v7 = 8250;
  *((_QWORD *)v6 + 4) += 2;
  if (a4)
  {
LABEL_5:
    v8 = (_DWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v8 > 6uLL)
    {
      *(_DWORD *)((char *)v8 + 3) = 540701295;
      *v8 = 1869771365;
      *((_QWORD *)a1 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(a1, "error: ", 7uLL);
    }
    return a1;
  }
LABEL_8:
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 1, 1, 0);
  v9 = (_DWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 6uLL)
  {
    *(_DWORD *)((char *)v9 + 3) = 540701295;
    *v9 = 1869771365;
    *((_QWORD *)a1 + 4) += 7;
  }
  else
  {
    llvm::raw_ostream::write(a1, "error: ", 7uLL);
  }
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

llvm::raw_ostream *llvm::WithColor::warning(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  llvm::raw_ostream *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
  {
LABEL_4:
    if (a4)
      goto LABEL_5;
    goto LABEL_8;
  }
  v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 1uLL)
  {
    llvm::raw_ostream::write(v6, ": ", 2uLL);
    goto LABEL_4;
  }
  *v7 = 8250;
  *((_QWORD *)v6 + 4) += 2;
  if (a4)
  {
LABEL_5:
    v8 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v8) > 8)
    {
      *(_BYTE *)(v8 + 8) = 32;
      *(_QWORD *)v8 = *(_QWORD *)"warning: ";
      *((_QWORD *)a1 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(a1, "warning: ", 9uLL);
    }
    return a1;
  }
LABEL_8:
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 5, 1, 0);
  v9 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v9) > 8)
  {
    *(_BYTE *)(v9 + 8) = 32;
    *(_QWORD *)v9 = *(_QWORD *)"warning: ";
    *((_QWORD *)a1 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(a1, "warning: ", 9uLL);
  }
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

llvm::raw_ostream *llvm::WithColor::note(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  llvm::raw_ostream *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (!a3)
  {
LABEL_4:
    if (a4)
      goto LABEL_5;
    goto LABEL_8;
  }
  v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 1uLL)
  {
    llvm::raw_ostream::write(v6, ": ", 2uLL);
    goto LABEL_4;
  }
  *v7 = 8250;
  *((_QWORD *)v6 + 4) += 2;
  if (a4)
  {
LABEL_5:
    v8 = *((_QWORD *)a1 + 4);
    if ((unint64_t)(*((_QWORD *)a1 + 3) - v8) > 5)
    {
      *(_WORD *)(v8 + 4) = 8250;
      *(_DWORD *)v8 = 1702129518;
      *((_QWORD *)a1 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(a1, "note: ", 6uLL);
    }
    return a1;
  }
LABEL_8:
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0, 1, 0);
  v9 = *((_QWORD *)a1 + 4);
  if ((unint64_t)(*((_QWORD *)a1 + 3) - v9) > 5)
  {
    *(_WORD *)(v9 + 4) = 8250;
    *(_DWORD *)v9 = 1702129518;
    *((_QWORD *)a1 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(a1, "note: ", 6uLL);
  }
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

llvm::raw_ostream *llvm::WithColor::remark(llvm::raw_ostream *a1, const void *a2, size_t a3, int a4)
{
  llvm::raw_ostream *v6;
  _WORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  if (!a3)
  {
LABEL_4:
    if (a4)
      goto LABEL_5;
    goto LABEL_8;
  }
  v6 = llvm::raw_ostream::operator<<(a1, a2, a3);
  v7 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v7 <= 1uLL)
  {
    llvm::raw_ostream::write(v6, ": ", 2uLL);
    goto LABEL_4;
  }
  *v7 = 8250;
  *((_QWORD *)v6 + 4) += 2;
  if (a4)
  {
LABEL_5:
    v8 = (_QWORD *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v8 > 7uLL)
    {
      *v8 = 0x203A6B72616D6572;
      *((_QWORD *)a1 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a1, "remark: ", 8uLL);
    }
    return a1;
  }
LABEL_8:
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 4, 1, 0);
  v9 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v9 > 7uLL)
  {
    *v9 = 0x203A6B72616D6572;
    *((_QWORD *)a1 + 4) += 8;
  }
  else
  {
    llvm::raw_ostream::write(a1, "remark: ", 8uLL);
  }
  if (DefaultAutoDetectFunction(a1))
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 32))(a1);
  return a1;
}

_QWORD *llvm::WithColor::changeColor(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;

  v8 = *((_DWORD *)a1 + 2);
  if (!v8)
  {
    if (!DefaultAutoDetectFunction((const llvm::raw_ostream *)*a1))
      return a1;
    goto LABEL_3;
  }
  if (v8 == 1)
LABEL_3:
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 24))(*a1, a2, a3, a4);
  return a1;
}

llvm::WithColor *llvm::WithColor::resetColor(llvm::WithColor *this)
{
  int v2;

  v2 = *((_DWORD *)this + 2);
  if (!v2)
  {
    if (!DefaultAutoDetectFunction(*(const llvm::raw_ostream **)this))
      return this;
    goto LABEL_3;
  }
  if (v2 == 1)
LABEL_3:
    (*(void (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
  return this;
}

uint64_t `anonymous namespace'::CreateUseColor::call(_anonymous_namespace_::CreateUseColor *this)
{
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;

  v1 = operator new();
  v2 = atomic_load((unsigned __int8 *)&_MergedGlobals_0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_0))
  {
    qword_25795E278 = (uint64_t)"Color Options";
    qword_25795E280 = 13;
    unk_25795E288 = &str_1_8;
    qword_25795E290 = 0;
    llvm::cl::OptionCategory::registerCategory((llvm::cl::OptionCategory *)&qword_25795E278);
    __cxa_guard_release(&_MergedGlobals_0);
  }
  v3 = llvm::cl::Option::Option(v1, 0, 0);
  *(_DWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = off_251C12130;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)v1 = off_251C135C0;
  *(_QWORD *)(v1 + 152) = &off_251C12150;
  *(_QWORD *)(v1 + 160) = &off_251C13628;
  *(_QWORD *)(v1 + 184) = v1 + 160;
  llvm::cl::Option::setArgStr(v3, (uint64_t *)"color", 5uLL);
  llvm::cl::Option::addCategory((llvm::cl::OptionCategory ***)v1, (llvm::cl::OptionCategory *)&qword_25795E278);
  *(_QWORD *)(v1 + 32) = "Use colors in output (default=autodetect)";
  *(_QWORD *)(v1 + 40) = 41;
  *(_DWORD *)(v1 + 128) = 0;
  *(_BYTE *)(v1 + 148) = 1;
  *(_DWORD *)(v1 + 144) = 0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)v1);
  return v1;
}

uint64_t llvm::object_deleter<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>>::call(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::handleOccurrence(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  int v11;

  v11 = 0;
  v8 = llvm::cl::parser<llvm::cl::BOOLOrDefault>::parse((llvm *)(a1 + 152), a1, a3, a4, a5, a6, &v11);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 184);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  std::__throw_bad_function_call[abi:nn180100]();
  return llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getValueExpectedFlagDefault();
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getValueExpectedFlagDefault()
{
  return 1;
}

void llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::~opt(llvm::cl::Option *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C135C0;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::cl::Option::~Option(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = off_251C135C0;
  v2 = (char *)this + 160;
  v3 = (char *)*((_QWORD *)this + 23);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::cl::Option::~Option(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::getOptionWidth(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 152, a1);
}

llvm::raw_ostream *llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::printOptionInfo(llvm::cl::Option *a1, size_t a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::Option *)((char *)a1 + 152), a1, a2);
}

void llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::printOptionValue(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *(_DWORD *)(a1 + 128);
LABEL_5:
    v5 = *(_DWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 148);
    v4 = off_251C12130;
    llvm::cl::parser<llvm::cl::BOOLOrDefault>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 152), (const llvm::cl::Option *)a1, v3, (uint64_t)&v4, a2);
    return;
  }
  if (*(_BYTE *)(a1 + 148))
  {
    v3 = *(_DWORD *)(a1 + 128);
    if (*(_DWORD *)(a1 + 144) != v3)
      goto LABEL_5;
  }
}

uint64_t llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::setDefault(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_251C13628;
  return result;
}

void std::__function::__func<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1},std::allocator<llvm::cl::opt<llvm::cl::BOOLOrDefault,false,llvm::cl::parser<llvm::cl::BOOLOrDefault>>::{lambda(llvm::cl::BOOLOrDefault const&)#1}>,void ()(llvm::cl::BOOLOrDefault const&)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_251C13628;
}

void llvm::yaml::Scanner::getNext(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t *v9;

  v4 = llvm::yaml::Scanner::peekNext(this);
  v5 = *(_OWORD *)v4;
  *(_QWORD *)(a2 + 16) = v4[2];
  *(_OWORD *)a2 = v5;
  v6 = (std::string *)(a2 + 24);
  if (*((char *)v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, (const std::string::value_type *)v4[3], v4[4]);
  }
  else
  {
    v7 = *(_OWORD *)(v4 + 3);
    *(_QWORD *)(a2 + 40) = v4[5];
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v9 = this[22];
  v8 = (uint64_t *)(this + 22);
  if (v9 == v8
    || (llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::pop_front((uint64_t)(v8 - 12)),
        (uint64_t *)*v8 == v8))
  {
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset((uint64_t)(v8 - 12));
  }
}

uint64_t decodeUTF8(unsigned __int8 *a1, unint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  int v12;

  if ((uint64_t)a2 < 1)
    goto LABEL_21;
  v2 = (char)*a1;
  if ((v2 & 0x80000000) == 0)
  {
    v3 = *a1;
    v4 = 0x100000000;
    return v4 | v3;
  }
  if (a2 < 2)
    goto LABEL_21;
  if ((v2 & 0xE0) == 0xC0)
  {
    v5 = a1[1];
    if ((v5 & 0xC0) == 0x80)
    {
      v3 = v5 & 0x3F | ((v2 & 0x1F) << 6);
      if (v3 >= 0x80)
      {
        v4 = 0x200000000;
        return v4 | v3;
      }
    }
  }
  if (a2 < 3)
  {
LABEL_21:
    v3 = 0;
    v4 = 0;
    return v4 | v3;
  }
  if ((v2 & 0xF0) == 0xE0)
  {
    v6 = a1[1];
    if ((v6 & 0xC0) == 0x80)
    {
      v7 = a1[2];
      if ((v7 & 0xC0) == 0x80)
      {
        v8 = ((v2 & 0xF) << 12) | ((v6 & 0x3F) << 6);
        v3 = v8 | v7 & 0x3F;
        if (v3 >= 0x800 && (v8 - 57344) <= 0xFFFFF7FF)
        {
          v4 = 0x300000000;
          return v4 | v3;
        }
      }
    }
  }
  v3 = 0;
  if (a2 < 4)
  {
    v4 = 0;
    return v4 | v3;
  }
  v4 = 0;
  if ((v2 & 0xF8) == 0xF0)
  {
    v9 = a1[1];
    if ((v9 & 0xC0) == 0x80)
    {
      v10 = a1[2];
      if ((v10 & 0xC0) == 0x80)
      {
        v11 = a1[3];
        if ((v11 & 0xC0) == 0x80)
        {
          v12 = ((v2 & 7) << 18) | ((v9 & 0x3F) << 12);
          if ((v12 - 1114112) >= 0xFFF00000)
          {
            v3 = v11 & 0x3F | ((v10 & 0x3F) << 6) | v12;
            v4 = 0x400000000;
            return v4 | v3;
          }
        }
      }
    }
    goto LABEL_21;
  }
  return v4 | v3;
}

_QWORD *encodeUTF8(_QWORD *result, _QWORD *a2)
{
  char v3;
  unsigned int v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  if (result > 0x7F)
  {
    if (result > 0x7FF)
    {
      if (result >> 16)
      {
        if (result >> 16 > 0x10)
          return result;
        v6 = (result >> 12) & 0x3F | 0xFFFFFF80;
        v7 = (result >> 6) & 0x3F | 0xFFFFFF80;
        v8 = result & 0x3F | 0x80;
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (result >> 18) | 0xF0);
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v6);
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v7);
        LOBYTE(result) = v8;
      }
      else
      {
        v4 = (result >> 6) & 0x3F | 0xFFFFFF80;
        v5 = result & 0x3F | 0x80;
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (result >> 12) | 0xE0);
        llvm::SmallVectorTemplateBase<char,true>::push_back(a2, v4);
        LOBYTE(result) = v5;
      }
    }
    else
    {
      v3 = result & 0x3F | 0x80;
      llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (result >> 6) | 0xC0);
      LOBYTE(result) = v3;
    }
  }
  return llvm::SmallVectorTemplateBase<char,true>::push_back(a2, (char)result);
}

uint64_t llvm::yaml::Scanner::Scanner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v8[4];

  *(_QWORD *)a1 = a4;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 75) = a5;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 104) = 0x400000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 160;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 168) = 1;
  *(_QWORD *)(a1 + 176) = a1 + 176;
  *(_QWORD *)(a1 + 184) = a1 + 176;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x400000000;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x400000000;
  *(_QWORD *)(a1 + 336) = a6;
  v8[0] = a2;
  v8[1] = a3;
  v8[2] = (uint64_t)"YAML";
  v8[3] = 4;
  llvm::yaml::Scanner::init(a1, v8);
  return a1;
}

void llvm::yaml::Scanner::init(uint64_t a1, uint64_t *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t *v11;
  char **v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char **v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char **v25;
  _QWORD *v26;
  char *v27;
  uint64_t *v28;

  v3 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = v4 + *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 56) = xmmword_24AA2D7A0;
  *(_WORD *)(a1 + 72) = 257;
  *(_BYTE *)(a1 + 74) = 0;
  v6 = *a2;
  v7 = a2[1];
  v8 = (char *)a2[2];
  v9 = (char **)a2[3];
  LOWORD(v28) = 261;
  v24 = v8;
  v25 = v9;
  v21 = &v24;
  v10 = operator new(24, (unsigned __int8 **)&v21);
  *(_QWORD *)v10 = off_251C12C18;
  *((_QWORD *)v10 + 1) = v6;
  *((_QWORD *)v10 + 2) = v6 + v7;
  v11 = *(uint64_t **)a1;
  v23 = 0;
  v12 = (char **)v11[1];
  v13 = v11[2];
  if ((unint64_t)v12 >= v13)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v12 - *v11) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *v11) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    v28 = v11 + 2;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)(v11 + 2), v18);
    else
      v19 = 0;
    v20 = (char **)&v19[24 * v15];
    v24 = v19;
    v25 = v20;
    v27 = &v19[24 * v18];
    v21 = 0;
    v20[1] = 0;
    v20[2] = 0;
    *v20 = v10;
    v22 = 0;
    v26 = v20 + 3;
    std::vector<llvm::SourceMgr::SrcBuffer>::__swap_out_circular_buffer(v11, &v24);
    v14 = (_QWORD *)v11[1];
    std::__split_buffer<llvm::SourceMgr::SrcBuffer>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    v12[1] = 0;
    v12[2] = 0;
    v21 = 0;
    v22 = 0;
    v14 = v12 + 3;
    *v12 = v10;
  }
  v11[1] = (uint64_t)v14;
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v21);
}

uint64_t *llvm::yaml::Scanner::peekNext(uint64_t **this)
{
  char v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;

  v2 = 0;
  v3 = (uint64_t *)(this + 22);
  while ((v2 & 1) == 0 && (uint64_t *)*v3 != v3
       || (llvm::yaml::Scanner::fetchMoreTokens((llvm::yaml::Scanner *)this) & 1) != 0)
  {
    llvm::yaml::Scanner::removeStaleSimpleKeyCandidates((llvm::yaml::Scanner *)this);
    v4 = this[23];
    v5 = this[28];
    v6 = *((unsigned int *)this + 58);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      v8 = this[28];
      while ((uint64_t *)*v8 != v4)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7)
        {
          v8 = &v5[3 * v6];
          break;
        }
      }
    }
    else
    {
      v8 = this[28];
    }
    v9 = 0xAAAAAAAAAAAAAAABLL * (v8 - v5);
    v2 = 1;
    if (v9 == v6)
      return v4 + 2;
  }
  llvm::simple_ilist<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Node>::eraseAndDispose<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Disposer>((uint64_t)v3, this[23], v3);
  *((_DWORD *)this + 58) = 0;
  v10 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 10), 64, 3);
  *(_OWORD *)(v10 + 32) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  v11 = this[22];
  *(_QWORD *)v10 = v11;
  *(_QWORD *)(v10 + 8) = v3;
  v11[1] = v10;
  this[22] = (uint64_t *)v10;
  v4 = this[23];
  return v4 + 2;
}

uint64_t llvm::yaml::Scanner::fetchMoreTokens(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  int v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unsigned int v23;
  llvm::formatv_object_base *v24;
  const char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  int v31;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  int v41;
  llvm::formatv_object_base *v42;
  char *v44;
  int v45;
  unsigned int v46;
  int v47;
  char *v49;
  int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unsigned int v54;
  _BYTE *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[2];
  llvm::formatv_object_base *v59[6];

  if (*((_BYTE *)this + 72))
  {
    *((_BYTE *)this + 72) = 0;
    v2 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v3 = *((_QWORD *)this + 6) - (_QWORD)v2;
    if (!v3)
      goto LABEL_74;
    v4 = 0;
    v5 = *v2;
    if (v5 <= 0xFD)
    {
      if (*v2)
      {
        if (v5 != 239)
        {
LABEL_75:
          memset(&v59[3], 0, 24);
          v21 = 1;
          LODWORD(v59[0]) = 1;
          v59[1] = (llvm::formatv_object_base *)v2;
          v59[2] = (llvm::formatv_object_base *)v4;
          v34 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (__int128 *)v59);
          v36 = *((_QWORD *)this + 22);
          v35 = (_QWORD *)((char *)this + 176);
          *v34 = v36;
          v34[1] = v35;
          *(_QWORD *)(v36 + 8) = v34;
          *v35 = v34;
          *(v35 - 17) += v4;
          return v21;
        }
        if (v3 >= 3 && v2[1] == 187 && v2[2] == 191)
        {
          v4 = 3;
          goto LABEL_75;
        }
LABEL_74:
        v4 = 0;
        goto LABEL_75;
      }
      if (v3 < 4 || v2[1] || !v2[2] || v2[2] != 254 || v2[3] != 255)
        goto LABEL_74;
LABEL_51:
      v4 = 4;
      goto LABEL_75;
    }
    if (v5 == 254)
    {
      if (v3 < 2 || v2[1] != 255)
        goto LABEL_74;
    }
    else if (v3 < 4)
    {
      if (v3 <= 1 || v2[1] != 254)
        goto LABEL_74;
    }
    else
    {
      if (v2[1] != 254)
        goto LABEL_74;
      if (!v2[2] && !v2[3])
        goto LABEL_51;
    }
    v4 = 2;
    goto LABEL_75;
  }
  v7 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v6 = (unsigned __int8 *)*((_QWORD *)this + 6);
  while (1)
  {
    while (v7 != v6)
    {
      v8 = *v7;
      if (v8 != 32 && v8 != 9)
        break;
      *((_QWORD *)this + 5) = ++v7;
      ++*((_DWORD *)this + 15);
    }
    llvm::yaml::Scanner::skipComment((const char *)this);
    v10 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v6 = (unsigned __int8 *)*((_QWORD *)this + 6);
    if (v6 == v10)
    {
      if (*((_DWORD *)this + 15))
      {
        v17 = *((_DWORD *)this + 16) + 1;
        *((_DWORD *)this + 15) = 0;
        *((_DWORD *)this + 16) = v17;
      }
      llvm::yaml::Scanner::unrollIndent((unint64_t)this, -1);
      *((_DWORD *)this + 58) = 0;
      *((_BYTE *)this + 73) = 0;
      LODWORD(v59[0]) = 2;
      v59[1] = *((llvm::formatv_object_base **)this + 5);
      memset(&v59[2], 0, 32);
LABEL_31:
      v18 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (__int128 *)v59);
      v20 = *((_QWORD *)this + 22);
      v19 = (_QWORD *)((char *)this + 176);
      *v18 = v20;
      v18[1] = v19;
      *(_QWORD *)(v20 + 8) = v18;
      *v19 = v18;
      return 1;
    }
    v11 = *v10;
    if (v11 == 10)
    {
      v7 = v10 + 1;
      goto LABEL_26;
    }
    if (v11 != 13)
      break;
    v12 = v10 + 1;
    v7 = (unsigned __int8 *)*((_QWORD *)this + 6);
    if (v10 + 1 != v6)
    {
      v13 = v10[1];
      v14 = v10 + 2;
      if (v13 == 10)
        v7 = v14;
      else
        v7 = v12;
    }
LABEL_26:
    *((_QWORD *)this + 5) = v7;
    v15 = *((_DWORD *)this + 17);
    v16 = *((_DWORD *)this + 16) + 1;
    *((_DWORD *)this + 15) = 0;
    *((_DWORD *)this + 16) = v16;
    if (!v15)
      *((_BYTE *)this + 73) = 1;
  }
  llvm::yaml::Scanner::removeStaleSimpleKeyCandidates(this);
  llvm::yaml::Scanner::unrollIndent((unint64_t)this, *((_DWORD *)this + 15));
  v22 = (char *)*((_QWORD *)this + 5);
  v23 = *v22;
  if (*((_DWORD *)this + 15))
  {
LABEL_40:
    if (*v22 <= 0x39u)
    {
      switch(*v22)
      {
        case '!':
          return llvm::yaml::Scanner::scanTag(this);
        case '"':
          return llvm::yaml::Scanner::scanFlowScalar((std::error_category *)this, 1);
        case '&':
          return llvm::yaml::Scanner::scanAliasOrAnchor(this, 0);
        case '\'':
          return llvm::yaml::Scanner::scanFlowScalar((std::error_category *)this, 0);
        case '*':
          return llvm::yaml::Scanner::scanAliasOrAnchor(this, 1);
        case ',':
          goto LABEL_96;
        case '-':
          v37 = *((_QWORD *)this + 6);
          goto LABEL_132;
        default:
          goto LABEL_166;
      }
    }
    goto LABEL_41;
  }
  if (v23 != 37)
  {
    v37 = *((_QWORD *)this + 6);
    if ((unint64_t)(v22 + 4) > v37)
      goto LABEL_40;
    if (*v22 <= 0x39u)
    {
      switch(*v22)
      {
        case '!':
          return llvm::yaml::Scanner::scanTag(this);
        case '"':
          return llvm::yaml::Scanner::scanFlowScalar((std::error_category *)this, 1);
        case '&':
          return llvm::yaml::Scanner::scanAliasOrAnchor(this, 0);
        case '\'':
          return llvm::yaml::Scanner::scanFlowScalar((std::error_category *)this, 0);
        case '*':
          return llvm::yaml::Scanner::scanAliasOrAnchor(this, 1);
        case ',':
LABEL_96:
          llvm::yaml::Scanner::scanFlowEntry(this);
          return 1;
        case '-':
          if (v22[1] == 45 && v22[2] == 45)
          {
            if (v22 + 3 == (char *)v37
              || (v51 = v22[3], v51 <= 0x20) && ((1 << v51) & 0x100002600) != 0)
            {
              v21 = 1;
              llvm::yaml::Scanner::scanDocumentIndicator(this, 1);
              return v21;
            }
          }
LABEL_132:
          if ((char *)v37 != v22 + 1)
          {
            v46 = v22[1];
            if (v46 <= 0x20 && ((1 << v46) & 0x100002600) != 0)
            {
              llvm::yaml::Scanner::scanBlockEntry(this);
              return 1;
            }
          }
          break;
        case '.':
          if (v22[1] != 46)
            goto LABEL_166;
          if (v22[2] != 46)
            goto LABEL_166;
          if (v22 + 3 != (char *)v37)
          {
            v52 = v22[3];
            if (v52 > 0x20 || ((1 << v52) & 0x100002600) == 0)
              goto LABEL_166;
          }
          llvm::yaml::Scanner::scanDocumentIndicator(this, 0);
          return 1;
        default:
          goto LABEL_166;
      }
      goto LABEL_166;
    }
LABEL_41:
    if (*v22 > 0x5Cu)
    {
      if (*v22 > 0x7Bu)
      {
        if (v23 == 124)
        {
LABEL_91:
          if (!*((_DWORD *)this + 17))
            return llvm::yaml::Scanner::scanBlockScalar((std::error_category *)this);
          goto LABEL_166;
        }
        if (v23 == 125)
        {
          llvm::yaml::Scanner::scanFlowCollectionEnd(this, 0);
          return 1;
        }
      }
      else
      {
        if (v23 == 93)
        {
          v21 = 1;
          llvm::yaml::Scanner::scanFlowCollectionEnd(this, 1);
          return v21;
        }
        if (v23 == 123)
        {
          llvm::yaml::Scanner::scanFlowCollectionStart(this, 0);
          return 1;
        }
      }
    }
    else if (*v22 > 0x3Eu)
    {
      if (v23 == 63)
      {
        if (*((_DWORD *)this + 17)
          || *((char **)this + 6) != v22 + 1
          && (v39 = v22[1], v39 <= 0x20)
          && ((1 << v39) & 0x100002600) != 0)
        {
          llvm::yaml::Scanner::scanKey(this);
          return 1;
        }
      }
      else if (v23 == 91)
      {
        v21 = 1;
        llvm::yaml::Scanner::scanFlowCollectionStart(this, 1);
        return v21;
      }
    }
    else
    {
      if (v23 != 58)
      {
        if (v23 != 62)
          goto LABEL_166;
        goto LABEL_91;
      }
      if (*((_DWORD *)this + 17))
        return llvm::yaml::Scanner::scanValue(this);
      if (*((char **)this + 6) != v22 + 1)
      {
        v38 = v22[1];
        if (v38 <= 0x20 && ((1 << v38) & 0x100002600) != 0)
          return llvm::yaml::Scanner::scanValue(this);
      }
    }
LABEL_166:
    v58[0] = *((_QWORD *)this + 5);
    v58[1] = 1;
    v53 = *((_QWORD *)this + 6);
    if ((char *)v53 != v22 && v23 <= 0x20 && ((1 << v23) & 0x100002600) != 0)
      goto LABEL_175;
    {
      if (v23 != 45)
        goto LABEL_175;
      if ((char *)v53 != v22 + 1)
      {
        v54 = v22[1];
        if (v54 <= 0x20 && ((1 << v54) & 0x100002600) != 0)
        {
          v23 = 45;
LABEL_175:
          if (*((_DWORD *)this + 17)
            || v23 != 63 && v23 != 58
            || ((v55 = v22 + 1, (char *)v53 == v22 + 1)
             || (v56 = *v55, v56 > 0x20)
             || ((1 << v56) & 0x100002600) == 0)
            && (v23 != 58
             || (unint64_t)(v22 + 2) >= v53
             || *v55 != 58
             || (v57 = v22[2], v57 <= 0x20) && ((1 << v57) & 0x100002600) != 0))
          {
            v59[0] = (llvm::formatv_object_base *)"Unrecognized character while tokenizing.";
            LOWORD(v59[4]) = 259;
            llvm::yaml::Scanner::setError((std::error_category *)this, v59, v22);
            return 0;
          }
        }
      }
    }
    return llvm::yaml::Scanner::scanPlainScalar(this);
  }
  llvm::yaml::Scanner::unrollIndent((unint64_t)this, -1);
  *((_DWORD *)this + 58) = 0;
  *((_BYTE *)this + 73) = 0;
  v24 = (llvm::formatv_object_base *)*((_QWORD *)this + 5);
  llvm::yaml::Scanner::consume((std::error_category *)this, 37);
  v26 = (char *)*((_QWORD *)this + 5);
  v25 = (const char *)*((_QWORD *)this + 6);
  v27 = v26;
  while (v25 != v27)
  {
    v28 = v27;
    v29 = *v27;
    if (v29 != 9 && v29 != 32)
    {
      v27 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v27);
      if (v27 != v28)
        continue;
    }
    *((_QWORD *)this + 5) = v28;
    v30 = (char *)(v28 - v26);
    while (1)
    {
      v31 = *v28;
      if (v31 != 32 && v31 != 9)
        goto LABEL_110;
      if (++v28 == v25)
        goto LABEL_109;
    }
  }
  v30 = (char *)(v25 - v26);
LABEL_109:
  v28 = (char *)v25;
LABEL_110:
  *((_QWORD *)this + 5) = v28;
  LODWORD(v59[0]) = 0;
  memset(&v59[1], 0, 40);
  if (v30 == (char *)3)
  {
    if (*(_WORD *)v26 != 16724 || v26[2] != 71)
      return 0;
    do
    {
      if (v25 == v28)
      {
LABEL_144:
        v44 = (char *)v25;
        goto LABEL_145;
      }
      v44 = v28;
      v45 = *v28;
      if (v45 == 9)
        break;
      if (v45 == 32)
        break;
      v28 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v28);
    }
    while (v28 != v44);
    *((_QWORD *)this + 5) = v44;
    while (1)
    {
      v47 = *v44;
      if (v47 != 32 && v47 != 9)
        break;
      if (++v44 == v25)
        goto LABEL_144;
    }
LABEL_145:
    *((_QWORD *)this + 5) = v44;
    while (v25 != v44)
    {
      v49 = v44;
      v50 = *v44;
      if (v50 != 9 && v50 != 32)
      {
        v44 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v44);
        if (v44 != v49)
          continue;
      }
      goto LABEL_152;
    }
    v49 = (char *)v25;
LABEL_152:
    *((_QWORD *)this + 5) = v49;
    LODWORD(v59[0]) = 4;
    v42 = (llvm::formatv_object_base *)(v49 - (char *)v24);
LABEL_153:
    v59[1] = v24;
    v59[2] = v42;
    goto LABEL_31;
  }
  v21 = 0;
  if (v30 == (char *)4)
  {
    if (*(_DWORD *)v26 == 1280131417)
    {
      while (v25 != v28)
      {
        v40 = v28;
        v41 = *v28;
        if (v41 != 9 && v41 != 32)
        {
          v28 = (char *)llvm::yaml::Scanner::skip_nb_char(v25, v28);
          if (v28 != v40)
            continue;
        }
        goto LABEL_119;
      }
      v40 = (char *)v25;
LABEL_119:
      *((_QWORD *)this + 5) = v40;
      LODWORD(v59[0]) = 3;
      v42 = (llvm::formatv_object_base *)(v40 - (char *)v24);
      goto LABEL_153;
    }
    return 0;
  }
  return v21;
}

void llvm::yaml::Scanner::removeStaleSimpleKeyCandidates(llvm::yaml::Scanner *this)
{
  int v1;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  llvm::formatv_object_base *v6;
  __int16 v7;

  v1 = *((_DWORD *)this + 58);
  if (v1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 28);
    v4 = v3;
    do
    {
      if (v4[3] == *((_DWORD *)this + 16) && (v4[2] + 1024) >= *((_DWORD *)this + 15))
      {
        v4 += 6;
      }
      else
      {
        if (*((_BYTE *)v4 + 20))
        {
          v6 = (llvm::formatv_object_base *)"Could not find expected : for simple key";
          v7 = 259;
          llvm::yaml::Scanner::setError((std::error_category *)this, &v6, *(char **)(*(_QWORD *)v4 + 24));
          v3 = (_DWORD *)*((_QWORD *)this + 28);
          v1 = *((_DWORD *)this + 58);
        }
        v5 = (char *)&v3[6 * v1] - (char *)(v4 + 6);
        if (v5)
        {
          memmove(v4, v4 + 6, v5 - 3);
          v1 = *((_DWORD *)this + 58);
          v3 = (_DWORD *)*((_QWORD *)this + 28);
        }
        *((_DWORD *)this + 58) = --v1;
      }
    }
    while (v4 != &v3[6 * v1]);
  }
}

void llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::pop_front(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = *(uint64_t **)(a1 + 104);
  v3 = *v1;
  v2 = (uint64_t *)v1[1];
  *v2 = *v1;
  *(_QWORD *)(v3 + 8) = v2;
  *v1 = 0;
  v1[1] = 0;
  if (*((char *)v1 + 63) < 0)
    operator delete((void *)v1[5]);
}

const char *llvm::yaml::Scanner::skip_nb_char(const char *this, char *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  unsigned int v7;

  v3 = this - a2;
  if (v3)
  {
    v4 = *a2;
    if (v4 == 9 || (v4 - 127) >= 0xFFFFFFA1)
    {
      return a2 + 1;
    }
    else
    {
      if ((v4 & 0x80) == 0)
        return a2;
      v5 = decodeUTF8((unsigned __int8 *)a2, v3);
      if (!HIDWORD(v5))
        return a2;
      v6 = v5;
      if ((_DWORD)v5 == 65279)
        return a2;
      v7 = v5 - 0x10000;
      this = &a2[HIDWORD(v5)];
      if (v7 >= 0x100000
        && (v6 - 57344) >> 1 >= 0xFFF
        && v6 != 133
        && (v6 - 160) >> 5 >= 0x6BB)
      {
        return a2;
      }
    }
  }
  return this;
}

uint64_t llvm::yaml::Scanner::consume(std::error_category *this, int a2)
{
  char *v2;
  llvm::formatv_object_base *v4;
  __int16 v5;

  v2 = (char *)this[5].__vftable;
  if (v2 != (char *)this[6].__vftable)
  {
    if (*v2 < 0)
    {
      v4 = (llvm::formatv_object_base *)"Cannot consume non-ascii characters";
      v5 = 259;
      llvm::yaml::Scanner::setError(this, &v4, v2);
    }
    else if (*v2 == a2)
    {
      this[5].__vftable = (std::error_category_vtbl *)(v2 + 1);
      ++HIDWORD(this[7].__vftable);
      return 1;
    }
  }
  return 0;
}

void llvm::yaml::Scanner::setError(std::error_category *this, llvm::formatv_object_base **a2, char *a3)
{
  std::error_category *v4;
  unint64_t v5;
  char *v6;
  std::error_category_vtbl *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  llvm::raw_ostream *v10;
  uint64_t v11;

  v4 = this;
  v5 = (unint64_t)this[6].__vftable;
  if (v5 <= (unint64_t)a3)
    v6 = (char *)(v5 - 1);
  else
    v6 = a3;
  if (this[42].__vftable)
  {
    this = (std::error_category *)std::generic_category();
    v7 = v4[42].__vftable;
    v7->~error_category = (void (__cdecl *)(std::error_category *__hidden))22;
    v7->~error_category_0 = (void (__cdecl *)(std::error_category *__hidden))this;
  }
  if (!BYTE2(v4[9].__vftable))
  {
    v8 = (uint64_t *)v4->__vftable;
    v9 = BYTE3(v4[9].__vftable);
    v10 = (llvm::raw_ostream *)llvm::errs((llvm *)this);
    llvm::SourceMgr::PrintMessage(v8, v10, v6, 0, a2, 0, 0, v11, 0, 0, v9);
  }
  BYTE2(v4[9].__vftable) = 1;
}

uint64_t llvm::yaml::Scanner::consumeLineBreakIfPresent(llvm::yaml::Scanner *this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;
  unsigned __int8 *v4;
  int v5;
  unsigned __int8 *v6;
  int v8;

  v2 = (unsigned __int8 *)*((_QWORD *)this + 5);
  v1 = (unsigned __int8 *)*((_QWORD *)this + 6);
  if (v1 == v2)
    return 0;
  v3 = *v2;
  if (v3 != 10)
  {
    if (v3 == 13)
    {
      v4 = v2 + 1;
      if (v2 + 1 != v1)
      {
        v5 = v2[1];
        v6 = v2 + 2;
        if (v5 == 10)
          v1 = v6;
        else
          v1 = v4;
      }
      goto LABEL_10;
    }
    return 0;
  }
  v1 = v2 + 1;
LABEL_10:
  v8 = *((_DWORD *)this + 16) + 1;
  *((_DWORD *)this + 15) = 0;
  *((_DWORD *)this + 16) = v8;
  *((_QWORD *)this + 5) = v1;
  return 1;
}

__n128 llvm::yaml::Scanner::saveSimpleKeyCandidate(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __n128 *v8;
  __n128 *v9;
  __n128 result;
  unint64_t v11;
  BOOL v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;

  if (*(_BYTE *)(a1 + 73))
  {
    v14 = a2;
    v15 = a3;
    v17 = 0;
    v6 = *(_QWORD *)(a1 + 224);
    v4 = a1 + 224;
    v5 = v6;
    v16 = *(_QWORD *)(v4 - 160);
    v7 = *(unsigned int *)(v4 + 8);
    v8 = (__n128 *)&v14;
    if (v7 >= *(_DWORD *)(v4 + 12))
    {
      v11 = v7 + 1;
      v12 = v5 + 24 * v7 > (unint64_t)&v14;
      if (v5 <= (unint64_t)&v14 && v12)
      {
        v13 = (char *)&v14 - v5;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 240), v11, 24);
        v5 = *(_QWORD *)(a1 + 224);
        v8 = (__n128 *)&v13[v5];
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v4, (void *)(a1 + 240), v11, 24);
        v5 = *(_QWORD *)(a1 + 224);
        v8 = (__n128 *)&v14;
      }
    }
    v9 = (__n128 *)(v5 + 24 * *(unsigned int *)(a1 + 232));
    result = *v8;
    v9[1].n128_u64[0] = v8[1].n128_u64[0];
    *v9 = result;
    ++*(_DWORD *)(a1 + 232);
  }
  return result;
}

unint64_t llvm::yaml::Scanner::unrollIndent(unint64_t this, int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (!*(_DWORD *)(this + 68))
  {
    v3 = this;
    if (*(_DWORD *)(this + 56) > a2)
    {
      do
      {
        LODWORD(v6) = 8;
        *((_QWORD *)&v6 + 1) = *(_QWORD *)(v3 + 40);
        v7 = 1;
        this = llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>(v3 + 80, &v6);
        v4 = *(_QWORD *)(v3 + 176);
        *(_QWORD *)this = v4;
        *(_QWORD *)(this + 8) = v3 + 176;
        *(_QWORD *)(v4 + 8) = this;
        *(_QWORD *)(v3 + 176) = this;
        v5 = *(unsigned int *)(v3 + 200);
        LODWORD(v4) = *(_DWORD *)(*(_QWORD *)(v3 + 192) + 4 * v5 - 4);
        *(_DWORD *)(v3 + 200) = v5 - 1;
        *(_DWORD *)(v3 + 56) = v4;
      }
      while ((int)v4 > a2);
    }
  }
  return this;
}

unint64_t llvm::yaml::Scanner::rollIndent(unint64_t result, int a2, int a3, unint64_t *a4)
{
  unint64_t v5;
  int v6;
  unint64_t v9;
  __int128 v10[3];

  if (!*(_DWORD *)(result + 68))
  {
    v5 = result;
    v6 = *(_DWORD *)(result + 56);
    if (v6 < a2)
    {
      llvm::SmallVectorTemplateBase<unsigned int,true>::push_back((unsigned int *)(result + 192), v6);
      *(_DWORD *)(v5 + 56) = a2;
      LODWORD(v10[0]) = a3;
      *((_QWORD *)&v10[0] + 1) = *(_QWORD *)(v5 + 40);
      memset(&v10[1], 0, 32);
      result = llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>(v5 + 80, v10);
      v9 = *a4;
      *(_QWORD *)result = *a4;
      *(_QWORD *)(result + 8) = a4;
      *(_QWORD *)(v9 + 8) = result;
      *a4 = result;
    }
  }
  return result;
}

const char *llvm::yaml::Scanner::skipComment(const char *this)
{
  const char *v1;
  char *v2;
  const char *v3;
  char *v4;
  int v5;
  BOOL v6;

  v2 = (char *)*((_QWORD *)this + 5);
  v1 = (const char *)*((_QWORD *)this + 6);
  if (v2 != v1 && *v2 == 35)
  {
    v3 = this;
    this = llvm::yaml::Scanner::skip_nb_char(*((const char **)this + 6), v2);
    if (this != v2)
    {
      v4 = (char *)this;
      v5 = *((_DWORD *)v3 + 15) + 1;
      do
      {
        *((_QWORD *)v3 + 5) = v4;
        *((_DWORD *)v3 + 15) = v5;
        this = llvm::yaml::Scanner::skip_nb_char(v1, v4);
        ++v5;
        v6 = this == v4;
        v4 = (char *)this;
      }
      while (!v6);
    }
  }
  return this;
}

_QWORD *llvm::yaml::Scanner::scanDocumentIndicator(llvm::yaml::Scanner *this, int a2)
{
  int v4;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  llvm::yaml::Scanner::unrollIndent((unint64_t)this, -1);
  *((_DWORD *)this + 58) = 0;
  *((_BYTE *)this + 73) = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (a2)
    v4 = 5;
  else
    v4 = 6;
  LODWORD(v8) = v4;
  *((_QWORD *)&v8 + 1) = *((_QWORD *)this + 5);
  v9 = 3;
  *((_QWORD *)this + 5) = *((_QWORD *)&v8 + 1) + 3;
  *((_DWORD *)this + 15) += 3;
  result = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v8);
  v7 = *((_QWORD *)this + 22);
  v6 = (_QWORD *)((char *)this + 176);
  *result = v7;
  result[1] = v6;
  *(_QWORD *)(v7 + 8) = result;
  *v6 = result;
  return result;
}

void llvm::yaml::Scanner::scanFlowCollectionStart(llvm::yaml::Scanner *this, int a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  if (a2)
    v3 = 12;
  else
    v3 = 14;
  LODWORD(v6) = v3;
  *((_QWORD *)&v6 + 1) = *((_QWORD *)this + 5);
  v7 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v6 + 1) + 1;
  ++*((_DWORD *)this + 15);
  v4 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v6);
  v5 = *((_QWORD *)this + 22);
  *v4 = v5;
  v4[1] = (char *)this + 176;
  *(_QWORD *)(v5 + 8) = v4;
  *((_QWORD *)this + 22) = v4;
  llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v4, *((_DWORD *)this + 15) - 1);
  *((_BYTE *)this + 73) = 1;
  ++*((_DWORD *)this + 17);
}

_QWORD *llvm::yaml::Scanner::scanFlowCollectionEnd(llvm::yaml::Scanner *this, int a2)
{
  unsigned int v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v3 - 8) == *((_DWORD *)this + 17))
    *((_DWORD *)this + 58) = v3 - 1;
  *((_BYTE *)this + 73) = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  if (a2)
    v4 = 13;
  else
    v4 = 15;
  LODWORD(v8) = v4;
  *((_QWORD *)&v8 + 1) = *((_QWORD *)this + 5);
  v9 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v8 + 1) + 1;
  ++*((_DWORD *)this + 15);
  result = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v8);
  v6 = *((_QWORD *)this + 22);
  *result = v6;
  result[1] = (char *)this + 176;
  *(_QWORD *)(v6 + 8) = result;
  *((_QWORD *)this + 22) = result;
  v7 = *((_DWORD *)this + 17);
  if (v7)
    *((_DWORD *)this + 17) = v7 - 1;
  return result;
}

_QWORD *llvm::yaml::Scanner::scanFlowEntry(llvm::yaml::Scanner *this)
{
  unsigned int v2;
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((_DWORD *)this + 58);
  if (v2 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v2 - 8) == *((_DWORD *)this + 17))
    *((_DWORD *)this + 58) = v2 - 1;
  *((_BYTE *)this + 73) = 1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  LODWORD(v6) = 11;
  *((_QWORD *)&v6 + 1) = *((_QWORD *)this + 5);
  v7 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v6 + 1) + 1;
  ++*((_DWORD *)this + 15);
  result = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v6);
  v5 = *((_QWORD *)this + 22);
  v4 = (_QWORD *)((char *)this + 176);
  *result = v5;
  result[1] = v4;
  *(_QWORD *)(v5 + 8) = result;
  *v4 = result;
  return result;
}

_QWORD *llvm::yaml::Scanner::scanBlockEntry(llvm::yaml::Scanner *this)
{
  char *v2;
  unsigned int v3;
  _QWORD *result;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = (char *)this + 176;
  llvm::yaml::Scanner::rollIndent((unint64_t)this, *((_DWORD *)this + 15), 9, (unint64_t *)this + 22);
  v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v3 - 8) == *((_DWORD *)this + 17))
    *((_DWORD *)this + 58) = v3 - 1;
  *((_BYTE *)this + 73) = 1;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  LODWORD(v6) = 7;
  *((_QWORD *)&v6 + 1) = *((_QWORD *)this + 5);
  v7 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v6 + 1) + 1;
  ++*((_DWORD *)this + 15);
  result = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v6);
  v5 = *((_QWORD *)this + 22);
  *result = v5;
  result[1] = v2;
  *(_QWORD *)(v5 + 8) = result;
  *((_QWORD *)this + 22) = result;
  return result;
}

_QWORD *llvm::yaml::Scanner::scanKey(llvm::yaml::Scanner *this)
{
  int v2;
  unsigned int v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *((_DWORD *)this + 17);
  if (!v2)
  {
    llvm::yaml::Scanner::rollIndent((unint64_t)this, *((_DWORD *)this + 15), 10, (unint64_t *)this + 22);
    v2 = *((_DWORD *)this + 17);
  }
  v3 = *((_DWORD *)this + 58);
  if (v3 && *(_DWORD *)(*((_QWORD *)this + 28) + 24 * v3 - 8) == v2)
    *((_DWORD *)this + 58) = v3 - 1;
  *((_BYTE *)this + 73) = v2 == 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  LODWORD(v7) = 16;
  *((_QWORD *)&v7 + 1) = *((_QWORD *)this + 5);
  v8 = 1;
  *((_QWORD *)this + 5) = *((_QWORD *)&v7 + 1) + 1;
  ++*((_DWORD *)this + 15);
  result = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v7);
  v6 = *((_QWORD *)this + 22);
  v5 = (_QWORD *)((char *)this + 176);
  *result = v6;
  result[1] = v5;
  *(_QWORD *)(v6 + 8) = result;
  *v5 = result;
  return result;
}

uint64_t llvm::yaml::Scanner::scanValue(llvm::yaml::Scanner *this)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t **v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *((_DWORD *)this + 58);
  if (v2)
  {
    v3 = *((_QWORD *)this + 28) + 24 * v2;
    v4 = *(_QWORD *)(v3 - 24);
    v5 = *(_DWORD *)(v3 - 16);
    *((_DWORD *)this + 58) = v2 - 1;
    v18 = 16;
    v21 = 0;
    v22 = 0;
    v20 = 0;
    v19 = *(_OWORD *)(v4 + 24);
    v6 = (unint64_t **)((char *)this + 184);
    v7 = (unint64_t *)((char *)this + 176);
    do
    {
      v8 = *v6;
      v6 = (unint64_t **)(*v6 + 1);
    }
    while (v8 != v7 && v8 != (unint64_t *)v4);
    if (v8 == v7)
    {
      v13 = 0;
      *((_BYTE *)this + 74) = 1;
      return v13;
    }
    v10 = (unint64_t *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (__int128 *)&v18);
    v11 = *v8;
    *v10 = *v8;
    v10[1] = (unint64_t)v8;
    *(_QWORD *)(v11 + 8) = v10;
    *v8 = (unint64_t)v10;
    llvm::yaml::Scanner::rollIndent((unint64_t)this, v5, 10, v10);
    *((_BYTE *)this + 73) = 0;
  }
  else
  {
    v12 = *((_DWORD *)this + 17);
    if (!v12)
    {
      llvm::yaml::Scanner::rollIndent((unint64_t)this, *((_DWORD *)this + 15), 10, (unint64_t *)this + 22);
      v12 = *((_DWORD *)this + 17);
    }
    *((_BYTE *)this + 73) = v12 == 0;
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v18 = 17;
  v13 = 1;
  *(_QWORD *)&v19 = *((_QWORD *)this + 5);
  *((_QWORD *)&v19 + 1) = 1;
  *((_QWORD *)this + 5) = v19 + 1;
  ++*((_DWORD *)this + 15);
  v14 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, (__int128 *)&v18);
  v16 = *((_QWORD *)this + 22);
  v15 = (_QWORD *)((char *)this + 176);
  *v14 = v16;
  v14[1] = v15;
  *(_QWORD *)(v16 + 8) = v14;
  *v15 = v14;
  return v13;
}

uint64_t llvm::yaml::Scanner::scanFlowScalar(std::error_category *this, int a2)
{
  std::error_category_vtbl *v3;
  int v4;
  char *v5;
  char *i;
  int v7;
  char *v8;
  int v9;
  const char *v10;
  int v11;
  std::error_category_vtbl *v12;
  std::error_category_vtbl *v13;
  __int128 v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = this[5].__vftable;
  v4 = HIDWORD(this[7].__vftable);
  if (a2)
  {
    v5 = (char *)this[6].__vftable;
    for (i = (char *)&v3->~error_category + 1; ; ++i)
    {
      this[5].__vftable = (std::error_category_vtbl *)i;
      if (i == v5)
        break;
      if (*i == 34 && (*(i - 1) != 92 || !wasEscaped((const char *)&v3->~error_category + 1, i)))
      {
        v7 = v4;
        goto LABEL_28;
      }
    }
    goto LABEL_31;
  }
  i = (char *)&v3->~error_category + 1;
  this[5].__vftable = (std::error_category_vtbl *)((char *)&v3->~error_category + 1);
  v7 = v4 + 1;
  HIDWORD(this[7].__vftable) = v4 + 1;
  v5 = (char *)this[6].__vftable;
  if ((char *)&v3->~error_category + 1 == v5)
  {
    v5 = (char *)&v3->~error_category + 1;
    goto LABEL_31;
  }
  while (1)
  {
    v8 = i + 1;
    v9 = *i;
    if (i + 1 >= v5)
    {
      if (v9 == 39)
        goto LABEL_28;
    }
    else if (v9 == 39)
    {
      if (*v8 != 39)
        goto LABEL_28;
      i += 2;
      this[5].__vftable = (std::error_category_vtbl *)i;
      v7 += 2;
      HIDWORD(this[7].__vftable) = v7;
      goto LABEL_25;
    }
    v10 = llvm::yaml::Scanner::skip_nb_char(v5, i);
    if (v10 == i)
      break;
    if (v10 == v5)
      goto LABEL_28;
    this[5].__vftable = (std::error_category_vtbl *)v10;
    HIDWORD(this[7].__vftable) = ++v7;
    i = (char *)v10;
LABEL_25:
    if (i == v5)
      goto LABEL_31;
  }
  if (v9 == 10)
  {
LABEL_24:
    v7 = 0;
    this[5].__vftable = (std::error_category_vtbl *)v8;
    v11 = LODWORD(this[8].__vftable) + 1;
    HIDWORD(this[7].__vftable) = 0;
    LODWORD(this[8].__vftable) = v11;
    i = v8;
    goto LABEL_25;
  }
  if (v9 == 13)
  {
    if (v8 == v5)
    {
      v8 = v5;
      if (v5 == i)
        goto LABEL_31;
    }
    else if (i[1] == 10)
    {
      v8 = i + 2;
    }
    goto LABEL_24;
  }
LABEL_28:
  if (i != v5)
  {
    this[5].__vftable = (std::error_category_vtbl *)(i + 1);
    HIDWORD(this[7].__vftable) = v7 + 1;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    LODWORD(v15) = 18;
    *((_QWORD *)&v15 + 1) = v3;
    v16 = (unsigned __int8 *)(i + 1 - (char *)v3);
    v12 = (std::error_category_vtbl *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)&this[10], &v15);
    v13 = this[22].__vftable;
    v12->~error_category = (void (__cdecl *)(std::error_category *__hidden))v13;
    v12->~error_category_0 = (void (__cdecl *)(std::error_category *__hidden))&this[22];
    v13->~error_category_0 = (void (__cdecl *)(std::error_category *__hidden))v12;
    this[22].__vftable = v12;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v12, v4);
    BYTE1(this[9].__vftable) = 0;
    return 1;
  }
LABEL_31:
  *(_QWORD *)&v15 = "Expected quote at end of scalar";
  LOWORD(v18) = 259;
  llvm::yaml::Scanner::setError(this, (llvm::formatv_object_base **)&v15, v5);
  return 0;
}

BOOL wasEscaped(const char *a1, const char *a2)
{
  const char *i;

  for (i = a2 - 1; i >= a1; --i)
  {
    if (*i != 92)
      break;
  }
  return ((a2 - 1 - i) & 0x8000000000000001) == 1;
}

uint64_t llvm::yaml::Scanner::scanPlainScalar(llvm::yaml::Scanner *this)
{
  char *v2;
  const char *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  char *v7;
  unsigned int v8;
  char *v9;
  int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  const char *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v22;
  char *v23;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  std::error_category *v30;
  int v31;
  __int128 v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v2 = (char *)*((_QWORD *)this + 5);
  v3 = (const char *)*((_QWORD *)this + 6);
  if (v2 == v3)
    goto LABEL_61;
  v4 = 0;
  v5 = *((_DWORD *)this + 15);
  v6 = *((_DWORD *)this + 14) + 1;
  v31 = v5;
  v7 = (char *)*((_QWORD *)this + 5);
LABEL_3:
  v8 = *v7;
  if (v8 != 35)
  {
    v9 = v7;
    if (v7 == v3)
      goto LABEL_58;
    while (1)
    {
      if (v8 <= 0x20 && ((1 << v8) & 0x100002600) != 0)
      {
LABEL_28:
        v19 = *v9;
        v12 = v19 > 0x20;
        v20 = (1 << v19) & 0x100002600;
        if (v12 || v20 == 0)
          goto LABEL_59;
        v7 = v9;
        while (2)
        {
          v22 = *v7;
          if (v22 > 0xC)
          {
            if (v22 == 13)
            {
              v23 = (char *)v3;
              if (v7 + 1 != v3)
              {
                if (v7[1] == 10)
                  v23 = v7 + 2;
                else
                  v23 = v7 + 1;
              }
              goto LABEL_52;
            }
            if (v22 != 32)
              goto LABEL_55;
LABEL_39:
            if (v22 == 9 && v4 != 0 && v5 < v6)
            {
              *(_QWORD *)&v32 = "Found invalid tab character in indentation";
              LOWORD(v35) = 259;
              v30 = (std::error_category *)this;
              goto LABEL_62;
            }
            v23 = v7 + 1;
            *((_DWORD *)this + 15) = ++v5;
            goto LABEL_53;
          }
          if (v22 == 9)
            goto LABEL_39;
          if (v22 != 10)
            goto LABEL_55;
          v23 = v7 + 1;
LABEL_52:
          v5 = 0;
          v26 = *((_DWORD *)this + 16) + 1;
          *((_DWORD *)this + 15) = 0;
          *((_DWORD *)this + 16) = v26;
          v4 = 1;
LABEL_53:
          v7 = v23;
          if (v3 != v23)
            continue;
          break;
        }
        v7 = (char *)v3;
LABEL_55:
        if (!*((_DWORD *)this + 17) && v5 < v6)
          goto LABEL_59;
        *((_QWORD *)this + 5) = v7;
        if (v7 == v3)
        {
LABEL_58:
          v9 = (char *)v3;
          goto LABEL_59;
        }
        goto LABEL_3;
      }
      v10 = *((_DWORD *)this + 17);
      if (v10)
      {
        if (v8 != 58)
          goto LABEL_24;
        if (v9 + 1 == v3
          || ((v11 = v9[1], v12 = v11 > 0x2C, v13 = (1 << v11) & 0x100100002600, !v12)
            ? (v14 = v13 == 0)
            : (v14 = 1),
              v14))
        {
          *(_QWORD *)&v32 = "Found unexpected ':' while scanning a plain scalar";
          LOWORD(v35) = 259;
          v30 = (std::error_category *)this;
          v7 = v9;
          goto LABEL_62;
        }
      }
      else if (v8 != 58)
      {
        goto LABEL_25;
      }
      if (v3 != v9 + 1)
      {
        v15 = v9[1];
        v12 = v15 > 0x20;
        v16 = (1 << v15) & 0x100002600;
        if (!v12 && v16 != 0)
          goto LABEL_28;
      }
      if (v10)
      {
LABEL_24:
        *(_QWORD *)&v32 = v9;
        *((_QWORD *)&v32 + 1) = 1;
        if (llvm::StringRef::find_first_of(&v32, ",:?[]{}", 7, 0) != -1)
          goto LABEL_28;
      }
LABEL_25:
      v18 = llvm::yaml::Scanner::skip_nb_char(v3, v9);
      if (v18 == v9)
        goto LABEL_28;
      *((_QWORD *)this + 5) = v18;
      *((_DWORD *)this + 15) = ++v5;
      if (v18 == v3)
        goto LABEL_58;
      v8 = *(unsigned __int8 *)v18;
      v9 = (char *)v18;
    }
  }
  v9 = v7;
LABEL_59:
  if (v2 != v9)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    LODWORD(v32) = 18;
    *((_QWORD *)&v32 + 1) = v2;
    v33 = (unsigned __int8 *)(v9 - v2);
    v27 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v32);
    v28 = *((_QWORD *)this + 22);
    *v27 = v28;
    v27[1] = (char *)this + 176;
    *(_QWORD *)(v28 + 8) = v27;
    *((_QWORD *)this + 22) = v27;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v27, v31);
    *((_BYTE *)this + 73) = 0;
    return 1;
  }
LABEL_61:
  *(_QWORD *)&v32 = "Got empty plain scalar";
  LOWORD(v35) = 259;
  v30 = (std::error_category *)this;
  v7 = v2;
LABEL_62:
  llvm::yaml::Scanner::setError(v30, (llvm::formatv_object_base **)&v32, v7);
  return 0;
}

uint64_t llvm::yaml::Scanner::scanAliasOrAnchor(llvm::yaml::Scanner *this, int a2)
{
  int v3;
  char *v4;
  const char *v5;
  int v6;
  char *v7;
  unsigned int v8;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  const char *v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *((_DWORD *)this + 15);
  v4 = (char *)*((_QWORD *)this + 5);
  v5 = (const char *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = v4 + 1;
  *((_DWORD *)this + 15) = v3 + 1;
  if (v4 + 1 == v5)
    goto LABEL_21;
  v6 = v3 + 2;
  v7 = v4 + 1;
  while (1)
  {
    v8 = *v7;
    if (v8 <= 0x3A && ((1 << v8) & 0x400100100000200) != 0)
      break;
    v10 = v8 - 91;
    v11 = v10 > 0x22;
    v12 = (1 << v10) & 0x500000005;
    if (!v11 && v12 != 0)
      break;
    v14 = llvm::yaml::Scanner::skip_nb_char(v5, v7);
    if (v14 == v7)
      break;
    *((_QWORD *)this + 5) = v14;
    *((_DWORD *)this + 15) = v6++;
    v7 = (char *)v14;
    if (v14 == v5)
    {
      v7 = (char *)v5;
      break;
    }
  }
  if (v4 + 1 == v7)
  {
LABEL_21:
    *(_QWORD *)&v20 = "Got empty alias or anchor";
    LOWORD(v23) = 259;
    llvm::yaml::Scanner::setError((std::error_category *)this, (llvm::formatv_object_base **)&v20, v4);
    return 0;
  }
  else
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    if (a2)
      v15 = 20;
    else
      v15 = 21;
    LODWORD(v20) = v15;
    *((_QWORD *)&v20 + 1) = v4;
    v21 = v7 - v4;
    v16 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v20);
    v17 = *((_QWORD *)this + 22);
    *v16 = v17;
    v16[1] = (char *)this + 176;
    *(_QWORD *)(v17 + 8) = v16;
    *((_QWORD *)this + 22) = v16;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v16, v3);
    *((_BYTE *)this + 73) = 0;
    return 1;
  }
}

uint64_t llvm::yaml::Scanner::scanBlockScalar(std::error_category *this)
{
  unsigned __int8 *v2;
  std::error_category_vtbl *v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  int v8;
  int v9;
  BOOL v10;
  std::error_category_vtbl *v11;
  char *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  const char *v16;
  char *v17;
  char *v18;
  int64_t v19;
  uint64_t v20;
  const char *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  int v30;
  void (__cdecl *v31)(std::error_category *__hidden);
  std::error_category *v32;
  std::error_category_vtbl *v33;
  uint64_t v34;
  char *v35;
  std::error_category *v36;
  char *v37;
  char *v38;
  unsigned int v39;
  std::error_category_vtbl *i;
  const char *v41;
  char *v42;
  char *v43;
  int v44;
  BOOL v45;
  _BOOL4 v46;
  char *v47;
  void (__cdecl *v48)(std::error_category *__hidden);
  std::error_category *v49;
  std::error_category_vtbl *v50;
  char *v52;
  int v53;
  unsigned int v54;
  __int128 v55;
  char *v56;
  void *__p;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = this[5].__vftable;
  v2 = (unsigned __int8 *)this[6].__vftable;
  if (v3 != (std::error_category_vtbl *)v2 && ((v4 = LOBYTE(v3->~error_category), v4 == 124) || v4 == 62))
  {
    v3 = (std::error_category_vtbl *)((char *)v3 + 1);
    this[5].__vftable = v3;
    ++HIDWORD(this[7].__vftable);
  }
  else
  {
    v4 = 32;
  }
  if (v3 == (std::error_category_vtbl *)v2)
  {
    v7 = 0;
    goto LABEL_22;
  }
  v5 = LOBYTE(v3->~error_category);
  if (v5 == 45 || v5 == 43)
  {
    v6 = (unsigned __int8 *)&v3->~error_category + 1;
    this[5].__vftable = (std::error_category_vtbl *)((char *)&v3->~error_category + 1);
    ++HIDWORD(this[7].__vftable);
  }
  else
  {
    v5 = 32;
    v6 = (unsigned __int8 *)v3;
  }
  if (v6 == v2)
  {
    v7 = 0;
    v6 = v2;
  }
  else
  {
    v8 = *v6;
    if ((v8 - 49) > 8)
    {
      v7 = 0;
    }
    else
    {
      v7 = v8 - 48;
      this[5].__vftable = (std::error_category_vtbl *)++v6;
      ++HIDWORD(this[7].__vftable);
    }
  }
  if (v5 == 32)
  {
    if (v6 != v2)
    {
      v5 = *v6;
      if (v5 == 45 || v5 == 43)
      {
        this[5].__vftable = (std::error_category_vtbl *)++v6;
        ++HIDWORD(this[7].__vftable);
      }
      else
      {
        v5 = 32;
      }
      goto LABEL_24;
    }
LABEL_22:
    v5 = 32;
    goto LABEL_31;
  }
LABEL_24:
  if (v2 != v6)
  {
    while (1)
    {
      v9 = *v6;
      v10 = v9 == 32 || v9 == 9;
      if (!v10)
        break;
      if (++v6 == v2)
        goto LABEL_31;
    }
    v2 = v6;
  }
LABEL_31:
  this[5].__vftable = (std::error_category_vtbl *)v2;
  llvm::yaml::Scanner::skipComment((const char *)this);
  v11 = this[5].__vftable;
  if (v11 == this[6].__vftable)
  {
    v62 = 0;
    v63 = 0;
    v64 = 0;
    LODWORD(v60) = 19;
    *(_QWORD *)&v61 = v3;
    *((_QWORD *)&v61 + 1) = (char *)v11 - (char *)v3;
    v31 = (void (__cdecl *)(std::error_category *__hidden))llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)&this[10], (__int128 *)&v60);
    v33 = this[22].__vftable;
    v32 = this + 22;
    *(_QWORD *)v31 = v33;
    *((_QWORD *)v31 + 1) = v32;
    v33->~error_category_0 = v31;
    v32->__vftable = (std::error_category_vtbl *)v31;
    return 1;
  }
  else if ((llvm::yaml::Scanner::consumeLineBreakIfPresent((llvm::yaml::Scanner *)this) & 1) != 0)
  {
    v12 = (char *)this[5].__vftable;
    v54 = (uint64_t)this[7].__vftable & ~(SLODWORD(this[7].__vftable) >> 31);
    v52 = v12;
    if (v7)
    {
      v53 = v4;
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v38 = 0;
      v39 = 0;
      for (i = this[5].__vftable; ; i = this[5].__vftable)
      {
        v41 = (const char *)this[6].__vftable;
        v42 = (char *)i;
        while (1)
        {
          v43 = v42;
          if (v42 == v41)
            break;
          ++v42;
          if (*v43 != 32)
          {
            v12 = v43;
            goto LABEL_84;
          }
        }
        v12 = (char *)this[6].__vftable;
LABEL_84:
        v7 = HIDWORD(this[7].__vftable) + (_DWORD)v12 - (_DWORD)i;
        HIDWORD(this[7].__vftable) = v7;
        this[5].__vftable = (std::error_category_vtbl *)v12;
        if (llvm::yaml::Scanner::skip_nb_char(v41, v12) != v12)
          break;
        if (v43 == v41)
          goto LABEL_97;
        v44 = *v12;
        if ((v44 == 10 || v44 == 13 && (v41 != v12 || v12 + 1 != v41)) && v7 > v39)
        {
          v38 = v12;
          v39 = v7;
        }
        if (!llvm::yaml::Scanner::consumeLineBreakIfPresent((llvm::yaml::Scanner *)this))
          goto LABEL_97;
        ++v13;
      }
      if (v7 <= v54)
      {
LABEL_97:
        v60 = &v62;
        v61 = xmmword_24AA2ACF0;
        v37 = v52;
        goto LABEL_98;
      }
      if (v39 > v7)
      {
        v60 = "Leading all-spaces line must be smaller than the block indent";
        LOWORD(v63) = 259;
        v36 = this;
        v35 = v38;
        goto LABEL_75;
      }
      v53 = v4;
    }
    v60 = &v62;
    v61 = xmmword_24AA2ACF0;
    while (1)
    {
      v14 = HIDWORD(this[7].__vftable);
      v15 = (const char *)this[6].__vftable;
      if (v14 < v7)
      {
        while (v12 != v15)
        {
          if (*v12 != 32)
            goto LABEL_42;
          this[5].__vftable = (std::error_category_vtbl *)++v12;
          HIDWORD(this[7].__vftable) = ++v14;
          if (v7 == v14)
          {
            v14 = v7;
            goto LABEL_42;
          }
        }
        v12 = (char *)v15;
      }
LABEL_42:
      v16 = llvm::yaml::Scanner::skip_nb_char(v15, v12);
      v17 = v12;
      if (v16 != v12)
      {
        if (v14 <= v54)
          goto LABEL_76;
        v17 = v12;
        if (v14 < v7)
          break;
      }
      do
      {
        v18 = v17;
        v17 = (char *)llvm::yaml::Scanner::skip_nb_char(v15, v17);
      }
      while (v17 != v18);
      this[5].__vftable = (std::error_category_vtbl *)v18;
      v19 = v18 - v12;
      HIDWORD(this[7].__vftable) = v14 + (_DWORD)v18 - (_DWORD)v12;
      if (v18 != v12)
      {
        if (v53 == 62)
        {
          if (v13)
          {
            v20 = v61;
            if ((_QWORD)v61)
            {
              v21 = (const char *)v60;
              while (v21 != v15)
              {
                v22 = *(unsigned __int8 *)v21;
                v23 = v22 > 0x20;
                v24 = (1 << v22) & 0x100002600;
                if (v23 || v24 == 0)
                  break;
                ++v21;
                if (!--v20)
                  goto LABEL_69;
              }
              if (!--v13)
              {
                v26 = v12;
                while (v26 != v15)
                {
                  v27 = *v26;
                  v23 = v27 > 0x20;
                  v28 = (1 << v27) & 0x100002600;
                  if (v23 || v28 == 0)
                    break;
                  ++v26;
                  if (!--v19)
                  {
                    v30 = 10;
                    goto LABEL_68;
                  }
                }
                v30 = 32;
LABEL_68:
                llvm::SmallVectorImpl<char>::append(&v60, 1uLL, v30);
              }
            }
          }
        }
LABEL_69:
        llvm::SmallVectorImpl<char>::append(&v60, v13, 10);
        llvm::SmallVectorImpl<char>::append<char const*,void>(&v60, v12, this[5].__vftable);
        v13 = 0;
        v12 = (char *)this[5].__vftable;
        v15 = (const char *)this[6].__vftable;
      }
      if (v12 == v15 || !llvm::yaml::Scanner::consumeLineBreakIfPresent((llvm::yaml::Scanner *)this))
      {
LABEL_76:
        v37 = v52;
        goto LABEL_98;
      }
      ++v13;
      v12 = (char *)this[5].__vftable;
    }
    v10 = v12 == v15;
    v37 = v52;
    if (!v10 && *v12 == 35)
    {
LABEL_98:
      if (v5 == 45)
      {
        v46 = 0;
      }
      else if (v5 == 43)
      {
        if (v13)
          v45 = 0;
        else
          v45 = this[5].__vftable == this[6].__vftable;
        if (v45)
          v46 = 1;
        else
          v46 = v13;
      }
      else
      {
        v46 = (_QWORD)v61 != 0;
      }
      llvm::SmallVectorImpl<char>::append(&v60, v46, 10);
      if (!HIDWORD(this[8].__vftable))
        BYTE1(this[9].__vftable) = 1;
      __p = 0;
      v58 = 0;
      v59 = 0;
      LODWORD(v55) = 19;
      v47 = (char *)((char *)this[5].__vftable - v37);
      *((_QWORD *)&v55 + 1) = v37;
      v56 = v47;
      std::string::basic_string[abi:nn180100](&__p, v60, v61);
      v48 = (void (__cdecl *)(std::error_category *__hidden))llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)&this[10], &v55);
      v50 = this[22].__vftable;
      v49 = this + 22;
      *(_QWORD *)v48 = v50;
      *((_QWORD *)v48 + 1) = v49;
      v50->~error_category_0 = v48;
      v49->__vftable = (std::error_category_vtbl *)v48;
      if (SHIBYTE(v59) < 0)
        operator delete(__p);
      v34 = 1;
    }
    else
    {
      *(_QWORD *)&v55 = "A text line is less indented than the block scalar";
      LOWORD(v58) = 259;
      llvm::yaml::Scanner::setError(this, (llvm::formatv_object_base **)&v55, v12);
      v34 = 0;
    }
    if (v60 != &v62)
      free(v60);
  }
  else
  {
    v60 = "Expected a line break after block scalar header";
    LOWORD(v63) = 259;
    v35 = (char *)this[5].__vftable;
    v36 = this;
LABEL_75:
    llvm::yaml::Scanner::setError(v36, (llvm::formatv_object_base **)&v60, v35);
    return 0;
  }
  return v34;
}

uint64_t llvm::yaml::Scanner::scanTag(llvm::yaml::Scanner *this)
{
  int v2;
  const char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unsigned __int8 *v11;
  int v12;
  BOOL v13;
  const char *v15;
  int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  char *v20;
  int v21;
  __int128 v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *((_DWORD *)this + 15);
  v4 = *((_QWORD *)this + 5);
  v3 = (const char *)*((_QWORD *)this + 6);
  v5 = (char *)(v4 + 1);
  *((_QWORD *)this + 5) = v4 + 1;
  *((_DWORD *)this + 15) = v2 + 1;
  if ((const char *)(v4 + 1) == v3)
    goto LABEL_4;
  v6 = *v5;
  if (v6 > 0x3C)
    goto LABEL_31;
  if (((1 << v6) & 0x100002600) != 0)
    goto LABEL_4;
  if (v6 != 60)
  {
LABEL_31:
    while (v3 != v5)
    {
      v20 = v5;
      v21 = *v5;
      if (v21 != 9 && v21 != 32)
      {
        v5 = (char *)llvm::yaml::Scanner::skip_nb_char(v3, v5);
        if (v5 != v20)
          continue;
      }
      goto LABEL_39;
    }
    v20 = (char *)v3;
LABEL_39:
    *((_QWORD *)this + 5) = v20;
    v5 = v20;
    goto LABEL_4;
  }
  *((_QWORD *)this + 5) = v4 + 2;
  *((_DWORD *)this + 15) = v2 + 2;
  if ((const char *)(v4 + 2) != v3)
  {
    v10 = v2 + 3;
    v11 = (unsigned __int8 *)(v4 + 4);
    do
    {
      v12 = *(v11 - 2);
      v13 = v12 != 37 || v11 >= (unsigned __int8 *)v3;
      if (v13
        || ((v16 = *(v11 - 1), (v16 - 48) >= 0xA) ? (v17 = (v16 & 0xFFFFFFDF) - 65 > 0x19) : (v17 = 0),
            v17
         || ((v18 = *v11, (v18 - 48) >= 0xA) ? (v19 = (v18 & 0xFFFFFFDF) - 65 >= 0x1A) : (v19 = 0), v19)))
      {
        if (v12 != 45 && (v12 & 0xFFFFFFDF) - 65 >= 0x1A)
        {
          *(_QWORD *)&v22 = v11 - 2;
          *((_QWORD *)&v22 + 1) = 1;
          if (llvm::StringRef::find_first_of(&v22, "#;/?:@&=+$,_.!~*'()[]", 21, 0) == -1)
            break;
        }
      }
      v15 = (const char *)(v11 - 1);
      *((_QWORD *)this + 5) = v11 - 1;
      *((_DWORD *)this + 15) = v10++;
      ++v11;
    }
    while (v15 != v3);
  }
  result = llvm::yaml::Scanner::consume((std::error_category *)this, 62);
  if ((_DWORD)result)
  {
    v5 = (char *)*((_QWORD *)this + 5);
LABEL_4:
    v24 = 0;
    v25 = 0;
    v26 = 0;
    LODWORD(v22) = 22;
    *((_QWORD *)&v22 + 1) = v4;
    v23 = &v5[-v4];
    v7 = (_QWORD *)llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>((uint64_t)this + 80, &v22);
    v8 = *((_QWORD *)this + 22);
    *v7 = v8;
    v7[1] = (char *)this + 176;
    *(_QWORD *)(v8 + 8) = v7;
    *((_QWORD *)this + 22) = v7;
    llvm::yaml::Scanner::saveSimpleKeyCandidate((uint64_t)this, (uint64_t)v7, v2);
    *((_BYTE *)this + 73) = 0;
    return 1;
  }
  return result;
}

void llvm::yaml::Stream::~Stream(llvm::yaml::Stream *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *((_QWORD *)this + 1);
  v2 = (_QWORD *)((char *)this + 8);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100]((uint64_t)v2, v3);
  v5 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v5)
    std::default_delete<llvm::yaml::Scanner>::operator()[abi:nn180100]((uint64_t)this, v5);
}

void llvm::yaml::Stream::printError(llvm *a1, uint64_t a2, llvm::formatv_object_base **a3, int a4)
{
  char *v6;
  uint64_t *v7;
  unsigned __int8 v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  __int128 v11;

  if (a2)
  {
    v11 = *(_OWORD *)(a2 + 16);
    v6 = (char *)v11;
  }
  else
  {
    v6 = 0;
    v11 = 0uLL;
  }
  v7 = **(uint64_t ***)a1;
  v8 = *(_BYTE *)(*(_QWORD *)a1 + 75);
  v9 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SourceMgr::PrintMessage(v7, v9, v6, a4, a3, (unint64_t *)&v11, 1, v10, 0, 0, v8);
}

void llvm::yaml::Stream::printError(llvm *a1, unint64_t *a2, llvm::formatv_object_base **a3, int a4)
{
  char *v7;
  uint64_t *v8;
  unsigned __int8 v9;
  llvm::raw_ostream *v10;
  uint64_t v11;

  v7 = (char *)*a2;
  v8 = **(uint64_t ***)a1;
  v9 = *(_BYTE *)(*(_QWORD *)a1 + 75);
  v10 = (llvm::raw_ostream *)llvm::errs(a1);
  llvm::SourceMgr::PrintMessage(v8, v10, v7, a4, a3, a2, 1, v11, 0, 0, v9);
}

char *llvm::yaml::Stream::begin(llvm::yaml::Stream *this)
{
  char *v1;
  llvm::yaml::Document *v3;
  llvm::yaml::Document *v4;
  uint64_t v5;
  uint64_t v7;
  void *__p;
  char v9;

  v1 = (char *)this + 8;
  if (*((_QWORD *)this + 1))
    llvm::report_fatal_error((llvm *)"Can only iterate over the stream once", (const llvm::Twine *)1);
  llvm::yaml::Scanner::getNext(*(uint64_t ***)this, (uint64_t)&v7);
  if (v9 < 0)
    operator delete(__p);
  v3 = (llvm::yaml::Document *)operator new();
  v4 = llvm::yaml::Document::Document(v3, this);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (v5)
    std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100]((uint64_t)v1, v5);
  return v1;
}

unint64_t llvm::yaml::Document::skip(llvm::yaml::Document *this)
{
  unint64_t result;
  int v3;
  uint64_t v4;
  void *__p;
  char v6;

  if (*(_BYTE *)(**(_QWORD **)this + 74))
    return 0;
  result = *((_QWORD *)this + 13);
  if (result
    || (result = llvm::yaml::Document::parseBlockNode((uint64_t ****)this), (*((_QWORD *)this + 13) = result) != 0))
  {
    (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    v3 = *(_DWORD *)llvm::yaml::Scanner::peekNext(**(uint64_t ****)this);
    if (v3 == 2)
      return 0;
    if (v3 == 6)
    {
      llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v4);
      if (v6 < 0)
        operator delete(__p);
      return llvm::yaml::Document::skip(this);
    }
    else
    {
      return 1;
    }
  }
  return result;
}

llvm::yaml::Document **llvm::yaml::document_iterator::operator++(llvm::yaml::Document ***a1)
{
  char v2;
  llvm::yaml::Document **v3;
  llvm::yaml::Stream **v4;
  llvm::yaml::Stream *v5;
  llvm::yaml::Document *v6;
  llvm::yaml::Document *v7;

  v2 = llvm::yaml::Document::skip(**a1);
  v3 = *a1;
  v4 = (llvm::yaml::Stream **)**a1;
  if ((v2 & 1) != 0)
  {
    v5 = *v4;
    v6 = (llvm::yaml::Document *)operator new();
    v7 = llvm::yaml::Document::Document(v6, v5);
    v4 = (llvm::yaml::Stream **)*v3;
    *v3 = v7;
    if (!v4)
      return *a1;
    goto LABEL_5;
  }
  *v3 = 0;
  if (v4)
LABEL_5:
    std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100]((uint64_t)v3, (uint64_t)v4);
  return *a1;
}

std::string *llvm::yaml::Node::getVerbatimTag@<X0>(llvm::yaml::Node *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  char *v5;
  std::string::size_type v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  std::error_category ***v15;
  size_t v16;
  const void *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  size_t v27;
  const void *v28;
  __int128 *p_dst;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  const void *v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  const std::string::value_type *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 __dst;
  unint64_t v41;
  unint64_t v42;
  __int16 v43;
  __int128 v44;

  v4 = *((_QWORD *)this + 8);
  if (!v4 || (v5 = (char *)*((_QWORD *)this + 7), v6 = v4 - 1, v4 == 1) && *v5 == 33)
  {
    switch(*((_DWORD *)this + 8))
    {
      case 0:
        v7 = "tag:yaml.org,2002:null";
        break;
      case 1:
      case 2:
        v7 = "tag:yaml.org,2002:str";
        break;
      case 4:
        v7 = "tag:yaml.org,2002:map";
        break;
      case 5:
        v7 = "tag:yaml.org,2002:seq";
        break;
      default:
        v7 = "";
        break;
    }
    return (std::string *)std::string::basic_string[abi:nn180100]<0>((_QWORD *)a2, v7);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v8 = v4;
  *(_QWORD *)(a2 + 16) = 0;
  do
  {
    if (!v8)
      goto LABEL_10;
    v9 = v8 - 1;
    v10 = v5[--v8];
  }
  while (v10 != 33);
  if (!v9)
  {
    v25 = **((_QWORD **)this + 1) + 112;
    *(_QWORD *)&v44 = "!";
    *((_QWORD *)&v44 + 1) = 1;
    v26 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(v25, &v44);
    v27 = *(_QWORD *)(v26 + 56);
    if (v27 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_66;
    v28 = *(const void **)(v26 + 48);
    if (v27 >= 0x17)
    {
      v35 = (v27 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v27 | 7) != 0x17)
        v35 = v27 | 7;
      v36 = v35 + 1;
      p_dst = (__int128 *)operator new(v35 + 1);
      *((_QWORD *)&__dst + 1) = v27;
      v41 = v36 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v41) = *(_QWORD *)(v26 + 56);
      p_dst = &__dst;
      if (!v27)
        goto LABEL_55;
    }
    memmove(p_dst, v28, v27);
LABEL_55:
    *((_BYTE *)p_dst + v27) = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v41;
    v37 = v5 + 1;
    return std::string::append((std::string *)a2, v37, v6);
  }
LABEL_10:
  v6 = v4 - 2;
  if (v4 >= 2 && *(_WORD *)v5 == 8481)
  {
    v30 = **((_QWORD **)this + 1) + 112;
    *(_QWORD *)&v44 = "!!";
    *((_QWORD *)&v44 + 1) = 2;
    v31 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(v30, &v44);
    v32 = *(_QWORD *)(v31 + 56);
    if (v32 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_66;
    v33 = *(const void **)(v31 + 48);
    if (v32 >= 0x17)
    {
      v38 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v32 | 7) != 0x17)
        v38 = v32 | 7;
      v39 = v38 + 1;
      v34 = (__int128 *)operator new(v38 + 1);
      *((_QWORD *)&__dst + 1) = v32;
      v41 = v39 | 0x8000000000000000;
      *(_QWORD *)&__dst = v34;
    }
    else
    {
      HIBYTE(v41) = *(_QWORD *)(v31 + 56);
      v34 = &__dst;
      if (!v32)
        goto LABEL_62;
    }
    memmove(v34, v33, v32);
LABEL_62:
    *((_BYTE *)v34 + v32) = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = __dst;
    *(_QWORD *)(a2 + 16) = v41;
    v37 = v5 + 2;
    return std::string::append((std::string *)a2, v37, v6);
  }
  v11 = v4;
  do
  {
    v12 = v11;
    if (!v11)
      break;
    --v11;
  }
  while (v5[v12 - 1] != 33);
  if (v4 >= v12)
    v13 = v12;
  else
    v13 = v4;
  *(_QWORD *)&v44 = v5;
  *((_QWORD *)&v44 + 1) = v13;
  v14 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(**((_QWORD **)this + 1) + 112, &v44);
  v15 = (std::error_category ***)**((_QWORD **)this + 1);
  if (v15 + 15 != (std::error_category ***)v14)
  {
    v16 = *(_QWORD *)(v14 + 56);
    if (v16 <= 0x7FFFFFFFFFFFFFF7)
    {
      v17 = *(const void **)(v14 + 48);
      if (v16 >= 0x17)
      {
        v19 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17)
          v19 = v16 | 7;
        v20 = v19 + 1;
        v18 = (__int128 *)operator new(v19 + 1);
        *((_QWORD *)&__dst + 1) = v16;
        v41 = v20 | 0x8000000000000000;
        *(_QWORD *)&__dst = v18;
      }
      else
      {
        HIBYTE(v41) = *(_QWORD *)(v14 + 56);
        v18 = &__dst;
        if (!v16)
          goto LABEL_28;
      }
      memmove(v18, v17, v16);
LABEL_28:
      *((_BYTE *)v18 + v16) = 0;
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = __dst;
      *(_QWORD *)(a2 + 16) = v41;
      goto LABEL_31;
    }
LABEL_66:
    abort();
  }
  *(_QWORD *)&__dst = "Unknown tag handle ";
  v41 = (unint64_t)v5;
  v42 = v13;
  v43 = 1283;
  llvm::yaml::Scanner::setError(**v15, (llvm::formatv_object_base **)&__dst, v5);
LABEL_31:
  v21 = v4;
  do
  {
    v22 = v21;
    if (!v21)
      break;
    --v21;
  }
  while (v5[v22 - 1] != 33);
  if (v4 >= v22)
    v23 = v22;
  else
    v23 = v4;
  return std::string::append((std::string *)a2, &v5[v23], v4 - v23);
}

unint64_t llvm::yaml::Document::parseBlockNode(uint64_t ****this)
{
  uint64_t *v2;
  uint64_t v3;
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t ***v15;
  unint64_t v16;
  uint64_t *****v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t *****v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t *****v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unint64_t v34;
  uint64_t ***v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type size;
  unint64_t v41;
  uint64_t ***v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t ***v48;
  uint64_t v49;
  uint64_t v50;
  void *v52;
  void *__p;
  uint64_t v54;
  char v55;
  char v56[24];
  void *v57;
  char v58;
  char v59[24];
  void *v60;
  char v61;
  char v62[24];
  void *v63;
  char v64;
  char v65[24];
  void *v66;
  char v67;
  char v68[24];
  void *v69;
  char v70;
  char v71[24];
  void *v72;
  char v73;
  llvm::formatv_object_base *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  __int16 v78;
  char v79;
  char v80[24];
  void *v81;
  char v82;
  __int128 v83;
  uint64_t v84;
  std::string v85;

  v2 = llvm::yaml::Scanner::peekNext(**this);
  v3 = v2[2];
  v83 = *(_OWORD *)v2;
  v84 = v3;
  v4 = &v85;
  if (*((char *)v2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)v2[3], v2[4]);
  }
  else
  {
    v5 = *(_OWORD *)(v2 + 3);
    v85.__r_.__value_.__r.__words[2] = v2[5];
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = v5;
  }
  v6 = 0;
  __p = 0;
  v54 = 0;
  v55 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  while ((_DWORD)v83 == 21)
  {
    if (v7 == 21)
    {
      v19 = "Already encountered an anchor for this node!";
      goto LABEL_74;
    }
    llvm::yaml::Scanner::getNext(**this, (uint64_t)&v74);
    v7 = (int)v74;
    v12 = v75;
    v11 = v76;
    if (v9 < 0)
      operator delete(v10);
    v10 = v77;
    v9 = v79;
LABEL_10:
    v13 = llvm::yaml::Scanner::peekNext(**this);
    v14 = v13[2];
    v83 = *(_OWORD *)v13;
    v84 = v14;
    std::string::operator=(&v85, (const std::string *)v13 + 1);
  }
  switch((int)v83)
  {
    case 0:
      goto LABEL_75;
    case 7:
      v20 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v20;
      v21 = (uint64_t *****)(*this + 1);
      if (v11)
        v22 = v12 + 1;
      else
        v22 = v12;
      v23 = v11 - (v11 != 0);
      v24 = v6;
      v25 = v54;
      v26 = 2;
      goto LABEL_42;
    case 9:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v71);
      if (v73 < 0)
        operator delete(v72);
      v20 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v20;
      v21 = (uint64_t *****)(*this + 1);
      if (v11)
        v22 = v12 + 1;
      else
        v22 = v12;
      v23 = v11 - (v11 != 0);
      v24 = v6;
      v25 = v54;
      v26 = 0;
      goto LABEL_42;
    case 10:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v68);
      if (v70 < 0)
        operator delete(v69);
      v27 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v27;
      v28 = (uint64_t *****)(*this + 1);
      if (v11)
        v29 = v12 + 1;
      else
        v29 = v12;
      v30 = v11 - (v11 != 0);
      v31 = v6;
      v32 = v54;
      v33 = 0;
      goto LABEL_53;
    case 11:
    case 13:
    case 15:
      v15 = this[13];
      if (v15 && ((_DWORD)v15[4] & 0xFFFFFFFE) == 4)
        goto LABEL_18;
      v19 = "Unexpected token";
      goto LABEL_74;
    case 12:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v65);
      if (v67 < 0)
        operator delete(v66);
      v20 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v20;
      v21 = (uint64_t *****)(*this + 1);
      if (v11)
        v22 = v12 + 1;
      else
        v22 = v12;
      v23 = v11 - (v11 != 0);
      v24 = v6;
      v25 = v54;
      v26 = 1;
LABEL_42:
      llvm::yaml::SequenceNode::SequenceNode(v20, v21, v22, v23, v24, v25, v26);
      goto LABEL_86;
    case 14:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v62);
      if (v64 < 0)
        operator delete(v63);
      v27 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v27;
      v28 = (uint64_t *****)(*this + 1);
      if (v11)
        v29 = v12 + 1;
      else
        v29 = v12;
      v30 = v11 - (v11 != 0);
      v31 = v6;
      v32 = v54;
      v33 = 1;
      goto LABEL_53;
    case 16:
      v27 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v27;
      v28 = (uint64_t *****)(*this + 1);
      if (v11)
        v29 = v12 + 1;
      else
        v29 = v12;
      v30 = v11 - (v11 != 0);
      v31 = v6;
      v32 = v54;
      v33 = 2;
LABEL_53:
      llvm::yaml::MappingNode::MappingNode(v27, v28, v29, v30, v31, v32, v33);
      goto LABEL_86;
    case 18:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v59);
      if (v61 < 0)
        operator delete(v60);
      v34 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v34;
      v35 = *this;
      v36 = (uint64_t)(*this + 1);
      if (v11)
        v37 = v12 + 1;
      else
        v37 = v12;
      v38 = *((_QWORD *)&v83 + 1);
      v39 = v84;
      *(_QWORD *)v34 = off_251C13670;
      *(_QWORD *)(v34 + 8) = v36;
      *(_QWORD *)(v34 + 16) = 0;
      *(_QWORD *)(v34 + 24) = 0;
      *(_DWORD *)(v34 + 32) = 1;
      *(_QWORD *)(v34 + 40) = v37;
      *(_QWORD *)(v34 + 48) = v11 - (v11 != 0);
      *(_QWORD *)(v34 + 56) = v6;
      *(_QWORD *)(v34 + 64) = v54;
      llvm::yaml::Scanner::peekNext((uint64_t **)**v35[1]);
      *(_QWORD *)v16 = off_251C136B0;
      *(_QWORD *)(v16 + 72) = v38;
      *(_QWORD *)(v16 + 80) = v39;
      goto LABEL_85;
    case 19:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v56);
      if (v58 < 0)
        operator delete(v57);
      if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
      else
        size = v85.__r_.__value_.__l.__size_;
      if (size == -1)
      {
        v52 = 0;
      }
      else
      {
        if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v4 = (std::string *)v85.__r_.__value_.__r.__words[0];
        v52 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), size + 1, 0);
        memmove(v52, v4, size + 1);
      }
      if (size + 1 < size)
        ++size;
      v47 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v47;
      v48 = *this;
      v49 = (uint64_t)(*this + 1);
      if (v11)
        v50 = v12 + 1;
      else
        v50 = v12;
      v38 = *((_QWORD *)&v83 + 1);
      v39 = v84;
      *(_QWORD *)v47 = off_251C13670;
      *(_QWORD *)(v47 + 8) = v49;
      *(_QWORD *)(v47 + 16) = 0;
      *(_QWORD *)(v47 + 24) = 0;
      *(_DWORD *)(v47 + 32) = 2;
      *(_QWORD *)(v47 + 40) = v50;
      *(_QWORD *)(v47 + 48) = v11 - (v11 != 0);
      *(_QWORD *)(v47 + 56) = v6;
      *(_QWORD *)(v47 + 64) = v54;
      llvm::yaml::Scanner::peekNext((uint64_t **)**v48[1]);
      *(_QWORD *)v16 = off_251C136D0;
      *(_QWORD *)(v16 + 72) = v52;
      *(_QWORD *)(v16 + 80) = size;
LABEL_85:
      *(_QWORD *)(v16 + 16) = v38;
      *(_QWORD *)(v16 + 24) = v38 + v39;
      goto LABEL_86;
    case 20:
      llvm::yaml::Scanner::getNext(**this, (uint64_t)v80);
      if (v82 < 0)
        operator delete(v81);
      v41 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 88, 4);
      v16 = v41;
      v42 = *this;
      v43 = (uint64_t)(*this + 1);
      if (v84)
        v44 = *((_QWORD *)&v83 + 1) + 1;
      else
        v44 = *((_QWORD *)&v83 + 1);
      v45 = v84 - (v84 != 0);
      *(_QWORD *)v41 = off_251C13670;
      *(_QWORD *)(v41 + 8) = v43;
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)(v41 + 24) = 0;
      *(_DWORD *)(v41 + 32) = 6;
      *(_OWORD *)(v41 + 56) = 0u;
      *(_OWORD *)(v41 + 40) = 0u;
      v46 = llvm::yaml::Scanner::peekNext((uint64_t **)**v42[1])[1];
      *(_QWORD *)(v16 + 16) = v46;
      *(_QWORD *)(v16 + 24) = v46;
      *(_QWORD *)v16 = off_251C13750;
      *(_QWORD *)(v16 + 72) = v44;
      *(_QWORD *)(v16 + 80) = v45;
      goto LABEL_86;
    case 22:
      if (v8 != 22)
      {
        llvm::yaml::Scanner::getNext(**this, (uint64_t)&v74);
        v8 = (int)v74;
        v6 = v75;
        v54 = v76;
        if (v55 < 0)
          operator delete(__p);
        __p = v77;
        v55 = v79;
        goto LABEL_10;
      }
      v19 = "Already encountered a tag for this node!";
LABEL_74:
      v74 = (llvm::formatv_object_base *)v19;
      v78 = 259;
      llvm::yaml::Scanner::setError((std::error_category *)**this, &v74, *((char **)&v83 + 1));
LABEL_75:
      v16 = 0;
LABEL_86:
      if (v55 < 0)
      {
        operator delete(__p);
        if (v9 < 0)
          goto LABEL_92;
      }
      else
      {
        if ((v9 & 0x80) == 0)
          goto LABEL_88;
LABEL_92:
        operator delete(v10);
      }
LABEL_88:
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v85.__r_.__value_.__l.__data_);
      return v16;
    default:
LABEL_18:
      v16 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 1), 72, 4);
      v17 = (uint64_t *****)(*this + 1);
      *(_QWORD *)v16 = off_251C13670;
      *(_QWORD *)(v16 + 8) = v17;
      *(_DWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 16) = 0;
      *(_QWORD *)(v16 + 24) = 0;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      v18 = llvm::yaml::Scanner::peekNext(***v17)[1];
      *(_QWORD *)(v16 + 16) = v18;
      *(_QWORD *)(v16 + 24) = v18;
      *(_QWORD *)v16 = off_251C13690;
      goto LABEL_86;
  }
}

const char *llvm::yaml::ScalarNode::getValue(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t first_of;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v19;
  _BOOL8 v21;
  unint64_t v22;
  int v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  size_t v34;
  size_t v35;
  size_t v36;
  _BYTE *v37;
  uint64_t v38;
  _BYTE *v40;
  size_t v41;
  size_t v42;
  _BYTE *v43;
  _QWORD v46[2];
  llvm::formatv_object_base *v47;
  uint64_t v48;
  __int16 v49;
  _BYTE *v50;
  unint64_t v51;
  unint64_t v52;

  v6 = *(unsigned __int8 **)(a1 + 72);
  v4 = (_QWORD *)(a1 + 72);
  v5 = v6;
  v7 = *v6;
  if (v7 == 39)
  {
    v33 = *(_QWORD *)(a1 + 80);
    v34 = v33 - 2;
    if (v33)
      ++v5;
    v35 = v33 - (v33 != 0);
    if (v35 >= v34)
      v36 = v34;
    else
      v36 = v35;
    if (v36)
    {
      v37 = memchr(v5, 39, v36);
      v38 = v37 - v5;
      if (v37 && v38 != -1)
      {
        a2[1] = 0;
        if (a2[2] < v36)
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v36, 1);
        do
        {
          v40 = v5;
          v41 = v36;
          llvm::SmallVectorImpl<char>::insert<char const*,void>(a2, *a2 + a2[1], v5, &v5[v38]);
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 39);
          v42 = v38 + 2;
          if (v36 < v38 + 2)
            v42 = v36;
          v5 += v42;
          v36 -= v42;
          if (!v36)
            break;
          v43 = memchr(v5, 39, v36);
          v38 = v43 - v5;
        }
        while (v43 && v38 != -1);
        v31 = *a2 + a2[1];
        v32 = &v40[v41];
LABEL_112:
        llvm::SmallVectorImpl<char>::insert<char const*,void>(a2, v31, v5, v32);
        return (const char *)*a2;
      }
    }
  }
  else if (v7 == 34)
  {
    v8 = *(_QWORD *)(a1 + 80);
    v9 = v8 - 2;
    if (v8)
      ++v5;
    v10 = v8 - (v8 != 0);
    if (v10 >= v9)
      v11 = v9;
    else
      v11 = v10;
    v46[0] = v5;
    v46[1] = v11;
    first_of = llvm::StringRef::find_first_of(v46, "\\\r\n", 3, 0);
    if (first_of != -1)
    {
      v13 = first_of;
      a2[1] = 0;
      if (a2[2] < v11)
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a2, a2 + 3, v11, 1);
      while (1)
      {
        llvm::SmallVectorImpl<char>::insert<char const*,void>(a2, *a2 + a2[1], v5, &v5[v13]);
        if (v11 >= v13)
          v15 = v13;
        else
          v15 = v11;
        v5 += v15;
        v16 = v11 - v15;
        v50 = v5;
        v51 = v11 - v15;
        v17 = (char)*v5;
        if (v17 == 13 || v17 == 10)
        {
          llvm::SmallVectorTemplateBase<char,true>::push_back(a2, 10);
          if (v16 >= 2)
          {
            v19 = v5[1];
            if (v19 == 13 || v19 == 10)
            {
              --v16;
              v50 = v5 + 1;
              v51 = v16;
              ++v5;
            }
          }
          if (v16)
            ++v5;
          v11 = v16 - (v16 != 0);
          goto LABEL_89;
        }
        if (v16 == 1)
          goto LABEL_115;
        v21 = v11 > v13;
        if (v11 > v13)
          ++v5;
        v22 = (__PAIR128__(v16, v13) - v11) >> 64;
        v50 = v5;
        v51 = v16 - v21;
        v23 = (char)*v5;
        if (v23 > 91)
        {
          switch(*v5)
          {
            case '\\':
              v24 = a2;
              v25 = 92;
              goto LABEL_85;
            case '_':
              llvm::SmallVectorTemplateBase<char,true>::push_back(a2, -62);
              v24 = a2;
              v25 = -96;
              goto LABEL_85;
            case 'a':
              v24 = a2;
              v25 = 7;
              goto LABEL_85;
            case 'b':
              v24 = a2;
              v25 = 8;
              goto LABEL_85;
            case 'e':
              v24 = a2;
              v25 = 27;
              goto LABEL_85;
            case 'f':
              v24 = a2;
              v25 = 12;
              goto LABEL_85;
            case 'n':
              v24 = a2;
              v25 = 10;
              goto LABEL_85;
            case 'r':
              v24 = a2;
              v25 = 13;
              goto LABEL_85;
            case 't':
              goto LABEL_49;
            case 'u':
              if (v22 < 5)
                goto LABEL_86;
              v52 = 0;
              v47 = (llvm::formatv_object_base *)(v5 + 1);
              v48 = 4;
              if ((llvm::consumeUnsignedInteger((llvm *)&v47, (llvm::StringRef *)0x10, &v52, v14) & 1) != 0
                || v48
                || (v28 = v52, HIDWORD(v52)))
              {
                v28 = 65533;
              }
              encodeUTF8((_QWORD *)v28, a2);
              v5 += 4;
              v22 -= 4;
              break;
            case 'v':
              v24 = a2;
              v25 = 11;
              goto LABEL_85;
            case 'x':
              if (v22 < 3)
                goto LABEL_86;
              v52 = 0;
              v47 = (llvm::formatv_object_base *)(v5 + 1);
              v48 = 2;
              if ((llvm::consumeUnsignedInteger((llvm *)&v47, (llvm::StringRef *)0x10, &v52, v14) & 1) != 0
                || v48
                || (v29 = v52, HIDWORD(v52)))
              {
                v29 = 65533;
              }
              encodeUTF8((_QWORD *)v29, a2);
              v5 += 2;
              v22 -= 2;
              break;
            default:
              goto LABEL_115;
          }
LABEL_81:
          v50 = v5;
          v51 = v22;
          goto LABEL_86;
        }
        if (v23 > 46)
        {
          switch(*v5)
          {
            case 'L':
              v26 = 8232;
              goto LABEL_83;
            case 'M':
            case 'O':
            case 'Q':
            case 'R':
            case 'S':
            case 'T':
              goto LABEL_115;
            case 'N':
              llvm::SmallVectorTemplateBase<char,true>::push_back(a2, -62);
              v24 = a2;
              v25 = -123;
              break;
            case 'P':
              v26 = 8233;
LABEL_83:
              encodeUTF8((_QWORD *)v26, a2);
              goto LABEL_86;
            case 'U':
              if (v22 < 9)
                goto LABEL_86;
              v52 = 0;
              v47 = (llvm::formatv_object_base *)(v5 + 1);
              v48 = 8;
              if ((llvm::consumeUnsignedInteger((llvm *)&v47, (llvm::StringRef *)0x10, &v52, v14) & 1) != 0
                || v48
                || (v30 = v52, HIDWORD(v52)))
              {
                v30 = 65533;
              }
              encodeUTF8((_QWORD *)v30, a2);
              v5 += 8;
              v22 -= 8;
              goto LABEL_81;
            default:
              if (v23 == 47)
              {
                v24 = a2;
                v25 = 47;
              }
              else
              {
                if (v23 != 48)
                {
LABEL_115:
                  v47 = (llvm::formatv_object_base *)"Unrecognized escape code";
                  v49 = 259;
                  llvm::yaml::Scanner::setError(****(std::error_category *****)(a1 + 8), &v47, v5);
                  return "";
                }
                v24 = a2;
                v25 = 0;
              }
              break;
          }
        }
        else if (v23 <= 12)
        {
          if (v23 != 9)
          {
            if (v23 != 10)
              goto LABEL_115;
LABEL_45:
            if (v22 >= 2)
            {
              v27 = v5[1];
              if (v27 == 13 || v27 == 10)
              {
                --v22;
                ++v5;
              }
            }
            goto LABEL_86;
          }
LABEL_49:
          v24 = a2;
          v25 = 9;
        }
        else
        {
          switch(v23)
          {
            case 13:
              goto LABEL_45;
            case 32:
              v24 = a2;
              v25 = 32;
              break;
            case 34:
              v24 = a2;
              v25 = 34;
              break;
            default:
              goto LABEL_115;
          }
        }
LABEL_85:
        llvm::SmallVectorTemplateBase<char,true>::push_back(v24, v25);
LABEL_86:
        if (v22)
          ++v5;
        v11 = v22 - (v22 != 0);
LABEL_89:
        v50 = v5;
        v51 = v11;
        v13 = llvm::StringRef::find_first_of(&v50, "\\\r\n", 3, 0);
        if (v13 == -1)
        {
          v31 = *a2 + a2[1];
          v32 = &v5[v11];
          goto LABEL_112;
        }
      }
    }
  }
  else
  {
    llvm::StringRef::find_last_not_of(v4, "\n\r \t", 4, 0xFFFFFFFFFFFFFFFFLL);
  }
  return v5;
}

unint64_t llvm::yaml::KeyValueNode::getKey(llvm::yaml::KeyValueNode *this)
{
  unint64_t v1;
  int v3;
  BOOL v4;
  int v5;
  uint64_t *****v7;
  uint64_t v8;
  uint64_t v10;
  void *__p;
  char v12;

  v1 = *((_QWORD *)this + 9);
  if (!v1)
  {
    v3 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
    if (v3 > 15)
    {
      if (v3 == 17)
        goto LABEL_17;
      if (v3 == 16)
      {
        llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)&v10);
        if (v12 < 0)
          operator delete(__p);
      }
    }
    else
    {
      if (v3)
        v4 = v3 == 8;
      else
        v4 = 1;
      if (v4)
        goto LABEL_17;
    }
    v5 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
    if (v5 != 17 && v5 != 8)
    {
      v1 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
LABEL_18:
      *((_QWORD *)this + 9) = v1;
      return v1;
    }
LABEL_17:
    v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(**((_QWORD **)this + 1) + 8, 72, 4);
    v7 = (uint64_t *****)*((_QWORD *)this + 1);
    *(_QWORD *)v1 = off_251C13670;
    *(_QWORD *)(v1 + 8) = v7;
    *(_DWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 16) = 0;
    *(_QWORD *)(v1 + 24) = 0;
    *(_OWORD *)(v1 + 56) = 0u;
    *(_OWORD *)(v1 + 40) = 0u;
    v8 = llvm::yaml::Scanner::peekNext(***v7)[1];
    *(_QWORD *)(v1 + 16) = v8;
    *(_QWORD *)(v1 + 24) = v8;
    *(_QWORD *)v1 = off_251C13690;
    goto LABEL_18;
  }
  return v1;
}

uint64_t llvm::yaml::NullNode::NullNode(uint64_t a1, uint64_t *****a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = off_251C13670;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v3 = llvm::yaml::Scanner::peekNext(***a2)[1];
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)a1 = off_251C13690;
  return a1;
}

unint64_t llvm::yaml::KeyValueNode::getValue(llvm::yaml::KeyValueNode *this)
{
  unint64_t v1;
  unint64_t Key;
  uint64_t **v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  uint64_t *v10;
  uint64_t *****v11;
  uint64_t v12;
  _BYTE v14[24];
  void *__p;
  char v16;
  llvm::formatv_object_base *v17[4];
  __int16 v18;

  v1 = *((_QWORD *)this + 10);
  if (!v1)
  {
    Key = llvm::yaml::KeyValueNode::getKey(this);
    if (Key)
    {
      (*(void (**)(unint64_t))(*(_QWORD *)Key + 8))(Key);
      v4 = (uint64_t **)**((_QWORD **)this + 1);
      v5 = **v4;
      if (*(_BYTE *)(v5 + 74))
      {
LABEL_16:
        v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(v4 + 1), 72, 4);
        v11 = (uint64_t *****)*((_QWORD *)this + 1);
        *(_QWORD *)v1 = off_251C13670;
        *(_QWORD *)(v1 + 8) = v11;
        *(_DWORD *)(v1 + 32) = 0;
        *(_QWORD *)(v1 + 16) = 0;
        *(_QWORD *)(v1 + 24) = 0;
        *(_OWORD *)(v1 + 56) = 0u;
        *(_OWORD *)(v1 + 40) = 0u;
        v12 = llvm::yaml::Scanner::peekNext(***v11)[1];
        *(_QWORD *)(v1 + 16) = v12;
        *(_QWORD *)(v1 + 24) = v12;
        *(_QWORD *)v1 = off_251C13690;
        goto LABEL_17;
      }
      v6 = llvm::yaml::Scanner::peekNext((uint64_t **)v5);
      v7 = *(_DWORD *)v6;
      if (*(_DWORD *)v6 > 0x11u)
        goto LABEL_19;
      if (((1 << v7) & 0x18901) == 0)
      {
        if (v7 == 17)
        {
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v14);
          if (v16 < 0)
            operator delete(__p);
          v8 = *(_DWORD *)llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
          if (v8 != 16 && v8 != 8)
          {
            v1 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
LABEL_17:
            *((_QWORD *)this + 10) = v1;
            return v1;
          }
LABEL_20:
          v1 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(**((_QWORD **)this + 1) + 8, 72, 4);
          llvm::yaml::NullNode::NullNode(v1, *((uint64_t ******)this + 1));
          goto LABEL_17;
        }
LABEL_19:
        v17[0] = (llvm::formatv_object_base *)"Unexpected token in Key Value.";
        v18 = 259;
        llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), v17, (char *)v6[1]);
        goto LABEL_20;
      }
    }
    else
    {
      v17[0] = (llvm::formatv_object_base *)"Null key in Key Value.";
      v18 = 259;
      v10 = llvm::yaml::Scanner::peekNext(****((uint64_t ******)this + 1));
      llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), v17, (char *)v10[1]);
    }
    v4 = (uint64_t **)**((_QWORD **)this + 1);
    goto LABEL_16;
  }
  return v1;
}

void llvm::yaml::MappingNode::increment(llvm::yaml::MappingNode *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  __int128 v5;
  unint64_t v6;
  uint64_t *****v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  char v11[24];
  void *v12;
  char v13;
  char v14[24];
  void *__p;
  char v16;
  llvm::formatv_object_base *v17;
  __int16 v18;
  char v19[24];
  void *v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  std::string v24;

  v2 = ****((_QWORD ****)this + 1);
  if (*(_BYTE *)(v2 + 74))
    goto LABEL_2;
  if (*((_QWORD *)this + 10))
  {
    llvm::yaml::KeyValueNode::skip(*((llvm::yaml::KeyValueNode **)this + 10));
    if (*((_DWORD *)this + 18) == 2)
    {
LABEL_2:
      *((_BYTE *)this + 77) = 1;
      *((_QWORD *)this + 10) = 0;
      return;
    }
    v2 = ****((_QWORD ****)this + 1);
  }
  v3 = llvm::yaml::Scanner::peekNext((uint64_t **)v2);
  v4 = v3[2];
  v22 = *(_OWORD *)v3;
  v23 = v4;
  if (*((char *)v3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)v3[3], v3[4]);
  }
  else
  {
    v5 = *(_OWORD *)(v3 + 3);
    v24.__r_.__value_.__r.__words[2] = v3[5];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
  }
  if ((v22 & 0xFFFFFFFD) == 0x10)
  {
    v6 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(**((_QWORD **)this + 1) + 8, 88, 4);
    v7 = (uint64_t *****)*((_QWORD *)this + 1);
    *(_QWORD *)v6 = off_251C13670;
    *(_QWORD *)(v6 + 8) = v7;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_DWORD *)(v6 + 32) = 3;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 40) = 0u;
    v8 = llvm::yaml::Scanner::peekNext(***v7)[1];
    *(_QWORD *)(v6 + 16) = v8;
    *(_QWORD *)(v6 + 24) = v8;
    *(_QWORD *)v6 = off_251C136F0;
    *(_QWORD *)(v6 + 72) = 0;
    *(_QWORD *)(v6 + 80) = 0;
    *((_QWORD *)this + 10) = v6;
    goto LABEL_30;
  }
  if (*((_DWORD *)this + 18))
  {
    if ((_DWORD)v22)
    {
      if ((_DWORD)v22 != 15)
      {
        if ((_DWORD)v22 == 11)
        {
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v14);
          if (v16 < 0)
            operator delete(__p);
          llvm::yaml::MappingNode::increment(this);
          goto LABEL_30;
        }
        v10 = "Unexpected token. Expected Key, Flow Entry, or Flow Mapping End.";
        goto LABEL_28;
      }
      llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v11);
      if (v13 < 0)
      {
        v9 = v12;
        goto LABEL_25;
      }
    }
  }
  else if ((_DWORD)v22)
  {
    if ((_DWORD)v22 != 8)
    {
      v10 = "Unexpected token. Expected Key or Block End";
LABEL_28:
      v17 = (llvm::formatv_object_base *)v10;
      v18 = 259;
      llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), &v17, *((char **)&v22 + 1));
      goto LABEL_29;
    }
    llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v19);
    if (v21 < 0)
    {
      v9 = v20;
LABEL_25:
      operator delete(v9);
    }
  }
LABEL_29:
  *((_BYTE *)this + 77) = 1;
  *((_QWORD *)this + 10) = 0;
LABEL_30:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
}

unint64_t llvm::yaml::KeyValueNode::skip(llvm::yaml::KeyValueNode *this)
{
  unint64_t result;

  result = llvm::yaml::KeyValueNode::getKey(this);
  if (result)
  {
    (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    result = llvm::yaml::KeyValueNode::getValue(this);
    if (result)
      return (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void llvm::yaml::SequenceNode::increment(llvm::yaml::SequenceNode *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  __int128 v6;
  int v7;
  void *v8;
  unint64_t v9;
  const char *v10;
  void *v11;
  unint64_t v12;
  char v13[24];
  void *v14;
  char v15;
  char v16[24];
  void *v17;
  char v18;
  char v19[24];
  void *__p;
  char v21;
  llvm::formatv_object_base *v22;
  __int16 v23;
  char v24[24];
  void *v25;
  char v26;
  char v27[24];
  void *v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  std::string v32;

  v2 = ****((_QWORD ****)this + 1);
  if (*(_BYTE *)(v2 + 74))
  {
    *((_BYTE *)this + 77) = 1;
    *((_QWORD *)this + 10) = 0;
    return;
  }
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v3 + 8))(*((_QWORD *)this + 10));
    v2 = ****((_QWORD ****)this + 1);
  }
  v4 = llvm::yaml::Scanner::peekNext((uint64_t **)v2);
  v5 = v4[2];
  v30 = *(_OWORD *)v4;
  v31 = v5;
  if (*((char *)v4 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, (const std::string::value_type *)v4[3], v4[4]);
  }
  else
  {
    v6 = *(_OWORD *)(v4 + 3);
    v32.__r_.__value_.__r.__words[2] = v4[5];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v6;
  }
  v7 = *((_DWORD *)this + 18);
  switch(v7)
  {
    case 2:
      if ((_DWORD)v30 == 7)
      {
        llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v19);
        if ((v21 & 0x80000000) == 0)
          goto LABEL_20;
        v8 = __p;
LABEL_19:
        operator delete(v8);
LABEL_20:
        v9 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
        *((_QWORD *)this + 10) = v9;
        if (v9)
          break;
      }
LABEL_28:
      *((_BYTE *)this + 77) = 1;
      *((_QWORD *)this + 10) = 0;
      break;
    case 1:
      switch((int)v30)
      {
        case 0:
          goto LABEL_28;
        case 2:
        case 5:
        case 6:
          v10 = "Could not find closing ]!";
          goto LABEL_27;
        case 11:
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v16);
          if (v18 < 0)
            operator delete(v17);
          *((_BYTE *)this + 78) = 1;
          llvm::yaml::SequenceNode::increment(this);
          goto LABEL_29;
        case 13:
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v13);
          if ((v15 & 0x80000000) == 0)
            goto LABEL_28;
          v11 = v14;
          goto LABEL_41;
        default:
          if (!*((_BYTE *)this + 78))
          {
            v10 = "Expected , between entries!";
            goto LABEL_27;
          }
          v12 = llvm::yaml::Document::parseBlockNode(**((uint64_t ******)this + 1));
          *((_QWORD *)this + 10) = v12;
          if (!v12)
            *((_BYTE *)this + 77) = 1;
          *((_BYTE *)this + 78) = 0;
          break;
      }
      break;
    case 0:
      if ((_DWORD)v30)
      {
        if ((_DWORD)v30 == 8)
        {
          llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v24);
          if (v26 < 0)
          {
            v11 = v25;
LABEL_41:
            operator delete(v11);
          }
        }
        else
        {
          if ((_DWORD)v30 == 7)
          {
            llvm::yaml::Scanner::getNext(****((uint64_t ******)this + 1), (uint64_t)v27);
            if ((v29 & 0x80000000) == 0)
              goto LABEL_20;
            v8 = v28;
            goto LABEL_19;
          }
          v10 = "Unexpected token. Expected Block Entry or Block End.";
LABEL_27:
          v22 = (llvm::formatv_object_base *)v10;
          v23 = 259;
          llvm::yaml::Scanner::setError(****((std::error_category *****)this + 1), &v22, *((char **)&v30 + 1));
        }
      }
      goto LABEL_28;
  }
LABEL_29:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

llvm::yaml::Document *llvm::yaml::Document::Document(llvm::yaml::Document *this, llvm::yaml::Stream *a2)
{
  uint64_t **v3;
  _OWORD *v4;
  _OWORD *v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  __int128 v9;
  unint64_t first_of;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t first_not_of;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  _OWORD *v25;
  uint64_t **v26;
  char v27;
  uint64_t v29;
  void *v30;
  char v31;
  __int128 v32;
  uint64_t v33;
  std::string __p;
  uint64_t v35[2];
  __int128 v36;
  __int128 v37;
  const char *v38;
  __int128 v39;
  void *v40;
  char v41;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = (char *)this + 40;
  *((_QWORD *)this + 4) = 0x400000000;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = (char *)this + 88;
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 12) = 1;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  v3 = (uint64_t **)((char *)this + 112);
  *((_QWORD *)this + 16) = 0;
  v38 = "!";
  *(_QWORD *)&v39 = 1;
  *(_QWORD *)&v32 = &v38;
  v4 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef&&>,std::tuple<>>((uint64_t **)this + 14, (__int128 *)&v38, (_OWORD **)&v32);
  *((_QWORD *)v4 + 6) = "!";
  *((_QWORD *)v4 + 7) = 1;
  v38 = "!!";
  *(_QWORD *)&v39 = 2;
  *(_QWORD *)&v32 = &v38;
  v5 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef&&>,std::tuple<>>(v3, (__int128 *)&v38, (_OWORD **)&v32);
  v6 = 0;
  *((_QWORD *)v5 + 6) = "tag:yaml.org,2002:";
  *((_QWORD *)v5 + 7) = 18;
  do
  {
    while (1)
    {
      v7 = llvm::yaml::Scanner::peekNext(**(uint64_t ****)this);
      v8 = v7[2];
      v32 = *(_OWORD *)v7;
      v33 = v8;
      if (*((char *)v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v7[3], v7[4]);
      }
      else
      {
        v9 = *(_OWORD *)(v7 + 3);
        __p.__r_.__value_.__r.__words[2] = v7[5];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      if ((_DWORD)v32 == 3)
      {
        llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v38);
      }
      else
      {
        if ((_DWORD)v32 != 4)
        {
          v27 = 0;
          goto LABEL_27;
        }
        llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v38);
        v37 = v39;
        first_of = llvm::StringRef::find_first_of(&v37, " \t", 2, 0);
        if (*((_QWORD *)&v37 + 1) >= first_of)
          v11 = first_of;
        else
          v11 = *((_QWORD *)&v37 + 1);
        v12 = v37 + v11;
        v13 = *((_QWORD *)&v37 + 1) - v11;
        *(_QWORD *)&v36 = v37 + v11;
        *((_QWORD *)&v36 + 1) = *((_QWORD *)&v37 + 1) - v11;
        first_not_of = llvm::StringRef::find_first_not_of(&v36, " \t", 2, 0);
        if (first_not_of >= v13)
          v15 = v13;
        else
          v15 = first_not_of;
        v16 = v12 + v15;
        v17 = v13 - v15;
        *(_QWORD *)&v37 = v16;
        *((_QWORD *)&v37 + 1) = v17;
        v18 = llvm::StringRef::find_first_of(&v37, " \t", 2, 0);
        if (v17 >= v18)
          v19 = v18;
        else
          v19 = v17;
        *(_QWORD *)&v36 = v16;
        *((_QWORD *)&v36 + 1) = v19;
        v20 = v16 + v19;
        v21 = v17 - v19;
        v35[0] = v16 + v19;
        v35[1] = v17 - v19;
        v22 = llvm::StringRef::find_first_not_of(v35, " \t", 2, 0);
        if (v22 >= v21)
          v23 = v21;
        else
          v23 = v22;
        v24 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>((uint64_t)v3, v35, &v36);
        v25 = (_OWORD *)*v24;
        if (!*v24)
        {
          v26 = (uint64_t **)v24;
          v25 = operator new(0x40uLL);
          v25[2] = v36;
          *((_QWORD *)v25 + 6) = 0;
          *((_QWORD *)v25 + 7) = 0;
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(v3, v35[0], v26, (uint64_t *)v25);
        }
        *((_QWORD *)v25 + 6) = v20 + v23;
        *((_QWORD *)v25 + 7) = v21 - v23;
      }
      if (v41 < 0)
        operator delete(v40);
      v6 = 1;
      v27 = 1;
LABEL_27:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        break;
      if ((v27 & 1) == 0)
        goto LABEL_31;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v27 & 1) != 0);
LABEL_31:
  if ((v6 & 1) != 0)
  {
    llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v38);
    if ((_DWORD)v38 != 5)
    {
      *(_QWORD *)&v32 = "Unexpected token";
      LOWORD(__p.__r_.__value_.__r.__words[1]) = 259;
      llvm::yaml::Scanner::setError(**(std::error_category ***)this, (llvm::formatv_object_base **)&v32, (char *)v39);
    }
    if (v41 < 0)
      operator delete(v40);
  }
  if (*(_DWORD *)llvm::yaml::Scanner::peekNext(**(uint64_t ****)this) == 5)
  {
    llvm::yaml::Scanner::getNext(**(uint64_t ****)this, (uint64_t)&v29);
    if (v31 < 0)
      operator delete(v30);
  }
  return this;
}

llvm::yaml::MappingNode *llvm::yaml::MappingNode::skip(llvm::yaml::MappingNode *this)
{
  llvm::yaml::MappingNode *v1;

  if (*((_BYTE *)this + 76))
  {
    v1 = this;
    *((_BYTE *)this + 76) = 0;
    while (1)
    {
      llvm::yaml::MappingNode::increment(v1);
      this = (llvm::yaml::MappingNode *)*((_QWORD *)v1 + 10);
      if (!this)
        break;
      llvm::yaml::KeyValueNode::skip(this);
    }
  }
  return this;
}

llvm::yaml::SequenceNode *llvm::yaml::SequenceNode::skip(llvm::yaml::SequenceNode *this)
{
  llvm::yaml::SequenceNode *v1;

  if (*((_BYTE *)this + 76))
  {
    v1 = this;
    *((_BYTE *)this + 76) = 0;
    while (1)
    {
      llvm::yaml::SequenceNode::increment(v1);
      this = (llvm::yaml::SequenceNode *)*((_QWORD *)v1 + 10);
      if (!this)
        break;
      (*(void (**)(llvm::yaml::SequenceNode *))(*(_QWORD *)this + 8))(this);
    }
  }
  return this;
}

uint64_t llvm::yaml::SequenceNode::SequenceNode(uint64_t a1, uint64_t *****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;

  *(_QWORD *)a1 = off_251C13670;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 5;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  v9 = llvm::yaml::Scanner::peekNext(***a2)[1];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)a1 = off_251C13730;
  *(_DWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 76) = 1;
  *(_BYTE *)(a1 + 78) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

uint64_t llvm::yaml::MappingNode::MappingNode(uint64_t a1, uint64_t *****a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v9;

  *(_QWORD *)a1 = off_251C13670;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 4;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  *(_QWORD *)(a1 + 56) = a5;
  *(_QWORD *)(a1 + 64) = a6;
  v9 = llvm::yaml::Scanner::peekNext(***a2)[1];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)a1 = off_251C13710;
  *(_DWORD *)(a1 + 72) = a7;
  *(_WORD *)(a1 + 76) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void std::default_delete<llvm::yaml::Document>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a2 + 112, *(_QWORD **)(a2 + 120));
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(a2 + 8);
    JUMPOUT(0x24BD1B3A4);
  }
}

void std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *llvm::simple_ilist<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Node>::eraseAndDispose<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Disposer>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t *v5;

  if (a2 != a3)
  {
    do
    {
      v4 = *a2;
      v5 = (uint64_t *)a2[1];
      *v5 = *a2;
      *(_QWORD *)(v4 + 8) = v5;
      *a2 = 0;
      a2[1] = 0;
      if (*((char *)a2 + 63) < 0)
        operator delete((void *)a2[5]);
      a2 = v5;
    }
    while (v5 != a3);
  }
  return a3;
}

uint64_t llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Reset(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = *(unsigned int *)(result + 72);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(result + 64);
    v4 = 16 * v2;
    do
    {
      v5 = *v3;
      v3 += 2;
      result = MEMORY[0x24BD1B398](v5, 8);
      v4 -= 16;
    }
    while (v4);
  }
  *(_DWORD *)(v1 + 72) = 0;
  v6 = *(unsigned int *)(v1 + 24);
  if ((_DWORD)v6)
  {
    *(_QWORD *)(v1 + 80) = 0;
    v7 = *(_QWORD **)(v1 + 16);
    v8 = *v7 + 4096;
    *(_QWORD *)v1 = *v7;
    *(_QWORD *)(v1 + 8) = v8;
    if ((_DWORD)v6 != 1)
    {
      v9 = v7 + 1;
      v10 = 8 * v6 - 8;
      do
      {
        v11 = *v9++;
        result = MEMORY[0x24BD1B398](v11, 8);
        v10 -= 8;
      }
      while (v10);
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

unint64_t llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::create<llvm::yaml::Token const&>(uint64_t a1, __int128 *a2)
{
  unint64_t v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;

  v3 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  v4 = *a2;
  *(_QWORD *)(v3 + 32) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v3 + 16) = v4;
  v5 = (std::string *)(v3 + 40);
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v3 + 56) = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return v3;
}

void std::default_delete<llvm::yaml::Scanner>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 224);
    if (v3 != (void *)(a2 + 240))
      free(v3);
    v4 = *(void **)(a2 + 192);
    if (v4 != (void *)(a2 + 208))
      free(v4);
    llvm::simple_ilist<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Node>::eraseAndDispose<llvm::AllocatorList<llvm::yaml::Token,llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>>::Disposer>(a2 + 176, *(uint64_t **)(a2 + 184), (uint64_t *)(a2 + 176));
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl(a2 + 80);
    JUMPOUT(0x24BD1B3A4);
  }
}

uint64_t std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::find<llvm::StringRef>(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const void *v6;
  size_t v7;
  int v8;
  uint64_t *v9;
  const void *v10;
  size_t v11;
  __int128 v13;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = *(const void **)a2;
    v7 = *((_QWORD *)a2 + 1);
    v13 = *(_OWORD *)(v3 + 32);
    v8 = llvm::StringRef::compare((uint64_t)&v13, v6, v7);
    v9 = (uint64_t *)(v3 + 8);
    if (v8 >= 0)
    {
      v9 = (uint64_t *)v3;
      v5 = v3;
    }
    v3 = *v9;
  }
  while (*v9);
  if (v2 == v5)
    return v2;
  v10 = *(const void **)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v13 = *a2;
  if ((llvm::StringRef::compare((uint64_t)&v13, v10, v11) & 0x80000000) != 0)
    return v2;
  return v5;
}

char *llvm::SmallVectorImpl<char>::insert<char const*,void>(uint64_t *a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _BYTE *v15;
  char v16;

  v5 = __src;
  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - *a1;
  if (*a1 + v8 == a2)
  {
    llvm::SmallVectorImpl<char>::append<char const*,void>(a1, __src, a4);
    return (char *)(*a1 + v9);
  }
  else
  {
    v10 = a4 - __src;
    v11 = v8 + a4 - __src;
    if (a1[2] < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    v12 = (char *)(v7 + v9);
    v13 = (char *)(v7 + v8);
    v14 = v8 - v9;
    if (v8 - v9 >= v10)
    {
      llvm::SmallVectorImpl<char>::append<std::__wrap_iter<char *>,void>(a1, &v13[-v10], (char *)(v7 + v8));
      if (&v13[-v10] != v12)
        memmove(&v12[v10], v12, &v13[-v10] - v12);
      if (a4 != v5)
        memmove(v12, v5, a4 - v5);
    }
    else
    {
      a1[1] = v8 + v10;
      if (v9 != v8)
        memcpy((void *)(v7 + v10 + v9), v12, v8 - v9);
      if (v14)
      {
        v15 = v12;
        do
        {
          v16 = *v5++;
          *v15++ = v16;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, a4 - v5);
    }
  }
  return v12;
}

_OWORD *std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__emplace_unique_key_args<llvm::StringRef,std::piecewise_construct_t const&,std::tuple<llvm::StringRef&&>,std::tuple<>>(uint64_t **a1, __int128 *a2, _OWORD **a3)
{
  uint64_t *v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>((uint64_t)a1, &v9, a2);
  v6 = (_OWORD *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x40uLL);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = 0;
    *((_QWORD *)v6 + 7) = 0;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v7;
  const void *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  __int128 v13;

  v5 = (uint64_t *)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (const void *)v4[4];
        v9 = v4[5];
        v13 = *a3;
        if ((llvm::StringRef::compare((uint64_t)&v13, v8, v9) & 0x80000000) == 0)
          break;
        v4 = (uint64_t *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      v10 = *(const void **)a3;
      v11 = *((_QWORD *)a3 + 1);
      v13 = *((_OWORD *)v7 + 2);
      if ((llvm::StringRef::compare((uint64_t)&v13, v10, v11) & 0x80000000) == 0)
        break;
      v5 = v7 + 1;
      v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t llvm::yaml::Input::Input(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  const std::error_category *v14;

  *(_QWORD *)a1 = &off_251C13770;
  *(_QWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  v11 = a1 + 16;
  v12 = (_QWORD *)operator new();
  v13 = operator new();
  *v12 = llvm::yaml::Scanner::Scanner(v13, a2, a3, v11, 0, a1 + 104);
  v12[1] = 0;
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  v14 = std::system_category();
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 112) = v14;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = a1 + 152;
  *(_QWORD *)(a1 + 144) = 0x400000000;
  *(_QWORD *)(a1 + 184) = a1 + 200;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 208) = 1;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 240;
  *(_QWORD *)(a1 + 232) = 0x600000000;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 0;
  if (a5)
  {
    *(_QWORD *)(a1 + 64) = a5;
    *(_QWORD *)(a1 + 72) = a6;
  }
  *(_QWORD *)(a1 + 216) = llvm::yaml::Stream::begin(*(llvm::yaml::Stream **)(a1 + 88));
  return a1;
}

void llvm::yaml::Input::~Input(llvm::yaml::Input *this)
{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251C13770;
  v2 = (char *)*((_QWORD *)this + 28);
  if (v2 != (char *)this + 240)
    free(v2);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 120);
  v3 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  std::unique_ptr<llvm::yaml::Stream>::reset[abi:nn180100]((llvm::yaml::Stream **)this + 11, 0);
  llvm::SourceMgr::~SourceMgr((llvm::yaml::Input *)((char *)this + 16));
}

{
  llvm::yaml::Input::~Input(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::yaml::Input::outputting(llvm::yaml::Input *this)
{
  return 0;
}

uint64_t llvm::yaml::Input::setCurrentDocument(llvm::yaml::Input *this)
{
  uint64_t *****v1;
  llvm::yaml::Document ***v2;
  uint64_t ****v4;
  uint64_t ***v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const std::error_category *v9;
  uint64_t v10;

  v2 = (llvm::yaml::Document ***)((char *)this + 216);
  v1 = (uint64_t *****)*((_QWORD *)this + 27);
  if (v1)
  {
    do
    {
      v4 = *v1;
      if (!*v1)
        break;
      v5 = v4[13];
      if (!v5)
      {
        v5 = (uint64_t ***)llvm::yaml::Document::parseBlockNode(*v1);
        v4[13] = v5;
        if (!v5)
        {
          v9 = std::generic_category();
          result = 0;
          *((_QWORD *)this + 13) = 22;
          *((_QWORD *)this + 14) = v9;
          return result;
        }
      }
      if (*((_DWORD *)v5 + 8))
      {
        llvm::yaml::Input::createHNodes((llvm **)this, (llvm::yaml::Node *)v5, &v10);
        v7 = v10;
        v8 = *((_QWORD *)this + 12);
        *((_QWORD *)this + 12) = v10;
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          v7 = *((_QWORD *)this + 12);
        }
        *((_QWORD *)this + 37) = v7;
        return 1;
      }
      llvm::yaml::document_iterator::operator++(v2);
      v1 = (uint64_t *****)*v2;
    }
    while (*v2);
  }
  return 0;
}

void llvm::yaml::Input::createHNodes(llvm **this@<X0>, llvm::yaml::Node *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  const char *Value;
  size_t v8;
  size_t v9;
  void *v10;
  void *v11;
  size_t v12;
  size_t v13;
  const void *v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  llvm::yaml::Node *v18;
  llvm::formatv_object_base **v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  llvm::formatv_object_base *v30;
  _QWORD *v31;
  llvm::formatv_object_base *v32;
  _QWORD *v33;
  llvm::formatv_object_base *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  llvm::yaml::KeyValueNode *v38;
  unint64_t Key;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  llvm::yaml::Node *v43;
  const char *v44;
  unint64_t v45;
  size_t v46;
  void *v47;
  void *v48;
  unint64_t v49;
  int v50;
  const std::error_category *v51;
  llvm::formatv_object_base *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t **v55;
  unint64_t *v56;
  unint64_t v57;
  const std::error_category *v58;
  const std::error_category *v59;
  const std::error_category *v60;
  _QWORD *v61;
  _QWORD v62[4];
  __int16 v63;
  llvm::formatv_object_base *v64[4];
  __int16 v65;
  void *v66;
  __int128 v67;
  _QWORD v68[18];

  v68[16] = *MEMORY[0x24BDAC8D0];
  v66 = v68;
  v67 = xmmword_24AA2AC90;
  v6 = *((_DWORD *)a2 + 8);
  if (a2 && v6 == 1)
  {
    Value = llvm::yaml::ScalarNode::getValue((uint64_t)a2, (uint64_t *)&v66);
    v9 = v67;
    if ((_QWORD)v67)
    {
      v10 = v66;
      v11 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 15), v67, 0);
      memmove(v11, v10, v9);
      v12 = v9;
    }
    else
    {
      v11 = (void *)Value;
      v12 = v8;
    }
    v16 = (_QWORD *)operator new();
    *v16 = &off_251C138B0;
    v16[1] = a2;
    v16[2] = v11;
    v16[3] = v12;
    goto LABEL_77;
  }
  if (a2 && v6 == 2)
  {
    v13 = *((_QWORD *)a2 + 10);
    if (v13)
    {
      v14 = (const void *)*((_QWORD *)a2 + 9);
      v15 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 15), *((_QWORD *)a2 + 10), 0);
      memmove(v15, v14, v13);
    }
    else
    {
      v15 = 0;
    }
    v16 = (_QWORD *)operator new();
    *v16 = &off_251C138B0;
    v16[1] = a2;
    v16[2] = v15;
    v16[3] = v13;
    goto LABEL_77;
  }
  if (a2 && v6 == 5)
  {
    v61 = a3;
    v16 = (_QWORD *)operator new();
    *v16 = &off_251C13900;
    v16[1] = a2;
    v16[2] = 0;
    v17 = v16 + 2;
    v16[3] = 0;
    v16[4] = 0;
    *((_BYTE *)a2 + 76) = 0;
    llvm::yaml::SequenceNode::increment(a2);
    v18 = (llvm::yaml::Node *)*((_QWORD *)a2 + 10);
    if (v18)
    {
      v19 = 0;
      v20 = 0;
      while (1)
      {
        llvm::yaml::Input::createHNodes((uint64_t *)v64, (llvm::yaml::Input *)this, v18);
        if (*((_DWORD *)this + 26))
          break;
        v21 = v16[4];
        if ((unint64_t)v20 >= v21)
        {
          v24 = (llvm::formatv_object_base **)v20 - v19;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            abort();
          v26 = v21 - (_QWORD)v19;
          if (v26 >> 2 > v25)
            v25 = v26 >> 2;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
            v27 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v27 = v25;
          if (v27)
          {
            if (v27 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v28 = (char *)operator new(8 * v27);
          }
          else
          {
            v28 = 0;
          }
          v19 = (llvm::formatv_object_base **)&v28[8 * v24];
          v29 = &v28[8 * v27];
          v30 = v64[0];
          v64[0] = 0;
          *v19 = v30;
          v23 = v19 + 1;
          v31 = (_QWORD *)*v17;
          if (v20 == (_QWORD *)*v17)
          {
            v34 = 0;
            v16[2] = v19;
            v16[3] = v23;
            v16[4] = v29;
          }
          else
          {
            do
            {
              v32 = (llvm::formatv_object_base *)*--v20;
              *v20 = 0;
              *--v19 = v32;
            }
            while (v20 != v31);
            v20 = (_QWORD *)v16[2];
            v33 = (_QWORD *)v16[3];
            v34 = v64[0];
            v16[2] = v19;
            v16[3] = v23;
            v16[4] = v29;
            while (v33 != v20)
            {
              v36 = *--v33;
              v35 = v36;
              *v33 = 0;
              if (v36)
                (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
            }
          }
          if (v20)
            operator delete(v20);
          v16[3] = v23;
          if (v34)
            (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v34 + 16))(v34);
        }
        else
        {
          *v20 = v64[0];
          v22 = v20 + 1;
          v16[3] = v22;
          v23 = v22;
        }
        llvm::yaml::SequenceNode::increment(a2);
        v18 = (llvm::yaml::Node *)*((_QWORD *)a2 + 10);
        v20 = v23;
        if (!v18)
          goto LABEL_76;
      }
      a3 = v61;
      if (v64[0])
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v64[0] + 16))(v64[0]);
      goto LABEL_77;
    }
LABEL_76:
    a3 = v61;
    goto LABEL_77;
  }
  if (!a2 || v6 != 4)
  {
    if (v6)
    {
      v64[0] = (llvm::formatv_object_base *)"unknown node kind";
      v65 = 259;
      llvm::yaml::Stream::printError(this[11], (uint64_t)a2, v64, 0);
      v58 = std::generic_category();
      v16 = 0;
      this[13] = (llvm *)22;
      this[14] = (llvm *)v58;
    }
    else
    {
      v16 = (_QWORD *)operator new();
      *v16 = &off_251C13888;
      v16[1] = a2;
    }
    goto LABEL_77;
  }
  v16 = (_QWORD *)operator new();
  *v16 = &off_251C138D8;
  v16[1] = a2;
  v16[2] = 0;
  v37 = v16 + 2;
  v16[3] = 0;
  v16[4] = 0x2000000000;
  v16[5] = v16 + 7;
  v16[6] = 0x600000000;
  *((_BYTE *)a2 + 76) = 0;
  llvm::yaml::MappingNode::increment(a2);
  v38 = (llvm::yaml::KeyValueNode *)*((_QWORD *)a2 + 10);
  if (v38)
  {
    v61 = a3;
    while (1)
    {
      Key = llvm::yaml::KeyValueNode::getKey(v38);
      v40 = Key;
      if (Key)
        v41 = *(_DWORD *)(Key + 32) == 1 ? Key : 0;
      else
        v41 = 0;
      v42 = llvm::yaml::KeyValueNode::getValue(v38);
      v43 = (llvm::yaml::Node *)v42;
      if (!v41 || !v42)
        break;
      *(_QWORD *)&v67 = 0;
      v44 = llvm::yaml::ScalarNode::getValue(v41, (uint64_t *)&v66);
      v46 = v67;
      if ((_QWORD)v67)
      {
        v47 = v66;
        v48 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)(this + 15), v67, 0);
        memmove(v48, v47, v46);
        v49 = v46;
      }
      else
      {
        v48 = (void *)v44;
        v49 = v45;
      }
      v50 = llvm::StringMapImpl::FindKey(v37, (uint64_t *)v48, v49);
      if (v50 != -1 && v50 != (unint64_t)*((unsigned int *)v16 + 6))
      {
        v62[0] = "duplicated mapping key '";
        v62[2] = v48;
        v62[3] = v49;
        v63 = 1283;
        v64[0] = (llvm::formatv_object_base *)v62;
        v64[2] = (llvm::formatv_object_base *)"'";
        v65 = 770;
        llvm::yaml::Stream::printError(this[11], v40, v64, 0);
        v51 = std::generic_category();
        this[13] = (llvm *)22;
        this[14] = (llvm *)v51;
      }
      llvm::yaml::Input::createHNodes((uint64_t *)v64, (llvm::yaml::Input *)this, v43);
      v52 = v64[0];
      if (*((_DWORD *)this + 26))
      {
        if (v64[0])
          (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v64[0] + 16))(v64[0]);
        goto LABEL_76;
      }
      v54 = *(_QWORD *)(v40 + 16);
      v53 = *(_QWORD *)(v40 + 24);
      v55 = llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)v37, (uint64_t *)v48, v49);
      v56 = *v55;
      v57 = (*v55)[1];
      v56[1] = (unint64_t)v52;
      if (v57)
        (*(void (**)(unint64_t))(*(_QWORD *)v57 + 16))(v57);
      v56[2] = v54;
      v56[3] = v53;
      llvm::yaml::MappingNode::increment(a2);
      v38 = (llvm::yaml::KeyValueNode *)*((_QWORD *)a2 + 10);
      if (!v38)
        goto LABEL_76;
    }
    if (!v41)
    {
      v64[0] = (llvm::formatv_object_base *)"Map key must be a scalar";
      v65 = 259;
      llvm::yaml::Stream::printError(this[11], v40, v64, 0);
      v59 = std::generic_category();
      this[13] = (llvm *)22;
      this[14] = (llvm *)v59;
    }
    if (!v43)
    {
      v64[0] = (llvm::formatv_object_base *)"Map value must not be empty";
      v65 = 259;
      llvm::yaml::Stream::printError(this[11], v40, v64, 0);
      v60 = std::generic_category();
      this[13] = (llvm *)22;
      this[14] = (llvm *)v60;
    }
    goto LABEL_76;
  }
LABEL_77:
  *a3 = v16;
  if (v66 != v68)
    free(v66);
}

BOOL llvm::yaml::Input::mapTag(uint64_t a1, const void *a2, size_t a3, _BOOL8 a4)
{
  uint64_t v4;
  unint64_t v8;
  int v9;
  void **v10;
  void *__p[2];
  unsigned __int8 v13;

  v4 = *(_QWORD *)(a1 + 296);
  if (!v4)
    return 0;
  llvm::yaml::Node::getVerbatimTag(*(llvm::yaml::Node **)(v4 + 8), (uint64_t)__p);
  v8 = v13;
  v9 = (char)v13;
  if ((v13 & 0x80u) != 0)
    v8 = (unint64_t)__p[1];
  if (!v8)
    goto LABEL_10;
  if (a3 == v8)
  {
    if ((v13 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    a4 = memcmp(a2, v10, a3) == 0;
LABEL_10:
    if (v9 < 0)
      goto LABEL_14;
    return a4;
  }
  a4 = 0;
  if ((char)v13 < 0)
LABEL_14:
    operator delete(__p[0]);
  return a4;
}

void llvm::yaml::Input::beginMapping(llvm::yaml::Input *this)
{
  uint64_t v1;

  if (!*((_DWORD *)this + 26))
  {
    v1 = *((_QWORD *)this + 37);
    if (v1)
    {
      if (*(_DWORD *)(*(_QWORD *)(v1 + 8) + 32) == 4)
        llvm::SmallVectorImpl<std::string>::clear((uint64_t *)(v1 + 40));
    }
  }
}

void llvm::SmallVectorImpl<std::string>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *a1;
    v4 = 24 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0)
        operator delete(*(void **)(v3 + v4 - 24));
      v4 -= 24;
    }
    while (v4);
  }
  *((_DWORD *)a1 + 2) = 0;
}

void llvm::yaml::Input::keys(llvm::yaml::Input *this@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  const std::error_category *v8;
  uint64_t **v9;
  uint64_t v10;
  uint64_t **i;
  uint64_t **v13;
  char *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  BOOL v30;
  llvm::formatv_object_base *v31;
  __int16 v32;

  v3 = *((_QWORD *)this + 37);
  v4 = *(_QWORD *)(v3 + 8);
  v5 = *(_DWORD *)(v4 + 32);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v3)
    v6 = v5 == 4;
  else
    v6 = 0;
  if (v6)
  {
    v9 = *(uint64_t ***)(v3 + 16);
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10)
    {
      for (i = v9; !*i || *i + 1 == 0; ++i)
        ;
    }
    else
    {
      i = v9;
    }
    v13 = &v9[v10];
    if (i != v13)
    {
      v14 = 0;
      v15 = a2 + 2;
      v16 = *i;
      do
      {
        v19 = *v16;
        v17 = v16 + 4;
        v18 = v19;
        if ((unint64_t)v14 >= *v15)
        {
          v20 = (v14 - *a2) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            abort();
          v21 = *v15 - (_QWORD)*a2;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          if (v23)
            v24 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a2 + 2), v23);
          else
            v24 = 0;
          v25 = &v24[16 * v20];
          *(_QWORD *)v25 = v17;
          *((_QWORD *)v25 + 1) = v18;
          v27 = *a2;
          v26 = a2[1];
          v28 = v25;
          if (v26 != *a2)
          {
            do
            {
              *((_OWORD *)v28 - 1) = *((_OWORD *)v26 - 1);
              v28 -= 16;
              v26 -= 16;
            }
            while (v26 != v27);
            v26 = *a2;
          }
          v14 = v25 + 16;
          *a2 = v28;
          a2[1] = v25 + 16;
          a2[2] = &v24[16 * v23];
          if (v26)
            operator delete(v26);
        }
        else
        {
          *(_QWORD *)v14 = v17;
          *((_QWORD *)v14 + 1) = v18;
          v14 += 16;
        }
        a2[1] = v14;
        do
        {
          v29 = i[1];
          ++i;
          v16 = v29;
          if (v29)
            v30 = v16 + 1 == 0;
          else
            v30 = 1;
        }
        while (v30);
      }
      while (i != v13);
    }
  }
  else
  {
    v31 = (llvm::formatv_object_base *)"not a mapping";
    v32 = 259;
    llvm::yaml::Stream::printError(*((llvm **)this + 11), v4, &v31, 0);
    v8 = std::generic_category();
    *((_QWORD *)this + 13) = 22;
    *((_QWORD *)this + 14) = v8;
  }
}

uint64_t llvm::yaml::Input::preflightKey(llvm::yaml::Input *this, char *__s, int a3, BOOL a4, BOOL *a5, void **a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v12;
  int v13;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  size_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  char v24;
  const std::error_category *v25;
  _QWORD v26[4];
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;

  result = 0;
  *a5 = 0;
  if (!*((_DWORD *)this + 26))
  {
    v9 = *((_QWORD *)this + 37);
    if (!v9)
    {
      if (!a3)
        return 0;
      goto LABEL_27;
    }
    v12 = *(_QWORD *)(v9 + 8);
    v13 = *(_DWORD *)(v12 + 32);
    if (v13 == 4)
    {
      std::string::basic_string[abi:nn180100]<0>(__p, __s);
      v15 = llvm::SmallVectorTemplateCommon<std::string,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::string,false>>(v9 + 40, (unint64_t)__p, 1);
      v16 = *(_QWORD *)(v9 + 40) + 24 * *(unsigned int *)(v9 + 48);
      v17 = *(_OWORD *)v15;
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v15 + 16);
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = 0;
      ++*(_DWORD *)(v9 + 48);
      if (SHIBYTE(v29) < 0)
        operator delete(__p[0]);
      if (__s)
        v18 = strlen(__s);
      else
        v18 = 0;
      v20 = (*llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::try_emplace<>((llvm::StringMapImpl *)(v9 + 16), (uint64_t *)__s, v18))[1];
      if (v20)
      {
        *a6 = (void *)*((_QWORD *)this + 37);
        *((_QWORD *)this + 37) = v20;
        return 1;
      }
      if (a3)
      {
        v21 = *((_QWORD *)this + 37);
        v22 = *__s;
        v23 = "missing required key '";
        if (*__s)
        {
          v26[0] = "missing required key '";
          v26[2] = __s;
          v27 = 771;
          v24 = 2;
        }
        else
        {
          v26[0] = "missing required key '";
          v27 = 259;
          v24 = 3;
        }
        if (v22)
          v23 = (const char *)v26;
        __p[0] = (void *)v23;
        v29 = "'";
        LOBYTE(v30) = v24;
        HIBYTE(v30) = 3;
        v12 = *(_QWORD *)(v21 + 8);
        goto LABEL_26;
      }
    }
    else
    {
      if (v13)
        v19 = 0;
      else
        v19 = a3 == 0;
      if (!v19)
      {
        __p[0] = "not a mapping";
        v30 = 259;
LABEL_26:
        llvm::yaml::Stream::printError(*((llvm **)this + 11), v12, (llvm::formatv_object_base **)__p, 0);
LABEL_27:
        v25 = std::generic_category();
        result = 0;
        *((_QWORD *)this + 13) = 22;
        *((_QWORD *)this + 14) = v25;
        return result;
      }
    }
    result = 0;
    *a5 = 1;
  }
  return result;
}

uint64_t llvm::yaml::Input::postflightKey(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 296) = a2;
  return this;
}

void llvm::yaml::Input::endMapping(llvm::yaml::Input *this)
{
  uint64_t v2;
  uint64_t v3;
  llvm::formatv_object_base ***i;
  uint64_t v6;
  llvm::formatv_object_base **v7;
  llvm::formatv_object_base *v8;
  unint64_t *v9;
  llvm::formatv_object_base *v10;
  llvm::formatv_object_base **v11;
  BOOL v12;
  llvm::formatv_object_base *v13;
  const std::error_category *v14;
  _QWORD v15[2];
  llvm::formatv_object_base **v16;
  llvm::formatv_object_base *v17;
  __int16 v18;
  llvm::formatv_object_base *v19[2];
  const char *v20;
  __int16 v21;

  if (!*((_DWORD *)this + 26))
  {
    v2 = *((_QWORD *)this + 37);
    if (v2)
    {
      if (*(_DWORD *)(*(_QWORD *)(v2 + 8) + 32) == 4)
      {
        v3 = *(unsigned int *)(v2 + 24);
        if ((_DWORD)v3)
        {
          for (i = *(llvm::formatv_object_base ****)(v2 + 16); !*i || *i + 1 == 0; ++i)
            ;
        }
        else
        {
          i = *(llvm::formatv_object_base ****)(v2 + 16);
        }
        v6 = *(_QWORD *)(v2 + 16) + 8 * v3;
        if (i != (llvm::formatv_object_base ***)v6)
        {
          v7 = *i;
          do
          {
            v8 = *v7;
            v19[0] = (llvm::formatv_object_base *)(v7 + 4);
            v19[1] = v8;
            if (std::__find_impl[abi:nn180100]<std::string *,std::string *,llvm::StringRef,std::__identity>(*(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 40) + 24 * *(unsigned int *)(v2 + 48), (uint64_t)v19) == *(_QWORD *)(v2 + 40) + 24 * *(unsigned int *)(v2 + 48))
            {
              v9 = (unint64_t *)(v7 + 2);
              if (!*((_BYTE *)this + 305))
              {
                v13 = *v7;
                v15[0] = "unknown key '";
                v16 = v7 + 4;
                v17 = v13;
                v18 = 1283;
                v19[0] = (llvm::formatv_object_base *)v15;
                v20 = "'";
                v21 = 770;
                llvm::yaml::Stream::printError(*((llvm **)this + 11), v9, v19, 0);
                v14 = std::generic_category();
                *((_QWORD *)this + 13) = 22;
                *((_QWORD *)this + 14) = v14;
                return;
              }
              v10 = *v7;
              v15[0] = "unknown key '";
              v16 = v7 + 4;
              v17 = v10;
              v18 = 1283;
              v19[0] = (llvm::formatv_object_base *)v15;
              v20 = "'";
              v21 = 770;
              llvm::yaml::Stream::printError(*((llvm **)this + 11), v9, v19, 1);
            }
            do
            {
              v11 = i[1];
              ++i;
              v7 = v11;
              if (v11)
                v12 = v7 + 1 == 0;
              else
                v12 = 1;
            }
            while (v12);
          }
          while (i != (llvm::formatv_object_base ***)v6);
        }
      }
    }
  }
}

uint64_t llvm::yaml::Input::beginFlowMapping(llvm::yaml::Input *this)
{
  return (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)this + 104))(this);
}

uint64_t llvm::yaml::Input::endFlowMapping(llvm::yaml::Input *this)
{
  return (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)this + 112))(this);
}

uint64_t llvm::yaml::Input::beginSequence(llvm::yaml::Input *this)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  BOOL v6;
  _BYTE *v7;
  uint64_t v8;
  const std::error_category *v9;
  uint64_t result;
  llvm::formatv_object_base *v11;
  __int16 v12;

  v1 = (_QWORD *)*((_QWORD *)this + 37);
  v2 = v1[1];
  v3 = *(_DWORD *)(v2 + 32);
  if (v1)
    v4 = v3 == 5;
  else
    v4 = 0;
  if (v4)
    return (v1[3] - v1[2]) >> 3;
  if (v3)
  {
    if (v1)
      v6 = v3 > 2;
    else
      v6 = 1;
    if (v6)
      goto LABEL_15;
    v7 = (_BYTE *)v1[2];
    v8 = v1[3];
    if (v8 == 1)
    {
      if (*v7 != 126)
      {
LABEL_15:
        v11 = (llvm::formatv_object_base *)"not a sequence";
        v12 = 259;
        llvm::yaml::Stream::printError(*((llvm **)this + 11), v2, &v11, 0);
        v9 = std::generic_category();
        result = 0;
        *((_QWORD *)this + 13) = 22;
        *((_QWORD *)this + 14) = v9;
        return result;
      }
    }
    else if (v8 != 4 || *(_DWORD *)v7 != 1819047278 && *(_DWORD *)v7 != 1819047246 && *(_DWORD *)v7 != 1280070990)
    {
      goto LABEL_15;
    }
  }
  return 0;
}

uint64_t llvm::yaml::Input::preflightElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  _QWORD *v3;

  if (*((_DWORD *)this + 26))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5)
    return 0;
  *a3 = v3;
  *((_QWORD *)this + 37) = *(_QWORD *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::postflightElement(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 296) = a2;
  return this;
}

uint64_t llvm::yaml::Input::beginFlowSequence(llvm::yaml::Input *this)
{
  return (*(uint64_t (**)(llvm::yaml::Input *))(*(_QWORD *)this + 24))(this);
}

uint64_t llvm::yaml::Input::preflightFlowElement(llvm::yaml::Input *this, unsigned int a2, void **a3)
{
  _QWORD *v3;

  if (*((_DWORD *)this + 26))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v3 || *(_DWORD *)(v3[1] + 32) != 5)
    return 0;
  *a3 = v3;
  *((_QWORD *)this + 37) = *(_QWORD *)(v3[2] + 8 * a2);
  return 1;
}

uint64_t llvm::yaml::Input::postflightFlowElement(uint64_t this, void *a2)
{
  *(_QWORD *)(this + 296) = a2;
  return this;
}

uint64_t llvm::yaml::Input::beginEnumScalar(uint64_t this)
{
  *(_BYTE *)(this + 304) = 0;
  return this;
}

uint64_t llvm::yaml::Input::matchEnumScalar(llvm::yaml::Input *this, const char *__s)
{
  _QWORD *v3;
  size_t v6;
  const void *v7;
  uint64_t result;

  if (*((_BYTE *)this + 304))
    return 0;
  v3 = (_QWORD *)*((_QWORD *)this + 37);
  if (!v3 || (*(_DWORD *)(v3[1] + 32) - 3) < 0xFFFFFFFE)
    return 0;
  v6 = v3[3];
  if (__s)
  {
    v7 = (const void *)v3[2];
    if (v6 == strlen(__s) && (!v6 || !memcmp(v7, __s, v6)))
      goto LABEL_11;
  }
  else if (!v6)
  {
LABEL_11:
    result = 1;
    *((_BYTE *)this + 304) = 1;
    return result;
  }
  return 0;
}

BOOL llvm::yaml::Input::matchEnumFallback(llvm::yaml::Input *this)
{
  int v1;

  v1 = *((unsigned __int8 *)this + 304);
  if (!*((_BYTE *)this + 304))
    *((_BYTE *)this + 304) = 1;
  return v1 == 0;
}

const std::error_category *llvm::yaml::Input::endEnumScalar(const std::error_category *this)
{
  const std::error_category *v1;
  std::error_category_vtbl *v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  if (!LOBYTE(this[38].__vftable))
  {
    v1 = this;
    v2 = this[37].__vftable;
    v3 = (llvm::formatv_object_base *)"unknown enumerated scalar";
    v4 = 259;
    llvm::yaml::Stream::printError((llvm *)this[11].__vftable, (uint64_t)v2->~error_category_0, &v3, 0);
    this = std::generic_category();
    v1[13].__vftable = (std::error_category_vtbl *)22;
    v1[14].__vftable = (std::error_category_vtbl *)this;
  }
  return this;
}

uint64_t llvm::yaml::Input::beginBitSetScalar(llvm::yaml::Input *this, BOOL *a2)
{
  _QWORD *v4;
  uint64_t v5;
  BOOL v6;
  const std::error_category *v7;
  llvm::formatv_object_base *v9;
  __int16 v10;

  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 58) = 0;
  v4 = (_QWORD *)*((_QWORD *)this + 37);
  v5 = v4[1];
  if (v4)
    v6 = *(_DWORD *)(v5 + 32) == 5;
  else
    v6 = 0;
  if (v6)
  {
    llvm::BitVector::resize((unsigned int *)this + 56, (v4[3] - v4[2]) >> 3, 0);
  }
  else
  {
    v9 = (llvm::formatv_object_base *)"expected sequence of bit values";
    v10 = 259;
    llvm::yaml::Stream::printError(*((llvm **)this + 11), v5, &v9, 0);
    v7 = std::generic_category();
    *((_QWORD *)this + 13) = 22;
    *((_QWORD *)this + 14) = v7;
  }
  *a2 = 1;
  return 1;
}

unsigned int *llvm::BitVector::resize(unsigned int *this, unsigned int a2, uint64_t a3)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = this;
  if ((this[16] & 0x3F) != 0)
  {
    v4 = -1 << (this[16] & 0x3F);
    v5 = this[2];
    v6 = *(_QWORD *)this + 8 * v5;
    if ((_DWORD)a3)
      v7 = *(_QWORD *)(v6 - 8) | v4;
    else
      v7 = *(_QWORD *)(v6 - 8) & ~v4;
    *(_QWORD *)(v6 - 8) = v7;
  }
  else
  {
    v5 = this[2];
  }
  this[16] = a2;
  if ((_DWORD)v5 != (a2 + 63) >> 6)
  {
    v8 = (a2 + 63) >> 6;
    if (v5 <= v8)
    {
      this = llvm::SmallVectorImpl<unsigned long>::append(this, v8 - v5, a3 << 63 >> 63);
      a2 = v3[16];
    }
    else
    {
      this[2] = v8;
    }
  }
  if ((a2 & 0x3F) != 0)
  {
    v9 = *(_QWORD *)v3 + 8 * v3[2];
    *(_QWORD *)(v9 - 8) &= ~(-1 << (a2 & 0x3F));
  }
  return this;
}

uint64_t llvm::yaml::Input::bitSetMatch(llvm::yaml::Input *this, const char *__s)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  const std::error_category *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int i;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  const std::error_category *v15;
  size_t v16;
  const void *v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;

  if (*((_DWORD *)this + 26))
    return 0;
  v5 = (_QWORD *)*((_QWORD *)this + 37);
  v6 = v5[1];
  if (v5)
    v7 = *(_DWORD *)(v6 + 32) == 5;
  else
    v7 = 0;
  if (!v7)
  {
    v18[0] = (llvm::formatv_object_base *)"expected sequence of bit values";
    v19 = 259;
    llvm::yaml::Stream::printError(*((llvm **)this + 11), v6, v18, 0);
    v8 = std::generic_category();
    result = 0;
    *((_QWORD *)this + 13) = 22;
    *((_QWORD *)this + 14) = v8;
    return result;
  }
  v9 = (uint64_t *)v5[2];
  v10 = (uint64_t *)v5[3];
  if (v9 == v10)
    return 0;
  for (i = 0; ; ++i)
  {
    v12 = *v9;
    if (*v9)
      v13 = (*(_DWORD *)(*(_QWORD *)(*v9 + 8) + 32) - 3) >= 0xFFFFFFFE;
    else
      v13 = 0;
    if (!v13)
    {
      v14 = *((_QWORD *)this + 37);
      v18[0] = (llvm::formatv_object_base *)"unexpected scalar in sequence of bit values";
      v19 = 259;
      llvm::yaml::Stream::printError(*((llvm **)this + 11), *(_QWORD *)(v14 + 8), v18, 0);
      v15 = std::generic_category();
      *((_QWORD *)this + 13) = 22;
      *((_QWORD *)this + 14) = v15;
      goto LABEL_21;
    }
    v16 = *(_QWORD *)(v12 + 24);
    if (__s)
      break;
    if (!v16)
      goto LABEL_23;
LABEL_21:
    if (++v9 == v10)
      return 0;
  }
  v17 = *(const void **)(v12 + 16);
  if (v16 != strlen(__s) || v16 && memcmp(v17, __s, v16))
    goto LABEL_21;
LABEL_23:
  result = 1;
  *(_QWORD *)(*((_QWORD *)this + 28) + 8 * (i >> 6)) |= 1 << i;
  return result;
}

const std::error_category *llvm::yaml::Input::endBitSetScalar(const std::error_category *this)
{
  const std::error_category *v1;
  std::error_category_vtbl *v2;
  const char *(__cdecl *name)(const std::error_category *__hidden);
  const char *(__cdecl *v5)(const std::error_category *__hidden);
  const char *(__cdecl **p_name)(const std::error_category *__hidden);
  uint64_t v7;
  std::error_category_vtbl *v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  llvm::formatv_object_base *v14;
  __int16 v15;

  if (!LODWORD(this[13].__vftable))
  {
    v1 = this;
    v2 = this[37].__vftable;
    if (v2 && *((_DWORD *)v2->~error_category_0 + 8) == 5)
    {
      p_name = &v2->name;
      name = v2->name;
      v5 = p_name[1];
      v7 = (char *)v5 - (char *)name;
      if (v5 != name)
      {
        v8 = this[28].__vftable;
        if (((uint64_t)v8->~error_category & 1) != 0)
        {
          v10 = v7 >> 3;
          v11 = 1;
          while (v10 > v11)
          {
            v9 = v11;
            v12 = *((_QWORD *)&v8->~error_category + (v11++ >> 6));
            if (((v12 >> v9) & 1) == 0)
              goto LABEL_13;
          }
        }
        else
        {
          v9 = 0;
LABEL_13:
          v13 = *((_QWORD *)name + v9);
          v14 = (llvm::formatv_object_base *)"unknown bit value";
          v15 = 259;
          llvm::yaml::Stream::printError((llvm *)this[11].__vftable, *(_QWORD *)(v13 + 8), &v14, 0);
          this = std::generic_category();
          v1[13].__vftable = (std::error_category_vtbl *)22;
          v1[14].__vftable = (std::error_category_vtbl *)this;
        }
      }
    }
  }
  return this;
}

__n128 llvm::yaml::Input::scalarString(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  uint64_t v4;
  BOOL v5;
  const std::error_category *v7;
  __n128 result;
  llvm::formatv_object_base *v9;
  __int16 v10;

  v3 = *(__n128 **)(a1 + 296);
  v4 = v3->n128_i64[1];
  if (v3)
    v5 = (*(_DWORD *)(v4 + 32) - 3) >= 0xFFFFFFFE;
  else
    v5 = 0;
  if (v5)
  {
    result = v3[1];
    *a2 = result;
  }
  else
  {
    v9 = (llvm::formatv_object_base *)"unexpected scalar";
    v10 = 259;
    llvm::yaml::Stream::printError(*(llvm **)(a1 + 88), v4, &v9, 0);
    v7 = std::generic_category();
    *(_QWORD *)(a1 + 104) = 22;
    *(_QWORD *)(a1 + 112) = v7;
  }
  return result;
}

uint64_t llvm::yaml::Input::blockScalarString(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 216))(a1, a2, 0);
}

double llvm::yaml::Input::scalarTag(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;

  llvm::yaml::Node::getVerbatimTag(*(llvm::yaml::Node **)(*(_QWORD *)(a1 + 296) + 8), (uint64_t)&v4);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

uint64_t llvm::yaml::Input::getNodeKind(llvm::yaml::Input *this)
{
  int v1;
  unsigned int v2;
  unsigned int v3;

  v1 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 37) + 8) + 32);
  v2 = v1 - 1;
  if (v1 == 4)
    v3 = 1;
  else
    v3 = 2;
  if (v2 >= 2)
    return v3;
  else
    return 0;
}

const std::error_category *llvm::yaml::Input::setError(llvm **this, llvm::formatv_object_base **a2)
{
  const std::error_category *result;

  llvm::yaml::Stream::printError(this[11], *((_QWORD *)this[37] + 1), a2, 0);
  result = std::generic_category();
  this[13] = (llvm *)22;
  this[14] = (llvm *)result;
  return result;
}

uint64_t llvm::yaml::Input::setAllowUnknownKeys(uint64_t this, char a2)
{
  *(_BYTE *)(this + 305) = a2;
  return this;
}

uint64_t llvm::yaml::Input::canElideEmptySequence(llvm::yaml::Input *this)
{
  return 0;
}

uint64_t llvm::yaml::ScalarTraits<std::string,void>::input(void *__src, size_t __len, uint64_t a3, uint64_t a4)
{
  __int128 __dst;
  uint64_t v7;

  if (__src)
  {
    std::string::basic_string[abi:nn180100](&__dst, __src, __len);
  }
  else
  {
    __dst = 0uLL;
    v7 = 0;
  }
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = __dst;
  *(_QWORD *)(a4 + 16) = v7;
  return 0;
}

const char *llvm::yaml::ScalarTraits<unsigned int,void>::input(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  char v5;
  const char *result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = a1;
  v9 = a2;
  v5 = llvm::consumeUnsignedInteger((llvm *)&v8, 0, &v7, a4);
  result = "invalid number";
  if ((v5 & 1) == 0 && !v9)
  {
    if (HIDWORD(v7))
    {
      return "out of range number";
    }
    else
    {
      result = 0;
      *(_DWORD *)a4 = v7;
    }
  }
  return result;
}

void llvm::yaml::Input::EmptyHNode::~EmptyHNode(llvm::yaml::Input::EmptyHNode *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::yaml::Input::ScalarHNode::~ScalarHNode(llvm::yaml::Input::ScalarHNode *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::yaml::Input::MapHNode::~MapHNode(char **this)
{
  char *v1;

  *this = (char *)&off_251C138D8;
  v1 = (char *)(this + 2);
  llvm::SmallVector<std::string,2u>::~SmallVector(this + 5);
  llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::~StringMap((uint64_t)v1);
}

{
  char *v1;

  *this = (char *)&off_251C138D8;
  v1 = (char *)(this + 2);
  llvm::SmallVector<std::string,2u>::~SmallVector(this + 5);
  llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::~StringMap((uint64_t)v1);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::yaml::Input::SequenceHNode::~SequenceHNode(llvm::yaml::Input::SequenceHNode *this)
{
  void **v1;

  *(_QWORD *)this = &off_251C13900;
  v1 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<llvm::yaml::Input::HNode>>::__destroy_vector::operator()[abi:nn180100](&v1);
}

{
  void **v1;

  *(_QWORD *)this = &off_251C13900;
  v1 = (void **)((char *)this + 16);
  std::vector<std::unique_ptr<llvm::yaml::Input::HNode>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x24BD1B3A4);
}

unsigned int *llvm::SmallVectorImpl<unsigned long>::append(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v5 = result;
  v6 = result[2];
  if (v6 + a2 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, result + 4, v6 + a2, 8);
    v6 = v5[2];
    if (!a2)
      goto LABEL_5;
  }
  else if (!a2)
  {
    goto LABEL_5;
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 8 * v6);
  v8 = a2;
  do
  {
    *v7++ = a3;
    --v8;
  }
  while (v8);
LABEL_5:
  v5[2] = v6 + a2;
  return result;
}

uint64_t llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          v7 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
          MEMORY[0x24BD1B398](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void std::vector<std::unique_ptr<llvm::yaml::Input::HNode>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

llvm::yaml::Stream *std::unique_ptr<llvm::yaml::Stream>::reset[abi:nn180100](llvm::yaml::Stream **a1, llvm::yaml::Stream *a2)
{
  llvm::yaml::Stream *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::yaml::Stream::~Stream(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

unint64_t **llvm::StringMap<std::pair<std::unique_ptr<llvm::yaml::Input::HNode>,llvm::SMRange>,llvm::MallocAllocator>::try_emplace<>(llvm::StringMapImpl *a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t **i;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v11;
  unint64_t *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor(a1, a2, a3);
  i = (unint64_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (unint64_t *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v8)
  {
    while (!v8 || v8 == (unint64_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = operator new(a3 + 33, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = (char *)(v11 + 4);
  if (a3)
    memcpy(v11 + 4, a2, a3);
  v13[a3] = 0;
  *v12 = a3;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = 0;
  *i = v12;
  ++*((_DWORD *)a1 + 3);
  for (i = (unint64_t **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

uint64_t std::__find_impl[abi:nn180100]<std::string *,std::string *,llvm::StringRef,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;
  int v7;
  BOOL v8;
  const void *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8);
    while (1)
    {
      v7 = *(char *)(v3 + 23);
      v8 = v7 < 0;
      v9 = v7 >= 0 ? (const void *)v3 : *(const void **)v3;
      v10 = *(unsigned __int8 *)(v3 + 23);
      if (v8)
        v10 = *(_QWORD *)(v3 + 8);
      if (v10 == v6 && (!v6 || !memcmp(v9, v5, v6)))
        break;
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

uint64_t llvm::format_object<unsigned int>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

uint64_t llvm::raw_ostream::preferred_buffer_size(llvm::raw_ostream *this)
{
  return 1024;
}

_QWORD *llvm::raw_ostream::SetBuffered(llvm::raw_ostream *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)this + 88))(this);
  if (v2)
    return (_QWORD *)llvm::raw_ostream::SetBufferSize(this, v2);
  else
    return llvm::raw_ostream::SetUnbuffered(this);
}

llvm::raw_ostream *llvm::raw_ostream::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  unint64_t v4;
  int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  char *v12;
  __int128 v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)a1 + 3) - *((_QWORD *)a1 + 4);
  if (v4 < 4)
  {
    v7 = 127;
  }
  else
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    if (v5 < v4)
      v6 = v5;
    else
      v6 = v5 + 1;
    if (v5 >= 0)
      v7 = v6;
    else
      v7 = (2 * v4);
    if (v4 >= v7)
    {
      *((_QWORD *)a1 + 4) += v7;
      return a1;
    }
  }
  v12 = (char *)v14;
  v13 = xmmword_24AA2AC90;
  do
  {
    v8 = v7;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v12, v7);
    v9 = (*(uint64_t (**)(uint64_t, char *, unint64_t))(*(_QWORD *)a2 + 8))(a2, v12, v8);
    if (v9 < v8)
      v10 = v9;
    else
      v10 = v9 + 1;
    if (v9 >= 0)
      v7 = v10;
    else
      v7 = (2 * v8);
  }
  while (v8 < v7);
  llvm::raw_ostream::write(a1, v12, v7);
  if (v12 != (char *)v14)
    free(v12);
  return a1;
}

{
  int v4;
  BOOL v5;
  int v6;
  BOOL v7;
  BOOL v8;
  int v9;
  size_t v10;
  size_t v11;
  void (**v13)(llvm::raw_ostream *__hidden);
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char **v21;
  char *v22;
  size_t __n[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a2 + 20))
  {
    v4 = *(unsigned __int8 *)(a2 + 22);
    if (*(_BYTE *)(a2 + 22))
      v5 = *(_BYTE *)(a2 + 21) == 0;
    else
      v5 = 0;
    if (v5)
      v6 = 3;
    else
      v6 = 1;
    if (*(_BYTE *)(a2 + 21))
      v7 = v4 == 0;
    else
      v7 = 0;
    if (v7)
      v6 = 0;
    if (*(_BYTE *)(a2 + 21))
      v8 = v4 == 0;
    else
      v8 = 1;
    if (v8)
      v9 = v6;
    else
      v9 = 2;
    llvm::write_hex(a1, *(_QWORD *)a2, v9, *(unsigned int *)(a2 + 16), 1);
  }
  else
  {
    v21 = &v22;
    v22 = (char *)v24;
    *(_OWORD *)__n = xmmword_24AA2D860;
    v14 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 1;
    v16 = 0;
    v17 = 0;
    v15 = 0;
    v13 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    llvm::raw_ostream::SetUnbuffered(&v13);
    llvm::write_integer((llvm::raw_ostream *)&v13, *(_QWORD *)(a2 + 8), 0, 0);
    v10 = __n[0];
    v11 = *(unsigned int *)(a2 + 16);
    if (__n[0] < v11)
    {
      llvm::raw_ostream::indent(a1, (v11 - LODWORD(__n[0])));
      v10 = __n[0];
    }
    llvm::raw_ostream::write(a1, v22, v10);
    v13 = off_251C13948;
    if (v20 == 1 && v15)
      MEMORY[0x24BD1B380](v15, 0x1000C8077774924);
    if (v22 != (char *)v24)
      free(v22);
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::write_escaped(llvm::raw_ostream *result, char *a2, uint64_t a3, int a4)
{
  uint64_t i;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  char v18;
  _BYTE *v19;
  unsigned int v20;
  _BYTE *v21;
  char v22;
  char *v23;
  unsigned int v24;
  _BYTE *v25;
  char *v26;

  if (a3)
  {
    for (i = a3; i; --i)
    {
      v7 = *a2;
      if (*a2 > 0x21u)
      {
        if ((_DWORD)v7 == 34)
        {
          v11 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v11 >= *((_QWORD *)result + 3))
          {
            result = llvm::raw_ostream::write(result, 92);
          }
          else
          {
            *((_QWORD *)result + 4) = v11 + 1;
            *v11 = 92;
          }
          v17 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v17 >= *((_QWORD *)result + 3))
          {
            v18 = 34;
            goto LABEL_59;
          }
          *((_QWORD *)result + 4) = v17 + 1;
          *v17 = 34;
        }
        else
        {
          if ((_DWORD)v7 != 92)
          {
LABEL_16:
            v13 = *((_QWORD *)result + 3);
            v12 = (_BYTE *)*((_QWORD *)result + 4);
            if ((v7 - 32) > 0x5E)
            {
              if (a4)
              {
                if ((unint64_t)v12 >= v13)
                {
                  result = llvm::raw_ostream::write(result, 92);
                }
                else
                {
                  *((_QWORD *)result + 4) = v12 + 1;
                  *v12 = 92;
                }
                v19 = (_BYTE *)*((_QWORD *)result + 4);
                if ((unint64_t)v19 >= *((_QWORD *)result + 3))
                {
                  result = llvm::raw_ostream::write(result, 120);
                }
                else
                {
                  *((_QWORD *)result + 4) = v19 + 1;
                  *v19 = 120;
                }
                v22 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 >> 4];
                v23 = (char *)*((_QWORD *)result + 4);
                if ((unint64_t)v23 >= *((_QWORD *)result + 3))
                {
                  result = llvm::raw_ostream::write(result, v22);
                }
                else
                {
                  *((_QWORD *)result + 4) = v23 + 1;
                  *v23 = v22;
                }
                v18 = llvm::hexdigit(unsigned int,BOOL)::LUT[v7 & 0xF];
              }
              else
              {
                if ((unint64_t)v12 >= v13)
                {
                  result = llvm::raw_ostream::write(result, 92);
                }
                else
                {
                  *((_QWORD *)result + 4) = v12 + 1;
                  *v12 = 92;
                }
                v20 = (v7 >> 6) | 0x30;
                v21 = (_BYTE *)*((_QWORD *)result + 4);
                if ((unint64_t)v21 >= *((_QWORD *)result + 3))
                {
                  result = llvm::raw_ostream::write(result, v20);
                }
                else
                {
                  *((_QWORD *)result + 4) = v21 + 1;
                  *v21 = v20;
                }
                v24 = (v7 >> 3) & 7 | 0x30;
                v25 = (_BYTE *)*((_QWORD *)result + 4);
                if ((unint64_t)v25 >= *((_QWORD *)result + 3))
                {
                  result = llvm::raw_ostream::write(result, v24);
                }
                else
                {
                  *((_QWORD *)result + 4) = v25 + 1;
                  *v25 = v24;
                }
                v18 = v7 & 7 | 0x30;
              }
              v26 = (char *)*((_QWORD *)result + 4);
              if ((unint64_t)v26 >= *((_QWORD *)result + 3))
                goto LABEL_59;
              *((_QWORD *)result + 4) = v26 + 1;
              *v26 = v18;
            }
            else
            {
              if ((unint64_t)v12 >= v13)
              {
                v18 = *a2;
                goto LABEL_59;
              }
              *((_QWORD *)result + 4) = v12 + 1;
              *v12 = v7;
            }
            goto LABEL_60;
          }
          v9 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v9 >= *((_QWORD *)result + 3))
          {
            result = llvm::raw_ostream::write(result, 92);
          }
          else
          {
            *((_QWORD *)result + 4) = v9 + 1;
            *v9 = 92;
          }
          v15 = (_BYTE *)*((_QWORD *)result + 4);
          if ((unint64_t)v15 >= *((_QWORD *)result + 3))
          {
            v18 = 92;
            goto LABEL_59;
          }
          *((_QWORD *)result + 4) = v15 + 1;
          *v15 = 92;
        }
      }
      else if ((_DWORD)v7 == 9)
      {
        v10 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v10 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 92);
        }
        else
        {
          *((_QWORD *)result + 4) = v10 + 1;
          *v10 = 92;
        }
        v16 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v16 >= *((_QWORD *)result + 3))
        {
          v18 = 116;
          goto LABEL_59;
        }
        *((_QWORD *)result + 4) = v16 + 1;
        *v16 = 116;
      }
      else
      {
        if ((_DWORD)v7 != 10)
          goto LABEL_16;
        v8 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v8 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 92);
        }
        else
        {
          *((_QWORD *)result + 4) = v8 + 1;
          *v8 = 92;
        }
        v14 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v14 >= *((_QWORD *)result + 3))
        {
          v18 = 110;
LABEL_59:
          result = llvm::raw_ostream::write(result, v18);
          goto LABEL_60;
        }
        *((_QWORD *)result + 4) = v14 + 1;
        *v14 = 110;
      }
LABEL_60:
      ++a2;
    }
  }
  return result;
}

uint64_t llvm::raw_ostream::flush_nonempty(llvm::raw_ostream *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *((_QWORD *)this + 4);
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 4) = v3;
  v4 = (_QWORD *)*((_QWORD *)this + 6);
  if (v4)
    llvm::raw_ostream::flush(v4);
  return (*(uint64_t (**)(llvm::raw_ostream *, uint64_t, uint64_t))(*(_QWORD *)this + 72))(this, v3, v2 - v3);
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, char a2)
{
  _BYTE *i;
  unint64_t v5;
  _QWORD *v7;
  char v8;

  v5 = *((_QWORD *)this + 3);
  for (i = (_BYTE *)*((_QWORD *)this + 4); ; i = (_BYTE *)*((_QWORD *)this + 4))
  {
    if ((unint64_t)i < v5)
      goto LABEL_7;
    if (*((_QWORD *)this + 2))
    {
      llvm::raw_ostream::flush_nonempty(this);
      i = (_BYTE *)*((_QWORD *)this + 4);
LABEL_7:
      *((_QWORD *)this + 4) = i + 1;
      *i = a2;
      return this;
    }
    if (!*((_DWORD *)this + 14))
      break;
    llvm::raw_ostream::SetBuffered(this);
    v5 = *((_QWORD *)this + 3);
  }
  v8 = a2;
  v7 = (_QWORD *)*((_QWORD *)this + 6);
  if (v7)
    llvm::raw_ostream::flush(v7);
  (*(void (**)(llvm::raw_ostream *, char *, uint64_t))(*(_QWORD *)this + 72))(this, &v8, 1);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::write(llvm::raw_ostream *this, const char *a2, size_t __n)
{
  size_t v3;
  uint64_t v6;
  size_t v7;
  void **v8;
  const char *v9;
  _QWORD *v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;

  v3 = __n;
  v6 = *((_QWORD *)this + 4);
  v7 = *((_QWORD *)this + 3) - v6;
  if (v7 < __n)
  {
    while (1)
    {
      while (1)
      {
        v13 = *((_QWORD *)this + 2);
        if (!v13)
          break;
        if (v6 == v13)
        {
          v11 = (_QWORD *)*((_QWORD *)this + 6);
          if (v11)
            llvm::raw_ostream::flush(v11);
          v7 *= v3 / v7;
          v3 -= v7;
          (*(void (**)(llvm::raw_ostream *, const char *, size_t))(*(_QWORD *)this + 72))(this, a2, v7);
          v6 = *((_QWORD *)this + 4);
          v12 = *((_QWORD *)this + 3) - v6;
          if (v3 <= v12)
          {
            v9 = &a2[v7];
            v8 = (void **)this;
            goto LABEL_3;
          }
        }
        else
        {
          llvm::raw_ostream::copy_to_buffer((void **)this, a2, v7);
          llvm::raw_ostream::flush_nonempty(this);
          v3 -= v7;
          v6 = *((_QWORD *)this + 4);
          v12 = *((_QWORD *)this + 3) - v6;
        }
        a2 += v7;
        v7 = v12;
        if (v12 >= v3)
          goto LABEL_2;
      }
      if (!*((_DWORD *)this + 14))
        break;
      llvm::raw_ostream::SetBuffered(this);
      v6 = *((_QWORD *)this + 4);
      v7 = *((_QWORD *)this + 3) - v6;
      if (v7 >= v3)
        goto LABEL_2;
    }
    v14 = (_QWORD *)*((_QWORD *)this + 6);
    if (v14)
      llvm::raw_ostream::flush(v14);
    (*(void (**)(llvm::raw_ostream *, const char *, size_t))(*(_QWORD *)this + 72))(this, a2, v3);
  }
  else
  {
LABEL_2:
    v8 = (void **)this;
    v9 = a2;
LABEL_3:
    llvm::raw_ostream::copy_to_buffer(v8, v9, v3);
  }
  return this;
}

void **llvm::raw_ostream::copy_to_buffer(void **this, const char *a2, size_t __n)
{
  void **v4;

  v4 = this;
  switch(__n)
  {
    case 0uLL:
      break;
    case 1uLL:
      goto LABEL_5;
    case 2uLL:
      goto LABEL_4;
    case 3uLL:
      goto LABEL_3;
    case 4uLL:
      *((_BYTE *)this[4] + 3) = a2[3];
LABEL_3:
      *((_BYTE *)this[4] + 2) = a2[2];
LABEL_4:
      *((_BYTE *)this[4] + 1) = a2[1];
LABEL_5:
      *(_BYTE *)this[4] = *a2;
      break;
    default:
      this = (void **)memcpy(this[4], a2, __n);
      break;
  }
  v4[4] = (char *)v4[4] + __n;
  return this;
}

_QWORD *llvm::raw_ostream::flush(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  llvm::raw_ostream *v5;

  v1 = this[4];
  v2 = this[2];
  v3 = v1 - v2;
  if (v1 != v2)
  {
    v4 = (uint64_t)this;
    this[4] = v2;
    v5 = (llvm::raw_ostream *)this[6];
    if (v5)
      llvm::raw_ostream::flush(v5);
    return (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, v2, v3);
  }
  return this;
}

void llvm::formatv_object_base::format(llvm::formatv_object_base *this, llvm::raw_ostream *a2)
{
  uint64_t *v4;
  unint64_t v5;
  char *v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unint64_t v16;
  llvm::raw_ostream *v17;
  int v18;
  const char *v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  char v23;
  void (**v24)(llvm::raw_ostream *__hidden);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  void **v32;
  void *v33;
  unsigned int v34;
  uint64_t v35;
  char *v36;
  __int128 v37;
  _QWORD v38[10];

  v38[8] = *MEMORY[0x24BDAC8D0];
  llvm::formatv_object_base::parseFormatString(*(_BYTE **)this, *((_QWORD *)this + 1), &v33);
  v4 = (uint64_t *)v33;
  if (!v34)
    goto LABEL_25;
  v5 = (unint64_t)v34 << 6;
  v6 = (char *)v33 + 32;
  do
  {
    v7 = *((_DWORD *)v6 - 8);
    if (!v7)
      goto LABEL_12;
    if (v7 == 2 || (v8 = *((_QWORD *)v6 - 1), v8 >= *((_QWORD *)this + 3)))
    {
      llvm::raw_ostream::operator<<(a2, *((const void **)v6 - 3), *((_QWORD *)v6 - 2));
      goto LABEL_12;
    }
    v9 = *(_QWORD *)(*((_QWORD *)this + 2) + 8 * v8);
    v10 = *((_DWORD *)v6 + 2);
    v11 = *(_QWORD *)v6;
    v12 = v6[12];
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v14 = *((_QWORD *)v6 + 2);
    v13 = *((_QWORD *)v6 + 3);
    if (!v11)
    {
      (*(void (**)(uint64_t, llvm::raw_ostream *, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, v14, v13);
      goto LABEL_12;
    }
    v36 = (char *)v38;
    v37 = xmmword_24AA2B2D0;
    v25 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 1;
    v27 = 0;
    v28 = 0;
    v26 = 0;
    v24 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13B38;
    v32 = (void **)&v36;
    llvm::raw_ostream::SetUnbuffered(&v24);
    (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden), uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, &v24, v14, v13);
    v15 = v37;
    v16 = v11 - v37;
    if (v11 <= (unint64_t)v37)
    {
      v19 = v36;
    }
    else
    {
      if (v10 == 1)
      {
        llvm::FmtAlign::fill((llvm::raw_ostream *)&v20, a2, v16 >> 1);
        llvm::raw_ostream::write(a2, v36, v37);
        v18 = v16 - (v16 >> 1);
        v17 = a2;
        goto LABEL_17;
      }
      if (!v10)
      {
        llvm::raw_ostream::write(a2, v36, v37);
        v17 = a2;
        v18 = v16;
LABEL_17:
        llvm::FmtAlign::fill((llvm::raw_ostream *)&v20, v17, v18);
        goto LABEL_20;
      }
      llvm::FmtAlign::fill((llvm::raw_ostream *)&v20, a2, v11 - v37);
      v19 = v36;
      v15 = v37;
    }
    llvm::raw_ostream::write(a2, v19, v15);
LABEL_20:
    v24 = off_251C13948;
    if (v31 == 1 && v26)
      MEMORY[0x24BD1B380](v26, 0x1000C8077774924);
    if (v36 != (char *)v38)
      free(v36);
LABEL_12:
    v6 += 64;
    v5 -= 64;
  }
  while (v5);
  v4 = (uint64_t *)v33;
LABEL_25:
  if (v4 != &v35)
    free(v4);
}

llvm::raw_ostream *llvm::raw_ostream::indent(llvm::raw_ostream *this, size_t __n)
{
  unsigned int v2;
  size_t v3;

  v2 = __n;
  if (__n < 0x50)
    return llvm::raw_ostream::write(this, "                                                                                ", __n);
  do
  {
    if (v2 >= 0x4F)
      v3 = 79;
    else
      v3 = v2;
    this = llvm::raw_ostream::write(this, "                                                                                ", v3);
    v2 -= v3;
  }
  while (v2);
  return this;
}

void llvm::raw_svector_ostream::~raw_svector_ostream(llvm::raw_svector_ostream *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x24BD1B380](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x24BD1B380](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::raw_ostream::changeColor(llvm::raw_ostream *a1, int a2, int a3, int a4)
{
  const char *v5;
  size_t v6;

  if (*((_BYTE *)a1 + 40))
  {
    if (a2 == 8)
      v5 = "\x1B[1m";
    else
      v5 = &colorcodes[160 * a4 + 80 * a3 + 10 * (a2 & 7)];
    v6 = strlen(v5);
    llvm::raw_ostream::write(a1, v5, v6);
  }
  return a1;
}

llvm::raw_ostream *llvm::raw_ostream::resetColor(llvm::raw_ostream *this)
{
  if (*((_BYTE *)this + 40))
    return llvm::raw_ostream::write(this, "\x1B[0m", 4uLL);
  return this;
}

llvm::raw_ostream *llvm::raw_ostream::reverseColor(llvm::raw_ostream *this)
{
  if (*((_BYTE *)this + 40))
    return llvm::raw_ostream::write(this, "\x1B[7m", 4uLL);
  return this;
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, int a5)
{
  int FD;

  FD = getFD(a2, a3, a4, 0, 2, a5);
  return llvm::raw_fd_ostream::raw_fd_ostream(a1, FD, 1, 0, 0);
}

uint64_t getFD(_BYTE *a1, uint64_t a2, uint64_t a3, int a4, char a5, int a6)
{
  const std::error_category *v7;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  unsigned int v15;

  if (a2 == 1 && *a1 == 45)
  {
    v7 = std::system_category();
    *(_DWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v7;
    std::system_category();
    return 1;
  }
  else
  {
    v15 = 0;
    v14 = 261;
    v13[0] = a1;
    v13[1] = a2;
    if ((a5 & 1) != 0)
      v10 = 3;
    else
      v10 = 2;
    v11 = llvm::sys::fs::openFile((uint64_t)v13, (int *)&v15, a4, v10, a6, 438);
    *(_QWORD *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    if ((_DWORD)v11)
      return 0xFFFFFFFFLL;
    else
      return v15;
  }
}

uint64_t llvm::raw_fd_ostream::raw_fd_ostream(uint64_t a1, int a2, char a3, int a4, int a5)
{
  int v6;
  off_t v7;
  int v8;
  int v9;
  off_t v10;
  _OWORD v12[4];
  stat v13;

  *(_DWORD *)(a1 + 8) = a5;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_251C139C0;
  *(_DWORD *)(a1 + 56) = a4 ^ 1;
  *(_DWORD *)(a1 + 60) = a2;
  *(_BYTE *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 65) = 0;
  *(_QWORD *)(a1 + 80) = std::system_category();
  *(_QWORD *)(a1 + 88) = 0;
  if ((*(_DWORD *)(a1 + 60) & 0x80000000) != 0)
  {
    *(_BYTE *)(a1 + 64) = 0;
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 1);
    v6 = *(_DWORD *)(a1 + 60);
    if (v6 <= 2)
      *(_BYTE *)(a1 + 64) = 0;
    v7 = lseek(v6, 0, 1);
    memset(v12, 0, 44);
    v8 = fstat(*(_DWORD *)(a1 + 60), &v13);
    v9 = llvm::sys::fs::fillStatus(v8, &v13.st_dev, (uint64_t)v12);
    *(_BYTE *)(a1 + 66) = DWORD2(v12[2]) == 2;
    *(_BYTE *)(a1 + 65) = v9 == 0 && v7 != -1;
    if (v9 == 0 && v7 != -1)
      v10 = v7;
    else
      v10 = 0;
    *(_QWORD *)(a1 + 88) = v10;
  }
  return a1;
}

void llvm::raw_fd_ostream::~raw_fd_ostream(llvm::raw_fd_ostream *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::error_code v5;
  std::string v6;
  std::string *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  _BYTE v11[40];

  *(_QWORD *)this = &off_251C139C0;
  if ((*((_DWORD *)this + 15) & 0x80000000) == 0)
  {
    llvm::raw_ostream::flush(this);
    if (*((_BYTE *)this + 64))
    {
      v2 = llvm::sys::Process::SafelyCloseFileDescriptor((llvm::sys::Process *)*((unsigned int *)this + 15));
      if ((_DWORD)v2)
      {
        *((_QWORD *)this + 9) = v2;
        *((_QWORD *)this + 10) = v3;
      }
    }
  }
  if (*((_DWORD *)this + 18))
  {
    v9 = "IO failure on output stream: ";
    v10 = 259;
    v5 = *(std::error_code *)((char *)this + 72);
    std::error_code::message(&v6, &v5);
    v8 = 260;
    v7 = &v6;
    llvm::operator+((uint64_t *)&v9, (uint64_t *)&v7, (uint64_t)v11);
    llvm::report_fatal_error((llvm *)v11, 0);
  }
  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v4 = *((_QWORD *)this + 2);
    if (v4)
      MEMORY[0x24BD1B380](v4, 0x1000C8077774924);
  }
}

{
  llvm::raw_fd_ostream::~raw_fd_ostream(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::raw_fd_ostream::write_impl(llvm::raw_fd_ostream *this, const char *__buf, unint64_t a3)
{
  unint64_t v3;
  size_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = a3;
  *((_QWORD *)this + 11) += a3;
  while (1)
  {
    v6 = v3 >= 0x7FFFFFFF ? 0x7FFFFFFFLL : v3;
    result = write(*((_DWORD *)this + 15), __buf, v6);
    if (result < 0)
      break;
    __buf += result;
    v3 -= result;
LABEL_10:
    if (!v3)
      return result;
  }
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 4)
    goto LABEL_10;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_10;
  result = (uint64_t)__error();
  if (*(_DWORD *)result == 35)
    goto LABEL_10;
  v8 = *__error();
  result = (uint64_t)std::generic_category();
  *((_QWORD *)this + 9) = v8;
  *((_QWORD *)this + 10) = result;
  return result;
}

off_t llvm::raw_fd_ostream::seek(llvm::raw_fd_ostream *this, off_t a2)
{
  off_t result;
  uint64_t v5;
  const std::error_category *v6;

  llvm::raw_ostream::flush(this);
  result = lseek(*((_DWORD *)this + 15), a2, 0);
  *((_QWORD *)this + 11) = result;
  if (result == -1)
  {
    v5 = *__error();
    v6 = std::generic_category();
    *((_QWORD *)this + 9) = v5;
    *((_QWORD *)this + 10) = v6;
    return *((_QWORD *)this + 11);
  }
  return result;
}

off_t llvm::raw_fd_ostream::pwrite_impl(llvm::raw_fd_ostream *this, const char *a2, size_t a3, off_t a4)
{
  off_t v8;
  llvm::raw_ostream *v9;

  v8 = (*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)this + 80))(this)
     + *((_QWORD *)this + 4)
     - *((_QWORD *)this + 2);
  llvm::raw_fd_ostream::seek(this, a4);
  v9 = llvm::raw_ostream::write(this, a2, a3);
  return llvm::raw_fd_ostream::seek(v9, v8);
}

uint64_t llvm::raw_fd_ostream::preferred_buffer_size(llvm::raw_fd_ostream *this)
{
  stat v3;

  if (fstat(*((_DWORD *)this + 15), &v3)
    || (v3.st_mode & 0xF000) == 0x2000
    && ((*(uint64_t (**)(llvm::raw_fd_ostream *))(*(_QWORD *)this + 48))(this) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return v3.st_blksize;
  }
}

BOOL llvm::raw_fd_ostream::is_displayed(llvm::raw_fd_ostream *this)
{
  return isatty(*((_DWORD *)this + 15)) != 0;
}

uint64_t llvm::raw_fd_ostream::has_colors(llvm::raw_fd_ostream *this)
{
  uint64_t result;

  if (*((_BYTE *)this + 68))
    return *((_BYTE *)this + 67) != 0;
  result = llvm::sys::Process::FileDescriptorHasColors((llvm::sys::Process *)*((unsigned int *)this + 15));
  *(_WORD *)((char *)this + 67) = result | 0x100;
  return result;
}

void *llvm::outs(llvm *this)
{
  unsigned __int8 v1;
  int v3;
  const std::error_category *v4;

  v3 = 0;
  v4 = std::system_category();
  {
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&llvm::outs(void)::S, "-", 1, (uint64_t)&v3, 0);
    __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &llvm::outs(void)::S, &dword_24A800000);
  }
  return &llvm::outs(void)::S;
}

void *llvm::errs(llvm *this)
{
  unsigned __int8 v1;

  {
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&llvm::errs(void)::S, 2, 0, 1, 0);
    __cxa_atexit((void (*)(void *))llvm::raw_fd_ostream::~raw_fd_ostream, &llvm::errs(void)::S, &dword_24A800000);
  }
  return &llvm::errs(void)::S;
}

uint64_t *llvm::nulls(llvm *this)
{
  unsigned __int8 v1;

  {
    dword_2579656D0 = 0;
    byte_2579656F0 = 0;
    qword_2579656F8 = 0;
    dword_257965700 = 1;
    qword_2579656E0 = 0;
    unk_2579656E8 = 0;
    qword_2579656D8 = 0;
    llvm::nulls(void)::S = (uint64_t)&off_251C13A40;
    __cxa_atexit((void (*)(void *))llvm::raw_null_ostream::~raw_null_ostream, &llvm::nulls(void)::S, &dword_24A800000);
  }
  return &llvm::nulls(void)::S;
}

void llvm::raw_null_ostream::~raw_null_ostream(llvm::raw_null_ostream *this)
{
  uint64_t v1;

  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x24BD1B380](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;

  *(_QWORD *)this = off_251C13948;
  if (*((_DWORD *)this + 14) == 1)
  {
    v1 = *((_QWORD *)this + 2);
    if (v1)
      MEMORY[0x24BD1B380](v1, 0x1000C8077774924);
  }
  JUMPOUT(0x24BD1B3A4);
}

std::string *llvm::raw_string_ostream::write_impl(std::string **this, const char *a2, std::string::size_type a3)
{
  return std::string::append(this[8], a2, a3);
}

uint64_t llvm::raw_svector_ostream::current_pos(llvm::raw_svector_ostream *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 8);
}

_QWORD *llvm::raw_svector_ostream::write_impl(llvm::raw_svector_ostream *this, char *a2, uint64_t a3)
{
  return llvm::SmallVectorImpl<char>::append<char const*,void>(*((_QWORD **)this + 8), a2, &a2[a3]);
}

void *llvm::raw_svector_ostream::pwrite_impl(llvm::raw_svector_ostream *this, const char *a2, size_t a3, uint64_t a4)
{
  return memcpy((void *)(**((_QWORD **)this + 8) + a4), a2, a3);
}

uint64_t llvm::raw_null_ostream::current_pos(llvm::raw_null_ostream *this)
{
  return 0;
}

uint64_t llvm::raw_ostream::is_displayed(llvm::raw_ostream *this)
{
  return 0;
}

void llvm::raw_string_ostream::reserveExtraSpace(llvm::raw_string_ostream *this, uint64_t a2)
{
  std::string *v2;
  std::string::size_type v3;

  v2 = (std::string *)*((_QWORD *)this + 8);
  v3 = (*(uint64_t (**)(llvm::raw_string_ostream *))(*(_QWORD *)this + 80))(this)
     + a2
     + *((_QWORD *)this + 4)
     - *((_QWORD *)this + 2);
  std::string::reserve(v2, v3);
}

uint64_t llvm::raw_string_ostream::current_pos(llvm::raw_string_ostream *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  if (*(char *)(v1 + 23) < 0)
    return *(_QWORD *)(v1 + 8);
  else
    return *(unsigned __int8 *)(v1 + 23);
}

void *llvm::raw_svector_ostream::reserveExtraSpace(llvm::raw_svector_ostream *this, uint64_t a2)
{
  uint64_t v4;
  void *result;
  unint64_t v6;

  v4 = *((_QWORD *)this + 8);
  result = (void *)(*(uint64_t (**)(llvm::raw_svector_ostream *))(*(_QWORD *)this + 80))(this);
  v6 = (unint64_t)result + a2 + *((_QWORD *)this + 4) - *((_QWORD *)this + 2);
  if (*(_QWORD *)(v4 + 16) < v6)
    return llvm::SmallVectorBase<unsigned long long>::grow_pod(v4, (void *)(v4 + 24), v6, 1);
  return result;
}

uint64_t llvm::raw_fd_ostream::current_pos(llvm::raw_fd_ostream *this)
{
  return *((_QWORD *)this + 11);
}

llvm::raw_ostream *llvm::FmtAlign::fill(llvm::raw_ostream *this, llvm::raw_ostream *a2, int a3)
{
  int v3;
  uint64_t v5;
  char v6;
  char *v7;

  if (a3)
  {
    v3 = a3;
    v5 = (uint64_t)this;
    do
    {
      v6 = *(_BYTE *)(v5 + 24);
      v7 = (char *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)a2 + 3))
      {
        this = llvm::raw_ostream::write(a2, v6);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v7 + 1;
        *v7 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return this;
}

uint64_t llvm_regcomp(uint64_t a1, char *__s, int a3)
{
  uint64_t v3;
  uint64_t v4;
  size_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int *v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t i;
  unsigned int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  void *ptr;
  size_t v52;
  unint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;

  if ((~a3 & 0x11) == 0)
    return 16;
  v66 = v3;
  v67 = v4;
  if ((a3 & 0x20) != 0)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v9 = v10 - (_QWORD)__s;
    if (v10 < (unint64_t)__s)
      return 16;
  }
  else
  {
    v9 = strlen(__s);
  }
  v11 = malloc_type_malloc(0x18FuLL, 0xE334DFFDuLL);
  if (!v11)
    return 12;
  v12 = v11;
  v54 = 0;
  v50 = 0;
  v52 = 3 * (v9 >> 1) + 1;
  ptr = malloc_type_calloc(v52, 8uLL, 0x100004000313F17uLL);
  v53 = 0;
  if (!ptr)
  {
    free(v12);
    return 12;
  }
  v55 = v12;
  v49.n128_u64[0] = (unint64_t)__s;
  v49.n128_u64[1] = (unint64_t)&__s[v9];
  LODWORD(v50) = 0;
  LODWORD(v54) = 0;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v12[4] = 256;
  *(_QWORD *)(v12 + 5) = 0;
  v13 = v12 + 5;
  *(_QWORD *)(v12 + 7) = 0;
  *(_OWORD *)(v12 + 34) = 0u;
  *(_OWORD *)(v12 + 66) = 0u;
  v12[9] = 0;
  v12[10] = a3 & 0xFFFFFF7F;
  v12[26] = 0;
  *((_QWORD *)v12 + 14) = 0;
  *(_OWORD *)(v12 + 18) = xmmword_24AA2D8D0;
  *((_QWORD *)v12 + 11) = v12 + 66;
  *((_QWORD *)v12 + 12) = 0;
  *(_OWORD *)(v12 + 38) = 0u;
  *(_OWORD *)(v12 + 42) = 0u;
  *(_OWORD *)(v12 + 46) = 0u;
  *(_OWORD *)(v12 + 50) = 0u;
  *(_OWORD *)(v12 + 54) = 0u;
  *(_OWORD *)(v12 + 58) = 0u;
  *(_OWORD *)(v12 + 62) = 0u;
  *(_OWORD *)(v12 + 70) = 0u;
  *(_OWORD *)(v12 + 74) = 0u;
  *(_OWORD *)(v12 + 78) = 0u;
  *(_OWORD *)(v12 + 82) = 0u;
  *(_OWORD *)(v12 + 86) = 0u;
  *(_OWORD *)(v12 + 90) = 0u;
  *(_OWORD *)(v12 + 94) = 0u;
  v12[30] = 0;
  doemit((void **)&v49, 0x8000000, 0);
  *((_QWORD *)v12 + 7) = v53 - 1;
  if ((a3 & 1) != 0)
  {
    p_ere((uint64_t)&v49, 128);
  }
  else if ((a3 & 0x10) != 0)
  {
    v15 = (char *)v49.n128_u64[1];
    v14 = (char *)v49.n128_u64[0];
    if ((uint64_t)(v49.n128_u64[1] - v49.n128_u64[0]) <= 0)
    {
      if (!(_DWORD)v50)
        LODWORD(v50) = 14;
      v14 = &nuls;
      v49.n128_u64[0] = (unint64_t)&nuls;
      v49.n128_u64[1] = (unint64_t)&nuls;
      v15 = &nuls;
    }
    if (v15 - v14 >= 1)
    {
      do
      {
        v49.n128_u64[0] = (unint64_t)(v14 + 1);
        ordinary(&v49, *v14);
        v14 = (char *)v49.n128_u64[0];
      }
      while ((uint64_t)(v49.n128_u64[1] - v49.n128_u64[0]) > 0);
    }
  }
  else
  {
    p_bre((uint64_t)&v49, 128, 128);
  }
  doemit((void **)&v49, 0x8000000, 0);
  v16 = v53;
  *((_QWORD *)v12 + 8) = v53 - 1;
  if (!(_DWORD)v50)
  {
    v17 = *((_QWORD *)v12 + 11);
    for (i = -128; i != 128; ++i)
    {
      if (!*(_BYTE *)(v17 + i) && *v13 >= 1)
      {
        v19 = (*v13 + 7) >> 3;
        v20 = *((_QWORD *)v12 + 4);
        while (!*(_BYTE *)(v20 + i))
        {
          v20 += (int)v12[4];
          if (!--v19)
            goto LABEL_24;
        }
        v21 = v12[21];
        v12[21] = v21 + 1;
        *(_BYTE *)(v17 + i) = v21;
        if (i <= 126)
        {
          v22 = i;
          do
          {
            ++v22;
            if (!*(_BYTE *)(v17 + v22))
            {
              if (*v13 < 1)
              {
LABEL_38:
                *(_BYTE *)(v17 + v22) = v21;
              }
              else
              {
                v23 = (*v13 + 7) >> 3;
                v24 = *((_QWORD *)v12 + 4);
                while (*(unsigned __int8 *)(v24 + i) == *(unsigned __int8 *)(v24 + v22))
                {
                  v24 += (int)v12[4];
                  if (!--v23)
                    goto LABEL_38;
                }
              }
            }
          }
          while (v22 != 127);
        }
      }
LABEL_24:
      ;
    }
    v16 = v53;
  }
  *((_QWORD *)v12 + 6) = v16;
  if (v16 >> 61)
  {
    *((_QWORD *)v12 + 1) = ptr;
    LODWORD(v25) = v50;
    if (!(_DWORD)v50)
    {
      LODWORD(v25) = 12;
      LODWORD(v50) = 12;
    }
    v26 = 0;
    v27 = 0;
    v49.n128_u64[0] = (unint64_t)&nuls;
    v49.n128_u64[1] = (unint64_t)&nuls;
    goto LABEL_77;
  }
  v28 = (char *)malloc_type_realloc(ptr, 8 * v16, 0x100004000313F17uLL);
  *((_QWORD *)v12 + 1) = v28;
  LODWORD(v25) = v50;
  if (!v28)
  {
    if (!(_DWORD)v50)
    {
      LODWORD(v25) = 12;
      LODWORD(v50) = 12;
    }
    v26 = 0;
    v27 = 0;
    v49.n128_u64[0] = (unint64_t)&nuls;
    v49.n128_u64[1] = (unint64_t)&nuls;
    *((_QWORD *)v12 + 1) = ptr;
    goto LABEL_77;
  }
  if ((_DWORD)v50)
    goto LABEL_76;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = (uint64_t *)(v28 + 8);
  v33 = (uint64_t *)(v28 + 8);
  do
  {
    v35 = *v33++;
    LODWORD(v34) = v35;
    v36 = ((unint64_t)(v35 & 0xF8000000) - 0x10000000) >> 27;
    if (v36 > 0xD)
      goto LABEL_60;
    if (((1 << v36) & 0x1880) != 0)
      goto LABEL_63;
    if (((1 << v36) & 0x2200) != 0)
    {
      v33 = v32;
      while (1)
      {
        v33 += v34 & 0x7FFFFFF;
        v34 = *v33;
        v37 = *v33 & 0xF8000000;
        if (v37 == 1610612736)
          break;
        if ((_DWORD)v37 != -2013265920)
        {
          if ((_DWORD)v37 == -1879048192)
            break;
          v12[18] |= 4u;
          goto LABEL_75;
        }
      }
LABEL_60:
      if (v31 > (int)v12[26])
      {
        v12[26] = v31;
        v29 = v30;
      }
      v31 = 0;
      goto LABEL_63;
    }
    if (v36)
      goto LABEL_60;
    if (!v31)
      v30 = v32;
    ++v31;
LABEL_63:
    v32 = v33;
  }
  while ((v34 & 0xF8000000) != 0x8000000);
  v38 = (int)v12[26];
  if ((_DWORD)v38)
  {
    v39 = malloc_type_malloc(v38 + 1, 0x61097D62uLL);
    *((_QWORD *)v12 + 12) = v39;
    if (v39)
    {
      v40 = v12[26];
      if ((int)v40 >= 1)
      {
        do
        {
          do
          {
            v42 = *v29++;
            v41 = v42;
          }
          while ((v42 & 0xF8000000) != 0x10000000);
          *v39++ = v41;
        }
        while (v40-- > 1);
      }
      *v39 = 0;
    }
    else
    {
      v12[26] = 0;
    }
  }
LABEL_75:
  LODWORD(v25) = v50;
  if ((_DWORD)v50)
  {
LABEL_76:
    v26 = 0;
    v27 = 0;
  }
  else
  {
    v25 = 0;
    v27 = 0;
    v44 = (uint64_t *)(*((_QWORD *)v12 + 1) + 8);
    do
    {
      v45 = *v44++;
      v46 = v45 & 0xF8000000;
      if (v25 <= v27)
        v47 = v27;
      else
        v47 = v25;
      v48 = v25 - 1;
      if ((_DWORD)v46 == 1207959552)
        ++v25;
      if ((_DWORD)v46 == 1342177280)
      {
        v25 = v48;
        v27 = v47;
      }
    }
    while (v46 != 0x8000000);
    if (v25)
    {
      LODWORD(v25) = 0;
      v12[18] |= 4u;
    }
    v26 = 1;
  }
LABEL_77:
  *((_QWORD *)v12 + 16) = v27;
  *v12 = 53829;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)v12 + 14);
  *(_QWORD *)(a1 + 24) = v12;
  *(_DWORD *)a1 = 62053;
  if ((v12[18] & 4) != 0)
  {
    if (v26)
    {
      LODWORD(v25) = 15;
      LODWORD(v50) = 15;
    }
    v49.n128_u64[0] = (unint64_t)&nuls;
    v49.n128_u64[1] = (unint64_t)&nuls;
  }
  if (!(_DWORD)v25)
    return 0;
  llvm_regfree(a1);
  return v50;
}

void **doemit(void **result, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  if (!*((_DWORD *)result + 4))
  {
    v5 = result;
    v7 = (uint64_t)result[4];
    v6 = (uint64_t)result[5];
    if (v6 >= v7)
    {
      v8 = v7 + 2;
      if (v7 >= -1)
        v8 = v7 + 1;
      result = enlarge(result, (v8 & 0xFFFFFFFFFFFFFFFELL) + (v8 >> 1));
      v6 = (uint64_t)v5[5];
    }
    v9 = v5[3];
    v5[5] = (void *)(v6 + 1);
    v9[v6] = a3 | a2;
  }
  return result;
}

void p_ere(uint64_t a1, int a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  char *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int32x2_t *v25;
  int32x2_t v26;
  int32x2_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;

  v4 = 0;
  v5 = 0;
  v50 = 0;
  while (2)
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = *(char **)a1;
    v8 = *(char **)(a1 + 8);
    if ((uint64_t)&v8[-*(_QWORD *)a1] < 1)
      goto LABEL_120;
    while (1)
    {
      v9 = *v7;
      v10 = *(_QWORD *)(a1 + 40);
      if (v9 == 124 || v9 == a2)
        break;
      v12 = v7 + 1;
      *(_QWORD *)a1 = v7 + 1;
      v13 = *v7;
      if (v13 <= 62)
      {
        switch(*v7)
        {
          case '$':
            doemit((void **)a1, 0x20000000, 0);
            v14 = *(_QWORD *)(a1 + 56);
            *(_DWORD *)(v14 + 72) |= 2u;
            ++*(_DWORD *)(v14 + 80);
            goto LABEL_55;
          case '(':
            if (v8 - v12 <= 0)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 8;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
            v21 = *(_QWORD *)(a1 + 56);
            v22 = *(_QWORD *)(v21 + 112);
            v23 = v22 + 1;
            *(_QWORD *)(v21 + 112) = v22 + 1;
            if (v22 + 1 <= 9)
              *(_QWORD *)(a1 + 8 * v23 + 64) = v10;
            doemit((void **)a1, 1744830464, v22 + 1);
            if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 1 || **(_BYTE **)a1 != 41)
              p_ere(a1, 41);
            if (v23 <= 9)
              *(_QWORD *)(a1 + 8 * v23 + 144) = *(_QWORD *)(a1 + 40);
            doemit((void **)a1, 1879048192, v23);
            v24 = *(char **)a1;
            if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 1)
              goto LABEL_41;
            *(_QWORD *)a1 = v24 + 1;
            if (*v24 != 41)
              goto LABEL_41;
            goto LABEL_55;
          case ')':
LABEL_41:
            if (*(_DWORD *)(a1 + 16))
              goto LABEL_44;
            v20 = 8;
            break;
          case '*':
          case '+':
            goto LABEL_26;
          case '.':
            if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
            {
              *(_QWORD *)a1 = &v51;
              *(_QWORD *)(a1 + 8) = (char *)&v51 + 3;
              v51 = 6097502;
              p_bracket(a1);
              *(_QWORD *)a1 = v12;
              *(_QWORD *)(a1 + 8) = v8;
            }
            else
            {
              doemit((void **)a1, 671088640, 0);
            }
            goto LABEL_55;
          default:
            goto LABEL_54;
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v20;
        goto LABEL_44;
      }
      if (v13 > 93)
      {
        if (v13 != 94)
        {
          if (v13 == 123)
          {
            if (v8 - v12 >= 1 && *v12 - 48 <= 9)
            {
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 13;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
          }
          else if (v13 == 124)
          {
            if (!*(_DWORD *)(a1 + 16))
            {
              v20 = 14;
              goto LABEL_43;
            }
            goto LABEL_44;
          }
LABEL_54:
          ordinary((__n128 *)a1, v13);
          goto LABEL_55;
        }
        doemit((void **)a1, 402653184, 0);
        v19 = 0;
        v25 = *(int32x2_t **)(a1 + 56);
        v26 = v25[9];
        v27 = vadd_s32(v26, (int32x2_t)0x100000001);
        v26.i32[0] |= 1u;
        v26.i32[1] = v27.i32[1];
        v25[9] = v26;
      }
      else
      {
        if (v13 == 63)
        {
LABEL_26:
          if (!*(_DWORD *)(a1 + 16))
          {
            v20 = 13;
            goto LABEL_43;
          }
          goto LABEL_44;
        }
        if (v13 == 91)
        {
          p_bracket(a1);
          goto LABEL_55;
        }
        if (v13 != 92)
          goto LABEL_54;
        if (v8 - v12 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 5;
          *(_QWORD *)(a1 + 8) = &nuls;
          v12 = &nuls;
        }
        *(_QWORD *)a1 = v12 + 1;
        v13 = *v12;
        if ((v13 - 49) > 8)
          goto LABEL_54;
        v15 = (v13 - 48);
        v16 = a1 + 8 * v15;
        v18 = *(_QWORD *)(v16 + 144);
        v17 = (uint64_t *)(v16 + 144);
        if (!v18)
        {
          if (!*(_DWORD *)(a1 + 16))
          {
            v20 = 6;
            goto LABEL_43;
          }
LABEL_44:
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
LABEL_55:
          v19 = 1;
          goto LABEL_56;
        }
        doemit((void **)a1, 939524096, v15);
        dupl(a1, *(_QWORD *)(a1 + 8 * v15 + 64) + 1, *v17);
        doemit((void **)a1, 0x40000000, v15);
        v19 = 1;
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
      }
LABEL_56:
      v7 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v28 = (uint64_t)&v8[-*(_QWORD *)a1];
      if (v28 >= 1)
      {
        if ((v29 = *v7, (v29 - 42) < 2)
          || v29 == 63
          || (v29 == 123 ? (v30 = (unint64_t)v28 >= 2) : (v30 = 0),
              v30 && v7[1] - 48 <= 9))
        {
          *(_QWORD *)a1 = v7 + 1;
          if ((v19 & 1) == 0)
          {
            if (!*(_DWORD *)(a1 + 16))
              *(_DWORD *)(a1 + 16) = 13;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
          }
          if ((char)v29 > 62)
          {
            if ((char)v29 != 63)
            {
              if ((char)v29 == 123)
              {
                v34 = p_count((uint64_t *)a1);
                v35 = v34;
                v36 = *(char **)a1;
                v37 = v34;
                if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >= 1)
                {
                  v37 = v34;
                  if (*v36 == 44)
                  {
                    *(_QWORD *)a1 = v36 + 1;
                    if (v36[1] - 48 > 9)
                    {
                      v37 = 256;
                    }
                    else
                    {
                      v37 = p_count((uint64_t *)a1);
                      if (v35 > (int)v37)
                      {
                        if (!*(_DWORD *)(a1 + 16))
                          *(_DWORD *)(a1 + 16) = 10;
                        *(_QWORD *)a1 = &nuls;
                        *(_QWORD *)(a1 + 8) = &nuls;
                      }
                    }
                  }
                }
                repeat((void **)a1, v10, v35, v37);
                v43 = *(char **)a1;
                v42 = *(_QWORD *)(a1 + 8);
                if (v42 - *(_QWORD *)a1 >= 1)
                {
                  if (*v43 == 125)
                  {
                    *(_QWORD *)a1 = v43 + 1;
                    goto LABEL_89;
                  }
                  v44 = ~(unint64_t)v43 + v42;
                  v45 = (unsigned __int8 *)(v43 + 1);
                  while (1)
                  {
                    *(_QWORD *)a1 = v45;
                    if (v44 <= 0)
                      break;
                    v46 = *v45++;
                    --v44;
                    if (v46 == 125)
                    {
                      if (*(_DWORD *)(a1 + 16))
                        goto LABEL_118;
                      v47 = 10;
                      goto LABEL_117;
                    }
                  }
                }
                if (!*(_DWORD *)(a1 + 16))
                {
                  v47 = 9;
LABEL_117:
                  *(_DWORD *)(a1 + 16) = v47;
                }
LABEL_118:
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
LABEL_89:
              v7 = *(char **)a1;
              v8 = *(char **)(a1 + 8);
              v39 = (uint64_t)&v8[-*(_QWORD *)a1];
              if (v39 >= 1)
              {
                if ((v40 = *v7, (v40 - 42) < 2)
                  || v40 == 63
                  || (v40 == 123 ? (v41 = (unint64_t)v39 >= 2) : (v41 = 0),
                      v41 && v7[1] - 48 <= 9))
                {
                  if (!*(_DWORD *)(a1 + 16))
                    *(_DWORD *)(a1 + 16) = 13;
                  *(_QWORD *)a1 = &nuls;
                  *(_QWORD *)(a1 + 8) = &nuls;
                  v7 = &nuls;
                  v8 = &nuls;
                }
              }
              goto LABEL_101;
            }
            doinsert((_QWORD *)a1, 2013265920, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
            doemit((void **)a1, 0x80000000, *(_QWORD *)(a1 + 40) - v10);
            if (!*(_DWORD *)(a1 + 16))
              *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v10) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v10) & 0xF8000000 | (*(_QWORD *)(a1 + 40) - v10);
            doemit((void **)a1, 2281701376, 0);
            if (!*(_DWORD *)(a1 + 16))
            {
              v38 = *(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 40);
              *(_QWORD *)(v38 - 8) = *(_QWORD *)(v38 - 8) & 0xF8000000 | 1;
            }
            v32 = (void **)a1;
            v33 = 2415919104;
            v31 = 2;
          }
          else
          {
            if ((char)v29 != 42)
            {
              if ((char)v29 == 43)
              {
                doinsert((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
                v31 = *(_QWORD *)(a1 + 40) - v10;
                v32 = (void **)a1;
                v33 = 1342177280;
                goto LABEL_88;
              }
              goto LABEL_89;
            }
            doinsert((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
            doemit((void **)a1, 1342177280, *(_QWORD *)(a1 + 40) - v10);
            doinsert((_QWORD *)a1, 1476395008, *(_QWORD *)(a1 + 40) - v10 + 1, v10);
            v31 = *(_QWORD *)(a1 + 40) - v10;
            v32 = (void **)a1;
            v33 = 1610612736;
          }
LABEL_88:
          doemit(v32, v33, v31);
          goto LABEL_89;
        }
      }
LABEL_101:
      if (v8 - v7 <= 0)
      {
        v10 = *(_QWORD *)(a1 + 40);
        break;
      }
    }
    if (v10 == v6)
    {
LABEL_120:
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 14;
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
      v10 = v6;
      v7 = &nuls;
      v8 = &nuls;
    }
    if (v8 - v7 >= 1 && *v7 == 124)
    {
      *(_QWORD *)a1 = v7 + 1;
      if ((v5 & 1) != 0)
      {
        v6 = v50;
      }
      else
      {
        doinsert((_QWORD *)a1, 2013265920, v10 - v6 + 1, v6);
        v10 = *(_QWORD *)(a1 + 40);
        v4 = v6;
      }
      doemit((void **)a1, 0x80000000, v10 - v6);
      v48 = *(_QWORD *)(a1 + 40);
      v49 = v48;
      if (!*(_DWORD *)(a1 + 16))
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) & 0xF8000000 | (v48 - v4);
        v49 = *(_QWORD *)(a1 + 40);
      }
      v50 = v48 - 1;
      doemit((void **)a1, 2281701376, 0);
      v5 = 1;
      v4 = v49;
      continue;
    }
    break;
  }
  if ((v5 & 1) != 0)
  {
    if (!*(_DWORD *)(a1 + 16))
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * v4) & 0xF8000000 | (v10 - v4);
      v10 = *(_QWORD *)(a1 + 40);
    }
    doemit((void **)a1, 2415919104, v10 - v50);
  }
}

void p_bre(uint64_t a1, int a2, int a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  int32x2_t *v10;
  int32x2_t v11;
  int32x2_t v12;
  int v13;
  char v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  char *v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(char **)a1;
  v6 = *(char **)(a1 + 8);
  v7 = (uint64_t)&v6[-*(_QWORD *)a1];
  if (v7 < 1)
    goto LABEL_98;
  if (*v5 == 94)
  {
    *(_QWORD *)a1 = v5 + 1;
    doemit((void **)a1, 402653184, 0);
    v10 = *(int32x2_t **)(a1 + 56);
    v11 = v10[9];
    v12 = vadd_s32(v11, (int32x2_t)0x100000001);
    v11.i32[0] |= 1u;
    v11.i32[1] = v12.i32[1];
    v10[9] = v11;
    v5 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    v7 = (uint64_t)&v6[-*(_QWORD *)a1];
    if (v7 < 1)
    {
LABEL_98:
      v40 = *(_QWORD *)(a1 + 40);
      goto LABEL_99;
    }
  }
  v13 = 0;
  v14 = 0;
  while (v7 == 1 || *v5 != a2 || v5[1] != a3)
  {
    v15 = *(_QWORD *)(a1 + 40);
    v16 = v5 + 1;
    *(_QWORD *)a1 = v5 + 1;
    v17 = *v5;
    if (v17 == 92)
    {
      if (v6 - v16 <= 0)
      {
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 5;
        *(_QWORD *)(a1 + 8) = &nuls;
        v6 = &nuls;
        v16 = &nuls;
      }
      *(_QWORD *)a1 = v16 + 1;
      v17 = *v16++ | 0x100;
    }
    if (v17 > 304)
    {
      if ((v17 - 305) < 9)
      {
        v18 = (v17 & 0xFFFFFEFF) - 48;
        v19 = a1 + 8 * v18;
        v21 = *(_QWORD *)(v19 + 144);
        v20 = (uint64_t *)(v19 + 144);
        if (v21)
        {
          doemit((void **)a1, 939524096, (v17 & 0xFFFFFEFF) - 48);
          dupl(a1, *(_QWORD *)(a1 + 8 * v18 + 64) + 1, *v20);
          doemit((void **)a1, 0x40000000, (v17 & 0xFFFFFEFF) - 48);
        }
        else
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 6;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
        *(_DWORD *)(*(_QWORD *)(a1 + 56) + 120) = 1;
        goto LABEL_60;
      }
      if (v17 == 379)
      {
        if (!*(_DWORD *)(a1 + 16))
        {
          v28 = 13;
LABEL_52:
          *(_DWORD *)(a1 + 16) = v28;
        }
      }
      else
      {
        if (v17 != 381)
          goto LABEL_58;
LABEL_48:
        if (!*(_DWORD *)(a1 + 16))
        {
          v28 = 8;
          goto LABEL_52;
        }
      }
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
      goto LABEL_60;
    }
    if (v17 <= 90)
    {
      if (v17 == 42)
      {
        if ((v14 & 1) != 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 13;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
      }
      else if (v17 == 46)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 40) & 8) != 0)
        {
          *(_QWORD *)a1 = &v42;
          *(_QWORD *)(a1 + 8) = (char *)&v42 + 3;
          v42 = 6097502;
          p_bracket(a1);
          *(_QWORD *)a1 = v16;
          *(_QWORD *)(a1 + 8) = v6;
        }
        else
        {
          doemit((void **)a1, 671088640, 0);
        }
        goto LABEL_60;
      }
LABEL_58:
      ordinary((__n128 *)a1, (char)v17);
      goto LABEL_60;
    }
    switch(v17)
    {
      case 91:
        p_bracket(a1);
        break;
      case 296:
        v22 = *(_QWORD *)(a1 + 56);
        v23 = *(_QWORD *)(v22 + 112);
        v24 = v23 + 1;
        *(_QWORD *)(v22 + 112) = v23 + 1;
        if (v23 + 1 <= 9)
          *(_QWORD *)(a1 + 8 * v24 + 64) = v15;
        doemit((void **)a1, 1744830464, v23 + 1);
        v25 = *(char **)a1;
        v26 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
        if (v26 >= 1 && (v26 == 1 || *v25 != 92 || v25[1] != 41))
          p_bre(a1, 92, 41);
        if (v24 <= 9)
          *(_QWORD *)(a1 + 8 * v24 + 144) = *(_QWORD *)(a1 + 40);
        doemit((void **)a1, 1879048192, v24);
        v27 = *(char **)a1;
        if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) < 2 || *v27 != 92 || v27[1] != 41)
          goto LABEL_48;
        *(_QWORD *)a1 = v27 + 2;
        break;
      case 297:
        goto LABEL_48;
      default:
        goto LABEL_58;
    }
LABEL_60:
    v5 = *(char **)a1;
    v6 = *(char **)(a1 + 8);
    v7 = (uint64_t)&v6[-*(_QWORD *)a1];
    if (v7 >= 1)
    {
      v29 = *v5;
      if (v29 == 42)
      {
        *(_QWORD *)a1 = v5 + 1;
        doinsert((_QWORD *)a1, 1207959552, *(_QWORD *)(a1 + 40) - v15 + 1, v15);
        doemit((void **)a1, 1342177280, *(_QWORD *)(a1 + 40) - v15);
        doinsert((_QWORD *)a1, 1476395008, *(_QWORD *)(a1 + 40) - v15 + 1, v15);
        doemit((void **)a1, 1610612736, *(_QWORD *)(a1 + 40) - v15);
        v5 = *(char **)a1;
        v6 = *(char **)(a1 + 8);
LABEL_91:
        v13 = 0;
        v7 = v6 - v5;
        goto LABEL_92;
      }
      if ((unint64_t)v7 >= 2 && v29 == 92 && v5[1] == 123)
      {
        *(_QWORD *)a1 = v5 + 2;
        v30 = p_count((uint64_t *)a1);
        v31 = v30;
        v33 = *(char **)a1;
        v32 = *(_QWORD *)(a1 + 8);
        v34 = v30;
        if (v32 - *(_QWORD *)a1 >= 1)
        {
          v34 = v30;
          if (*v33 == 44)
          {
            v35 = (unsigned __int8 *)(v33 + 1);
            *(_QWORD *)a1 = v35;
            if (v32 - (uint64_t)v35 < 1 || *v35 - 48 > 9)
            {
              v34 = 256;
            }
            else
            {
              v34 = p_count((uint64_t *)a1);
              if (v31 > (int)v34)
              {
                if (!*(_DWORD *)(a1 + 16))
                  *(_DWORD *)(a1 + 16) = 10;
                *(_QWORD *)a1 = &nuls;
                *(_QWORD *)(a1 + 8) = &nuls;
              }
            }
          }
        }
        repeat((void **)a1, v15, v31, v34);
        v36 = *(char **)a1;
        v6 = *(char **)(a1 + 8);
        v37 = (uint64_t)&v6[-*(_QWORD *)a1];
        if (v37 <= 1)
        {
          if (v37 == 1)
            goto LABEL_82;
LABEL_87:
          if (!*(_DWORD *)(a1 + 16))
          {
            v39 = 9;
            goto LABEL_89;
          }
        }
        else
        {
          if (*v36 == 92 && v36[1] == 125)
          {
            v5 = v36 + 2;
            *(_QWORD *)a1 = v36 + 2;
            goto LABEL_91;
          }
LABEL_82:
          v38 = v36 + 1;
          while (1)
          {
            if (--v37)
            {
              if (*(v38 - 1) == 92 && *v38 == 125)
                break;
            }
            *(_QWORD *)a1 = v38++;
            if (v37 <= 0)
              goto LABEL_87;
          }
          if (!*(_DWORD *)(a1 + 16))
          {
            v39 = 10;
LABEL_89:
            *(_DWORD *)(a1 + 16) = v39;
          }
        }
        *(_QWORD *)a1 = &nuls;
        *(_QWORD *)(a1 + 8) = &nuls;
        v5 = &nuls;
        v6 = &nuls;
        goto LABEL_91;
      }
    }
    if (v17 != 36)
      goto LABEL_91;
    v13 = 1;
LABEL_92:
    v14 = 1;
    if (v7 <= 0)
      break;
  }
  v40 = *(_QWORD *)(a1 + 40);
  if (v13)
  {
    *(_QWORD *)(a1 + 40) = v40 - 1;
    doemit((void **)a1, 0x20000000, 0);
    v41 = *(_QWORD *)(a1 + 56);
    *(_DWORD *)(v41 + 72) |= 2u;
    ++*(_DWORD *)(v41 + 80);
    goto LABEL_98;
  }
LABEL_99:
  if (v40 == v4)
  {
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 14;
    *(_QWORD *)a1 = &nuls;
    *(_QWORD *)(a1 + 8) = &nuls;
  }
}

_QWORD *doinsert(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (!*((_DWORD *)result + 4))
  {
    v5 = result;
    v6 = result[5];
    doemit((void **)result, a2, a3);
    v7 = 0;
    v8 = v5[3];
    v9 = *(_QWORD *)(v8 + 8 * v6);
    do
    {
      v10 = &v5[v7];
      v11 = v5[v7 + 9];
      if (v11 >= a4)
        v10[9] = v11 + 1;
      v12 = v10[19];
      if (v12 >= a4)
        v10[19] = v12 + 1;
      ++v7;
    }
    while (v7 != 9);
    result = memmove((void *)(v8 + 8 * a4 + 8), (const void *)(v8 + 8 * a4), 8 * (v5[5] + ~a4));
    *(_QWORD *)(v5[3] + 8 * a4) = v9;
  }
  return result;
}

void p_bracket(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  size_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v33;
  int v34;
  const char *v35;
  uint64_t v36;
  _BYTE *v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int v46;
  unsigned __int8 v47;
  char *v48;
  int v49;
  size_t v50;
  const char **v51;
  const char *v52;
  unsigned __int8 *v53;
  unsigned __int8 v54;
  unsigned __int8 *v55;
  int v56;
  const char *v57;
  int v58;
  uint64_t v59;
  size_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  const char *v64;
  int v65;
  const char *v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  int v72;
  int v73;
  unsigned int v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  char v80;
  unint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  void **v94;
  _BOOL4 v95;

  v2 = *(const char **)a1;
  if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >= 6)
  {
    if (!strncmp(*(const char **)a1, "[:<:]]", 6uLL))
    {
      v27 = (void **)a1;
      v28 = 2550136832;
    }
    else
    {
      if (strncmp(v2, "[:>:]]", 6uLL))
        goto LABEL_4;
      v27 = (void **)a1;
      v28 = 2684354560;
    }
    doemit(v27, v28, 0);
    *(_QWORD *)a1 += 6;
    return;
  }
LABEL_4:
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(unsigned int *)(v3 + 20);
  v5 = *(int *)(v3 + 16);
  *(_DWORD *)(v3 + 20) = v4 + 1;
  v6 = *(_DWORD *)(a1 + 48);
  if ((int)v4 >= v6)
  {
    v20 = (v6 + 8);
    *(_DWORD *)(a1 + 48) = v20;
    if (v6 < -8)
      goto LABEL_21;
    v21 = malloc_type_realloc(*(void **)(v3 + 24), 32 * (v6 + 8), 0x1010040FE74B554uLL);
    v3 = *(_QWORD *)(a1 + 56);
    if (!v21)
      goto LABEL_21;
    v22 = (int)(v20 >> 3) * (uint64_t)(int)v5;
    *(_QWORD *)(v3 + 24) = v21;
    v23 = (char *)malloc_type_realloc(*(void **)(v3 + 32), v22, 0x7F640B19uLL);
    v3 = *(_QWORD *)(a1 + 56);
    if (!v23)
      goto LABEL_21;
    *(_QWORD *)(v3 + 32) = v23;
    if ((int)v4 >= 1)
    {
      v24 = 0;
      v25 = *(_QWORD **)(v3 + 24);
      do
      {
        *v25 = &v23[(v24 >> 3) * (uint64_t)(int)v5];
        v25 += 4;
        ++v24;
      }
      while (v4 != v24);
    }
    bzero(&v23[v22 - v5], v5);
    v3 = *(_QWORD *)(a1 + 56);
  }
  v7 = *(_QWORD *)(v3 + 24);
  if (!v7 || (v8 = *(_QWORD *)(v3 + 32)) == 0)
  {
LABEL_21:
    free(*(void **)(v3 + 24));
    v26 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(v26 + 24) = 0;
    free(*(void **)(v26 + 32));
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 32) = 0;
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 12;
    *(_QWORD *)a1 = &nuls;
    *(_QWORD *)(a1 + 8) = &nuls;
    return;
  }
  v9 = v7 + 32 * (int)v4;
  v10 = v8 + (int)v5 * (uint64_t)((int)v4 / 8);
  v11 = 1;
  v12 = 1 << (v4 & 7);
  *(_BYTE *)(v9 + 8) = v12;
  v13 = (_BYTE *)(v9 + 8);
  *(_BYTE *)(v9 + 9) = 0;
  v14 = (_BYTE *)(v9 + 9);
  *(_QWORD *)(v9 + 16) = 0;
  v15 = (uint64_t *)(v9 + 16);
  *(_QWORD *)v9 = v10;
  *(_QWORD *)(v9 + 24) = 0;
  v17 = *(char **)a1;
  v16 = *(char **)(a1 + 8);
  if ((uint64_t)&v16[-*(_QWORD *)a1] < 1)
    goto LABEL_30;
  v18 = *v17;
  v11 = v18 != 94;
  if (v18 == 94)
  {
    *(_QWORD *)a1 = ++v17;
    if (v16 - v17 < 1)
    {
      v11 = 0;
      goto LABEL_30;
    }
    v18 = *v17;
  }
  if (v18 == 93)
  {
    v19 = 93;
  }
  else
  {
    if (v18 != 45)
      goto LABEL_30;
    v19 = 45;
  }
  *(_QWORD *)a1 = v17 + 1;
  *(_BYTE *)(v10 + v19) |= v12;
  *v14 += v18;
  v17 = *(char **)a1;
  v16 = *(char **)(a1 + 8);
LABEL_30:
  v29 = v16 - v17;
  if (v16 - v17 >= 1)
  {
    v30 = v7 + 32 * (int)v4 + 24;
    do
    {
      v31 = *v17;
      if (v31 == 93)
        break;
      if (v29 >= 2 && v31 == 45)
      {
        if (v17[1] == 93)
        {
          *(_QWORD *)a1 = v17 + 1;
          *(_BYTE *)(*(_QWORD *)v9 + 45) |= *v13;
          *v14 += 45;
          v17 = *(char **)a1;
          v16 = *(char **)(a1 + 8);
          break;
        }
LABEL_69:
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = 11;
        goto LABEL_71;
      }
      if (v31 == 45)
        goto LABEL_69;
      if (v31 != 91 || v29 <= 1)
      {
LABEL_42:
        v33 = p_b_symbol(a1);
        v34 = v33;
        v35 = *(const char **)a1;
        v36 = *(_QWORD *)(a1 + 8);
        if (v36 - *(_QWORD *)a1 < 2
          || *v35 != 45
          || (v37 = v35 + 1, v35[1] == 93)
          || ((*(_QWORD *)a1 = v37, v36 - (uint64_t)v37 < 1) || *v37 != 45
            ? (v33 = p_b_symbol(a1))
            : (*(_QWORD *)a1 = v35 + 2, v33 = 45),
              v34 <= v33))
        {
          do
          {
            *(_BYTE *)(*(_QWORD *)v9 + v34) |= *v13;
            *v14 += v34++;
          }
          while (v33 + 1 != v34);
          v17 = *(char **)a1;
          v16 = *(char **)(a1 + 8);
          goto LABEL_74;
        }
        goto LABEL_69;
      }
      v38 = v17[1];
      if (v38 == 61)
      {
        v45 = v17 + 2;
        *(_QWORD *)a1 = v45;
        if (v16 - v45 <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v45 = &nuls;
        }
        v46 = *v45;
        if (v46 == 93 || v46 == 45)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 3;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
        }
        v47 = p_b_coll_elem(a1, 61);
        *(_BYTE *)(*(_QWORD *)v9 + v47) |= *v13;
        *v14 += v47;
        v48 = *(char **)a1;
        v16 = *(char **)(a1 + 8);
        if ((uint64_t)&v16[-*(_QWORD *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v48 = &nuls;
          v16 = &nuls;
        }
        if (v16 - v48 > 1 && *v48 == 61 && v48[1] == 93)
          goto LABEL_110;
        if (!*(_DWORD *)(a1 + 16))
        {
          v49 = 3;
LABEL_113:
          *(_DWORD *)(a1 + 16) = v49;
        }
      }
      else
      {
        if (v38 != 58)
          goto LABEL_42;
        v39 = v17 + 2;
        *(_QWORD *)a1 = v17 + 2;
        if (v16 - (v17 + 2) <= 0)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v16 = &nuls;
          v39 = &nuls;
        }
        v40 = *v39;
        if (v40 == 93 || v40 == 45)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 4;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v16 = &nuls;
          v39 = &nuls;
        }
        v95 = v11;
        v94 = (void **)v30;
        if (v16 - v39 >= 1)
        {
          v41 = -(uint64_t)v39;
          v42 = v39 + 1;
          while (1)
          {
            v43 = *((unsigned __int8 *)v42 - 1);
            if (*(v42 - 1) < 0)
            {
              if (!__maskrune(v43, 0x100uLL))
              {
LABEL_95:
                v44 = *(_QWORD *)a1;
                goto LABEL_96;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v43 + 60) & 0x100) == 0)
            {
              goto LABEL_95;
            }
            *(_QWORD *)a1 = v42;
            --v41;
            ++v42;
            if (*(_QWORD *)(a1 + 8) + v41 <= 0)
            {
              v44 = -v41;
              goto LABEL_96;
            }
          }
        }
        v44 = (uint64_t)v39;
LABEL_96:
        v50 = v44 - (_QWORD)v39;
        v51 = (const char **)&off_251C13BB8;
        v52 = "alnum";
        while (strncmp(v52, v39, v50) || v52[v50])
        {
          v52 = v51[1];
          v51 += 3;
          if (!v52)
          {
            v11 = v95;
            if (!*(_DWORD *)(a1 + 16))
              *(_DWORD *)(a1 + 16) = 4;
            *(_QWORD *)a1 = &nuls;
            *(_QWORD *)(a1 + 8) = &nuls;
            v30 = (uint64_t)v94;
            goto LABEL_103;
          }
        }
        v53 = (unsigned __int8 *)*(v51 - 1);
        v54 = *v53;
        if (*v53)
        {
          v55 = v53 + 1;
          do
          {
            *(_BYTE *)(*(_QWORD *)v9 + v54) |= *v13;
            *v14 += v54;
            v56 = *v55++;
            v54 = v56;
          }
          while (v56);
        }
        v57 = *v51;
        v58 = *(unsigned __int8 *)*v51;
        v11 = v95;
        v30 = (uint64_t)v94;
        if (v58)
        {
          do
          {
            v59 = *v15;
            v60 = *v15 + strlen(v57) + 1;
            *v15 = v60;
            v61 = (char *)malloc_type_realloc(*v94, v60, 0xDA2F212AuLL);
            if (v61)
            {
              *v94 = v61;
              if (*v15 - v59 != -1)
              {
                v62 = &v61[v59 - 1];
                v63 = v59 - *v15;
                v64 = v57;
                while (v63)
                {
                  v65 = *(unsigned __int8 *)v64++;
                  *v62++ = v65;
                  ++v63;
                  if (!v65)
                    goto LABEL_130;
                }
                *v62 = 0;
              }
            }
            else
            {
              if (*v94)
                free(*v94);
              *v94 = 0;
              if (!*(_DWORD *)(a1 + 16))
                *(_DWORD *)(a1 + 16) = 12;
              *(_QWORD *)a1 = &nuls;
              *(_QWORD *)(a1 + 8) = &nuls;
            }
LABEL_130:
            v66 = &v57[strlen(v57)];
            v67 = *((unsigned __int8 *)v66 + 1);
            v57 = v66 + 1;
          }
          while (v67);
        }
LABEL_103:
        v48 = *(char **)a1;
        v16 = *(char **)(a1 + 8);
        if ((uint64_t)&v16[-*(_QWORD *)a1] < 1)
        {
          if (!*(_DWORD *)(a1 + 16))
            *(_DWORD *)(a1 + 16) = 7;
          *(_QWORD *)a1 = &nuls;
          *(_QWORD *)(a1 + 8) = &nuls;
          v48 = &nuls;
          v16 = &nuls;
        }
        if (v16 - v48 > 1 && *v48 == 58 && v48[1] == 93)
        {
LABEL_110:
          v17 = v48 + 2;
          *(_QWORD *)a1 = v17;
          goto LABEL_74;
        }
        if (!*(_DWORD *)(a1 + 16))
        {
          v49 = 4;
          goto LABEL_113;
        }
      }
LABEL_71:
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
      v17 = &nuls;
      v16 = &nuls;
LABEL_74:
      v29 = v16 - v17;
    }
    while (v16 - v17 > 0);
  }
  if (v16 - v17 < 1 || (*(_QWORD *)a1 = v17 + 1, *v17 != 93))
  {
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 7;
    *(_QWORD *)a1 = &nuls;
    *(_QWORD *)(a1 + 8) = &nuls;
    goto LABEL_170;
  }
  if (*(_DWORD *)(a1 + 16))
  {
LABEL_170:
    freeset(a1, v9);
    return;
  }
  v68 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v68 + 40) & 2) != 0)
  {
    v69 = *(unsigned int *)(v68 + 16);
    if ((int)v69 >= 1)
    {
      v70 = MEMORY[0x24BDAC740];
      while (1)
      {
        v71 = v69 - 1;
        if ((*v13 & *(_BYTE *)(*(_QWORD *)v9 + (v69 - 1))) != 0)
        {
          if (v69 > 0x80)
          {
            if (__maskrune(v69 - 1, 0x100uLL))
            {
LABEL_143:
              v72 = othercase(v71);
              if ((_DWORD)v71 != v72)
              {
                *(_BYTE *)(*(_QWORD *)v9 + v72) |= *v13;
                *v14 += v72;
              }
            }
          }
          else if ((*(_DWORD *)(v70 + 4 * v71 + 60) & 0x100) != 0)
          {
            goto LABEL_143;
          }
        }
        v69 = v71;
        if (v71 + 1 <= 1)
        {
          v68 = *(_QWORD *)(a1 + 56);
          break;
        }
      }
    }
  }
  if (!v11)
  {
    v73 = *(_DWORD *)(v68 + 16);
    if (v73 >= 1)
    {
      v74 = v73 + 1;
      do
      {
        v75 = v74 - 2;
        v76 = *(_QWORD *)v9;
        v77 = (v74 - 2);
        v78 = *(unsigned __int8 *)(*(_QWORD *)v9 + v77);
        v79 = *v13;
        if ((v79 & v78) != 0)
        {
          *(_BYTE *)(v76 + v77) = v78 & ~(_BYTE)v79;
          v80 = *v14 - v75;
        }
        else
        {
          *(_BYTE *)(v76 + v77) = v79 | v78;
          v80 = *v14 + v75;
        }
        *v14 = v80;
        --v74;
      }
      while (v74 > 1);
      v68 = *(_QWORD *)(a1 + 56);
    }
    if ((*(_BYTE *)(v68 + 40) & 8) != 0)
    {
      *(_BYTE *)(*(_QWORD *)v9 + 10) &= ~*v13;
      *v14 -= 10;
      v68 = *(_QWORD *)(a1 + 56);
    }
  }
  v81 = *(int *)(v68 + 16);
  if ((_DWORD)v81)
  {
    v82 = 0;
    v83 = 0;
    v84 = *(_QWORD *)v9;
    do
    {
      if ((*(_BYTE *)(v84 + v83) & *v13) != 0)
        ++v82;
      ++v83;
    }
    while (v81 != v83);
    if (v82 == 1)
    {
      v85 = 0;
      v86 = 0;
      while ((*(_BYTE *)(v84 + v86) & *v13) == 0)
      {
        ++v86;
        v85 += 0x1000000;
        if (v81 == v86)
        {
          v87 = 0;
          goto LABEL_186;
        }
      }
      v87 = v85 >> 24;
LABEL_186:
      ordinary((__n128 *)a1, v87);
      goto LABEL_170;
    }
  }
  v88 = *(_QWORD *)(v68 + 24);
  v89 = *(int *)(v68 + 20);
  if ((int)v89 < 1)
  {
LABEL_184:
    v92 = v9;
  }
  else
  {
    v90 = v88 + 32 * v89;
    if (v81 <= 1)
      v91 = 1;
    else
      v91 = *(int *)(v68 + 16);
    v92 = *(_QWORD *)(v68 + 24);
    while (1)
    {
      if (v92 != v9 && *(unsigned __int8 *)(v92 + 9) == *v14)
      {
        v93 = 0;
        if ((_DWORD)v81)
        {
          while (((*(_BYTE *)(*(_QWORD *)v92 + v93) & *(_BYTE *)(v92 + 8)) == 0) != ((*(_BYTE *)(*(_QWORD *)v9 + v93) & *v13) != 0))
          {
            if (v91 == ++v93)
            {
              v93 = v91;
              break;
            }
          }
        }
        if (v93 == v81)
          break;
      }
      v92 += 32;
      if (v92 >= v90)
        goto LABEL_184;
    }
    freeset(a1, v9);
    v88 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24);
  }
  doemit((void **)a1, 805306368, (int)((uint64_t)(v92 - v88) >> 5));
}

uint64_t dupl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 40);
  v4 = a3 - a2;
  if (a3 != a2)
  {
    enlarge((void **)a1, *(_QWORD *)(a1 + 32) + v4);
    memmove((void *)(*(_QWORD *)(a1 + 24) + 8 * *(_QWORD *)(a1 + 40)), (const void *)(*(_QWORD *)(a1 + 24) + 8 * a2), 8 * v4);
    *(_QWORD *)(a1 + 40) += v4;
  }
  return v3;
}

__n128 ordinary(__n128 *a1, int a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  unint64_t v8;
  int v9;
  __n128 v10;
  char v11;
  __int16 v12;

  v4 = a1[3].n128_u64[1];
  v5 = *(_QWORD *)(v4 + 88);
  v6 = a2;
  if ((*(_BYTE *)(v4 + 40) & 2) == 0)
    goto LABEL_7;
  if (a2 > 0x7Fu)
  {
    if (!__maskrune(a2, 0x100uLL))
      goto LABEL_7;
  }
  else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a2 + 60) & 0x100) == 0)
  {
    goto LABEL_7;
  }
  if (othercase(a2) != a2)
  {
    v11 = a2;
    v12 = 93;
    v10 = *a1;
    a1->n128_u64[0] = (unint64_t)&v11;
    a1->n128_u64[1] = (unint64_t)&v12 + 1;
    p_bracket(a1);
    result = v10;
    *a1 = v10;
    return result;
  }
LABEL_7:
  doemit((void **)a1, 0x10000000, v6);
  if (!*(_BYTE *)(v5 + a2))
  {
    v8 = a1[3].n128_u64[1];
    v9 = *(_DWORD *)(v8 + 84);
    *(_DWORD *)(v8 + 84) = v9 + 1;
    *(_BYTE *)(v5 + a2) = v9;
  }
  return result;
}

uint64_t p_count(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = *a1;
  v2 = a1[1] - *a1;
  if (v2 < 1)
  {
    v4 = 0;
LABEL_12:
    if (!*((_DWORD *)a1 + 4))
      *((_DWORD *)a1 + 4) = 10;
    *a1 = (uint64_t)&nuls;
    a1[1] = (uint64_t)&nuls;
    return v4;
  }
  v3 = 0;
  v4 = 0;
  while (1)
  {
    v5 = (char *)(v1 + v3);
    if (*(unsigned __int8 *)(v1 + v3) - 48 > 9 || (int)v4 > 255)
      break;
    *a1 = (uint64_t)(v5 + 1);
    v4 = (*v5 + 10 * v4 - 48);
    ++v3;
    if (v2-- <= 1)
    {
      LODWORD(v3) = 1;
      break;
    }
  }
  if (!(_DWORD)v3 || (int)v4 >= 256)
    goto LABEL_12;
  return v4;
}

void **repeat(void **result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;

  if (!*((_DWORD *)result + 4))
  {
    v7 = (uint64_t)result;
LABEL_4:
    if ((_DWORD)a4 == 256)
      v8 = 3;
    else
      v8 = 2;
    if ((int)a4 >= 2)
      v9 = v8;
    else
      v9 = a4;
    do
    {
      v10 = *(_QWORD *)(v7 + 40);
      if (a3 == 256)
        v11 = 3;
      else
        v11 = 2;
      if (a3 < 2)
        v11 = a3;
      v12 = v9 + 8 * v11;
      if (v12 != 19)
      {
        switch(v12)
        {
          case 0:
            *(_QWORD *)(v7 + 40) = a2;
            return result;
          case 1:
          case 2:
          case 3:
            doinsert((_QWORD *)v7, 2013265920, v10 - a2 + 1, a2);
            repeat(v7, a2 + 1, 1, a4);
            doemit((void **)v7, 0x80000000, *(_QWORD *)(v7 + 40) - a2);
            if (!*(_DWORD *)(v7 + 16))
              *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * a2) = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * a2) & 0xF8000000 | (*(_QWORD *)(v7 + 40) - a2);
            doemit((void **)v7, 2281701376, 0);
            if (!*(_DWORD *)(v7 + 16))
            {
              v14 = *(_QWORD *)(v7 + 24) + 8 * *(_QWORD *)(v7 + 40);
              *(_QWORD *)(v14 - 8) = *(_QWORD *)(v14 - 8) & 0xF8000000 | 1;
            }
            v15 = (void **)v7;
            v16 = 2415919104;
            v17 = 2;
            return doemit(v15, v16, v17);
          case 9:
            return result;
          case 10:
            doinsert((_QWORD *)v7, 2013265920, v10 - a2 + 1, a2);
            doemit((void **)v7, 0x80000000, *(_QWORD *)(v7 + 40) - a2);
            if (!*(_DWORD *)(v7 + 16))
              *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * a2) = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 8 * a2) & 0xF8000000 | (*(_QWORD *)(v7 + 40) - a2);
            doemit((void **)v7, 2281701376, 0);
            if (!*(_DWORD *)(v7 + 16))
            {
              v13 = *(_QWORD *)(v7 + 24) + 8 * *(_QWORD *)(v7 + 40);
              *(_QWORD *)(v13 - 8) = *(_QWORD *)(v13 - 8) & 0xF8000000 | 1;
            }
            doemit((void **)v7, 2415919104, 2);
            result = (void **)dupl(v7, a2 + 1, v10 + 1);
            a2 = (uint64_t)result;
            a3 = 1;
            goto LABEL_25;
          case 11:
            doinsert((_QWORD *)v7, 1207959552, v10 - a2 + 1, a2);
            v17 = *(_QWORD *)(v7 + 40) - a2;
            v15 = (void **)v7;
            v16 = 1342177280;
            return doemit(v15, v16, v17);
          case 18:
            result = (void **)dupl(v7, a2, *(_QWORD *)(v7 + 40));
            a2 = (uint64_t)result;
            --a3;
LABEL_25:
            a4 = (a4 - 1);
            if (*(_DWORD *)(v7 + 16))
              return result;
            goto LABEL_4;
          default:
            *(_DWORD *)(v7 + 16) = 15;
            *(_QWORD *)v7 = &nuls;
            *(_QWORD *)(v7 + 8) = &nuls;
            return result;
        }
      }
      result = (void **)dupl(v7, a2, *(_QWORD *)(v7 + 40));
      a2 = (uint64_t)result;
      --a3;
    }
    while (!*(_DWORD *)(v7 + 16));
  }
  return result;
}

uint64_t freeset(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD *)(result + 56);
  v3 = *(int *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24) + 32 * *(int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      *(_BYTE *)(*(_QWORD *)a2 + i) &= ~*(_BYTE *)(a2 + 8);
      *(_BYTE *)(a2 + 9) -= i;
    }
  }
  if (v4 - 32 == a2)
    --*(_DWORD *)(*(_QWORD *)(result + 56) + 20);
  return result;
}

uint64_t othercase(unsigned __int8 a1)
{
  unsigned __int8 v1;
  __darwin_ct_rune_t v2;
  int v3;
  unsigned __int8 v4;

  v1 = a1;
  v2 = a1;
  if (a1 <= 0x7Fu)
  {
    v3 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * a1 + 60);
    if ((v3 & 0x8000) == 0)
    {
      if ((v3 & 0x1000) == 0)
        return (char)v1;
      goto LABEL_8;
    }
LABEL_6:
    v4 = __tolower(v2);
LABEL_9:
    v1 = v4;
    return (char)v1;
  }
  if (__maskrune(a1, 0x8000uLL))
    goto LABEL_6;
  if (__maskrune(v2, 0x1000uLL))
  {
LABEL_8:
    v4 = __toupper(v2);
    goto LABEL_9;
  }
  return (char)v1;
}

uint64_t p_b_symbol(uint64_t a1)
{
  char *v2;
  char *v3;
  char v4;
  char *v5;

  v2 = *(char **)a1;
  v3 = *(char **)(a1 + 8);
  if ((uint64_t)&v3[-*(_QWORD *)a1] < 1)
  {
    if (!*(_DWORD *)(a1 + 16))
      *(_DWORD *)(a1 + 16) = 7;
    v2 = &nuls;
    *(_QWORD *)a1 = &nuls;
    *(_QWORD *)(a1 + 8) = &nuls;
    v3 = &nuls;
  }
  if (v3 - v2 > 1 && *v2 == 91 && v2[1] == 46)
  {
    *(_QWORD *)a1 = v2 + 2;
    v4 = p_b_coll_elem(a1, 46);
    v5 = *(char **)a1;
    if ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) > 1 && *v5 == 46 && v5[1] == 93)
    {
      *(_QWORD *)a1 = v5 + 2;
    }
    else
    {
      if (!*(_DWORD *)(a1 + 16))
        *(_DWORD *)(a1 + 16) = 3;
      *(_QWORD *)a1 = &nuls;
      *(_QWORD *)(a1 + 8) = &nuls;
    }
  }
  else
  {
    *(_QWORD *)a1 = v2 + 1;
    return *v2;
  }
  return v4;
}

uint64_t p_b_coll_elem(uint64_t a1, int a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  int v7;
  char v8;
  const char *v10;
  char **v11;
  char *v12;

  v3 = *(const char **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v4 < 1)
  {
LABEL_7:
    if (!*(_DWORD *)(a1 + 16))
    {
      v7 = 7;
LABEL_9:
      *(_DWORD *)(a1 + 16) = v7;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
    while (v4 - 1 == v6 || v3[v6] != a2 || v3[v6 + 1] != 93)
    {
      *(_QWORD *)a1 = &v3[++v6];
      --v5;
      if (v4 + v5 <= 0)
        goto LABEL_7;
    }
    v10 = "NUL";
    v11 = &off_251C13CF0;
    do
    {
      if (!strncmp(v10, v3, v6) && strlen(v10) == v6)
        return (char)*((_BYTE *)v11 - 8);
      v12 = *v11;
      v11 += 2;
      v10 = v12;
    }
    while (v12);
    if (v6 == 1)
      return *v3;
    if (!*(_DWORD *)(a1 + 16))
    {
      v7 = 3;
      goto LABEL_9;
    }
  }
  v8 = 0;
  *(_QWORD *)a1 = &nuls;
  *(_QWORD *)(a1 + 8) = &nuls;
  return v8;
}

void **enlarge(void **result, uint64_t a2)
{
  void **v3;

  if ((uint64_t)result[4] < a2)
  {
    v3 = result;
    if ((unint64_t)a2 >> 61
      || (result = (void **)malloc_type_realloc(result[3], 8 * a2, 0x100004000313F17uLL)) == 0)
    {
      if (!*((_DWORD *)v3 + 4))
        *((_DWORD *)v3 + 4) = 12;
      *v3 = &nuls;
      v3[1] = &nuls;
    }
    else
    {
      v3[3] = result;
      v3[4] = (void *)a2;
    }
  }
  return result;
}

size_t llvm_regerror(int a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  const char *v6;
  const char **v7;
  char *v8;
  uint64_t v9;
  const char *v10;
  int *v11;
  int v12;
  int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  const char *v18;
  size_t v19;
  uint64_t i;
  int v21;
  uint64_t v23;
  char __str[50];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (a1 == 255)
  {
    v6 = *(const char **)(a2 + 16);
    if (strcmp("REG_NOMATCH", v6))
    {
      v7 = (const char **)off_251C14300;
      v8 = "0";
      while (1)
      {
        v9 = *((unsigned int *)v7 - 2);
        if (!(_DWORD)v9)
          goto LABEL_24;
        v10 = *v7;
        v7 += 3;
        if (!strcmp(v10, v6))
          goto LABEL_21;
      }
    }
    v9 = 1;
LABEL_21:
    v23 = v9;
    v18 = "%d";
LABEL_23:
    v8 = __str;
    snprintf(__str, 0x32uLL, v18, v23);
    goto LABEL_24;
  }
  v11 = &rerrs;
  do
  {
    v13 = *v11;
    v11 += 6;
    v12 = v13;
    if (v13)
      v14 = v12 == (a1 & 0xFFFFFEFF);
    else
      v14 = 1;
  }
  while (!v14);
  if ((a1 & 0x100) == 0)
  {
    v8 = (char *)*((_QWORD *)v11 - 1);
    goto LABEL_24;
  }
  if (!v12)
  {
    v23 = a1 & 0xFFFFFEFF;
    v18 = "REG_0x%x";
    goto LABEL_23;
  }
  v15 = 0;
  v16 = *((_QWORD *)v11 - 2);
  while (v15 != 49)
  {
    v17 = *(unsigned __int8 *)(v16 + v15);
    v8 = __str;
    __str[v15++] = v17;
    if (!v17)
      goto LABEL_24;
  }
  v8 = __str;
  __str[49] = 0;
LABEL_24:
  v19 = strlen(v8);
  if (a4)
  {
    for (i = a4 - 1; i; --i)
    {
      v21 = *v8++;
      *a3++ = v21;
      if (!v21)
        return v19 + 1;
    }
    *a3 = 0;
  }
  return v19 + 1;
}

uint64_t llvm_regexec(uint64_t a1, char *__s, unint64_t a3, _QWORD *a4, char a5)
{
  uint64_t v5;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  unsigned __int8 *v23;
  char *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  int64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  int v36;
  char *v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  int v43;
  uint64_t v45;
  int v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unsigned __int8 *v56;
  char *v57;
  uint64_t v58;
  _OWORD *v59;
  _QWORD *v60;
  unint64_t j;
  char *v62;
  unsigned __int8 *v63;
  char *v64;
  uint64_t v65;
  int v66;
  char *v67;
  char *v68;
  int64_t v69;
  char *v70;
  uint64_t v71;
  size_t v72;
  int v73;
  __int128 v74;
  _BYTE *v75;
  char *v76;
  int v77;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  unsigned int v82;
  unsigned int v83;
  int v84;
  char *v86;
  int v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  unsigned __int8 *v97;
  char *v98;
  uint64_t v99;
  _OWORD *v100;
  _QWORD *v101;
  unint64_t i;
  unint64_t v103;
  char *v104;
  int v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  char *__dst;
  void *__dsta;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  void *v124[2];
  __int128 v125;
  char *v126;

  if (*(_DWORD *)a1 != 62053)
    return 2;
  v5 = *(_QWORD *)(a1 + 24);
  if (*(_DWORD *)v5 != 53829 || (*(_BYTE *)(v5 + 72) & 4) != 0)
    return 2;
  v8 = a5 & 7;
  v9 = *(_QWORD *)(v5 + 48);
  if (v9 > 64)
  {
    v18 = *(void **)(v5 + 56);
    v17 = *(_QWORD *)(v5 + 64);
    if ((*(_BYTE *)(v5 + 40) & 4) != 0)
      v19 = 0;
    else
      v19 = a3;
    if ((a5 & 4) != 0)
    {
      v20 = a4[1];
      v21 = &__s[*a4];
    }
    else
    {
      v20 = strlen(__s);
      v21 = __s;
    }
    v62 = &__s[v20];
    if (&__s[v20] < v21)
      return 16;
    v121 = 0u;
    v122 = 0u;
    v120 = 0u;
    v63 = *(unsigned __int8 **)(v5 + 96);
    v113 = v19;
    v118 = &__s[v20];
    v109 = a4;
    if (v63)
    {
      v64 = v21;
      if (v21 < v62)
      {
        __dsta = v18;
        v107 = v8;
        v65 = v5;
        v66 = *v63;
        v67 = (char *)(__s - v21 + v20);
        v104 = &__s[v20];
        v68 = (char *)(&__s[v20] - v21);
        v64 = v21;
        do
        {
          if (*v64 == v66)
          {
            v69 = *(int *)(v65 + 104);
            if ((uint64_t)v68 >= v69 && !memcmp(v64, v63, v69))
              goto LABEL_146;
          }
          ++v64;
          --v68;
          --v67;
        }
        while (v67);
        v64 = v104;
LABEL_146:
        v5 = v65;
        v18 = __dsta;
        v62 = v118;
        v8 = v107;
      }
      if (v64 == v62)
        return 1;
    }
    v119 = v5;
    LODWORD(v120) = v8;
    *(_QWORD *)&v121 = __s;
    *((_QWORD *)&v121 + 1) = v21;
    *(_QWORD *)&v123 = 0;
    *(_QWORD *)&v122 = v62;
    v70 = (char *)malloc_type_malloc(4 * v9, 0x22B70DB9uLL);
    v124[0] = v70;
    if (!v70)
      return 12;
    v71 = (uint64_t)v18 + 1;
    v124[1] = v70;
    v72 = *(_QWORD *)(v5 + 48);
    *(_QWORD *)&v125 = &v70[v72];
    *((_QWORD *)&v125 + 1) = &v70[2 * v72];
    *((_QWORD *)&v123 + 1) = 4;
    v126 = &v70[3 * v72];
    bzero(v126, v72);
    v111 = v5;
LABEL_150:
    if (*((char **)&v121 + 1) == v21)
      v73 = 128;
    else
      v73 = *(v21 - 1);
    v74 = v125;
    v75 = v124[1];
    bzero(v124[1], *(_QWORD *)(v119 + 48));
    v75[v71] = 1;
    lstep(v119, v71, v17, (uint64_t)v75, 132, (uint64_t)v75);
    memmove((void *)v74, v75, *(_QWORD *)(v119 + 48));
    v76 = 0;
    while (1)
    {
      if (v21 == (char *)v122)
        v77 = 128;
      else
        v77 = *v21;
      v78 = v119;
      if (!memcmp(v75, (const void *)v74, *(_QWORD *)(v119 + 48)))
        v76 = v21;
      if (v73 == 128)
      {
        if ((v120 & 1) != 0)
          goto LABEL_162;
      }
      else if (v73 != 10 || (*(_BYTE *)(v78 + 40) & 8) == 0)
      {
LABEL_162:
        v79 = 0;
        v80 = 0;
        v81 = 130;
        goto LABEL_165;
      }
      v80 = *(_DWORD *)(v78 + 76);
      v79 = 129;
      v81 = 131;
LABEL_165:
      if (v77 == 128)
      {
        if ((v120 & 2) != 0)
          goto LABEL_168;
      }
      else if (v77 != 10 || (*(_BYTE *)(v78 + 40) & 8) == 0)
      {
LABEL_168:
        v81 = v79;
        goto LABEL_171;
      }
      v80 += *(_DWORD *)(v78 + 80);
LABEL_171:
      if (v80 >= 1)
      {
        v82 = v80 + 1;
        do
        {
          lstep(v119, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
          --v82;
        }
        while (v82 > 1);
      }
      if (v81 == 129)
      {
        if (v77 == 128)
        {
          v81 = 129;
        }
        else
        {
LABEL_184:
          if (v77 > 0x7Fu)
            v84 = __maskrune(v77, 0x500uLL);
          else
            v84 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v77 + 60) & 0x500;
          if (v77 == 95 || v84 != 0)
            v81 = 133;
        }
        if (v73 == 128)
          goto LABEL_199;
        v83 = v73;
        goto LABEL_194;
      }
      if (v73 == 128)
        goto LABEL_199;
      v83 = v73;
      if (v73 > 0x7Fu)
      {
        if (__maskrune(v73, 0x500uLL))
          goto LABEL_194;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v73 + 60) & 0x500) != 0)
      {
        goto LABEL_194;
      }
      if (v73 != 95 && v77 != 128)
        goto LABEL_184;
LABEL_194:
      if (v83 > 0x7F)
      {
        if (__maskrune(v83, 0x500uLL))
          goto LABEL_202;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v83 + 60) & 0x500) != 0)
      {
        goto LABEL_202;
      }
      if (v73 != 95)
      {
LABEL_199:
        v86 = v118;
LABEL_200:
        if ((v81 - 133) > 1)
          goto LABEL_205;
        goto LABEL_204;
      }
LABEL_202:
      if (v81 == 130)
      {
        v81 = 134;
        v86 = v118;
      }
      else
      {
        v86 = v118;
        if (v77 == 128)
          goto LABEL_200;
        v87 = v77 > 0x7Fu
            ? __maskrune(v77, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v77 + 60) & 0x500;
        if (v87 || v77 == 95)
          goto LABEL_200;
        v81 = 134;
      }
LABEL_204:
      lstep(v119, v71, v17, (uint64_t)v75, v81, (uint64_t)v75);
LABEL_205:
      if (v21 == v86 || v75[v17])
      {
        *((_QWORD *)&v122 + 1) = v76;
        if (!v75[v17])
        {
          free(*((void **)&v120 + 1));
          free((void *)v123);
          v15 = 1;
          goto LABEL_256;
        }
        if (!v113 && !*(_DWORD *)(v111 + 120))
          goto LABEL_251;
        v88 = lslow(&v119, v76, v86, v71, v17);
        if (!v88)
        {
          do
          {
            ++*((_QWORD *)&v122 + 1);
            v89 = lslow(&v119, *((char **)&v122 + 1), v86, v71, v17);
          }
          while (!v89);
          v88 = v89;
        }
        if (v113 == 1 && !*(_DWORD *)(v111 + 120))
        {
LABEL_245:
          v98 = &v88[-v121];
          *v109 = *((_QWORD *)&v122 + 1) - v121;
          v109[1] = v98;
          if (v113 >= 2)
          {
            v99 = v119;
            v100 = (_OWORD *)(*((_QWORD *)&v120 + 1) + 16);
            v101 = v109 + 2;
            for (i = 1; i != v113; ++i)
            {
              if (i <= *(_QWORD *)(v99 + 112))
              {
                *(_OWORD *)v101 = *v100;
              }
              else
              {
                *v101 = -1;
                v101[1] = -1;
              }
              ++v100;
              v101 += 2;
            }
          }
          goto LABEL_251;
        }
        v90 = (char *)*((_QWORD *)&v120 + 1);
        if (!*((_QWORD *)&v120 + 1))
        {
          v90 = (char *)malloc_type_malloc(16 * *(_QWORD *)(v119 + 112) + 16, 0x1000040451B5BE8uLL);
          *((_QWORD *)&v120 + 1) = v90;
          if (!v90)
            goto LABEL_263;
        }
        v91 = *(_QWORD *)(v119 + 112);
        if (v91)
        {
          v92 = v90 + 16;
          if ((unint64_t)(v91 + 1) > 2)
            v93 = v91 + 1;
          else
            v93 = 2;
          memset(v92, 255, 16 * v93 - 16);
        }
        if (!*(_DWORD *)(v111 + 120) && (BYTE1(v120) & 4) == 0)
        {
          v94 = (uint64_t)ldissect(&v119, *((char **)&v122 + 1), v88, v71, v17);
          goto LABEL_240;
        }
        v95 = *(_QWORD *)(v111 + 128);
        v96 = (void *)v123;
        if (v95 >= 1 && !(_QWORD)v123)
        {
          v96 = malloc_type_malloc(8 * v95 + 8, 0x10040436913F5uLL);
          *(_QWORD *)&v123 = v96;
          v95 = *(_QWORD *)(v111 + 128);
        }
        if (v95 >= 1 && !v96)
        {
          free(*((void **)&v120 + 1));
LABEL_263:
          v15 = 12;
          goto LABEL_256;
        }
        v97 = (unsigned __int8 *)*((_QWORD *)&v122 + 1);
        do
        {
          v94 = lbackref(&v119, v97, (unsigned __int8 *)v88, v71, v17, 0, 0);
LABEL_240:
          if (v94)
            goto LABEL_244;
          v97 = (unsigned __int8 *)*((_QWORD *)&v122 + 1);
          if ((unint64_t)v88 <= *((_QWORD *)&v122 + 1))
            break;
          v88 = lslow(&v119, *((char **)&v122 + 1), v88 - 1, v71, v17);
          v97 = (unsigned __int8 *)*((_QWORD *)&v122 + 1);
        }
        while (v88);
        v21 = (char *)(v97 + 1);
        if (v97 == (unsigned __int8 *)v86)
        {
LABEL_244:
          if (v113)
            goto LABEL_245;
LABEL_251:
          if (*((_QWORD *)&v120 + 1))
            free(*((void **)&v120 + 1));
          if ((_QWORD)v123)
            free((void *)v123);
          v15 = 0;
LABEL_256:
          free(v124[0]);
          return v15;
        }
        goto LABEL_150;
      }
      memmove(*((void **)&v74 + 1), v75, *(_QWORD *)(v119 + 48));
      memmove(v75, (const void *)v74, *(_QWORD *)(v119 + 48));
      lstep(v119, v71, v17, *((uint64_t *)&v74 + 1), v77, (uint64_t)v75);
      ++v21;
      v73 = v77;
    }
  }
  v11 = *(_QWORD *)(v5 + 56);
  v10 = *(_QWORD *)(v5 + 64);
  if ((*(_BYTE *)(v5 + 40) & 4) != 0)
    v12 = 0;
  else
    v12 = a3;
  if ((a5 & 4) != 0)
  {
    v13 = a4[1];
    v14 = &__s[*a4];
  }
  else
  {
    v13 = strlen(__s);
    v14 = __s;
  }
  v22 = &__s[v13];
  if (&__s[v13] < v14)
    return 16;
  v108 = a4;
  v122 = 0u;
  v123 = 0u;
  v120 = 0u;
  v121 = 0u;
  v23 = *(unsigned __int8 **)(v5 + 96);
  __dst = &__s[v13];
  if (v23)
  {
    v24 = v14;
    if (v14 < v22)
    {
      v116 = v11;
      v105 = v8;
      v25 = v5;
      v26 = *v23;
      v27 = (char *)(__s - v14 + v13);
      v112 = &__s[v13];
      v28 = (char *)(&__s[v13] - v14);
      v24 = v14;
      while (1)
      {
        if (*v24 == v26)
        {
          v29 = *(int *)(v25 + 104);
          if ((uint64_t)v28 >= v29 && !memcmp(v24, v23, v29))
            break;
        }
        ++v24;
        --v28;
        if (!--v27)
        {
          v24 = v112;
          break;
        }
      }
      v5 = v25;
      v22 = __dst;
      v11 = v116;
      v8 = v105;
    }
    if (v24 == v22)
      return 1;
  }
  v30 = v11 + 1;
  v119 = v5;
  LODWORD(v120) = v8;
  *(_QWORD *)&v121 = __s;
  *((_QWORD *)&v121 + 1) = v14;
  *(_QWORD *)&v122 = v22;
  v103 = v12;
  v106 = 1 << (v11 + 1);
  v110 = v5;
  *(_OWORD *)v124 = 0u;
  v125 = 0u;
LABEL_30:
  if (*((char **)&v121 + 1) == v14)
    v31 = 128;
  else
    v31 = *(v14 - 1);
  v32 = v119;
  v33 = sstep(v119, v30, v10, v106, 132, v106);
  v34 = 0;
  v35 = v33;
  v117 = v33;
  while (1)
  {
    v36 = v14 == (char *)v122 ? 128 : *v14;
    v37 = v35 == v33 ? v14 : v34;
    if (v31 == 128)
    {
      if ((v120 & 1) != 0)
        goto LABEL_43;
    }
    else if (v31 != 10 || (*(_BYTE *)(v32 + 40) & 8) == 0)
    {
LABEL_43:
      v38 = 0;
      v39 = 0;
      v40 = 130;
      goto LABEL_46;
    }
    v39 = *(_DWORD *)(v32 + 76);
    v38 = 129;
    v40 = 131;
LABEL_46:
    if (v36 == 128)
    {
      if ((v120 & 2) != 0)
        goto LABEL_49;
    }
    else if (v36 != 10 || (*(_BYTE *)(v32 + 40) & 8) == 0)
    {
LABEL_49:
      v40 = v38;
      goto LABEL_52;
    }
    v39 += *(_DWORD *)(v32 + 80);
LABEL_52:
    if (v39 >= 1)
    {
      v41 = v39 + 1;
      do
      {
        v35 = sstep(v32, v30, v10, v35, v40, v35);
        --v41;
      }
      while (v41 > 1);
    }
    if (v40 == 129)
    {
      if (v36 == 128)
      {
        v40 = 129;
      }
      else
      {
LABEL_65:
        if (v36 > 0x7Fu)
          v43 = __maskrune(v36, 0x500uLL);
        else
          v43 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v36 + 60) & 0x500;
        if (v36 == 95 || v43 != 0)
          v40 = 133;
      }
      if (v31 == 128)
        goto LABEL_83;
      v42 = v31;
      goto LABEL_75;
    }
    if (v31 == 128)
      goto LABEL_83;
    v42 = v31;
    if (v31 > 0x7Fu)
    {
      if (__maskrune(v31, 0x500uLL))
        goto LABEL_75;
    }
    else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v31 + 60) & 0x500) != 0)
    {
      goto LABEL_75;
    }
    if (v31 != 95 && v36 != 128)
      goto LABEL_65;
LABEL_75:
    if (v42 > 0x7F)
    {
      if (!__maskrune(v42, 0x500uLL))
      {
LABEL_79:
        if (v31 != 95)
          goto LABEL_83;
      }
    }
    else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v42 + 60) & 0x500) == 0)
    {
      goto LABEL_79;
    }
    if (v40 == 130
      || v36 != 128
      && (v36 > 0x7Fu
        ? (v46 = __maskrune(v36, 0x500uLL))
        : (v46 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v36 + 60) & 0x500),
          !v46 && v36 != 95))
    {
      v40 = 134;
LABEL_84:
      v35 = sstep(v119, v30, v10, v35, v40, v35);
      goto LABEL_85;
    }
LABEL_83:
    if ((v40 - 133) <= 1)
      goto LABEL_84;
LABEL_85:
    v34 = v37;
    v33 = v117;
    v45 = v35 & (1 << v10);
    if (v14 == __dst || v45)
      break;
    v32 = v119;
    v35 = sstep(v119, v30, v10, v35, v36, v117);
    ++v14;
    v31 = v36;
  }
  *((_QWORD *)&v122 + 1) = v34;
  if (!v45)
  {
    free(*((void **)&v120 + 1));
    free((void *)v123);
    return 1;
  }
  if (!v103 && !*(_DWORD *)(v110 + 120))
    goto LABEL_130;
  v47 = sslow(&v119, v34, __dst, v30, v10);
  if (!v47)
  {
    do
    {
      ++*((_QWORD *)&v122 + 1);
      v48 = sslow(&v119, *((char **)&v122 + 1), __dst, v30, v10);
    }
    while (!v48);
    v47 = v48;
  }
  if (v103 == 1 && !*(_DWORD *)(v110 + 120))
    goto LABEL_124;
  v49 = (char *)*((_QWORD *)&v120 + 1);
  if (!*((_QWORD *)&v120 + 1))
  {
    v49 = (char *)malloc_type_malloc(16 * *(_QWORD *)(v119 + 112) + 16, 0x1000040451B5BE8uLL);
    *((_QWORD *)&v120 + 1) = v49;
    if (!v49)
      return 12;
  }
  v50 = *(_QWORD *)(v119 + 112);
  if (v50)
  {
    v51 = v49 + 16;
    if ((unint64_t)(v50 + 1) > 2)
      v52 = v50 + 1;
    else
      v52 = 2;
    memset(v51, 255, 16 * v52 - 16);
  }
  if (!*(_DWORD *)(v110 + 120) && (BYTE1(v120) & 4) == 0)
  {
    v53 = (uint64_t)sdissect(&v119, *((char **)&v122 + 1), v47, v30, v10);
    goto LABEL_119;
  }
  v54 = *(_QWORD *)(v110 + 128);
  v55 = (void *)v123;
  if (v54 >= 1 && !(_QWORD)v123)
  {
    v55 = malloc_type_malloc(8 * v54 + 8, 0x10040436913F5uLL);
    *(_QWORD *)&v123 = v55;
    v54 = *(_QWORD *)(v110 + 128);
  }
  if (v54 >= 1 && !v55)
  {
    free(*((void **)&v120 + 1));
    return 12;
  }
  v56 = (unsigned __int8 *)*((_QWORD *)&v122 + 1);
  while (1)
  {
    v53 = sbackref(&v119, v56, (unsigned __int8 *)v47, v30, v10, 0, 0);
LABEL_119:
    if (v53)
      break;
    v56 = (unsigned __int8 *)*((_QWORD *)&v122 + 1);
    if ((unint64_t)v47 > *((_QWORD *)&v122 + 1))
    {
      v47 = sslow(&v119, *((char **)&v122 + 1), v47 - 1, v30, v10);
      v56 = (unsigned __int8 *)*((_QWORD *)&v122 + 1);
      if (v47)
        continue;
    }
    v14 = (char *)(v56 + 1);
    if (v56 != (unsigned __int8 *)__dst)
      goto LABEL_30;
    break;
  }
  if (v103)
  {
LABEL_124:
    v57 = &v47[-v121];
    *v108 = *((_QWORD *)&v122 + 1) - v121;
    v108[1] = v57;
    if (v103 >= 2)
    {
      v58 = v119;
      v59 = (_OWORD *)(*((_QWORD *)&v120 + 1) + 16);
      v60 = v108 + 2;
      for (j = 1; j != v103; ++j)
      {
        if (j <= *(_QWORD *)(v58 + 112))
        {
          *(_OWORD *)v60 = *v59;
        }
        else
        {
          *v60 = -1;
          v60[1] = -1;
        }
        ++v59;
        v60 += 2;
      }
    }
  }
LABEL_130:
  if (*((_QWORD *)&v120 + 1))
    free(*((void **)&v120 + 1));
  if ((_QWORD)v123)
    free((void *)v123);
  return 0;
}

char *sslow(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  unint64_t v25;

  v6 = a4;
  if (a4 >= a5)
  {
LABEL_12:
    v25 = a1[12];
    if (a2 == (char *)a1[4])
      v11 = 128;
    else
      v11 = *(a2 - 1);
    v12 = *a1;
    v13 = sstep(*a1, v6, a5, 1 << v6, 132, 1 << v6);
    v14 = 0;
    v15 = a1;
    while (1)
    {
      if (a2 == (char *)v15[5])
        v16 = 128;
      else
        v16 = *a2;
      if (v11 == 128)
      {
        if ((v15[1] & 1) != 0)
          goto LABEL_22;
      }
      else if (v11 != 10 || (*(_BYTE *)(v12 + 40) & 8) == 0)
      {
LABEL_22:
        v17 = 0;
        v18 = 0;
        v19 = 130;
        goto LABEL_25;
      }
      v18 = *(_DWORD *)(v12 + 76);
      v17 = 129;
      v19 = 131;
LABEL_25:
      if (v16 == 128)
      {
        if ((v15[1] & 2) != 0)
          goto LABEL_28;
      }
      else if (v16 != 10 || (*(_BYTE *)(v12 + 40) & 8) == 0)
      {
LABEL_28:
        v19 = v17;
        goto LABEL_31;
      }
      v18 += *(_DWORD *)(v12 + 80);
LABEL_31:
      if (v18 >= 1)
      {
        v20 = v18 + 1;
        do
        {
          v13 = sstep(v12, v6, a5, v13, v19, v13);
          --v20;
        }
        while (v20 > 1);
      }
      if (v19 == 129)
      {
        v15 = a1;
        if (v16 == 128)
        {
          v19 = 129;
        }
        else
        {
LABEL_44:
          if (v16 > 0x7Fu)
            v22 = __maskrune(v16, 0x500uLL);
          else
            v22 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v16 + 60) & 0x500;
          if (v16 == 95 || v22 != 0)
            v19 = 133;
        }
        if (v11 == 128)
          goto LABEL_59;
        v21 = v11;
        goto LABEL_54;
      }
      v15 = a1;
      if (v11 == 128)
        goto LABEL_59;
      v21 = v11;
      if (v11 > 0x7Fu)
      {
        if (__maskrune(v11, 0x500uLL))
          goto LABEL_54;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v11 + 60) & 0x500) != 0)
      {
        goto LABEL_54;
      }
      if (v11 != 95 && v16 != 128)
        goto LABEL_44;
LABEL_54:
      if (v21 > 0x7F)
      {
        if (__maskrune(v21, 0x500uLL))
          goto LABEL_61;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v21 + 60) & 0x500) != 0)
      {
        goto LABEL_61;
      }
      if (v11 != 95)
        goto LABEL_59;
LABEL_61:
      if (v19 == 130)
        goto LABEL_62;
      if (v16 != 128)
      {
        if (v16 > 0x7Fu)
        {
          if (__maskrune(v16, 0x500uLL))
            goto LABEL_59;
        }
        else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v16 + 60) & 0x500) != 0)
        {
          goto LABEL_59;
        }
        if (v16 != 95)
        {
LABEL_62:
          v19 = 134;
LABEL_63:
          v13 = sstep(*v15, v6, a5, v13, v19, v13);
          goto LABEL_64;
        }
      }
LABEL_59:
      if ((v19 - 133) <= 1)
        goto LABEL_63;
LABEL_64:
      if ((v13 & (1 << a5)) != 0)
        v14 = a2;
      if (a2 == a3 || v13 == v25)
        return v14;
      v12 = *v15;
      v13 = sstep(*v15, v6, a5, v13, v16, v25);
      ++a2;
      v11 = v16;
    }
  }
  while (1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v6);
    v9 = v8 & 0xF8000000;
    if ((v8 & 0xF8000000) == 0x70000000 || v9 == 1744830464)
      goto LABEL_10;
    if (v9 != 0x10000000)
      goto LABEL_12;
    if (a2 == a3 || *a2 != (char)v8)
      return 0;
    ++a2;
LABEL_10:
    if (a5 == ++v6)
    {
      v6 = a5;
      goto LABEL_12;
    }
  }
}

char *sdissect(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a4 < a5)
  {
    v7 = a4;
    do
    {
      v10 = v7;
      v11 = *(_QWORD *)(*a1 + 8);
      v12 = *(_QWORD *)(v11 + 8 * v7);
      v13 = v12 & 0xF8000000;
      if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
      {
        v15 = (v12 & 0x7FFFFFF) + v7;
      }
      else
      {
        v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
        v15 = v7;
        if (!v16)
        {
          v17 = *(_QWORD *)(v11 + 8 * v7);
          v15 = v7;
          do
          {
            v15 += v17 & 0x7FFFFFF;
            v17 = *(_QWORD *)(v11 + 8 * v15);
          }
          while ((v17 & 0xF8000000) != 0x90000000);
        }
      }
      v7 = v15 + 1;
      switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
        case 4uLL:
        case 5uLL:
          ++a2;
          break;
        case 8uLL:
          v18 = a1;
          v19 = a2;
          v20 = a3;
          while (1)
          {
            v21 = sslow(v18, v19, v20, v10, v15 + 1);
            if (sslow(a1, v21, a3, v15 + 1, a5) == a3)
              break;
            v20 = sstep_back(*a1, a2, v21, v15 + 1, a5);
            v18 = a1;
            v19 = a2;
          }
          v35 = v10 + 1;
          v36 = a2;
          do
          {
            v37 = v36;
            v36 = a2;
            v38 = sslow(a1, a2, v21, v35, v15);
            a2 = v38;
          }
          while (v38 && v38 != v36);
          if (v38)
            v39 = v36;
          else
            v39 = v37;
          if (v38)
            v40 = v38;
          else
            v40 = v36;
          sdissect(a1, v39, v40, v35, v15);
          a2 = v21;
          break;
        case 0xAuLL:
          v22 = a1;
          v23 = a2;
          v24 = a3;
          while (1)
          {
            v25 = sslow(v22, v23, v24, v10, v15 + 1);
            if (sslow(a1, v25, a3, v15 + 1, a5) == a3)
              break;
            v24 = sstep_back(*a1, a2, v25, v15 + 1, a5);
            v22 = a1;
            v23 = a2;
          }
          v41 = v10 + 1;
          if (sslow(a1, a2, v25, v41, v15))
            sdissect(a1, a2, v25, v41, v15);
          a2 = v25;
          break;
        case 0xCuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
          break;
        case 0xDuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
          break;
        case 0xEuLL:
          v26 = a3;
          do
          {
            v27 = sslow(a1, a2, v26, v10, v7);
            v28 = sslow(a1, v27, a3, v7, a5);
            v26 = v27 - 1;
          }
          while (v28 != a3);
          v29 = v10 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
          v30 = v10 + 1;
          while (sslow(a1, a2, v27, v30, v29) != v27)
          {
            v31 = *(_QWORD *)(*a1 + 8);
            v32 = *(_QWORD *)(v31 + 8 * (v29 + 1)) & 0x7FFFFFFLL;
            v33 = v32 + v29 + 1;
            v34 = v32 + v29;
            v30 = v29 + 2;
            if ((*(_QWORD *)(v31 + 8 * v33) & 0xF8000000) == 0x88000000)
              v29 = v34;
            else
              v29 = v33;
          }
          sdissect(a1, a2, v27, v30, v29);
          a2 = v27;
          break;
        default:
          break;
      }
    }
    while (v7 < a5);
  }
  return a2;
}

uint64_t sbackref(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3)
      return (uint64_t)a2;
    else
      return 0;
  }
  v12 = a4;
LABEL_3:
  v14 = v12;
  while (2)
  {
    v15 = *a1;
    v16 = *(_QWORD *)(*a1 + 8);
    v17 = *(_QWORD *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          v26 = (char)*a2++;
          if (v26 == (char)v17)
            goto LABEL_70;
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0)
          goto LABEL_70;
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0)
          goto LABEL_70;
        if (a2 >= v28)
          return 0;
        v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(_BYTE *)(v15 + 40) & 8) == 0)
          return 0;
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3)
          return 0;
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3)
          return 0;
        v29 = *(_QWORD *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        v30 = *a2++;
        if ((*(_BYTE *)(v29 + 8) & *(_BYTE *)(*(_QWORD *)v29 + v30)) == 0)
          return 0;
        goto LABEL_70;
      case 0xAuLL:
      case 0x10uLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        v31 = *(_QWORD *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          v31 = *(_QWORD *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(_BYTE *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32)
          return 0;
        v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0)
          v34 = __maskrune(*(a2 - 1), 0x500uLL);
        else
          v34 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v33 + 60) & 0x500;
        result = 0;
        if ((_DWORD)v33 == 95 || v34)
          return result;
LABEL_58:
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0)
          goto LABEL_63;
        if (a2 >= v35)
          return 0;
        v36 = *a2;
        if ((_DWORD)v36 == 10)
        {
          if ((*(_BYTE *)(v15 + 40) & 8) != 0)
            goto LABEL_63;
LABEL_54:
          v37 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0)
          goto LABEL_54;
        v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        result = 0;
        if ((_DWORD)v36 == 95 || v37)
          return result;
LABEL_63:
        if ((unint64_t)a2 <= a1[4])
          return 0;
        v38 = (char)*(a2 - 1);
LABEL_65:
        v39 = v38;
        v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40)
          return 0;
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        v12 = v14 + 1;
        v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          result = sbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result)
            return result;
          v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5)
            goto LABEL_78;
          continue;
        }
        result = 0;
        switch(v18)
        {
          case 0uLL:
            v20 = v17 & 0x7FFFFFF;
            v21 = a1[2];
            v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
            if (v22 == -1)
              return 0;
            v23 = *(_QWORD *)(v21 + 16 * v20);
            v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100)
                return 0;
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24))
              return 0;
            do
              v25 = *(_QWORD *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(_QWORD *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(_QWORD *)(v41 + 8 * a6) = a2;
              result = sbackref(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result)
                return result;
            }
            --a6;
LABEL_77:
            if (v12 >= a5)
              goto LABEL_78;
            goto LABEL_3;
          case 6uLL:
            v42 = 16 * (v17 & 0x7FFFFFF);
            v43 = a1[2];
            v44 = *(_QWORD *)(v43 + v42);
            *(_QWORD *)(v43 + v42) = &a2[-a1[3]];
            result = sbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + v42) = v44;
            return result;
          case 7uLL:
            v45 = v17 & 0x7FFFFFF;
            v46 = a1[2] + 16 * v45;
            v47 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = &a2[-a1[3]];
            result = sbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + 16 * v45 + 8) = v47;
            return result;
          case 8uLL:
            result = sbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
            if (result)
              return result;
            v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            break;
          default:
            return result;
        }
        while (1)
        {
          v49 = *(_QWORD *)(*a1 + 8);
          if ((*(_QWORD *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000)
            break;
          v50 = v48 + 2;
          v51 = *(_QWORD *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          v52 = v51 + v48 + 1;
          v53 = v51 + v48;
          if ((*(_QWORD *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000)
            v48 = v53;
          else
            v48 = v52;
          result = sbackref(a1, a2, a3, v50, a5, a6, a7);
          if (result)
            return result;
        }
        return 0;
    }
  }
}

unint64_t sstep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, unint64_t a6)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != a3)
  {
    v6 = 1 << a2;
    v7 = *(_QWORD *)(a1 + 8);
    do
    {
      v8 = *(_QWORD *)(v7 + 8 * a2);
      switch(((unint64_t)(v8 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          v11 = a5 == (char)v8;
          goto LABEL_29;
        case 2uLL:
          v11 = (a5 & 0xFFFFFFFD) == 129;
          goto LABEL_29;
        case 3uLL:
          v11 = (a5 & 0xFFFFFFFE) == 130;
          goto LABEL_29;
        case 4uLL:
          if (a5 <= 127)
            a6 |= 2 * (v6 & a4);
          break;
        case 5uLL:
          if (a5 > 127)
            break;
          v12 = *(_QWORD *)(a1 + 24) + 32 * (v8 & 0x7FFFFFF);
          if ((*(_BYTE *)(v12 + 8) & *(_BYTE *)(*(_QWORD *)v12 + a5)) == 0)
            break;
          v9 = v6 & a4;
LABEL_5:
          a6 |= 2 * v9;
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          v9 = a6 & v6;
          goto LABEL_5;
        case 9uLL:
          v13 = a6 | (2 * (a6 & v6));
          v14 = (v6 >> v8) & v13;
          a6 = ((v13 & v6) >> v8) | v13;
          if (v14)
            v15 = 1;
          else
            v15 = (a6 & (v6 >> v8)) == 0;
          if (!v15)
          {
            a2 += ~(unint64_t)(v8 & 0x7FFFFFF);
            v6 = 1 << a2;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          a6 |= 2 * (a6 & v6);
          goto LABEL_7;
        case 0xFuLL:
          if ((a6 & v6) == 0)
            break;
          v16 = *(_QWORD *)(v7 + 8 * a2 + 8);
          if ((v16 & 0xF8000000) == 0x90000000)
          {
            LOBYTE(v17) = 1;
          }
          else
          {
            v17 = 1;
            do
            {
              v17 += v16 & 0x7FFFFFF;
              v16 = *(_QWORD *)(v7 + 8 * (v17 + a2));
            }
            while ((v16 & 0xF8000000) != 0x90000000);
          }
          v10 = (a6 & v6) << v17;
          goto LABEL_35;
        case 0x10uLL:
          a6 |= 2 * (a6 & v6);
          v8 &= 0x7FFFFFFu;
          if ((*(_QWORD *)(v7 + 8 * (v8 + a2)) & 0xF8000000) == 0x90000000)
            break;
LABEL_7:
          v10 = (a6 & v6) << v8;
LABEL_35:
          a6 |= v10;
          break;
        case 0x12uLL:
          v11 = a5 == 133;
          goto LABEL_29;
        case 0x13uLL:
          v11 = a5 == 134;
LABEL_29:
          if (v11)
            a6 |= 2 * (v6 & a4);
          break;
        default:
          break;
      }
      ++a2;
      v6 *= 2;
    }
    while (a2 != a3);
  }
  return a6;
}

char *sstep_back(uint64_t a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  char *result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;

  result = a3 - 1;
  if (a4 < a5)
  {
    v7 = *(_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 8 * a4);
      if ((v8 & 0xF8000000) != 0x70000000)
        break;
      if (a5 == ++a4)
        return result;
    }
    if ((v8 & 0xF8000000) == 0x10000000)
    {
      if (result == a2)
        return a2;
      v9 = a3;
      v10 = v7 + 8 * a4;
      while (1)
      {
        if ((char)v8 == *(v9 - 1))
        {
          if (a4 + 1 >= a5)
            return result;
          v11 = *(_QWORD *)(v10 + 8);
          if ((v11 & 0xF8000000) != 0x10000000 || v9 >= a3)
            return v9 - 1;
          if (*v9 == (char)v11)
            return result;
        }
        --result;
        v13 = v9 - 2;
        --v9;
        if (v13 == a2)
          return a2;
      }
    }
  }
  return result;
}

char *lslow(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  int v10;
  void *v12;
  int v13;
  char *v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  const void *v25;
  size_t v26;
  int v27;
  void *__dst;
  void *__s2;

  v6 = a4;
  if (a4 >= a5)
  {
LABEL_12:
    v12 = (void *)a1[10];
    __dst = (void *)a1[12];
    __s2 = (void *)a1[13];
    if (a2 == (char *)a1[4])
      v13 = 128;
    else
      v13 = *(a2 - 1);
    bzero(v12, *(_QWORD *)(*a1 + 48));
    *((_BYTE *)v12 + v6) = 1;
    lstep(*a1, v6, a5, (uint64_t)v12, 132, (uint64_t)v12);
    v14 = 0;
    while (1)
    {
      if (a2 == (char *)a1[5])
        v15 = 128;
      else
        v15 = *a2;
      if (v13 == 128)
      {
        if ((a1[1] & 1) == 0)
        {
          v16 = *a1;
LABEL_25:
          v17 = *(_DWORD *)(v16 + 76);
          v18 = 129;
          v19 = 131;
          goto LABEL_27;
        }
      }
      else if (v13 == 10)
      {
        v16 = *a1;
        if ((*(_BYTE *)(*a1 + 40) & 8) != 0)
          goto LABEL_25;
      }
      v18 = 0;
      v17 = 0;
      v19 = 130;
LABEL_27:
      if (v15 == 128)
      {
        if ((a1[1] & 2) == 0)
        {
          v20 = *a1;
LABEL_33:
          v17 += *(_DWORD *)(v20 + 80);
          goto LABEL_35;
        }
      }
      else if (v15 == 10)
      {
        v20 = *a1;
        if ((*(_BYTE *)(*a1 + 40) & 8) != 0)
          goto LABEL_33;
      }
      v19 = v18;
LABEL_35:
      if (v17 >= 1)
      {
        v21 = v17 + 1;
        do
        {
          lstep(*a1, v6, a5, (uint64_t)v12, v19, (uint64_t)v12);
          --v21;
        }
        while (v21 > 1);
      }
      if (v19 == 129)
      {
        if (v15 == 128)
        {
          v19 = 129;
        }
        else
        {
LABEL_48:
          if (v15 > 0x7Fu)
            v23 = __maskrune(v15, 0x500uLL);
          else
            v23 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v15 + 60) & 0x500;
          if (v15 == 95 || v23 != 0)
            v19 = 133;
        }
        if (v13 == 128)
          goto LABEL_63;
        v22 = v13;
        goto LABEL_58;
      }
      if (v13 == 128)
        goto LABEL_63;
      v22 = v13;
      if (v13 > 0x7Fu)
      {
        if (__maskrune(v13, 0x500uLL))
          goto LABEL_58;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v13 + 60) & 0x500) != 0)
      {
        goto LABEL_58;
      }
      if (v13 != 95 && v15 != 128)
        goto LABEL_48;
LABEL_58:
      if (v22 > 0x7F)
      {
        if (__maskrune(v22, 0x500uLL))
          goto LABEL_66;
      }
      else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v22 + 60) & 0x500) != 0)
      {
        goto LABEL_66;
      }
      if (v13 != 95)
      {
LABEL_63:
        v25 = __s2;
        goto LABEL_64;
      }
LABEL_66:
      if (v19 == 130)
      {
        v19 = 134;
        v25 = __s2;
LABEL_68:
        lstep(*a1, v6, a5, (uint64_t)v12, v19, (uint64_t)v12);
        goto LABEL_69;
      }
      v25 = __s2;
      if (v15 != 128)
      {
        if (v15 > 0x7Fu)
        {
          if (__maskrune(v15, 0x500uLL))
            goto LABEL_64;
        }
        else if ((*(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v15 + 60) & 0x500) != 0)
        {
          goto LABEL_64;
        }
        if (v15 != 95)
        {
          v19 = 134;
          goto LABEL_68;
        }
      }
LABEL_64:
      if ((v19 - 133) <= 1)
        goto LABEL_68;
LABEL_69:
      if (*((_BYTE *)v12 + a5))
        v14 = a2;
      v26 = *(_QWORD *)(*a1 + 48);
      v27 = memcmp(v12, v25, v26);
      if (a2 == a3 || !v27)
        return v14;
      memmove(__dst, v12, v26);
      memmove(v12, v25, *(_QWORD *)(*a1 + 48));
      lstep(*a1, v6, a5, (uint64_t)__dst, v15, (uint64_t)v12);
      ++a2;
      v13 = v15;
    }
  }
  while (1)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v6);
    v10 = v9 & 0xF8000000;
    if ((v9 & 0xF8000000) == 0x70000000 || v10 == 1744830464)
      goto LABEL_10;
    if (v10 != 0x10000000)
      goto LABEL_12;
    if (a2 == a3 || *a2 != (char)v9)
      return 0;
    ++a2;
LABEL_10:
    if (a5 == ++v6)
    {
      v6 = a5;
      goto LABEL_12;
    }
  }
}

char *ldissect(uint64_t *a1, char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  if (a4 < a5)
  {
    v7 = a4;
    do
    {
      v10 = v7;
      v11 = *(_QWORD *)(*a1 + 8);
      v12 = *(_QWORD *)(v11 + 8 * v7);
      v13 = v12 & 0xF8000000;
      if ((v12 & 0xF8000000) == 0x48000000 || v13 == 1476395008)
      {
        v15 = (v12 & 0x7FFFFFF) + v7;
      }
      else
      {
        v16 = v13 != 2013265920 || (v12 & 0xF8000000) == 2415919104;
        v15 = v7;
        if (!v16)
        {
          v17 = *(_QWORD *)(v11 + 8 * v7);
          v15 = v7;
          do
          {
            v15 += v17 & 0x7FFFFFF;
            v17 = *(_QWORD *)(v11 + 8 * v15);
          }
          while ((v17 & 0xF8000000) != 0x90000000);
        }
      }
      v7 = v15 + 1;
      switch(((unint64_t)(v12 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
        case 4uLL:
        case 5uLL:
          ++a2;
          break;
        case 8uLL:
          v18 = a1;
          v19 = a2;
          v20 = a3;
          while (1)
          {
            v21 = lslow(v18, v19, v20, v10, v15 + 1);
            if (lslow(a1, v21, a3, v15 + 1, a5) == a3)
              break;
            v20 = sstep_back(*a1, a2, v21, v15 + 1, a5);
            v18 = a1;
            v19 = a2;
          }
          v35 = v10 + 1;
          v36 = a2;
          do
          {
            v37 = v36;
            v36 = a2;
            v38 = lslow(a1, a2, v21, v35, v15);
            a2 = v38;
          }
          while (v38 && v38 != v36);
          if (v38)
            v39 = v36;
          else
            v39 = v37;
          if (v38)
            v40 = v38;
          else
            v40 = v36;
          ldissect(a1, v39, v40, v35, v15);
          a2 = v21;
          break;
        case 0xAuLL:
          v22 = a1;
          v23 = a2;
          v24 = a3;
          while (1)
          {
            v25 = lslow(v22, v23, v24, v10, v15 + 1);
            if (lslow(a1, v25, a3, v15 + 1, a5) == a3)
              break;
            v24 = sstep_back(*a1, a2, v25, v15 + 1, a5);
            v22 = a1;
            v23 = a2;
          }
          v41 = v10 + 1;
          if (lslow(a1, a2, v25, v41, v15))
            ldissect(a1, a2, v25, v41, v15);
          a2 = v25;
          break;
        case 0xCuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF)) = &a2[-a1[3]];
          break;
        case 0xDuLL:
          *(_QWORD *)(a1[2] + 16 * (v12 & 0x7FFFFFF) + 8) = &a2[-a1[3]];
          break;
        case 0xEuLL:
          v26 = a3;
          do
          {
            v27 = lslow(a1, a2, v26, v10, v7);
            v28 = lslow(a1, v27, a3, v7, a5);
            v26 = v27 - 1;
          }
          while (v28 != a3);
          v29 = v10 + (*(_QWORD *)(*(_QWORD *)(*a1 + 8) + 8 * v10) & 0x7FFFFFFLL) - 1;
          v30 = v10 + 1;
          while (lslow(a1, a2, v27, v30, v29) != v27)
          {
            v31 = *(_QWORD *)(*a1 + 8);
            v32 = *(_QWORD *)(v31 + 8 * (v29 + 1)) & 0x7FFFFFFLL;
            v33 = v32 + v29 + 1;
            v34 = v32 + v29;
            v30 = v29 + 2;
            if ((*(_QWORD *)(v31 + 8 * v33) & 0xF8000000) == 0x88000000)
              v29 = v34;
            else
              v29 = v33;
          }
          ldissect(a1, a2, v27, v30, v29);
          a2 = v27;
          break;
        default:
          break;
      }
    }
    while (v7 < a5);
  }
  return a2;
}

uint64_t lbackref(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  uint64_t v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (a4 >= a5)
  {
LABEL_78:
    if (a2 == a3)
      return (uint64_t)a2;
    else
      return 0;
  }
  v12 = a4;
LABEL_3:
  v14 = v12;
  while (2)
  {
    v15 = *a1;
    v16 = *(_QWORD *)(*a1 + 8);
    v17 = *(_QWORD *)(v16 + 8 * v14);
    switch(((unint64_t)(v17 & 0xF8000000) - 0x10000000) >> 27)
    {
      case 0uLL:
        if (a2 != a3)
        {
          v26 = (char)*a2++;
          if (v26 == (char)v17)
            goto LABEL_70;
        }
        return 0;
      case 1uLL:
        if (a2 == (unsigned __int8 *)a1[4] && (a1[1] & 1) == 0)
          goto LABEL_70;
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v27 = *(a2 - 1);
        goto LABEL_28;
      case 2uLL:
        v28 = (unsigned __int8 *)a1[5];
        if (a2 == v28 && (a1[1] & 2) == 0)
          goto LABEL_70;
        if (a2 >= v28)
          return 0;
        v27 = *a2;
LABEL_28:
        if (v27 != 10 || (*(_BYTE *)(v15 + 40) & 8) == 0)
          return 0;
        goto LABEL_70;
      case 3uLL:
        if (a2 == a3)
          return 0;
        ++a2;
        goto LABEL_70;
      case 4uLL:
        if (a2 == a3)
          return 0;
        v29 = *(_QWORD *)(v15 + 24) + 32 * (v17 & 0x7FFFFFF);
        v30 = *a2++;
        if ((*(_BYTE *)(v29 + 8) & *(_BYTE *)(*(_QWORD *)v29 + v30)) == 0)
          return 0;
        goto LABEL_70;
      case 0xAuLL:
      case 0x10uLL:
        goto LABEL_70;
      case 0xEuLL:
        ++v14;
        v31 = *(_QWORD *)(v16 + 8 * v14);
        do
        {
          v14 += v31 & 0x7FFFFFF;
          v31 = *(_QWORD *)(v16 + 8 * v14);
        }
        while ((v31 & 0xF8000000) != 0x90000000);
        goto LABEL_70;
      case 0x11uLL:
        v32 = (unsigned __int8 *)a1[4];
        if (a2 == v32 && (a1[1] & 1) == 0
          || (unint64_t)a2 < a1[5] && *(a2 - 1) == 10 && (*(_BYTE *)(v15 + 40) & 8) != 0)
        {
          goto LABEL_58;
        }
        if (a2 <= v32)
          return 0;
        v33 = *(a2 - 1);
        if ((char)*(a2 - 1) < 0)
          v34 = __maskrune(*(a2 - 1), 0x500uLL);
        else
          v34 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v33 + 60) & 0x500;
        result = 0;
        if ((_DWORD)v33 == 95 || v34)
          return result;
LABEL_58:
        if ((unint64_t)a2 >= a1[5])
          return 0;
        v38 = (char)*a2;
        goto LABEL_65;
      case 0x12uLL:
        v35 = (unsigned __int8 *)a1[5];
        if (a2 == v35 && (a1[1] & 2) == 0)
          goto LABEL_63;
        if (a2 >= v35)
          return 0;
        v36 = *a2;
        if ((_DWORD)v36 == 10)
        {
          if ((*(_BYTE *)(v15 + 40) & 8) != 0)
            goto LABEL_63;
LABEL_54:
          v37 = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v36 + 60) & 0x500;
          goto LABEL_61;
        }
        if ((v36 & 0x80) == 0)
          goto LABEL_54;
        v37 = __maskrune(*a2, 0x500uLL);
LABEL_61:
        result = 0;
        if ((_DWORD)v36 == 95 || v37)
          return result;
LABEL_63:
        if ((unint64_t)a2 <= a1[4])
          return 0;
        v38 = (char)*(a2 - 1);
LABEL_65:
        v39 = v38;
        v40 = v38 < 0
            ? __maskrune(v38, 0x500uLL)
            : *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * v38 + 60) & 0x500;
        if (v39 != 95 && !v40)
          return 0;
LABEL_70:
        ++v14;
        goto LABEL_71;
      default:
        v12 = v14 + 1;
        v18 = ((unint64_t)(v17 & 0xF8000000) - 939524096) >> 27;
        if (v18 == 4)
        {
          result = lbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
          if (result)
            return result;
          v14 = (v17 & 0x7FFFFFF) + v12;
LABEL_71:
          if (v14 >= a5)
            goto LABEL_78;
          continue;
        }
        result = 0;
        switch(v18)
        {
          case 0uLL:
            v20 = v17 & 0x7FFFFFF;
            v21 = a1[2];
            v22 = *(_QWORD *)(v21 + 16 * v20 + 8);
            if (v22 == -1)
              return 0;
            v23 = *(_QWORD *)(v21 + 16 * v20);
            v24 = v22 - v23;
            if (v22 == v23)
            {
              if ((int)a7 > 100)
                return 0;
              a7 = (a7 + 1);
            }
            if (a2 > &a3[-v24] || memcmp(a2, (const void *)(a1[3] + v23), v24))
              return 0;
            do
              v25 = *(_QWORD *)(v16 + 8 * v14++);
            while (v25 != (v20 | 0x40000000));
            a2 += v24;
            goto LABEL_71;
          case 2uLL:
            ++a6;
            *(_QWORD *)(a1[7] + 8 * a6) = a2;
            goto LABEL_77;
          case 3uLL:
            v41 = a1[7];
            if (a2 != *(unsigned __int8 **)(v41 + 8 * a6))
            {
              *(_QWORD *)(v41 + 8 * a6) = a2;
              result = lbackref(a1, a2, a3, v12 - (v17 & 0x7FFFFFF), a5, a6, a7);
              if (result)
                return result;
            }
            --a6;
LABEL_77:
            if (v12 >= a5)
              goto LABEL_78;
            goto LABEL_3;
          case 6uLL:
            v42 = 16 * (v17 & 0x7FFFFFF);
            v43 = a1[2];
            v44 = *(_QWORD *)(v43 + v42);
            *(_QWORD *)(v43 + v42) = &a2[-a1[3]];
            result = lbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + v42) = v44;
            return result;
          case 7uLL:
            v45 = v17 & 0x7FFFFFF;
            v46 = a1[2] + 16 * v45;
            v47 = *(_QWORD *)(v46 + 8);
            *(_QWORD *)(v46 + 8) = &a2[-a1[3]];
            result = lbackref(a1, a2, a3, v12, a5, a6, a7);
            if (!result)
              *(_QWORD *)(a1[2] + 16 * v45 + 8) = v47;
            return result;
          case 8uLL:
            result = lbackref(a1, a2, a3, v14 + 1, a5, a6, a7);
            if (result)
              return result;
            v48 = v14 + (v17 & 0x7FFFFFF) - 1;
            break;
          default:
            return result;
        }
        while (1)
        {
          v49 = *(_QWORD *)(*a1 + 8);
          if ((*(_QWORD *)(v49 + 8 * v48) & 0xF8000000) == 0x90000000)
            break;
          v50 = v48 + 2;
          v51 = *(_QWORD *)(v49 + 8 * (v48 + 1)) & 0x7FFFFFFLL;
          v52 = v51 + v48 + 1;
          v53 = v51 + v48;
          if ((*(_QWORD *)(v49 + 8 * v52) & 0xF8000000) == 0x88000000)
            v48 = v53;
          else
            v48 = v52;
          result = lbackref(a1, a2, a3, v50, a5, a6, a7);
          if (result)
            return result;
        }
        return 0;
    }
  }
}

uint64_t lstep(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  char v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  if (a2 != a3)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(v8 + 8 * v7);
      switch(((unint64_t)(v9 & 0xF8000000) - 0x8000000) >> 27)
      {
        case 1uLL:
          if (a5 == (char)v9)
            goto LABEL_32;
          break;
        case 2uLL:
          if ((a5 & 0xFFFFFFFD) == 0x81)
            goto LABEL_32;
          break;
        case 3uLL:
          if ((a5 & 0xFFFFFFFE) == 0x82)
            goto LABEL_32;
          break;
        case 4uLL:
          if (a5 <= 127)
            goto LABEL_32;
          break;
        case 5uLL:
          if (a5 <= 127)
          {
            v13 = *(_QWORD *)(a1 + 24) + 32 * (v9 & 0x7FFFFFF);
            if ((*(_BYTE *)(v13 + 8) & *(_BYTE *)(*(_QWORD *)v13 + a5)) != 0)
              goto LABEL_32;
          }
          break;
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xBuLL:
        case 0xCuLL:
        case 0xDuLL:
        case 0x11uLL:
          *(_BYTE *)(a6 + a2 + 1) |= *(_BYTE *)(a6 + a2);
          break;
        case 9uLL:
          v14 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v14;
          v15 = v9 & 0x7FFFFFF;
          v16 = *(unsigned __int8 *)(a6 + a2 - v15);
          v17 = v16 | v14;
          *(_BYTE *)(a6 + a2 - v15) = v17;
          if (v16)
            v18 = 1;
          else
            v18 = v17 == 0;
          if (!v18)
          {
            v7 += ~v15;
            a2 = v7;
          }
          break;
        case 0xAuLL:
        case 0xEuLL:
          v10 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v10;
          v11 = (v9 & 0x7FFFFFF) + a2;
          v12 = *(_BYTE *)(a6 + v11) | v10;
          goto LABEL_7;
        case 0xFuLL:
          if (*(_BYTE *)(a6 + a2))
          {
            v19 = *(_QWORD *)(v8 + 8 * v7 + 8);
            if ((v19 & 0xF8000000) == 0x90000000)
            {
              v20 = 1;
            }
            else
            {
              v20 = 1;
              do
              {
                v20 += v19 & 0x7FFFFFF;
                v19 = *(_QWORD *)(v8 + 8 * (v20 + v7));
              }
              while ((v19 & 0xF8000000) != 0x90000000);
            }
            *(_BYTE *)(a6 + v20 + a2) |= *(_BYTE *)(a6 + a2);
          }
          break;
        case 0x10uLL:
          v21 = *(_BYTE *)(a6 + a2);
          *(_BYTE *)(a6 + a2 + 1) |= v21;
          v22 = v9 & 0x7FFFFFF;
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v22 + v7)) & 0xF8000000) != 0x90000000)
          {
            v11 = v22 + a2;
            v12 = *(_BYTE *)(a6 + v11) | v21;
LABEL_7:
            *(_BYTE *)(a6 + v11) = v12;
          }
          break;
        case 0x12uLL:
          if (a5 != 133)
            break;
          goto LABEL_32;
        case 0x13uLL:
          if (a5 == 134)
LABEL_32:
            *(_BYTE *)(a2 + a6 + 1) |= *(_BYTE *)(a4 + a2);
          break;
        default:
          break;
      }
      ++v7;
      ++a2;
    }
    while (v7 != a3);
  }
  return a6;
}

void llvm_regfree(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  if (*(_DWORD *)a1 == 62053)
  {
    v1 = *(_QWORD **)(a1 + 24);
    if (v1)
    {
      if (*(_DWORD *)v1 == 53829)
      {
        *(_DWORD *)a1 = 0;
        *(_DWORD *)v1 = 0;
        v2 = (void *)v1[1];
        if (v2)
          free(v2);
        v3 = (void *)v1[3];
        if (v3)
          free(v3);
        v4 = (void *)v1[4];
        if (v4)
          free(v4);
        v5 = (void *)v1[12];
        if (v5)
          free(v5);
        free(v1);
      }
    }
  }
}

unint64_t llvm::xxHash64(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  unint64_t v21;

  v2 = (unint64_t)a1 + a2;
  if (a2 < 0x20)
  {
    v6 = a1;
    v12 = 0x27D4EB2F165667C5;
  }
  else
  {
    v3 = 0;
    v4 = 0x61C8864E7A143579;
    v5 = 0x60EA27EEADC0B5D6;
    v6 = a1;
    v7 = 0xC2B2AE3D27D4EB4FLL;
    do
    {
      v8 = __ROR8__(v5 - 0x3D4D51C2D82B14B1 * *v6, 33);
      v5 = 0x9E3779B185EBCA87 * v8;
      v9 = __ROR8__(v7 - 0x3D4D51C2D82B14B1 * v6[1], 33);
      v7 = 0x9E3779B185EBCA87 * v9;
      v10 = __ROR8__(v3 - 0x3D4D51C2D82B14B1 * v6[2], 33);
      v3 = 0x9E3779B185EBCA87 * v10;
      v11 = __ROR8__(v4 - 0x3D4D51C2D82B14B1 * v6[3], 33);
      v4 = 0x9E3779B185EBCA87 * v11;
      v6 += 4;
    }
    while ((unint64_t)v6 <= v2 - 32);
    v12 = 0x85EBCA77C2B2AE63
        - 0x61C8864E7A143579
        * ((0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579
          * ((0x85EBCA77C2B2AE63
            - 0x61C8864E7A143579
            * ((0x85EBCA77C2B2AE63
              - 0x61C8864E7A143579
              * ((((0x3C6EF3630BD7950ELL * v8) | (v5 >> 63))
                + 0x1BBCD8C2F5E54380 * v9
                + (v7 >> 57)
                + 0x779B185EBCA87000 * v10
                + (v3 >> 52)
                - 0x1939E850D5E40000 * v11
                + (v4 >> 46)) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v8, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v9, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v10, 33)))) ^ (0x9E3779B185EBCA87 * __ROR8__(0xDEF35B010F796CA9 * v11, 33)));
  }
  v13 = v12 + a2;
  if ((unint64_t)(v6 + 1) <= v2)
  {
    v15 = v6;
    do
    {
      v16 = *v6++;
      v13 = 0x85EBCA77C2B2AE63
          - 0x61C8864E7A143579 * __ROR8__((0x9E3779B185EBCA87 * __ROR8__(0xC2B2AE3D27D4EB4FLL * v16, 33)) ^ v13, 37);
      v14 = v15 + 1;
      v17 = (unint64_t)(v15 + 2);
      ++v15;
    }
    while (v17 <= v2);
  }
  else
  {
    v14 = v6;
  }
  if ((unint64_t)v14 + 4 <= v2)
  {
    v18 = *(_DWORD *)v6;
    v6 = (uint64_t *)((char *)v6 + 4);
    v13 = 0x165667B19E3779F9 - 0x3D4D51C2D82B14B1 * __ROR8__((0x9E3779B185EBCA87 * v18) ^ v13, 41);
  }
  if ((unint64_t)v6 < v2)
  {
    v19 = (char *)a1 + a2 - (char *)v6;
    do
    {
      v20 = *(unsigned __int8 *)v6;
      v6 = (uint64_t *)((char *)v6 + 1);
      v13 = 0x9E3779B185EBCA87 * __ROR8__((0x27D4EB2F165667C5 * v20) ^ v13, 53);
      --v19;
    }
    while (v19);
  }
  v21 = 0x165667B19E3779F9
      * ((0xC2B2AE3D27D4EB4FLL * (v13 ^ (v13 >> 33))) ^ ((0xC2B2AE3D27D4EB4FLL * (v13 ^ (v13 >> 33))) >> 29));
  return v21 ^ HIDWORD(v21);
}

void llvm::sys::DynamicLibrary::HandleSet::~HandleSet(llvm::sys::DynamicLibrary::HandleSet *this)
{
  uint64_t i;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = *(_QWORD *)this;
  for (i = *((_QWORD *)this + 1); i != v3; i -= 8)
  {
    v4 = *(void **)(i - 8);
    dlclose(v4);
  }
  v5 = (void *)*((_QWORD *)this + 3);
  if (v5)
    dlclose(v5);
  llvm::sys::DynamicLibrary::SearchOrder = 0;
  v6 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v6;
    operator delete(v6);
  }
}

void *llvm::sys::DynamicLibrary::HandleSet::DLOpen(const char *a1, uint64_t a2)
{
  void *result;
  char *v4;

  result = dlopen(a1, 9);
  if (!result)
  {
    if (a2)
    {
      v4 = dlerror();
      MEMORY[0x24BD1B104](a2, v4);
    }
    return &llvm::sys::DynamicLibrary::Invalid;
  }
  return result;
}

void `anonymous namespace'::getGlobals(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0)
  {
    {
      unk_257965720 = 0;
      qword_257965728 = 0x1000000000;
      unk_257965730 = 0u;
      unk_257965740 = 0u;
      unk_257965750 = 0u;
      unk_257965760 = 0u;
      MEMORY[0x24BD1B224](&unk_257965770);
      dword_2579657B0 = 0;
    }
  }
}

void *llvm::sys::DynamicLibrary::getPermanentLibrary(_anonymous_namespace_ *a1, uint64_t a2)
{
  void *v4;

  v4 = llvm::sys::DynamicLibrary::HandleSet::DLOpen((const char *)a1, a2);
  if (v4 != &llvm::sys::DynamicLibrary::Invalid)
  {
    std::recursive_mutex::lock(&stru_257965770);
    llvm::sys::DynamicLibrary::HandleSet::AddLibrary((llvm::sys::DynamicLibrary::HandleSet *)&unk_257965730, v4, a1 == 0, 1, 0);
    std::recursive_mutex::unlock(&stru_257965770);
  }
  return v4;
}

uint64_t llvm::sys::DynamicLibrary::HandleSet::AddLibrary(llvm::sys::DynamicLibrary::HandleSet *this, void *__handle, char a3, int a4, int a5)
{
  void **v7;
  void **v8;
  unint64_t v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void *v20;

  if ((a3 & 1) == 0)
  {
    if (a5)
    {
      v7 = (void **)*((_QWORD *)this + 1);
LABEL_12:
      v10 = *((_QWORD *)this + 2);
      if ((unint64_t)v7 >= v10)
      {
        v12 = *(void ***)this;
        v13 = ((uint64_t)v7 - *(_QWORD *)this) >> 3;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 61)
          abort();
        v15 = v10 - (_QWORD)v12;
        if (v15 >> 2 > v14)
          v14 = v15 >> 2;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          if (v16 >> 61)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v17 = (char *)operator new(8 * v16);
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = __handle;
        v11 = v18 + 8;
        if (v7 != v12)
        {
          do
          {
            v19 = (uint64_t)*--v7;
            *((_QWORD *)v18 - 1) = v19;
            v18 -= 8;
          }
          while (v7 != v12);
          v7 = *(void ***)this;
        }
        *(_QWORD *)this = v18;
        *((_QWORD *)this + 1) = v11;
        *((_QWORD *)this + 2) = &v17[8 * v16];
        if (v7)
          operator delete(v7);
      }
      else
      {
        *v7 = __handle;
        v11 = v7 + 1;
      }
      *((_QWORD *)this + 1) = v11;
      return 1;
    }
    v8 = *(void ***)this;
    v7 = (void **)*((_QWORD *)this + 1);
    if (*(void ***)this != v7)
    {
      while (*v8 != __handle)
      {
        if (++v8 == v7)
        {
          v8 = (void **)*((_QWORD *)this + 1);
          break;
        }
      }
    }
    if (v8 == v7)
      goto LABEL_12;
    if (a4)
      dlclose(__handle);
    return 0;
  }
  v20 = (void *)*((_QWORD *)this + 3);
  if (v20)
  {
    if (a4)
    {
      dlclose(v20);
      v20 = (void *)*((_QWORD *)this + 3);
    }
    if (v20 == __handle)
      return 0;
  }
  *((_QWORD *)this + 3) = __handle;
  return 1;
}

void `anonymous namespace'::Globals::~Globals(_anonymous_namespace_::Globals *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 88));
  llvm::sys::DynamicLibrary::HandleSet::~HandleSet((_anonymous_namespace_::Globals *)((char *)this + 56));
  llvm::sys::DynamicLibrary::HandleSet::~HandleSet((_anonymous_namespace_::Globals *)((char *)this + 24));
  if (*((_DWORD *)this + 3))
  {
    v2 = *((unsigned int *)this + 2);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)this + v3);
        if (v5 != -8 && v5 != 0)
          MEMORY[0x24BD1B398]();
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)this);
}

void *llvm::sys::Memory::allocateMappedMemory@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *result;
  unint64_t v12;
  int v13;
  unsigned __int8 v14;
  unint64_t v15;
  unint64_t v16;
  void *v17;
  unint64_t v18;
  llvm::sys::Process *v19;
  uint64_t v20;
  int v21;
  int v22;
  __int128 v24;
  uint64_t v25;

  v8 = a1 - 1;
  v9 = (char)(((a3 & 0x7000000u) - 0x1000000) >> 24);
  while (1)
  {
    v10 = a2;
    result = (void *)std::system_category();
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = result;
    if (!a1)
      break;
    if (v10)
      v12 = v10[1] + *v10;
    else
      v12 = 0;
    v13 = dword_24AA2D980[v9];
    v14 = atomic_load((unsigned __int8 *)&qword_25795E2B8);
    if ((v14 & 1) == 0)
    {
      v22 = dword_24AA2D980[v9];
      v19 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_25795E2B8);
      v13 = v22;
      if ((_DWORD)v19)
      {
        qword_25795E2B0 = llvm::sys::Process::getPageSizeEstimate(v19);
        __cxa_guard_release(&qword_25795E2B8);
        v13 = v22;
      }
    }
    v15 = v8 + qword_25795E2B0;
    if (v12 % qword_25795E2B0)
      v16 = qword_25795E2B0 + v12 - v12 % qword_25795E2B0;
    else
      v16 = v12;
    if (v12)
      v17 = (void *)v16;
    else
      v17 = 0;
    v18 = v15 / qword_25795E2B0;
    result = mmap(v17, v15 / qword_25795E2B0 * qword_25795E2B0, v13, 4098, -1, 0);
    if (result != (void *)-1)
    {
      *(_QWORD *)&v24 = result;
      *((_QWORD *)&v24 + 1) = qword_25795E2B0 * v18;
      LODWORD(v25) = a3;
      if ((a3 & 0x4000000) == 0
        || (*(_QWORD *)a4 = llvm::sys::Memory::protectMappedMemory((uint64_t)&v24, a3),
            *(_QWORD *)(a4 + 8) = v20,
            result = (void *)std::system_category(),
            *(void **)(a4 + 8) == result)
        && !*(_DWORD *)a4)
      {
        *(_OWORD *)a5 = v24;
        *(_QWORD *)(a5 + 16) = v25;
        return result;
      }
      break;
    }
    a2 = 0;
    if (!v10)
    {
      v21 = *__error();
      result = (void *)std::generic_category();
      *(_DWORD *)a4 = v21;
      *(_QWORD *)(a4 + 8) = result;
      break;
    }
  }
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 0;
  return result;
}

uint64_t llvm::sys::Memory::protectMappedMemory(uint64_t a1, int a2)
{
  unsigned __int8 v3;
  void *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  unsigned int v12;
  int v14;
  llvm::sys::Process *v15;

  v3 = atomic_load((unsigned __int8 *)&qword_25795E2C0);
  if ((v3 & 1) == 0)
  {
    v14 = a2;
    v15 = (llvm::sys::Process *)__cxa_guard_acquire(&qword_25795E2C0);
    a2 = v14;
    if ((_DWORD)v15)
    {
      _MergedGlobals_1 = 63 - __clz(llvm::sys::Process::getPageSizeEstimate(v15));
      __cxa_guard_release(&qword_25795E2C0);
      a2 = v14;
    }
  }
  v4 = *(void **)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_17;
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    goto LABEL_17;
  if (a2)
  {
    v6 = dword_24AA2D980[(char)(((a2 & 0x7000000u) - 0x1000000) >> 24)];
    v7 = (uint64_t)v4 + (-1 << _MergedGlobals_1) + (1 << _MergedGlobals_1);
    v8 = -(1 << _MergedGlobals_1);
    v9 = (void *)(v7 & v8);
    v10 = ((unint64_t)v4 + v5 + (1 << _MergedGlobals_1) - 1) & v8;
    if ((a2 & 0x4000000) != 0)
    {
      v11 = v10 - (_QWORD)v9;
      if (((((a2 & 0x7000000u) - 0x1000000) >> 24) & 0xFFFFFFFD) != 1)
      {
        if (!mprotect((void *)(v7 & v8), v10 - (_QWORD)v9, v6))
        {
          sys_icache_invalidate(*(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_17:
          std::system_category();
          return 0;
        }
        goto LABEL_14;
      }
      if (mprotect((void *)(v7 & v8), v10 - (_QWORD)v9, v6 | 1))
      {
LABEL_14:
        v12 = *__error();
        goto LABEL_15;
      }
      sys_icache_invalidate(*(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      v11 = v10 - (_QWORD)v9;
    }
    if (!mprotect(v9, v11, v6))
      goto LABEL_17;
    goto LABEL_14;
  }
  v12 = 22;
LABEL_15:
  std::generic_category();
  return v12;
}

uint64_t llvm::sys::Memory::releaseMappedMemory(uint64_t a1)
{
  void *v2;
  size_t v3;
  uint64_t v4;

  v2 = *(void **)a1;
  if (!v2)
    goto LABEL_6;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    goto LABEL_6;
  if (!munmap(v2, v3))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
LABEL_6:
    std::system_category();
    return 0;
  }
  v4 = *__error();
  std::generic_category();
  return v4;
}

unint64_t llvm::sys::path::begin@<X0>(unint64_t result@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned __int8 *v5;
  uint64_t v8;
  BOOL v9;
  _BOOL4 v10;
  BOOL v11;
  int v12;
  BOOL v13;
  _BOOL4 v14;
  unint64_t v15;
  BOOL v17;
  uint64_t v18;
  char *v19;
  _QWORD v20[2];

  v5 = (unsigned __int8 *)result;
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  v20[0] = result;
  v20[1] = a2;
  if (!a2)
  {
    v8 = 0;
    goto LABEL_50;
  }
  if (a3 >= 2)
  {
    result = *(unsigned __int8 *)result;
    if (a2 < 2)
      goto LABEL_32;
    if ((result & 0x80) != 0)
    {
      result = __maskrune(result, 0x100uLL);
      if (!(_DWORD)result)
        goto LABEL_11;
    }
    else
    {
      result = *(_DWORD *)(MEMORY[0x24BDAC740] + 4 * result + 60) & 0x100;
      if (!(_DWORD)result)
        goto LABEL_11;
    }
    if (v5[1] == 58)
    {
      v8 = 2;
      goto LABEL_50;
    }
  }
LABEL_11:
  result = *v5;
  if (a2 >= 3)
  {
    v9 = a3 > 1 && (_DWORD)result == 92;
    v10 = v9;
    v11 = (_DWORD)result != 47 && !v10;
    if (!v11 && (_DWORD)result == v5[1])
    {
      v12 = v5[2];
      v13 = a3 > 1 && v12 == 92;
      v14 = v13;
      if (v12 != 47 && !v14)
      {
        v15 = 2;
LABEL_41:
        if (a3 <= 1)
          v18 = 1;
        else
          v18 = 2;
        if (a3 <= 1)
          v19 = "/";
        else
          v19 = "\\/";
        result = llvm::StringRef::find_first_of(v20, (unsigned __int8 *)v19, v18, v15);
        if (a2 >= result)
          v8 = result;
        else
          v8 = a2;
        goto LABEL_50;
      }
    }
  }
LABEL_32:
  v17 = a3 > 1 && (_DWORD)result == 92;
  v8 = 1;
  if ((_DWORD)result != 47 && !v17)
  {
    v15 = 0;
    goto LABEL_41;
  }
LABEL_50:
  *(_QWORD *)(a4 + 16) = v5;
  *(_QWORD *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = a3;
  return result;
}

uint64_t *llvm::sys::path::const_iterator::operator++(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  const char *v17;
  _BOOL8 v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v23;
  char *v24;
  unint64_t first_of;
  unint64_t v26;
  unint64_t v27;

  v2 = a1 + 2;
  v3 = a1[3];
  v4 = a1[4] + v3;
  a1[4] = v4;
  v5 = a1[1];
  if (v4 == v5)
  {
    *v2 = 0;
    a1[3] = 0;
    return a1;
  }
  if (v3 <= 2)
  {
    v13 = 0;
    v8 = *((_DWORD *)a1 + 10);
  }
  else
  {
    v6 = (unsigned __int8 *)a1[2];
    v7 = *v6;
    v8 = *((_DWORD *)a1 + 10);
    if ((v7 == 47 || (v7 == 92 ? (v9 = v8 >= 2) : (v9 = 0), v9)) && v6[1] == v7)
    {
      v10 = v6[2];
      v12 = v8 < 2 || v10 != 92;
      v13 = v10 != 47 && v12;
    }
    else
    {
      v13 = 0;
    }
  }
  v14 = *a1;
  v15 = *(unsigned __int8 *)(*a1 + v4);
  if (v15 != 47 && (v8 < 2 || v15 != 92))
    goto LABEL_47;
  if (!v13 && (!v3 || v8 <= 1 || *(_BYTE *)(*v2 + v3 - 1) != 58))
  {
    while (1)
    {
      v19 = *(unsigned __int8 *)(v14 + v4);
      v20 = v8 > 1 && v19 == 92;
      v21 = v20;
      if (v19 != 47 && !v21)
        break;
      a1[4] = ++v4;
      if (v5 == v4)
      {
        if (v3 != 1 || (v4 = v5, *(_BYTE *)*v2 != 47))
        {
          a1[4] = v5 - 1;
          v17 = ".";
          v18 = 1;
          goto LABEL_30;
        }
        break;
      }
    }
LABEL_47:
    if (v8 <= 1)
      v23 = 1;
    else
      v23 = 2;
    if (v8 <= 1)
      v24 = "/";
    else
      v24 = "\\/";
    first_of = llvm::StringRef::find_first_of(a1, (unsigned __int8 *)v24, v23, v4);
    if (v5 >= v4)
      v26 = v4;
    else
      v26 = v5;
    if (v26 <= first_of)
      v27 = first_of;
    else
      v27 = v4;
    if (v27 >= v5)
      v27 = v5;
    a1[2] = v14 + v26;
    a1[3] = v27 - v26;
    return a1;
  }
  if (v5 >= v4)
    v16 = v4;
  else
    v16 = a1[1];
  v17 = (const char *)(v14 + v16);
  v18 = v5 > v4;
LABEL_30:
  a1[2] = (uint64_t)v17;
  a1[3] = v18;
  return a1;
}

uint64_t llvm::sys::path::reverse_iterator::operator++(uint64_t a1)
{
  unsigned __int8 *v2;
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _BOOL4 v11;
  BOOL v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *(unsigned __int8 **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_DWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v7 = v5 + 1;
    v8 = *(_QWORD *)(a1 + 32);
    while (v7 != v8)
    {
      v9 = v2[v8 - 1];
      v11 = v4 > 1 && v9 == 92;
      if (v9 != 47 && !v11)
      {
        v7 = v8;
        break;
      }
      if (!--v8)
        goto LABEL_15;
    }
  }
  else
  {
LABEL_15:
    v7 = 0;
  }
  if (v3)
    v13 = v6 == v3;
  else
    v13 = 0;
  if (v13
    && ((v14 = v2[v3 - 1], v14 == 47) || v4 >= 2 && v14 == 92)
    && (v5 != -1 ? (v15 = v7 - 1 > v5) : (v15 = 1), v15))
  {
    *(_QWORD *)(a1 + 32) = v3 - 1;
    *(_QWORD *)(a1 + 16) = ".";
    *(_QWORD *)(a1 + 24) = 1;
  }
  else
  {
    if (v3 >= v7)
      v16 = v7;
    else
      v16 = v3;
    if (v3 >= v17)
      v18 = v17;
    else
      v18 = v3;
    if (v18 <= v7)
      v19 = v7;
    else
      v19 = v17;
    if (v19 >= v3)
      v19 = v3;
    *(_QWORD *)(a1 + 16) = &v2[v18];
    *(_QWORD *)(a1 + 24) = v19 - v18;
    *(_QWORD *)(a1 + 32) = v17;
  }
  return a1;
}

uint64_t `anonymous namespace'::root_dir_start(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  int v3;
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  BOOL v8;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  BOOL v16;
  _QWORD v18[2];

  v18[0] = a1;
  v18[1] = a2;
  if (a3 >= 2 && a2 >= 3 && a1[1] == 58)
  {
    v3 = a1[2];
    v4 = 2;
    if (v3 == 47 || v3 == 92)
      return v4;
  }
  if (a2 < 4)
  {
    if (!a2)
      return -1;
    v5 = *a1;
  }
  else
  {
    v5 = *a1;
    v7 = a3 > 1 && v5 == 92;
    v8 = v5 != 47 && !v7;
    if (!v8 && v5 == a1[1])
    {
      v9 = a1[2];
      v10 = a3 > 1 && v9 == 92;
      v11 = v10;
      if (v9 != 47 && !v11)
      {
        v12 = a3 > 1;
        if (a3 <= 1)
          v13 = 1;
        else
          v13 = 2;
        if (v12)
          v14 = "\\/";
        else
          v14 = "/";
        return llvm::StringRef::find_first_of(v18, (unsigned __int8 *)v14, v13, 2uLL);
      }
    }
  }
  v4 = 0;
  v16 = a3 > 1 && v5 == 92;
  if (v5 != 47 && !v16)
    return -1;
  return v4;
}

unint64_t `anonymous namespace'::filename_pos(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  char *v9;
  uint64_t last_of;
  unint64_t v11;
  int v12;
  int v13;
  BOOL v14;
  BOOL v15;
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  if (a2)
  {
    v6 = a2 - 1;
    v7 = a1[a2 - 1];
    if (v7 == 47 || a3 >= 2 && v7 == 92)
      return v6;
  }
  else
  {
    v6 = -1;
  }
  if (a3 <= 1)
    v8 = 1;
  else
    v8 = 2;
  if (a3 <= 1)
    v9 = "/";
  else
    v9 = "\\/";
  last_of = llvm::StringRef::find_last_of(v17, (unsigned __int8 *)v9, v8, v6);
  if (a3 >= 2 && last_of == -1)
  {
    if (a2 >= a2 - 2)
      v11 = a2 - 2;
    else
      v11 = a2;
    while (v11)
    {
      last_of = v11 - 1;
      v12 = a1[--v11];
      if (v12 == 58)
        goto LABEL_20;
    }
    return 0;
  }
LABEL_20:
  if (last_of == -1)
    return 0;
  if (last_of != 1)
    return last_of + 1;
  v6 = 0;
  v13 = *a1;
  v14 = a3 > 1 && v13 == 92;
  v15 = v14;
  if (v13 != 47 && !v15)
    return last_of + 1;
  return v6;
}

unsigned __int8 *llvm::sys::path::root_name(unint64_t a1, unint64_t a2, unsigned int a3)
{
  int v7;
  _BOOL4 v8;
  unsigned __int8 *v10;
  _BOOL4 v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;

  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v12);
  if (v12 == a1 && v15 == a2)
    return 0;
  if (v14 < 3)
  {
    v8 = 0;
  }
  else
  {
    v7 = *v13;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = v13[1] == v7;
  }
  if (a3 >= 2 && v14)
  {
    v10 = v13;
    v11 = v13[v14 - 1] == 58;
  }
  else
  {
    v11 = 0;
    v10 = v13;
  }
  if (v8 || v11)
    return v10;
  else
    return 0;
}

uint64_t llvm::sys::path::root_directory(unint64_t a1, unint64_t a2, unsigned int a3)
{
  int v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t result;
  int v11;
  BOOL v12;
  int v13;
  BOOL v14;
  int v15;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  llvm::sys::path::begin(a1, a2, a3, (uint64_t)&v21);
  v18 = v21;
  v19 = v22;
  v20 = v23;
  if ((_QWORD)v21 == a1 && (_QWORD)v23 == a2)
    return 0;
  if (*((_QWORD *)&v22 + 1) < 3uLL)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(unsigned __int8 *)v22;
    if (v7 == 47 || (v8 = 0, a3 >= 2) && v7 == 92)
      v8 = *(unsigned __int8 *)(v22 + 1) == v7;
  }
  v9 = 0;
  if (a3 >= 2 && *((_QWORD *)&v22 + 1))
    v9 = *(unsigned __int8 *)(v22 + *((_QWORD *)&v22 + 1) - 1) == 58;
  if (!v8 && !v9
    || (llvm::sys::path::const_iterator::operator++((uint64_t *)&v18), (_QWORD)v18 == a1) && (_QWORD)v20 == a2
    || ((result = v19, v11 = *(unsigned __int8 *)v19, a3 > 1) ? (v12 = v11 == 92) : (v12 = 0),
        !v12 ? (v13 = 0) : (v13 = 1),
        v11 != 47 ? (v14 = v13 == 0) : (v14 = 0),
        v14))
  {
    if (!v8)
    {
      v15 = *(unsigned __int8 *)v22;
      if (a3 > 1 && v15 == 92 || v15 == 47)
        return v22;
      else
        return 0;
    }
    return 0;
  }
  return result;
}

void llvm::sys::path::append(_QWORD *a1, const llvm::Twine *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  uint64_t v20;
  char *v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  unint64_t first_not_of;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  int v37;
  _QWORD v38[4];
  __int16 v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[64];
  void *v43;
  __int128 v44;
  _BYTE v45[32];
  void *v46;
  __int128 v47;
  _BYTE v48[32];
  _BYTE *v49;
  __int128 v50;
  _BYTE v51[32];
  _QWORD *v52;
  __int128 v53;
  _QWORD v54[6];

  v54[4] = *MEMORY[0x24BDAC8D0];
  v52 = v54;
  v53 = xmmword_24AA2AC10;
  v49 = v51;
  v50 = xmmword_24AA2AC10;
  v46 = v48;
  v47 = xmmword_24AA2AC10;
  v43 = v45;
  v44 = xmmword_24AA2AC10;
  v40 = v42;
  v41 = 0x400000000;
  if (a3[32] >= 2u)
  {
    llvm::Twine::toStringRef(a3, (uint64_t)&v52);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, v11, v12);
  }
  if (a4[32] >= 2u)
  {
    llvm::Twine::toStringRef(a4, (uint64_t)&v49);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, v13, v14);
  }
  if (a5[32] >= 2u)
  {
    llvm::Twine::toStringRef(a5, (uint64_t)&v46);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, v15, v16);
  }
  if (a6[32] >= 2u)
  {
    llvm::Twine::toStringRef(a6, (uint64_t)&v43);
    llvm::SmallVectorTemplateBase<std::pair<void *,unsigned long>,true>::push_back((unsigned int *)&v40, v17, v18);
  }
  v19 = (unsigned __int8 **)v40;
  if ((_DWORD)v41)
  {
    if (a2 <= 1)
      v20 = 1;
    else
      v20 = 2;
    if (a2 <= 1)
      v21 = "/";
    else
      v21 = "\\/";
    if (a2 <= 1)
      v22 = 1;
    else
      v22 = (int)a2;
    if (v22 == 3)
      v23 = 92;
    else
      v23 = 47;
    v24 = 16 * v41;
    do
    {
      v25 = a1[1];
      if (!v25
        || ((v26 = *(unsigned __int8 *)(v25 + *a1 - 1), a2 > 1) ? (v27 = v26 == 92) : (v27 = 0),
            !v27 ? (v28 = 0) : (v28 = 1),
            v26 != 47 ? (v29 = v28 == 0) : (v29 = 0),
            v29))
      {
        v36 = v19[1];
        if (!v36 || (v37 = **v19, v37 != 47) && (a2 < 2 || v37 != 92))
        {
          if (v25)
          {
            v39 = 261;
            v38[0] = *v19;
            v38[1] = v36;
            if (!llvm::sys::path::has_root_name((llvm::sys::path *)v38, a2))
              llvm::SmallVectorTemplateBase<char,true>::push_back(a1, v23);
          }
        }
        v34 = *v19;
        v35 = &v19[1][(_QWORD)*v19];
      }
      else
      {
        first_not_of = llvm::StringRef::find_first_not_of(v19, (unsigned __int8 *)v21, v20, 0);
        v32 = *v19;
        v31 = v19[1];
        if ((unint64_t)v31 >= first_not_of)
          v33 = (unsigned __int8 *)first_not_of;
        else
          v33 = v19[1];
        v34 = &v33[(_QWORD)v32];
        v35 = &v31[(_QWORD)v32];
      }
      llvm::SmallVectorImpl<char>::append<char const*,void>(a1, v34, v35);
      v19 += 2;
      v24 -= 16;
    }
    while (v24);
    v19 = (unsigned __int8 **)v40;
  }
  if (v19 != (unsigned __int8 **)v42)
    free(v19);
  if (v43 != v45)
    free(v43);
  if (v46 != v48)
    free(v46);
  if (v49 != v51)
    free(v49);
  if (v52 != v54)
    free(v52);
}

BOOL llvm::sys::path::has_root_name(llvm::sys::path *this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v2 = a2;
  v10[16] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA2AC90;
  llvm::Twine::toStringRef((unsigned __int8 *)this, (uint64_t)&v8);
  llvm::sys::path::root_name(v3, v4, v2);
  v6 = v5;
  if (v8 != v10)
    free(v8);
  return v6 != 0;
}

unint64_t `anonymous namespace'::parent_path_end(unsigned __int8 *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL4 v10;
  int v11;
  unint64_t i;
  int v13;
  BOOL v14;
  _BOOL4 v15;
  int v17;

  v7 = v6;
  if (a2)
  {
    v8 = a1[v6];
    v10 = a3 > 1 && v8 == 92;
    v11 = v8 == 47 || v10;
  }
  else
  {
    v11 = 0;
  }
  {
    if (i != -1 && v7 <= i)
      break;
    v13 = a1[v7 - 1];
    v14 = a3 > 1 && v13 == 92;
    v15 = v14;
    if (v13 != 47 && !v15)
      break;
  }
  if (v7 == i)
    v17 = v11;
  else
    v17 = 1;
  if (v17)
    return v7;
  else
    return i + 1;
}

BOOL llvm::sys::path::has_root_directory(llvm::sys::path *this, const llvm::Twine *a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v2 = a2;
  v10[16] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA2AC90;
  llvm::Twine::toStringRef((unsigned __int8 *)this, (uint64_t)&v8);
  llvm::sys::path::root_directory(v3, v4, v2);
  v6 = v5;
  if (v8 != v10)
    free(v8);
  return v6 != 0;
}

uint64_t llvm::sys::path::is_absolute(llvm::sys::path *this, const llvm::Twine *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 has_root_directory;
  _BOOL4 has_root_name;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  __int128 v14;
  _QWORD v15[17];

  v15[16] = *MEMORY[0x24BDAC8D0];
  v13 = v15;
  v14 = xmmword_24AA2AC90;
  llvm::Twine::toStringRef((unsigned __int8 *)this, (uint64_t)&v13);
  v4 = v3;
  v6 = v5;
  v12 = 261;
  v10 = v3;
  v11 = v5;
  has_root_directory = llvm::sys::path::has_root_directory((llvm::sys::path *)&v10, a2);
  if (a2 >= 2)
  {
    v12 = 261;
    v10 = v4;
    v11 = v6;
    has_root_name = llvm::sys::path::has_root_name((llvm::sys::path *)&v10, a2);
  }
  else
  {
    has_root_name = 1;
  }
  if (v13 != v15)
    free(v13);
  return has_root_directory & has_root_name;
}

uint64_t llvm::sys::fs::status(uint64_t a1, uint64_t a2, int a3)
{
  const char *v5;
  int v6;
  uint64_t v7;
  int v9[36];
  void *v10;
  __int128 v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = xmmword_24AA2AC90;
  v5 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v10);
  if (a3)
    v6 = MEMORY[0x24BDAFEA8](v5, v9);
  else
    v6 = MEMORY[0x24BDAEB28](v5, v9);
  v7 = llvm::sys::fs::fillStatus(v6, v9, a2);
  if (v10 != v12)
    free(v10);
  return v7;
}

size_t llvm::sys::path::system_temp_directory(int a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  BOOL v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  char *v10;
  size_t result;

  a2[1] = 0;
  if (!a1)
    goto LABEL_10;
  v4 = 0;
  do
  {
    v5 = getenv(__const__ZN4llvm3sys4pathL13getEnvTempDirEv_EnvironmentVariables[v4]);
    if (v5)
      v6 = 1;
    else
      v6 = v4 == 3;
    ++v4;
  }
  while (!v6);
  v7 = v5;
  if (v5)
  {
    v8 = &v5[strlen(v5)];
    v9 = a2;
    v10 = v7;
  }
  else
  {
LABEL_10:
    result = llvm::sys::path::getDarwinConfDir(a1, (char **)a2);
    if ((result & 1) != 0)
      return result;
    v10 = "/var/tmp/";
    v8 = "";
    v9 = a2;
  }
  return (size_t)llvm::SmallVectorImpl<char>::append<char const*,void>(v9, v10, v8);
}

uint64_t llvm::sys::fs::create_directories(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t directory;
  const std::error_category *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v14;
  unint64_t v15;
  __int16 v16;
  void *v17;
  __int128 v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v17 = v19;
  v18 = xmmword_24AA2AC90;
  llvm::Twine::toStringRef(a1, (uint64_t)&v17);
  v6 = v5;
  v8 = v7;
  v16 = 261;
  v14 = v5;
  v15 = v7;
  directory = llvm::sys::fs::create_directory((uint64_t)&v14, a2, a3);
  if (std::generic_category() == v10 && directory == 2)
  {
    v12 = v8 >= v11 ? v11 : v8;
    if (v11 != -1)
    {
      if (v12)
      {
        v16 = 261;
        v14 = v6;
        v15 = v12;
        directory = llvm::sys::fs::create_directories(&v14, a2, a3);
        if (!(_DWORD)directory)
        {
          v16 = 261;
          v14 = v6;
          v15 = v8;
          directory = llvm::sys::fs::create_directory((uint64_t)&v14, a2, a3);
        }
      }
    }
  }
  if (v17 != v19)
    free(v17);
  return directory;
}

uint64_t llvm::sys::fs::create_directory(uint64_t a1, char a2, mode_t a3)
{
  const char *v5;
  uint64_t v6;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA2AC90;
  v5 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v8);
  if (mkdir(v5, a3) != -1 || *__error() == 17 && (a2 & 1) != 0)
  {
    std::system_category();
    v6 = 0;
  }
  else
  {
    v6 = *__error();
    std::generic_category();
  }
  if (v8 != v10)
    free(v8);
  return v6;
}

unint64_t llvm::sys::fs::openFileForRead(uint64_t a1, int *a2, int a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v9;
  char __s[1024];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v6 = llvm::sys::fs::openFile(a1, a2, 2, 1, a3, 438);
  v7 = v6;
  if ((_DWORD)v6)
  {
    v8 = v6 & 0xFFFFFFFF00000000;
  }
  else
  {
    if (a4)
    {
      a4[1] = 0;
      if (fcntl(*a2, 50, __s) != -1)
      {
        v9 = strlen(__s);
        llvm::SmallVectorImpl<char>::append<char const*,void>(a4, __s, &__s[v9]);
      }
    }
    std::system_category();
    v8 = 0;
  }
  return v8 | v7;
}

void llvm::sys::fs::directory_entry::replace_filename(uint64_t a1, unsigned __int8 *a2, int a3, __int128 *a4)
{
  int v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  size_t v14;
  void *v15;
  __int128 *p_dst;
  size_t v17;
  size_t v18;
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21[32];
  __int16 v22;
  unsigned __int8 v23[32];
  __int16 v24;
  __int128 __dst;
  unint64_t v26;
  __int16 v27;
  void *__src;
  size_t __len[2];
  _QWORD v30[17];

  v30[16] = *MEMORY[0x24BDAC8D0];
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = (unsigned __int8 *)a1;
  else
    v9 = *(unsigned __int8 **)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  if (v10 >= v11)
    v12 = v11;
  else
    v12 = v10;
  if (v11 == -1)
  {
    v12 = 0;
    v13 = 0;
  }
  else
  {
    v13 = v9;
  }
  __src = v30;
  *(_OWORD *)__len = xmmword_24AA2AC90;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&__src, v13, &v13[v12]);
  v27 = 257;
  v24 = 257;
  v22 = 257;
  llvm::sys::path::append(&__src, 0, a2, (unsigned __int8 *)&__dst, v23, v21);
  v14 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v15 = __src;
  if (__len[0] >= 0x17)
  {
    v17 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v17 = __len[0] | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = v14;
    v26 = v18 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_20;
  }
  HIBYTE(v26) = __len[0];
  p_dst = &__dst;
  if (__len[0])
LABEL_20:
    memmove(p_dst, v15, v14);
  *((_BYTE *)p_dst + v14) = 0;
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(_OWORD *)a1 = __dst;
  *(_QWORD *)(a1 + 16) = v26;
  *(_DWORD *)(a1 + 24) = a3;
  v19 = *a4;
  v20 = a4[2];
  *(_OWORD *)(a1 + 48) = a4[1];
  *(_OWORD *)(a1 + 64) = v20;
  *(_OWORD *)(a1 + 32) = v19;
  if (__src != v30)
    free(__src);
}

_QWORD *llvm::sys::fs::readNativeFileToEOF@<X0>(int a1@<W0>, _QWORD *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unint64_t i;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a2[1];
  for (i = v8 + a3; ; i = v8 + a3)
  {
    llvm::SmallVectorImpl<char>::resizeImpl<true>(a2, i);
    result = llvm::sys::fs::readNativeFile(a1, (void *)(*a2 + v8), a3, (uint64_t)&v12);
    if ((v13 & 1) != 0)
      break;
    v11 = v12;
    if (!v12)
      goto LABEL_6;
    v8 += v12;
  }
  v11 = v12;
LABEL_6:
  *a4 = v11;
  a2[1] = v8;
  return result;
}

_QWORD *llvm::sys::fs::readNativeFile@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  size_t v7;
  _QWORD *result;
  uint64_t v9;
  const std::error_category *v10;
  const std::error_category *v11;
  char v12;

  if (a3 >= 0x7FFFFFFF)
    v7 = 0x7FFFFFFFLL;
  else
    v7 = a3;
  do
  {
    *__error() = 0;
    result = (_QWORD *)read(a1, a2, v7);
    if (result != (_QWORD *)-1)
    {
      v12 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_11;
    }
  }
  while (*__error() == 4);
  v9 = *__error();
  v10 = std::generic_category();
  if ((_DWORD)v9)
  {
    v11 = v10;
    result = (_QWORD *)operator new();
    *result = &off_251C12820;
    result[1] = v9;
    result[2] = v11;
  }
  else
  {
    result = 0;
  }
  v12 = *(_BYTE *)(a4 + 8) | 1;
LABEL_11:
  *(_BYTE *)(a4 + 8) = v12;
  *(_QWORD *)a4 = result;
  return result;
}

_QWORD *llvm::sys::fs::getMainExecutable@<X0>(_QWORD *a1@<X8>)
{
  char *v5;
  uint32_t bufsize;
  char __s[1024];
  char buf[1024];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  bufsize = 1024;
  if (_NSGetExecutablePath(buf, &bufsize) || !realpath_DARWIN_EXTSN(buf, __s))
    v5 = (char *)&str_3_9;
  else
    v5 = __s;
  return std::string::basic_string[abi:nn180100]<0>(a1, v5);
}

uint64_t llvm::sys::fs::remove(llvm::sys::fs *this, const llvm::Twine *a2)
{
  char v2;
  const std::__fs::filesystem::path *v3;
  std::error_code *v4;
  unsigned int v5;
  int v6;
  stat v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v2 = (char)a2;
  v11[16] = *MEMORY[0x24BDAC8D0];
  v9 = v11;
  v10 = xmmword_24AA2AC90;
  v3 = (const std::__fs::filesystem::path *)llvm::Twine::toNullTerminatedStringRef((uint64_t)this, (const char **)&v9);
  if (lstat((const char *)v3, &v8))
  {
    if (*__error() != 2 || (v2 & 1) == 0)
      goto LABEL_4;
LABEL_11:
    std::system_category();
    v5 = 0;
    goto LABEL_14;
  }
  v6 = v8.st_mode & 0xF000;
  if (v6 != 0x4000 && v6 != 0x8000 && v6 != 40960)
  {
    v5 = 1;
    goto LABEL_13;
  }
  if (remove(v3, v4) != -1 || *__error() == 2 && (v2 & 1) != 0)
    goto LABEL_11;
LABEL_4:
  v5 = *__error();
LABEL_13:
  std::generic_category();
LABEL_14:
  if (v9 != v11)
    free(v9);
  return v5;
}

uint64_t llvm::sys::fs::access(uint64_t a1, int a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  stat v7;
  void *v8;
  __int128 v9;
  _QWORD v10[17];

  v10[16] = *MEMORY[0x24BDAC8D0];
  v8 = v10;
  v9 = xmmword_24AA2AC90;
  v3 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v8);
  v4 = v3;
  if (a2)
  {
    if (a2 == 2)
    {
      if (access(v3, 5) != -1)
      {
        if (stat(v4, &v7) || (v7.st_mode & 0xF000) != 0x8000)
        {
          std::generic_category();
          v5 = 13;
          goto LABEL_11;
        }
        goto LABEL_9;
      }
      goto LABEL_10;
    }
    a2 = 2;
  }
  if (access(v3, a2) != -1)
  {
LABEL_9:
    std::system_category();
    v5 = 0;
    goto LABEL_11;
  }
LABEL_10:
  v5 = *__error();
  std::generic_category();
LABEL_11:
  if (v8 != v10)
    free(v8);
  return v5;
}

uint64_t llvm::sys::fs::fillStatus(int a1, int *a2, uint64_t a3)
{
  uint64_t v4;
  const std::error_category *v5;
  uint64_t v7;
  uint64_t v8;
  llvm::sys::fs *v9;
  int v10;
  int v11;
  int v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    v4 = *__error();
    v5 = std::generic_category();
    if (v5 == std::generic_category() && (_DWORD)v4 == 2)
    {
      *(_QWORD *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 40) = 0xFFFF00000001;
      *(_DWORD *)(a3 + 48) = 0;
      *(_WORD *)(a3 + 52) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      return 2;
    }
    else
    {
      *(_OWORD *)(a3 + 28) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_QWORD *)(a3 + 44) = 0xFFFFLL;
      *(_WORD *)(a3 + 52) = 0;
      *(_QWORD *)(a3 + 56) = 0;
    }
  }
  else
  {
    v7 = *((_QWORD *)a2 + 5);
    v8 = *((_QWORD *)a2 + 7);
    v9 = (llvm::sys::fs *)*((unsigned __int16 *)a2 + 2);
    v10 = (unsigned __int16)v9 & 0xFFF;
    v11 = llvm::sys::fs::typeForMode(v9);
    v12 = *a2;
    v13 = *((_WORD *)a2 + 3);
    v14 = *((_QWORD *)a2 + 1);
    v15 = *((_QWORD *)a2 + 6);
    v16 = *((_QWORD *)a2 + 12);
    v17 = *((_QWORD *)a2 + 2);
    *(_QWORD *)a3 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a3 + 8) = v15;
    *(_DWORD *)(a3 + 16) = v7;
    *(_DWORD *)(a3 + 20) = v8;
    *(_QWORD *)(a3 + 24) = v17;
    *(_QWORD *)(a3 + 32) = v16;
    *(_DWORD *)(a3 + 40) = v11;
    *(_DWORD *)(a3 + 44) = v10;
    *(_DWORD *)(a3 + 48) = v12;
    *(_WORD *)(a3 + 52) = v13;
    *(_QWORD *)(a3 + 56) = v14;
    std::system_category();
    return 0;
  }
  return v4;
}

uint64_t llvm::sys::fs::mapped_file_region::init(size_t *a1, int a2, off_t a3, int a4)
{
  int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;

  if (a4 == 1)
    v6 = 65;
  else
    v6 = 66;
  if (a4)
    v7 = 3;
  else
    v7 = 1;
  if (a4)
    v8 = v6;
  else
    v8 = 24642;
  v9 = mmap(0, *a1, v7, v8, a2, a3);
  a1[1] = (size_t)v9;
  if (v9 == (void *)-1)
  {
    v10 = *__error();
    std::generic_category();
  }
  else
  {
    std::system_category();
    return 0;
  }
  return v10;
}

unint64_t llvm::sys::fs::detail::directory_iterator_construct(uint64_t a1, _BYTE *a2, uint64_t a3, char a4)
{
  DIR *v6;
  llvm::sys::fs::detail::DirIterState *v7;
  void **v8;
  __int128 v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  std::string v14;
  _BYTE v15[56];
  unsigned __int8 v16[32];
  __int16 v17;
  unsigned __int8 v18[32];
  __int16 v19;
  llvm::formatv_object_base *v20[4];
  __int16 v21;
  void *v22;
  __int128 v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x24BDAC8D0];
  v22 = v24;
  v23 = xmmword_24AA2AC90;
  llvm::SmallVectorImpl<char>::append<char const*,void>(&v22, a2, &a2[a3]);
  llvm::SmallVectorTemplateBase<char,true>::push_back(&v22, 0);
  *(_QWORD *)&v23 = v23 - 1;
  v6 = opendir((const char *)v22);
  if (v6)
  {
    *(_QWORD *)a1 = v6;
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)".";
    *(_WORD *)&v15[8] = 259;
    v21 = 257;
    v19 = 257;
    v17 = 257;
    llvm::sys::path::append(&v22, 0, (unsigned __int8 *)&v14, (unsigned __int8 *)v20, v18, v16);
    v21 = 261;
    v20[0] = (llvm::formatv_object_base *)v22;
    v20[1] = (llvm::formatv_object_base *)v23;
    llvm::Twine::str(v20, &v14);
    *(_DWORD *)v15 = 9;
    v15[4] = a4;
    memset(&v15[8], 0, 44);
    *(_DWORD *)&v15[52] = 0xFFFF;
    v8 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&v14.__r_.__value_.__l + 2);
    v9 = *(_OWORD *)&v15[16];
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v15;
    *(_OWORD *)(a1 + 48) = v9;
    *(_OWORD *)(a1 + 64) = *(_OWORD *)&v15[32];
    *(_QWORD *)(a1 + 80) = *(_QWORD *)&v15[48];
    v10 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)a1, v7);
    v11 = v10;
    v12 = v10 & 0xFFFFFFFF00000000;
  }
  else
  {
    v11 = *__error();
    std::generic_category();
    v12 = 0;
  }
  if (v22 != v24)
    free(v22);
  return v12 | v11;
}

unint64_t llvm::sys::fs::detail::directory_iterator_increment(DIR **this, llvm::sys::fs::detail::DirIterState *a2)
{
  dirent *v3;
  dirent *v4;
  char *d_name;
  size_t v6;
  llvm::sys::fs::detail::DirIterState *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v14;
  __int128 v15[2];
  __int128 v16;
  _QWORD v17[4];
  __int16 v18;

  *__error() = 0;
  v3 = readdir(*this);
  if (!v3)
  {
    if (!*__error())
    {
      v14 = llvm::sys::fs::detail::directory_iterator_destruct((uint64_t)this);
      v11 = v14 & 0xFFFFFFFF00000000;
      v9 = v14;
      return v11 | v9;
    }
    v9 = *__error();
    std::generic_category();
    goto LABEL_12;
  }
  v4 = v3;
  d_name = v3->d_name;
  v6 = strlen(v3->d_name);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      v8 = *d_name;
      goto LABEL_9;
    }
LABEL_11:
    v18 = 261;
    v17[0] = d_name;
    v17[1] = v6;
    v12 = llvm::sys::fs::typeForMode((llvm::sys::fs *)((v4->d_type & 0xF) << 12));
    v16 = 0u;
    memset(v15, 0, sizeof(v15));
    HIDWORD(v16) = 0xFFFF;
    llvm::sys::fs::directory_entry::replace_filename((uint64_t)(this + 1), (unsigned __int8 *)v17, v12, v15);
    std::system_category();
    v9 = 0;
LABEL_12:
    v11 = 0;
    return v11 | v9;
  }
  if (*d_name != 46)
    goto LABEL_11;
  v8 = v4->d_name[1];
LABEL_9:
  if (v8 != 46)
    goto LABEL_11;
  v10 = llvm::sys::fs::detail::directory_iterator_increment((llvm::sys::fs::detail *)this, v7);
  v9 = v10;
  v11 = v10 & 0xFFFFFFFF00000000;
  return v11 | v9;
}

uint64_t llvm::sys::fs::detail::directory_iterator_destruct(uint64_t a1)
{
  DIR *v2;
  void **v3;

  v2 = *(DIR **)a1;
  if (v2)
    closedir(v2);
  *(_QWORD *)a1 = 0;
  v3 = (void **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v3);
  *v3 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 9;
  *(_BYTE *)(a1 + 36) = 1;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0xFFFF;
  std::system_category();
  return 0;
}

double llvm::sys::fs::directory_entry::status@<D0>(llvm::sys::fs::directory_entry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  double result;
  __int128 v6;
  llvm::sys::fs::directory_entry *v7;
  __int16 v8;
  _BYTE v9[48];

  memset(v9, 0, 44);
  *(_DWORD *)&v9[44] = 0xFFFF;
  v8 = 260;
  v7 = this;
  v3 = llvm::sys::fs::status((uint64_t)&v7, (uint64_t)v9, *((unsigned __int8 *)this + 28));
  if ((_DWORD)v3)
  {
    *(_BYTE *)(a2 + 48) |= 1u;
    *(_QWORD *)a2 = v3;
    *(_QWORD *)(a2 + 8) = v4;
  }
  else
  {
    *(_BYTE *)(a2 + 48) &= ~1u;
    v6 = *(_OWORD *)&v9[16];
    *(_OWORD *)a2 = *(_OWORD *)v9;
    *(_OWORD *)(a2 + 16) = v6;
    result = *(double *)&v9[32];
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&v9[32];
  }
  return result;
}

uint64_t llvm::sys::fs::openFile(uint64_t a1, int *a2, int a3, int a4, int a5, uint64_t a6)
{
  int v8;
  int v10;
  int v11;
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  void *v17;
  __int128 v18;
  _QWORD v19[17];

  v19[16] = *MEMORY[0x24BDAC8D0];
  v8 = 2 * (a4 == 3);
  if (a4 == 2)
    v8 = 1;
  if (a4 == 1)
    v8 = 0;
  if ((a5 & 4) != 0)
    a3 = 3;
  v10 = v8 | 0x600;
  v11 = v8 | 0x200;
  if (a3 == 1)
    v8 |= 0xA00u;
  if (a3 == 3)
    v8 = v11;
  if (!a3)
    v8 = v10;
  v12 = v8 | ((a5 << 20) & 0x1000000 | (2 * (a5 & 4))) ^ 0x1000000;
  v17 = v19;
  v18 = xmmword_24AA2AC90;
  v13 = llvm::Twine::toNullTerminatedStringRef(a1, (const char **)&v17);
  while (1)
  {
    *__error() = 0;
    v14 = open(v13, v12, a6);
    if (v14 != -1)
      break;
    if (*__error() != 4)
    {
      *a2 = -1;
      goto LABEL_20;
    }
  }
  *a2 = v14;
  if ((v14 & 0x80000000) == 0)
  {
    std::system_category();
    v15 = 0;
    goto LABEL_21;
  }
LABEL_20:
  v15 = *__error();
  std::generic_category();
LABEL_21:
  if (v17 != v19)
    free(v17);
  return v15;
}

_QWORD *llvm::sys::fs::openNativeFileForRead@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;

  v9 = 0;
  result = (_QWORD *)llvm::sys::fs::openFileForRead(a1, &v9, a2, a3);
  v7 = result;
  if ((_DWORD)result)
  {
    v8 = v6;
    result = (_QWORD *)operator new();
    *result = &off_251C12820;
    result[1] = v7;
    result[2] = v8;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = result;
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v9;
  }
  return result;
}

_QWORD *llvm::sys::fs::readNativeFileSlice@<X0>(int a1@<W0>, void *a2@<X1>, unint64_t a3@<X2>, off_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v9;
  _QWORD *result;
  uint64_t v11;
  const std::error_category *v12;
  const std::error_category *v13;
  char v14;

  if (a3 >= 0x7FFFFFFF)
    v9 = 0x7FFFFFFFLL;
  else
    v9 = a3;
  do
  {
    *__error() = 0;
    result = (_QWORD *)pread(a1, a2, v9, a4);
    if (result != (_QWORD *)-1)
    {
      v14 = *(_BYTE *)(a5 + 8) & 0xFE;
      goto LABEL_11;
    }
  }
  while (*__error() == 4);
  v11 = *__error();
  v12 = std::generic_category();
  if ((_DWORD)v11)
  {
    v13 = v12;
    result = (_QWORD *)operator new();
    *result = &off_251C12820;
    result[1] = v11;
    result[2] = v13;
  }
  else
  {
    result = 0;
  }
  v14 = *(_BYTE *)(a5 + 8) | 1;
LABEL_11:
  *(_BYTE *)(a5 + 8) = v14;
  *(_QWORD *)a5 = result;
  return result;
}

unint64_t llvm::sys::fs::remove_directories(llvm::sys::fs *this, const llvm::Twine *a2)
{
  char *v4;
  std::error_category *v5;
  unint64_t v6;
  const std::error_category *v7;
  const std::error_category *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  char *v18;
  __int16 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  char v22;
  llvm::sys::fs::detail *v23;
  std::__shared_weak_count *v24;
  std::error_code v25;
  unint64_t v26;
  int v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v25.__val_ = 0;
  v25.__cat_ = std::system_category();
  llvm::sys::fs::directory_iterator::directory_iterator((llvm::sys::fs::directory_iterator *)&v23, this, &v25, 0);
  v20 = 0;
  v21 = 0;
  v22 = 1;
  if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v23, &v20))
  {
LABEL_13:
    std::system_category();
    v9 = 0;
    LODWORD(v6) = 0;
    goto LABEL_17;
  }
  while (1)
  {
    v4 = (char *)v23 + 8;
    llvm::sys::fs::directory_entry::status((llvm::sys::fs::detail *)((char *)v23 + 8), (uint64_t)&v26);
    if ((v28 & 1) != 0)
      break;
    if (v27 == 3)
    {
      v6 = llvm::sys::fs::remove_directories_impl<llvm::sys::fs::directory_entry>((uint64_t)v4, (uint64_t)a2);
      *(_QWORD *)&v25.__val_ = v6;
      v25.__cat_ = v7;
      if ((_DWORD)v6)
      {
        if ((a2 & 1) == 0)
          goto LABEL_16;
      }
    }
    v19 = 260;
    v18 = v4;
    v6 = llvm::sys::fs::remove((llvm::sys::fs *)&v18, (const llvm::Twine *)1);
    *(_QWORD *)&v25.__val_ = v6;
    v25.__cat_ = v5;
    if ((_DWORD)v6)
    {
      if ((a2 & 1) == 0)
        goto LABEL_16;
    }
LABEL_10:
    v6 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)v23, (llvm::sys::fs::detail::DirIterState *)v5);
    *(_QWORD *)&v25.__val_ = v6;
    v25.__cat_ = v8;
    if ((_DWORD)v6 && (a2 & 1) == 0)
      goto LABEL_16;
    if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v23, &v20))
      goto LABEL_13;
  }
  if ((a2 & 1) != 0)
    goto LABEL_10;
  v6 = v26;
LABEL_16:
  v9 = v6 & 0xFFFFFFFF00000000;
LABEL_17:
  v10 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v24;
  if (!v24)
    goto LABEL_26;
  v14 = (unint64_t *)&v24->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
    if (!(_DWORD)v6)
      goto LABEL_28;
LABEL_27:
    if ((_DWORD)a2)
      goto LABEL_28;
  }
  else
  {
LABEL_26:
    if ((_DWORD)v6)
      goto LABEL_27;
LABEL_28:
    v16 = llvm::sys::fs::remove(this, (const llvm::Twine *)1);
    if (!(_DWORD)v16 || (a2 & 1) != 0)
    {
      std::system_category();
      v9 = 0;
      LODWORD(v6) = 0;
    }
    else
    {
      v9 = v16 & 0xFFFFFFFF00000000;
      LODWORD(v6) = v16;
    }
  }
  return v9 & 0xFFFFFFFF00000000 | v6;
}

size_t llvm::sys::path::getDarwinConfDir(int a1, char **a2)
{
  int v3;
  size_t result;
  size_t v5;
  size_t v6;

  if (a1)
    v3 = 65537;
  else
    v3 = 65538;
  result = confstr(v3, 0, 0);
  if (result)
  {
    v5 = result;
    while (1)
    {
      llvm::SmallVectorImpl<char>::resizeImpl<false>(a2, v5);
      v5 = confstr(v3, *a2, (size_t)a2[1]);
      result = v5 != 0;
      if (!v5)
        break;
      if ((char *)v5 == a2[1])
      {
        v6 = v5 - 1;
        goto LABEL_10;
      }
    }
    v6 = 0;
LABEL_10:
    a2[1] = (char *)v6;
  }
  return result;
}

uint64_t llvm::sys::fs::typeForMode(llvm::sys::fs *this)
{
  unsigned int v1;

  v1 = (this >> 12) ^ 8;
  if (v1 == 15)
    return 9;
  else
    return dword_24AA2D9A8[v1];
}

unint64_t llvm::sys::fs::remove_directories_impl<llvm::sys::fs::directory_entry>(uint64_t a1, uint64_t a2)
{
  char *v4;
  llvm::sys::fs::detail *v5;
  int v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  llvm::sys::fs::detail::DirIterState *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  char *v22;
  __int16 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  char v26;
  llvm::sys::fs::detail *v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  std::system_category();
  v29 = 0;
  v4 = (char *)operator new(0x70uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = &off_251C13588;
  *((_QWORD *)v4 + 7) = 0;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 9;
  v4[60] = 1;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *(_OWORD *)(v4 + 92) = 0u;
  *((_DWORD *)v4 + 27) = 0xFFFF;
  v28 = (std::__shared_weak_count *)v4;
  *(_OWORD *)(v4 + 24) = 0u;
  v5 = (llvm::sys::fs::detail *)(v4 + 24);
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (_BYTE *)a1;
  else
    v7 = *(_BYTE **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v27 = v5;
  llvm::sys::fs::detail::directory_iterator_construct((uint64_t)v5, v7, v8, 0);
  v24 = 0;
  v25 = 0;
  v26 = 1;
  if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v27, &v24))
  {
LABEL_19:
    std::system_category();
    v14 = 0;
    v13 = 0;
    goto LABEL_23;
  }
  while (1)
  {
    v9 = (char *)v27 + 8;
    v11 = llvm::sys::fs::directory_entry::status((llvm::sys::fs::detail *)((char *)v27 + 8), (uint64_t)&v30);
    if ((v32 & 1) != 0)
      break;
    if (v31 == 3)
    {
      v12 = llvm::sys::fs::remove_directories_impl<llvm::sys::fs::directory_entry>(v9, a2, v11);
      v13 = v12;
      if ((_DWORD)v12)
      {
        if ((a2 & 1) == 0)
          goto LABEL_22;
      }
    }
    v23 = 260;
    v22 = v9;
    v12 = llvm::sys::fs::remove((llvm::sys::fs *)&v22, (const llvm::Twine *)1);
    v13 = v12;
    if ((_DWORD)v12)
    {
      if ((a2 & 1) == 0)
        goto LABEL_22;
    }
LABEL_16:
    v12 = llvm::sys::fs::detail::directory_iterator_increment((DIR **)v27, v10);
    v13 = v12;
    if ((_DWORD)v12 && (a2 & 1) == 0)
      goto LABEL_22;
    if (llvm::sys::fs::directory_iterator::operator==((uint64_t *)&v27, &v24))
      goto LABEL_19;
  }
  if ((a2 & 1) != 0)
    goto LABEL_16;
  v12 = v30;
  v13 = v30;
LABEL_22:
  v14 = v12 & 0xFFFFFFFF00000000;
LABEL_23:
  v15 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v28;
  if (v28)
  {
    v19 = (unint64_t *)&v28->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return v13 | v14;
}

void llvm::sys::Process::getPageSize(uint64_t a1@<X8>)
{
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  const std::error_category *v6;
  const std::error_category *v7;
  _QWORD *v8;

  {
    llvm::sys::Process::getPageSize(void)::page_size = getpagesize();
  }
  v4 = llvm::sys::Process::getPageSize(void)::page_size;
  if (llvm::sys::Process::getPageSize(void)::page_size == -1)
  {
    v5 = *__error();
    v6 = std::generic_category();
    if ((_DWORD)v5)
    {
      v7 = v6;
      v8 = (_QWORD *)operator new();
      *v8 = &off_251C12820;
      v8[1] = v5;
      v8[2] = v7;
    }
    else
    {
      v8 = 0;
    }
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_DWORD *)a1 = v4;
  }
}

uint64_t llvm::sys::Process::SafelyCloseFileDescriptor(llvm::sys::Process *this)
{
  int v1;
  unsigned int v2;
  int v3;
  sigset_t v5;
  sigset_t v6;

  v1 = (int)this;
  v5 = -1;
  v6 = -1;
  v2 = pthread_sigmask(3, &v6, &v5);
  if (!v2)
  {
    if ((close(v1) & 0x80000000) == 0)
    {
      v3 = pthread_sigmask(3, &v5, 0);
LABEL_5:
      v2 = v3;
      goto LABEL_6;
    }
    v2 = *__error();
    v3 = pthread_sigmask(3, &v5, 0);
    if (!v2)
      goto LABEL_5;
  }
LABEL_6:
  std::generic_category();
  return v2;
}

uint64_t checkTerminalEnvironmentForColors(void)
{
  char *v0;
  char v1;
  char *v2;
  size_t v3;
  int v5;
  BOOL v6;
  int v7;
  BOOL v10;

  v0 = getenv("TERM");
  v2 = v0;
  if (v0)
  {
    v3 = strlen(v0);
    switch(v3)
    {
      case 6uLL:
        if (*(_DWORD *)v2 == 2003269987 && *((_WORD *)v2 + 2) == 28265)
          goto LABEL_36;
        break;
      case 5uLL:
        v5 = v2[4];
        v6 = *(_DWORD *)v2 == 1970170220;
        v7 = 120;
        goto LABEL_18;
      case 4uLL:
        if (*(_DWORD *)v2 == 1769172577 || *(_DWORD *)v2 == 1953921138)
        {
LABEL_36:
          v1 = 1;
          return (v2 != 0) & v1;
        }
        goto LABEL_35;
      default:
        if (v3 < 6)
        {
LABEL_35:
          v1 = 0;
          return (v2 != 0) & v1;
        }
        break;
    }
    v5 = *((unsigned __int16 *)v2 + 2);
    v6 = *(_DWORD *)v2 == 1701995379;
    v7 = 28261;
LABEL_18:
    if (v6 && v5 == v7)
      goto LABEL_36;
    if (*(_DWORD *)v2 == 1919251576 && v2[4] == 109)
      goto LABEL_36;
    v10 = *(_DWORD *)v2 == 808547446 && v2[4] == 48;
    if (v10 || *(_DWORD *)v2 == 1953921138)
      goto LABEL_36;
    if (*(_DWORD *)&v2[v3 - 5] == 1869377379 && v2[v3 - 1] == 114)
      goto LABEL_36;
    goto LABEL_35;
  }
  return (v2 != 0) & v1;
}

uint64_t llvm::sys::Process::FileDescriptorHasColors(llvm::sys::Process *this)
{
  int v1;
  unsigned __int8 v2;
  TERMINAL *v3;
  int v4;
  uint64_t v5;
  int v6;
  TERMINAL *v7;
  int v9;

  v1 = (int)this;
  if (!isatty((int)this))
    return 0;
  {
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &terminalHasColors(int)::TermColorMutex, &dword_24A800000);
  }
  std::mutex::lock(&terminalHasColors(int)::TermColorMutex);
  v3 = set_curterm(0);
  v9 = 0;
  v4 = setupterm(0, v1, &v9);
  v5 = 0;
  if (!v4)
  {
    v6 = tigetnum("colors");
    if (v6 < 0)
      v5 = checkTerminalEnvironmentForColors();
    else
      v5 = v6 != 0;
    v7 = set_curterm(v3);
    del_curterm(v7);
  }
  std::mutex::unlock(&terminalHasColors(int)::TermColorMutex);
  return v5;
}

double llvm::sys::findProgramByName@<D0>(void *__s@<X0>, size_t __n@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  size_t v7;
  _BYTE *v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char v15;
  unsigned int v16;
  double result;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  __int128 *p_dst;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  size_t v27;
  const std::error_category *v28;
  uint64_t v29;
  uint64_t v30;
  size_t v31;
  unsigned __int8 v33[32];
  __int16 v34;
  unsigned __int8 v35[32];
  __int16 v36;
  unsigned __int8 v37[32];
  __int16 v38;
  __int128 __dst;
  unint64_t v40;
  __int16 v41;
  void *__src;
  __int128 __len;
  _BYTE v44[128];
  __int128 v45;
  _QWORD v46[34];

  v7 = __n;
  v46[32] = *MEMORY[0x24BDAC8D0];
  if (__n)
  {
    v9 = memchr(__s, 47, __n);
    if (v9)
    {
      if (v9 - (_BYTE *)__s != -1)
      {
        if (v7 > 0x7FFFFFFFFFFFFFF7)
LABEL_40:
          abort();
        if (v7 >= 0x17)
        {
          v29 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v7 | 7) != 0x17)
            v29 = v7 | 7;
          v30 = v29 + 1;
          v10 = (__int128 *)operator new(v29 + 1);
          *((_QWORD *)&v45 + 1) = v7;
          v46[0] = v30 | 0x8000000000000000;
          *(_QWORD *)&v45 = v10;
        }
        else
        {
          HIBYTE(v46[0]) = v7;
          v10 = &v45;
        }
        memmove(v10, __s, v7);
        *((_BYTE *)v10 + v7) = 0;
        *(_BYTE *)(a5 + 24) &= ~1u;
        result = *(double *)&v45;
        *(_OWORD *)a5 = v45;
        *(_QWORD *)(a5 + 16) = v46[0];
        return result;
      }
    }
  }
  *(_QWORD *)&v45 = v46;
  *((_QWORD *)&v45 + 1) = 0x1000000000;
  if (a4)
  {
    v11 = a3 + 16 * a4;
LABEL_9:
    v31 = v7;
    while (1)
    {
      v12 = *(_QWORD *)(a3 + 8);
      if (!v12)
        goto LABEL_27;
      v13 = *(_BYTE **)a3;
      v14 = (_BYTE *)(*(_QWORD *)a3 + v12);
      __src = v44;
      __len = xmmword_24AA2AC90;
      llvm::SmallVectorImpl<char>::append<char const*,void>(&__src, v13, v14);
      v41 = 261;
      *(_QWORD *)&__dst = __s;
      *((_QWORD *)&__dst + 1) = v7;
      v38 = 257;
      v36 = 257;
      v34 = 257;
      llvm::sys::path::append(&__src, 0, (unsigned __int8 *)&__dst, v37, v35, v33);
      llvm::SmallVectorTemplateBase<char,true>::push_back(&__src, 0);
      *(_QWORD *)&__len = __len - 1;
      v41 = 257;
      if (*(_BYTE *)__src)
      {
        *(_QWORD *)&__dst = __src;
        v15 = 3;
      }
      else
      {
        v15 = 1;
      }
      LOBYTE(v41) = v15;
      v16 = llvm::sys::fs::access((uint64_t)&__dst, 2);
      v18 = __src;
      v19 = v16;
      if (!v16)
        break;
LABEL_24:
      if (v18 != v44)
        free(v18);
      if (!v19)
        goto LABEL_33;
LABEL_27:
      a3 += 16;
      if (a3 == v11)
        goto LABEL_32;
    }
    v20 = v11;
    v21 = __len;
    if ((unint64_t)__len > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_40;
    if ((unint64_t)__len >= 0x17)
    {
      v23 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if (((unint64_t)__len | 7) != 0x17)
        v23 = __len | 7;
      v24 = v23 + 1;
      p_dst = (__int128 *)operator new(v23 + 1);
      *((_QWORD *)&__dst + 1) = v21;
      v40 = v24 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v40) = __len;
      p_dst = &__dst;
      if (!(_QWORD)__len)
        goto LABEL_23;
    }
    memmove(p_dst, v18, v21);
LABEL_23:
    *((_BYTE *)p_dst + v21) = 0;
    v7 = v31;
    *(_BYTE *)(a5 + 24) &= ~1u;
    result = *(double *)&__dst;
    *(_OWORD *)a5 = __dst;
    *(_QWORD *)(a5 + 16) = v40;
    v18 = __src;
    v11 = v20;
    goto LABEL_24;
  }
  v25 = getenv("PATH");
  if (v25)
  {
    v26 = (uint64_t)v25;
    v27 = strlen(v25);
    llvm::SplitString(v26, v27, (unsigned int *)&v45, ":", 1);
    if (DWORD2(v45))
    {
      a3 = v45;
      v11 = v45 + 16 * DWORD2(v45);
      goto LABEL_9;
    }
  }
LABEL_32:
  *(_BYTE *)(a5 + 24) |= 1u;
  v28 = std::generic_category();
  *(_QWORD *)a5 = 2;
  *(_QWORD *)(a5 + 8) = v28;
LABEL_33:
  if ((_QWORD *)v45 != v46)
    free((void *)v45);
  return result;
}

_QWORD *std::string::basic_string<llvm::StringRef,0>(_QWORD *__dst, uint64_t a2)
{
  size_t v2;
  const void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = *(const void **)a2;
  if (v2 >= 0x17)
  {
    v6 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v6 = v2 | 7;
    v7 = v6 + 1;
    v5 = operator new(v6 + 1);
    __dst[1] = v2;
    __dst[2] = v7 | 0x8000000000000000;
    *__dst = v5;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v2;
    v5 = __dst;
    if (!v2)
      goto LABEL_9;
  }
  memmove(v5, v4, v2);
LABEL_9:
  *((_BYTE *)v5 + v2) = 0;
  return __dst;
}

uint64_t printSymbolizedStackTrace(unsigned __int8 *a1, unint64_t a2, uint64_t a3, int a4)
{
  const std::error_category *v5;
  char *v6;
  char *v7;
  size_t v8;
  char *v9;
  void **v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  void *v15;
  unsigned __int8 *v16;
  char v17;
  char *v18;
  void *v20;
  void *v21;
  uint64_t v22;
  void *__dst[2];
  char v24;
  unsigned __int8 *v25;
  unint64_t v26;
  void *__p;
  unint64_t v28;
  __int16 *v29;
  uint64_t v30;
  __int16 v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD v34[2];
  void *v35[2];
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v25 = a1;
  v26 = a2;
  if (DisableSymbolicationFlag
    || getenv("LLVM_DISABLE_SYMBOLIZATION")
    || llvm::StringRef::find((uint64_t *)&v25, "llvm-symbolizer", 0xFuLL, 0) != -1)
  {
    return 0;
  }
  v5 = std::system_category();
  v37 = -1;
  v35[0] = 0;
  v35[1] = (void *)v5;
  v6 = getenv("LLVM_SYMBOLIZER_PATH");
  if (v6)
  {
    v7 = v6;
    v8 = strlen(v6);
    v9 = v7;
    v10 = 0;
    v11 = 0;
LABEL_6:
    llvm::sys::findProgramByName(v9, v8, (uint64_t)v10, v11, (uint64_t)&__p);
    llvm::ErrorOr<std::string>::moveAssign<std::string>((uint64_t)v35, (uint64_t *)&__p);
    if ((v30 & 1) == 0 && SHIBYTE(v29) < 0)
      operator delete(__p);
    goto LABEL_18;
  }
  v12 = v26;
  if (v26)
  {
    v13 = v25;
    v15 = (void *)(v12 >= v14 ? v14 : v12);
    if (v14 == -1)
    {
      v15 = 0;
      v16 = 0;
    }
    else
    {
      v16 = v13;
    }
    __dst[0] = v16;
    __dst[1] = v15;
    if (v15)
    {
      v9 = "llvm-symbolizer";
      v10 = __dst;
      v8 = 15;
      v11 = 1;
      goto LABEL_6;
    }
  }
LABEL_18:
  v17 = v37;
  if ((v37 & 1) != 0)
  {
    llvm::sys::findProgramByName("llvm-symbolizer", 0xFuLL, 0, 0, (uint64_t)&__p);
    llvm::ErrorOr<std::string>::moveAssign<std::string>((uint64_t)v35, (uint64_t *)&__p);
    if ((v30 & 1) == 0 && SHIBYTE(v29) < 0)
      operator delete(__p);
    v17 = v37;
  }
  if ((v17 & 1) == 0)
  {
    v31 = 261;
    __p = v25;
    v28 = v26;
    if (llvm::sys::fs::access((uint64_t)&__p, 0))
      llvm::sys::fs::getMainExecutable(__dst);
    else
      std::string::basic_string<llvm::StringRef,0>(__dst, (uint64_t)&v25);
    __p = 0;
    v28 = 0;
    v29 = &v31;
    v30 = 0x400000000;
    v32 = v34;
    v33 = 0;
    v34[0] = 0;
    v34[1] = 1;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    if (a4)
    {
      std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&v20, a4);
      v18 = (char *)v21;
      bzero(v21, 8 * a4);
      v21 = &v18[8 * a4];
      if (a4 < 0)
        abort();
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
    }
    llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)&__p);
    if (v24 < 0)
      operator delete(__dst[0]);
    v17 = v37;
  }
  if ((v17 & 1) == 0 && v36 < 0)
    operator delete(v35[0]);
  return 0;
}

void RemoveFilesToRemove(void)
{
  unint64_t v0;
  unint64_t *v1;
  const char *v2;
  stat v3;

  do
  if (v0)
  {
    v1 = (unint64_t *)v0;
    do
    {
      do
        v2 = (const char *)__ldaxr(v1);
      while (__stlxr(0, v1));
      if (v2 && !stat(v2, &v3) && (v3.st_mode & 0xF000) == 0x8000)
      {
        unlink(v2);
        do
          __ldaxr(v1);
        while (__stlxr((unint64_t)v2, v1));
      }
      v1 = (unint64_t *)atomic_load(v1 + 1);
    }
    while (v1);
  }
  do
}

void llvm::ErrorOr<std::string>::moveAssign<std::string>(uint64_t a1, uint64_t *a2)
{
  char v4;
  __int128 v5;
  const std::error_category *v6;
  uint64_t v7;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *(_BYTE *)(a1 + 24);
    if ((v4 & 1) == 0 && *(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      v4 = *(_BYTE *)(a1 + 24);
    }
    if ((a2[3] & 1) != 0)
    {
      *(_BYTE *)(a1 + 24) = v4 | 1;
      if ((a2[3] & 1) != 0)
      {
        v7 = *a2;
        v6 = (const std::error_category *)a2[1];
      }
      else
      {
        v6 = std::system_category();
        v7 = 0;
      }
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v6;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = v4 & 0xFE;
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = a2[2];
      *(_OWORD *)a1 = v5;
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
    }
  }
}

std::string *std::vector<std::string>::__push_back_slow_path<std::string const&>(std::string **a1, __int128 *a2)
{
  std::string *v2;
  unint64_t v3;
  unint64_t v4;
  std::allocator<std::string> *v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  unint64_t v16;
  std::string *v17;
  std::string *v18;
  __int128 v19;
  int64x2_t v20;
  std::string *v21;
  std::__split_buffer<std::string> v23;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (std::allocator<std::string> *)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v8 - (char *)v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v23.__end_cap_.__value_ = v7;
  if (v10)
  {
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v7, v10);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v14 = (std::string *)&v11[24 * v3];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v15 = *a2;
    v14->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
  }
  v17 = *a1;
  v16 = (unint64_t)a1[1];
  if ((std::string *)v16 == *a1)
  {
    v20 = vdupq_n_s64(v16);
    v18 = v14;
  }
  else
  {
    v18 = v14;
    do
    {
      v19 = *(_OWORD *)(v16 - 24);
      v18[-1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v16 - 8);
      *(_OWORD *)&v18[-1].__r_.__value_.__l.__data_ = v19;
      --v18;
      *(_QWORD *)(v16 - 16) = 0;
      *(_QWORD *)(v16 - 8) = 0;
      *(_QWORD *)(v16 - 24) = 0;
      v16 -= 24;
    }
    while ((std::string *)v16 != v17);
    v20 = *(int64x2_t *)a1;
  }
  *a1 = v18;
  a1[1] = v14 + 1;
  *(int64x2_t *)&v23.__begin_ = v20;
  v21 = a1[2];
  a1[2] = (std::string *)&v11[24 * v13];
  v23.__end_cap_.__value_ = v21;
  v23.__first_ = (std::__split_buffer<std::string>::pointer)v20.i64[0];
  std::__split_buffer<std::string>::~__split_buffer(&v23);
  return v14 + 1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>((uint64_t)a1, v7, a2);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  *result = 0;
  *result = *a3;
  *a3 = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -8;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -8;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      v17 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, (_QWORD *)a2, &v17);
      v9 = v17;
      if ((unint64_t)(*v17 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v10 = (unint64_t *)(*v17 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
      }
      *v9 = 0;
      *v9 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      v9[1] = 0;
      v9[1] = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = 0;
      *((_WORD *)v9 + 8) = *(_WORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
      v12 = *(_QWORD *)(a2 + 8);
      if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
      }
    }
    if ((unint64_t)(*(_QWORD *)a2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v15 = (unint64_t *)(*(_QWORD *)a2 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
    }
    a2 += 24;
  }
  return result;
}

uint64_t std::optional<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>>::operator=[abi:nn180100]<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,void>(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;

  if (*(_BYTE *)(a1 + 24))
  {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::operator=(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_DWORD *)(a2 + 8) = 0;
    v3 = *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
    *(_DWORD *)(a2 + 12) = v3;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v4;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

unsigned int *llvm::orc::ObjectLayer::add(uint64_t a1, llvm::orc::JITDylib *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *result;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;

  llvm::orc::JITDylib::getDefaultResourceTracker(a2, &v16);
  v7 = *a3;
  *a3 = 0;
  v12[0] = *(_QWORD *)a4;
  v12[1] = *(_QWORD *)(a4 + 8);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  v13 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = 0;
  v14 = *(_QWORD *)(a4 + 24);
  v15 = v7;
  *(_QWORD *)(a4 + 24) = 0;
  (*(void (**)(uint64_t, unsigned int **, uint64_t *, _QWORD *))(*(_QWORD *)a1 + 40))(a1, &v16, &v15, v12);
  if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(v14 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v12);
  v10 = v15;
  v15 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v16;
  if (v16)
    return llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v16);
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)a1, a2, &v4))
  {
    *v4 = -2;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::erase(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = v6;
    MEMORY[0x24BD1B398](v6[1], 8);
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>,std::string,llvm::orc::ExecutorAddr>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const void *v9;
  uint64_t v10;
  _QWORD v11[2];
  void *v12;
  __int128 v13;
  _BYTE v14[24];
  uint64_t v15;
  void *v16;
  __int128 v17;
  _BYTE v18[24];
  _QWORD *v19;
  __int128 v20;
  _QWORD v21[4];

  v21[3] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = xmmword_24AA2ACE0;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v19, v8 + 16);
  v9 = v19;
  if (!(_QWORD)v20)
    v9 = 0;
  v11[0] = v9;
  v11[1] = v20;
  if (llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>::serialize<std::string,llvm::orc::ExecutorAddr>(v11, a2, a3))
  {
    v12 = v14;
    v13 = xmmword_24AA2ACE0;
    if ((_QWORD)v20)
    {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v12, (const void **)&v19);
      v15 = a1;
      v16 = v18;
      v17 = xmmword_24AA2ACE0;
      if ((_QWORD)v13)
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v16, (const void **)&v12);
    }
    else
    {
      v15 = a1;
      v16 = v18;
      v17 = xmmword_24AA2ACE0;
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a4, (uint64_t)&v15);
    if (v16 != v18)
      free(v16);
    if (v12 != v14)
      free(v12);
  }
  else
  {
    getErrorErrorCat();
    v15 = 3;
    v16 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", &v15, &v10);
    *(_BYTE *)(a4 + 56) |= 1u;
    *(_QWORD *)a4 = v10;
    v10 = 0;
  }
  if (v19 != v21)
    free(v19);
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::ExecutorAddr>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  void *v7;
  __int128 v8;
  _BYTE v9[24];
  uint64_t v10;
  void *v11;
  __int128 v12;
  _BYTE v13[24];
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[4];

  v16[3] = *MEMORY[0x24BDAC8D0];
  v14 = v16;
  v15 = xmmword_24AA2ACE0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v14, 8uLL);
  if ((unint64_t)v15 >= 8)
  {
    *v14 = *a2;
    v7 = v9;
    v8 = xmmword_24AA2ACE0;
    if ((_QWORD)v15)
    {
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v7, (const void **)&v14);
      v10 = a1;
      v11 = v13;
      v12 = xmmword_24AA2ACE0;
      if ((_QWORD)v8)
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v11, (const void **)&v7);
    }
    else
    {
      v10 = a1;
      v11 = v13;
      v12 = xmmword_24AA2ACE0;
    }
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a3, (uint64_t)&v10);
    if (v11 != v13)
      free(v11);
    if (v7 != v9)
      free(v7);
  }
  else
  {
    getErrorErrorCat();
    v10 = 3;
    v11 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", &v10, &v6);
    *(_BYTE *)(a3 + 56) |= 1u;
    *(_QWORD *)a3 = v6;
    v6 = 0;
  }
  if (v14 != v16)
    free(v14);
}

_QWORD *llvm::jitlink::LinkGraph::addAnonymousSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  char v18[31];

  v11 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  v12 = v11;
  *v11 = 0;
  v11[1] = 0;
  v13 = 0x2000000000000000;
  if (!a5)
    v13 = 0;
  v14 = 0x800000000000000;
  if (a6)
    v14 = 0x1800000000000000;
  v11[2] = a2;
  v11[3] = v13 & 0xFE00000000000000 | a3 & 0x1FFFFFFFFFFFFFFLL | v14;
  v11[4] = a4;
  v15 = *(_QWORD *)(a2 + 16) + 56;
  v17 = v12;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v15, &v17, (uint64_t)v18);
  return v12;
}

void llvm::orc::ObjectLinkingLayer::Plugin::notifyEmitted(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::init(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 24 * v5;
      do
      {
        *(_QWORD *)result = -8;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = v5 + 3;
    v5[2] = 0x600000000;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 72 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 72 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::moveFromOldBuckets(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _QWORD *v12;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 72 * v6;
    do
    {
      *v7 = -4096;
      v7 += 9;
      v8 -= 72;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>((uint64_t *)a1, (_QWORD *)v4, &v12);
        v9 = v12;
        *v12 = *(_QWORD *)v4;
        v9[2] = 0x600000000;
        v9[1] = v9 + 3;
        v10 = (uint64_t)(v9 + 1);
        if (*(_DWORD *)(v4 + 16))
          llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(v10, v4 + 8);
        ++*(_DWORD *)(a1 + 8);
        v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11)
          free(v11);
      }
      v4 += 72;
    }
    while (v4 != a3);
  }
}

uint64_t llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(a1, a2);
      return a1;
    }
    v6 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v6)
    {
      if ((_DWORD)v6)
        memmove(*(void **)a1, v4, 8 * v6);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) >= v6)
    {
      if ((_DWORD)v7)
      {
        memmove(*(void **)a1, v4, 8 * v7);
        goto LABEL_12;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v6, 8);
    }
    v7 = 0;
LABEL_12:
    v8 = *(unsigned int *)(a2 + 8);
    if (v7 != v8)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v7), (const void *)(*(_QWORD *)a2 + 8 * v7), *(_QWORD *)a2 + 8 * v8 - (*(_QWORD *)a2 + 8 * v7));
LABEL_14:
    *(_DWORD *)(a1 + 8) = v6;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return a1;
}

double llvm::SmallVectorImpl<llvm::orc::JITDylib *>::assignRemote(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  double result;

  v5 = (void *)(a1 + 16);
  v4 = *(void **)a1;
  if (v4 != v5)
    free(v4);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  result = *(double *)(a2 + 8);
  *(double *)(a1 + 8) = result;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0;
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::destroyAll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = *(_QWORD *)a1 + 24;
    do
    {
      if ((*(_QWORD *)(v3 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = *(void **)(v3 - 16);
        if ((void *)v3 != v4)
          free(v4);
      }
      v3 += 72;
      v2 -= 72;
    }
    while (v2);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::moveFromOldBuckets(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::moveFromOldBuckets(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void **v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(void **)a2;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(void **)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(a1 + 8);
      v10 = (void **)(a2 + 8);
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v10);
    }
    a2 += 32;
  }
}

void std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 2);
        v3 -= 16;
        v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v7 = (unint64_t *)(v5 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
        }
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if ((*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = MEMORY[0x24BD1B398](*v3, 8);
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::operator=(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(a1);
  MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::DenseMap(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[24];

  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::init(a1, a3);
  if (a3)
  {
    v6 = a2 + 24 * a3;
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::try_emplace<llvm::orc::ExecutorSymbolDef const&>((uint64_t)a1, (uint64_t *)a2, (__n128 *)(a2 + 8), (uint64_t)v8);
      a2 += 24;
    }
    while (a2 != v6);
  }
  return a1;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::try_emplace<llvm::orc::ExecutorSymbolDef const&>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>)
{
  char v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v13);
  v9 = v13;
  if ((v8 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::orc::ExecutorSymbolDef const&>(a1, v13, a2, a3);
    v9 = v11;
    v10 = 1;
  }
  v12 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v12;
  *(_BYTE *)(a4 + 16) = v10;
}

__n128 llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::orc::ExecutorSymbolDef const&>(uint64_t a1, _QWORD *a2, uint64_t *a3, __n128 *a4)
{
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __n128 result;

  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v7 = (unint64_t *)(*v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  v9 = *a3;
  *v6 = *a3;
  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  result = *a4;
  *(__n128 *)(v6 + 1) = *a4;
  return result;
}

uint64_t llvm::jitlink::LinkGraph::LinkGraph(uint64_t a1, __int128 *a2, __int128 *a3, int a4, int a5, uint64_t a6)
{
  __int128 v11;
  std::string *v12;
  __int128 v13;
  __int128 v14;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 1;
  v11 = *a2;
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(a1 + 96) = v11;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  v12 = (std::string *)(a1 + 120);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v13 = *a3;
    v12->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  v14 = *(__int128 *)((char *)a3 + 24);
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a3 + 5);
  *(_OWORD *)(a1 + 144) = v14;
  *(_DWORD *)(a1 + 168) = a4;
  *(_DWORD *)(a1 + 172) = a5;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = a6;
  *(_DWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  return a1;
}

void std::allocator<llvm::orc::shared::AllocActionCallPair>::destroy[abi:nn180100](uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;

  v3 = (_QWORD *)a2[8];
  if (v3 != a2 + 11)
    free(v3);
  v4 = (_QWORD *)a2[1];
  if (v4 != a2 + 4)
    free(v4);
}

void std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unsigned int *v6;

  if (a2)
  {
    llvm::orc::JITDylib::unlinkMaterializationResponsibility(*a2, (uint64_t)a2);
    v3 = a2[5];
    if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v4 = (unint64_t *)(v3 + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)(a2 + 2));
    v6 = (unsigned int *)a2[1];
    if (v6)
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v6);
    JUMPOUT(0x24BD1B3A4);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = v3;
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v4);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, const void **a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  const void **v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = (_QWORD *)v4;
        v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:nn180100](v7, a3, (const void **)(v4 + 32)))
          break;
        v4 = *v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string>::operator()[abi:nn180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *std::vector<llvm::orc::ExecutorAddr>::vector(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  if (v3 != *(_QWORD *)a2)
  {
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](a1, v5 >> 3);
    v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr &>::~stream_operator_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr &>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v2;
  _QWORD v3[4];
  _QWORD v4[2];
  _QWORD *v5;

  v2 = **(_QWORD **)(a1 + 8);
  v3[0] = "{0:x}";
  v3[1] = 5;
  v3[2] = &v5;
  v3[3] = 1;
  v4[0] = &off_251C144A8;
  v4[1] = v2;
  v5 = v4;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)v3, a2);
}

void llvm::detail::provider_format_adapter<unsigned long long>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned long long,void>::format(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;

  v16 = a3;
  v17 = a4;
  v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      v12 = 0;
      v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78)
            goto LABEL_19;
          goto LABEL_16;
        }
LABEL_17:
        v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100)
        goto LABEL_17;
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6))
      v14 = 0;
    else
      v14 = v18;
    return write_unsigned<unsigned long>(a2, *a1, v14, v12, 0);
  }
  v7 = v15;
  v18 = 0;
  v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  v9 = v18;
  if (v8)
    v9 = 0;
  if ((v7 & 0xFFFFFFFE) == 2)
    v10 = v9 + 2;
  else
    v10 = v9;
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::destroyAll(_QWORD *result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = *((_DWORD *)result + 4);
  if (v1)
  {
    v2 = (uint64_t *)*result;
    v3 = *result + 40 * v1;
    do
    {
      v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2 + 1);
        v4 = *v2;
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v2 += 5;
    }
    while (v2 != (uint64_t *)v3);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>((uint64_t)a1, v8, a2);
    return (_QWORD *)v6;
  }
  return v5;
}

double llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  double result;

  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*v4 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  *v4 = 0;
  *v4 = *a3;
  *a3 = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 3) = 0u;
  *(_OWORD *)(v4 + 1) = 0u;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 40 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 40 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::moveFromOldBuckets((uint64_t *)a1, v4, &v4[5 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -8;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::moveFromOldBuckets(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;

  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*result;
    v8 = 40 * v6;
    do
    {
      *v7 = -8;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      v15 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v5, a2, &v15);
      v10 = v15;
      if ((unint64_t)(*v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v11 = (unint64_t *)(*v15 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
      }
      *v10 = 0;
      *v10 = *a2;
      *a2 = 0;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v10 + 1), (__int128 *)(a2 + 1));
      ++*((_DWORD *)v5 + 2);
      result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a2 + 1);
      v9 = *a2;
    }
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v13 = (unint64_t *)(v9 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
    a2 += 5;
  }
  return result;
}

BOOL llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>::serialize<std::string,llvm::orc::ExecutorAddr>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  uint64_t v6;

  result = llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(a1, a2);
  if (result)
  {
    if (a1[1] < 8uLL)
    {
      return 0;
    }
    else
    {
      *(_QWORD *)*a1 = *a3;
      v6 = a1[1] - 8;
      *a1 += 8;
      a1[1] = v6;
      return 1;
    }
  }
  return result;
}

uint64_t llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>::serialize<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;

  if (a1[1] < 8uLL)
    return 0;
  *(_QWORD *)*a1 = *a2;
  v3 = (_QWORD *)(*a1 + 8);
  v4 = a1[1] - 8;
  *a1 = v3;
  a1[1] = v4;
  if (v4 < 8)
    return 0;
  *v3 = *a3;
  v5 = a1[1] - 8;
  *a1 += 8;
  a1[1] = v5;
  return 1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  v7 = *a3;
  *result = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::moveFromOldBuckets(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -8;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t *v17;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -8;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      v17 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)v5, a2, &v17);
      v10 = v17;
      if ((unint64_t)(*v17 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v11 = (unint64_t *)(*v17 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 - 1, v11));
      }
      *v10 = 0;
      *v10 = *a2;
      *a2 = 0;
      v10[1] = 0;
      v10[2] = 0;
      *((_DWORD *)v10 + 6) = 0;
      v10[1] = a2[1];
      a2[1] = 0;
      *((_DWORD *)v10 + 4) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      v13 = *((_DWORD *)v10 + 5);
      *((_DWORD *)v10 + 5) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v13;
      v14 = *((_DWORD *)v10 + 6);
      *((_DWORD *)v10 + 6) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v14;
      ++*(_DWORD *)(v5 + 8);
      result = MEMORY[0x24BD1B398](0, 8);
      v9 = *a2;
    }
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v15 = (unint64_t *)(v9 + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
    }
    a2 += 4;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::InsertIntoBucketImpl<llvm::orc::ExecutorAddr>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::InsertIntoBucketImpl<llvm::orc::ExecutorAddr>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::moveFromOldBuckets(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::moveFromOldBuckets(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = *a2;
      *(_DWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = v10;
      *(_QWORD *)(v9 + 8) = a2[1];
      a2[1] = 0;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      LODWORD(v10) = *(_DWORD *)(v9 + 20);
      *(_DWORD *)(v9 + 20) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v10;
      LODWORD(v10) = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v10;
      ++*(_DWORD *)(v5 + 8);
      result = MEMORY[0x24BD1B398](0, 8);
    }
    a2 += 4;
  }
  return result;
}

uint64_t llvm::GlobalValue::setLinkage(uint64_t result, int a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = result;
  v3 = *(_DWORD *)(result + 32);
  if ((a2 - 7) < 2)
    v3 &= 0xFFFFFCCF;
  v4 = v3 & 0xFFFFFFF0 | a2 & 0xF;
  *(_DWORD *)(result + 32) = v4;
  if ((a2 & 0xFu) - 7 < 2)
    goto LABEL_7;
  if ((v3 & 0x30) != 0)
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_7:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::get<0ul,1ul,2ul,3ul>(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[9];

  v2 = 0;
  v8[8] = *MEMORY[0x24BDAC8D0];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<0ul>;
  v8[2] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<1ul>;
  v8[4] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<2ul>;
  v8[6] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<3ul>;
  v8[7] = 0;
  do
  {
    v3 = (uint64_t (*)(_QWORD *))v8[v2];
    v4 = v8[v2 + 1];
    v5 = (_QWORD *)(a1 + (v4 >> 1));
    if ((v4 & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v5 + v3);
    result = v3(v5);
    if (result)
      break;
    v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<0ul>(_QWORD *a1)
{
  if (*a1 == a1[4] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<1ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 40) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<2ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == *(_QWORD *)(a1 + 48) || v1 == 0)
    return 0;
  else
    return v1 - 48;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::getHelper<3ul>(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 == *(_QWORD *)(a1 + 56) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::increment<0ul,1ul,2ul,3ul>(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[9];

  v2 = 0;
  v8[8] = *MEMORY[0x24BDAC8D0];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<0ul>;
  v8[2] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<1ul>;
  v8[4] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<2ul>;
  v8[6] = llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<3ul>;
  v8[7] = 0;
  do
  {
    v3 = (uint64_t (*)(_QWORD *))v8[v2];
    v4 = v8[v2 + 1];
    v5 = (_QWORD *)(a1 + (v4 >> 1));
    if ((v4 & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v5 + v3);
    result = v3(v5);
    if ((result & 1) != 0)
      break;
    v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<0ul>(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<1ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<2ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL llvm::concat_iterator<llvm::GlobalValue,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::Function,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalVariable,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalAlias,false,false,void>,false,false>,llvm::ilist_iterator<llvm::ilist_detail::node_options<llvm::GlobalIFunc,false,false,void>,false,false>>::incrementHelper<3ul>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  if (v1 != v2)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

llvm::Module *std::unique_ptr<llvm::Module>::reset[abi:nn180100](llvm::Module **a1, llvm::Module *a2)
{
  llvm::Module *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::Module::~Module(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned long>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format((unint64_t *)(a1 + 8), a2, a3, a4);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>((uint64_t)a1, v7, a2);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  v7 = *a3;
  *result = *a3;
  if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
  }
  result[1] = 0;
  result[2] = 0;
  return result;
}

char *std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__assign_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_QWORD *)v25 = *(_QWORD *)v6;
          *((_DWORD *)v25 + 2) = *((_DWORD *)v6 + 2);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          *((_DWORD *)result + 2) = *((_DWORD *)v6++ + 2);
          result += 16;
        }
        while (v6 != v20);
      }
      v21 = v12;
      if (v20 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *v20++;
          *(_OWORD *)v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      abort();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

char *std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

uint64_t *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t *result;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD **)a1;
  if ((_DWORD)v4)
  {
    v6 = &v5[2 * v4];
    do
    {
      if ((unint64_t)(*v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v7 = (unint64_t *)(*v5 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
      }
      v5 += 2;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)a1;
  }
  result = (uint64_t *)MEMORY[0x24BD1B398](v5, 8);
  v10 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v10;
  if ((_DWORD)v10)
  {
    *(_QWORD *)a1 = operator new(16 * v10, (std::align_val_t)8uLL);
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>((uint64_t *)a1, (_QWORD *)a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>(uint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result[1] = a2[1];
  if (*((_DWORD *)result + 4))
  {
    v2 = 0;
    do
    {
      v3 = *result;
      v4 = *(_QWORD *)(*a2 + 16 * v2);
      *(_QWORD *)(*result + 16 * v2) = v4;
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v3 = *result;
        v4 = *(_QWORD *)(*result + 16 * v2);
      }
      if ((v4 | 8) != 0xFFFFFFFFFFFFFFF8)
        *(_WORD *)(v3 + 16 * v2 + 8) = *(_WORD *)(*a2 + 16 * v2 + 8);
      ++v2;
    }
    while (v2 < *((unsigned int *)result + 4));
  }
  return result;
}

_QWORD *std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~function(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void llvm::orc::ResourceTracker::~ResourceTracker(llvm::orc::ResourceTracker *this)
{
  unint64_t *v2;
  unint64_t v3;
  llvm::orc::ResourceTracker *v4;
  unint64_t v5;
  llvm::orc::ResourceTracker *v6[2];

  v2 = (unint64_t *)((char *)this + 8);
  v3 = atomic_load((unint64_t *)this + 1);
  v4 = *(llvm::orc::ResourceTracker **)((v3 & 0xFFFFFFFFFFFFFFFELL) + 32);
  v6[0] = this;
  v6[1] = v4;
  llvm::orc::ExecutionSession::runSessionLocked<llvm::orc::ExecutionSession::destroyResourceTracker(llvm::orc::ResourceTracker &)::$_0>((std::recursive_mutex *)v4, v6);
  v5 = atomic_load(v2);
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v5 & 0xFFFFFFFFFFFFFFFELL);
}

void llvm::orc::ExecutionSession::removeResourceTracker(char **this, std::recursive_mutex *a2, uint64_t a3)
{
  uint64_t sig;
  const void *v7;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int *v22;
  uint64_t *i;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  std::recursive_mutex *v30;
  uint64_t *j;
  uint64_t *v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  __int128 *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v59;
  _OWORD *v60;
  BOOL v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  void *__p;
  char *v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  char **v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  unint64_t v90;
  __int128 v91;
  unint64_t v92;
  uint64_t v93;

  __p = 0;
  v80 = 0;
  v81 = 0;
  *((_QWORD *)&v77 + 1) = 0;
  v78 = 0;
  *(_QWORD *)&v77 = (char *)&v77 + 8;
  v76 = 0uLL;
  std::recursive_mutex::lock(a2);
  if (&__p != (void **)&a2[1].__m_.__opaque[48])
  {
    v7 = *(const void **)&a2[1].__m_.__opaque[48];
    sig = a2[2].__m_.__sig;
    v8 = sig - (_QWORD)v7;
    v9 = (sig - (uint64_t)v7) >> 3;
    if ((const void *)sig == v7)
    {
      v10 = 0;
    }
    else
    {
      if ((v8 & 0x8000000000000000) != 0)
        abort();
      v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v81, (sig - (uint64_t)v7) >> 3);
      __p = v10;
      v80 = v10;
      v81 = &v10[8 * v11];
      memmove(v10, v7, v8);
    }
    v80 = &v10[8 * v9];
  }
  v12 = atomic_load((unint64_t *)(a3 + 8));
  atomic_store(v12 | 1, (unint64_t *)(a3 + 8));
  v13 = atomic_load((unint64_t *)(a3 + 8));
  v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
  v91 = 0uLL;
  v92 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0;
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFFELL) + 232) == a3)
  {
    v85 = 0;
    v86 = 0;
    LODWORD(v87) = 0;
    if (*(_DWORD *)(v14 + 248))
    {
      v16 = *(unsigned int *)(v14 + 256);
      if ((_DWORD)v16)
      {
        v17 = 32 * v16;
        v18 = *(_QWORD **)(v14 + 240);
        while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v18 += 4;
          v17 -= 32;
          if (!v17)
            goto LABEL_16;
        }
      }
      else
      {
        v18 = *(_QWORD **)(v14 + 240);
      }
      v65 = *(_QWORD *)(v14 + 240) + 32 * v16;
LABEL_94:
      if (v18 != (_QWORD *)v65)
      {
        v66 = (uint64_t *)v18[1];
        v67 = (uint64_t *)v18[2];
        while (v66 != v67)
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v85, v66++, (uint64_t)&v82);
        while (1)
        {
          v18 += 4;
          if (v18 == (_QWORD *)v65)
            break;
          if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_94;
        }
      }
    }
LABEL_16:
    if (*(_DWORD *)(v14 + 120))
    {
      v19 = *(unsigned int *)(v14 + 128);
      if ((_DWORD)v19)
      {
        v20 = 24 * v19;
        v21 = *(uint64_t **)(v14 + 112);
        while ((*v21 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v21 += 3;
          v20 -= 24;
          if (!v20)
            goto LABEL_21;
        }
      }
      else
      {
        v21 = *(uint64_t **)(v14 + 112);
      }
      v68 = *(_QWORD *)(v14 + 112) + 24 * v19;
LABEL_103:
      if (v21 != (uint64_t *)v68)
      {
        *(_QWORD *)&v82 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)&v85, v21, &v82) & 1) == 0)
        {
          v69 = *((_QWORD *)&v91 + 1);
          if (*((_QWORD *)&v91 + 1) >= v92)
          {
            v73 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v91, v21);
          }
          else
          {
            v70 = *v21;
            **((_QWORD **)&v91 + 1) = *v21;
            if ((unint64_t)(v70 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v71 = (unint64_t *)(v70 + 8);
              do
                v72 = __ldaxr(v71);
              while (__stlxr(v72 + 1, v71));
            }
            v73 = (char *)(v69 + 8);
          }
          *((_QWORD *)&v91 + 1) = v73;
        }
        while (1)
        {
          v21 += 3;
          if (v21 == (uint64_t *)v68)
            break;
          if ((*v21 | 8) != 0xFFFFFFFFFFFFFFF8)
            goto LABEL_103;
        }
      }
    }
LABEL_21:
    v22 = *(unsigned int **)(v14 + 232);
    if (v22)
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v22);
    *(_QWORD *)(v14 + 232) = 0;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v85);
  }
  else
  {
    *(_QWORD *)&v82 = 0;
    {
      v15 = v82;
      if ((_QWORD)v82 != *(_QWORD *)(v14 + 240) + 32 * *(unsigned int *)(v14 + 256))
      {
        std::vector<llvm::orc::SymbolStringPtr>::__vdeallocate((void **)&v91);
        v91 = *(_OWORD *)(v15 + 8);
        v92 = *(_QWORD *)(v15 + 24);
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)&v82 = v15 + 8;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v82);
        *(_QWORD *)v15 = -8192;
        *(int32x2_t *)(v14 + 248) = vadd_s32(*(int32x2_t *)(v14 + 248), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
  }
  v24 = (uint64_t *)*((_QWORD *)&v91 + 1);
  for (i = (uint64_t *)v91; i != v24; ++i)
  {
    *(_QWORD *)&v82 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v14 + 160), i, &v82)&& (_QWORD)v82 != *(_QWORD *)(v14 + 160) + 72 * *(unsigned int *)(v14 + 176))
    {
      v25 = v89;
      if ((unint64_t)v89 >= v90)
      {
        v29 = (uint64_t *)std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v88, i);
      }
      else
      {
        v26 = *i;
        *v89 = *i;
        if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 1, v27));
        }
        v29 = v25 + 1;
      }
      v89 = v29;
    }
  }
  v86 = 0;
  v87 = 0;
  v85 = (char **)&v86;
  v30 = *(std::recursive_mutex **)(v14 + 32);
  std::recursive_mutex::lock(v30);
  llvm::orc::ExecutionSession::IL_failSymbols(&v82, v14, (uint64_t *)v88, v89);
  std::recursive_mutex::unlock(v30);
  v32 = (uint64_t *)*((_QWORD *)&v91 + 1);
  for (j = (uint64_t *)v91; j != v32; ++j)
  {
    v93 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v14 + 112), *(_DWORD *)(v14 + 128), *j, &v93))v33 = v93;
    else
      v33 = *(_QWORD *)(v14 + 112) + 24 * *(unsigned int *)(v14 + 128);
    if (*(char *)(v33 + 18) < 0)
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::erase(v14 + 136, *j);
    if ((unint64_t)(*(_QWORD *)v33 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v34 = (unint64_t *)(*(_QWORD *)v33 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
    }
    *(_QWORD *)v33 = -16;
    *(int32x2_t *)(v14 + 120) = vadd_s32(*(int32x2_t *)(v14 + 120), (int32x2_t)0x1FFFFFFFFLL);
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v85, v86);
  v85 = &v88;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v85);
  v88 = (char *)&v91;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v88);
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v77, *((_QWORD **)&v77 + 1));
  v77 = v82;
  v78 = v83;
  if (v83)
  {
    *(_QWORD *)(*((_QWORD *)&v82 + 1) + 16) = (char *)&v77 + 8;
    *(_QWORD *)&v82 = (char *)&v82 + 8;
    *((_QWORD *)&v82 + 1) = 0;
    v83 = 0;
  }
  else
  {
    *(_QWORD *)&v77 = (char *)&v77 + 8;
  }
  v36 = v84;
  v84 = 0uLL;
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  v76 = v36;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldaxr(p_shared_owners);
    while (__stlxr(v39 - 1, p_shared_owners));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v41 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v82, *((_QWORD **)&v82 + 1));
  std::recursive_mutex::unlock(a2);
  *this = 0;
  v43 = atomic_load((unint64_t *)(a3 + 8));
  v45 = (char *)__p;
  v44 = v80;
  if (v80 != __p)
  {
    v46 = v43 & 0xFFFFFFFFFFFFFFFELL;
    v47 = *this;
    do
    {
      v48 = *((_QWORD *)v44 - 1);
      v44 -= 8;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v48 + 16))(&v75, v48, v46, a3);
      *(_QWORD *)&v82 = v47;
      *(_QWORD *)&v91 = v75;
      v75 = 0;
      llvm::ErrorList::join((uint64_t *)&v82, (uint64_t *)&v91, (uint64_t *)&v88);
      if ((_QWORD)v91)
        (*(void (**)(_QWORD))(*(_QWORD *)v91 + 8))(v91);
      if ((_QWORD)v82)
        (*(void (**)(_QWORD))(*(_QWORD *)v82 + 8))(v82);
      v47 = v88;
      *this = v88;
      v88 = 0;
      if (v75)
        (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    }
    while (v44 != v45);
  }
  v49 = (_QWORD *)v77;
  if ((__int128 *)v77 != (__int128 *)((char *)&v77 + 8))
  {
    do
    {
      v50 = (__int128 *)v49[4];
      v51 = *(_QWORD *)a2[1].__m_.__opaque;
      v53 = *(_QWORD *)(v51 + 8);
      v52 = *(_QWORD *)(v51 + 16);
      *(_QWORD *)&v82 = v53;
      *((_QWORD *)&v82 + 1) = v52;
      if (v52)
      {
        v54 = (unint64_t *)(v52 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>(&v74, &v82, (uint64_t *)&v76);
      llvm::orc::AsynchronousSymbolQuery::handleFailed(v50, &v74);
      if (v74)
        (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
      v56 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
      if (*((_QWORD *)&v82 + 1))
      {
        v57 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
          std::__shared_weak_count::__release_weak(v56);
        }
      }
      v59 = (_QWORD *)v49[1];
      if (v59)
      {
        do
        {
          v60 = v59;
          v59 = (_QWORD *)*v59;
        }
        while (v59);
      }
      else
      {
        do
        {
          v60 = (_OWORD *)v49[2];
          v61 = *(_QWORD *)v60 == (_QWORD)v49;
          v49 = v60;
        }
        while (!v61);
      }
      v49 = v60;
    }
    while (v60 != (__int128 *)((char *)&v77 + 8));
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v76 + 1);
  if (*((_QWORD *)&v76 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v76 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v77, *((_QWORD **)&v77 + 1));
  if (__p)
  {
    v80 = (char *)__p;
    operator delete(__p);
  }
}

